--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=12 LPM_WIDTH=4 data eq
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 16 
SUBDESIGN decode_0aa
( 
	data[3..0]	:	input;
	eq[11..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire1	: WIRE;
	enable_wire2	: WIRE;
	eq_node[11..0]	: WIRE;
	eq_wire1w[7..0]	: WIRE;
	eq_wire2w[7..0]	: WIRE;
	w_anode225w[3..0]	: WIRE;
	w_anode242w[3..0]	: WIRE;
	w_anode252w[3..0]	: WIRE;
	w_anode262w[3..0]	: WIRE;
	w_anode272w[3..0]	: WIRE;
	w_anode282w[3..0]	: WIRE;
	w_anode292w[3..0]	: WIRE;
	w_anode302w[3..0]	: WIRE;
	w_anode312w[3..0]	: WIRE;
	w_anode323w[3..0]	: WIRE;
	w_anode333w[3..0]	: WIRE;
	w_anode343w[3..0]	: WIRE;
	w_anode353w[3..0]	: WIRE;
	w_anode363w[3..0]	: WIRE;
	w_anode373w[3..0]	: WIRE;
	w_anode383w[3..0]	: WIRE;

BEGIN 
	data_wire[2..0] = data[2..0];
	enable_wire1 = (! data[3..3]);
	enable_wire2 = data[3..3];
	eq[] = eq_node[];
	eq_node[] = ( eq_wire2w[3..0], eq_wire1w[]);
	eq_wire1w[] = ( w_anode302w[3..3], w_anode292w[3..3], w_anode282w[3..3], w_anode272w[3..3], w_anode262w[3..3], w_anode252w[3..3], w_anode242w[3..3], w_anode225w[3..3]);
	eq_wire2w[] = ( w_anode383w[3..3], w_anode373w[3..3], w_anode363w[3..3], w_anode353w[3..3], w_anode343w[3..3], w_anode333w[3..3], w_anode323w[3..3], w_anode312w[3..3]);
	w_anode225w[] = ( (w_anode225w[2..2] & (! data_wire[2..2])), (w_anode225w[1..1] & (! data_wire[1..1])), (w_anode225w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode242w[] = ( (w_anode242w[2..2] & (! data_wire[2..2])), (w_anode242w[1..1] & (! data_wire[1..1])), (w_anode242w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode252w[] = ( (w_anode252w[2..2] & (! data_wire[2..2])), (w_anode252w[1..1] & data_wire[1..1]), (w_anode252w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode262w[] = ( (w_anode262w[2..2] & (! data_wire[2..2])), (w_anode262w[1..1] & data_wire[1..1]), (w_anode262w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode272w[] = ( (w_anode272w[2..2] & data_wire[2..2]), (w_anode272w[1..1] & (! data_wire[1..1])), (w_anode272w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode282w[] = ( (w_anode282w[2..2] & data_wire[2..2]), (w_anode282w[1..1] & (! data_wire[1..1])), (w_anode282w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode292w[] = ( (w_anode292w[2..2] & data_wire[2..2]), (w_anode292w[1..1] & data_wire[1..1]), (w_anode292w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode302w[] = ( (w_anode302w[2..2] & data_wire[2..2]), (w_anode302w[1..1] & data_wire[1..1]), (w_anode302w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode312w[] = ( (w_anode312w[2..2] & (! data_wire[2..2])), (w_anode312w[1..1] & (! data_wire[1..1])), (w_anode312w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode323w[] = ( (w_anode323w[2..2] & (! data_wire[2..2])), (w_anode323w[1..1] & (! data_wire[1..1])), (w_anode323w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode333w[] = ( (w_anode333w[2..2] & (! data_wire[2..2])), (w_anode333w[1..1] & data_wire[1..1]), (w_anode333w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode343w[] = ( (w_anode343w[2..2] & (! data_wire[2..2])), (w_anode343w[1..1] & data_wire[1..1]), (w_anode343w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode353w[] = ( (w_anode353w[2..2] & data_wire[2..2]), (w_anode353w[1..1] & (! data_wire[1..1])), (w_anode353w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode363w[] = ( (w_anode363w[2..2] & data_wire[2..2]), (w_anode363w[1..1] & (! data_wire[1..1])), (w_anode363w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode373w[] = ( (w_anode373w[2..2] & data_wire[2..2]), (w_anode373w[1..1] & data_wire[1..1]), (w_anode373w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode383w[] = ( (w_anode383w[2..2] & data_wire[2..2]), (w_anode383w[1..1] & data_wire[1..1]), (w_anode383w[0..0] & data_wire[0..0]), enable_wire2);
END;
--VALID FILE
