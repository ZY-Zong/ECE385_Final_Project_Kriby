
usb.elf:     file format elf32-littlenios2
usb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00014c6c memsz 0x00014c6c flags r-x
    LOAD off    0x00015c8c vaddr 0x10014c8c paddr 0x1001d024 align 2**12
         filesz 0x00008398 memsz 0x00008398 flags rw-
    LOAD off    0x0001e3bc vaddr 0x100253bc paddr 0x100253bc align 2**12
         filesz 0x00000000 memsz 0x00000184 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013f10  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000b4c  10014140  10014140  00015140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00008398  10014c8c  1001d024  00015c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000184  100253bc  100253bc  0001e3bc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000000e0  000000e0  0001e024  2**0
                  CONTENTS
  7 .sdram        00000000  10025540  10025540  0001e024  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001e024  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fb8  00000000  00000000  0001e048  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00024502  00000000  00000000  0001f000  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000955d  00000000  00000000  00043502  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000bf1d  00000000  00000000  0004ca5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002808  00000000  00000000  0005897c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003df4  00000000  00000000  0005b184  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001786c  00000000  00000000  0005ef78  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000767e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018d0  00000000  00000000  00076828  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007b9e6  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0007b9e9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007b9f5  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007b9f6  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007b9f7  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007b9fb  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007b9ff  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0007ba03  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0007ba0e  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0007ba19  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  0007ba24  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000037  00000000  00000000  0007ba35  2**0
                  CONTENTS, READONLY
 30 .jdi          00005b3a  00000000  00000000  0007ba6c  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0007dafc  00000000  00000000  000815a6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10014140 l    d  .rodata	00000000 .rodata
10014c8c l    d  .rwdata	00000000 .rwdata
100253bc l    d  .bss	00000000 .bss
000000e0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10025540 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 enemy.c
00000000 l    df *ABS*	00000000 game_logic.c
100253bc l     O .bss	00000004 ADDRESS_PTR
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 kirby.c
100253c0 l     O .bss	00000004 ADDRESS_PTR
10014c8c l     O .rwdata	00000040 image_indicator
10014ccc l     O .rwdata	0000686c Wall1
00000000 l    df *ABS*	00000000 main.c
100253c4 l     O .bss	00000004 ADDRESS_PTR
00000000 l    df *ABS*	00000000 star.c
100253c8 l     O .bss	00000004 ADDRESS_PTR
00000000 l    df *ABS*	00000000 test.c
100253cc l     O .bss	00000004 ADDRESS_PTR
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 usb_main.c
100253d0 l     O .bss	00000002 intStat
100253d2 l     O .bss	00000002 usb_ctl_val
100253d4 l     O .bss	00000002 ctl_reg
100253d6 l     O .bss	00000002 no_device
100253d8 l     O .bss	00000002 fs_device
100253da l     O .bss	00000001 toggle
100253db l     O .bss	00000001 data_size
100253dc l     O .bss	00000001 hot_plug_count
100253de l     O .bss	00000002 code
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
100149d2 l     O .rodata	00000010 zeroes.4404
1000708c l     F .text	000000bc __sbprintf
100149e2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1000729c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10008df4 l     F .text	00000008 __fp_unlock
10008e08 l     F .text	0000019c __sinit.part.1
10008fa4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
1001b538 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
1001b97c l     O .rwdata	00000020 lc_ctype_charset
1001b95c l     O .rwdata	00000020 lc_message_charset
1001b99c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10014a14 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000c478 l     F .text	000000fc __sprint_r.part.0
10014b38 l     O .rodata	00000010 zeroes.4349
1000dab4 l     F .text	000000bc __sbprintf
10014b48 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
10011920 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10011a34 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10011a60 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10011b54 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10011c3c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10011d28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10011f04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
1001d014 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
100121a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
100122e4 l     F .text	00000034 alt_dev_reg
1001bf84 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
100125c0 l     F .text	0000020c altera_avalon_jtag_uart_irq
100127cc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
100130a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10013508 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10013668 l     F .text	0000003c alt_get_errno
100136a4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10025414 g     O .bss	00000004 alt_instruction_exception_handler
1000babc g     F .text	00000074 _mprec_log10
1000bba8 g     F .text	0000008c __any_on
1000e068 g     F .text	00000054 _isatty_r
10014a20 g     O .rodata	00000028 __mprec_tinytens
10011e40 g     F .text	0000007c alt_main
10004c28 g     F .text	000000c0 _puts_r
10025440 g     O .bss	00000100 alt_irq
1000e0bc g     F .text	00000060 _lseek_r
100046f8 g     F .text	000002e8 get_keycode_value
1001d024 g       *ABS*	00000000 __flash_rwdata_start
100102f8 g     F .text	00000088 .hidden __eqdf2
10025540 g       *ABS*	00000000 __alt_heap_start
10001634 g     F .text	00000190 force_It_On_Ground
10004bec g     F .text	0000003c printf
1000e2d4 g     F .text	0000009c _wcrtomb_r
1000c338 g     F .text	0000005c __sseek
10009154 g     F .text	00000010 __sinit
1000e17c g     F .text	00000140 __swbuf_r
10009c28 g     F .text	0000007c _setlocale_r
10001f54 g     F .text	00000104 get_Kirby_Right_Pos
10008fac g     F .text	00000078 __sfmoreglue
10011ee0 g     F .text	00000024 __malloc_unlock
10003b00 g     F .text	00000080 UsbGetRetryCnt
1000a8f8 g     F .text	0000015c memmove
10000400 g     F .text	00000088 IO_init
10002234 g     F .text	000000d8 kirby_Spitting
1000026c g     F .text	00000084 GameStart
1000913c g     F .text	00000018 _cleanup
1000ab7c g     F .text	000000a8 _Balloc
10010380 g     F .text	000000dc .hidden __gtdf2
10013a90 g     F .text	00000024 altera_nios2_gen2_irq_init
10001d4c g     F .text	00000104 get_Kirby_Ceil_Pos
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000e00c g     F .text	0000005c _fstat_r
100253f8 g     O .bss	00000004 errno
1000c2b4 g     F .text	00000008 __seofread
10025400 g     O .bss	00000004 alt_argv
10024fe4 g       *ABS*	00000000 _gp
10012178 g     F .text	00000030 usleep
10001bc0 g     F .text	00000088 will_Touch_Ground
1001be04 g     O .rwdata	00000180 alt_fd_list
10013ab4 g     F .text	00000090 alt_find_dev
1000a7b0 g     F .text	00000148 memcpy
10008dfc g     F .text	0000000c _cleanup_r
10011738 g     F .text	000000dc .hidden __floatsidf
100135ec g     F .text	0000007c alt_io_redirect
1001045c g     F .text	000000f4 .hidden __ltdf2
10001b34 g     F .text	00000044 frame_Time
10014140 g       *ABS*	00000000 __DTOR_END__
10004ce8 g     F .text	00000014 puts
10013d10 g     F .text	0000009c alt_exception_cause_generated_bad_addr
1000c198 g     F .text	00000074 __fpclassifyd
1000ba18 g     F .text	000000a4 __ratio
1000da98 g     F .text	0000001c __vfiprintf_internal
100129c4 g     F .text	0000021c altera_avalon_jtag_uart_read
10004bbc g     F .text	00000030 _printf_r
000000e0 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10004ad8 g     F .text	00000064 .hidden __udivsi3
10011b90 g     F .text	000000ac isatty
10014a70 g     O .rodata	000000c8 __mprec_tens
100027c4 g     F .text	00000208 update_Star
10009ca4 g     F .text	0000000c __locale_charset
100253f4 g     O .bss	00000004 __malloc_top_pad
1000318c g     F .text	00000268 UsbGetConfigDesc2
1001cfec g     O .rwdata	00000004 __mb_cur_max
10009cd4 g     F .text	0000000c _localeconv_r
1000afb0 g     F .text	0000003c __i2b
100095d8 g     F .text	000004c8 __sfvwrite_r
1000c20c g     F .text	00000054 _sbrk_r
1000e11c g     F .text	00000060 _read_r
1001d00c g     O .rwdata	00000004 alt_max_fd
1000dd00 g     F .text	000000f0 _fclose_r
10008dc4 g     F .text	00000030 fflush
100253f0 g     O .bss	00000004 __malloc_max_sbrked_mem
1000f07c g     F .text	000008ac .hidden __adddf3
1000b7c0 g     F .text	0000010c __b2d
1000eab8 g     F .text	000005c4 .hidden __umoddi3
10011d64 g     F .text	000000dc lseek
1001cfe4 g     O .rwdata	00000004 _global_impure_ptr
1000bc34 g     F .text	00000564 _realloc_r
10025540 g       *ABS*	00000000 __bss_end
10013418 g     F .text	000000f0 alt_iic_isr_register
10013988 g     F .text	00000108 alt_tick
1000e4bc g     F .text	000005fc .hidden __udivdi3
1000df68 g     F .text	00000024 _fputwc_r
10014a48 g     O .rodata	00000028 __mprec_bigtens
1000ad94 g     F .text	00000104 __s2b
10011814 g     F .text	000000a8 .hidden __floatunsidf
100007b8 g     F .text	00000e7c updateKirby
1000b500 g     F .text	00000060 __mcmp
10002bdc g     F .text	00000100 UsbSetAddress
10009174 g     F .text	00000018 __fp_lock_all
100133cc g     F .text	0000004c alt_ic_irq_enabled
100138ec g     F .text	0000009c alt_alarm_stop
10025408 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
1001bddc g     O .rwdata	00000028 alt_dev_null
10013088 g     F .text	00000020 alt_dcache_flush_all
1000ae98 g     F .text	00000068 __hi0bits
10000504 g     F .text	00000074 IO_read
100116b8 g     F .text	00000080 .hidden __fixdfsi
1001d024 g       *ABS*	00000000 __ram_rwdata_end
1001d004 g     O .rwdata	00000008 alt_dev_list
100121e4 g     F .text	00000100 write
10014c8c g       *ABS*	00000000 __ram_rodata_end
10011a9c g     F .text	000000b8 fstat
1001045c g     F .text	000000f4 .hidden __ledf2
10003b80 g     F .text	00000080 UsbPrintMem
10001c48 g     F .text	00000104 get_Kirby_Botton_Pos
1000b278 g     F .text	00000140 __pow5mult
1000c58c g     F .text	0000150c ___vfiprintf_internal_r
100253e8 g     O .bss	00000004 __nlocale_changed
10004b3c g     F .text	00000058 .hidden __umodsi3
10025540 g       *ABS*	00000000 end
10012500 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10014140 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
100118bc g     F .text	00000064 .hidden __clzsi2
10012be0 g     F .text	00000224 altera_avalon_jtag_uart_write
10009164 g     F .text	00000004 __sfp_lock_acquire
1000a6cc g     F .text	000000e4 memchr
10004d94 g     F .text	000022dc ___vfprintf_internal_r
100034f4 g     F .text	00000100 UsbClassRequest
100092c8 g     F .text	00000310 _free_r
10009cb0 g     F .text	00000010 __locale_mb_cur_max
10013f8c g     F .text	00000180 __call_exitprocs
100253e4 g     O .bss	00000004 __mlocale_changed
1001cff0 g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
1002540c g     O .bss	00000004 _alt_tick_rate
1000b3b8 g     F .text	00000148 __lshift
10025410 g     O .bss	00000004 _alt_nticks
10011f40 g     F .text	00000104 read
10012350 g     F .text	0000004c alt_sys_init
10000618 g     F .text	000001a0 upload_Kirby_Info
10013e74 g     F .text	00000118 __register_exitproc
1000afec g     F .text	0000028c __multiply
1001286c g     F .text	00000068 altera_avalon_jtag_uart_close
10004b94 g     F .text	00000028 .hidden __mulsi3
10014c8c g       *ABS*	00000000 __ram_rwdata_start
10014140 g       *ABS*	00000000 __ram_rodata_start
10025418 g     O .bss	00000028 __malloc_current_mallinfo
1000b8cc g     F .text	0000014c __d2b
10002058 g     F .text	000000f4 get_Wall_Info
10002cdc g     F .text	00000148 UsbGetDeviceDesc1
1001239c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10013c4c g     F .text	000000c4 alt_get_fd
10012f30 g     F .text	00000158 alt_busy_sleep
1000dbd0 g     F .text	00000054 _close_r
10000324 g     F .text	000000dc initial_Registers
10013df8 g     F .text	0000007c memcmp
1001245c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10025540 g       *ABS*	00000000 __alt_stack_base
100124ac g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10007148 g     F .text	00000154 __swsetup_r
1000f928 g     F .text	000009d0 .hidden __divdf3
10009024 g     F .text	00000118 __sfp
1000bb30 g     F .text	00000078 __copybits
1001b9d4 g     O .rwdata	00000408 __malloc_av_
10009170 g     F .text	00000004 __sinit_lock_release
10010550 g     F .text	0000086c .hidden __muldf3
1000c260 g     F .text	00000054 __sread
10003a7c g     F .text	00000084 UsbWaitTDListDone
10013b44 g     F .text	00000108 alt_find_file
100130e4 g     F .text	000000a4 alt_dev_llist_insert
10011ebc g     F .text	00000024 __malloc_lock
100120c8 g     F .text	000000b0 sbrk
10008d68 g     F .text	0000005c _fflush_r
1000dc24 g     F .text	000000dc _calloc_r
100253bc g       *ABS*	00000000 __bss_start
1000aa54 g     F .text	00000128 memset
1000266c g     F .text	00000038 main
10025404 g     O .bss	00000004 alt_envp
100253ec g     O .bss	00000004 __malloc_max_total_mem
100123fc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
100033f4 g     F .text	00000100 UsbSetConfig
1000e2bc g     F .text	00000018 __swbuf
1000214c g     F .text	000000e8 kirby_Inhaling
1000c394 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000ddf0 g     F .text	00000014 fclose
100029cc g     F .text	000000c0 test_keyboard
100074c4 g     F .text	00001688 _dtoa_r
10009ec0 g     F .text	0000080c _malloc_r
1000e430 g     F .text	00000030 __ascii_wctomb
1001d010 g     O .rwdata	00000004 alt_errno
100002f0 g     F .text	00000034 initial_Game_State
10009aa0 g     F .text	000000c4 _fwalk
100049e0 g     F .text	00000084 .hidden __divsi3
100091a4 g     F .text	00000124 _malloc_trim_r
100035f4 g     F .text	00000148 UsbGetHidDesc
10014140 g       *ABS*	00000000 __CTOR_END__
1000c39c g     F .text	000000dc strcmp
10014140 g       *ABS*	00000000 __flash_rodata_start
10014140 g       *ABS*	00000000 __DTOR_LIST__
100026a4 g     F .text	0000004c initial_Star
100102f8 g     F .text	00000088 .hidden __nedf2
10002ae4 g     F .text	00000044 UsbRead
10012318 g     F .text	00000038 alt_irq_init
10012044 g     F .text	00000084 alt_release_fd
10014b58 g     O .rodata	00000100 .hidden __clz_tab
100253e0 g     O .bss	00000004 _PathLocale
10001b78 g     F .text	00000048 map_Width
10013dac g     F .text	00000014 atexit
1000db70 g     F .text	00000060 _write_r
10009ce0 g     F .text	00000018 setlocale
1001cfe8 g     O .rwdata	00000004 _impure_ptr
100253fc g     O .bss	00000004 alt_argc
10008b4c g     F .text	0000021c __sflush_r
100017c4 g     F .text	00000370 force_It_Inside_Map
100131e8 g     F .text	00000060 _do_dtors
10009ccc g     F .text	00000008 __locale_cjk_lang
10001e50 g     F .text	00000104 get_Kirby_Left_Pos
10002610 g     F .text	0000005c kirby_Screen_Center_X
10000020 g       .exceptions	00000000 alt_irq_entry
1000b75c g     F .text	00000064 __ulp
1000918c g     F .text	00000018 __fp_unlock_all
1001cffc g     O .rwdata	00000008 alt_fs_list
10002368 g     F .text	000002a8 kirby_Kick_Ass
1000373c g     F .text	00000340 UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
10009cf8 g     F .text	0000000c localeconv
10013268 g     F .text	00000050 alt_ic_isr_register
10000578 g     F .text	000000a0 initial_Kirby
1001d024 g       *ABS*	00000000 _edata
10025540 g       *ABS*	00000000 _end
10002a8c g     F .text	00000058 UsbWrite
1000de04 g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
100128d4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10013340 g     F .text	0000008c alt_ic_irq_disable
1000c2bc g     F .text	0000007c __swrite
1001cff4 g     O .rwdata	00000004 __malloc_trim_threshold
10009cc0 g     F .text	0000000c __locale_msgcharset
10013dc0 g     F .text	00000038 exit
10003c00 g     F .text	00000af8 usb_initialize
10009b64 g     F .text	000000c4 _fwalk_reent
1000b560 g     F .text	000001fc __mdiff
10004a64 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10009168 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10000488 g     F .text	0000007c IO_write
1001410c g     F .text	00000034 _exit
10012e04 g     F .text	0000012c alt_alarm_start
10009d04 g     F .text	000001bc __smakebuf_r
10004cfc g     F .text	00000098 strlen
10013790 g     F .text	0000015c open
10010380 g     F .text	000000dc .hidden __gedf2
1000230c g     F .text	0000005c kirby_Return_Normal
1001cff8 g     O .rwdata	00000004 __wctomb
100026f0 g     F .text	00000044 spit_Star
1000c574 g     F .text	00000018 __sprint_r
10013248 g     F .text	00000020 alt_icache_flush_all
1001d018 g     O .rwdata	00000004 alt_priority_mask
10002734 g     F .text	00000090 upload_Star_Info
100132b8 g     F .text	00000088 alt_ic_irq_enable
10007070 g     F .text	0000001c __vfprintf_internal
1000e460 g     F .text	0000005c _wctomb_r
10010dbc g     F .text	000008fc .hidden __subdf3
1000af00 g     F .text	000000b0 __lo0bits
10002ffc g     F .text	00000190 UsbGetConfigDesc1
1001d01c g     O .rwdata	00000008 alt_alarm_list
10013188 g     F .text	00000060 _do_ctors
10002b28 g     F .text	000000b4 UsbSoftReset
1000e370 g     F .text	000000c0 wcrtomb
1001195c g     F .text	000000d8 close
10002e24 g     F .text	000001d8 UsbGetDeviceDesc2
10011ca4 g     F .text	00000084 alt_load
1000df8c g     F .text	00000080 fputwc
1000916c g     F .text	00000004 __sinit_lock_acquire
1000ac4c g     F .text	00000148 __multadd
1000ac24 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	008400b4 	movhi	r2,4098
10000140:	10951004 	addi	r2,r2,21568
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	008400b4 	movhi	r2,4098
10000158:	10951004 	addi	r2,r2,21568
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0810c17 	ldw	r2,1072(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0810c17 	ldw	r2,1072(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	068400b4 	movhi	gp,4098
    ori gp, gp, %lo(_gp)
1000023c:	d693f914 	ori	gp,gp,20452
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	008400b4 	movhi	r2,4098
    ori r2, r2, %lo(__bss_start)
10000244:	1094ef14 	ori	r2,r2,21436

    movhi r3, %hi(__bss_end)
10000248:	00c400b4 	movhi	r3,4098
    ori r3, r3, %lo(__bss_end)
1000024c:	18d55014 	ori	r3,r3,21824

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	0011ca40 	call	10011ca4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	0011e400 	call	10011e40 <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <GameStart>:
#include "test.h"
#include "star.h"

#include <stdio.h>

void GameStart() {
1000026c:	defffa04 	addi	sp,sp,-24
10000270:	dfc00515 	stw	ra,20(sp)
10000274:	df000415 	stw	fp,16(sp)
10000278:	df000404 	addi	fp,sp,16
        printf("\nkirby->x = %d; kirby->y = %d; kirby->frame = %d; kirby->action = %d\n", kirby->x, kirby->y, kirby->frame, kirby->action);
        printf("\nkirby->health = %d; kirby->is_inhaled = %d; kirby->inhaling = %d; kirby->in_slope = %d; kirby->spitting = %d\n", kirby->health, kirby->is_inhaled, kirby->inhaling, kirby->in_slope, kirby->spitting);
        printf("\n/************* end check 0 *************/\n");
    #endif

    usb_initialize();
1000027c:	0003c000 	call	10003c00 <usb_initialize>
        printf("\nkirby->x = %d; kirby->y = %d; kirby->frame = %d; kirby->action = %d\n", kirby->x, kirby->y, kirby->frame, kirby->action);
        printf("\nkirby->health = %d; kirby->is_inhaled = %d; kirby->inhaling = %d; kirby->in_slope = %d; kirby->spitting = %d\n", kirby->health, kirby->is_inhaled, kirby->inhaling, kirby->in_slope, kirby->spitting);
        printf("\n/************* end check 1 *************/\n");
    #endif

    printf("What's wrong with USB?");
10000280:	01040074 	movhi	r4,4097
10000284:	21105004 	addi	r4,r4,16704
10000288:	0004bec0 	call	10004bec <printf>
    initial_Registers();
1000028c:	00003240 	call	10000324 <initial_Registers>
        printf("\nkirby->x = %d; kirby->y = %d; kirby->frame = %d; kirby->action = %d\n", kirby->x, kirby->y, kirby->frame, kirby->action);
        printf("\nkirby->health = %d; kirby->is_inhaled = %d; kirby->inhaling = %d; kirby->in_slope = %d; kirby->spitting = %d\n", kirby->health, kirby->is_inhaled, kirby->inhaling, kirby->in_slope, kirby->spitting);
        printf("\n/************* end check 2 *************/\n");
    #endif

    initial_Kirby(kirby);
10000290:	e13ffd17 	ldw	r4,-12(fp)
10000294:	00005780 	call	10000578 <initial_Kirby>
        printf("\nkirby->x = %d; kirby->y = %d; kirby->frame = %d; kirby->action = %d\n", kirby->x, kirby->y, kirby->frame, kirby->action);
        printf("\nkirby->health = %d; kirby->is_inhaled = %d; kirby->inhaling = %d; kirby->in_slope = %d; kirby->spitting = %d\n", kirby->health, kirby->is_inhaled, kirby->inhaling, kirby->in_slope, kirby->spitting);
        printf("\n/************* end check initial kirby *************/\n");
    #endif

    initial_Star(star);
10000298:	e13ffe17 	ldw	r4,-8(fp)
1000029c:	00026a40 	call	100026a4 <initial_Star>

    kirby->is_inhaled = 1;
100002a0:	e0bffd17 	ldw	r2,-12(fp)
100002a4:	00c00044 	movi	r3,1
100002a8:	10c00a15 	stw	r3,40(r2)
    
    int keycode = 0;
100002ac:	e03ffc15 	stw	zero,-16(fp)
    int pre_keycode = 0;
100002b0:	e03fff15 	stw	zero,-4(fp)

    while (1)
    {
        pre_keycode = keycode;
100002b4:	e0bffc17 	ldw	r2,-16(fp)
100002b8:	e0bfff15 	stw	r2,-4(fp)
        keycode = get_keycode_value();
100002bc:	00046f80 	call	100046f8 <get_keycode_value>
100002c0:	e0bffc15 	stw	r2,-16(fp)
            printf("\nkirby->health = %d; kirby->is_inhaled = %d; kirby->inhaling = %d; kirby->in_slope = %d; kirby->spitting = %d\n", kirby->health, kirby->is_inhaled, kirby->inhaling, kirby->in_slope, kirby->spitting);
            printf("\n/************* end check get keycode *************/\n");
        #endif

        // test_keyboard(keycode);
        updateKirby(kirby, star, keycode, pre_keycode);
100002c4:	e1ffff17 	ldw	r7,-4(fp)
100002c8:	e1bffc17 	ldw	r6,-16(fp)
100002cc:	e17ffe17 	ldw	r5,-8(fp)
100002d0:	e13ffd17 	ldw	r4,-12(fp)
100002d4:	00007b80 	call	100007b8 <updateKirby>
        upload_Kirby_Info(kirby);
100002d8:	e13ffd17 	ldw	r4,-12(fp)
100002dc:	00006180 	call	10000618 <upload_Kirby_Info>

        spit_Star(kirby, star);
100002e0:	e17ffe17 	ldw	r5,-8(fp)
100002e4:	e13ffd17 	ldw	r4,-12(fp)
100002e8:	00026f00 	call	100026f0 <spit_Star>

        // TO DO: Check game_state.interrupt why changed
        // if (game_state->interrupt != 0) {
        //     break;
        // }
    }
100002ec:	003ff106 	br	100002b4 <__alt_data_end+0xf80002b4>

100002f0 <initial_Game_State>:
    
}

void initial_Game_State (Game * game_state) {
100002f0:	defffe04 	addi	sp,sp,-8
100002f4:	df000115 	stw	fp,4(sp)
100002f8:	df000104 	addi	fp,sp,4
100002fc:	e13fff15 	stw	r4,-4(fp)
    game_state->interrupt = 0;
10000300:	e0bfff17 	ldw	r2,-4(fp)
10000304:	10000115 	stw	zero,4(r2)
    game_state->map = 0;
10000308:	e0bfff17 	ldw	r2,-4(fp)
1000030c:	10000015 	stw	zero,0(r2)
}
10000310:	0001883a 	nop
10000314:	e037883a 	mov	sp,fp
10000318:	df000017 	ldw	fp,0(sp)
1000031c:	dec00104 	addi	sp,sp,4
10000320:	f800283a 	ret

10000324 <initial_Registers>:


void initial_Registers() {
10000324:	deffff04 	addi	sp,sp,-4
10000328:	df000015 	stw	fp,0(sp)
1000032c:	d839883a 	mov	fp,sp
    REG_0_MAP_INFO      = 0;
10000330:	d080f617 	ldw	r2,984(gp)
10000334:	10000015 	stw	zero,0(r2)
    REG_1_KIRBY_IMAGE   = 0;
10000338:	d080f617 	ldw	r2,984(gp)
1000033c:	10800104 	addi	r2,r2,4
10000340:	10000015 	stw	zero,0(r2)
    REG_2_KIRBY_MAP_POS = 0;
10000344:	d080f617 	ldw	r2,984(gp)
10000348:	10800204 	addi	r2,r2,8
1000034c:	10000015 	stw	zero,0(r2)
    REG_3_STAR          = 0;
10000350:	d080f617 	ldw	r2,984(gp)
10000354:	10800304 	addi	r2,r2,12
10000358:	10000015 	stw	zero,0(r2)
    REG_4_              = 0;
1000035c:	d080f617 	ldw	r2,984(gp)
10000360:	10800404 	addi	r2,r2,16
10000364:	10000015 	stw	zero,0(r2)
    REG_5_              = 0;
10000368:	d080f617 	ldw	r2,984(gp)
1000036c:	10800504 	addi	r2,r2,20
10000370:	10000015 	stw	zero,0(r2)
    REG_6_              = 0;
10000374:	d080f617 	ldw	r2,984(gp)
10000378:	10800604 	addi	r2,r2,24
1000037c:	10000015 	stw	zero,0(r2)
    REG_7_              = 0;
10000380:	d080f617 	ldw	r2,984(gp)
10000384:	10800704 	addi	r2,r2,28
10000388:	10000015 	stw	zero,0(r2)
    REG_8_              = 0;
1000038c:	d080f617 	ldw	r2,984(gp)
10000390:	10800804 	addi	r2,r2,32
10000394:	10000015 	stw	zero,0(r2)
    REG_9_              = 0;
10000398:	d080f617 	ldw	r2,984(gp)
1000039c:	10800904 	addi	r2,r2,36
100003a0:	10000015 	stw	zero,0(r2)
    REG_10_             = 0;
100003a4:	d080f617 	ldw	r2,984(gp)
100003a8:	10800a04 	addi	r2,r2,40
100003ac:	10000015 	stw	zero,0(r2)
    REG_11_             = 0;
100003b0:	d080f617 	ldw	r2,984(gp)
100003b4:	10800b04 	addi	r2,r2,44
100003b8:	10000015 	stw	zero,0(r2)
    REG_12_             = 0;
100003bc:	d080f617 	ldw	r2,984(gp)
100003c0:	10800c04 	addi	r2,r2,48
100003c4:	10000015 	stw	zero,0(r2)
    REG_13_             = 0;
100003c8:	d080f617 	ldw	r2,984(gp)
100003cc:	10800d04 	addi	r2,r2,52
100003d0:	10000015 	stw	zero,0(r2)
    REG_14_             = 0;
100003d4:	d080f617 	ldw	r2,984(gp)
100003d8:	10800e04 	addi	r2,r2,56
100003dc:	10000015 	stw	zero,0(r2)
    REG_15_             = 0;
100003e0:	d080f617 	ldw	r2,984(gp)
100003e4:	10800f04 	addi	r2,r2,60
100003e8:	10000015 	stw	zero,0(r2)
}
100003ec:	0001883a 	nop
100003f0:	e037883a 	mov	sp,fp
100003f4:	df000017 	ldw	fp,0(sp)
100003f8:	dec00104 	addi	sp,sp,4
100003fc:	f800283a 	ret

10000400 <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
10000400:	deffff04 	addi	sp,sp,-4
10000404:	df000015 	stw	fp,0(sp)
10000408:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
1000040c:	00801c04 	movi	r2,112
10000410:	00c00044 	movi	r3,1
10000414:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000418:	00802004 	movi	r2,128
1000041c:	00c00044 	movi	r3,1
10000420:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10000424:	00802804 	movi	r2,160
10000428:	00c00044 	movi	r3,1
1000042c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
10000430:	00802404 	movi	r2,144
10000434:	00c00044 	movi	r3,1
10000438:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
1000043c:	00803004 	movi	r2,192
10000440:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
10000444:	00802c04 	movi	r2,176
10000448:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
1000044c:	00802004 	movi	r2,128
10000450:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
10000454:	00801c04 	movi	r2,112
10000458:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
1000045c:	00801c04 	movi	r2,112
10000460:	00c00044 	movi	r3,1
10000464:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000468:	00802004 	movi	r2,128
1000046c:	00c00044 	movi	r3,1
10000470:	10c00005 	stb	r3,0(r2)
}
10000474:	0001883a 	nop
10000478:	e037883a 	mov	sp,fp
1000047c:	df000017 	ldw	fp,0(sp)
10000480:	dec00104 	addi	sp,sp,4
10000484:	f800283a 	ret

10000488 <IO_write>:


void IO_write(alt_u8 Address, alt_u16 Data)
{
10000488:	defffd04 	addi	sp,sp,-12
1000048c:	df000215 	stw	fp,8(sp)
10000490:	df000204 	addi	fp,sp,8
10000494:	2007883a 	mov	r3,r4
10000498:	2805883a 	mov	r2,r5
1000049c:	e0fffe05 	stb	r3,-8(fp)
100004a0:	e0bfff0d 	sth	r2,-4(fp)
	//*otg_hpi_data = Data;


	//*otg_hpi_w = 1;
	// Disable read, enable CS and write, prepare address and data to be written
	*otg_hpi_r = 1;
100004a4:	00802804 	movi	r2,160
100004a8:	00c00044 	movi	r3,1
100004ac:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = Address;
100004b0:	00803004 	movi	r2,192
100004b4:	e0fffe03 	ldbu	r3,-8(fp)
100004b8:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
100004bc:	00802c04 	movi	r2,176
100004c0:	e0ffff0b 	ldhu	r3,-4(fp)
100004c4:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
100004c8:	00802004 	movi	r2,128
100004cc:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
100004d0:	00802404 	movi	r2,144
100004d4:	10000005 	stb	zero,0(r2)

	// Disable write and CS
	*otg_hpi_w = 1;
100004d8:	00802404 	movi	r2,144
100004dc:	00c00044 	movi	r3,1
100004e0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100004e4:	00802004 	movi	r2,128
100004e8:	00c00044 	movi	r3,1
100004ec:	10c00005 	stb	r3,0(r2)
}
100004f0:	0001883a 	nop
100004f4:	e037883a 	mov	sp,fp
100004f8:	df000017 	ldw	fp,0(sp)
100004fc:	dec00104 	addi	sp,sp,4
10000500:	f800283a 	ret

10000504 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
10000504:	defffd04 	addi	sp,sp,-12
10000508:	df000215 	stw	fp,8(sp)
1000050c:	df000204 	addi	fp,sp,8
10000510:	2005883a 	mov	r2,r4
10000514:	e0bfff05 	stb	r2,-4(fp)
	//*otg_hpi_address = Address;
	//*otg_hpi_r = 0;
	//*otg_hpi_data = Data;
	//*otg_hpi_r = 1;
	// Enable select chip and read, disable write, prepare address
	*otg_hpi_w = 1;
10000518:	00802404 	movi	r2,144
1000051c:	00c00044 	movi	r3,1
10000520:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = Address;
10000524:	00803004 	movi	r2,192
10000528:	e0ffff03 	ldbu	r3,-4(fp)
1000052c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10000530:	00802004 	movi	r2,128
10000534:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
10000538:	00802804 	movi	r2,160
1000053c:	10000005 	stb	zero,0(r2)

	// Read data to temporary variable
	temp = *otg_hpi_data;
10000540:	00802c04 	movi	r2,176
10000544:	10800017 	ldw	r2,0(r2)
10000548:	e0bffe0d 	sth	r2,-8(fp)

	// Disable CS and read
	*otg_hpi_cs = 1;
1000054c:	00802004 	movi	r2,128
10000550:	00c00044 	movi	r3,1
10000554:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10000558:	00802804 	movi	r2,160
1000055c:	00c00044 	movi	r3,1
10000560:	10c00005 	stb	r3,0(r2)

	//printf("%x\n",temp);
	return temp;
10000564:	e0bffe0b 	ldhu	r2,-8(fp)
}
10000568:	e037883a 	mov	sp,fp
1000056c:	df000017 	ldw	fp,0(sp)
10000570:	dec00104 	addi	sp,sp,4
10000574:	f800283a 	ret

10000578 <initial_Kirby>:
#include "usb_main.h"
#include "star.h"

#define TEST_EDGE

void initial_Kirby(Kirby * kirby){
10000578:	defffe04 	addi	sp,sp,-8
1000057c:	df000115 	stw	fp,4(sp)
10000580:	df000104 	addi	fp,sp,4
10000584:	e13fff15 	stw	r4,-4(fp)
    kirby->x = KIRBY_START_X;
10000588:	e0bfff17 	ldw	r2,-4(fp)
1000058c:	00c00144 	movi	r3,5
10000590:	10c00015 	stw	r3,0(r2)
    kirby->y = KIRBY_START_Y;
10000594:	e0bfff17 	ldw	r2,-4(fp)
10000598:	00c018c4 	movi	r3,99
1000059c:	10c00115 	stw	r3,4(r2)
    kirby->map = 0;
100005a0:	e0bfff17 	ldw	r2,-4(fp)
100005a4:	10000215 	stw	zero,8(r2)
    kirby->image = 0;
100005a8:	e0bfff17 	ldw	r2,-4(fp)
100005ac:	10000315 	stw	zero,12(r2)
    kirby->is_left = 0;
100005b0:	e0bfff17 	ldw	r2,-4(fp)
100005b4:	10000415 	stw	zero,16(r2)
    kirby->health = 8;
100005b8:	e0bfff17 	ldw	r2,-4(fp)
100005bc:	00c00204 	movi	r3,8
100005c0:	10c00515 	stw	r3,20(r2)
    kirby->action = 0;
100005c4:	e0bfff17 	ldw	r2,-4(fp)
100005c8:	10000615 	stw	zero,24(r2)
    kirby->frame = 0;
100005cc:	e0bfff17 	ldw	r2,-4(fp)
100005d0:	10000715 	stw	zero,28(r2)
    kirby->in_slope = 0;
100005d4:	e0bfff17 	ldw	r2,-4(fp)
100005d8:	10000815 	stw	zero,32(r2)
    kirby->in_air = 0;
100005dc:	e0bfff17 	ldw	r2,-4(fp)
100005e0:	10000915 	stw	zero,36(r2)
    kirby->is_inhaled = 0;
100005e4:	e0bfff17 	ldw	r2,-4(fp)
100005e8:	10000a15 	stw	zero,40(r2)
    kirby->damaging = 0;
100005ec:	e0bfff17 	ldw	r2,-4(fp)
100005f0:	10000b15 	stw	zero,44(r2)
    kirby->inhaling = 0;
100005f4:	e0bfff17 	ldw	r2,-4(fp)
100005f8:	10000c15 	stw	zero,48(r2)
    kirby->spitting = 0;
100005fc:	e0bfff17 	ldw	r2,-4(fp)
10000600:	10000d15 	stw	zero,52(r2)
}
10000604:	0001883a 	nop
10000608:	e037883a 	mov	sp,fp
1000060c:	df000017 	ldw	fp,0(sp)
10000610:	dec00104 	addi	sp,sp,4
10000614:	f800283a 	ret

10000618 <upload_Kirby_Info>:

void upload_Kirby_Info(Kirby * kirby) {
10000618:	defff504 	addi	sp,sp,-44
1000061c:	dfc00a15 	stw	ra,40(sp)
10000620:	df000915 	stw	fp,36(sp)
10000624:	df000904 	addi	fp,sp,36
10000628:	e13fff15 	stw	r4,-4(fp)
//    int Kirby_Pos_X = kirby->x;
//    int Kirby_Pos_Y = kirby->y;
    int Kirby_Image_X = kirby->frame;
1000062c:	e0bfff17 	ldw	r2,-4(fp)
10000630:	10800717 	ldw	r2,28(r2)
10000634:	e0bff915 	stw	r2,-28(fp)
    int Kirby_Image_Y = kirby->action;
10000638:	e0bfff17 	ldw	r2,-4(fp)
1000063c:	10800617 	ldw	r2,24(r2)
10000640:	e0bffa15 	stw	r2,-24(fp)
    int Kirby_Image_Width = 0;
10000644:	e03ff715 	stw	zero,-36(fp)
    int Kirby_Image_Height = 0;
10000648:	e03ff815 	stw	zero,-32(fp)
    int Kirby_Screen_X = 0;
1000064c:	e03ffb15 	stw	zero,-20(fp)
    int Kirby_Screen_Y = kirby->y;
10000650:	e0bfff17 	ldw	r2,-4(fp)
10000654:	10800117 	ldw	r2,4(r2)
10000658:	e0bffc15 	stw	r2,-16(fp)
//    int Map_Width = map_Width(kirby->map);
    int kirby_Botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff; // Center botton
1000065c:	e13fff17 	ldw	r4,-4(fp)
10000660:	0001c480 	call	10001c48 <get_Kirby_Botton_Pos>
10000664:	1004d43a 	srli	r2,r2,16
10000668:	e0bffd15 	stw	r2,-12(fp)
    int kirby_Botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff; // Center botton
1000066c:	e13fff17 	ldw	r4,-4(fp)
10000670:	0001c480 	call	10001c48 <get_Kirby_Botton_Pos>
10000674:	10bfffcc 	andi	r2,r2,65535
10000678:	e0bffe15 	stw	r2,-8(fp)

    // Decide kirby's image width and height
    if (kirby->is_inhaled == 1) {
1000067c:	e0bfff17 	ldw	r2,-4(fp)
10000680:	10800a17 	ldw	r2,40(r2)
10000684:	10800058 	cmpnei	r2,r2,1
10000688:	1000051e 	bne	r2,zero,100006a0 <upload_Kirby_Info+0x88>
        Kirby_Image_Width = 30;
1000068c:	00800784 	movi	r2,30
10000690:	e0bff715 	stw	r2,-36(fp)
        Kirby_Image_Height = 30;
10000694:	00800784 	movi	r2,30
10000698:	e0bff815 	stw	r2,-32(fp)
1000069c:	00001106 	br	100006e4 <upload_Kirby_Info+0xcc>
    } else if ((kirby->inhaling == 1) || (kirby->spitting == 1)) {
100006a0:	e0bfff17 	ldw	r2,-4(fp)
100006a4:	10800c17 	ldw	r2,48(r2)
100006a8:	10800060 	cmpeqi	r2,r2,1
100006ac:	1000041e 	bne	r2,zero,100006c0 <upload_Kirby_Info+0xa8>
100006b0:	e0bfff17 	ldw	r2,-4(fp)
100006b4:	10800d17 	ldw	r2,52(r2)
100006b8:	10800058 	cmpnei	r2,r2,1
100006bc:	1000051e 	bne	r2,zero,100006d4 <upload_Kirby_Info+0xbc>
        Kirby_Image_Width = 60;
100006c0:	00800f04 	movi	r2,60
100006c4:	e0bff715 	stw	r2,-36(fp)
        Kirby_Image_Height = 30;
100006c8:	00800784 	movi	r2,30
100006cc:	e0bff815 	stw	r2,-32(fp)
100006d0:	00000406 	br	100006e4 <upload_Kirby_Info+0xcc>
    } else {
        Kirby_Image_Width = 28;
100006d4:	00800704 	movi	r2,28
100006d8:	e0bff715 	stw	r2,-36(fp)
        Kirby_Image_Height = 28;
100006dc:	00800704 	movi	r2,28
100006e0:	e0bff815 	stw	r2,-32(fp)
    }

    // Decide the position X of kirby in screen
    Kirby_Screen_X = kirby_Screen_Center_X(kirby_Botton_X);
100006e4:	e13ffd17 	ldw	r4,-12(fp)
100006e8:	00026100 	call	10002610 <kirby_Screen_Center_X>
100006ec:	e0bffb15 	stw	r2,-20(fp)


    // Upload to kirby's registers
    REG_0_MAP_INFO = (REG_0_MAP_INFO & 0x0000fff0) | (Kirby_Screen_X << 24) | (Kirby_Screen_Y << 16) | (kirby->image << 2) | kirby->map;
100006f0:	d0c0f717 	ldw	r3,988(gp)
100006f4:	d080f717 	ldw	r2,988(gp)
100006f8:	10800017 	ldw	r2,0(r2)
100006fc:	10bffc0c 	andi	r2,r2,65520
10000700:	e13ffb17 	ldw	r4,-20(fp)
10000704:	2008963a 	slli	r4,r4,24
10000708:	1104b03a 	or	r2,r2,r4
1000070c:	e13ffc17 	ldw	r4,-16(fp)
10000710:	2008943a 	slli	r4,r4,16
10000714:	1108b03a 	or	r4,r2,r4
10000718:	e0bfff17 	ldw	r2,-4(fp)
1000071c:	10800317 	ldw	r2,12(r2)
10000720:	1085883a 	add	r2,r2,r2
10000724:	1085883a 	add	r2,r2,r2
10000728:	2084b03a 	or	r2,r4,r2
1000072c:	e13fff17 	ldw	r4,-4(fp)
10000730:	21000217 	ldw	r4,8(r4)
10000734:	1104b03a 	or	r2,r2,r4
10000738:	18800015 	stw	r2,0(r3)
    REG_1_KIRBY_IMAGE = (Kirby_Image_X << 24) | (Kirby_Image_Y << 16) | (Kirby_Image_Width << 8) | (Kirby_Image_Height << 1) | (kirby->is_left & 0x00000001);
1000073c:	d080f717 	ldw	r2,988(gp)
10000740:	10c00104 	addi	r3,r2,4
10000744:	e0bff917 	ldw	r2,-28(fp)
10000748:	1008963a 	slli	r4,r2,24
1000074c:	e0bffa17 	ldw	r2,-24(fp)
10000750:	1004943a 	slli	r2,r2,16
10000754:	2088b03a 	or	r4,r4,r2
10000758:	e0bff717 	ldw	r2,-36(fp)
1000075c:	1004923a 	slli	r2,r2,8
10000760:	2088b03a 	or	r4,r4,r2
10000764:	e0bff817 	ldw	r2,-32(fp)
10000768:	1085883a 	add	r2,r2,r2
1000076c:	2088b03a 	or	r4,r4,r2
10000770:	e0bfff17 	ldw	r2,-4(fp)
10000774:	10800417 	ldw	r2,16(r2)
10000778:	1080004c 	andi	r2,r2,1
1000077c:	2084b03a 	or	r2,r4,r2
10000780:	18800015 	stw	r2,0(r3)
    REG_2_KIRBY_MAP_POS = (kirby_Botton_X << 16) | (kirby_Botton_Y);
10000784:	d080f717 	ldw	r2,988(gp)
10000788:	10800204 	addi	r2,r2,8
1000078c:	e0fffd17 	ldw	r3,-12(fp)
10000790:	1808943a 	slli	r4,r3,16
10000794:	e0fffe17 	ldw	r3,-8(fp)
10000798:	20c6b03a 	or	r3,r4,r3
1000079c:	10c00015 	stw	r3,0(r2)
    printf("REG_0_MAP_INFO: %08x\n", REG_0_MAP_INFO);
    printf("REG_1_KIRBY_IMAGE: %08x\n", REG_1_KIRBY_IMAGE);
    printf("REG_2_KIRBY_MAP_POS: %08x\n", REG_2_KIRBY_MAP_POS);
    printf("\n/******************* end ****************/\n");
    #endif
}
100007a0:	0001883a 	nop
100007a4:	e037883a 	mov	sp,fp
100007a8:	dfc00117 	ldw	ra,4(sp)
100007ac:	df000017 	ldw	fp,0(sp)
100007b0:	dec00204 	addi	sp,sp,8
100007b4:	f800283a 	ret

100007b8 <updateKirby>:

void updateKirby(Kirby * kirby, Star * star, int keycode, int pre_keycode){
100007b8:	defff804 	addi	sp,sp,-32
100007bc:	dfc00715 	stw	ra,28(sp)
100007c0:	df000615 	stw	fp,24(sp)
100007c4:	df000604 	addi	fp,sp,24
100007c8:	e13ffc15 	stw	r4,-16(fp)
100007cc:	e17ffd15 	stw	r5,-12(fp)
100007d0:	e1bffe15 	stw	r6,-8(fp)
100007d4:	e1ffff15 	stw	r7,-4(fp)
//    int key0 = keycode & 0xff;
//    int key1 = (keycode >> 8) & 0xff;
//    int prekey0 = pre_keycode & 0xff;
//    int prekey1 = (pre_keycode >> 8) & 0xff;
    int map_width = map_Width(kirby->map);
100007d8:	e0bffc17 	ldw	r2,-16(fp)
100007dc:	10800217 	ldw	r2,8(r2)
100007e0:	1009883a 	mov	r4,r2
100007e4:	0001b780 	call	10001b78 <map_Width>
100007e8:	e0bffb15 	stw	r2,-20(fp)
    int i = 0;
100007ec:	e03ffa15 	stw	zero,-24(fp)

    // Keyboard control
    switch ((keycode & 0x0000ffff)) {
100007f0:	e0bffe17 	ldw	r2,-8(fp)
100007f4:	10bfffcc 	andi	r2,r2,65535
100007f8:	10c105a0 	cmpeqi	r3,r2,1046
100007fc:	1800b01e 	bne	r3,zero,10000ac0 <updateKirby+0x308>
10000800:	10c105c8 	cmpgei	r3,r2,1047
10000804:	18001b1e 	bne	r3,zero,10000874 <updateKirby+0xbc>
10000808:	10c003e0 	cmpeqi	r3,r2,15
1000080c:	18035b1e 	bne	r3,zero,1000157c <updateKirby+0xdc4>
10000810:	10c00408 	cmpgei	r3,r2,16
10000814:	18000b1e 	bne	r3,zero,10000844 <updateKirby+0x8c>
10000818:	10c00120 	cmpeqi	r3,r2,4
1000081c:	1800a81e 	bne	r3,zero,10000ac0 <updateKirby+0x308>
10000820:	10c00148 	cmpgei	r3,r2,5
10000824:	1800021e 	bne	r3,zero,10000830 <updateKirby+0x78>
10000828:	10003026 	beq	r2,zero,100008ec <updateKirby+0x134>
1000082c:	0002d006 	br	10001370 <updateKirby+0xbb8>
10000830:	10c001e0 	cmpeqi	r3,r2,7
10000834:	18011c1e 	bne	r3,zero,10000ca8 <updateKirby+0x4f0>
10000838:	108003a0 	cmpeqi	r2,r2,14
1000083c:	1002831e 	bne	r2,zero,1000124c <updateKirby+0xa94>
10000840:	0002cb06 	br	10001370 <updateKirby+0xbb8>
10000844:	10c005e0 	cmpeqi	r3,r2,23
10000848:	1802c01e 	bne	r3,zero,1000134c <updateKirby+0xb94>
1000084c:	10c00608 	cmpgei	r3,r2,24
10000850:	1800031e 	bne	r3,zero,10000860 <updateKirby+0xa8>
10000854:	108005a0 	cmpeqi	r2,r2,22
10000858:	1001e31e 	bne	r2,zero,10000fe8 <updateKirby+0x830>
1000085c:	0002c406 	br	10001370 <updateKirby+0xbb8>
10000860:	10c006a0 	cmpeqi	r3,r2,26
10000864:	1802551e 	bne	r3,zero,100011bc <updateKirby+0xa04>
10000868:	10810020 	cmpeqi	r2,r2,1024
1000086c:	1000941e 	bne	r2,zero,10000ac0 <updateKirby+0x308>
10000870:	0002bf06 	br	10001370 <updateKirby+0xbb8>
10000874:	10c3c5a0 	cmpeqi	r3,r2,3862
10000878:	1802891e 	bne	r3,zero,100012a0 <updateKirby+0xae8>
1000087c:	10c3c5c8 	cmpgei	r3,r2,3863
10000880:	18000c1e 	bne	r3,zero,100008b4 <updateKirby+0xfc>
10000884:	10c1c020 	cmpeqi	r3,r2,1792
10000888:	1801071e 	bne	r3,zero,10000ca8 <updateKirby+0x4f0>
1000088c:	10c1c048 	cmpgei	r3,r2,1793
10000890:	1800031e 	bne	r3,zero,100008a0 <updateKirby+0xe8>
10000894:	108106a0 	cmpeqi	r2,r2,1050
10000898:	10017c1e 	bne	r2,zero,10000e8c <updateKirby+0x6d4>
1000089c:	0002b406 	br	10001370 <updateKirby+0xbb8>
100008a0:	10c1c5a0 	cmpeqi	r3,r2,1814
100008a4:	1801001e 	bne	r3,zero,10000ca8 <updateKirby+0x4f0>
100008a8:	1081c6a0 	cmpeqi	r2,r2,1818
100008ac:	1001a31e 	bne	r2,zero,10000f3c <updateKirby+0x784>
100008b0:	0002af06 	br	10001370 <updateKirby+0xbb8>
100008b4:	10c583e0 	cmpeqi	r3,r2,5647
100008b8:	1802791e 	bne	r3,zero,100012a0 <updateKirby+0xae8>
100008bc:	10c58408 	cmpgei	r3,r2,5648
100008c0:	1800051e 	bne	r3,zero,100008d8 <updateKirby+0x120>
100008c4:	10c58120 	cmpeqi	r3,r2,5636
100008c8:	18007d1e 	bne	r3,zero,10000ac0 <updateKirby+0x308>
100008cc:	108581e0 	cmpeqi	r2,r2,5639
100008d0:	1000f51e 	bne	r2,zero,10000ca8 <updateKirby+0x4f0>
100008d4:	0002a606 	br	10001370 <updateKirby+0xbb8>
100008d8:	10c68120 	cmpeqi	r3,r2,6660
100008dc:	18016b1e 	bne	r3,zero,10000e8c <updateKirby+0x6d4>
100008e0:	108681e0 	cmpeqi	r2,r2,6663
100008e4:	1001951e 	bne	r2,zero,10000f3c <updateKirby+0x784>
100008e8:	0002a106 	br	10001370 <updateKirby+0xbb8>
    case 0x0000: { // "" Stand
        if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
100008ec:	e0bffc17 	ldw	r2,-16(fp)
100008f0:	10800917 	ldw	r2,36(r2)
100008f4:	1000261e 	bne	r2,zero,10000990 <updateKirby+0x1d8>
100008f8:	e0bffc17 	ldw	r2,-16(fp)
100008fc:	10800a17 	ldw	r2,40(r2)
10000900:	1000231e 	bne	r2,zero,10000990 <updateKirby+0x1d8>
            kirby->image = 0;
10000904:	e0bffc17 	ldw	r2,-16(fp)
10000908:	10000315 	stw	zero,12(r2)
            kirby->action = 0;
1000090c:	e0bffc17 	ldw	r2,-16(fp)
10000910:	10000615 	stw	zero,24(r2)
            if (pre_keycode == keycode) {
10000914:	e0ffff17 	ldw	r3,-4(fp)
10000918:	e0bffe17 	ldw	r2,-8(fp)
1000091c:	1880131e 	bne	r3,r2,1000096c <updateKirby+0x1b4>
                kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
10000920:	e0bffc17 	ldw	r2,-16(fp)
10000924:	10800717 	ldw	r2,28(r2)
10000928:	10c00044 	addi	r3,r2,1
1000092c:	00a00034 	movhi	r2,32768
10000930:	10800044 	addi	r2,r2,1
10000934:	1884703a 	and	r2,r3,r2
10000938:	1000040e 	bge	r2,zero,1000094c <updateKirby+0x194>
1000093c:	10bfffc4 	addi	r2,r2,-1
10000940:	00ffff84 	movi	r3,-2
10000944:	10c4b03a 	or	r2,r2,r3
10000948:	10800044 	addi	r2,r2,1
1000094c:	1007883a 	mov	r3,r2
10000950:	e0bffc17 	ldw	r2,-16(fp)
10000954:	10800817 	ldw	r2,32(r2)
10000958:	1085883a 	add	r2,r2,r2
1000095c:	1887883a 	add	r3,r3,r2
10000960:	e0bffc17 	ldw	r2,-16(fp)
10000964:	10c00715 	stw	r3,28(r2)
10000968:	00000606 	br	10000984 <updateKirby+0x1cc>
            } else {
                kirby->frame = 0 + 2 * kirby->in_slope;
1000096c:	e0bffc17 	ldw	r2,-16(fp)
10000970:	10800817 	ldw	r2,32(r2)
10000974:	1085883a 	add	r2,r2,r2
10000978:	1007883a 	mov	r3,r2
1000097c:	e0bffc17 	ldw	r2,-16(fp)
10000980:	10c00715 	stw	r3,28(r2)
            }
            frame_Time(KIRBY_FRAME_TIME_BLINK);
10000984:	010ea604 	movi	r4,15000
10000988:	0001b340 	call	10001b34 <frame_Time>
1000098c:	00004b06 	br	10000abc <updateKirby+0x304>
        } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
10000990:	e0bffc17 	ldw	r2,-16(fp)
10000994:	10800917 	ldw	r2,36(r2)
10000998:	1000281e 	bne	r2,zero,10000a3c <updateKirby+0x284>
1000099c:	e0bffc17 	ldw	r2,-16(fp)
100009a0:	10800a17 	ldw	r2,40(r2)
100009a4:	10800058 	cmpnei	r2,r2,1
100009a8:	1000241e 	bne	r2,zero,10000a3c <updateKirby+0x284>
            kirby->image = 1;
100009ac:	e0bffc17 	ldw	r2,-16(fp)
100009b0:	00c00044 	movi	r3,1
100009b4:	10c00315 	stw	r3,12(r2)
            kirby->action = 0;
100009b8:	e0bffc17 	ldw	r2,-16(fp)
100009bc:	10000615 	stw	zero,24(r2)
            if (pre_keycode == keycode) {
100009c0:	e0ffff17 	ldw	r3,-4(fp)
100009c4:	e0bffe17 	ldw	r2,-8(fp)
100009c8:	1880131e 	bne	r3,r2,10000a18 <updateKirby+0x260>
                kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
100009cc:	e0bffc17 	ldw	r2,-16(fp)
100009d0:	10800717 	ldw	r2,28(r2)
100009d4:	10c00044 	addi	r3,r2,1
100009d8:	00a00034 	movhi	r2,32768
100009dc:	10800044 	addi	r2,r2,1
100009e0:	1884703a 	and	r2,r3,r2
100009e4:	1000040e 	bge	r2,zero,100009f8 <updateKirby+0x240>
100009e8:	10bfffc4 	addi	r2,r2,-1
100009ec:	00ffff84 	movi	r3,-2
100009f0:	10c4b03a 	or	r2,r2,r3
100009f4:	10800044 	addi	r2,r2,1
100009f8:	1007883a 	mov	r3,r2
100009fc:	e0bffc17 	ldw	r2,-16(fp)
10000a00:	10800817 	ldw	r2,32(r2)
10000a04:	1085883a 	add	r2,r2,r2
10000a08:	1887883a 	add	r3,r3,r2
10000a0c:	e0bffc17 	ldw	r2,-16(fp)
10000a10:	10c00715 	stw	r3,28(r2)
10000a14:	00000606 	br	10000a30 <updateKirby+0x278>
            } else {
                kirby->frame = 0 + 2 * kirby->in_slope;
10000a18:	e0bffc17 	ldw	r2,-16(fp)
10000a1c:	10800817 	ldw	r2,32(r2)
10000a20:	1085883a 	add	r2,r2,r2
10000a24:	1007883a 	mov	r3,r2
10000a28:	e0bffc17 	ldw	r2,-16(fp)
10000a2c:	10c00715 	stw	r3,28(r2)
            }
            frame_Time(KIRBY_FRAME_TIME_BLINK);
10000a30:	010ea604 	movi	r4,15000
10000a34:	0001b340 	call	10001b34 <frame_Time>
10000a38:	00002006 	br	10000abc <updateKirby+0x304>
        } else {
            if (will_Touch_Ground(kirby, kirby->map)) {
10000a3c:	e0bffc17 	ldw	r2,-16(fp)
10000a40:	10800217 	ldw	r2,8(r2)
10000a44:	100b883a 	mov	r5,r2
10000a48:	e13ffc17 	ldw	r4,-16(fp)
10000a4c:	0001bc00 	call	10001bc0 <will_Touch_Ground>
10000a50:	10000926 	beq	r2,zero,10000a78 <updateKirby+0x2c0>
                kirby->image = 1;
10000a54:	e0bffc17 	ldw	r2,-16(fp)
10000a58:	00c00044 	movi	r3,1
10000a5c:	10c00315 	stw	r3,12(r2)
                kirby->action = 2;
10000a60:	e0bffc17 	ldw	r2,-16(fp)
10000a64:	00c00084 	movi	r3,2
10000a68:	10c00615 	stw	r3,24(r2)
                kirby->in_air = 0;
10000a6c:	e0bffc17 	ldw	r2,-16(fp)
10000a70:	10000915 	stw	zero,36(r2)
                kirby->frame = 13;
                kirby->y += KIRBY_STEP_Y;
                frame_Time(KIRBY_FRAME_TIME_WALK);
            }
        }
        break;
10000a74:	0002c206 	br	10001580 <updateKirby+0xdc8>
            if (will_Touch_Ground(kirby, kirby->map)) {
                kirby->image = 1;
                kirby->action = 2;
                kirby->in_air = 0;
            } else {
                kirby->image = 1;
10000a78:	e0bffc17 	ldw	r2,-16(fp)
10000a7c:	00c00044 	movi	r3,1
10000a80:	10c00315 	stw	r3,12(r2)
                kirby->action = 2;
10000a84:	e0bffc17 	ldw	r2,-16(fp)
10000a88:	00c00084 	movi	r3,2
10000a8c:	10c00615 	stw	r3,24(r2)
                kirby->frame = 13;
10000a90:	e0bffc17 	ldw	r2,-16(fp)
10000a94:	00c00344 	movi	r3,13
10000a98:	10c00715 	stw	r3,28(r2)
                kirby->y += KIRBY_STEP_Y;
10000a9c:	e0bffc17 	ldw	r2,-16(fp)
10000aa0:	10800117 	ldw	r2,4(r2)
10000aa4:	10c000c4 	addi	r3,r2,3
10000aa8:	e0bffc17 	ldw	r2,-16(fp)
10000aac:	10c00115 	stw	r3,4(r2)
                frame_Time(KIRBY_FRAME_TIME_WALK);
10000ab0:	01019004 	movi	r4,1600
10000ab4:	0001b340 	call	10001b34 <frame_Time>
            }
        }
        break;
10000ab8:	0002b106 	br	10001580 <updateKirby+0xdc8>
10000abc:	0002b006 	br	10001580 <updateKirby+0xdc8>

    case 0x0416:   //"a" & "s"
    case 0x1604:
    case 0x0400:
    case 0x0004: { //"a" left move
        kirby->is_left = 1;
10000ac0:	e0bffc17 	ldw	r2,-16(fp)
10000ac4:	00c00044 	movi	r3,1
10000ac8:	10c00415 	stw	r3,16(r2)
        if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
10000acc:	e0bffc17 	ldw	r2,-16(fp)
10000ad0:	10800917 	ldw	r2,36(r2)
10000ad4:	1000181e 	bne	r2,zero,10000b38 <updateKirby+0x380>
10000ad8:	e0bffc17 	ldw	r2,-16(fp)
10000adc:	10800a17 	ldw	r2,40(r2)
10000ae0:	1000151e 	bne	r2,zero,10000b38 <updateKirby+0x380>
            kirby->image = 0;
10000ae4:	e0bffc17 	ldw	r2,-16(fp)
10000ae8:	10000315 	stw	zero,12(r2)
            kirby->action = 1;
10000aec:	e0bffc17 	ldw	r2,-16(fp)
10000af0:	00c00044 	movi	r3,1
10000af4:	10c00615 	stw	r3,24(r2)
            if (pre_keycode == keycode) {
10000af8:	e0ffff17 	ldw	r3,-4(fp)
10000afc:	e0bffe17 	ldw	r2,-8(fp)
10000b00:	18800a1e 	bne	r3,r2,10000b2c <updateKirby+0x374>
                kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
10000b04:	e0bffc17 	ldw	r2,-16(fp)
10000b08:	10800717 	ldw	r2,28(r2)
10000b0c:	10800044 	addi	r2,r2,1
10000b10:	01400284 	movi	r5,10
10000b14:	1009883a 	mov	r4,r2
10000b18:	0004a640 	call	10004a64 <__modsi3>
10000b1c:	1007883a 	mov	r3,r2
10000b20:	e0bffc17 	ldw	r2,-16(fp)
10000b24:	10c00715 	stw	r3,28(r2)
    case 0x0004: { //"a" left move
        kirby->is_left = 1;
        if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
            kirby->image = 0;
            kirby->action = 1;
            if (pre_keycode == keycode) {
10000b28:	00005706 	br	10000c88 <updateKirby+0x4d0>
                kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
            } else {
                kirby->frame = 0;
10000b2c:	e0bffc17 	ldw	r2,-16(fp)
10000b30:	10000715 	stw	zero,28(r2)
    case 0x0004: { //"a" left move
        kirby->is_left = 1;
        if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
            kirby->image = 0;
            kirby->action = 1;
            if (pre_keycode == keycode) {
10000b34:	00005406 	br	10000c88 <updateKirby+0x4d0>
                kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
            } else {
                kirby->frame = 0;
            }
        } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
10000b38:	e0bffc17 	ldw	r2,-16(fp)
10000b3c:	10800917 	ldw	r2,36(r2)
10000b40:	10001e1e 	bne	r2,zero,10000bbc <updateKirby+0x404>
10000b44:	e0bffc17 	ldw	r2,-16(fp)
10000b48:	10800a17 	ldw	r2,40(r2)
10000b4c:	10800058 	cmpnei	r2,r2,1
10000b50:	10001a1e 	bne	r2,zero,10000bbc <updateKirby+0x404>
            kirby->image = 1;
10000b54:	e0bffc17 	ldw	r2,-16(fp)
10000b58:	00c00044 	movi	r3,1
10000b5c:	10c00315 	stw	r3,12(r2)
            kirby->action = 1;
10000b60:	e0bffc17 	ldw	r2,-16(fp)
10000b64:	00c00044 	movi	r3,1
10000b68:	10c00615 	stw	r3,24(r2)
            if (pre_keycode == keycode) {
10000b6c:	e0ffff17 	ldw	r3,-4(fp)
10000b70:	e0bffe17 	ldw	r2,-8(fp)
10000b74:	18800a1e 	bne	r3,r2,10000ba0 <updateKirby+0x3e8>
                kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
10000b78:	e0bffc17 	ldw	r2,-16(fp)
10000b7c:	10800717 	ldw	r2,28(r2)
10000b80:	10800044 	addi	r2,r2,1
10000b84:	01400344 	movi	r5,13
10000b88:	1009883a 	mov	r4,r2
10000b8c:	0004a640 	call	10004a64 <__modsi3>
10000b90:	1007883a 	mov	r3,r2
10000b94:	e0bffc17 	ldw	r2,-16(fp)
10000b98:	10c00715 	stw	r3,28(r2)
                kirby->frame = 0;
            }
        } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
            kirby->image = 1;
            kirby->action = 1;
            if (pre_keycode == keycode) {
10000b9c:	00003a06 	br	10000c88 <updateKirby+0x4d0>
                kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
            } else {
                kirby->frame = 0 + 2 * kirby->in_slope;
10000ba0:	e0bffc17 	ldw	r2,-16(fp)
10000ba4:	10800817 	ldw	r2,32(r2)
10000ba8:	1085883a 	add	r2,r2,r2
10000bac:	1007883a 	mov	r3,r2
10000bb0:	e0bffc17 	ldw	r2,-16(fp)
10000bb4:	10c00715 	stw	r3,28(r2)
                kirby->frame = 0;
            }
        } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
            kirby->image = 1;
            kirby->action = 1;
            if (pre_keycode == keycode) {
10000bb8:	00003306 	br	10000c88 <updateKirby+0x4d0>
                kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
            } else {
                kirby->frame = 0 + 2 * kirby->in_slope;
            } 
        } else {
            if (will_Touch_Ground(kirby, kirby->map)) {
10000bbc:	e0bffc17 	ldw	r2,-16(fp)
10000bc0:	10800217 	ldw	r2,8(r2)
10000bc4:	100b883a 	mov	r5,r2
10000bc8:	e13ffc17 	ldw	r4,-16(fp)
10000bcc:	0001bc00 	call	10001bc0 <will_Touch_Ground>
10000bd0:	10001f26 	beq	r2,zero,10000c50 <updateKirby+0x498>
                kirby->image = 1;
10000bd4:	e0bffc17 	ldw	r2,-16(fp)
10000bd8:	00c00044 	movi	r3,1
10000bdc:	10c00315 	stw	r3,12(r2)
                kirby->in_air = 0;
10000be0:	e0bffc17 	ldw	r2,-16(fp)
10000be4:	10000915 	stw	zero,36(r2)
                kirby->image = 1;
10000be8:	e0bffc17 	ldw	r2,-16(fp)
10000bec:	00c00044 	movi	r3,1
10000bf0:	10c00315 	stw	r3,12(r2)
                kirby->action = 1;
10000bf4:	e0bffc17 	ldw	r2,-16(fp)
10000bf8:	00c00044 	movi	r3,1
10000bfc:	10c00615 	stw	r3,24(r2)
                if (pre_keycode == keycode) {
10000c00:	e0ffff17 	ldw	r3,-4(fp)
10000c04:	e0bffe17 	ldw	r2,-8(fp)
10000c08:	18800a1e 	bne	r3,r2,10000c34 <updateKirby+0x47c>
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
10000c0c:	e0bffc17 	ldw	r2,-16(fp)
10000c10:	10800717 	ldw	r2,28(r2)
10000c14:	10800044 	addi	r2,r2,1
10000c18:	01400344 	movi	r5,13
10000c1c:	1009883a 	mov	r4,r2
10000c20:	0004a640 	call	10004a64 <__modsi3>
10000c24:	1007883a 	mov	r3,r2
10000c28:	e0bffc17 	ldw	r2,-16(fp)
10000c2c:	10c00715 	stw	r3,28(r2)
10000c30:	00001506 	br	10000c88 <updateKirby+0x4d0>
                } else {
                    kirby->frame = 0 + 2 * kirby->in_slope;
10000c34:	e0bffc17 	ldw	r2,-16(fp)
10000c38:	10800817 	ldw	r2,32(r2)
10000c3c:	1085883a 	add	r2,r2,r2
10000c40:	1007883a 	mov	r3,r2
10000c44:	e0bffc17 	ldw	r2,-16(fp)
10000c48:	10c00715 	stw	r3,28(r2)
10000c4c:	00000e06 	br	10000c88 <updateKirby+0x4d0>
                } 
            } else {
                kirby->image = 1;
10000c50:	e0bffc17 	ldw	r2,-16(fp)
10000c54:	00c00044 	movi	r3,1
10000c58:	10c00315 	stw	r3,12(r2)
                kirby->action = 2;
10000c5c:	e0bffc17 	ldw	r2,-16(fp)
10000c60:	00c00084 	movi	r3,2
10000c64:	10c00615 	stw	r3,24(r2)
                kirby->frame = 13;
10000c68:	e0bffc17 	ldw	r2,-16(fp)
10000c6c:	00c00344 	movi	r3,13
10000c70:	10c00715 	stw	r3,28(r2)
                kirby->y += KIRBY_STEP_Y;
10000c74:	e0bffc17 	ldw	r2,-16(fp)
10000c78:	10800117 	ldw	r2,4(r2)
10000c7c:	10c000c4 	addi	r3,r2,3
10000c80:	e0bffc17 	ldw	r2,-16(fp)
10000c84:	10c00115 	stw	r3,4(r2)
            }
        }
        frame_Time(KIRBY_FRAME_TIME_WALK);
10000c88:	01019004 	movi	r4,1600
10000c8c:	0001b340 	call	10001b34 <frame_Time>
        kirby->x -= KIRBY_STEP_X;
10000c90:	e0bffc17 	ldw	r2,-16(fp)
10000c94:	10800017 	ldw	r2,0(r2)
10000c98:	10ffff44 	addi	r3,r2,-3
10000c9c:	e0bffc17 	ldw	r2,-16(fp)
10000ca0:	10c00015 	stw	r3,0(r2)
        break;
10000ca4:	00023606 	br	10001580 <updateKirby+0xdc8>

    case 0x0716:   //"d" & "s"
    case 0x1607:
    case 0x0700:
    case 0x0007: { //"d" right move
    	kirby->is_left = 0;
10000ca8:	e0bffc17 	ldw	r2,-16(fp)
10000cac:	10000415 	stw	zero,16(r2)
        if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
10000cb0:	e0bffc17 	ldw	r2,-16(fp)
10000cb4:	10800917 	ldw	r2,36(r2)
10000cb8:	1000181e 	bne	r2,zero,10000d1c <updateKirby+0x564>
10000cbc:	e0bffc17 	ldw	r2,-16(fp)
10000cc0:	10800a17 	ldw	r2,40(r2)
10000cc4:	1000151e 	bne	r2,zero,10000d1c <updateKirby+0x564>
            kirby->image = 0;
10000cc8:	e0bffc17 	ldw	r2,-16(fp)
10000ccc:	10000315 	stw	zero,12(r2)
            kirby->action = 1;
10000cd0:	e0bffc17 	ldw	r2,-16(fp)
10000cd4:	00c00044 	movi	r3,1
10000cd8:	10c00615 	stw	r3,24(r2)
            if (pre_keycode == keycode) {
10000cdc:	e0ffff17 	ldw	r3,-4(fp)
10000ce0:	e0bffe17 	ldw	r2,-8(fp)
10000ce4:	18800a1e 	bne	r3,r2,10000d10 <updateKirby+0x558>
                kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
10000ce8:	e0bffc17 	ldw	r2,-16(fp)
10000cec:	10800717 	ldw	r2,28(r2)
10000cf0:	10800044 	addi	r2,r2,1
10000cf4:	01400284 	movi	r5,10
10000cf8:	1009883a 	mov	r4,r2
10000cfc:	0004a640 	call	10004a64 <__modsi3>
10000d00:	1007883a 	mov	r3,r2
10000d04:	e0bffc17 	ldw	r2,-16(fp)
10000d08:	10c00715 	stw	r3,28(r2)
    case 0x0007: { //"d" right move
    	kirby->is_left = 0;
        if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
            kirby->image = 0;
            kirby->action = 1;
            if (pre_keycode == keycode) {
10000d0c:	00005706 	br	10000e6c <updateKirby+0x6b4>
                kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
            } else {
                kirby->frame = 0;
10000d10:	e0bffc17 	ldw	r2,-16(fp)
10000d14:	10000715 	stw	zero,28(r2)
    case 0x0007: { //"d" right move
    	kirby->is_left = 0;
        if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
            kirby->image = 0;
            kirby->action = 1;
            if (pre_keycode == keycode) {
10000d18:	00005406 	br	10000e6c <updateKirby+0x6b4>
                kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
            } else {
                kirby->frame = 0;
            }
        } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
10000d1c:	e0bffc17 	ldw	r2,-16(fp)
10000d20:	10800917 	ldw	r2,36(r2)
10000d24:	10001e1e 	bne	r2,zero,10000da0 <updateKirby+0x5e8>
10000d28:	e0bffc17 	ldw	r2,-16(fp)
10000d2c:	10800a17 	ldw	r2,40(r2)
10000d30:	10800058 	cmpnei	r2,r2,1
10000d34:	10001a1e 	bne	r2,zero,10000da0 <updateKirby+0x5e8>
            kirby->image = 1;
10000d38:	e0bffc17 	ldw	r2,-16(fp)
10000d3c:	00c00044 	movi	r3,1
10000d40:	10c00315 	stw	r3,12(r2)
            kirby->action = 1;
10000d44:	e0bffc17 	ldw	r2,-16(fp)
10000d48:	00c00044 	movi	r3,1
10000d4c:	10c00615 	stw	r3,24(r2)
            if (pre_keycode == keycode) {
10000d50:	e0ffff17 	ldw	r3,-4(fp)
10000d54:	e0bffe17 	ldw	r2,-8(fp)
10000d58:	18800a1e 	bne	r3,r2,10000d84 <updateKirby+0x5cc>
                kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
10000d5c:	e0bffc17 	ldw	r2,-16(fp)
10000d60:	10800717 	ldw	r2,28(r2)
10000d64:	10800044 	addi	r2,r2,1
10000d68:	01400344 	movi	r5,13
10000d6c:	1009883a 	mov	r4,r2
10000d70:	0004a640 	call	10004a64 <__modsi3>
10000d74:	1007883a 	mov	r3,r2
10000d78:	e0bffc17 	ldw	r2,-16(fp)
10000d7c:	10c00715 	stw	r3,28(r2)
                kirby->frame = 0;
            }
        } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
            kirby->image = 1;
            kirby->action = 1;
            if (pre_keycode == keycode) {
10000d80:	00003a06 	br	10000e6c <updateKirby+0x6b4>
                kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
            } else {
                kirby->frame = 0 + 2 * kirby->in_slope;
10000d84:	e0bffc17 	ldw	r2,-16(fp)
10000d88:	10800817 	ldw	r2,32(r2)
10000d8c:	1085883a 	add	r2,r2,r2
10000d90:	1007883a 	mov	r3,r2
10000d94:	e0bffc17 	ldw	r2,-16(fp)
10000d98:	10c00715 	stw	r3,28(r2)
                kirby->frame = 0;
            }
        } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
            kirby->image = 1;
            kirby->action = 1;
            if (pre_keycode == keycode) {
10000d9c:	00003306 	br	10000e6c <updateKirby+0x6b4>
                kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
            } else {
                kirby->frame = 0 + 2 * kirby->in_slope;
            }
        } else {
            if (will_Touch_Ground(kirby, kirby->map)) {
10000da0:	e0bffc17 	ldw	r2,-16(fp)
10000da4:	10800217 	ldw	r2,8(r2)
10000da8:	100b883a 	mov	r5,r2
10000dac:	e13ffc17 	ldw	r4,-16(fp)
10000db0:	0001bc00 	call	10001bc0 <will_Touch_Ground>
10000db4:	10001f26 	beq	r2,zero,10000e34 <updateKirby+0x67c>
                kirby->image = 1;
10000db8:	e0bffc17 	ldw	r2,-16(fp)
10000dbc:	00c00044 	movi	r3,1
10000dc0:	10c00315 	stw	r3,12(r2)
                kirby->in_air = 0;
10000dc4:	e0bffc17 	ldw	r2,-16(fp)
10000dc8:	10000915 	stw	zero,36(r2)
                kirby->image = 1;
10000dcc:	e0bffc17 	ldw	r2,-16(fp)
10000dd0:	00c00044 	movi	r3,1
10000dd4:	10c00315 	stw	r3,12(r2)
                kirby->action = 1;
10000dd8:	e0bffc17 	ldw	r2,-16(fp)
10000ddc:	00c00044 	movi	r3,1
10000de0:	10c00615 	stw	r3,24(r2)
                if (pre_keycode == keycode) {
10000de4:	e0ffff17 	ldw	r3,-4(fp)
10000de8:	e0bffe17 	ldw	r2,-8(fp)
10000dec:	18800a1e 	bne	r3,r2,10000e18 <updateKirby+0x660>
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
10000df0:	e0bffc17 	ldw	r2,-16(fp)
10000df4:	10800717 	ldw	r2,28(r2)
10000df8:	10800044 	addi	r2,r2,1
10000dfc:	01400344 	movi	r5,13
10000e00:	1009883a 	mov	r4,r2
10000e04:	0004a640 	call	10004a64 <__modsi3>
10000e08:	1007883a 	mov	r3,r2
10000e0c:	e0bffc17 	ldw	r2,-16(fp)
10000e10:	10c00715 	stw	r3,28(r2)
10000e14:	00001506 	br	10000e6c <updateKirby+0x6b4>
                } else {
                    kirby->frame = 0 + 2 * kirby->in_slope;
10000e18:	e0bffc17 	ldw	r2,-16(fp)
10000e1c:	10800817 	ldw	r2,32(r2)
10000e20:	1085883a 	add	r2,r2,r2
10000e24:	1007883a 	mov	r3,r2
10000e28:	e0bffc17 	ldw	r2,-16(fp)
10000e2c:	10c00715 	stw	r3,28(r2)
10000e30:	00000e06 	br	10000e6c <updateKirby+0x6b4>
                } 
            } else {
                kirby->image = 1;
10000e34:	e0bffc17 	ldw	r2,-16(fp)
10000e38:	00c00044 	movi	r3,1
10000e3c:	10c00315 	stw	r3,12(r2)
                kirby->action = 2;
10000e40:	e0bffc17 	ldw	r2,-16(fp)
10000e44:	00c00084 	movi	r3,2
10000e48:	10c00615 	stw	r3,24(r2)
                kirby->frame = 13;
10000e4c:	e0bffc17 	ldw	r2,-16(fp)
10000e50:	00c00344 	movi	r3,13
10000e54:	10c00715 	stw	r3,28(r2)
                kirby->y += KIRBY_STEP_Y;
10000e58:	e0bffc17 	ldw	r2,-16(fp)
10000e5c:	10800117 	ldw	r2,4(r2)
10000e60:	10c000c4 	addi	r3,r2,3
10000e64:	e0bffc17 	ldw	r2,-16(fp)
10000e68:	10c00115 	stw	r3,4(r2)
            }
        }
        frame_Time(KIRBY_FRAME_TIME_WALK);
10000e6c:	01019004 	movi	r4,1600
10000e70:	0001b340 	call	10001b34 <frame_Time>
        kirby->x += KIRBY_STEP_X;
10000e74:	e0bffc17 	ldw	r2,-16(fp)
10000e78:	10800017 	ldw	r2,0(r2)
10000e7c:	10c000c4 	addi	r3,r2,3
10000e80:	e0bffc17 	ldw	r2,-16(fp)
10000e84:	10c00015 	stw	r3,0(r2)
        break;
10000e88:	0001bd06 	br	10001580 <updateKirby+0xdc8>
    }

    case 0x041a:   // "a" & "w"
    case 0x1a04: { // "w" & "a"
        kirby->is_left = 1;
10000e8c:	e0bffc17 	ldw	r2,-16(fp)
10000e90:	00c00044 	movi	r3,1
10000e94:	10c00415 	stw	r3,16(r2)
        kirby->in_air = 1;
10000e98:	e0bffc17 	ldw	r2,-16(fp)
10000e9c:	00c00044 	movi	r3,1
10000ea0:	10c00915 	stw	r3,36(r2)
        kirby->is_inhaled = 1;
10000ea4:	e0bffc17 	ldw	r2,-16(fp)
10000ea8:	00c00044 	movi	r3,1
10000eac:	10c00a15 	stw	r3,40(r2)
        kirby->image = 1;
10000eb0:	e0bffc17 	ldw	r2,-16(fp)
10000eb4:	00c00044 	movi	r3,1
10000eb8:	10c00315 	stw	r3,12(r2)
        kirby->action = 2;
10000ebc:	e0bffc17 	ldw	r2,-16(fp)
10000ec0:	00c00084 	movi	r3,2
10000ec4:	10c00615 	stw	r3,24(r2)
        if (pre_keycode == keycode) {
10000ec8:	e0ffff17 	ldw	r3,-4(fp)
10000ecc:	e0bffe17 	ldw	r2,-8(fp)
10000ed0:	18800a1e 	bne	r3,r2,10000efc <updateKirby+0x744>
            kirby->frame = 7 + ((kirby->frame - 7) + 1) % KIRBY_INHALED_FLY_FN;
10000ed4:	e0bffc17 	ldw	r2,-16(fp)
10000ed8:	10800717 	ldw	r2,28(r2)
10000edc:	10bffe84 	addi	r2,r2,-6
10000ee0:	01400184 	movi	r5,6
10000ee4:	1009883a 	mov	r4,r2
10000ee8:	0004a640 	call	10004a64 <__modsi3>
10000eec:	10c001c4 	addi	r3,r2,7
10000ef0:	e0bffc17 	ldw	r2,-16(fp)
10000ef4:	10c00715 	stw	r3,28(r2)
10000ef8:	00000306 	br	10000f08 <updateKirby+0x750>
        } else {
            kirby->frame = 7;
10000efc:	e0bffc17 	ldw	r2,-16(fp)
10000f00:	00c001c4 	movi	r3,7
10000f04:	10c00715 	stw	r3,28(r2)
        }
        // TO DO: Maybe need to check whether tough the up walls
        kirby->y -= KIRBY_STEP_Y;
10000f08:	e0bffc17 	ldw	r2,-16(fp)
10000f0c:	10800117 	ldw	r2,4(r2)
10000f10:	10ffff44 	addi	r3,r2,-3
10000f14:	e0bffc17 	ldw	r2,-16(fp)
10000f18:	10c00115 	stw	r3,4(r2)
        kirby->x -= KIRBY_STEP_X;
10000f1c:	e0bffc17 	ldw	r2,-16(fp)
10000f20:	10800017 	ldw	r2,0(r2)
10000f24:	10ffff44 	addi	r3,r2,-3
10000f28:	e0bffc17 	ldw	r2,-16(fp)
10000f2c:	10c00015 	stw	r3,0(r2)
        frame_Time(KIRBY_FRAME_TIME_WALK);
10000f30:	01019004 	movi	r4,1600
10000f34:	0001b340 	call	10001b34 <frame_Time>
        break;
10000f38:	00019106 	br	10001580 <updateKirby+0xdc8>
    }

    case 0x071a:   // "d" & "w"
    case 0x1a07:{  // "w" & "d"
        kirby->is_left = 0;
10000f3c:	e0bffc17 	ldw	r2,-16(fp)
10000f40:	10000415 	stw	zero,16(r2)
        kirby->in_air = 1;
10000f44:	e0bffc17 	ldw	r2,-16(fp)
10000f48:	00c00044 	movi	r3,1
10000f4c:	10c00915 	stw	r3,36(r2)
        kirby->is_inhaled = 1;
10000f50:	e0bffc17 	ldw	r2,-16(fp)
10000f54:	00c00044 	movi	r3,1
10000f58:	10c00a15 	stw	r3,40(r2)
        kirby->image = 1;
10000f5c:	e0bffc17 	ldw	r2,-16(fp)
10000f60:	00c00044 	movi	r3,1
10000f64:	10c00315 	stw	r3,12(r2)
        kirby->action = 2;
10000f68:	e0bffc17 	ldw	r2,-16(fp)
10000f6c:	00c00084 	movi	r3,2
10000f70:	10c00615 	stw	r3,24(r2)
        if (pre_keycode == keycode) {
10000f74:	e0ffff17 	ldw	r3,-4(fp)
10000f78:	e0bffe17 	ldw	r2,-8(fp)
10000f7c:	18800a1e 	bne	r3,r2,10000fa8 <updateKirby+0x7f0>
            kirby->frame = 7 + ((kirby->frame - 7) + 1) % KIRBY_INHALED_FLY_FN;
10000f80:	e0bffc17 	ldw	r2,-16(fp)
10000f84:	10800717 	ldw	r2,28(r2)
10000f88:	10bffe84 	addi	r2,r2,-6
10000f8c:	01400184 	movi	r5,6
10000f90:	1009883a 	mov	r4,r2
10000f94:	0004a640 	call	10004a64 <__modsi3>
10000f98:	10c001c4 	addi	r3,r2,7
10000f9c:	e0bffc17 	ldw	r2,-16(fp)
10000fa0:	10c00715 	stw	r3,28(r2)
10000fa4:	00000306 	br	10000fb4 <updateKirby+0x7fc>
        } else {
            kirby->frame = 7;
10000fa8:	e0bffc17 	ldw	r2,-16(fp)
10000fac:	00c001c4 	movi	r3,7
10000fb0:	10c00715 	stw	r3,28(r2)
        }
        // TO DO: Maybe need to check whether tough the up walls
        kirby->y -= KIRBY_STEP_Y;
10000fb4:	e0bffc17 	ldw	r2,-16(fp)
10000fb8:	10800117 	ldw	r2,4(r2)
10000fbc:	10ffff44 	addi	r3,r2,-3
10000fc0:	e0bffc17 	ldw	r2,-16(fp)
10000fc4:	10c00115 	stw	r3,4(r2)
        kirby->x += KIRBY_STEP_X;
10000fc8:	e0bffc17 	ldw	r2,-16(fp)
10000fcc:	10800017 	ldw	r2,0(r2)
10000fd0:	10c000c4 	addi	r3,r2,3
10000fd4:	e0bffc17 	ldw	r2,-16(fp)
10000fd8:	10c00015 	stw	r3,0(r2)
        frame_Time(KIRBY_FRAME_TIME_WALK);
10000fdc:	01019004 	movi	r4,1600
10000fe0:	0001b340 	call	10001b34 <frame_Time>
        break;
10000fe4:	00016606 	br	10001580 <updateKirby+0xdc8>
    }
    
    case 0x0016: { //"s" squat

        if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
10000fe8:	e0bffc17 	ldw	r2,-16(fp)
10000fec:	10800917 	ldw	r2,36(r2)
10000ff0:	1000231e 	bne	r2,zero,10001080 <updateKirby+0x8c8>
10000ff4:	e0bffc17 	ldw	r2,-16(fp)
10000ff8:	10800a17 	ldw	r2,40(r2)
10000ffc:	1000201e 	bne	r2,zero,10001080 <updateKirby+0x8c8>
            kirby->image = 0;
10001000:	e0bffc17 	ldw	r2,-16(fp)
10001004:	10000315 	stw	zero,12(r2)
            kirby->action = 2;
10001008:	e0bffc17 	ldw	r2,-16(fp)
1000100c:	00c00084 	movi	r3,2
10001010:	10c00615 	stw	r3,24(r2)
            if (pre_keycode == keycode) {
10001014:	e0ffff17 	ldw	r3,-4(fp)
10001018:	e0bffe17 	ldw	r2,-8(fp)
1000101c:	1880131e 	bne	r3,r2,1000106c <updateKirby+0x8b4>
                kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
10001020:	e0bffc17 	ldw	r2,-16(fp)
10001024:	10800717 	ldw	r2,28(r2)
10001028:	10c00044 	addi	r3,r2,1
1000102c:	00a00034 	movhi	r2,32768
10001030:	10800044 	addi	r2,r2,1
10001034:	1884703a 	and	r2,r3,r2
10001038:	1000040e 	bge	r2,zero,1000104c <updateKirby+0x894>
1000103c:	10bfffc4 	addi	r2,r2,-1
10001040:	00ffff84 	movi	r3,-2
10001044:	10c4b03a 	or	r2,r2,r3
10001048:	10800044 	addi	r2,r2,1
1000104c:	1007883a 	mov	r3,r2
10001050:	e0bffc17 	ldw	r2,-16(fp)
10001054:	10800817 	ldw	r2,32(r2)
10001058:	1085883a 	add	r2,r2,r2
1000105c:	1887883a 	add	r3,r3,r2
10001060:	e0bffc17 	ldw	r2,-16(fp)
10001064:	10c00715 	stw	r3,28(r2)
10001068:	00000206 	br	10001074 <updateKirby+0x8bc>
            } else {
                kirby->frame = 0;
1000106c:	e0bffc17 	ldw	r2,-16(fp)
10001070:	10000715 	stw	zero,28(r2)
            }
            frame_Time(KIRBY_FRAME_TIME_BLINK);
10001074:	010ea604 	movi	r4,15000
10001078:	0001b340 	call	10001b34 <frame_Time>
1000107c:	00004e06 	br	100011b8 <updateKirby+0xa00>
        } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) { // Gulp
10001080:	e0bffc17 	ldw	r2,-16(fp)
10001084:	10800917 	ldw	r2,36(r2)
10001088:	1000221e 	bne	r2,zero,10001114 <updateKirby+0x95c>
1000108c:	e0bffc17 	ldw	r2,-16(fp)
10001090:	10800a17 	ldw	r2,40(r2)
10001094:	10800058 	cmpnei	r2,r2,1
10001098:	10001e1e 	bne	r2,zero,10001114 <updateKirby+0x95c>
            kirby->image = 1;
1000109c:	e0bffc17 	ldw	r2,-16(fp)
100010a0:	00c00044 	movi	r3,1
100010a4:	10c00315 	stw	r3,12(r2)
            kirby->action = 2;
100010a8:	e0bffc17 	ldw	r2,-16(fp)
100010ac:	00c00084 	movi	r3,2
100010b0:	10c00615 	stw	r3,24(r2)
            //     kirby->frame = 0;
            // }
            // frame_Time(KIRBY_FRAME_TIME_GULP);

            // Version#2
            kirby->frame = 0;
100010b4:	e0bffc17 	ldw	r2,-16(fp)
100010b8:	10000715 	stw	zero,28(r2)
            for (i = 0; i < KIRBY_GULP_FN; i++) {
100010bc:	e03ffa15 	stw	zero,-24(fp)
100010c0:	00000c06 	br	100010f4 <updateKirby+0x93c>
                upload_Kirby_Info(kirby);
100010c4:	e13ffc17 	ldw	r4,-16(fp)
100010c8:	00006180 	call	10000618 <upload_Kirby_Info>
                kirby->frame += 1;
100010cc:	e0bffc17 	ldw	r2,-16(fp)
100010d0:	10800717 	ldw	r2,28(r2)
100010d4:	10c00044 	addi	r3,r2,1
100010d8:	e0bffc17 	ldw	r2,-16(fp)
100010dc:	10c00715 	stw	r3,28(r2)
                frame_Time(KIRBY_FRAME_TIME_GULP);
100010e0:	01138804 	movi	r4,20000
100010e4:	0001b340 	call	10001b34 <frame_Time>
            // }
            // frame_Time(KIRBY_FRAME_TIME_GULP);

            // Version#2
            kirby->frame = 0;
            for (i = 0; i < KIRBY_GULP_FN; i++) {
100010e8:	e0bffa17 	ldw	r2,-24(fp)
100010ec:	10800044 	addi	r2,r2,1
100010f0:	e0bffa15 	stw	r2,-24(fp)
100010f4:	e0bffa17 	ldw	r2,-24(fp)
100010f8:	10800190 	cmplti	r2,r2,6
100010fc:	103ff11e 	bne	r2,zero,100010c4 <__alt_data_end+0xf80010c4>
                upload_Kirby_Info(kirby);
                kirby->frame += 1;
                frame_Time(KIRBY_FRAME_TIME_GULP);
            }
            kirby->is_inhaled = 0;
10001100:	e0bffc17 	ldw	r2,-16(fp)
10001104:	10000a15 	stw	zero,40(r2)
            kirby_Return_Normal(kirby);
10001108:	e13ffc17 	ldw	r4,-16(fp)
1000110c:	000230c0 	call	1000230c <kirby_Return_Normal>
10001110:	00002906 	br	100011b8 <updateKirby+0xa00>
            
            
        } else {  // In the air, go down || change to walk mode if touch ground
            if (will_Touch_Ground(kirby, kirby->map) == 1) {
10001114:	e0bffc17 	ldw	r2,-16(fp)
10001118:	10800217 	ldw	r2,8(r2)
1000111c:	100b883a 	mov	r5,r2
10001120:	e13ffc17 	ldw	r4,-16(fp)
10001124:	0001bc00 	call	10001bc0 <will_Touch_Ground>
10001128:	10800058 	cmpnei	r2,r2,1
1000112c:	1000111e 	bne	r2,zero,10001174 <updateKirby+0x9bc>
                kirby->in_air = 0;
10001130:	e0bffc17 	ldw	r2,-16(fp)
10001134:	10000915 	stw	zero,36(r2)
                force_It_On_Ground(kirby, kirby->map); // It will go to the ground
10001138:	e0bffc17 	ldw	r2,-16(fp)
1000113c:	10800217 	ldw	r2,8(r2)
10001140:	100b883a 	mov	r5,r2
10001144:	e13ffc17 	ldw	r4,-16(fp)
10001148:	00016340 	call	10001634 <force_It_On_Ground>
                kirby->image = 1;
1000114c:	e0bffc17 	ldw	r2,-16(fp)
10001150:	00c00044 	movi	r3,1
10001154:	10c00315 	stw	r3,12(r2)
                kirby->action = 0;
10001158:	e0bffc17 	ldw	r2,-16(fp)
1000115c:	10000615 	stw	zero,24(r2)
                kirby->frame = 0;
10001160:	e0bffc17 	ldw	r2,-16(fp)
10001164:	10000715 	stw	zero,28(r2)
                frame_Time(KIRBY_FRAME_TIME_BLINK);
10001168:	010ea604 	movi	r4,15000
1000116c:	0001b340 	call	10001b34 <frame_Time>
                kirby->frame = 13;
                kirby->y += KIRBY_DROP_Y;
                frame_Time(KIRBY_FRAME_TIME_WALK);
            }
        }
        break;
10001170:	00010306 	br	10001580 <updateKirby+0xdc8>
                kirby->image = 1;
                kirby->action = 0;
                kirby->frame = 0;
                frame_Time(KIRBY_FRAME_TIME_BLINK);
            } else {  // Slowly Drop downwards
                kirby->image = 1;
10001174:	e0bffc17 	ldw	r2,-16(fp)
10001178:	00c00044 	movi	r3,1
1000117c:	10c00315 	stw	r3,12(r2)
                kirby->action = 2;
10001180:	e0bffc17 	ldw	r2,-16(fp)
10001184:	00c00084 	movi	r3,2
10001188:	10c00615 	stw	r3,24(r2)
                kirby->frame = 13;
1000118c:	e0bffc17 	ldw	r2,-16(fp)
10001190:	00c00344 	movi	r3,13
10001194:	10c00715 	stw	r3,28(r2)
                kirby->y += KIRBY_DROP_Y;
10001198:	e0bffc17 	ldw	r2,-16(fp)
1000119c:	10800117 	ldw	r2,4(r2)
100011a0:	10c00104 	addi	r3,r2,4
100011a4:	e0bffc17 	ldw	r2,-16(fp)
100011a8:	10c00115 	stw	r3,4(r2)
                frame_Time(KIRBY_FRAME_TIME_WALK);
100011ac:	01019004 	movi	r4,1600
100011b0:	0001b340 	call	10001b34 <frame_Time>
            }
        }
        break;
100011b4:	0000f206 	br	10001580 <updateKirby+0xdc8>
100011b8:	0000f106 	br	10001580 <updateKirby+0xdc8>
    }

    case 0x001a: { //"w" jump
        kirby->in_air = 1;
100011bc:	e0bffc17 	ldw	r2,-16(fp)
100011c0:	00c00044 	movi	r3,1
100011c4:	10c00915 	stw	r3,36(r2)
        kirby->is_inhaled = 1;
100011c8:	e0bffc17 	ldw	r2,-16(fp)
100011cc:	00c00044 	movi	r3,1
100011d0:	10c00a15 	stw	r3,40(r2)
        kirby->image = 1;
100011d4:	e0bffc17 	ldw	r2,-16(fp)
100011d8:	00c00044 	movi	r3,1
100011dc:	10c00315 	stw	r3,12(r2)
        kirby->action = 2;
100011e0:	e0bffc17 	ldw	r2,-16(fp)
100011e4:	00c00084 	movi	r3,2
100011e8:	10c00615 	stw	r3,24(r2)
        if (pre_keycode == keycode) {
100011ec:	e0ffff17 	ldw	r3,-4(fp)
100011f0:	e0bffe17 	ldw	r2,-8(fp)
100011f4:	18800a1e 	bne	r3,r2,10001220 <updateKirby+0xa68>
            kirby->frame = 7 + ((kirby->frame - 7) + 1) % KIRBY_INHALED_FLY_FN;
100011f8:	e0bffc17 	ldw	r2,-16(fp)
100011fc:	10800717 	ldw	r2,28(r2)
10001200:	10bffe84 	addi	r2,r2,-6
10001204:	01400184 	movi	r5,6
10001208:	1009883a 	mov	r4,r2
1000120c:	0004a640 	call	10004a64 <__modsi3>
10001210:	10c001c4 	addi	r3,r2,7
10001214:	e0bffc17 	ldw	r2,-16(fp)
10001218:	10c00715 	stw	r3,28(r2)
1000121c:	00000306 	br	1000122c <updateKirby+0xa74>
        } else {
            kirby->frame = 7;
10001220:	e0bffc17 	ldw	r2,-16(fp)
10001224:	00c001c4 	movi	r3,7
10001228:	10c00715 	stw	r3,28(r2)
        }
        // TO DO: Maybe need to check whether tough the up walls
        kirby->y -= KIRBY_STEP_Y; // fly upwards
1000122c:	e0bffc17 	ldw	r2,-16(fp)
10001230:	10800117 	ldw	r2,4(r2)
10001234:	10ffff44 	addi	r3,r2,-3
10001238:	e0bffc17 	ldw	r2,-16(fp)
1000123c:	10c00115 	stw	r3,4(r2)
        frame_Time(KIRBY_FRAME_TIME_WALK);
10001240:	01019004 	movi	r4,1600
10001244:	0001b340 	call	10001b34 <frame_Time>
        break;
10001248:	0000cd06 	br	10001580 <updateKirby+0xdc8>
    }

    case 0x000e: { //"k" Fake B button
        if (kirby->is_inhaled == 0) {
1000124c:	e0bffc17 	ldw	r2,-16(fp)
10001250:	10800a17 	ldw	r2,40(r2)
10001254:	10000c1e 	bne	r2,zero,10001288 <updateKirby+0xad0>
            // Inhale
            kirby->inhaling = 1;
10001258:	e0bffc17 	ldw	r2,-16(fp)
1000125c:	00c00044 	movi	r3,1
10001260:	10c00c15 	stw	r3,48(r2)
            kirby->image = 1;
10001264:	e0bffc17 	ldw	r2,-16(fp)
10001268:	00c00044 	movi	r3,1
1000126c:	10c00315 	stw	r3,12(r2)
            kirby->action = 3;
10001270:	e0bffc17 	ldw	r2,-16(fp)
10001274:	00c000c4 	movi	r3,3
10001278:	10c00615 	stw	r3,24(r2)
            if (1) {// Not get enemy signal
                kirby_Inhaling(kirby);
1000127c:	e13ffc17 	ldw	r4,-16(fp)
10001280:	000214c0 	call	1000214c <kirby_Inhaling>
10001284:	00000306 	br	10001294 <updateKirby+0xadc>
                }
                kirby->is_inhaled = 1;
                kirby->inhaling = 0;
            }
        } else { // Spitting
            kirby_Spitting(kirby, star);
10001288:	e17ffd17 	ldw	r5,-12(fp)
1000128c:	e13ffc17 	ldw	r4,-16(fp)
10001290:	00022340 	call	10002234 <kirby_Spitting>
        }
        frame_Time(KIRBY_FRAME_TIME_GULP);
10001294:	01138804 	movi	r4,20000
10001298:	0001b340 	call	10001b34 <frame_Time>
        break;
1000129c:	0000b806 	br	10001580 <updateKirby+0xdc8>
        break;
    }

    case 0x160f:
    case 0x0f16: { //"l" & "s"
        if (kirby->is_inhaled == 0) {
100012a0:	e0bffc17 	ldw	r2,-16(fp)
100012a4:	10800a17 	ldw	r2,40(r2)
100012a8:	1000211e 	bne	r2,zero,10001330 <updateKirby+0xb78>
            kirby_Kick_Ass(kirby);
100012ac:	e13ffc17 	ldw	r4,-16(fp)
100012b0:	00023680 	call	10002368 <kirby_Kick_Ass>
        }
        while ((get_keycode_value() == 0x160f) || (get_keycode_value() == 0x0f16)) {
100012b4:	00001e06 	br	10001330 <updateKirby+0xb78>
            kirby->image = 0;
100012b8:	e0bffc17 	ldw	r2,-16(fp)
100012bc:	10000315 	stw	zero,12(r2)
            kirby->action = 2;
100012c0:	e0bffc17 	ldw	r2,-16(fp)
100012c4:	00c00084 	movi	r3,2
100012c8:	10c00615 	stw	r3,24(r2)
            kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
100012cc:	e0bffc17 	ldw	r2,-16(fp)
100012d0:	10800717 	ldw	r2,28(r2)
100012d4:	10c00044 	addi	r3,r2,1
100012d8:	00a00034 	movhi	r2,32768
100012dc:	10800044 	addi	r2,r2,1
100012e0:	1884703a 	and	r2,r3,r2
100012e4:	1000040e 	bge	r2,zero,100012f8 <updateKirby+0xb40>
100012e8:	10bfffc4 	addi	r2,r2,-1
100012ec:	00ffff84 	movi	r3,-2
100012f0:	10c4b03a 	or	r2,r2,r3
100012f4:	10800044 	addi	r2,r2,1
100012f8:	1007883a 	mov	r3,r2
100012fc:	e0bffc17 	ldw	r2,-16(fp)
10001300:	10800817 	ldw	r2,32(r2)
10001304:	1085883a 	add	r2,r2,r2
10001308:	1887883a 	add	r3,r3,r2
1000130c:	e0bffc17 	ldw	r2,-16(fp)
10001310:	10c00715 	stw	r3,28(r2)
            upload_Kirby_Info(kirby);
10001314:	e13ffc17 	ldw	r4,-16(fp)
10001318:	00006180 	call	10000618 <upload_Kirby_Info>
            force_It_On_Ground(kirby, kirby->map);
1000131c:	e0bffc17 	ldw	r2,-16(fp)
10001320:	10800217 	ldw	r2,8(r2)
10001324:	100b883a 	mov	r5,r2
10001328:	e13ffc17 	ldw	r4,-16(fp)
1000132c:	00016340 	call	10001634 <force_It_On_Ground>
    case 0x160f:
    case 0x0f16: { //"l" & "s"
        if (kirby->is_inhaled == 0) {
            kirby_Kick_Ass(kirby);
        }
        while ((get_keycode_value() == 0x160f) || (get_keycode_value() == 0x0f16)) {
10001330:	00046f80 	call	100046f8 <get_keycode_value>
10001334:	108583e0 	cmpeqi	r2,r2,5647
10001338:	103fdf1e 	bne	r2,zero,100012b8 <__alt_data_end+0xf80012b8>
1000133c:	00046f80 	call	100046f8 <get_keycode_value>
10001340:	1083c5a0 	cmpeqi	r2,r2,3862
10001344:	103fdc1e 	bne	r2,zero,100012b8 <__alt_data_end+0xf80012b8>
            kirby->action = 2;
            kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
            upload_Kirby_Info(kirby);
            force_It_On_Ground(kirby, kirby->map);
        }
        break;
10001348:	00008d06 	br	10001580 <updateKirby+0xdc8>
    }

    #ifdef TEST_EDGE
    case 0x0017: // "t" test
        kirby->frame += 1;
1000134c:	e0bffc17 	ldw	r2,-16(fp)
10001350:	10800717 	ldw	r2,28(r2)
10001354:	10c00044 	addi	r3,r2,1
10001358:	e0bffc17 	ldw	r2,-16(fp)
1000135c:	10c00715 	stw	r3,28(r2)
        frame_Time(KIRBY_FRAME_STOP);
10001360:	010000f4 	movhi	r4,3
10001364:	21035004 	addi	r4,r4,3392
10001368:	0001b340 	call	10001b34 <frame_Time>
        break;
1000136c:	00008406 	br	10001580 <updateKirby+0xdc8>
    #endif

    default: { // "" Stand
        if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
10001370:	e0bffc17 	ldw	r2,-16(fp)
10001374:	10800917 	ldw	r2,36(r2)
10001378:	1000261e 	bne	r2,zero,10001414 <updateKirby+0xc5c>
1000137c:	e0bffc17 	ldw	r2,-16(fp)
10001380:	10800a17 	ldw	r2,40(r2)
10001384:	1000231e 	bne	r2,zero,10001414 <updateKirby+0xc5c>
            kirby->image = 0;
10001388:	e0bffc17 	ldw	r2,-16(fp)
1000138c:	10000315 	stw	zero,12(r2)
            kirby->action = 0;
10001390:	e0bffc17 	ldw	r2,-16(fp)
10001394:	10000615 	stw	zero,24(r2)
            if (pre_keycode == keycode) {
10001398:	e0ffff17 	ldw	r3,-4(fp)
1000139c:	e0bffe17 	ldw	r2,-8(fp)
100013a0:	1880131e 	bne	r3,r2,100013f0 <updateKirby+0xc38>
                kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
100013a4:	e0bffc17 	ldw	r2,-16(fp)
100013a8:	10800717 	ldw	r2,28(r2)
100013ac:	10c00044 	addi	r3,r2,1
100013b0:	00a00034 	movhi	r2,32768
100013b4:	10800044 	addi	r2,r2,1
100013b8:	1884703a 	and	r2,r3,r2
100013bc:	1000040e 	bge	r2,zero,100013d0 <updateKirby+0xc18>
100013c0:	10bfffc4 	addi	r2,r2,-1
100013c4:	00ffff84 	movi	r3,-2
100013c8:	10c4b03a 	or	r2,r2,r3
100013cc:	10800044 	addi	r2,r2,1
100013d0:	1007883a 	mov	r3,r2
100013d4:	e0bffc17 	ldw	r2,-16(fp)
100013d8:	10800817 	ldw	r2,32(r2)
100013dc:	1085883a 	add	r2,r2,r2
100013e0:	1887883a 	add	r3,r3,r2
100013e4:	e0bffc17 	ldw	r2,-16(fp)
100013e8:	10c00715 	stw	r3,28(r2)
100013ec:	00000606 	br	10001408 <updateKirby+0xc50>
            } else {
                kirby->frame = 0 + 2 * kirby->in_slope;
100013f0:	e0bffc17 	ldw	r2,-16(fp)
100013f4:	10800817 	ldw	r2,32(r2)
100013f8:	1085883a 	add	r2,r2,r2
100013fc:	1007883a 	mov	r3,r2
10001400:	e0bffc17 	ldw	r2,-16(fp)
10001404:	10c00715 	stw	r3,28(r2)
            }
            frame_Time(KIRBY_FRAME_TIME_BLINK);
10001408:	010ea604 	movi	r4,15000
1000140c:	0001b340 	call	10001b34 <frame_Time>
10001410:	00005906 	br	10001578 <updateKirby+0xdc0>
        } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
10001414:	e0bffc17 	ldw	r2,-16(fp)
10001418:	10800917 	ldw	r2,36(r2)
1000141c:	1000281e 	bne	r2,zero,100014c0 <updateKirby+0xd08>
10001420:	e0bffc17 	ldw	r2,-16(fp)
10001424:	10800a17 	ldw	r2,40(r2)
10001428:	10800058 	cmpnei	r2,r2,1
1000142c:	1000241e 	bne	r2,zero,100014c0 <updateKirby+0xd08>
            kirby->image = 1;
10001430:	e0bffc17 	ldw	r2,-16(fp)
10001434:	00c00044 	movi	r3,1
10001438:	10c00315 	stw	r3,12(r2)
            kirby->action = 0;
1000143c:	e0bffc17 	ldw	r2,-16(fp)
10001440:	10000615 	stw	zero,24(r2)
            if (pre_keycode == keycode) {
10001444:	e0ffff17 	ldw	r3,-4(fp)
10001448:	e0bffe17 	ldw	r2,-8(fp)
1000144c:	1880131e 	bne	r3,r2,1000149c <updateKirby+0xce4>
                kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
10001450:	e0bffc17 	ldw	r2,-16(fp)
10001454:	10800717 	ldw	r2,28(r2)
10001458:	10c00044 	addi	r3,r2,1
1000145c:	00a00034 	movhi	r2,32768
10001460:	10800044 	addi	r2,r2,1
10001464:	1884703a 	and	r2,r3,r2
10001468:	1000040e 	bge	r2,zero,1000147c <updateKirby+0xcc4>
1000146c:	10bfffc4 	addi	r2,r2,-1
10001470:	00ffff84 	movi	r3,-2
10001474:	10c4b03a 	or	r2,r2,r3
10001478:	10800044 	addi	r2,r2,1
1000147c:	1007883a 	mov	r3,r2
10001480:	e0bffc17 	ldw	r2,-16(fp)
10001484:	10800817 	ldw	r2,32(r2)
10001488:	1085883a 	add	r2,r2,r2
1000148c:	1887883a 	add	r3,r3,r2
10001490:	e0bffc17 	ldw	r2,-16(fp)
10001494:	10c00715 	stw	r3,28(r2)
10001498:	00000606 	br	100014b4 <updateKirby+0xcfc>
            } else {
                kirby->frame = 0 + 2 * kirby->in_slope;
1000149c:	e0bffc17 	ldw	r2,-16(fp)
100014a0:	10800817 	ldw	r2,32(r2)
100014a4:	1085883a 	add	r2,r2,r2
100014a8:	1007883a 	mov	r3,r2
100014ac:	e0bffc17 	ldw	r2,-16(fp)
100014b0:	10c00715 	stw	r3,28(r2)
            }
            frame_Time(KIRBY_FRAME_TIME_BLINK);
100014b4:	010ea604 	movi	r4,15000
100014b8:	0001b340 	call	10001b34 <frame_Time>
100014bc:	00002e06 	br	10001578 <updateKirby+0xdc0>
        } else {
            if (will_Touch_Ground(kirby, kirby->map)) {
100014c0:	e0bffc17 	ldw	r2,-16(fp)
100014c4:	10800217 	ldw	r2,8(r2)
100014c8:	100b883a 	mov	r5,r2
100014cc:	e13ffc17 	ldw	r4,-16(fp)
100014d0:	0001bc00 	call	10001bc0 <will_Touch_Ground>
100014d4:	10001726 	beq	r2,zero,10001534 <updateKirby+0xd7c>
                kirby->image = 1;
100014d8:	e0bffc17 	ldw	r2,-16(fp)
100014dc:	00c00044 	movi	r3,1
100014e0:	10c00315 	stw	r3,12(r2)
                kirby->action = 2;
100014e4:	e0bffc17 	ldw	r2,-16(fp)
100014e8:	00c00084 	movi	r3,2
100014ec:	10c00615 	stw	r3,24(r2)
                if (pre_keycode == keycode) {
100014f0:	e0ffff17 	ldw	r3,-4(fp)
100014f4:	e0bffe17 	ldw	r2,-8(fp)
100014f8:	18800a1e 	bne	r3,r2,10001524 <updateKirby+0xd6c>
                    kirby->frame = 7 + ((kirby->frame - 7) + 1) % KIRBY_INHALED_FLY_FN;
100014fc:	e0bffc17 	ldw	r2,-16(fp)
10001500:	10800717 	ldw	r2,28(r2)
10001504:	10bffe84 	addi	r2,r2,-6
10001508:	01400184 	movi	r5,6
1000150c:	1009883a 	mov	r4,r2
10001510:	0004a640 	call	10004a64 <__modsi3>
10001514:	10c001c4 	addi	r3,r2,7
10001518:	e0bffc17 	ldw	r2,-16(fp)
1000151c:	10c00715 	stw	r3,28(r2)
                kirby->frame = 13;
                kirby->y += KIRBY_STEP_Y;
                frame_Time(KIRBY_FRAME_TIME_WALK);
            }
        }
        break;
10001520:	00001706 	br	10001580 <updateKirby+0xdc8>
                kirby->image = 1;
                kirby->action = 2;
                if (pre_keycode == keycode) {
                    kirby->frame = 7 + ((kirby->frame - 7) + 1) % KIRBY_INHALED_FLY_FN;
                } else {
                    kirby->frame = 7;
10001524:	e0bffc17 	ldw	r2,-16(fp)
10001528:	00c001c4 	movi	r3,7
1000152c:	10c00715 	stw	r3,28(r2)
                kirby->frame = 13;
                kirby->y += KIRBY_STEP_Y;
                frame_Time(KIRBY_FRAME_TIME_WALK);
            }
        }
        break;
10001530:	00001306 	br	10001580 <updateKirby+0xdc8>
                    kirby->frame = 7 + ((kirby->frame - 7) + 1) % KIRBY_INHALED_FLY_FN;
                } else {
                    kirby->frame = 7;
                }
            } else {
                kirby->image = 1;
10001534:	e0bffc17 	ldw	r2,-16(fp)
10001538:	00c00044 	movi	r3,1
1000153c:	10c00315 	stw	r3,12(r2)
                kirby->action = 2;
10001540:	e0bffc17 	ldw	r2,-16(fp)
10001544:	00c00084 	movi	r3,2
10001548:	10c00615 	stw	r3,24(r2)
                kirby->frame = 13;
1000154c:	e0bffc17 	ldw	r2,-16(fp)
10001550:	00c00344 	movi	r3,13
10001554:	10c00715 	stw	r3,28(r2)
                kirby->y += KIRBY_STEP_Y;
10001558:	e0bffc17 	ldw	r2,-16(fp)
1000155c:	10800117 	ldw	r2,4(r2)
10001560:	10c000c4 	addi	r3,r2,3
10001564:	e0bffc17 	ldw	r2,-16(fp)
10001568:	10c00115 	stw	r3,4(r2)
                frame_Time(KIRBY_FRAME_TIME_WALK);
1000156c:	01019004 	movi	r4,1600
10001570:	0001b340 	call	10001b34 <frame_Time>
            }
        }
        break;
10001574:	00000206 	br	10001580 <updateKirby+0xdc8>
10001578:	00000106 	br	10001580 <updateKirby+0xdc8>
        break;
    }

    case 0x000f: { //"l" Fake A button
            // Jump
        break;
1000157c:	0001883a 	nop
    }
    }

    /* Position adjustment */
    // 1-Make sure Kirby not extending the map edges
    if (kirby->x <= 0) {
10001580:	e0bffc17 	ldw	r2,-16(fp)
10001584:	10800017 	ldw	r2,0(r2)
10001588:	00800316 	blt	zero,r2,10001598 <updateKirby+0xde0>
        kirby->x = 0;
1000158c:	e0bffc17 	ldw	r2,-16(fp)
10001590:	10000015 	stw	zero,0(r2)
10001594:	00000706 	br	100015b4 <updateKirby+0xdfc>
    } else if (kirby->x >= map_width) {
10001598:	e0bffc17 	ldw	r2,-16(fp)
1000159c:	10c00017 	ldw	r3,0(r2)
100015a0:	e0bffb17 	ldw	r2,-20(fp)
100015a4:	18800316 	blt	r3,r2,100015b4 <updateKirby+0xdfc>
        kirby->x = map_width;
100015a8:	e0bffc17 	ldw	r2,-16(fp)
100015ac:	e0fffb17 	ldw	r3,-20(fp)
100015b0:	10c00015 	stw	r3,0(r2)
    }
    if (kirby->y <= 0) {
100015b4:	e0bffc17 	ldw	r2,-16(fp)
100015b8:	10800117 	ldw	r2,4(r2)
100015bc:	00800316 	blt	zero,r2,100015cc <updateKirby+0xe14>
        kirby->y = 0;
100015c0:	e0bffc17 	ldw	r2,-16(fp)
100015c4:	10000115 	stw	zero,4(r2)
100015c8:	00000706 	br	100015e8 <updateKirby+0xe30>
    } else if (kirby->y >= MAP_HEIGHT) {
100015cc:	e0bffc17 	ldw	r2,-16(fp)
100015d0:	10800117 	ldw	r2,4(r2)
100015d4:	10802c10 	cmplti	r2,r2,176
100015d8:	1000031e 	bne	r2,zero,100015e8 <updateKirby+0xe30>
        kirby->y = MAP_HEIGHT;
100015dc:	e0bffc17 	ldw	r2,-16(fp)
100015e0:	00c02c04 	movi	r3,176
100015e4:	10c00115 	stw	r3,4(r2)
    }
    
    // 2-Floor detection for kirby on the ground
    if (kirby->in_air == 0) {
100015e8:	e0bffc17 	ldw	r2,-16(fp)
100015ec:	10800917 	ldw	r2,36(r2)
100015f0:	1000051e 	bne	r2,zero,10001608 <updateKirby+0xe50>
        force_It_On_Ground(kirby, kirby->map);
100015f4:	e0bffc17 	ldw	r2,-16(fp)
100015f8:	10800217 	ldw	r2,8(r2)
100015fc:	100b883a 	mov	r5,r2
10001600:	e13ffc17 	ldw	r4,-16(fp)
10001604:	00016340 	call	10001634 <force_It_On_Ground>
    }
    // 3-Make sure Kirby do not go inside white area
    force_It_Inside_Map(kirby, kirby->map);
10001608:	e0bffc17 	ldw	r2,-16(fp)
1000160c:	10800217 	ldw	r2,8(r2)
10001610:	100b883a 	mov	r5,r2
10001614:	e13ffc17 	ldw	r4,-16(fp)
10001618:	00017c40 	call	100017c4 <force_It_Inside_Map>
}
1000161c:	0001883a 	nop
10001620:	e037883a 	mov	sp,fp
10001624:	dfc00117 	ldw	ra,4(sp)
10001628:	df000017 	ldw	fp,0(sp)
1000162c:	dec00204 	addi	sp,sp,8
10001630:	f800283a 	ret

10001634 <force_It_On_Ground>:
    
// }



void force_It_On_Ground(Kirby * kirby, int map_idx) {
10001634:	defff904 	addi	sp,sp,-28
10001638:	dfc00615 	stw	ra,24(sp)
1000163c:	df000515 	stw	fp,20(sp)
10001640:	df000504 	addi	fp,sp,20
10001644:	e13ffe15 	stw	r4,-8(fp)
10001648:	e17fff15 	stw	r5,-4(fp)
    int kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
1000164c:	e13ffe17 	ldw	r4,-8(fp)
10001650:	0001c480 	call	10001c48 <get_Kirby_Botton_Pos>
10001654:	1004d43a 	srli	r2,r2,16
10001658:	e0bffb15 	stw	r2,-20(fp)
    int kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
1000165c:	e13ffe17 	ldw	r4,-8(fp)
10001660:	0001c480 	call	10001c48 <get_Kirby_Botton_Pos>
10001664:	10bfffcc 	andi	r2,r2,65535
10001668:	e0bffc15 	stw	r2,-16(fp)
    // int kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
    // int kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;

    // Cling to the ground
    while (get_Wall_Info(kirby_botton_X, kirby_botton_Y + 1, map_idx) == AREA_CAN_GO) {
1000166c:	00004806 	br	10001790 <force_It_On_Ground+0x15c>
        int dropping_keycode = 0;
10001670:	e03ffd15 	stw	zero,-12(fp)
        kirby->y += 3;
10001674:	e0bffe17 	ldw	r2,-8(fp)
10001678:	10800117 	ldw	r2,4(r2)
1000167c:	10c000c4 	addi	r3,r2,3
10001680:	e0bffe17 	ldw	r2,-8(fp)
10001684:	10c00115 	stw	r3,4(r2)
        
        // To Do: Butify Drop Logic
        dropping_keycode = get_keycode_value();
10001688:	00046f80 	call	100046f8 <get_keycode_value>
1000168c:	e0bffd15 	stw	r2,-12(fp)
        switch (dropping_keycode)
10001690:	e0bffd17 	ldw	r2,-12(fp)
10001694:	10c1c020 	cmpeqi	r3,r2,1792
10001698:	1800291e 	bne	r3,zero,10001740 <force_It_On_Ground+0x10c>
1000169c:	10c1c048 	cmpgei	r3,r2,1793
100016a0:	18000e1e 	bne	r3,zero,100016dc <force_It_On_Ground+0xa8>
100016a4:	10c10020 	cmpeqi	r3,r2,1024
100016a8:	18001c1e 	bne	r3,zero,1000171c <force_It_On_Ground+0xe8>
100016ac:	10c10048 	cmpgei	r3,r2,1025
100016b0:	1800051e 	bne	r3,zero,100016c8 <force_It_On_Ground+0x94>
100016b4:	10c00120 	cmpeqi	r3,r2,4
100016b8:	1800181e 	bne	r3,zero,1000171c <force_It_On_Ground+0xe8>
100016bc:	108001e0 	cmpeqi	r2,r2,7
100016c0:	10001f1e 	bne	r2,zero,10001740 <force_It_On_Ground+0x10c>
            kirby->is_left = 0;
            kirby->x += KIRBY_STEP_X;
            break;
        
        default:
            break;
100016c4:	00002606 	br	10001760 <force_It_On_Ground+0x12c>
        int dropping_keycode = 0;
        kirby->y += 3;
        
        // To Do: Butify Drop Logic
        dropping_keycode = get_keycode_value();
        switch (dropping_keycode)
100016c8:	10c105a0 	cmpeqi	r3,r2,1046
100016cc:	1800131e 	bne	r3,zero,1000171c <force_It_On_Ground+0xe8>
100016d0:	108106a0 	cmpeqi	r2,r2,1050
100016d4:	1000111e 	bne	r2,zero,1000171c <force_It_On_Ground+0xe8>
            kirby->is_left = 0;
            kirby->x += KIRBY_STEP_X;
            break;
        
        default:
            break;
100016d8:	00002106 	br	10001760 <force_It_On_Ground+0x12c>
        int dropping_keycode = 0;
        kirby->y += 3;
        
        // To Do: Butify Drop Logic
        dropping_keycode = get_keycode_value();
        switch (dropping_keycode)
100016dc:	10c58120 	cmpeqi	r3,r2,5636
100016e0:	18000e1e 	bne	r3,zero,1000171c <force_It_On_Ground+0xe8>
100016e4:	10c58148 	cmpgei	r3,r2,5637
100016e8:	1800051e 	bne	r3,zero,10001700 <force_It_On_Ground+0xcc>
100016ec:	10c1c5a0 	cmpeqi	r3,r2,1814
100016f0:	1800131e 	bne	r3,zero,10001740 <force_It_On_Ground+0x10c>
100016f4:	1081c6a0 	cmpeqi	r2,r2,1818
100016f8:	1000111e 	bne	r2,zero,10001740 <force_It_On_Ground+0x10c>
            kirby->is_left = 0;
            kirby->x += KIRBY_STEP_X;
            break;
        
        default:
            break;
100016fc:	00001806 	br	10001760 <force_It_On_Ground+0x12c>
        int dropping_keycode = 0;
        kirby->y += 3;
        
        // To Do: Butify Drop Logic
        dropping_keycode = get_keycode_value();
        switch (dropping_keycode)
10001700:	10c68120 	cmpeqi	r3,r2,6660
10001704:	1800051e 	bne	r3,zero,1000171c <force_It_On_Ground+0xe8>
10001708:	10c681e0 	cmpeqi	r3,r2,6663
1000170c:	18000c1e 	bne	r3,zero,10001740 <force_It_On_Ground+0x10c>
10001710:	108581e0 	cmpeqi	r2,r2,5639
10001714:	10000a1e 	bne	r2,zero,10001740 <force_It_On_Ground+0x10c>
            kirby->is_left = 0;
            kirby->x += KIRBY_STEP_X;
            break;
        
        default:
            break;
10001718:	00001106 	br	10001760 <force_It_On_Ground+0x12c>
        case 0x0400:
        case 0x0416:
        case 0x1604:
        case 0x1a04:
        case 0x041a: 
            kirby->is_left = 1;
1000171c:	e0bffe17 	ldw	r2,-8(fp)
10001720:	00c00044 	movi	r3,1
10001724:	10c00415 	stw	r3,16(r2)
            kirby->x -= KIRBY_STEP_X;
10001728:	e0bffe17 	ldw	r2,-8(fp)
1000172c:	10800017 	ldw	r2,0(r2)
10001730:	10ffff44 	addi	r3,r2,-3
10001734:	e0bffe17 	ldw	r2,-8(fp)
10001738:	10c00015 	stw	r3,0(r2)
            break;
1000173c:	00000806 	br	10001760 <force_It_On_Ground+0x12c>
        case 0x0700:
        case 0x0716:
        case 0x1607:
        case 0x1a07:
        case 0x071a: 
            kirby->is_left = 0;
10001740:	e0bffe17 	ldw	r2,-8(fp)
10001744:	10000415 	stw	zero,16(r2)
            kirby->x += KIRBY_STEP_X;
10001748:	e0bffe17 	ldw	r2,-8(fp)
1000174c:	10800017 	ldw	r2,0(r2)
10001750:	10c000c4 	addi	r3,r2,3
10001754:	e0bffe17 	ldw	r2,-8(fp)
10001758:	10c00015 	stw	r3,0(r2)
            break;
1000175c:	0001883a 	nop
        default:
            break;
        }
        
        
        upload_Kirby_Info(kirby);
10001760:	e13ffe17 	ldw	r4,-8(fp)
10001764:	00006180 	call	10000618 <upload_Kirby_Info>
        frame_Time(KIRBY_FRAME_TIME_DROP);
10001768:	0102ee04 	movi	r4,3000
1000176c:	0001b340 	call	10001b34 <frame_Time>

        // Update values
        kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
10001770:	e13ffe17 	ldw	r4,-8(fp)
10001774:	0001c480 	call	10001c48 <get_Kirby_Botton_Pos>
10001778:	1004d43a 	srli	r2,r2,16
1000177c:	e0bffb15 	stw	r2,-20(fp)
        kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
10001780:	e13ffe17 	ldw	r4,-8(fp)
10001784:	0001c480 	call	10001c48 <get_Kirby_Botton_Pos>
10001788:	10bfffcc 	andi	r2,r2,65535
1000178c:	e0bffc15 	stw	r2,-16(fp)
    int kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
    // int kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
    // int kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;

    // Cling to the ground
    while (get_Wall_Info(kirby_botton_X, kirby_botton_Y + 1, map_idx) == AREA_CAN_GO) {
10001790:	e0bffc17 	ldw	r2,-16(fp)
10001794:	10800044 	addi	r2,r2,1
10001798:	e1bfff17 	ldw	r6,-4(fp)
1000179c:	100b883a 	mov	r5,r2
100017a0:	e13ffb17 	ldw	r4,-20(fp)
100017a4:	00020580 	call	10002058 <get_Wall_Info>
100017a8:	103fb126 	beq	r2,zero,10001670 <__alt_data_end+0xf8001670>

        // Update values
        kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
    }
}
100017ac:	0001883a 	nop
100017b0:	e037883a 	mov	sp,fp
100017b4:	dfc00117 	ldw	ra,4(sp)
100017b8:	df000017 	ldw	fp,0(sp)
100017bc:	dec00204 	addi	sp,sp,8
100017c0:	f800283a 	ret

100017c4 <force_It_Inside_Map>:

void force_It_Inside_Map(Kirby * kirby, int map_idx) {
100017c4:	defff404 	addi	sp,sp,-48
100017c8:	dfc00b15 	stw	ra,44(sp)
100017cc:	df000a15 	stw	fp,40(sp)
100017d0:	df000a04 	addi	fp,sp,40
100017d4:	e13ffe15 	stw	r4,-8(fp)
100017d8:	e17fff15 	stw	r5,-4(fp)
    int kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
100017dc:	e13ffe17 	ldw	r4,-8(fp)
100017e0:	0001c480 	call	10001c48 <get_Kirby_Botton_Pos>
100017e4:	1004d43a 	srli	r2,r2,16
100017e8:	e0bff615 	stw	r2,-40(fp)
    int kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
100017ec:	e13ffe17 	ldw	r4,-8(fp)
100017f0:	0001c480 	call	10001c48 <get_Kirby_Botton_Pos>
100017f4:	10bfffcc 	andi	r2,r2,65535
100017f8:	e0bff715 	stw	r2,-36(fp)
    int kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
100017fc:	e13ffe17 	ldw	r4,-8(fp)
10001800:	0001d4c0 	call	10001d4c <get_Kirby_Ceil_Pos>
10001804:	1004d43a 	srli	r2,r2,16
10001808:	e0bff815 	stw	r2,-32(fp)
    int kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;
1000180c:	e13ffe17 	ldw	r4,-8(fp)
10001810:	0001d4c0 	call	10001d4c <get_Kirby_Ceil_Pos>
10001814:	10bfffcc 	andi	r2,r2,65535
10001818:	e0bff915 	stw	r2,-28(fp)
    int kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
1000181c:	e13ffe17 	ldw	r4,-8(fp)
10001820:	0001e500 	call	10001e50 <get_Kirby_Left_Pos>
10001824:	1004d43a 	srli	r2,r2,16
10001828:	e0bffa15 	stw	r2,-24(fp)
    int kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
1000182c:	e13ffe17 	ldw	r4,-8(fp)
10001830:	0001e500 	call	10001e50 <get_Kirby_Left_Pos>
10001834:	10bfffcc 	andi	r2,r2,65535
10001838:	e0bffb15 	stw	r2,-20(fp)
    int kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
1000183c:	e13ffe17 	ldw	r4,-8(fp)
10001840:	0001f540 	call	10001f54 <get_Kirby_Right_Pos>
10001844:	1004d43a 	srli	r2,r2,16
10001848:	e0bffc15 	stw	r2,-16(fp)
    int kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
1000184c:	e13ffe17 	ldw	r4,-8(fp)
10001850:	0001f540 	call	10001f54 <get_Kirby_Right_Pos>
10001854:	10bfffcc 	andi	r2,r2,65535
10001858:	e0bffd15 	stw	r2,-12(fp)

    while (get_Wall_Info(kirby_botton_X, kirby_botton_Y, map_idx) == AREA_CANNOT_GO)
1000185c:	00002506 	br	100018f4 <force_It_Inside_Map+0x130>
    {
        kirby->y -= 1;
10001860:	e0bffe17 	ldw	r2,-8(fp)
10001864:	10800117 	ldw	r2,4(r2)
10001868:	10ffffc4 	addi	r3,r2,-1
1000186c:	e0bffe17 	ldw	r2,-8(fp)
10001870:	10c00115 	stw	r3,4(r2)
        kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
10001874:	e13ffe17 	ldw	r4,-8(fp)
10001878:	0001c480 	call	10001c48 <get_Kirby_Botton_Pos>
1000187c:	1004d43a 	srli	r2,r2,16
10001880:	e0bff615 	stw	r2,-40(fp)
        kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
10001884:	e13ffe17 	ldw	r4,-8(fp)
10001888:	0001c480 	call	10001c48 <get_Kirby_Botton_Pos>
1000188c:	10bfffcc 	andi	r2,r2,65535
10001890:	e0bff715 	stw	r2,-36(fp)
        kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
10001894:	e13ffe17 	ldw	r4,-8(fp)
10001898:	0001d4c0 	call	10001d4c <get_Kirby_Ceil_Pos>
1000189c:	1004d43a 	srli	r2,r2,16
100018a0:	e0bff815 	stw	r2,-32(fp)
        kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;
100018a4:	e13ffe17 	ldw	r4,-8(fp)
100018a8:	0001d4c0 	call	10001d4c <get_Kirby_Ceil_Pos>
100018ac:	10bfffcc 	andi	r2,r2,65535
100018b0:	e0bff915 	stw	r2,-28(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
100018b4:	e13ffe17 	ldw	r4,-8(fp)
100018b8:	0001e500 	call	10001e50 <get_Kirby_Left_Pos>
100018bc:	1004d43a 	srli	r2,r2,16
100018c0:	e0bffa15 	stw	r2,-24(fp)
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
100018c4:	e13ffe17 	ldw	r4,-8(fp)
100018c8:	0001e500 	call	10001e50 <get_Kirby_Left_Pos>
100018cc:	10bfffcc 	andi	r2,r2,65535
100018d0:	e0bffb15 	stw	r2,-20(fp)
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
100018d4:	e13ffe17 	ldw	r4,-8(fp)
100018d8:	0001f540 	call	10001f54 <get_Kirby_Right_Pos>
100018dc:	1004d43a 	srli	r2,r2,16
100018e0:	e0bffc15 	stw	r2,-16(fp)
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
100018e4:	e13ffe17 	ldw	r4,-8(fp)
100018e8:	0001f540 	call	10001f54 <get_Kirby_Right_Pos>
100018ec:	10bfffcc 	andi	r2,r2,65535
100018f0:	e0bffd15 	stw	r2,-12(fp)
    int kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
    int kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
    int kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
    int kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;

    while (get_Wall_Info(kirby_botton_X, kirby_botton_Y, map_idx) == AREA_CANNOT_GO)
100018f4:	e1bfff17 	ldw	r6,-4(fp)
100018f8:	e17ff717 	ldw	r5,-36(fp)
100018fc:	e13ff617 	ldw	r4,-40(fp)
10001900:	00020580 	call	10002058 <get_Wall_Info>
10001904:	10800060 	cmpeqi	r2,r2,1
10001908:	103fd51e 	bne	r2,zero,10001860 <__alt_data_end+0xf8001860>
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
    while (get_Wall_Info(kirby_left_X, kirby_left_Y, map_idx) == AREA_CANNOT_GO)
1000190c:	00002506 	br	100019a4 <force_It_Inside_Map+0x1e0>
    {
        kirby->x += 1;
10001910:	e0bffe17 	ldw	r2,-8(fp)
10001914:	10800017 	ldw	r2,0(r2)
10001918:	10c00044 	addi	r3,r2,1
1000191c:	e0bffe17 	ldw	r2,-8(fp)
10001920:	10c00015 	stw	r3,0(r2)
        kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
10001924:	e13ffe17 	ldw	r4,-8(fp)
10001928:	0001c480 	call	10001c48 <get_Kirby_Botton_Pos>
1000192c:	1004d43a 	srli	r2,r2,16
10001930:	e0bff615 	stw	r2,-40(fp)
        kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
10001934:	e13ffe17 	ldw	r4,-8(fp)
10001938:	0001c480 	call	10001c48 <get_Kirby_Botton_Pos>
1000193c:	10bfffcc 	andi	r2,r2,65535
10001940:	e0bff715 	stw	r2,-36(fp)
        kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
10001944:	e13ffe17 	ldw	r4,-8(fp)
10001948:	0001d4c0 	call	10001d4c <get_Kirby_Ceil_Pos>
1000194c:	1004d43a 	srli	r2,r2,16
10001950:	e0bff815 	stw	r2,-32(fp)
        kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;
10001954:	e13ffe17 	ldw	r4,-8(fp)
10001958:	0001d4c0 	call	10001d4c <get_Kirby_Ceil_Pos>
1000195c:	10bfffcc 	andi	r2,r2,65535
10001960:	e0bff915 	stw	r2,-28(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
10001964:	e13ffe17 	ldw	r4,-8(fp)
10001968:	0001e500 	call	10001e50 <get_Kirby_Left_Pos>
1000196c:	1004d43a 	srli	r2,r2,16
10001970:	e0bffa15 	stw	r2,-24(fp)
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
10001974:	e13ffe17 	ldw	r4,-8(fp)
10001978:	0001e500 	call	10001e50 <get_Kirby_Left_Pos>
1000197c:	10bfffcc 	andi	r2,r2,65535
10001980:	e0bffb15 	stw	r2,-20(fp)
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
10001984:	e13ffe17 	ldw	r4,-8(fp)
10001988:	0001f540 	call	10001f54 <get_Kirby_Right_Pos>
1000198c:	1004d43a 	srli	r2,r2,16
10001990:	e0bffc15 	stw	r2,-16(fp)
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
10001994:	e13ffe17 	ldw	r4,-8(fp)
10001998:	0001f540 	call	10001f54 <get_Kirby_Right_Pos>
1000199c:	10bfffcc 	andi	r2,r2,65535
100019a0:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
    while (get_Wall_Info(kirby_left_X, kirby_left_Y, map_idx) == AREA_CANNOT_GO)
100019a4:	e1bfff17 	ldw	r6,-4(fp)
100019a8:	e17ffb17 	ldw	r5,-20(fp)
100019ac:	e13ffa17 	ldw	r4,-24(fp)
100019b0:	00020580 	call	10002058 <get_Wall_Info>
100019b4:	10800060 	cmpeqi	r2,r2,1
100019b8:	103fd51e 	bne	r2,zero,10001910 <__alt_data_end+0xf8001910>
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
    while (get_Wall_Info(kirby_ceil_X, kirby_ceil_Y, map_idx) == AREA_CANNOT_GO)
100019bc:	00002506 	br	10001a54 <force_It_Inside_Map+0x290>
    {
        kirby->y += 1;
100019c0:	e0bffe17 	ldw	r2,-8(fp)
100019c4:	10800117 	ldw	r2,4(r2)
100019c8:	10c00044 	addi	r3,r2,1
100019cc:	e0bffe17 	ldw	r2,-8(fp)
100019d0:	10c00115 	stw	r3,4(r2)
        kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
100019d4:	e13ffe17 	ldw	r4,-8(fp)
100019d8:	0001c480 	call	10001c48 <get_Kirby_Botton_Pos>
100019dc:	1004d43a 	srli	r2,r2,16
100019e0:	e0bff615 	stw	r2,-40(fp)
        kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
100019e4:	e13ffe17 	ldw	r4,-8(fp)
100019e8:	0001c480 	call	10001c48 <get_Kirby_Botton_Pos>
100019ec:	10bfffcc 	andi	r2,r2,65535
100019f0:	e0bff715 	stw	r2,-36(fp)
        kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
100019f4:	e13ffe17 	ldw	r4,-8(fp)
100019f8:	0001d4c0 	call	10001d4c <get_Kirby_Ceil_Pos>
100019fc:	1004d43a 	srli	r2,r2,16
10001a00:	e0bff815 	stw	r2,-32(fp)
        kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;
10001a04:	e13ffe17 	ldw	r4,-8(fp)
10001a08:	0001d4c0 	call	10001d4c <get_Kirby_Ceil_Pos>
10001a0c:	10bfffcc 	andi	r2,r2,65535
10001a10:	e0bff915 	stw	r2,-28(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
10001a14:	e13ffe17 	ldw	r4,-8(fp)
10001a18:	0001e500 	call	10001e50 <get_Kirby_Left_Pos>
10001a1c:	1004d43a 	srli	r2,r2,16
10001a20:	e0bffa15 	stw	r2,-24(fp)
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
10001a24:	e13ffe17 	ldw	r4,-8(fp)
10001a28:	0001e500 	call	10001e50 <get_Kirby_Left_Pos>
10001a2c:	10bfffcc 	andi	r2,r2,65535
10001a30:	e0bffb15 	stw	r2,-20(fp)
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
10001a34:	e13ffe17 	ldw	r4,-8(fp)
10001a38:	0001f540 	call	10001f54 <get_Kirby_Right_Pos>
10001a3c:	1004d43a 	srli	r2,r2,16
10001a40:	e0bffc15 	stw	r2,-16(fp)
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
10001a44:	e13ffe17 	ldw	r4,-8(fp)
10001a48:	0001f540 	call	10001f54 <get_Kirby_Right_Pos>
10001a4c:	10bfffcc 	andi	r2,r2,65535
10001a50:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
    while (get_Wall_Info(kirby_ceil_X, kirby_ceil_Y, map_idx) == AREA_CANNOT_GO)
10001a54:	e1bfff17 	ldw	r6,-4(fp)
10001a58:	e17ff917 	ldw	r5,-28(fp)
10001a5c:	e13ff817 	ldw	r4,-32(fp)
10001a60:	00020580 	call	10002058 <get_Wall_Info>
10001a64:	10800060 	cmpeqi	r2,r2,1
10001a68:	103fd51e 	bne	r2,zero,100019c0 <__alt_data_end+0xf80019c0>
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
    while (get_Wall_Info(kirby_right_X, kirby_right_Y, map_idx) == AREA_CANNOT_GO)
10001a6c:	00002506 	br	10001b04 <force_It_Inside_Map+0x340>
    {
        kirby->x -= 1;
10001a70:	e0bffe17 	ldw	r2,-8(fp)
10001a74:	10800017 	ldw	r2,0(r2)
10001a78:	10ffffc4 	addi	r3,r2,-1
10001a7c:	e0bffe17 	ldw	r2,-8(fp)
10001a80:	10c00015 	stw	r3,0(r2)
        kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
10001a84:	e13ffe17 	ldw	r4,-8(fp)
10001a88:	0001c480 	call	10001c48 <get_Kirby_Botton_Pos>
10001a8c:	1004d43a 	srli	r2,r2,16
10001a90:	e0bff615 	stw	r2,-40(fp)
        kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
10001a94:	e13ffe17 	ldw	r4,-8(fp)
10001a98:	0001c480 	call	10001c48 <get_Kirby_Botton_Pos>
10001a9c:	10bfffcc 	andi	r2,r2,65535
10001aa0:	e0bff715 	stw	r2,-36(fp)
        kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
10001aa4:	e13ffe17 	ldw	r4,-8(fp)
10001aa8:	0001d4c0 	call	10001d4c <get_Kirby_Ceil_Pos>
10001aac:	1004d43a 	srli	r2,r2,16
10001ab0:	e0bff815 	stw	r2,-32(fp)
        kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;
10001ab4:	e13ffe17 	ldw	r4,-8(fp)
10001ab8:	0001d4c0 	call	10001d4c <get_Kirby_Ceil_Pos>
10001abc:	10bfffcc 	andi	r2,r2,65535
10001ac0:	e0bff915 	stw	r2,-28(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
10001ac4:	e13ffe17 	ldw	r4,-8(fp)
10001ac8:	0001e500 	call	10001e50 <get_Kirby_Left_Pos>
10001acc:	1004d43a 	srli	r2,r2,16
10001ad0:	e0bffa15 	stw	r2,-24(fp)
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
10001ad4:	e13ffe17 	ldw	r4,-8(fp)
10001ad8:	0001e500 	call	10001e50 <get_Kirby_Left_Pos>
10001adc:	10bfffcc 	andi	r2,r2,65535
10001ae0:	e0bffb15 	stw	r2,-20(fp)
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
10001ae4:	e13ffe17 	ldw	r4,-8(fp)
10001ae8:	0001f540 	call	10001f54 <get_Kirby_Right_Pos>
10001aec:	1004d43a 	srli	r2,r2,16
10001af0:	e0bffc15 	stw	r2,-16(fp)
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
10001af4:	e13ffe17 	ldw	r4,-8(fp)
10001af8:	0001f540 	call	10001f54 <get_Kirby_Right_Pos>
10001afc:	10bfffcc 	andi	r2,r2,65535
10001b00:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
    while (get_Wall_Info(kirby_right_X, kirby_right_Y, map_idx) == AREA_CANNOT_GO)
10001b04:	e1bfff17 	ldw	r6,-4(fp)
10001b08:	e17ffd17 	ldw	r5,-12(fp)
10001b0c:	e13ffc17 	ldw	r4,-16(fp)
10001b10:	00020580 	call	10002058 <get_Wall_Info>
10001b14:	10800060 	cmpeqi	r2,r2,1
10001b18:	103fd51e 	bne	r2,zero,10001a70 <__alt_data_end+0xf8001a70>
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
}
10001b1c:	0001883a 	nop
10001b20:	e037883a 	mov	sp,fp
10001b24:	dfc00117 	ldw	ra,4(sp)
10001b28:	df000017 	ldw	fp,0(sp)
10001b2c:	dec00204 	addi	sp,sp,8
10001b30:	f800283a 	ret

10001b34 <frame_Time>:

void frame_Time(int t) {
10001b34:	defffd04 	addi	sp,sp,-12
10001b38:	df000215 	stw	fp,8(sp)
10001b3c:	df000204 	addi	fp,sp,8
10001b40:	e13fff15 	stw	r4,-4(fp)
    int i;
    for (i = 0; i < t; i++) {
10001b44:	e03ffe15 	stw	zero,-8(fp)
10001b48:	00000306 	br	10001b58 <frame_Time+0x24>
10001b4c:	e0bffe17 	ldw	r2,-8(fp)
10001b50:	10800044 	addi	r2,r2,1
10001b54:	e0bffe15 	stw	r2,-8(fp)
10001b58:	e0fffe17 	ldw	r3,-8(fp)
10001b5c:	e0bfff17 	ldw	r2,-4(fp)
10001b60:	18bffa16 	blt	r3,r2,10001b4c <__alt_data_end+0xf8001b4c>
        /* wait unitl the frame is over */
    }
}
10001b64:	0001883a 	nop
10001b68:	e037883a 	mov	sp,fp
10001b6c:	df000017 	ldw	fp,0(sp)
10001b70:	dec00104 	addi	sp,sp,4
10001b74:	f800283a 	ret

10001b78 <map_Width>:

int map_Width(int i) {
10001b78:	defffe04 	addi	sp,sp,-8
10001b7c:	df000115 	stw	fp,4(sp)
10001b80:	df000104 	addi	fp,sp,4
10001b84:	e13fff15 	stw	r4,-4(fp)
    switch (i) {
10001b88:	e0bfff17 	ldw	r2,-4(fp)
10001b8c:	10000326 	beq	r2,zero,10001b9c <map_Width+0x24>
10001b90:	10800060 	cmpeqi	r2,r2,1
10001b94:	1000031e 	bne	r2,zero,10001ba4 <map_Width+0x2c>
10001b98:	00000406 	br	10001bac <map_Width+0x34>
    case 0:
        return MAP_0_WIDTH;
10001b9c:	00812fc4 	movi	r2,1215
10001ba0:	00000306 	br	10001bb0 <map_Width+0x38>
        break;
    case 1:
        return MAP_1_WIDTH;
10001ba4:	0080f404 	movi	r2,976
10001ba8:	00000106 	br	10001bb0 <map_Width+0x38>
        break;
    // case 2:
    //     return MAP_2_WIDTH;
    //     break;
    default:
        return MAP_0_WIDTH;
10001bac:	00812fc4 	movi	r2,1215
        break;
    }
}
10001bb0:	e037883a 	mov	sp,fp
10001bb4:	df000017 	ldw	fp,0(sp)
10001bb8:	dec00104 	addi	sp,sp,4
10001bbc:	f800283a 	ret

10001bc0 <will_Touch_Ground>:

int will_Touch_Ground(Kirby * kirby, int map_idx) {
10001bc0:	defffa04 	addi	sp,sp,-24
10001bc4:	dfc00515 	stw	ra,20(sp)
10001bc8:	df000415 	stw	fp,16(sp)
10001bcc:	df000404 	addi	fp,sp,16
10001bd0:	e13ffe15 	stw	r4,-8(fp)
10001bd4:	e17fff15 	stw	r5,-4(fp)
    int kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
10001bd8:	e13ffe17 	ldw	r4,-8(fp)
10001bdc:	0001c480 	call	10001c48 <get_Kirby_Botton_Pos>
10001be0:	1004d43a 	srli	r2,r2,16
10001be4:	e0bffc15 	stw	r2,-16(fp)
    int kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
10001be8:	e13ffe17 	ldw	r4,-8(fp)
10001bec:	0001c480 	call	10001c48 <get_Kirby_Botton_Pos>
10001bf0:	10bfffcc 	andi	r2,r2,65535
10001bf4:	e0bffd15 	stw	r2,-12(fp)

    if ((get_Wall_Info(kirby_botton_X, kirby_botton_Y + KIRBY_STEP_Y, map_idx) == AREA_CANNOT_GO) && (kirby->in_air == 1)) {
10001bf8:	e0bffd17 	ldw	r2,-12(fp)
10001bfc:	108000c4 	addi	r2,r2,3
10001c00:	e1bfff17 	ldw	r6,-4(fp)
10001c04:	100b883a 	mov	r5,r2
10001c08:	e13ffc17 	ldw	r4,-16(fp)
10001c0c:	00020580 	call	10002058 <get_Wall_Info>
10001c10:	10800058 	cmpnei	r2,r2,1
10001c14:	1000061e 	bne	r2,zero,10001c30 <will_Touch_Ground+0x70>
10001c18:	e0bffe17 	ldw	r2,-8(fp)
10001c1c:	10800917 	ldw	r2,36(r2)
10001c20:	10800058 	cmpnei	r2,r2,1
10001c24:	1000021e 	bne	r2,zero,10001c30 <will_Touch_Ground+0x70>
        return 1;
10001c28:	00800044 	movi	r2,1
10001c2c:	00000106 	br	10001c34 <will_Touch_Ground+0x74>
    } else {
        return 0;
10001c30:	0005883a 	mov	r2,zero
    }
}
10001c34:	e037883a 	mov	sp,fp
10001c38:	dfc00117 	ldw	ra,4(sp)
10001c3c:	df000017 	ldw	fp,0(sp)
10001c40:	dec00204 	addi	sp,sp,8
10001c44:	f800283a 	ret

10001c48 <get_Kirby_Botton_Pos>:

int get_Kirby_Botton_Pos(Kirby * kirby) {
10001c48:	defffc04 	addi	sp,sp,-16
10001c4c:	df000315 	stw	fp,12(sp)
10001c50:	df000304 	addi	fp,sp,12
10001c54:	e13fff15 	stw	r4,-4(fp)
    int kirby_botton_X = 0;
10001c58:	e03ffd15 	stw	zero,-12(fp)
    int kirby_botton_Y = 0;
10001c5c:	e03ffe15 	stw	zero,-8(fp)

    if (kirby->is_inhaled == 1) {
10001c60:	e0bfff17 	ldw	r2,-4(fp)
10001c64:	10800a17 	ldw	r2,40(r2)
10001c68:	10800058 	cmpnei	r2,r2,1
10001c6c:	1000091e 	bne	r2,zero,10001c94 <get_Kirby_Botton_Pos+0x4c>
        kirby_botton_X = kirby->x + 16;
10001c70:	e0bfff17 	ldw	r2,-4(fp)
10001c74:	10800017 	ldw	r2,0(r2)
10001c78:	10800404 	addi	r2,r2,16
10001c7c:	e0bffd15 	stw	r2,-12(fp)
        kirby_botton_Y = kirby->y + 25;
10001c80:	e0bfff17 	ldw	r2,-4(fp)
10001c84:	10800117 	ldw	r2,4(r2)
10001c88:	10800644 	addi	r2,r2,25
10001c8c:	e0bffe15 	stw	r2,-8(fp)
10001c90:	00002606 	br	10001d2c <get_Kirby_Botton_Pos+0xe4>
    } else if ((kirby->inhaling == 1) || (kirby->spitting == 1)) {
10001c94:	e0bfff17 	ldw	r2,-4(fp)
10001c98:	10800c17 	ldw	r2,48(r2)
10001c9c:	10800060 	cmpeqi	r2,r2,1
10001ca0:	1000041e 	bne	r2,zero,10001cb4 <get_Kirby_Botton_Pos+0x6c>
10001ca4:	e0bfff17 	ldw	r2,-4(fp)
10001ca8:	10800d17 	ldw	r2,52(r2)
10001cac:	10800058 	cmpnei	r2,r2,1
10001cb0:	1000091e 	bne	r2,zero,10001cd8 <get_Kirby_Botton_Pos+0x90>
        kirby_botton_X = kirby->x + 30;
10001cb4:	e0bfff17 	ldw	r2,-4(fp)
10001cb8:	10800017 	ldw	r2,0(r2)
10001cbc:	10800784 	addi	r2,r2,30
10001cc0:	e0bffd15 	stw	r2,-12(fp)
        kirby_botton_Y = kirby->y + 25;
10001cc4:	e0bfff17 	ldw	r2,-4(fp)
10001cc8:	10800117 	ldw	r2,4(r2)
10001ccc:	10800644 	addi	r2,r2,25
10001cd0:	e0bffe15 	stw	r2,-8(fp)
10001cd4:	00001506 	br	10001d2c <get_Kirby_Botton_Pos+0xe4>
    } else if (kirby->damaging == 1) {
10001cd8:	e0bfff17 	ldw	r2,-4(fp)
10001cdc:	10800b17 	ldw	r2,44(r2)
10001ce0:	10800058 	cmpnei	r2,r2,1
10001ce4:	1000091e 	bne	r2,zero,10001d0c <get_Kirby_Botton_Pos+0xc4>
        kirby_botton_X = kirby->x + 17;
10001ce8:	e0bfff17 	ldw	r2,-4(fp)
10001cec:	10800017 	ldw	r2,0(r2)
10001cf0:	10800444 	addi	r2,r2,17
10001cf4:	e0bffd15 	stw	r2,-12(fp)
        kirby_botton_Y = kirby->y + 33;
10001cf8:	e0bfff17 	ldw	r2,-4(fp)
10001cfc:	10800117 	ldw	r2,4(r2)
10001d00:	10800844 	addi	r2,r2,33
10001d04:	e0bffe15 	stw	r2,-8(fp)
10001d08:	00000806 	br	10001d2c <get_Kirby_Botton_Pos+0xe4>
    } else {
        kirby_botton_X = kirby->x + 14;
10001d0c:	e0bfff17 	ldw	r2,-4(fp)
10001d10:	10800017 	ldw	r2,0(r2)
10001d14:	10800384 	addi	r2,r2,14
10001d18:	e0bffd15 	stw	r2,-12(fp)
        kirby_botton_Y = kirby->y + 20;
10001d1c:	e0bfff17 	ldw	r2,-4(fp)
10001d20:	10800117 	ldw	r2,4(r2)
10001d24:	10800504 	addi	r2,r2,20
10001d28:	e0bffe15 	stw	r2,-8(fp)
    }
    return ((kirby_botton_X << 16) | kirby_botton_Y);
10001d2c:	e0bffd17 	ldw	r2,-12(fp)
10001d30:	1006943a 	slli	r3,r2,16
10001d34:	e0bffe17 	ldw	r2,-8(fp)
10001d38:	1884b03a 	or	r2,r3,r2
}
10001d3c:	e037883a 	mov	sp,fp
10001d40:	df000017 	ldw	fp,0(sp)
10001d44:	dec00104 	addi	sp,sp,4
10001d48:	f800283a 	ret

10001d4c <get_Kirby_Ceil_Pos>:

int get_Kirby_Ceil_Pos(Kirby * kirby) {
10001d4c:	defffc04 	addi	sp,sp,-16
10001d50:	df000315 	stw	fp,12(sp)
10001d54:	df000304 	addi	fp,sp,12
10001d58:	e13fff15 	stw	r4,-4(fp)
    int kirby_ceil_X = 0;
10001d5c:	e03ffd15 	stw	zero,-12(fp)
    int kirby_ceil_Y = 0;
10001d60:	e03ffe15 	stw	zero,-8(fp)

    if (kirby->is_inhaled == 1) {
10001d64:	e0bfff17 	ldw	r2,-4(fp)
10001d68:	10800a17 	ldw	r2,40(r2)
10001d6c:	10800058 	cmpnei	r2,r2,1
10001d70:	1000091e 	bne	r2,zero,10001d98 <get_Kirby_Ceil_Pos+0x4c>
        kirby_ceil_X = kirby->x + 16;
10001d74:	e0bfff17 	ldw	r2,-4(fp)
10001d78:	10800017 	ldw	r2,0(r2)
10001d7c:	10800404 	addi	r2,r2,16
10001d80:	e0bffd15 	stw	r2,-12(fp)
        kirby_ceil_Y = kirby->y + 5;
10001d84:	e0bfff17 	ldw	r2,-4(fp)
10001d88:	10800117 	ldw	r2,4(r2)
10001d8c:	10800144 	addi	r2,r2,5
10001d90:	e0bffe15 	stw	r2,-8(fp)
10001d94:	00002606 	br	10001e30 <get_Kirby_Ceil_Pos+0xe4>
    } else if ((kirby->inhaling == 1) || (kirby->spitting == 1)) {
10001d98:	e0bfff17 	ldw	r2,-4(fp)
10001d9c:	10800c17 	ldw	r2,48(r2)
10001da0:	10800060 	cmpeqi	r2,r2,1
10001da4:	1000041e 	bne	r2,zero,10001db8 <get_Kirby_Ceil_Pos+0x6c>
10001da8:	e0bfff17 	ldw	r2,-4(fp)
10001dac:	10800d17 	ldw	r2,52(r2)
10001db0:	10800058 	cmpnei	r2,r2,1
10001db4:	1000091e 	bne	r2,zero,10001ddc <get_Kirby_Ceil_Pos+0x90>
        kirby_ceil_X = kirby->x + 30;
10001db8:	e0bfff17 	ldw	r2,-4(fp)
10001dbc:	10800017 	ldw	r2,0(r2)
10001dc0:	10800784 	addi	r2,r2,30
10001dc4:	e0bffd15 	stw	r2,-12(fp)
        kirby_ceil_Y = kirby->y + 5;
10001dc8:	e0bfff17 	ldw	r2,-4(fp)
10001dcc:	10800117 	ldw	r2,4(r2)
10001dd0:	10800144 	addi	r2,r2,5
10001dd4:	e0bffe15 	stw	r2,-8(fp)
10001dd8:	00001506 	br	10001e30 <get_Kirby_Ceil_Pos+0xe4>
    } else if (kirby->damaging == 1) {
10001ddc:	e0bfff17 	ldw	r2,-4(fp)
10001de0:	10800b17 	ldw	r2,44(r2)
10001de4:	10800058 	cmpnei	r2,r2,1
10001de8:	1000091e 	bne	r2,zero,10001e10 <get_Kirby_Ceil_Pos+0xc4>
        kirby_ceil_X = kirby->x + 17;
10001dec:	e0bfff17 	ldw	r2,-4(fp)
10001df0:	10800017 	ldw	r2,0(r2)
10001df4:	10800444 	addi	r2,r2,17
10001df8:	e0bffd15 	stw	r2,-12(fp)
        kirby_ceil_Y = kirby->y + 7;   //// Not an accurate value!!! ////
10001dfc:	e0bfff17 	ldw	r2,-4(fp)
10001e00:	10800117 	ldw	r2,4(r2)
10001e04:	108001c4 	addi	r2,r2,7
10001e08:	e0bffe15 	stw	r2,-8(fp)
10001e0c:	00000806 	br	10001e30 <get_Kirby_Ceil_Pos+0xe4>
    } else {
        kirby_ceil_X = kirby->x + 14;
10001e10:	e0bfff17 	ldw	r2,-4(fp)
10001e14:	10800017 	ldw	r2,0(r2)
10001e18:	10800384 	addi	r2,r2,14
10001e1c:	e0bffd15 	stw	r2,-12(fp)
        kirby_ceil_Y = kirby->y + 4;
10001e20:	e0bfff17 	ldw	r2,-4(fp)
10001e24:	10800117 	ldw	r2,4(r2)
10001e28:	10800104 	addi	r2,r2,4
10001e2c:	e0bffe15 	stw	r2,-8(fp)
    }
    return ((kirby_ceil_X << 16) | kirby_ceil_Y);
10001e30:	e0bffd17 	ldw	r2,-12(fp)
10001e34:	1006943a 	slli	r3,r2,16
10001e38:	e0bffe17 	ldw	r2,-8(fp)
10001e3c:	1884b03a 	or	r2,r3,r2
}
10001e40:	e037883a 	mov	sp,fp
10001e44:	df000017 	ldw	fp,0(sp)
10001e48:	dec00104 	addi	sp,sp,4
10001e4c:	f800283a 	ret

10001e50 <get_Kirby_Left_Pos>:

int get_Kirby_Left_Pos(Kirby * kirby) {
10001e50:	defffc04 	addi	sp,sp,-16
10001e54:	df000315 	stw	fp,12(sp)
10001e58:	df000304 	addi	fp,sp,12
10001e5c:	e13fff15 	stw	r4,-4(fp)
    int kirby_left_X = 0;
10001e60:	e03ffd15 	stw	zero,-12(fp)
    int kirby_left_Y = 0;
10001e64:	e03ffe15 	stw	zero,-8(fp)

    if (kirby->is_inhaled == 1) {
10001e68:	e0bfff17 	ldw	r2,-4(fp)
10001e6c:	10800a17 	ldw	r2,40(r2)
10001e70:	10800058 	cmpnei	r2,r2,1
10001e74:	1000091e 	bne	r2,zero,10001e9c <get_Kirby_Left_Pos+0x4c>
        kirby_left_X = kirby->x + 5;
10001e78:	e0bfff17 	ldw	r2,-4(fp)
10001e7c:	10800017 	ldw	r2,0(r2)
10001e80:	10800144 	addi	r2,r2,5
10001e84:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_Y = kirby->y + 15;
10001e88:	e0bfff17 	ldw	r2,-4(fp)
10001e8c:	10800117 	ldw	r2,4(r2)
10001e90:	108003c4 	addi	r2,r2,15
10001e94:	e0bffe15 	stw	r2,-8(fp)
10001e98:	00002606 	br	10001f34 <get_Kirby_Left_Pos+0xe4>
    } else if ((kirby->inhaling == 1) || (kirby->spitting == 1)) {
10001e9c:	e0bfff17 	ldw	r2,-4(fp)
10001ea0:	10800c17 	ldw	r2,48(r2)
10001ea4:	10800060 	cmpeqi	r2,r2,1
10001ea8:	1000041e 	bne	r2,zero,10001ebc <get_Kirby_Left_Pos+0x6c>
10001eac:	e0bfff17 	ldw	r2,-4(fp)
10001eb0:	10800d17 	ldw	r2,52(r2)
10001eb4:	10800058 	cmpnei	r2,r2,1
10001eb8:	1000091e 	bne	r2,zero,10001ee0 <get_Kirby_Left_Pos+0x90>
        kirby_left_X = kirby->x + 21;
10001ebc:	e0bfff17 	ldw	r2,-4(fp)
10001ec0:	10800017 	ldw	r2,0(r2)
10001ec4:	10800544 	addi	r2,r2,21
10001ec8:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_Y = kirby->y + 15;
10001ecc:	e0bfff17 	ldw	r2,-4(fp)
10001ed0:	10800117 	ldw	r2,4(r2)
10001ed4:	108003c4 	addi	r2,r2,15
10001ed8:	e0bffe15 	stw	r2,-8(fp)
10001edc:	00001506 	br	10001f34 <get_Kirby_Left_Pos+0xe4>
    } else if (kirby->damaging == 1) {
10001ee0:	e0bfff17 	ldw	r2,-4(fp)
10001ee4:	10800b17 	ldw	r2,44(r2)
10001ee8:	10800058 	cmpnei	r2,r2,1
10001eec:	1000091e 	bne	r2,zero,10001f14 <get_Kirby_Left_Pos+0xc4>
        kirby_left_X = kirby->x + 6;
10001ef0:	e0bfff17 	ldw	r2,-4(fp)
10001ef4:	10800017 	ldw	r2,0(r2)
10001ef8:	10800184 	addi	r2,r2,6
10001efc:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_Y = kirby->y + 18;   //// Not an accurate value!!! ////
10001f00:	e0bfff17 	ldw	r2,-4(fp)
10001f04:	10800117 	ldw	r2,4(r2)
10001f08:	10800484 	addi	r2,r2,18
10001f0c:	e0bffe15 	stw	r2,-8(fp)
10001f10:	00000806 	br	10001f34 <get_Kirby_Left_Pos+0xe4>
    } else {
        kirby_left_X = kirby->x + 8;    //// Not an accurate value!!! //// 8
10001f14:	e0bfff17 	ldw	r2,-4(fp)
10001f18:	10800017 	ldw	r2,0(r2)
10001f1c:	10800204 	addi	r2,r2,8
10001f20:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_Y = kirby->y + 14;   //// Not an accurate value!!! ////
10001f24:	e0bfff17 	ldw	r2,-4(fp)
10001f28:	10800117 	ldw	r2,4(r2)
10001f2c:	10800384 	addi	r2,r2,14
10001f30:	e0bffe15 	stw	r2,-8(fp)
    }
    return ((kirby_left_X << 16) | kirby_left_Y);
10001f34:	e0bffd17 	ldw	r2,-12(fp)
10001f38:	1006943a 	slli	r3,r2,16
10001f3c:	e0bffe17 	ldw	r2,-8(fp)
10001f40:	1884b03a 	or	r2,r3,r2
}
10001f44:	e037883a 	mov	sp,fp
10001f48:	df000017 	ldw	fp,0(sp)
10001f4c:	dec00104 	addi	sp,sp,4
10001f50:	f800283a 	ret

10001f54 <get_Kirby_Right_Pos>:

int get_Kirby_Right_Pos(Kirby * kirby) {
10001f54:	defffc04 	addi	sp,sp,-16
10001f58:	df000315 	stw	fp,12(sp)
10001f5c:	df000304 	addi	fp,sp,12
10001f60:	e13fff15 	stw	r4,-4(fp)
    int kirby_right_X = 0;
10001f64:	e03ffd15 	stw	zero,-12(fp)
    int kirby_right_Y = 0;
10001f68:	e03ffe15 	stw	zero,-8(fp)

    if (kirby->is_inhaled == 1) {
10001f6c:	e0bfff17 	ldw	r2,-4(fp)
10001f70:	10800a17 	ldw	r2,40(r2)
10001f74:	10800058 	cmpnei	r2,r2,1
10001f78:	1000091e 	bne	r2,zero,10001fa0 <get_Kirby_Right_Pos+0x4c>
        kirby_right_X = kirby->x + 26;
10001f7c:	e0bfff17 	ldw	r2,-4(fp)
10001f80:	10800017 	ldw	r2,0(r2)
10001f84:	10800684 	addi	r2,r2,26
10001f88:	e0bffd15 	stw	r2,-12(fp)
        kirby_right_Y = kirby->y + 15;
10001f8c:	e0bfff17 	ldw	r2,-4(fp)
10001f90:	10800117 	ldw	r2,4(r2)
10001f94:	108003c4 	addi	r2,r2,15
10001f98:	e0bffe15 	stw	r2,-8(fp)
10001f9c:	00002606 	br	10002038 <get_Kirby_Right_Pos+0xe4>
    } else if ((kirby->inhaling == 1) || (kirby->spitting == 1)) {
10001fa0:	e0bfff17 	ldw	r2,-4(fp)
10001fa4:	10800c17 	ldw	r2,48(r2)
10001fa8:	10800060 	cmpeqi	r2,r2,1
10001fac:	1000041e 	bne	r2,zero,10001fc0 <get_Kirby_Right_Pos+0x6c>
10001fb0:	e0bfff17 	ldw	r2,-4(fp)
10001fb4:	10800d17 	ldw	r2,52(r2)
10001fb8:	10800058 	cmpnei	r2,r2,1
10001fbc:	1000091e 	bne	r2,zero,10001fe4 <get_Kirby_Right_Pos+0x90>
        kirby_right_X = kirby->x + 41;
10001fc0:	e0bfff17 	ldw	r2,-4(fp)
10001fc4:	10800017 	ldw	r2,0(r2)
10001fc8:	10800a44 	addi	r2,r2,41
10001fcc:	e0bffd15 	stw	r2,-12(fp)
        kirby_right_Y = kirby->y + 15;
10001fd0:	e0bfff17 	ldw	r2,-4(fp)
10001fd4:	10800117 	ldw	r2,4(r2)
10001fd8:	108003c4 	addi	r2,r2,15
10001fdc:	e0bffe15 	stw	r2,-8(fp)
10001fe0:	00001506 	br	10002038 <get_Kirby_Right_Pos+0xe4>
    } else if (kirby->damaging == 1) {
10001fe4:	e0bfff17 	ldw	r2,-4(fp)
10001fe8:	10800b17 	ldw	r2,44(r2)
10001fec:	10800058 	cmpnei	r2,r2,1
10001ff0:	1000091e 	bne	r2,zero,10002018 <get_Kirby_Right_Pos+0xc4>
        kirby_right_X = kirby->x + 29;   //// Not an accurate value!!! ////
10001ff4:	e0bfff17 	ldw	r2,-4(fp)
10001ff8:	10800017 	ldw	r2,0(r2)
10001ffc:	10800744 	addi	r2,r2,29
10002000:	e0bffd15 	stw	r2,-12(fp)
        kirby_right_Y = kirby->y + 18;   //// Not an accurate value!!! ////
10002004:	e0bfff17 	ldw	r2,-4(fp)
10002008:	10800117 	ldw	r2,4(r2)
1000200c:	10800484 	addi	r2,r2,18
10002010:	e0bffe15 	stw	r2,-8(fp)
10002014:	00000806 	br	10002038 <get_Kirby_Right_Pos+0xe4>
    } else {
        kirby_right_X = kirby->x + 24;    //// Not an accurate value!!! ////
10002018:	e0bfff17 	ldw	r2,-4(fp)
1000201c:	10800017 	ldw	r2,0(r2)
10002020:	10800604 	addi	r2,r2,24
10002024:	e0bffd15 	stw	r2,-12(fp)
        kirby_right_Y = kirby->y + 14;   //// Not an accurate value!!! ////
10002028:	e0bfff17 	ldw	r2,-4(fp)
1000202c:	10800117 	ldw	r2,4(r2)
10002030:	10800384 	addi	r2,r2,14
10002034:	e0bffe15 	stw	r2,-8(fp)
    }
    return ((kirby_right_X << 16) | kirby_right_Y);
10002038:	e0bffd17 	ldw	r2,-12(fp)
1000203c:	1006943a 	slli	r3,r2,16
10002040:	e0bffe17 	ldw	r2,-8(fp)
10002044:	1884b03a 	or	r2,r3,r2
}
10002048:	e037883a 	mov	sp,fp
1000204c:	df000017 	ldw	fp,0(sp)
10002050:	dec00104 	addi	sp,sp,4
10002054:	f800283a 	ret

10002058 <get_Wall_Info>:

int get_Wall_Info(int x, int y, int map_idx) {
10002058:	defff904 	addi	sp,sp,-28
1000205c:	dfc00615 	stw	ra,24(sp)
10002060:	df000515 	stw	fp,20(sp)
10002064:	df000504 	addi	fp,sp,20
10002068:	e13ffd15 	stw	r4,-12(fp)
1000206c:	e17ffe15 	stw	r5,-8(fp)
10002070:	e1bfff15 	stw	r6,-4(fp)
    int idx, res = 0;
10002074:	e03ffb15 	stw	zero,-20(fp)
    idx = (map_Width(map_idx) * y + x) / 32;
10002078:	e13fff17 	ldw	r4,-4(fp)
1000207c:	0001b780 	call	10001b78 <map_Width>
10002080:	e17ffe17 	ldw	r5,-8(fp)
10002084:	1009883a 	mov	r4,r2
10002088:	0004b940 	call	10004b94 <__mulsi3>
1000208c:	1007883a 	mov	r3,r2
10002090:	e0bffd17 	ldw	r2,-12(fp)
10002094:	1885883a 	add	r2,r3,r2
10002098:	1000010e 	bge	r2,zero,100020a0 <get_Wall_Info+0x48>
1000209c:	108007c4 	addi	r2,r2,31
100020a0:	1005d17a 	srai	r2,r2,5
100020a4:	e0bffc15 	stw	r2,-16(fp)
    res = (map_Width(map_idx) * y + x) % 32;
100020a8:	e13fff17 	ldw	r4,-4(fp)
100020ac:	0001b780 	call	10001b78 <map_Width>
100020b0:	e17ffe17 	ldw	r5,-8(fp)
100020b4:	1009883a 	mov	r4,r2
100020b8:	0004b940 	call	10004b94 <__mulsi3>
100020bc:	1007883a 	mov	r3,r2
100020c0:	e0bffd17 	ldw	r2,-12(fp)
100020c4:	1887883a 	add	r3,r3,r2
100020c8:	00a00034 	movhi	r2,32768
100020cc:	108007c4 	addi	r2,r2,31
100020d0:	1884703a 	and	r2,r3,r2
100020d4:	1000040e 	bge	r2,zero,100020e8 <get_Wall_Info+0x90>
100020d8:	10bfffc4 	addi	r2,r2,-1
100020dc:	00fff804 	movi	r3,-32
100020e0:	10c4b03a 	or	r2,r2,r3
100020e4:	10800044 	addi	r2,r2,1
100020e8:	e0bffb15 	stw	r2,-20(fp)
    if (map_idx == 0) {
100020ec:	e0bfff17 	ldw	r2,-4(fp)
100020f0:	10000d1e 	bne	r2,zero,10002128 <get_Wall_Info+0xd0>
        return ((Wall1[idx] >> (31 - res)) & 0x00000001);
100020f4:	00840074 	movhi	r2,4097
100020f8:	10933304 	addi	r2,r2,19660
100020fc:	e0fffc17 	ldw	r3,-16(fp)
10002100:	18c7883a 	add	r3,r3,r3
10002104:	18c7883a 	add	r3,r3,r3
10002108:	10c5883a 	add	r2,r2,r3
1000210c:	10c00017 	ldw	r3,0(r2)
10002110:	010007c4 	movi	r4,31
10002114:	e0bffb17 	ldw	r2,-20(fp)
10002118:	2085c83a 	sub	r2,r4,r2
1000211c:	1885d83a 	sra	r2,r3,r2
10002120:	1080004c 	andi	r2,r2,1
10002124:	00000406 	br	10002138 <get_Wall_Info+0xe0>
//    } else if (map_idx == 1) {
//        return ((Wall2[idx] >> (31 - res)) & 0x00000001);
    } else {
        printf("Error: Map index out of tolerrance!");
10002128:	01040074 	movhi	r4,4097
1000212c:	21105604 	addi	r4,r4,16728
10002130:	0004bec0 	call	10004bec <printf>
    }
    return 1;
10002134:	00800044 	movi	r2,1
}
10002138:	e037883a 	mov	sp,fp
1000213c:	dfc00117 	ldw	ra,4(sp)
10002140:	df000017 	ldw	fp,0(sp)
10002144:	dec00204 	addi	sp,sp,8
10002148:	f800283a 	ret

1000214c <kirby_Inhaling>:

void kirby_Inhaling(Kirby * kirby) {
1000214c:	defffd04 	addi	sp,sp,-12
10002150:	dfc00215 	stw	ra,8(sp)
10002154:	df000115 	stw	fp,4(sp)
10002158:	df000104 	addi	fp,sp,4
1000215c:	e13fff15 	stw	r4,-4(fp)
    kirby->frame = 0;
10002160:	e0bfff17 	ldw	r2,-4(fp)
10002164:	10000715 	stw	zero,28(r2)
    upload_Kirby_Info(kirby);
10002168:	e13fff17 	ldw	r4,-4(fp)
1000216c:	00006180 	call	10000618 <upload_Kirby_Info>
    frame_Time(KIRBY_FRAME_TIME_INHALE);
10002170:	0107d004 	movi	r4,8000
10002174:	0001b340 	call	10001b34 <frame_Time>
    while (get_keycode_value() == 0x000e) {
10002178:	00001206 	br	100021c4 <kirby_Inhaling+0x78>
        kirby->frame = (kirby->frame + 1) % 2;
1000217c:	e0bfff17 	ldw	r2,-4(fp)
10002180:	10800717 	ldw	r2,28(r2)
10002184:	10c00044 	addi	r3,r2,1
10002188:	00a00034 	movhi	r2,32768
1000218c:	10800044 	addi	r2,r2,1
10002190:	1884703a 	and	r2,r3,r2
10002194:	1000040e 	bge	r2,zero,100021a8 <kirby_Inhaling+0x5c>
10002198:	10bfffc4 	addi	r2,r2,-1
1000219c:	00ffff84 	movi	r3,-2
100021a0:	10c4b03a 	or	r2,r2,r3
100021a4:	10800044 	addi	r2,r2,1
100021a8:	1007883a 	mov	r3,r2
100021ac:	e0bfff17 	ldw	r2,-4(fp)
100021b0:	10c00715 	stw	r3,28(r2)
        upload_Kirby_Info(kirby);
100021b4:	e13fff17 	ldw	r4,-4(fp)
100021b8:	00006180 	call	10000618 <upload_Kirby_Info>
        frame_Time(KIRBY_FRAME_TIME_INHALE);
100021bc:	0107d004 	movi	r4,8000
100021c0:	0001b340 	call	10001b34 <frame_Time>

void kirby_Inhaling(Kirby * kirby) {
    kirby->frame = 0;
    upload_Kirby_Info(kirby);
    frame_Time(KIRBY_FRAME_TIME_INHALE);
    while (get_keycode_value() == 0x000e) {
100021c4:	00046f80 	call	100046f8 <get_keycode_value>
100021c8:	108003a0 	cmpeqi	r2,r2,14
100021cc:	103feb1e 	bne	r2,zero,1000217c <__alt_data_end+0xf800217c>
        kirby->frame = (kirby->frame + 1) % 2;
        upload_Kirby_Info(kirby);
        frame_Time(KIRBY_FRAME_TIME_INHALE);
    }
    kirby->inhaling = 0;
100021d0:	e0bfff17 	ldw	r2,-4(fp)
100021d4:	10000c15 	stw	zero,48(r2)
    kirby->is_inhaled = 1;
100021d8:	e0bfff17 	ldw	r2,-4(fp)
100021dc:	00c00044 	movi	r3,1
100021e0:	10c00a15 	stw	r3,40(r2)
    kirby->action = 0;
100021e4:	e0bfff17 	ldw	r2,-4(fp)
100021e8:	10000615 	stw	zero,24(r2)
    // kirby->frame = 11;
    // upload_Kirby_Info(kirby);
    kirby->frame = 12;
100021ec:	e0bfff17 	ldw	r2,-4(fp)
100021f0:	00c00304 	movi	r3,12
100021f4:	10c00715 	stw	r3,28(r2)
    upload_Kirby_Info(kirby);
100021f8:	e13fff17 	ldw	r4,-4(fp)
100021fc:	00006180 	call	10000618 <upload_Kirby_Info>
    kirby->frame = 13;
10002200:	e0bfff17 	ldw	r2,-4(fp)
10002204:	00c00344 	movi	r3,13
10002208:	10c00715 	stw	r3,28(r2)
    upload_Kirby_Info(kirby);
1000220c:	e13fff17 	ldw	r4,-4(fp)
10002210:	00006180 	call	10000618 <upload_Kirby_Info>
    kirby->is_inhaled = 0;
10002214:	e0bfff17 	ldw	r2,-4(fp)
10002218:	10000a15 	stw	zero,40(r2)
}
1000221c:	0001883a 	nop
10002220:	e037883a 	mov	sp,fp
10002224:	dfc00117 	ldw	ra,4(sp)
10002228:	df000017 	ldw	fp,0(sp)
1000222c:	dec00204 	addi	sp,sp,8
10002230:	f800283a 	ret

10002234 <kirby_Spitting>:

void kirby_Spitting(Kirby * kirby, Star * star) {
10002234:	defffb04 	addi	sp,sp,-20
10002238:	dfc00415 	stw	ra,16(sp)
1000223c:	df000315 	stw	fp,12(sp)
10002240:	df000304 	addi	fp,sp,12
10002244:	e13ffe15 	stw	r4,-8(fp)
10002248:	e17fff15 	stw	r5,-4(fp)
    int i = 0;
1000224c:	e03ffd15 	stw	zero,-12(fp)
    kirby->spitting = 1;
10002250:	e0bffe17 	ldw	r2,-8(fp)
10002254:	00c00044 	movi	r3,1
10002258:	10c00d15 	stw	r3,52(r2)
    kirby->image = 1;
1000225c:	e0bffe17 	ldw	r2,-8(fp)
10002260:	00c00044 	movi	r3,1
10002264:	10c00315 	stw	r3,12(r2)
    kirby->action = 4;
10002268:	e0bffe17 	ldw	r2,-8(fp)
1000226c:	00c00104 	movi	r3,4
10002270:	10c00615 	stw	r3,24(r2)
    kirby->frame = 0;
10002274:	e0bffe17 	ldw	r2,-8(fp)
10002278:	10000715 	stw	zero,28(r2)
    upload_Kirby_Info(kirby);
1000227c:	e13ffe17 	ldw	r4,-8(fp)
10002280:	00006180 	call	10000618 <upload_Kirby_Info>
    frame_Time(KIRBY_FRAME_TIME_INHALE);
10002284:	0107d004 	movi	r4,8000
10002288:	0001b340 	call	10001b34 <frame_Time>
    for (i = 0; i < KIRBY_INHALING_FN; i++)
1000228c:	e03ffd15 	stw	zero,-12(fp)
10002290:	00000f06 	br	100022d0 <kirby_Spitting+0x9c>
    {
        kirby->frame += 1;
10002294:	e0bffe17 	ldw	r2,-8(fp)
10002298:	10800717 	ldw	r2,28(r2)
1000229c:	10c00044 	addi	r3,r2,1
100022a0:	e0bffe17 	ldw	r2,-8(fp)
100022a4:	10c00715 	stw	r3,28(r2)
        upload_Kirby_Info(kirby);
100022a8:	e13ffe17 	ldw	r4,-8(fp)
100022ac:	00006180 	call	10000618 <upload_Kirby_Info>
        frame_Time(KIRBY_FRAME_TIME_INHALE);
100022b0:	0107d004 	movi	r4,8000
100022b4:	0001b340 	call	10001b34 <frame_Time>

        // Spit the star
        spit_Star(kirby, star);
100022b8:	e17fff17 	ldw	r5,-4(fp)
100022bc:	e13ffe17 	ldw	r4,-8(fp)
100022c0:	00026f00 	call	100026f0 <spit_Star>
    kirby->image = 1;
    kirby->action = 4;
    kirby->frame = 0;
    upload_Kirby_Info(kirby);
    frame_Time(KIRBY_FRAME_TIME_INHALE);
    for (i = 0; i < KIRBY_INHALING_FN; i++)
100022c4:	e0bffd17 	ldw	r2,-12(fp)
100022c8:	10800044 	addi	r2,r2,1
100022cc:	e0bffd15 	stw	r2,-12(fp)
100022d0:	e0bffd17 	ldw	r2,-12(fp)
100022d4:	10800210 	cmplti	r2,r2,8
100022d8:	103fee1e 	bne	r2,zero,10002294 <__alt_data_end+0xf8002294>
        frame_Time(KIRBY_FRAME_TIME_INHALE);

        // Spit the star
        spit_Star(kirby, star);
    }
    kirby->spitting = 0;
100022dc:	e0bffe17 	ldw	r2,-8(fp)
100022e0:	10000d15 	stw	zero,52(r2)
    kirby->is_inhaled = 0;
100022e4:	e0bffe17 	ldw	r2,-8(fp)
100022e8:	10000a15 	stw	zero,40(r2)
    kirby_Return_Normal(kirby);
100022ec:	e13ffe17 	ldw	r4,-8(fp)
100022f0:	000230c0 	call	1000230c <kirby_Return_Normal>
}
100022f4:	0001883a 	nop
100022f8:	e037883a 	mov	sp,fp
100022fc:	dfc00117 	ldw	ra,4(sp)
10002300:	df000017 	ldw	fp,0(sp)
10002304:	dec00204 	addi	sp,sp,8
10002308:	f800283a 	ret

1000230c <kirby_Return_Normal>:

void kirby_Return_Normal(Kirby * kirby) {
1000230c:	defffd04 	addi	sp,sp,-12
10002310:	dfc00215 	stw	ra,8(sp)
10002314:	df000115 	stw	fp,4(sp)
10002318:	df000104 	addi	fp,sp,4
1000231c:	e13fff15 	stw	r4,-4(fp)
    kirby->is_inhaled = 0;
10002320:	e0bfff17 	ldw	r2,-4(fp)
10002324:	10000a15 	stw	zero,40(r2)
    kirby->in_air = 0;
10002328:	e0bfff17 	ldw	r2,-4(fp)
1000232c:	10000915 	stw	zero,36(r2)
    kirby->image = 0;
10002330:	e0bfff17 	ldw	r2,-4(fp)
10002334:	10000315 	stw	zero,12(r2)
    kirby->action = 0;
10002338:	e0bfff17 	ldw	r2,-4(fp)
1000233c:	10000615 	stw	zero,24(r2)
    kirby->frame = 0;
10002340:	e0bfff17 	ldw	r2,-4(fp)
10002344:	10000715 	stw	zero,28(r2)
    upload_Kirby_Info(kirby);
10002348:	e13fff17 	ldw	r4,-4(fp)
1000234c:	00006180 	call	10000618 <upload_Kirby_Info>
}
10002350:	0001883a 	nop
10002354:	e037883a 	mov	sp,fp
10002358:	dfc00117 	ldw	ra,4(sp)
1000235c:	df000017 	ldw	fp,0(sp)
10002360:	dec00204 	addi	sp,sp,8
10002364:	f800283a 	ret

10002368 <kirby_Kick_Ass>:

void kirby_Kick_Ass(Kirby * kirby) {
10002368:	defffc04 	addi	sp,sp,-16
1000236c:	dfc00315 	stw	ra,12(sp)
10002370:	df000215 	stw	fp,8(sp)
10002374:	df000204 	addi	fp,sp,8
10002378:	e13fff15 	stw	r4,-4(fp)
    int i = 0;
1000237c:	e03ffe15 	stw	zero,-8(fp)
    kirby->image = 0;
10002380:	e0bfff17 	ldw	r2,-4(fp)
10002384:	10000315 	stw	zero,12(r2)
    kirby->action = 2;
10002388:	e0bfff17 	ldw	r2,-4(fp)
1000238c:	00c00084 	movi	r3,2
10002390:	10c00615 	stw	r3,24(r2)
    kirby->frame = 6;
10002394:	e0bfff17 	ldw	r2,-4(fp)
10002398:	00c00184 	movi	r3,6
1000239c:	10c00715 	stw	r3,28(r2)
    if (kirby->is_left == 0) {
100023a0:	e0bfff17 	ldw	r2,-4(fp)
100023a4:	10800417 	ldw	r2,16(r2)
100023a8:	10004a1e 	bne	r2,zero,100024d4 <kirby_Kick_Ass+0x16c>
        for (i = 0; i < 8; i++){
100023ac:	e03ffe15 	stw	zero,-8(fp)
100023b0:	00001606 	br	1000240c <kirby_Kick_Ass+0xa4>
            kirby->x += KIRBY_KICK_X;
100023b4:	e0bfff17 	ldw	r2,-4(fp)
100023b8:	10800017 	ldw	r2,0(r2)
100023bc:	10c000c4 	addi	r3,r2,3
100023c0:	e0bfff17 	ldw	r2,-4(fp)
100023c4:	10c00015 	stw	r3,0(r2)
            force_It_Inside_Map(kirby, kirby->map);
100023c8:	e0bfff17 	ldw	r2,-4(fp)
100023cc:	10800217 	ldw	r2,8(r2)
100023d0:	100b883a 	mov	r5,r2
100023d4:	e13fff17 	ldw	r4,-4(fp)
100023d8:	00017c40 	call	100017c4 <force_It_Inside_Map>
            force_It_On_Ground(kirby, kirby->map);
100023dc:	e0bfff17 	ldw	r2,-4(fp)
100023e0:	10800217 	ldw	r2,8(r2)
100023e4:	100b883a 	mov	r5,r2
100023e8:	e13fff17 	ldw	r4,-4(fp)
100023ec:	00016340 	call	10001634 <force_It_On_Ground>
            upload_Kirby_Info(kirby);
100023f0:	e13fff17 	ldw	r4,-4(fp)
100023f4:	00006180 	call	10000618 <upload_Kirby_Info>
            frame_Time(KIRBY_FRAME_TIME_KICK);
100023f8:	0103e804 	movi	r4,4000
100023fc:	0001b340 	call	10001b34 <frame_Time>
    int i = 0;
    kirby->image = 0;
    kirby->action = 2;
    kirby->frame = 6;
    if (kirby->is_left == 0) {
        for (i = 0; i < 8; i++){
10002400:	e0bffe17 	ldw	r2,-8(fp)
10002404:	10800044 	addi	r2,r2,1
10002408:	e0bffe15 	stw	r2,-8(fp)
1000240c:	e0bffe17 	ldw	r2,-8(fp)
10002410:	10800210 	cmplti	r2,r2,8
10002414:	103fe71e 	bne	r2,zero,100023b4 <__alt_data_end+0xf80023b4>
            force_It_Inside_Map(kirby, kirby->map);
            force_It_On_Ground(kirby, kirby->map);
            upload_Kirby_Info(kirby);
            frame_Time(KIRBY_FRAME_TIME_KICK);
        }
        for (i = 0; i < 6; i++)
10002418:	e03ffe15 	stw	zero,-8(fp)
1000241c:	00001606 	br	10002478 <kirby_Kick_Ass+0x110>
        {
            kirby->x += (KIRBY_KICK_X - 1);
10002420:	e0bfff17 	ldw	r2,-4(fp)
10002424:	10800017 	ldw	r2,0(r2)
10002428:	10c00084 	addi	r3,r2,2
1000242c:	e0bfff17 	ldw	r2,-4(fp)
10002430:	10c00015 	stw	r3,0(r2)
            force_It_Inside_Map(kirby, kirby->map);
10002434:	e0bfff17 	ldw	r2,-4(fp)
10002438:	10800217 	ldw	r2,8(r2)
1000243c:	100b883a 	mov	r5,r2
10002440:	e13fff17 	ldw	r4,-4(fp)
10002444:	00017c40 	call	100017c4 <force_It_Inside_Map>
            force_It_On_Ground(kirby, kirby->map);
10002448:	e0bfff17 	ldw	r2,-4(fp)
1000244c:	10800217 	ldw	r2,8(r2)
10002450:	100b883a 	mov	r5,r2
10002454:	e13fff17 	ldw	r4,-4(fp)
10002458:	00016340 	call	10001634 <force_It_On_Ground>
            upload_Kirby_Info(kirby);
1000245c:	e13fff17 	ldw	r4,-4(fp)
10002460:	00006180 	call	10000618 <upload_Kirby_Info>
            frame_Time(KIRBY_FRAME_TIME_KICK);
10002464:	0103e804 	movi	r4,4000
10002468:	0001b340 	call	10001b34 <frame_Time>
            force_It_Inside_Map(kirby, kirby->map);
            force_It_On_Ground(kirby, kirby->map);
            upload_Kirby_Info(kirby);
            frame_Time(KIRBY_FRAME_TIME_KICK);
        }
        for (i = 0; i < 6; i++)
1000246c:	e0bffe17 	ldw	r2,-8(fp)
10002470:	10800044 	addi	r2,r2,1
10002474:	e0bffe15 	stw	r2,-8(fp)
10002478:	e0bffe17 	ldw	r2,-8(fp)
1000247c:	10800190 	cmplti	r2,r2,6
10002480:	103fe71e 	bne	r2,zero,10002420 <__alt_data_end+0xf8002420>
            force_It_Inside_Map(kirby, kirby->map);
            force_It_On_Ground(kirby, kirby->map);
            upload_Kirby_Info(kirby);
            frame_Time(KIRBY_FRAME_TIME_KICK);
        }
        kirby->x += (KIRBY_KICK_X - 2);
10002484:	e0bfff17 	ldw	r2,-4(fp)
10002488:	10800017 	ldw	r2,0(r2)
1000248c:	10c00044 	addi	r3,r2,1
10002490:	e0bfff17 	ldw	r2,-4(fp)
10002494:	10c00015 	stw	r3,0(r2)
        force_It_Inside_Map(kirby, kirby->map);
10002498:	e0bfff17 	ldw	r2,-4(fp)
1000249c:	10800217 	ldw	r2,8(r2)
100024a0:	100b883a 	mov	r5,r2
100024a4:	e13fff17 	ldw	r4,-4(fp)
100024a8:	00017c40 	call	100017c4 <force_It_Inside_Map>
        force_It_On_Ground(kirby, kirby->map);
100024ac:	e0bfff17 	ldw	r2,-4(fp)
100024b0:	10800217 	ldw	r2,8(r2)
100024b4:	100b883a 	mov	r5,r2
100024b8:	e13fff17 	ldw	r4,-4(fp)
100024bc:	00016340 	call	10001634 <force_It_On_Ground>
        upload_Kirby_Info(kirby);
100024c0:	e13fff17 	ldw	r4,-4(fp)
100024c4:	00006180 	call	10000618 <upload_Kirby_Info>
        frame_Time(KIRBY_FRAME_TIME_KICK);
100024c8:	0103e804 	movi	r4,4000
100024cc:	0001b340 	call	10001b34 <frame_Time>
        upload_Kirby_Info(kirby);
        frame_Time(KIRBY_FRAME_TIME_KICK);
    }
    

}
100024d0:	00004906 	br	100025f8 <kirby_Kick_Ass+0x290>
        force_It_Inside_Map(kirby, kirby->map);
        force_It_On_Ground(kirby, kirby->map);
        upload_Kirby_Info(kirby);
        frame_Time(KIRBY_FRAME_TIME_KICK);
    } else {
        for (i = 0; i < 8; i++){
100024d4:	e03ffe15 	stw	zero,-8(fp)
100024d8:	00001606 	br	10002534 <kirby_Kick_Ass+0x1cc>
            kirby->x -= KIRBY_KICK_X;
100024dc:	e0bfff17 	ldw	r2,-4(fp)
100024e0:	10800017 	ldw	r2,0(r2)
100024e4:	10ffff44 	addi	r3,r2,-3
100024e8:	e0bfff17 	ldw	r2,-4(fp)
100024ec:	10c00015 	stw	r3,0(r2)
            force_It_Inside_Map(kirby, kirby->map);
100024f0:	e0bfff17 	ldw	r2,-4(fp)
100024f4:	10800217 	ldw	r2,8(r2)
100024f8:	100b883a 	mov	r5,r2
100024fc:	e13fff17 	ldw	r4,-4(fp)
10002500:	00017c40 	call	100017c4 <force_It_Inside_Map>
            force_It_On_Ground(kirby, kirby->map);
10002504:	e0bfff17 	ldw	r2,-4(fp)
10002508:	10800217 	ldw	r2,8(r2)
1000250c:	100b883a 	mov	r5,r2
10002510:	e13fff17 	ldw	r4,-4(fp)
10002514:	00016340 	call	10001634 <force_It_On_Ground>
            upload_Kirby_Info(kirby);
10002518:	e13fff17 	ldw	r4,-4(fp)
1000251c:	00006180 	call	10000618 <upload_Kirby_Info>
            frame_Time(KIRBY_FRAME_TIME_KICK);
10002520:	0103e804 	movi	r4,4000
10002524:	0001b340 	call	10001b34 <frame_Time>
        force_It_Inside_Map(kirby, kirby->map);
        force_It_On_Ground(kirby, kirby->map);
        upload_Kirby_Info(kirby);
        frame_Time(KIRBY_FRAME_TIME_KICK);
    } else {
        for (i = 0; i < 8; i++){
10002528:	e0bffe17 	ldw	r2,-8(fp)
1000252c:	10800044 	addi	r2,r2,1
10002530:	e0bffe15 	stw	r2,-8(fp)
10002534:	e0bffe17 	ldw	r2,-8(fp)
10002538:	10800210 	cmplti	r2,r2,8
1000253c:	103fe71e 	bne	r2,zero,100024dc <__alt_data_end+0xf80024dc>
            force_It_Inside_Map(kirby, kirby->map);
            force_It_On_Ground(kirby, kirby->map);
            upload_Kirby_Info(kirby);
            frame_Time(KIRBY_FRAME_TIME_KICK);
        }
        for (i = 0; i < 6; i++)
10002540:	e03ffe15 	stw	zero,-8(fp)
10002544:	00001606 	br	100025a0 <kirby_Kick_Ass+0x238>
        {
            kirby->x -= (KIRBY_KICK_X - 1);
10002548:	e0bfff17 	ldw	r2,-4(fp)
1000254c:	10800017 	ldw	r2,0(r2)
10002550:	10ffff84 	addi	r3,r2,-2
10002554:	e0bfff17 	ldw	r2,-4(fp)
10002558:	10c00015 	stw	r3,0(r2)
            force_It_Inside_Map(kirby, kirby->map);
1000255c:	e0bfff17 	ldw	r2,-4(fp)
10002560:	10800217 	ldw	r2,8(r2)
10002564:	100b883a 	mov	r5,r2
10002568:	e13fff17 	ldw	r4,-4(fp)
1000256c:	00017c40 	call	100017c4 <force_It_Inside_Map>
            force_It_On_Ground(kirby, kirby->map);
10002570:	e0bfff17 	ldw	r2,-4(fp)
10002574:	10800217 	ldw	r2,8(r2)
10002578:	100b883a 	mov	r5,r2
1000257c:	e13fff17 	ldw	r4,-4(fp)
10002580:	00016340 	call	10001634 <force_It_On_Ground>
            upload_Kirby_Info(kirby);
10002584:	e13fff17 	ldw	r4,-4(fp)
10002588:	00006180 	call	10000618 <upload_Kirby_Info>
            frame_Time(KIRBY_FRAME_TIME_KICK);
1000258c:	0103e804 	movi	r4,4000
10002590:	0001b340 	call	10001b34 <frame_Time>
            force_It_Inside_Map(kirby, kirby->map);
            force_It_On_Ground(kirby, kirby->map);
            upload_Kirby_Info(kirby);
            frame_Time(KIRBY_FRAME_TIME_KICK);
        }
        for (i = 0; i < 6; i++)
10002594:	e0bffe17 	ldw	r2,-8(fp)
10002598:	10800044 	addi	r2,r2,1
1000259c:	e0bffe15 	stw	r2,-8(fp)
100025a0:	e0bffe17 	ldw	r2,-8(fp)
100025a4:	10800190 	cmplti	r2,r2,6
100025a8:	103fe71e 	bne	r2,zero,10002548 <__alt_data_end+0xf8002548>
            force_It_Inside_Map(kirby, kirby->map);
            force_It_On_Ground(kirby, kirby->map);
            upload_Kirby_Info(kirby);
            frame_Time(KIRBY_FRAME_TIME_KICK);
        }
        kirby->x -= (KIRBY_KICK_X - 2);
100025ac:	e0bfff17 	ldw	r2,-4(fp)
100025b0:	10800017 	ldw	r2,0(r2)
100025b4:	10ffffc4 	addi	r3,r2,-1
100025b8:	e0bfff17 	ldw	r2,-4(fp)
100025bc:	10c00015 	stw	r3,0(r2)
        force_It_Inside_Map(kirby, kirby->map);
100025c0:	e0bfff17 	ldw	r2,-4(fp)
100025c4:	10800217 	ldw	r2,8(r2)
100025c8:	100b883a 	mov	r5,r2
100025cc:	e13fff17 	ldw	r4,-4(fp)
100025d0:	00017c40 	call	100017c4 <force_It_Inside_Map>
        force_It_On_Ground(kirby, kirby->map);
100025d4:	e0bfff17 	ldw	r2,-4(fp)
100025d8:	10800217 	ldw	r2,8(r2)
100025dc:	100b883a 	mov	r5,r2
100025e0:	e13fff17 	ldw	r4,-4(fp)
100025e4:	00016340 	call	10001634 <force_It_On_Ground>
        upload_Kirby_Info(kirby);
100025e8:	e13fff17 	ldw	r4,-4(fp)
100025ec:	00006180 	call	10000618 <upload_Kirby_Info>
        frame_Time(KIRBY_FRAME_TIME_KICK);
100025f0:	0103e804 	movi	r4,4000
100025f4:	0001b340 	call	10001b34 <frame_Time>
    }
    

}
100025f8:	0001883a 	nop
100025fc:	e037883a 	mov	sp,fp
10002600:	dfc00117 	ldw	ra,4(sp)
10002604:	df000017 	ldw	fp,0(sp)
10002608:	dec00204 	addi	sp,sp,8
1000260c:	f800283a 	ret

10002610 <kirby_Screen_Center_X>:

int kirby_Screen_Center_X(int x) {
10002610:	defffe04 	addi	sp,sp,-8
10002614:	df000115 	stw	fp,4(sp)
10002618:	df000104 	addi	fp,sp,4
1000261c:	e13fff15 	stw	r4,-4(fp)
    if (x <= (SCREEN_WIDTH/2)) {
10002620:	e0bfff17 	ldw	r2,-4(fp)
10002624:	10801d88 	cmpgei	r2,r2,118
10002628:	1000021e 	bne	r2,zero,10002634 <kirby_Screen_Center_X+0x24>
        return x;
1000262c:	e0bfff17 	ldw	r2,-4(fp)
10002630:	00000a06 	br	1000265c <kirby_Screen_Center_X+0x4c>
    } else if ((x > (SCREEN_WIDTH/2)) && (x < (MAP_0_WIDTH - SCREEN_WIDTH/2))) {
10002634:	e0bfff17 	ldw	r2,-4(fp)
10002638:	10801d90 	cmplti	r2,r2,118
1000263c:	1000051e 	bne	r2,zero,10002654 <kirby_Screen_Center_X+0x44>
10002640:	e0bfff17 	ldw	r2,-4(fp)
10002644:	10811288 	cmpgei	r2,r2,1098
10002648:	1000021e 	bne	r2,zero,10002654 <kirby_Screen_Center_X+0x44>
        return (SCREEN_WIDTH/2);
1000264c:	00801d44 	movi	r2,117
10002650:	00000206 	br	1000265c <kirby_Screen_Center_X+0x4c>
    } else {
        return (x - MAP_0_WIDTH + SCREEN_WIDTH);
10002654:	e0bfff17 	ldw	r2,-4(fp)
10002658:	10bf0ac4 	addi	r2,r2,-981
    }
}
1000265c:	e037883a 	mov	sp,fp
10002660:	df000017 	ldw	fp,0(sp)
10002664:	dec00104 	addi	sp,sp,4
10002668:	f800283a 	ret

1000266c <main>:
#include "test.h"
#include "usb_main.h"
#include "parameter.h"
#include "game_logic.h"

int main(void) {
1000266c:	defffe04 	addi	sp,sp,-8
10002670:	dfc00115 	stw	ra,4(sp)
10002674:	df000015 	stw	fp,0(sp)
10002678:	d839883a 	mov	fp,sp
    GameStart();
1000267c:	000026c0 	call	1000026c <GameStart>

    printf("Interupt takes place!");
10002680:	01040074 	movhi	r4,4097
10002684:	21105f04 	addi	r4,r4,16764
10002688:	0004bec0 	call	10004bec <printf>
    return 0;
1000268c:	0005883a 	mov	r2,zero
}
10002690:	e037883a 	mov	sp,fp
10002694:	dfc00117 	ldw	ra,4(sp)
10002698:	df000017 	ldw	fp,0(sp)
1000269c:	dec00204 	addi	sp,sp,8
100026a0:	f800283a 	ret

100026a4 <initial_Star>:

#include "star.h"
#include "parameter.h"


void initial_Star(Star * star) {
100026a4:	defffe04 	addi	sp,sp,-8
100026a8:	df000115 	stw	fp,4(sp)
100026ac:	df000104 	addi	fp,sp,4
100026b0:	e13fff15 	stw	r4,-4(fp)
    star->x = 0;
100026b4:	e0bfff17 	ldw	r2,-4(fp)
100026b8:	10000015 	stw	zero,0(r2)
    star->y = 0;
100026bc:	e0bfff17 	ldw	r2,-4(fp)
100026c0:	10000115 	stw	zero,4(r2)
    star->idx = 0;
100026c4:	e0bfff17 	ldw	r2,-4(fp)
100026c8:	10000215 	stw	zero,8(r2)
    star->appear = 0;
100026cc:	e0bfff17 	ldw	r2,-4(fp)
100026d0:	10000315 	stw	zero,12(r2)
    star->is_left = 0;
100026d4:	e0bfff17 	ldw	r2,-4(fp)
100026d8:	10000415 	stw	zero,16(r2)
}
100026dc:	0001883a 	nop
100026e0:	e037883a 	mov	sp,fp
100026e4:	df000017 	ldw	fp,0(sp)
100026e8:	dec00104 	addi	sp,sp,4
100026ec:	f800283a 	ret

100026f0 <spit_Star>:

void spit_Star(Kirby * kirby, Star * star) {
100026f0:	defffc04 	addi	sp,sp,-16
100026f4:	dfc00315 	stw	ra,12(sp)
100026f8:	df000215 	stw	fp,8(sp)
100026fc:	df000204 	addi	fp,sp,8
10002700:	e13ffe15 	stw	r4,-8(fp)
10002704:	e17fff15 	stw	r5,-4(fp)
    update_Star(kirby, star);
10002708:	e17fff17 	ldw	r5,-4(fp)
1000270c:	e13ffe17 	ldw	r4,-8(fp)
10002710:	00027c40 	call	100027c4 <update_Star>
    upload_Star_Info(star);
10002714:	e13fff17 	ldw	r4,-4(fp)
10002718:	00027340 	call	10002734 <upload_Star_Info>
    // frame_Time(KIRBY_FRAME_TIME_INHALE);
}
1000271c:	0001883a 	nop
10002720:	e037883a 	mov	sp,fp
10002724:	dfc00117 	ldw	ra,4(sp)
10002728:	df000017 	ldw	fp,0(sp)
1000272c:	dec00204 	addi	sp,sp,8
10002730:	f800283a 	ret

10002734 <upload_Star_Info>:

void upload_Star_Info(Star * star) {
10002734:	defffd04 	addi	sp,sp,-12
10002738:	dfc00215 	stw	ra,8(sp)
1000273c:	df000115 	stw	fp,4(sp)
10002740:	df000104 	addi	fp,sp,4
10002744:	e13fff15 	stw	r4,-4(fp)
    printf("\n**************** Spit Star - Load Registers ****************\n");
10002748:	01040074 	movhi	r4,4097
1000274c:	21106504 	addi	r4,r4,16788
10002750:	0004ce80 	call	10004ce8 <puts>
    REG_3_STAR = (star->x << 24) | (star->y << 16) | (star->idx << 14) | (star->is_left << 13) | (star->appear << 12);
10002754:	d080f917 	ldw	r2,996(gp)
10002758:	10800304 	addi	r2,r2,12
1000275c:	e0ffff17 	ldw	r3,-4(fp)
10002760:	18c00017 	ldw	r3,0(r3)
10002764:	1808963a 	slli	r4,r3,24
10002768:	e0ffff17 	ldw	r3,-4(fp)
1000276c:	18c00117 	ldw	r3,4(r3)
10002770:	1806943a 	slli	r3,r3,16
10002774:	20c8b03a 	or	r4,r4,r3
10002778:	e0ffff17 	ldw	r3,-4(fp)
1000277c:	18c00217 	ldw	r3,8(r3)
10002780:	180693ba 	slli	r3,r3,14
10002784:	20c8b03a 	or	r4,r4,r3
10002788:	e0ffff17 	ldw	r3,-4(fp)
1000278c:	18c00417 	ldw	r3,16(r3)
10002790:	1806937a 	slli	r3,r3,13
10002794:	20c8b03a 	or	r4,r4,r3
10002798:	e0ffff17 	ldw	r3,-4(fp)
1000279c:	18c00317 	ldw	r3,12(r3)
100027a0:	1806933a 	slli	r3,r3,12
100027a4:	20c6b03a 	or	r3,r4,r3
100027a8:	10c00015 	stw	r3,0(r2)
}
100027ac:	0001883a 	nop
100027b0:	e037883a 	mov	sp,fp
100027b4:	dfc00117 	ldw	ra,4(sp)
100027b8:	df000017 	ldw	fp,0(sp)
100027bc:	dec00204 	addi	sp,sp,8
100027c0:	f800283a 	ret

100027c4 <update_Star>:

void update_Star(Kirby * kirby, Star * star) {
100027c4:	defffc04 	addi	sp,sp,-16
100027c8:	dfc00315 	stw	ra,12(sp)
100027cc:	df000215 	stw	fp,8(sp)
100027d0:	df000204 	addi	fp,sp,8
100027d4:	e13ffe15 	stw	r4,-8(fp)
100027d8:	e17fff15 	stw	r5,-4(fp)
    if ((kirby->image == 1) && (kirby->action == 4) && (kirby->frame == 2)) {
100027dc:	e0bffe17 	ldw	r2,-8(fp)
100027e0:	10800317 	ldw	r2,12(r2)
100027e4:	10800058 	cmpnei	r2,r2,1
100027e8:	10002e1e 	bne	r2,zero,100028a4 <update_Star+0xe0>
100027ec:	e0bffe17 	ldw	r2,-8(fp)
100027f0:	10800617 	ldw	r2,24(r2)
100027f4:	10800118 	cmpnei	r2,r2,4
100027f8:	10002a1e 	bne	r2,zero,100028a4 <update_Star+0xe0>
100027fc:	e0bffe17 	ldw	r2,-8(fp)
10002800:	10800717 	ldw	r2,28(r2)
10002804:	10800098 	cmpnei	r2,r2,2
10002808:	1000261e 	bne	r2,zero,100028a4 <update_Star+0xe0>
        // spit star
        star->appear = 1;
1000280c:	e0bfff17 	ldw	r2,-4(fp)
10002810:	00c00044 	movi	r3,1
10002814:	10c00315 	stw	r3,12(r2)
        star->idx = 0;
10002818:	e0bfff17 	ldw	r2,-4(fp)
1000281c:	10000215 	stw	zero,8(r2)
        star->is_left = kirby->is_left;
10002820:	e0bffe17 	ldw	r2,-8(fp)
10002824:	10c00417 	ldw	r3,16(r2)
10002828:	e0bfff17 	ldw	r2,-4(fp)
1000282c:	10c00415 	stw	r3,16(r2)
        if (star->is_left == 0) { // Right
10002830:	e0bfff17 	ldw	r2,-4(fp)
10002834:	10800417 	ldw	r2,16(r2)
10002838:	10000d1e 	bne	r2,zero,10002870 <update_Star+0xac>
            star->x = kirby_Screen_Center_X(kirby->x) + 31;
1000283c:	e0bffe17 	ldw	r2,-8(fp)
10002840:	10800017 	ldw	r2,0(r2)
10002844:	1009883a 	mov	r4,r2
10002848:	00026100 	call	10002610 <kirby_Screen_Center_X>
1000284c:	10c007c4 	addi	r3,r2,31
10002850:	e0bfff17 	ldw	r2,-4(fp)
10002854:	10c00015 	stw	r3,0(r2)
            star->y = kirby->y + 3;
10002858:	e0bffe17 	ldw	r2,-8(fp)
1000285c:	10800117 	ldw	r2,4(r2)
10002860:	10c000c4 	addi	r3,r2,3
10002864:	e0bfff17 	ldw	r2,-4(fp)
10002868:	10c00115 	stw	r3,4(r2)
        } else { // Left
            star->x = kirby_Screen_Center_X(kirby->x) - 31;
            star->y = kirby->y + 3;
        }
        return;
1000286c:	00005206 	br	100029b8 <update_Star+0x1f4>
        star->is_left = kirby->is_left;
        if (star->is_left == 0) { // Right
            star->x = kirby_Screen_Center_X(kirby->x) + 31;
            star->y = kirby->y + 3;
        } else { // Left
            star->x = kirby_Screen_Center_X(kirby->x) - 31;
10002870:	e0bffe17 	ldw	r2,-8(fp)
10002874:	10800017 	ldw	r2,0(r2)
10002878:	1009883a 	mov	r4,r2
1000287c:	00026100 	call	10002610 <kirby_Screen_Center_X>
10002880:	10fff844 	addi	r3,r2,-31
10002884:	e0bfff17 	ldw	r2,-4(fp)
10002888:	10c00015 	stw	r3,0(r2)
            star->y = kirby->y + 3;
1000288c:	e0bffe17 	ldw	r2,-8(fp)
10002890:	10800117 	ldw	r2,4(r2)
10002894:	10c000c4 	addi	r3,r2,3
10002898:	e0bfff17 	ldw	r2,-4(fp)
1000289c:	10c00115 	stw	r3,4(r2)
        }
        return;
100028a0:	00004506 	br	100029b8 <update_Star+0x1f4>
    }

    if (star->appear == 1) {
100028a4:	e0bfff17 	ldw	r2,-4(fp)
100028a8:	10800317 	ldw	r2,12(r2)
100028ac:	10800058 	cmpnei	r2,r2,1
100028b0:	1000411e 	bne	r2,zero,100029b8 <update_Star+0x1f4>
        star->idx = (star->idx + 1) % 4; // 4 frames for 1 star-cycle
100028b4:	e0bfff17 	ldw	r2,-4(fp)
100028b8:	10800217 	ldw	r2,8(r2)
100028bc:	10c00044 	addi	r3,r2,1
100028c0:	00a00034 	movhi	r2,32768
100028c4:	108000c4 	addi	r2,r2,3
100028c8:	1884703a 	and	r2,r3,r2
100028cc:	1000040e 	bge	r2,zero,100028e0 <update_Star+0x11c>
100028d0:	10bfffc4 	addi	r2,r2,-1
100028d4:	00ffff04 	movi	r3,-4
100028d8:	10c4b03a 	or	r2,r2,r3
100028dc:	10800044 	addi	r2,r2,1
100028e0:	1007883a 	mov	r3,r2
100028e4:	e0bfff17 	ldw	r2,-4(fp)
100028e8:	10c00215 	stw	r3,8(r2)

        // 1 - Edge detection: L/R
        if (star->is_left == 0) {
100028ec:	e0bfff17 	ldw	r2,-4(fp)
100028f0:	10800417 	ldw	r2,16(r2)
100028f4:	1000181e 	bne	r2,zero,10002958 <update_Star+0x194>
            star->x += STAR_STEP_X;
100028f8:	e0bfff17 	ldw	r2,-4(fp)
100028fc:	10800017 	ldw	r2,0(r2)
10002900:	10c00104 	addi	r3,r2,4
10002904:	e0bfff17 	ldw	r2,-4(fp)
10002908:	10c00015 	stw	r3,0(r2)

            // If meet edges of map or screen
            if ((get_Wall_Info(star->x + 22, star->y, 0) == 1) || ((star->x + 22) >= 233)) {
1000290c:	e0bfff17 	ldw	r2,-4(fp)
10002910:	10800017 	ldw	r2,0(r2)
10002914:	10c00584 	addi	r3,r2,22
10002918:	e0bfff17 	ldw	r2,-4(fp)
1000291c:	10800117 	ldw	r2,4(r2)
10002920:	000d883a 	mov	r6,zero
10002924:	100b883a 	mov	r5,r2
10002928:	1809883a 	mov	r4,r3
1000292c:	00020580 	call	10002058 <get_Wall_Info>
10002930:	10800060 	cmpeqi	r2,r2,1
10002934:	1000051e 	bne	r2,zero,1000294c <update_Star+0x188>
10002938:	e0bfff17 	ldw	r2,-4(fp)
1000293c:	10800017 	ldw	r2,0(r2)
10002940:	10800584 	addi	r2,r2,22
10002944:	10803a50 	cmplti	r2,r2,233
10002948:	10001a1e 	bne	r2,zero,100029b4 <update_Star+0x1f0>
                star->appear = 0;
1000294c:	e0bfff17 	ldw	r2,-4(fp)
10002950:	10000315 	stw	zero,12(r2)
                return;
10002954:	00001806 	br	100029b8 <update_Star+0x1f4>
            }
        }
        else {
            star->x -=STAR_STEP_X;
10002958:	e0bfff17 	ldw	r2,-4(fp)
1000295c:	10800017 	ldw	r2,0(r2)
10002960:	10ffff04 	addi	r3,r2,-4
10002964:	e0bfff17 	ldw	r2,-4(fp)
10002968:	10c00015 	stw	r3,0(r2)

            // If meet edges of map or screen
            if ((get_Wall_Info(star->x + 1, star->y, 0) == 1) || ((star->x + 1) <= 0)) {
1000296c:	e0bfff17 	ldw	r2,-4(fp)
10002970:	10800017 	ldw	r2,0(r2)
10002974:	10c00044 	addi	r3,r2,1
10002978:	e0bfff17 	ldw	r2,-4(fp)
1000297c:	10800117 	ldw	r2,4(r2)
10002980:	000d883a 	mov	r6,zero
10002984:	100b883a 	mov	r5,r2
10002988:	1809883a 	mov	r4,r3
1000298c:	00020580 	call	10002058 <get_Wall_Info>
10002990:	10800060 	cmpeqi	r2,r2,1
10002994:	1000041e 	bne	r2,zero,100029a8 <update_Star+0x1e4>
10002998:	e0bfff17 	ldw	r2,-4(fp)
1000299c:	10800017 	ldw	r2,0(r2)
100029a0:	10800044 	addi	r2,r2,1
100029a4:	00800316 	blt	zero,r2,100029b4 <update_Star+0x1f0>
                star->appear = 0;
100029a8:	e0bfff17 	ldw	r2,-4(fp)
100029ac:	10000315 	stw	zero,12(r2)
                return;
100029b0:	00000106 	br	100029b8 <update_Star+0x1f4>
            //
            star->appear = 0;
            return;
        }

        return;
100029b4:	0001883a 	nop
    }
}
100029b8:	e037883a 	mov	sp,fp
100029bc:	dfc00117 	ldw	ra,4(sp)
100029c0:	df000017 	ldw	fp,0(sp)
100029c4:	dec00204 	addi	sp,sp,8
100029c8:	f800283a 	ret

100029cc <test_keyboard>:
#include "parameter.h"




void test_keyboard(int keycode) {
100029cc:	defffd04 	addi	sp,sp,-12
100029d0:	dfc00215 	stw	ra,8(sp)
100029d4:	df000115 	stw	fp,4(sp)
100029d8:	df000104 	addi	fp,sp,4
100029dc:	e13fff15 	stw	r4,-4(fp)

    printf("########Test KeyBoard########");
100029e0:	01040074 	movhi	r4,4097
100029e4:	21107504 	addi	r4,r4,16852
100029e8:	0004bec0 	call	10004bec <printf>
    switch (keycode){
100029ec:	e0bfff17 	ldw	r2,-4(fp)
100029f0:	10c001e0 	cmpeqi	r3,r2,7
100029f4:	1800151e 	bne	r3,zero,10002a4c <test_keyboard+0x80>
100029f8:	10c00208 	cmpgei	r3,r2,8
100029fc:	1800031e 	bne	r3,zero,10002a0c <test_keyboard+0x40>
10002a00:	10800120 	cmpeqi	r2,r2,4
10002a04:	10000d1e 	bne	r2,zero,10002a3c <test_keyboard+0x70>
10002a08:	00001406 	br	10002a5c <test_keyboard+0x90>
10002a0c:	10c005a0 	cmpeqi	r3,r2,22
10002a10:	1800061e 	bne	r3,zero,10002a2c <test_keyboard+0x60>
10002a14:	108006a0 	cmpeqi	r2,r2,26
10002a18:	10001026 	beq	r2,zero,10002a5c <test_keyboard+0x90>
        case 0x001a:  // h1A, "w"
            REG_0_MAP_INFO = 1 << 16;
10002a1c:	d080fa17 	ldw	r2,1000(gp)
10002a20:	00c00074 	movhi	r3,1
10002a24:	10c00015 	stw	r3,0(r2)
            break;
10002a28:	00000f06 	br	10002a68 <test_keyboard+0x9c>
        case 0x0016:  // h16, "s"
            REG_0_MAP_INFO = 2 << 16;
10002a2c:	d080fa17 	ldw	r2,1000(gp)
10002a30:	00c000b4 	movhi	r3,2
10002a34:	10c00015 	stw	r3,0(r2)
            break;
10002a38:	00000b06 	br	10002a68 <test_keyboard+0x9c>
        case 0x0004:   // h04, "a"
            REG_0_MAP_INFO = 1 << 16;
10002a3c:	d080fa17 	ldw	r2,1000(gp)
10002a40:	00c00074 	movhi	r3,1
10002a44:	10c00015 	stw	r3,0(r2)
            break;
10002a48:	00000706 	br	10002a68 <test_keyboard+0x9c>
        case 0x0007:   // h07, "d"
            REG_0_MAP_INFO = 2 << 16;
10002a4c:	d080fa17 	ldw	r2,1000(gp)
10002a50:	00c000b4 	movhi	r3,2
10002a54:	10c00015 	stw	r3,0(r2)
            break;
10002a58:	00000306 	br	10002a68 <test_keyboard+0x9c>
        default:
            REG_0_MAP_INFO = 0 << 16;
10002a5c:	d080fa17 	ldw	r2,1000(gp)
10002a60:	10000015 	stw	zero,0(r2)
            break;
10002a64:	0001883a 	nop
    }
    printf("######### End Test ##########");
10002a68:	01040074 	movhi	r4,4097
10002a6c:	21107d04 	addi	r4,r4,16884
10002a70:	0004bec0 	call	10004bec <printf>
}
10002a74:	0001883a 	nop
10002a78:	e037883a 	mov	sp,fp
10002a7c:	dfc00117 	ldw	ra,4(sp)
10002a80:	df000017 	ldw	fp,0(sp)
10002a84:	dec00204 	addi	sp,sp,8
10002a88:	f800283a 	ret

10002a8c <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
10002a8c:	defffc04 	addi	sp,sp,-16
10002a90:	dfc00315 	stw	ra,12(sp)
10002a94:	df000215 	stw	fp,8(sp)
10002a98:	df000204 	addi	fp,sp,8
10002a9c:	2007883a 	mov	r3,r4
10002aa0:	2805883a 	mov	r2,r5
10002aa4:	e0fffe0d 	sth	r3,-8(fp)
10002aa8:	e0bfff0d 	sth	r2,-4(fp)
	//write address of registers to HDI
	IO_write(HPI_ADDR, Address);
10002aac:	e0bffe0b 	ldhu	r2,-8(fp)
10002ab0:	100b883a 	mov	r5,r2
10002ab4:	01000084 	movi	r4,2
10002ab8:	00004880 	call	10000488 <IO_write>

	//write data to address in HDI
	IO_write(HPI_DATA, Data);
10002abc:	e0bfff0b 	ldhu	r2,-4(fp)
10002ac0:	100b883a 	mov	r5,r2
10002ac4:	0009883a 	mov	r4,zero
10002ac8:	00004880 	call	10000488 <IO_write>
}
10002acc:	0001883a 	nop
10002ad0:	e037883a 	mov	sp,fp
10002ad4:	dfc00117 	ldw	ra,4(sp)
10002ad8:	df000017 	ldw	fp,0(sp)
10002adc:	dec00204 	addi	sp,sp,8
10002ae0:	f800283a 	ret

10002ae4 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10002ae4:	defffd04 	addi	sp,sp,-12
10002ae8:	dfc00215 	stw	ra,8(sp)
10002aec:	df000115 	stw	fp,4(sp)
10002af0:	df000104 	addi	fp,sp,4
10002af4:	2005883a 	mov	r2,r4
10002af8:	e0bfff0d 	sth	r2,-4(fp)
	//write address of registers to HDI
	IO_write(HPI_ADDR, Address);
10002afc:	e0bfff0b 	ldhu	r2,-4(fp)
10002b00:	100b883a 	mov	r5,r2
10002b04:	01000084 	movi	r4,2
10002b08:	00004880 	call	10000488 <IO_write>

	//read the data stored in HPI address and return the value
	return IO_read(HPI_DATA);
10002b0c:	0009883a 	mov	r4,zero
10002b10:	00005040 	call	10000504 <IO_read>
}
10002b14:	e037883a 	mov	sp,fp
10002b18:	dfc00117 	ldw	ra,4(sp)
10002b1c:	df000017 	ldw	fp,0(sp)
10002b20:	dec00204 	addi	sp,sp,8
10002b24:	f800283a 	ret

10002b28 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10002b28:	defffe04 	addi	sp,sp,-8
10002b2c:	dfc00115 	stw	ra,4(sp)
10002b30:	df000015 	stw	fp,0(sp)
10002b34:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
10002b38:	017e9414 	movui	r5,64080
10002b3c:	01000044 	movi	r4,1
10002b40:	00004880 	call	10000488 <IO_write>
	usleep(100000);
10002b44:	010000b4 	movhi	r4,2
10002b48:	2121a804 	addi	r4,r4,-31072
10002b4c:	00121780 	call	10012178 <usleep>
	printf("[USB INIT]:reset finished!\n");
10002b50:	01040074 	movhi	r4,4097
10002b54:	21108504 	addi	r4,r4,16916
10002b58:	0004ce80 	call	10004ce8 <puts>

	usleep(500000);
10002b5c:	01000234 	movhi	r4,8
10002b60:	21284804 	addi	r4,r4,-24288
10002b64:	00121780 	call	10012178 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
10002b68:	01040074 	movhi	r4,4097
10002b6c:	21108c04 	addi	r4,r4,16944
10002b70:	0004ce80 	call	10004ce8 <puts>
	IO_read(HPI_MAILBOX);
10002b74:	01000044 	movi	r4,1
10002b78:	00005040 	call	10000504 <IO_read>
	IO_read(HPI_STATUS);
10002b7c:	010000c4 	movi	r4,3
10002b80:	00005040 	call	10000504 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10002b84:	01005104 	movi	r4,324
10002b88:	0002ae40 	call	10002ae4 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10002b8c:	000b883a 	mov	r5,zero
10002b90:	01005104 	movi	r4,324
10002b94:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
10002b98:	01005204 	movi	r4,328
10002b9c:	0002ae40 	call	10002ae4 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10002ba0:	000b883a 	mov	r5,zero
10002ba4:	01005204 	movi	r4,328
10002ba8:	0002a8c0 	call	10002a8c <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10002bac:	017fffd4 	movui	r5,65535
10002bb0:	01302414 	movui	r4,49296
10002bb4:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
10002bb8:	017fffd4 	movui	r5,65535
10002bbc:	01302c14 	movui	r4,49328
10002bc0:	0002a8c0 	call	10002a8c <UsbWrite>
}
10002bc4:	0001883a 	nop
10002bc8:	e037883a 	mov	sp,fp
10002bcc:	dfc00117 	ldw	ra,4(sp)
10002bd0:	df000017 	ldw	fp,0(sp)
10002bd4:	dec00204 	addi	sp,sp,8
10002bd8:	f800283a 	ret

10002bdc <UsbSetAddress>:


void UsbSetAddress()
{
10002bdc:	defffe04 	addi	sp,sp,-8
10002be0:	dfc00115 	stw	ra,4(sp)
10002be4:	df000015 	stw	fp,0(sp)
10002be8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002bec:	01414004 	movi	r5,1280
10002bf0:	01000084 	movi	r4,2
10002bf4:	00004880 	call	10000488 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
10002bf8:	01414304 	movi	r5,1292
10002bfc:	0009883a 	mov	r4,zero
10002c00:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002c04:	01400204 	movi	r5,8
10002c08:	0009883a 	mov	r4,zero
10002c0c:	00004880 	call	10000488 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
10002c10:	01403404 	movi	r5,208
10002c14:	0009883a 	mov	r4,zero
10002c18:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002c1c:	01400044 	movi	r5,1
10002c20:	0009883a 	mov	r4,zero
10002c24:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002c28:	014004c4 	movi	r5,19
10002c2c:	0009883a 	mov	r4,zero
10002c30:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002c34:	01414504 	movi	r5,1300
10002c38:	0009883a 	mov	r4,zero
10002c3c:	00004880 	call	10000488 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
10002c40:	01414004 	movi	r5,1280
10002c44:	0009883a 	mov	r4,zero
10002c48:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0002);
10002c4c:	01400084 	movi	r5,2
10002c50:	0009883a 	mov	r4,zero
10002c54:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002c58:	000b883a 	mov	r5,zero
10002c5c:	0009883a 	mov	r4,zero
10002c60:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002c64:	000b883a 	mov	r5,zero
10002c68:	0009883a 	mov	r4,zero
10002c6c:	00004880 	call	10000488 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10002c70:	000b883a 	mov	r5,zero
10002c74:	0009883a 	mov	r4,zero
10002c78:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);//
10002c7c:	000b883a 	mov	r5,zero
10002c80:	0009883a 	mov	r4,zero
10002c84:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0090);//
10002c88:	01402404 	movi	r5,144
10002c8c:	0009883a 	mov	r4,zero
10002c90:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0041);
10002c94:	01401044 	movi	r5,65
10002c98:	0009883a 	mov	r4,zero
10002c9c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002ca0:	014004c4 	movi	r5,19
10002ca4:	0009883a 	mov	r4,zero
10002ca8:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002cac:	000b883a 	mov	r5,zero
10002cb0:	0009883a 	mov	r4,zero
10002cb4:	00004880 	call	10000488 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002cb8:	01414004 	movi	r5,1280
10002cbc:	01006c04 	movi	r4,432
10002cc0:	0002a8c0 	call	10002a8c <UsbWrite>
}
10002cc4:	0001883a 	nop
10002cc8:	e037883a 	mov	sp,fp
10002ccc:	dfc00117 	ldw	ra,4(sp)
10002cd0:	df000017 	ldw	fp,0(sp)
10002cd4:	dec00204 	addi	sp,sp,8
10002cd8:	f800283a 	ret

10002cdc <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
10002cdc:	defffe04 	addi	sp,sp,-8
10002ce0:	dfc00115 	stw	ra,4(sp)
10002ce4:	df000015 	stw	fp,0(sp)
10002ce8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002cec:	01414004 	movi	r5,1280
10002cf0:	01000084 	movi	r4,2
10002cf4:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002cf8:	01414304 	movi	r5,1292
10002cfc:	0009883a 	mov	r4,zero
10002d00:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002d04:	01400204 	movi	r5,8
10002d08:	0009883a 	mov	r4,zero
10002d0c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002d10:	0140b404 	movi	r5,720
10002d14:	0009883a 	mov	r4,zero
10002d18:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002d1c:	01400044 	movi	r5,1
10002d20:	0009883a 	mov	r4,zero
10002d24:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002d28:	014004c4 	movi	r5,19
10002d2c:	0009883a 	mov	r4,zero
10002d30:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002d34:	01414504 	movi	r5,1300
10002d38:	0009883a 	mov	r4,zero
10002d3c:	00004880 	call	10000488 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002d40:	0141a004 	movi	r5,1664
10002d44:	0009883a 	mov	r4,zero
10002d48:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
10002d4c:	01404004 	movi	r5,256
10002d50:	0009883a 	mov	r4,zero
10002d54:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002d58:	000b883a 	mov	r5,zero
10002d5c:	0009883a 	mov	r4,zero
10002d60:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0008);
10002d64:	01400204 	movi	r5,8
10002d68:	0009883a 	mov	r4,zero
10002d6c:	00004880 	call	10000488 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
10002d70:	01414b04 	movi	r5,1324
10002d74:	0009883a 	mov	r4,zero
10002d78:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0008);//
10002d7c:	01400204 	movi	r5,8
10002d80:	0009883a 	mov	r4,zero
10002d84:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0290);//
10002d88:	0140a404 	movi	r5,656
10002d8c:	0009883a 	mov	r4,zero
10002d90:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0041);
10002d94:	01401044 	movi	r5,65
10002d98:	0009883a 	mov	r4,zero
10002d9c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002da0:	014004c4 	movi	r5,19
10002da4:	0009883a 	mov	r4,zero
10002da8:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0520);
10002dac:	01414804 	movi	r5,1312
10002db0:	0009883a 	mov	r4,zero
10002db4:	00004880 	call	10000488 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
10002db8:	000b883a 	mov	r5,zero
10002dbc:	0009883a 	mov	r4,zero
10002dc0:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10002dc4:	000b883a 	mov	r5,zero
10002dc8:	0009883a 	mov	r4,zero
10002dcc:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
10002dd0:	01408404 	movi	r5,528
10002dd4:	0009883a 	mov	r4,zero
10002dd8:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0041);
10002ddc:	01401044 	movi	r5,65
10002de0:	0009883a 	mov	r4,zero
10002de4:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002de8:	014004c4 	movi	r5,19
10002dec:	0009883a 	mov	r4,zero
10002df0:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002df4:	000b883a 	mov	r5,zero
10002df8:	0009883a 	mov	r4,zero
10002dfc:	00004880 	call	10000488 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002e00:	01414004 	movi	r5,1280
10002e04:	01006c04 	movi	r4,432
10002e08:	0002a8c0 	call	10002a8c <UsbWrite>
}
10002e0c:	0001883a 	nop
10002e10:	e037883a 	mov	sp,fp
10002e14:	dfc00117 	ldw	ra,4(sp)
10002e18:	df000017 	ldw	fp,0(sp)
10002e1c:	dec00204 	addi	sp,sp,8
10002e20:	f800283a 	ret

10002e24 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
10002e24:	defffe04 	addi	sp,sp,-8
10002e28:	dfc00115 	stw	ra,4(sp)
10002e2c:	df000015 	stw	fp,0(sp)
10002e30:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002e34:	01414004 	movi	r5,1280
10002e38:	01000084 	movi	r4,2
10002e3c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002e40:	01414304 	movi	r5,1292
10002e44:	0009883a 	mov	r4,zero
10002e48:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002e4c:	01400204 	movi	r5,8
10002e50:	0009883a 	mov	r4,zero
10002e54:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002e58:	0140b404 	movi	r5,720
10002e5c:	0009883a 	mov	r4,zero
10002e60:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002e64:	01400044 	movi	r5,1
10002e68:	0009883a 	mov	r4,zero
10002e6c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002e70:	014004c4 	movi	r5,19
10002e74:	0009883a 	mov	r4,zero
10002e78:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002e7c:	01414504 	movi	r5,1300
10002e80:	0009883a 	mov	r4,zero
10002e84:	00004880 	call	10000488 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002e88:	0141a004 	movi	r5,1664
10002e8c:	0009883a 	mov	r4,zero
10002e90:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
10002e94:	01404004 	movi	r5,256
10002e98:	0009883a 	mov	r4,zero
10002e9c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002ea0:	000b883a 	mov	r5,zero
10002ea4:	0009883a 	mov	r4,zero
10002ea8:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
10002eac:	01400484 	movi	r5,18
10002eb0:	0009883a 	mov	r4,zero
10002eb4:	00004880 	call	10000488 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10002eb8:	01415104 	movi	r5,1348
10002ebc:	0009883a 	mov	r4,zero
10002ec0:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002ec4:	01400204 	movi	r5,8
10002ec8:	0009883a 	mov	r4,zero
10002ecc:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002ed0:	0140a404 	movi	r5,656
10002ed4:	0009883a 	mov	r4,zero
10002ed8:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002edc:	01401044 	movi	r5,65
10002ee0:	0009883a 	mov	r4,zero
10002ee4:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002ee8:	014004c4 	movi	r5,19
10002eec:	0009883a 	mov	r4,zero
10002ef0:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002ef4:	01414804 	movi	r5,1312
10002ef8:	0009883a 	mov	r4,zero
10002efc:	00004880 	call	10000488 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10002f00:	01415304 	movi	r5,1356
10002f04:	0009883a 	mov	r4,zero
10002f08:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10002f0c:	01400204 	movi	r5,8
10002f10:	0009883a 	mov	r4,zero
10002f14:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002f18:	0140a404 	movi	r5,656
10002f1c:	0009883a 	mov	r4,zero
10002f20:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
10002f24:	01400044 	movi	r5,1
10002f28:	0009883a 	mov	r4,zero
10002f2c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002f30:	014004c4 	movi	r5,19
10002f34:	0009883a 	mov	r4,zero
10002f38:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10002f3c:	01414b04 	movi	r5,1324
10002f40:	0009883a 	mov	r4,zero
10002f44:	00004880 	call	10000488 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
10002f48:	01415504 	movi	r5,1364
10002f4c:	0009883a 	mov	r4,zero
10002f50:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
10002f54:	01400084 	movi	r5,2
10002f58:	0009883a 	mov	r4,zero
10002f5c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10002f60:	0140a404 	movi	r5,656
10002f64:	0009883a 	mov	r4,zero
10002f68:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002f6c:	01401044 	movi	r5,65
10002f70:	0009883a 	mov	r4,zero
10002f74:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002f78:	014004c4 	movi	r5,19
10002f7c:	0009883a 	mov	r4,zero
10002f80:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10002f84:	01414e04 	movi	r5,1336
10002f88:	0009883a 	mov	r4,zero
10002f8c:	00004880 	call	10000488 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10002f90:	000b883a 	mov	r5,zero
10002f94:	0009883a 	mov	r4,zero
10002f98:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10002f9c:	000b883a 	mov	r5,zero
10002fa0:	0009883a 	mov	r4,zero
10002fa4:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10002fa8:	01408404 	movi	r5,528
10002fac:	0009883a 	mov	r4,zero
10002fb0:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
10002fb4:	01401044 	movi	r5,65
10002fb8:	0009883a 	mov	r4,zero
10002fbc:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10002fc0:	014004c4 	movi	r5,19
10002fc4:	0009883a 	mov	r4,zero
10002fc8:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10002fcc:	000b883a 	mov	r5,zero
10002fd0:	0009883a 	mov	r4,zero
10002fd4:	00004880 	call	10000488 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002fd8:	01414004 	movi	r5,1280
10002fdc:	01006c04 	movi	r4,432
10002fe0:	0002a8c0 	call	10002a8c <UsbWrite>
}
10002fe4:	0001883a 	nop
10002fe8:	e037883a 	mov	sp,fp
10002fec:	dfc00117 	ldw	ra,4(sp)
10002ff0:	df000017 	ldw	fp,0(sp)
10002ff4:	dec00204 	addi	sp,sp,8
10002ff8:	f800283a 	ret

10002ffc <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
10002ffc:	defffe04 	addi	sp,sp,-8
10003000:	dfc00115 	stw	ra,4(sp)
10003004:	df000015 	stw	fp,0(sp)
10003008:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000300c:	01414004 	movi	r5,1280
10003010:	01000084 	movi	r4,2
10003014:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x050C);
10003018:	01414304 	movi	r5,1292
1000301c:	0009883a 	mov	r4,zero
10003020:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10003024:	01400204 	movi	r5,8
10003028:	0009883a 	mov	r4,zero
1000302c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10003030:	0140b404 	movi	r5,720
10003034:	0009883a 	mov	r4,zero
10003038:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000303c:	01400044 	movi	r5,1
10003040:	0009883a 	mov	r4,zero
10003044:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003048:	014004c4 	movi	r5,19
1000304c:	0009883a 	mov	r4,zero
10003050:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0514);
10003054:	01414504 	movi	r5,1300
10003058:	0009883a 	mov	r4,zero
1000305c:	00004880 	call	10000488 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10003060:	0141a004 	movi	r5,1664
10003064:	0009883a 	mov	r4,zero
10003068:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
1000306c:	01408004 	movi	r5,512
10003070:	0009883a 	mov	r4,zero
10003074:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10003078:	000b883a 	mov	r5,zero
1000307c:	0009883a 	mov	r4,zero
10003080:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10003084:	01400244 	movi	r5,9
10003088:	0009883a 	mov	r4,zero
1000308c:	00004880 	call	10000488 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10003090:	01415104 	movi	r5,1348
10003094:	0009883a 	mov	r4,zero
10003098:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
1000309c:	01400204 	movi	r5,8
100030a0:	0009883a 	mov	r4,zero
100030a4:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100030a8:	0140a404 	movi	r5,656
100030ac:	0009883a 	mov	r4,zero
100030b0:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100030b4:	01401044 	movi	r5,65
100030b8:	0009883a 	mov	r4,zero
100030bc:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100030c0:	014004c4 	movi	r5,19
100030c4:	0009883a 	mov	r4,zero
100030c8:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100030cc:	01414804 	movi	r5,1312
100030d0:	0009883a 	mov	r4,zero
100030d4:	00004880 	call	10000488 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
100030d8:	01415304 	movi	r5,1356
100030dc:	0009883a 	mov	r4,zero
100030e0:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
100030e4:	01400044 	movi	r5,1
100030e8:	0009883a 	mov	r4,zero
100030ec:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100030f0:	0140a404 	movi	r5,656
100030f4:	0009883a 	mov	r4,zero
100030f8:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100030fc:	01400044 	movi	r5,1
10003100:	0009883a 	mov	r4,zero
10003104:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10003108:	014004c4 	movi	r5,19
1000310c:	0009883a 	mov	r4,zero
10003110:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10003114:	01414b04 	movi	r5,1324
10003118:	0009883a 	mov	r4,zero
1000311c:	00004880 	call	10000488 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10003120:	000b883a 	mov	r5,zero
10003124:	0009883a 	mov	r4,zero
10003128:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
1000312c:	000b883a 	mov	r5,zero
10003130:	0009883a 	mov	r4,zero
10003134:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10003138:	01408404 	movi	r5,528
1000313c:	0009883a 	mov	r4,zero
10003140:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10003144:	01401044 	movi	r5,65
10003148:	0009883a 	mov	r4,zero
1000314c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10003150:	014004c4 	movi	r5,19
10003154:	0009883a 	mov	r4,zero
10003158:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
1000315c:	000b883a 	mov	r5,zero
10003160:	0009883a 	mov	r4,zero
10003164:	00004880 	call	10000488 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003168:	01414004 	movi	r5,1280
1000316c:	01006c04 	movi	r4,432
10003170:	0002a8c0 	call	10002a8c <UsbWrite>
}
10003174:	0001883a 	nop
10003178:	e037883a 	mov	sp,fp
1000317c:	dfc00117 	ldw	ra,4(sp)
10003180:	df000017 	ldw	fp,0(sp)
10003184:	dec00204 	addi	sp,sp,8
10003188:	f800283a 	ret

1000318c <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
1000318c:	defffe04 	addi	sp,sp,-8
10003190:	dfc00115 	stw	ra,4(sp)
10003194:	df000015 	stw	fp,0(sp)
10003198:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000319c:	01414004 	movi	r5,1280
100031a0:	01000084 	movi	r4,2
100031a4:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x050C);
100031a8:	01414304 	movi	r5,1292
100031ac:	0009883a 	mov	r4,zero
100031b0:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100031b4:	01400204 	movi	r5,8
100031b8:	0009883a 	mov	r4,zero
100031bc:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100031c0:	0140b404 	movi	r5,720
100031c4:	0009883a 	mov	r4,zero
100031c8:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0001);
100031cc:	01400044 	movi	r5,1
100031d0:	0009883a 	mov	r4,zero
100031d4:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);
100031d8:	014004c4 	movi	r5,19
100031dc:	0009883a 	mov	r4,zero
100031e0:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0514);
100031e4:	01414504 	movi	r5,1300
100031e8:	0009883a 	mov	r4,zero
100031ec:	00004880 	call	10000488 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100031f0:	0141a004 	movi	r5,1664
100031f4:	0009883a 	mov	r4,zero
100031f8:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
100031fc:	01408004 	movi	r5,512
10003200:	0009883a 	mov	r4,zero
10003204:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10003208:	000b883a 	mov	r5,zero
1000320c:	0009883a 	mov	r4,zero
10003210:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
10003214:	01403fc4 	movi	r5,255
10003218:	0009883a 	mov	r4,zero
1000321c:	00004880 	call	10000488 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
10003220:	01415704 	movi	r5,1372
10003224:	0009883a 	mov	r4,zero
10003228:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
1000322c:	01400204 	movi	r5,8
10003230:	0009883a 	mov	r4,zero
10003234:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10003238:	0140a404 	movi	r5,656
1000323c:	0009883a 	mov	r4,zero
10003240:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10003244:	01401044 	movi	r5,65
10003248:	0009883a 	mov	r4,zero
1000324c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003250:	014004c4 	movi	r5,19
10003254:	0009883a 	mov	r4,zero
10003258:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
1000325c:	01414804 	movi	r5,1312
10003260:	0009883a 	mov	r4,zero
10003264:	00004880 	call	10000488 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
10003268:	01415904 	movi	r5,1380
1000326c:	0009883a 	mov	r4,zero
10003270:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10003274:	01400204 	movi	r5,8
10003278:	0009883a 	mov	r4,zero
1000327c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10003280:	0140a404 	movi	r5,656
10003284:	0009883a 	mov	r4,zero
10003288:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
1000328c:	01400044 	movi	r5,1
10003290:	0009883a 	mov	r4,zero
10003294:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10003298:	014004c4 	movi	r5,19
1000329c:	0009883a 	mov	r4,zero
100032a0:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100032a4:	01414b04 	movi	r5,1324
100032a8:	0009883a 	mov	r4,zero
100032ac:	00004880 	call	10000488 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
100032b0:	01415b04 	movi	r5,1388
100032b4:	0009883a 	mov	r4,zero
100032b8:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
100032bc:	01400204 	movi	r5,8
100032c0:	0009883a 	mov	r4,zero
100032c4:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100032c8:	0140a404 	movi	r5,656
100032cc:	0009883a 	mov	r4,zero
100032d0:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100032d4:	01401044 	movi	r5,65
100032d8:	0009883a 	mov	r4,zero
100032dc:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100032e0:	014004c4 	movi	r5,19
100032e4:	0009883a 	mov	r4,zero
100032e8:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
100032ec:	01414e04 	movi	r5,1336
100032f0:	0009883a 	mov	r4,zero
100032f4:	00004880 	call	10000488 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
100032f8:	01415d04 	movi	r5,1396
100032fc:	0009883a 	mov	r4,zero
10003300:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10003304:	01400204 	movi	r5,8
10003308:	0009883a 	mov	r4,zero
1000330c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10003310:	0140a404 	movi	r5,656
10003314:	0009883a 	mov	r4,zero
10003318:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
1000331c:	01400044 	movi	r5,1
10003320:	0009883a 	mov	r4,zero
10003324:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10003328:	014004c4 	movi	r5,19
1000332c:	0009883a 	mov	r4,zero
10003330:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10003334:	01415104 	movi	r5,1348
10003338:	0009883a 	mov	r4,zero
1000333c:	00004880 	call	10000488 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10003340:	01415f04 	movi	r5,1404
10003344:	0009883a 	mov	r4,zero
10003348:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
1000334c:	01400084 	movi	r5,2
10003350:	0009883a 	mov	r4,zero
10003354:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10003358:	0140a404 	movi	r5,656
1000335c:	0009883a 	mov	r4,zero
10003360:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10003364:	01401044 	movi	r5,65
10003368:	0009883a 	mov	r4,zero
1000336c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003370:	014004c4 	movi	r5,19
10003374:	0009883a 	mov	r4,zero
10003378:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
1000337c:	01415404 	movi	r5,1360
10003380:	0009883a 	mov	r4,zero
10003384:	00004880 	call	10000488 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10003388:	000b883a 	mov	r5,zero
1000338c:	0009883a 	mov	r4,zero
10003390:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10003394:	000b883a 	mov	r5,zero
10003398:	0009883a 	mov	r4,zero
1000339c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
100033a0:	01408404 	movi	r5,528
100033a4:	0009883a 	mov	r4,zero
100033a8:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
100033ac:	01401044 	movi	r5,65
100033b0:	0009883a 	mov	r4,zero
100033b4:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100033b8:	014004c4 	movi	r5,19
100033bc:	0009883a 	mov	r4,zero
100033c0:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
100033c4:	000b883a 	mov	r5,zero
100033c8:	0009883a 	mov	r4,zero
100033cc:	00004880 	call	10000488 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100033d0:	01414004 	movi	r5,1280
100033d4:	01006c04 	movi	r4,432
100033d8:	0002a8c0 	call	10002a8c <UsbWrite>
}
100033dc:	0001883a 	nop
100033e0:	e037883a 	mov	sp,fp
100033e4:	dfc00117 	ldw	ra,4(sp)
100033e8:	df000017 	ldw	fp,0(sp)
100033ec:	dec00204 	addi	sp,sp,8
100033f0:	f800283a 	ret

100033f4 <UsbSetConfig>:

void UsbSetConfig()
{
100033f4:	defffe04 	addi	sp,sp,-8
100033f8:	dfc00115 	stw	ra,4(sp)
100033fc:	df000015 	stw	fp,0(sp)
10003400:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10003404:	01414004 	movi	r5,1280
10003408:	01000084 	movi	r4,2
1000340c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x050C);
10003410:	01414304 	movi	r5,1292
10003414:	0009883a 	mov	r4,zero
10003418:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000341c:	01400204 	movi	r5,8
10003420:	0009883a 	mov	r4,zero
10003424:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10003428:	0140b404 	movi	r5,720
1000342c:	0009883a 	mov	r4,zero
10003430:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0001);
10003434:	01400044 	movi	r5,1
10003438:	0009883a 	mov	r4,zero
1000343c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003440:	014004c4 	movi	r5,19
10003444:	0009883a 	mov	r4,zero
10003448:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000344c:	01414504 	movi	r5,1300
10003450:	0009883a 	mov	r4,zero
10003454:	00004880 	call	10000488 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10003458:	01424004 	movi	r5,2304
1000345c:	0009883a 	mov	r4,zero
10003460:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10003464:	01400044 	movi	r5,1
10003468:	0009883a 	mov	r4,zero
1000346c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003470:	000b883a 	mov	r5,zero
10003474:	0009883a 	mov	r4,zero
10003478:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000347c:	000b883a 	mov	r5,zero
10003480:	0009883a 	mov	r4,zero
10003484:	00004880 	call	10000488 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10003488:	000b883a 	mov	r5,zero
1000348c:	0009883a 	mov	r4,zero
10003490:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10003494:	000b883a 	mov	r5,zero
10003498:	0009883a 	mov	r4,zero
1000349c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
100034a0:	0140a404 	movi	r5,656
100034a4:	0009883a 	mov	r4,zero
100034a8:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
100034ac:	01401044 	movi	r5,65
100034b0:	0009883a 	mov	r4,zero
100034b4:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);
100034b8:	014004c4 	movi	r5,19
100034bc:	0009883a 	mov	r4,zero
100034c0:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);
100034c4:	000b883a 	mov	r5,zero
100034c8:	0009883a 	mov	r4,zero
100034cc:	00004880 	call	10000488 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100034d0:	01414004 	movi	r5,1280
100034d4:	01006c04 	movi	r4,432
100034d8:	0002a8c0 	call	10002a8c <UsbWrite>

}
100034dc:	0001883a 	nop
100034e0:	e037883a 	mov	sp,fp
100034e4:	dfc00117 	ldw	ra,4(sp)
100034e8:	df000017 	ldw	fp,0(sp)
100034ec:	dec00204 	addi	sp,sp,8
100034f0:	f800283a 	ret

100034f4 <UsbClassRequest>:

void UsbClassRequest()
{
100034f4:	defffe04 	addi	sp,sp,-8
100034f8:	dfc00115 	stw	ra,4(sp)
100034fc:	df000015 	stw	fp,0(sp)
10003500:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10003504:	01414004 	movi	r5,1280
10003508:	01000084 	movi	r4,2
1000350c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x050C);
10003510:	01414304 	movi	r5,1292
10003514:	0009883a 	mov	r4,zero
10003518:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000351c:	01400204 	movi	r5,8
10003520:	0009883a 	mov	r4,zero
10003524:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10003528:	0140b404 	movi	r5,720
1000352c:	0009883a 	mov	r4,zero
10003530:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0001);
10003534:	01400044 	movi	r5,1
10003538:	0009883a 	mov	r4,zero
1000353c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003540:	014004c4 	movi	r5,19
10003544:	0009883a 	mov	r4,zero
10003548:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000354c:	01414504 	movi	r5,1300
10003550:	0009883a 	mov	r4,zero
10003554:	00004880 	call	10000488 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10003558:	01428844 	movi	r5,2593
1000355c:	0009883a 	mov	r4,zero
10003560:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10003564:	000b883a 	mov	r5,zero
10003568:	0009883a 	mov	r4,zero
1000356c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003570:	000b883a 	mov	r5,zero
10003574:	0009883a 	mov	r4,zero
10003578:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000357c:	000b883a 	mov	r5,zero
10003580:	0009883a 	mov	r4,zero
10003584:	00004880 	call	10000488 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10003588:	000b883a 	mov	r5,zero
1000358c:	0009883a 	mov	r4,zero
10003590:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10003594:	000b883a 	mov	r5,zero
10003598:	0009883a 	mov	r4,zero
1000359c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
100035a0:	0140a404 	movi	r5,656
100035a4:	0009883a 	mov	r4,zero
100035a8:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
100035ac:	01401044 	movi	r5,65
100035b0:	0009883a 	mov	r4,zero
100035b4:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);
100035b8:	014004c4 	movi	r5,19
100035bc:	0009883a 	mov	r4,zero
100035c0:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);
100035c4:	000b883a 	mov	r5,zero
100035c8:	0009883a 	mov	r4,zero
100035cc:	00004880 	call	10000488 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100035d0:	01414004 	movi	r5,1280
100035d4:	01006c04 	movi	r4,432
100035d8:	0002a8c0 	call	10002a8c <UsbWrite>
}
100035dc:	0001883a 	nop
100035e0:	e037883a 	mov	sp,fp
100035e4:	dfc00117 	ldw	ra,4(sp)
100035e8:	df000017 	ldw	fp,0(sp)
100035ec:	dec00204 	addi	sp,sp,8
100035f0:	f800283a 	ret

100035f4 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
100035f4:	defffe04 	addi	sp,sp,-8
100035f8:	dfc00115 	stw	ra,4(sp)
100035fc:	df000015 	stw	fp,0(sp)
10003600:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10003604:	01414004 	movi	r5,1280
10003608:	01000084 	movi	r4,2
1000360c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x050C);
10003610:	01414304 	movi	r5,1292
10003614:	0009883a 	mov	r4,zero
10003618:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000361c:	01400204 	movi	r5,8
10003620:	0009883a 	mov	r4,zero
10003624:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10003628:	0140b404 	movi	r5,720
1000362c:	0009883a 	mov	r4,zero
10003630:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0001);
10003634:	01400044 	movi	r5,1
10003638:	0009883a 	mov	r4,zero
1000363c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003640:	014004c4 	movi	r5,19
10003644:	0009883a 	mov	r4,zero
10003648:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000364c:	01414504 	movi	r5,1300
10003650:	0009883a 	mov	r4,zero
10003654:	00004880 	call	10000488 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10003658:	0141a044 	movi	r5,1665
1000365c:	0009883a 	mov	r4,zero
10003660:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10003664:	01484004 	movi	r5,8448
10003668:	0009883a 	mov	r4,zero
1000366c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10003670:	000b883a 	mov	r5,zero
10003674:	0009883a 	mov	r4,zero
10003678:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
1000367c:	01401ec4 	movi	r5,123
10003680:	0009883a 	mov	r4,zero
10003684:	00004880 	call	10000488 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10003688:	01415104 	movi	r5,1348
1000368c:	0009883a 	mov	r4,zero
10003690:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10003694:	01400204 	movi	r5,8
10003698:	0009883a 	mov	r4,zero
1000369c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100036a0:	0140a404 	movi	r5,656
100036a4:	0009883a 	mov	r4,zero
100036a8:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100036ac:	01401044 	movi	r5,65
100036b0:	0009883a 	mov	r4,zero
100036b4:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100036b8:	014004c4 	movi	r5,19
100036bc:	0009883a 	mov	r4,zero
100036c0:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100036c4:	01414804 	movi	r5,1312
100036c8:	0009883a 	mov	r4,zero
100036cc:	00004880 	call	10000488 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
100036d0:	000b883a 	mov	r5,zero
100036d4:	0009883a 	mov	r4,zero
100036d8:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
100036dc:	000b883a 	mov	r5,zero
100036e0:	0009883a 	mov	r4,zero
100036e4:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
100036e8:	01408404 	movi	r5,528
100036ec:	0009883a 	mov	r4,zero
100036f0:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100036f4:	01401044 	movi	r5,65
100036f8:	0009883a 	mov	r4,zero
100036fc:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10003700:	014004c4 	movi	r5,19
10003704:	0009883a 	mov	r4,zero
10003708:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
1000370c:	000b883a 	mov	r5,zero
10003710:	0009883a 	mov	r4,zero
10003714:	00004880 	call	10000488 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003718:	01414004 	movi	r5,1280
1000371c:	01006c04 	movi	r4,432
10003720:	0002a8c0 	call	10002a8c <UsbWrite>

}
10003724:	0001883a 	nop
10003728:	e037883a 	mov	sp,fp
1000372c:	dfc00117 	ldw	ra,4(sp)
10003730:	df000017 	ldw	fp,0(sp)
10003734:	dec00204 	addi	sp,sp,8
10003738:	f800283a 	ret

1000373c <UsbGetReportDesc>:


void UsbGetReportDesc()
{
1000373c:	defffe04 	addi	sp,sp,-8
10003740:	dfc00115 	stw	ra,4(sp)
10003744:	df000015 	stw	fp,0(sp)
10003748:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000374c:	01414004 	movi	r5,1280
10003750:	01000084 	movi	r4,2
10003754:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x050C);
10003758:	01414304 	movi	r5,1292
1000375c:	0009883a 	mov	r4,zero
10003760:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10003764:	01400204 	movi	r5,8
10003768:	0009883a 	mov	r4,zero
1000376c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10003770:	0140b404 	movi	r5,720
10003774:	0009883a 	mov	r4,zero
10003778:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000377c:	01400044 	movi	r5,1
10003780:	0009883a 	mov	r4,zero
10003784:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003788:	014004c4 	movi	r5,19
1000378c:	0009883a 	mov	r4,zero
10003790:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0514);
10003794:	01414504 	movi	r5,1300
10003798:	0009883a 	mov	r4,zero
1000379c:	00004880 	call	10000488 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
100037a0:	0141a044 	movi	r5,1665
100037a4:	0009883a 	mov	r4,zero
100037a8:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
100037ac:	01488004 	movi	r5,8704
100037b0:	0009883a 	mov	r4,zero
100037b4:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100037b8:	000b883a 	mov	r5,zero
100037bc:	0009883a 	mov	r4,zero
100037c0:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
100037c4:	01401ec4 	movi	r5,123
100037c8:	0009883a 	mov	r4,zero
100037cc:	00004880 	call	10000488 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
100037d0:	01416004 	movi	r5,1408
100037d4:	0009883a 	mov	r4,zero
100037d8:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100037dc:	01400204 	movi	r5,8
100037e0:	0009883a 	mov	r4,zero
100037e4:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100037e8:	0140a404 	movi	r5,656
100037ec:	0009883a 	mov	r4,zero
100037f0:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100037f4:	01401044 	movi	r5,65
100037f8:	0009883a 	mov	r4,zero
100037fc:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003800:	014004c4 	movi	r5,19
10003804:	0009883a 	mov	r4,zero
10003808:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
1000380c:	01414804 	movi	r5,1312
10003810:	0009883a 	mov	r4,zero
10003814:	00004880 	call	10000488 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10003818:	01416204 	movi	r5,1416
1000381c:	0009883a 	mov	r4,zero
10003820:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10003824:	01400204 	movi	r5,8
10003828:	0009883a 	mov	r4,zero
1000382c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10003830:	0140a404 	movi	r5,656
10003834:	0009883a 	mov	r4,zero
10003838:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
1000383c:	01400044 	movi	r5,1
10003840:	0009883a 	mov	r4,zero
10003844:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10003848:	014004c4 	movi	r5,19
1000384c:	0009883a 	mov	r4,zero
10003850:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10003854:	01414b04 	movi	r5,1324
10003858:	0009883a 	mov	r4,zero
1000385c:	00004880 	call	10000488 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10003860:	01416404 	movi	r5,1424
10003864:	0009883a 	mov	r4,zero
10003868:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
1000386c:	01400204 	movi	r5,8
10003870:	0009883a 	mov	r4,zero
10003874:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10003878:	0140a404 	movi	r5,656
1000387c:	0009883a 	mov	r4,zero
10003880:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10003884:	01401044 	movi	r5,65
10003888:	0009883a 	mov	r4,zero
1000388c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10003890:	014004c4 	movi	r5,19
10003894:	0009883a 	mov	r4,zero
10003898:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
1000389c:	01414e04 	movi	r5,1336
100038a0:	0009883a 	mov	r4,zero
100038a4:	00004880 	call	10000488 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
100038a8:	01416604 	movi	r5,1432
100038ac:	0009883a 	mov	r4,zero
100038b0:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
100038b4:	01400204 	movi	r5,8
100038b8:	0009883a 	mov	r4,zero
100038bc:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
100038c0:	0140a404 	movi	r5,656
100038c4:	0009883a 	mov	r4,zero
100038c8:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
100038cc:	01400044 	movi	r5,1
100038d0:	0009883a 	mov	r4,zero
100038d4:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
100038d8:	014004c4 	movi	r5,19
100038dc:	0009883a 	mov	r4,zero
100038e0:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
100038e4:	01415104 	movi	r5,1348
100038e8:	0009883a 	mov	r4,zero
100038ec:	00004880 	call	10000488 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
100038f0:	01416804 	movi	r5,1440
100038f4:	0009883a 	mov	r4,zero
100038f8:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100038fc:	01400204 	movi	r5,8
10003900:	0009883a 	mov	r4,zero
10003904:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10003908:	0140a404 	movi	r5,656
1000390c:	0009883a 	mov	r4,zero
10003910:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10003914:	01401044 	movi	r5,65
10003918:	0009883a 	mov	r4,zero
1000391c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003920:	014004c4 	movi	r5,19
10003924:	0009883a 	mov	r4,zero
10003928:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
1000392c:	01415404 	movi	r5,1360
10003930:	0009883a 	mov	r4,zero
10003934:	00004880 	call	10000488 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10003938:	01416a04 	movi	r5,1448
1000393c:	0009883a 	mov	r4,zero
10003940:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10003944:	01400204 	movi	r5,8
10003948:	0009883a 	mov	r4,zero
1000394c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10003950:	0140a404 	movi	r5,656
10003954:	0009883a 	mov	r4,zero
10003958:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
1000395c:	01400044 	movi	r5,1
10003960:	0009883a 	mov	r4,zero
10003964:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10003968:	014004c4 	movi	r5,19
1000396c:	0009883a 	mov	r4,zero
10003970:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
10003974:	01415704 	movi	r5,1372
10003978:	0009883a 	mov	r4,zero
1000397c:	00004880 	call	10000488 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10003980:	01416c04 	movi	r5,1456
10003984:	0009883a 	mov	r4,zero
10003988:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
1000398c:	01400204 	movi	r5,8
10003990:	0009883a 	mov	r4,zero
10003994:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
10003998:	0140a404 	movi	r5,656
1000399c:	0009883a 	mov	r4,zero
100039a0:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
100039a4:	01401044 	movi	r5,65
100039a8:	0009883a 	mov	r4,zero
100039ac:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100039b0:	014004c4 	movi	r5,19
100039b4:	0009883a 	mov	r4,zero
100039b8:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
100039bc:	01415a04 	movi	r5,1384
100039c0:	0009883a 	mov	r4,zero
100039c4:	00004880 	call	10000488 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
100039c8:	01416e04 	movi	r5,1464
100039cc:	0009883a 	mov	r4,zero
100039d0:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
100039d4:	014000c4 	movi	r5,3
100039d8:	0009883a 	mov	r4,zero
100039dc:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
100039e0:	0140a404 	movi	r5,656
100039e4:	0009883a 	mov	r4,zero
100039e8:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
100039ec:	01400044 	movi	r5,1
100039f0:	0009883a 	mov	r4,zero
100039f4:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
100039f8:	014004c4 	movi	r5,19
100039fc:	0009883a 	mov	r4,zero
10003a00:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10003a04:	01415d04 	movi	r5,1396
10003a08:	0009883a 	mov	r4,zero
10003a0c:	00004880 	call	10000488 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10003a10:	000b883a 	mov	r5,zero
10003a14:	0009883a 	mov	r4,zero
10003a18:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10003a1c:	000b883a 	mov	r5,zero
10003a20:	0009883a 	mov	r4,zero
10003a24:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
10003a28:	01408404 	movi	r5,528
10003a2c:	0009883a 	mov	r4,zero
10003a30:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10003a34:	01401044 	movi	r5,65
10003a38:	0009883a 	mov	r4,zero
10003a3c:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003a40:	014004c4 	movi	r5,19
10003a44:	0009883a 	mov	r4,zero
10003a48:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10003a4c:	000b883a 	mov	r5,zero
10003a50:	0009883a 	mov	r4,zero
10003a54:	00004880 	call	10000488 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003a58:	01414004 	movi	r5,1280
10003a5c:	01006c04 	movi	r4,432
10003a60:	0002a8c0 	call	10002a8c <UsbWrite>

}
10003a64:	0001883a 	nop
10003a68:	e037883a 	mov	sp,fp
10003a6c:	dfc00117 	ldw	ra,4(sp)
10003a70:	df000017 	ldw	fp,0(sp)
10003a74:	dec00204 	addi	sp,sp,8
10003a78:	f800283a 	ret

10003a7c <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
10003a7c:	defffd04 	addi	sp,sp,-12
10003a80:	dfc00215 	stw	ra,8(sp)
10003a84:	df000115 	stw	fp,4(sp)
10003a88:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
10003a8c:	01005104 	movi	r4,324
10003a90:	0002ae40 	call	10002ae4 <UsbRead>
10003a94:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
10003a98:	000b883a 	mov	r5,zero
10003a9c:	01005104 	movi	r4,324
10003aa0:	0002a8c0 	call	10002a8c <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10003aa4:	00000d06 	br	10003adc <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
10003aa8:	e0bfff0b 	ldhu	r2,-4(fp)
10003aac:	10000526 	beq	r2,zero,10003ac4 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
10003ab0:	e0bfff0b 	ldhu	r2,-4(fp)
10003ab4:	100b883a 	mov	r5,r2
10003ab8:	01040074 	movhi	r4,4097
10003abc:	21109504 	addi	r4,r4,16980
10003ac0:	0004bec0 	call	10004bec <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10003ac4:	01005104 	movi	r4,324
10003ac8:	0002ae40 	call	10002ae4 <UsbRead>
10003acc:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10003ad0:	000b883a 	mov	r5,zero
10003ad4:	01005104 	movi	r4,324
10003ad8:	0002a8c0 	call	10002a8c <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10003adc:	e0bfff0b 	ldhu	r2,-4(fp)
10003ae0:	10840018 	cmpnei	r2,r2,4096
10003ae4:	103ff01e 	bne	r2,zero,10003aa8 <__alt_data_end+0xf8003aa8>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
10003ae8:	e0bfff0b 	ldhu	r2,-4(fp)
}
10003aec:	e037883a 	mov	sp,fp
10003af0:	dfc00117 	ldw	ra,4(sp)
10003af4:	df000017 	ldw	fp,0(sp)
10003af8:	dec00204 	addi	sp,sp,8
10003afc:	f800283a 	ret

10003b00 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10003b00:	defffd04 	addi	sp,sp,-12
10003b04:	dfc00215 	stw	ra,8(sp)
10003b08:	df000115 	stw	fp,4(sp)
10003b0c:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10003b10:	010000c4 	movi	r4,3
10003b14:	00005040 	call	10000504 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
10003b18:	01005104 	movi	r4,324
10003b1c:	0002ae40 	call	10002ae4 <UsbRead>
10003b20:	10bfffcc 	andi	r2,r2,65535
10003b24:	10840018 	cmpnei	r2,r2,4096
10003b28:	1000091e 	bne	r2,zero,10003b50 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10003b2c:	000b883a 	mov	r5,zero
10003b30:	01005104 	movi	r4,324
10003b34:	0002a8c0 	call	10002a8c <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003b38:	0001883a 	nop
10003b3c:	010000c4 	movi	r4,3
10003b40:	00005040 	call	10000504 <IO_read>
10003b44:	10bfffcc 	andi	r2,r2,65535
10003b48:	1080040c 	andi	r2,r2,16
10003b4c:	103ffb26 	beq	r2,zero,10003b3c <__alt_data_end+0xf8003b3c>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10003b50:	01414204 	movi	r5,1288
10003b54:	01000084 	movi	r4,2
10003b58:	00004880 	call	10000488 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10003b5c:	0009883a 	mov	r4,zero
10003b60:	00005040 	call	10000504 <IO_read>
10003b64:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
10003b68:	e0bfff0b 	ldhu	r2,-4(fp)
}
10003b6c:	e037883a 	mov	sp,fp
10003b70:	dfc00117 	ldw	ra,4(sp)
10003b74:	df000017 	ldw	fp,0(sp)
10003b78:	dec00204 	addi	sp,sp,8
10003b7c:	f800283a 	ret

10003b80 <UsbPrintMem>:


void UsbPrintMem()
{
10003b80:	defffc04 	addi	sp,sp,-16
10003b84:	dfc00315 	stw	ra,12(sp)
10003b88:	df000215 	stw	fp,8(sp)
10003b8c:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10003b90:	01414004 	movi	r5,1280
10003b94:	01000084 	movi	r4,2
10003b98:	00004880 	call	10000488 <IO_write>
	for (i = 0; i <= 200; i += 2)
10003b9c:	e03ffe15 	stw	zero,-8(fp)
10003ba0:	00000e06 	br	10003bdc <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
10003ba4:	0009883a 	mov	r4,zero
10003ba8:	00005040 	call	10000504 <IO_read>
10003bac:	10bfffcc 	andi	r2,r2,65535
10003bb0:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
10003bb4:	e0bffe17 	ldw	r2,-8(fp)
10003bb8:	10814004 	addi	r2,r2,1280
10003bbc:	e1bfff17 	ldw	r6,-4(fp)
10003bc0:	100b883a 	mov	r5,r2
10003bc4:	01040074 	movhi	r4,4097
10003bc8:	21109d04 	addi	r4,r4,17012
10003bcc:	0004bec0 	call	10004bec <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
10003bd0:	e0bffe17 	ldw	r2,-8(fp)
10003bd4:	10800084 	addi	r2,r2,2
10003bd8:	e0bffe15 	stw	r2,-8(fp)
10003bdc:	e0bffe17 	ldw	r2,-8(fp)
10003be0:	10803250 	cmplti	r2,r2,201
10003be4:	103fef1e 	bne	r2,zero,10003ba4 <__alt_data_end+0xf8003ba4>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
10003be8:	0001883a 	nop
10003bec:	e037883a 	mov	sp,fp
10003bf0:	dfc00117 	ldw	ra,4(sp)
10003bf4:	df000017 	ldw	fp,0(sp)
10003bf8:	dec00204 	addi	sp,sp,8
10003bfc:	f800283a 	ret

10003c00 <usb_initialize>:
static alt_u8  hot_plug_count;
static alt_u16 code;


void usb_initialize()
{
10003c00:	defffe04 	addi	sp,sp,-8
10003c04:	dfc00115 	stw	ra,4(sp)
10003c08:	df000015 	stw	fp,0(sp)
10003c0c:	d839883a 	mov	fp,sp
	IO_init();
10003c10:	00004000 	call	10000400 <IO_init>
	// alt_u8 toggle = 0;
	// alt_u8 data_size;
	// alt_u8 hot_plug_count;
	// alt_u16 code;

	printf("USB keyboard setup...\n\n");
10003c14:	01040074 	movhi	r4,4097
10003c18:	2110a204 	addi	r4,r4,17032
10003c1c:	0004ce80 	call	10004ce8 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
10003c20:	0002b280 	call	10002b28 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10003c24:	000b883a 	mov	r5,zero
10003c28:	01005104 	movi	r4,324
10003c2c:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10003c30:	017fffd4 	movui	r5,65535
10003c34:	01302414 	movui	r4,49296
10003c38:	0002a8c0 	call	10002a8c <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10003c3c:	01409604 	movi	r5,600
10003c40:	01006d04 	movi	r4,436
10003c44:	0002a8c0 	call	10002a8c <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10003c48:	00811004 	movi	r2,1088
10003c4c:	d080fb8d 	sth	r2,1006(gp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10003c50:	d080fb8b 	ldhu	r2,1006(gp)
10003c54:	10bfffcc 	andi	r2,r2,65535
10003c58:	100b883a 	mov	r5,r2
10003c5c:	01005084 	movi	r4,322
10003c60:	0002a8c0 	call	10002a8c <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
10003c64:	00808404 	movi	r2,528
10003c68:	d080fb0d 	sth	r2,1004(gp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
10003c6c:	d080fb0b 	ldhu	r2,1004(gp)
10003c70:	10bfffcc 	andi	r2,r2,65535
10003c74:	100b883a 	mov	r5,r2
10003c78:	01302314 	movui	r4,49292
10003c7c:	0002a8c0 	call	10002a8c <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
10003c80:	000b883a 	mov	r5,zero
10003c84:	01007104 	movi	r4,452
10003c88:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10003c8c:	000b883a 	mov	r5,zero
10003c90:	01007184 	movi	r4,454
10003c94:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10003c98:	000b883a 	mov	r5,zero
10003c9c:	01007204 	movi	r4,456
10003ca0:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10003ca4:	000b883a 	mov	r5,zero
10003ca8:	01007284 	movi	r4,458
10003cac:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10003cb0:	000b883a 	mov	r5,zero
10003cb4:	01007304 	movi	r4,460
10003cb8:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10003cbc:	000b883a 	mov	r5,zero
10003cc0:	01007384 	movi	r4,462
10003cc4:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10003cc8:	000b883a 	mov	r5,zero
10003ccc:	01007404 	movi	r4,464
10003cd0:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10003cd4:	000b883a 	mov	r5,zero
10003cd8:	01007484 	movi	r4,466
10003cdc:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10003ce0:	000b883a 	mov	r5,zero
10003ce4:	01007504 	movi	r4,468
10003ce8:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10003cec:	000b883a 	mov	r5,zero
10003cf0:	01007584 	movi	r4,470
10003cf4:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10003cf8:	000b883a 	mov	r5,zero
10003cfc:	01007604 	movi	r4,472
10003d00:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10003d04:	000b883a 	mov	r5,zero
10003d08:	01007684 	movi	r4,474
10003d0c:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10003d10:	000b883a 	mov	r5,zero
10003d14:	01007704 	movi	r4,476
10003d18:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10003d1c:	000b883a 	mov	r5,zero
10003d20:	01007784 	movi	r4,478
10003d24:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
10003d28:	01401c84 	movi	r5,114
10003d2c:	01007084 	movi	r4,450
10003d30:	0002a8c0 	call	10002a8c <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10003d34:	01738054 	movui	r5,52737
10003d38:	01000044 	movi	r4,1
10003d3c:	00004880 	call	10000488 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10003d40:	0001883a 	nop
10003d44:	010000c4 	movi	r4,3
10003d48:	00005040 	call	10000504 <IO_read>
10003d4c:	10bfffcc 	andi	r2,r2,65535
10003d50:	103ffc26 	beq	r2,zero,10003d44 <__alt_data_end+0xf8003d44>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10003d54:	00000806 	br	10003d78 <usb_initialize+0x178>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10003d58:	01000044 	movi	r4,1
10003d5c:	00005040 	call	10000504 <IO_read>
10003d60:	10bfffcc 	andi	r2,r2,65535
10003d64:	100b883a 	mov	r5,r2
10003d68:	01040074 	movhi	r4,4097
10003d6c:	2110a804 	addi	r4,r4,17056
10003d70:	0004bec0 	call	10004bec <printf>
		goto USB_HOT_PLUG;
10003d74:	003faa06 	br	10003c20 <__alt_data_end+0xf8003c20>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10003d78:	01000044 	movi	r4,1
10003d7c:	00005040 	call	10000504 <IO_read>
10003d80:	10bfffcc 	andi	r2,r2,65535
10003d84:	1083fb58 	cmpnei	r2,r2,4077
10003d88:	103ff31e 	bne	r2,zero,10003d58 <__alt_data_end+0xf8003d58>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
10003d8c:	01040074 	movhi	r4,4097
10003d90:	2110b104 	addi	r4,r4,17092
10003d94:	0004bec0 	call	10004bec <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
10003d98:	01401d04 	movi	r5,116
10003d9c:	01007084 	movi	r4,450
10003da0:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
10003da4:	01400f04 	movi	r5,60
10003da8:	01007104 	movi	r4,452
10003dac:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10003db0:	000b883a 	mov	r5,zero
10003db4:	01007184 	movi	r4,454
10003db8:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10003dbc:	000b883a 	mov	r5,zero
10003dc0:	01007204 	movi	r4,456
10003dc4:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10003dc8:	000b883a 	mov	r5,zero
10003dcc:	01007284 	movi	r4,458
10003dd0:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10003dd4:	000b883a 	mov	r5,zero
10003dd8:	01007304 	movi	r4,460
10003ddc:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10003de0:	000b883a 	mov	r5,zero
10003de4:	01007384 	movi	r4,462
10003de8:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10003dec:	000b883a 	mov	r5,zero
10003df0:	01007404 	movi	r4,464
10003df4:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10003df8:	000b883a 	mov	r5,zero
10003dfc:	01007484 	movi	r4,466
10003e00:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10003e04:	000b883a 	mov	r5,zero
10003e08:	01007504 	movi	r4,468
10003e0c:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10003e10:	000b883a 	mov	r5,zero
10003e14:	01007584 	movi	r4,470
10003e18:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10003e1c:	000b883a 	mov	r5,zero
10003e20:	01007604 	movi	r4,472
10003e24:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10003e28:	000b883a 	mov	r5,zero
10003e2c:	01007684 	movi	r4,474
10003e30:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10003e34:	000b883a 	mov	r5,zero
10003e38:	01007704 	movi	r4,476
10003e3c:	0002a8c0 	call	10002a8c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10003e40:	000b883a 	mov	r5,zero
10003e44:	01007784 	movi	r4,478
10003e48:	0002a8c0 	call	10002a8c <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10003e4c:	01738054 	movui	r5,52737
10003e50:	01000044 	movi	r4,1
10003e54:	00004880 	call	10000488 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10003e58:	0001883a 	nop
10003e5c:	01000044 	movi	r4,1
10003e60:	00005040 	call	10000504 <IO_read>
10003e64:	10bfffcc 	andi	r2,r2,65535
10003e68:	1083fb58 	cmpnei	r2,r2,4077
10003e6c:	10000826 	beq	r2,zero,10003e90 <usb_initialize+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10003e70:	01000044 	movi	r4,1
10003e74:	00005040 	call	10000504 <IO_read>
10003e78:	10bfffcc 	andi	r2,r2,65535
10003e7c:	100b883a 	mov	r5,r2
10003e80:	01040074 	movhi	r4,4097
10003e84:	2110a804 	addi	r4,r4,17056
10003e88:	0004bec0 	call	10004bec <printf>
		goto USB_HOT_PLUG;
10003e8c:	003f6406 	br	10003c20 <__alt_data_end+0xf8003c20>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
10003e90:	00b02284 	movi	r2,-16246
10003e94:	d080fc0d 	sth	r2,1008(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
10003e98:	008c0004 	movi	r2,12288
10003e9c:	d080fc8d 	sth	r2,1010(gp)
	fs_device = A_DP_STAT;
10003ea0:	00880004 	movi	r2,8192
10003ea4:	d080fd0d 	sth	r2,1012(gp)
	usb_ctl_val = UsbRead(ctl_reg);
10003ea8:	d080fc0b 	ldhu	r2,1008(gp)
10003eac:	10bfffcc 	andi	r2,r2,65535
10003eb0:	1009883a 	mov	r4,r2
10003eb4:	0002ae40 	call	10002ae4 <UsbRead>
10003eb8:	d080fb8d 	sth	r2,1006(gp)

	if (!(usb_ctl_val & no_device))
10003ebc:	d0c0fb8b 	ldhu	r3,1006(gp)
10003ec0:	d080fc8b 	ldhu	r2,1010(gp)
10003ec4:	1884703a 	and	r2,r3,r2
10003ec8:	10bfffcc 	andi	r2,r2,65535
10003ecc:	1000361e 	bne	r2,zero,10003fa8 <usb_initialize+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10003ed0:	d000fe05 	stb	zero,1016(gp)
10003ed4:	00000f06 	br	10003f14 <usb_initialize+0x314>
		{
			usleep(5*1000);
10003ed8:	0104e204 	movi	r4,5000
10003edc:	00121780 	call	10012178 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10003ee0:	d080fc0b 	ldhu	r2,1008(gp)
10003ee4:	10bfffcc 	andi	r2,r2,65535
10003ee8:	1009883a 	mov	r4,r2
10003eec:	0002ae40 	call	10002ae4 <UsbRead>
10003ef0:	d080fb8d 	sth	r2,1006(gp)
			if(usb_ctl_val & no_device) break;
10003ef4:	d0c0fb8b 	ldhu	r3,1006(gp)
10003ef8:	d080fc8b 	ldhu	r2,1010(gp)
10003efc:	1884703a 	and	r2,r3,r2
10003f00:	10bfffcc 	andi	r2,r2,65535
10003f04:	1000081e 	bne	r2,zero,10003f28 <usb_initialize+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10003f08:	d080fe03 	ldbu	r2,1016(gp)
10003f0c:	10800044 	addi	r2,r2,1
10003f10:	d080fe05 	stb	r2,1016(gp)
10003f14:	d080fe03 	ldbu	r2,1016(gp)
10003f18:	10803fcc 	andi	r2,r2,255
10003f1c:	10800170 	cmpltui	r2,r2,5
10003f20:	103fed1e 	bne	r2,zero,10003ed8 <__alt_data_end+0xf8003ed8>
10003f24:	00000106 	br	10003f2c <usb_initialize+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
10003f28:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
10003f2c:	d0c0fb8b 	ldhu	r3,1006(gp)
10003f30:	d080fc8b 	ldhu	r2,1010(gp)
10003f34:	1884703a 	and	r2,r3,r2
10003f38:	10bfffcc 	andi	r2,r2,65535
10003f3c:	1000261e 	bne	r2,zero,10003fd8 <usb_initialize+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
10003f40:	01040074 	movhi	r4,4097
10003f44:	2110b504 	addi	r4,r4,17108
10003f48:	0004ce80 	call	10004ce8 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10003f4c:	01040074 	movhi	r4,4097
10003f50:	2110bf04 	addi	r4,r4,17148
10003f54:	0004ce80 	call	10004ce8 <puts>
			while (!(usb_ctl_val & no_device))
10003f58:	00000d06 	br	10003f90 <usb_initialize+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10003f5c:	d080fc0b 	ldhu	r2,1008(gp)
10003f60:	10bfffcc 	andi	r2,r2,65535
10003f64:	1009883a 	mov	r4,r2
10003f68:	0002ae40 	call	10002ae4 <UsbRead>
10003f6c:	d080fb8d 	sth	r2,1006(gp)
				if(usb_ctl_val & no_device)
10003f70:	d0c0fb8b 	ldhu	r3,1006(gp)
10003f74:	d080fc8b 	ldhu	r2,1010(gp)
10003f78:	1884703a 	and	r2,r3,r2
10003f7c:	10bfffcc 	andi	r2,r2,65535
10003f80:	10000126 	beq	r2,zero,10003f88 <usb_initialize+0x388>
					goto USB_HOT_PLUG;
10003f84:	003f2606 	br	10003c20 <__alt_data_end+0xf8003c20>

				usleep(2000);
10003f88:	0101f404 	movi	r4,2000
10003f8c:	00121780 	call	10012178 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
10003f90:	d0c0fb8b 	ldhu	r3,1006(gp)
10003f94:	d080fc8b 	ldhu	r2,1010(gp)
10003f98:	1884703a 	and	r2,r3,r2
10003f9c:	10bfffcc 	andi	r2,r2,65535
10003fa0:	103fee26 	beq	r2,zero,10003f5c <__alt_data_end+0xf8003f5c>
10003fa4:	00000c06 	br	10003fd8 <usb_initialize+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
10003fa8:	d0c0fb8b 	ldhu	r3,1006(gp)
10003fac:	d080fd0b 	ldhu	r2,1012(gp)
10003fb0:	1884703a 	and	r2,r3,r2
10003fb4:	10bfffcc 	andi	r2,r2,65535
10003fb8:	10000426 	beq	r2,zero,10003fcc <usb_initialize+0x3cc>
		{
			printf("[INFO]: full speed device\n");
10003fbc:	01040074 	movhi	r4,4097
10003fc0:	2110cb04 	addi	r4,r4,17196
10003fc4:	0004ce80 	call	10004ce8 <puts>
10003fc8:	00000306 	br	10003fd8 <usb_initialize+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
10003fcc:	01040074 	movhi	r4,4097
10003fd0:	2110d204 	addi	r4,r4,17224
10003fd4:	0004ce80 	call	10004ce8 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
10003fd8:	0002bdc0 	call	10002bdc <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003fdc:	00000306 	br	10003fec <usb_initialize+0x3ec>
	{
		UsbSetAddress();
10003fe0:	0002bdc0 	call	10002bdc <UsbSetAddress>
		usleep(10*1000);
10003fe4:	0109c404 	movi	r4,10000
10003fe8:	00121780 	call	10012178 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003fec:	010000c4 	movi	r4,3
10003ff0:	00005040 	call	10000504 <IO_read>
10003ff4:	10bfffcc 	andi	r2,r2,65535
10003ff8:	1080040c 	andi	r2,r2,16
10003ffc:	103ff826 	beq	r2,zero,10003fe0 <__alt_data_end+0xf8003fe0>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10004000:	0003a7c0 	call	10003a7c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
10004004:	01414184 	movi	r5,1286
10004008:	01000084 	movi	r4,2
1000400c:	00004880 	call	10000488 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
10004010:	0009883a 	mov	r4,zero
10004014:	00005040 	call	10000504 <IO_read>
10004018:	10bfffcc 	andi	r2,r2,65535
1000401c:	100b883a 	mov	r5,r2
10004020:	01040074 	movhi	r4,4097
10004024:	2110d904 	addi	r4,r4,17252
10004028:	0004bec0 	call	10004bec <printf>

	IO_write(HPI_ADDR,0x0508); // n
1000402c:	01414204 	movi	r5,1288
10004030:	01000084 	movi	r4,2
10004034:	00004880 	call	10000488 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10004038:	0009883a 	mov	r4,zero
1000403c:	00005040 	call	10000504 <IO_read>
10004040:	d080fb8d 	sth	r2,1006(gp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
10004044:	d080fb8b 	ldhu	r2,1006(gp)
10004048:	10bfffcc 	andi	r2,r2,65535
1000404c:	100b883a 	mov	r5,r2
10004050:	01040074 	movhi	r4,4097
10004054:	2110e404 	addi	r4,r4,17296
10004058:	0004bec0 	call	10004bec <printf>
	while (usb_ctl_val != 0x03) // retries occurred
1000405c:	0001883a 	nop
10004060:	d080fb8b 	ldhu	r2,1006(gp)
10004064:	10bfffcc 	andi	r2,r2,65535
10004068:	108000d8 	cmpnei	r2,r2,3
1000406c:	10000326 	beq	r2,zero,1000407c <usb_initialize+0x47c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10004070:	0003b000 	call	10003b00 <UsbGetRetryCnt>
10004074:	d080fb8d 	sth	r2,1006(gp)

		goto USB_HOT_PLUG;
10004078:	003ee906 	br	10003c20 <__alt_data_end+0xf8003c20>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
1000407c:	01040074 	movhi	r4,4097
10004080:	2110f004 	addi	r4,r4,17344
10004084:	0004ce80 	call	10004ce8 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
10004088:	0002cdc0 	call	10002cdc <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000408c:	00000306 	br	1000409c <usb_initialize+0x49c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
10004090:	0002cdc0 	call	10002cdc <UsbGetDeviceDesc1>
		usleep(10*1000);
10004094:	0109c404 	movi	r4,10000
10004098:	00121780 	call	10012178 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000409c:	010000c4 	movi	r4,3
100040a0:	00005040 	call	10000504 <IO_read>
100040a4:	10bfffcc 	andi	r2,r2,65535
100040a8:	1080040c 	andi	r2,r2,16
100040ac:	103ff826 	beq	r2,zero,10004090 <__alt_data_end+0xf8004090>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100040b0:	0003a7c0 	call	10003a7c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100040b4:	01414184 	movi	r5,1286
100040b8:	01000084 	movi	r4,2
100040bc:	00004880 	call	10000488 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
100040c0:	0009883a 	mov	r4,zero
100040c4:	00005040 	call	10000504 <IO_read>
100040c8:	10bfffcc 	andi	r2,r2,65535
100040cc:	100b883a 	mov	r5,r2
100040d0:	01040074 	movhi	r4,4097
100040d4:	2110ff04 	addi	r4,r4,17404
100040d8:	0004bec0 	call	10004bec <printf>

	IO_write(HPI_ADDR,0x0508);
100040dc:	01414204 	movi	r5,1288
100040e0:	01000084 	movi	r4,2
100040e4:	00004880 	call	10000488 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100040e8:	0009883a 	mov	r4,zero
100040ec:	00005040 	call	10000504 <IO_read>
100040f0:	d080fb8d 	sth	r2,1006(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100040f4:	d080fb8b 	ldhu	r2,1006(gp)
100040f8:	10bfffcc 	andi	r2,r2,65535
100040fc:	100b883a 	mov	r5,r2
10004100:	01040074 	movhi	r4,4097
10004104:	21110a04 	addi	r4,r4,17448
10004108:	0004bec0 	call	10004bec <printf>
	while (usb_ctl_val != 0x03)
1000410c:	00000206 	br	10004118 <usb_initialize+0x518>
	{
		usb_ctl_val = UsbGetRetryCnt();
10004110:	0003b000 	call	10003b00 <UsbGetRetryCnt>
10004114:	d080fb8d 	sth	r2,1006(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10004118:	d080fb8b 	ldhu	r2,1006(gp)
1000411c:	10bfffcc 	andi	r2,r2,65535
10004120:	108000d8 	cmpnei	r2,r2,3
10004124:	103ffa1e 	bne	r2,zero,10004110 <__alt_data_end+0xf8004110>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
10004128:	01040074 	movhi	r4,4097
1000412c:	21111604 	addi	r4,r4,17496
10004130:	0004ce80 	call	10004ce8 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
10004134:	0002e240 	call	10002e24 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004138:	00000306 	br	10004148 <usb_initialize+0x548>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
1000413c:	0002e240 	call	10002e24 <UsbGetDeviceDesc2>
		usleep(10*1000);
10004140:	0109c404 	movi	r4,10000
10004144:	00121780 	call	10012178 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004148:	010000c4 	movi	r4,3
1000414c:	00005040 	call	10000504 <IO_read>
10004150:	10bfffcc 	andi	r2,r2,65535
10004154:	1080040c 	andi	r2,r2,16
10004158:	103ff826 	beq	r2,zero,1000413c <__alt_data_end+0xf800413c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000415c:	0003a7c0 	call	10003a7c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10004160:	01414184 	movi	r5,1286
10004164:	01000084 	movi	r4,2
10004168:	00004880 	call	10000488 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000416c:	0009883a 	mov	r4,zero
10004170:	00005040 	call	10000504 <IO_read>
10004174:	10bfffcc 	andi	r2,r2,65535
10004178:	100b883a 	mov	r5,r2
1000417c:	01040074 	movhi	r4,4097
10004180:	2110ff04 	addi	r4,r4,17404
10004184:	0004bec0 	call	10004bec <printf>

	IO_write(HPI_ADDR,0x0508);
10004188:	01414204 	movi	r5,1288
1000418c:	01000084 	movi	r4,2
10004190:	00004880 	call	10000488 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10004194:	0009883a 	mov	r4,zero
10004198:	00005040 	call	10000504 <IO_read>
1000419c:	d080fb8d 	sth	r2,1006(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100041a0:	d080fb8b 	ldhu	r2,1006(gp)
100041a4:	10bfffcc 	andi	r2,r2,65535
100041a8:	100b883a 	mov	r5,r2
100041ac:	01040074 	movhi	r4,4097
100041b0:	21110a04 	addi	r4,r4,17448
100041b4:	0004bec0 	call	10004bec <printf>
	while (usb_ctl_val != 0x03)
100041b8:	00000206 	br	100041c4 <usb_initialize+0x5c4>
	{
		usb_ctl_val = UsbGetRetryCnt();
100041bc:	0003b000 	call	10003b00 <UsbGetRetryCnt>
100041c0:	d080fb8d 	sth	r2,1006(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100041c4:	d080fb8b 	ldhu	r2,1006(gp)
100041c8:	10bfffcc 	andi	r2,r2,65535
100041cc:	108000d8 	cmpnei	r2,r2,3
100041d0:	103ffa1e 	bne	r2,zero,100041bc <__alt_data_end+0xf80041bc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
100041d4:	01040074 	movhi	r4,4097
100041d8:	21112a04 	addi	r4,r4,17576
100041dc:	0004ce80 	call	10004ce8 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
100041e0:	0002ffc0 	call	10002ffc <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100041e4:	00000306 	br	100041f4 <usb_initialize+0x5f4>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
100041e8:	0002ffc0 	call	10002ffc <UsbGetConfigDesc1>
		usleep(10*1000);
100041ec:	0109c404 	movi	r4,10000
100041f0:	00121780 	call	10012178 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100041f4:	010000c4 	movi	r4,3
100041f8:	00005040 	call	10000504 <IO_read>
100041fc:	10bfffcc 	andi	r2,r2,65535
10004200:	1080040c 	andi	r2,r2,16
10004204:	103ff826 	beq	r2,zero,100041e8 <__alt_data_end+0xf80041e8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10004208:	0003a7c0 	call	10003a7c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
1000420c:	01414184 	movi	r5,1286
10004210:	01000084 	movi	r4,2
10004214:	00004880 	call	10000488 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
10004218:	0009883a 	mov	r4,zero
1000421c:	00005040 	call	10000504 <IO_read>
10004220:	10bfffcc 	andi	r2,r2,65535
10004224:	100b883a 	mov	r5,r2
10004228:	01040074 	movhi	r4,4097
1000422c:	21113c04 	addi	r4,r4,17648
10004230:	0004bec0 	call	10004bec <printf>

	IO_write(HPI_ADDR,0x0508);
10004234:	01414204 	movi	r5,1288
10004238:	01000084 	movi	r4,2
1000423c:	00004880 	call	10000488 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10004240:	0009883a 	mov	r4,zero
10004244:	00005040 	call	10000504 <IO_read>
10004248:	d080fb8d 	sth	r2,1006(gp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
1000424c:	d080fb8b 	ldhu	r2,1006(gp)
10004250:	10bfffcc 	andi	r2,r2,65535
10004254:	100b883a 	mov	r5,r2
10004258:	01040074 	movhi	r4,4097
1000425c:	21114704 	addi	r4,r4,17692
10004260:	0004bec0 	call	10004bec <printf>
	while (usb_ctl_val != 0x03)
10004264:	00000206 	br	10004270 <usb_initialize+0x670>
	{
		usb_ctl_val = UsbGetRetryCnt();
10004268:	0003b000 	call	10003b00 <UsbGetRetryCnt>
1000426c:	d080fb8d 	sth	r2,1006(gp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10004270:	d080fb8b 	ldhu	r2,1006(gp)
10004274:	10bfffcc 	andi	r2,r2,65535
10004278:	108000d8 	cmpnei	r2,r2,3
1000427c:	103ffa1e 	bne	r2,zero,10004268 <__alt_data_end+0xf8004268>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10004280:	01040074 	movhi	r4,4097
10004284:	21115304 	addi	r4,r4,17740
10004288:	0004ce80 	call	10004ce8 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
1000428c:	000318c0 	call	1000318c <UsbGetConfigDesc2>

	usleep(100*1000);
10004290:	010000b4 	movhi	r4,2
10004294:	2121a804 	addi	r4,r4,-31072
10004298:	00121780 	call	10012178 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000429c:	00000306 	br	100042ac <usb_initialize+0x6ac>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
100042a0:	000318c0 	call	1000318c <UsbGetConfigDesc2>
		usleep(10*1000);
100042a4:	0109c404 	movi	r4,10000
100042a8:	00121780 	call	10012178 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100042ac:	010000c4 	movi	r4,3
100042b0:	00005040 	call	10000504 <IO_read>
100042b4:	10bfffcc 	andi	r2,r2,65535
100042b8:	1080040c 	andi	r2,r2,16
100042bc:	103ff826 	beq	r2,zero,100042a0 <__alt_data_end+0xf80042a0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100042c0:	0003a7c0 	call	10003a7c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100042c4:	01414184 	movi	r5,1286
100042c8:	01000084 	movi	r4,2
100042cc:	00004880 	call	10000488 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
100042d0:	0009883a 	mov	r4,zero
100042d4:	00005040 	call	10000504 <IO_read>
100042d8:	10bfffcc 	andi	r2,r2,65535
100042dc:	100b883a 	mov	r5,r2
100042e0:	01040074 	movhi	r4,4097
100042e4:	21116604 	addi	r4,r4,17816
100042e8:	0004bec0 	call	10004bec <printf>

	IO_write(HPI_ADDR,0x0508);
100042ec:	01414204 	movi	r5,1288
100042f0:	01000084 	movi	r4,2
100042f4:	00004880 	call	10000488 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100042f8:	0009883a 	mov	r4,zero
100042fc:	00005040 	call	10000504 <IO_read>
10004300:	d080fb8d 	sth	r2,1006(gp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10004304:	d080fb8b 	ldhu	r2,1006(gp)
10004308:	10bfffcc 	andi	r2,r2,65535
1000430c:	100b883a 	mov	r5,r2
10004310:	01040074 	movhi	r4,4097
10004314:	21117104 	addi	r4,r4,17860
10004318:	0004bec0 	call	10004bec <printf>
	while (usb_ctl_val != 0x03)
1000431c:	00000206 	br	10004328 <usb_initialize+0x728>
	{
		usb_ctl_val = UsbGetRetryCnt();
10004320:	0003b000 	call	10003b00 <UsbGetRetryCnt>
10004324:	d080fb8d 	sth	r2,1006(gp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10004328:	d080fb8b 	ldhu	r2,1006(gp)
1000432c:	10bfffcc 	andi	r2,r2,65535
10004330:	108000d8 	cmpnei	r2,r2,3
10004334:	103ffa1e 	bne	r2,zero,10004320 <__alt_data_end+0xf8004320>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10004338:	01040074 	movhi	r4,4097
1000433c:	21117d04 	addi	r4,r4,17908
10004340:	0004ce80 	call	10004ce8 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10004344:	01415b04 	movi	r5,1388
10004348:	01000084 	movi	r4,2
1000434c:	00004880 	call	10000488 <IO_write>
	code = IO_read(HPI_DATA);
10004350:	0009883a 	mov	r4,zero
10004354:	00005040 	call	10000504 <IO_read>
10004358:	d080fe8d 	sth	r2,1018(gp)
	code = code & 0x003;
1000435c:	d080fe8b 	ldhu	r2,1018(gp)
10004360:	108000cc 	andi	r2,r2,3
10004364:	d080fe8d 	sth	r2,1018(gp)
	printf("\ncode = %x\n", code);
10004368:	d080fe8b 	ldhu	r2,1018(gp)
1000436c:	10bfffcc 	andi	r2,r2,65535
10004370:	100b883a 	mov	r5,r2
10004374:	01040074 	movhi	r4,4097
10004378:	21119004 	addi	r4,r4,17984
1000437c:	0004bec0 	call	10004bec <printf>

	if (code == 0x01)
10004380:	d080fe8b 	ldhu	r2,1018(gp)
10004384:	10bfffcc 	andi	r2,r2,65535
10004388:	10800058 	cmpnei	r2,r2,1
1000438c:	1000041e 	bne	r2,zero,100043a0 <usb_initialize+0x7a0>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10004390:	01040074 	movhi	r4,4097
10004394:	21119304 	addi	r4,r4,17996
10004398:	0004ce80 	call	10004ce8 <puts>
1000439c:	00000306 	br	100043ac <usb_initialize+0x7ac>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
100043a0:	01040074 	movhi	r4,4097
100043a4:	2111a204 	addi	r4,r4,18056
100043a8:	0004ce80 	call	10004ce8 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
100043ac:	01415d84 	movi	r5,1398
100043b0:	01000084 	movi	r4,2
100043b4:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x073F);
100043b8:	0141cfc4 	movi	r5,1855
100043bc:	0009883a 	mov	r4,zero
100043c0:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x8105);
100043c4:	01604154 	movui	r5,33029
100043c8:	0009883a 	mov	r4,zero
100043cc:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0003);
100043d0:	014000c4 	movi	r5,3
100043d4:	0009883a 	mov	r4,zero
100043d8:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0008);
100043dc:	01400204 	movi	r5,8
100043e0:	0009883a 	mov	r4,zero
100043e4:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
100043e8:	016b0294 	movui	r5,44042
100043ec:	0009883a 	mov	r4,zero
100043f0:	00004880 	call	10000488 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
100043f4:	01415d84 	movi	r5,1398
100043f8:	01006c04 	movi	r4,432
100043fc:	0002a8c0 	call	10002a8c <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10004400:	01415f04 	movi	r5,1404
10004404:	01000084 	movi	r4,2
10004408:	00004880 	call	10000488 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
1000440c:	0009883a 	mov	r4,zero
10004410:	00005040 	call	10000504 <IO_read>
10004414:	d080fdc5 	stb	r2,1015(gp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10004418:	d080fdc3 	ldbu	r2,1015(gp)
1000441c:	10803fcc 	andi	r2,r2,255
10004420:	100b883a 	mov	r5,r2
10004424:	01040074 	movhi	r4,4097
10004428:	2111ab04 	addi	r4,r4,18092
1000442c:	0004bec0 	call	10004bec <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10004430:	00033f40 	call	100033f4 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004434:	00000306 	br	10004444 <usb_initialize+0x844>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10004438:	00033f40 	call	100033f4 <UsbSetConfig>
		usleep(10*1000);
1000443c:	0109c404 	movi	r4,10000
10004440:	00121780 	call	10012178 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004444:	010000c4 	movi	r4,3
10004448:	00005040 	call	10000504 <IO_read>
1000444c:	10bfffcc 	andi	r2,r2,65535
10004450:	1080040c 	andi	r2,r2,16
10004454:	103ff826 	beq	r2,zero,10004438 <__alt_data_end+0xf8004438>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10004458:	0003a7c0 	call	10003a7c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
1000445c:	01414184 	movi	r5,1286
10004460:	01000084 	movi	r4,2
10004464:	00004880 	call	10000488 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10004468:	0009883a 	mov	r4,zero
1000446c:	00005040 	call	10000504 <IO_read>
10004470:	10bfffcc 	andi	r2,r2,65535
10004474:	100b883a 	mov	r5,r2
10004478:	01040074 	movhi	r4,4097
1000447c:	2111b504 	addi	r4,r4,18132
10004480:	0004bec0 	call	10004bec <printf>

	IO_write(HPI_ADDR,0x0508);
10004484:	01414204 	movi	r5,1288
10004488:	01000084 	movi	r4,2
1000448c:	00004880 	call	10000488 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10004490:	0009883a 	mov	r4,zero
10004494:	00005040 	call	10000504 <IO_read>
10004498:	d080fb8d 	sth	r2,1006(gp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
1000449c:	d080fb8b 	ldhu	r2,1006(gp)
100044a0:	10bfffcc 	andi	r2,r2,65535
100044a4:	100b883a 	mov	r5,r2
100044a8:	01040074 	movhi	r4,4097
100044ac:	2111c004 	addi	r4,r4,18176
100044b0:	0004bec0 	call	10004bec <printf>
	while (usb_ctl_val != 0x03)
100044b4:	00000206 	br	100044c0 <usb_initialize+0x8c0>
	{
		usb_ctl_val = UsbGetRetryCnt();
100044b8:	0003b000 	call	10003b00 <UsbGetRetryCnt>
100044bc:	d080fb8d 	sth	r2,1006(gp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100044c0:	d080fb8b 	ldhu	r2,1006(gp)
100044c4:	10bfffcc 	andi	r2,r2,65535
100044c8:	108000d8 	cmpnei	r2,r2,3
100044cc:	103ffa1e 	bne	r2,zero,100044b8 <__alt_data_end+0xf80044b8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
100044d0:	01040074 	movhi	r4,4097
100044d4:	2111cc04 	addi	r4,r4,18224
100044d8:	0004ce80 	call	10004ce8 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
100044dc:	00034f40 	call	100034f4 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100044e0:	00000306 	br	100044f0 <usb_initialize+0x8f0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
100044e4:	00034f40 	call	100034f4 <UsbClassRequest>
		usleep(10*1000);
100044e8:	0109c404 	movi	r4,10000
100044ec:	00121780 	call	10012178 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100044f0:	010000c4 	movi	r4,3
100044f4:	00005040 	call	10000504 <IO_read>
100044f8:	10bfffcc 	andi	r2,r2,65535
100044fc:	1080040c 	andi	r2,r2,16
10004500:	103ff826 	beq	r2,zero,100044e4 <__alt_data_end+0xf80044e4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10004504:	0003a7c0 	call	10003a7c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10004508:	01414184 	movi	r5,1286
1000450c:	01000084 	movi	r4,2
10004510:	00004880 	call	10000488 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10004514:	0009883a 	mov	r4,zero
10004518:	00005040 	call	10000504 <IO_read>
1000451c:	10bfffcc 	andi	r2,r2,65535
10004520:	100b883a 	mov	r5,r2
10004524:	01040074 	movhi	r4,4097
10004528:	2111de04 	addi	r4,r4,18296
1000452c:	0004bec0 	call	10004bec <printf>

	IO_write(HPI_ADDR,0x0508);
10004530:	01414204 	movi	r5,1288
10004534:	01000084 	movi	r4,2
10004538:	00004880 	call	10000488 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
1000453c:	0009883a 	mov	r4,zero
10004540:	00005040 	call	10000504 <IO_read>
10004544:	d080fb8d 	sth	r2,1006(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10004548:	d080fb8b 	ldhu	r2,1006(gp)
1000454c:	10bfffcc 	andi	r2,r2,65535
10004550:	100b883a 	mov	r5,r2
10004554:	01040074 	movhi	r4,4097
10004558:	2111e904 	addi	r4,r4,18340
1000455c:	0004bec0 	call	10004bec <printf>
	while (usb_ctl_val != 0x03)
10004560:	00000206 	br	1000456c <usb_initialize+0x96c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10004564:	0003b000 	call	10003b00 <UsbGetRetryCnt>
10004568:	d080fb8d 	sth	r2,1006(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
1000456c:	d080fb8b 	ldhu	r2,1006(gp)
10004570:	10bfffcc 	andi	r2,r2,65535
10004574:	108000d8 	cmpnei	r2,r2,3
10004578:	103ffa1e 	bne	r2,zero,10004564 <__alt_data_end+0xf8004564>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
1000457c:	01040074 	movhi	r4,4097
10004580:	2111f504 	addi	r4,r4,18388
10004584:	0004ce80 	call	10004ce8 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10004588:	00035f40 	call	100035f4 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000458c:	00000306 	br	1000459c <usb_initialize+0x99c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10004590:	00035f40 	call	100035f4 <UsbGetHidDesc>
		usleep(10*1000);
10004594:	0109c404 	movi	r4,10000
10004598:	00121780 	call	10012178 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000459c:	010000c4 	movi	r4,3
100045a0:	00005040 	call	10000504 <IO_read>
100045a4:	10bfffcc 	andi	r2,r2,65535
100045a8:	1080040c 	andi	r2,r2,16
100045ac:	103ff826 	beq	r2,zero,10004590 <__alt_data_end+0xf8004590>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100045b0:	0003a7c0 	call	10003a7c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100045b4:	01414184 	movi	r5,1286
100045b8:	01000084 	movi	r4,2
100045bc:	00004880 	call	10000488 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
100045c0:	0009883a 	mov	r4,zero
100045c4:	00005040 	call	10000504 <IO_read>
100045c8:	10bfffcc 	andi	r2,r2,65535
100045cc:	100b883a 	mov	r5,r2
100045d0:	01040074 	movhi	r4,4097
100045d4:	2111de04 	addi	r4,r4,18296
100045d8:	0004bec0 	call	10004bec <printf>

	IO_write(HPI_ADDR,0x0508);
100045dc:	01414204 	movi	r5,1288
100045e0:	01000084 	movi	r4,2
100045e4:	00004880 	call	10000488 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100045e8:	0009883a 	mov	r4,zero
100045ec:	00005040 	call	10000504 <IO_read>
100045f0:	d080fb8d 	sth	r2,1006(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
100045f4:	d080fb8b 	ldhu	r2,1006(gp)
100045f8:	10bfffcc 	andi	r2,r2,65535
100045fc:	100b883a 	mov	r5,r2
10004600:	01040074 	movhi	r4,4097
10004604:	2111e904 	addi	r4,r4,18340
10004608:	0004bec0 	call	10004bec <printf>
	while (usb_ctl_val != 0x03)
1000460c:	00000206 	br	10004618 <usb_initialize+0xa18>
	{
		usb_ctl_val = UsbGetRetryCnt();
10004610:	0003b000 	call	10003b00 <UsbGetRetryCnt>
10004614:	d080fb8d 	sth	r2,1006(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10004618:	d080fb8b 	ldhu	r2,1006(gp)
1000461c:	10bfffcc 	andi	r2,r2,65535
10004620:	108000d8 	cmpnei	r2,r2,3
10004624:	103ffa1e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10004628:	01040074 	movhi	r4,4097
1000462c:	21120704 	addi	r4,r4,18460
10004630:	0004ce80 	call	10004ce8 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10004634:	000373c0 	call	1000373c <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004638:	00000306 	br	10004648 <usb_initialize+0xa48>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
1000463c:	000373c0 	call	1000373c <UsbGetReportDesc>
		usleep(10*1000);
10004640:	0109c404 	movi	r4,10000
10004644:	00121780 	call	10012178 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004648:	010000c4 	movi	r4,3
1000464c:	00005040 	call	10000504 <IO_read>
10004650:	10bfffcc 	andi	r2,r2,65535
10004654:	1080040c 	andi	r2,r2,16
10004658:	103ff826 	beq	r2,zero,1000463c <__alt_data_end+0xf800463c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000465c:	0003a7c0 	call	10003a7c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10004660:	01414184 	movi	r5,1286
10004664:	01000084 	movi	r4,2
10004668:	00004880 	call	10000488 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000466c:	0009883a 	mov	r4,zero
10004670:	00005040 	call	10000504 <IO_read>
10004674:	10bfffcc 	andi	r2,r2,65535
10004678:	100b883a 	mov	r5,r2
1000467c:	01040074 	movhi	r4,4097
10004680:	21121b04 	addi	r4,r4,18540
10004684:	0004bec0 	call	10004bec <printf>

	IO_write(HPI_ADDR,0x0508);
10004688:	01414204 	movi	r5,1288
1000468c:	01000084 	movi	r4,2
10004690:	00004880 	call	10000488 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10004694:	0009883a 	mov	r4,zero
10004698:	00005040 	call	10000504 <IO_read>
1000469c:	d080fb8d 	sth	r2,1006(gp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
100046a0:	d080fb8b 	ldhu	r2,1006(gp)
100046a4:	10bfffcc 	andi	r2,r2,65535
100046a8:	100b883a 	mov	r5,r2
100046ac:	01040074 	movhi	r4,4097
100046b0:	21122704 	addi	r4,r4,18588
100046b4:	0004bec0 	call	10004bec <printf>
	while (usb_ctl_val != 0x03)
100046b8:	00000206 	br	100046c4 <usb_initialize+0xac4>
	{
		usb_ctl_val = UsbGetRetryCnt();
100046bc:	0003b000 	call	10003b00 <UsbGetRetryCnt>
100046c0:	d080fb8d 	sth	r2,1006(gp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100046c4:	d080fb8b 	ldhu	r2,1006(gp)
100046c8:	10bfffcc 	andi	r2,r2,65535
100046cc:	108000d8 	cmpnei	r2,r2,3
100046d0:	103ffa1e 	bne	r2,zero,100046bc <__alt_data_end+0xf80046bc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
100046d4:	01040074 	movhi	r4,4097
100046d8:	21123304 	addi	r4,r4,18636
100046dc:	0004ce80 	call	10004ce8 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	// usleep(10000);
}
100046e0:	0001883a 	nop
100046e4:	e037883a 	mov	sp,fp
100046e8:	dfc00117 	ldw	ra,4(sp)
100046ec:	df000017 	ldw	fp,0(sp)
100046f0:	dec00204 	addi	sp,sp,8
100046f4:	f800283a 	ret

100046f8 <get_keycode_value>:


// Should be place in a while loop to keep fetching keycodes
int get_keycode_value() 
{
100046f8:	defffd04 	addi	sp,sp,-12
100046fc:	dfc00215 	stw	ra,8(sp)
10004700:	df000115 	stw	fp,4(sp)
10004704:	df000104 	addi	fp,sp,4
	// int keycode0 = 0;
	// int keycode1 = 0;
	int keycode = 0;
10004708:	e03fff15 	stw	zero,-4(fp)

	toggle++;
1000470c:	d080fd83 	ldbu	r2,1014(gp)
10004710:	10800044 	addi	r2,r2,1
10004714:	d080fd85 	stb	r2,1014(gp)
	IO_write(HPI_ADDR,0x0500); //the start address
10004718:	01414004 	movi	r5,1280
1000471c:	01000084 	movi	r4,2
10004720:	00004880 	call	10000488 <IO_write>
	//data phase IN-1
	IO_write(HPI_DATA,0x051c); //500
10004724:	01414704 	movi	r5,1308
10004728:	0009883a 	mov	r4,zero
1000472c:	00004880 	call	10000488 <IO_write>

	IO_write(HPI_DATA,0x000f & data_size);//2 data length
10004730:	d080fdc3 	ldbu	r2,1015(gp)
10004734:	10803fcc 	andi	r2,r2,255
10004738:	108003cc 	andi	r2,r2,15
1000473c:	100b883a 	mov	r5,r2
10004740:	0009883a 	mov	r4,zero
10004744:	00004880 	call	10000488 <IO_write>

	IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10004748:	0140a444 	movi	r5,657
1000474c:	0009883a 	mov	r4,zero
10004750:	00004880 	call	10000488 <IO_write>
	if(toggle%2)
10004754:	d080fd83 	ldbu	r2,1014(gp)
10004758:	1080004c 	andi	r2,r2,1
1000475c:	10803fcc 	andi	r2,r2,255
10004760:	10000426 	beq	r2,zero,10004774 <get_keycode_value+0x7c>
	{
		IO_write(HPI_DATA,0x0001);//6 //data 1
10004764:	01400044 	movi	r5,1
10004768:	0009883a 	mov	r4,zero
1000476c:	00004880 	call	10000488 <IO_write>
10004770:	00000306 	br	10004780 <get_keycode_value+0x88>
	}
	else
	{
		IO_write(HPI_DATA,0x0041);//6 //data 1
10004774:	01401044 	movi	r5,65
10004778:	0009883a 	mov	r4,zero
1000477c:	00004880 	call	10000488 <IO_write>
	}
	IO_write(HPI_DATA,0x0013);//8
10004780:	014004c4 	movi	r5,19
10004784:	0009883a 	mov	r4,zero
10004788:	00004880 	call	10000488 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
1000478c:	000b883a 	mov	r5,zero
10004790:	0009883a 	mov	r4,zero
10004794:	00004880 	call	10000488 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10004798:	01414004 	movi	r5,1280
1000479c:	01006c04 	movi	r4,432
100047a0:	0002a8c0 	call	10002a8c <UsbWrite>
	
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100047a4:	00002506 	br	1000483c <get_keycode_value+0x144>
	{
		IO_write(HPI_ADDR,0x0500); //the start address
100047a8:	01414004 	movi	r5,1280
100047ac:	01000084 	movi	r4,2
100047b0:	00004880 	call	10000488 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
100047b4:	01414704 	movi	r5,1308
100047b8:	0009883a 	mov	r4,zero
100047bc:	00004880 	call	10000488 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
100047c0:	d080fdc3 	ldbu	r2,1015(gp)
100047c4:	10803fcc 	andi	r2,r2,255
100047c8:	108003cc 	andi	r2,r2,15
100047cc:	100b883a 	mov	r5,r2
100047d0:	0009883a 	mov	r4,zero
100047d4:	00004880 	call	10000488 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
100047d8:	0140a444 	movi	r5,657
100047dc:	0009883a 	mov	r4,zero
100047e0:	00004880 	call	10000488 <IO_write>
		if(toggle%2)
100047e4:	d080fd83 	ldbu	r2,1014(gp)
100047e8:	1080004c 	andi	r2,r2,1
100047ec:	10803fcc 	andi	r2,r2,255
100047f0:	10000426 	beq	r2,zero,10004804 <get_keycode_value+0x10c>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
100047f4:	01400044 	movi	r5,1
100047f8:	0009883a 	mov	r4,zero
100047fc:	00004880 	call	10000488 <IO_write>
10004800:	00000306 	br	10004810 <get_keycode_value+0x118>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10004804:	01401044 	movi	r5,65
10004808:	0009883a 	mov	r4,zero
1000480c:	00004880 	call	10000488 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10004810:	014004c4 	movi	r5,19
10004814:	0009883a 	mov	r4,zero
10004818:	00004880 	call	10000488 <IO_write>
		IO_write(HPI_DATA,0x0000);//
1000481c:	000b883a 	mov	r5,zero
10004820:	0009883a 	mov	r4,zero
10004824:	00004880 	call	10000488 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10004828:	01414004 	movi	r5,1280
1000482c:	01006c04 	movi	r4,432
10004830:	0002a8c0 	call	10002a8c <UsbWrite>
		usleep(10*1000);
10004834:	0109c404 	movi	r4,10000
10004838:	00121780 	call	10012178 <usleep>
	}
	IO_write(HPI_DATA,0x0013);//8
	IO_write(HPI_DATA,0x0000);//a
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
	
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000483c:	010000c4 	movi	r4,3
10004840:	00005040 	call	10000504 <IO_read>
10004844:	10bfffcc 	andi	r2,r2,65535
10004848:	1080040c 	andi	r2,r2,16
1000484c:	103fd626 	beq	r2,zero,100047a8 <__alt_data_end+0xf80047a8>
		IO_write(HPI_DATA,0x0000);//
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		usleep(10*1000);
	}//end while

	usb_ctl_val = UsbWaitTDListDone();
10004850:	0003a7c0 	call	10003a7c <UsbWaitTDListDone>
10004854:	d080fb8d 	sth	r2,1006(gp)
	/* Four key support */
	// keycode0 = UsbRead(0x051e);
	// keycode1 = UsbRead(0x0520);
	// keycode = keycode0 + (keycode1 << 8);
	/********************/
	keycode = UsbRead(0x051e);
10004858:	01014784 	movi	r4,1310
1000485c:	0002ae40 	call	10002ae4 <UsbRead>
10004860:	10bfffcc 	andi	r2,r2,65535
10004864:	e0bfff15 	stw	r2,-4(fp)
	printf("\nfirst two keycode values are %04x\n",keycode);
10004868:	e17fff17 	ldw	r5,-4(fp)
1000486c:	01040074 	movhi	r4,4097
10004870:	21124704 	addi	r4,r4,18716
10004874:	0004bec0 	call	10004bec <printf>
	// We only need the first keycode, which is at the lower byte of keycode.
	// Send the keycode to hardware via PIO.
	*keycode_base = keycode & 0xff;
10004878:	00803404 	movi	r2,208
1000487c:	e0ffff17 	ldw	r3,-4(fp)
10004880:	10c00005 	stb	r3,0(r2)

	usleep(200);//usleep(5000);
10004884:	01003204 	movi	r4,200
10004888:	00121780 	call	10012178 <usleep>
	usb_ctl_val = UsbRead(ctl_reg);
1000488c:	d080fc0b 	ldhu	r2,1008(gp)
10004890:	10bfffcc 	andi	r2,r2,65535
10004894:	1009883a 	mov	r4,r2
10004898:	0002ae40 	call	10002ae4 <UsbRead>
1000489c:	d080fb8d 	sth	r2,1006(gp)

	if(!(usb_ctl_val & no_device))
100048a0:	d0c0fb8b 	ldhu	r3,1006(gp)
100048a4:	d080fc8b 	ldhu	r2,1010(gp)
100048a8:	1884703a 	and	r2,r3,r2
100048ac:	10bfffcc 	andi	r2,r2,65535
100048b0:	1000401e 	bne	r2,zero,100049b4 <get_keycode_value+0x2bc>
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
100048b4:	d000fe05 	stb	zero,1016(gp)
100048b8:	00000f06 	br	100048f8 <get_keycode_value+0x200>
		{
			usleep(5*1000);
100048bc:	0104e204 	movi	r4,5000
100048c0:	00121780 	call	10012178 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100048c4:	d080fc0b 	ldhu	r2,1008(gp)
100048c8:	10bfffcc 	andi	r2,r2,65535
100048cc:	1009883a 	mov	r4,r2
100048d0:	0002ae40 	call	10002ae4 <UsbRead>
100048d4:	d080fb8d 	sth	r2,1006(gp)
			if(usb_ctl_val & no_device) break;
100048d8:	d0c0fb8b 	ldhu	r3,1006(gp)
100048dc:	d080fc8b 	ldhu	r2,1010(gp)
100048e0:	1884703a 	and	r2,r3,r2
100048e4:	10bfffcc 	andi	r2,r2,65535
100048e8:	1000081e 	bne	r2,zero,1000490c <get_keycode_value+0x214>
	usb_ctl_val = UsbRead(ctl_reg);

	if(!(usb_ctl_val & no_device))
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
100048ec:	d080fe03 	ldbu	r2,1016(gp)
100048f0:	10800044 	addi	r2,r2,1
100048f4:	d080fe05 	stb	r2,1016(gp)
100048f8:	d080fe03 	ldbu	r2,1016(gp)
100048fc:	10803fcc 	andi	r2,r2,255
10004900:	108001f0 	cmpltui	r2,r2,7
10004904:	103fed1e 	bne	r2,zero,100048bc <__alt_data_end+0xf80048bc>
10004908:	00000106 	br	10004910 <get_keycode_value+0x218>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
1000490c:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
10004910:	d0c0fb8b 	ldhu	r3,1006(gp)
10004914:	d080fc8b 	ldhu	r2,1010(gp)
10004918:	1884703a 	and	r2,r3,r2
1000491c:	10bfffcc 	andi	r2,r2,65535
10004920:	1000241e 	bne	r2,zero,100049b4 <get_keycode_value+0x2bc>
		{
			printf("\n[INFO]: the keyboard has been removed!!! \n");
10004924:	01040074 	movhi	r4,4097
10004928:	21125004 	addi	r4,r4,18752
1000492c:	0004ce80 	call	10004ce8 <puts>
			printf("[INFO]: please insert again!!! \n");
10004930:	01040074 	movhi	r4,4097
10004934:	21125b04 	addi	r4,r4,18796
10004938:	0004ce80 	call	10004ce8 <puts>
		}
	}

	while (!(usb_ctl_val & no_device))
1000493c:	00001d06 	br	100049b4 <get_keycode_value+0x2bc>
	{

		usb_ctl_val = UsbRead(ctl_reg);
10004940:	d080fc0b 	ldhu	r2,1008(gp)
10004944:	10bfffcc 	andi	r2,r2,65535
10004948:	1009883a 	mov	r4,r2
1000494c:	0002ae40 	call	10002ae4 <UsbRead>
10004950:	d080fb8d 	sth	r2,1006(gp)
		usleep(5*1000);
10004954:	0104e204 	movi	r4,5000
10004958:	00121780 	call	10012178 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
1000495c:	d080fc0b 	ldhu	r2,1008(gp)
10004960:	10bfffcc 	andi	r2,r2,65535
10004964:	1009883a 	mov	r4,r2
10004968:	0002ae40 	call	10002ae4 <UsbRead>
1000496c:	d080fb8d 	sth	r2,1006(gp)
		usleep(5*1000);
10004970:	0104e204 	movi	r4,5000
10004974:	00121780 	call	10012178 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10004978:	d080fc0b 	ldhu	r2,1008(gp)
1000497c:	10bfffcc 	andi	r2,r2,65535
10004980:	1009883a 	mov	r4,r2
10004984:	0002ae40 	call	10002ae4 <UsbRead>
10004988:	d080fb8d 	sth	r2,1006(gp)
		usleep(5*1000);
1000498c:	0104e204 	movi	r4,5000
10004990:	00121780 	call	10012178 <usleep>

		if(usb_ctl_val & no_device)
10004994:	d0c0fb8b 	ldhu	r3,1006(gp)
10004998:	d080fc8b 	ldhu	r2,1010(gp)
1000499c:	1884703a 	and	r2,r3,r2
100049a0:	10bfffcc 	andi	r2,r2,65535
100049a4:	10000126 	beq	r2,zero,100049ac <get_keycode_value+0x2b4>
			usb_initialize();
100049a8:	0003c000 	call	10003c00 <usb_initialize>

		usleep(200);
100049ac:	01003204 	movi	r4,200
100049b0:	00121780 	call	10012178 <usleep>
			printf("\n[INFO]: the keyboard has been removed!!! \n");
			printf("[INFO]: please insert again!!! \n");
		}
	}

	while (!(usb_ctl_val & no_device))
100049b4:	d0c0fb8b 	ldhu	r3,1006(gp)
100049b8:	d080fc8b 	ldhu	r2,1010(gp)
100049bc:	1884703a 	and	r2,r3,r2
100049c0:	10bfffcc 	andi	r2,r2,65535
100049c4:	103fde26 	beq	r2,zero,10004940 <__alt_data_end+0xf8004940>
		if(usb_ctl_val & no_device)
			usb_initialize();

		usleep(200);
	}
	return keycode;
100049c8:	e0bfff17 	ldw	r2,-4(fp)
}
100049cc:	e037883a 	mov	sp,fp
100049d0:	dfc00117 	ldw	ra,4(sp)
100049d4:	df000017 	ldw	fp,0(sp)
100049d8:	dec00204 	addi	sp,sp,8
100049dc:	f800283a 	ret

100049e0 <__divsi3>:
100049e0:	20001b16 	blt	r4,zero,10004a50 <__divsi3+0x70>
100049e4:	000f883a 	mov	r7,zero
100049e8:	28001616 	blt	r5,zero,10004a44 <__divsi3+0x64>
100049ec:	200d883a 	mov	r6,r4
100049f0:	29001a2e 	bgeu	r5,r4,10004a5c <__divsi3+0x7c>
100049f4:	00800804 	movi	r2,32
100049f8:	00c00044 	movi	r3,1
100049fc:	00000106 	br	10004a04 <__divsi3+0x24>
10004a00:	10000d26 	beq	r2,zero,10004a38 <__divsi3+0x58>
10004a04:	294b883a 	add	r5,r5,r5
10004a08:	10bfffc4 	addi	r2,r2,-1
10004a0c:	18c7883a 	add	r3,r3,r3
10004a10:	293ffb36 	bltu	r5,r4,10004a00 <__alt_data_end+0xf8004a00>
10004a14:	0005883a 	mov	r2,zero
10004a18:	18000726 	beq	r3,zero,10004a38 <__divsi3+0x58>
10004a1c:	0005883a 	mov	r2,zero
10004a20:	31400236 	bltu	r6,r5,10004a2c <__divsi3+0x4c>
10004a24:	314dc83a 	sub	r6,r6,r5
10004a28:	10c4b03a 	or	r2,r2,r3
10004a2c:	1806d07a 	srli	r3,r3,1
10004a30:	280ad07a 	srli	r5,r5,1
10004a34:	183ffa1e 	bne	r3,zero,10004a20 <__alt_data_end+0xf8004a20>
10004a38:	38000126 	beq	r7,zero,10004a40 <__divsi3+0x60>
10004a3c:	0085c83a 	sub	r2,zero,r2
10004a40:	f800283a 	ret
10004a44:	014bc83a 	sub	r5,zero,r5
10004a48:	39c0005c 	xori	r7,r7,1
10004a4c:	003fe706 	br	100049ec <__alt_data_end+0xf80049ec>
10004a50:	0109c83a 	sub	r4,zero,r4
10004a54:	01c00044 	movi	r7,1
10004a58:	003fe306 	br	100049e8 <__alt_data_end+0xf80049e8>
10004a5c:	00c00044 	movi	r3,1
10004a60:	003fee06 	br	10004a1c <__alt_data_end+0xf8004a1c>

10004a64 <__modsi3>:
10004a64:	20001716 	blt	r4,zero,10004ac4 <__modsi3+0x60>
10004a68:	000f883a 	mov	r7,zero
10004a6c:	2005883a 	mov	r2,r4
10004a70:	28001216 	blt	r5,zero,10004abc <__modsi3+0x58>
10004a74:	2900162e 	bgeu	r5,r4,10004ad0 <__modsi3+0x6c>
10004a78:	01800804 	movi	r6,32
10004a7c:	00c00044 	movi	r3,1
10004a80:	00000106 	br	10004a88 <__modsi3+0x24>
10004a84:	30000a26 	beq	r6,zero,10004ab0 <__modsi3+0x4c>
10004a88:	294b883a 	add	r5,r5,r5
10004a8c:	31bfffc4 	addi	r6,r6,-1
10004a90:	18c7883a 	add	r3,r3,r3
10004a94:	293ffb36 	bltu	r5,r4,10004a84 <__alt_data_end+0xf8004a84>
10004a98:	18000526 	beq	r3,zero,10004ab0 <__modsi3+0x4c>
10004a9c:	1806d07a 	srli	r3,r3,1
10004aa0:	11400136 	bltu	r2,r5,10004aa8 <__modsi3+0x44>
10004aa4:	1145c83a 	sub	r2,r2,r5
10004aa8:	280ad07a 	srli	r5,r5,1
10004aac:	183ffb1e 	bne	r3,zero,10004a9c <__alt_data_end+0xf8004a9c>
10004ab0:	38000126 	beq	r7,zero,10004ab8 <__modsi3+0x54>
10004ab4:	0085c83a 	sub	r2,zero,r2
10004ab8:	f800283a 	ret
10004abc:	014bc83a 	sub	r5,zero,r5
10004ac0:	003fec06 	br	10004a74 <__alt_data_end+0xf8004a74>
10004ac4:	0109c83a 	sub	r4,zero,r4
10004ac8:	01c00044 	movi	r7,1
10004acc:	003fe706 	br	10004a6c <__alt_data_end+0xf8004a6c>
10004ad0:	00c00044 	movi	r3,1
10004ad4:	003ff106 	br	10004a9c <__alt_data_end+0xf8004a9c>

10004ad8 <__udivsi3>:
10004ad8:	200d883a 	mov	r6,r4
10004adc:	2900152e 	bgeu	r5,r4,10004b34 <__udivsi3+0x5c>
10004ae0:	28001416 	blt	r5,zero,10004b34 <__udivsi3+0x5c>
10004ae4:	00800804 	movi	r2,32
10004ae8:	00c00044 	movi	r3,1
10004aec:	00000206 	br	10004af8 <__udivsi3+0x20>
10004af0:	10000e26 	beq	r2,zero,10004b2c <__udivsi3+0x54>
10004af4:	28000516 	blt	r5,zero,10004b0c <__udivsi3+0x34>
10004af8:	294b883a 	add	r5,r5,r5
10004afc:	10bfffc4 	addi	r2,r2,-1
10004b00:	18c7883a 	add	r3,r3,r3
10004b04:	293ffa36 	bltu	r5,r4,10004af0 <__alt_data_end+0xf8004af0>
10004b08:	18000826 	beq	r3,zero,10004b2c <__udivsi3+0x54>
10004b0c:	0005883a 	mov	r2,zero
10004b10:	31400236 	bltu	r6,r5,10004b1c <__udivsi3+0x44>
10004b14:	314dc83a 	sub	r6,r6,r5
10004b18:	10c4b03a 	or	r2,r2,r3
10004b1c:	1806d07a 	srli	r3,r3,1
10004b20:	280ad07a 	srli	r5,r5,1
10004b24:	183ffa1e 	bne	r3,zero,10004b10 <__alt_data_end+0xf8004b10>
10004b28:	f800283a 	ret
10004b2c:	0005883a 	mov	r2,zero
10004b30:	f800283a 	ret
10004b34:	00c00044 	movi	r3,1
10004b38:	003ff406 	br	10004b0c <__alt_data_end+0xf8004b0c>

10004b3c <__umodsi3>:
10004b3c:	2005883a 	mov	r2,r4
10004b40:	2900122e 	bgeu	r5,r4,10004b8c <__umodsi3+0x50>
10004b44:	28001116 	blt	r5,zero,10004b8c <__umodsi3+0x50>
10004b48:	01800804 	movi	r6,32
10004b4c:	00c00044 	movi	r3,1
10004b50:	00000206 	br	10004b5c <__umodsi3+0x20>
10004b54:	30000c26 	beq	r6,zero,10004b88 <__umodsi3+0x4c>
10004b58:	28000516 	blt	r5,zero,10004b70 <__umodsi3+0x34>
10004b5c:	294b883a 	add	r5,r5,r5
10004b60:	31bfffc4 	addi	r6,r6,-1
10004b64:	18c7883a 	add	r3,r3,r3
10004b68:	293ffa36 	bltu	r5,r4,10004b54 <__alt_data_end+0xf8004b54>
10004b6c:	18000626 	beq	r3,zero,10004b88 <__umodsi3+0x4c>
10004b70:	1806d07a 	srli	r3,r3,1
10004b74:	11400136 	bltu	r2,r5,10004b7c <__umodsi3+0x40>
10004b78:	1145c83a 	sub	r2,r2,r5
10004b7c:	280ad07a 	srli	r5,r5,1
10004b80:	183ffb1e 	bne	r3,zero,10004b70 <__alt_data_end+0xf8004b70>
10004b84:	f800283a 	ret
10004b88:	f800283a 	ret
10004b8c:	00c00044 	movi	r3,1
10004b90:	003ff706 	br	10004b70 <__alt_data_end+0xf8004b70>

10004b94 <__mulsi3>:
10004b94:	0005883a 	mov	r2,zero
10004b98:	20000726 	beq	r4,zero,10004bb8 <__mulsi3+0x24>
10004b9c:	20c0004c 	andi	r3,r4,1
10004ba0:	2008d07a 	srli	r4,r4,1
10004ba4:	18000126 	beq	r3,zero,10004bac <__mulsi3+0x18>
10004ba8:	1145883a 	add	r2,r2,r5
10004bac:	294b883a 	add	r5,r5,r5
10004bb0:	203ffa1e 	bne	r4,zero,10004b9c <__alt_data_end+0xf8004b9c>
10004bb4:	f800283a 	ret
10004bb8:	f800283a 	ret

10004bbc <_printf_r>:
10004bbc:	defffd04 	addi	sp,sp,-12
10004bc0:	2805883a 	mov	r2,r5
10004bc4:	dfc00015 	stw	ra,0(sp)
10004bc8:	d9800115 	stw	r6,4(sp)
10004bcc:	d9c00215 	stw	r7,8(sp)
10004bd0:	21400217 	ldw	r5,8(r4)
10004bd4:	d9c00104 	addi	r7,sp,4
10004bd8:	100d883a 	mov	r6,r2
10004bdc:	0004d940 	call	10004d94 <___vfprintf_internal_r>
10004be0:	dfc00017 	ldw	ra,0(sp)
10004be4:	dec00304 	addi	sp,sp,12
10004be8:	f800283a 	ret

10004bec <printf>:
10004bec:	defffc04 	addi	sp,sp,-16
10004bf0:	dfc00015 	stw	ra,0(sp)
10004bf4:	d9400115 	stw	r5,4(sp)
10004bf8:	d9800215 	stw	r6,8(sp)
10004bfc:	d9c00315 	stw	r7,12(sp)
10004c00:	008400b4 	movhi	r2,4098
10004c04:	10b3fa04 	addi	r2,r2,-12312
10004c08:	10800017 	ldw	r2,0(r2)
10004c0c:	200b883a 	mov	r5,r4
10004c10:	d9800104 	addi	r6,sp,4
10004c14:	11000217 	ldw	r4,8(r2)
10004c18:	00070700 	call	10007070 <__vfprintf_internal>
10004c1c:	dfc00017 	ldw	ra,0(sp)
10004c20:	dec00404 	addi	sp,sp,16
10004c24:	f800283a 	ret

10004c28 <_puts_r>:
10004c28:	defff604 	addi	sp,sp,-40
10004c2c:	dc000715 	stw	r16,28(sp)
10004c30:	2021883a 	mov	r16,r4
10004c34:	2809883a 	mov	r4,r5
10004c38:	dc400815 	stw	r17,32(sp)
10004c3c:	dfc00915 	stw	ra,36(sp)
10004c40:	2823883a 	mov	r17,r5
10004c44:	0004cfc0 	call	10004cfc <strlen>
10004c48:	10c00044 	addi	r3,r2,1
10004c4c:	d8800115 	stw	r2,4(sp)
10004c50:	00840074 	movhi	r2,4097
10004c54:	10926304 	addi	r2,r2,18828
10004c58:	d8800215 	stw	r2,8(sp)
10004c5c:	00800044 	movi	r2,1
10004c60:	d8800315 	stw	r2,12(sp)
10004c64:	00800084 	movi	r2,2
10004c68:	dc400015 	stw	r17,0(sp)
10004c6c:	d8c00615 	stw	r3,24(sp)
10004c70:	dec00415 	stw	sp,16(sp)
10004c74:	d8800515 	stw	r2,20(sp)
10004c78:	80000226 	beq	r16,zero,10004c84 <_puts_r+0x5c>
10004c7c:	80800e17 	ldw	r2,56(r16)
10004c80:	10001426 	beq	r2,zero,10004cd4 <_puts_r+0xac>
10004c84:	81400217 	ldw	r5,8(r16)
10004c88:	2880030b 	ldhu	r2,12(r5)
10004c8c:	10c8000c 	andi	r3,r2,8192
10004c90:	1800061e 	bne	r3,zero,10004cac <_puts_r+0x84>
10004c94:	29001917 	ldw	r4,100(r5)
10004c98:	00f7ffc4 	movi	r3,-8193
10004c9c:	10880014 	ori	r2,r2,8192
10004ca0:	20c6703a 	and	r3,r4,r3
10004ca4:	2880030d 	sth	r2,12(r5)
10004ca8:	28c01915 	stw	r3,100(r5)
10004cac:	d9800404 	addi	r6,sp,16
10004cb0:	8009883a 	mov	r4,r16
10004cb4:	00095d80 	call	100095d8 <__sfvwrite_r>
10004cb8:	1000091e 	bne	r2,zero,10004ce0 <_puts_r+0xb8>
10004cbc:	00800284 	movi	r2,10
10004cc0:	dfc00917 	ldw	ra,36(sp)
10004cc4:	dc400817 	ldw	r17,32(sp)
10004cc8:	dc000717 	ldw	r16,28(sp)
10004ccc:	dec00a04 	addi	sp,sp,40
10004cd0:	f800283a 	ret
10004cd4:	8009883a 	mov	r4,r16
10004cd8:	00091540 	call	10009154 <__sinit>
10004cdc:	003fe906 	br	10004c84 <__alt_data_end+0xf8004c84>
10004ce0:	00bfffc4 	movi	r2,-1
10004ce4:	003ff606 	br	10004cc0 <__alt_data_end+0xf8004cc0>

10004ce8 <puts>:
10004ce8:	008400b4 	movhi	r2,4098
10004cec:	10b3fa04 	addi	r2,r2,-12312
10004cf0:	200b883a 	mov	r5,r4
10004cf4:	11000017 	ldw	r4,0(r2)
10004cf8:	0004c281 	jmpi	10004c28 <_puts_r>

10004cfc <strlen>:
10004cfc:	208000cc 	andi	r2,r4,3
10004d00:	10002026 	beq	r2,zero,10004d84 <strlen+0x88>
10004d04:	20800007 	ldb	r2,0(r4)
10004d08:	10002026 	beq	r2,zero,10004d8c <strlen+0x90>
10004d0c:	2005883a 	mov	r2,r4
10004d10:	00000206 	br	10004d1c <strlen+0x20>
10004d14:	10c00007 	ldb	r3,0(r2)
10004d18:	18001826 	beq	r3,zero,10004d7c <strlen+0x80>
10004d1c:	10800044 	addi	r2,r2,1
10004d20:	10c000cc 	andi	r3,r2,3
10004d24:	183ffb1e 	bne	r3,zero,10004d14 <__alt_data_end+0xf8004d14>
10004d28:	10c00017 	ldw	r3,0(r2)
10004d2c:	01ffbff4 	movhi	r7,65279
10004d30:	39ffbfc4 	addi	r7,r7,-257
10004d34:	00ca303a 	nor	r5,zero,r3
10004d38:	01a02074 	movhi	r6,32897
10004d3c:	19c7883a 	add	r3,r3,r7
10004d40:	31a02004 	addi	r6,r6,-32640
10004d44:	1946703a 	and	r3,r3,r5
10004d48:	1986703a 	and	r3,r3,r6
10004d4c:	1800091e 	bne	r3,zero,10004d74 <strlen+0x78>
10004d50:	10800104 	addi	r2,r2,4
10004d54:	10c00017 	ldw	r3,0(r2)
10004d58:	19cb883a 	add	r5,r3,r7
10004d5c:	00c6303a 	nor	r3,zero,r3
10004d60:	28c6703a 	and	r3,r5,r3
10004d64:	1986703a 	and	r3,r3,r6
10004d68:	183ff926 	beq	r3,zero,10004d50 <__alt_data_end+0xf8004d50>
10004d6c:	00000106 	br	10004d74 <strlen+0x78>
10004d70:	10800044 	addi	r2,r2,1
10004d74:	10c00007 	ldb	r3,0(r2)
10004d78:	183ffd1e 	bne	r3,zero,10004d70 <__alt_data_end+0xf8004d70>
10004d7c:	1105c83a 	sub	r2,r2,r4
10004d80:	f800283a 	ret
10004d84:	2005883a 	mov	r2,r4
10004d88:	003fe706 	br	10004d28 <__alt_data_end+0xf8004d28>
10004d8c:	0005883a 	mov	r2,zero
10004d90:	f800283a 	ret

10004d94 <___vfprintf_internal_r>:
10004d94:	deffb804 	addi	sp,sp,-288
10004d98:	dfc04715 	stw	ra,284(sp)
10004d9c:	ddc04515 	stw	r23,276(sp)
10004da0:	dd404315 	stw	r21,268(sp)
10004da4:	d9002d15 	stw	r4,180(sp)
10004da8:	282f883a 	mov	r23,r5
10004dac:	302b883a 	mov	r21,r6
10004db0:	d9c02e15 	stw	r7,184(sp)
10004db4:	df004615 	stw	fp,280(sp)
10004db8:	dd804415 	stw	r22,272(sp)
10004dbc:	dd004215 	stw	r20,264(sp)
10004dc0:	dcc04115 	stw	r19,260(sp)
10004dc4:	dc804015 	stw	r18,256(sp)
10004dc8:	dc403f15 	stw	r17,252(sp)
10004dcc:	dc003e15 	stw	r16,248(sp)
10004dd0:	0009cd40 	call	10009cd4 <_localeconv_r>
10004dd4:	10800017 	ldw	r2,0(r2)
10004dd8:	1009883a 	mov	r4,r2
10004ddc:	d8803415 	stw	r2,208(sp)
10004de0:	0004cfc0 	call	10004cfc <strlen>
10004de4:	d8803715 	stw	r2,220(sp)
10004de8:	d8802d17 	ldw	r2,180(sp)
10004dec:	10000226 	beq	r2,zero,10004df8 <___vfprintf_internal_r+0x64>
10004df0:	10800e17 	ldw	r2,56(r2)
10004df4:	1000fb26 	beq	r2,zero,100051e4 <___vfprintf_internal_r+0x450>
10004df8:	b880030b 	ldhu	r2,12(r23)
10004dfc:	10c8000c 	andi	r3,r2,8192
10004e00:	1800061e 	bne	r3,zero,10004e1c <___vfprintf_internal_r+0x88>
10004e04:	b9001917 	ldw	r4,100(r23)
10004e08:	00f7ffc4 	movi	r3,-8193
10004e0c:	10880014 	ori	r2,r2,8192
10004e10:	20c6703a 	and	r3,r4,r3
10004e14:	b880030d 	sth	r2,12(r23)
10004e18:	b8c01915 	stw	r3,100(r23)
10004e1c:	10c0020c 	andi	r3,r2,8
10004e20:	1800c326 	beq	r3,zero,10005130 <___vfprintf_internal_r+0x39c>
10004e24:	b8c00417 	ldw	r3,16(r23)
10004e28:	1800c126 	beq	r3,zero,10005130 <___vfprintf_internal_r+0x39c>
10004e2c:	1080068c 	andi	r2,r2,26
10004e30:	00c00284 	movi	r3,10
10004e34:	10c0c626 	beq	r2,r3,10005150 <___vfprintf_internal_r+0x3bc>
10004e38:	d8c00404 	addi	r3,sp,16
10004e3c:	05040074 	movhi	r20,4097
10004e40:	d9001e04 	addi	r4,sp,120
10004e44:	a5127484 	addi	r20,r20,18898
10004e48:	d8c01e15 	stw	r3,120(sp)
10004e4c:	d8002015 	stw	zero,128(sp)
10004e50:	d8001f15 	stw	zero,124(sp)
10004e54:	d8003315 	stw	zero,204(sp)
10004e58:	d8003615 	stw	zero,216(sp)
10004e5c:	d8003815 	stw	zero,224(sp)
10004e60:	1811883a 	mov	r8,r3
10004e64:	d8003915 	stw	zero,228(sp)
10004e68:	d8003a15 	stw	zero,232(sp)
10004e6c:	d8002f15 	stw	zero,188(sp)
10004e70:	d9002815 	stw	r4,160(sp)
10004e74:	a8800007 	ldb	r2,0(r21)
10004e78:	10028b26 	beq	r2,zero,100058a8 <___vfprintf_internal_r+0xb14>
10004e7c:	00c00944 	movi	r3,37
10004e80:	a823883a 	mov	r17,r21
10004e84:	10c0021e 	bne	r2,r3,10004e90 <___vfprintf_internal_r+0xfc>
10004e88:	00001406 	br	10004edc <___vfprintf_internal_r+0x148>
10004e8c:	10c00326 	beq	r2,r3,10004e9c <___vfprintf_internal_r+0x108>
10004e90:	8c400044 	addi	r17,r17,1
10004e94:	88800007 	ldb	r2,0(r17)
10004e98:	103ffc1e 	bne	r2,zero,10004e8c <__alt_data_end+0xf8004e8c>
10004e9c:	8d61c83a 	sub	r16,r17,r21
10004ea0:	80000e26 	beq	r16,zero,10004edc <___vfprintf_internal_r+0x148>
10004ea4:	d8c02017 	ldw	r3,128(sp)
10004ea8:	d8801f17 	ldw	r2,124(sp)
10004eac:	45400015 	stw	r21,0(r8)
10004eb0:	1c07883a 	add	r3,r3,r16
10004eb4:	10800044 	addi	r2,r2,1
10004eb8:	d8c02015 	stw	r3,128(sp)
10004ebc:	44000115 	stw	r16,4(r8)
10004ec0:	d8801f15 	stw	r2,124(sp)
10004ec4:	00c001c4 	movi	r3,7
10004ec8:	1880a916 	blt	r3,r2,10005170 <___vfprintf_internal_r+0x3dc>
10004ecc:	42000204 	addi	r8,r8,8
10004ed0:	d9402f17 	ldw	r5,188(sp)
10004ed4:	2c0b883a 	add	r5,r5,r16
10004ed8:	d9402f15 	stw	r5,188(sp)
10004edc:	88800007 	ldb	r2,0(r17)
10004ee0:	1000aa26 	beq	r2,zero,1000518c <___vfprintf_internal_r+0x3f8>
10004ee4:	8d400044 	addi	r21,r17,1
10004ee8:	8c400047 	ldb	r17,1(r17)
10004eec:	0021883a 	mov	r16,zero
10004ef0:	00bfffc4 	movi	r2,-1
10004ef4:	0025883a 	mov	r18,zero
10004ef8:	dc002905 	stb	r16,164(sp)
10004efc:	d8002785 	stb	zero,158(sp)
10004f00:	d8002b05 	stb	zero,172(sp)
10004f04:	d8802a15 	stw	r2,168(sp)
10004f08:	d8003115 	stw	zero,196(sp)
10004f0c:	04c01604 	movi	r19,88
10004f10:	05800244 	movi	r22,9
10004f14:	9021883a 	mov	r16,r18
10004f18:	4039883a 	mov	fp,r8
10004f1c:	ad400044 	addi	r21,r21,1
10004f20:	88bff804 	addi	r2,r17,-32
10004f24:	98833236 	bltu	r19,r2,10005bf0 <___vfprintf_internal_r+0xe5c>
10004f28:	100490ba 	slli	r2,r2,2
10004f2c:	00c40034 	movhi	r3,4096
10004f30:	18d3d004 	addi	r3,r3,20288
10004f34:	10c5883a 	add	r2,r2,r3
10004f38:	10800017 	ldw	r2,0(r2)
10004f3c:	1000683a 	jmp	r2
10004f40:	10005ae8 	cmpgeui	zero,r2,363
10004f44:	10005bf0 	cmpltui	zero,r2,367
10004f48:	10005bf0 	cmpltui	zero,r2,367
10004f4c:	10005b08 	cmpgei	zero,r2,364
10004f50:	10005bf0 	cmpltui	zero,r2,367
10004f54:	10005bf0 	cmpltui	zero,r2,367
10004f58:	10005bf0 	cmpltui	zero,r2,367
10004f5c:	10005bf0 	cmpltui	zero,r2,367
10004f60:	10005bf0 	cmpltui	zero,r2,367
10004f64:	10005bf0 	cmpltui	zero,r2,367
10004f68:	100051f0 	cmpltui	zero,r2,327
10004f6c:	100059f8 	rdprs	zero,r2,359
10004f70:	10005bf0 	cmpltui	zero,r2,367
10004f74:	100050b4 	orhi	zero,r2,322
10004f78:	10005214 	ori	zero,r2,328
10004f7c:	10005bf0 	cmpltui	zero,r2,367
10004f80:	10005264 	muli	zero,r2,329
10004f84:	10005270 	cmpltui	zero,r2,329
10004f88:	10005270 	cmpltui	zero,r2,329
10004f8c:	10005270 	cmpltui	zero,r2,329
10004f90:	10005270 	cmpltui	zero,r2,329
10004f94:	10005270 	cmpltui	zero,r2,329
10004f98:	10005270 	cmpltui	zero,r2,329
10004f9c:	10005270 	cmpltui	zero,r2,329
10004fa0:	10005270 	cmpltui	zero,r2,329
10004fa4:	10005270 	cmpltui	zero,r2,329
10004fa8:	10005bf0 	cmpltui	zero,r2,367
10004fac:	10005bf0 	cmpltui	zero,r2,367
10004fb0:	10005bf0 	cmpltui	zero,r2,367
10004fb4:	10005bf0 	cmpltui	zero,r2,367
10004fb8:	10005bf0 	cmpltui	zero,r2,367
10004fbc:	10005bf0 	cmpltui	zero,r2,367
10004fc0:	10005bf0 	cmpltui	zero,r2,367
10004fc4:	10005bf0 	cmpltui	zero,r2,367
10004fc8:	10005bf0 	cmpltui	zero,r2,367
10004fcc:	10005bf0 	cmpltui	zero,r2,367
10004fd0:	100052ac 	andhi	zero,r2,330
10004fd4:	10005374 	orhi	zero,r2,333
10004fd8:	10005bf0 	cmpltui	zero,r2,367
10004fdc:	10005374 	orhi	zero,r2,333
10004fe0:	10005bf0 	cmpltui	zero,r2,367
10004fe4:	10005bf0 	cmpltui	zero,r2,367
10004fe8:	10005bf0 	cmpltui	zero,r2,367
10004fec:	10005bf0 	cmpltui	zero,r2,367
10004ff0:	10005420 	cmpeqi	zero,r2,336
10004ff4:	10005bf0 	cmpltui	zero,r2,367
10004ff8:	10005bf0 	cmpltui	zero,r2,367
10004ffc:	1000542c 	andhi	zero,r2,336
10005000:	10005bf0 	cmpltui	zero,r2,367
10005004:	10005bf0 	cmpltui	zero,r2,367
10005008:	10005bf0 	cmpltui	zero,r2,367
1000500c:	10005bf0 	cmpltui	zero,r2,367
10005010:	10005bf0 	cmpltui	zero,r2,367
10005014:	100058b0 	cmpltui	zero,r2,354
10005018:	10005bf0 	cmpltui	zero,r2,367
1000501c:	10005bf0 	cmpltui	zero,r2,367
10005020:	1000591c 	xori	zero,r2,356
10005024:	10005bf0 	cmpltui	zero,r2,367
10005028:	10005bf0 	cmpltui	zero,r2,367
1000502c:	10005bf0 	cmpltui	zero,r2,367
10005030:	10005bf0 	cmpltui	zero,r2,367
10005034:	10005bf0 	cmpltui	zero,r2,367
10005038:	10005bf0 	cmpltui	zero,r2,367
1000503c:	10005bf0 	cmpltui	zero,r2,367
10005040:	10005bf0 	cmpltui	zero,r2,367
10005044:	10005bf0 	cmpltui	zero,r2,367
10005048:	10005bf0 	cmpltui	zero,r2,367
1000504c:	10005b94 	ori	zero,r2,366
10005050:	10005b14 	ori	zero,r2,364
10005054:	10005374 	orhi	zero,r2,333
10005058:	10005374 	orhi	zero,r2,333
1000505c:	10005374 	orhi	zero,r2,333
10005060:	10005b34 	orhi	zero,r2,364
10005064:	10005b14 	ori	zero,r2,364
10005068:	10005bf0 	cmpltui	zero,r2,367
1000506c:	10005bf0 	cmpltui	zero,r2,367
10005070:	10005b40 	call	110005b4 <__alt_heap_start+0xfdb074>
10005074:	10005bf0 	cmpltui	zero,r2,367
10005078:	10005b54 	ori	zero,r2,365
1000507c:	100059d8 	cmpnei	zero,r2,359
10005080:	100050c0 	call	1100050c <__alt_heap_start+0xfdafcc>
10005084:	10005a10 	cmplti	zero,r2,360
10005088:	10005bf0 	cmpltui	zero,r2,367
1000508c:	10005a1c 	xori	zero,r2,360
10005090:	10005bf0 	cmpltui	zero,r2,367
10005094:	10005a80 	call	110005a8 <__alt_heap_start+0xfdb068>
10005098:	10005bf0 	cmpltui	zero,r2,367
1000509c:	10005bf0 	cmpltui	zero,r2,367
100050a0:	10005aa0 	cmpeqi	zero,r2,362
100050a4:	d8c03117 	ldw	r3,196(sp)
100050a8:	d8802e15 	stw	r2,184(sp)
100050ac:	00c7c83a 	sub	r3,zero,r3
100050b0:	d8c03115 	stw	r3,196(sp)
100050b4:	84000114 	ori	r16,r16,4
100050b8:	ac400007 	ldb	r17,0(r21)
100050bc:	003f9706 	br	10004f1c <__alt_data_end+0xf8004f1c>
100050c0:	00800c04 	movi	r2,48
100050c4:	d8802705 	stb	r2,156(sp)
100050c8:	00801e04 	movi	r2,120
100050cc:	d8802745 	stb	r2,157(sp)
100050d0:	d9002a17 	ldw	r4,168(sp)
100050d4:	d8802e17 	ldw	r2,184(sp)
100050d8:	d8002785 	stb	zero,158(sp)
100050dc:	e011883a 	mov	r8,fp
100050e0:	10c00104 	addi	r3,r2,4
100050e4:	14c00017 	ldw	r19,0(r2)
100050e8:	002d883a 	mov	r22,zero
100050ec:	80800094 	ori	r2,r16,2
100050f0:	2002ca16 	blt	r4,zero,10005c1c <___vfprintf_internal_r+0xe88>
100050f4:	00bfdfc4 	movi	r2,-129
100050f8:	80a4703a 	and	r18,r16,r2
100050fc:	d8c02e15 	stw	r3,184(sp)
10005100:	94800094 	ori	r18,r18,2
10005104:	9802b41e 	bne	r19,zero,10005bd8 <___vfprintf_internal_r+0xe44>
10005108:	01440074 	movhi	r5,4097
1000510c:	29526d04 	addi	r5,r5,18868
10005110:	d9403915 	stw	r5,228(sp)
10005114:	04401e04 	movi	r17,120
10005118:	d8802a17 	ldw	r2,168(sp)
1000511c:	0039883a 	mov	fp,zero
10005120:	1001fa26 	beq	r2,zero,1000590c <___vfprintf_internal_r+0xb78>
10005124:	0027883a 	mov	r19,zero
10005128:	002d883a 	mov	r22,zero
1000512c:	00021906 	br	10005994 <___vfprintf_internal_r+0xc00>
10005130:	d9002d17 	ldw	r4,180(sp)
10005134:	b80b883a 	mov	r5,r23
10005138:	00071480 	call	10007148 <__swsetup_r>
1000513c:	1005dc1e 	bne	r2,zero,100068b0 <___vfprintf_internal_r+0x1b1c>
10005140:	b880030b 	ldhu	r2,12(r23)
10005144:	00c00284 	movi	r3,10
10005148:	1080068c 	andi	r2,r2,26
1000514c:	10ff3a1e 	bne	r2,r3,10004e38 <__alt_data_end+0xf8004e38>
10005150:	b880038f 	ldh	r2,14(r23)
10005154:	103f3816 	blt	r2,zero,10004e38 <__alt_data_end+0xf8004e38>
10005158:	d9c02e17 	ldw	r7,184(sp)
1000515c:	d9002d17 	ldw	r4,180(sp)
10005160:	a80d883a 	mov	r6,r21
10005164:	b80b883a 	mov	r5,r23
10005168:	000708c0 	call	1000708c <__sbprintf>
1000516c:	00001106 	br	100051b4 <___vfprintf_internal_r+0x420>
10005170:	d9002d17 	ldw	r4,180(sp)
10005174:	d9801e04 	addi	r6,sp,120
10005178:	b80b883a 	mov	r5,r23
1000517c:	000c5740 	call	1000c574 <__sprint_r>
10005180:	1000081e 	bne	r2,zero,100051a4 <___vfprintf_internal_r+0x410>
10005184:	da000404 	addi	r8,sp,16
10005188:	003f5106 	br	10004ed0 <__alt_data_end+0xf8004ed0>
1000518c:	d8802017 	ldw	r2,128(sp)
10005190:	10000426 	beq	r2,zero,100051a4 <___vfprintf_internal_r+0x410>
10005194:	d9002d17 	ldw	r4,180(sp)
10005198:	d9801e04 	addi	r6,sp,120
1000519c:	b80b883a 	mov	r5,r23
100051a0:	000c5740 	call	1000c574 <__sprint_r>
100051a4:	b880030b 	ldhu	r2,12(r23)
100051a8:	1080100c 	andi	r2,r2,64
100051ac:	1005c01e 	bne	r2,zero,100068b0 <___vfprintf_internal_r+0x1b1c>
100051b0:	d8802f17 	ldw	r2,188(sp)
100051b4:	dfc04717 	ldw	ra,284(sp)
100051b8:	df004617 	ldw	fp,280(sp)
100051bc:	ddc04517 	ldw	r23,276(sp)
100051c0:	dd804417 	ldw	r22,272(sp)
100051c4:	dd404317 	ldw	r21,268(sp)
100051c8:	dd004217 	ldw	r20,264(sp)
100051cc:	dcc04117 	ldw	r19,260(sp)
100051d0:	dc804017 	ldw	r18,256(sp)
100051d4:	dc403f17 	ldw	r17,252(sp)
100051d8:	dc003e17 	ldw	r16,248(sp)
100051dc:	dec04804 	addi	sp,sp,288
100051e0:	f800283a 	ret
100051e4:	d9002d17 	ldw	r4,180(sp)
100051e8:	00091540 	call	10009154 <__sinit>
100051ec:	003f0206 	br	10004df8 <__alt_data_end+0xf8004df8>
100051f0:	d9002e17 	ldw	r4,184(sp)
100051f4:	d9402e17 	ldw	r5,184(sp)
100051f8:	21000017 	ldw	r4,0(r4)
100051fc:	28800104 	addi	r2,r5,4
10005200:	d9003115 	stw	r4,196(sp)
10005204:	203fa716 	blt	r4,zero,100050a4 <__alt_data_end+0xf80050a4>
10005208:	d8802e15 	stw	r2,184(sp)
1000520c:	ac400007 	ldb	r17,0(r21)
10005210:	003f4206 	br	10004f1c <__alt_data_end+0xf8004f1c>
10005214:	ac400007 	ldb	r17,0(r21)
10005218:	01000a84 	movi	r4,42
1000521c:	a8c00044 	addi	r3,r21,1
10005220:	89075826 	beq	r17,r4,10006f84 <___vfprintf_internal_r+0x21f0>
10005224:	8cbff404 	addi	r18,r17,-48
10005228:	b486ae36 	bltu	r22,r18,10006ce4 <___vfprintf_internal_r+0x1f50>
1000522c:	0009883a 	mov	r4,zero
10005230:	1823883a 	mov	r17,r3
10005234:	01400284 	movi	r5,10
10005238:	0004b940 	call	10004b94 <__mulsi3>
1000523c:	88c00007 	ldb	r3,0(r17)
10005240:	1489883a 	add	r4,r2,r18
10005244:	8d400044 	addi	r21,r17,1
10005248:	1cbff404 	addi	r18,r3,-48
1000524c:	a823883a 	mov	r17,r21
10005250:	b4bff82e 	bgeu	r22,r18,10005234 <__alt_data_end+0xf8005234>
10005254:	1823883a 	mov	r17,r3
10005258:	2005f616 	blt	r4,zero,10006a34 <___vfprintf_internal_r+0x1ca0>
1000525c:	d9002a15 	stw	r4,168(sp)
10005260:	003f2f06 	br	10004f20 <__alt_data_end+0xf8004f20>
10005264:	84002014 	ori	r16,r16,128
10005268:	ac400007 	ldb	r17,0(r21)
1000526c:	003f2b06 	br	10004f1c <__alt_data_end+0xf8004f1c>
10005270:	8cbff404 	addi	r18,r17,-48
10005274:	d8003115 	stw	zero,196(sp)
10005278:	0009883a 	mov	r4,zero
1000527c:	a823883a 	mov	r17,r21
10005280:	01400284 	movi	r5,10
10005284:	0004b940 	call	10004b94 <__mulsi3>
10005288:	88c00007 	ldb	r3,0(r17)
1000528c:	9089883a 	add	r4,r18,r2
10005290:	ad400044 	addi	r21,r21,1
10005294:	1cbff404 	addi	r18,r3,-48
10005298:	a823883a 	mov	r17,r21
1000529c:	b4bff82e 	bgeu	r22,r18,10005280 <__alt_data_end+0xf8005280>
100052a0:	1823883a 	mov	r17,r3
100052a4:	d9003115 	stw	r4,196(sp)
100052a8:	003f1d06 	br	10004f20 <__alt_data_end+0xf8004f20>
100052ac:	8025883a 	mov	r18,r16
100052b0:	dc002903 	ldbu	r16,164(sp)
100052b4:	e011883a 	mov	r8,fp
100052b8:	84003fcc 	andi	r16,r16,255
100052bc:	8007531e 	bne	r16,zero,1000700c <___vfprintf_internal_r+0x2278>
100052c0:	94800414 	ori	r18,r18,16
100052c4:	9080080c 	andi	r2,r18,32
100052c8:	1003a326 	beq	r2,zero,10006158 <___vfprintf_internal_r+0x13c4>
100052cc:	d9002e17 	ldw	r4,184(sp)
100052d0:	20800117 	ldw	r2,4(r4)
100052d4:	24c00017 	ldw	r19,0(r4)
100052d8:	21000204 	addi	r4,r4,8
100052dc:	d9002e15 	stw	r4,184(sp)
100052e0:	102d883a 	mov	r22,r2
100052e4:	10047316 	blt	r2,zero,100064b4 <___vfprintf_internal_r+0x1720>
100052e8:	d9002a17 	ldw	r4,168(sp)
100052ec:	df002783 	ldbu	fp,158(sp)
100052f0:	2003e416 	blt	r4,zero,10006284 <___vfprintf_internal_r+0x14f0>
100052f4:	00ffdfc4 	movi	r3,-129
100052f8:	9d84b03a 	or	r2,r19,r22
100052fc:	90e4703a 	and	r18,r18,r3
10005300:	10018026 	beq	r2,zero,10005904 <___vfprintf_internal_r+0xb70>
10005304:	b003ab26 	beq	r22,zero,100061b4 <___vfprintf_internal_r+0x1420>
10005308:	dc402915 	stw	r17,164(sp)
1000530c:	dc001e04 	addi	r16,sp,120
10005310:	b023883a 	mov	r17,r22
10005314:	402d883a 	mov	r22,r8
10005318:	9809883a 	mov	r4,r19
1000531c:	880b883a 	mov	r5,r17
10005320:	01800284 	movi	r6,10
10005324:	000f883a 	mov	r7,zero
10005328:	000eab80 	call	1000eab8 <__umoddi3>
1000532c:	10800c04 	addi	r2,r2,48
10005330:	843fffc4 	addi	r16,r16,-1
10005334:	9809883a 	mov	r4,r19
10005338:	880b883a 	mov	r5,r17
1000533c:	80800005 	stb	r2,0(r16)
10005340:	01800284 	movi	r6,10
10005344:	000f883a 	mov	r7,zero
10005348:	000e4bc0 	call	1000e4bc <__udivdi3>
1000534c:	1027883a 	mov	r19,r2
10005350:	10c4b03a 	or	r2,r2,r3
10005354:	1823883a 	mov	r17,r3
10005358:	103fef1e 	bne	r2,zero,10005318 <__alt_data_end+0xf8005318>
1000535c:	d8c02817 	ldw	r3,160(sp)
10005360:	dc402917 	ldw	r17,164(sp)
10005364:	b011883a 	mov	r8,r22
10005368:	1c07c83a 	sub	r3,r3,r16
1000536c:	d8c02b15 	stw	r3,172(sp)
10005370:	00005f06 	br	100054f0 <___vfprintf_internal_r+0x75c>
10005374:	8025883a 	mov	r18,r16
10005378:	dc002903 	ldbu	r16,164(sp)
1000537c:	e011883a 	mov	r8,fp
10005380:	84003fcc 	andi	r16,r16,255
10005384:	80071e1e 	bne	r16,zero,10007000 <___vfprintf_internal_r+0x226c>
10005388:	9080020c 	andi	r2,r18,8
1000538c:	1004af26 	beq	r2,zero,1000664c <___vfprintf_internal_r+0x18b8>
10005390:	d9002e17 	ldw	r4,184(sp)
10005394:	d9402e17 	ldw	r5,184(sp)
10005398:	d8802e17 	ldw	r2,184(sp)
1000539c:	21000017 	ldw	r4,0(r4)
100053a0:	29400117 	ldw	r5,4(r5)
100053a4:	10800204 	addi	r2,r2,8
100053a8:	d9003615 	stw	r4,216(sp)
100053ac:	d9403815 	stw	r5,224(sp)
100053b0:	d8802e15 	stw	r2,184(sp)
100053b4:	d9003617 	ldw	r4,216(sp)
100053b8:	d9403817 	ldw	r5,224(sp)
100053bc:	da003d15 	stw	r8,244(sp)
100053c0:	04000044 	movi	r16,1
100053c4:	000c1980 	call	1000c198 <__fpclassifyd>
100053c8:	da003d17 	ldw	r8,244(sp)
100053cc:	1404441e 	bne	r2,r16,100064e0 <___vfprintf_internal_r+0x174c>
100053d0:	d9003617 	ldw	r4,216(sp)
100053d4:	d9403817 	ldw	r5,224(sp)
100053d8:	000d883a 	mov	r6,zero
100053dc:	000f883a 	mov	r7,zero
100053e0:	001045c0 	call	1001045c <__ledf2>
100053e4:	da003d17 	ldw	r8,244(sp)
100053e8:	1005e316 	blt	r2,zero,10006b78 <___vfprintf_internal_r+0x1de4>
100053ec:	df002783 	ldbu	fp,158(sp)
100053f0:	008011c4 	movi	r2,71
100053f4:	1445580e 	bge	r2,r17,10006958 <___vfprintf_internal_r+0x1bc4>
100053f8:	04040074 	movhi	r16,4097
100053fc:	84126504 	addi	r16,r16,18836
10005400:	00c000c4 	movi	r3,3
10005404:	00bfdfc4 	movi	r2,-129
10005408:	d8c02915 	stw	r3,164(sp)
1000540c:	90a4703a 	and	r18,r18,r2
10005410:	d8c02b15 	stw	r3,172(sp)
10005414:	d8002a15 	stw	zero,168(sp)
10005418:	d8003215 	stw	zero,200(sp)
1000541c:	00003a06 	br	10005508 <___vfprintf_internal_r+0x774>
10005420:	84000214 	ori	r16,r16,8
10005424:	ac400007 	ldb	r17,0(r21)
10005428:	003ebc06 	br	10004f1c <__alt_data_end+0xf8004f1c>
1000542c:	8025883a 	mov	r18,r16
10005430:	dc002903 	ldbu	r16,164(sp)
10005434:	e011883a 	mov	r8,fp
10005438:	84003fcc 	andi	r16,r16,255
1000543c:	8007001e 	bne	r16,zero,10007040 <___vfprintf_internal_r+0x22ac>
10005440:	94800414 	ori	r18,r18,16
10005444:	9080080c 	andi	r2,r18,32
10005448:	1002fa26 	beq	r2,zero,10006034 <___vfprintf_internal_r+0x12a0>
1000544c:	d9002e17 	ldw	r4,184(sp)
10005450:	d9402a17 	ldw	r5,168(sp)
10005454:	d8002785 	stb	zero,158(sp)
10005458:	20800204 	addi	r2,r4,8
1000545c:	24c00017 	ldw	r19,0(r4)
10005460:	25800117 	ldw	r22,4(r4)
10005464:	2804b116 	blt	r5,zero,1000672c <___vfprintf_internal_r+0x1998>
10005468:	013fdfc4 	movi	r4,-129
1000546c:	9d86b03a 	or	r3,r19,r22
10005470:	d8802e15 	stw	r2,184(sp)
10005474:	9124703a 	and	r18,r18,r4
10005478:	1802fb1e 	bne	r3,zero,10006068 <___vfprintf_internal_r+0x12d4>
1000547c:	d8c02a17 	ldw	r3,168(sp)
10005480:	0039883a 	mov	fp,zero
10005484:	1805e526 	beq	r3,zero,10006c1c <___vfprintf_internal_r+0x1e88>
10005488:	0027883a 	mov	r19,zero
1000548c:	002d883a 	mov	r22,zero
10005490:	dc001e04 	addi	r16,sp,120
10005494:	9806d0fa 	srli	r3,r19,3
10005498:	b008977a 	slli	r4,r22,29
1000549c:	b02cd0fa 	srli	r22,r22,3
100054a0:	9cc001cc 	andi	r19,r19,7
100054a4:	98800c04 	addi	r2,r19,48
100054a8:	843fffc4 	addi	r16,r16,-1
100054ac:	20e6b03a 	or	r19,r4,r3
100054b0:	80800005 	stb	r2,0(r16)
100054b4:	9d86b03a 	or	r3,r19,r22
100054b8:	183ff61e 	bne	r3,zero,10005494 <__alt_data_end+0xf8005494>
100054bc:	90c0004c 	andi	r3,r18,1
100054c0:	18014126 	beq	r3,zero,100059c8 <___vfprintf_internal_r+0xc34>
100054c4:	10803fcc 	andi	r2,r2,255
100054c8:	1080201c 	xori	r2,r2,128
100054cc:	10bfe004 	addi	r2,r2,-128
100054d0:	00c00c04 	movi	r3,48
100054d4:	10c13c26 	beq	r2,r3,100059c8 <___vfprintf_internal_r+0xc34>
100054d8:	80ffffc5 	stb	r3,-1(r16)
100054dc:	d8c02817 	ldw	r3,160(sp)
100054e0:	80bfffc4 	addi	r2,r16,-1
100054e4:	1021883a 	mov	r16,r2
100054e8:	1887c83a 	sub	r3,r3,r2
100054ec:	d8c02b15 	stw	r3,172(sp)
100054f0:	d8802b17 	ldw	r2,172(sp)
100054f4:	d9002a17 	ldw	r4,168(sp)
100054f8:	1100010e 	bge	r2,r4,10005500 <___vfprintf_internal_r+0x76c>
100054fc:	2005883a 	mov	r2,r4
10005500:	d8802915 	stw	r2,164(sp)
10005504:	d8003215 	stw	zero,200(sp)
10005508:	e7003fcc 	andi	fp,fp,255
1000550c:	e700201c 	xori	fp,fp,128
10005510:	e73fe004 	addi	fp,fp,-128
10005514:	e0000326 	beq	fp,zero,10005524 <___vfprintf_internal_r+0x790>
10005518:	d8c02917 	ldw	r3,164(sp)
1000551c:	18c00044 	addi	r3,r3,1
10005520:	d8c02915 	stw	r3,164(sp)
10005524:	90c0008c 	andi	r3,r18,2
10005528:	d8c02c15 	stw	r3,176(sp)
1000552c:	18000326 	beq	r3,zero,1000553c <___vfprintf_internal_r+0x7a8>
10005530:	d8c02917 	ldw	r3,164(sp)
10005534:	18c00084 	addi	r3,r3,2
10005538:	d8c02915 	stw	r3,164(sp)
1000553c:	90c0210c 	andi	r3,r18,132
10005540:	d8c03015 	stw	r3,192(sp)
10005544:	1801c51e 	bne	r3,zero,10005c5c <___vfprintf_internal_r+0xec8>
10005548:	d9003117 	ldw	r4,196(sp)
1000554c:	d8c02917 	ldw	r3,164(sp)
10005550:	20e7c83a 	sub	r19,r4,r3
10005554:	04c1c10e 	bge	zero,r19,10005c5c <___vfprintf_internal_r+0xec8>
10005558:	02400404 	movi	r9,16
1000555c:	d8c02017 	ldw	r3,128(sp)
10005560:	d8801f17 	ldw	r2,124(sp)
10005564:	4cc52f0e 	bge	r9,r19,10006a24 <___vfprintf_internal_r+0x1c90>
10005568:	01440074 	movhi	r5,4097
1000556c:	29527884 	addi	r5,r5,18914
10005570:	dc403b15 	stw	r17,236(sp)
10005574:	d9403515 	stw	r5,212(sp)
10005578:	9823883a 	mov	r17,r19
1000557c:	482d883a 	mov	r22,r9
10005580:	9027883a 	mov	r19,r18
10005584:	070001c4 	movi	fp,7
10005588:	8025883a 	mov	r18,r16
1000558c:	dc002d17 	ldw	r16,180(sp)
10005590:	00000306 	br	100055a0 <___vfprintf_internal_r+0x80c>
10005594:	8c7ffc04 	addi	r17,r17,-16
10005598:	42000204 	addi	r8,r8,8
1000559c:	b440130e 	bge	r22,r17,100055ec <___vfprintf_internal_r+0x858>
100055a0:	01040074 	movhi	r4,4097
100055a4:	18c00404 	addi	r3,r3,16
100055a8:	10800044 	addi	r2,r2,1
100055ac:	21127884 	addi	r4,r4,18914
100055b0:	41000015 	stw	r4,0(r8)
100055b4:	45800115 	stw	r22,4(r8)
100055b8:	d8c02015 	stw	r3,128(sp)
100055bc:	d8801f15 	stw	r2,124(sp)
100055c0:	e0bff40e 	bge	fp,r2,10005594 <__alt_data_end+0xf8005594>
100055c4:	d9801e04 	addi	r6,sp,120
100055c8:	b80b883a 	mov	r5,r23
100055cc:	8009883a 	mov	r4,r16
100055d0:	000c5740 	call	1000c574 <__sprint_r>
100055d4:	103ef31e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
100055d8:	8c7ffc04 	addi	r17,r17,-16
100055dc:	d8c02017 	ldw	r3,128(sp)
100055e0:	d8801f17 	ldw	r2,124(sp)
100055e4:	da000404 	addi	r8,sp,16
100055e8:	b47fed16 	blt	r22,r17,100055a0 <__alt_data_end+0xf80055a0>
100055ec:	9021883a 	mov	r16,r18
100055f0:	9825883a 	mov	r18,r19
100055f4:	8827883a 	mov	r19,r17
100055f8:	dc403b17 	ldw	r17,236(sp)
100055fc:	d9403517 	ldw	r5,212(sp)
10005600:	98c7883a 	add	r3,r19,r3
10005604:	10800044 	addi	r2,r2,1
10005608:	41400015 	stw	r5,0(r8)
1000560c:	44c00115 	stw	r19,4(r8)
10005610:	d8c02015 	stw	r3,128(sp)
10005614:	d8801f15 	stw	r2,124(sp)
10005618:	010001c4 	movi	r4,7
1000561c:	2082c516 	blt	r4,r2,10006134 <___vfprintf_internal_r+0x13a0>
10005620:	df002787 	ldb	fp,158(sp)
10005624:	42000204 	addi	r8,r8,8
10005628:	e0000c26 	beq	fp,zero,1000565c <___vfprintf_internal_r+0x8c8>
1000562c:	d8801f17 	ldw	r2,124(sp)
10005630:	d9002784 	addi	r4,sp,158
10005634:	18c00044 	addi	r3,r3,1
10005638:	10800044 	addi	r2,r2,1
1000563c:	41000015 	stw	r4,0(r8)
10005640:	01000044 	movi	r4,1
10005644:	41000115 	stw	r4,4(r8)
10005648:	d8c02015 	stw	r3,128(sp)
1000564c:	d8801f15 	stw	r2,124(sp)
10005650:	010001c4 	movi	r4,7
10005654:	20825e16 	blt	r4,r2,10005fd0 <___vfprintf_internal_r+0x123c>
10005658:	42000204 	addi	r8,r8,8
1000565c:	d8802c17 	ldw	r2,176(sp)
10005660:	10000c26 	beq	r2,zero,10005694 <___vfprintf_internal_r+0x900>
10005664:	d8801f17 	ldw	r2,124(sp)
10005668:	d9002704 	addi	r4,sp,156
1000566c:	18c00084 	addi	r3,r3,2
10005670:	10800044 	addi	r2,r2,1
10005674:	41000015 	stw	r4,0(r8)
10005678:	01000084 	movi	r4,2
1000567c:	41000115 	stw	r4,4(r8)
10005680:	d8c02015 	stw	r3,128(sp)
10005684:	d8801f15 	stw	r2,124(sp)
10005688:	010001c4 	movi	r4,7
1000568c:	20825816 	blt	r4,r2,10005ff0 <___vfprintf_internal_r+0x125c>
10005690:	42000204 	addi	r8,r8,8
10005694:	d9003017 	ldw	r4,192(sp)
10005698:	00802004 	movi	r2,128
1000569c:	2081bb26 	beq	r4,r2,10005d8c <___vfprintf_internal_r+0xff8>
100056a0:	d9402a17 	ldw	r5,168(sp)
100056a4:	d8802b17 	ldw	r2,172(sp)
100056a8:	28adc83a 	sub	r22,r5,r2
100056ac:	0580310e 	bge	zero,r22,10005774 <___vfprintf_internal_r+0x9e0>
100056b0:	07000404 	movi	fp,16
100056b4:	d8801f17 	ldw	r2,124(sp)
100056b8:	e584360e 	bge	fp,r22,10006794 <___vfprintf_internal_r+0x1a00>
100056bc:	01440074 	movhi	r5,4097
100056c0:	29527484 	addi	r5,r5,18898
100056c4:	dc402a15 	stw	r17,168(sp)
100056c8:	d9402c15 	stw	r5,176(sp)
100056cc:	b023883a 	mov	r17,r22
100056d0:	04c001c4 	movi	r19,7
100056d4:	a82d883a 	mov	r22,r21
100056d8:	902b883a 	mov	r21,r18
100056dc:	8025883a 	mov	r18,r16
100056e0:	dc002d17 	ldw	r16,180(sp)
100056e4:	00000306 	br	100056f4 <___vfprintf_internal_r+0x960>
100056e8:	8c7ffc04 	addi	r17,r17,-16
100056ec:	42000204 	addi	r8,r8,8
100056f0:	e440110e 	bge	fp,r17,10005738 <___vfprintf_internal_r+0x9a4>
100056f4:	18c00404 	addi	r3,r3,16
100056f8:	10800044 	addi	r2,r2,1
100056fc:	45000015 	stw	r20,0(r8)
10005700:	47000115 	stw	fp,4(r8)
10005704:	d8c02015 	stw	r3,128(sp)
10005708:	d8801f15 	stw	r2,124(sp)
1000570c:	98bff60e 	bge	r19,r2,100056e8 <__alt_data_end+0xf80056e8>
10005710:	d9801e04 	addi	r6,sp,120
10005714:	b80b883a 	mov	r5,r23
10005718:	8009883a 	mov	r4,r16
1000571c:	000c5740 	call	1000c574 <__sprint_r>
10005720:	103ea01e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
10005724:	8c7ffc04 	addi	r17,r17,-16
10005728:	d8c02017 	ldw	r3,128(sp)
1000572c:	d8801f17 	ldw	r2,124(sp)
10005730:	da000404 	addi	r8,sp,16
10005734:	e47fef16 	blt	fp,r17,100056f4 <__alt_data_end+0xf80056f4>
10005738:	9021883a 	mov	r16,r18
1000573c:	a825883a 	mov	r18,r21
10005740:	b02b883a 	mov	r21,r22
10005744:	882d883a 	mov	r22,r17
10005748:	dc402a17 	ldw	r17,168(sp)
1000574c:	d9002c17 	ldw	r4,176(sp)
10005750:	1d87883a 	add	r3,r3,r22
10005754:	10800044 	addi	r2,r2,1
10005758:	41000015 	stw	r4,0(r8)
1000575c:	45800115 	stw	r22,4(r8)
10005760:	d8c02015 	stw	r3,128(sp)
10005764:	d8801f15 	stw	r2,124(sp)
10005768:	010001c4 	movi	r4,7
1000576c:	20821016 	blt	r4,r2,10005fb0 <___vfprintf_internal_r+0x121c>
10005770:	42000204 	addi	r8,r8,8
10005774:	9080400c 	andi	r2,r18,256
10005778:	10013a1e 	bne	r2,zero,10005c64 <___vfprintf_internal_r+0xed0>
1000577c:	d9402b17 	ldw	r5,172(sp)
10005780:	d8801f17 	ldw	r2,124(sp)
10005784:	44000015 	stw	r16,0(r8)
10005788:	1947883a 	add	r3,r3,r5
1000578c:	10800044 	addi	r2,r2,1
10005790:	41400115 	stw	r5,4(r8)
10005794:	d8c02015 	stw	r3,128(sp)
10005798:	d8801f15 	stw	r2,124(sp)
1000579c:	010001c4 	movi	r4,7
100057a0:	2081f516 	blt	r4,r2,10005f78 <___vfprintf_internal_r+0x11e4>
100057a4:	42000204 	addi	r8,r8,8
100057a8:	9480010c 	andi	r18,r18,4
100057ac:	90003226 	beq	r18,zero,10005878 <___vfprintf_internal_r+0xae4>
100057b0:	d9403117 	ldw	r5,196(sp)
100057b4:	d8802917 	ldw	r2,164(sp)
100057b8:	28a1c83a 	sub	r16,r5,r2
100057bc:	04002e0e 	bge	zero,r16,10005878 <___vfprintf_internal_r+0xae4>
100057c0:	04400404 	movi	r17,16
100057c4:	d8801f17 	ldw	r2,124(sp)
100057c8:	8c04c40e 	bge	r17,r16,10006adc <___vfprintf_internal_r+0x1d48>
100057cc:	01440074 	movhi	r5,4097
100057d0:	29527884 	addi	r5,r5,18914
100057d4:	d9403515 	stw	r5,212(sp)
100057d8:	048001c4 	movi	r18,7
100057dc:	dcc02d17 	ldw	r19,180(sp)
100057e0:	00000306 	br	100057f0 <___vfprintf_internal_r+0xa5c>
100057e4:	843ffc04 	addi	r16,r16,-16
100057e8:	42000204 	addi	r8,r8,8
100057ec:	8c00130e 	bge	r17,r16,1000583c <___vfprintf_internal_r+0xaa8>
100057f0:	01040074 	movhi	r4,4097
100057f4:	18c00404 	addi	r3,r3,16
100057f8:	10800044 	addi	r2,r2,1
100057fc:	21127884 	addi	r4,r4,18914
10005800:	41000015 	stw	r4,0(r8)
10005804:	44400115 	stw	r17,4(r8)
10005808:	d8c02015 	stw	r3,128(sp)
1000580c:	d8801f15 	stw	r2,124(sp)
10005810:	90bff40e 	bge	r18,r2,100057e4 <__alt_data_end+0xf80057e4>
10005814:	d9801e04 	addi	r6,sp,120
10005818:	b80b883a 	mov	r5,r23
1000581c:	9809883a 	mov	r4,r19
10005820:	000c5740 	call	1000c574 <__sprint_r>
10005824:	103e5f1e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
10005828:	843ffc04 	addi	r16,r16,-16
1000582c:	d8c02017 	ldw	r3,128(sp)
10005830:	d8801f17 	ldw	r2,124(sp)
10005834:	da000404 	addi	r8,sp,16
10005838:	8c3fed16 	blt	r17,r16,100057f0 <__alt_data_end+0xf80057f0>
1000583c:	d9403517 	ldw	r5,212(sp)
10005840:	1c07883a 	add	r3,r3,r16
10005844:	10800044 	addi	r2,r2,1
10005848:	41400015 	stw	r5,0(r8)
1000584c:	44000115 	stw	r16,4(r8)
10005850:	d8c02015 	stw	r3,128(sp)
10005854:	d8801f15 	stw	r2,124(sp)
10005858:	010001c4 	movi	r4,7
1000585c:	2080060e 	bge	r4,r2,10005878 <___vfprintf_internal_r+0xae4>
10005860:	d9002d17 	ldw	r4,180(sp)
10005864:	d9801e04 	addi	r6,sp,120
10005868:	b80b883a 	mov	r5,r23
1000586c:	000c5740 	call	1000c574 <__sprint_r>
10005870:	103e4c1e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
10005874:	d8c02017 	ldw	r3,128(sp)
10005878:	d8803117 	ldw	r2,196(sp)
1000587c:	d9002917 	ldw	r4,164(sp)
10005880:	1100010e 	bge	r2,r4,10005888 <___vfprintf_internal_r+0xaf4>
10005884:	2005883a 	mov	r2,r4
10005888:	d9402f17 	ldw	r5,188(sp)
1000588c:	288b883a 	add	r5,r5,r2
10005890:	d9402f15 	stw	r5,188(sp)
10005894:	1801c01e 	bne	r3,zero,10005f98 <___vfprintf_internal_r+0x1204>
10005898:	a8800007 	ldb	r2,0(r21)
1000589c:	d8001f15 	stw	zero,124(sp)
100058a0:	da000404 	addi	r8,sp,16
100058a4:	103d751e 	bne	r2,zero,10004e7c <__alt_data_end+0xf8004e7c>
100058a8:	a823883a 	mov	r17,r21
100058ac:	003d8b06 	br	10004edc <__alt_data_end+0xf8004edc>
100058b0:	8025883a 	mov	r18,r16
100058b4:	dc002903 	ldbu	r16,164(sp)
100058b8:	e011883a 	mov	r8,fp
100058bc:	84003fcc 	andi	r16,r16,255
100058c0:	8005e51e 	bne	r16,zero,10007058 <___vfprintf_internal_r+0x22c4>
100058c4:	94800414 	ori	r18,r18,16
100058c8:	9080080c 	andi	r2,r18,32
100058cc:	10022b26 	beq	r2,zero,1000617c <___vfprintf_internal_r+0x13e8>
100058d0:	d9002e17 	ldw	r4,184(sp)
100058d4:	d9402a17 	ldw	r5,168(sp)
100058d8:	d8002785 	stb	zero,158(sp)
100058dc:	20c00204 	addi	r3,r4,8
100058e0:	24c00017 	ldw	r19,0(r4)
100058e4:	25800117 	ldw	r22,4(r4)
100058e8:	28042e16 	blt	r5,zero,100069a4 <___vfprintf_internal_r+0x1c10>
100058ec:	013fdfc4 	movi	r4,-129
100058f0:	9d84b03a 	or	r2,r19,r22
100058f4:	d8c02e15 	stw	r3,184(sp)
100058f8:	9124703a 	and	r18,r18,r4
100058fc:	0039883a 	mov	fp,zero
10005900:	103e801e 	bne	r2,zero,10005304 <__alt_data_end+0xf8005304>
10005904:	d9002a17 	ldw	r4,168(sp)
10005908:	2002e01e 	bne	r4,zero,1000648c <___vfprintf_internal_r+0x16f8>
1000590c:	d8002a15 	stw	zero,168(sp)
10005910:	d8002b15 	stw	zero,172(sp)
10005914:	dc001e04 	addi	r16,sp,120
10005918:	003ef506 	br	100054f0 <__alt_data_end+0xf80054f0>
1000591c:	8025883a 	mov	r18,r16
10005920:	dc002903 	ldbu	r16,164(sp)
10005924:	e011883a 	mov	r8,fp
10005928:	84003fcc 	andi	r16,r16,255
1000592c:	8005ba1e 	bne	r16,zero,10007018 <___vfprintf_internal_r+0x2284>
10005930:	01040074 	movhi	r4,4097
10005934:	21126804 	addi	r4,r4,18848
10005938:	d9003915 	stw	r4,228(sp)
1000593c:	9080080c 	andi	r2,r18,32
10005940:	10006126 	beq	r2,zero,10005ac8 <___vfprintf_internal_r+0xd34>
10005944:	d9402e17 	ldw	r5,184(sp)
10005948:	2cc00017 	ldw	r19,0(r5)
1000594c:	2d800117 	ldw	r22,4(r5)
10005950:	29400204 	addi	r5,r5,8
10005954:	d9402e15 	stw	r5,184(sp)
10005958:	9080004c 	andi	r2,r18,1
1000595c:	1001ac26 	beq	r2,zero,10006010 <___vfprintf_internal_r+0x127c>
10005960:	9d84b03a 	or	r2,r19,r22
10005964:	10038526 	beq	r2,zero,1000677c <___vfprintf_internal_r+0x19e8>
10005968:	d8c02a17 	ldw	r3,168(sp)
1000596c:	00800c04 	movi	r2,48
10005970:	d8802705 	stb	r2,156(sp)
10005974:	dc402745 	stb	r17,157(sp)
10005978:	d8002785 	stb	zero,158(sp)
1000597c:	90800094 	ori	r2,r18,2
10005980:	18047916 	blt	r3,zero,10006b68 <___vfprintf_internal_r+0x1dd4>
10005984:	00bfdfc4 	movi	r2,-129
10005988:	90a4703a 	and	r18,r18,r2
1000598c:	94800094 	ori	r18,r18,2
10005990:	0039883a 	mov	fp,zero
10005994:	d9003917 	ldw	r4,228(sp)
10005998:	dc001e04 	addi	r16,sp,120
1000599c:	988003cc 	andi	r2,r19,15
100059a0:	b006973a 	slli	r3,r22,28
100059a4:	2085883a 	add	r2,r4,r2
100059a8:	9826d13a 	srli	r19,r19,4
100059ac:	10800003 	ldbu	r2,0(r2)
100059b0:	b02cd13a 	srli	r22,r22,4
100059b4:	843fffc4 	addi	r16,r16,-1
100059b8:	1ce6b03a 	or	r19,r3,r19
100059bc:	80800005 	stb	r2,0(r16)
100059c0:	9d84b03a 	or	r2,r19,r22
100059c4:	103ff51e 	bne	r2,zero,1000599c <__alt_data_end+0xf800599c>
100059c8:	d8c02817 	ldw	r3,160(sp)
100059cc:	1c07c83a 	sub	r3,r3,r16
100059d0:	d8c02b15 	stw	r3,172(sp)
100059d4:	003ec606 	br	100054f0 <__alt_data_end+0xf80054f0>
100059d8:	8025883a 	mov	r18,r16
100059dc:	dc002903 	ldbu	r16,164(sp)
100059e0:	e011883a 	mov	r8,fp
100059e4:	84003fcc 	andi	r16,r16,255
100059e8:	803e9626 	beq	r16,zero,10005444 <__alt_data_end+0xf8005444>
100059ec:	d8c02b03 	ldbu	r3,172(sp)
100059f0:	d8c02785 	stb	r3,158(sp)
100059f4:	003e9306 	br	10005444 <__alt_data_end+0xf8005444>
100059f8:	00c00044 	movi	r3,1
100059fc:	d8c02905 	stb	r3,164(sp)
10005a00:	00c00ac4 	movi	r3,43
10005a04:	d8c02b05 	stb	r3,172(sp)
10005a08:	ac400007 	ldb	r17,0(r21)
10005a0c:	003d4306 	br	10004f1c <__alt_data_end+0xf8004f1c>
10005a10:	84000814 	ori	r16,r16,32
10005a14:	ac400007 	ldb	r17,0(r21)
10005a18:	003d4006 	br	10004f1c <__alt_data_end+0xf8004f1c>
10005a1c:	d8802e17 	ldw	r2,184(sp)
10005a20:	8025883a 	mov	r18,r16
10005a24:	d8002785 	stb	zero,158(sp)
10005a28:	14000017 	ldw	r16,0(r2)
10005a2c:	e011883a 	mov	r8,fp
10005a30:	14c00104 	addi	r19,r2,4
10005a34:	80042d26 	beq	r16,zero,10006aec <___vfprintf_internal_r+0x1d58>
10005a38:	d8c02a17 	ldw	r3,168(sp)
10005a3c:	1803e416 	blt	r3,zero,100069d0 <___vfprintf_internal_r+0x1c3c>
10005a40:	180d883a 	mov	r6,r3
10005a44:	000b883a 	mov	r5,zero
10005a48:	8009883a 	mov	r4,r16
10005a4c:	df003d15 	stw	fp,244(sp)
10005a50:	000a6cc0 	call	1000a6cc <memchr>
10005a54:	da003d17 	ldw	r8,244(sp)
10005a58:	10046826 	beq	r2,zero,10006bfc <___vfprintf_internal_r+0x1e68>
10005a5c:	1405c83a 	sub	r2,r2,r16
10005a60:	d8802b15 	stw	r2,172(sp)
10005a64:	1003e016 	blt	r2,zero,100069e8 <___vfprintf_internal_r+0x1c54>
10005a68:	df002783 	ldbu	fp,158(sp)
10005a6c:	d8802915 	stw	r2,164(sp)
10005a70:	dcc02e15 	stw	r19,184(sp)
10005a74:	d8002a15 	stw	zero,168(sp)
10005a78:	d8003215 	stw	zero,200(sp)
10005a7c:	003ea206 	br	10005508 <__alt_data_end+0xf8005508>
10005a80:	8025883a 	mov	r18,r16
10005a84:	dc002903 	ldbu	r16,164(sp)
10005a88:	e011883a 	mov	r8,fp
10005a8c:	84003fcc 	andi	r16,r16,255
10005a90:	803f8d26 	beq	r16,zero,100058c8 <__alt_data_end+0xf80058c8>
10005a94:	d8c02b03 	ldbu	r3,172(sp)
10005a98:	d8c02785 	stb	r3,158(sp)
10005a9c:	003f8a06 	br	100058c8 <__alt_data_end+0xf80058c8>
10005aa0:	8025883a 	mov	r18,r16
10005aa4:	dc002903 	ldbu	r16,164(sp)
10005aa8:	e011883a 	mov	r8,fp
10005aac:	84003fcc 	andi	r16,r16,255
10005ab0:	8005661e 	bne	r16,zero,1000704c <___vfprintf_internal_r+0x22b8>
10005ab4:	01040074 	movhi	r4,4097
10005ab8:	21126d04 	addi	r4,r4,18868
10005abc:	d9003915 	stw	r4,228(sp)
10005ac0:	9080080c 	andi	r2,r18,32
10005ac4:	103f9f1e 	bne	r2,zero,10005944 <__alt_data_end+0xf8005944>
10005ac8:	9080040c 	andi	r2,r18,16
10005acc:	1002eb26 	beq	r2,zero,1000667c <___vfprintf_internal_r+0x18e8>
10005ad0:	d8802e17 	ldw	r2,184(sp)
10005ad4:	002d883a 	mov	r22,zero
10005ad8:	14c00017 	ldw	r19,0(r2)
10005adc:	10800104 	addi	r2,r2,4
10005ae0:	d8802e15 	stw	r2,184(sp)
10005ae4:	003f9c06 	br	10005958 <__alt_data_end+0xf8005958>
10005ae8:	d8802b07 	ldb	r2,172(sp)
10005aec:	1002e11e 	bne	r2,zero,10006674 <___vfprintf_internal_r+0x18e0>
10005af0:	00c00044 	movi	r3,1
10005af4:	d8c02905 	stb	r3,164(sp)
10005af8:	00c00804 	movi	r3,32
10005afc:	d8c02b05 	stb	r3,172(sp)
10005b00:	ac400007 	ldb	r17,0(r21)
10005b04:	003d0506 	br	10004f1c <__alt_data_end+0xf8004f1c>
10005b08:	84000054 	ori	r16,r16,1
10005b0c:	ac400007 	ldb	r17,0(r21)
10005b10:	003d0206 	br	10004f1c <__alt_data_end+0xf8004f1c>
10005b14:	8025883a 	mov	r18,r16
10005b18:	dc002903 	ldbu	r16,164(sp)
10005b1c:	e011883a 	mov	r8,fp
10005b20:	84003fcc 	andi	r16,r16,255
10005b24:	803de726 	beq	r16,zero,100052c4 <__alt_data_end+0xf80052c4>
10005b28:	d8c02b03 	ldbu	r3,172(sp)
10005b2c:	d8c02785 	stb	r3,158(sp)
10005b30:	003de406 	br	100052c4 <__alt_data_end+0xf80052c4>
10005b34:	84001014 	ori	r16,r16,64
10005b38:	ac400007 	ldb	r17,0(r21)
10005b3c:	003cf706 	br	10004f1c <__alt_data_end+0xf8004f1c>
10005b40:	ac400007 	ldb	r17,0(r21)
10005b44:	00801b04 	movi	r2,108
10005b48:	88838f26 	beq	r17,r2,10006988 <___vfprintf_internal_r+0x1bf4>
10005b4c:	84000414 	ori	r16,r16,16
10005b50:	003cf206 	br	10004f1c <__alt_data_end+0xf8004f1c>
10005b54:	8025883a 	mov	r18,r16
10005b58:	dc002903 	ldbu	r16,164(sp)
10005b5c:	e011883a 	mov	r8,fp
10005b60:	84003fcc 	andi	r16,r16,255
10005b64:	80053f1e 	bne	r16,zero,10007064 <___vfprintf_internal_r+0x22d0>
10005b68:	9080080c 	andi	r2,r18,32
10005b6c:	1002d226 	beq	r2,zero,100066b8 <___vfprintf_internal_r+0x1924>
10005b70:	d9002e17 	ldw	r4,184(sp)
10005b74:	d9402f17 	ldw	r5,188(sp)
10005b78:	20800017 	ldw	r2,0(r4)
10005b7c:	2807d7fa 	srai	r3,r5,31
10005b80:	21000104 	addi	r4,r4,4
10005b84:	d9002e15 	stw	r4,184(sp)
10005b88:	11400015 	stw	r5,0(r2)
10005b8c:	10c00115 	stw	r3,4(r2)
10005b90:	003cb806 	br	10004e74 <__alt_data_end+0xf8004e74>
10005b94:	d8c02e17 	ldw	r3,184(sp)
10005b98:	d9002e17 	ldw	r4,184(sp)
10005b9c:	8025883a 	mov	r18,r16
10005ba0:	18800017 	ldw	r2,0(r3)
10005ba4:	21000104 	addi	r4,r4,4
10005ba8:	00c00044 	movi	r3,1
10005bac:	e011883a 	mov	r8,fp
10005bb0:	d8c02915 	stw	r3,164(sp)
10005bb4:	d8002785 	stb	zero,158(sp)
10005bb8:	d8801405 	stb	r2,80(sp)
10005bbc:	d9002e15 	stw	r4,184(sp)
10005bc0:	d8c02b15 	stw	r3,172(sp)
10005bc4:	d8002a15 	stw	zero,168(sp)
10005bc8:	d8003215 	stw	zero,200(sp)
10005bcc:	dc001404 	addi	r16,sp,80
10005bd0:	0039883a 	mov	fp,zero
10005bd4:	003e5306 	br	10005524 <__alt_data_end+0xf8005524>
10005bd8:	01040074 	movhi	r4,4097
10005bdc:	21126d04 	addi	r4,r4,18868
10005be0:	0039883a 	mov	fp,zero
10005be4:	d9003915 	stw	r4,228(sp)
10005be8:	04401e04 	movi	r17,120
10005bec:	003f6906 	br	10005994 <__alt_data_end+0xf8005994>
10005bf0:	8025883a 	mov	r18,r16
10005bf4:	dc002903 	ldbu	r16,164(sp)
10005bf8:	e011883a 	mov	r8,fp
10005bfc:	84003fcc 	andi	r16,r16,255
10005c00:	8005081e 	bne	r16,zero,10007024 <___vfprintf_internal_r+0x2290>
10005c04:	883d6126 	beq	r17,zero,1000518c <__alt_data_end+0xf800518c>
10005c08:	00c00044 	movi	r3,1
10005c0c:	d8c02915 	stw	r3,164(sp)
10005c10:	dc401405 	stb	r17,80(sp)
10005c14:	d8002785 	stb	zero,158(sp)
10005c18:	003fe906 	br	10005bc0 <__alt_data_end+0xf8005bc0>
10005c1c:	01440074 	movhi	r5,4097
10005c20:	29526d04 	addi	r5,r5,18868
10005c24:	d9403915 	stw	r5,228(sp)
10005c28:	d8c02e15 	stw	r3,184(sp)
10005c2c:	1025883a 	mov	r18,r2
10005c30:	04401e04 	movi	r17,120
10005c34:	9d84b03a 	or	r2,r19,r22
10005c38:	1000fc1e 	bne	r2,zero,1000602c <___vfprintf_internal_r+0x1298>
10005c3c:	0039883a 	mov	fp,zero
10005c40:	00800084 	movi	r2,2
10005c44:	10803fcc 	andi	r2,r2,255
10005c48:	00c00044 	movi	r3,1
10005c4c:	10c20f26 	beq	r2,r3,1000648c <___vfprintf_internal_r+0x16f8>
10005c50:	00c00084 	movi	r3,2
10005c54:	10fd3326 	beq	r2,r3,10005124 <__alt_data_end+0xf8005124>
10005c58:	003e0b06 	br	10005488 <__alt_data_end+0xf8005488>
10005c5c:	d8c02017 	ldw	r3,128(sp)
10005c60:	003e7106 	br	10005628 <__alt_data_end+0xf8005628>
10005c64:	00801944 	movi	r2,101
10005c68:	14407e0e 	bge	r2,r17,10005e64 <___vfprintf_internal_r+0x10d0>
10005c6c:	d9003617 	ldw	r4,216(sp)
10005c70:	d9403817 	ldw	r5,224(sp)
10005c74:	000d883a 	mov	r6,zero
10005c78:	000f883a 	mov	r7,zero
10005c7c:	d8c03c15 	stw	r3,240(sp)
10005c80:	da003d15 	stw	r8,244(sp)
10005c84:	00102f80 	call	100102f8 <__eqdf2>
10005c88:	d8c03c17 	ldw	r3,240(sp)
10005c8c:	da003d17 	ldw	r8,244(sp)
10005c90:	1000f71e 	bne	r2,zero,10006070 <___vfprintf_internal_r+0x12dc>
10005c94:	d8801f17 	ldw	r2,124(sp)
10005c98:	01040074 	movhi	r4,4097
10005c9c:	21127404 	addi	r4,r4,18896
10005ca0:	18c00044 	addi	r3,r3,1
10005ca4:	10800044 	addi	r2,r2,1
10005ca8:	41000015 	stw	r4,0(r8)
10005cac:	01000044 	movi	r4,1
10005cb0:	41000115 	stw	r4,4(r8)
10005cb4:	d8c02015 	stw	r3,128(sp)
10005cb8:	d8801f15 	stw	r2,124(sp)
10005cbc:	010001c4 	movi	r4,7
10005cc0:	2082b816 	blt	r4,r2,100067a4 <___vfprintf_internal_r+0x1a10>
10005cc4:	42000204 	addi	r8,r8,8
10005cc8:	d8802617 	ldw	r2,152(sp)
10005ccc:	d9403317 	ldw	r5,204(sp)
10005cd0:	11400216 	blt	r2,r5,10005cdc <___vfprintf_internal_r+0xf48>
10005cd4:	9080004c 	andi	r2,r18,1
10005cd8:	103eb326 	beq	r2,zero,100057a8 <__alt_data_end+0xf80057a8>
10005cdc:	d8803717 	ldw	r2,220(sp)
10005ce0:	d9003417 	ldw	r4,208(sp)
10005ce4:	d9403717 	ldw	r5,220(sp)
10005ce8:	1887883a 	add	r3,r3,r2
10005cec:	d8801f17 	ldw	r2,124(sp)
10005cf0:	41000015 	stw	r4,0(r8)
10005cf4:	41400115 	stw	r5,4(r8)
10005cf8:	10800044 	addi	r2,r2,1
10005cfc:	d8c02015 	stw	r3,128(sp)
10005d00:	d8801f15 	stw	r2,124(sp)
10005d04:	010001c4 	movi	r4,7
10005d08:	20832916 	blt	r4,r2,100069b0 <___vfprintf_internal_r+0x1c1c>
10005d0c:	42000204 	addi	r8,r8,8
10005d10:	d8803317 	ldw	r2,204(sp)
10005d14:	143fffc4 	addi	r16,r2,-1
10005d18:	043ea30e 	bge	zero,r16,100057a8 <__alt_data_end+0xf80057a8>
10005d1c:	04400404 	movi	r17,16
10005d20:	d8801f17 	ldw	r2,124(sp)
10005d24:	8c00880e 	bge	r17,r16,10005f48 <___vfprintf_internal_r+0x11b4>
10005d28:	01440074 	movhi	r5,4097
10005d2c:	29527484 	addi	r5,r5,18898
10005d30:	d9402c15 	stw	r5,176(sp)
10005d34:	058001c4 	movi	r22,7
10005d38:	dcc02d17 	ldw	r19,180(sp)
10005d3c:	00000306 	br	10005d4c <___vfprintf_internal_r+0xfb8>
10005d40:	42000204 	addi	r8,r8,8
10005d44:	843ffc04 	addi	r16,r16,-16
10005d48:	8c00820e 	bge	r17,r16,10005f54 <___vfprintf_internal_r+0x11c0>
10005d4c:	18c00404 	addi	r3,r3,16
10005d50:	10800044 	addi	r2,r2,1
10005d54:	45000015 	stw	r20,0(r8)
10005d58:	44400115 	stw	r17,4(r8)
10005d5c:	d8c02015 	stw	r3,128(sp)
10005d60:	d8801f15 	stw	r2,124(sp)
10005d64:	b0bff60e 	bge	r22,r2,10005d40 <__alt_data_end+0xf8005d40>
10005d68:	d9801e04 	addi	r6,sp,120
10005d6c:	b80b883a 	mov	r5,r23
10005d70:	9809883a 	mov	r4,r19
10005d74:	000c5740 	call	1000c574 <__sprint_r>
10005d78:	103d0a1e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
10005d7c:	d8c02017 	ldw	r3,128(sp)
10005d80:	d8801f17 	ldw	r2,124(sp)
10005d84:	da000404 	addi	r8,sp,16
10005d88:	003fee06 	br	10005d44 <__alt_data_end+0xf8005d44>
10005d8c:	d9403117 	ldw	r5,196(sp)
10005d90:	d8802917 	ldw	r2,164(sp)
10005d94:	28adc83a 	sub	r22,r5,r2
10005d98:	05be410e 	bge	zero,r22,100056a0 <__alt_data_end+0xf80056a0>
10005d9c:	07000404 	movi	fp,16
10005da0:	d8801f17 	ldw	r2,124(sp)
10005da4:	e5838f0e 	bge	fp,r22,10006be4 <___vfprintf_internal_r+0x1e50>
10005da8:	01440074 	movhi	r5,4097
10005dac:	29527484 	addi	r5,r5,18898
10005db0:	dc403015 	stw	r17,192(sp)
10005db4:	d9402c15 	stw	r5,176(sp)
10005db8:	b023883a 	mov	r17,r22
10005dbc:	04c001c4 	movi	r19,7
10005dc0:	a82d883a 	mov	r22,r21
10005dc4:	902b883a 	mov	r21,r18
10005dc8:	8025883a 	mov	r18,r16
10005dcc:	dc002d17 	ldw	r16,180(sp)
10005dd0:	00000306 	br	10005de0 <___vfprintf_internal_r+0x104c>
10005dd4:	8c7ffc04 	addi	r17,r17,-16
10005dd8:	42000204 	addi	r8,r8,8
10005ddc:	e440110e 	bge	fp,r17,10005e24 <___vfprintf_internal_r+0x1090>
10005de0:	18c00404 	addi	r3,r3,16
10005de4:	10800044 	addi	r2,r2,1
10005de8:	45000015 	stw	r20,0(r8)
10005dec:	47000115 	stw	fp,4(r8)
10005df0:	d8c02015 	stw	r3,128(sp)
10005df4:	d8801f15 	stw	r2,124(sp)
10005df8:	98bff60e 	bge	r19,r2,10005dd4 <__alt_data_end+0xf8005dd4>
10005dfc:	d9801e04 	addi	r6,sp,120
10005e00:	b80b883a 	mov	r5,r23
10005e04:	8009883a 	mov	r4,r16
10005e08:	000c5740 	call	1000c574 <__sprint_r>
10005e0c:	103ce51e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
10005e10:	8c7ffc04 	addi	r17,r17,-16
10005e14:	d8c02017 	ldw	r3,128(sp)
10005e18:	d8801f17 	ldw	r2,124(sp)
10005e1c:	da000404 	addi	r8,sp,16
10005e20:	e47fef16 	blt	fp,r17,10005de0 <__alt_data_end+0xf8005de0>
10005e24:	9021883a 	mov	r16,r18
10005e28:	a825883a 	mov	r18,r21
10005e2c:	b02b883a 	mov	r21,r22
10005e30:	882d883a 	mov	r22,r17
10005e34:	dc403017 	ldw	r17,192(sp)
10005e38:	d9002c17 	ldw	r4,176(sp)
10005e3c:	1d87883a 	add	r3,r3,r22
10005e40:	10800044 	addi	r2,r2,1
10005e44:	41000015 	stw	r4,0(r8)
10005e48:	45800115 	stw	r22,4(r8)
10005e4c:	d8c02015 	stw	r3,128(sp)
10005e50:	d8801f15 	stw	r2,124(sp)
10005e54:	010001c4 	movi	r4,7
10005e58:	20818e16 	blt	r4,r2,10006494 <___vfprintf_internal_r+0x1700>
10005e5c:	42000204 	addi	r8,r8,8
10005e60:	003e0f06 	br	100056a0 <__alt_data_end+0xf80056a0>
10005e64:	d9403317 	ldw	r5,204(sp)
10005e68:	00800044 	movi	r2,1
10005e6c:	18c00044 	addi	r3,r3,1
10005e70:	1141530e 	bge	r2,r5,100063c0 <___vfprintf_internal_r+0x162c>
10005e74:	dc401f17 	ldw	r17,124(sp)
10005e78:	00800044 	movi	r2,1
10005e7c:	40800115 	stw	r2,4(r8)
10005e80:	8c400044 	addi	r17,r17,1
10005e84:	44000015 	stw	r16,0(r8)
10005e88:	d8c02015 	stw	r3,128(sp)
10005e8c:	dc401f15 	stw	r17,124(sp)
10005e90:	008001c4 	movi	r2,7
10005e94:	14416b16 	blt	r2,r17,10006444 <___vfprintf_internal_r+0x16b0>
10005e98:	42000204 	addi	r8,r8,8
10005e9c:	d8803717 	ldw	r2,220(sp)
10005ea0:	d9003417 	ldw	r4,208(sp)
10005ea4:	8c400044 	addi	r17,r17,1
10005ea8:	10c7883a 	add	r3,r2,r3
10005eac:	40800115 	stw	r2,4(r8)
10005eb0:	41000015 	stw	r4,0(r8)
10005eb4:	d8c02015 	stw	r3,128(sp)
10005eb8:	dc401f15 	stw	r17,124(sp)
10005ebc:	008001c4 	movi	r2,7
10005ec0:	14416916 	blt	r2,r17,10006468 <___vfprintf_internal_r+0x16d4>
10005ec4:	45800204 	addi	r22,r8,8
10005ec8:	d9003617 	ldw	r4,216(sp)
10005ecc:	d9403817 	ldw	r5,224(sp)
10005ed0:	000d883a 	mov	r6,zero
10005ed4:	000f883a 	mov	r7,zero
10005ed8:	d8c03c15 	stw	r3,240(sp)
10005edc:	00102f80 	call	100102f8 <__eqdf2>
10005ee0:	d8c03c17 	ldw	r3,240(sp)
10005ee4:	1000bc26 	beq	r2,zero,100061d8 <___vfprintf_internal_r+0x1444>
10005ee8:	d9403317 	ldw	r5,204(sp)
10005eec:	84000044 	addi	r16,r16,1
10005ef0:	8c400044 	addi	r17,r17,1
10005ef4:	28bfffc4 	addi	r2,r5,-1
10005ef8:	1887883a 	add	r3,r3,r2
10005efc:	b0800115 	stw	r2,4(r22)
10005f00:	b4000015 	stw	r16,0(r22)
10005f04:	d8c02015 	stw	r3,128(sp)
10005f08:	dc401f15 	stw	r17,124(sp)
10005f0c:	008001c4 	movi	r2,7
10005f10:	14414316 	blt	r2,r17,10006420 <___vfprintf_internal_r+0x168c>
10005f14:	b5800204 	addi	r22,r22,8
10005f18:	d9003a17 	ldw	r4,232(sp)
10005f1c:	df0022c4 	addi	fp,sp,139
10005f20:	8c400044 	addi	r17,r17,1
10005f24:	20c7883a 	add	r3,r4,r3
10005f28:	b7000015 	stw	fp,0(r22)
10005f2c:	b1000115 	stw	r4,4(r22)
10005f30:	d8c02015 	stw	r3,128(sp)
10005f34:	dc401f15 	stw	r17,124(sp)
10005f38:	008001c4 	movi	r2,7
10005f3c:	14400e16 	blt	r2,r17,10005f78 <___vfprintf_internal_r+0x11e4>
10005f40:	b2000204 	addi	r8,r22,8
10005f44:	003e1806 	br	100057a8 <__alt_data_end+0xf80057a8>
10005f48:	01040074 	movhi	r4,4097
10005f4c:	21127484 	addi	r4,r4,18898
10005f50:	d9002c15 	stw	r4,176(sp)
10005f54:	d9002c17 	ldw	r4,176(sp)
10005f58:	1c07883a 	add	r3,r3,r16
10005f5c:	44000115 	stw	r16,4(r8)
10005f60:	41000015 	stw	r4,0(r8)
10005f64:	10800044 	addi	r2,r2,1
10005f68:	d8c02015 	stw	r3,128(sp)
10005f6c:	d8801f15 	stw	r2,124(sp)
10005f70:	010001c4 	movi	r4,7
10005f74:	20be0b0e 	bge	r4,r2,100057a4 <__alt_data_end+0xf80057a4>
10005f78:	d9002d17 	ldw	r4,180(sp)
10005f7c:	d9801e04 	addi	r6,sp,120
10005f80:	b80b883a 	mov	r5,r23
10005f84:	000c5740 	call	1000c574 <__sprint_r>
10005f88:	103c861e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
10005f8c:	d8c02017 	ldw	r3,128(sp)
10005f90:	da000404 	addi	r8,sp,16
10005f94:	003e0406 	br	100057a8 <__alt_data_end+0xf80057a8>
10005f98:	d9002d17 	ldw	r4,180(sp)
10005f9c:	d9801e04 	addi	r6,sp,120
10005fa0:	b80b883a 	mov	r5,r23
10005fa4:	000c5740 	call	1000c574 <__sprint_r>
10005fa8:	103e3b26 	beq	r2,zero,10005898 <__alt_data_end+0xf8005898>
10005fac:	003c7d06 	br	100051a4 <__alt_data_end+0xf80051a4>
10005fb0:	d9002d17 	ldw	r4,180(sp)
10005fb4:	d9801e04 	addi	r6,sp,120
10005fb8:	b80b883a 	mov	r5,r23
10005fbc:	000c5740 	call	1000c574 <__sprint_r>
10005fc0:	103c781e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
10005fc4:	d8c02017 	ldw	r3,128(sp)
10005fc8:	da000404 	addi	r8,sp,16
10005fcc:	003de906 	br	10005774 <__alt_data_end+0xf8005774>
10005fd0:	d9002d17 	ldw	r4,180(sp)
10005fd4:	d9801e04 	addi	r6,sp,120
10005fd8:	b80b883a 	mov	r5,r23
10005fdc:	000c5740 	call	1000c574 <__sprint_r>
10005fe0:	103c701e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
10005fe4:	d8c02017 	ldw	r3,128(sp)
10005fe8:	da000404 	addi	r8,sp,16
10005fec:	003d9b06 	br	1000565c <__alt_data_end+0xf800565c>
10005ff0:	d9002d17 	ldw	r4,180(sp)
10005ff4:	d9801e04 	addi	r6,sp,120
10005ff8:	b80b883a 	mov	r5,r23
10005ffc:	000c5740 	call	1000c574 <__sprint_r>
10006000:	103c681e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
10006004:	d8c02017 	ldw	r3,128(sp)
10006008:	da000404 	addi	r8,sp,16
1000600c:	003da106 	br	10005694 <__alt_data_end+0xf8005694>
10006010:	d9402a17 	ldw	r5,168(sp)
10006014:	d8002785 	stb	zero,158(sp)
10006018:	283f0616 	blt	r5,zero,10005c34 <__alt_data_end+0xf8005c34>
1000601c:	00ffdfc4 	movi	r3,-129
10006020:	9d84b03a 	or	r2,r19,r22
10006024:	90e4703a 	and	r18,r18,r3
10006028:	103c3b26 	beq	r2,zero,10005118 <__alt_data_end+0xf8005118>
1000602c:	0039883a 	mov	fp,zero
10006030:	003e5806 	br	10005994 <__alt_data_end+0xf8005994>
10006034:	9080040c 	andi	r2,r18,16
10006038:	1001b326 	beq	r2,zero,10006708 <___vfprintf_internal_r+0x1974>
1000603c:	d8c02e17 	ldw	r3,184(sp)
10006040:	d9002a17 	ldw	r4,168(sp)
10006044:	d8002785 	stb	zero,158(sp)
10006048:	18800104 	addi	r2,r3,4
1000604c:	1cc00017 	ldw	r19,0(r3)
10006050:	002d883a 	mov	r22,zero
10006054:	2001b516 	blt	r4,zero,1000672c <___vfprintf_internal_r+0x1998>
10006058:	00ffdfc4 	movi	r3,-129
1000605c:	d8802e15 	stw	r2,184(sp)
10006060:	90e4703a 	and	r18,r18,r3
10006064:	983d0526 	beq	r19,zero,1000547c <__alt_data_end+0xf800547c>
10006068:	0039883a 	mov	fp,zero
1000606c:	003d0806 	br	10005490 <__alt_data_end+0xf8005490>
10006070:	dc402617 	ldw	r17,152(sp)
10006074:	0441d30e 	bge	zero,r17,100067c4 <___vfprintf_internal_r+0x1a30>
10006078:	dc403217 	ldw	r17,200(sp)
1000607c:	d8803317 	ldw	r2,204(sp)
10006080:	1440010e 	bge	r2,r17,10006088 <___vfprintf_internal_r+0x12f4>
10006084:	1023883a 	mov	r17,r2
10006088:	04400a0e 	bge	zero,r17,100060b4 <___vfprintf_internal_r+0x1320>
1000608c:	d8801f17 	ldw	r2,124(sp)
10006090:	1c47883a 	add	r3,r3,r17
10006094:	44000015 	stw	r16,0(r8)
10006098:	10800044 	addi	r2,r2,1
1000609c:	44400115 	stw	r17,4(r8)
100060a0:	d8c02015 	stw	r3,128(sp)
100060a4:	d8801f15 	stw	r2,124(sp)
100060a8:	010001c4 	movi	r4,7
100060ac:	20826516 	blt	r4,r2,10006a44 <___vfprintf_internal_r+0x1cb0>
100060b0:	42000204 	addi	r8,r8,8
100060b4:	88026116 	blt	r17,zero,10006a3c <___vfprintf_internal_r+0x1ca8>
100060b8:	d9003217 	ldw	r4,200(sp)
100060bc:	2463c83a 	sub	r17,r4,r17
100060c0:	04407b0e 	bge	zero,r17,100062b0 <___vfprintf_internal_r+0x151c>
100060c4:	05800404 	movi	r22,16
100060c8:	d8801f17 	ldw	r2,124(sp)
100060cc:	b4419d0e 	bge	r22,r17,10006744 <___vfprintf_internal_r+0x19b0>
100060d0:	01040074 	movhi	r4,4097
100060d4:	21127484 	addi	r4,r4,18898
100060d8:	d9002c15 	stw	r4,176(sp)
100060dc:	070001c4 	movi	fp,7
100060e0:	dcc02d17 	ldw	r19,180(sp)
100060e4:	00000306 	br	100060f4 <___vfprintf_internal_r+0x1360>
100060e8:	42000204 	addi	r8,r8,8
100060ec:	8c7ffc04 	addi	r17,r17,-16
100060f0:	b441970e 	bge	r22,r17,10006750 <___vfprintf_internal_r+0x19bc>
100060f4:	18c00404 	addi	r3,r3,16
100060f8:	10800044 	addi	r2,r2,1
100060fc:	45000015 	stw	r20,0(r8)
10006100:	45800115 	stw	r22,4(r8)
10006104:	d8c02015 	stw	r3,128(sp)
10006108:	d8801f15 	stw	r2,124(sp)
1000610c:	e0bff60e 	bge	fp,r2,100060e8 <__alt_data_end+0xf80060e8>
10006110:	d9801e04 	addi	r6,sp,120
10006114:	b80b883a 	mov	r5,r23
10006118:	9809883a 	mov	r4,r19
1000611c:	000c5740 	call	1000c574 <__sprint_r>
10006120:	103c201e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
10006124:	d8c02017 	ldw	r3,128(sp)
10006128:	d8801f17 	ldw	r2,124(sp)
1000612c:	da000404 	addi	r8,sp,16
10006130:	003fee06 	br	100060ec <__alt_data_end+0xf80060ec>
10006134:	d9002d17 	ldw	r4,180(sp)
10006138:	d9801e04 	addi	r6,sp,120
1000613c:	b80b883a 	mov	r5,r23
10006140:	000c5740 	call	1000c574 <__sprint_r>
10006144:	103c171e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
10006148:	d8c02017 	ldw	r3,128(sp)
1000614c:	df002787 	ldb	fp,158(sp)
10006150:	da000404 	addi	r8,sp,16
10006154:	003d3406 	br	10005628 <__alt_data_end+0xf8005628>
10006158:	9080040c 	andi	r2,r18,16
1000615c:	10016126 	beq	r2,zero,100066e4 <___vfprintf_internal_r+0x1950>
10006160:	d9402e17 	ldw	r5,184(sp)
10006164:	2cc00017 	ldw	r19,0(r5)
10006168:	29400104 	addi	r5,r5,4
1000616c:	d9402e15 	stw	r5,184(sp)
10006170:	982dd7fa 	srai	r22,r19,31
10006174:	b005883a 	mov	r2,r22
10006178:	003c5a06 	br	100052e4 <__alt_data_end+0xf80052e4>
1000617c:	9080040c 	andi	r2,r18,16
10006180:	10003526 	beq	r2,zero,10006258 <___vfprintf_internal_r+0x14c4>
10006184:	d8c02e17 	ldw	r3,184(sp)
10006188:	d9002a17 	ldw	r4,168(sp)
1000618c:	d8002785 	stb	zero,158(sp)
10006190:	18800104 	addi	r2,r3,4
10006194:	1cc00017 	ldw	r19,0(r3)
10006198:	002d883a 	mov	r22,zero
1000619c:	20003716 	blt	r4,zero,1000627c <___vfprintf_internal_r+0x14e8>
100061a0:	00ffdfc4 	movi	r3,-129
100061a4:	d8802e15 	stw	r2,184(sp)
100061a8:	90e4703a 	and	r18,r18,r3
100061ac:	0039883a 	mov	fp,zero
100061b0:	983dd426 	beq	r19,zero,10005904 <__alt_data_end+0xf8005904>
100061b4:	00800244 	movi	r2,9
100061b8:	14fc5336 	bltu	r2,r19,10005308 <__alt_data_end+0xf8005308>
100061bc:	d8c02817 	ldw	r3,160(sp)
100061c0:	dc001dc4 	addi	r16,sp,119
100061c4:	9cc00c04 	addi	r19,r19,48
100061c8:	1c07c83a 	sub	r3,r3,r16
100061cc:	dcc01dc5 	stb	r19,119(sp)
100061d0:	d8c02b15 	stw	r3,172(sp)
100061d4:	003cc606 	br	100054f0 <__alt_data_end+0xf80054f0>
100061d8:	d8803317 	ldw	r2,204(sp)
100061dc:	143fffc4 	addi	r16,r2,-1
100061e0:	043f4d0e 	bge	zero,r16,10005f18 <__alt_data_end+0xf8005f18>
100061e4:	07000404 	movi	fp,16
100061e8:	e400810e 	bge	fp,r16,100063f0 <___vfprintf_internal_r+0x165c>
100061ec:	01440074 	movhi	r5,4097
100061f0:	29527484 	addi	r5,r5,18898
100061f4:	d9402c15 	stw	r5,176(sp)
100061f8:	01c001c4 	movi	r7,7
100061fc:	dcc02d17 	ldw	r19,180(sp)
10006200:	00000306 	br	10006210 <___vfprintf_internal_r+0x147c>
10006204:	b5800204 	addi	r22,r22,8
10006208:	843ffc04 	addi	r16,r16,-16
1000620c:	e4007b0e 	bge	fp,r16,100063fc <___vfprintf_internal_r+0x1668>
10006210:	18c00404 	addi	r3,r3,16
10006214:	8c400044 	addi	r17,r17,1
10006218:	b5000015 	stw	r20,0(r22)
1000621c:	b7000115 	stw	fp,4(r22)
10006220:	d8c02015 	stw	r3,128(sp)
10006224:	dc401f15 	stw	r17,124(sp)
10006228:	3c7ff60e 	bge	r7,r17,10006204 <__alt_data_end+0xf8006204>
1000622c:	d9801e04 	addi	r6,sp,120
10006230:	b80b883a 	mov	r5,r23
10006234:	9809883a 	mov	r4,r19
10006238:	d9c03c15 	stw	r7,240(sp)
1000623c:	000c5740 	call	1000c574 <__sprint_r>
10006240:	d9c03c17 	ldw	r7,240(sp)
10006244:	103bd71e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
10006248:	d8c02017 	ldw	r3,128(sp)
1000624c:	dc401f17 	ldw	r17,124(sp)
10006250:	dd800404 	addi	r22,sp,16
10006254:	003fec06 	br	10006208 <__alt_data_end+0xf8006208>
10006258:	9080100c 	andi	r2,r18,64
1000625c:	d8002785 	stb	zero,158(sp)
10006260:	10010e26 	beq	r2,zero,1000669c <___vfprintf_internal_r+0x1908>
10006264:	d9402e17 	ldw	r5,184(sp)
10006268:	d8c02a17 	ldw	r3,168(sp)
1000626c:	002d883a 	mov	r22,zero
10006270:	28800104 	addi	r2,r5,4
10006274:	2cc0000b 	ldhu	r19,0(r5)
10006278:	183fc90e 	bge	r3,zero,100061a0 <__alt_data_end+0xf80061a0>
1000627c:	d8802e15 	stw	r2,184(sp)
10006280:	0039883a 	mov	fp,zero
10006284:	9d84b03a 	or	r2,r19,r22
10006288:	103c1e1e 	bne	r2,zero,10005304 <__alt_data_end+0xf8005304>
1000628c:	00800044 	movi	r2,1
10006290:	003e6c06 	br	10005c44 <__alt_data_end+0xf8005c44>
10006294:	d9002d17 	ldw	r4,180(sp)
10006298:	d9801e04 	addi	r6,sp,120
1000629c:	b80b883a 	mov	r5,r23
100062a0:	000c5740 	call	1000c574 <__sprint_r>
100062a4:	103bbf1e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
100062a8:	d8c02017 	ldw	r3,128(sp)
100062ac:	da000404 	addi	r8,sp,16
100062b0:	d9003217 	ldw	r4,200(sp)
100062b4:	d8802617 	ldw	r2,152(sp)
100062b8:	d9403317 	ldw	r5,204(sp)
100062bc:	8123883a 	add	r17,r16,r4
100062c0:	11400216 	blt	r2,r5,100062cc <___vfprintf_internal_r+0x1538>
100062c4:	9100004c 	andi	r4,r18,1
100062c8:	20000d26 	beq	r4,zero,10006300 <___vfprintf_internal_r+0x156c>
100062cc:	d9003717 	ldw	r4,220(sp)
100062d0:	d9403417 	ldw	r5,208(sp)
100062d4:	1907883a 	add	r3,r3,r4
100062d8:	d9001f17 	ldw	r4,124(sp)
100062dc:	41400015 	stw	r5,0(r8)
100062e0:	d9403717 	ldw	r5,220(sp)
100062e4:	21000044 	addi	r4,r4,1
100062e8:	d8c02015 	stw	r3,128(sp)
100062ec:	41400115 	stw	r5,4(r8)
100062f0:	d9001f15 	stw	r4,124(sp)
100062f4:	014001c4 	movi	r5,7
100062f8:	2901e816 	blt	r5,r4,10006a9c <___vfprintf_internal_r+0x1d08>
100062fc:	42000204 	addi	r8,r8,8
10006300:	d9003317 	ldw	r4,204(sp)
10006304:	8121883a 	add	r16,r16,r4
10006308:	2085c83a 	sub	r2,r4,r2
1000630c:	8461c83a 	sub	r16,r16,r17
10006310:	1400010e 	bge	r2,r16,10006318 <___vfprintf_internal_r+0x1584>
10006314:	1021883a 	mov	r16,r2
10006318:	04000a0e 	bge	zero,r16,10006344 <___vfprintf_internal_r+0x15b0>
1000631c:	d9001f17 	ldw	r4,124(sp)
10006320:	1c07883a 	add	r3,r3,r16
10006324:	44400015 	stw	r17,0(r8)
10006328:	21000044 	addi	r4,r4,1
1000632c:	44000115 	stw	r16,4(r8)
10006330:	d8c02015 	stw	r3,128(sp)
10006334:	d9001f15 	stw	r4,124(sp)
10006338:	014001c4 	movi	r5,7
1000633c:	2901fb16 	blt	r5,r4,10006b2c <___vfprintf_internal_r+0x1d98>
10006340:	42000204 	addi	r8,r8,8
10006344:	8001f716 	blt	r16,zero,10006b24 <___vfprintf_internal_r+0x1d90>
10006348:	1421c83a 	sub	r16,r2,r16
1000634c:	043d160e 	bge	zero,r16,100057a8 <__alt_data_end+0xf80057a8>
10006350:	04400404 	movi	r17,16
10006354:	d8801f17 	ldw	r2,124(sp)
10006358:	8c3efb0e 	bge	r17,r16,10005f48 <__alt_data_end+0xf8005f48>
1000635c:	01440074 	movhi	r5,4097
10006360:	29527484 	addi	r5,r5,18898
10006364:	d9402c15 	stw	r5,176(sp)
10006368:	058001c4 	movi	r22,7
1000636c:	dcc02d17 	ldw	r19,180(sp)
10006370:	00000306 	br	10006380 <___vfprintf_internal_r+0x15ec>
10006374:	42000204 	addi	r8,r8,8
10006378:	843ffc04 	addi	r16,r16,-16
1000637c:	8c3ef50e 	bge	r17,r16,10005f54 <__alt_data_end+0xf8005f54>
10006380:	18c00404 	addi	r3,r3,16
10006384:	10800044 	addi	r2,r2,1
10006388:	45000015 	stw	r20,0(r8)
1000638c:	44400115 	stw	r17,4(r8)
10006390:	d8c02015 	stw	r3,128(sp)
10006394:	d8801f15 	stw	r2,124(sp)
10006398:	b0bff60e 	bge	r22,r2,10006374 <__alt_data_end+0xf8006374>
1000639c:	d9801e04 	addi	r6,sp,120
100063a0:	b80b883a 	mov	r5,r23
100063a4:	9809883a 	mov	r4,r19
100063a8:	000c5740 	call	1000c574 <__sprint_r>
100063ac:	103b7d1e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
100063b0:	d8c02017 	ldw	r3,128(sp)
100063b4:	d8801f17 	ldw	r2,124(sp)
100063b8:	da000404 	addi	r8,sp,16
100063bc:	003fee06 	br	10006378 <__alt_data_end+0xf8006378>
100063c0:	9088703a 	and	r4,r18,r2
100063c4:	203eab1e 	bne	r4,zero,10005e74 <__alt_data_end+0xf8005e74>
100063c8:	dc401f17 	ldw	r17,124(sp)
100063cc:	40800115 	stw	r2,4(r8)
100063d0:	44000015 	stw	r16,0(r8)
100063d4:	8c400044 	addi	r17,r17,1
100063d8:	d8c02015 	stw	r3,128(sp)
100063dc:	dc401f15 	stw	r17,124(sp)
100063e0:	008001c4 	movi	r2,7
100063e4:	14400e16 	blt	r2,r17,10006420 <___vfprintf_internal_r+0x168c>
100063e8:	45800204 	addi	r22,r8,8
100063ec:	003eca06 	br	10005f18 <__alt_data_end+0xf8005f18>
100063f0:	01040074 	movhi	r4,4097
100063f4:	21127484 	addi	r4,r4,18898
100063f8:	d9002c15 	stw	r4,176(sp)
100063fc:	d8802c17 	ldw	r2,176(sp)
10006400:	1c07883a 	add	r3,r3,r16
10006404:	8c400044 	addi	r17,r17,1
10006408:	b0800015 	stw	r2,0(r22)
1000640c:	b4000115 	stw	r16,4(r22)
10006410:	d8c02015 	stw	r3,128(sp)
10006414:	dc401f15 	stw	r17,124(sp)
10006418:	008001c4 	movi	r2,7
1000641c:	147ebd0e 	bge	r2,r17,10005f14 <__alt_data_end+0xf8005f14>
10006420:	d9002d17 	ldw	r4,180(sp)
10006424:	d9801e04 	addi	r6,sp,120
10006428:	b80b883a 	mov	r5,r23
1000642c:	000c5740 	call	1000c574 <__sprint_r>
10006430:	103b5c1e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
10006434:	d8c02017 	ldw	r3,128(sp)
10006438:	dc401f17 	ldw	r17,124(sp)
1000643c:	dd800404 	addi	r22,sp,16
10006440:	003eb506 	br	10005f18 <__alt_data_end+0xf8005f18>
10006444:	d9002d17 	ldw	r4,180(sp)
10006448:	d9801e04 	addi	r6,sp,120
1000644c:	b80b883a 	mov	r5,r23
10006450:	000c5740 	call	1000c574 <__sprint_r>
10006454:	103b531e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
10006458:	d8c02017 	ldw	r3,128(sp)
1000645c:	dc401f17 	ldw	r17,124(sp)
10006460:	da000404 	addi	r8,sp,16
10006464:	003e8d06 	br	10005e9c <__alt_data_end+0xf8005e9c>
10006468:	d9002d17 	ldw	r4,180(sp)
1000646c:	d9801e04 	addi	r6,sp,120
10006470:	b80b883a 	mov	r5,r23
10006474:	000c5740 	call	1000c574 <__sprint_r>
10006478:	103b4a1e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
1000647c:	d8c02017 	ldw	r3,128(sp)
10006480:	dc401f17 	ldw	r17,124(sp)
10006484:	dd800404 	addi	r22,sp,16
10006488:	003e8f06 	br	10005ec8 <__alt_data_end+0xf8005ec8>
1000648c:	0027883a 	mov	r19,zero
10006490:	003f4a06 	br	100061bc <__alt_data_end+0xf80061bc>
10006494:	d9002d17 	ldw	r4,180(sp)
10006498:	d9801e04 	addi	r6,sp,120
1000649c:	b80b883a 	mov	r5,r23
100064a0:	000c5740 	call	1000c574 <__sprint_r>
100064a4:	103b3f1e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
100064a8:	d8c02017 	ldw	r3,128(sp)
100064ac:	da000404 	addi	r8,sp,16
100064b0:	003c7b06 	br	100056a0 <__alt_data_end+0xf80056a0>
100064b4:	d9402a17 	ldw	r5,168(sp)
100064b8:	04e7c83a 	sub	r19,zero,r19
100064bc:	07000b44 	movi	fp,45
100064c0:	9804c03a 	cmpne	r2,r19,zero
100064c4:	05adc83a 	sub	r22,zero,r22
100064c8:	df002785 	stb	fp,158(sp)
100064cc:	b0adc83a 	sub	r22,r22,r2
100064d0:	28017b16 	blt	r5,zero,10006ac0 <___vfprintf_internal_r+0x1d2c>
100064d4:	00bfdfc4 	movi	r2,-129
100064d8:	90a4703a 	and	r18,r18,r2
100064dc:	003b8906 	br	10005304 <__alt_data_end+0xf8005304>
100064e0:	d9003617 	ldw	r4,216(sp)
100064e4:	d9403817 	ldw	r5,224(sp)
100064e8:	da003d15 	stw	r8,244(sp)
100064ec:	000c1980 	call	1000c198 <__fpclassifyd>
100064f0:	da003d17 	ldw	r8,244(sp)
100064f4:	1000f026 	beq	r2,zero,100068b8 <___vfprintf_internal_r+0x1b24>
100064f8:	d9002a17 	ldw	r4,168(sp)
100064fc:	05bff7c4 	movi	r22,-33
10006500:	00bfffc4 	movi	r2,-1
10006504:	8dac703a 	and	r22,r17,r22
10006508:	20820026 	beq	r4,r2,10006d0c <___vfprintf_internal_r+0x1f78>
1000650c:	008011c4 	movi	r2,71
10006510:	b081f726 	beq	r22,r2,10006cf0 <___vfprintf_internal_r+0x1f5c>
10006514:	d9003817 	ldw	r4,224(sp)
10006518:	90c04014 	ori	r3,r18,256
1000651c:	d8c02c15 	stw	r3,176(sp)
10006520:	20021516 	blt	r4,zero,10006d78 <___vfprintf_internal_r+0x1fe4>
10006524:	dcc03817 	ldw	r19,224(sp)
10006528:	d8002905 	stb	zero,164(sp)
1000652c:	00801984 	movi	r2,102
10006530:	8881f926 	beq	r17,r2,10006d18 <___vfprintf_internal_r+0x1f84>
10006534:	00801184 	movi	r2,70
10006538:	88821c26 	beq	r17,r2,10006dac <___vfprintf_internal_r+0x2018>
1000653c:	00801144 	movi	r2,69
10006540:	b081ef26 	beq	r22,r2,10006d00 <___vfprintf_internal_r+0x1f6c>
10006544:	d8c02a17 	ldw	r3,168(sp)
10006548:	d8802104 	addi	r2,sp,132
1000654c:	d8800315 	stw	r2,12(sp)
10006550:	d9403617 	ldw	r5,216(sp)
10006554:	d8802504 	addi	r2,sp,148
10006558:	d9002d17 	ldw	r4,180(sp)
1000655c:	d8800215 	stw	r2,8(sp)
10006560:	d8802604 	addi	r2,sp,152
10006564:	d8c00015 	stw	r3,0(sp)
10006568:	d8800115 	stw	r2,4(sp)
1000656c:	01c00084 	movi	r7,2
10006570:	980d883a 	mov	r6,r19
10006574:	d8c03c15 	stw	r3,240(sp)
10006578:	da003d15 	stw	r8,244(sp)
1000657c:	00074c40 	call	100074c4 <_dtoa_r>
10006580:	1021883a 	mov	r16,r2
10006584:	008019c4 	movi	r2,103
10006588:	d8c03c17 	ldw	r3,240(sp)
1000658c:	da003d17 	ldw	r8,244(sp)
10006590:	88817126 	beq	r17,r2,10006b58 <___vfprintf_internal_r+0x1dc4>
10006594:	008011c4 	movi	r2,71
10006598:	88829126 	beq	r17,r2,10006fe0 <___vfprintf_internal_r+0x224c>
1000659c:	80f9883a 	add	fp,r16,r3
100065a0:	d9003617 	ldw	r4,216(sp)
100065a4:	000d883a 	mov	r6,zero
100065a8:	000f883a 	mov	r7,zero
100065ac:	980b883a 	mov	r5,r19
100065b0:	da003d15 	stw	r8,244(sp)
100065b4:	00102f80 	call	100102f8 <__eqdf2>
100065b8:	da003d17 	ldw	r8,244(sp)
100065bc:	10018d26 	beq	r2,zero,10006bf4 <___vfprintf_internal_r+0x1e60>
100065c0:	d8802117 	ldw	r2,132(sp)
100065c4:	1700062e 	bgeu	r2,fp,100065e0 <___vfprintf_internal_r+0x184c>
100065c8:	01000c04 	movi	r4,48
100065cc:	10c00044 	addi	r3,r2,1
100065d0:	d8c02115 	stw	r3,132(sp)
100065d4:	11000005 	stb	r4,0(r2)
100065d8:	d8802117 	ldw	r2,132(sp)
100065dc:	173ffb36 	bltu	r2,fp,100065cc <__alt_data_end+0xf80065cc>
100065e0:	1405c83a 	sub	r2,r2,r16
100065e4:	d8803315 	stw	r2,204(sp)
100065e8:	008011c4 	movi	r2,71
100065ec:	b0817626 	beq	r22,r2,10006bc8 <___vfprintf_internal_r+0x1e34>
100065f0:	00801944 	movi	r2,101
100065f4:	1442800e 	bge	r2,r17,10006ff8 <___vfprintf_internal_r+0x2264>
100065f8:	d8c02617 	ldw	r3,152(sp)
100065fc:	00801984 	movi	r2,102
10006600:	d8c03215 	stw	r3,200(sp)
10006604:	8881fe26 	beq	r17,r2,10006e00 <___vfprintf_internal_r+0x206c>
10006608:	d8c03217 	ldw	r3,200(sp)
1000660c:	d9003317 	ldw	r4,204(sp)
10006610:	1901dd16 	blt	r3,r4,10006d88 <___vfprintf_internal_r+0x1ff4>
10006614:	9480004c 	andi	r18,r18,1
10006618:	90022b1e 	bne	r18,zero,10006ec8 <___vfprintf_internal_r+0x2134>
1000661c:	1805883a 	mov	r2,r3
10006620:	18028316 	blt	r3,zero,10007030 <___vfprintf_internal_r+0x229c>
10006624:	d8c03217 	ldw	r3,200(sp)
10006628:	044019c4 	movi	r17,103
1000662c:	d8c02b15 	stw	r3,172(sp)
10006630:	df002907 	ldb	fp,164(sp)
10006634:	e001531e 	bne	fp,zero,10006b84 <___vfprintf_internal_r+0x1df0>
10006638:	df002783 	ldbu	fp,158(sp)
1000663c:	d8802915 	stw	r2,164(sp)
10006640:	dc802c17 	ldw	r18,176(sp)
10006644:	d8002a15 	stw	zero,168(sp)
10006648:	003baf06 	br	10005508 <__alt_data_end+0xf8005508>
1000664c:	d8c02e17 	ldw	r3,184(sp)
10006650:	d9002e17 	ldw	r4,184(sp)
10006654:	d9402e17 	ldw	r5,184(sp)
10006658:	18c00017 	ldw	r3,0(r3)
1000665c:	21000117 	ldw	r4,4(r4)
10006660:	29400204 	addi	r5,r5,8
10006664:	d8c03615 	stw	r3,216(sp)
10006668:	d9003815 	stw	r4,224(sp)
1000666c:	d9402e15 	stw	r5,184(sp)
10006670:	003b5006 	br	100053b4 <__alt_data_end+0xf80053b4>
10006674:	ac400007 	ldb	r17,0(r21)
10006678:	003a2806 	br	10004f1c <__alt_data_end+0xf8004f1c>
1000667c:	9080100c 	andi	r2,r18,64
10006680:	1000a826 	beq	r2,zero,10006924 <___vfprintf_internal_r+0x1b90>
10006684:	d8c02e17 	ldw	r3,184(sp)
10006688:	002d883a 	mov	r22,zero
1000668c:	1cc0000b 	ldhu	r19,0(r3)
10006690:	18c00104 	addi	r3,r3,4
10006694:	d8c02e15 	stw	r3,184(sp)
10006698:	003caf06 	br	10005958 <__alt_data_end+0xf8005958>
1000669c:	d9002e17 	ldw	r4,184(sp)
100066a0:	d9402a17 	ldw	r5,168(sp)
100066a4:	002d883a 	mov	r22,zero
100066a8:	20800104 	addi	r2,r4,4
100066ac:	24c00017 	ldw	r19,0(r4)
100066b0:	283ebb0e 	bge	r5,zero,100061a0 <__alt_data_end+0xf80061a0>
100066b4:	003ef106 	br	1000627c <__alt_data_end+0xf800627c>
100066b8:	9080040c 	andi	r2,r18,16
100066bc:	1000921e 	bne	r2,zero,10006908 <___vfprintf_internal_r+0x1b74>
100066c0:	9480100c 	andi	r18,r18,64
100066c4:	90013926 	beq	r18,zero,10006bac <___vfprintf_internal_r+0x1e18>
100066c8:	d9402e17 	ldw	r5,184(sp)
100066cc:	d8c02f17 	ldw	r3,188(sp)
100066d0:	28800017 	ldw	r2,0(r5)
100066d4:	29400104 	addi	r5,r5,4
100066d8:	d9402e15 	stw	r5,184(sp)
100066dc:	10c0000d 	sth	r3,0(r2)
100066e0:	0039e406 	br	10004e74 <__alt_data_end+0xf8004e74>
100066e4:	9080100c 	andi	r2,r18,64
100066e8:	10008026 	beq	r2,zero,100068ec <___vfprintf_internal_r+0x1b58>
100066ec:	d8802e17 	ldw	r2,184(sp)
100066f0:	14c0000f 	ldh	r19,0(r2)
100066f4:	10800104 	addi	r2,r2,4
100066f8:	d8802e15 	stw	r2,184(sp)
100066fc:	982dd7fa 	srai	r22,r19,31
10006700:	b005883a 	mov	r2,r22
10006704:	003af706 	br	100052e4 <__alt_data_end+0xf80052e4>
10006708:	9080100c 	andi	r2,r18,64
1000670c:	d8002785 	stb	zero,158(sp)
10006710:	10008a1e 	bne	r2,zero,1000693c <___vfprintf_internal_r+0x1ba8>
10006714:	d9002e17 	ldw	r4,184(sp)
10006718:	d9402a17 	ldw	r5,168(sp)
1000671c:	002d883a 	mov	r22,zero
10006720:	20800104 	addi	r2,r4,4
10006724:	24c00017 	ldw	r19,0(r4)
10006728:	283e4b0e 	bge	r5,zero,10006058 <__alt_data_end+0xf8006058>
1000672c:	9d86b03a 	or	r3,r19,r22
10006730:	d8802e15 	stw	r2,184(sp)
10006734:	183e4c1e 	bne	r3,zero,10006068 <__alt_data_end+0xf8006068>
10006738:	0039883a 	mov	fp,zero
1000673c:	0005883a 	mov	r2,zero
10006740:	003d4006 	br	10005c44 <__alt_data_end+0xf8005c44>
10006744:	01440074 	movhi	r5,4097
10006748:	29527484 	addi	r5,r5,18898
1000674c:	d9402c15 	stw	r5,176(sp)
10006750:	d9402c17 	ldw	r5,176(sp)
10006754:	1c47883a 	add	r3,r3,r17
10006758:	10800044 	addi	r2,r2,1
1000675c:	41400015 	stw	r5,0(r8)
10006760:	44400115 	stw	r17,4(r8)
10006764:	d8c02015 	stw	r3,128(sp)
10006768:	d8801f15 	stw	r2,124(sp)
1000676c:	010001c4 	movi	r4,7
10006770:	20bec816 	blt	r4,r2,10006294 <__alt_data_end+0xf8006294>
10006774:	42000204 	addi	r8,r8,8
10006778:	003ecd06 	br	100062b0 <__alt_data_end+0xf80062b0>
1000677c:	d9002a17 	ldw	r4,168(sp)
10006780:	d8002785 	stb	zero,158(sp)
10006784:	203d2d16 	blt	r4,zero,10005c3c <__alt_data_end+0xf8005c3c>
10006788:	00bfdfc4 	movi	r2,-129
1000678c:	90a4703a 	and	r18,r18,r2
10006790:	003a6106 	br	10005118 <__alt_data_end+0xf8005118>
10006794:	01040074 	movhi	r4,4097
10006798:	21127484 	addi	r4,r4,18898
1000679c:	d9002c15 	stw	r4,176(sp)
100067a0:	003bea06 	br	1000574c <__alt_data_end+0xf800574c>
100067a4:	d9002d17 	ldw	r4,180(sp)
100067a8:	d9801e04 	addi	r6,sp,120
100067ac:	b80b883a 	mov	r5,r23
100067b0:	000c5740 	call	1000c574 <__sprint_r>
100067b4:	103a7b1e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
100067b8:	d8c02017 	ldw	r3,128(sp)
100067bc:	da000404 	addi	r8,sp,16
100067c0:	003d4106 	br	10005cc8 <__alt_data_end+0xf8005cc8>
100067c4:	d8801f17 	ldw	r2,124(sp)
100067c8:	01440074 	movhi	r5,4097
100067cc:	01000044 	movi	r4,1
100067d0:	18c00044 	addi	r3,r3,1
100067d4:	10800044 	addi	r2,r2,1
100067d8:	29527404 	addi	r5,r5,18896
100067dc:	41000115 	stw	r4,4(r8)
100067e0:	41400015 	stw	r5,0(r8)
100067e4:	d8c02015 	stw	r3,128(sp)
100067e8:	d8801f15 	stw	r2,124(sp)
100067ec:	010001c4 	movi	r4,7
100067f0:	20805c16 	blt	r4,r2,10006964 <___vfprintf_internal_r+0x1bd0>
100067f4:	42000204 	addi	r8,r8,8
100067f8:	8800041e 	bne	r17,zero,1000680c <___vfprintf_internal_r+0x1a78>
100067fc:	d8803317 	ldw	r2,204(sp)
10006800:	1000021e 	bne	r2,zero,1000680c <___vfprintf_internal_r+0x1a78>
10006804:	9080004c 	andi	r2,r18,1
10006808:	103be726 	beq	r2,zero,100057a8 <__alt_data_end+0xf80057a8>
1000680c:	d9003717 	ldw	r4,220(sp)
10006810:	d8801f17 	ldw	r2,124(sp)
10006814:	d9403417 	ldw	r5,208(sp)
10006818:	20c7883a 	add	r3,r4,r3
1000681c:	10800044 	addi	r2,r2,1
10006820:	41000115 	stw	r4,4(r8)
10006824:	41400015 	stw	r5,0(r8)
10006828:	d8c02015 	stw	r3,128(sp)
1000682c:	d8801f15 	stw	r2,124(sp)
10006830:	010001c4 	movi	r4,7
10006834:	20812116 	blt	r4,r2,10006cbc <___vfprintf_internal_r+0x1f28>
10006838:	42000204 	addi	r8,r8,8
1000683c:	0463c83a 	sub	r17,zero,r17
10006840:	0440730e 	bge	zero,r17,10006a10 <___vfprintf_internal_r+0x1c7c>
10006844:	05800404 	movi	r22,16
10006848:	b440860e 	bge	r22,r17,10006a64 <___vfprintf_internal_r+0x1cd0>
1000684c:	01440074 	movhi	r5,4097
10006850:	29527484 	addi	r5,r5,18898
10006854:	d9402c15 	stw	r5,176(sp)
10006858:	070001c4 	movi	fp,7
1000685c:	dcc02d17 	ldw	r19,180(sp)
10006860:	00000306 	br	10006870 <___vfprintf_internal_r+0x1adc>
10006864:	42000204 	addi	r8,r8,8
10006868:	8c7ffc04 	addi	r17,r17,-16
1000686c:	b440800e 	bge	r22,r17,10006a70 <___vfprintf_internal_r+0x1cdc>
10006870:	18c00404 	addi	r3,r3,16
10006874:	10800044 	addi	r2,r2,1
10006878:	45000015 	stw	r20,0(r8)
1000687c:	45800115 	stw	r22,4(r8)
10006880:	d8c02015 	stw	r3,128(sp)
10006884:	d8801f15 	stw	r2,124(sp)
10006888:	e0bff60e 	bge	fp,r2,10006864 <__alt_data_end+0xf8006864>
1000688c:	d9801e04 	addi	r6,sp,120
10006890:	b80b883a 	mov	r5,r23
10006894:	9809883a 	mov	r4,r19
10006898:	000c5740 	call	1000c574 <__sprint_r>
1000689c:	103a411e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
100068a0:	d8c02017 	ldw	r3,128(sp)
100068a4:	d8801f17 	ldw	r2,124(sp)
100068a8:	da000404 	addi	r8,sp,16
100068ac:	003fee06 	br	10006868 <__alt_data_end+0xf8006868>
100068b0:	00bfffc4 	movi	r2,-1
100068b4:	003a3f06 	br	100051b4 <__alt_data_end+0xf80051b4>
100068b8:	008011c4 	movi	r2,71
100068bc:	1440b816 	blt	r2,r17,10006ba0 <___vfprintf_internal_r+0x1e0c>
100068c0:	04040074 	movhi	r16,4097
100068c4:	84126604 	addi	r16,r16,18840
100068c8:	00c000c4 	movi	r3,3
100068cc:	00bfdfc4 	movi	r2,-129
100068d0:	d8c02915 	stw	r3,164(sp)
100068d4:	90a4703a 	and	r18,r18,r2
100068d8:	df002783 	ldbu	fp,158(sp)
100068dc:	d8c02b15 	stw	r3,172(sp)
100068e0:	d8002a15 	stw	zero,168(sp)
100068e4:	d8003215 	stw	zero,200(sp)
100068e8:	003b0706 	br	10005508 <__alt_data_end+0xf8005508>
100068ec:	d8c02e17 	ldw	r3,184(sp)
100068f0:	1cc00017 	ldw	r19,0(r3)
100068f4:	18c00104 	addi	r3,r3,4
100068f8:	d8c02e15 	stw	r3,184(sp)
100068fc:	982dd7fa 	srai	r22,r19,31
10006900:	b005883a 	mov	r2,r22
10006904:	003a7706 	br	100052e4 <__alt_data_end+0xf80052e4>
10006908:	d8c02e17 	ldw	r3,184(sp)
1000690c:	d9002f17 	ldw	r4,188(sp)
10006910:	18800017 	ldw	r2,0(r3)
10006914:	18c00104 	addi	r3,r3,4
10006918:	d8c02e15 	stw	r3,184(sp)
1000691c:	11000015 	stw	r4,0(r2)
10006920:	00395406 	br	10004e74 <__alt_data_end+0xf8004e74>
10006924:	d9002e17 	ldw	r4,184(sp)
10006928:	002d883a 	mov	r22,zero
1000692c:	24c00017 	ldw	r19,0(r4)
10006930:	21000104 	addi	r4,r4,4
10006934:	d9002e15 	stw	r4,184(sp)
10006938:	003c0706 	br	10005958 <__alt_data_end+0xf8005958>
1000693c:	d9402e17 	ldw	r5,184(sp)
10006940:	d8c02a17 	ldw	r3,168(sp)
10006944:	002d883a 	mov	r22,zero
10006948:	28800104 	addi	r2,r5,4
1000694c:	2cc0000b 	ldhu	r19,0(r5)
10006950:	183dc10e 	bge	r3,zero,10006058 <__alt_data_end+0xf8006058>
10006954:	003f7506 	br	1000672c <__alt_data_end+0xf800672c>
10006958:	04040074 	movhi	r16,4097
1000695c:	84126404 	addi	r16,r16,18832
10006960:	003aa706 	br	10005400 <__alt_data_end+0xf8005400>
10006964:	d9002d17 	ldw	r4,180(sp)
10006968:	d9801e04 	addi	r6,sp,120
1000696c:	b80b883a 	mov	r5,r23
10006970:	000c5740 	call	1000c574 <__sprint_r>
10006974:	103a0b1e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
10006978:	dc402617 	ldw	r17,152(sp)
1000697c:	d8c02017 	ldw	r3,128(sp)
10006980:	da000404 	addi	r8,sp,16
10006984:	003f9c06 	br	100067f8 <__alt_data_end+0xf80067f8>
10006988:	ac400043 	ldbu	r17,1(r21)
1000698c:	84000814 	ori	r16,r16,32
10006990:	ad400044 	addi	r21,r21,1
10006994:	8c403fcc 	andi	r17,r17,255
10006998:	8c40201c 	xori	r17,r17,128
1000699c:	8c7fe004 	addi	r17,r17,-128
100069a0:	00395e06 	br	10004f1c <__alt_data_end+0xf8004f1c>
100069a4:	d8c02e15 	stw	r3,184(sp)
100069a8:	0039883a 	mov	fp,zero
100069ac:	003e3506 	br	10006284 <__alt_data_end+0xf8006284>
100069b0:	d9002d17 	ldw	r4,180(sp)
100069b4:	d9801e04 	addi	r6,sp,120
100069b8:	b80b883a 	mov	r5,r23
100069bc:	000c5740 	call	1000c574 <__sprint_r>
100069c0:	1039f81e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
100069c4:	d8c02017 	ldw	r3,128(sp)
100069c8:	da000404 	addi	r8,sp,16
100069cc:	003cd006 	br	10005d10 <__alt_data_end+0xf8005d10>
100069d0:	8009883a 	mov	r4,r16
100069d4:	df003d15 	stw	fp,244(sp)
100069d8:	0004cfc0 	call	10004cfc <strlen>
100069dc:	d8802b15 	stw	r2,172(sp)
100069e0:	da003d17 	ldw	r8,244(sp)
100069e4:	103c200e 	bge	r2,zero,10005a68 <__alt_data_end+0xf8005a68>
100069e8:	0005883a 	mov	r2,zero
100069ec:	003c1e06 	br	10005a68 <__alt_data_end+0xf8005a68>
100069f0:	d9002d17 	ldw	r4,180(sp)
100069f4:	d9801e04 	addi	r6,sp,120
100069f8:	b80b883a 	mov	r5,r23
100069fc:	000c5740 	call	1000c574 <__sprint_r>
10006a00:	1039e81e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
10006a04:	d8c02017 	ldw	r3,128(sp)
10006a08:	d8801f17 	ldw	r2,124(sp)
10006a0c:	da000404 	addi	r8,sp,16
10006a10:	d9403317 	ldw	r5,204(sp)
10006a14:	10800044 	addi	r2,r2,1
10006a18:	44000015 	stw	r16,0(r8)
10006a1c:	28c7883a 	add	r3,r5,r3
10006a20:	003b5b06 	br	10005790 <__alt_data_end+0xf8005790>
10006a24:	01040074 	movhi	r4,4097
10006a28:	21127884 	addi	r4,r4,18914
10006a2c:	d9003515 	stw	r4,212(sp)
10006a30:	003af206 	br	100055fc <__alt_data_end+0xf80055fc>
10006a34:	013fffc4 	movi	r4,-1
10006a38:	003a0806 	br	1000525c <__alt_data_end+0xf800525c>
10006a3c:	0023883a 	mov	r17,zero
10006a40:	003d9d06 	br	100060b8 <__alt_data_end+0xf80060b8>
10006a44:	d9002d17 	ldw	r4,180(sp)
10006a48:	d9801e04 	addi	r6,sp,120
10006a4c:	b80b883a 	mov	r5,r23
10006a50:	000c5740 	call	1000c574 <__sprint_r>
10006a54:	1039d31e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
10006a58:	d8c02017 	ldw	r3,128(sp)
10006a5c:	da000404 	addi	r8,sp,16
10006a60:	003d9406 	br	100060b4 <__alt_data_end+0xf80060b4>
10006a64:	01040074 	movhi	r4,4097
10006a68:	21127484 	addi	r4,r4,18898
10006a6c:	d9002c15 	stw	r4,176(sp)
10006a70:	d9002c17 	ldw	r4,176(sp)
10006a74:	1c47883a 	add	r3,r3,r17
10006a78:	10800044 	addi	r2,r2,1
10006a7c:	41000015 	stw	r4,0(r8)
10006a80:	44400115 	stw	r17,4(r8)
10006a84:	d8c02015 	stw	r3,128(sp)
10006a88:	d8801f15 	stw	r2,124(sp)
10006a8c:	010001c4 	movi	r4,7
10006a90:	20bfd716 	blt	r4,r2,100069f0 <__alt_data_end+0xf80069f0>
10006a94:	42000204 	addi	r8,r8,8
10006a98:	003fdd06 	br	10006a10 <__alt_data_end+0xf8006a10>
10006a9c:	d9002d17 	ldw	r4,180(sp)
10006aa0:	d9801e04 	addi	r6,sp,120
10006aa4:	b80b883a 	mov	r5,r23
10006aa8:	000c5740 	call	1000c574 <__sprint_r>
10006aac:	1039bd1e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
10006ab0:	d8802617 	ldw	r2,152(sp)
10006ab4:	d8c02017 	ldw	r3,128(sp)
10006ab8:	da000404 	addi	r8,sp,16
10006abc:	003e1006 	br	10006300 <__alt_data_end+0xf8006300>
10006ac0:	00800044 	movi	r2,1
10006ac4:	10803fcc 	andi	r2,r2,255
10006ac8:	00c00044 	movi	r3,1
10006acc:	10fa0d26 	beq	r2,r3,10005304 <__alt_data_end+0xf8005304>
10006ad0:	00c00084 	movi	r3,2
10006ad4:	10fbaf26 	beq	r2,r3,10005994 <__alt_data_end+0xf8005994>
10006ad8:	003a6d06 	br	10005490 <__alt_data_end+0xf8005490>
10006adc:	01040074 	movhi	r4,4097
10006ae0:	21127884 	addi	r4,r4,18914
10006ae4:	d9003515 	stw	r4,212(sp)
10006ae8:	003b5406 	br	1000583c <__alt_data_end+0xf800583c>
10006aec:	d8802a17 	ldw	r2,168(sp)
10006af0:	00c00184 	movi	r3,6
10006af4:	1880012e 	bgeu	r3,r2,10006afc <___vfprintf_internal_r+0x1d68>
10006af8:	1805883a 	mov	r2,r3
10006afc:	d8802b15 	stw	r2,172(sp)
10006b00:	1000ef16 	blt	r2,zero,10006ec0 <___vfprintf_internal_r+0x212c>
10006b04:	04040074 	movhi	r16,4097
10006b08:	d8802915 	stw	r2,164(sp)
10006b0c:	dcc02e15 	stw	r19,184(sp)
10006b10:	d8002a15 	stw	zero,168(sp)
10006b14:	d8003215 	stw	zero,200(sp)
10006b18:	84127204 	addi	r16,r16,18888
10006b1c:	0039883a 	mov	fp,zero
10006b20:	003a8006 	br	10005524 <__alt_data_end+0xf8005524>
10006b24:	0021883a 	mov	r16,zero
10006b28:	003e0706 	br	10006348 <__alt_data_end+0xf8006348>
10006b2c:	d9002d17 	ldw	r4,180(sp)
10006b30:	d9801e04 	addi	r6,sp,120
10006b34:	b80b883a 	mov	r5,r23
10006b38:	000c5740 	call	1000c574 <__sprint_r>
10006b3c:	1039991e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
10006b40:	d8802617 	ldw	r2,152(sp)
10006b44:	d9403317 	ldw	r5,204(sp)
10006b48:	d8c02017 	ldw	r3,128(sp)
10006b4c:	da000404 	addi	r8,sp,16
10006b50:	2885c83a 	sub	r2,r5,r2
10006b54:	003dfb06 	br	10006344 <__alt_data_end+0xf8006344>
10006b58:	9080004c 	andi	r2,r18,1
10006b5c:	103e8f1e 	bne	r2,zero,1000659c <__alt_data_end+0xf800659c>
10006b60:	d8802117 	ldw	r2,132(sp)
10006b64:	003e9e06 	br	100065e0 <__alt_data_end+0xf80065e0>
10006b68:	1025883a 	mov	r18,r2
10006b6c:	0039883a 	mov	fp,zero
10006b70:	00800084 	movi	r2,2
10006b74:	003fd306 	br	10006ac4 <__alt_data_end+0xf8006ac4>
10006b78:	07000b44 	movi	fp,45
10006b7c:	df002785 	stb	fp,158(sp)
10006b80:	003a1b06 	br	100053f0 <__alt_data_end+0xf80053f0>
10006b84:	00c00b44 	movi	r3,45
10006b88:	d8c02785 	stb	r3,158(sp)
10006b8c:	d8802915 	stw	r2,164(sp)
10006b90:	dc802c17 	ldw	r18,176(sp)
10006b94:	d8002a15 	stw	zero,168(sp)
10006b98:	07000b44 	movi	fp,45
10006b9c:	003a5e06 	br	10005518 <__alt_data_end+0xf8005518>
10006ba0:	04040074 	movhi	r16,4097
10006ba4:	84126704 	addi	r16,r16,18844
10006ba8:	003f4706 	br	100068c8 <__alt_data_end+0xf80068c8>
10006bac:	d9002e17 	ldw	r4,184(sp)
10006bb0:	d9402f17 	ldw	r5,188(sp)
10006bb4:	20800017 	ldw	r2,0(r4)
10006bb8:	21000104 	addi	r4,r4,4
10006bbc:	d9002e15 	stw	r4,184(sp)
10006bc0:	11400015 	stw	r5,0(r2)
10006bc4:	0038ab06 	br	10004e74 <__alt_data_end+0xf8004e74>
10006bc8:	dd802617 	ldw	r22,152(sp)
10006bcc:	00bfff44 	movi	r2,-3
10006bd0:	b0801c16 	blt	r22,r2,10006c44 <___vfprintf_internal_r+0x1eb0>
10006bd4:	d9402a17 	ldw	r5,168(sp)
10006bd8:	2d801a16 	blt	r5,r22,10006c44 <___vfprintf_internal_r+0x1eb0>
10006bdc:	dd803215 	stw	r22,200(sp)
10006be0:	003e8906 	br	10006608 <__alt_data_end+0xf8006608>
10006be4:	01040074 	movhi	r4,4097
10006be8:	21127484 	addi	r4,r4,18898
10006bec:	d9002c15 	stw	r4,176(sp)
10006bf0:	003c9106 	br	10005e38 <__alt_data_end+0xf8005e38>
10006bf4:	e005883a 	mov	r2,fp
10006bf8:	003e7906 	br	100065e0 <__alt_data_end+0xf80065e0>
10006bfc:	d9002a17 	ldw	r4,168(sp)
10006c00:	df002783 	ldbu	fp,158(sp)
10006c04:	dcc02e15 	stw	r19,184(sp)
10006c08:	d9002915 	stw	r4,164(sp)
10006c0c:	d9002b15 	stw	r4,172(sp)
10006c10:	d8002a15 	stw	zero,168(sp)
10006c14:	d8003215 	stw	zero,200(sp)
10006c18:	003a3b06 	br	10005508 <__alt_data_end+0xf8005508>
10006c1c:	9080004c 	andi	r2,r18,1
10006c20:	0039883a 	mov	fp,zero
10006c24:	10000426 	beq	r2,zero,10006c38 <___vfprintf_internal_r+0x1ea4>
10006c28:	00800c04 	movi	r2,48
10006c2c:	dc001dc4 	addi	r16,sp,119
10006c30:	d8801dc5 	stb	r2,119(sp)
10006c34:	003b6406 	br	100059c8 <__alt_data_end+0xf80059c8>
10006c38:	d8002b15 	stw	zero,172(sp)
10006c3c:	dc001e04 	addi	r16,sp,120
10006c40:	003a2b06 	br	100054f0 <__alt_data_end+0xf80054f0>
10006c44:	8c7fff84 	addi	r17,r17,-2
10006c48:	b5bfffc4 	addi	r22,r22,-1
10006c4c:	dd802615 	stw	r22,152(sp)
10006c50:	dc4022c5 	stb	r17,139(sp)
10006c54:	b000bf16 	blt	r22,zero,10006f54 <___vfprintf_internal_r+0x21c0>
10006c58:	00800ac4 	movi	r2,43
10006c5c:	d8802305 	stb	r2,140(sp)
10006c60:	00800244 	movi	r2,9
10006c64:	15807016 	blt	r2,r22,10006e28 <___vfprintf_internal_r+0x2094>
10006c68:	00800c04 	movi	r2,48
10006c6c:	b5800c04 	addi	r22,r22,48
10006c70:	d8802345 	stb	r2,141(sp)
10006c74:	dd802385 	stb	r22,142(sp)
10006c78:	d88023c4 	addi	r2,sp,143
10006c7c:	df0022c4 	addi	fp,sp,139
10006c80:	d8c03317 	ldw	r3,204(sp)
10006c84:	1739c83a 	sub	fp,r2,fp
10006c88:	d9003317 	ldw	r4,204(sp)
10006c8c:	e0c7883a 	add	r3,fp,r3
10006c90:	df003a15 	stw	fp,232(sp)
10006c94:	d8c02b15 	stw	r3,172(sp)
10006c98:	00800044 	movi	r2,1
10006c9c:	1100b30e 	bge	r2,r4,10006f6c <___vfprintf_internal_r+0x21d8>
10006ca0:	d8c02b17 	ldw	r3,172(sp)
10006ca4:	18c00044 	addi	r3,r3,1
10006ca8:	d8c02b15 	stw	r3,172(sp)
10006cac:	1805883a 	mov	r2,r3
10006cb0:	1800ac16 	blt	r3,zero,10006f64 <___vfprintf_internal_r+0x21d0>
10006cb4:	d8003215 	stw	zero,200(sp)
10006cb8:	003e5d06 	br	10006630 <__alt_data_end+0xf8006630>
10006cbc:	d9002d17 	ldw	r4,180(sp)
10006cc0:	d9801e04 	addi	r6,sp,120
10006cc4:	b80b883a 	mov	r5,r23
10006cc8:	000c5740 	call	1000c574 <__sprint_r>
10006ccc:	1039351e 	bne	r2,zero,100051a4 <__alt_data_end+0xf80051a4>
10006cd0:	dc402617 	ldw	r17,152(sp)
10006cd4:	d8c02017 	ldw	r3,128(sp)
10006cd8:	d8801f17 	ldw	r2,124(sp)
10006cdc:	da000404 	addi	r8,sp,16
10006ce0:	003ed606 	br	1000683c <__alt_data_end+0xf800683c>
10006ce4:	182b883a 	mov	r21,r3
10006ce8:	d8002a15 	stw	zero,168(sp)
10006cec:	00388c06 	br	10004f20 <__alt_data_end+0xf8004f20>
10006cf0:	d8802a17 	ldw	r2,168(sp)
10006cf4:	103e071e 	bne	r2,zero,10006514 <__alt_data_end+0xf8006514>
10006cf8:	dc002a15 	stw	r16,168(sp)
10006cfc:	003e0506 	br	10006514 <__alt_data_end+0xf8006514>
10006d00:	d9002a17 	ldw	r4,168(sp)
10006d04:	20c00044 	addi	r3,r4,1
10006d08:	003e0f06 	br	10006548 <__alt_data_end+0xf8006548>
10006d0c:	01400184 	movi	r5,6
10006d10:	d9402a15 	stw	r5,168(sp)
10006d14:	003dff06 	br	10006514 <__alt_data_end+0xf8006514>
10006d18:	d8802104 	addi	r2,sp,132
10006d1c:	d8800315 	stw	r2,12(sp)
10006d20:	d8802504 	addi	r2,sp,148
10006d24:	d8800215 	stw	r2,8(sp)
10006d28:	d8802604 	addi	r2,sp,152
10006d2c:	d8800115 	stw	r2,4(sp)
10006d30:	d8802a17 	ldw	r2,168(sp)
10006d34:	d9403617 	ldw	r5,216(sp)
10006d38:	d9002d17 	ldw	r4,180(sp)
10006d3c:	d8800015 	stw	r2,0(sp)
10006d40:	01c000c4 	movi	r7,3
10006d44:	980d883a 	mov	r6,r19
10006d48:	da003d15 	stw	r8,244(sp)
10006d4c:	00074c40 	call	100074c4 <_dtoa_r>
10006d50:	d8c02a17 	ldw	r3,168(sp)
10006d54:	da003d17 	ldw	r8,244(sp)
10006d58:	1021883a 	mov	r16,r2
10006d5c:	10f9883a 	add	fp,r2,r3
10006d60:	81000007 	ldb	r4,0(r16)
10006d64:	00800c04 	movi	r2,48
10006d68:	20805e26 	beq	r4,r2,10006ee4 <___vfprintf_internal_r+0x2150>
10006d6c:	d8c02617 	ldw	r3,152(sp)
10006d70:	e0f9883a 	add	fp,fp,r3
10006d74:	003e0a06 	br	100065a0 <__alt_data_end+0xf80065a0>
10006d78:	00c00b44 	movi	r3,45
10006d7c:	24e0003c 	xorhi	r19,r4,32768
10006d80:	d8c02905 	stb	r3,164(sp)
10006d84:	003de906 	br	1000652c <__alt_data_end+0xf800652c>
10006d88:	d8c03217 	ldw	r3,200(sp)
10006d8c:	00c07a0e 	bge	zero,r3,10006f78 <___vfprintf_internal_r+0x21e4>
10006d90:	00800044 	movi	r2,1
10006d94:	d9003317 	ldw	r4,204(sp)
10006d98:	1105883a 	add	r2,r2,r4
10006d9c:	d8802b15 	stw	r2,172(sp)
10006da0:	10004e16 	blt	r2,zero,10006edc <___vfprintf_internal_r+0x2148>
10006da4:	044019c4 	movi	r17,103
10006da8:	003e2106 	br	10006630 <__alt_data_end+0xf8006630>
10006dac:	d9002a17 	ldw	r4,168(sp)
10006db0:	d8802104 	addi	r2,sp,132
10006db4:	d8800315 	stw	r2,12(sp)
10006db8:	d9000015 	stw	r4,0(sp)
10006dbc:	d8802504 	addi	r2,sp,148
10006dc0:	d9403617 	ldw	r5,216(sp)
10006dc4:	d9002d17 	ldw	r4,180(sp)
10006dc8:	d8800215 	stw	r2,8(sp)
10006dcc:	d8802604 	addi	r2,sp,152
10006dd0:	d8800115 	stw	r2,4(sp)
10006dd4:	01c000c4 	movi	r7,3
10006dd8:	980d883a 	mov	r6,r19
10006ddc:	da003d15 	stw	r8,244(sp)
10006de0:	00074c40 	call	100074c4 <_dtoa_r>
10006de4:	d8c02a17 	ldw	r3,168(sp)
10006de8:	da003d17 	ldw	r8,244(sp)
10006dec:	1021883a 	mov	r16,r2
10006df0:	00801184 	movi	r2,70
10006df4:	80f9883a 	add	fp,r16,r3
10006df8:	88bfd926 	beq	r17,r2,10006d60 <__alt_data_end+0xf8006d60>
10006dfc:	003de806 	br	100065a0 <__alt_data_end+0xf80065a0>
10006e00:	d9002a17 	ldw	r4,168(sp)
10006e04:	00c04d0e 	bge	zero,r3,10006f3c <___vfprintf_internal_r+0x21a8>
10006e08:	2000441e 	bne	r4,zero,10006f1c <___vfprintf_internal_r+0x2188>
10006e0c:	9480004c 	andi	r18,r18,1
10006e10:	9000421e 	bne	r18,zero,10006f1c <___vfprintf_internal_r+0x2188>
10006e14:	1805883a 	mov	r2,r3
10006e18:	18006f16 	blt	r3,zero,10006fd8 <___vfprintf_internal_r+0x2244>
10006e1c:	d8c03217 	ldw	r3,200(sp)
10006e20:	d8c02b15 	stw	r3,172(sp)
10006e24:	003e0206 	br	10006630 <__alt_data_end+0xf8006630>
10006e28:	df0022c4 	addi	fp,sp,139
10006e2c:	dc002a15 	stw	r16,168(sp)
10006e30:	4027883a 	mov	r19,r8
10006e34:	e021883a 	mov	r16,fp
10006e38:	b009883a 	mov	r4,r22
10006e3c:	01400284 	movi	r5,10
10006e40:	0004a640 	call	10004a64 <__modsi3>
10006e44:	10800c04 	addi	r2,r2,48
10006e48:	843fffc4 	addi	r16,r16,-1
10006e4c:	b009883a 	mov	r4,r22
10006e50:	01400284 	movi	r5,10
10006e54:	80800005 	stb	r2,0(r16)
10006e58:	00049e00 	call	100049e0 <__divsi3>
10006e5c:	102d883a 	mov	r22,r2
10006e60:	00800244 	movi	r2,9
10006e64:	15bff416 	blt	r2,r22,10006e38 <__alt_data_end+0xf8006e38>
10006e68:	9811883a 	mov	r8,r19
10006e6c:	b0800c04 	addi	r2,r22,48
10006e70:	8027883a 	mov	r19,r16
10006e74:	997fffc4 	addi	r5,r19,-1
10006e78:	98bfffc5 	stb	r2,-1(r19)
10006e7c:	dc002a17 	ldw	r16,168(sp)
10006e80:	2f006d2e 	bgeu	r5,fp,10007038 <___vfprintf_internal_r+0x22a4>
10006e84:	d9c02384 	addi	r7,sp,142
10006e88:	3ccfc83a 	sub	r7,r7,r19
10006e8c:	d9002344 	addi	r4,sp,141
10006e90:	e1cf883a 	add	r7,fp,r7
10006e94:	00000106 	br	10006e9c <___vfprintf_internal_r+0x2108>
10006e98:	28800003 	ldbu	r2,0(r5)
10006e9c:	20800005 	stb	r2,0(r4)
10006ea0:	21000044 	addi	r4,r4,1
10006ea4:	29400044 	addi	r5,r5,1
10006ea8:	393ffb1e 	bne	r7,r4,10006e98 <__alt_data_end+0xf8006e98>
10006eac:	d8802304 	addi	r2,sp,140
10006eb0:	14c5c83a 	sub	r2,r2,r19
10006eb4:	d8c02344 	addi	r3,sp,141
10006eb8:	1885883a 	add	r2,r3,r2
10006ebc:	003f7006 	br	10006c80 <__alt_data_end+0xf8006c80>
10006ec0:	0005883a 	mov	r2,zero
10006ec4:	003f0f06 	br	10006b04 <__alt_data_end+0xf8006b04>
10006ec8:	d8c03217 	ldw	r3,200(sp)
10006ecc:	18c00044 	addi	r3,r3,1
10006ed0:	d8c02b15 	stw	r3,172(sp)
10006ed4:	1805883a 	mov	r2,r3
10006ed8:	183fb20e 	bge	r3,zero,10006da4 <__alt_data_end+0xf8006da4>
10006edc:	0005883a 	mov	r2,zero
10006ee0:	003fb006 	br	10006da4 <__alt_data_end+0xf8006da4>
10006ee4:	d9003617 	ldw	r4,216(sp)
10006ee8:	000d883a 	mov	r6,zero
10006eec:	000f883a 	mov	r7,zero
10006ef0:	980b883a 	mov	r5,r19
10006ef4:	d8c03c15 	stw	r3,240(sp)
10006ef8:	da003d15 	stw	r8,244(sp)
10006efc:	00102f80 	call	100102f8 <__eqdf2>
10006f00:	d8c03c17 	ldw	r3,240(sp)
10006f04:	da003d17 	ldw	r8,244(sp)
10006f08:	103f9826 	beq	r2,zero,10006d6c <__alt_data_end+0xf8006d6c>
10006f0c:	00800044 	movi	r2,1
10006f10:	10c7c83a 	sub	r3,r2,r3
10006f14:	d8c02615 	stw	r3,152(sp)
10006f18:	003f9506 	br	10006d70 <__alt_data_end+0xf8006d70>
10006f1c:	d9002a17 	ldw	r4,168(sp)
10006f20:	d8c03217 	ldw	r3,200(sp)
10006f24:	20800044 	addi	r2,r4,1
10006f28:	1885883a 	add	r2,r3,r2
10006f2c:	d8802b15 	stw	r2,172(sp)
10006f30:	103dbf0e 	bge	r2,zero,10006630 <__alt_data_end+0xf8006630>
10006f34:	0005883a 	mov	r2,zero
10006f38:	003dbd06 	br	10006630 <__alt_data_end+0xf8006630>
10006f3c:	2000201e 	bne	r4,zero,10006fc0 <___vfprintf_internal_r+0x222c>
10006f40:	9480004c 	andi	r18,r18,1
10006f44:	90001e1e 	bne	r18,zero,10006fc0 <___vfprintf_internal_r+0x222c>
10006f48:	00800044 	movi	r2,1
10006f4c:	d8802b15 	stw	r2,172(sp)
10006f50:	003db706 	br	10006630 <__alt_data_end+0xf8006630>
10006f54:	00800b44 	movi	r2,45
10006f58:	05adc83a 	sub	r22,zero,r22
10006f5c:	d8802305 	stb	r2,140(sp)
10006f60:	003f3f06 	br	10006c60 <__alt_data_end+0xf8006c60>
10006f64:	0005883a 	mov	r2,zero
10006f68:	003f5206 	br	10006cb4 <__alt_data_end+0xf8006cb4>
10006f6c:	90a4703a 	and	r18,r18,r2
10006f70:	903f4e26 	beq	r18,zero,10006cac <__alt_data_end+0xf8006cac>
10006f74:	003f4a06 	br	10006ca0 <__alt_data_end+0xf8006ca0>
10006f78:	00800084 	movi	r2,2
10006f7c:	10c5c83a 	sub	r2,r2,r3
10006f80:	003f8406 	br	10006d94 <__alt_data_end+0xf8006d94>
10006f84:	d9402e17 	ldw	r5,184(sp)
10006f88:	d9002e17 	ldw	r4,184(sp)
10006f8c:	ac400043 	ldbu	r17,1(r21)
10006f90:	29400017 	ldw	r5,0(r5)
10006f94:	20800104 	addi	r2,r4,4
10006f98:	d8802e15 	stw	r2,184(sp)
10006f9c:	d9402a15 	stw	r5,168(sp)
10006fa0:	182b883a 	mov	r21,r3
10006fa4:	283e7b0e 	bge	r5,zero,10006994 <__alt_data_end+0xf8006994>
10006fa8:	8c403fcc 	andi	r17,r17,255
10006fac:	017fffc4 	movi	r5,-1
10006fb0:	8c40201c 	xori	r17,r17,128
10006fb4:	d9402a15 	stw	r5,168(sp)
10006fb8:	8c7fe004 	addi	r17,r17,-128
10006fbc:	0037d706 	br	10004f1c <__alt_data_end+0xf8004f1c>
10006fc0:	d8c02a17 	ldw	r3,168(sp)
10006fc4:	18c00084 	addi	r3,r3,2
10006fc8:	d8c02b15 	stw	r3,172(sp)
10006fcc:	1805883a 	mov	r2,r3
10006fd0:	183d970e 	bge	r3,zero,10006630 <__alt_data_end+0xf8006630>
10006fd4:	003fd706 	br	10006f34 <__alt_data_end+0xf8006f34>
10006fd8:	0005883a 	mov	r2,zero
10006fdc:	003f8f06 	br	10006e1c <__alt_data_end+0xf8006e1c>
10006fe0:	9080004c 	andi	r2,r18,1
10006fe4:	103f821e 	bne	r2,zero,10006df0 <__alt_data_end+0xf8006df0>
10006fe8:	d8802117 	ldw	r2,132(sp)
10006fec:	1405c83a 	sub	r2,r2,r16
10006ff0:	d8803315 	stw	r2,204(sp)
10006ff4:	b47ef426 	beq	r22,r17,10006bc8 <__alt_data_end+0xf8006bc8>
10006ff8:	dd802617 	ldw	r22,152(sp)
10006ffc:	003f1206 	br	10006c48 <__alt_data_end+0xf8006c48>
10007000:	d8c02b03 	ldbu	r3,172(sp)
10007004:	d8c02785 	stb	r3,158(sp)
10007008:	0038df06 	br	10005388 <__alt_data_end+0xf8005388>
1000700c:	d8c02b03 	ldbu	r3,172(sp)
10007010:	d8c02785 	stb	r3,158(sp)
10007014:	0038aa06 	br	100052c0 <__alt_data_end+0xf80052c0>
10007018:	d8c02b03 	ldbu	r3,172(sp)
1000701c:	d8c02785 	stb	r3,158(sp)
10007020:	003a4306 	br	10005930 <__alt_data_end+0xf8005930>
10007024:	d8c02b03 	ldbu	r3,172(sp)
10007028:	d8c02785 	stb	r3,158(sp)
1000702c:	003af506 	br	10005c04 <__alt_data_end+0xf8005c04>
10007030:	0005883a 	mov	r2,zero
10007034:	003d7b06 	br	10006624 <__alt_data_end+0xf8006624>
10007038:	d8802344 	addi	r2,sp,141
1000703c:	003f1006 	br	10006c80 <__alt_data_end+0xf8006c80>
10007040:	d8c02b03 	ldbu	r3,172(sp)
10007044:	d8c02785 	stb	r3,158(sp)
10007048:	0038fd06 	br	10005440 <__alt_data_end+0xf8005440>
1000704c:	d8c02b03 	ldbu	r3,172(sp)
10007050:	d8c02785 	stb	r3,158(sp)
10007054:	003a9706 	br	10005ab4 <__alt_data_end+0xf8005ab4>
10007058:	d8c02b03 	ldbu	r3,172(sp)
1000705c:	d8c02785 	stb	r3,158(sp)
10007060:	003a1806 	br	100058c4 <__alt_data_end+0xf80058c4>
10007064:	d8c02b03 	ldbu	r3,172(sp)
10007068:	d8c02785 	stb	r3,158(sp)
1000706c:	003abe06 	br	10005b68 <__alt_data_end+0xf8005b68>

10007070 <__vfprintf_internal>:
10007070:	008400b4 	movhi	r2,4098
10007074:	10b3fa04 	addi	r2,r2,-12312
10007078:	300f883a 	mov	r7,r6
1000707c:	280d883a 	mov	r6,r5
10007080:	200b883a 	mov	r5,r4
10007084:	11000017 	ldw	r4,0(r2)
10007088:	0004d941 	jmpi	10004d94 <___vfprintf_internal_r>

1000708c <__sbprintf>:
1000708c:	2880030b 	ldhu	r2,12(r5)
10007090:	2ac01917 	ldw	r11,100(r5)
10007094:	2a80038b 	ldhu	r10,14(r5)
10007098:	2a400717 	ldw	r9,28(r5)
1000709c:	2a000917 	ldw	r8,36(r5)
100070a0:	defee204 	addi	sp,sp,-1144
100070a4:	00c10004 	movi	r3,1024
100070a8:	dc011a15 	stw	r16,1128(sp)
100070ac:	10bfff4c 	andi	r2,r2,65533
100070b0:	2821883a 	mov	r16,r5
100070b4:	d8cb883a 	add	r5,sp,r3
100070b8:	dc811c15 	stw	r18,1136(sp)
100070bc:	dc411b15 	stw	r17,1132(sp)
100070c0:	dfc11d15 	stw	ra,1140(sp)
100070c4:	2025883a 	mov	r18,r4
100070c8:	d881030d 	sth	r2,1036(sp)
100070cc:	dac11915 	stw	r11,1124(sp)
100070d0:	da81038d 	sth	r10,1038(sp)
100070d4:	da410715 	stw	r9,1052(sp)
100070d8:	da010915 	stw	r8,1060(sp)
100070dc:	dec10015 	stw	sp,1024(sp)
100070e0:	dec10415 	stw	sp,1040(sp)
100070e4:	d8c10215 	stw	r3,1032(sp)
100070e8:	d8c10515 	stw	r3,1044(sp)
100070ec:	d8010615 	stw	zero,1048(sp)
100070f0:	0004d940 	call	10004d94 <___vfprintf_internal_r>
100070f4:	1023883a 	mov	r17,r2
100070f8:	10000416 	blt	r2,zero,1000710c <__sbprintf+0x80>
100070fc:	d9410004 	addi	r5,sp,1024
10007100:	9009883a 	mov	r4,r18
10007104:	0008d680 	call	10008d68 <_fflush_r>
10007108:	10000d1e 	bne	r2,zero,10007140 <__sbprintf+0xb4>
1000710c:	d881030b 	ldhu	r2,1036(sp)
10007110:	1080100c 	andi	r2,r2,64
10007114:	10000326 	beq	r2,zero,10007124 <__sbprintf+0x98>
10007118:	8080030b 	ldhu	r2,12(r16)
1000711c:	10801014 	ori	r2,r2,64
10007120:	8080030d 	sth	r2,12(r16)
10007124:	8805883a 	mov	r2,r17
10007128:	dfc11d17 	ldw	ra,1140(sp)
1000712c:	dc811c17 	ldw	r18,1136(sp)
10007130:	dc411b17 	ldw	r17,1132(sp)
10007134:	dc011a17 	ldw	r16,1128(sp)
10007138:	dec11e04 	addi	sp,sp,1144
1000713c:	f800283a 	ret
10007140:	047fffc4 	movi	r17,-1
10007144:	003ff106 	br	1000710c <__alt_data_end+0xf800710c>

10007148 <__swsetup_r>:
10007148:	008400b4 	movhi	r2,4098
1000714c:	defffd04 	addi	sp,sp,-12
10007150:	10b3fa04 	addi	r2,r2,-12312
10007154:	dc400115 	stw	r17,4(sp)
10007158:	2023883a 	mov	r17,r4
1000715c:	11000017 	ldw	r4,0(r2)
10007160:	dc000015 	stw	r16,0(sp)
10007164:	dfc00215 	stw	ra,8(sp)
10007168:	2821883a 	mov	r16,r5
1000716c:	20000226 	beq	r4,zero,10007178 <__swsetup_r+0x30>
10007170:	20800e17 	ldw	r2,56(r4)
10007174:	10003126 	beq	r2,zero,1000723c <__swsetup_r+0xf4>
10007178:	8080030b 	ldhu	r2,12(r16)
1000717c:	10c0020c 	andi	r3,r2,8
10007180:	1009883a 	mov	r4,r2
10007184:	18000f26 	beq	r3,zero,100071c4 <__swsetup_r+0x7c>
10007188:	80c00417 	ldw	r3,16(r16)
1000718c:	18001526 	beq	r3,zero,100071e4 <__swsetup_r+0x9c>
10007190:	1100004c 	andi	r4,r2,1
10007194:	20001c1e 	bne	r4,zero,10007208 <__swsetup_r+0xc0>
10007198:	1080008c 	andi	r2,r2,2
1000719c:	1000291e 	bne	r2,zero,10007244 <__swsetup_r+0xfc>
100071a0:	80800517 	ldw	r2,20(r16)
100071a4:	80800215 	stw	r2,8(r16)
100071a8:	18001c26 	beq	r3,zero,1000721c <__swsetup_r+0xd4>
100071ac:	0005883a 	mov	r2,zero
100071b0:	dfc00217 	ldw	ra,8(sp)
100071b4:	dc400117 	ldw	r17,4(sp)
100071b8:	dc000017 	ldw	r16,0(sp)
100071bc:	dec00304 	addi	sp,sp,12
100071c0:	f800283a 	ret
100071c4:	2080040c 	andi	r2,r4,16
100071c8:	10002e26 	beq	r2,zero,10007284 <__swsetup_r+0x13c>
100071cc:	2080010c 	andi	r2,r4,4
100071d0:	10001e1e 	bne	r2,zero,1000724c <__swsetup_r+0x104>
100071d4:	80c00417 	ldw	r3,16(r16)
100071d8:	20800214 	ori	r2,r4,8
100071dc:	8080030d 	sth	r2,12(r16)
100071e0:	183feb1e 	bne	r3,zero,10007190 <__alt_data_end+0xf8007190>
100071e4:	1100a00c 	andi	r4,r2,640
100071e8:	01408004 	movi	r5,512
100071ec:	217fe826 	beq	r4,r5,10007190 <__alt_data_end+0xf8007190>
100071f0:	800b883a 	mov	r5,r16
100071f4:	8809883a 	mov	r4,r17
100071f8:	0009d040 	call	10009d04 <__smakebuf_r>
100071fc:	8080030b 	ldhu	r2,12(r16)
10007200:	80c00417 	ldw	r3,16(r16)
10007204:	003fe206 	br	10007190 <__alt_data_end+0xf8007190>
10007208:	80800517 	ldw	r2,20(r16)
1000720c:	80000215 	stw	zero,8(r16)
10007210:	0085c83a 	sub	r2,zero,r2
10007214:	80800615 	stw	r2,24(r16)
10007218:	183fe41e 	bne	r3,zero,100071ac <__alt_data_end+0xf80071ac>
1000721c:	80c0030b 	ldhu	r3,12(r16)
10007220:	0005883a 	mov	r2,zero
10007224:	1900200c 	andi	r4,r3,128
10007228:	203fe126 	beq	r4,zero,100071b0 <__alt_data_end+0xf80071b0>
1000722c:	18c01014 	ori	r3,r3,64
10007230:	80c0030d 	sth	r3,12(r16)
10007234:	00bfffc4 	movi	r2,-1
10007238:	003fdd06 	br	100071b0 <__alt_data_end+0xf80071b0>
1000723c:	00091540 	call	10009154 <__sinit>
10007240:	003fcd06 	br	10007178 <__alt_data_end+0xf8007178>
10007244:	0005883a 	mov	r2,zero
10007248:	003fd606 	br	100071a4 <__alt_data_end+0xf80071a4>
1000724c:	81400c17 	ldw	r5,48(r16)
10007250:	28000626 	beq	r5,zero,1000726c <__swsetup_r+0x124>
10007254:	80801004 	addi	r2,r16,64
10007258:	28800326 	beq	r5,r2,10007268 <__swsetup_r+0x120>
1000725c:	8809883a 	mov	r4,r17
10007260:	00092c80 	call	100092c8 <_free_r>
10007264:	8100030b 	ldhu	r4,12(r16)
10007268:	80000c15 	stw	zero,48(r16)
1000726c:	80c00417 	ldw	r3,16(r16)
10007270:	00bff6c4 	movi	r2,-37
10007274:	1108703a 	and	r4,r2,r4
10007278:	80000115 	stw	zero,4(r16)
1000727c:	80c00015 	stw	r3,0(r16)
10007280:	003fd506 	br	100071d8 <__alt_data_end+0xf80071d8>
10007284:	00800244 	movi	r2,9
10007288:	88800015 	stw	r2,0(r17)
1000728c:	20801014 	ori	r2,r4,64
10007290:	8080030d 	sth	r2,12(r16)
10007294:	00bfffc4 	movi	r2,-1
10007298:	003fc506 	br	100071b0 <__alt_data_end+0xf80071b0>

1000729c <quorem>:
1000729c:	defff204 	addi	sp,sp,-56
100072a0:	ddc00b15 	stw	r23,44(sp)
100072a4:	20800417 	ldw	r2,16(r4)
100072a8:	2dc00417 	ldw	r23,16(r5)
100072ac:	dfc00d15 	stw	ra,52(sp)
100072b0:	df000c15 	stw	fp,48(sp)
100072b4:	dd800a15 	stw	r22,40(sp)
100072b8:	dd400915 	stw	r21,36(sp)
100072bc:	dd000815 	stw	r20,32(sp)
100072c0:	dcc00715 	stw	r19,28(sp)
100072c4:	dc800615 	stw	r18,24(sp)
100072c8:	dc400515 	stw	r17,20(sp)
100072cc:	dc000415 	stw	r16,16(sp)
100072d0:	15c07a16 	blt	r2,r23,100074bc <quorem+0x220>
100072d4:	bdffffc4 	addi	r23,r23,-1
100072d8:	bde9883a 	add	r20,r23,r23
100072dc:	28c00504 	addi	r3,r5,20
100072e0:	a529883a 	add	r20,r20,r20
100072e4:	1d39883a 	add	fp,r3,r20
100072e8:	24c00504 	addi	r19,r4,20
100072ec:	d9400215 	stw	r5,8(sp)
100072f0:	9d29883a 	add	r20,r19,r20
100072f4:	e1400017 	ldw	r5,0(fp)
100072f8:	d9000015 	stw	r4,0(sp)
100072fc:	a1000017 	ldw	r4,0(r20)
10007300:	29400044 	addi	r5,r5,1
10007304:	d8c00115 	stw	r3,4(sp)
10007308:	dd000315 	stw	r20,12(sp)
1000730c:	0004ad80 	call	10004ad8 <__udivsi3>
10007310:	1025883a 	mov	r18,r2
10007314:	10003026 	beq	r2,zero,100073d8 <quorem+0x13c>
10007318:	dc400117 	ldw	r17,4(sp)
1000731c:	9829883a 	mov	r20,r19
10007320:	002d883a 	mov	r22,zero
10007324:	0021883a 	mov	r16,zero
10007328:	8d400017 	ldw	r21,0(r17)
1000732c:	900b883a 	mov	r5,r18
10007330:	8c400104 	addi	r17,r17,4
10007334:	a93fffcc 	andi	r4,r21,65535
10007338:	0004b940 	call	10004b94 <__mulsi3>
1000733c:	a808d43a 	srli	r4,r21,16
10007340:	900b883a 	mov	r5,r18
10007344:	15ad883a 	add	r22,r2,r22
10007348:	0004b940 	call	10004b94 <__mulsi3>
1000734c:	a1000017 	ldw	r4,0(r20)
10007350:	b00cd43a 	srli	r6,r22,16
10007354:	b0ffffcc 	andi	r3,r22,65535
10007358:	217fffcc 	andi	r5,r4,65535
1000735c:	2c21883a 	add	r16,r5,r16
10007360:	80c7c83a 	sub	r3,r16,r3
10007364:	2008d43a 	srli	r4,r4,16
10007368:	1185883a 	add	r2,r2,r6
1000736c:	1821d43a 	srai	r16,r3,16
10007370:	117fffcc 	andi	r5,r2,65535
10007374:	2149c83a 	sub	r4,r4,r5
10007378:	2421883a 	add	r16,r4,r16
1000737c:	8008943a 	slli	r4,r16,16
10007380:	18ffffcc 	andi	r3,r3,65535
10007384:	102cd43a 	srli	r22,r2,16
10007388:	20c8b03a 	or	r4,r4,r3
1000738c:	a1000015 	stw	r4,0(r20)
10007390:	8021d43a 	srai	r16,r16,16
10007394:	a5000104 	addi	r20,r20,4
10007398:	e47fe32e 	bgeu	fp,r17,10007328 <__alt_data_end+0xf8007328>
1000739c:	d8c00317 	ldw	r3,12(sp)
100073a0:	18800017 	ldw	r2,0(r3)
100073a4:	10000c1e 	bne	r2,zero,100073d8 <quorem+0x13c>
100073a8:	18bfff04 	addi	r2,r3,-4
100073ac:	9880082e 	bgeu	r19,r2,100073d0 <quorem+0x134>
100073b0:	18ffff17 	ldw	r3,-4(r3)
100073b4:	18000326 	beq	r3,zero,100073c4 <quorem+0x128>
100073b8:	00000506 	br	100073d0 <quorem+0x134>
100073bc:	10c00017 	ldw	r3,0(r2)
100073c0:	1800031e 	bne	r3,zero,100073d0 <quorem+0x134>
100073c4:	10bfff04 	addi	r2,r2,-4
100073c8:	bdffffc4 	addi	r23,r23,-1
100073cc:	98bffb36 	bltu	r19,r2,100073bc <__alt_data_end+0xf80073bc>
100073d0:	d8c00017 	ldw	r3,0(sp)
100073d4:	1dc00415 	stw	r23,16(r3)
100073d8:	d9400217 	ldw	r5,8(sp)
100073dc:	d9000017 	ldw	r4,0(sp)
100073e0:	000b5000 	call	1000b500 <__mcmp>
100073e4:	10002816 	blt	r2,zero,10007488 <quorem+0x1ec>
100073e8:	dc400117 	ldw	r17,4(sp)
100073ec:	94800044 	addi	r18,r18,1
100073f0:	980d883a 	mov	r6,r19
100073f4:	0007883a 	mov	r3,zero
100073f8:	31000017 	ldw	r4,0(r6)
100073fc:	89400017 	ldw	r5,0(r17)
10007400:	31800104 	addi	r6,r6,4
10007404:	20bfffcc 	andi	r2,r4,65535
10007408:	10c7883a 	add	r3,r2,r3
1000740c:	28bfffcc 	andi	r2,r5,65535
10007410:	1885c83a 	sub	r2,r3,r2
10007414:	280ad43a 	srli	r5,r5,16
10007418:	2008d43a 	srli	r4,r4,16
1000741c:	1007d43a 	srai	r3,r2,16
10007420:	10bfffcc 	andi	r2,r2,65535
10007424:	2149c83a 	sub	r4,r4,r5
10007428:	20c9883a 	add	r4,r4,r3
1000742c:	200a943a 	slli	r5,r4,16
10007430:	8c400104 	addi	r17,r17,4
10007434:	2007d43a 	srai	r3,r4,16
10007438:	2884b03a 	or	r2,r5,r2
1000743c:	30bfff15 	stw	r2,-4(r6)
10007440:	e47fed2e 	bgeu	fp,r17,100073f8 <__alt_data_end+0xf80073f8>
10007444:	bdc5883a 	add	r2,r23,r23
10007448:	1085883a 	add	r2,r2,r2
1000744c:	9887883a 	add	r3,r19,r2
10007450:	18800017 	ldw	r2,0(r3)
10007454:	10000c1e 	bne	r2,zero,10007488 <quorem+0x1ec>
10007458:	18bfff04 	addi	r2,r3,-4
1000745c:	9880082e 	bgeu	r19,r2,10007480 <quorem+0x1e4>
10007460:	18ffff17 	ldw	r3,-4(r3)
10007464:	18000326 	beq	r3,zero,10007474 <quorem+0x1d8>
10007468:	00000506 	br	10007480 <quorem+0x1e4>
1000746c:	10c00017 	ldw	r3,0(r2)
10007470:	1800031e 	bne	r3,zero,10007480 <quorem+0x1e4>
10007474:	10bfff04 	addi	r2,r2,-4
10007478:	bdffffc4 	addi	r23,r23,-1
1000747c:	98bffb36 	bltu	r19,r2,1000746c <__alt_data_end+0xf800746c>
10007480:	d8c00017 	ldw	r3,0(sp)
10007484:	1dc00415 	stw	r23,16(r3)
10007488:	9005883a 	mov	r2,r18
1000748c:	dfc00d17 	ldw	ra,52(sp)
10007490:	df000c17 	ldw	fp,48(sp)
10007494:	ddc00b17 	ldw	r23,44(sp)
10007498:	dd800a17 	ldw	r22,40(sp)
1000749c:	dd400917 	ldw	r21,36(sp)
100074a0:	dd000817 	ldw	r20,32(sp)
100074a4:	dcc00717 	ldw	r19,28(sp)
100074a8:	dc800617 	ldw	r18,24(sp)
100074ac:	dc400517 	ldw	r17,20(sp)
100074b0:	dc000417 	ldw	r16,16(sp)
100074b4:	dec00e04 	addi	sp,sp,56
100074b8:	f800283a 	ret
100074bc:	0005883a 	mov	r2,zero
100074c0:	003ff206 	br	1000748c <__alt_data_end+0xf800748c>

100074c4 <_dtoa_r>:
100074c4:	20801017 	ldw	r2,64(r4)
100074c8:	deffde04 	addi	sp,sp,-136
100074cc:	df002015 	stw	fp,128(sp)
100074d0:	dcc01b15 	stw	r19,108(sp)
100074d4:	dc801a15 	stw	r18,104(sp)
100074d8:	dc401915 	stw	r17,100(sp)
100074dc:	dc001815 	stw	r16,96(sp)
100074e0:	dfc02115 	stw	ra,132(sp)
100074e4:	ddc01f15 	stw	r23,124(sp)
100074e8:	dd801e15 	stw	r22,120(sp)
100074ec:	dd401d15 	stw	r21,116(sp)
100074f0:	dd001c15 	stw	r20,112(sp)
100074f4:	d9c00315 	stw	r7,12(sp)
100074f8:	2039883a 	mov	fp,r4
100074fc:	3023883a 	mov	r17,r6
10007500:	2825883a 	mov	r18,r5
10007504:	dc002417 	ldw	r16,144(sp)
10007508:	3027883a 	mov	r19,r6
1000750c:	10000826 	beq	r2,zero,10007530 <_dtoa_r+0x6c>
10007510:	21801117 	ldw	r6,68(r4)
10007514:	00c00044 	movi	r3,1
10007518:	100b883a 	mov	r5,r2
1000751c:	1986983a 	sll	r3,r3,r6
10007520:	11800115 	stw	r6,4(r2)
10007524:	10c00215 	stw	r3,8(r2)
10007528:	000ac240 	call	1000ac24 <_Bfree>
1000752c:	e0001015 	stw	zero,64(fp)
10007530:	88002e16 	blt	r17,zero,100075ec <_dtoa_r+0x128>
10007534:	80000015 	stw	zero,0(r16)
10007538:	889ffc2c 	andhi	r2,r17,32752
1000753c:	00dffc34 	movhi	r3,32752
10007540:	10c01c26 	beq	r2,r3,100075b4 <_dtoa_r+0xf0>
10007544:	000d883a 	mov	r6,zero
10007548:	000f883a 	mov	r7,zero
1000754c:	9009883a 	mov	r4,r18
10007550:	980b883a 	mov	r5,r19
10007554:	00102f80 	call	100102f8 <__eqdf2>
10007558:	10002b1e 	bne	r2,zero,10007608 <_dtoa_r+0x144>
1000755c:	d9c02317 	ldw	r7,140(sp)
10007560:	00800044 	movi	r2,1
10007564:	38800015 	stw	r2,0(r7)
10007568:	d8802517 	ldw	r2,148(sp)
1000756c:	10019e26 	beq	r2,zero,10007be8 <_dtoa_r+0x724>
10007570:	d8c02517 	ldw	r3,148(sp)
10007574:	00840074 	movhi	r2,4097
10007578:	10927444 	addi	r2,r2,18897
1000757c:	18800015 	stw	r2,0(r3)
10007580:	10bfffc4 	addi	r2,r2,-1
10007584:	dfc02117 	ldw	ra,132(sp)
10007588:	df002017 	ldw	fp,128(sp)
1000758c:	ddc01f17 	ldw	r23,124(sp)
10007590:	dd801e17 	ldw	r22,120(sp)
10007594:	dd401d17 	ldw	r21,116(sp)
10007598:	dd001c17 	ldw	r20,112(sp)
1000759c:	dcc01b17 	ldw	r19,108(sp)
100075a0:	dc801a17 	ldw	r18,104(sp)
100075a4:	dc401917 	ldw	r17,100(sp)
100075a8:	dc001817 	ldw	r16,96(sp)
100075ac:	dec02204 	addi	sp,sp,136
100075b0:	f800283a 	ret
100075b4:	d8c02317 	ldw	r3,140(sp)
100075b8:	0089c3c4 	movi	r2,9999
100075bc:	18800015 	stw	r2,0(r3)
100075c0:	90017726 	beq	r18,zero,10007ba0 <_dtoa_r+0x6dc>
100075c4:	00840074 	movhi	r2,4097
100075c8:	10928004 	addi	r2,r2,18944
100075cc:	d9002517 	ldw	r4,148(sp)
100075d0:	203fec26 	beq	r4,zero,10007584 <__alt_data_end+0xf8007584>
100075d4:	10c000c7 	ldb	r3,3(r2)
100075d8:	1801781e 	bne	r3,zero,10007bbc <_dtoa_r+0x6f8>
100075dc:	10c000c4 	addi	r3,r2,3
100075e0:	d9802517 	ldw	r6,148(sp)
100075e4:	30c00015 	stw	r3,0(r6)
100075e8:	003fe606 	br	10007584 <__alt_data_end+0xf8007584>
100075ec:	04e00034 	movhi	r19,32768
100075f0:	9cffffc4 	addi	r19,r19,-1
100075f4:	00800044 	movi	r2,1
100075f8:	8ce6703a 	and	r19,r17,r19
100075fc:	80800015 	stw	r2,0(r16)
10007600:	9823883a 	mov	r17,r19
10007604:	003fcc06 	br	10007538 <__alt_data_end+0xf8007538>
10007608:	d8800204 	addi	r2,sp,8
1000760c:	d8800015 	stw	r2,0(sp)
10007610:	d9c00104 	addi	r7,sp,4
10007614:	900b883a 	mov	r5,r18
10007618:	980d883a 	mov	r6,r19
1000761c:	e009883a 	mov	r4,fp
10007620:	8820d53a 	srli	r16,r17,20
10007624:	000b8cc0 	call	1000b8cc <__d2b>
10007628:	d8800915 	stw	r2,36(sp)
1000762c:	8001651e 	bne	r16,zero,10007bc4 <_dtoa_r+0x700>
10007630:	dd800217 	ldw	r22,8(sp)
10007634:	dc000117 	ldw	r16,4(sp)
10007638:	00800804 	movi	r2,32
1000763c:	b421883a 	add	r16,r22,r16
10007640:	80c10c84 	addi	r3,r16,1074
10007644:	10c2d10e 	bge	r2,r3,1000818c <_dtoa_r+0xcc8>
10007648:	00801004 	movi	r2,64
1000764c:	81010484 	addi	r4,r16,1042
10007650:	10c7c83a 	sub	r3,r2,r3
10007654:	9108d83a 	srl	r4,r18,r4
10007658:	88e2983a 	sll	r17,r17,r3
1000765c:	2448b03a 	or	r4,r4,r17
10007660:	00118140 	call	10011814 <__floatunsidf>
10007664:	017f8434 	movhi	r5,65040
10007668:	01800044 	movi	r6,1
1000766c:	1009883a 	mov	r4,r2
10007670:	194b883a 	add	r5,r3,r5
10007674:	843fffc4 	addi	r16,r16,-1
10007678:	d9801115 	stw	r6,68(sp)
1000767c:	000d883a 	mov	r6,zero
10007680:	01cffe34 	movhi	r7,16376
10007684:	0010dbc0 	call	10010dbc <__subdf3>
10007688:	0198dbf4 	movhi	r6,25455
1000768c:	01cff4f4 	movhi	r7,16339
10007690:	3190d844 	addi	r6,r6,17249
10007694:	39e1e9c4 	addi	r7,r7,-30809
10007698:	1009883a 	mov	r4,r2
1000769c:	180b883a 	mov	r5,r3
100076a0:	00105500 	call	10010550 <__muldf3>
100076a4:	01a2d874 	movhi	r6,35681
100076a8:	01cff1f4 	movhi	r7,16327
100076ac:	31b22cc4 	addi	r6,r6,-14157
100076b0:	39e28a04 	addi	r7,r7,-30168
100076b4:	180b883a 	mov	r5,r3
100076b8:	1009883a 	mov	r4,r2
100076bc:	000f07c0 	call	1000f07c <__adddf3>
100076c0:	8009883a 	mov	r4,r16
100076c4:	1029883a 	mov	r20,r2
100076c8:	1823883a 	mov	r17,r3
100076cc:	00117380 	call	10011738 <__floatsidf>
100076d0:	019427f4 	movhi	r6,20639
100076d4:	01cff4f4 	movhi	r7,16339
100076d8:	319e7ec4 	addi	r6,r6,31227
100076dc:	39d104c4 	addi	r7,r7,17427
100076e0:	1009883a 	mov	r4,r2
100076e4:	180b883a 	mov	r5,r3
100076e8:	00105500 	call	10010550 <__muldf3>
100076ec:	100d883a 	mov	r6,r2
100076f0:	180f883a 	mov	r7,r3
100076f4:	a009883a 	mov	r4,r20
100076f8:	880b883a 	mov	r5,r17
100076fc:	000f07c0 	call	1000f07c <__adddf3>
10007700:	1009883a 	mov	r4,r2
10007704:	180b883a 	mov	r5,r3
10007708:	1029883a 	mov	r20,r2
1000770c:	1823883a 	mov	r17,r3
10007710:	00116b80 	call	100116b8 <__fixdfsi>
10007714:	000d883a 	mov	r6,zero
10007718:	000f883a 	mov	r7,zero
1000771c:	a009883a 	mov	r4,r20
10007720:	880b883a 	mov	r5,r17
10007724:	d8800515 	stw	r2,20(sp)
10007728:	001045c0 	call	1001045c <__ledf2>
1000772c:	10028716 	blt	r2,zero,1000814c <_dtoa_r+0xc88>
10007730:	d8c00517 	ldw	r3,20(sp)
10007734:	00800584 	movi	r2,22
10007738:	10c27536 	bltu	r2,r3,10008110 <_dtoa_r+0xc4c>
1000773c:	180490fa 	slli	r2,r3,3
10007740:	00c40074 	movhi	r3,4097
10007744:	18d29c04 	addi	r3,r3,19056
10007748:	1885883a 	add	r2,r3,r2
1000774c:	11000017 	ldw	r4,0(r2)
10007750:	11400117 	ldw	r5,4(r2)
10007754:	900d883a 	mov	r6,r18
10007758:	980f883a 	mov	r7,r19
1000775c:	00103800 	call	10010380 <__gedf2>
10007760:	00828d0e 	bge	zero,r2,10008198 <_dtoa_r+0xcd4>
10007764:	d9000517 	ldw	r4,20(sp)
10007768:	d8000e15 	stw	zero,56(sp)
1000776c:	213fffc4 	addi	r4,r4,-1
10007770:	d9000515 	stw	r4,20(sp)
10007774:	b42dc83a 	sub	r22,r22,r16
10007778:	b5bfffc4 	addi	r22,r22,-1
1000777c:	b0026f16 	blt	r22,zero,1000813c <_dtoa_r+0xc78>
10007780:	d8000815 	stw	zero,32(sp)
10007784:	d9c00517 	ldw	r7,20(sp)
10007788:	38026416 	blt	r7,zero,1000811c <_dtoa_r+0xc58>
1000778c:	b1ed883a 	add	r22,r22,r7
10007790:	d9c00d15 	stw	r7,52(sp)
10007794:	d8000a15 	stw	zero,40(sp)
10007798:	d9800317 	ldw	r6,12(sp)
1000779c:	00800244 	movi	r2,9
100077a0:	11811436 	bltu	r2,r6,10007bf4 <_dtoa_r+0x730>
100077a4:	00800144 	movi	r2,5
100077a8:	1184e10e 	bge	r2,r6,10008b30 <_dtoa_r+0x166c>
100077ac:	31bfff04 	addi	r6,r6,-4
100077b0:	d9800315 	stw	r6,12(sp)
100077b4:	0023883a 	mov	r17,zero
100077b8:	d9800317 	ldw	r6,12(sp)
100077bc:	008000c4 	movi	r2,3
100077c0:	30836726 	beq	r6,r2,10008560 <_dtoa_r+0x109c>
100077c4:	1183410e 	bge	r2,r6,100084cc <_dtoa_r+0x1008>
100077c8:	d9c00317 	ldw	r7,12(sp)
100077cc:	00800104 	movi	r2,4
100077d0:	38827c26 	beq	r7,r2,100081c4 <_dtoa_r+0xd00>
100077d4:	00800144 	movi	r2,5
100077d8:	3884c41e 	bne	r7,r2,10008aec <_dtoa_r+0x1628>
100077dc:	00800044 	movi	r2,1
100077e0:	d8800b15 	stw	r2,44(sp)
100077e4:	d8c00517 	ldw	r3,20(sp)
100077e8:	d9002217 	ldw	r4,136(sp)
100077ec:	1907883a 	add	r3,r3,r4
100077f0:	19800044 	addi	r6,r3,1
100077f4:	d8c00c15 	stw	r3,48(sp)
100077f8:	d9800615 	stw	r6,24(sp)
100077fc:	0183a40e 	bge	zero,r6,10008690 <_dtoa_r+0x11cc>
10007800:	d9800617 	ldw	r6,24(sp)
10007804:	3021883a 	mov	r16,r6
10007808:	e0001115 	stw	zero,68(fp)
1000780c:	008005c4 	movi	r2,23
10007810:	1184c92e 	bgeu	r2,r6,10008b38 <_dtoa_r+0x1674>
10007814:	00c00044 	movi	r3,1
10007818:	00800104 	movi	r2,4
1000781c:	1085883a 	add	r2,r2,r2
10007820:	11000504 	addi	r4,r2,20
10007824:	180b883a 	mov	r5,r3
10007828:	18c00044 	addi	r3,r3,1
1000782c:	313ffb2e 	bgeu	r6,r4,1000781c <__alt_data_end+0xf800781c>
10007830:	e1401115 	stw	r5,68(fp)
10007834:	e009883a 	mov	r4,fp
10007838:	000ab7c0 	call	1000ab7c <_Balloc>
1000783c:	d8800715 	stw	r2,28(sp)
10007840:	e0801015 	stw	r2,64(fp)
10007844:	00800384 	movi	r2,14
10007848:	1400f736 	bltu	r2,r16,10007c28 <_dtoa_r+0x764>
1000784c:	8800f626 	beq	r17,zero,10007c28 <_dtoa_r+0x764>
10007850:	d9c00517 	ldw	r7,20(sp)
10007854:	01c39a0e 	bge	zero,r7,100086c0 <_dtoa_r+0x11fc>
10007858:	388003cc 	andi	r2,r7,15
1000785c:	100490fa 	slli	r2,r2,3
10007860:	382bd13a 	srai	r21,r7,4
10007864:	00c40074 	movhi	r3,4097
10007868:	18d29c04 	addi	r3,r3,19056
1000786c:	1885883a 	add	r2,r3,r2
10007870:	a8c0040c 	andi	r3,r21,16
10007874:	12400017 	ldw	r9,0(r2)
10007878:	12000117 	ldw	r8,4(r2)
1000787c:	18037926 	beq	r3,zero,10008664 <_dtoa_r+0x11a0>
10007880:	00840074 	movhi	r2,4097
10007884:	10929204 	addi	r2,r2,19016
10007888:	11800817 	ldw	r6,32(r2)
1000788c:	11c00917 	ldw	r7,36(r2)
10007890:	9009883a 	mov	r4,r18
10007894:	980b883a 	mov	r5,r19
10007898:	da001715 	stw	r8,92(sp)
1000789c:	da401615 	stw	r9,88(sp)
100078a0:	000f9280 	call	1000f928 <__divdf3>
100078a4:	da001717 	ldw	r8,92(sp)
100078a8:	da401617 	ldw	r9,88(sp)
100078ac:	ad4003cc 	andi	r21,r21,15
100078b0:	040000c4 	movi	r16,3
100078b4:	1023883a 	mov	r17,r2
100078b8:	1829883a 	mov	r20,r3
100078bc:	a8001126 	beq	r21,zero,10007904 <_dtoa_r+0x440>
100078c0:	05c40074 	movhi	r23,4097
100078c4:	bdd29204 	addi	r23,r23,19016
100078c8:	4805883a 	mov	r2,r9
100078cc:	4007883a 	mov	r3,r8
100078d0:	a980004c 	andi	r6,r21,1
100078d4:	1009883a 	mov	r4,r2
100078d8:	a82bd07a 	srai	r21,r21,1
100078dc:	180b883a 	mov	r5,r3
100078e0:	30000426 	beq	r6,zero,100078f4 <_dtoa_r+0x430>
100078e4:	b9800017 	ldw	r6,0(r23)
100078e8:	b9c00117 	ldw	r7,4(r23)
100078ec:	84000044 	addi	r16,r16,1
100078f0:	00105500 	call	10010550 <__muldf3>
100078f4:	bdc00204 	addi	r23,r23,8
100078f8:	a83ff51e 	bne	r21,zero,100078d0 <__alt_data_end+0xf80078d0>
100078fc:	1013883a 	mov	r9,r2
10007900:	1811883a 	mov	r8,r3
10007904:	480d883a 	mov	r6,r9
10007908:	400f883a 	mov	r7,r8
1000790c:	8809883a 	mov	r4,r17
10007910:	a00b883a 	mov	r5,r20
10007914:	000f9280 	call	1000f928 <__divdf3>
10007918:	d8800f15 	stw	r2,60(sp)
1000791c:	d8c01015 	stw	r3,64(sp)
10007920:	d8c00e17 	ldw	r3,56(sp)
10007924:	18000626 	beq	r3,zero,10007940 <_dtoa_r+0x47c>
10007928:	d9000f17 	ldw	r4,60(sp)
1000792c:	d9401017 	ldw	r5,64(sp)
10007930:	000d883a 	mov	r6,zero
10007934:	01cffc34 	movhi	r7,16368
10007938:	001045c0 	call	1001045c <__ledf2>
1000793c:	10040b16 	blt	r2,zero,1000896c <_dtoa_r+0x14a8>
10007940:	8009883a 	mov	r4,r16
10007944:	00117380 	call	10011738 <__floatsidf>
10007948:	d9800f17 	ldw	r6,60(sp)
1000794c:	d9c01017 	ldw	r7,64(sp)
10007950:	1009883a 	mov	r4,r2
10007954:	180b883a 	mov	r5,r3
10007958:	00105500 	call	10010550 <__muldf3>
1000795c:	000d883a 	mov	r6,zero
10007960:	01d00734 	movhi	r7,16412
10007964:	1009883a 	mov	r4,r2
10007968:	180b883a 	mov	r5,r3
1000796c:	000f07c0 	call	1000f07c <__adddf3>
10007970:	1021883a 	mov	r16,r2
10007974:	d8800617 	ldw	r2,24(sp)
10007978:	047f3034 	movhi	r17,64704
1000797c:	1c63883a 	add	r17,r3,r17
10007980:	10031826 	beq	r2,zero,100085e4 <_dtoa_r+0x1120>
10007984:	d8c00517 	ldw	r3,20(sp)
10007988:	db000617 	ldw	r12,24(sp)
1000798c:	d8c01315 	stw	r3,76(sp)
10007990:	d9000b17 	ldw	r4,44(sp)
10007994:	20038f26 	beq	r4,zero,100087d4 <_dtoa_r+0x1310>
10007998:	60bfffc4 	addi	r2,r12,-1
1000799c:	100490fa 	slli	r2,r2,3
100079a0:	00c40074 	movhi	r3,4097
100079a4:	18d29c04 	addi	r3,r3,19056
100079a8:	1885883a 	add	r2,r3,r2
100079ac:	11800017 	ldw	r6,0(r2)
100079b0:	11c00117 	ldw	r7,4(r2)
100079b4:	d8800717 	ldw	r2,28(sp)
100079b8:	0009883a 	mov	r4,zero
100079bc:	014ff834 	movhi	r5,16352
100079c0:	db001615 	stw	r12,88(sp)
100079c4:	15c00044 	addi	r23,r2,1
100079c8:	000f9280 	call	1000f928 <__divdf3>
100079cc:	800d883a 	mov	r6,r16
100079d0:	880f883a 	mov	r7,r17
100079d4:	1009883a 	mov	r4,r2
100079d8:	180b883a 	mov	r5,r3
100079dc:	0010dbc0 	call	10010dbc <__subdf3>
100079e0:	d9401017 	ldw	r5,64(sp)
100079e4:	d9000f17 	ldw	r4,60(sp)
100079e8:	102b883a 	mov	r21,r2
100079ec:	d8c01215 	stw	r3,72(sp)
100079f0:	00116b80 	call	100116b8 <__fixdfsi>
100079f4:	1009883a 	mov	r4,r2
100079f8:	1029883a 	mov	r20,r2
100079fc:	00117380 	call	10011738 <__floatsidf>
10007a00:	d9000f17 	ldw	r4,60(sp)
10007a04:	d9401017 	ldw	r5,64(sp)
10007a08:	100d883a 	mov	r6,r2
10007a0c:	180f883a 	mov	r7,r3
10007a10:	0010dbc0 	call	10010dbc <__subdf3>
10007a14:	1823883a 	mov	r17,r3
10007a18:	d8c00717 	ldw	r3,28(sp)
10007a1c:	d9401217 	ldw	r5,72(sp)
10007a20:	a2000c04 	addi	r8,r20,48
10007a24:	1021883a 	mov	r16,r2
10007a28:	1a000005 	stb	r8,0(r3)
10007a2c:	800d883a 	mov	r6,r16
10007a30:	880f883a 	mov	r7,r17
10007a34:	a809883a 	mov	r4,r21
10007a38:	4029883a 	mov	r20,r8
10007a3c:	00103800 	call	10010380 <__gedf2>
10007a40:	00841d16 	blt	zero,r2,10008ab8 <_dtoa_r+0x15f4>
10007a44:	800d883a 	mov	r6,r16
10007a48:	880f883a 	mov	r7,r17
10007a4c:	0009883a 	mov	r4,zero
10007a50:	014ffc34 	movhi	r5,16368
10007a54:	0010dbc0 	call	10010dbc <__subdf3>
10007a58:	d9401217 	ldw	r5,72(sp)
10007a5c:	100d883a 	mov	r6,r2
10007a60:	180f883a 	mov	r7,r3
10007a64:	a809883a 	mov	r4,r21
10007a68:	00103800 	call	10010380 <__gedf2>
10007a6c:	db001617 	ldw	r12,88(sp)
10007a70:	00840e16 	blt	zero,r2,10008aac <_dtoa_r+0x15e8>
10007a74:	00800044 	movi	r2,1
10007a78:	13006b0e 	bge	r2,r12,10007c28 <_dtoa_r+0x764>
10007a7c:	d9000717 	ldw	r4,28(sp)
10007a80:	dd800f15 	stw	r22,60(sp)
10007a84:	dcc01015 	stw	r19,64(sp)
10007a88:	2319883a 	add	r12,r4,r12
10007a8c:	dcc01217 	ldw	r19,72(sp)
10007a90:	602d883a 	mov	r22,r12
10007a94:	dc801215 	stw	r18,72(sp)
10007a98:	b825883a 	mov	r18,r23
10007a9c:	00000906 	br	10007ac4 <_dtoa_r+0x600>
10007aa0:	0010dbc0 	call	10010dbc <__subdf3>
10007aa4:	a80d883a 	mov	r6,r21
10007aa8:	980f883a 	mov	r7,r19
10007aac:	1009883a 	mov	r4,r2
10007ab0:	180b883a 	mov	r5,r3
10007ab4:	001045c0 	call	1001045c <__ledf2>
10007ab8:	1003e816 	blt	r2,zero,10008a5c <_dtoa_r+0x1598>
10007abc:	b825883a 	mov	r18,r23
10007ac0:	bd83e926 	beq	r23,r22,10008a68 <_dtoa_r+0x15a4>
10007ac4:	a809883a 	mov	r4,r21
10007ac8:	980b883a 	mov	r5,r19
10007acc:	000d883a 	mov	r6,zero
10007ad0:	01d00934 	movhi	r7,16420
10007ad4:	00105500 	call	10010550 <__muldf3>
10007ad8:	000d883a 	mov	r6,zero
10007adc:	01d00934 	movhi	r7,16420
10007ae0:	8009883a 	mov	r4,r16
10007ae4:	880b883a 	mov	r5,r17
10007ae8:	102b883a 	mov	r21,r2
10007aec:	1827883a 	mov	r19,r3
10007af0:	00105500 	call	10010550 <__muldf3>
10007af4:	180b883a 	mov	r5,r3
10007af8:	1009883a 	mov	r4,r2
10007afc:	1821883a 	mov	r16,r3
10007b00:	1023883a 	mov	r17,r2
10007b04:	00116b80 	call	100116b8 <__fixdfsi>
10007b08:	1009883a 	mov	r4,r2
10007b0c:	1029883a 	mov	r20,r2
10007b10:	00117380 	call	10011738 <__floatsidf>
10007b14:	8809883a 	mov	r4,r17
10007b18:	800b883a 	mov	r5,r16
10007b1c:	100d883a 	mov	r6,r2
10007b20:	180f883a 	mov	r7,r3
10007b24:	0010dbc0 	call	10010dbc <__subdf3>
10007b28:	a5000c04 	addi	r20,r20,48
10007b2c:	a80d883a 	mov	r6,r21
10007b30:	980f883a 	mov	r7,r19
10007b34:	1009883a 	mov	r4,r2
10007b38:	180b883a 	mov	r5,r3
10007b3c:	95000005 	stb	r20,0(r18)
10007b40:	1021883a 	mov	r16,r2
10007b44:	1823883a 	mov	r17,r3
10007b48:	001045c0 	call	1001045c <__ledf2>
10007b4c:	bdc00044 	addi	r23,r23,1
10007b50:	800d883a 	mov	r6,r16
10007b54:	880f883a 	mov	r7,r17
10007b58:	0009883a 	mov	r4,zero
10007b5c:	014ffc34 	movhi	r5,16368
10007b60:	103fcf0e 	bge	r2,zero,10007aa0 <__alt_data_end+0xf8007aa0>
10007b64:	d8c01317 	ldw	r3,76(sp)
10007b68:	d8c00515 	stw	r3,20(sp)
10007b6c:	d9400917 	ldw	r5,36(sp)
10007b70:	e009883a 	mov	r4,fp
10007b74:	000ac240 	call	1000ac24 <_Bfree>
10007b78:	d9000517 	ldw	r4,20(sp)
10007b7c:	d9802317 	ldw	r6,140(sp)
10007b80:	d9c02517 	ldw	r7,148(sp)
10007b84:	b8000005 	stb	zero,0(r23)
10007b88:	20800044 	addi	r2,r4,1
10007b8c:	30800015 	stw	r2,0(r6)
10007b90:	3802aa26 	beq	r7,zero,1000863c <_dtoa_r+0x1178>
10007b94:	3dc00015 	stw	r23,0(r7)
10007b98:	d8800717 	ldw	r2,28(sp)
10007b9c:	003e7906 	br	10007584 <__alt_data_end+0xf8007584>
10007ba0:	00800434 	movhi	r2,16
10007ba4:	10bfffc4 	addi	r2,r2,-1
10007ba8:	88a2703a 	and	r17,r17,r2
10007bac:	883e851e 	bne	r17,zero,100075c4 <__alt_data_end+0xf80075c4>
10007bb0:	00840074 	movhi	r2,4097
10007bb4:	10927d04 	addi	r2,r2,18932
10007bb8:	003e8406 	br	100075cc <__alt_data_end+0xf80075cc>
10007bbc:	10c00204 	addi	r3,r2,8
10007bc0:	003e8706 	br	100075e0 <__alt_data_end+0xf80075e0>
10007bc4:	01400434 	movhi	r5,16
10007bc8:	297fffc4 	addi	r5,r5,-1
10007bcc:	994a703a 	and	r5,r19,r5
10007bd0:	9009883a 	mov	r4,r18
10007bd4:	843f0044 	addi	r16,r16,-1023
10007bd8:	294ffc34 	orhi	r5,r5,16368
10007bdc:	dd800217 	ldw	r22,8(sp)
10007be0:	d8001115 	stw	zero,68(sp)
10007be4:	003ea506 	br	1000767c <__alt_data_end+0xf800767c>
10007be8:	00840074 	movhi	r2,4097
10007bec:	10927404 	addi	r2,r2,18896
10007bf0:	003e6406 	br	10007584 <__alt_data_end+0xf8007584>
10007bf4:	e0001115 	stw	zero,68(fp)
10007bf8:	000b883a 	mov	r5,zero
10007bfc:	e009883a 	mov	r4,fp
10007c00:	000ab7c0 	call	1000ab7c <_Balloc>
10007c04:	01bfffc4 	movi	r6,-1
10007c08:	01c00044 	movi	r7,1
10007c0c:	d8800715 	stw	r2,28(sp)
10007c10:	d9800c15 	stw	r6,48(sp)
10007c14:	e0801015 	stw	r2,64(fp)
10007c18:	d8000315 	stw	zero,12(sp)
10007c1c:	d9c00b15 	stw	r7,44(sp)
10007c20:	d9800615 	stw	r6,24(sp)
10007c24:	d8002215 	stw	zero,136(sp)
10007c28:	d8800117 	ldw	r2,4(sp)
10007c2c:	10008916 	blt	r2,zero,10007e54 <_dtoa_r+0x990>
10007c30:	d9000517 	ldw	r4,20(sp)
10007c34:	00c00384 	movi	r3,14
10007c38:	19008616 	blt	r3,r4,10007e54 <_dtoa_r+0x990>
10007c3c:	200490fa 	slli	r2,r4,3
10007c40:	00c40074 	movhi	r3,4097
10007c44:	d9802217 	ldw	r6,136(sp)
10007c48:	18d29c04 	addi	r3,r3,19056
10007c4c:	1885883a 	add	r2,r3,r2
10007c50:	14000017 	ldw	r16,0(r2)
10007c54:	14400117 	ldw	r17,4(r2)
10007c58:	30016316 	blt	r6,zero,100081e8 <_dtoa_r+0xd24>
10007c5c:	800d883a 	mov	r6,r16
10007c60:	880f883a 	mov	r7,r17
10007c64:	9009883a 	mov	r4,r18
10007c68:	980b883a 	mov	r5,r19
10007c6c:	000f9280 	call	1000f928 <__divdf3>
10007c70:	180b883a 	mov	r5,r3
10007c74:	1009883a 	mov	r4,r2
10007c78:	00116b80 	call	100116b8 <__fixdfsi>
10007c7c:	1009883a 	mov	r4,r2
10007c80:	102b883a 	mov	r21,r2
10007c84:	00117380 	call	10011738 <__floatsidf>
10007c88:	800d883a 	mov	r6,r16
10007c8c:	880f883a 	mov	r7,r17
10007c90:	1009883a 	mov	r4,r2
10007c94:	180b883a 	mov	r5,r3
10007c98:	00105500 	call	10010550 <__muldf3>
10007c9c:	100d883a 	mov	r6,r2
10007ca0:	180f883a 	mov	r7,r3
10007ca4:	9009883a 	mov	r4,r18
10007ca8:	980b883a 	mov	r5,r19
10007cac:	0010dbc0 	call	10010dbc <__subdf3>
10007cb0:	d9c00717 	ldw	r7,28(sp)
10007cb4:	1009883a 	mov	r4,r2
10007cb8:	a8800c04 	addi	r2,r21,48
10007cbc:	38800005 	stb	r2,0(r7)
10007cc0:	3dc00044 	addi	r23,r7,1
10007cc4:	d9c00617 	ldw	r7,24(sp)
10007cc8:	01800044 	movi	r6,1
10007ccc:	180b883a 	mov	r5,r3
10007cd0:	2005883a 	mov	r2,r4
10007cd4:	39803826 	beq	r7,r6,10007db8 <_dtoa_r+0x8f4>
10007cd8:	000d883a 	mov	r6,zero
10007cdc:	01d00934 	movhi	r7,16420
10007ce0:	00105500 	call	10010550 <__muldf3>
10007ce4:	000d883a 	mov	r6,zero
10007ce8:	000f883a 	mov	r7,zero
10007cec:	1009883a 	mov	r4,r2
10007cf0:	180b883a 	mov	r5,r3
10007cf4:	1025883a 	mov	r18,r2
10007cf8:	1827883a 	mov	r19,r3
10007cfc:	00102f80 	call	100102f8 <__eqdf2>
10007d00:	103f9a26 	beq	r2,zero,10007b6c <__alt_data_end+0xf8007b6c>
10007d04:	d9c00617 	ldw	r7,24(sp)
10007d08:	d8c00717 	ldw	r3,28(sp)
10007d0c:	b829883a 	mov	r20,r23
10007d10:	38bfffc4 	addi	r2,r7,-1
10007d14:	18ad883a 	add	r22,r3,r2
10007d18:	00000a06 	br	10007d44 <_dtoa_r+0x880>
10007d1c:	00105500 	call	10010550 <__muldf3>
10007d20:	000d883a 	mov	r6,zero
10007d24:	000f883a 	mov	r7,zero
10007d28:	1009883a 	mov	r4,r2
10007d2c:	180b883a 	mov	r5,r3
10007d30:	1025883a 	mov	r18,r2
10007d34:	1827883a 	mov	r19,r3
10007d38:	b829883a 	mov	r20,r23
10007d3c:	00102f80 	call	100102f8 <__eqdf2>
10007d40:	103f8a26 	beq	r2,zero,10007b6c <__alt_data_end+0xf8007b6c>
10007d44:	800d883a 	mov	r6,r16
10007d48:	880f883a 	mov	r7,r17
10007d4c:	9009883a 	mov	r4,r18
10007d50:	980b883a 	mov	r5,r19
10007d54:	000f9280 	call	1000f928 <__divdf3>
10007d58:	180b883a 	mov	r5,r3
10007d5c:	1009883a 	mov	r4,r2
10007d60:	00116b80 	call	100116b8 <__fixdfsi>
10007d64:	1009883a 	mov	r4,r2
10007d68:	102b883a 	mov	r21,r2
10007d6c:	00117380 	call	10011738 <__floatsidf>
10007d70:	800d883a 	mov	r6,r16
10007d74:	880f883a 	mov	r7,r17
10007d78:	1009883a 	mov	r4,r2
10007d7c:	180b883a 	mov	r5,r3
10007d80:	00105500 	call	10010550 <__muldf3>
10007d84:	100d883a 	mov	r6,r2
10007d88:	180f883a 	mov	r7,r3
10007d8c:	9009883a 	mov	r4,r18
10007d90:	980b883a 	mov	r5,r19
10007d94:	0010dbc0 	call	10010dbc <__subdf3>
10007d98:	aa000c04 	addi	r8,r21,48
10007d9c:	a2000005 	stb	r8,0(r20)
10007da0:	000d883a 	mov	r6,zero
10007da4:	01d00934 	movhi	r7,16420
10007da8:	1009883a 	mov	r4,r2
10007dac:	180b883a 	mov	r5,r3
10007db0:	a5c00044 	addi	r23,r20,1
10007db4:	b53fd91e 	bne	r22,r20,10007d1c <__alt_data_end+0xf8007d1c>
10007db8:	100d883a 	mov	r6,r2
10007dbc:	180f883a 	mov	r7,r3
10007dc0:	1009883a 	mov	r4,r2
10007dc4:	180b883a 	mov	r5,r3
10007dc8:	000f07c0 	call	1000f07c <__adddf3>
10007dcc:	100d883a 	mov	r6,r2
10007dd0:	180f883a 	mov	r7,r3
10007dd4:	8009883a 	mov	r4,r16
10007dd8:	880b883a 	mov	r5,r17
10007ddc:	1027883a 	mov	r19,r2
10007de0:	1825883a 	mov	r18,r3
10007de4:	001045c0 	call	1001045c <__ledf2>
10007de8:	10000816 	blt	r2,zero,10007e0c <_dtoa_r+0x948>
10007dec:	980d883a 	mov	r6,r19
10007df0:	900f883a 	mov	r7,r18
10007df4:	8009883a 	mov	r4,r16
10007df8:	880b883a 	mov	r5,r17
10007dfc:	00102f80 	call	100102f8 <__eqdf2>
10007e00:	103f5a1e 	bne	r2,zero,10007b6c <__alt_data_end+0xf8007b6c>
10007e04:	ad40004c 	andi	r21,r21,1
10007e08:	a83f5826 	beq	r21,zero,10007b6c <__alt_data_end+0xf8007b6c>
10007e0c:	bd3fffc3 	ldbu	r20,-1(r23)
10007e10:	b8bfffc4 	addi	r2,r23,-1
10007e14:	1007883a 	mov	r3,r2
10007e18:	01400e44 	movi	r5,57
10007e1c:	d9800717 	ldw	r6,28(sp)
10007e20:	00000506 	br	10007e38 <_dtoa_r+0x974>
10007e24:	18ffffc4 	addi	r3,r3,-1
10007e28:	11824726 	beq	r2,r6,10008748 <_dtoa_r+0x1284>
10007e2c:	1d000003 	ldbu	r20,0(r3)
10007e30:	102f883a 	mov	r23,r2
10007e34:	10bfffc4 	addi	r2,r2,-1
10007e38:	a1003fcc 	andi	r4,r20,255
10007e3c:	2100201c 	xori	r4,r4,128
10007e40:	213fe004 	addi	r4,r4,-128
10007e44:	217ff726 	beq	r4,r5,10007e24 <__alt_data_end+0xf8007e24>
10007e48:	a2000044 	addi	r8,r20,1
10007e4c:	12000005 	stb	r8,0(r2)
10007e50:	003f4606 	br	10007b6c <__alt_data_end+0xf8007b6c>
10007e54:	d9000b17 	ldw	r4,44(sp)
10007e58:	2000c826 	beq	r4,zero,1000817c <_dtoa_r+0xcb8>
10007e5c:	d9800317 	ldw	r6,12(sp)
10007e60:	00c00044 	movi	r3,1
10007e64:	1980f90e 	bge	r3,r6,1000824c <_dtoa_r+0xd88>
10007e68:	d8800617 	ldw	r2,24(sp)
10007e6c:	d8c00a17 	ldw	r3,40(sp)
10007e70:	157fffc4 	addi	r21,r2,-1
10007e74:	1d41f316 	blt	r3,r21,10008644 <_dtoa_r+0x1180>
10007e78:	1d6bc83a 	sub	r21,r3,r21
10007e7c:	d9c00617 	ldw	r7,24(sp)
10007e80:	3802aa16 	blt	r7,zero,1000892c <_dtoa_r+0x1468>
10007e84:	dd000817 	ldw	r20,32(sp)
10007e88:	d8800617 	ldw	r2,24(sp)
10007e8c:	d8c00817 	ldw	r3,32(sp)
10007e90:	01400044 	movi	r5,1
10007e94:	e009883a 	mov	r4,fp
10007e98:	1887883a 	add	r3,r3,r2
10007e9c:	d8c00815 	stw	r3,32(sp)
10007ea0:	b0ad883a 	add	r22,r22,r2
10007ea4:	000afb00 	call	1000afb0 <__i2b>
10007ea8:	1023883a 	mov	r17,r2
10007eac:	a0000826 	beq	r20,zero,10007ed0 <_dtoa_r+0xa0c>
10007eb0:	0580070e 	bge	zero,r22,10007ed0 <_dtoa_r+0xa0c>
10007eb4:	a005883a 	mov	r2,r20
10007eb8:	b500b916 	blt	r22,r20,100081a0 <_dtoa_r+0xcdc>
10007ebc:	d9000817 	ldw	r4,32(sp)
10007ec0:	a0a9c83a 	sub	r20,r20,r2
10007ec4:	b0adc83a 	sub	r22,r22,r2
10007ec8:	2089c83a 	sub	r4,r4,r2
10007ecc:	d9000815 	stw	r4,32(sp)
10007ed0:	d9800a17 	ldw	r6,40(sp)
10007ed4:	0181810e 	bge	zero,r6,100084dc <_dtoa_r+0x1018>
10007ed8:	d9c00b17 	ldw	r7,44(sp)
10007edc:	3800b326 	beq	r7,zero,100081ac <_dtoa_r+0xce8>
10007ee0:	a800b226 	beq	r21,zero,100081ac <_dtoa_r+0xce8>
10007ee4:	880b883a 	mov	r5,r17
10007ee8:	a80d883a 	mov	r6,r21
10007eec:	e009883a 	mov	r4,fp
10007ef0:	000b2780 	call	1000b278 <__pow5mult>
10007ef4:	d9800917 	ldw	r6,36(sp)
10007ef8:	100b883a 	mov	r5,r2
10007efc:	e009883a 	mov	r4,fp
10007f00:	1023883a 	mov	r17,r2
10007f04:	000afec0 	call	1000afec <__multiply>
10007f08:	1021883a 	mov	r16,r2
10007f0c:	d8800a17 	ldw	r2,40(sp)
10007f10:	d9400917 	ldw	r5,36(sp)
10007f14:	e009883a 	mov	r4,fp
10007f18:	1545c83a 	sub	r2,r2,r21
10007f1c:	d8800a15 	stw	r2,40(sp)
10007f20:	000ac240 	call	1000ac24 <_Bfree>
10007f24:	d8c00a17 	ldw	r3,40(sp)
10007f28:	18009f1e 	bne	r3,zero,100081a8 <_dtoa_r+0xce4>
10007f2c:	05c00044 	movi	r23,1
10007f30:	e009883a 	mov	r4,fp
10007f34:	b80b883a 	mov	r5,r23
10007f38:	000afb00 	call	1000afb0 <__i2b>
10007f3c:	d9000d17 	ldw	r4,52(sp)
10007f40:	102b883a 	mov	r21,r2
10007f44:	2000ce26 	beq	r4,zero,10008280 <_dtoa_r+0xdbc>
10007f48:	200d883a 	mov	r6,r4
10007f4c:	100b883a 	mov	r5,r2
10007f50:	e009883a 	mov	r4,fp
10007f54:	000b2780 	call	1000b278 <__pow5mult>
10007f58:	d9800317 	ldw	r6,12(sp)
10007f5c:	102b883a 	mov	r21,r2
10007f60:	b981810e 	bge	r23,r6,10008568 <_dtoa_r+0x10a4>
10007f64:	0027883a 	mov	r19,zero
10007f68:	a8800417 	ldw	r2,16(r21)
10007f6c:	05c00804 	movi	r23,32
10007f70:	10800104 	addi	r2,r2,4
10007f74:	1085883a 	add	r2,r2,r2
10007f78:	1085883a 	add	r2,r2,r2
10007f7c:	a885883a 	add	r2,r21,r2
10007f80:	11000017 	ldw	r4,0(r2)
10007f84:	000ae980 	call	1000ae98 <__hi0bits>
10007f88:	b885c83a 	sub	r2,r23,r2
10007f8c:	1585883a 	add	r2,r2,r22
10007f90:	108007cc 	andi	r2,r2,31
10007f94:	1000b326 	beq	r2,zero,10008264 <_dtoa_r+0xda0>
10007f98:	00c00804 	movi	r3,32
10007f9c:	1887c83a 	sub	r3,r3,r2
10007fa0:	01000104 	movi	r4,4
10007fa4:	20c2cd0e 	bge	r4,r3,10008adc <_dtoa_r+0x1618>
10007fa8:	00c00704 	movi	r3,28
10007fac:	1885c83a 	sub	r2,r3,r2
10007fb0:	d8c00817 	ldw	r3,32(sp)
10007fb4:	a0a9883a 	add	r20,r20,r2
10007fb8:	b0ad883a 	add	r22,r22,r2
10007fbc:	1887883a 	add	r3,r3,r2
10007fc0:	d8c00815 	stw	r3,32(sp)
10007fc4:	d9800817 	ldw	r6,32(sp)
10007fc8:	0180040e 	bge	zero,r6,10007fdc <_dtoa_r+0xb18>
10007fcc:	800b883a 	mov	r5,r16
10007fd0:	e009883a 	mov	r4,fp
10007fd4:	000b3b80 	call	1000b3b8 <__lshift>
10007fd8:	1021883a 	mov	r16,r2
10007fdc:	0580050e 	bge	zero,r22,10007ff4 <_dtoa_r+0xb30>
10007fe0:	a80b883a 	mov	r5,r21
10007fe4:	b00d883a 	mov	r6,r22
10007fe8:	e009883a 	mov	r4,fp
10007fec:	000b3b80 	call	1000b3b8 <__lshift>
10007ff0:	102b883a 	mov	r21,r2
10007ff4:	d9c00e17 	ldw	r7,56(sp)
10007ff8:	3801211e 	bne	r7,zero,10008480 <_dtoa_r+0xfbc>
10007ffc:	d9800617 	ldw	r6,24(sp)
10008000:	0181380e 	bge	zero,r6,100084e4 <_dtoa_r+0x1020>
10008004:	d8c00b17 	ldw	r3,44(sp)
10008008:	1800ab1e 	bne	r3,zero,100082b8 <_dtoa_r+0xdf4>
1000800c:	dc800717 	ldw	r18,28(sp)
10008010:	dcc00617 	ldw	r19,24(sp)
10008014:	9029883a 	mov	r20,r18
10008018:	00000206 	br	10008024 <_dtoa_r+0xb60>
1000801c:	000ac4c0 	call	1000ac4c <__multadd>
10008020:	1021883a 	mov	r16,r2
10008024:	a80b883a 	mov	r5,r21
10008028:	8009883a 	mov	r4,r16
1000802c:	000729c0 	call	1000729c <quorem>
10008030:	10800c04 	addi	r2,r2,48
10008034:	90800005 	stb	r2,0(r18)
10008038:	94800044 	addi	r18,r18,1
1000803c:	9507c83a 	sub	r3,r18,r20
10008040:	000f883a 	mov	r7,zero
10008044:	01800284 	movi	r6,10
10008048:	800b883a 	mov	r5,r16
1000804c:	e009883a 	mov	r4,fp
10008050:	1cfff216 	blt	r3,r19,1000801c <__alt_data_end+0xf800801c>
10008054:	1011883a 	mov	r8,r2
10008058:	d8800617 	ldw	r2,24(sp)
1000805c:	0082370e 	bge	zero,r2,1000893c <_dtoa_r+0x1478>
10008060:	d9000717 	ldw	r4,28(sp)
10008064:	0025883a 	mov	r18,zero
10008068:	20af883a 	add	r23,r4,r2
1000806c:	01800044 	movi	r6,1
10008070:	800b883a 	mov	r5,r16
10008074:	e009883a 	mov	r4,fp
10008078:	da001715 	stw	r8,92(sp)
1000807c:	000b3b80 	call	1000b3b8 <__lshift>
10008080:	a80b883a 	mov	r5,r21
10008084:	1009883a 	mov	r4,r2
10008088:	d8800915 	stw	r2,36(sp)
1000808c:	000b5000 	call	1000b500 <__mcmp>
10008090:	da001717 	ldw	r8,92(sp)
10008094:	0081800e 	bge	zero,r2,10008698 <_dtoa_r+0x11d4>
10008098:	b93fffc3 	ldbu	r4,-1(r23)
1000809c:	b8bfffc4 	addi	r2,r23,-1
100080a0:	1007883a 	mov	r3,r2
100080a4:	01800e44 	movi	r6,57
100080a8:	d9c00717 	ldw	r7,28(sp)
100080ac:	00000506 	br	100080c4 <_dtoa_r+0xc00>
100080b0:	18ffffc4 	addi	r3,r3,-1
100080b4:	11c12326 	beq	r2,r7,10008544 <_dtoa_r+0x1080>
100080b8:	19000003 	ldbu	r4,0(r3)
100080bc:	102f883a 	mov	r23,r2
100080c0:	10bfffc4 	addi	r2,r2,-1
100080c4:	21403fcc 	andi	r5,r4,255
100080c8:	2940201c 	xori	r5,r5,128
100080cc:	297fe004 	addi	r5,r5,-128
100080d0:	29bff726 	beq	r5,r6,100080b0 <__alt_data_end+0xf80080b0>
100080d4:	21000044 	addi	r4,r4,1
100080d8:	11000005 	stb	r4,0(r2)
100080dc:	a80b883a 	mov	r5,r21
100080e0:	e009883a 	mov	r4,fp
100080e4:	000ac240 	call	1000ac24 <_Bfree>
100080e8:	883ea026 	beq	r17,zero,10007b6c <__alt_data_end+0xf8007b6c>
100080ec:	90000426 	beq	r18,zero,10008100 <_dtoa_r+0xc3c>
100080f0:	94400326 	beq	r18,r17,10008100 <_dtoa_r+0xc3c>
100080f4:	900b883a 	mov	r5,r18
100080f8:	e009883a 	mov	r4,fp
100080fc:	000ac240 	call	1000ac24 <_Bfree>
10008100:	880b883a 	mov	r5,r17
10008104:	e009883a 	mov	r4,fp
10008108:	000ac240 	call	1000ac24 <_Bfree>
1000810c:	003e9706 	br	10007b6c <__alt_data_end+0xf8007b6c>
10008110:	01800044 	movi	r6,1
10008114:	d9800e15 	stw	r6,56(sp)
10008118:	003d9606 	br	10007774 <__alt_data_end+0xf8007774>
1000811c:	d8800817 	ldw	r2,32(sp)
10008120:	d8c00517 	ldw	r3,20(sp)
10008124:	d8000d15 	stw	zero,52(sp)
10008128:	10c5c83a 	sub	r2,r2,r3
1000812c:	00c9c83a 	sub	r4,zero,r3
10008130:	d8800815 	stw	r2,32(sp)
10008134:	d9000a15 	stw	r4,40(sp)
10008138:	003d9706 	br	10007798 <__alt_data_end+0xf8007798>
1000813c:	05adc83a 	sub	r22,zero,r22
10008140:	dd800815 	stw	r22,32(sp)
10008144:	002d883a 	mov	r22,zero
10008148:	003d8e06 	br	10007784 <__alt_data_end+0xf8007784>
1000814c:	d9000517 	ldw	r4,20(sp)
10008150:	00117380 	call	10011738 <__floatsidf>
10008154:	100d883a 	mov	r6,r2
10008158:	180f883a 	mov	r7,r3
1000815c:	a009883a 	mov	r4,r20
10008160:	880b883a 	mov	r5,r17
10008164:	00102f80 	call	100102f8 <__eqdf2>
10008168:	103d7126 	beq	r2,zero,10007730 <__alt_data_end+0xf8007730>
1000816c:	d9c00517 	ldw	r7,20(sp)
10008170:	39ffffc4 	addi	r7,r7,-1
10008174:	d9c00515 	stw	r7,20(sp)
10008178:	003d6d06 	br	10007730 <__alt_data_end+0xf8007730>
1000817c:	dd400a17 	ldw	r21,40(sp)
10008180:	dd000817 	ldw	r20,32(sp)
10008184:	0023883a 	mov	r17,zero
10008188:	003f4806 	br	10007eac <__alt_data_end+0xf8007eac>
1000818c:	10e3c83a 	sub	r17,r2,r3
10008190:	9448983a 	sll	r4,r18,r17
10008194:	003d3206 	br	10007660 <__alt_data_end+0xf8007660>
10008198:	d8000e15 	stw	zero,56(sp)
1000819c:	003d7506 	br	10007774 <__alt_data_end+0xf8007774>
100081a0:	b005883a 	mov	r2,r22
100081a4:	003f4506 	br	10007ebc <__alt_data_end+0xf8007ebc>
100081a8:	dc000915 	stw	r16,36(sp)
100081ac:	d9800a17 	ldw	r6,40(sp)
100081b0:	d9400917 	ldw	r5,36(sp)
100081b4:	e009883a 	mov	r4,fp
100081b8:	000b2780 	call	1000b278 <__pow5mult>
100081bc:	1021883a 	mov	r16,r2
100081c0:	003f5a06 	br	10007f2c <__alt_data_end+0xf8007f2c>
100081c4:	01c00044 	movi	r7,1
100081c8:	d9c00b15 	stw	r7,44(sp)
100081cc:	d8802217 	ldw	r2,136(sp)
100081d0:	0081280e 	bge	zero,r2,10008674 <_dtoa_r+0x11b0>
100081d4:	100d883a 	mov	r6,r2
100081d8:	1021883a 	mov	r16,r2
100081dc:	d8800c15 	stw	r2,48(sp)
100081e0:	d8800615 	stw	r2,24(sp)
100081e4:	003d8806 	br	10007808 <__alt_data_end+0xf8007808>
100081e8:	d8800617 	ldw	r2,24(sp)
100081ec:	00be9b16 	blt	zero,r2,10007c5c <__alt_data_end+0xf8007c5c>
100081f0:	10010f1e 	bne	r2,zero,10008630 <_dtoa_r+0x116c>
100081f4:	880b883a 	mov	r5,r17
100081f8:	000d883a 	mov	r6,zero
100081fc:	01d00534 	movhi	r7,16404
10008200:	8009883a 	mov	r4,r16
10008204:	00105500 	call	10010550 <__muldf3>
10008208:	900d883a 	mov	r6,r18
1000820c:	980f883a 	mov	r7,r19
10008210:	1009883a 	mov	r4,r2
10008214:	180b883a 	mov	r5,r3
10008218:	00103800 	call	10010380 <__gedf2>
1000821c:	002b883a 	mov	r21,zero
10008220:	0023883a 	mov	r17,zero
10008224:	1000bf16 	blt	r2,zero,10008524 <_dtoa_r+0x1060>
10008228:	d9802217 	ldw	r6,136(sp)
1000822c:	ddc00717 	ldw	r23,28(sp)
10008230:	018c303a 	nor	r6,zero,r6
10008234:	d9800515 	stw	r6,20(sp)
10008238:	a80b883a 	mov	r5,r21
1000823c:	e009883a 	mov	r4,fp
10008240:	000ac240 	call	1000ac24 <_Bfree>
10008244:	883e4926 	beq	r17,zero,10007b6c <__alt_data_end+0xf8007b6c>
10008248:	003fad06 	br	10008100 <__alt_data_end+0xf8008100>
1000824c:	d9c01117 	ldw	r7,68(sp)
10008250:	3801bc26 	beq	r7,zero,10008944 <_dtoa_r+0x1480>
10008254:	10810cc4 	addi	r2,r2,1075
10008258:	dd400a17 	ldw	r21,40(sp)
1000825c:	dd000817 	ldw	r20,32(sp)
10008260:	003f0a06 	br	10007e8c <__alt_data_end+0xf8007e8c>
10008264:	00800704 	movi	r2,28
10008268:	d9000817 	ldw	r4,32(sp)
1000826c:	a0a9883a 	add	r20,r20,r2
10008270:	b0ad883a 	add	r22,r22,r2
10008274:	2089883a 	add	r4,r4,r2
10008278:	d9000815 	stw	r4,32(sp)
1000827c:	003f5106 	br	10007fc4 <__alt_data_end+0xf8007fc4>
10008280:	d8c00317 	ldw	r3,12(sp)
10008284:	b8c1fc0e 	bge	r23,r3,10008a78 <_dtoa_r+0x15b4>
10008288:	0027883a 	mov	r19,zero
1000828c:	b805883a 	mov	r2,r23
10008290:	003f3e06 	br	10007f8c <__alt_data_end+0xf8007f8c>
10008294:	880b883a 	mov	r5,r17
10008298:	e009883a 	mov	r4,fp
1000829c:	000f883a 	mov	r7,zero
100082a0:	01800284 	movi	r6,10
100082a4:	000ac4c0 	call	1000ac4c <__multadd>
100082a8:	d9000c17 	ldw	r4,48(sp)
100082ac:	1023883a 	mov	r17,r2
100082b0:	0102040e 	bge	zero,r4,10008ac4 <_dtoa_r+0x1600>
100082b4:	d9000615 	stw	r4,24(sp)
100082b8:	0500050e 	bge	zero,r20,100082d0 <_dtoa_r+0xe0c>
100082bc:	880b883a 	mov	r5,r17
100082c0:	a00d883a 	mov	r6,r20
100082c4:	e009883a 	mov	r4,fp
100082c8:	000b3b80 	call	1000b3b8 <__lshift>
100082cc:	1023883a 	mov	r17,r2
100082d0:	9801241e 	bne	r19,zero,10008764 <_dtoa_r+0x12a0>
100082d4:	8829883a 	mov	r20,r17
100082d8:	d9000617 	ldw	r4,24(sp)
100082dc:	dcc00717 	ldw	r19,28(sp)
100082e0:	9480004c 	andi	r18,r18,1
100082e4:	20bfffc4 	addi	r2,r4,-1
100082e8:	9885883a 	add	r2,r19,r2
100082ec:	d8800415 	stw	r2,16(sp)
100082f0:	dc800615 	stw	r18,24(sp)
100082f4:	a80b883a 	mov	r5,r21
100082f8:	8009883a 	mov	r4,r16
100082fc:	000729c0 	call	1000729c <quorem>
10008300:	880b883a 	mov	r5,r17
10008304:	8009883a 	mov	r4,r16
10008308:	102f883a 	mov	r23,r2
1000830c:	000b5000 	call	1000b500 <__mcmp>
10008310:	a80b883a 	mov	r5,r21
10008314:	a00d883a 	mov	r6,r20
10008318:	e009883a 	mov	r4,fp
1000831c:	102d883a 	mov	r22,r2
10008320:	000b5600 	call	1000b560 <__mdiff>
10008324:	1007883a 	mov	r3,r2
10008328:	10800317 	ldw	r2,12(r2)
1000832c:	bc800c04 	addi	r18,r23,48
10008330:	180b883a 	mov	r5,r3
10008334:	10004e1e 	bne	r2,zero,10008470 <_dtoa_r+0xfac>
10008338:	8009883a 	mov	r4,r16
1000833c:	d8c01615 	stw	r3,88(sp)
10008340:	000b5000 	call	1000b500 <__mcmp>
10008344:	d8c01617 	ldw	r3,88(sp)
10008348:	e009883a 	mov	r4,fp
1000834c:	d8801615 	stw	r2,88(sp)
10008350:	180b883a 	mov	r5,r3
10008354:	000ac240 	call	1000ac24 <_Bfree>
10008358:	d8801617 	ldw	r2,88(sp)
1000835c:	1000041e 	bne	r2,zero,10008370 <_dtoa_r+0xeac>
10008360:	d9800317 	ldw	r6,12(sp)
10008364:	3000021e 	bne	r6,zero,10008370 <_dtoa_r+0xeac>
10008368:	d8c00617 	ldw	r3,24(sp)
1000836c:	18003726 	beq	r3,zero,1000844c <_dtoa_r+0xf88>
10008370:	b0002016 	blt	r22,zero,100083f4 <_dtoa_r+0xf30>
10008374:	b000041e 	bne	r22,zero,10008388 <_dtoa_r+0xec4>
10008378:	d9000317 	ldw	r4,12(sp)
1000837c:	2000021e 	bne	r4,zero,10008388 <_dtoa_r+0xec4>
10008380:	d8c00617 	ldw	r3,24(sp)
10008384:	18001b26 	beq	r3,zero,100083f4 <_dtoa_r+0xf30>
10008388:	00810716 	blt	zero,r2,100087a8 <_dtoa_r+0x12e4>
1000838c:	d8c00417 	ldw	r3,16(sp)
10008390:	9d800044 	addi	r22,r19,1
10008394:	9c800005 	stb	r18,0(r19)
10008398:	b02f883a 	mov	r23,r22
1000839c:	98c10626 	beq	r19,r3,100087b8 <_dtoa_r+0x12f4>
100083a0:	800b883a 	mov	r5,r16
100083a4:	000f883a 	mov	r7,zero
100083a8:	01800284 	movi	r6,10
100083ac:	e009883a 	mov	r4,fp
100083b0:	000ac4c0 	call	1000ac4c <__multadd>
100083b4:	1021883a 	mov	r16,r2
100083b8:	000f883a 	mov	r7,zero
100083bc:	01800284 	movi	r6,10
100083c0:	880b883a 	mov	r5,r17
100083c4:	e009883a 	mov	r4,fp
100083c8:	8d002526 	beq	r17,r20,10008460 <_dtoa_r+0xf9c>
100083cc:	000ac4c0 	call	1000ac4c <__multadd>
100083d0:	a00b883a 	mov	r5,r20
100083d4:	000f883a 	mov	r7,zero
100083d8:	01800284 	movi	r6,10
100083dc:	e009883a 	mov	r4,fp
100083e0:	1023883a 	mov	r17,r2
100083e4:	000ac4c0 	call	1000ac4c <__multadd>
100083e8:	1029883a 	mov	r20,r2
100083ec:	b027883a 	mov	r19,r22
100083f0:	003fc006 	br	100082f4 <__alt_data_end+0xf80082f4>
100083f4:	9011883a 	mov	r8,r18
100083f8:	00800e0e 	bge	zero,r2,10008434 <_dtoa_r+0xf70>
100083fc:	800b883a 	mov	r5,r16
10008400:	01800044 	movi	r6,1
10008404:	e009883a 	mov	r4,fp
10008408:	da001715 	stw	r8,92(sp)
1000840c:	000b3b80 	call	1000b3b8 <__lshift>
10008410:	a80b883a 	mov	r5,r21
10008414:	1009883a 	mov	r4,r2
10008418:	1021883a 	mov	r16,r2
1000841c:	000b5000 	call	1000b500 <__mcmp>
10008420:	da001717 	ldw	r8,92(sp)
10008424:	0081960e 	bge	zero,r2,10008a80 <_dtoa_r+0x15bc>
10008428:	00800e44 	movi	r2,57
1000842c:	40817026 	beq	r8,r2,100089f0 <_dtoa_r+0x152c>
10008430:	ba000c44 	addi	r8,r23,49
10008434:	8825883a 	mov	r18,r17
10008438:	9dc00044 	addi	r23,r19,1
1000843c:	9a000005 	stb	r8,0(r19)
10008440:	a023883a 	mov	r17,r20
10008444:	dc000915 	stw	r16,36(sp)
10008448:	003f2406 	br	100080dc <__alt_data_end+0xf80080dc>
1000844c:	00800e44 	movi	r2,57
10008450:	9011883a 	mov	r8,r18
10008454:	90816626 	beq	r18,r2,100089f0 <_dtoa_r+0x152c>
10008458:	05bff516 	blt	zero,r22,10008430 <__alt_data_end+0xf8008430>
1000845c:	003ff506 	br	10008434 <__alt_data_end+0xf8008434>
10008460:	000ac4c0 	call	1000ac4c <__multadd>
10008464:	1023883a 	mov	r17,r2
10008468:	1029883a 	mov	r20,r2
1000846c:	003fdf06 	br	100083ec <__alt_data_end+0xf80083ec>
10008470:	e009883a 	mov	r4,fp
10008474:	000ac240 	call	1000ac24 <_Bfree>
10008478:	00800044 	movi	r2,1
1000847c:	003fbc06 	br	10008370 <__alt_data_end+0xf8008370>
10008480:	a80b883a 	mov	r5,r21
10008484:	8009883a 	mov	r4,r16
10008488:	000b5000 	call	1000b500 <__mcmp>
1000848c:	103edb0e 	bge	r2,zero,10007ffc <__alt_data_end+0xf8007ffc>
10008490:	800b883a 	mov	r5,r16
10008494:	000f883a 	mov	r7,zero
10008498:	01800284 	movi	r6,10
1000849c:	e009883a 	mov	r4,fp
100084a0:	000ac4c0 	call	1000ac4c <__multadd>
100084a4:	1021883a 	mov	r16,r2
100084a8:	d8800517 	ldw	r2,20(sp)
100084ac:	d8c00b17 	ldw	r3,44(sp)
100084b0:	10bfffc4 	addi	r2,r2,-1
100084b4:	d8800515 	stw	r2,20(sp)
100084b8:	183f761e 	bne	r3,zero,10008294 <__alt_data_end+0xf8008294>
100084bc:	d9000c17 	ldw	r4,48(sp)
100084c0:	0101730e 	bge	zero,r4,10008a90 <_dtoa_r+0x15cc>
100084c4:	d9000615 	stw	r4,24(sp)
100084c8:	003ed006 	br	1000800c <__alt_data_end+0xf800800c>
100084cc:	00800084 	movi	r2,2
100084d0:	3081861e 	bne	r6,r2,10008aec <_dtoa_r+0x1628>
100084d4:	d8000b15 	stw	zero,44(sp)
100084d8:	003f3c06 	br	100081cc <__alt_data_end+0xf80081cc>
100084dc:	dc000917 	ldw	r16,36(sp)
100084e0:	003e9206 	br	10007f2c <__alt_data_end+0xf8007f2c>
100084e4:	d9c00317 	ldw	r7,12(sp)
100084e8:	00800084 	movi	r2,2
100084ec:	11fec50e 	bge	r2,r7,10008004 <__alt_data_end+0xf8008004>
100084f0:	d9000617 	ldw	r4,24(sp)
100084f4:	20013c1e 	bne	r4,zero,100089e8 <_dtoa_r+0x1524>
100084f8:	a80b883a 	mov	r5,r21
100084fc:	000f883a 	mov	r7,zero
10008500:	01800144 	movi	r6,5
10008504:	e009883a 	mov	r4,fp
10008508:	000ac4c0 	call	1000ac4c <__multadd>
1000850c:	100b883a 	mov	r5,r2
10008510:	8009883a 	mov	r4,r16
10008514:	102b883a 	mov	r21,r2
10008518:	000b5000 	call	1000b500 <__mcmp>
1000851c:	dc000915 	stw	r16,36(sp)
10008520:	00bf410e 	bge	zero,r2,10008228 <__alt_data_end+0xf8008228>
10008524:	d9c00717 	ldw	r7,28(sp)
10008528:	00800c44 	movi	r2,49
1000852c:	38800005 	stb	r2,0(r7)
10008530:	d8800517 	ldw	r2,20(sp)
10008534:	3dc00044 	addi	r23,r7,1
10008538:	10800044 	addi	r2,r2,1
1000853c:	d8800515 	stw	r2,20(sp)
10008540:	003f3d06 	br	10008238 <__alt_data_end+0xf8008238>
10008544:	d9800517 	ldw	r6,20(sp)
10008548:	d9c00717 	ldw	r7,28(sp)
1000854c:	00800c44 	movi	r2,49
10008550:	31800044 	addi	r6,r6,1
10008554:	d9800515 	stw	r6,20(sp)
10008558:	38800005 	stb	r2,0(r7)
1000855c:	003edf06 	br	100080dc <__alt_data_end+0xf80080dc>
10008560:	d8000b15 	stw	zero,44(sp)
10008564:	003c9f06 	br	100077e4 <__alt_data_end+0xf80077e4>
10008568:	903e7e1e 	bne	r18,zero,10007f64 <__alt_data_end+0xf8007f64>
1000856c:	00800434 	movhi	r2,16
10008570:	10bfffc4 	addi	r2,r2,-1
10008574:	9884703a 	and	r2,r19,r2
10008578:	1000ea1e 	bne	r2,zero,10008924 <_dtoa_r+0x1460>
1000857c:	9cdffc2c 	andhi	r19,r19,32752
10008580:	9800e826 	beq	r19,zero,10008924 <_dtoa_r+0x1460>
10008584:	d9c00817 	ldw	r7,32(sp)
10008588:	b5800044 	addi	r22,r22,1
1000858c:	04c00044 	movi	r19,1
10008590:	39c00044 	addi	r7,r7,1
10008594:	d9c00815 	stw	r7,32(sp)
10008598:	d8800d17 	ldw	r2,52(sp)
1000859c:	103e721e 	bne	r2,zero,10007f68 <__alt_data_end+0xf8007f68>
100085a0:	00800044 	movi	r2,1
100085a4:	003e7906 	br	10007f8c <__alt_data_end+0xf8007f8c>
100085a8:	8009883a 	mov	r4,r16
100085ac:	00117380 	call	10011738 <__floatsidf>
100085b0:	d9800f17 	ldw	r6,60(sp)
100085b4:	d9c01017 	ldw	r7,64(sp)
100085b8:	1009883a 	mov	r4,r2
100085bc:	180b883a 	mov	r5,r3
100085c0:	00105500 	call	10010550 <__muldf3>
100085c4:	000d883a 	mov	r6,zero
100085c8:	01d00734 	movhi	r7,16412
100085cc:	1009883a 	mov	r4,r2
100085d0:	180b883a 	mov	r5,r3
100085d4:	000f07c0 	call	1000f07c <__adddf3>
100085d8:	047f3034 	movhi	r17,64704
100085dc:	1021883a 	mov	r16,r2
100085e0:	1c63883a 	add	r17,r3,r17
100085e4:	d9000f17 	ldw	r4,60(sp)
100085e8:	d9401017 	ldw	r5,64(sp)
100085ec:	000d883a 	mov	r6,zero
100085f0:	01d00534 	movhi	r7,16404
100085f4:	0010dbc0 	call	10010dbc <__subdf3>
100085f8:	800d883a 	mov	r6,r16
100085fc:	880f883a 	mov	r7,r17
10008600:	1009883a 	mov	r4,r2
10008604:	180b883a 	mov	r5,r3
10008608:	102b883a 	mov	r21,r2
1000860c:	1829883a 	mov	r20,r3
10008610:	00103800 	call	10010380 <__gedf2>
10008614:	00806c16 	blt	zero,r2,100087c8 <_dtoa_r+0x1304>
10008618:	89e0003c 	xorhi	r7,r17,32768
1000861c:	800d883a 	mov	r6,r16
10008620:	a809883a 	mov	r4,r21
10008624:	a00b883a 	mov	r5,r20
10008628:	001045c0 	call	1001045c <__ledf2>
1000862c:	103d7e0e 	bge	r2,zero,10007c28 <__alt_data_end+0xf8007c28>
10008630:	002b883a 	mov	r21,zero
10008634:	0023883a 	mov	r17,zero
10008638:	003efb06 	br	10008228 <__alt_data_end+0xf8008228>
1000863c:	d8800717 	ldw	r2,28(sp)
10008640:	003bd006 	br	10007584 <__alt_data_end+0xf8007584>
10008644:	d9000a17 	ldw	r4,40(sp)
10008648:	d9800d17 	ldw	r6,52(sp)
1000864c:	dd400a15 	stw	r21,40(sp)
10008650:	a905c83a 	sub	r2,r21,r4
10008654:	308d883a 	add	r6,r6,r2
10008658:	d9800d15 	stw	r6,52(sp)
1000865c:	002b883a 	mov	r21,zero
10008660:	003e0606 	br	10007e7c <__alt_data_end+0xf8007e7c>
10008664:	9023883a 	mov	r17,r18
10008668:	9829883a 	mov	r20,r19
1000866c:	04000084 	movi	r16,2
10008670:	003c9206 	br	100078bc <__alt_data_end+0xf80078bc>
10008674:	04000044 	movi	r16,1
10008678:	dc000c15 	stw	r16,48(sp)
1000867c:	dc000615 	stw	r16,24(sp)
10008680:	dc002215 	stw	r16,136(sp)
10008684:	e0001115 	stw	zero,68(fp)
10008688:	000b883a 	mov	r5,zero
1000868c:	003c6906 	br	10007834 <__alt_data_end+0xf8007834>
10008690:	3021883a 	mov	r16,r6
10008694:	003ffb06 	br	10008684 <__alt_data_end+0xf8008684>
10008698:	1000021e 	bne	r2,zero,100086a4 <_dtoa_r+0x11e0>
1000869c:	4200004c 	andi	r8,r8,1
100086a0:	403e7d1e 	bne	r8,zero,10008098 <__alt_data_end+0xf8008098>
100086a4:	01000c04 	movi	r4,48
100086a8:	00000106 	br	100086b0 <_dtoa_r+0x11ec>
100086ac:	102f883a 	mov	r23,r2
100086b0:	b8bfffc4 	addi	r2,r23,-1
100086b4:	10c00007 	ldb	r3,0(r2)
100086b8:	193ffc26 	beq	r3,r4,100086ac <__alt_data_end+0xf80086ac>
100086bc:	003e8706 	br	100080dc <__alt_data_end+0xf80080dc>
100086c0:	d8800517 	ldw	r2,20(sp)
100086c4:	00a3c83a 	sub	r17,zero,r2
100086c8:	8800a426 	beq	r17,zero,1000895c <_dtoa_r+0x1498>
100086cc:	888003cc 	andi	r2,r17,15
100086d0:	100490fa 	slli	r2,r2,3
100086d4:	00c40074 	movhi	r3,4097
100086d8:	18d29c04 	addi	r3,r3,19056
100086dc:	1885883a 	add	r2,r3,r2
100086e0:	11800017 	ldw	r6,0(r2)
100086e4:	11c00117 	ldw	r7,4(r2)
100086e8:	9009883a 	mov	r4,r18
100086ec:	980b883a 	mov	r5,r19
100086f0:	8823d13a 	srai	r17,r17,4
100086f4:	00105500 	call	10010550 <__muldf3>
100086f8:	d8800f15 	stw	r2,60(sp)
100086fc:	d8c01015 	stw	r3,64(sp)
10008700:	8800e826 	beq	r17,zero,10008aa4 <_dtoa_r+0x15e0>
10008704:	05040074 	movhi	r20,4097
10008708:	a5129204 	addi	r20,r20,19016
1000870c:	04000084 	movi	r16,2
10008710:	8980004c 	andi	r6,r17,1
10008714:	1009883a 	mov	r4,r2
10008718:	8823d07a 	srai	r17,r17,1
1000871c:	180b883a 	mov	r5,r3
10008720:	30000426 	beq	r6,zero,10008734 <_dtoa_r+0x1270>
10008724:	a1800017 	ldw	r6,0(r20)
10008728:	a1c00117 	ldw	r7,4(r20)
1000872c:	84000044 	addi	r16,r16,1
10008730:	00105500 	call	10010550 <__muldf3>
10008734:	a5000204 	addi	r20,r20,8
10008738:	883ff51e 	bne	r17,zero,10008710 <__alt_data_end+0xf8008710>
1000873c:	d8800f15 	stw	r2,60(sp)
10008740:	d8c01015 	stw	r3,64(sp)
10008744:	003c7606 	br	10007920 <__alt_data_end+0xf8007920>
10008748:	00c00c04 	movi	r3,48
1000874c:	10c00005 	stb	r3,0(r2)
10008750:	d8c00517 	ldw	r3,20(sp)
10008754:	bd3fffc3 	ldbu	r20,-1(r23)
10008758:	18c00044 	addi	r3,r3,1
1000875c:	d8c00515 	stw	r3,20(sp)
10008760:	003db906 	br	10007e48 <__alt_data_end+0xf8007e48>
10008764:	89400117 	ldw	r5,4(r17)
10008768:	e009883a 	mov	r4,fp
1000876c:	000ab7c0 	call	1000ab7c <_Balloc>
10008770:	89800417 	ldw	r6,16(r17)
10008774:	89400304 	addi	r5,r17,12
10008778:	11000304 	addi	r4,r2,12
1000877c:	31800084 	addi	r6,r6,2
10008780:	318d883a 	add	r6,r6,r6
10008784:	318d883a 	add	r6,r6,r6
10008788:	1027883a 	mov	r19,r2
1000878c:	000a7b00 	call	1000a7b0 <memcpy>
10008790:	01800044 	movi	r6,1
10008794:	980b883a 	mov	r5,r19
10008798:	e009883a 	mov	r4,fp
1000879c:	000b3b80 	call	1000b3b8 <__lshift>
100087a0:	1029883a 	mov	r20,r2
100087a4:	003ecc06 	br	100082d8 <__alt_data_end+0xf80082d8>
100087a8:	00800e44 	movi	r2,57
100087ac:	90809026 	beq	r18,r2,100089f0 <_dtoa_r+0x152c>
100087b0:	92000044 	addi	r8,r18,1
100087b4:	003f1f06 	br	10008434 <__alt_data_end+0xf8008434>
100087b8:	9011883a 	mov	r8,r18
100087bc:	8825883a 	mov	r18,r17
100087c0:	a023883a 	mov	r17,r20
100087c4:	003e2906 	br	1000806c <__alt_data_end+0xf800806c>
100087c8:	002b883a 	mov	r21,zero
100087cc:	0023883a 	mov	r17,zero
100087d0:	003f5406 	br	10008524 <__alt_data_end+0xf8008524>
100087d4:	61bfffc4 	addi	r6,r12,-1
100087d8:	300490fa 	slli	r2,r6,3
100087dc:	00c40074 	movhi	r3,4097
100087e0:	18d29c04 	addi	r3,r3,19056
100087e4:	1885883a 	add	r2,r3,r2
100087e8:	11000017 	ldw	r4,0(r2)
100087ec:	11400117 	ldw	r5,4(r2)
100087f0:	d8800717 	ldw	r2,28(sp)
100087f4:	880f883a 	mov	r7,r17
100087f8:	d9801215 	stw	r6,72(sp)
100087fc:	800d883a 	mov	r6,r16
10008800:	db001615 	stw	r12,88(sp)
10008804:	15c00044 	addi	r23,r2,1
10008808:	00105500 	call	10010550 <__muldf3>
1000880c:	d9401017 	ldw	r5,64(sp)
10008810:	d9000f17 	ldw	r4,60(sp)
10008814:	d8c01515 	stw	r3,84(sp)
10008818:	d8801415 	stw	r2,80(sp)
1000881c:	00116b80 	call	100116b8 <__fixdfsi>
10008820:	1009883a 	mov	r4,r2
10008824:	1021883a 	mov	r16,r2
10008828:	00117380 	call	10011738 <__floatsidf>
1000882c:	d9000f17 	ldw	r4,60(sp)
10008830:	d9401017 	ldw	r5,64(sp)
10008834:	100d883a 	mov	r6,r2
10008838:	180f883a 	mov	r7,r3
1000883c:	0010dbc0 	call	10010dbc <__subdf3>
10008840:	1829883a 	mov	r20,r3
10008844:	d8c00717 	ldw	r3,28(sp)
10008848:	84000c04 	addi	r16,r16,48
1000884c:	1023883a 	mov	r17,r2
10008850:	1c000005 	stb	r16,0(r3)
10008854:	db001617 	ldw	r12,88(sp)
10008858:	00800044 	movi	r2,1
1000885c:	60802226 	beq	r12,r2,100088e8 <_dtoa_r+0x1424>
10008860:	d9c00717 	ldw	r7,28(sp)
10008864:	8805883a 	mov	r2,r17
10008868:	b82b883a 	mov	r21,r23
1000886c:	3b19883a 	add	r12,r7,r12
10008870:	6023883a 	mov	r17,r12
10008874:	a007883a 	mov	r3,r20
10008878:	dc800f15 	stw	r18,60(sp)
1000887c:	000d883a 	mov	r6,zero
10008880:	01d00934 	movhi	r7,16420
10008884:	1009883a 	mov	r4,r2
10008888:	180b883a 	mov	r5,r3
1000888c:	00105500 	call	10010550 <__muldf3>
10008890:	180b883a 	mov	r5,r3
10008894:	1009883a 	mov	r4,r2
10008898:	1829883a 	mov	r20,r3
1000889c:	1025883a 	mov	r18,r2
100088a0:	00116b80 	call	100116b8 <__fixdfsi>
100088a4:	1009883a 	mov	r4,r2
100088a8:	1021883a 	mov	r16,r2
100088ac:	00117380 	call	10011738 <__floatsidf>
100088b0:	100d883a 	mov	r6,r2
100088b4:	180f883a 	mov	r7,r3
100088b8:	9009883a 	mov	r4,r18
100088bc:	a00b883a 	mov	r5,r20
100088c0:	84000c04 	addi	r16,r16,48
100088c4:	0010dbc0 	call	10010dbc <__subdf3>
100088c8:	ad400044 	addi	r21,r21,1
100088cc:	ac3fffc5 	stb	r16,-1(r21)
100088d0:	ac7fea1e 	bne	r21,r17,1000887c <__alt_data_end+0xf800887c>
100088d4:	1023883a 	mov	r17,r2
100088d8:	d8801217 	ldw	r2,72(sp)
100088dc:	dc800f17 	ldw	r18,60(sp)
100088e0:	1829883a 	mov	r20,r3
100088e4:	b8af883a 	add	r23,r23,r2
100088e8:	d9001417 	ldw	r4,80(sp)
100088ec:	d9401517 	ldw	r5,84(sp)
100088f0:	000d883a 	mov	r6,zero
100088f4:	01cff834 	movhi	r7,16352
100088f8:	000f07c0 	call	1000f07c <__adddf3>
100088fc:	880d883a 	mov	r6,r17
10008900:	a00f883a 	mov	r7,r20
10008904:	1009883a 	mov	r4,r2
10008908:	180b883a 	mov	r5,r3
1000890c:	001045c0 	call	1001045c <__ledf2>
10008910:	10003e0e 	bge	r2,zero,10008a0c <_dtoa_r+0x1548>
10008914:	d9001317 	ldw	r4,76(sp)
10008918:	bd3fffc3 	ldbu	r20,-1(r23)
1000891c:	d9000515 	stw	r4,20(sp)
10008920:	003d3b06 	br	10007e10 <__alt_data_end+0xf8007e10>
10008924:	0027883a 	mov	r19,zero
10008928:	003f1b06 	br	10008598 <__alt_data_end+0xf8008598>
1000892c:	d8800817 	ldw	r2,32(sp)
10008930:	11e9c83a 	sub	r20,r2,r7
10008934:	0005883a 	mov	r2,zero
10008938:	003d5406 	br	10007e8c <__alt_data_end+0xf8007e8c>
1000893c:	00800044 	movi	r2,1
10008940:	003dc706 	br	10008060 <__alt_data_end+0xf8008060>
10008944:	d8c00217 	ldw	r3,8(sp)
10008948:	00800d84 	movi	r2,54
1000894c:	dd400a17 	ldw	r21,40(sp)
10008950:	10c5c83a 	sub	r2,r2,r3
10008954:	dd000817 	ldw	r20,32(sp)
10008958:	003d4c06 	br	10007e8c <__alt_data_end+0xf8007e8c>
1000895c:	dc800f15 	stw	r18,60(sp)
10008960:	dcc01015 	stw	r19,64(sp)
10008964:	04000084 	movi	r16,2
10008968:	003bed06 	br	10007920 <__alt_data_end+0xf8007920>
1000896c:	d9000617 	ldw	r4,24(sp)
10008970:	203f0d26 	beq	r4,zero,100085a8 <__alt_data_end+0xf80085a8>
10008974:	d9800c17 	ldw	r6,48(sp)
10008978:	01bcab0e 	bge	zero,r6,10007c28 <__alt_data_end+0xf8007c28>
1000897c:	d9401017 	ldw	r5,64(sp)
10008980:	d9000f17 	ldw	r4,60(sp)
10008984:	000d883a 	mov	r6,zero
10008988:	01d00934 	movhi	r7,16420
1000898c:	00105500 	call	10010550 <__muldf3>
10008990:	81000044 	addi	r4,r16,1
10008994:	d8800f15 	stw	r2,60(sp)
10008998:	d8c01015 	stw	r3,64(sp)
1000899c:	00117380 	call	10011738 <__floatsidf>
100089a0:	d9800f17 	ldw	r6,60(sp)
100089a4:	d9c01017 	ldw	r7,64(sp)
100089a8:	1009883a 	mov	r4,r2
100089ac:	180b883a 	mov	r5,r3
100089b0:	00105500 	call	10010550 <__muldf3>
100089b4:	01d00734 	movhi	r7,16412
100089b8:	000d883a 	mov	r6,zero
100089bc:	1009883a 	mov	r4,r2
100089c0:	180b883a 	mov	r5,r3
100089c4:	000f07c0 	call	1000f07c <__adddf3>
100089c8:	d9c00517 	ldw	r7,20(sp)
100089cc:	047f3034 	movhi	r17,64704
100089d0:	1021883a 	mov	r16,r2
100089d4:	39ffffc4 	addi	r7,r7,-1
100089d8:	d9c01315 	stw	r7,76(sp)
100089dc:	1c63883a 	add	r17,r3,r17
100089e0:	db000c17 	ldw	r12,48(sp)
100089e4:	003bea06 	br	10007990 <__alt_data_end+0xf8007990>
100089e8:	dc000915 	stw	r16,36(sp)
100089ec:	003e0e06 	br	10008228 <__alt_data_end+0xf8008228>
100089f0:	01000e44 	movi	r4,57
100089f4:	8825883a 	mov	r18,r17
100089f8:	9dc00044 	addi	r23,r19,1
100089fc:	99000005 	stb	r4,0(r19)
10008a00:	a023883a 	mov	r17,r20
10008a04:	dc000915 	stw	r16,36(sp)
10008a08:	003da406 	br	1000809c <__alt_data_end+0xf800809c>
10008a0c:	d9801417 	ldw	r6,80(sp)
10008a10:	d9c01517 	ldw	r7,84(sp)
10008a14:	0009883a 	mov	r4,zero
10008a18:	014ff834 	movhi	r5,16352
10008a1c:	0010dbc0 	call	10010dbc <__subdf3>
10008a20:	880d883a 	mov	r6,r17
10008a24:	a00f883a 	mov	r7,r20
10008a28:	1009883a 	mov	r4,r2
10008a2c:	180b883a 	mov	r5,r3
10008a30:	00103800 	call	10010380 <__gedf2>
10008a34:	00bc7c0e 	bge	zero,r2,10007c28 <__alt_data_end+0xf8007c28>
10008a38:	01000c04 	movi	r4,48
10008a3c:	00000106 	br	10008a44 <_dtoa_r+0x1580>
10008a40:	102f883a 	mov	r23,r2
10008a44:	b8bfffc4 	addi	r2,r23,-1
10008a48:	10c00007 	ldb	r3,0(r2)
10008a4c:	193ffc26 	beq	r3,r4,10008a40 <__alt_data_end+0xf8008a40>
10008a50:	d9801317 	ldw	r6,76(sp)
10008a54:	d9800515 	stw	r6,20(sp)
10008a58:	003c4406 	br	10007b6c <__alt_data_end+0xf8007b6c>
10008a5c:	d9801317 	ldw	r6,76(sp)
10008a60:	d9800515 	stw	r6,20(sp)
10008a64:	003cea06 	br	10007e10 <__alt_data_end+0xf8007e10>
10008a68:	dd800f17 	ldw	r22,60(sp)
10008a6c:	dcc01017 	ldw	r19,64(sp)
10008a70:	dc801217 	ldw	r18,72(sp)
10008a74:	003c6c06 	br	10007c28 <__alt_data_end+0xf8007c28>
10008a78:	903e031e 	bne	r18,zero,10008288 <__alt_data_end+0xf8008288>
10008a7c:	003ebb06 	br	1000856c <__alt_data_end+0xf800856c>
10008a80:	103e6c1e 	bne	r2,zero,10008434 <__alt_data_end+0xf8008434>
10008a84:	4080004c 	andi	r2,r8,1
10008a88:	103e6a26 	beq	r2,zero,10008434 <__alt_data_end+0xf8008434>
10008a8c:	003e6606 	br	10008428 <__alt_data_end+0xf8008428>
10008a90:	d8c00317 	ldw	r3,12(sp)
10008a94:	00800084 	movi	r2,2
10008a98:	10c02916 	blt	r2,r3,10008b40 <_dtoa_r+0x167c>
10008a9c:	d9000c17 	ldw	r4,48(sp)
10008aa0:	003e8806 	br	100084c4 <__alt_data_end+0xf80084c4>
10008aa4:	04000084 	movi	r16,2
10008aa8:	003b9d06 	br	10007920 <__alt_data_end+0xf8007920>
10008aac:	d9001317 	ldw	r4,76(sp)
10008ab0:	d9000515 	stw	r4,20(sp)
10008ab4:	003cd606 	br	10007e10 <__alt_data_end+0xf8007e10>
10008ab8:	d8801317 	ldw	r2,76(sp)
10008abc:	d8800515 	stw	r2,20(sp)
10008ac0:	003c2a06 	br	10007b6c <__alt_data_end+0xf8007b6c>
10008ac4:	d9800317 	ldw	r6,12(sp)
10008ac8:	00800084 	movi	r2,2
10008acc:	11801516 	blt	r2,r6,10008b24 <_dtoa_r+0x1660>
10008ad0:	d9c00c17 	ldw	r7,48(sp)
10008ad4:	d9c00615 	stw	r7,24(sp)
10008ad8:	003df706 	br	100082b8 <__alt_data_end+0xf80082b8>
10008adc:	193d3926 	beq	r3,r4,10007fc4 <__alt_data_end+0xf8007fc4>
10008ae0:	00c00f04 	movi	r3,60
10008ae4:	1885c83a 	sub	r2,r3,r2
10008ae8:	003ddf06 	br	10008268 <__alt_data_end+0xf8008268>
10008aec:	e009883a 	mov	r4,fp
10008af0:	e0001115 	stw	zero,68(fp)
10008af4:	000b883a 	mov	r5,zero
10008af8:	000ab7c0 	call	1000ab7c <_Balloc>
10008afc:	d8800715 	stw	r2,28(sp)
10008b00:	d8c00717 	ldw	r3,28(sp)
10008b04:	00bfffc4 	movi	r2,-1
10008b08:	01000044 	movi	r4,1
10008b0c:	d8800c15 	stw	r2,48(sp)
10008b10:	e0c01015 	stw	r3,64(fp)
10008b14:	d9000b15 	stw	r4,44(sp)
10008b18:	d8800615 	stw	r2,24(sp)
10008b1c:	d8002215 	stw	zero,136(sp)
10008b20:	003c4106 	br	10007c28 <__alt_data_end+0xf8007c28>
10008b24:	d8c00c17 	ldw	r3,48(sp)
10008b28:	d8c00615 	stw	r3,24(sp)
10008b2c:	003e7006 	br	100084f0 <__alt_data_end+0xf80084f0>
10008b30:	04400044 	movi	r17,1
10008b34:	003b2006 	br	100077b8 <__alt_data_end+0xf80077b8>
10008b38:	000b883a 	mov	r5,zero
10008b3c:	003b3d06 	br	10007834 <__alt_data_end+0xf8007834>
10008b40:	d8800c17 	ldw	r2,48(sp)
10008b44:	d8800615 	stw	r2,24(sp)
10008b48:	003e6906 	br	100084f0 <__alt_data_end+0xf80084f0>

10008b4c <__sflush_r>:
10008b4c:	2880030b 	ldhu	r2,12(r5)
10008b50:	defffb04 	addi	sp,sp,-20
10008b54:	dcc00315 	stw	r19,12(sp)
10008b58:	dc400115 	stw	r17,4(sp)
10008b5c:	dfc00415 	stw	ra,16(sp)
10008b60:	dc800215 	stw	r18,8(sp)
10008b64:	dc000015 	stw	r16,0(sp)
10008b68:	10c0020c 	andi	r3,r2,8
10008b6c:	2823883a 	mov	r17,r5
10008b70:	2027883a 	mov	r19,r4
10008b74:	1800311e 	bne	r3,zero,10008c3c <__sflush_r+0xf0>
10008b78:	28c00117 	ldw	r3,4(r5)
10008b7c:	10820014 	ori	r2,r2,2048
10008b80:	2880030d 	sth	r2,12(r5)
10008b84:	00c04b0e 	bge	zero,r3,10008cb4 <__sflush_r+0x168>
10008b88:	8a000a17 	ldw	r8,40(r17)
10008b8c:	40002326 	beq	r8,zero,10008c1c <__sflush_r+0xd0>
10008b90:	9c000017 	ldw	r16,0(r19)
10008b94:	10c4000c 	andi	r3,r2,4096
10008b98:	98000015 	stw	zero,0(r19)
10008b9c:	18004826 	beq	r3,zero,10008cc0 <__sflush_r+0x174>
10008ba0:	89801417 	ldw	r6,80(r17)
10008ba4:	10c0010c 	andi	r3,r2,4
10008ba8:	18000626 	beq	r3,zero,10008bc4 <__sflush_r+0x78>
10008bac:	88c00117 	ldw	r3,4(r17)
10008bb0:	88800c17 	ldw	r2,48(r17)
10008bb4:	30cdc83a 	sub	r6,r6,r3
10008bb8:	10000226 	beq	r2,zero,10008bc4 <__sflush_r+0x78>
10008bbc:	88800f17 	ldw	r2,60(r17)
10008bc0:	308dc83a 	sub	r6,r6,r2
10008bc4:	89400717 	ldw	r5,28(r17)
10008bc8:	000f883a 	mov	r7,zero
10008bcc:	9809883a 	mov	r4,r19
10008bd0:	403ee83a 	callr	r8
10008bd4:	00ffffc4 	movi	r3,-1
10008bd8:	10c04426 	beq	r2,r3,10008cec <__sflush_r+0x1a0>
10008bdc:	88c0030b 	ldhu	r3,12(r17)
10008be0:	89000417 	ldw	r4,16(r17)
10008be4:	88000115 	stw	zero,4(r17)
10008be8:	197dffcc 	andi	r5,r3,63487
10008bec:	8940030d 	sth	r5,12(r17)
10008bf0:	89000015 	stw	r4,0(r17)
10008bf4:	18c4000c 	andi	r3,r3,4096
10008bf8:	18002c1e 	bne	r3,zero,10008cac <__sflush_r+0x160>
10008bfc:	89400c17 	ldw	r5,48(r17)
10008c00:	9c000015 	stw	r16,0(r19)
10008c04:	28000526 	beq	r5,zero,10008c1c <__sflush_r+0xd0>
10008c08:	88801004 	addi	r2,r17,64
10008c0c:	28800226 	beq	r5,r2,10008c18 <__sflush_r+0xcc>
10008c10:	9809883a 	mov	r4,r19
10008c14:	00092c80 	call	100092c8 <_free_r>
10008c18:	88000c15 	stw	zero,48(r17)
10008c1c:	0005883a 	mov	r2,zero
10008c20:	dfc00417 	ldw	ra,16(sp)
10008c24:	dcc00317 	ldw	r19,12(sp)
10008c28:	dc800217 	ldw	r18,8(sp)
10008c2c:	dc400117 	ldw	r17,4(sp)
10008c30:	dc000017 	ldw	r16,0(sp)
10008c34:	dec00504 	addi	sp,sp,20
10008c38:	f800283a 	ret
10008c3c:	2c800417 	ldw	r18,16(r5)
10008c40:	903ff626 	beq	r18,zero,10008c1c <__alt_data_end+0xf8008c1c>
10008c44:	2c000017 	ldw	r16,0(r5)
10008c48:	108000cc 	andi	r2,r2,3
10008c4c:	2c800015 	stw	r18,0(r5)
10008c50:	84a1c83a 	sub	r16,r16,r18
10008c54:	1000131e 	bne	r2,zero,10008ca4 <__sflush_r+0x158>
10008c58:	28800517 	ldw	r2,20(r5)
10008c5c:	88800215 	stw	r2,8(r17)
10008c60:	04000316 	blt	zero,r16,10008c70 <__sflush_r+0x124>
10008c64:	003fed06 	br	10008c1c <__alt_data_end+0xf8008c1c>
10008c68:	90a5883a 	add	r18,r18,r2
10008c6c:	043feb0e 	bge	zero,r16,10008c1c <__alt_data_end+0xf8008c1c>
10008c70:	88800917 	ldw	r2,36(r17)
10008c74:	89400717 	ldw	r5,28(r17)
10008c78:	800f883a 	mov	r7,r16
10008c7c:	900d883a 	mov	r6,r18
10008c80:	9809883a 	mov	r4,r19
10008c84:	103ee83a 	callr	r2
10008c88:	80a1c83a 	sub	r16,r16,r2
10008c8c:	00bff616 	blt	zero,r2,10008c68 <__alt_data_end+0xf8008c68>
10008c90:	88c0030b 	ldhu	r3,12(r17)
10008c94:	00bfffc4 	movi	r2,-1
10008c98:	18c01014 	ori	r3,r3,64
10008c9c:	88c0030d 	sth	r3,12(r17)
10008ca0:	003fdf06 	br	10008c20 <__alt_data_end+0xf8008c20>
10008ca4:	0005883a 	mov	r2,zero
10008ca8:	003fec06 	br	10008c5c <__alt_data_end+0xf8008c5c>
10008cac:	88801415 	stw	r2,80(r17)
10008cb0:	003fd206 	br	10008bfc <__alt_data_end+0xf8008bfc>
10008cb4:	28c00f17 	ldw	r3,60(r5)
10008cb8:	00ffb316 	blt	zero,r3,10008b88 <__alt_data_end+0xf8008b88>
10008cbc:	003fd706 	br	10008c1c <__alt_data_end+0xf8008c1c>
10008cc0:	89400717 	ldw	r5,28(r17)
10008cc4:	000d883a 	mov	r6,zero
10008cc8:	01c00044 	movi	r7,1
10008ccc:	9809883a 	mov	r4,r19
10008cd0:	403ee83a 	callr	r8
10008cd4:	100d883a 	mov	r6,r2
10008cd8:	00bfffc4 	movi	r2,-1
10008cdc:	30801426 	beq	r6,r2,10008d30 <__sflush_r+0x1e4>
10008ce0:	8880030b 	ldhu	r2,12(r17)
10008ce4:	8a000a17 	ldw	r8,40(r17)
10008ce8:	003fae06 	br	10008ba4 <__alt_data_end+0xf8008ba4>
10008cec:	98c00017 	ldw	r3,0(r19)
10008cf0:	183fba26 	beq	r3,zero,10008bdc <__alt_data_end+0xf8008bdc>
10008cf4:	01000744 	movi	r4,29
10008cf8:	19000626 	beq	r3,r4,10008d14 <__sflush_r+0x1c8>
10008cfc:	01000584 	movi	r4,22
10008d00:	19000426 	beq	r3,r4,10008d14 <__sflush_r+0x1c8>
10008d04:	88c0030b 	ldhu	r3,12(r17)
10008d08:	18c01014 	ori	r3,r3,64
10008d0c:	88c0030d 	sth	r3,12(r17)
10008d10:	003fc306 	br	10008c20 <__alt_data_end+0xf8008c20>
10008d14:	8880030b 	ldhu	r2,12(r17)
10008d18:	88c00417 	ldw	r3,16(r17)
10008d1c:	88000115 	stw	zero,4(r17)
10008d20:	10bdffcc 	andi	r2,r2,63487
10008d24:	8880030d 	sth	r2,12(r17)
10008d28:	88c00015 	stw	r3,0(r17)
10008d2c:	003fb306 	br	10008bfc <__alt_data_end+0xf8008bfc>
10008d30:	98800017 	ldw	r2,0(r19)
10008d34:	103fea26 	beq	r2,zero,10008ce0 <__alt_data_end+0xf8008ce0>
10008d38:	00c00744 	movi	r3,29
10008d3c:	10c00226 	beq	r2,r3,10008d48 <__sflush_r+0x1fc>
10008d40:	00c00584 	movi	r3,22
10008d44:	10c0031e 	bne	r2,r3,10008d54 <__sflush_r+0x208>
10008d48:	9c000015 	stw	r16,0(r19)
10008d4c:	0005883a 	mov	r2,zero
10008d50:	003fb306 	br	10008c20 <__alt_data_end+0xf8008c20>
10008d54:	88c0030b 	ldhu	r3,12(r17)
10008d58:	3005883a 	mov	r2,r6
10008d5c:	18c01014 	ori	r3,r3,64
10008d60:	88c0030d 	sth	r3,12(r17)
10008d64:	003fae06 	br	10008c20 <__alt_data_end+0xf8008c20>

10008d68 <_fflush_r>:
10008d68:	defffd04 	addi	sp,sp,-12
10008d6c:	dc000115 	stw	r16,4(sp)
10008d70:	dfc00215 	stw	ra,8(sp)
10008d74:	2021883a 	mov	r16,r4
10008d78:	20000226 	beq	r4,zero,10008d84 <_fflush_r+0x1c>
10008d7c:	20800e17 	ldw	r2,56(r4)
10008d80:	10000c26 	beq	r2,zero,10008db4 <_fflush_r+0x4c>
10008d84:	2880030f 	ldh	r2,12(r5)
10008d88:	1000051e 	bne	r2,zero,10008da0 <_fflush_r+0x38>
10008d8c:	0005883a 	mov	r2,zero
10008d90:	dfc00217 	ldw	ra,8(sp)
10008d94:	dc000117 	ldw	r16,4(sp)
10008d98:	dec00304 	addi	sp,sp,12
10008d9c:	f800283a 	ret
10008da0:	8009883a 	mov	r4,r16
10008da4:	dfc00217 	ldw	ra,8(sp)
10008da8:	dc000117 	ldw	r16,4(sp)
10008dac:	dec00304 	addi	sp,sp,12
10008db0:	0008b4c1 	jmpi	10008b4c <__sflush_r>
10008db4:	d9400015 	stw	r5,0(sp)
10008db8:	00091540 	call	10009154 <__sinit>
10008dbc:	d9400017 	ldw	r5,0(sp)
10008dc0:	003ff006 	br	10008d84 <__alt_data_end+0xf8008d84>

10008dc4 <fflush>:
10008dc4:	20000526 	beq	r4,zero,10008ddc <fflush+0x18>
10008dc8:	008400b4 	movhi	r2,4098
10008dcc:	10b3fa04 	addi	r2,r2,-12312
10008dd0:	200b883a 	mov	r5,r4
10008dd4:	11000017 	ldw	r4,0(r2)
10008dd8:	0008d681 	jmpi	10008d68 <_fflush_r>
10008ddc:	008400b4 	movhi	r2,4098
10008de0:	10b3f904 	addi	r2,r2,-12316
10008de4:	11000017 	ldw	r4,0(r2)
10008de8:	01440074 	movhi	r5,4097
10008dec:	29635a04 	addi	r5,r5,-29336
10008df0:	0009b641 	jmpi	10009b64 <_fwalk_reent>

10008df4 <__fp_unlock>:
10008df4:	0005883a 	mov	r2,zero
10008df8:	f800283a 	ret

10008dfc <_cleanup_r>:
10008dfc:	01440074 	movhi	r5,4097
10008e00:	29774004 	addi	r5,r5,-8960
10008e04:	0009b641 	jmpi	10009b64 <_fwalk_reent>

10008e08 <__sinit.part.1>:
10008e08:	defff704 	addi	sp,sp,-36
10008e0c:	00c40074 	movhi	r3,4097
10008e10:	dfc00815 	stw	ra,32(sp)
10008e14:	ddc00715 	stw	r23,28(sp)
10008e18:	dd800615 	stw	r22,24(sp)
10008e1c:	dd400515 	stw	r21,20(sp)
10008e20:	dd000415 	stw	r20,16(sp)
10008e24:	dcc00315 	stw	r19,12(sp)
10008e28:	dc800215 	stw	r18,8(sp)
10008e2c:	dc400115 	stw	r17,4(sp)
10008e30:	dc000015 	stw	r16,0(sp)
10008e34:	18e37f04 	addi	r3,r3,-29188
10008e38:	24000117 	ldw	r16,4(r4)
10008e3c:	20c00f15 	stw	r3,60(r4)
10008e40:	2080bb04 	addi	r2,r4,748
10008e44:	00c000c4 	movi	r3,3
10008e48:	20c0b915 	stw	r3,740(r4)
10008e4c:	2080ba15 	stw	r2,744(r4)
10008e50:	2000b815 	stw	zero,736(r4)
10008e54:	05c00204 	movi	r23,8
10008e58:	00800104 	movi	r2,4
10008e5c:	2025883a 	mov	r18,r4
10008e60:	b80d883a 	mov	r6,r23
10008e64:	81001704 	addi	r4,r16,92
10008e68:	000b883a 	mov	r5,zero
10008e6c:	80000015 	stw	zero,0(r16)
10008e70:	80000115 	stw	zero,4(r16)
10008e74:	80000215 	stw	zero,8(r16)
10008e78:	8080030d 	sth	r2,12(r16)
10008e7c:	80001915 	stw	zero,100(r16)
10008e80:	8000038d 	sth	zero,14(r16)
10008e84:	80000415 	stw	zero,16(r16)
10008e88:	80000515 	stw	zero,20(r16)
10008e8c:	80000615 	stw	zero,24(r16)
10008e90:	000aa540 	call	1000aa54 <memset>
10008e94:	05840074 	movhi	r22,4097
10008e98:	94400217 	ldw	r17,8(r18)
10008e9c:	05440074 	movhi	r21,4097
10008ea0:	05040074 	movhi	r20,4097
10008ea4:	04c40074 	movhi	r19,4097
10008ea8:	b5b09804 	addi	r22,r22,-15776
10008eac:	ad70af04 	addi	r21,r21,-15684
10008eb0:	a530ce04 	addi	r20,r20,-15560
10008eb4:	9cf0e504 	addi	r19,r19,-15468
10008eb8:	85800815 	stw	r22,32(r16)
10008ebc:	85400915 	stw	r21,36(r16)
10008ec0:	85000a15 	stw	r20,40(r16)
10008ec4:	84c00b15 	stw	r19,44(r16)
10008ec8:	84000715 	stw	r16,28(r16)
10008ecc:	00800284 	movi	r2,10
10008ed0:	8880030d 	sth	r2,12(r17)
10008ed4:	00800044 	movi	r2,1
10008ed8:	b80d883a 	mov	r6,r23
10008edc:	89001704 	addi	r4,r17,92
10008ee0:	000b883a 	mov	r5,zero
10008ee4:	88000015 	stw	zero,0(r17)
10008ee8:	88000115 	stw	zero,4(r17)
10008eec:	88000215 	stw	zero,8(r17)
10008ef0:	88001915 	stw	zero,100(r17)
10008ef4:	8880038d 	sth	r2,14(r17)
10008ef8:	88000415 	stw	zero,16(r17)
10008efc:	88000515 	stw	zero,20(r17)
10008f00:	88000615 	stw	zero,24(r17)
10008f04:	000aa540 	call	1000aa54 <memset>
10008f08:	94000317 	ldw	r16,12(r18)
10008f0c:	00800484 	movi	r2,18
10008f10:	8c400715 	stw	r17,28(r17)
10008f14:	8d800815 	stw	r22,32(r17)
10008f18:	8d400915 	stw	r21,36(r17)
10008f1c:	8d000a15 	stw	r20,40(r17)
10008f20:	8cc00b15 	stw	r19,44(r17)
10008f24:	8080030d 	sth	r2,12(r16)
10008f28:	00800084 	movi	r2,2
10008f2c:	80000015 	stw	zero,0(r16)
10008f30:	80000115 	stw	zero,4(r16)
10008f34:	80000215 	stw	zero,8(r16)
10008f38:	80001915 	stw	zero,100(r16)
10008f3c:	8080038d 	sth	r2,14(r16)
10008f40:	80000415 	stw	zero,16(r16)
10008f44:	80000515 	stw	zero,20(r16)
10008f48:	80000615 	stw	zero,24(r16)
10008f4c:	b80d883a 	mov	r6,r23
10008f50:	000b883a 	mov	r5,zero
10008f54:	81001704 	addi	r4,r16,92
10008f58:	000aa540 	call	1000aa54 <memset>
10008f5c:	00800044 	movi	r2,1
10008f60:	84000715 	stw	r16,28(r16)
10008f64:	85800815 	stw	r22,32(r16)
10008f68:	85400915 	stw	r21,36(r16)
10008f6c:	85000a15 	stw	r20,40(r16)
10008f70:	84c00b15 	stw	r19,44(r16)
10008f74:	90800e15 	stw	r2,56(r18)
10008f78:	dfc00817 	ldw	ra,32(sp)
10008f7c:	ddc00717 	ldw	r23,28(sp)
10008f80:	dd800617 	ldw	r22,24(sp)
10008f84:	dd400517 	ldw	r21,20(sp)
10008f88:	dd000417 	ldw	r20,16(sp)
10008f8c:	dcc00317 	ldw	r19,12(sp)
10008f90:	dc800217 	ldw	r18,8(sp)
10008f94:	dc400117 	ldw	r17,4(sp)
10008f98:	dc000017 	ldw	r16,0(sp)
10008f9c:	dec00904 	addi	sp,sp,36
10008fa0:	f800283a 	ret

10008fa4 <__fp_lock>:
10008fa4:	0005883a 	mov	r2,zero
10008fa8:	f800283a 	ret

10008fac <__sfmoreglue>:
10008fac:	defffc04 	addi	sp,sp,-16
10008fb0:	dc800215 	stw	r18,8(sp)
10008fb4:	2825883a 	mov	r18,r5
10008fb8:	dc000015 	stw	r16,0(sp)
10008fbc:	01401a04 	movi	r5,104
10008fc0:	2021883a 	mov	r16,r4
10008fc4:	913fffc4 	addi	r4,r18,-1
10008fc8:	dfc00315 	stw	ra,12(sp)
10008fcc:	dc400115 	stw	r17,4(sp)
10008fd0:	0004b940 	call	10004b94 <__mulsi3>
10008fd4:	8009883a 	mov	r4,r16
10008fd8:	11401d04 	addi	r5,r2,116
10008fdc:	1023883a 	mov	r17,r2
10008fe0:	0009ec00 	call	10009ec0 <_malloc_r>
10008fe4:	1021883a 	mov	r16,r2
10008fe8:	10000726 	beq	r2,zero,10009008 <__sfmoreglue+0x5c>
10008fec:	11000304 	addi	r4,r2,12
10008ff0:	10000015 	stw	zero,0(r2)
10008ff4:	14800115 	stw	r18,4(r2)
10008ff8:	11000215 	stw	r4,8(r2)
10008ffc:	89801a04 	addi	r6,r17,104
10009000:	000b883a 	mov	r5,zero
10009004:	000aa540 	call	1000aa54 <memset>
10009008:	8005883a 	mov	r2,r16
1000900c:	dfc00317 	ldw	ra,12(sp)
10009010:	dc800217 	ldw	r18,8(sp)
10009014:	dc400117 	ldw	r17,4(sp)
10009018:	dc000017 	ldw	r16,0(sp)
1000901c:	dec00404 	addi	sp,sp,16
10009020:	f800283a 	ret

10009024 <__sfp>:
10009024:	defffb04 	addi	sp,sp,-20
10009028:	dc000015 	stw	r16,0(sp)
1000902c:	040400b4 	movhi	r16,4098
10009030:	8433f904 	addi	r16,r16,-12316
10009034:	dcc00315 	stw	r19,12(sp)
10009038:	2027883a 	mov	r19,r4
1000903c:	81000017 	ldw	r4,0(r16)
10009040:	dfc00415 	stw	ra,16(sp)
10009044:	dc800215 	stw	r18,8(sp)
10009048:	20800e17 	ldw	r2,56(r4)
1000904c:	dc400115 	stw	r17,4(sp)
10009050:	1000021e 	bne	r2,zero,1000905c <__sfp+0x38>
10009054:	0008e080 	call	10008e08 <__sinit.part.1>
10009058:	81000017 	ldw	r4,0(r16)
1000905c:	2480b804 	addi	r18,r4,736
10009060:	047fffc4 	movi	r17,-1
10009064:	91000117 	ldw	r4,4(r18)
10009068:	94000217 	ldw	r16,8(r18)
1000906c:	213fffc4 	addi	r4,r4,-1
10009070:	20000a16 	blt	r4,zero,1000909c <__sfp+0x78>
10009074:	8080030f 	ldh	r2,12(r16)
10009078:	10000c26 	beq	r2,zero,100090ac <__sfp+0x88>
1000907c:	80c01d04 	addi	r3,r16,116
10009080:	00000206 	br	1000908c <__sfp+0x68>
10009084:	18bfe60f 	ldh	r2,-104(r3)
10009088:	10000826 	beq	r2,zero,100090ac <__sfp+0x88>
1000908c:	213fffc4 	addi	r4,r4,-1
10009090:	1c3ffd04 	addi	r16,r3,-12
10009094:	18c01a04 	addi	r3,r3,104
10009098:	247ffa1e 	bne	r4,r17,10009084 <__alt_data_end+0xf8009084>
1000909c:	90800017 	ldw	r2,0(r18)
100090a0:	10001d26 	beq	r2,zero,10009118 <__sfp+0xf4>
100090a4:	1025883a 	mov	r18,r2
100090a8:	003fee06 	br	10009064 <__alt_data_end+0xf8009064>
100090ac:	00bfffc4 	movi	r2,-1
100090b0:	8080038d 	sth	r2,14(r16)
100090b4:	00800044 	movi	r2,1
100090b8:	8080030d 	sth	r2,12(r16)
100090bc:	80001915 	stw	zero,100(r16)
100090c0:	80000015 	stw	zero,0(r16)
100090c4:	80000215 	stw	zero,8(r16)
100090c8:	80000115 	stw	zero,4(r16)
100090cc:	80000415 	stw	zero,16(r16)
100090d0:	80000515 	stw	zero,20(r16)
100090d4:	80000615 	stw	zero,24(r16)
100090d8:	01800204 	movi	r6,8
100090dc:	000b883a 	mov	r5,zero
100090e0:	81001704 	addi	r4,r16,92
100090e4:	000aa540 	call	1000aa54 <memset>
100090e8:	8005883a 	mov	r2,r16
100090ec:	80000c15 	stw	zero,48(r16)
100090f0:	80000d15 	stw	zero,52(r16)
100090f4:	80001115 	stw	zero,68(r16)
100090f8:	80001215 	stw	zero,72(r16)
100090fc:	dfc00417 	ldw	ra,16(sp)
10009100:	dcc00317 	ldw	r19,12(sp)
10009104:	dc800217 	ldw	r18,8(sp)
10009108:	dc400117 	ldw	r17,4(sp)
1000910c:	dc000017 	ldw	r16,0(sp)
10009110:	dec00504 	addi	sp,sp,20
10009114:	f800283a 	ret
10009118:	01400104 	movi	r5,4
1000911c:	9809883a 	mov	r4,r19
10009120:	0008fac0 	call	10008fac <__sfmoreglue>
10009124:	90800015 	stw	r2,0(r18)
10009128:	103fde1e 	bne	r2,zero,100090a4 <__alt_data_end+0xf80090a4>
1000912c:	00800304 	movi	r2,12
10009130:	98800015 	stw	r2,0(r19)
10009134:	0005883a 	mov	r2,zero
10009138:	003ff006 	br	100090fc <__alt_data_end+0xf80090fc>

1000913c <_cleanup>:
1000913c:	008400b4 	movhi	r2,4098
10009140:	10b3f904 	addi	r2,r2,-12316
10009144:	11000017 	ldw	r4,0(r2)
10009148:	01440074 	movhi	r5,4097
1000914c:	29774004 	addi	r5,r5,-8960
10009150:	0009b641 	jmpi	10009b64 <_fwalk_reent>

10009154 <__sinit>:
10009154:	20800e17 	ldw	r2,56(r4)
10009158:	10000126 	beq	r2,zero,10009160 <__sinit+0xc>
1000915c:	f800283a 	ret
10009160:	0008e081 	jmpi	10008e08 <__sinit.part.1>

10009164 <__sfp_lock_acquire>:
10009164:	f800283a 	ret

10009168 <__sfp_lock_release>:
10009168:	f800283a 	ret

1000916c <__sinit_lock_acquire>:
1000916c:	f800283a 	ret

10009170 <__sinit_lock_release>:
10009170:	f800283a 	ret

10009174 <__fp_lock_all>:
10009174:	008400b4 	movhi	r2,4098
10009178:	10b3fa04 	addi	r2,r2,-12312
1000917c:	11000017 	ldw	r4,0(r2)
10009180:	01440074 	movhi	r5,4097
10009184:	2963e904 	addi	r5,r5,-28764
10009188:	0009aa01 	jmpi	10009aa0 <_fwalk>

1000918c <__fp_unlock_all>:
1000918c:	008400b4 	movhi	r2,4098
10009190:	10b3fa04 	addi	r2,r2,-12312
10009194:	11000017 	ldw	r4,0(r2)
10009198:	01440074 	movhi	r5,4097
1000919c:	29637d04 	addi	r5,r5,-29196
100091a0:	0009aa01 	jmpi	10009aa0 <_fwalk>

100091a4 <_malloc_trim_r>:
100091a4:	defffb04 	addi	sp,sp,-20
100091a8:	dcc00315 	stw	r19,12(sp)
100091ac:	04c400b4 	movhi	r19,4098
100091b0:	dc800215 	stw	r18,8(sp)
100091b4:	dc400115 	stw	r17,4(sp)
100091b8:	dc000015 	stw	r16,0(sp)
100091bc:	dfc00415 	stw	ra,16(sp)
100091c0:	2821883a 	mov	r16,r5
100091c4:	9cee7504 	addi	r19,r19,-17964
100091c8:	2025883a 	mov	r18,r4
100091cc:	0011ebc0 	call	10011ebc <__malloc_lock>
100091d0:	98800217 	ldw	r2,8(r19)
100091d4:	14400117 	ldw	r17,4(r2)
100091d8:	00bfff04 	movi	r2,-4
100091dc:	88a2703a 	and	r17,r17,r2
100091e0:	8c21c83a 	sub	r16,r17,r16
100091e4:	8403fbc4 	addi	r16,r16,4079
100091e8:	8020d33a 	srli	r16,r16,12
100091ec:	0083ffc4 	movi	r2,4095
100091f0:	843fffc4 	addi	r16,r16,-1
100091f4:	8020933a 	slli	r16,r16,12
100091f8:	1400060e 	bge	r2,r16,10009214 <_malloc_trim_r+0x70>
100091fc:	000b883a 	mov	r5,zero
10009200:	9009883a 	mov	r4,r18
10009204:	000c20c0 	call	1000c20c <_sbrk_r>
10009208:	98c00217 	ldw	r3,8(r19)
1000920c:	1c47883a 	add	r3,r3,r17
10009210:	10c00a26 	beq	r2,r3,1000923c <_malloc_trim_r+0x98>
10009214:	9009883a 	mov	r4,r18
10009218:	0011ee00 	call	10011ee0 <__malloc_unlock>
1000921c:	0005883a 	mov	r2,zero
10009220:	dfc00417 	ldw	ra,16(sp)
10009224:	dcc00317 	ldw	r19,12(sp)
10009228:	dc800217 	ldw	r18,8(sp)
1000922c:	dc400117 	ldw	r17,4(sp)
10009230:	dc000017 	ldw	r16,0(sp)
10009234:	dec00504 	addi	sp,sp,20
10009238:	f800283a 	ret
1000923c:	040bc83a 	sub	r5,zero,r16
10009240:	9009883a 	mov	r4,r18
10009244:	000c20c0 	call	1000c20c <_sbrk_r>
10009248:	00ffffc4 	movi	r3,-1
1000924c:	10c00d26 	beq	r2,r3,10009284 <_malloc_trim_r+0xe0>
10009250:	00c400b4 	movhi	r3,4098
10009254:	18d50604 	addi	r3,r3,21528
10009258:	18800017 	ldw	r2,0(r3)
1000925c:	99000217 	ldw	r4,8(r19)
10009260:	8c23c83a 	sub	r17,r17,r16
10009264:	8c400054 	ori	r17,r17,1
10009268:	1421c83a 	sub	r16,r2,r16
1000926c:	24400115 	stw	r17,4(r4)
10009270:	9009883a 	mov	r4,r18
10009274:	1c000015 	stw	r16,0(r3)
10009278:	0011ee00 	call	10011ee0 <__malloc_unlock>
1000927c:	00800044 	movi	r2,1
10009280:	003fe706 	br	10009220 <__alt_data_end+0xf8009220>
10009284:	000b883a 	mov	r5,zero
10009288:	9009883a 	mov	r4,r18
1000928c:	000c20c0 	call	1000c20c <_sbrk_r>
10009290:	99000217 	ldw	r4,8(r19)
10009294:	014003c4 	movi	r5,15
10009298:	1107c83a 	sub	r3,r2,r4
1000929c:	28ffdd0e 	bge	r5,r3,10009214 <__alt_data_end+0xf8009214>
100092a0:	014400b4 	movhi	r5,4098
100092a4:	2973fc04 	addi	r5,r5,-12304
100092a8:	29400017 	ldw	r5,0(r5)
100092ac:	18c00054 	ori	r3,r3,1
100092b0:	20c00115 	stw	r3,4(r4)
100092b4:	00c400b4 	movhi	r3,4098
100092b8:	1145c83a 	sub	r2,r2,r5
100092bc:	18d50604 	addi	r3,r3,21528
100092c0:	18800015 	stw	r2,0(r3)
100092c4:	003fd306 	br	10009214 <__alt_data_end+0xf8009214>

100092c8 <_free_r>:
100092c8:	28004126 	beq	r5,zero,100093d0 <_free_r+0x108>
100092cc:	defffd04 	addi	sp,sp,-12
100092d0:	dc400115 	stw	r17,4(sp)
100092d4:	dc000015 	stw	r16,0(sp)
100092d8:	2023883a 	mov	r17,r4
100092dc:	2821883a 	mov	r16,r5
100092e0:	dfc00215 	stw	ra,8(sp)
100092e4:	0011ebc0 	call	10011ebc <__malloc_lock>
100092e8:	81ffff17 	ldw	r7,-4(r16)
100092ec:	00bfff84 	movi	r2,-2
100092f0:	010400b4 	movhi	r4,4098
100092f4:	81bffe04 	addi	r6,r16,-8
100092f8:	3884703a 	and	r2,r7,r2
100092fc:	212e7504 	addi	r4,r4,-17964
10009300:	308b883a 	add	r5,r6,r2
10009304:	2a400117 	ldw	r9,4(r5)
10009308:	22000217 	ldw	r8,8(r4)
1000930c:	00ffff04 	movi	r3,-4
10009310:	48c6703a 	and	r3,r9,r3
10009314:	2a005726 	beq	r5,r8,10009474 <_free_r+0x1ac>
10009318:	28c00115 	stw	r3,4(r5)
1000931c:	39c0004c 	andi	r7,r7,1
10009320:	3800091e 	bne	r7,zero,10009348 <_free_r+0x80>
10009324:	823ffe17 	ldw	r8,-8(r16)
10009328:	22400204 	addi	r9,r4,8
1000932c:	320dc83a 	sub	r6,r6,r8
10009330:	31c00217 	ldw	r7,8(r6)
10009334:	1205883a 	add	r2,r2,r8
10009338:	3a406526 	beq	r7,r9,100094d0 <_free_r+0x208>
1000933c:	32000317 	ldw	r8,12(r6)
10009340:	3a000315 	stw	r8,12(r7)
10009344:	41c00215 	stw	r7,8(r8)
10009348:	28cf883a 	add	r7,r5,r3
1000934c:	39c00117 	ldw	r7,4(r7)
10009350:	39c0004c 	andi	r7,r7,1
10009354:	38003a26 	beq	r7,zero,10009440 <_free_r+0x178>
10009358:	10c00054 	ori	r3,r2,1
1000935c:	30c00115 	stw	r3,4(r6)
10009360:	3087883a 	add	r3,r6,r2
10009364:	18800015 	stw	r2,0(r3)
10009368:	00c07fc4 	movi	r3,511
1000936c:	18801936 	bltu	r3,r2,100093d4 <_free_r+0x10c>
10009370:	1004d0fa 	srli	r2,r2,3
10009374:	01c00044 	movi	r7,1
10009378:	21400117 	ldw	r5,4(r4)
1000937c:	10c00044 	addi	r3,r2,1
10009380:	18c7883a 	add	r3,r3,r3
10009384:	1005d0ba 	srai	r2,r2,2
10009388:	18c7883a 	add	r3,r3,r3
1000938c:	18c7883a 	add	r3,r3,r3
10009390:	1907883a 	add	r3,r3,r4
10009394:	3884983a 	sll	r2,r7,r2
10009398:	19c00017 	ldw	r7,0(r3)
1000939c:	1a3ffe04 	addi	r8,r3,-8
100093a0:	1144b03a 	or	r2,r2,r5
100093a4:	32000315 	stw	r8,12(r6)
100093a8:	31c00215 	stw	r7,8(r6)
100093ac:	20800115 	stw	r2,4(r4)
100093b0:	19800015 	stw	r6,0(r3)
100093b4:	39800315 	stw	r6,12(r7)
100093b8:	8809883a 	mov	r4,r17
100093bc:	dfc00217 	ldw	ra,8(sp)
100093c0:	dc400117 	ldw	r17,4(sp)
100093c4:	dc000017 	ldw	r16,0(sp)
100093c8:	dec00304 	addi	sp,sp,12
100093cc:	0011ee01 	jmpi	10011ee0 <__malloc_unlock>
100093d0:	f800283a 	ret
100093d4:	100ad27a 	srli	r5,r2,9
100093d8:	00c00104 	movi	r3,4
100093dc:	19404a36 	bltu	r3,r5,10009508 <_free_r+0x240>
100093e0:	100ad1ba 	srli	r5,r2,6
100093e4:	28c00e44 	addi	r3,r5,57
100093e8:	18c7883a 	add	r3,r3,r3
100093ec:	29400e04 	addi	r5,r5,56
100093f0:	18c7883a 	add	r3,r3,r3
100093f4:	18c7883a 	add	r3,r3,r3
100093f8:	1909883a 	add	r4,r3,r4
100093fc:	20c00017 	ldw	r3,0(r4)
10009400:	01c400b4 	movhi	r7,4098
10009404:	213ffe04 	addi	r4,r4,-8
10009408:	39ee7504 	addi	r7,r7,-17964
1000940c:	20c04426 	beq	r4,r3,10009520 <_free_r+0x258>
10009410:	01ffff04 	movi	r7,-4
10009414:	19400117 	ldw	r5,4(r3)
10009418:	29ca703a 	and	r5,r5,r7
1000941c:	1140022e 	bgeu	r2,r5,10009428 <_free_r+0x160>
10009420:	18c00217 	ldw	r3,8(r3)
10009424:	20fffb1e 	bne	r4,r3,10009414 <__alt_data_end+0xf8009414>
10009428:	19000317 	ldw	r4,12(r3)
1000942c:	31000315 	stw	r4,12(r6)
10009430:	30c00215 	stw	r3,8(r6)
10009434:	21800215 	stw	r6,8(r4)
10009438:	19800315 	stw	r6,12(r3)
1000943c:	003fde06 	br	100093b8 <__alt_data_end+0xf80093b8>
10009440:	29c00217 	ldw	r7,8(r5)
10009444:	10c5883a 	add	r2,r2,r3
10009448:	00c400b4 	movhi	r3,4098
1000944c:	18ee7704 	addi	r3,r3,-17956
10009450:	38c03b26 	beq	r7,r3,10009540 <_free_r+0x278>
10009454:	2a000317 	ldw	r8,12(r5)
10009458:	11400054 	ori	r5,r2,1
1000945c:	3087883a 	add	r3,r6,r2
10009460:	3a000315 	stw	r8,12(r7)
10009464:	41c00215 	stw	r7,8(r8)
10009468:	31400115 	stw	r5,4(r6)
1000946c:	18800015 	stw	r2,0(r3)
10009470:	003fbd06 	br	10009368 <__alt_data_end+0xf8009368>
10009474:	39c0004c 	andi	r7,r7,1
10009478:	10c5883a 	add	r2,r2,r3
1000947c:	3800071e 	bne	r7,zero,1000949c <_free_r+0x1d4>
10009480:	81fffe17 	ldw	r7,-8(r16)
10009484:	31cdc83a 	sub	r6,r6,r7
10009488:	30c00317 	ldw	r3,12(r6)
1000948c:	31400217 	ldw	r5,8(r6)
10009490:	11c5883a 	add	r2,r2,r7
10009494:	28c00315 	stw	r3,12(r5)
10009498:	19400215 	stw	r5,8(r3)
1000949c:	10c00054 	ori	r3,r2,1
100094a0:	30c00115 	stw	r3,4(r6)
100094a4:	00c400b4 	movhi	r3,4098
100094a8:	18f3fd04 	addi	r3,r3,-12300
100094ac:	18c00017 	ldw	r3,0(r3)
100094b0:	21800215 	stw	r6,8(r4)
100094b4:	10ffc036 	bltu	r2,r3,100093b8 <__alt_data_end+0xf80093b8>
100094b8:	008400b4 	movhi	r2,4098
100094bc:	1094fd04 	addi	r2,r2,21492
100094c0:	11400017 	ldw	r5,0(r2)
100094c4:	8809883a 	mov	r4,r17
100094c8:	00091a40 	call	100091a4 <_malloc_trim_r>
100094cc:	003fba06 	br	100093b8 <__alt_data_end+0xf80093b8>
100094d0:	28c9883a 	add	r4,r5,r3
100094d4:	21000117 	ldw	r4,4(r4)
100094d8:	2100004c 	andi	r4,r4,1
100094dc:	2000391e 	bne	r4,zero,100095c4 <_free_r+0x2fc>
100094e0:	29c00217 	ldw	r7,8(r5)
100094e4:	29000317 	ldw	r4,12(r5)
100094e8:	1885883a 	add	r2,r3,r2
100094ec:	10c00054 	ori	r3,r2,1
100094f0:	39000315 	stw	r4,12(r7)
100094f4:	21c00215 	stw	r7,8(r4)
100094f8:	30c00115 	stw	r3,4(r6)
100094fc:	308d883a 	add	r6,r6,r2
10009500:	30800015 	stw	r2,0(r6)
10009504:	003fac06 	br	100093b8 <__alt_data_end+0xf80093b8>
10009508:	00c00504 	movi	r3,20
1000950c:	19401536 	bltu	r3,r5,10009564 <_free_r+0x29c>
10009510:	28c01704 	addi	r3,r5,92
10009514:	18c7883a 	add	r3,r3,r3
10009518:	294016c4 	addi	r5,r5,91
1000951c:	003fb406 	br	100093f0 <__alt_data_end+0xf80093f0>
10009520:	280bd0ba 	srai	r5,r5,2
10009524:	00c00044 	movi	r3,1
10009528:	38800117 	ldw	r2,4(r7)
1000952c:	194a983a 	sll	r5,r3,r5
10009530:	2007883a 	mov	r3,r4
10009534:	2884b03a 	or	r2,r5,r2
10009538:	38800115 	stw	r2,4(r7)
1000953c:	003fbb06 	br	1000942c <__alt_data_end+0xf800942c>
10009540:	21800515 	stw	r6,20(r4)
10009544:	21800415 	stw	r6,16(r4)
10009548:	10c00054 	ori	r3,r2,1
1000954c:	31c00315 	stw	r7,12(r6)
10009550:	31c00215 	stw	r7,8(r6)
10009554:	30c00115 	stw	r3,4(r6)
10009558:	308d883a 	add	r6,r6,r2
1000955c:	30800015 	stw	r2,0(r6)
10009560:	003f9506 	br	100093b8 <__alt_data_end+0xf80093b8>
10009564:	00c01504 	movi	r3,84
10009568:	19400536 	bltu	r3,r5,10009580 <_free_r+0x2b8>
1000956c:	100ad33a 	srli	r5,r2,12
10009570:	28c01bc4 	addi	r3,r5,111
10009574:	18c7883a 	add	r3,r3,r3
10009578:	29401b84 	addi	r5,r5,110
1000957c:	003f9c06 	br	100093f0 <__alt_data_end+0xf80093f0>
10009580:	00c05504 	movi	r3,340
10009584:	19400536 	bltu	r3,r5,1000959c <_free_r+0x2d4>
10009588:	100ad3fa 	srli	r5,r2,15
1000958c:	28c01e04 	addi	r3,r5,120
10009590:	18c7883a 	add	r3,r3,r3
10009594:	29401dc4 	addi	r5,r5,119
10009598:	003f9506 	br	100093f0 <__alt_data_end+0xf80093f0>
1000959c:	00c15504 	movi	r3,1364
100095a0:	19400536 	bltu	r3,r5,100095b8 <_free_r+0x2f0>
100095a4:	100ad4ba 	srli	r5,r2,18
100095a8:	28c01f44 	addi	r3,r5,125
100095ac:	18c7883a 	add	r3,r3,r3
100095b0:	29401f04 	addi	r5,r5,124
100095b4:	003f8e06 	br	100093f0 <__alt_data_end+0xf80093f0>
100095b8:	00c03f84 	movi	r3,254
100095bc:	01401f84 	movi	r5,126
100095c0:	003f8b06 	br	100093f0 <__alt_data_end+0xf80093f0>
100095c4:	10c00054 	ori	r3,r2,1
100095c8:	30c00115 	stw	r3,4(r6)
100095cc:	308d883a 	add	r6,r6,r2
100095d0:	30800015 	stw	r2,0(r6)
100095d4:	003f7806 	br	100093b8 <__alt_data_end+0xf80093b8>

100095d8 <__sfvwrite_r>:
100095d8:	30800217 	ldw	r2,8(r6)
100095dc:	10006726 	beq	r2,zero,1000977c <__sfvwrite_r+0x1a4>
100095e0:	28c0030b 	ldhu	r3,12(r5)
100095e4:	defff404 	addi	sp,sp,-48
100095e8:	dd400715 	stw	r21,28(sp)
100095ec:	dd000615 	stw	r20,24(sp)
100095f0:	dc000215 	stw	r16,8(sp)
100095f4:	dfc00b15 	stw	ra,44(sp)
100095f8:	df000a15 	stw	fp,40(sp)
100095fc:	ddc00915 	stw	r23,36(sp)
10009600:	dd800815 	stw	r22,32(sp)
10009604:	dcc00515 	stw	r19,20(sp)
10009608:	dc800415 	stw	r18,16(sp)
1000960c:	dc400315 	stw	r17,12(sp)
10009610:	1880020c 	andi	r2,r3,8
10009614:	2821883a 	mov	r16,r5
10009618:	202b883a 	mov	r21,r4
1000961c:	3029883a 	mov	r20,r6
10009620:	10002726 	beq	r2,zero,100096c0 <__sfvwrite_r+0xe8>
10009624:	28800417 	ldw	r2,16(r5)
10009628:	10002526 	beq	r2,zero,100096c0 <__sfvwrite_r+0xe8>
1000962c:	1880008c 	andi	r2,r3,2
10009630:	a4400017 	ldw	r17,0(r20)
10009634:	10002a26 	beq	r2,zero,100096e0 <__sfvwrite_r+0x108>
10009638:	05a00034 	movhi	r22,32768
1000963c:	0027883a 	mov	r19,zero
10009640:	0025883a 	mov	r18,zero
10009644:	b5bf0004 	addi	r22,r22,-1024
10009648:	980d883a 	mov	r6,r19
1000964c:	a809883a 	mov	r4,r21
10009650:	90004626 	beq	r18,zero,1000976c <__sfvwrite_r+0x194>
10009654:	900f883a 	mov	r7,r18
10009658:	b480022e 	bgeu	r22,r18,10009664 <__sfvwrite_r+0x8c>
1000965c:	01e00034 	movhi	r7,32768
10009660:	39ff0004 	addi	r7,r7,-1024
10009664:	80800917 	ldw	r2,36(r16)
10009668:	81400717 	ldw	r5,28(r16)
1000966c:	103ee83a 	callr	r2
10009670:	00805a0e 	bge	zero,r2,100097dc <__sfvwrite_r+0x204>
10009674:	a0c00217 	ldw	r3,8(r20)
10009678:	98a7883a 	add	r19,r19,r2
1000967c:	90a5c83a 	sub	r18,r18,r2
10009680:	1885c83a 	sub	r2,r3,r2
10009684:	a0800215 	stw	r2,8(r20)
10009688:	103fef1e 	bne	r2,zero,10009648 <__alt_data_end+0xf8009648>
1000968c:	0005883a 	mov	r2,zero
10009690:	dfc00b17 	ldw	ra,44(sp)
10009694:	df000a17 	ldw	fp,40(sp)
10009698:	ddc00917 	ldw	r23,36(sp)
1000969c:	dd800817 	ldw	r22,32(sp)
100096a0:	dd400717 	ldw	r21,28(sp)
100096a4:	dd000617 	ldw	r20,24(sp)
100096a8:	dcc00517 	ldw	r19,20(sp)
100096ac:	dc800417 	ldw	r18,16(sp)
100096b0:	dc400317 	ldw	r17,12(sp)
100096b4:	dc000217 	ldw	r16,8(sp)
100096b8:	dec00c04 	addi	sp,sp,48
100096bc:	f800283a 	ret
100096c0:	800b883a 	mov	r5,r16
100096c4:	a809883a 	mov	r4,r21
100096c8:	00071480 	call	10007148 <__swsetup_r>
100096cc:	1000ee1e 	bne	r2,zero,10009a88 <__sfvwrite_r+0x4b0>
100096d0:	80c0030b 	ldhu	r3,12(r16)
100096d4:	a4400017 	ldw	r17,0(r20)
100096d8:	1880008c 	andi	r2,r3,2
100096dc:	103fd61e 	bne	r2,zero,10009638 <__alt_data_end+0xf8009638>
100096e0:	1880004c 	andi	r2,r3,1
100096e4:	1000421e 	bne	r2,zero,100097f0 <__sfvwrite_r+0x218>
100096e8:	0039883a 	mov	fp,zero
100096ec:	0025883a 	mov	r18,zero
100096f0:	90001a26 	beq	r18,zero,1000975c <__sfvwrite_r+0x184>
100096f4:	1880800c 	andi	r2,r3,512
100096f8:	84c00217 	ldw	r19,8(r16)
100096fc:	10002126 	beq	r2,zero,10009784 <__sfvwrite_r+0x1ac>
10009700:	982f883a 	mov	r23,r19
10009704:	94c09636 	bltu	r18,r19,10009960 <__sfvwrite_r+0x388>
10009708:	1881200c 	andi	r2,r3,1152
1000970c:	1000a11e 	bne	r2,zero,10009994 <__sfvwrite_r+0x3bc>
10009710:	81000017 	ldw	r4,0(r16)
10009714:	b80d883a 	mov	r6,r23
10009718:	e00b883a 	mov	r5,fp
1000971c:	000a8f80 	call	1000a8f8 <memmove>
10009720:	80c00217 	ldw	r3,8(r16)
10009724:	81000017 	ldw	r4,0(r16)
10009728:	9005883a 	mov	r2,r18
1000972c:	1ce7c83a 	sub	r19,r3,r19
10009730:	25cf883a 	add	r7,r4,r23
10009734:	84c00215 	stw	r19,8(r16)
10009738:	81c00015 	stw	r7,0(r16)
1000973c:	a0c00217 	ldw	r3,8(r20)
10009740:	e0b9883a 	add	fp,fp,r2
10009744:	90a5c83a 	sub	r18,r18,r2
10009748:	18a7c83a 	sub	r19,r3,r2
1000974c:	a4c00215 	stw	r19,8(r20)
10009750:	983fce26 	beq	r19,zero,1000968c <__alt_data_end+0xf800968c>
10009754:	80c0030b 	ldhu	r3,12(r16)
10009758:	903fe61e 	bne	r18,zero,100096f4 <__alt_data_end+0xf80096f4>
1000975c:	8f000017 	ldw	fp,0(r17)
10009760:	8c800117 	ldw	r18,4(r17)
10009764:	8c400204 	addi	r17,r17,8
10009768:	003fe106 	br	100096f0 <__alt_data_end+0xf80096f0>
1000976c:	8cc00017 	ldw	r19,0(r17)
10009770:	8c800117 	ldw	r18,4(r17)
10009774:	8c400204 	addi	r17,r17,8
10009778:	003fb306 	br	10009648 <__alt_data_end+0xf8009648>
1000977c:	0005883a 	mov	r2,zero
10009780:	f800283a 	ret
10009784:	81000017 	ldw	r4,0(r16)
10009788:	80800417 	ldw	r2,16(r16)
1000978c:	11005a36 	bltu	r2,r4,100098f8 <__sfvwrite_r+0x320>
10009790:	85c00517 	ldw	r23,20(r16)
10009794:	95c05836 	bltu	r18,r23,100098f8 <__sfvwrite_r+0x320>
10009798:	00a00034 	movhi	r2,32768
1000979c:	10bfffc4 	addi	r2,r2,-1
100097a0:	9009883a 	mov	r4,r18
100097a4:	1480012e 	bgeu	r2,r18,100097ac <__sfvwrite_r+0x1d4>
100097a8:	1009883a 	mov	r4,r2
100097ac:	b80b883a 	mov	r5,r23
100097b0:	00049e00 	call	100049e0 <__divsi3>
100097b4:	b80b883a 	mov	r5,r23
100097b8:	1009883a 	mov	r4,r2
100097bc:	0004b940 	call	10004b94 <__mulsi3>
100097c0:	81400717 	ldw	r5,28(r16)
100097c4:	80c00917 	ldw	r3,36(r16)
100097c8:	100f883a 	mov	r7,r2
100097cc:	e00d883a 	mov	r6,fp
100097d0:	a809883a 	mov	r4,r21
100097d4:	183ee83a 	callr	r3
100097d8:	00bfd816 	blt	zero,r2,1000973c <__alt_data_end+0xf800973c>
100097dc:	8080030b 	ldhu	r2,12(r16)
100097e0:	10801014 	ori	r2,r2,64
100097e4:	8080030d 	sth	r2,12(r16)
100097e8:	00bfffc4 	movi	r2,-1
100097ec:	003fa806 	br	10009690 <__alt_data_end+0xf8009690>
100097f0:	0027883a 	mov	r19,zero
100097f4:	0011883a 	mov	r8,zero
100097f8:	0039883a 	mov	fp,zero
100097fc:	0025883a 	mov	r18,zero
10009800:	90001f26 	beq	r18,zero,10009880 <__sfvwrite_r+0x2a8>
10009804:	40005a26 	beq	r8,zero,10009970 <__sfvwrite_r+0x398>
10009808:	982d883a 	mov	r22,r19
1000980c:	94c0012e 	bgeu	r18,r19,10009814 <__sfvwrite_r+0x23c>
10009810:	902d883a 	mov	r22,r18
10009814:	81000017 	ldw	r4,0(r16)
10009818:	80800417 	ldw	r2,16(r16)
1000981c:	b02f883a 	mov	r23,r22
10009820:	81c00517 	ldw	r7,20(r16)
10009824:	1100032e 	bgeu	r2,r4,10009834 <__sfvwrite_r+0x25c>
10009828:	80c00217 	ldw	r3,8(r16)
1000982c:	38c7883a 	add	r3,r7,r3
10009830:	1d801816 	blt	r3,r22,10009894 <__sfvwrite_r+0x2bc>
10009834:	b1c03e16 	blt	r22,r7,10009930 <__sfvwrite_r+0x358>
10009838:	80800917 	ldw	r2,36(r16)
1000983c:	81400717 	ldw	r5,28(r16)
10009840:	e00d883a 	mov	r6,fp
10009844:	da000115 	stw	r8,4(sp)
10009848:	a809883a 	mov	r4,r21
1000984c:	103ee83a 	callr	r2
10009850:	102f883a 	mov	r23,r2
10009854:	da000117 	ldw	r8,4(sp)
10009858:	00bfe00e 	bge	zero,r2,100097dc <__alt_data_end+0xf80097dc>
1000985c:	9de7c83a 	sub	r19,r19,r23
10009860:	98001f26 	beq	r19,zero,100098e0 <__sfvwrite_r+0x308>
10009864:	a0800217 	ldw	r2,8(r20)
10009868:	e5f9883a 	add	fp,fp,r23
1000986c:	95e5c83a 	sub	r18,r18,r23
10009870:	15efc83a 	sub	r23,r2,r23
10009874:	a5c00215 	stw	r23,8(r20)
10009878:	b83f8426 	beq	r23,zero,1000968c <__alt_data_end+0xf800968c>
1000987c:	903fe11e 	bne	r18,zero,10009804 <__alt_data_end+0xf8009804>
10009880:	8f000017 	ldw	fp,0(r17)
10009884:	8c800117 	ldw	r18,4(r17)
10009888:	0011883a 	mov	r8,zero
1000988c:	8c400204 	addi	r17,r17,8
10009890:	003fdb06 	br	10009800 <__alt_data_end+0xf8009800>
10009894:	180d883a 	mov	r6,r3
10009898:	e00b883a 	mov	r5,fp
1000989c:	da000115 	stw	r8,4(sp)
100098a0:	d8c00015 	stw	r3,0(sp)
100098a4:	000a8f80 	call	1000a8f8 <memmove>
100098a8:	d8c00017 	ldw	r3,0(sp)
100098ac:	80800017 	ldw	r2,0(r16)
100098b0:	800b883a 	mov	r5,r16
100098b4:	a809883a 	mov	r4,r21
100098b8:	10c5883a 	add	r2,r2,r3
100098bc:	80800015 	stw	r2,0(r16)
100098c0:	d8c00015 	stw	r3,0(sp)
100098c4:	0008d680 	call	10008d68 <_fflush_r>
100098c8:	d8c00017 	ldw	r3,0(sp)
100098cc:	da000117 	ldw	r8,4(sp)
100098d0:	103fc21e 	bne	r2,zero,100097dc <__alt_data_end+0xf80097dc>
100098d4:	182f883a 	mov	r23,r3
100098d8:	9de7c83a 	sub	r19,r19,r23
100098dc:	983fe11e 	bne	r19,zero,10009864 <__alt_data_end+0xf8009864>
100098e0:	800b883a 	mov	r5,r16
100098e4:	a809883a 	mov	r4,r21
100098e8:	0008d680 	call	10008d68 <_fflush_r>
100098ec:	103fbb1e 	bne	r2,zero,100097dc <__alt_data_end+0xf80097dc>
100098f0:	0011883a 	mov	r8,zero
100098f4:	003fdb06 	br	10009864 <__alt_data_end+0xf8009864>
100098f8:	94c0012e 	bgeu	r18,r19,10009900 <__sfvwrite_r+0x328>
100098fc:	9027883a 	mov	r19,r18
10009900:	980d883a 	mov	r6,r19
10009904:	e00b883a 	mov	r5,fp
10009908:	000a8f80 	call	1000a8f8 <memmove>
1000990c:	80800217 	ldw	r2,8(r16)
10009910:	80c00017 	ldw	r3,0(r16)
10009914:	14c5c83a 	sub	r2,r2,r19
10009918:	1cc7883a 	add	r3,r3,r19
1000991c:	80800215 	stw	r2,8(r16)
10009920:	80c00015 	stw	r3,0(r16)
10009924:	10004326 	beq	r2,zero,10009a34 <__sfvwrite_r+0x45c>
10009928:	9805883a 	mov	r2,r19
1000992c:	003f8306 	br	1000973c <__alt_data_end+0xf800973c>
10009930:	b00d883a 	mov	r6,r22
10009934:	e00b883a 	mov	r5,fp
10009938:	da000115 	stw	r8,4(sp)
1000993c:	000a8f80 	call	1000a8f8 <memmove>
10009940:	80800217 	ldw	r2,8(r16)
10009944:	80c00017 	ldw	r3,0(r16)
10009948:	da000117 	ldw	r8,4(sp)
1000994c:	1585c83a 	sub	r2,r2,r22
10009950:	1dad883a 	add	r22,r3,r22
10009954:	80800215 	stw	r2,8(r16)
10009958:	85800015 	stw	r22,0(r16)
1000995c:	003fbf06 	br	1000985c <__alt_data_end+0xf800985c>
10009960:	81000017 	ldw	r4,0(r16)
10009964:	9027883a 	mov	r19,r18
10009968:	902f883a 	mov	r23,r18
1000996c:	003f6906 	br	10009714 <__alt_data_end+0xf8009714>
10009970:	900d883a 	mov	r6,r18
10009974:	01400284 	movi	r5,10
10009978:	e009883a 	mov	r4,fp
1000997c:	000a6cc0 	call	1000a6cc <memchr>
10009980:	10003e26 	beq	r2,zero,10009a7c <__sfvwrite_r+0x4a4>
10009984:	10800044 	addi	r2,r2,1
10009988:	1727c83a 	sub	r19,r2,fp
1000998c:	02000044 	movi	r8,1
10009990:	003f9d06 	br	10009808 <__alt_data_end+0xf8009808>
10009994:	80800517 	ldw	r2,20(r16)
10009998:	81400417 	ldw	r5,16(r16)
1000999c:	81c00017 	ldw	r7,0(r16)
100099a0:	10a7883a 	add	r19,r2,r2
100099a4:	9885883a 	add	r2,r19,r2
100099a8:	1026d7fa 	srli	r19,r2,31
100099ac:	396dc83a 	sub	r22,r7,r5
100099b0:	b1000044 	addi	r4,r22,1
100099b4:	9885883a 	add	r2,r19,r2
100099b8:	1027d07a 	srai	r19,r2,1
100099bc:	2485883a 	add	r2,r4,r18
100099c0:	980d883a 	mov	r6,r19
100099c4:	9880022e 	bgeu	r19,r2,100099d0 <__sfvwrite_r+0x3f8>
100099c8:	1027883a 	mov	r19,r2
100099cc:	100d883a 	mov	r6,r2
100099d0:	18c1000c 	andi	r3,r3,1024
100099d4:	18001c26 	beq	r3,zero,10009a48 <__sfvwrite_r+0x470>
100099d8:	300b883a 	mov	r5,r6
100099dc:	a809883a 	mov	r4,r21
100099e0:	0009ec00 	call	10009ec0 <_malloc_r>
100099e4:	102f883a 	mov	r23,r2
100099e8:	10002926 	beq	r2,zero,10009a90 <__sfvwrite_r+0x4b8>
100099ec:	81400417 	ldw	r5,16(r16)
100099f0:	b00d883a 	mov	r6,r22
100099f4:	1009883a 	mov	r4,r2
100099f8:	000a7b00 	call	1000a7b0 <memcpy>
100099fc:	8080030b 	ldhu	r2,12(r16)
10009a00:	00fedfc4 	movi	r3,-1153
10009a04:	10c4703a 	and	r2,r2,r3
10009a08:	10802014 	ori	r2,r2,128
10009a0c:	8080030d 	sth	r2,12(r16)
10009a10:	bd89883a 	add	r4,r23,r22
10009a14:	9d8fc83a 	sub	r7,r19,r22
10009a18:	85c00415 	stw	r23,16(r16)
10009a1c:	84c00515 	stw	r19,20(r16)
10009a20:	81000015 	stw	r4,0(r16)
10009a24:	9027883a 	mov	r19,r18
10009a28:	81c00215 	stw	r7,8(r16)
10009a2c:	902f883a 	mov	r23,r18
10009a30:	003f3806 	br	10009714 <__alt_data_end+0xf8009714>
10009a34:	800b883a 	mov	r5,r16
10009a38:	a809883a 	mov	r4,r21
10009a3c:	0008d680 	call	10008d68 <_fflush_r>
10009a40:	103fb926 	beq	r2,zero,10009928 <__alt_data_end+0xf8009928>
10009a44:	003f6506 	br	100097dc <__alt_data_end+0xf80097dc>
10009a48:	a809883a 	mov	r4,r21
10009a4c:	000bc340 	call	1000bc34 <_realloc_r>
10009a50:	102f883a 	mov	r23,r2
10009a54:	103fee1e 	bne	r2,zero,10009a10 <__alt_data_end+0xf8009a10>
10009a58:	81400417 	ldw	r5,16(r16)
10009a5c:	a809883a 	mov	r4,r21
10009a60:	00092c80 	call	100092c8 <_free_r>
10009a64:	8080030b 	ldhu	r2,12(r16)
10009a68:	00ffdfc4 	movi	r3,-129
10009a6c:	1884703a 	and	r2,r3,r2
10009a70:	00c00304 	movi	r3,12
10009a74:	a8c00015 	stw	r3,0(r21)
10009a78:	003f5906 	br	100097e0 <__alt_data_end+0xf80097e0>
10009a7c:	94c00044 	addi	r19,r18,1
10009a80:	02000044 	movi	r8,1
10009a84:	003f6006 	br	10009808 <__alt_data_end+0xf8009808>
10009a88:	00bfffc4 	movi	r2,-1
10009a8c:	003f0006 	br	10009690 <__alt_data_end+0xf8009690>
10009a90:	00800304 	movi	r2,12
10009a94:	a8800015 	stw	r2,0(r21)
10009a98:	8080030b 	ldhu	r2,12(r16)
10009a9c:	003f5006 	br	100097e0 <__alt_data_end+0xf80097e0>

10009aa0 <_fwalk>:
10009aa0:	defff704 	addi	sp,sp,-36
10009aa4:	dd000415 	stw	r20,16(sp)
10009aa8:	dfc00815 	stw	ra,32(sp)
10009aac:	ddc00715 	stw	r23,28(sp)
10009ab0:	dd800615 	stw	r22,24(sp)
10009ab4:	dd400515 	stw	r21,20(sp)
10009ab8:	dcc00315 	stw	r19,12(sp)
10009abc:	dc800215 	stw	r18,8(sp)
10009ac0:	dc400115 	stw	r17,4(sp)
10009ac4:	dc000015 	stw	r16,0(sp)
10009ac8:	2500b804 	addi	r20,r4,736
10009acc:	a0002326 	beq	r20,zero,10009b5c <_fwalk+0xbc>
10009ad0:	282b883a 	mov	r21,r5
10009ad4:	002f883a 	mov	r23,zero
10009ad8:	05800044 	movi	r22,1
10009adc:	04ffffc4 	movi	r19,-1
10009ae0:	a4400117 	ldw	r17,4(r20)
10009ae4:	a4800217 	ldw	r18,8(r20)
10009ae8:	8c7fffc4 	addi	r17,r17,-1
10009aec:	88000d16 	blt	r17,zero,10009b24 <_fwalk+0x84>
10009af0:	94000304 	addi	r16,r18,12
10009af4:	94800384 	addi	r18,r18,14
10009af8:	8080000b 	ldhu	r2,0(r16)
10009afc:	8c7fffc4 	addi	r17,r17,-1
10009b00:	813ffd04 	addi	r4,r16,-12
10009b04:	b080042e 	bgeu	r22,r2,10009b18 <_fwalk+0x78>
10009b08:	9080000f 	ldh	r2,0(r18)
10009b0c:	14c00226 	beq	r2,r19,10009b18 <_fwalk+0x78>
10009b10:	a83ee83a 	callr	r21
10009b14:	b8aeb03a 	or	r23,r23,r2
10009b18:	84001a04 	addi	r16,r16,104
10009b1c:	94801a04 	addi	r18,r18,104
10009b20:	8cfff51e 	bne	r17,r19,10009af8 <__alt_data_end+0xf8009af8>
10009b24:	a5000017 	ldw	r20,0(r20)
10009b28:	a03fed1e 	bne	r20,zero,10009ae0 <__alt_data_end+0xf8009ae0>
10009b2c:	b805883a 	mov	r2,r23
10009b30:	dfc00817 	ldw	ra,32(sp)
10009b34:	ddc00717 	ldw	r23,28(sp)
10009b38:	dd800617 	ldw	r22,24(sp)
10009b3c:	dd400517 	ldw	r21,20(sp)
10009b40:	dd000417 	ldw	r20,16(sp)
10009b44:	dcc00317 	ldw	r19,12(sp)
10009b48:	dc800217 	ldw	r18,8(sp)
10009b4c:	dc400117 	ldw	r17,4(sp)
10009b50:	dc000017 	ldw	r16,0(sp)
10009b54:	dec00904 	addi	sp,sp,36
10009b58:	f800283a 	ret
10009b5c:	002f883a 	mov	r23,zero
10009b60:	003ff206 	br	10009b2c <__alt_data_end+0xf8009b2c>

10009b64 <_fwalk_reent>:
10009b64:	defff704 	addi	sp,sp,-36
10009b68:	dd000415 	stw	r20,16(sp)
10009b6c:	dfc00815 	stw	ra,32(sp)
10009b70:	ddc00715 	stw	r23,28(sp)
10009b74:	dd800615 	stw	r22,24(sp)
10009b78:	dd400515 	stw	r21,20(sp)
10009b7c:	dcc00315 	stw	r19,12(sp)
10009b80:	dc800215 	stw	r18,8(sp)
10009b84:	dc400115 	stw	r17,4(sp)
10009b88:	dc000015 	stw	r16,0(sp)
10009b8c:	2500b804 	addi	r20,r4,736
10009b90:	a0002326 	beq	r20,zero,10009c20 <_fwalk_reent+0xbc>
10009b94:	282b883a 	mov	r21,r5
10009b98:	2027883a 	mov	r19,r4
10009b9c:	002f883a 	mov	r23,zero
10009ba0:	05800044 	movi	r22,1
10009ba4:	04bfffc4 	movi	r18,-1
10009ba8:	a4400117 	ldw	r17,4(r20)
10009bac:	a4000217 	ldw	r16,8(r20)
10009bb0:	8c7fffc4 	addi	r17,r17,-1
10009bb4:	88000c16 	blt	r17,zero,10009be8 <_fwalk_reent+0x84>
10009bb8:	84000304 	addi	r16,r16,12
10009bbc:	8080000b 	ldhu	r2,0(r16)
10009bc0:	8c7fffc4 	addi	r17,r17,-1
10009bc4:	817ffd04 	addi	r5,r16,-12
10009bc8:	b080052e 	bgeu	r22,r2,10009be0 <_fwalk_reent+0x7c>
10009bcc:	8080008f 	ldh	r2,2(r16)
10009bd0:	9809883a 	mov	r4,r19
10009bd4:	14800226 	beq	r2,r18,10009be0 <_fwalk_reent+0x7c>
10009bd8:	a83ee83a 	callr	r21
10009bdc:	b8aeb03a 	or	r23,r23,r2
10009be0:	84001a04 	addi	r16,r16,104
10009be4:	8cbff51e 	bne	r17,r18,10009bbc <__alt_data_end+0xf8009bbc>
10009be8:	a5000017 	ldw	r20,0(r20)
10009bec:	a03fee1e 	bne	r20,zero,10009ba8 <__alt_data_end+0xf8009ba8>
10009bf0:	b805883a 	mov	r2,r23
10009bf4:	dfc00817 	ldw	ra,32(sp)
10009bf8:	ddc00717 	ldw	r23,28(sp)
10009bfc:	dd800617 	ldw	r22,24(sp)
10009c00:	dd400517 	ldw	r21,20(sp)
10009c04:	dd000417 	ldw	r20,16(sp)
10009c08:	dcc00317 	ldw	r19,12(sp)
10009c0c:	dc800217 	ldw	r18,8(sp)
10009c10:	dc400117 	ldw	r17,4(sp)
10009c14:	dc000017 	ldw	r16,0(sp)
10009c18:	dec00904 	addi	sp,sp,36
10009c1c:	f800283a 	ret
10009c20:	002f883a 	mov	r23,zero
10009c24:	003ff206 	br	10009bf0 <__alt_data_end+0xf8009bf0>

10009c28 <_setlocale_r>:
10009c28:	30001b26 	beq	r6,zero,10009c98 <_setlocale_r+0x70>
10009c2c:	01440074 	movhi	r5,4097
10009c30:	defffe04 	addi	sp,sp,-8
10009c34:	29528204 	addi	r5,r5,18952
10009c38:	3009883a 	mov	r4,r6
10009c3c:	dc000015 	stw	r16,0(sp)
10009c40:	dfc00115 	stw	ra,4(sp)
10009c44:	3021883a 	mov	r16,r6
10009c48:	000c39c0 	call	1000c39c <strcmp>
10009c4c:	1000061e 	bne	r2,zero,10009c68 <_setlocale_r+0x40>
10009c50:	00840074 	movhi	r2,4097
10009c54:	10928104 	addi	r2,r2,18948
10009c58:	dfc00117 	ldw	ra,4(sp)
10009c5c:	dc000017 	ldw	r16,0(sp)
10009c60:	dec00204 	addi	sp,sp,8
10009c64:	f800283a 	ret
10009c68:	01440074 	movhi	r5,4097
10009c6c:	29528104 	addi	r5,r5,18948
10009c70:	8009883a 	mov	r4,r16
10009c74:	000c39c0 	call	1000c39c <strcmp>
10009c78:	103ff526 	beq	r2,zero,10009c50 <__alt_data_end+0xf8009c50>
10009c7c:	01440074 	movhi	r5,4097
10009c80:	29526c04 	addi	r5,r5,18864
10009c84:	8009883a 	mov	r4,r16
10009c88:	000c39c0 	call	1000c39c <strcmp>
10009c8c:	103ff026 	beq	r2,zero,10009c50 <__alt_data_end+0xf8009c50>
10009c90:	0005883a 	mov	r2,zero
10009c94:	003ff006 	br	10009c58 <__alt_data_end+0xf8009c58>
10009c98:	00840074 	movhi	r2,4097
10009c9c:	10928104 	addi	r2,r2,18948
10009ca0:	f800283a 	ret

10009ca4 <__locale_charset>:
10009ca4:	008400b4 	movhi	r2,4098
10009ca8:	10ae5f04 	addi	r2,r2,-18052
10009cac:	f800283a 	ret

10009cb0 <__locale_mb_cur_max>:
10009cb0:	008400b4 	movhi	r2,4098
10009cb4:	10b3fb04 	addi	r2,r2,-12308
10009cb8:	10800017 	ldw	r2,0(r2)
10009cbc:	f800283a 	ret

10009cc0 <__locale_msgcharset>:
10009cc0:	008400b4 	movhi	r2,4098
10009cc4:	10ae5704 	addi	r2,r2,-18084
10009cc8:	f800283a 	ret

10009ccc <__locale_cjk_lang>:
10009ccc:	0005883a 	mov	r2,zero
10009cd0:	f800283a 	ret

10009cd4 <_localeconv_r>:
10009cd4:	008400b4 	movhi	r2,4098
10009cd8:	10ae6704 	addi	r2,r2,-18020
10009cdc:	f800283a 	ret

10009ce0 <setlocale>:
10009ce0:	008400b4 	movhi	r2,4098
10009ce4:	10b3fa04 	addi	r2,r2,-12312
10009ce8:	280d883a 	mov	r6,r5
10009cec:	200b883a 	mov	r5,r4
10009cf0:	11000017 	ldw	r4,0(r2)
10009cf4:	0009c281 	jmpi	10009c28 <_setlocale_r>

10009cf8 <localeconv>:
10009cf8:	008400b4 	movhi	r2,4098
10009cfc:	10ae6704 	addi	r2,r2,-18020
10009d00:	f800283a 	ret

10009d04 <__smakebuf_r>:
10009d04:	2880030b 	ldhu	r2,12(r5)
10009d08:	10c0008c 	andi	r3,r2,2
10009d0c:	1800411e 	bne	r3,zero,10009e14 <__smakebuf_r+0x110>
10009d10:	deffec04 	addi	sp,sp,-80
10009d14:	dc000f15 	stw	r16,60(sp)
10009d18:	2821883a 	mov	r16,r5
10009d1c:	2940038f 	ldh	r5,14(r5)
10009d20:	dc401015 	stw	r17,64(sp)
10009d24:	dfc01315 	stw	ra,76(sp)
10009d28:	dcc01215 	stw	r19,72(sp)
10009d2c:	dc801115 	stw	r18,68(sp)
10009d30:	2023883a 	mov	r17,r4
10009d34:	28001c16 	blt	r5,zero,10009da8 <__smakebuf_r+0xa4>
10009d38:	d80d883a 	mov	r6,sp
10009d3c:	000e00c0 	call	1000e00c <_fstat_r>
10009d40:	10001816 	blt	r2,zero,10009da4 <__smakebuf_r+0xa0>
10009d44:	d8800117 	ldw	r2,4(sp)
10009d48:	00e00014 	movui	r3,32768
10009d4c:	10bc000c 	andi	r2,r2,61440
10009d50:	14c80020 	cmpeqi	r19,r2,8192
10009d54:	10c03726 	beq	r2,r3,10009e34 <__smakebuf_r+0x130>
10009d58:	80c0030b 	ldhu	r3,12(r16)
10009d5c:	18c20014 	ori	r3,r3,2048
10009d60:	80c0030d 	sth	r3,12(r16)
10009d64:	00c80004 	movi	r3,8192
10009d68:	10c0521e 	bne	r2,r3,10009eb4 <__smakebuf_r+0x1b0>
10009d6c:	8140038f 	ldh	r5,14(r16)
10009d70:	8809883a 	mov	r4,r17
10009d74:	000e0680 	call	1000e068 <_isatty_r>
10009d78:	10004c26 	beq	r2,zero,10009eac <__smakebuf_r+0x1a8>
10009d7c:	8080030b 	ldhu	r2,12(r16)
10009d80:	80c010c4 	addi	r3,r16,67
10009d84:	80c00015 	stw	r3,0(r16)
10009d88:	10800054 	ori	r2,r2,1
10009d8c:	8080030d 	sth	r2,12(r16)
10009d90:	00800044 	movi	r2,1
10009d94:	80c00415 	stw	r3,16(r16)
10009d98:	80800515 	stw	r2,20(r16)
10009d9c:	04810004 	movi	r18,1024
10009da0:	00000706 	br	10009dc0 <__smakebuf_r+0xbc>
10009da4:	8080030b 	ldhu	r2,12(r16)
10009da8:	10c0200c 	andi	r3,r2,128
10009dac:	18001f1e 	bne	r3,zero,10009e2c <__smakebuf_r+0x128>
10009db0:	04810004 	movi	r18,1024
10009db4:	10820014 	ori	r2,r2,2048
10009db8:	8080030d 	sth	r2,12(r16)
10009dbc:	0027883a 	mov	r19,zero
10009dc0:	900b883a 	mov	r5,r18
10009dc4:	8809883a 	mov	r4,r17
10009dc8:	0009ec00 	call	10009ec0 <_malloc_r>
10009dcc:	10002c26 	beq	r2,zero,10009e80 <__smakebuf_r+0x17c>
10009dd0:	80c0030b 	ldhu	r3,12(r16)
10009dd4:	01040074 	movhi	r4,4097
10009dd8:	21237f04 	addi	r4,r4,-29188
10009ddc:	89000f15 	stw	r4,60(r17)
10009de0:	18c02014 	ori	r3,r3,128
10009de4:	80c0030d 	sth	r3,12(r16)
10009de8:	80800015 	stw	r2,0(r16)
10009dec:	80800415 	stw	r2,16(r16)
10009df0:	84800515 	stw	r18,20(r16)
10009df4:	98001a1e 	bne	r19,zero,10009e60 <__smakebuf_r+0x15c>
10009df8:	dfc01317 	ldw	ra,76(sp)
10009dfc:	dcc01217 	ldw	r19,72(sp)
10009e00:	dc801117 	ldw	r18,68(sp)
10009e04:	dc401017 	ldw	r17,64(sp)
10009e08:	dc000f17 	ldw	r16,60(sp)
10009e0c:	dec01404 	addi	sp,sp,80
10009e10:	f800283a 	ret
10009e14:	288010c4 	addi	r2,r5,67
10009e18:	28800015 	stw	r2,0(r5)
10009e1c:	28800415 	stw	r2,16(r5)
10009e20:	00800044 	movi	r2,1
10009e24:	28800515 	stw	r2,20(r5)
10009e28:	f800283a 	ret
10009e2c:	04801004 	movi	r18,64
10009e30:	003fe006 	br	10009db4 <__alt_data_end+0xf8009db4>
10009e34:	81000a17 	ldw	r4,40(r16)
10009e38:	00c40074 	movhi	r3,4097
10009e3c:	18f0ce04 	addi	r3,r3,-15560
10009e40:	20ffc51e 	bne	r4,r3,10009d58 <__alt_data_end+0xf8009d58>
10009e44:	8080030b 	ldhu	r2,12(r16)
10009e48:	04810004 	movi	r18,1024
10009e4c:	84801315 	stw	r18,76(r16)
10009e50:	1484b03a 	or	r2,r2,r18
10009e54:	8080030d 	sth	r2,12(r16)
10009e58:	0027883a 	mov	r19,zero
10009e5c:	003fd806 	br	10009dc0 <__alt_data_end+0xf8009dc0>
10009e60:	8140038f 	ldh	r5,14(r16)
10009e64:	8809883a 	mov	r4,r17
10009e68:	000e0680 	call	1000e068 <_isatty_r>
10009e6c:	103fe226 	beq	r2,zero,10009df8 <__alt_data_end+0xf8009df8>
10009e70:	8080030b 	ldhu	r2,12(r16)
10009e74:	10800054 	ori	r2,r2,1
10009e78:	8080030d 	sth	r2,12(r16)
10009e7c:	003fde06 	br	10009df8 <__alt_data_end+0xf8009df8>
10009e80:	8080030b 	ldhu	r2,12(r16)
10009e84:	10c0800c 	andi	r3,r2,512
10009e88:	183fdb1e 	bne	r3,zero,10009df8 <__alt_data_end+0xf8009df8>
10009e8c:	10800094 	ori	r2,r2,2
10009e90:	80c010c4 	addi	r3,r16,67
10009e94:	8080030d 	sth	r2,12(r16)
10009e98:	00800044 	movi	r2,1
10009e9c:	80c00015 	stw	r3,0(r16)
10009ea0:	80c00415 	stw	r3,16(r16)
10009ea4:	80800515 	stw	r2,20(r16)
10009ea8:	003fd306 	br	10009df8 <__alt_data_end+0xf8009df8>
10009eac:	04810004 	movi	r18,1024
10009eb0:	003fc306 	br	10009dc0 <__alt_data_end+0xf8009dc0>
10009eb4:	0027883a 	mov	r19,zero
10009eb8:	04810004 	movi	r18,1024
10009ebc:	003fc006 	br	10009dc0 <__alt_data_end+0xf8009dc0>

10009ec0 <_malloc_r>:
10009ec0:	defff504 	addi	sp,sp,-44
10009ec4:	dc800315 	stw	r18,12(sp)
10009ec8:	dfc00a15 	stw	ra,40(sp)
10009ecc:	df000915 	stw	fp,36(sp)
10009ed0:	ddc00815 	stw	r23,32(sp)
10009ed4:	dd800715 	stw	r22,28(sp)
10009ed8:	dd400615 	stw	r21,24(sp)
10009edc:	dd000515 	stw	r20,20(sp)
10009ee0:	dcc00415 	stw	r19,16(sp)
10009ee4:	dc400215 	stw	r17,8(sp)
10009ee8:	dc000115 	stw	r16,4(sp)
10009eec:	288002c4 	addi	r2,r5,11
10009ef0:	00c00584 	movi	r3,22
10009ef4:	2025883a 	mov	r18,r4
10009ef8:	18807f2e 	bgeu	r3,r2,1000a0f8 <_malloc_r+0x238>
10009efc:	047ffe04 	movi	r17,-8
10009f00:	1462703a 	and	r17,r2,r17
10009f04:	8800a316 	blt	r17,zero,1000a194 <_malloc_r+0x2d4>
10009f08:	8940a236 	bltu	r17,r5,1000a194 <_malloc_r+0x2d4>
10009f0c:	0011ebc0 	call	10011ebc <__malloc_lock>
10009f10:	00807dc4 	movi	r2,503
10009f14:	1441e92e 	bgeu	r2,r17,1000a6bc <_malloc_r+0x7fc>
10009f18:	8804d27a 	srli	r2,r17,9
10009f1c:	1000a126 	beq	r2,zero,1000a1a4 <_malloc_r+0x2e4>
10009f20:	00c00104 	movi	r3,4
10009f24:	18811e36 	bltu	r3,r2,1000a3a0 <_malloc_r+0x4e0>
10009f28:	8804d1ba 	srli	r2,r17,6
10009f2c:	12000e44 	addi	r8,r2,57
10009f30:	11c00e04 	addi	r7,r2,56
10009f34:	4209883a 	add	r4,r8,r8
10009f38:	04c400b4 	movhi	r19,4098
10009f3c:	2109883a 	add	r4,r4,r4
10009f40:	9cee7504 	addi	r19,r19,-17964
10009f44:	2109883a 	add	r4,r4,r4
10009f48:	9909883a 	add	r4,r19,r4
10009f4c:	24000117 	ldw	r16,4(r4)
10009f50:	213ffe04 	addi	r4,r4,-8
10009f54:	24009726 	beq	r4,r16,1000a1b4 <_malloc_r+0x2f4>
10009f58:	80800117 	ldw	r2,4(r16)
10009f5c:	01bfff04 	movi	r6,-4
10009f60:	014003c4 	movi	r5,15
10009f64:	1184703a 	and	r2,r2,r6
10009f68:	1447c83a 	sub	r3,r2,r17
10009f6c:	28c00716 	blt	r5,r3,10009f8c <_malloc_r+0xcc>
10009f70:	1800920e 	bge	r3,zero,1000a1bc <_malloc_r+0x2fc>
10009f74:	84000317 	ldw	r16,12(r16)
10009f78:	24008e26 	beq	r4,r16,1000a1b4 <_malloc_r+0x2f4>
10009f7c:	80800117 	ldw	r2,4(r16)
10009f80:	1184703a 	and	r2,r2,r6
10009f84:	1447c83a 	sub	r3,r2,r17
10009f88:	28fff90e 	bge	r5,r3,10009f70 <__alt_data_end+0xf8009f70>
10009f8c:	3809883a 	mov	r4,r7
10009f90:	018400b4 	movhi	r6,4098
10009f94:	9c000417 	ldw	r16,16(r19)
10009f98:	31ae7504 	addi	r6,r6,-17964
10009f9c:	32000204 	addi	r8,r6,8
10009fa0:	82013426 	beq	r16,r8,1000a474 <_malloc_r+0x5b4>
10009fa4:	80c00117 	ldw	r3,4(r16)
10009fa8:	00bfff04 	movi	r2,-4
10009fac:	188e703a 	and	r7,r3,r2
10009fb0:	3c45c83a 	sub	r2,r7,r17
10009fb4:	00c003c4 	movi	r3,15
10009fb8:	18811f16 	blt	r3,r2,1000a438 <_malloc_r+0x578>
10009fbc:	32000515 	stw	r8,20(r6)
10009fc0:	32000415 	stw	r8,16(r6)
10009fc4:	10007f0e 	bge	r2,zero,1000a1c4 <_malloc_r+0x304>
10009fc8:	00807fc4 	movi	r2,511
10009fcc:	11c0fd36 	bltu	r2,r7,1000a3c4 <_malloc_r+0x504>
10009fd0:	3806d0fa 	srli	r3,r7,3
10009fd4:	01c00044 	movi	r7,1
10009fd8:	30800117 	ldw	r2,4(r6)
10009fdc:	19400044 	addi	r5,r3,1
10009fe0:	294b883a 	add	r5,r5,r5
10009fe4:	1807d0ba 	srai	r3,r3,2
10009fe8:	294b883a 	add	r5,r5,r5
10009fec:	294b883a 	add	r5,r5,r5
10009ff0:	298b883a 	add	r5,r5,r6
10009ff4:	38c6983a 	sll	r3,r7,r3
10009ff8:	29c00017 	ldw	r7,0(r5)
10009ffc:	2a7ffe04 	addi	r9,r5,-8
1000a000:	1886b03a 	or	r3,r3,r2
1000a004:	82400315 	stw	r9,12(r16)
1000a008:	81c00215 	stw	r7,8(r16)
1000a00c:	30c00115 	stw	r3,4(r6)
1000a010:	2c000015 	stw	r16,0(r5)
1000a014:	3c000315 	stw	r16,12(r7)
1000a018:	2005d0ba 	srai	r2,r4,2
1000a01c:	01400044 	movi	r5,1
1000a020:	288a983a 	sll	r5,r5,r2
1000a024:	19406f36 	bltu	r3,r5,1000a1e4 <_malloc_r+0x324>
1000a028:	28c4703a 	and	r2,r5,r3
1000a02c:	10000a1e 	bne	r2,zero,1000a058 <_malloc_r+0x198>
1000a030:	00bfff04 	movi	r2,-4
1000a034:	294b883a 	add	r5,r5,r5
1000a038:	2088703a 	and	r4,r4,r2
1000a03c:	28c4703a 	and	r2,r5,r3
1000a040:	21000104 	addi	r4,r4,4
1000a044:	1000041e 	bne	r2,zero,1000a058 <_malloc_r+0x198>
1000a048:	294b883a 	add	r5,r5,r5
1000a04c:	28c4703a 	and	r2,r5,r3
1000a050:	21000104 	addi	r4,r4,4
1000a054:	103ffc26 	beq	r2,zero,1000a048 <__alt_data_end+0xf800a048>
1000a058:	02bfff04 	movi	r10,-4
1000a05c:	024003c4 	movi	r9,15
1000a060:	21800044 	addi	r6,r4,1
1000a064:	318d883a 	add	r6,r6,r6
1000a068:	318d883a 	add	r6,r6,r6
1000a06c:	318d883a 	add	r6,r6,r6
1000a070:	998d883a 	add	r6,r19,r6
1000a074:	333ffe04 	addi	r12,r6,-8
1000a078:	2017883a 	mov	r11,r4
1000a07c:	31800104 	addi	r6,r6,4
1000a080:	34000017 	ldw	r16,0(r6)
1000a084:	31fffd04 	addi	r7,r6,-12
1000a088:	81c0041e 	bne	r16,r7,1000a09c <_malloc_r+0x1dc>
1000a08c:	0000fb06 	br	1000a47c <_malloc_r+0x5bc>
1000a090:	1801030e 	bge	r3,zero,1000a4a0 <_malloc_r+0x5e0>
1000a094:	84000317 	ldw	r16,12(r16)
1000a098:	81c0f826 	beq	r16,r7,1000a47c <_malloc_r+0x5bc>
1000a09c:	80800117 	ldw	r2,4(r16)
1000a0a0:	1284703a 	and	r2,r2,r10
1000a0a4:	1447c83a 	sub	r3,r2,r17
1000a0a8:	48fff90e 	bge	r9,r3,1000a090 <__alt_data_end+0xf800a090>
1000a0ac:	80800317 	ldw	r2,12(r16)
1000a0b0:	81000217 	ldw	r4,8(r16)
1000a0b4:	89400054 	ori	r5,r17,1
1000a0b8:	81400115 	stw	r5,4(r16)
1000a0bc:	20800315 	stw	r2,12(r4)
1000a0c0:	11000215 	stw	r4,8(r2)
1000a0c4:	8463883a 	add	r17,r16,r17
1000a0c8:	9c400515 	stw	r17,20(r19)
1000a0cc:	9c400415 	stw	r17,16(r19)
1000a0d0:	18800054 	ori	r2,r3,1
1000a0d4:	88800115 	stw	r2,4(r17)
1000a0d8:	8a000315 	stw	r8,12(r17)
1000a0dc:	8a000215 	stw	r8,8(r17)
1000a0e0:	88e3883a 	add	r17,r17,r3
1000a0e4:	88c00015 	stw	r3,0(r17)
1000a0e8:	9009883a 	mov	r4,r18
1000a0ec:	0011ee00 	call	10011ee0 <__malloc_unlock>
1000a0f0:	80800204 	addi	r2,r16,8
1000a0f4:	00001b06 	br	1000a164 <_malloc_r+0x2a4>
1000a0f8:	04400404 	movi	r17,16
1000a0fc:	89402536 	bltu	r17,r5,1000a194 <_malloc_r+0x2d4>
1000a100:	0011ebc0 	call	10011ebc <__malloc_lock>
1000a104:	00800184 	movi	r2,6
1000a108:	01000084 	movi	r4,2
1000a10c:	04c400b4 	movhi	r19,4098
1000a110:	1085883a 	add	r2,r2,r2
1000a114:	9cee7504 	addi	r19,r19,-17964
1000a118:	1085883a 	add	r2,r2,r2
1000a11c:	9885883a 	add	r2,r19,r2
1000a120:	14000117 	ldw	r16,4(r2)
1000a124:	10fffe04 	addi	r3,r2,-8
1000a128:	80c0d926 	beq	r16,r3,1000a490 <_malloc_r+0x5d0>
1000a12c:	80c00117 	ldw	r3,4(r16)
1000a130:	81000317 	ldw	r4,12(r16)
1000a134:	00bfff04 	movi	r2,-4
1000a138:	1884703a 	and	r2,r3,r2
1000a13c:	81400217 	ldw	r5,8(r16)
1000a140:	8085883a 	add	r2,r16,r2
1000a144:	10c00117 	ldw	r3,4(r2)
1000a148:	29000315 	stw	r4,12(r5)
1000a14c:	21400215 	stw	r5,8(r4)
1000a150:	18c00054 	ori	r3,r3,1
1000a154:	10c00115 	stw	r3,4(r2)
1000a158:	9009883a 	mov	r4,r18
1000a15c:	0011ee00 	call	10011ee0 <__malloc_unlock>
1000a160:	80800204 	addi	r2,r16,8
1000a164:	dfc00a17 	ldw	ra,40(sp)
1000a168:	df000917 	ldw	fp,36(sp)
1000a16c:	ddc00817 	ldw	r23,32(sp)
1000a170:	dd800717 	ldw	r22,28(sp)
1000a174:	dd400617 	ldw	r21,24(sp)
1000a178:	dd000517 	ldw	r20,20(sp)
1000a17c:	dcc00417 	ldw	r19,16(sp)
1000a180:	dc800317 	ldw	r18,12(sp)
1000a184:	dc400217 	ldw	r17,8(sp)
1000a188:	dc000117 	ldw	r16,4(sp)
1000a18c:	dec00b04 	addi	sp,sp,44
1000a190:	f800283a 	ret
1000a194:	00800304 	movi	r2,12
1000a198:	90800015 	stw	r2,0(r18)
1000a19c:	0005883a 	mov	r2,zero
1000a1a0:	003ff006 	br	1000a164 <__alt_data_end+0xf800a164>
1000a1a4:	01002004 	movi	r4,128
1000a1a8:	02001004 	movi	r8,64
1000a1ac:	01c00fc4 	movi	r7,63
1000a1b0:	003f6106 	br	10009f38 <__alt_data_end+0xf8009f38>
1000a1b4:	4009883a 	mov	r4,r8
1000a1b8:	003f7506 	br	10009f90 <__alt_data_end+0xf8009f90>
1000a1bc:	81000317 	ldw	r4,12(r16)
1000a1c0:	003fde06 	br	1000a13c <__alt_data_end+0xf800a13c>
1000a1c4:	81c5883a 	add	r2,r16,r7
1000a1c8:	11400117 	ldw	r5,4(r2)
1000a1cc:	9009883a 	mov	r4,r18
1000a1d0:	29400054 	ori	r5,r5,1
1000a1d4:	11400115 	stw	r5,4(r2)
1000a1d8:	0011ee00 	call	10011ee0 <__malloc_unlock>
1000a1dc:	80800204 	addi	r2,r16,8
1000a1e0:	003fe006 	br	1000a164 <__alt_data_end+0xf800a164>
1000a1e4:	9c000217 	ldw	r16,8(r19)
1000a1e8:	00bfff04 	movi	r2,-4
1000a1ec:	85800117 	ldw	r22,4(r16)
1000a1f0:	b0ac703a 	and	r22,r22,r2
1000a1f4:	b4400336 	bltu	r22,r17,1000a204 <_malloc_r+0x344>
1000a1f8:	b445c83a 	sub	r2,r22,r17
1000a1fc:	00c003c4 	movi	r3,15
1000a200:	18805d16 	blt	r3,r2,1000a378 <_malloc_r+0x4b8>
1000a204:	05c400b4 	movhi	r23,4098
1000a208:	008400b4 	movhi	r2,4098
1000a20c:	1094fd04 	addi	r2,r2,21492
1000a210:	bdf3fc04 	addi	r23,r23,-12304
1000a214:	15400017 	ldw	r21,0(r2)
1000a218:	b8c00017 	ldw	r3,0(r23)
1000a21c:	00bfffc4 	movi	r2,-1
1000a220:	858d883a 	add	r6,r16,r22
1000a224:	8d6b883a 	add	r21,r17,r21
1000a228:	1880ea26 	beq	r3,r2,1000a5d4 <_malloc_r+0x714>
1000a22c:	ad4403c4 	addi	r21,r21,4111
1000a230:	00bc0004 	movi	r2,-4096
1000a234:	a8aa703a 	and	r21,r21,r2
1000a238:	a80b883a 	mov	r5,r21
1000a23c:	9009883a 	mov	r4,r18
1000a240:	d9800015 	stw	r6,0(sp)
1000a244:	000c20c0 	call	1000c20c <_sbrk_r>
1000a248:	1029883a 	mov	r20,r2
1000a24c:	00bfffc4 	movi	r2,-1
1000a250:	d9800017 	ldw	r6,0(sp)
1000a254:	a080e826 	beq	r20,r2,1000a5f8 <_malloc_r+0x738>
1000a258:	a180a636 	bltu	r20,r6,1000a4f4 <_malloc_r+0x634>
1000a25c:	070400b4 	movhi	fp,4098
1000a260:	e7150604 	addi	fp,fp,21528
1000a264:	e0800017 	ldw	r2,0(fp)
1000a268:	a887883a 	add	r3,r21,r2
1000a26c:	e0c00015 	stw	r3,0(fp)
1000a270:	3500e626 	beq	r6,r20,1000a60c <_malloc_r+0x74c>
1000a274:	b9000017 	ldw	r4,0(r23)
1000a278:	00bfffc4 	movi	r2,-1
1000a27c:	2080ee26 	beq	r4,r2,1000a638 <_malloc_r+0x778>
1000a280:	a185c83a 	sub	r2,r20,r6
1000a284:	10c5883a 	add	r2,r2,r3
1000a288:	e0800015 	stw	r2,0(fp)
1000a28c:	a0c001cc 	andi	r3,r20,7
1000a290:	1800bc26 	beq	r3,zero,1000a584 <_malloc_r+0x6c4>
1000a294:	a0e9c83a 	sub	r20,r20,r3
1000a298:	00840204 	movi	r2,4104
1000a29c:	a5000204 	addi	r20,r20,8
1000a2a0:	10c7c83a 	sub	r3,r2,r3
1000a2a4:	a545883a 	add	r2,r20,r21
1000a2a8:	1083ffcc 	andi	r2,r2,4095
1000a2ac:	18abc83a 	sub	r21,r3,r2
1000a2b0:	a80b883a 	mov	r5,r21
1000a2b4:	9009883a 	mov	r4,r18
1000a2b8:	000c20c0 	call	1000c20c <_sbrk_r>
1000a2bc:	00ffffc4 	movi	r3,-1
1000a2c0:	10c0e126 	beq	r2,r3,1000a648 <_malloc_r+0x788>
1000a2c4:	1505c83a 	sub	r2,r2,r20
1000a2c8:	1545883a 	add	r2,r2,r21
1000a2cc:	10800054 	ori	r2,r2,1
1000a2d0:	e0c00017 	ldw	r3,0(fp)
1000a2d4:	9d000215 	stw	r20,8(r19)
1000a2d8:	a0800115 	stw	r2,4(r20)
1000a2dc:	a8c7883a 	add	r3,r21,r3
1000a2e0:	e0c00015 	stw	r3,0(fp)
1000a2e4:	84c00e26 	beq	r16,r19,1000a320 <_malloc_r+0x460>
1000a2e8:	018003c4 	movi	r6,15
1000a2ec:	3580a72e 	bgeu	r6,r22,1000a58c <_malloc_r+0x6cc>
1000a2f0:	81400117 	ldw	r5,4(r16)
1000a2f4:	013ffe04 	movi	r4,-8
1000a2f8:	b0bffd04 	addi	r2,r22,-12
1000a2fc:	1104703a 	and	r2,r2,r4
1000a300:	2900004c 	andi	r4,r5,1
1000a304:	2088b03a 	or	r4,r4,r2
1000a308:	81000115 	stw	r4,4(r16)
1000a30c:	01400144 	movi	r5,5
1000a310:	8089883a 	add	r4,r16,r2
1000a314:	21400115 	stw	r5,4(r4)
1000a318:	21400215 	stw	r5,8(r4)
1000a31c:	3080cd36 	bltu	r6,r2,1000a654 <_malloc_r+0x794>
1000a320:	008400b4 	movhi	r2,4098
1000a324:	1094fc04 	addi	r2,r2,21488
1000a328:	11000017 	ldw	r4,0(r2)
1000a32c:	20c0012e 	bgeu	r4,r3,1000a334 <_malloc_r+0x474>
1000a330:	10c00015 	stw	r3,0(r2)
1000a334:	008400b4 	movhi	r2,4098
1000a338:	1094fb04 	addi	r2,r2,21484
1000a33c:	11000017 	ldw	r4,0(r2)
1000a340:	9c000217 	ldw	r16,8(r19)
1000a344:	20c0012e 	bgeu	r4,r3,1000a34c <_malloc_r+0x48c>
1000a348:	10c00015 	stw	r3,0(r2)
1000a34c:	80c00117 	ldw	r3,4(r16)
1000a350:	00bfff04 	movi	r2,-4
1000a354:	1886703a 	and	r3,r3,r2
1000a358:	1c45c83a 	sub	r2,r3,r17
1000a35c:	1c400236 	bltu	r3,r17,1000a368 <_malloc_r+0x4a8>
1000a360:	00c003c4 	movi	r3,15
1000a364:	18800416 	blt	r3,r2,1000a378 <_malloc_r+0x4b8>
1000a368:	9009883a 	mov	r4,r18
1000a36c:	0011ee00 	call	10011ee0 <__malloc_unlock>
1000a370:	0005883a 	mov	r2,zero
1000a374:	003f7b06 	br	1000a164 <__alt_data_end+0xf800a164>
1000a378:	88c00054 	ori	r3,r17,1
1000a37c:	80c00115 	stw	r3,4(r16)
1000a380:	8463883a 	add	r17,r16,r17
1000a384:	10800054 	ori	r2,r2,1
1000a388:	9c400215 	stw	r17,8(r19)
1000a38c:	88800115 	stw	r2,4(r17)
1000a390:	9009883a 	mov	r4,r18
1000a394:	0011ee00 	call	10011ee0 <__malloc_unlock>
1000a398:	80800204 	addi	r2,r16,8
1000a39c:	003f7106 	br	1000a164 <__alt_data_end+0xf800a164>
1000a3a0:	00c00504 	movi	r3,20
1000a3a4:	18804a2e 	bgeu	r3,r2,1000a4d0 <_malloc_r+0x610>
1000a3a8:	00c01504 	movi	r3,84
1000a3ac:	18806e36 	bltu	r3,r2,1000a568 <_malloc_r+0x6a8>
1000a3b0:	8804d33a 	srli	r2,r17,12
1000a3b4:	12001bc4 	addi	r8,r2,111
1000a3b8:	11c01b84 	addi	r7,r2,110
1000a3bc:	4209883a 	add	r4,r8,r8
1000a3c0:	003edd06 	br	10009f38 <__alt_data_end+0xf8009f38>
1000a3c4:	3804d27a 	srli	r2,r7,9
1000a3c8:	00c00104 	movi	r3,4
1000a3cc:	1880442e 	bgeu	r3,r2,1000a4e0 <_malloc_r+0x620>
1000a3d0:	00c00504 	movi	r3,20
1000a3d4:	18808136 	bltu	r3,r2,1000a5dc <_malloc_r+0x71c>
1000a3d8:	11401704 	addi	r5,r2,92
1000a3dc:	10c016c4 	addi	r3,r2,91
1000a3e0:	294b883a 	add	r5,r5,r5
1000a3e4:	294b883a 	add	r5,r5,r5
1000a3e8:	294b883a 	add	r5,r5,r5
1000a3ec:	994b883a 	add	r5,r19,r5
1000a3f0:	28800017 	ldw	r2,0(r5)
1000a3f4:	018400b4 	movhi	r6,4098
1000a3f8:	297ffe04 	addi	r5,r5,-8
1000a3fc:	31ae7504 	addi	r6,r6,-17964
1000a400:	28806526 	beq	r5,r2,1000a598 <_malloc_r+0x6d8>
1000a404:	01bfff04 	movi	r6,-4
1000a408:	10c00117 	ldw	r3,4(r2)
1000a40c:	1986703a 	and	r3,r3,r6
1000a410:	38c0022e 	bgeu	r7,r3,1000a41c <_malloc_r+0x55c>
1000a414:	10800217 	ldw	r2,8(r2)
1000a418:	28bffb1e 	bne	r5,r2,1000a408 <__alt_data_end+0xf800a408>
1000a41c:	11400317 	ldw	r5,12(r2)
1000a420:	98c00117 	ldw	r3,4(r19)
1000a424:	81400315 	stw	r5,12(r16)
1000a428:	80800215 	stw	r2,8(r16)
1000a42c:	2c000215 	stw	r16,8(r5)
1000a430:	14000315 	stw	r16,12(r2)
1000a434:	003ef806 	br	1000a018 <__alt_data_end+0xf800a018>
1000a438:	88c00054 	ori	r3,r17,1
1000a43c:	80c00115 	stw	r3,4(r16)
1000a440:	8463883a 	add	r17,r16,r17
1000a444:	34400515 	stw	r17,20(r6)
1000a448:	34400415 	stw	r17,16(r6)
1000a44c:	10c00054 	ori	r3,r2,1
1000a450:	8a000315 	stw	r8,12(r17)
1000a454:	8a000215 	stw	r8,8(r17)
1000a458:	88c00115 	stw	r3,4(r17)
1000a45c:	88a3883a 	add	r17,r17,r2
1000a460:	88800015 	stw	r2,0(r17)
1000a464:	9009883a 	mov	r4,r18
1000a468:	0011ee00 	call	10011ee0 <__malloc_unlock>
1000a46c:	80800204 	addi	r2,r16,8
1000a470:	003f3c06 	br	1000a164 <__alt_data_end+0xf800a164>
1000a474:	30c00117 	ldw	r3,4(r6)
1000a478:	003ee706 	br	1000a018 <__alt_data_end+0xf800a018>
1000a47c:	5ac00044 	addi	r11,r11,1
1000a480:	588000cc 	andi	r2,r11,3
1000a484:	31800204 	addi	r6,r6,8
1000a488:	103efd1e 	bne	r2,zero,1000a080 <__alt_data_end+0xf800a080>
1000a48c:	00002406 	br	1000a520 <_malloc_r+0x660>
1000a490:	14000317 	ldw	r16,12(r2)
1000a494:	143f251e 	bne	r2,r16,1000a12c <__alt_data_end+0xf800a12c>
1000a498:	21000084 	addi	r4,r4,2
1000a49c:	003ebc06 	br	10009f90 <__alt_data_end+0xf8009f90>
1000a4a0:	8085883a 	add	r2,r16,r2
1000a4a4:	10c00117 	ldw	r3,4(r2)
1000a4a8:	81000317 	ldw	r4,12(r16)
1000a4ac:	81400217 	ldw	r5,8(r16)
1000a4b0:	18c00054 	ori	r3,r3,1
1000a4b4:	10c00115 	stw	r3,4(r2)
1000a4b8:	29000315 	stw	r4,12(r5)
1000a4bc:	21400215 	stw	r5,8(r4)
1000a4c0:	9009883a 	mov	r4,r18
1000a4c4:	0011ee00 	call	10011ee0 <__malloc_unlock>
1000a4c8:	80800204 	addi	r2,r16,8
1000a4cc:	003f2506 	br	1000a164 <__alt_data_end+0xf800a164>
1000a4d0:	12001704 	addi	r8,r2,92
1000a4d4:	11c016c4 	addi	r7,r2,91
1000a4d8:	4209883a 	add	r4,r8,r8
1000a4dc:	003e9606 	br	10009f38 <__alt_data_end+0xf8009f38>
1000a4e0:	3804d1ba 	srli	r2,r7,6
1000a4e4:	11400e44 	addi	r5,r2,57
1000a4e8:	10c00e04 	addi	r3,r2,56
1000a4ec:	294b883a 	add	r5,r5,r5
1000a4f0:	003fbc06 	br	1000a3e4 <__alt_data_end+0xf800a3e4>
1000a4f4:	84ff5926 	beq	r16,r19,1000a25c <__alt_data_end+0xf800a25c>
1000a4f8:	008400b4 	movhi	r2,4098
1000a4fc:	10ae7504 	addi	r2,r2,-17964
1000a500:	14000217 	ldw	r16,8(r2)
1000a504:	00bfff04 	movi	r2,-4
1000a508:	80c00117 	ldw	r3,4(r16)
1000a50c:	1886703a 	and	r3,r3,r2
1000a510:	003f9106 	br	1000a358 <__alt_data_end+0xf800a358>
1000a514:	60800217 	ldw	r2,8(r12)
1000a518:	213fffc4 	addi	r4,r4,-1
1000a51c:	1300651e 	bne	r2,r12,1000a6b4 <_malloc_r+0x7f4>
1000a520:	208000cc 	andi	r2,r4,3
1000a524:	633ffe04 	addi	r12,r12,-8
1000a528:	103ffa1e 	bne	r2,zero,1000a514 <__alt_data_end+0xf800a514>
1000a52c:	98800117 	ldw	r2,4(r19)
1000a530:	0146303a 	nor	r3,zero,r5
1000a534:	1884703a 	and	r2,r3,r2
1000a538:	98800115 	stw	r2,4(r19)
1000a53c:	294b883a 	add	r5,r5,r5
1000a540:	117f2836 	bltu	r2,r5,1000a1e4 <__alt_data_end+0xf800a1e4>
1000a544:	283f2726 	beq	r5,zero,1000a1e4 <__alt_data_end+0xf800a1e4>
1000a548:	2886703a 	and	r3,r5,r2
1000a54c:	5809883a 	mov	r4,r11
1000a550:	183ec31e 	bne	r3,zero,1000a060 <__alt_data_end+0xf800a060>
1000a554:	294b883a 	add	r5,r5,r5
1000a558:	2886703a 	and	r3,r5,r2
1000a55c:	21000104 	addi	r4,r4,4
1000a560:	183ffc26 	beq	r3,zero,1000a554 <__alt_data_end+0xf800a554>
1000a564:	003ebe06 	br	1000a060 <__alt_data_end+0xf800a060>
1000a568:	00c05504 	movi	r3,340
1000a56c:	18801236 	bltu	r3,r2,1000a5b8 <_malloc_r+0x6f8>
1000a570:	8804d3fa 	srli	r2,r17,15
1000a574:	12001e04 	addi	r8,r2,120
1000a578:	11c01dc4 	addi	r7,r2,119
1000a57c:	4209883a 	add	r4,r8,r8
1000a580:	003e6d06 	br	10009f38 <__alt_data_end+0xf8009f38>
1000a584:	00c40004 	movi	r3,4096
1000a588:	003f4606 	br	1000a2a4 <__alt_data_end+0xf800a2a4>
1000a58c:	00800044 	movi	r2,1
1000a590:	a0800115 	stw	r2,4(r20)
1000a594:	003f7406 	br	1000a368 <__alt_data_end+0xf800a368>
1000a598:	1805d0ba 	srai	r2,r3,2
1000a59c:	01c00044 	movi	r7,1
1000a5a0:	30c00117 	ldw	r3,4(r6)
1000a5a4:	388e983a 	sll	r7,r7,r2
1000a5a8:	2805883a 	mov	r2,r5
1000a5ac:	38c6b03a 	or	r3,r7,r3
1000a5b0:	30c00115 	stw	r3,4(r6)
1000a5b4:	003f9b06 	br	1000a424 <__alt_data_end+0xf800a424>
1000a5b8:	00c15504 	movi	r3,1364
1000a5bc:	18801a36 	bltu	r3,r2,1000a628 <_malloc_r+0x768>
1000a5c0:	8804d4ba 	srli	r2,r17,18
1000a5c4:	12001f44 	addi	r8,r2,125
1000a5c8:	11c01f04 	addi	r7,r2,124
1000a5cc:	4209883a 	add	r4,r8,r8
1000a5d0:	003e5906 	br	10009f38 <__alt_data_end+0xf8009f38>
1000a5d4:	ad400404 	addi	r21,r21,16
1000a5d8:	003f1706 	br	1000a238 <__alt_data_end+0xf800a238>
1000a5dc:	00c01504 	movi	r3,84
1000a5e0:	18802336 	bltu	r3,r2,1000a670 <_malloc_r+0x7b0>
1000a5e4:	3804d33a 	srli	r2,r7,12
1000a5e8:	11401bc4 	addi	r5,r2,111
1000a5ec:	10c01b84 	addi	r3,r2,110
1000a5f0:	294b883a 	add	r5,r5,r5
1000a5f4:	003f7b06 	br	1000a3e4 <__alt_data_end+0xf800a3e4>
1000a5f8:	9c000217 	ldw	r16,8(r19)
1000a5fc:	00bfff04 	movi	r2,-4
1000a600:	80c00117 	ldw	r3,4(r16)
1000a604:	1886703a 	and	r3,r3,r2
1000a608:	003f5306 	br	1000a358 <__alt_data_end+0xf800a358>
1000a60c:	3083ffcc 	andi	r2,r6,4095
1000a610:	103f181e 	bne	r2,zero,1000a274 <__alt_data_end+0xf800a274>
1000a614:	99000217 	ldw	r4,8(r19)
1000a618:	b545883a 	add	r2,r22,r21
1000a61c:	10800054 	ori	r2,r2,1
1000a620:	20800115 	stw	r2,4(r4)
1000a624:	003f3e06 	br	1000a320 <__alt_data_end+0xf800a320>
1000a628:	01003f84 	movi	r4,254
1000a62c:	02001fc4 	movi	r8,127
1000a630:	01c01f84 	movi	r7,126
1000a634:	003e4006 	br	10009f38 <__alt_data_end+0xf8009f38>
1000a638:	008400b4 	movhi	r2,4098
1000a63c:	10b3fc04 	addi	r2,r2,-12304
1000a640:	15000015 	stw	r20,0(r2)
1000a644:	003f1106 	br	1000a28c <__alt_data_end+0xf800a28c>
1000a648:	00800044 	movi	r2,1
1000a64c:	002b883a 	mov	r21,zero
1000a650:	003f1f06 	br	1000a2d0 <__alt_data_end+0xf800a2d0>
1000a654:	81400204 	addi	r5,r16,8
1000a658:	9009883a 	mov	r4,r18
1000a65c:	00092c80 	call	100092c8 <_free_r>
1000a660:	008400b4 	movhi	r2,4098
1000a664:	10950604 	addi	r2,r2,21528
1000a668:	10c00017 	ldw	r3,0(r2)
1000a66c:	003f2c06 	br	1000a320 <__alt_data_end+0xf800a320>
1000a670:	00c05504 	movi	r3,340
1000a674:	18800536 	bltu	r3,r2,1000a68c <_malloc_r+0x7cc>
1000a678:	3804d3fa 	srli	r2,r7,15
1000a67c:	11401e04 	addi	r5,r2,120
1000a680:	10c01dc4 	addi	r3,r2,119
1000a684:	294b883a 	add	r5,r5,r5
1000a688:	003f5606 	br	1000a3e4 <__alt_data_end+0xf800a3e4>
1000a68c:	00c15504 	movi	r3,1364
1000a690:	18800536 	bltu	r3,r2,1000a6a8 <_malloc_r+0x7e8>
1000a694:	3804d4ba 	srli	r2,r7,18
1000a698:	11401f44 	addi	r5,r2,125
1000a69c:	10c01f04 	addi	r3,r2,124
1000a6a0:	294b883a 	add	r5,r5,r5
1000a6a4:	003f4f06 	br	1000a3e4 <__alt_data_end+0xf800a3e4>
1000a6a8:	01403f84 	movi	r5,254
1000a6ac:	00c01f84 	movi	r3,126
1000a6b0:	003f4c06 	br	1000a3e4 <__alt_data_end+0xf800a3e4>
1000a6b4:	98800117 	ldw	r2,4(r19)
1000a6b8:	003fa006 	br	1000a53c <__alt_data_end+0xf800a53c>
1000a6bc:	8808d0fa 	srli	r4,r17,3
1000a6c0:	20800044 	addi	r2,r4,1
1000a6c4:	1085883a 	add	r2,r2,r2
1000a6c8:	003e9006 	br	1000a10c <__alt_data_end+0xf800a10c>

1000a6cc <memchr>:
1000a6cc:	208000cc 	andi	r2,r4,3
1000a6d0:	280f883a 	mov	r7,r5
1000a6d4:	10003426 	beq	r2,zero,1000a7a8 <memchr+0xdc>
1000a6d8:	30bfffc4 	addi	r2,r6,-1
1000a6dc:	30001a26 	beq	r6,zero,1000a748 <memchr+0x7c>
1000a6e0:	20c00003 	ldbu	r3,0(r4)
1000a6e4:	29803fcc 	andi	r6,r5,255
1000a6e8:	30c0051e 	bne	r6,r3,1000a700 <memchr+0x34>
1000a6ec:	00001806 	br	1000a750 <memchr+0x84>
1000a6f0:	10001526 	beq	r2,zero,1000a748 <memchr+0x7c>
1000a6f4:	20c00003 	ldbu	r3,0(r4)
1000a6f8:	10bfffc4 	addi	r2,r2,-1
1000a6fc:	30c01426 	beq	r6,r3,1000a750 <memchr+0x84>
1000a700:	21000044 	addi	r4,r4,1
1000a704:	20c000cc 	andi	r3,r4,3
1000a708:	183ff91e 	bne	r3,zero,1000a6f0 <__alt_data_end+0xf800a6f0>
1000a70c:	020000c4 	movi	r8,3
1000a710:	40801136 	bltu	r8,r2,1000a758 <memchr+0x8c>
1000a714:	10000c26 	beq	r2,zero,1000a748 <memchr+0x7c>
1000a718:	20c00003 	ldbu	r3,0(r4)
1000a71c:	29403fcc 	andi	r5,r5,255
1000a720:	28c00b26 	beq	r5,r3,1000a750 <memchr+0x84>
1000a724:	20c00044 	addi	r3,r4,1
1000a728:	39803fcc 	andi	r6,r7,255
1000a72c:	2089883a 	add	r4,r4,r2
1000a730:	00000306 	br	1000a740 <memchr+0x74>
1000a734:	18c00044 	addi	r3,r3,1
1000a738:	197fffc3 	ldbu	r5,-1(r3)
1000a73c:	31400526 	beq	r6,r5,1000a754 <memchr+0x88>
1000a740:	1805883a 	mov	r2,r3
1000a744:	20fffb1e 	bne	r4,r3,1000a734 <__alt_data_end+0xf800a734>
1000a748:	0005883a 	mov	r2,zero
1000a74c:	f800283a 	ret
1000a750:	2005883a 	mov	r2,r4
1000a754:	f800283a 	ret
1000a758:	28c03fcc 	andi	r3,r5,255
1000a75c:	1812923a 	slli	r9,r3,8
1000a760:	02ffbff4 	movhi	r11,65279
1000a764:	02a02074 	movhi	r10,32897
1000a768:	48d2b03a 	or	r9,r9,r3
1000a76c:	4806943a 	slli	r3,r9,16
1000a770:	5affbfc4 	addi	r11,r11,-257
1000a774:	52a02004 	addi	r10,r10,-32640
1000a778:	48d2b03a 	or	r9,r9,r3
1000a77c:	20c00017 	ldw	r3,0(r4)
1000a780:	48c6f03a 	xor	r3,r9,r3
1000a784:	1acd883a 	add	r6,r3,r11
1000a788:	00c6303a 	nor	r3,zero,r3
1000a78c:	30c6703a 	and	r3,r6,r3
1000a790:	1a86703a 	and	r3,r3,r10
1000a794:	183fe01e 	bne	r3,zero,1000a718 <__alt_data_end+0xf800a718>
1000a798:	10bfff04 	addi	r2,r2,-4
1000a79c:	21000104 	addi	r4,r4,4
1000a7a0:	40bff636 	bltu	r8,r2,1000a77c <__alt_data_end+0xf800a77c>
1000a7a4:	003fdb06 	br	1000a714 <__alt_data_end+0xf800a714>
1000a7a8:	3005883a 	mov	r2,r6
1000a7ac:	003fd706 	br	1000a70c <__alt_data_end+0xf800a70c>

1000a7b0 <memcpy>:
1000a7b0:	defffd04 	addi	sp,sp,-12
1000a7b4:	dfc00215 	stw	ra,8(sp)
1000a7b8:	dc400115 	stw	r17,4(sp)
1000a7bc:	dc000015 	stw	r16,0(sp)
1000a7c0:	00c003c4 	movi	r3,15
1000a7c4:	2005883a 	mov	r2,r4
1000a7c8:	1980452e 	bgeu	r3,r6,1000a8e0 <memcpy+0x130>
1000a7cc:	2906b03a 	or	r3,r5,r4
1000a7d0:	18c000cc 	andi	r3,r3,3
1000a7d4:	1800441e 	bne	r3,zero,1000a8e8 <memcpy+0x138>
1000a7d8:	347ffc04 	addi	r17,r6,-16
1000a7dc:	8822d13a 	srli	r17,r17,4
1000a7e0:	28c00104 	addi	r3,r5,4
1000a7e4:	23400104 	addi	r13,r4,4
1000a7e8:	8820913a 	slli	r16,r17,4
1000a7ec:	2b000204 	addi	r12,r5,8
1000a7f0:	22c00204 	addi	r11,r4,8
1000a7f4:	84000504 	addi	r16,r16,20
1000a7f8:	2a800304 	addi	r10,r5,12
1000a7fc:	22400304 	addi	r9,r4,12
1000a800:	2c21883a 	add	r16,r5,r16
1000a804:	2811883a 	mov	r8,r5
1000a808:	200f883a 	mov	r7,r4
1000a80c:	41000017 	ldw	r4,0(r8)
1000a810:	1fc00017 	ldw	ra,0(r3)
1000a814:	63c00017 	ldw	r15,0(r12)
1000a818:	39000015 	stw	r4,0(r7)
1000a81c:	53800017 	ldw	r14,0(r10)
1000a820:	6fc00015 	stw	ra,0(r13)
1000a824:	5bc00015 	stw	r15,0(r11)
1000a828:	4b800015 	stw	r14,0(r9)
1000a82c:	18c00404 	addi	r3,r3,16
1000a830:	39c00404 	addi	r7,r7,16
1000a834:	42000404 	addi	r8,r8,16
1000a838:	6b400404 	addi	r13,r13,16
1000a83c:	63000404 	addi	r12,r12,16
1000a840:	5ac00404 	addi	r11,r11,16
1000a844:	52800404 	addi	r10,r10,16
1000a848:	4a400404 	addi	r9,r9,16
1000a84c:	1c3fef1e 	bne	r3,r16,1000a80c <__alt_data_end+0xf800a80c>
1000a850:	89c00044 	addi	r7,r17,1
1000a854:	380e913a 	slli	r7,r7,4
1000a858:	310003cc 	andi	r4,r6,15
1000a85c:	02c000c4 	movi	r11,3
1000a860:	11c7883a 	add	r3,r2,r7
1000a864:	29cb883a 	add	r5,r5,r7
1000a868:	5900212e 	bgeu	r11,r4,1000a8f0 <memcpy+0x140>
1000a86c:	1813883a 	mov	r9,r3
1000a870:	2811883a 	mov	r8,r5
1000a874:	200f883a 	mov	r7,r4
1000a878:	42800017 	ldw	r10,0(r8)
1000a87c:	4a400104 	addi	r9,r9,4
1000a880:	39ffff04 	addi	r7,r7,-4
1000a884:	4abfff15 	stw	r10,-4(r9)
1000a888:	42000104 	addi	r8,r8,4
1000a88c:	59fffa36 	bltu	r11,r7,1000a878 <__alt_data_end+0xf800a878>
1000a890:	213fff04 	addi	r4,r4,-4
1000a894:	2008d0ba 	srli	r4,r4,2
1000a898:	318000cc 	andi	r6,r6,3
1000a89c:	21000044 	addi	r4,r4,1
1000a8a0:	2109883a 	add	r4,r4,r4
1000a8a4:	2109883a 	add	r4,r4,r4
1000a8a8:	1907883a 	add	r3,r3,r4
1000a8ac:	290b883a 	add	r5,r5,r4
1000a8b0:	30000626 	beq	r6,zero,1000a8cc <memcpy+0x11c>
1000a8b4:	198d883a 	add	r6,r3,r6
1000a8b8:	29c00003 	ldbu	r7,0(r5)
1000a8bc:	18c00044 	addi	r3,r3,1
1000a8c0:	29400044 	addi	r5,r5,1
1000a8c4:	19ffffc5 	stb	r7,-1(r3)
1000a8c8:	19bffb1e 	bne	r3,r6,1000a8b8 <__alt_data_end+0xf800a8b8>
1000a8cc:	dfc00217 	ldw	ra,8(sp)
1000a8d0:	dc400117 	ldw	r17,4(sp)
1000a8d4:	dc000017 	ldw	r16,0(sp)
1000a8d8:	dec00304 	addi	sp,sp,12
1000a8dc:	f800283a 	ret
1000a8e0:	2007883a 	mov	r3,r4
1000a8e4:	003ff206 	br	1000a8b0 <__alt_data_end+0xf800a8b0>
1000a8e8:	2007883a 	mov	r3,r4
1000a8ec:	003ff106 	br	1000a8b4 <__alt_data_end+0xf800a8b4>
1000a8f0:	200d883a 	mov	r6,r4
1000a8f4:	003fee06 	br	1000a8b0 <__alt_data_end+0xf800a8b0>

1000a8f8 <memmove>:
1000a8f8:	2005883a 	mov	r2,r4
1000a8fc:	29000b2e 	bgeu	r5,r4,1000a92c <memmove+0x34>
1000a900:	298f883a 	add	r7,r5,r6
1000a904:	21c0092e 	bgeu	r4,r7,1000a92c <memmove+0x34>
1000a908:	2187883a 	add	r3,r4,r6
1000a90c:	198bc83a 	sub	r5,r3,r6
1000a910:	30004826 	beq	r6,zero,1000aa34 <memmove+0x13c>
1000a914:	39ffffc4 	addi	r7,r7,-1
1000a918:	39000003 	ldbu	r4,0(r7)
1000a91c:	18ffffc4 	addi	r3,r3,-1
1000a920:	19000005 	stb	r4,0(r3)
1000a924:	28fffb1e 	bne	r5,r3,1000a914 <__alt_data_end+0xf800a914>
1000a928:	f800283a 	ret
1000a92c:	00c003c4 	movi	r3,15
1000a930:	1980412e 	bgeu	r3,r6,1000aa38 <memmove+0x140>
1000a934:	2886b03a 	or	r3,r5,r2
1000a938:	18c000cc 	andi	r3,r3,3
1000a93c:	1800401e 	bne	r3,zero,1000aa40 <memmove+0x148>
1000a940:	33fffc04 	addi	r15,r6,-16
1000a944:	781ed13a 	srli	r15,r15,4
1000a948:	28c00104 	addi	r3,r5,4
1000a94c:	13400104 	addi	r13,r2,4
1000a950:	781c913a 	slli	r14,r15,4
1000a954:	2b000204 	addi	r12,r5,8
1000a958:	12c00204 	addi	r11,r2,8
1000a95c:	73800504 	addi	r14,r14,20
1000a960:	2a800304 	addi	r10,r5,12
1000a964:	12400304 	addi	r9,r2,12
1000a968:	2b9d883a 	add	r14,r5,r14
1000a96c:	2811883a 	mov	r8,r5
1000a970:	100f883a 	mov	r7,r2
1000a974:	41000017 	ldw	r4,0(r8)
1000a978:	39c00404 	addi	r7,r7,16
1000a97c:	18c00404 	addi	r3,r3,16
1000a980:	393ffc15 	stw	r4,-16(r7)
1000a984:	193ffc17 	ldw	r4,-16(r3)
1000a988:	6b400404 	addi	r13,r13,16
1000a98c:	5ac00404 	addi	r11,r11,16
1000a990:	693ffc15 	stw	r4,-16(r13)
1000a994:	61000017 	ldw	r4,0(r12)
1000a998:	4a400404 	addi	r9,r9,16
1000a99c:	42000404 	addi	r8,r8,16
1000a9a0:	593ffc15 	stw	r4,-16(r11)
1000a9a4:	51000017 	ldw	r4,0(r10)
1000a9a8:	63000404 	addi	r12,r12,16
1000a9ac:	52800404 	addi	r10,r10,16
1000a9b0:	493ffc15 	stw	r4,-16(r9)
1000a9b4:	1bbfef1e 	bne	r3,r14,1000a974 <__alt_data_end+0xf800a974>
1000a9b8:	79000044 	addi	r4,r15,1
1000a9bc:	2008913a 	slli	r4,r4,4
1000a9c0:	328003cc 	andi	r10,r6,15
1000a9c4:	02c000c4 	movi	r11,3
1000a9c8:	1107883a 	add	r3,r2,r4
1000a9cc:	290b883a 	add	r5,r5,r4
1000a9d0:	5a801e2e 	bgeu	r11,r10,1000aa4c <memmove+0x154>
1000a9d4:	1813883a 	mov	r9,r3
1000a9d8:	2811883a 	mov	r8,r5
1000a9dc:	500f883a 	mov	r7,r10
1000a9e0:	41000017 	ldw	r4,0(r8)
1000a9e4:	4a400104 	addi	r9,r9,4
1000a9e8:	39ffff04 	addi	r7,r7,-4
1000a9ec:	493fff15 	stw	r4,-4(r9)
1000a9f0:	42000104 	addi	r8,r8,4
1000a9f4:	59fffa36 	bltu	r11,r7,1000a9e0 <__alt_data_end+0xf800a9e0>
1000a9f8:	513fff04 	addi	r4,r10,-4
1000a9fc:	2008d0ba 	srli	r4,r4,2
1000aa00:	318000cc 	andi	r6,r6,3
1000aa04:	21000044 	addi	r4,r4,1
1000aa08:	2109883a 	add	r4,r4,r4
1000aa0c:	2109883a 	add	r4,r4,r4
1000aa10:	1907883a 	add	r3,r3,r4
1000aa14:	290b883a 	add	r5,r5,r4
1000aa18:	30000b26 	beq	r6,zero,1000aa48 <memmove+0x150>
1000aa1c:	198d883a 	add	r6,r3,r6
1000aa20:	29c00003 	ldbu	r7,0(r5)
1000aa24:	18c00044 	addi	r3,r3,1
1000aa28:	29400044 	addi	r5,r5,1
1000aa2c:	19ffffc5 	stb	r7,-1(r3)
1000aa30:	19bffb1e 	bne	r3,r6,1000aa20 <__alt_data_end+0xf800aa20>
1000aa34:	f800283a 	ret
1000aa38:	1007883a 	mov	r3,r2
1000aa3c:	003ff606 	br	1000aa18 <__alt_data_end+0xf800aa18>
1000aa40:	1007883a 	mov	r3,r2
1000aa44:	003ff506 	br	1000aa1c <__alt_data_end+0xf800aa1c>
1000aa48:	f800283a 	ret
1000aa4c:	500d883a 	mov	r6,r10
1000aa50:	003ff106 	br	1000aa18 <__alt_data_end+0xf800aa18>

1000aa54 <memset>:
1000aa54:	20c000cc 	andi	r3,r4,3
1000aa58:	2005883a 	mov	r2,r4
1000aa5c:	18004426 	beq	r3,zero,1000ab70 <memset+0x11c>
1000aa60:	31ffffc4 	addi	r7,r6,-1
1000aa64:	30004026 	beq	r6,zero,1000ab68 <memset+0x114>
1000aa68:	2813883a 	mov	r9,r5
1000aa6c:	200d883a 	mov	r6,r4
1000aa70:	2007883a 	mov	r3,r4
1000aa74:	00000406 	br	1000aa88 <memset+0x34>
1000aa78:	3a3fffc4 	addi	r8,r7,-1
1000aa7c:	31800044 	addi	r6,r6,1
1000aa80:	38003926 	beq	r7,zero,1000ab68 <memset+0x114>
1000aa84:	400f883a 	mov	r7,r8
1000aa88:	18c00044 	addi	r3,r3,1
1000aa8c:	32400005 	stb	r9,0(r6)
1000aa90:	1a0000cc 	andi	r8,r3,3
1000aa94:	403ff81e 	bne	r8,zero,1000aa78 <__alt_data_end+0xf800aa78>
1000aa98:	010000c4 	movi	r4,3
1000aa9c:	21c02d2e 	bgeu	r4,r7,1000ab54 <memset+0x100>
1000aaa0:	29003fcc 	andi	r4,r5,255
1000aaa4:	200c923a 	slli	r6,r4,8
1000aaa8:	3108b03a 	or	r4,r6,r4
1000aaac:	200c943a 	slli	r6,r4,16
1000aab0:	218cb03a 	or	r6,r4,r6
1000aab4:	010003c4 	movi	r4,15
1000aab8:	21c0182e 	bgeu	r4,r7,1000ab1c <memset+0xc8>
1000aabc:	3b3ffc04 	addi	r12,r7,-16
1000aac0:	6018d13a 	srli	r12,r12,4
1000aac4:	1a000104 	addi	r8,r3,4
1000aac8:	1ac00204 	addi	r11,r3,8
1000aacc:	6008913a 	slli	r4,r12,4
1000aad0:	1a800304 	addi	r10,r3,12
1000aad4:	1813883a 	mov	r9,r3
1000aad8:	21000504 	addi	r4,r4,20
1000aadc:	1909883a 	add	r4,r3,r4
1000aae0:	49800015 	stw	r6,0(r9)
1000aae4:	41800015 	stw	r6,0(r8)
1000aae8:	59800015 	stw	r6,0(r11)
1000aaec:	51800015 	stw	r6,0(r10)
1000aaf0:	42000404 	addi	r8,r8,16
1000aaf4:	4a400404 	addi	r9,r9,16
1000aaf8:	5ac00404 	addi	r11,r11,16
1000aafc:	52800404 	addi	r10,r10,16
1000ab00:	413ff71e 	bne	r8,r4,1000aae0 <__alt_data_end+0xf800aae0>
1000ab04:	63000044 	addi	r12,r12,1
1000ab08:	6018913a 	slli	r12,r12,4
1000ab0c:	39c003cc 	andi	r7,r7,15
1000ab10:	010000c4 	movi	r4,3
1000ab14:	1b07883a 	add	r3,r3,r12
1000ab18:	21c00e2e 	bgeu	r4,r7,1000ab54 <memset+0x100>
1000ab1c:	1813883a 	mov	r9,r3
1000ab20:	3811883a 	mov	r8,r7
1000ab24:	010000c4 	movi	r4,3
1000ab28:	49800015 	stw	r6,0(r9)
1000ab2c:	423fff04 	addi	r8,r8,-4
1000ab30:	4a400104 	addi	r9,r9,4
1000ab34:	223ffc36 	bltu	r4,r8,1000ab28 <__alt_data_end+0xf800ab28>
1000ab38:	393fff04 	addi	r4,r7,-4
1000ab3c:	2008d0ba 	srli	r4,r4,2
1000ab40:	39c000cc 	andi	r7,r7,3
1000ab44:	21000044 	addi	r4,r4,1
1000ab48:	2109883a 	add	r4,r4,r4
1000ab4c:	2109883a 	add	r4,r4,r4
1000ab50:	1907883a 	add	r3,r3,r4
1000ab54:	38000526 	beq	r7,zero,1000ab6c <memset+0x118>
1000ab58:	19cf883a 	add	r7,r3,r7
1000ab5c:	19400005 	stb	r5,0(r3)
1000ab60:	18c00044 	addi	r3,r3,1
1000ab64:	38fffd1e 	bne	r7,r3,1000ab5c <__alt_data_end+0xf800ab5c>
1000ab68:	f800283a 	ret
1000ab6c:	f800283a 	ret
1000ab70:	2007883a 	mov	r3,r4
1000ab74:	300f883a 	mov	r7,r6
1000ab78:	003fc706 	br	1000aa98 <__alt_data_end+0xf800aa98>

1000ab7c <_Balloc>:
1000ab7c:	20801317 	ldw	r2,76(r4)
1000ab80:	defffc04 	addi	sp,sp,-16
1000ab84:	dc400115 	stw	r17,4(sp)
1000ab88:	dc000015 	stw	r16,0(sp)
1000ab8c:	dfc00315 	stw	ra,12(sp)
1000ab90:	dc800215 	stw	r18,8(sp)
1000ab94:	2023883a 	mov	r17,r4
1000ab98:	2821883a 	mov	r16,r5
1000ab9c:	10000f26 	beq	r2,zero,1000abdc <_Balloc+0x60>
1000aba0:	8407883a 	add	r3,r16,r16
1000aba4:	18c7883a 	add	r3,r3,r3
1000aba8:	10c7883a 	add	r3,r2,r3
1000abac:	18800017 	ldw	r2,0(r3)
1000abb0:	10001126 	beq	r2,zero,1000abf8 <_Balloc+0x7c>
1000abb4:	11000017 	ldw	r4,0(r2)
1000abb8:	19000015 	stw	r4,0(r3)
1000abbc:	10000415 	stw	zero,16(r2)
1000abc0:	10000315 	stw	zero,12(r2)
1000abc4:	dfc00317 	ldw	ra,12(sp)
1000abc8:	dc800217 	ldw	r18,8(sp)
1000abcc:	dc400117 	ldw	r17,4(sp)
1000abd0:	dc000017 	ldw	r16,0(sp)
1000abd4:	dec00404 	addi	sp,sp,16
1000abd8:	f800283a 	ret
1000abdc:	01800844 	movi	r6,33
1000abe0:	01400104 	movi	r5,4
1000abe4:	000dc240 	call	1000dc24 <_calloc_r>
1000abe8:	88801315 	stw	r2,76(r17)
1000abec:	103fec1e 	bne	r2,zero,1000aba0 <__alt_data_end+0xf800aba0>
1000abf0:	0005883a 	mov	r2,zero
1000abf4:	003ff306 	br	1000abc4 <__alt_data_end+0xf800abc4>
1000abf8:	01400044 	movi	r5,1
1000abfc:	2c24983a 	sll	r18,r5,r16
1000ac00:	8809883a 	mov	r4,r17
1000ac04:	91800144 	addi	r6,r18,5
1000ac08:	318d883a 	add	r6,r6,r6
1000ac0c:	318d883a 	add	r6,r6,r6
1000ac10:	000dc240 	call	1000dc24 <_calloc_r>
1000ac14:	103ff626 	beq	r2,zero,1000abf0 <__alt_data_end+0xf800abf0>
1000ac18:	14000115 	stw	r16,4(r2)
1000ac1c:	14800215 	stw	r18,8(r2)
1000ac20:	003fe606 	br	1000abbc <__alt_data_end+0xf800abbc>

1000ac24 <_Bfree>:
1000ac24:	28000826 	beq	r5,zero,1000ac48 <_Bfree+0x24>
1000ac28:	28c00117 	ldw	r3,4(r5)
1000ac2c:	20801317 	ldw	r2,76(r4)
1000ac30:	18c7883a 	add	r3,r3,r3
1000ac34:	18c7883a 	add	r3,r3,r3
1000ac38:	10c5883a 	add	r2,r2,r3
1000ac3c:	10c00017 	ldw	r3,0(r2)
1000ac40:	28c00015 	stw	r3,0(r5)
1000ac44:	11400015 	stw	r5,0(r2)
1000ac48:	f800283a 	ret

1000ac4c <__multadd>:
1000ac4c:	defff704 	addi	sp,sp,-36
1000ac50:	dc800215 	stw	r18,8(sp)
1000ac54:	2c800417 	ldw	r18,16(r5)
1000ac58:	dd800615 	stw	r22,24(sp)
1000ac5c:	dd400515 	stw	r21,20(sp)
1000ac60:	dd000415 	stw	r20,16(sp)
1000ac64:	dcc00315 	stw	r19,12(sp)
1000ac68:	dc400115 	stw	r17,4(sp)
1000ac6c:	dc000015 	stw	r16,0(sp)
1000ac70:	dfc00815 	stw	ra,32(sp)
1000ac74:	ddc00715 	stw	r23,28(sp)
1000ac78:	2827883a 	mov	r19,r5
1000ac7c:	2029883a 	mov	r20,r4
1000ac80:	3023883a 	mov	r17,r6
1000ac84:	3821883a 	mov	r16,r7
1000ac88:	2d400504 	addi	r21,r5,20
1000ac8c:	002d883a 	mov	r22,zero
1000ac90:	adc00017 	ldw	r23,0(r21)
1000ac94:	880b883a 	mov	r5,r17
1000ac98:	ad400104 	addi	r21,r21,4
1000ac9c:	b93fffcc 	andi	r4,r23,65535
1000aca0:	0004b940 	call	10004b94 <__mulsi3>
1000aca4:	b808d43a 	srli	r4,r23,16
1000aca8:	880b883a 	mov	r5,r17
1000acac:	1421883a 	add	r16,r2,r16
1000acb0:	0004b940 	call	10004b94 <__mulsi3>
1000acb4:	800ed43a 	srli	r7,r16,16
1000acb8:	80ffffcc 	andi	r3,r16,65535
1000acbc:	b5800044 	addi	r22,r22,1
1000acc0:	11c5883a 	add	r2,r2,r7
1000acc4:	100e943a 	slli	r7,r2,16
1000acc8:	1020d43a 	srli	r16,r2,16
1000accc:	38c7883a 	add	r3,r7,r3
1000acd0:	a8ffff15 	stw	r3,-4(r21)
1000acd4:	b4bfee16 	blt	r22,r18,1000ac90 <__alt_data_end+0xf800ac90>
1000acd8:	80000926 	beq	r16,zero,1000ad00 <__multadd+0xb4>
1000acdc:	98800217 	ldw	r2,8(r19)
1000ace0:	9080130e 	bge	r18,r2,1000ad30 <__multadd+0xe4>
1000ace4:	90800144 	addi	r2,r18,5
1000ace8:	1085883a 	add	r2,r2,r2
1000acec:	1085883a 	add	r2,r2,r2
1000acf0:	9885883a 	add	r2,r19,r2
1000acf4:	14000015 	stw	r16,0(r2)
1000acf8:	94800044 	addi	r18,r18,1
1000acfc:	9c800415 	stw	r18,16(r19)
1000ad00:	9805883a 	mov	r2,r19
1000ad04:	dfc00817 	ldw	ra,32(sp)
1000ad08:	ddc00717 	ldw	r23,28(sp)
1000ad0c:	dd800617 	ldw	r22,24(sp)
1000ad10:	dd400517 	ldw	r21,20(sp)
1000ad14:	dd000417 	ldw	r20,16(sp)
1000ad18:	dcc00317 	ldw	r19,12(sp)
1000ad1c:	dc800217 	ldw	r18,8(sp)
1000ad20:	dc400117 	ldw	r17,4(sp)
1000ad24:	dc000017 	ldw	r16,0(sp)
1000ad28:	dec00904 	addi	sp,sp,36
1000ad2c:	f800283a 	ret
1000ad30:	99400117 	ldw	r5,4(r19)
1000ad34:	a009883a 	mov	r4,r20
1000ad38:	29400044 	addi	r5,r5,1
1000ad3c:	000ab7c0 	call	1000ab7c <_Balloc>
1000ad40:	99800417 	ldw	r6,16(r19)
1000ad44:	99400304 	addi	r5,r19,12
1000ad48:	11000304 	addi	r4,r2,12
1000ad4c:	31800084 	addi	r6,r6,2
1000ad50:	318d883a 	add	r6,r6,r6
1000ad54:	318d883a 	add	r6,r6,r6
1000ad58:	1023883a 	mov	r17,r2
1000ad5c:	000a7b00 	call	1000a7b0 <memcpy>
1000ad60:	98000a26 	beq	r19,zero,1000ad8c <__multadd+0x140>
1000ad64:	98c00117 	ldw	r3,4(r19)
1000ad68:	a0801317 	ldw	r2,76(r20)
1000ad6c:	18c7883a 	add	r3,r3,r3
1000ad70:	18c7883a 	add	r3,r3,r3
1000ad74:	10c5883a 	add	r2,r2,r3
1000ad78:	10c00017 	ldw	r3,0(r2)
1000ad7c:	98c00015 	stw	r3,0(r19)
1000ad80:	14c00015 	stw	r19,0(r2)
1000ad84:	8827883a 	mov	r19,r17
1000ad88:	003fd606 	br	1000ace4 <__alt_data_end+0xf800ace4>
1000ad8c:	8827883a 	mov	r19,r17
1000ad90:	003fd406 	br	1000ace4 <__alt_data_end+0xf800ace4>

1000ad94 <__s2b>:
1000ad94:	defff904 	addi	sp,sp,-28
1000ad98:	dc400115 	stw	r17,4(sp)
1000ad9c:	dc000015 	stw	r16,0(sp)
1000ada0:	2023883a 	mov	r17,r4
1000ada4:	2821883a 	mov	r16,r5
1000ada8:	39000204 	addi	r4,r7,8
1000adac:	01400244 	movi	r5,9
1000adb0:	dcc00315 	stw	r19,12(sp)
1000adb4:	dc800215 	stw	r18,8(sp)
1000adb8:	dfc00615 	stw	ra,24(sp)
1000adbc:	dd400515 	stw	r21,20(sp)
1000adc0:	dd000415 	stw	r20,16(sp)
1000adc4:	3825883a 	mov	r18,r7
1000adc8:	3027883a 	mov	r19,r6
1000adcc:	00049e00 	call	100049e0 <__divsi3>
1000add0:	00c00044 	movi	r3,1
1000add4:	000b883a 	mov	r5,zero
1000add8:	1880030e 	bge	r3,r2,1000ade8 <__s2b+0x54>
1000addc:	18c7883a 	add	r3,r3,r3
1000ade0:	29400044 	addi	r5,r5,1
1000ade4:	18bffd16 	blt	r3,r2,1000addc <__alt_data_end+0xf800addc>
1000ade8:	8809883a 	mov	r4,r17
1000adec:	000ab7c0 	call	1000ab7c <_Balloc>
1000adf0:	d8c00717 	ldw	r3,28(sp)
1000adf4:	10c00515 	stw	r3,20(r2)
1000adf8:	00c00044 	movi	r3,1
1000adfc:	10c00415 	stw	r3,16(r2)
1000ae00:	00c00244 	movi	r3,9
1000ae04:	1cc0210e 	bge	r3,r19,1000ae8c <__s2b+0xf8>
1000ae08:	80eb883a 	add	r21,r16,r3
1000ae0c:	a829883a 	mov	r20,r21
1000ae10:	84e1883a 	add	r16,r16,r19
1000ae14:	a1c00007 	ldb	r7,0(r20)
1000ae18:	01800284 	movi	r6,10
1000ae1c:	a5000044 	addi	r20,r20,1
1000ae20:	100b883a 	mov	r5,r2
1000ae24:	39fff404 	addi	r7,r7,-48
1000ae28:	8809883a 	mov	r4,r17
1000ae2c:	000ac4c0 	call	1000ac4c <__multadd>
1000ae30:	a43ff81e 	bne	r20,r16,1000ae14 <__alt_data_end+0xf800ae14>
1000ae34:	ace1883a 	add	r16,r21,r19
1000ae38:	843ffe04 	addi	r16,r16,-8
1000ae3c:	9c800a0e 	bge	r19,r18,1000ae68 <__s2b+0xd4>
1000ae40:	94e5c83a 	sub	r18,r18,r19
1000ae44:	84a5883a 	add	r18,r16,r18
1000ae48:	81c00007 	ldb	r7,0(r16)
1000ae4c:	01800284 	movi	r6,10
1000ae50:	84000044 	addi	r16,r16,1
1000ae54:	100b883a 	mov	r5,r2
1000ae58:	39fff404 	addi	r7,r7,-48
1000ae5c:	8809883a 	mov	r4,r17
1000ae60:	000ac4c0 	call	1000ac4c <__multadd>
1000ae64:	84bff81e 	bne	r16,r18,1000ae48 <__alt_data_end+0xf800ae48>
1000ae68:	dfc00617 	ldw	ra,24(sp)
1000ae6c:	dd400517 	ldw	r21,20(sp)
1000ae70:	dd000417 	ldw	r20,16(sp)
1000ae74:	dcc00317 	ldw	r19,12(sp)
1000ae78:	dc800217 	ldw	r18,8(sp)
1000ae7c:	dc400117 	ldw	r17,4(sp)
1000ae80:	dc000017 	ldw	r16,0(sp)
1000ae84:	dec00704 	addi	sp,sp,28
1000ae88:	f800283a 	ret
1000ae8c:	84000284 	addi	r16,r16,10
1000ae90:	1827883a 	mov	r19,r3
1000ae94:	003fe906 	br	1000ae3c <__alt_data_end+0xf800ae3c>

1000ae98 <__hi0bits>:
1000ae98:	20bfffec 	andhi	r2,r4,65535
1000ae9c:	1000141e 	bne	r2,zero,1000aef0 <__hi0bits+0x58>
1000aea0:	2008943a 	slli	r4,r4,16
1000aea4:	00800404 	movi	r2,16
1000aea8:	20ffc02c 	andhi	r3,r4,65280
1000aeac:	1800021e 	bne	r3,zero,1000aeb8 <__hi0bits+0x20>
1000aeb0:	2008923a 	slli	r4,r4,8
1000aeb4:	10800204 	addi	r2,r2,8
1000aeb8:	20fc002c 	andhi	r3,r4,61440
1000aebc:	1800021e 	bne	r3,zero,1000aec8 <__hi0bits+0x30>
1000aec0:	2008913a 	slli	r4,r4,4
1000aec4:	10800104 	addi	r2,r2,4
1000aec8:	20f0002c 	andhi	r3,r4,49152
1000aecc:	1800031e 	bne	r3,zero,1000aedc <__hi0bits+0x44>
1000aed0:	2109883a 	add	r4,r4,r4
1000aed4:	10800084 	addi	r2,r2,2
1000aed8:	2109883a 	add	r4,r4,r4
1000aedc:	20000316 	blt	r4,zero,1000aeec <__hi0bits+0x54>
1000aee0:	2110002c 	andhi	r4,r4,16384
1000aee4:	2000041e 	bne	r4,zero,1000aef8 <__hi0bits+0x60>
1000aee8:	00800804 	movi	r2,32
1000aeec:	f800283a 	ret
1000aef0:	0005883a 	mov	r2,zero
1000aef4:	003fec06 	br	1000aea8 <__alt_data_end+0xf800aea8>
1000aef8:	10800044 	addi	r2,r2,1
1000aefc:	f800283a 	ret

1000af00 <__lo0bits>:
1000af00:	20c00017 	ldw	r3,0(r4)
1000af04:	188001cc 	andi	r2,r3,7
1000af08:	10000826 	beq	r2,zero,1000af2c <__lo0bits+0x2c>
1000af0c:	1880004c 	andi	r2,r3,1
1000af10:	1000211e 	bne	r2,zero,1000af98 <__lo0bits+0x98>
1000af14:	1880008c 	andi	r2,r3,2
1000af18:	1000211e 	bne	r2,zero,1000afa0 <__lo0bits+0xa0>
1000af1c:	1806d0ba 	srli	r3,r3,2
1000af20:	00800084 	movi	r2,2
1000af24:	20c00015 	stw	r3,0(r4)
1000af28:	f800283a 	ret
1000af2c:	18bfffcc 	andi	r2,r3,65535
1000af30:	10001326 	beq	r2,zero,1000af80 <__lo0bits+0x80>
1000af34:	0005883a 	mov	r2,zero
1000af38:	19403fcc 	andi	r5,r3,255
1000af3c:	2800021e 	bne	r5,zero,1000af48 <__lo0bits+0x48>
1000af40:	1806d23a 	srli	r3,r3,8
1000af44:	10800204 	addi	r2,r2,8
1000af48:	194003cc 	andi	r5,r3,15
1000af4c:	2800021e 	bne	r5,zero,1000af58 <__lo0bits+0x58>
1000af50:	1806d13a 	srli	r3,r3,4
1000af54:	10800104 	addi	r2,r2,4
1000af58:	194000cc 	andi	r5,r3,3
1000af5c:	2800021e 	bne	r5,zero,1000af68 <__lo0bits+0x68>
1000af60:	1806d0ba 	srli	r3,r3,2
1000af64:	10800084 	addi	r2,r2,2
1000af68:	1940004c 	andi	r5,r3,1
1000af6c:	2800081e 	bne	r5,zero,1000af90 <__lo0bits+0x90>
1000af70:	1806d07a 	srli	r3,r3,1
1000af74:	1800051e 	bne	r3,zero,1000af8c <__lo0bits+0x8c>
1000af78:	00800804 	movi	r2,32
1000af7c:	f800283a 	ret
1000af80:	1806d43a 	srli	r3,r3,16
1000af84:	00800404 	movi	r2,16
1000af88:	003feb06 	br	1000af38 <__alt_data_end+0xf800af38>
1000af8c:	10800044 	addi	r2,r2,1
1000af90:	20c00015 	stw	r3,0(r4)
1000af94:	f800283a 	ret
1000af98:	0005883a 	mov	r2,zero
1000af9c:	f800283a 	ret
1000afa0:	1806d07a 	srli	r3,r3,1
1000afa4:	00800044 	movi	r2,1
1000afa8:	20c00015 	stw	r3,0(r4)
1000afac:	f800283a 	ret

1000afb0 <__i2b>:
1000afb0:	defffd04 	addi	sp,sp,-12
1000afb4:	dc000015 	stw	r16,0(sp)
1000afb8:	04000044 	movi	r16,1
1000afbc:	dc400115 	stw	r17,4(sp)
1000afc0:	2823883a 	mov	r17,r5
1000afc4:	800b883a 	mov	r5,r16
1000afc8:	dfc00215 	stw	ra,8(sp)
1000afcc:	000ab7c0 	call	1000ab7c <_Balloc>
1000afd0:	14400515 	stw	r17,20(r2)
1000afd4:	14000415 	stw	r16,16(r2)
1000afd8:	dfc00217 	ldw	ra,8(sp)
1000afdc:	dc400117 	ldw	r17,4(sp)
1000afe0:	dc000017 	ldw	r16,0(sp)
1000afe4:	dec00304 	addi	sp,sp,12
1000afe8:	f800283a 	ret

1000afec <__multiply>:
1000afec:	deffef04 	addi	sp,sp,-68
1000aff0:	dc400815 	stw	r17,32(sp)
1000aff4:	dc000715 	stw	r16,28(sp)
1000aff8:	34400417 	ldw	r17,16(r6)
1000affc:	2c000417 	ldw	r16,16(r5)
1000b000:	dd800d15 	stw	r22,52(sp)
1000b004:	dc800915 	stw	r18,36(sp)
1000b008:	dfc01015 	stw	ra,64(sp)
1000b00c:	df000f15 	stw	fp,60(sp)
1000b010:	ddc00e15 	stw	r23,56(sp)
1000b014:	dd400c15 	stw	r21,48(sp)
1000b018:	dd000b15 	stw	r20,44(sp)
1000b01c:	dcc00a15 	stw	r19,40(sp)
1000b020:	2825883a 	mov	r18,r5
1000b024:	302d883a 	mov	r22,r6
1000b028:	8440050e 	bge	r16,r17,1000b040 <__multiply+0x54>
1000b02c:	8007883a 	mov	r3,r16
1000b030:	3025883a 	mov	r18,r6
1000b034:	8821883a 	mov	r16,r17
1000b038:	282d883a 	mov	r22,r5
1000b03c:	1823883a 	mov	r17,r3
1000b040:	90800217 	ldw	r2,8(r18)
1000b044:	8447883a 	add	r3,r16,r17
1000b048:	d8c00215 	stw	r3,8(sp)
1000b04c:	91400117 	ldw	r5,4(r18)
1000b050:	10c0010e 	bge	r2,r3,1000b058 <__multiply+0x6c>
1000b054:	29400044 	addi	r5,r5,1
1000b058:	000ab7c0 	call	1000ab7c <_Balloc>
1000b05c:	d8c00217 	ldw	r3,8(sp)
1000b060:	d8800615 	stw	r2,24(sp)
1000b064:	18eb883a 	add	r21,r3,r3
1000b068:	ad6b883a 	add	r21,r21,r21
1000b06c:	10c00504 	addi	r3,r2,20
1000b070:	1d6b883a 	add	r21,r3,r21
1000b074:	d8c00115 	stw	r3,4(sp)
1000b078:	dd400315 	stw	r21,12(sp)
1000b07c:	1805883a 	mov	r2,r3
1000b080:	1d40042e 	bgeu	r3,r21,1000b094 <__multiply+0xa8>
1000b084:	d8c00317 	ldw	r3,12(sp)
1000b088:	10000015 	stw	zero,0(r2)
1000b08c:	10800104 	addi	r2,r2,4
1000b090:	10fffc36 	bltu	r2,r3,1000b084 <__alt_data_end+0xf800b084>
1000b094:	8c63883a 	add	r17,r17,r17
1000b098:	b5800504 	addi	r22,r22,20
1000b09c:	8c63883a 	add	r17,r17,r17
1000b0a0:	94800504 	addi	r18,r18,20
1000b0a4:	8421883a 	add	r16,r16,r16
1000b0a8:	b463883a 	add	r17,r22,r17
1000b0ac:	8421883a 	add	r16,r16,r16
1000b0b0:	dd800015 	stw	r22,0(sp)
1000b0b4:	dc800415 	stw	r18,16(sp)
1000b0b8:	dc400515 	stw	r17,20(sp)
1000b0bc:	9429883a 	add	r20,r18,r16
1000b0c0:	b4404f2e 	bgeu	r22,r17,1000b200 <__multiply+0x214>
1000b0c4:	d8c00017 	ldw	r3,0(sp)
1000b0c8:	1c800017 	ldw	r18,0(r3)
1000b0cc:	947fffcc 	andi	r17,r18,65535
1000b0d0:	88001e26 	beq	r17,zero,1000b14c <__multiply+0x160>
1000b0d4:	dd800117 	ldw	r22,4(sp)
1000b0d8:	dd400417 	ldw	r21,16(sp)
1000b0dc:	0027883a 	mov	r19,zero
1000b0e0:	ac800017 	ldw	r18,0(r21)
1000b0e4:	b4000017 	ldw	r16,0(r22)
1000b0e8:	880b883a 	mov	r5,r17
1000b0ec:	913fffcc 	andi	r4,r18,65535
1000b0f0:	0004b940 	call	10004b94 <__mulsi3>
1000b0f4:	9008d43a 	srli	r4,r18,16
1000b0f8:	84bfffcc 	andi	r18,r16,65535
1000b0fc:	1485883a 	add	r2,r2,r18
1000b100:	14e5883a 	add	r18,r2,r19
1000b104:	8020d43a 	srli	r16,r16,16
1000b108:	9026d43a 	srli	r19,r18,16
1000b10c:	880b883a 	mov	r5,r17
1000b110:	0004b940 	call	10004b94 <__mulsi3>
1000b114:	1405883a 	add	r2,r2,r16
1000b118:	14e1883a 	add	r16,r2,r19
1000b11c:	90ffffcc 	andi	r3,r18,65535
1000b120:	8024943a 	slli	r18,r16,16
1000b124:	ad400104 	addi	r21,r21,4
1000b128:	b005883a 	mov	r2,r22
1000b12c:	90c6b03a 	or	r3,r18,r3
1000b130:	b0c00015 	stw	r3,0(r22)
1000b134:	8026d43a 	srli	r19,r16,16
1000b138:	b5800104 	addi	r22,r22,4
1000b13c:	ad3fe836 	bltu	r21,r20,1000b0e0 <__alt_data_end+0xf800b0e0>
1000b140:	d8c00017 	ldw	r3,0(sp)
1000b144:	14c00115 	stw	r19,4(r2)
1000b148:	1c800017 	ldw	r18,0(r3)
1000b14c:	9024d43a 	srli	r18,r18,16
1000b150:	90002226 	beq	r18,zero,1000b1dc <__multiply+0x1f0>
1000b154:	d8c00117 	ldw	r3,4(sp)
1000b158:	dd800417 	ldw	r22,16(sp)
1000b15c:	002f883a 	mov	r23,zero
1000b160:	1f000017 	ldw	fp,0(r3)
1000b164:	1823883a 	mov	r17,r3
1000b168:	182b883a 	mov	r21,r3
1000b16c:	e021883a 	mov	r16,fp
1000b170:	00000106 	br	1000b178 <__multiply+0x18c>
1000b174:	982b883a 	mov	r21,r19
1000b178:	b100000b 	ldhu	r4,0(r22)
1000b17c:	8020d43a 	srli	r16,r16,16
1000b180:	900b883a 	mov	r5,r18
1000b184:	0004b940 	call	10004b94 <__mulsi3>
1000b188:	1405883a 	add	r2,r2,r16
1000b18c:	15ef883a 	add	r23,r2,r23
1000b190:	b804943a 	slli	r2,r23,16
1000b194:	e0ffffcc 	andi	r3,fp,65535
1000b198:	8c400104 	addi	r17,r17,4
1000b19c:	10c6b03a 	or	r3,r2,r3
1000b1a0:	88ffff15 	stw	r3,-4(r17)
1000b1a4:	b5800104 	addi	r22,r22,4
1000b1a8:	b13fff17 	ldw	r4,-4(r22)
1000b1ac:	acc00104 	addi	r19,r21,4
1000b1b0:	900b883a 	mov	r5,r18
1000b1b4:	2008d43a 	srli	r4,r4,16
1000b1b8:	9c000017 	ldw	r16,0(r19)
1000b1bc:	0004b940 	call	10004b94 <__mulsi3>
1000b1c0:	b806d43a 	srli	r3,r23,16
1000b1c4:	813fffcc 	andi	r4,r16,65535
1000b1c8:	1105883a 	add	r2,r2,r4
1000b1cc:	10f9883a 	add	fp,r2,r3
1000b1d0:	e02ed43a 	srli	r23,fp,16
1000b1d4:	b53fe736 	bltu	r22,r20,1000b174 <__alt_data_end+0xf800b174>
1000b1d8:	af000115 	stw	fp,4(r21)
1000b1dc:	d8c00017 	ldw	r3,0(sp)
1000b1e0:	d9000517 	ldw	r4,20(sp)
1000b1e4:	18c00104 	addi	r3,r3,4
1000b1e8:	d8c00015 	stw	r3,0(sp)
1000b1ec:	d8c00117 	ldw	r3,4(sp)
1000b1f0:	18c00104 	addi	r3,r3,4
1000b1f4:	d8c00115 	stw	r3,4(sp)
1000b1f8:	d8c00017 	ldw	r3,0(sp)
1000b1fc:	193fb136 	bltu	r3,r4,1000b0c4 <__alt_data_end+0xf800b0c4>
1000b200:	d8c00217 	ldw	r3,8(sp)
1000b204:	00c00c0e 	bge	zero,r3,1000b238 <__multiply+0x24c>
1000b208:	d8c00317 	ldw	r3,12(sp)
1000b20c:	18bfff17 	ldw	r2,-4(r3)
1000b210:	1d7fff04 	addi	r21,r3,-4
1000b214:	10000326 	beq	r2,zero,1000b224 <__multiply+0x238>
1000b218:	00000706 	br	1000b238 <__multiply+0x24c>
1000b21c:	a8800017 	ldw	r2,0(r21)
1000b220:	1000051e 	bne	r2,zero,1000b238 <__multiply+0x24c>
1000b224:	d8c00217 	ldw	r3,8(sp)
1000b228:	ad7fff04 	addi	r21,r21,-4
1000b22c:	18ffffc4 	addi	r3,r3,-1
1000b230:	d8c00215 	stw	r3,8(sp)
1000b234:	183ff91e 	bne	r3,zero,1000b21c <__alt_data_end+0xf800b21c>
1000b238:	d8c00617 	ldw	r3,24(sp)
1000b23c:	d9000217 	ldw	r4,8(sp)
1000b240:	1805883a 	mov	r2,r3
1000b244:	19000415 	stw	r4,16(r3)
1000b248:	dfc01017 	ldw	ra,64(sp)
1000b24c:	df000f17 	ldw	fp,60(sp)
1000b250:	ddc00e17 	ldw	r23,56(sp)
1000b254:	dd800d17 	ldw	r22,52(sp)
1000b258:	dd400c17 	ldw	r21,48(sp)
1000b25c:	dd000b17 	ldw	r20,44(sp)
1000b260:	dcc00a17 	ldw	r19,40(sp)
1000b264:	dc800917 	ldw	r18,36(sp)
1000b268:	dc400817 	ldw	r17,32(sp)
1000b26c:	dc000717 	ldw	r16,28(sp)
1000b270:	dec01104 	addi	sp,sp,68
1000b274:	f800283a 	ret

1000b278 <__pow5mult>:
1000b278:	defffa04 	addi	sp,sp,-24
1000b27c:	dcc00315 	stw	r19,12(sp)
1000b280:	dc000015 	stw	r16,0(sp)
1000b284:	dfc00515 	stw	ra,20(sp)
1000b288:	dd000415 	stw	r20,16(sp)
1000b28c:	dc800215 	stw	r18,8(sp)
1000b290:	dc400115 	stw	r17,4(sp)
1000b294:	308000cc 	andi	r2,r6,3
1000b298:	3021883a 	mov	r16,r6
1000b29c:	2027883a 	mov	r19,r4
1000b2a0:	10002f1e 	bne	r2,zero,1000b360 <__pow5mult+0xe8>
1000b2a4:	2825883a 	mov	r18,r5
1000b2a8:	8021d0ba 	srai	r16,r16,2
1000b2ac:	80001a26 	beq	r16,zero,1000b318 <__pow5mult+0xa0>
1000b2b0:	9c401217 	ldw	r17,72(r19)
1000b2b4:	8800061e 	bne	r17,zero,1000b2d0 <__pow5mult+0x58>
1000b2b8:	00003406 	br	1000b38c <__pow5mult+0x114>
1000b2bc:	8021d07a 	srai	r16,r16,1
1000b2c0:	80001526 	beq	r16,zero,1000b318 <__pow5mult+0xa0>
1000b2c4:	88800017 	ldw	r2,0(r17)
1000b2c8:	10001c26 	beq	r2,zero,1000b33c <__pow5mult+0xc4>
1000b2cc:	1023883a 	mov	r17,r2
1000b2d0:	8080004c 	andi	r2,r16,1
1000b2d4:	103ff926 	beq	r2,zero,1000b2bc <__alt_data_end+0xf800b2bc>
1000b2d8:	880d883a 	mov	r6,r17
1000b2dc:	900b883a 	mov	r5,r18
1000b2e0:	9809883a 	mov	r4,r19
1000b2e4:	000afec0 	call	1000afec <__multiply>
1000b2e8:	90001b26 	beq	r18,zero,1000b358 <__pow5mult+0xe0>
1000b2ec:	91000117 	ldw	r4,4(r18)
1000b2f0:	98c01317 	ldw	r3,76(r19)
1000b2f4:	8021d07a 	srai	r16,r16,1
1000b2f8:	2109883a 	add	r4,r4,r4
1000b2fc:	2109883a 	add	r4,r4,r4
1000b300:	1907883a 	add	r3,r3,r4
1000b304:	19000017 	ldw	r4,0(r3)
1000b308:	91000015 	stw	r4,0(r18)
1000b30c:	1c800015 	stw	r18,0(r3)
1000b310:	1025883a 	mov	r18,r2
1000b314:	803feb1e 	bne	r16,zero,1000b2c4 <__alt_data_end+0xf800b2c4>
1000b318:	9005883a 	mov	r2,r18
1000b31c:	dfc00517 	ldw	ra,20(sp)
1000b320:	dd000417 	ldw	r20,16(sp)
1000b324:	dcc00317 	ldw	r19,12(sp)
1000b328:	dc800217 	ldw	r18,8(sp)
1000b32c:	dc400117 	ldw	r17,4(sp)
1000b330:	dc000017 	ldw	r16,0(sp)
1000b334:	dec00604 	addi	sp,sp,24
1000b338:	f800283a 	ret
1000b33c:	880d883a 	mov	r6,r17
1000b340:	880b883a 	mov	r5,r17
1000b344:	9809883a 	mov	r4,r19
1000b348:	000afec0 	call	1000afec <__multiply>
1000b34c:	88800015 	stw	r2,0(r17)
1000b350:	10000015 	stw	zero,0(r2)
1000b354:	003fdd06 	br	1000b2cc <__alt_data_end+0xf800b2cc>
1000b358:	1025883a 	mov	r18,r2
1000b35c:	003fd706 	br	1000b2bc <__alt_data_end+0xf800b2bc>
1000b360:	10bfffc4 	addi	r2,r2,-1
1000b364:	1085883a 	add	r2,r2,r2
1000b368:	00c40074 	movhi	r3,4097
1000b36c:	18d28504 	addi	r3,r3,18964
1000b370:	1085883a 	add	r2,r2,r2
1000b374:	1885883a 	add	r2,r3,r2
1000b378:	11800017 	ldw	r6,0(r2)
1000b37c:	000f883a 	mov	r7,zero
1000b380:	000ac4c0 	call	1000ac4c <__multadd>
1000b384:	1025883a 	mov	r18,r2
1000b388:	003fc706 	br	1000b2a8 <__alt_data_end+0xf800b2a8>
1000b38c:	05000044 	movi	r20,1
1000b390:	a00b883a 	mov	r5,r20
1000b394:	9809883a 	mov	r4,r19
1000b398:	000ab7c0 	call	1000ab7c <_Balloc>
1000b39c:	1023883a 	mov	r17,r2
1000b3a0:	00809c44 	movi	r2,625
1000b3a4:	88800515 	stw	r2,20(r17)
1000b3a8:	8d000415 	stw	r20,16(r17)
1000b3ac:	9c401215 	stw	r17,72(r19)
1000b3b0:	88000015 	stw	zero,0(r17)
1000b3b4:	003fc606 	br	1000b2d0 <__alt_data_end+0xf800b2d0>

1000b3b8 <__lshift>:
1000b3b8:	defff904 	addi	sp,sp,-28
1000b3bc:	dd400515 	stw	r21,20(sp)
1000b3c0:	dcc00315 	stw	r19,12(sp)
1000b3c4:	302bd17a 	srai	r21,r6,5
1000b3c8:	2cc00417 	ldw	r19,16(r5)
1000b3cc:	28800217 	ldw	r2,8(r5)
1000b3d0:	dd000415 	stw	r20,16(sp)
1000b3d4:	ace7883a 	add	r19,r21,r19
1000b3d8:	dc800215 	stw	r18,8(sp)
1000b3dc:	dc400115 	stw	r17,4(sp)
1000b3e0:	dc000015 	stw	r16,0(sp)
1000b3e4:	dfc00615 	stw	ra,24(sp)
1000b3e8:	9c000044 	addi	r16,r19,1
1000b3ec:	2823883a 	mov	r17,r5
1000b3f0:	3029883a 	mov	r20,r6
1000b3f4:	2025883a 	mov	r18,r4
1000b3f8:	29400117 	ldw	r5,4(r5)
1000b3fc:	1400030e 	bge	r2,r16,1000b40c <__lshift+0x54>
1000b400:	1085883a 	add	r2,r2,r2
1000b404:	29400044 	addi	r5,r5,1
1000b408:	143ffd16 	blt	r2,r16,1000b400 <__alt_data_end+0xf800b400>
1000b40c:	9009883a 	mov	r4,r18
1000b410:	000ab7c0 	call	1000ab7c <_Balloc>
1000b414:	10c00504 	addi	r3,r2,20
1000b418:	0540070e 	bge	zero,r21,1000b438 <__lshift+0x80>
1000b41c:	ad6b883a 	add	r21,r21,r21
1000b420:	ad6b883a 	add	r21,r21,r21
1000b424:	1809883a 	mov	r4,r3
1000b428:	1d47883a 	add	r3,r3,r21
1000b42c:	20000015 	stw	zero,0(r4)
1000b430:	21000104 	addi	r4,r4,4
1000b434:	193ffd1e 	bne	r3,r4,1000b42c <__alt_data_end+0xf800b42c>
1000b438:	8a000417 	ldw	r8,16(r17)
1000b43c:	89000504 	addi	r4,r17,20
1000b440:	a18007cc 	andi	r6,r20,31
1000b444:	4211883a 	add	r8,r8,r8
1000b448:	4211883a 	add	r8,r8,r8
1000b44c:	2211883a 	add	r8,r4,r8
1000b450:	30002326 	beq	r6,zero,1000b4e0 <__lshift+0x128>
1000b454:	02400804 	movi	r9,32
1000b458:	4993c83a 	sub	r9,r9,r6
1000b45c:	000b883a 	mov	r5,zero
1000b460:	21c00017 	ldw	r7,0(r4)
1000b464:	1815883a 	mov	r10,r3
1000b468:	18c00104 	addi	r3,r3,4
1000b46c:	398e983a 	sll	r7,r7,r6
1000b470:	21000104 	addi	r4,r4,4
1000b474:	394ab03a 	or	r5,r7,r5
1000b478:	197fff15 	stw	r5,-4(r3)
1000b47c:	217fff17 	ldw	r5,-4(r4)
1000b480:	2a4ad83a 	srl	r5,r5,r9
1000b484:	223ff636 	bltu	r4,r8,1000b460 <__alt_data_end+0xf800b460>
1000b488:	51400115 	stw	r5,4(r10)
1000b48c:	28001a1e 	bne	r5,zero,1000b4f8 <__lshift+0x140>
1000b490:	843fffc4 	addi	r16,r16,-1
1000b494:	14000415 	stw	r16,16(r2)
1000b498:	88000826 	beq	r17,zero,1000b4bc <__lshift+0x104>
1000b49c:	89000117 	ldw	r4,4(r17)
1000b4a0:	90c01317 	ldw	r3,76(r18)
1000b4a4:	2109883a 	add	r4,r4,r4
1000b4a8:	2109883a 	add	r4,r4,r4
1000b4ac:	1907883a 	add	r3,r3,r4
1000b4b0:	19000017 	ldw	r4,0(r3)
1000b4b4:	89000015 	stw	r4,0(r17)
1000b4b8:	1c400015 	stw	r17,0(r3)
1000b4bc:	dfc00617 	ldw	ra,24(sp)
1000b4c0:	dd400517 	ldw	r21,20(sp)
1000b4c4:	dd000417 	ldw	r20,16(sp)
1000b4c8:	dcc00317 	ldw	r19,12(sp)
1000b4cc:	dc800217 	ldw	r18,8(sp)
1000b4d0:	dc400117 	ldw	r17,4(sp)
1000b4d4:	dc000017 	ldw	r16,0(sp)
1000b4d8:	dec00704 	addi	sp,sp,28
1000b4dc:	f800283a 	ret
1000b4e0:	21400017 	ldw	r5,0(r4)
1000b4e4:	18c00104 	addi	r3,r3,4
1000b4e8:	21000104 	addi	r4,r4,4
1000b4ec:	197fff15 	stw	r5,-4(r3)
1000b4f0:	223ffb36 	bltu	r4,r8,1000b4e0 <__alt_data_end+0xf800b4e0>
1000b4f4:	003fe606 	br	1000b490 <__alt_data_end+0xf800b490>
1000b4f8:	9c000084 	addi	r16,r19,2
1000b4fc:	003fe406 	br	1000b490 <__alt_data_end+0xf800b490>

1000b500 <__mcmp>:
1000b500:	20800417 	ldw	r2,16(r4)
1000b504:	28c00417 	ldw	r3,16(r5)
1000b508:	10c5c83a 	sub	r2,r2,r3
1000b50c:	1000111e 	bne	r2,zero,1000b554 <__mcmp+0x54>
1000b510:	18c7883a 	add	r3,r3,r3
1000b514:	18c7883a 	add	r3,r3,r3
1000b518:	21000504 	addi	r4,r4,20
1000b51c:	29400504 	addi	r5,r5,20
1000b520:	20c5883a 	add	r2,r4,r3
1000b524:	28cb883a 	add	r5,r5,r3
1000b528:	00000106 	br	1000b530 <__mcmp+0x30>
1000b52c:	20800a2e 	bgeu	r4,r2,1000b558 <__mcmp+0x58>
1000b530:	10bfff04 	addi	r2,r2,-4
1000b534:	297fff04 	addi	r5,r5,-4
1000b538:	11800017 	ldw	r6,0(r2)
1000b53c:	28c00017 	ldw	r3,0(r5)
1000b540:	30fffa26 	beq	r6,r3,1000b52c <__alt_data_end+0xf800b52c>
1000b544:	30c00236 	bltu	r6,r3,1000b550 <__mcmp+0x50>
1000b548:	00800044 	movi	r2,1
1000b54c:	f800283a 	ret
1000b550:	00bfffc4 	movi	r2,-1
1000b554:	f800283a 	ret
1000b558:	0005883a 	mov	r2,zero
1000b55c:	f800283a 	ret

1000b560 <__mdiff>:
1000b560:	28c00417 	ldw	r3,16(r5)
1000b564:	30800417 	ldw	r2,16(r6)
1000b568:	defffa04 	addi	sp,sp,-24
1000b56c:	dcc00315 	stw	r19,12(sp)
1000b570:	dc800215 	stw	r18,8(sp)
1000b574:	dfc00515 	stw	ra,20(sp)
1000b578:	dd000415 	stw	r20,16(sp)
1000b57c:	dc400115 	stw	r17,4(sp)
1000b580:	dc000015 	stw	r16,0(sp)
1000b584:	1887c83a 	sub	r3,r3,r2
1000b588:	2825883a 	mov	r18,r5
1000b58c:	3027883a 	mov	r19,r6
1000b590:	1800141e 	bne	r3,zero,1000b5e4 <__mdiff+0x84>
1000b594:	1085883a 	add	r2,r2,r2
1000b598:	1085883a 	add	r2,r2,r2
1000b59c:	2a000504 	addi	r8,r5,20
1000b5a0:	34000504 	addi	r16,r6,20
1000b5a4:	4087883a 	add	r3,r8,r2
1000b5a8:	8085883a 	add	r2,r16,r2
1000b5ac:	00000106 	br	1000b5b4 <__mdiff+0x54>
1000b5b0:	40c0592e 	bgeu	r8,r3,1000b718 <__mdiff+0x1b8>
1000b5b4:	18ffff04 	addi	r3,r3,-4
1000b5b8:	10bfff04 	addi	r2,r2,-4
1000b5bc:	19c00017 	ldw	r7,0(r3)
1000b5c0:	11400017 	ldw	r5,0(r2)
1000b5c4:	397ffa26 	beq	r7,r5,1000b5b0 <__alt_data_end+0xf800b5b0>
1000b5c8:	3940592e 	bgeu	r7,r5,1000b730 <__mdiff+0x1d0>
1000b5cc:	9005883a 	mov	r2,r18
1000b5d0:	4023883a 	mov	r17,r8
1000b5d4:	9825883a 	mov	r18,r19
1000b5d8:	05000044 	movi	r20,1
1000b5dc:	1027883a 	mov	r19,r2
1000b5e0:	00000406 	br	1000b5f4 <__mdiff+0x94>
1000b5e4:	18005616 	blt	r3,zero,1000b740 <__mdiff+0x1e0>
1000b5e8:	34400504 	addi	r17,r6,20
1000b5ec:	2c000504 	addi	r16,r5,20
1000b5f0:	0029883a 	mov	r20,zero
1000b5f4:	91400117 	ldw	r5,4(r18)
1000b5f8:	000ab7c0 	call	1000ab7c <_Balloc>
1000b5fc:	92400417 	ldw	r9,16(r18)
1000b600:	9b000417 	ldw	r12,16(r19)
1000b604:	12c00504 	addi	r11,r2,20
1000b608:	4a51883a 	add	r8,r9,r9
1000b60c:	6319883a 	add	r12,r12,r12
1000b610:	4211883a 	add	r8,r8,r8
1000b614:	6319883a 	add	r12,r12,r12
1000b618:	15000315 	stw	r20,12(r2)
1000b61c:	8211883a 	add	r8,r16,r8
1000b620:	8b19883a 	add	r12,r17,r12
1000b624:	0007883a 	mov	r3,zero
1000b628:	81400017 	ldw	r5,0(r16)
1000b62c:	89c00017 	ldw	r7,0(r17)
1000b630:	59800104 	addi	r6,r11,4
1000b634:	293fffcc 	andi	r4,r5,65535
1000b638:	20c7883a 	add	r3,r4,r3
1000b63c:	393fffcc 	andi	r4,r7,65535
1000b640:	1909c83a 	sub	r4,r3,r4
1000b644:	280ad43a 	srli	r5,r5,16
1000b648:	380ed43a 	srli	r7,r7,16
1000b64c:	2007d43a 	srai	r3,r4,16
1000b650:	213fffcc 	andi	r4,r4,65535
1000b654:	29cbc83a 	sub	r5,r5,r7
1000b658:	28c7883a 	add	r3,r5,r3
1000b65c:	180a943a 	slli	r5,r3,16
1000b660:	8c400104 	addi	r17,r17,4
1000b664:	84000104 	addi	r16,r16,4
1000b668:	2908b03a 	or	r4,r5,r4
1000b66c:	59000015 	stw	r4,0(r11)
1000b670:	1807d43a 	srai	r3,r3,16
1000b674:	3015883a 	mov	r10,r6
1000b678:	3017883a 	mov	r11,r6
1000b67c:	8b3fea36 	bltu	r17,r12,1000b628 <__alt_data_end+0xf800b628>
1000b680:	8200162e 	bgeu	r16,r8,1000b6dc <__mdiff+0x17c>
1000b684:	8017883a 	mov	r11,r16
1000b688:	59400017 	ldw	r5,0(r11)
1000b68c:	31800104 	addi	r6,r6,4
1000b690:	5ac00104 	addi	r11,r11,4
1000b694:	293fffcc 	andi	r4,r5,65535
1000b698:	20c7883a 	add	r3,r4,r3
1000b69c:	280ed43a 	srli	r7,r5,16
1000b6a0:	180bd43a 	srai	r5,r3,16
1000b6a4:	193fffcc 	andi	r4,r3,65535
1000b6a8:	3947883a 	add	r3,r7,r5
1000b6ac:	180a943a 	slli	r5,r3,16
1000b6b0:	1807d43a 	srai	r3,r3,16
1000b6b4:	2908b03a 	or	r4,r5,r4
1000b6b8:	313fff15 	stw	r4,-4(r6)
1000b6bc:	5a3ff236 	bltu	r11,r8,1000b688 <__alt_data_end+0xf800b688>
1000b6c0:	0406303a 	nor	r3,zero,r16
1000b6c4:	1a07883a 	add	r3,r3,r8
1000b6c8:	1806d0ba 	srli	r3,r3,2
1000b6cc:	18c00044 	addi	r3,r3,1
1000b6d0:	18c7883a 	add	r3,r3,r3
1000b6d4:	18c7883a 	add	r3,r3,r3
1000b6d8:	50d5883a 	add	r10,r10,r3
1000b6dc:	50ffff04 	addi	r3,r10,-4
1000b6e0:	2000041e 	bne	r4,zero,1000b6f4 <__mdiff+0x194>
1000b6e4:	18ffff04 	addi	r3,r3,-4
1000b6e8:	19000017 	ldw	r4,0(r3)
1000b6ec:	4a7fffc4 	addi	r9,r9,-1
1000b6f0:	203ffc26 	beq	r4,zero,1000b6e4 <__alt_data_end+0xf800b6e4>
1000b6f4:	12400415 	stw	r9,16(r2)
1000b6f8:	dfc00517 	ldw	ra,20(sp)
1000b6fc:	dd000417 	ldw	r20,16(sp)
1000b700:	dcc00317 	ldw	r19,12(sp)
1000b704:	dc800217 	ldw	r18,8(sp)
1000b708:	dc400117 	ldw	r17,4(sp)
1000b70c:	dc000017 	ldw	r16,0(sp)
1000b710:	dec00604 	addi	sp,sp,24
1000b714:	f800283a 	ret
1000b718:	000b883a 	mov	r5,zero
1000b71c:	000ab7c0 	call	1000ab7c <_Balloc>
1000b720:	00c00044 	movi	r3,1
1000b724:	10c00415 	stw	r3,16(r2)
1000b728:	10000515 	stw	zero,20(r2)
1000b72c:	003ff206 	br	1000b6f8 <__alt_data_end+0xf800b6f8>
1000b730:	8023883a 	mov	r17,r16
1000b734:	0029883a 	mov	r20,zero
1000b738:	4021883a 	mov	r16,r8
1000b73c:	003fad06 	br	1000b5f4 <__alt_data_end+0xf800b5f4>
1000b740:	9005883a 	mov	r2,r18
1000b744:	94400504 	addi	r17,r18,20
1000b748:	9c000504 	addi	r16,r19,20
1000b74c:	9825883a 	mov	r18,r19
1000b750:	05000044 	movi	r20,1
1000b754:	1027883a 	mov	r19,r2
1000b758:	003fa606 	br	1000b5f4 <__alt_data_end+0xf800b5f4>

1000b75c <__ulp>:
1000b75c:	295ffc2c 	andhi	r5,r5,32752
1000b760:	00bf3034 	movhi	r2,64704
1000b764:	2887883a 	add	r3,r5,r2
1000b768:	00c0020e 	bge	zero,r3,1000b774 <__ulp+0x18>
1000b76c:	0005883a 	mov	r2,zero
1000b770:	f800283a 	ret
1000b774:	00c7c83a 	sub	r3,zero,r3
1000b778:	1807d53a 	srai	r3,r3,20
1000b77c:	008004c4 	movi	r2,19
1000b780:	10c00b0e 	bge	r2,r3,1000b7b0 <__ulp+0x54>
1000b784:	18bffb04 	addi	r2,r3,-20
1000b788:	01000784 	movi	r4,30
1000b78c:	0007883a 	mov	r3,zero
1000b790:	20800516 	blt	r4,r2,1000b7a8 <__ulp+0x4c>
1000b794:	010007c4 	movi	r4,31
1000b798:	2089c83a 	sub	r4,r4,r2
1000b79c:	00800044 	movi	r2,1
1000b7a0:	1104983a 	sll	r2,r2,r4
1000b7a4:	f800283a 	ret
1000b7a8:	00800044 	movi	r2,1
1000b7ac:	f800283a 	ret
1000b7b0:	01400234 	movhi	r5,8
1000b7b4:	28c7d83a 	sra	r3,r5,r3
1000b7b8:	0005883a 	mov	r2,zero
1000b7bc:	f800283a 	ret

1000b7c0 <__b2d>:
1000b7c0:	defffa04 	addi	sp,sp,-24
1000b7c4:	dc000015 	stw	r16,0(sp)
1000b7c8:	24000417 	ldw	r16,16(r4)
1000b7cc:	dc400115 	stw	r17,4(sp)
1000b7d0:	24400504 	addi	r17,r4,20
1000b7d4:	8421883a 	add	r16,r16,r16
1000b7d8:	8421883a 	add	r16,r16,r16
1000b7dc:	8c21883a 	add	r16,r17,r16
1000b7e0:	dc800215 	stw	r18,8(sp)
1000b7e4:	84bfff17 	ldw	r18,-4(r16)
1000b7e8:	dd000415 	stw	r20,16(sp)
1000b7ec:	dcc00315 	stw	r19,12(sp)
1000b7f0:	9009883a 	mov	r4,r18
1000b7f4:	2829883a 	mov	r20,r5
1000b7f8:	dfc00515 	stw	ra,20(sp)
1000b7fc:	000ae980 	call	1000ae98 <__hi0bits>
1000b800:	00c00804 	movi	r3,32
1000b804:	1889c83a 	sub	r4,r3,r2
1000b808:	a1000015 	stw	r4,0(r20)
1000b80c:	01000284 	movi	r4,10
1000b810:	84ffff04 	addi	r19,r16,-4
1000b814:	20801216 	blt	r4,r2,1000b860 <__b2d+0xa0>
1000b818:	018002c4 	movi	r6,11
1000b81c:	308dc83a 	sub	r6,r6,r2
1000b820:	9186d83a 	srl	r3,r18,r6
1000b824:	18cffc34 	orhi	r3,r3,16368
1000b828:	8cc0212e 	bgeu	r17,r19,1000b8b0 <__b2d+0xf0>
1000b82c:	813ffe17 	ldw	r4,-8(r16)
1000b830:	218cd83a 	srl	r6,r4,r6
1000b834:	10800544 	addi	r2,r2,21
1000b838:	9084983a 	sll	r2,r18,r2
1000b83c:	1184b03a 	or	r2,r2,r6
1000b840:	dfc00517 	ldw	ra,20(sp)
1000b844:	dd000417 	ldw	r20,16(sp)
1000b848:	dcc00317 	ldw	r19,12(sp)
1000b84c:	dc800217 	ldw	r18,8(sp)
1000b850:	dc400117 	ldw	r17,4(sp)
1000b854:	dc000017 	ldw	r16,0(sp)
1000b858:	dec00604 	addi	sp,sp,24
1000b85c:	f800283a 	ret
1000b860:	8cc00f2e 	bgeu	r17,r19,1000b8a0 <__b2d+0xe0>
1000b864:	117ffd44 	addi	r5,r2,-11
1000b868:	80bffe17 	ldw	r2,-8(r16)
1000b86c:	28000e26 	beq	r5,zero,1000b8a8 <__b2d+0xe8>
1000b870:	1949c83a 	sub	r4,r3,r5
1000b874:	9164983a 	sll	r18,r18,r5
1000b878:	1106d83a 	srl	r3,r2,r4
1000b87c:	81bffe04 	addi	r6,r16,-8
1000b880:	948ffc34 	orhi	r18,r18,16368
1000b884:	90c6b03a 	or	r3,r18,r3
1000b888:	89800e2e 	bgeu	r17,r6,1000b8c4 <__b2d+0x104>
1000b88c:	81bffd17 	ldw	r6,-12(r16)
1000b890:	1144983a 	sll	r2,r2,r5
1000b894:	310ad83a 	srl	r5,r6,r4
1000b898:	2884b03a 	or	r2,r5,r2
1000b89c:	003fe806 	br	1000b840 <__alt_data_end+0xf800b840>
1000b8a0:	10bffd44 	addi	r2,r2,-11
1000b8a4:	1000041e 	bne	r2,zero,1000b8b8 <__b2d+0xf8>
1000b8a8:	90cffc34 	orhi	r3,r18,16368
1000b8ac:	003fe406 	br	1000b840 <__alt_data_end+0xf800b840>
1000b8b0:	000d883a 	mov	r6,zero
1000b8b4:	003fdf06 	br	1000b834 <__alt_data_end+0xf800b834>
1000b8b8:	90a4983a 	sll	r18,r18,r2
1000b8bc:	0005883a 	mov	r2,zero
1000b8c0:	003ff906 	br	1000b8a8 <__alt_data_end+0xf800b8a8>
1000b8c4:	1144983a 	sll	r2,r2,r5
1000b8c8:	003fdd06 	br	1000b840 <__alt_data_end+0xf800b840>

1000b8cc <__d2b>:
1000b8cc:	defff804 	addi	sp,sp,-32
1000b8d0:	dc000215 	stw	r16,8(sp)
1000b8d4:	3021883a 	mov	r16,r6
1000b8d8:	dc400315 	stw	r17,12(sp)
1000b8dc:	8022907a 	slli	r17,r16,1
1000b8e0:	dd000615 	stw	r20,24(sp)
1000b8e4:	2829883a 	mov	r20,r5
1000b8e8:	01400044 	movi	r5,1
1000b8ec:	dcc00515 	stw	r19,20(sp)
1000b8f0:	dc800415 	stw	r18,16(sp)
1000b8f4:	dfc00715 	stw	ra,28(sp)
1000b8f8:	3825883a 	mov	r18,r7
1000b8fc:	8822d57a 	srli	r17,r17,21
1000b900:	000ab7c0 	call	1000ab7c <_Balloc>
1000b904:	1027883a 	mov	r19,r2
1000b908:	00800434 	movhi	r2,16
1000b90c:	10bfffc4 	addi	r2,r2,-1
1000b910:	808c703a 	and	r6,r16,r2
1000b914:	88000126 	beq	r17,zero,1000b91c <__d2b+0x50>
1000b918:	31800434 	orhi	r6,r6,16
1000b91c:	d9800015 	stw	r6,0(sp)
1000b920:	a0002426 	beq	r20,zero,1000b9b4 <__d2b+0xe8>
1000b924:	d9000104 	addi	r4,sp,4
1000b928:	dd000115 	stw	r20,4(sp)
1000b92c:	000af000 	call	1000af00 <__lo0bits>
1000b930:	d8c00017 	ldw	r3,0(sp)
1000b934:	10002f1e 	bne	r2,zero,1000b9f4 <__d2b+0x128>
1000b938:	d9000117 	ldw	r4,4(sp)
1000b93c:	99000515 	stw	r4,20(r19)
1000b940:	1821003a 	cmpeq	r16,r3,zero
1000b944:	01000084 	movi	r4,2
1000b948:	2421c83a 	sub	r16,r4,r16
1000b94c:	98c00615 	stw	r3,24(r19)
1000b950:	9c000415 	stw	r16,16(r19)
1000b954:	88001f1e 	bne	r17,zero,1000b9d4 <__d2b+0x108>
1000b958:	10bef384 	addi	r2,r2,-1074
1000b95c:	90800015 	stw	r2,0(r18)
1000b960:	00900034 	movhi	r2,16384
1000b964:	10bfffc4 	addi	r2,r2,-1
1000b968:	8085883a 	add	r2,r16,r2
1000b96c:	1085883a 	add	r2,r2,r2
1000b970:	1085883a 	add	r2,r2,r2
1000b974:	9885883a 	add	r2,r19,r2
1000b978:	11000517 	ldw	r4,20(r2)
1000b97c:	8020917a 	slli	r16,r16,5
1000b980:	000ae980 	call	1000ae98 <__hi0bits>
1000b984:	d8c00817 	ldw	r3,32(sp)
1000b988:	8085c83a 	sub	r2,r16,r2
1000b98c:	18800015 	stw	r2,0(r3)
1000b990:	9805883a 	mov	r2,r19
1000b994:	dfc00717 	ldw	ra,28(sp)
1000b998:	dd000617 	ldw	r20,24(sp)
1000b99c:	dcc00517 	ldw	r19,20(sp)
1000b9a0:	dc800417 	ldw	r18,16(sp)
1000b9a4:	dc400317 	ldw	r17,12(sp)
1000b9a8:	dc000217 	ldw	r16,8(sp)
1000b9ac:	dec00804 	addi	sp,sp,32
1000b9b0:	f800283a 	ret
1000b9b4:	d809883a 	mov	r4,sp
1000b9b8:	000af000 	call	1000af00 <__lo0bits>
1000b9bc:	d8c00017 	ldw	r3,0(sp)
1000b9c0:	04000044 	movi	r16,1
1000b9c4:	9c000415 	stw	r16,16(r19)
1000b9c8:	98c00515 	stw	r3,20(r19)
1000b9cc:	10800804 	addi	r2,r2,32
1000b9d0:	883fe126 	beq	r17,zero,1000b958 <__alt_data_end+0xf800b958>
1000b9d4:	00c00d44 	movi	r3,53
1000b9d8:	8c7ef344 	addi	r17,r17,-1075
1000b9dc:	88a3883a 	add	r17,r17,r2
1000b9e0:	1885c83a 	sub	r2,r3,r2
1000b9e4:	d8c00817 	ldw	r3,32(sp)
1000b9e8:	94400015 	stw	r17,0(r18)
1000b9ec:	18800015 	stw	r2,0(r3)
1000b9f0:	003fe706 	br	1000b990 <__alt_data_end+0xf800b990>
1000b9f4:	01000804 	movi	r4,32
1000b9f8:	2089c83a 	sub	r4,r4,r2
1000b9fc:	1908983a 	sll	r4,r3,r4
1000ba00:	d9400117 	ldw	r5,4(sp)
1000ba04:	1886d83a 	srl	r3,r3,r2
1000ba08:	2148b03a 	or	r4,r4,r5
1000ba0c:	99000515 	stw	r4,20(r19)
1000ba10:	d8c00015 	stw	r3,0(sp)
1000ba14:	003fca06 	br	1000b940 <__alt_data_end+0xf800b940>

1000ba18 <__ratio>:
1000ba18:	defff904 	addi	sp,sp,-28
1000ba1c:	dc400315 	stw	r17,12(sp)
1000ba20:	2823883a 	mov	r17,r5
1000ba24:	d9400104 	addi	r5,sp,4
1000ba28:	dfc00615 	stw	ra,24(sp)
1000ba2c:	dcc00515 	stw	r19,20(sp)
1000ba30:	dc800415 	stw	r18,16(sp)
1000ba34:	2027883a 	mov	r19,r4
1000ba38:	dc000215 	stw	r16,8(sp)
1000ba3c:	000b7c00 	call	1000b7c0 <__b2d>
1000ba40:	d80b883a 	mov	r5,sp
1000ba44:	8809883a 	mov	r4,r17
1000ba48:	1025883a 	mov	r18,r2
1000ba4c:	1821883a 	mov	r16,r3
1000ba50:	000b7c00 	call	1000b7c0 <__b2d>
1000ba54:	8a000417 	ldw	r8,16(r17)
1000ba58:	99000417 	ldw	r4,16(r19)
1000ba5c:	d9400117 	ldw	r5,4(sp)
1000ba60:	2209c83a 	sub	r4,r4,r8
1000ba64:	2010917a 	slli	r8,r4,5
1000ba68:	d9000017 	ldw	r4,0(sp)
1000ba6c:	2909c83a 	sub	r4,r5,r4
1000ba70:	4109883a 	add	r4,r8,r4
1000ba74:	01000e0e 	bge	zero,r4,1000bab0 <__ratio+0x98>
1000ba78:	2008953a 	slli	r4,r4,20
1000ba7c:	2421883a 	add	r16,r4,r16
1000ba80:	100d883a 	mov	r6,r2
1000ba84:	180f883a 	mov	r7,r3
1000ba88:	9009883a 	mov	r4,r18
1000ba8c:	800b883a 	mov	r5,r16
1000ba90:	000f9280 	call	1000f928 <__divdf3>
1000ba94:	dfc00617 	ldw	ra,24(sp)
1000ba98:	dcc00517 	ldw	r19,20(sp)
1000ba9c:	dc800417 	ldw	r18,16(sp)
1000baa0:	dc400317 	ldw	r17,12(sp)
1000baa4:	dc000217 	ldw	r16,8(sp)
1000baa8:	dec00704 	addi	sp,sp,28
1000baac:	f800283a 	ret
1000bab0:	2008953a 	slli	r4,r4,20
1000bab4:	1907c83a 	sub	r3,r3,r4
1000bab8:	003ff106 	br	1000ba80 <__alt_data_end+0xf800ba80>

1000babc <_mprec_log10>:
1000babc:	defffe04 	addi	sp,sp,-8
1000bac0:	dc000015 	stw	r16,0(sp)
1000bac4:	dfc00115 	stw	ra,4(sp)
1000bac8:	008005c4 	movi	r2,23
1000bacc:	2021883a 	mov	r16,r4
1000bad0:	11000d0e 	bge	r2,r4,1000bb08 <_mprec_log10+0x4c>
1000bad4:	0005883a 	mov	r2,zero
1000bad8:	00cffc34 	movhi	r3,16368
1000badc:	843fffc4 	addi	r16,r16,-1
1000bae0:	000d883a 	mov	r6,zero
1000bae4:	01d00934 	movhi	r7,16420
1000bae8:	1009883a 	mov	r4,r2
1000baec:	180b883a 	mov	r5,r3
1000baf0:	00105500 	call	10010550 <__muldf3>
1000baf4:	803ff91e 	bne	r16,zero,1000badc <__alt_data_end+0xf800badc>
1000baf8:	dfc00117 	ldw	ra,4(sp)
1000bafc:	dc000017 	ldw	r16,0(sp)
1000bb00:	dec00204 	addi	sp,sp,8
1000bb04:	f800283a 	ret
1000bb08:	202090fa 	slli	r16,r4,3
1000bb0c:	00840074 	movhi	r2,4097
1000bb10:	10929c04 	addi	r2,r2,19056
1000bb14:	1421883a 	add	r16,r2,r16
1000bb18:	80800017 	ldw	r2,0(r16)
1000bb1c:	80c00117 	ldw	r3,4(r16)
1000bb20:	dfc00117 	ldw	ra,4(sp)
1000bb24:	dc000017 	ldw	r16,0(sp)
1000bb28:	dec00204 	addi	sp,sp,8
1000bb2c:	f800283a 	ret

1000bb30 <__copybits>:
1000bb30:	297fffc4 	addi	r5,r5,-1
1000bb34:	280fd17a 	srai	r7,r5,5
1000bb38:	30c00417 	ldw	r3,16(r6)
1000bb3c:	30800504 	addi	r2,r6,20
1000bb40:	39c00044 	addi	r7,r7,1
1000bb44:	18c7883a 	add	r3,r3,r3
1000bb48:	39cf883a 	add	r7,r7,r7
1000bb4c:	18c7883a 	add	r3,r3,r3
1000bb50:	39cf883a 	add	r7,r7,r7
1000bb54:	10c7883a 	add	r3,r2,r3
1000bb58:	21cf883a 	add	r7,r4,r7
1000bb5c:	10c00d2e 	bgeu	r2,r3,1000bb94 <__copybits+0x64>
1000bb60:	200b883a 	mov	r5,r4
1000bb64:	12000017 	ldw	r8,0(r2)
1000bb68:	29400104 	addi	r5,r5,4
1000bb6c:	10800104 	addi	r2,r2,4
1000bb70:	2a3fff15 	stw	r8,-4(r5)
1000bb74:	10fffb36 	bltu	r2,r3,1000bb64 <__alt_data_end+0xf800bb64>
1000bb78:	1985c83a 	sub	r2,r3,r6
1000bb7c:	10bffac4 	addi	r2,r2,-21
1000bb80:	1004d0ba 	srli	r2,r2,2
1000bb84:	10800044 	addi	r2,r2,1
1000bb88:	1085883a 	add	r2,r2,r2
1000bb8c:	1085883a 	add	r2,r2,r2
1000bb90:	2089883a 	add	r4,r4,r2
1000bb94:	21c0032e 	bgeu	r4,r7,1000bba4 <__copybits+0x74>
1000bb98:	20000015 	stw	zero,0(r4)
1000bb9c:	21000104 	addi	r4,r4,4
1000bba0:	21fffd36 	bltu	r4,r7,1000bb98 <__alt_data_end+0xf800bb98>
1000bba4:	f800283a 	ret

1000bba8 <__any_on>:
1000bba8:	20c00417 	ldw	r3,16(r4)
1000bbac:	2805d17a 	srai	r2,r5,5
1000bbb0:	21000504 	addi	r4,r4,20
1000bbb4:	18800d0e 	bge	r3,r2,1000bbec <__any_on+0x44>
1000bbb8:	18c7883a 	add	r3,r3,r3
1000bbbc:	18c7883a 	add	r3,r3,r3
1000bbc0:	20c7883a 	add	r3,r4,r3
1000bbc4:	20c0192e 	bgeu	r4,r3,1000bc2c <__any_on+0x84>
1000bbc8:	18bfff17 	ldw	r2,-4(r3)
1000bbcc:	18ffff04 	addi	r3,r3,-4
1000bbd0:	1000041e 	bne	r2,zero,1000bbe4 <__any_on+0x3c>
1000bbd4:	20c0142e 	bgeu	r4,r3,1000bc28 <__any_on+0x80>
1000bbd8:	18ffff04 	addi	r3,r3,-4
1000bbdc:	19400017 	ldw	r5,0(r3)
1000bbe0:	283ffc26 	beq	r5,zero,1000bbd4 <__alt_data_end+0xf800bbd4>
1000bbe4:	00800044 	movi	r2,1
1000bbe8:	f800283a 	ret
1000bbec:	10c00a0e 	bge	r2,r3,1000bc18 <__any_on+0x70>
1000bbf0:	1085883a 	add	r2,r2,r2
1000bbf4:	1085883a 	add	r2,r2,r2
1000bbf8:	294007cc 	andi	r5,r5,31
1000bbfc:	2087883a 	add	r3,r4,r2
1000bc00:	283ff026 	beq	r5,zero,1000bbc4 <__alt_data_end+0xf800bbc4>
1000bc04:	19800017 	ldw	r6,0(r3)
1000bc08:	3144d83a 	srl	r2,r6,r5
1000bc0c:	114a983a 	sll	r5,r2,r5
1000bc10:	317ff41e 	bne	r6,r5,1000bbe4 <__alt_data_end+0xf800bbe4>
1000bc14:	003feb06 	br	1000bbc4 <__alt_data_end+0xf800bbc4>
1000bc18:	1085883a 	add	r2,r2,r2
1000bc1c:	1085883a 	add	r2,r2,r2
1000bc20:	2087883a 	add	r3,r4,r2
1000bc24:	003fe706 	br	1000bbc4 <__alt_data_end+0xf800bbc4>
1000bc28:	f800283a 	ret
1000bc2c:	0005883a 	mov	r2,zero
1000bc30:	f800283a 	ret

1000bc34 <_realloc_r>:
1000bc34:	defff604 	addi	sp,sp,-40
1000bc38:	dc800215 	stw	r18,8(sp)
1000bc3c:	dfc00915 	stw	ra,36(sp)
1000bc40:	df000815 	stw	fp,32(sp)
1000bc44:	ddc00715 	stw	r23,28(sp)
1000bc48:	dd800615 	stw	r22,24(sp)
1000bc4c:	dd400515 	stw	r21,20(sp)
1000bc50:	dd000415 	stw	r20,16(sp)
1000bc54:	dcc00315 	stw	r19,12(sp)
1000bc58:	dc400115 	stw	r17,4(sp)
1000bc5c:	dc000015 	stw	r16,0(sp)
1000bc60:	3025883a 	mov	r18,r6
1000bc64:	2800b726 	beq	r5,zero,1000bf44 <_realloc_r+0x310>
1000bc68:	282b883a 	mov	r21,r5
1000bc6c:	2029883a 	mov	r20,r4
1000bc70:	0011ebc0 	call	10011ebc <__malloc_lock>
1000bc74:	a8bfff17 	ldw	r2,-4(r21)
1000bc78:	043fff04 	movi	r16,-4
1000bc7c:	90c002c4 	addi	r3,r18,11
1000bc80:	01000584 	movi	r4,22
1000bc84:	acfffe04 	addi	r19,r21,-8
1000bc88:	1420703a 	and	r16,r2,r16
1000bc8c:	20c0332e 	bgeu	r4,r3,1000bd5c <_realloc_r+0x128>
1000bc90:	047ffe04 	movi	r17,-8
1000bc94:	1c62703a 	and	r17,r3,r17
1000bc98:	8807883a 	mov	r3,r17
1000bc9c:	88005816 	blt	r17,zero,1000be00 <_realloc_r+0x1cc>
1000bca0:	8c805736 	bltu	r17,r18,1000be00 <_realloc_r+0x1cc>
1000bca4:	80c0300e 	bge	r16,r3,1000bd68 <_realloc_r+0x134>
1000bca8:	070400b4 	movhi	fp,4098
1000bcac:	e72e7504 	addi	fp,fp,-17964
1000bcb0:	e1c00217 	ldw	r7,8(fp)
1000bcb4:	9c09883a 	add	r4,r19,r16
1000bcb8:	22000117 	ldw	r8,4(r4)
1000bcbc:	21c06326 	beq	r4,r7,1000be4c <_realloc_r+0x218>
1000bcc0:	017fff84 	movi	r5,-2
1000bcc4:	414a703a 	and	r5,r8,r5
1000bcc8:	214b883a 	add	r5,r4,r5
1000bccc:	29800117 	ldw	r6,4(r5)
1000bcd0:	3180004c 	andi	r6,r6,1
1000bcd4:	30003f26 	beq	r6,zero,1000bdd4 <_realloc_r+0x1a0>
1000bcd8:	1080004c 	andi	r2,r2,1
1000bcdc:	10008326 	beq	r2,zero,1000beec <_realloc_r+0x2b8>
1000bce0:	900b883a 	mov	r5,r18
1000bce4:	a009883a 	mov	r4,r20
1000bce8:	0009ec00 	call	10009ec0 <_malloc_r>
1000bcec:	1025883a 	mov	r18,r2
1000bcf0:	10011e26 	beq	r2,zero,1000c16c <_realloc_r+0x538>
1000bcf4:	a93fff17 	ldw	r4,-4(r21)
1000bcf8:	10fffe04 	addi	r3,r2,-8
1000bcfc:	00bfff84 	movi	r2,-2
1000bd00:	2084703a 	and	r2,r4,r2
1000bd04:	9885883a 	add	r2,r19,r2
1000bd08:	1880ee26 	beq	r3,r2,1000c0c4 <_realloc_r+0x490>
1000bd0c:	81bfff04 	addi	r6,r16,-4
1000bd10:	00800904 	movi	r2,36
1000bd14:	1180b836 	bltu	r2,r6,1000bff8 <_realloc_r+0x3c4>
1000bd18:	00c004c4 	movi	r3,19
1000bd1c:	19809636 	bltu	r3,r6,1000bf78 <_realloc_r+0x344>
1000bd20:	9005883a 	mov	r2,r18
1000bd24:	a807883a 	mov	r3,r21
1000bd28:	19000017 	ldw	r4,0(r3)
1000bd2c:	11000015 	stw	r4,0(r2)
1000bd30:	19000117 	ldw	r4,4(r3)
1000bd34:	11000115 	stw	r4,4(r2)
1000bd38:	18c00217 	ldw	r3,8(r3)
1000bd3c:	10c00215 	stw	r3,8(r2)
1000bd40:	a80b883a 	mov	r5,r21
1000bd44:	a009883a 	mov	r4,r20
1000bd48:	00092c80 	call	100092c8 <_free_r>
1000bd4c:	a009883a 	mov	r4,r20
1000bd50:	0011ee00 	call	10011ee0 <__malloc_unlock>
1000bd54:	9005883a 	mov	r2,r18
1000bd58:	00001206 	br	1000bda4 <_realloc_r+0x170>
1000bd5c:	00c00404 	movi	r3,16
1000bd60:	1823883a 	mov	r17,r3
1000bd64:	003fce06 	br	1000bca0 <__alt_data_end+0xf800bca0>
1000bd68:	a825883a 	mov	r18,r21
1000bd6c:	8445c83a 	sub	r2,r16,r17
1000bd70:	00c003c4 	movi	r3,15
1000bd74:	18802636 	bltu	r3,r2,1000be10 <_realloc_r+0x1dc>
1000bd78:	99800117 	ldw	r6,4(r19)
1000bd7c:	9c07883a 	add	r3,r19,r16
1000bd80:	3180004c 	andi	r6,r6,1
1000bd84:	3420b03a 	or	r16,r6,r16
1000bd88:	9c000115 	stw	r16,4(r19)
1000bd8c:	18800117 	ldw	r2,4(r3)
1000bd90:	10800054 	ori	r2,r2,1
1000bd94:	18800115 	stw	r2,4(r3)
1000bd98:	a009883a 	mov	r4,r20
1000bd9c:	0011ee00 	call	10011ee0 <__malloc_unlock>
1000bda0:	9005883a 	mov	r2,r18
1000bda4:	dfc00917 	ldw	ra,36(sp)
1000bda8:	df000817 	ldw	fp,32(sp)
1000bdac:	ddc00717 	ldw	r23,28(sp)
1000bdb0:	dd800617 	ldw	r22,24(sp)
1000bdb4:	dd400517 	ldw	r21,20(sp)
1000bdb8:	dd000417 	ldw	r20,16(sp)
1000bdbc:	dcc00317 	ldw	r19,12(sp)
1000bdc0:	dc800217 	ldw	r18,8(sp)
1000bdc4:	dc400117 	ldw	r17,4(sp)
1000bdc8:	dc000017 	ldw	r16,0(sp)
1000bdcc:	dec00a04 	addi	sp,sp,40
1000bdd0:	f800283a 	ret
1000bdd4:	017fff04 	movi	r5,-4
1000bdd8:	414a703a 	and	r5,r8,r5
1000bddc:	814d883a 	add	r6,r16,r5
1000bde0:	30c01f16 	blt	r6,r3,1000be60 <_realloc_r+0x22c>
1000bde4:	20800317 	ldw	r2,12(r4)
1000bde8:	20c00217 	ldw	r3,8(r4)
1000bdec:	a825883a 	mov	r18,r21
1000bdf0:	3021883a 	mov	r16,r6
1000bdf4:	18800315 	stw	r2,12(r3)
1000bdf8:	10c00215 	stw	r3,8(r2)
1000bdfc:	003fdb06 	br	1000bd6c <__alt_data_end+0xf800bd6c>
1000be00:	00800304 	movi	r2,12
1000be04:	a0800015 	stw	r2,0(r20)
1000be08:	0005883a 	mov	r2,zero
1000be0c:	003fe506 	br	1000bda4 <__alt_data_end+0xf800bda4>
1000be10:	98c00117 	ldw	r3,4(r19)
1000be14:	9c4b883a 	add	r5,r19,r17
1000be18:	11000054 	ori	r4,r2,1
1000be1c:	18c0004c 	andi	r3,r3,1
1000be20:	1c62b03a 	or	r17,r3,r17
1000be24:	9c400115 	stw	r17,4(r19)
1000be28:	29000115 	stw	r4,4(r5)
1000be2c:	2885883a 	add	r2,r5,r2
1000be30:	10c00117 	ldw	r3,4(r2)
1000be34:	29400204 	addi	r5,r5,8
1000be38:	a009883a 	mov	r4,r20
1000be3c:	18c00054 	ori	r3,r3,1
1000be40:	10c00115 	stw	r3,4(r2)
1000be44:	00092c80 	call	100092c8 <_free_r>
1000be48:	003fd306 	br	1000bd98 <__alt_data_end+0xf800bd98>
1000be4c:	017fff04 	movi	r5,-4
1000be50:	414a703a 	and	r5,r8,r5
1000be54:	89800404 	addi	r6,r17,16
1000be58:	8151883a 	add	r8,r16,r5
1000be5c:	4180590e 	bge	r8,r6,1000bfc4 <_realloc_r+0x390>
1000be60:	1080004c 	andi	r2,r2,1
1000be64:	103f9e1e 	bne	r2,zero,1000bce0 <__alt_data_end+0xf800bce0>
1000be68:	adbffe17 	ldw	r22,-8(r21)
1000be6c:	00bfff04 	movi	r2,-4
1000be70:	9dadc83a 	sub	r22,r19,r22
1000be74:	b1800117 	ldw	r6,4(r22)
1000be78:	3084703a 	and	r2,r6,r2
1000be7c:	20002026 	beq	r4,zero,1000bf00 <_realloc_r+0x2cc>
1000be80:	80af883a 	add	r23,r16,r2
1000be84:	b96f883a 	add	r23,r23,r5
1000be88:	21c05f26 	beq	r4,r7,1000c008 <_realloc_r+0x3d4>
1000be8c:	b8c01c16 	blt	r23,r3,1000bf00 <_realloc_r+0x2cc>
1000be90:	20800317 	ldw	r2,12(r4)
1000be94:	20c00217 	ldw	r3,8(r4)
1000be98:	81bfff04 	addi	r6,r16,-4
1000be9c:	01000904 	movi	r4,36
1000bea0:	18800315 	stw	r2,12(r3)
1000bea4:	10c00215 	stw	r3,8(r2)
1000bea8:	b0c00217 	ldw	r3,8(r22)
1000beac:	b0800317 	ldw	r2,12(r22)
1000beb0:	b4800204 	addi	r18,r22,8
1000beb4:	18800315 	stw	r2,12(r3)
1000beb8:	10c00215 	stw	r3,8(r2)
1000bebc:	21801b36 	bltu	r4,r6,1000bf2c <_realloc_r+0x2f8>
1000bec0:	008004c4 	movi	r2,19
1000bec4:	1180352e 	bgeu	r2,r6,1000bf9c <_realloc_r+0x368>
1000bec8:	a8800017 	ldw	r2,0(r21)
1000becc:	b0800215 	stw	r2,8(r22)
1000bed0:	a8800117 	ldw	r2,4(r21)
1000bed4:	b0800315 	stw	r2,12(r22)
1000bed8:	008006c4 	movi	r2,27
1000bedc:	11807f36 	bltu	r2,r6,1000c0dc <_realloc_r+0x4a8>
1000bee0:	b0800404 	addi	r2,r22,16
1000bee4:	ad400204 	addi	r21,r21,8
1000bee8:	00002d06 	br	1000bfa0 <_realloc_r+0x36c>
1000beec:	adbffe17 	ldw	r22,-8(r21)
1000bef0:	00bfff04 	movi	r2,-4
1000bef4:	9dadc83a 	sub	r22,r19,r22
1000bef8:	b1000117 	ldw	r4,4(r22)
1000befc:	2084703a 	and	r2,r4,r2
1000bf00:	b03f7726 	beq	r22,zero,1000bce0 <__alt_data_end+0xf800bce0>
1000bf04:	80af883a 	add	r23,r16,r2
1000bf08:	b8ff7516 	blt	r23,r3,1000bce0 <__alt_data_end+0xf800bce0>
1000bf0c:	b0800317 	ldw	r2,12(r22)
1000bf10:	b0c00217 	ldw	r3,8(r22)
1000bf14:	81bfff04 	addi	r6,r16,-4
1000bf18:	01000904 	movi	r4,36
1000bf1c:	18800315 	stw	r2,12(r3)
1000bf20:	10c00215 	stw	r3,8(r2)
1000bf24:	b4800204 	addi	r18,r22,8
1000bf28:	21bfe52e 	bgeu	r4,r6,1000bec0 <__alt_data_end+0xf800bec0>
1000bf2c:	a80b883a 	mov	r5,r21
1000bf30:	9009883a 	mov	r4,r18
1000bf34:	000a8f80 	call	1000a8f8 <memmove>
1000bf38:	b821883a 	mov	r16,r23
1000bf3c:	b027883a 	mov	r19,r22
1000bf40:	003f8a06 	br	1000bd6c <__alt_data_end+0xf800bd6c>
1000bf44:	300b883a 	mov	r5,r6
1000bf48:	dfc00917 	ldw	ra,36(sp)
1000bf4c:	df000817 	ldw	fp,32(sp)
1000bf50:	ddc00717 	ldw	r23,28(sp)
1000bf54:	dd800617 	ldw	r22,24(sp)
1000bf58:	dd400517 	ldw	r21,20(sp)
1000bf5c:	dd000417 	ldw	r20,16(sp)
1000bf60:	dcc00317 	ldw	r19,12(sp)
1000bf64:	dc800217 	ldw	r18,8(sp)
1000bf68:	dc400117 	ldw	r17,4(sp)
1000bf6c:	dc000017 	ldw	r16,0(sp)
1000bf70:	dec00a04 	addi	sp,sp,40
1000bf74:	0009ec01 	jmpi	10009ec0 <_malloc_r>
1000bf78:	a8c00017 	ldw	r3,0(r21)
1000bf7c:	90c00015 	stw	r3,0(r18)
1000bf80:	a8c00117 	ldw	r3,4(r21)
1000bf84:	90c00115 	stw	r3,4(r18)
1000bf88:	00c006c4 	movi	r3,27
1000bf8c:	19804536 	bltu	r3,r6,1000c0a4 <_realloc_r+0x470>
1000bf90:	90800204 	addi	r2,r18,8
1000bf94:	a8c00204 	addi	r3,r21,8
1000bf98:	003f6306 	br	1000bd28 <__alt_data_end+0xf800bd28>
1000bf9c:	9005883a 	mov	r2,r18
1000bfa0:	a8c00017 	ldw	r3,0(r21)
1000bfa4:	b821883a 	mov	r16,r23
1000bfa8:	b027883a 	mov	r19,r22
1000bfac:	10c00015 	stw	r3,0(r2)
1000bfb0:	a8c00117 	ldw	r3,4(r21)
1000bfb4:	10c00115 	stw	r3,4(r2)
1000bfb8:	a8c00217 	ldw	r3,8(r21)
1000bfbc:	10c00215 	stw	r3,8(r2)
1000bfc0:	003f6a06 	br	1000bd6c <__alt_data_end+0xf800bd6c>
1000bfc4:	9c67883a 	add	r19,r19,r17
1000bfc8:	4445c83a 	sub	r2,r8,r17
1000bfcc:	e4c00215 	stw	r19,8(fp)
1000bfd0:	10800054 	ori	r2,r2,1
1000bfd4:	98800115 	stw	r2,4(r19)
1000bfd8:	a8bfff17 	ldw	r2,-4(r21)
1000bfdc:	a009883a 	mov	r4,r20
1000bfe0:	1080004c 	andi	r2,r2,1
1000bfe4:	1462b03a 	or	r17,r2,r17
1000bfe8:	ac7fff15 	stw	r17,-4(r21)
1000bfec:	0011ee00 	call	10011ee0 <__malloc_unlock>
1000bff0:	a805883a 	mov	r2,r21
1000bff4:	003f6b06 	br	1000bda4 <__alt_data_end+0xf800bda4>
1000bff8:	a80b883a 	mov	r5,r21
1000bffc:	9009883a 	mov	r4,r18
1000c000:	000a8f80 	call	1000a8f8 <memmove>
1000c004:	003f4e06 	br	1000bd40 <__alt_data_end+0xf800bd40>
1000c008:	89000404 	addi	r4,r17,16
1000c00c:	b93fbc16 	blt	r23,r4,1000bf00 <__alt_data_end+0xf800bf00>
1000c010:	b0800317 	ldw	r2,12(r22)
1000c014:	b0c00217 	ldw	r3,8(r22)
1000c018:	81bfff04 	addi	r6,r16,-4
1000c01c:	01000904 	movi	r4,36
1000c020:	18800315 	stw	r2,12(r3)
1000c024:	10c00215 	stw	r3,8(r2)
1000c028:	b4800204 	addi	r18,r22,8
1000c02c:	21804336 	bltu	r4,r6,1000c13c <_realloc_r+0x508>
1000c030:	008004c4 	movi	r2,19
1000c034:	11803f2e 	bgeu	r2,r6,1000c134 <_realloc_r+0x500>
1000c038:	a8800017 	ldw	r2,0(r21)
1000c03c:	b0800215 	stw	r2,8(r22)
1000c040:	a8800117 	ldw	r2,4(r21)
1000c044:	b0800315 	stw	r2,12(r22)
1000c048:	008006c4 	movi	r2,27
1000c04c:	11803f36 	bltu	r2,r6,1000c14c <_realloc_r+0x518>
1000c050:	b0800404 	addi	r2,r22,16
1000c054:	ad400204 	addi	r21,r21,8
1000c058:	a8c00017 	ldw	r3,0(r21)
1000c05c:	10c00015 	stw	r3,0(r2)
1000c060:	a8c00117 	ldw	r3,4(r21)
1000c064:	10c00115 	stw	r3,4(r2)
1000c068:	a8c00217 	ldw	r3,8(r21)
1000c06c:	10c00215 	stw	r3,8(r2)
1000c070:	b447883a 	add	r3,r22,r17
1000c074:	bc45c83a 	sub	r2,r23,r17
1000c078:	e0c00215 	stw	r3,8(fp)
1000c07c:	10800054 	ori	r2,r2,1
1000c080:	18800115 	stw	r2,4(r3)
1000c084:	b0800117 	ldw	r2,4(r22)
1000c088:	a009883a 	mov	r4,r20
1000c08c:	1080004c 	andi	r2,r2,1
1000c090:	1462b03a 	or	r17,r2,r17
1000c094:	b4400115 	stw	r17,4(r22)
1000c098:	0011ee00 	call	10011ee0 <__malloc_unlock>
1000c09c:	9005883a 	mov	r2,r18
1000c0a0:	003f4006 	br	1000bda4 <__alt_data_end+0xf800bda4>
1000c0a4:	a8c00217 	ldw	r3,8(r21)
1000c0a8:	90c00215 	stw	r3,8(r18)
1000c0ac:	a8c00317 	ldw	r3,12(r21)
1000c0b0:	90c00315 	stw	r3,12(r18)
1000c0b4:	30801126 	beq	r6,r2,1000c0fc <_realloc_r+0x4c8>
1000c0b8:	90800404 	addi	r2,r18,16
1000c0bc:	a8c00404 	addi	r3,r21,16
1000c0c0:	003f1906 	br	1000bd28 <__alt_data_end+0xf800bd28>
1000c0c4:	90ffff17 	ldw	r3,-4(r18)
1000c0c8:	00bfff04 	movi	r2,-4
1000c0cc:	a825883a 	mov	r18,r21
1000c0d0:	1884703a 	and	r2,r3,r2
1000c0d4:	80a1883a 	add	r16,r16,r2
1000c0d8:	003f2406 	br	1000bd6c <__alt_data_end+0xf800bd6c>
1000c0dc:	a8800217 	ldw	r2,8(r21)
1000c0e0:	b0800415 	stw	r2,16(r22)
1000c0e4:	a8800317 	ldw	r2,12(r21)
1000c0e8:	b0800515 	stw	r2,20(r22)
1000c0ec:	31000a26 	beq	r6,r4,1000c118 <_realloc_r+0x4e4>
1000c0f0:	b0800604 	addi	r2,r22,24
1000c0f4:	ad400404 	addi	r21,r21,16
1000c0f8:	003fa906 	br	1000bfa0 <__alt_data_end+0xf800bfa0>
1000c0fc:	a9000417 	ldw	r4,16(r21)
1000c100:	90800604 	addi	r2,r18,24
1000c104:	a8c00604 	addi	r3,r21,24
1000c108:	91000415 	stw	r4,16(r18)
1000c10c:	a9000517 	ldw	r4,20(r21)
1000c110:	91000515 	stw	r4,20(r18)
1000c114:	003f0406 	br	1000bd28 <__alt_data_end+0xf800bd28>
1000c118:	a8c00417 	ldw	r3,16(r21)
1000c11c:	ad400604 	addi	r21,r21,24
1000c120:	b0800804 	addi	r2,r22,32
1000c124:	b0c00615 	stw	r3,24(r22)
1000c128:	a8ffff17 	ldw	r3,-4(r21)
1000c12c:	b0c00715 	stw	r3,28(r22)
1000c130:	003f9b06 	br	1000bfa0 <__alt_data_end+0xf800bfa0>
1000c134:	9005883a 	mov	r2,r18
1000c138:	003fc706 	br	1000c058 <__alt_data_end+0xf800c058>
1000c13c:	a80b883a 	mov	r5,r21
1000c140:	9009883a 	mov	r4,r18
1000c144:	000a8f80 	call	1000a8f8 <memmove>
1000c148:	003fc906 	br	1000c070 <__alt_data_end+0xf800c070>
1000c14c:	a8800217 	ldw	r2,8(r21)
1000c150:	b0800415 	stw	r2,16(r22)
1000c154:	a8800317 	ldw	r2,12(r21)
1000c158:	b0800515 	stw	r2,20(r22)
1000c15c:	31000726 	beq	r6,r4,1000c17c <_realloc_r+0x548>
1000c160:	b0800604 	addi	r2,r22,24
1000c164:	ad400404 	addi	r21,r21,16
1000c168:	003fbb06 	br	1000c058 <__alt_data_end+0xf800c058>
1000c16c:	a009883a 	mov	r4,r20
1000c170:	0011ee00 	call	10011ee0 <__malloc_unlock>
1000c174:	0005883a 	mov	r2,zero
1000c178:	003f0a06 	br	1000bda4 <__alt_data_end+0xf800bda4>
1000c17c:	a8c00417 	ldw	r3,16(r21)
1000c180:	ad400604 	addi	r21,r21,24
1000c184:	b0800804 	addi	r2,r22,32
1000c188:	b0c00615 	stw	r3,24(r22)
1000c18c:	a8ffff17 	ldw	r3,-4(r21)
1000c190:	b0c00715 	stw	r3,28(r22)
1000c194:	003fb006 	br	1000c058 <__alt_data_end+0xf800c058>

1000c198 <__fpclassifyd>:
1000c198:	00a00034 	movhi	r2,32768
1000c19c:	10bfffc4 	addi	r2,r2,-1
1000c1a0:	2884703a 	and	r2,r5,r2
1000c1a4:	10000726 	beq	r2,zero,1000c1c4 <__fpclassifyd+0x2c>
1000c1a8:	00fffc34 	movhi	r3,65520
1000c1ac:	019ff834 	movhi	r6,32736
1000c1b0:	28c7883a 	add	r3,r5,r3
1000c1b4:	31bfffc4 	addi	r6,r6,-1
1000c1b8:	30c00536 	bltu	r6,r3,1000c1d0 <__fpclassifyd+0x38>
1000c1bc:	00800104 	movi	r2,4
1000c1c0:	f800283a 	ret
1000c1c4:	2000021e 	bne	r4,zero,1000c1d0 <__fpclassifyd+0x38>
1000c1c8:	00800084 	movi	r2,2
1000c1cc:	f800283a 	ret
1000c1d0:	00dffc34 	movhi	r3,32752
1000c1d4:	019ff834 	movhi	r6,32736
1000c1d8:	28cb883a 	add	r5,r5,r3
1000c1dc:	31bfffc4 	addi	r6,r6,-1
1000c1e0:	317ff62e 	bgeu	r6,r5,1000c1bc <__alt_data_end+0xf800c1bc>
1000c1e4:	01400434 	movhi	r5,16
1000c1e8:	297fffc4 	addi	r5,r5,-1
1000c1ec:	28800236 	bltu	r5,r2,1000c1f8 <__fpclassifyd+0x60>
1000c1f0:	008000c4 	movi	r2,3
1000c1f4:	f800283a 	ret
1000c1f8:	10c00226 	beq	r2,r3,1000c204 <__fpclassifyd+0x6c>
1000c1fc:	0005883a 	mov	r2,zero
1000c200:	f800283a 	ret
1000c204:	2005003a 	cmpeq	r2,r4,zero
1000c208:	f800283a 	ret

1000c20c <_sbrk_r>:
1000c20c:	defffd04 	addi	sp,sp,-12
1000c210:	dc000015 	stw	r16,0(sp)
1000c214:	040400b4 	movhi	r16,4098
1000c218:	dc400115 	stw	r17,4(sp)
1000c21c:	8414fe04 	addi	r16,r16,21496
1000c220:	2023883a 	mov	r17,r4
1000c224:	2809883a 	mov	r4,r5
1000c228:	dfc00215 	stw	ra,8(sp)
1000c22c:	80000015 	stw	zero,0(r16)
1000c230:	00120c80 	call	100120c8 <sbrk>
1000c234:	00ffffc4 	movi	r3,-1
1000c238:	10c00526 	beq	r2,r3,1000c250 <_sbrk_r+0x44>
1000c23c:	dfc00217 	ldw	ra,8(sp)
1000c240:	dc400117 	ldw	r17,4(sp)
1000c244:	dc000017 	ldw	r16,0(sp)
1000c248:	dec00304 	addi	sp,sp,12
1000c24c:	f800283a 	ret
1000c250:	80c00017 	ldw	r3,0(r16)
1000c254:	183ff926 	beq	r3,zero,1000c23c <__alt_data_end+0xf800c23c>
1000c258:	88c00015 	stw	r3,0(r17)
1000c25c:	003ff706 	br	1000c23c <__alt_data_end+0xf800c23c>

1000c260 <__sread>:
1000c260:	defffe04 	addi	sp,sp,-8
1000c264:	dc000015 	stw	r16,0(sp)
1000c268:	2821883a 	mov	r16,r5
1000c26c:	2940038f 	ldh	r5,14(r5)
1000c270:	dfc00115 	stw	ra,4(sp)
1000c274:	000e11c0 	call	1000e11c <_read_r>
1000c278:	10000716 	blt	r2,zero,1000c298 <__sread+0x38>
1000c27c:	80c01417 	ldw	r3,80(r16)
1000c280:	1887883a 	add	r3,r3,r2
1000c284:	80c01415 	stw	r3,80(r16)
1000c288:	dfc00117 	ldw	ra,4(sp)
1000c28c:	dc000017 	ldw	r16,0(sp)
1000c290:	dec00204 	addi	sp,sp,8
1000c294:	f800283a 	ret
1000c298:	80c0030b 	ldhu	r3,12(r16)
1000c29c:	18fbffcc 	andi	r3,r3,61439
1000c2a0:	80c0030d 	sth	r3,12(r16)
1000c2a4:	dfc00117 	ldw	ra,4(sp)
1000c2a8:	dc000017 	ldw	r16,0(sp)
1000c2ac:	dec00204 	addi	sp,sp,8
1000c2b0:	f800283a 	ret

1000c2b4 <__seofread>:
1000c2b4:	0005883a 	mov	r2,zero
1000c2b8:	f800283a 	ret

1000c2bc <__swrite>:
1000c2bc:	2880030b 	ldhu	r2,12(r5)
1000c2c0:	defffb04 	addi	sp,sp,-20
1000c2c4:	dcc00315 	stw	r19,12(sp)
1000c2c8:	dc800215 	stw	r18,8(sp)
1000c2cc:	dc400115 	stw	r17,4(sp)
1000c2d0:	dc000015 	stw	r16,0(sp)
1000c2d4:	dfc00415 	stw	ra,16(sp)
1000c2d8:	10c0400c 	andi	r3,r2,256
1000c2dc:	2821883a 	mov	r16,r5
1000c2e0:	2023883a 	mov	r17,r4
1000c2e4:	3025883a 	mov	r18,r6
1000c2e8:	3827883a 	mov	r19,r7
1000c2ec:	18000526 	beq	r3,zero,1000c304 <__swrite+0x48>
1000c2f0:	2940038f 	ldh	r5,14(r5)
1000c2f4:	01c00084 	movi	r7,2
1000c2f8:	000d883a 	mov	r6,zero
1000c2fc:	000e0bc0 	call	1000e0bc <_lseek_r>
1000c300:	8080030b 	ldhu	r2,12(r16)
1000c304:	8140038f 	ldh	r5,14(r16)
1000c308:	10bbffcc 	andi	r2,r2,61439
1000c30c:	980f883a 	mov	r7,r19
1000c310:	900d883a 	mov	r6,r18
1000c314:	8809883a 	mov	r4,r17
1000c318:	8080030d 	sth	r2,12(r16)
1000c31c:	dfc00417 	ldw	ra,16(sp)
1000c320:	dcc00317 	ldw	r19,12(sp)
1000c324:	dc800217 	ldw	r18,8(sp)
1000c328:	dc400117 	ldw	r17,4(sp)
1000c32c:	dc000017 	ldw	r16,0(sp)
1000c330:	dec00504 	addi	sp,sp,20
1000c334:	000db701 	jmpi	1000db70 <_write_r>

1000c338 <__sseek>:
1000c338:	defffe04 	addi	sp,sp,-8
1000c33c:	dc000015 	stw	r16,0(sp)
1000c340:	2821883a 	mov	r16,r5
1000c344:	2940038f 	ldh	r5,14(r5)
1000c348:	dfc00115 	stw	ra,4(sp)
1000c34c:	000e0bc0 	call	1000e0bc <_lseek_r>
1000c350:	00ffffc4 	movi	r3,-1
1000c354:	10c00826 	beq	r2,r3,1000c378 <__sseek+0x40>
1000c358:	80c0030b 	ldhu	r3,12(r16)
1000c35c:	80801415 	stw	r2,80(r16)
1000c360:	18c40014 	ori	r3,r3,4096
1000c364:	80c0030d 	sth	r3,12(r16)
1000c368:	dfc00117 	ldw	ra,4(sp)
1000c36c:	dc000017 	ldw	r16,0(sp)
1000c370:	dec00204 	addi	sp,sp,8
1000c374:	f800283a 	ret
1000c378:	80c0030b 	ldhu	r3,12(r16)
1000c37c:	18fbffcc 	andi	r3,r3,61439
1000c380:	80c0030d 	sth	r3,12(r16)
1000c384:	dfc00117 	ldw	ra,4(sp)
1000c388:	dc000017 	ldw	r16,0(sp)
1000c38c:	dec00204 	addi	sp,sp,8
1000c390:	f800283a 	ret

1000c394 <__sclose>:
1000c394:	2940038f 	ldh	r5,14(r5)
1000c398:	000dbd01 	jmpi	1000dbd0 <_close_r>

1000c39c <strcmp>:
1000c39c:	2144b03a 	or	r2,r4,r5
1000c3a0:	108000cc 	andi	r2,r2,3
1000c3a4:	1000171e 	bne	r2,zero,1000c404 <strcmp+0x68>
1000c3a8:	20800017 	ldw	r2,0(r4)
1000c3ac:	28c00017 	ldw	r3,0(r5)
1000c3b0:	10c0141e 	bne	r2,r3,1000c404 <strcmp+0x68>
1000c3b4:	027fbff4 	movhi	r9,65279
1000c3b8:	4a7fbfc4 	addi	r9,r9,-257
1000c3bc:	0086303a 	nor	r3,zero,r2
1000c3c0:	02202074 	movhi	r8,32897
1000c3c4:	1245883a 	add	r2,r2,r9
1000c3c8:	42202004 	addi	r8,r8,-32640
1000c3cc:	10c4703a 	and	r2,r2,r3
1000c3d0:	1204703a 	and	r2,r2,r8
1000c3d4:	10000226 	beq	r2,zero,1000c3e0 <strcmp+0x44>
1000c3d8:	00002306 	br	1000c468 <strcmp+0xcc>
1000c3dc:	1000221e 	bne	r2,zero,1000c468 <strcmp+0xcc>
1000c3e0:	21000104 	addi	r4,r4,4
1000c3e4:	20c00017 	ldw	r3,0(r4)
1000c3e8:	29400104 	addi	r5,r5,4
1000c3ec:	29800017 	ldw	r6,0(r5)
1000c3f0:	1a4f883a 	add	r7,r3,r9
1000c3f4:	00c4303a 	nor	r2,zero,r3
1000c3f8:	3884703a 	and	r2,r7,r2
1000c3fc:	1204703a 	and	r2,r2,r8
1000c400:	19bff626 	beq	r3,r6,1000c3dc <__alt_data_end+0xf800c3dc>
1000c404:	20800003 	ldbu	r2,0(r4)
1000c408:	10c03fcc 	andi	r3,r2,255
1000c40c:	18c0201c 	xori	r3,r3,128
1000c410:	18ffe004 	addi	r3,r3,-128
1000c414:	18000c26 	beq	r3,zero,1000c448 <strcmp+0xac>
1000c418:	29800007 	ldb	r6,0(r5)
1000c41c:	19800326 	beq	r3,r6,1000c42c <strcmp+0x90>
1000c420:	00001306 	br	1000c470 <strcmp+0xd4>
1000c424:	29800007 	ldb	r6,0(r5)
1000c428:	11800b1e 	bne	r2,r6,1000c458 <strcmp+0xbc>
1000c42c:	21000044 	addi	r4,r4,1
1000c430:	20c00003 	ldbu	r3,0(r4)
1000c434:	29400044 	addi	r5,r5,1
1000c438:	18803fcc 	andi	r2,r3,255
1000c43c:	1080201c 	xori	r2,r2,128
1000c440:	10bfe004 	addi	r2,r2,-128
1000c444:	103ff71e 	bne	r2,zero,1000c424 <__alt_data_end+0xf800c424>
1000c448:	0007883a 	mov	r3,zero
1000c44c:	28800003 	ldbu	r2,0(r5)
1000c450:	1885c83a 	sub	r2,r3,r2
1000c454:	f800283a 	ret
1000c458:	28800003 	ldbu	r2,0(r5)
1000c45c:	18c03fcc 	andi	r3,r3,255
1000c460:	1885c83a 	sub	r2,r3,r2
1000c464:	f800283a 	ret
1000c468:	0005883a 	mov	r2,zero
1000c46c:	f800283a 	ret
1000c470:	10c03fcc 	andi	r3,r2,255
1000c474:	003ff506 	br	1000c44c <__alt_data_end+0xf800c44c>

1000c478 <__sprint_r.part.0>:
1000c478:	28801917 	ldw	r2,100(r5)
1000c47c:	defff604 	addi	sp,sp,-40
1000c480:	dd400515 	stw	r21,20(sp)
1000c484:	dfc00915 	stw	ra,36(sp)
1000c488:	df000815 	stw	fp,32(sp)
1000c48c:	ddc00715 	stw	r23,28(sp)
1000c490:	dd800615 	stw	r22,24(sp)
1000c494:	dd000415 	stw	r20,16(sp)
1000c498:	dcc00315 	stw	r19,12(sp)
1000c49c:	dc800215 	stw	r18,8(sp)
1000c4a0:	dc400115 	stw	r17,4(sp)
1000c4a4:	dc000015 	stw	r16,0(sp)
1000c4a8:	1088000c 	andi	r2,r2,8192
1000c4ac:	302b883a 	mov	r21,r6
1000c4b0:	10002e26 	beq	r2,zero,1000c56c <__sprint_r.part.0+0xf4>
1000c4b4:	30800217 	ldw	r2,8(r6)
1000c4b8:	35800017 	ldw	r22,0(r6)
1000c4bc:	10002926 	beq	r2,zero,1000c564 <__sprint_r.part.0+0xec>
1000c4c0:	2827883a 	mov	r19,r5
1000c4c4:	2029883a 	mov	r20,r4
1000c4c8:	b5c00104 	addi	r23,r22,4
1000c4cc:	04bfffc4 	movi	r18,-1
1000c4d0:	bc400017 	ldw	r17,0(r23)
1000c4d4:	b4000017 	ldw	r16,0(r22)
1000c4d8:	0039883a 	mov	fp,zero
1000c4dc:	8822d0ba 	srli	r17,r17,2
1000c4e0:	8800031e 	bne	r17,zero,1000c4f0 <__sprint_r.part.0+0x78>
1000c4e4:	00001806 	br	1000c548 <__sprint_r.part.0+0xd0>
1000c4e8:	84000104 	addi	r16,r16,4
1000c4ec:	8f001526 	beq	r17,fp,1000c544 <__sprint_r.part.0+0xcc>
1000c4f0:	81400017 	ldw	r5,0(r16)
1000c4f4:	980d883a 	mov	r6,r19
1000c4f8:	a009883a 	mov	r4,r20
1000c4fc:	000df680 	call	1000df68 <_fputwc_r>
1000c500:	e7000044 	addi	fp,fp,1
1000c504:	14bff81e 	bne	r2,r18,1000c4e8 <__alt_data_end+0xf800c4e8>
1000c508:	9005883a 	mov	r2,r18
1000c50c:	a8000215 	stw	zero,8(r21)
1000c510:	a8000115 	stw	zero,4(r21)
1000c514:	dfc00917 	ldw	ra,36(sp)
1000c518:	df000817 	ldw	fp,32(sp)
1000c51c:	ddc00717 	ldw	r23,28(sp)
1000c520:	dd800617 	ldw	r22,24(sp)
1000c524:	dd400517 	ldw	r21,20(sp)
1000c528:	dd000417 	ldw	r20,16(sp)
1000c52c:	dcc00317 	ldw	r19,12(sp)
1000c530:	dc800217 	ldw	r18,8(sp)
1000c534:	dc400117 	ldw	r17,4(sp)
1000c538:	dc000017 	ldw	r16,0(sp)
1000c53c:	dec00a04 	addi	sp,sp,40
1000c540:	f800283a 	ret
1000c544:	a8800217 	ldw	r2,8(r21)
1000c548:	8c63883a 	add	r17,r17,r17
1000c54c:	8c63883a 	add	r17,r17,r17
1000c550:	1445c83a 	sub	r2,r2,r17
1000c554:	a8800215 	stw	r2,8(r21)
1000c558:	b5800204 	addi	r22,r22,8
1000c55c:	bdc00204 	addi	r23,r23,8
1000c560:	103fdb1e 	bne	r2,zero,1000c4d0 <__alt_data_end+0xf800c4d0>
1000c564:	0005883a 	mov	r2,zero
1000c568:	003fe806 	br	1000c50c <__alt_data_end+0xf800c50c>
1000c56c:	00095d80 	call	100095d8 <__sfvwrite_r>
1000c570:	003fe606 	br	1000c50c <__alt_data_end+0xf800c50c>

1000c574 <__sprint_r>:
1000c574:	30c00217 	ldw	r3,8(r6)
1000c578:	18000126 	beq	r3,zero,1000c580 <__sprint_r+0xc>
1000c57c:	000c4781 	jmpi	1000c478 <__sprint_r.part.0>
1000c580:	30000115 	stw	zero,4(r6)
1000c584:	0005883a 	mov	r2,zero
1000c588:	f800283a 	ret

1000c58c <___vfiprintf_internal_r>:
1000c58c:	deffca04 	addi	sp,sp,-216
1000c590:	dd403115 	stw	r21,196(sp)
1000c594:	dfc03515 	stw	ra,212(sp)
1000c598:	df003415 	stw	fp,208(sp)
1000c59c:	ddc03315 	stw	r23,204(sp)
1000c5a0:	dd803215 	stw	r22,200(sp)
1000c5a4:	dd003015 	stw	r20,192(sp)
1000c5a8:	dcc02f15 	stw	r19,188(sp)
1000c5ac:	dc802e15 	stw	r18,184(sp)
1000c5b0:	dc402d15 	stw	r17,180(sp)
1000c5b4:	dc002c15 	stw	r16,176(sp)
1000c5b8:	d9002115 	stw	r4,132(sp)
1000c5bc:	d9402015 	stw	r5,128(sp)
1000c5c0:	d9c02215 	stw	r7,136(sp)
1000c5c4:	302b883a 	mov	r21,r6
1000c5c8:	20000226 	beq	r4,zero,1000c5d4 <___vfiprintf_internal_r+0x48>
1000c5cc:	20800e17 	ldw	r2,56(r4)
1000c5d0:	1000cf26 	beq	r2,zero,1000c910 <___vfiprintf_internal_r+0x384>
1000c5d4:	d8c02017 	ldw	r3,128(sp)
1000c5d8:	1880030b 	ldhu	r2,12(r3)
1000c5dc:	10c8000c 	andi	r3,r2,8192
1000c5e0:	1800071e 	bne	r3,zero,1000c600 <___vfiprintf_internal_r+0x74>
1000c5e4:	d9402017 	ldw	r5,128(sp)
1000c5e8:	00f7ffc4 	movi	r3,-8193
1000c5ec:	10880014 	ori	r2,r2,8192
1000c5f0:	29001917 	ldw	r4,100(r5)
1000c5f4:	2880030d 	sth	r2,12(r5)
1000c5f8:	20c6703a 	and	r3,r4,r3
1000c5fc:	28c01915 	stw	r3,100(r5)
1000c600:	10c0020c 	andi	r3,r2,8
1000c604:	1800a526 	beq	r3,zero,1000c89c <___vfiprintf_internal_r+0x310>
1000c608:	d9002017 	ldw	r4,128(sp)
1000c60c:	20c00417 	ldw	r3,16(r4)
1000c610:	1800a226 	beq	r3,zero,1000c89c <___vfiprintf_internal_r+0x310>
1000c614:	1080068c 	andi	r2,r2,26
1000c618:	00c00284 	movi	r3,10
1000c61c:	10c0a826 	beq	r2,r3,1000c8c0 <___vfiprintf_internal_r+0x334>
1000c620:	d9001a04 	addi	r4,sp,104
1000c624:	d94019c4 	addi	r5,sp,103
1000c628:	04840074 	movhi	r18,4097
1000c62c:	2145c83a 	sub	r2,r4,r5
1000c630:	9492ce04 	addi	r18,r18,19256
1000c634:	d9001e15 	stw	r4,120(sp)
1000c638:	d9401f15 	stw	r5,124(sp)
1000c63c:	dec01a15 	stw	sp,104(sp)
1000c640:	d8001c15 	stw	zero,112(sp)
1000c644:	d8001b15 	stw	zero,108(sp)
1000c648:	d811883a 	mov	r8,sp
1000c64c:	d8002615 	stw	zero,152(sp)
1000c650:	d8002415 	stw	zero,144(sp)
1000c654:	d8802815 	stw	r2,160(sp)
1000c658:	a82d883a 	mov	r22,r21
1000c65c:	b0800007 	ldb	r2,0(r22)
1000c660:	10040d26 	beq	r2,zero,1000d698 <___vfiprintf_internal_r+0x110c>
1000c664:	00c00944 	movi	r3,37
1000c668:	b029883a 	mov	r20,r22
1000c66c:	10c0021e 	bne	r2,r3,1000c678 <___vfiprintf_internal_r+0xec>
1000c670:	00001606 	br	1000c6cc <___vfiprintf_internal_r+0x140>
1000c674:	10c00326 	beq	r2,r3,1000c684 <___vfiprintf_internal_r+0xf8>
1000c678:	a5000044 	addi	r20,r20,1
1000c67c:	a0800007 	ldb	r2,0(r20)
1000c680:	103ffc1e 	bne	r2,zero,1000c674 <__alt_data_end+0xf800c674>
1000c684:	a5a1c83a 	sub	r16,r20,r22
1000c688:	80001026 	beq	r16,zero,1000c6cc <___vfiprintf_internal_r+0x140>
1000c68c:	d8c01c17 	ldw	r3,112(sp)
1000c690:	d8801b17 	ldw	r2,108(sp)
1000c694:	45800015 	stw	r22,0(r8)
1000c698:	80c7883a 	add	r3,r16,r3
1000c69c:	10800044 	addi	r2,r2,1
1000c6a0:	44000115 	stw	r16,4(r8)
1000c6a4:	d8c01c15 	stw	r3,112(sp)
1000c6a8:	d8801b15 	stw	r2,108(sp)
1000c6ac:	010001c4 	movi	r4,7
1000c6b0:	2080750e 	bge	r4,r2,1000c888 <___vfiprintf_internal_r+0x2fc>
1000c6b4:	1803951e 	bne	r3,zero,1000d50c <___vfiprintf_internal_r+0xf80>
1000c6b8:	d8c02417 	ldw	r3,144(sp)
1000c6bc:	d8001b15 	stw	zero,108(sp)
1000c6c0:	d811883a 	mov	r8,sp
1000c6c4:	1c07883a 	add	r3,r3,r16
1000c6c8:	d8c02415 	stw	r3,144(sp)
1000c6cc:	a0800007 	ldb	r2,0(r20)
1000c6d0:	1002e026 	beq	r2,zero,1000d254 <___vfiprintf_internal_r+0xcc8>
1000c6d4:	a5800044 	addi	r22,r20,1
1000c6d8:	a0c00047 	ldb	r3,1(r20)
1000c6dc:	d8001d85 	stb	zero,118(sp)
1000c6e0:	0027883a 	mov	r19,zero
1000c6e4:	d8002305 	stb	zero,140(sp)
1000c6e8:	043fffc4 	movi	r16,-1
1000c6ec:	d8002515 	stw	zero,148(sp)
1000c6f0:	0023883a 	mov	r17,zero
1000c6f4:	05001604 	movi	r20,88
1000c6f8:	05400244 	movi	r21,9
1000c6fc:	402f883a 	mov	r23,r8
1000c700:	b5800044 	addi	r22,r22,1
1000c704:	18bff804 	addi	r2,r3,-32
1000c708:	a0827736 	bltu	r20,r2,1000d0e8 <___vfiprintf_internal_r+0xb5c>
1000c70c:	100490ba 	slli	r2,r2,2
1000c710:	01040074 	movhi	r4,4097
1000c714:	2131c904 	addi	r4,r4,-14556
1000c718:	1105883a 	add	r2,r2,r4
1000c71c:	10800017 	ldw	r2,0(r2)
1000c720:	1000683a 	jmp	r2
1000c724:	1000cde8 	cmpgeui	zero,r2,823
1000c728:	1000d0e8 	cmpgeui	zero,r2,835
1000c72c:	1000d0e8 	cmpgeui	zero,r2,835
1000c730:	1000ce04 	addi	zero,r2,824
1000c734:	1000d0e8 	cmpgeui	zero,r2,835
1000c738:	1000d0e8 	cmpgeui	zero,r2,835
1000c73c:	1000d0e8 	cmpgeui	zero,r2,835
1000c740:	1000d0e8 	cmpgeui	zero,r2,835
1000c744:	1000d0e8 	cmpgeui	zero,r2,835
1000c748:	1000d0e8 	cmpgeui	zero,r2,835
1000c74c:	1000d00c 	andi	zero,r2,832
1000c750:	1000d030 	cmpltui	zero,r2,832
1000c754:	1000d0e8 	cmpgeui	zero,r2,835
1000c758:	1000c928 	cmpgeui	zero,r2,804
1000c75c:	1000d044 	addi	zero,r2,833
1000c760:	1000d0e8 	cmpgeui	zero,r2,835
1000c764:	1000ce10 	cmplti	zero,r2,824
1000c768:	1000ce1c 	xori	zero,r2,824
1000c76c:	1000ce1c 	xori	zero,r2,824
1000c770:	1000ce1c 	xori	zero,r2,824
1000c774:	1000ce1c 	xori	zero,r2,824
1000c778:	1000ce1c 	xori	zero,r2,824
1000c77c:	1000ce1c 	xori	zero,r2,824
1000c780:	1000ce1c 	xori	zero,r2,824
1000c784:	1000ce1c 	xori	zero,r2,824
1000c788:	1000ce1c 	xori	zero,r2,824
1000c78c:	1000d0e8 	cmpgeui	zero,r2,835
1000c790:	1000d0e8 	cmpgeui	zero,r2,835
1000c794:	1000d0e8 	cmpgeui	zero,r2,835
1000c798:	1000d0e8 	cmpgeui	zero,r2,835
1000c79c:	1000d0e8 	cmpgeui	zero,r2,835
1000c7a0:	1000d0e8 	cmpgeui	zero,r2,835
1000c7a4:	1000d0e8 	cmpgeui	zero,r2,835
1000c7a8:	1000d0e8 	cmpgeui	zero,r2,835
1000c7ac:	1000d0e8 	cmpgeui	zero,r2,835
1000c7b0:	1000d0e8 	cmpgeui	zero,r2,835
1000c7b4:	1000ce5c 	xori	zero,r2,825
1000c7b8:	1000d0e8 	cmpgeui	zero,r2,835
1000c7bc:	1000d0e8 	cmpgeui	zero,r2,835
1000c7c0:	1000d0e8 	cmpgeui	zero,r2,835
1000c7c4:	1000d0e8 	cmpgeui	zero,r2,835
1000c7c8:	1000d0e8 	cmpgeui	zero,r2,835
1000c7cc:	1000d0e8 	cmpgeui	zero,r2,835
1000c7d0:	1000d0e8 	cmpgeui	zero,r2,835
1000c7d4:	1000d0e8 	cmpgeui	zero,r2,835
1000c7d8:	1000d0e8 	cmpgeui	zero,r2,835
1000c7dc:	1000d0e8 	cmpgeui	zero,r2,835
1000c7e0:	1000ce98 	cmpnei	zero,r2,826
1000c7e4:	1000d0e8 	cmpgeui	zero,r2,835
1000c7e8:	1000d0e8 	cmpgeui	zero,r2,835
1000c7ec:	1000d0e8 	cmpgeui	zero,r2,835
1000c7f0:	1000d0e8 	cmpgeui	zero,r2,835
1000c7f4:	1000d0e8 	cmpgeui	zero,r2,835
1000c7f8:	1000cef4 	orhi	zero,r2,827
1000c7fc:	1000d0e8 	cmpgeui	zero,r2,835
1000c800:	1000d0e8 	cmpgeui	zero,r2,835
1000c804:	1000cf68 	cmpgeui	zero,r2,829
1000c808:	1000d0e8 	cmpgeui	zero,r2,835
1000c80c:	1000d0e8 	cmpgeui	zero,r2,835
1000c810:	1000d0e8 	cmpgeui	zero,r2,835
1000c814:	1000d0e8 	cmpgeui	zero,r2,835
1000c818:	1000d0e8 	cmpgeui	zero,r2,835
1000c81c:	1000d0e8 	cmpgeui	zero,r2,835
1000c820:	1000d0e8 	cmpgeui	zero,r2,835
1000c824:	1000d0e8 	cmpgeui	zero,r2,835
1000c828:	1000d0e8 	cmpgeui	zero,r2,835
1000c82c:	1000d0e8 	cmpgeui	zero,r2,835
1000c830:	1000cd10 	cmplti	zero,r2,820
1000c834:	1000cd40 	call	11000cd4 <__alt_heap_start+0xfdb794>
1000c838:	1000d0e8 	cmpgeui	zero,r2,835
1000c83c:	1000d0e8 	cmpgeui	zero,r2,835
1000c840:	1000d0e8 	cmpgeui	zero,r2,835
1000c844:	1000d090 	cmplti	zero,r2,834
1000c848:	1000cd40 	call	11000cd4 <__alt_heap_start+0xfdb794>
1000c84c:	1000d0e8 	cmpgeui	zero,r2,835
1000c850:	1000d0e8 	cmpgeui	zero,r2,835
1000c854:	1000cbe8 	cmpgeui	zero,r2,815
1000c858:	1000d0e8 	cmpgeui	zero,r2,835
1000c85c:	1000cbfc 	xorhi	zero,r2,815
1000c860:	1000cc34 	orhi	zero,r2,816
1000c864:	1000c934 	orhi	zero,r2,804
1000c868:	1000cbdc 	xori	zero,r2,815
1000c86c:	1000d0e8 	cmpgeui	zero,r2,835
1000c870:	1000cfa8 	cmpgeui	zero,r2,830
1000c874:	1000d0e8 	cmpgeui	zero,r2,835
1000c878:	1000cff4 	orhi	zero,r2,831
1000c87c:	1000d0e8 	cmpgeui	zero,r2,835
1000c880:	1000d0e8 	cmpgeui	zero,r2,835
1000c884:	1000ccb8 	rdprs	zero,r2,818
1000c888:	42000204 	addi	r8,r8,8
1000c88c:	d8c02417 	ldw	r3,144(sp)
1000c890:	1c07883a 	add	r3,r3,r16
1000c894:	d8c02415 	stw	r3,144(sp)
1000c898:	003f8c06 	br	1000c6cc <__alt_data_end+0xf800c6cc>
1000c89c:	d9402017 	ldw	r5,128(sp)
1000c8a0:	d9002117 	ldw	r4,132(sp)
1000c8a4:	00071480 	call	10007148 <__swsetup_r>
1000c8a8:	1003c11e 	bne	r2,zero,1000d7b0 <___vfiprintf_internal_r+0x1224>
1000c8ac:	d9402017 	ldw	r5,128(sp)
1000c8b0:	00c00284 	movi	r3,10
1000c8b4:	2880030b 	ldhu	r2,12(r5)
1000c8b8:	1080068c 	andi	r2,r2,26
1000c8bc:	10ff581e 	bne	r2,r3,1000c620 <__alt_data_end+0xf800c620>
1000c8c0:	d8c02017 	ldw	r3,128(sp)
1000c8c4:	1880038f 	ldh	r2,14(r3)
1000c8c8:	103f5516 	blt	r2,zero,1000c620 <__alt_data_end+0xf800c620>
1000c8cc:	d9c02217 	ldw	r7,136(sp)
1000c8d0:	d9002117 	ldw	r4,132(sp)
1000c8d4:	a80d883a 	mov	r6,r21
1000c8d8:	180b883a 	mov	r5,r3
1000c8dc:	000dab40 	call	1000dab4 <__sbprintf>
1000c8e0:	dfc03517 	ldw	ra,212(sp)
1000c8e4:	df003417 	ldw	fp,208(sp)
1000c8e8:	ddc03317 	ldw	r23,204(sp)
1000c8ec:	dd803217 	ldw	r22,200(sp)
1000c8f0:	dd403117 	ldw	r21,196(sp)
1000c8f4:	dd003017 	ldw	r20,192(sp)
1000c8f8:	dcc02f17 	ldw	r19,188(sp)
1000c8fc:	dc802e17 	ldw	r18,184(sp)
1000c900:	dc402d17 	ldw	r17,180(sp)
1000c904:	dc002c17 	ldw	r16,176(sp)
1000c908:	dec03604 	addi	sp,sp,216
1000c90c:	f800283a 	ret
1000c910:	00091540 	call	10009154 <__sinit>
1000c914:	003f2f06 	br	1000c5d4 <__alt_data_end+0xf800c5d4>
1000c918:	d8c02517 	ldw	r3,148(sp)
1000c91c:	d8802215 	stw	r2,136(sp)
1000c920:	00c7c83a 	sub	r3,zero,r3
1000c924:	d8c02515 	stw	r3,148(sp)
1000c928:	8c400114 	ori	r17,r17,4
1000c92c:	b0c00007 	ldb	r3,0(r22)
1000c930:	003f7306 	br	1000c700 <__alt_data_end+0xf800c700>
1000c934:	00800c04 	movi	r2,48
1000c938:	d9402217 	ldw	r5,136(sp)
1000c93c:	d8801d05 	stb	r2,116(sp)
1000c940:	00801e04 	movi	r2,120
1000c944:	d8801d45 	stb	r2,117(sp)
1000c948:	d8001d85 	stb	zero,118(sp)
1000c94c:	b811883a 	mov	r8,r23
1000c950:	28c00104 	addi	r3,r5,4
1000c954:	2cc00017 	ldw	r19,0(r5)
1000c958:	0029883a 	mov	r20,zero
1000c95c:	88800094 	ori	r2,r17,2
1000c960:	80032516 	blt	r16,zero,1000d5f8 <___vfiprintf_internal_r+0x106c>
1000c964:	00bfdfc4 	movi	r2,-129
1000c968:	88a2703a 	and	r17,r17,r2
1000c96c:	d8c02215 	stw	r3,136(sp)
1000c970:	8c400094 	ori	r17,r17,2
1000c974:	98032a1e 	bne	r19,zero,1000d620 <___vfiprintf_internal_r+0x1094>
1000c978:	00840074 	movhi	r2,4097
1000c97c:	10926d04 	addi	r2,r2,18868
1000c980:	d8802615 	stw	r2,152(sp)
1000c984:	002b883a 	mov	r21,zero
1000c988:	8001741e 	bne	r16,zero,1000cf5c <___vfiprintf_internal_r+0x9d0>
1000c98c:	0021883a 	mov	r16,zero
1000c990:	0029883a 	mov	r20,zero
1000c994:	ddc01a04 	addi	r23,sp,104
1000c998:	8027883a 	mov	r19,r16
1000c99c:	8500010e 	bge	r16,r20,1000c9a4 <___vfiprintf_internal_r+0x418>
1000c9a0:	a027883a 	mov	r19,r20
1000c9a4:	ad403fcc 	andi	r21,r21,255
1000c9a8:	ad40201c 	xori	r21,r21,128
1000c9ac:	ad7fe004 	addi	r21,r21,-128
1000c9b0:	a8000126 	beq	r21,zero,1000c9b8 <___vfiprintf_internal_r+0x42c>
1000c9b4:	9cc00044 	addi	r19,r19,1
1000c9b8:	89c0008c 	andi	r7,r17,2
1000c9bc:	38000126 	beq	r7,zero,1000c9c4 <___vfiprintf_internal_r+0x438>
1000c9c0:	9cc00084 	addi	r19,r19,2
1000c9c4:	88c0210c 	andi	r3,r17,132
1000c9c8:	1801dd1e 	bne	r3,zero,1000d140 <___vfiprintf_internal_r+0xbb4>
1000c9cc:	d9402517 	ldw	r5,148(sp)
1000c9d0:	2cebc83a 	sub	r21,r5,r19
1000c9d4:	0541da0e 	bge	zero,r21,1000d140 <___vfiprintf_internal_r+0xbb4>
1000c9d8:	07000404 	movi	fp,16
1000c9dc:	d8801c17 	ldw	r2,112(sp)
1000c9e0:	e543be0e 	bge	fp,r21,1000d8dc <___vfiprintf_internal_r+0x1350>
1000c9e4:	01440074 	movhi	r5,4097
1000c9e8:	2952d204 	addi	r5,r5,19272
1000c9ec:	dc002715 	stw	r16,156(sp)
1000c9f0:	d9801b17 	ldw	r6,108(sp)
1000c9f4:	a821883a 	mov	r16,r21
1000c9f8:	d9402315 	stw	r5,140(sp)
1000c9fc:	028001c4 	movi	r10,7
1000ca00:	d9c02915 	stw	r7,164(sp)
1000ca04:	182b883a 	mov	r21,r3
1000ca08:	00000506 	br	1000ca20 <___vfiprintf_internal_r+0x494>
1000ca0c:	31000084 	addi	r4,r6,2
1000ca10:	42000204 	addi	r8,r8,8
1000ca14:	180d883a 	mov	r6,r3
1000ca18:	843ffc04 	addi	r16,r16,-16
1000ca1c:	e4000f0e 	bge	fp,r16,1000ca5c <___vfiprintf_internal_r+0x4d0>
1000ca20:	01040074 	movhi	r4,4097
1000ca24:	10800404 	addi	r2,r2,16
1000ca28:	30c00044 	addi	r3,r6,1
1000ca2c:	2112d204 	addi	r4,r4,19272
1000ca30:	41000015 	stw	r4,0(r8)
1000ca34:	47000115 	stw	fp,4(r8)
1000ca38:	d8801c15 	stw	r2,112(sp)
1000ca3c:	d8c01b15 	stw	r3,108(sp)
1000ca40:	50fff20e 	bge	r10,r3,1000ca0c <__alt_data_end+0xf800ca0c>
1000ca44:	1001b21e 	bne	r2,zero,1000d110 <___vfiprintf_internal_r+0xb84>
1000ca48:	843ffc04 	addi	r16,r16,-16
1000ca4c:	000d883a 	mov	r6,zero
1000ca50:	01000044 	movi	r4,1
1000ca54:	d811883a 	mov	r8,sp
1000ca58:	e43ff116 	blt	fp,r16,1000ca20 <__alt_data_end+0xf800ca20>
1000ca5c:	a807883a 	mov	r3,r21
1000ca60:	d9c02917 	ldw	r7,164(sp)
1000ca64:	802b883a 	mov	r21,r16
1000ca68:	dc002717 	ldw	r16,156(sp)
1000ca6c:	d9402317 	ldw	r5,140(sp)
1000ca70:	a885883a 	add	r2,r21,r2
1000ca74:	45400115 	stw	r21,4(r8)
1000ca78:	41400015 	stw	r5,0(r8)
1000ca7c:	d8801c15 	stw	r2,112(sp)
1000ca80:	d9001b15 	stw	r4,108(sp)
1000ca84:	014001c4 	movi	r5,7
1000ca88:	29026216 	blt	r5,r4,1000d414 <___vfiprintf_internal_r+0xe88>
1000ca8c:	d9801d87 	ldb	r6,118(sp)
1000ca90:	42000204 	addi	r8,r8,8
1000ca94:	21400044 	addi	r5,r4,1
1000ca98:	3001ae1e 	bne	r6,zero,1000d154 <___vfiprintf_internal_r+0xbc8>
1000ca9c:	3801bb26 	beq	r7,zero,1000d18c <___vfiprintf_internal_r+0xc00>
1000caa0:	d9001d04 	addi	r4,sp,116
1000caa4:	10800084 	addi	r2,r2,2
1000caa8:	41000015 	stw	r4,0(r8)
1000caac:	01000084 	movi	r4,2
1000cab0:	41000115 	stw	r4,4(r8)
1000cab4:	d8801c15 	stw	r2,112(sp)
1000cab8:	d9401b15 	stw	r5,108(sp)
1000cabc:	010001c4 	movi	r4,7
1000cac0:	2142680e 	bge	r4,r5,1000d464 <___vfiprintf_internal_r+0xed8>
1000cac4:	1002b11e 	bne	r2,zero,1000d58c <___vfiprintf_internal_r+0x1000>
1000cac8:	01802004 	movi	r6,128
1000cacc:	01400044 	movi	r5,1
1000cad0:	0009883a 	mov	r4,zero
1000cad4:	d811883a 	mov	r8,sp
1000cad8:	1981ae1e 	bne	r3,r6,1000d194 <___vfiprintf_internal_r+0xc08>
1000cadc:	d8c02517 	ldw	r3,148(sp)
1000cae0:	1cf9c83a 	sub	fp,r3,r19
1000cae4:	0701ab0e 	bge	zero,fp,1000d194 <___vfiprintf_internal_r+0xc08>
1000cae8:	05400404 	movi	r21,16
1000caec:	af03a90e 	bge	r21,fp,1000d994 <___vfiprintf_internal_r+0x1408>
1000caf0:	01440074 	movhi	r5,4097
1000caf4:	2952ce04 	addi	r5,r5,19256
1000caf8:	d9402315 	stw	r5,140(sp)
1000cafc:	01c001c4 	movi	r7,7
1000cb00:	00000506 	br	1000cb18 <___vfiprintf_internal_r+0x58c>
1000cb04:	21800084 	addi	r6,r4,2
1000cb08:	42000204 	addi	r8,r8,8
1000cb0c:	1809883a 	mov	r4,r3
1000cb10:	e73ffc04 	addi	fp,fp,-16
1000cb14:	af000d0e 	bge	r21,fp,1000cb4c <___vfiprintf_internal_r+0x5c0>
1000cb18:	10800404 	addi	r2,r2,16
1000cb1c:	20c00044 	addi	r3,r4,1
1000cb20:	44800015 	stw	r18,0(r8)
1000cb24:	45400115 	stw	r21,4(r8)
1000cb28:	d8801c15 	stw	r2,112(sp)
1000cb2c:	d8c01b15 	stw	r3,108(sp)
1000cb30:	38fff40e 	bge	r7,r3,1000cb04 <__alt_data_end+0xf800cb04>
1000cb34:	10022b1e 	bne	r2,zero,1000d3e4 <___vfiprintf_internal_r+0xe58>
1000cb38:	e73ffc04 	addi	fp,fp,-16
1000cb3c:	01800044 	movi	r6,1
1000cb40:	0009883a 	mov	r4,zero
1000cb44:	d811883a 	mov	r8,sp
1000cb48:	af3ff316 	blt	r21,fp,1000cb18 <__alt_data_end+0xf800cb18>
1000cb4c:	d8c02317 	ldw	r3,140(sp)
1000cb50:	1705883a 	add	r2,r2,fp
1000cb54:	47000115 	stw	fp,4(r8)
1000cb58:	40c00015 	stw	r3,0(r8)
1000cb5c:	d8801c15 	stw	r2,112(sp)
1000cb60:	d9801b15 	stw	r6,108(sp)
1000cb64:	00c001c4 	movi	r3,7
1000cb68:	19829416 	blt	r3,r6,1000d5bc <___vfiprintf_internal_r+0x1030>
1000cb6c:	8521c83a 	sub	r16,r16,r20
1000cb70:	42000204 	addi	r8,r8,8
1000cb74:	31400044 	addi	r5,r6,1
1000cb78:	3009883a 	mov	r4,r6
1000cb7c:	04018716 	blt	zero,r16,1000d19c <___vfiprintf_internal_r+0xc10>
1000cb80:	a085883a 	add	r2,r20,r2
1000cb84:	45c00015 	stw	r23,0(r8)
1000cb88:	45000115 	stw	r20,4(r8)
1000cb8c:	d8801c15 	stw	r2,112(sp)
1000cb90:	d9401b15 	stw	r5,108(sp)
1000cb94:	00c001c4 	movi	r3,7
1000cb98:	1941c20e 	bge	r3,r5,1000d2a4 <___vfiprintf_internal_r+0xd18>
1000cb9c:	1002531e 	bne	r2,zero,1000d4ec <___vfiprintf_internal_r+0xf60>
1000cba0:	d8001b15 	stw	zero,108(sp)
1000cba4:	8c40010c 	andi	r17,r17,4
1000cba8:	88023226 	beq	r17,zero,1000d474 <___vfiprintf_internal_r+0xee8>
1000cbac:	d9002517 	ldw	r4,148(sp)
1000cbb0:	24e3c83a 	sub	r17,r4,r19
1000cbb4:	04432916 	blt	zero,r17,1000d85c <___vfiprintf_internal_r+0x12d0>
1000cbb8:	d8802517 	ldw	r2,148(sp)
1000cbbc:	14c0010e 	bge	r2,r19,1000cbc4 <___vfiprintf_internal_r+0x638>
1000cbc0:	9805883a 	mov	r2,r19
1000cbc4:	d8c02417 	ldw	r3,144(sp)
1000cbc8:	1887883a 	add	r3,r3,r2
1000cbcc:	d8c02415 	stw	r3,144(sp)
1000cbd0:	d8001b15 	stw	zero,108(sp)
1000cbd4:	d811883a 	mov	r8,sp
1000cbd8:	003ea006 	br	1000c65c <__alt_data_end+0xf800c65c>
1000cbdc:	8c400814 	ori	r17,r17,32
1000cbe0:	b0c00007 	ldb	r3,0(r22)
1000cbe4:	003ec606 	br	1000c700 <__alt_data_end+0xf800c700>
1000cbe8:	b0c00007 	ldb	r3,0(r22)
1000cbec:	00801b04 	movi	r2,108
1000cbf0:	18832026 	beq	r3,r2,1000d874 <___vfiprintf_internal_r+0x12e8>
1000cbf4:	8c400414 	ori	r17,r17,16
1000cbf8:	003ec106 	br	1000c700 <__alt_data_end+0xf800c700>
1000cbfc:	9cc03fcc 	andi	r19,r19,255
1000cc00:	b811883a 	mov	r8,r23
1000cc04:	9803981e 	bne	r19,zero,1000da68 <___vfiprintf_internal_r+0x14dc>
1000cc08:	8880080c 	andi	r2,r17,32
1000cc0c:	1002be26 	beq	r2,zero,1000d708 <___vfiprintf_internal_r+0x117c>
1000cc10:	d9002217 	ldw	r4,136(sp)
1000cc14:	d9402417 	ldw	r5,144(sp)
1000cc18:	20800017 	ldw	r2,0(r4)
1000cc1c:	2807d7fa 	srai	r3,r5,31
1000cc20:	21000104 	addi	r4,r4,4
1000cc24:	d9002215 	stw	r4,136(sp)
1000cc28:	11400015 	stw	r5,0(r2)
1000cc2c:	10c00115 	stw	r3,4(r2)
1000cc30:	003e8a06 	br	1000c65c <__alt_data_end+0xf800c65c>
1000cc34:	9cc03fcc 	andi	r19,r19,255
1000cc38:	b811883a 	mov	r8,r23
1000cc3c:	9803871e 	bne	r19,zero,1000da5c <___vfiprintf_internal_r+0x14d0>
1000cc40:	8880080c 	andi	r2,r17,32
1000cc44:	10009a26 	beq	r2,zero,1000ceb0 <___vfiprintf_internal_r+0x924>
1000cc48:	d9002217 	ldw	r4,136(sp)
1000cc4c:	d8001d85 	stb	zero,118(sp)
1000cc50:	20800204 	addi	r2,r4,8
1000cc54:	24c00017 	ldw	r19,0(r4)
1000cc58:	25000117 	ldw	r20,4(r4)
1000cc5c:	8002a416 	blt	r16,zero,1000d6f0 <___vfiprintf_internal_r+0x1164>
1000cc60:	013fdfc4 	movi	r4,-129
1000cc64:	9d06b03a 	or	r3,r19,r20
1000cc68:	d8802215 	stw	r2,136(sp)
1000cc6c:	8922703a 	and	r17,r17,r4
1000cc70:	18009b26 	beq	r3,zero,1000cee0 <___vfiprintf_internal_r+0x954>
1000cc74:	002b883a 	mov	r21,zero
1000cc78:	ddc01a04 	addi	r23,sp,104
1000cc7c:	9806d0fa 	srli	r3,r19,3
1000cc80:	a008977a 	slli	r4,r20,29
1000cc84:	a028d0fa 	srli	r20,r20,3
1000cc88:	9cc001cc 	andi	r19,r19,7
1000cc8c:	98800c04 	addi	r2,r19,48
1000cc90:	bdffffc4 	addi	r23,r23,-1
1000cc94:	20e6b03a 	or	r19,r4,r3
1000cc98:	b8800005 	stb	r2,0(r23)
1000cc9c:	9d06b03a 	or	r3,r19,r20
1000cca0:	183ff61e 	bne	r3,zero,1000cc7c <__alt_data_end+0xf800cc7c>
1000cca4:	88c0004c 	andi	r3,r17,1
1000cca8:	18021f1e 	bne	r3,zero,1000d528 <___vfiprintf_internal_r+0xf9c>
1000ccac:	d9401e17 	ldw	r5,120(sp)
1000ccb0:	2de9c83a 	sub	r20,r5,r23
1000ccb4:	003f3806 	br	1000c998 <__alt_data_end+0xf800c998>
1000ccb8:	9cc03fcc 	andi	r19,r19,255
1000ccbc:	b811883a 	mov	r8,r23
1000ccc0:	98034f1e 	bne	r19,zero,1000da00 <___vfiprintf_internal_r+0x1474>
1000ccc4:	00840074 	movhi	r2,4097
1000ccc8:	10926d04 	addi	r2,r2,18868
1000cccc:	d8802615 	stw	r2,152(sp)
1000ccd0:	8880080c 	andi	r2,r17,32
1000ccd4:	1000ac26 	beq	r2,zero,1000cf88 <___vfiprintf_internal_r+0x9fc>
1000ccd8:	d9002217 	ldw	r4,136(sp)
1000ccdc:	24c00017 	ldw	r19,0(r4)
1000cce0:	25000117 	ldw	r20,4(r4)
1000cce4:	21000204 	addi	r4,r4,8
1000cce8:	d9002215 	stw	r4,136(sp)
1000ccec:	8880004c 	andi	r2,r17,1
1000ccf0:	1001e726 	beq	r2,zero,1000d490 <___vfiprintf_internal_r+0xf04>
1000ccf4:	9d04b03a 	or	r2,r19,r20
1000ccf8:	10025c1e 	bne	r2,zero,1000d66c <___vfiprintf_internal_r+0x10e0>
1000ccfc:	d8001d85 	stb	zero,118(sp)
1000cd00:	80024416 	blt	r16,zero,1000d614 <___vfiprintf_internal_r+0x1088>
1000cd04:	00bfdfc4 	movi	r2,-129
1000cd08:	88a2703a 	and	r17,r17,r2
1000cd0c:	003f1d06 	br	1000c984 <__alt_data_end+0xf800c984>
1000cd10:	d8c02217 	ldw	r3,136(sp)
1000cd14:	04c00044 	movi	r19,1
1000cd18:	b811883a 	mov	r8,r23
1000cd1c:	18800017 	ldw	r2,0(r3)
1000cd20:	18c00104 	addi	r3,r3,4
1000cd24:	d8001d85 	stb	zero,118(sp)
1000cd28:	d8801005 	stb	r2,64(sp)
1000cd2c:	d8c02215 	stw	r3,136(sp)
1000cd30:	9829883a 	mov	r20,r19
1000cd34:	ddc01004 	addi	r23,sp,64
1000cd38:	0021883a 	mov	r16,zero
1000cd3c:	003f1e06 	br	1000c9b8 <__alt_data_end+0xf800c9b8>
1000cd40:	9cc03fcc 	andi	r19,r19,255
1000cd44:	b811883a 	mov	r8,r23
1000cd48:	9803331e 	bne	r19,zero,1000da18 <___vfiprintf_internal_r+0x148c>
1000cd4c:	8880080c 	andi	r2,r17,32
1000cd50:	10004826 	beq	r2,zero,1000ce74 <___vfiprintf_internal_r+0x8e8>
1000cd54:	d9002217 	ldw	r4,136(sp)
1000cd58:	20800117 	ldw	r2,4(r4)
1000cd5c:	24c00017 	ldw	r19,0(r4)
1000cd60:	21000204 	addi	r4,r4,8
1000cd64:	d9002215 	stw	r4,136(sp)
1000cd68:	1029883a 	mov	r20,r2
1000cd6c:	10024c16 	blt	r2,zero,1000d6a0 <___vfiprintf_internal_r+0x1114>
1000cd70:	dd401d83 	ldbu	r21,118(sp)
1000cd74:	80007116 	blt	r16,zero,1000cf3c <___vfiprintf_internal_r+0x9b0>
1000cd78:	00ffdfc4 	movi	r3,-129
1000cd7c:	9d04b03a 	or	r2,r19,r20
1000cd80:	88e2703a 	and	r17,r17,r3
1000cd84:	1000d126 	beq	r2,zero,1000d0cc <___vfiprintf_internal_r+0xb40>
1000cd88:	a0023526 	beq	r20,zero,1000d660 <___vfiprintf_internal_r+0x10d4>
1000cd8c:	ddc01a04 	addi	r23,sp,104
1000cd90:	4039883a 	mov	fp,r8
1000cd94:	9809883a 	mov	r4,r19
1000cd98:	a00b883a 	mov	r5,r20
1000cd9c:	01800284 	movi	r6,10
1000cda0:	000f883a 	mov	r7,zero
1000cda4:	000eab80 	call	1000eab8 <__umoddi3>
1000cda8:	10800c04 	addi	r2,r2,48
1000cdac:	bdffffc4 	addi	r23,r23,-1
1000cdb0:	9809883a 	mov	r4,r19
1000cdb4:	a00b883a 	mov	r5,r20
1000cdb8:	b8800005 	stb	r2,0(r23)
1000cdbc:	01800284 	movi	r6,10
1000cdc0:	000f883a 	mov	r7,zero
1000cdc4:	000e4bc0 	call	1000e4bc <__udivdi3>
1000cdc8:	1027883a 	mov	r19,r2
1000cdcc:	10c4b03a 	or	r2,r2,r3
1000cdd0:	1829883a 	mov	r20,r3
1000cdd4:	103fef1e 	bne	r2,zero,1000cd94 <__alt_data_end+0xf800cd94>
1000cdd8:	d9001e17 	ldw	r4,120(sp)
1000cddc:	e011883a 	mov	r8,fp
1000cde0:	25e9c83a 	sub	r20,r4,r23
1000cde4:	003eec06 	br	1000c998 <__alt_data_end+0xf800c998>
1000cde8:	d8802307 	ldb	r2,140(sp)
1000cdec:	1002361e 	bne	r2,zero,1000d6c8 <___vfiprintf_internal_r+0x113c>
1000cdf0:	00c00804 	movi	r3,32
1000cdf4:	d8c02305 	stb	r3,140(sp)
1000cdf8:	04c00044 	movi	r19,1
1000cdfc:	b0c00007 	ldb	r3,0(r22)
1000ce00:	003e3f06 	br	1000c700 <__alt_data_end+0xf800c700>
1000ce04:	8c400054 	ori	r17,r17,1
1000ce08:	b0c00007 	ldb	r3,0(r22)
1000ce0c:	003e3c06 	br	1000c700 <__alt_data_end+0xf800c700>
1000ce10:	8c402014 	ori	r17,r17,128
1000ce14:	b0c00007 	ldb	r3,0(r22)
1000ce18:	003e3906 	br	1000c700 <__alt_data_end+0xf800c700>
1000ce1c:	dc002715 	stw	r16,156(sp)
1000ce20:	d8002515 	stw	zero,148(sp)
1000ce24:	1f3ff404 	addi	fp,r3,-48
1000ce28:	0009883a 	mov	r4,zero
1000ce2c:	b021883a 	mov	r16,r22
1000ce30:	01400284 	movi	r5,10
1000ce34:	0004b940 	call	10004b94 <__mulsi3>
1000ce38:	80c00007 	ldb	r3,0(r16)
1000ce3c:	e089883a 	add	r4,fp,r2
1000ce40:	b5800044 	addi	r22,r22,1
1000ce44:	1f3ff404 	addi	fp,r3,-48
1000ce48:	b021883a 	mov	r16,r22
1000ce4c:	af3ff82e 	bgeu	r21,fp,1000ce30 <__alt_data_end+0xf800ce30>
1000ce50:	d9002515 	stw	r4,148(sp)
1000ce54:	dc002717 	ldw	r16,156(sp)
1000ce58:	003e2a06 	br	1000c704 <__alt_data_end+0xf800c704>
1000ce5c:	9cc03fcc 	andi	r19,r19,255
1000ce60:	b811883a 	mov	r8,r23
1000ce64:	9802e91e 	bne	r19,zero,1000da0c <___vfiprintf_internal_r+0x1480>
1000ce68:	8c400414 	ori	r17,r17,16
1000ce6c:	8880080c 	andi	r2,r17,32
1000ce70:	103fb81e 	bne	r2,zero,1000cd54 <__alt_data_end+0xf800cd54>
1000ce74:	8880040c 	andi	r2,r17,16
1000ce78:	10022e26 	beq	r2,zero,1000d734 <___vfiprintf_internal_r+0x11a8>
1000ce7c:	d9402217 	ldw	r5,136(sp)
1000ce80:	2cc00017 	ldw	r19,0(r5)
1000ce84:	29400104 	addi	r5,r5,4
1000ce88:	d9402215 	stw	r5,136(sp)
1000ce8c:	9829d7fa 	srai	r20,r19,31
1000ce90:	a005883a 	mov	r2,r20
1000ce94:	003fb506 	br	1000cd6c <__alt_data_end+0xf800cd6c>
1000ce98:	9cc03fcc 	andi	r19,r19,255
1000ce9c:	b811883a 	mov	r8,r23
1000cea0:	9802fa1e 	bne	r19,zero,1000da8c <___vfiprintf_internal_r+0x1500>
1000cea4:	8c400414 	ori	r17,r17,16
1000cea8:	8880080c 	andi	r2,r17,32
1000ceac:	103f661e 	bne	r2,zero,1000cc48 <__alt_data_end+0xf800cc48>
1000ceb0:	8880040c 	andi	r2,r17,16
1000ceb4:	10020626 	beq	r2,zero,1000d6d0 <___vfiprintf_internal_r+0x1144>
1000ceb8:	d9402217 	ldw	r5,136(sp)
1000cebc:	d8001d85 	stb	zero,118(sp)
1000cec0:	0029883a 	mov	r20,zero
1000cec4:	28800104 	addi	r2,r5,4
1000cec8:	2cc00017 	ldw	r19,0(r5)
1000cecc:	80020816 	blt	r16,zero,1000d6f0 <___vfiprintf_internal_r+0x1164>
1000ced0:	00ffdfc4 	movi	r3,-129
1000ced4:	d8802215 	stw	r2,136(sp)
1000ced8:	88e2703a 	and	r17,r17,r3
1000cedc:	983f651e 	bne	r19,zero,1000cc74 <__alt_data_end+0xf800cc74>
1000cee0:	002b883a 	mov	r21,zero
1000cee4:	8002cf26 	beq	r16,zero,1000da24 <___vfiprintf_internal_r+0x1498>
1000cee8:	0027883a 	mov	r19,zero
1000ceec:	0029883a 	mov	r20,zero
1000cef0:	003f6106 	br	1000cc78 <__alt_data_end+0xf800cc78>
1000cef4:	9cc03fcc 	andi	r19,r19,255
1000cef8:	b811883a 	mov	r8,r23
1000cefc:	9802e01e 	bne	r19,zero,1000da80 <___vfiprintf_internal_r+0x14f4>
1000cf00:	8c400414 	ori	r17,r17,16
1000cf04:	8880080c 	andi	r2,r17,32
1000cf08:	1000641e 	bne	r2,zero,1000d09c <___vfiprintf_internal_r+0xb10>
1000cf0c:	8880040c 	andi	r2,r17,16
1000cf10:	1001c81e 	bne	r2,zero,1000d634 <___vfiprintf_internal_r+0x10a8>
1000cf14:	8880100c 	andi	r2,r17,64
1000cf18:	d8001d85 	stb	zero,118(sp)
1000cf1c:	1002281e 	bne	r2,zero,1000d7c0 <___vfiprintf_internal_r+0x1234>
1000cf20:	d9002217 	ldw	r4,136(sp)
1000cf24:	0029883a 	mov	r20,zero
1000cf28:	20800104 	addi	r2,r4,4
1000cf2c:	24c00017 	ldw	r19,0(r4)
1000cf30:	8001c60e 	bge	r16,zero,1000d64c <___vfiprintf_internal_r+0x10c0>
1000cf34:	d8802215 	stw	r2,136(sp)
1000cf38:	002b883a 	mov	r21,zero
1000cf3c:	9d04b03a 	or	r2,r19,r20
1000cf40:	103f911e 	bne	r2,zero,1000cd88 <__alt_data_end+0xf800cd88>
1000cf44:	00800044 	movi	r2,1
1000cf48:	10803fcc 	andi	r2,r2,255
1000cf4c:	00c00044 	movi	r3,1
1000cf50:	10c05f26 	beq	r2,r3,1000d0d0 <___vfiprintf_internal_r+0xb44>
1000cf54:	00c00084 	movi	r3,2
1000cf58:	10ffe31e 	bne	r2,r3,1000cee8 <__alt_data_end+0xf800cee8>
1000cf5c:	0027883a 	mov	r19,zero
1000cf60:	0029883a 	mov	r20,zero
1000cf64:	00015106 	br	1000d4ac <___vfiprintf_internal_r+0xf20>
1000cf68:	9cc03fcc 	andi	r19,r19,255
1000cf6c:	b811883a 	mov	r8,r23
1000cf70:	9802c01e 	bne	r19,zero,1000da74 <___vfiprintf_internal_r+0x14e8>
1000cf74:	01440074 	movhi	r5,4097
1000cf78:	29526804 	addi	r5,r5,18848
1000cf7c:	d9402615 	stw	r5,152(sp)
1000cf80:	8880080c 	andi	r2,r17,32
1000cf84:	103f541e 	bne	r2,zero,1000ccd8 <__alt_data_end+0xf800ccd8>
1000cf88:	8880040c 	andi	r2,r17,16
1000cf8c:	1001f226 	beq	r2,zero,1000d758 <___vfiprintf_internal_r+0x11cc>
1000cf90:	d9402217 	ldw	r5,136(sp)
1000cf94:	0029883a 	mov	r20,zero
1000cf98:	2cc00017 	ldw	r19,0(r5)
1000cf9c:	29400104 	addi	r5,r5,4
1000cfa0:	d9402215 	stw	r5,136(sp)
1000cfa4:	003f5106 	br	1000ccec <__alt_data_end+0xf800ccec>
1000cfa8:	d8c02217 	ldw	r3,136(sp)
1000cfac:	b811883a 	mov	r8,r23
1000cfb0:	d8001d85 	stb	zero,118(sp)
1000cfb4:	1dc00017 	ldw	r23,0(r3)
1000cfb8:	1f000104 	addi	fp,r3,4
1000cfbc:	b8025926 	beq	r23,zero,1000d924 <___vfiprintf_internal_r+0x1398>
1000cfc0:	80023316 	blt	r16,zero,1000d890 <___vfiprintf_internal_r+0x1304>
1000cfc4:	800d883a 	mov	r6,r16
1000cfc8:	000b883a 	mov	r5,zero
1000cfcc:	b809883a 	mov	r4,r23
1000cfd0:	da002a15 	stw	r8,168(sp)
1000cfd4:	000a6cc0 	call	1000a6cc <memchr>
1000cfd8:	da002a17 	ldw	r8,168(sp)
1000cfdc:	10026826 	beq	r2,zero,1000d980 <___vfiprintf_internal_r+0x13f4>
1000cfe0:	15e9c83a 	sub	r20,r2,r23
1000cfe4:	dd401d83 	ldbu	r21,118(sp)
1000cfe8:	df002215 	stw	fp,136(sp)
1000cfec:	0021883a 	mov	r16,zero
1000cff0:	003e6906 	br	1000c998 <__alt_data_end+0xf800c998>
1000cff4:	9cc03fcc 	andi	r19,r19,255
1000cff8:	b811883a 	mov	r8,r23
1000cffc:	983fc126 	beq	r19,zero,1000cf04 <__alt_data_end+0xf800cf04>
1000d000:	d8c02303 	ldbu	r3,140(sp)
1000d004:	d8c01d85 	stb	r3,118(sp)
1000d008:	003fbe06 	br	1000cf04 <__alt_data_end+0xf800cf04>
1000d00c:	d9002217 	ldw	r4,136(sp)
1000d010:	d9402217 	ldw	r5,136(sp)
1000d014:	21000017 	ldw	r4,0(r4)
1000d018:	28800104 	addi	r2,r5,4
1000d01c:	d9002515 	stw	r4,148(sp)
1000d020:	203e3d16 	blt	r4,zero,1000c918 <__alt_data_end+0xf800c918>
1000d024:	d8802215 	stw	r2,136(sp)
1000d028:	b0c00007 	ldb	r3,0(r22)
1000d02c:	003db406 	br	1000c700 <__alt_data_end+0xf800c700>
1000d030:	00c00ac4 	movi	r3,43
1000d034:	d8c02305 	stb	r3,140(sp)
1000d038:	04c00044 	movi	r19,1
1000d03c:	b0c00007 	ldb	r3,0(r22)
1000d040:	003daf06 	br	1000c700 <__alt_data_end+0xf800c700>
1000d044:	b0c00007 	ldb	r3,0(r22)
1000d048:	01000a84 	movi	r4,42
1000d04c:	b4000044 	addi	r16,r22,1
1000d050:	19025e26 	beq	r3,r4,1000d9cc <___vfiprintf_internal_r+0x1440>
1000d054:	1f3ff404 	addi	fp,r3,-48
1000d058:	0009883a 	mov	r4,zero
1000d05c:	af025236 	bltu	r21,fp,1000d9a8 <___vfiprintf_internal_r+0x141c>
1000d060:	01400284 	movi	r5,10
1000d064:	0004b940 	call	10004b94 <__mulsi3>
1000d068:	80c00007 	ldb	r3,0(r16)
1000d06c:	1709883a 	add	r4,r2,fp
1000d070:	85800044 	addi	r22,r16,1
1000d074:	1f3ff404 	addi	fp,r3,-48
1000d078:	b021883a 	mov	r16,r22
1000d07c:	af3ff82e 	bgeu	r21,fp,1000d060 <__alt_data_end+0xf800d060>
1000d080:	2021883a 	mov	r16,r4
1000d084:	203d9f0e 	bge	r4,zero,1000c704 <__alt_data_end+0xf800c704>
1000d088:	043fffc4 	movi	r16,-1
1000d08c:	003d9d06 	br	1000c704 <__alt_data_end+0xf800c704>
1000d090:	8c401014 	ori	r17,r17,64
1000d094:	b0c00007 	ldb	r3,0(r22)
1000d098:	003d9906 	br	1000c700 <__alt_data_end+0xf800c700>
1000d09c:	d9002217 	ldw	r4,136(sp)
1000d0a0:	d8001d85 	stb	zero,118(sp)
1000d0a4:	20c00204 	addi	r3,r4,8
1000d0a8:	24c00017 	ldw	r19,0(r4)
1000d0ac:	25000117 	ldw	r20,4(r4)
1000d0b0:	8001e716 	blt	r16,zero,1000d850 <___vfiprintf_internal_r+0x12c4>
1000d0b4:	013fdfc4 	movi	r4,-129
1000d0b8:	9d04b03a 	or	r2,r19,r20
1000d0bc:	d8c02215 	stw	r3,136(sp)
1000d0c0:	8922703a 	and	r17,r17,r4
1000d0c4:	002b883a 	mov	r21,zero
1000d0c8:	103f2f1e 	bne	r2,zero,1000cd88 <__alt_data_end+0xf800cd88>
1000d0cc:	803e2f26 	beq	r16,zero,1000c98c <__alt_data_end+0xf800c98c>
1000d0d0:	0027883a 	mov	r19,zero
1000d0d4:	9cc00c04 	addi	r19,r19,48
1000d0d8:	dcc019c5 	stb	r19,103(sp)
1000d0dc:	dd002817 	ldw	r20,160(sp)
1000d0e0:	ddc019c4 	addi	r23,sp,103
1000d0e4:	003e2c06 	br	1000c998 <__alt_data_end+0xf800c998>
1000d0e8:	9cc03fcc 	andi	r19,r19,255
1000d0ec:	b811883a 	mov	r8,r23
1000d0f0:	9802571e 	bne	r19,zero,1000da50 <___vfiprintf_internal_r+0x14c4>
1000d0f4:	18005726 	beq	r3,zero,1000d254 <___vfiprintf_internal_r+0xcc8>
1000d0f8:	04c00044 	movi	r19,1
1000d0fc:	d8c01005 	stb	r3,64(sp)
1000d100:	d8001d85 	stb	zero,118(sp)
1000d104:	9829883a 	mov	r20,r19
1000d108:	ddc01004 	addi	r23,sp,64
1000d10c:	003f0a06 	br	1000cd38 <__alt_data_end+0xf800cd38>
1000d110:	d9402017 	ldw	r5,128(sp)
1000d114:	d9002117 	ldw	r4,132(sp)
1000d118:	d9801a04 	addi	r6,sp,104
1000d11c:	da802a15 	stw	r10,168(sp)
1000d120:	000c4780 	call	1000c478 <__sprint_r.part.0>
1000d124:	da802a17 	ldw	r10,168(sp)
1000d128:	1000501e 	bne	r2,zero,1000d26c <___vfiprintf_internal_r+0xce0>
1000d12c:	d9801b17 	ldw	r6,108(sp)
1000d130:	d8801c17 	ldw	r2,112(sp)
1000d134:	d811883a 	mov	r8,sp
1000d138:	31000044 	addi	r4,r6,1
1000d13c:	003e3606 	br	1000ca18 <__alt_data_end+0xf800ca18>
1000d140:	d9001b17 	ldw	r4,108(sp)
1000d144:	d8801c17 	ldw	r2,112(sp)
1000d148:	21400044 	addi	r5,r4,1
1000d14c:	d9801d87 	ldb	r6,118(sp)
1000d150:	303e5226 	beq	r6,zero,1000ca9c <__alt_data_end+0xf800ca9c>
1000d154:	01800044 	movi	r6,1
1000d158:	d9001d84 	addi	r4,sp,118
1000d15c:	1185883a 	add	r2,r2,r6
1000d160:	41000015 	stw	r4,0(r8)
1000d164:	41800115 	stw	r6,4(r8)
1000d168:	d8801c15 	stw	r2,112(sp)
1000d16c:	d9401b15 	stw	r5,108(sp)
1000d170:	010001c4 	movi	r4,7
1000d174:	2140b00e 	bge	r4,r5,1000d438 <___vfiprintf_internal_r+0xeac>
1000d178:	1000f61e 	bne	r2,zero,1000d554 <___vfiprintf_internal_r+0xfc8>
1000d17c:	3800b31e 	bne	r7,zero,1000d44c <___vfiprintf_internal_r+0xec0>
1000d180:	0009883a 	mov	r4,zero
1000d184:	300b883a 	mov	r5,r6
1000d188:	d811883a 	mov	r8,sp
1000d18c:	01802004 	movi	r6,128
1000d190:	19be5226 	beq	r3,r6,1000cadc <__alt_data_end+0xf800cadc>
1000d194:	8521c83a 	sub	r16,r16,r20
1000d198:	043e790e 	bge	zero,r16,1000cb80 <__alt_data_end+0xf800cb80>
1000d19c:	05400404 	movi	r21,16
1000d1a0:	ac01b00e 	bge	r21,r16,1000d864 <___vfiprintf_internal_r+0x12d8>
1000d1a4:	01440074 	movhi	r5,4097
1000d1a8:	2952ce04 	addi	r5,r5,19256
1000d1ac:	d9402315 	stw	r5,140(sp)
1000d1b0:	070001c4 	movi	fp,7
1000d1b4:	00000506 	br	1000d1cc <___vfiprintf_internal_r+0xc40>
1000d1b8:	21400084 	addi	r5,r4,2
1000d1bc:	42000204 	addi	r8,r8,8
1000d1c0:	1809883a 	mov	r4,r3
1000d1c4:	843ffc04 	addi	r16,r16,-16
1000d1c8:	ac000d0e 	bge	r21,r16,1000d200 <___vfiprintf_internal_r+0xc74>
1000d1cc:	10800404 	addi	r2,r2,16
1000d1d0:	20c00044 	addi	r3,r4,1
1000d1d4:	44800015 	stw	r18,0(r8)
1000d1d8:	45400115 	stw	r21,4(r8)
1000d1dc:	d8801c15 	stw	r2,112(sp)
1000d1e0:	d8c01b15 	stw	r3,108(sp)
1000d1e4:	e0fff40e 	bge	fp,r3,1000d1b8 <__alt_data_end+0xf800d1b8>
1000d1e8:	1000101e 	bne	r2,zero,1000d22c <___vfiprintf_internal_r+0xca0>
1000d1ec:	843ffc04 	addi	r16,r16,-16
1000d1f0:	01400044 	movi	r5,1
1000d1f4:	0009883a 	mov	r4,zero
1000d1f8:	d811883a 	mov	r8,sp
1000d1fc:	ac3ff316 	blt	r21,r16,1000d1cc <__alt_data_end+0xf800d1cc>
1000d200:	d8c02317 	ldw	r3,140(sp)
1000d204:	1405883a 	add	r2,r2,r16
1000d208:	44000115 	stw	r16,4(r8)
1000d20c:	40c00015 	stw	r3,0(r8)
1000d210:	d8801c15 	stw	r2,112(sp)
1000d214:	d9401b15 	stw	r5,108(sp)
1000d218:	00c001c4 	movi	r3,7
1000d21c:	19401916 	blt	r3,r5,1000d284 <___vfiprintf_internal_r+0xcf8>
1000d220:	42000204 	addi	r8,r8,8
1000d224:	29400044 	addi	r5,r5,1
1000d228:	003e5506 	br	1000cb80 <__alt_data_end+0xf800cb80>
1000d22c:	d9402017 	ldw	r5,128(sp)
1000d230:	d9002117 	ldw	r4,132(sp)
1000d234:	d9801a04 	addi	r6,sp,104
1000d238:	000c4780 	call	1000c478 <__sprint_r.part.0>
1000d23c:	10000b1e 	bne	r2,zero,1000d26c <___vfiprintf_internal_r+0xce0>
1000d240:	d9001b17 	ldw	r4,108(sp)
1000d244:	d8801c17 	ldw	r2,112(sp)
1000d248:	d811883a 	mov	r8,sp
1000d24c:	21400044 	addi	r5,r4,1
1000d250:	003fdc06 	br	1000d1c4 <__alt_data_end+0xf800d1c4>
1000d254:	d8801c17 	ldw	r2,112(sp)
1000d258:	10000426 	beq	r2,zero,1000d26c <___vfiprintf_internal_r+0xce0>
1000d25c:	d9402017 	ldw	r5,128(sp)
1000d260:	d9002117 	ldw	r4,132(sp)
1000d264:	d9801a04 	addi	r6,sp,104
1000d268:	000c4780 	call	1000c478 <__sprint_r.part.0>
1000d26c:	d9402017 	ldw	r5,128(sp)
1000d270:	2880030b 	ldhu	r2,12(r5)
1000d274:	1080100c 	andi	r2,r2,64
1000d278:	10014d1e 	bne	r2,zero,1000d7b0 <___vfiprintf_internal_r+0x1224>
1000d27c:	d8802417 	ldw	r2,144(sp)
1000d280:	003d9706 	br	1000c8e0 <__alt_data_end+0xf800c8e0>
1000d284:	1000d21e 	bne	r2,zero,1000d5d0 <___vfiprintf_internal_r+0x1044>
1000d288:	00c00044 	movi	r3,1
1000d28c:	a005883a 	mov	r2,r20
1000d290:	ddc00015 	stw	r23,0(sp)
1000d294:	dd000115 	stw	r20,4(sp)
1000d298:	dd001c15 	stw	r20,112(sp)
1000d29c:	d8c01b15 	stw	r3,108(sp)
1000d2a0:	d811883a 	mov	r8,sp
1000d2a4:	42000204 	addi	r8,r8,8
1000d2a8:	8c40010c 	andi	r17,r17,4
1000d2ac:	88004026 	beq	r17,zero,1000d3b0 <___vfiprintf_internal_r+0xe24>
1000d2b0:	d9002517 	ldw	r4,148(sp)
1000d2b4:	24e3c83a 	sub	r17,r4,r19
1000d2b8:	04403d0e 	bge	zero,r17,1000d3b0 <___vfiprintf_internal_r+0xe24>
1000d2bc:	04000404 	movi	r16,16
1000d2c0:	8441a90e 	bge	r16,r17,1000d968 <___vfiprintf_internal_r+0x13dc>
1000d2c4:	00c40074 	movhi	r3,4097
1000d2c8:	18d2d204 	addi	r3,r3,19272
1000d2cc:	d9001b17 	ldw	r4,108(sp)
1000d2d0:	d8c02315 	stw	r3,140(sp)
1000d2d4:	050001c4 	movi	r20,7
1000d2d8:	dd402117 	ldw	r21,132(sp)
1000d2dc:	ddc02017 	ldw	r23,128(sp)
1000d2e0:	00000506 	br	1000d2f8 <___vfiprintf_internal_r+0xd6c>
1000d2e4:	21400084 	addi	r5,r4,2
1000d2e8:	42000204 	addi	r8,r8,8
1000d2ec:	1809883a 	mov	r4,r3
1000d2f0:	8c7ffc04 	addi	r17,r17,-16
1000d2f4:	84400f0e 	bge	r16,r17,1000d334 <___vfiprintf_internal_r+0xda8>
1000d2f8:	01440074 	movhi	r5,4097
1000d2fc:	10800404 	addi	r2,r2,16
1000d300:	20c00044 	addi	r3,r4,1
1000d304:	2952d204 	addi	r5,r5,19272
1000d308:	41400015 	stw	r5,0(r8)
1000d30c:	44000115 	stw	r16,4(r8)
1000d310:	d8801c15 	stw	r2,112(sp)
1000d314:	d8c01b15 	stw	r3,108(sp)
1000d318:	a0fff20e 	bge	r20,r3,1000d2e4 <__alt_data_end+0xf800d2e4>
1000d31c:	1000141e 	bne	r2,zero,1000d370 <___vfiprintf_internal_r+0xde4>
1000d320:	8c7ffc04 	addi	r17,r17,-16
1000d324:	01400044 	movi	r5,1
1000d328:	0009883a 	mov	r4,zero
1000d32c:	d811883a 	mov	r8,sp
1000d330:	847ff116 	blt	r16,r17,1000d2f8 <__alt_data_end+0xf800d2f8>
1000d334:	d8c02317 	ldw	r3,140(sp)
1000d338:	1445883a 	add	r2,r2,r17
1000d33c:	44400115 	stw	r17,4(r8)
1000d340:	40c00015 	stw	r3,0(r8)
1000d344:	d8801c15 	stw	r2,112(sp)
1000d348:	d9401b15 	stw	r5,108(sp)
1000d34c:	00c001c4 	movi	r3,7
1000d350:	1940170e 	bge	r3,r5,1000d3b0 <___vfiprintf_internal_r+0xe24>
1000d354:	1000101e 	bne	r2,zero,1000d398 <___vfiprintf_internal_r+0xe0c>
1000d358:	d8802517 	ldw	r2,148(sp)
1000d35c:	14c11616 	blt	r2,r19,1000d7b8 <___vfiprintf_internal_r+0x122c>
1000d360:	d9002417 	ldw	r4,144(sp)
1000d364:	2089883a 	add	r4,r4,r2
1000d368:	d9002415 	stw	r4,144(sp)
1000d36c:	003e1806 	br	1000cbd0 <__alt_data_end+0xf800cbd0>
1000d370:	d9801a04 	addi	r6,sp,104
1000d374:	b80b883a 	mov	r5,r23
1000d378:	a809883a 	mov	r4,r21
1000d37c:	000c4780 	call	1000c478 <__sprint_r.part.0>
1000d380:	103fba1e 	bne	r2,zero,1000d26c <__alt_data_end+0xf800d26c>
1000d384:	d9001b17 	ldw	r4,108(sp)
1000d388:	d8801c17 	ldw	r2,112(sp)
1000d38c:	d811883a 	mov	r8,sp
1000d390:	21400044 	addi	r5,r4,1
1000d394:	003fd606 	br	1000d2f0 <__alt_data_end+0xf800d2f0>
1000d398:	d9402017 	ldw	r5,128(sp)
1000d39c:	d9002117 	ldw	r4,132(sp)
1000d3a0:	d9801a04 	addi	r6,sp,104
1000d3a4:	000c4780 	call	1000c478 <__sprint_r.part.0>
1000d3a8:	103fb01e 	bne	r2,zero,1000d26c <__alt_data_end+0xf800d26c>
1000d3ac:	d8801c17 	ldw	r2,112(sp)
1000d3b0:	d8c02517 	ldw	r3,148(sp)
1000d3b4:	1cc0010e 	bge	r3,r19,1000d3bc <___vfiprintf_internal_r+0xe30>
1000d3b8:	9807883a 	mov	r3,r19
1000d3bc:	d9002417 	ldw	r4,144(sp)
1000d3c0:	20c9883a 	add	r4,r4,r3
1000d3c4:	d9002415 	stw	r4,144(sp)
1000d3c8:	103e0126 	beq	r2,zero,1000cbd0 <__alt_data_end+0xf800cbd0>
1000d3cc:	d9402017 	ldw	r5,128(sp)
1000d3d0:	d9002117 	ldw	r4,132(sp)
1000d3d4:	d9801a04 	addi	r6,sp,104
1000d3d8:	000c4780 	call	1000c478 <__sprint_r.part.0>
1000d3dc:	103dfc26 	beq	r2,zero,1000cbd0 <__alt_data_end+0xf800cbd0>
1000d3e0:	003fa206 	br	1000d26c <__alt_data_end+0xf800d26c>
1000d3e4:	d9402017 	ldw	r5,128(sp)
1000d3e8:	d9002117 	ldw	r4,132(sp)
1000d3ec:	d9801a04 	addi	r6,sp,104
1000d3f0:	d9c02b15 	stw	r7,172(sp)
1000d3f4:	000c4780 	call	1000c478 <__sprint_r.part.0>
1000d3f8:	d9c02b17 	ldw	r7,172(sp)
1000d3fc:	103f9b1e 	bne	r2,zero,1000d26c <__alt_data_end+0xf800d26c>
1000d400:	d9001b17 	ldw	r4,108(sp)
1000d404:	d8801c17 	ldw	r2,112(sp)
1000d408:	d811883a 	mov	r8,sp
1000d40c:	21800044 	addi	r6,r4,1
1000d410:	003dbf06 	br	1000cb10 <__alt_data_end+0xf800cb10>
1000d414:	1000d81e 	bne	r2,zero,1000d778 <___vfiprintf_internal_r+0x11ec>
1000d418:	d9001d87 	ldb	r4,118(sp)
1000d41c:	20000a26 	beq	r4,zero,1000d448 <___vfiprintf_internal_r+0xebc>
1000d420:	00800044 	movi	r2,1
1000d424:	d9001d84 	addi	r4,sp,118
1000d428:	100b883a 	mov	r5,r2
1000d42c:	d9000015 	stw	r4,0(sp)
1000d430:	d8800115 	stw	r2,4(sp)
1000d434:	d811883a 	mov	r8,sp
1000d438:	2809883a 	mov	r4,r5
1000d43c:	42000204 	addi	r8,r8,8
1000d440:	29400044 	addi	r5,r5,1
1000d444:	003d9506 	br	1000ca9c <__alt_data_end+0xf800ca9c>
1000d448:	3800fd26 	beq	r7,zero,1000d840 <___vfiprintf_internal_r+0x12b4>
1000d44c:	00800084 	movi	r2,2
1000d450:	d9001d04 	addi	r4,sp,116
1000d454:	d9000015 	stw	r4,0(sp)
1000d458:	d8800115 	stw	r2,4(sp)
1000d45c:	01400044 	movi	r5,1
1000d460:	d811883a 	mov	r8,sp
1000d464:	2809883a 	mov	r4,r5
1000d468:	42000204 	addi	r8,r8,8
1000d46c:	29400044 	addi	r5,r5,1
1000d470:	003f4606 	br	1000d18c <__alt_data_end+0xf800d18c>
1000d474:	d8802517 	ldw	r2,148(sp)
1000d478:	14c0010e 	bge	r2,r19,1000d480 <___vfiprintf_internal_r+0xef4>
1000d47c:	9805883a 	mov	r2,r19
1000d480:	d9402417 	ldw	r5,144(sp)
1000d484:	288b883a 	add	r5,r5,r2
1000d488:	d9402415 	stw	r5,144(sp)
1000d48c:	003dd006 	br	1000cbd0 <__alt_data_end+0xf800cbd0>
1000d490:	d8001d85 	stb	zero,118(sp)
1000d494:	80005d16 	blt	r16,zero,1000d60c <___vfiprintf_internal_r+0x1080>
1000d498:	00ffdfc4 	movi	r3,-129
1000d49c:	9d04b03a 	or	r2,r19,r20
1000d4a0:	88e2703a 	and	r17,r17,r3
1000d4a4:	103d3726 	beq	r2,zero,1000c984 <__alt_data_end+0xf800c984>
1000d4a8:	002b883a 	mov	r21,zero
1000d4ac:	d9002617 	ldw	r4,152(sp)
1000d4b0:	ddc01a04 	addi	r23,sp,104
1000d4b4:	988003cc 	andi	r2,r19,15
1000d4b8:	a006973a 	slli	r3,r20,28
1000d4bc:	2085883a 	add	r2,r4,r2
1000d4c0:	9826d13a 	srli	r19,r19,4
1000d4c4:	10800003 	ldbu	r2,0(r2)
1000d4c8:	a028d13a 	srli	r20,r20,4
1000d4cc:	bdffffc4 	addi	r23,r23,-1
1000d4d0:	1ce6b03a 	or	r19,r3,r19
1000d4d4:	b8800005 	stb	r2,0(r23)
1000d4d8:	9d04b03a 	or	r2,r19,r20
1000d4dc:	103ff51e 	bne	r2,zero,1000d4b4 <__alt_data_end+0xf800d4b4>
1000d4e0:	d8801e17 	ldw	r2,120(sp)
1000d4e4:	15e9c83a 	sub	r20,r2,r23
1000d4e8:	003d2b06 	br	1000c998 <__alt_data_end+0xf800c998>
1000d4ec:	d9402017 	ldw	r5,128(sp)
1000d4f0:	d9002117 	ldw	r4,132(sp)
1000d4f4:	d9801a04 	addi	r6,sp,104
1000d4f8:	000c4780 	call	1000c478 <__sprint_r.part.0>
1000d4fc:	103f5b1e 	bne	r2,zero,1000d26c <__alt_data_end+0xf800d26c>
1000d500:	d8801c17 	ldw	r2,112(sp)
1000d504:	d811883a 	mov	r8,sp
1000d508:	003f6706 	br	1000d2a8 <__alt_data_end+0xf800d2a8>
1000d50c:	d9402017 	ldw	r5,128(sp)
1000d510:	d9002117 	ldw	r4,132(sp)
1000d514:	d9801a04 	addi	r6,sp,104
1000d518:	000c4780 	call	1000c478 <__sprint_r.part.0>
1000d51c:	103f531e 	bne	r2,zero,1000d26c <__alt_data_end+0xf800d26c>
1000d520:	d811883a 	mov	r8,sp
1000d524:	003cd906 	br	1000c88c <__alt_data_end+0xf800c88c>
1000d528:	10803fcc 	andi	r2,r2,255
1000d52c:	1080201c 	xori	r2,r2,128
1000d530:	10bfe004 	addi	r2,r2,-128
1000d534:	00c00c04 	movi	r3,48
1000d538:	10ffe926 	beq	r2,r3,1000d4e0 <__alt_data_end+0xf800d4e0>
1000d53c:	b8ffffc5 	stb	r3,-1(r23)
1000d540:	d8c01e17 	ldw	r3,120(sp)
1000d544:	b8bfffc4 	addi	r2,r23,-1
1000d548:	102f883a 	mov	r23,r2
1000d54c:	18a9c83a 	sub	r20,r3,r2
1000d550:	003d1106 	br	1000c998 <__alt_data_end+0xf800c998>
1000d554:	d9402017 	ldw	r5,128(sp)
1000d558:	d9002117 	ldw	r4,132(sp)
1000d55c:	d9801a04 	addi	r6,sp,104
1000d560:	d8c02a15 	stw	r3,168(sp)
1000d564:	d9c02b15 	stw	r7,172(sp)
1000d568:	000c4780 	call	1000c478 <__sprint_r.part.0>
1000d56c:	d8c02a17 	ldw	r3,168(sp)
1000d570:	d9c02b17 	ldw	r7,172(sp)
1000d574:	103f3d1e 	bne	r2,zero,1000d26c <__alt_data_end+0xf800d26c>
1000d578:	d9001b17 	ldw	r4,108(sp)
1000d57c:	d8801c17 	ldw	r2,112(sp)
1000d580:	d811883a 	mov	r8,sp
1000d584:	21400044 	addi	r5,r4,1
1000d588:	003d4406 	br	1000ca9c <__alt_data_end+0xf800ca9c>
1000d58c:	d9402017 	ldw	r5,128(sp)
1000d590:	d9002117 	ldw	r4,132(sp)
1000d594:	d9801a04 	addi	r6,sp,104
1000d598:	d8c02a15 	stw	r3,168(sp)
1000d59c:	000c4780 	call	1000c478 <__sprint_r.part.0>
1000d5a0:	d8c02a17 	ldw	r3,168(sp)
1000d5a4:	103f311e 	bne	r2,zero,1000d26c <__alt_data_end+0xf800d26c>
1000d5a8:	d9001b17 	ldw	r4,108(sp)
1000d5ac:	d8801c17 	ldw	r2,112(sp)
1000d5b0:	d811883a 	mov	r8,sp
1000d5b4:	21400044 	addi	r5,r4,1
1000d5b8:	003ef406 	br	1000d18c <__alt_data_end+0xf800d18c>
1000d5bc:	1000bd1e 	bne	r2,zero,1000d8b4 <___vfiprintf_internal_r+0x1328>
1000d5c0:	01400044 	movi	r5,1
1000d5c4:	0009883a 	mov	r4,zero
1000d5c8:	d811883a 	mov	r8,sp
1000d5cc:	003ef106 	br	1000d194 <__alt_data_end+0xf800d194>
1000d5d0:	d9402017 	ldw	r5,128(sp)
1000d5d4:	d9002117 	ldw	r4,132(sp)
1000d5d8:	d9801a04 	addi	r6,sp,104
1000d5dc:	000c4780 	call	1000c478 <__sprint_r.part.0>
1000d5e0:	103f221e 	bne	r2,zero,1000d26c <__alt_data_end+0xf800d26c>
1000d5e4:	d9401b17 	ldw	r5,108(sp)
1000d5e8:	d8801c17 	ldw	r2,112(sp)
1000d5ec:	d811883a 	mov	r8,sp
1000d5f0:	29400044 	addi	r5,r5,1
1000d5f4:	003d6206 	br	1000cb80 <__alt_data_end+0xf800cb80>
1000d5f8:	01440074 	movhi	r5,4097
1000d5fc:	29526d04 	addi	r5,r5,18868
1000d600:	d9402615 	stw	r5,152(sp)
1000d604:	d8c02215 	stw	r3,136(sp)
1000d608:	1023883a 	mov	r17,r2
1000d60c:	9d04b03a 	or	r2,r19,r20
1000d610:	103fa51e 	bne	r2,zero,1000d4a8 <__alt_data_end+0xf800d4a8>
1000d614:	002b883a 	mov	r21,zero
1000d618:	00800084 	movi	r2,2
1000d61c:	003e4a06 	br	1000cf48 <__alt_data_end+0xf800cf48>
1000d620:	01440074 	movhi	r5,4097
1000d624:	29526d04 	addi	r5,r5,18868
1000d628:	002b883a 	mov	r21,zero
1000d62c:	d9402615 	stw	r5,152(sp)
1000d630:	003f9e06 	br	1000d4ac <__alt_data_end+0xf800d4ac>
1000d634:	d9402217 	ldw	r5,136(sp)
1000d638:	d8001d85 	stb	zero,118(sp)
1000d63c:	0029883a 	mov	r20,zero
1000d640:	28800104 	addi	r2,r5,4
1000d644:	2cc00017 	ldw	r19,0(r5)
1000d648:	803e3a16 	blt	r16,zero,1000cf34 <__alt_data_end+0xf800cf34>
1000d64c:	00ffdfc4 	movi	r3,-129
1000d650:	d8802215 	stw	r2,136(sp)
1000d654:	88e2703a 	and	r17,r17,r3
1000d658:	002b883a 	mov	r21,zero
1000d65c:	983e9b26 	beq	r19,zero,1000d0cc <__alt_data_end+0xf800d0cc>
1000d660:	00800244 	movi	r2,9
1000d664:	14fdc936 	bltu	r2,r19,1000cd8c <__alt_data_end+0xf800cd8c>
1000d668:	003e9a06 	br	1000d0d4 <__alt_data_end+0xf800d0d4>
1000d66c:	00800c04 	movi	r2,48
1000d670:	d8c01d45 	stb	r3,117(sp)
1000d674:	d8801d05 	stb	r2,116(sp)
1000d678:	d8001d85 	stb	zero,118(sp)
1000d67c:	88c00094 	ori	r3,r17,2
1000d680:	80009c16 	blt	r16,zero,1000d8f4 <___vfiprintf_internal_r+0x1368>
1000d684:	00bfdfc4 	movi	r2,-129
1000d688:	88a2703a 	and	r17,r17,r2
1000d68c:	8c400094 	ori	r17,r17,2
1000d690:	002b883a 	mov	r21,zero
1000d694:	003f8506 	br	1000d4ac <__alt_data_end+0xf800d4ac>
1000d698:	b029883a 	mov	r20,r22
1000d69c:	003c0b06 	br	1000c6cc <__alt_data_end+0xf800c6cc>
1000d6a0:	04e7c83a 	sub	r19,zero,r19
1000d6a4:	05400b44 	movi	r21,45
1000d6a8:	9804c03a 	cmpne	r2,r19,zero
1000d6ac:	0529c83a 	sub	r20,zero,r20
1000d6b0:	dd401d85 	stb	r21,118(sp)
1000d6b4:	a0a9c83a 	sub	r20,r20,r2
1000d6b8:	80009716 	blt	r16,zero,1000d918 <___vfiprintf_internal_r+0x138c>
1000d6bc:	00bfdfc4 	movi	r2,-129
1000d6c0:	88a2703a 	and	r17,r17,r2
1000d6c4:	003db006 	br	1000cd88 <__alt_data_end+0xf800cd88>
1000d6c8:	b0c00007 	ldb	r3,0(r22)
1000d6cc:	003c0c06 	br	1000c700 <__alt_data_end+0xf800c700>
1000d6d0:	8880100c 	andi	r2,r17,64
1000d6d4:	d8001d85 	stb	zero,118(sp)
1000d6d8:	1000461e 	bne	r2,zero,1000d7f4 <___vfiprintf_internal_r+0x1268>
1000d6dc:	d9002217 	ldw	r4,136(sp)
1000d6e0:	0029883a 	mov	r20,zero
1000d6e4:	20800104 	addi	r2,r4,4
1000d6e8:	24c00017 	ldw	r19,0(r4)
1000d6ec:	803df80e 	bge	r16,zero,1000ced0 <__alt_data_end+0xf800ced0>
1000d6f0:	9d06b03a 	or	r3,r19,r20
1000d6f4:	d8802215 	stw	r2,136(sp)
1000d6f8:	183d5e1e 	bne	r3,zero,1000cc74 <__alt_data_end+0xf800cc74>
1000d6fc:	002b883a 	mov	r21,zero
1000d700:	0005883a 	mov	r2,zero
1000d704:	003e1006 	br	1000cf48 <__alt_data_end+0xf800cf48>
1000d708:	8880040c 	andi	r2,r17,16
1000d70c:	1000321e 	bne	r2,zero,1000d7d8 <___vfiprintf_internal_r+0x124c>
1000d710:	8c40100c 	andi	r17,r17,64
1000d714:	88008d26 	beq	r17,zero,1000d94c <___vfiprintf_internal_r+0x13c0>
1000d718:	d9402217 	ldw	r5,136(sp)
1000d71c:	d8c02417 	ldw	r3,144(sp)
1000d720:	28800017 	ldw	r2,0(r5)
1000d724:	29400104 	addi	r5,r5,4
1000d728:	d9402215 	stw	r5,136(sp)
1000d72c:	10c0000d 	sth	r3,0(r2)
1000d730:	003bca06 	br	1000c65c <__alt_data_end+0xf800c65c>
1000d734:	8880100c 	andi	r2,r17,64
1000d738:	10003a26 	beq	r2,zero,1000d824 <___vfiprintf_internal_r+0x1298>
1000d73c:	d8802217 	ldw	r2,136(sp)
1000d740:	14c0000f 	ldh	r19,0(r2)
1000d744:	10800104 	addi	r2,r2,4
1000d748:	d8802215 	stw	r2,136(sp)
1000d74c:	9829d7fa 	srai	r20,r19,31
1000d750:	a005883a 	mov	r2,r20
1000d754:	003d8506 	br	1000cd6c <__alt_data_end+0xf800cd6c>
1000d758:	8880100c 	andi	r2,r17,64
1000d75c:	10002b26 	beq	r2,zero,1000d80c <___vfiprintf_internal_r+0x1280>
1000d760:	d8802217 	ldw	r2,136(sp)
1000d764:	0029883a 	mov	r20,zero
1000d768:	14c0000b 	ldhu	r19,0(r2)
1000d76c:	10800104 	addi	r2,r2,4
1000d770:	d8802215 	stw	r2,136(sp)
1000d774:	003d5d06 	br	1000ccec <__alt_data_end+0xf800ccec>
1000d778:	d9402017 	ldw	r5,128(sp)
1000d77c:	d9002117 	ldw	r4,132(sp)
1000d780:	d9801a04 	addi	r6,sp,104
1000d784:	d8c02a15 	stw	r3,168(sp)
1000d788:	d9c02b15 	stw	r7,172(sp)
1000d78c:	000c4780 	call	1000c478 <__sprint_r.part.0>
1000d790:	d8c02a17 	ldw	r3,168(sp)
1000d794:	d9c02b17 	ldw	r7,172(sp)
1000d798:	103eb41e 	bne	r2,zero,1000d26c <__alt_data_end+0xf800d26c>
1000d79c:	d9001b17 	ldw	r4,108(sp)
1000d7a0:	d8801c17 	ldw	r2,112(sp)
1000d7a4:	d811883a 	mov	r8,sp
1000d7a8:	21400044 	addi	r5,r4,1
1000d7ac:	003e6706 	br	1000d14c <__alt_data_end+0xf800d14c>
1000d7b0:	00bfffc4 	movi	r2,-1
1000d7b4:	003c4a06 	br	1000c8e0 <__alt_data_end+0xf800c8e0>
1000d7b8:	9805883a 	mov	r2,r19
1000d7bc:	003ee806 	br	1000d360 <__alt_data_end+0xf800d360>
1000d7c0:	d8c02217 	ldw	r3,136(sp)
1000d7c4:	0029883a 	mov	r20,zero
1000d7c8:	18800104 	addi	r2,r3,4
1000d7cc:	1cc0000b 	ldhu	r19,0(r3)
1000d7d0:	803f9e0e 	bge	r16,zero,1000d64c <__alt_data_end+0xf800d64c>
1000d7d4:	003dd706 	br	1000cf34 <__alt_data_end+0xf800cf34>
1000d7d8:	d8c02217 	ldw	r3,136(sp)
1000d7dc:	d9002417 	ldw	r4,144(sp)
1000d7e0:	18800017 	ldw	r2,0(r3)
1000d7e4:	18c00104 	addi	r3,r3,4
1000d7e8:	d8c02215 	stw	r3,136(sp)
1000d7ec:	11000015 	stw	r4,0(r2)
1000d7f0:	003b9a06 	br	1000c65c <__alt_data_end+0xf800c65c>
1000d7f4:	d8c02217 	ldw	r3,136(sp)
1000d7f8:	0029883a 	mov	r20,zero
1000d7fc:	18800104 	addi	r2,r3,4
1000d800:	1cc0000b 	ldhu	r19,0(r3)
1000d804:	803db20e 	bge	r16,zero,1000ced0 <__alt_data_end+0xf800ced0>
1000d808:	003fb906 	br	1000d6f0 <__alt_data_end+0xf800d6f0>
1000d80c:	d9002217 	ldw	r4,136(sp)
1000d810:	0029883a 	mov	r20,zero
1000d814:	24c00017 	ldw	r19,0(r4)
1000d818:	21000104 	addi	r4,r4,4
1000d81c:	d9002215 	stw	r4,136(sp)
1000d820:	003d3206 	br	1000ccec <__alt_data_end+0xf800ccec>
1000d824:	d8c02217 	ldw	r3,136(sp)
1000d828:	1cc00017 	ldw	r19,0(r3)
1000d82c:	18c00104 	addi	r3,r3,4
1000d830:	d8c02215 	stw	r3,136(sp)
1000d834:	9829d7fa 	srai	r20,r19,31
1000d838:	a005883a 	mov	r2,r20
1000d83c:	003d4b06 	br	1000cd6c <__alt_data_end+0xf800cd6c>
1000d840:	0009883a 	mov	r4,zero
1000d844:	01400044 	movi	r5,1
1000d848:	d811883a 	mov	r8,sp
1000d84c:	003e4f06 	br	1000d18c <__alt_data_end+0xf800d18c>
1000d850:	d8c02215 	stw	r3,136(sp)
1000d854:	002b883a 	mov	r21,zero
1000d858:	003db806 	br	1000cf3c <__alt_data_end+0xf800cf3c>
1000d85c:	d811883a 	mov	r8,sp
1000d860:	003e9606 	br	1000d2bc <__alt_data_end+0xf800d2bc>
1000d864:	01040074 	movhi	r4,4097
1000d868:	2112ce04 	addi	r4,r4,19256
1000d86c:	d9002315 	stw	r4,140(sp)
1000d870:	003e6306 	br	1000d200 <__alt_data_end+0xf800d200>
1000d874:	b0c00043 	ldbu	r3,1(r22)
1000d878:	8c400814 	ori	r17,r17,32
1000d87c:	b5800044 	addi	r22,r22,1
1000d880:	18c03fcc 	andi	r3,r3,255
1000d884:	18c0201c 	xori	r3,r3,128
1000d888:	18ffe004 	addi	r3,r3,-128
1000d88c:	003b9c06 	br	1000c700 <__alt_data_end+0xf800c700>
1000d890:	b809883a 	mov	r4,r23
1000d894:	da002a15 	stw	r8,168(sp)
1000d898:	0004cfc0 	call	10004cfc <strlen>
1000d89c:	1029883a 	mov	r20,r2
1000d8a0:	dd401d83 	ldbu	r21,118(sp)
1000d8a4:	df002215 	stw	fp,136(sp)
1000d8a8:	0021883a 	mov	r16,zero
1000d8ac:	da002a17 	ldw	r8,168(sp)
1000d8b0:	003c3906 	br	1000c998 <__alt_data_end+0xf800c998>
1000d8b4:	d9402017 	ldw	r5,128(sp)
1000d8b8:	d9002117 	ldw	r4,132(sp)
1000d8bc:	d9801a04 	addi	r6,sp,104
1000d8c0:	000c4780 	call	1000c478 <__sprint_r.part.0>
1000d8c4:	103e691e 	bne	r2,zero,1000d26c <__alt_data_end+0xf800d26c>
1000d8c8:	d9001b17 	ldw	r4,108(sp)
1000d8cc:	d8801c17 	ldw	r2,112(sp)
1000d8d0:	d811883a 	mov	r8,sp
1000d8d4:	21400044 	addi	r5,r4,1
1000d8d8:	003e2e06 	br	1000d194 <__alt_data_end+0xf800d194>
1000d8dc:	01040074 	movhi	r4,4097
1000d8e0:	2112d204 	addi	r4,r4,19272
1000d8e4:	d9002315 	stw	r4,140(sp)
1000d8e8:	d9001b17 	ldw	r4,108(sp)
1000d8ec:	21000044 	addi	r4,r4,1
1000d8f0:	003c5e06 	br	1000ca6c <__alt_data_end+0xf800ca6c>
1000d8f4:	002b883a 	mov	r21,zero
1000d8f8:	00800084 	movi	r2,2
1000d8fc:	10803fcc 	andi	r2,r2,255
1000d900:	01000044 	movi	r4,1
1000d904:	11002b26 	beq	r2,r4,1000d9b4 <___vfiprintf_internal_r+0x1428>
1000d908:	01000084 	movi	r4,2
1000d90c:	11002b1e 	bne	r2,r4,1000d9bc <___vfiprintf_internal_r+0x1430>
1000d910:	1823883a 	mov	r17,r3
1000d914:	003ee506 	br	1000d4ac <__alt_data_end+0xf800d4ac>
1000d918:	8807883a 	mov	r3,r17
1000d91c:	00800044 	movi	r2,1
1000d920:	003ff606 	br	1000d8fc <__alt_data_end+0xf800d8fc>
1000d924:	00800184 	movi	r2,6
1000d928:	1400012e 	bgeu	r2,r16,1000d930 <___vfiprintf_internal_r+0x13a4>
1000d92c:	1021883a 	mov	r16,r2
1000d930:	8029883a 	mov	r20,r16
1000d934:	8027883a 	mov	r19,r16
1000d938:	80002216 	blt	r16,zero,1000d9c4 <___vfiprintf_internal_r+0x1438>
1000d93c:	05c40074 	movhi	r23,4097
1000d940:	df002215 	stw	fp,136(sp)
1000d944:	bdd27204 	addi	r23,r23,18888
1000d948:	003cfb06 	br	1000cd38 <__alt_data_end+0xf800cd38>
1000d94c:	d9002217 	ldw	r4,136(sp)
1000d950:	d9402417 	ldw	r5,144(sp)
1000d954:	20800017 	ldw	r2,0(r4)
1000d958:	21000104 	addi	r4,r4,4
1000d95c:	d9002215 	stw	r4,136(sp)
1000d960:	11400015 	stw	r5,0(r2)
1000d964:	003b3d06 	br	1000c65c <__alt_data_end+0xf800c65c>
1000d968:	01440074 	movhi	r5,4097
1000d96c:	2952d204 	addi	r5,r5,19272
1000d970:	d9402315 	stw	r5,140(sp)
1000d974:	d9401b17 	ldw	r5,108(sp)
1000d978:	29400044 	addi	r5,r5,1
1000d97c:	003e6d06 	br	1000d334 <__alt_data_end+0xf800d334>
1000d980:	8029883a 	mov	r20,r16
1000d984:	dd401d83 	ldbu	r21,118(sp)
1000d988:	df002215 	stw	fp,136(sp)
1000d98c:	0021883a 	mov	r16,zero
1000d990:	003c0106 	br	1000c998 <__alt_data_end+0xf800c998>
1000d994:	00c40074 	movhi	r3,4097
1000d998:	18d2ce04 	addi	r3,r3,19256
1000d99c:	d8c02315 	stw	r3,140(sp)
1000d9a0:	280d883a 	mov	r6,r5
1000d9a4:	003c6906 	br	1000cb4c <__alt_data_end+0xf800cb4c>
1000d9a8:	802d883a 	mov	r22,r16
1000d9ac:	0021883a 	mov	r16,zero
1000d9b0:	003b5406 	br	1000c704 <__alt_data_end+0xf800c704>
1000d9b4:	1823883a 	mov	r17,r3
1000d9b8:	003cf306 	br	1000cd88 <__alt_data_end+0xf800cd88>
1000d9bc:	1823883a 	mov	r17,r3
1000d9c0:	003cad06 	br	1000cc78 <__alt_data_end+0xf800cc78>
1000d9c4:	0027883a 	mov	r19,zero
1000d9c8:	003fdc06 	br	1000d93c <__alt_data_end+0xf800d93c>
1000d9cc:	d9402217 	ldw	r5,136(sp)
1000d9d0:	8005883a 	mov	r2,r16
1000d9d4:	b0c00043 	ldbu	r3,1(r22)
1000d9d8:	2c000017 	ldw	r16,0(r5)
1000d9dc:	29000104 	addi	r4,r5,4
1000d9e0:	d9002215 	stw	r4,136(sp)
1000d9e4:	102d883a 	mov	r22,r2
1000d9e8:	803fa50e 	bge	r16,zero,1000d880 <__alt_data_end+0xf800d880>
1000d9ec:	18c03fcc 	andi	r3,r3,255
1000d9f0:	18c0201c 	xori	r3,r3,128
1000d9f4:	043fffc4 	movi	r16,-1
1000d9f8:	18ffe004 	addi	r3,r3,-128
1000d9fc:	003b4006 	br	1000c700 <__alt_data_end+0xf800c700>
1000da00:	d9402303 	ldbu	r5,140(sp)
1000da04:	d9401d85 	stb	r5,118(sp)
1000da08:	003cae06 	br	1000ccc4 <__alt_data_end+0xf800ccc4>
1000da0c:	d8c02303 	ldbu	r3,140(sp)
1000da10:	d8c01d85 	stb	r3,118(sp)
1000da14:	003d1406 	br	1000ce68 <__alt_data_end+0xf800ce68>
1000da18:	d8c02303 	ldbu	r3,140(sp)
1000da1c:	d8c01d85 	stb	r3,118(sp)
1000da20:	003cca06 	br	1000cd4c <__alt_data_end+0xf800cd4c>
1000da24:	8880004c 	andi	r2,r17,1
1000da28:	002b883a 	mov	r21,zero
1000da2c:	10000526 	beq	r2,zero,1000da44 <___vfiprintf_internal_r+0x14b8>
1000da30:	00800c04 	movi	r2,48
1000da34:	d88019c5 	stb	r2,103(sp)
1000da38:	dd002817 	ldw	r20,160(sp)
1000da3c:	ddc019c4 	addi	r23,sp,103
1000da40:	003bd506 	br	1000c998 <__alt_data_end+0xf800c998>
1000da44:	0029883a 	mov	r20,zero
1000da48:	ddc01a04 	addi	r23,sp,104
1000da4c:	003bd206 	br	1000c998 <__alt_data_end+0xf800c998>
1000da50:	d9002303 	ldbu	r4,140(sp)
1000da54:	d9001d85 	stb	r4,118(sp)
1000da58:	003da606 	br	1000d0f4 <__alt_data_end+0xf800d0f4>
1000da5c:	d8c02303 	ldbu	r3,140(sp)
1000da60:	d8c01d85 	stb	r3,118(sp)
1000da64:	003c7606 	br	1000cc40 <__alt_data_end+0xf800cc40>
1000da68:	d8c02303 	ldbu	r3,140(sp)
1000da6c:	d8c01d85 	stb	r3,118(sp)
1000da70:	003c6506 	br	1000cc08 <__alt_data_end+0xf800cc08>
1000da74:	d9002303 	ldbu	r4,140(sp)
1000da78:	d9001d85 	stb	r4,118(sp)
1000da7c:	003d3d06 	br	1000cf74 <__alt_data_end+0xf800cf74>
1000da80:	d8c02303 	ldbu	r3,140(sp)
1000da84:	d8c01d85 	stb	r3,118(sp)
1000da88:	003d1d06 	br	1000cf00 <__alt_data_end+0xf800cf00>
1000da8c:	d8c02303 	ldbu	r3,140(sp)
1000da90:	d8c01d85 	stb	r3,118(sp)
1000da94:	003d0306 	br	1000cea4 <__alt_data_end+0xf800cea4>

1000da98 <__vfiprintf_internal>:
1000da98:	008400b4 	movhi	r2,4098
1000da9c:	10b3fa04 	addi	r2,r2,-12312
1000daa0:	300f883a 	mov	r7,r6
1000daa4:	280d883a 	mov	r6,r5
1000daa8:	200b883a 	mov	r5,r4
1000daac:	11000017 	ldw	r4,0(r2)
1000dab0:	000c58c1 	jmpi	1000c58c <___vfiprintf_internal_r>

1000dab4 <__sbprintf>:
1000dab4:	2880030b 	ldhu	r2,12(r5)
1000dab8:	2ac01917 	ldw	r11,100(r5)
1000dabc:	2a80038b 	ldhu	r10,14(r5)
1000dac0:	2a400717 	ldw	r9,28(r5)
1000dac4:	2a000917 	ldw	r8,36(r5)
1000dac8:	defee204 	addi	sp,sp,-1144
1000dacc:	00c10004 	movi	r3,1024
1000dad0:	dc011a15 	stw	r16,1128(sp)
1000dad4:	10bfff4c 	andi	r2,r2,65533
1000dad8:	2821883a 	mov	r16,r5
1000dadc:	d8cb883a 	add	r5,sp,r3
1000dae0:	dc811c15 	stw	r18,1136(sp)
1000dae4:	dc411b15 	stw	r17,1132(sp)
1000dae8:	dfc11d15 	stw	ra,1140(sp)
1000daec:	2025883a 	mov	r18,r4
1000daf0:	d881030d 	sth	r2,1036(sp)
1000daf4:	dac11915 	stw	r11,1124(sp)
1000daf8:	da81038d 	sth	r10,1038(sp)
1000dafc:	da410715 	stw	r9,1052(sp)
1000db00:	da010915 	stw	r8,1060(sp)
1000db04:	dec10015 	stw	sp,1024(sp)
1000db08:	dec10415 	stw	sp,1040(sp)
1000db0c:	d8c10215 	stw	r3,1032(sp)
1000db10:	d8c10515 	stw	r3,1044(sp)
1000db14:	d8010615 	stw	zero,1048(sp)
1000db18:	000c58c0 	call	1000c58c <___vfiprintf_internal_r>
1000db1c:	1023883a 	mov	r17,r2
1000db20:	10000416 	blt	r2,zero,1000db34 <__sbprintf+0x80>
1000db24:	d9410004 	addi	r5,sp,1024
1000db28:	9009883a 	mov	r4,r18
1000db2c:	0008d680 	call	10008d68 <_fflush_r>
1000db30:	10000d1e 	bne	r2,zero,1000db68 <__sbprintf+0xb4>
1000db34:	d881030b 	ldhu	r2,1036(sp)
1000db38:	1080100c 	andi	r2,r2,64
1000db3c:	10000326 	beq	r2,zero,1000db4c <__sbprintf+0x98>
1000db40:	8080030b 	ldhu	r2,12(r16)
1000db44:	10801014 	ori	r2,r2,64
1000db48:	8080030d 	sth	r2,12(r16)
1000db4c:	8805883a 	mov	r2,r17
1000db50:	dfc11d17 	ldw	ra,1140(sp)
1000db54:	dc811c17 	ldw	r18,1136(sp)
1000db58:	dc411b17 	ldw	r17,1132(sp)
1000db5c:	dc011a17 	ldw	r16,1128(sp)
1000db60:	dec11e04 	addi	sp,sp,1144
1000db64:	f800283a 	ret
1000db68:	047fffc4 	movi	r17,-1
1000db6c:	003ff106 	br	1000db34 <__alt_data_end+0xf800db34>

1000db70 <_write_r>:
1000db70:	defffd04 	addi	sp,sp,-12
1000db74:	2805883a 	mov	r2,r5
1000db78:	dc000015 	stw	r16,0(sp)
1000db7c:	040400b4 	movhi	r16,4098
1000db80:	dc400115 	stw	r17,4(sp)
1000db84:	300b883a 	mov	r5,r6
1000db88:	8414fe04 	addi	r16,r16,21496
1000db8c:	2023883a 	mov	r17,r4
1000db90:	380d883a 	mov	r6,r7
1000db94:	1009883a 	mov	r4,r2
1000db98:	dfc00215 	stw	ra,8(sp)
1000db9c:	80000015 	stw	zero,0(r16)
1000dba0:	00121e40 	call	100121e4 <write>
1000dba4:	00ffffc4 	movi	r3,-1
1000dba8:	10c00526 	beq	r2,r3,1000dbc0 <_write_r+0x50>
1000dbac:	dfc00217 	ldw	ra,8(sp)
1000dbb0:	dc400117 	ldw	r17,4(sp)
1000dbb4:	dc000017 	ldw	r16,0(sp)
1000dbb8:	dec00304 	addi	sp,sp,12
1000dbbc:	f800283a 	ret
1000dbc0:	80c00017 	ldw	r3,0(r16)
1000dbc4:	183ff926 	beq	r3,zero,1000dbac <__alt_data_end+0xf800dbac>
1000dbc8:	88c00015 	stw	r3,0(r17)
1000dbcc:	003ff706 	br	1000dbac <__alt_data_end+0xf800dbac>

1000dbd0 <_close_r>:
1000dbd0:	defffd04 	addi	sp,sp,-12
1000dbd4:	dc000015 	stw	r16,0(sp)
1000dbd8:	040400b4 	movhi	r16,4098
1000dbdc:	dc400115 	stw	r17,4(sp)
1000dbe0:	8414fe04 	addi	r16,r16,21496
1000dbe4:	2023883a 	mov	r17,r4
1000dbe8:	2809883a 	mov	r4,r5
1000dbec:	dfc00215 	stw	ra,8(sp)
1000dbf0:	80000015 	stw	zero,0(r16)
1000dbf4:	001195c0 	call	1001195c <close>
1000dbf8:	00ffffc4 	movi	r3,-1
1000dbfc:	10c00526 	beq	r2,r3,1000dc14 <_close_r+0x44>
1000dc00:	dfc00217 	ldw	ra,8(sp)
1000dc04:	dc400117 	ldw	r17,4(sp)
1000dc08:	dc000017 	ldw	r16,0(sp)
1000dc0c:	dec00304 	addi	sp,sp,12
1000dc10:	f800283a 	ret
1000dc14:	80c00017 	ldw	r3,0(r16)
1000dc18:	183ff926 	beq	r3,zero,1000dc00 <__alt_data_end+0xf800dc00>
1000dc1c:	88c00015 	stw	r3,0(r17)
1000dc20:	003ff706 	br	1000dc00 <__alt_data_end+0xf800dc00>

1000dc24 <_calloc_r>:
1000dc24:	defffe04 	addi	sp,sp,-8
1000dc28:	2805883a 	mov	r2,r5
1000dc2c:	dc000015 	stw	r16,0(sp)
1000dc30:	300b883a 	mov	r5,r6
1000dc34:	2021883a 	mov	r16,r4
1000dc38:	1009883a 	mov	r4,r2
1000dc3c:	dfc00115 	stw	ra,4(sp)
1000dc40:	0004b940 	call	10004b94 <__mulsi3>
1000dc44:	100b883a 	mov	r5,r2
1000dc48:	8009883a 	mov	r4,r16
1000dc4c:	0009ec00 	call	10009ec0 <_malloc_r>
1000dc50:	10002926 	beq	r2,zero,1000dcf8 <_calloc_r+0xd4>
1000dc54:	11bfff17 	ldw	r6,-4(r2)
1000dc58:	1021883a 	mov	r16,r2
1000dc5c:	00bfff04 	movi	r2,-4
1000dc60:	308c703a 	and	r6,r6,r2
1000dc64:	00c00904 	movi	r3,36
1000dc68:	308d883a 	add	r6,r6,r2
1000dc6c:	19801636 	bltu	r3,r6,1000dcc8 <_calloc_r+0xa4>
1000dc70:	008004c4 	movi	r2,19
1000dc74:	11800b2e 	bgeu	r2,r6,1000dca4 <_calloc_r+0x80>
1000dc78:	80000015 	stw	zero,0(r16)
1000dc7c:	80000115 	stw	zero,4(r16)
1000dc80:	008006c4 	movi	r2,27
1000dc84:	11801a2e 	bgeu	r2,r6,1000dcf0 <_calloc_r+0xcc>
1000dc88:	80000215 	stw	zero,8(r16)
1000dc8c:	80000315 	stw	zero,12(r16)
1000dc90:	30c0151e 	bne	r6,r3,1000dce8 <_calloc_r+0xc4>
1000dc94:	80000415 	stw	zero,16(r16)
1000dc98:	80800604 	addi	r2,r16,24
1000dc9c:	80000515 	stw	zero,20(r16)
1000dca0:	00000106 	br	1000dca8 <_calloc_r+0x84>
1000dca4:	8005883a 	mov	r2,r16
1000dca8:	10000015 	stw	zero,0(r2)
1000dcac:	10000115 	stw	zero,4(r2)
1000dcb0:	10000215 	stw	zero,8(r2)
1000dcb4:	8005883a 	mov	r2,r16
1000dcb8:	dfc00117 	ldw	ra,4(sp)
1000dcbc:	dc000017 	ldw	r16,0(sp)
1000dcc0:	dec00204 	addi	sp,sp,8
1000dcc4:	f800283a 	ret
1000dcc8:	000b883a 	mov	r5,zero
1000dccc:	8009883a 	mov	r4,r16
1000dcd0:	000aa540 	call	1000aa54 <memset>
1000dcd4:	8005883a 	mov	r2,r16
1000dcd8:	dfc00117 	ldw	ra,4(sp)
1000dcdc:	dc000017 	ldw	r16,0(sp)
1000dce0:	dec00204 	addi	sp,sp,8
1000dce4:	f800283a 	ret
1000dce8:	80800404 	addi	r2,r16,16
1000dcec:	003fee06 	br	1000dca8 <__alt_data_end+0xf800dca8>
1000dcf0:	80800204 	addi	r2,r16,8
1000dcf4:	003fec06 	br	1000dca8 <__alt_data_end+0xf800dca8>
1000dcf8:	0005883a 	mov	r2,zero
1000dcfc:	003fee06 	br	1000dcb8 <__alt_data_end+0xf800dcb8>

1000dd00 <_fclose_r>:
1000dd00:	28003926 	beq	r5,zero,1000dde8 <_fclose_r+0xe8>
1000dd04:	defffc04 	addi	sp,sp,-16
1000dd08:	dc400115 	stw	r17,4(sp)
1000dd0c:	dc000015 	stw	r16,0(sp)
1000dd10:	dfc00315 	stw	ra,12(sp)
1000dd14:	dc800215 	stw	r18,8(sp)
1000dd18:	2023883a 	mov	r17,r4
1000dd1c:	2821883a 	mov	r16,r5
1000dd20:	20000226 	beq	r4,zero,1000dd2c <_fclose_r+0x2c>
1000dd24:	20800e17 	ldw	r2,56(r4)
1000dd28:	10002726 	beq	r2,zero,1000ddc8 <_fclose_r+0xc8>
1000dd2c:	8080030f 	ldh	r2,12(r16)
1000dd30:	1000071e 	bne	r2,zero,1000dd50 <_fclose_r+0x50>
1000dd34:	0005883a 	mov	r2,zero
1000dd38:	dfc00317 	ldw	ra,12(sp)
1000dd3c:	dc800217 	ldw	r18,8(sp)
1000dd40:	dc400117 	ldw	r17,4(sp)
1000dd44:	dc000017 	ldw	r16,0(sp)
1000dd48:	dec00404 	addi	sp,sp,16
1000dd4c:	f800283a 	ret
1000dd50:	800b883a 	mov	r5,r16
1000dd54:	8809883a 	mov	r4,r17
1000dd58:	0008b4c0 	call	10008b4c <__sflush_r>
1000dd5c:	1025883a 	mov	r18,r2
1000dd60:	80800b17 	ldw	r2,44(r16)
1000dd64:	10000426 	beq	r2,zero,1000dd78 <_fclose_r+0x78>
1000dd68:	81400717 	ldw	r5,28(r16)
1000dd6c:	8809883a 	mov	r4,r17
1000dd70:	103ee83a 	callr	r2
1000dd74:	10001616 	blt	r2,zero,1000ddd0 <_fclose_r+0xd0>
1000dd78:	8080030b 	ldhu	r2,12(r16)
1000dd7c:	1080200c 	andi	r2,r2,128
1000dd80:	1000151e 	bne	r2,zero,1000ddd8 <_fclose_r+0xd8>
1000dd84:	81400c17 	ldw	r5,48(r16)
1000dd88:	28000526 	beq	r5,zero,1000dda0 <_fclose_r+0xa0>
1000dd8c:	80801004 	addi	r2,r16,64
1000dd90:	28800226 	beq	r5,r2,1000dd9c <_fclose_r+0x9c>
1000dd94:	8809883a 	mov	r4,r17
1000dd98:	00092c80 	call	100092c8 <_free_r>
1000dd9c:	80000c15 	stw	zero,48(r16)
1000dda0:	81401117 	ldw	r5,68(r16)
1000dda4:	28000326 	beq	r5,zero,1000ddb4 <_fclose_r+0xb4>
1000dda8:	8809883a 	mov	r4,r17
1000ddac:	00092c80 	call	100092c8 <_free_r>
1000ddb0:	80001115 	stw	zero,68(r16)
1000ddb4:	00091640 	call	10009164 <__sfp_lock_acquire>
1000ddb8:	8000030d 	sth	zero,12(r16)
1000ddbc:	00091680 	call	10009168 <__sfp_lock_release>
1000ddc0:	9005883a 	mov	r2,r18
1000ddc4:	003fdc06 	br	1000dd38 <__alt_data_end+0xf800dd38>
1000ddc8:	00091540 	call	10009154 <__sinit>
1000ddcc:	003fd706 	br	1000dd2c <__alt_data_end+0xf800dd2c>
1000ddd0:	04bfffc4 	movi	r18,-1
1000ddd4:	003fe806 	br	1000dd78 <__alt_data_end+0xf800dd78>
1000ddd8:	81400417 	ldw	r5,16(r16)
1000dddc:	8809883a 	mov	r4,r17
1000dde0:	00092c80 	call	100092c8 <_free_r>
1000dde4:	003fe706 	br	1000dd84 <__alt_data_end+0xf800dd84>
1000dde8:	0005883a 	mov	r2,zero
1000ddec:	f800283a 	ret

1000ddf0 <fclose>:
1000ddf0:	008400b4 	movhi	r2,4098
1000ddf4:	10b3fa04 	addi	r2,r2,-12312
1000ddf8:	200b883a 	mov	r5,r4
1000ddfc:	11000017 	ldw	r4,0(r2)
1000de00:	000dd001 	jmpi	1000dd00 <_fclose_r>

1000de04 <__fputwc>:
1000de04:	defff804 	addi	sp,sp,-32
1000de08:	dcc00415 	stw	r19,16(sp)
1000de0c:	dc800315 	stw	r18,12(sp)
1000de10:	dc000115 	stw	r16,4(sp)
1000de14:	dfc00715 	stw	ra,28(sp)
1000de18:	dd400615 	stw	r21,24(sp)
1000de1c:	dd000515 	stw	r20,20(sp)
1000de20:	dc400215 	stw	r17,8(sp)
1000de24:	2027883a 	mov	r19,r4
1000de28:	2825883a 	mov	r18,r5
1000de2c:	3021883a 	mov	r16,r6
1000de30:	0009cb00 	call	10009cb0 <__locale_mb_cur_max>
1000de34:	00c00044 	movi	r3,1
1000de38:	10c03e26 	beq	r2,r3,1000df34 <__fputwc+0x130>
1000de3c:	81c01704 	addi	r7,r16,92
1000de40:	900d883a 	mov	r6,r18
1000de44:	d80b883a 	mov	r5,sp
1000de48:	9809883a 	mov	r4,r19
1000de4c:	000e2d40 	call	1000e2d4 <_wcrtomb_r>
1000de50:	1029883a 	mov	r20,r2
1000de54:	00bfffc4 	movi	r2,-1
1000de58:	a0802026 	beq	r20,r2,1000dedc <__fputwc+0xd8>
1000de5c:	d9400003 	ldbu	r5,0(sp)
1000de60:	a0001c26 	beq	r20,zero,1000ded4 <__fputwc+0xd0>
1000de64:	0023883a 	mov	r17,zero
1000de68:	05400284 	movi	r21,10
1000de6c:	00000906 	br	1000de94 <__fputwc+0x90>
1000de70:	80800017 	ldw	r2,0(r16)
1000de74:	11400005 	stb	r5,0(r2)
1000de78:	80c00017 	ldw	r3,0(r16)
1000de7c:	18c00044 	addi	r3,r3,1
1000de80:	80c00015 	stw	r3,0(r16)
1000de84:	8c400044 	addi	r17,r17,1
1000de88:	dc45883a 	add	r2,sp,r17
1000de8c:	8d00112e 	bgeu	r17,r20,1000ded4 <__fputwc+0xd0>
1000de90:	11400003 	ldbu	r5,0(r2)
1000de94:	80c00217 	ldw	r3,8(r16)
1000de98:	18ffffc4 	addi	r3,r3,-1
1000de9c:	80c00215 	stw	r3,8(r16)
1000dea0:	183ff30e 	bge	r3,zero,1000de70 <__alt_data_end+0xf800de70>
1000dea4:	80800617 	ldw	r2,24(r16)
1000dea8:	18801916 	blt	r3,r2,1000df10 <__fputwc+0x10c>
1000deac:	80800017 	ldw	r2,0(r16)
1000deb0:	11400005 	stb	r5,0(r2)
1000deb4:	80800017 	ldw	r2,0(r16)
1000deb8:	10c00003 	ldbu	r3,0(r2)
1000debc:	10800044 	addi	r2,r2,1
1000dec0:	1d402326 	beq	r3,r21,1000df50 <__fputwc+0x14c>
1000dec4:	80800015 	stw	r2,0(r16)
1000dec8:	8c400044 	addi	r17,r17,1
1000decc:	dc45883a 	add	r2,sp,r17
1000ded0:	8d3fef36 	bltu	r17,r20,1000de90 <__alt_data_end+0xf800de90>
1000ded4:	9005883a 	mov	r2,r18
1000ded8:	00000406 	br	1000deec <__fputwc+0xe8>
1000dedc:	80c0030b 	ldhu	r3,12(r16)
1000dee0:	a005883a 	mov	r2,r20
1000dee4:	18c01014 	ori	r3,r3,64
1000dee8:	80c0030d 	sth	r3,12(r16)
1000deec:	dfc00717 	ldw	ra,28(sp)
1000def0:	dd400617 	ldw	r21,24(sp)
1000def4:	dd000517 	ldw	r20,20(sp)
1000def8:	dcc00417 	ldw	r19,16(sp)
1000defc:	dc800317 	ldw	r18,12(sp)
1000df00:	dc400217 	ldw	r17,8(sp)
1000df04:	dc000117 	ldw	r16,4(sp)
1000df08:	dec00804 	addi	sp,sp,32
1000df0c:	f800283a 	ret
1000df10:	800d883a 	mov	r6,r16
1000df14:	29403fcc 	andi	r5,r5,255
1000df18:	9809883a 	mov	r4,r19
1000df1c:	000e17c0 	call	1000e17c <__swbuf_r>
1000df20:	10bfffe0 	cmpeqi	r2,r2,-1
1000df24:	10803fcc 	andi	r2,r2,255
1000df28:	103fd626 	beq	r2,zero,1000de84 <__alt_data_end+0xf800de84>
1000df2c:	00bfffc4 	movi	r2,-1
1000df30:	003fee06 	br	1000deec <__alt_data_end+0xf800deec>
1000df34:	90ffffc4 	addi	r3,r18,-1
1000df38:	01003f84 	movi	r4,254
1000df3c:	20ffbf36 	bltu	r4,r3,1000de3c <__alt_data_end+0xf800de3c>
1000df40:	900b883a 	mov	r5,r18
1000df44:	dc800005 	stb	r18,0(sp)
1000df48:	1029883a 	mov	r20,r2
1000df4c:	003fc506 	br	1000de64 <__alt_data_end+0xf800de64>
1000df50:	800d883a 	mov	r6,r16
1000df54:	a80b883a 	mov	r5,r21
1000df58:	9809883a 	mov	r4,r19
1000df5c:	000e17c0 	call	1000e17c <__swbuf_r>
1000df60:	10bfffe0 	cmpeqi	r2,r2,-1
1000df64:	003fef06 	br	1000df24 <__alt_data_end+0xf800df24>

1000df68 <_fputwc_r>:
1000df68:	3080030b 	ldhu	r2,12(r6)
1000df6c:	10c8000c 	andi	r3,r2,8192
1000df70:	1800051e 	bne	r3,zero,1000df88 <_fputwc_r+0x20>
1000df74:	30c01917 	ldw	r3,100(r6)
1000df78:	10880014 	ori	r2,r2,8192
1000df7c:	3080030d 	sth	r2,12(r6)
1000df80:	18880014 	ori	r2,r3,8192
1000df84:	30801915 	stw	r2,100(r6)
1000df88:	000de041 	jmpi	1000de04 <__fputwc>

1000df8c <fputwc>:
1000df8c:	008400b4 	movhi	r2,4098
1000df90:	defffc04 	addi	sp,sp,-16
1000df94:	10b3fa04 	addi	r2,r2,-12312
1000df98:	dc000115 	stw	r16,4(sp)
1000df9c:	14000017 	ldw	r16,0(r2)
1000dfa0:	dc400215 	stw	r17,8(sp)
1000dfa4:	dfc00315 	stw	ra,12(sp)
1000dfa8:	2023883a 	mov	r17,r4
1000dfac:	80000226 	beq	r16,zero,1000dfb8 <fputwc+0x2c>
1000dfb0:	80800e17 	ldw	r2,56(r16)
1000dfb4:	10001026 	beq	r2,zero,1000dff8 <fputwc+0x6c>
1000dfb8:	2880030b 	ldhu	r2,12(r5)
1000dfbc:	10c8000c 	andi	r3,r2,8192
1000dfc0:	1800051e 	bne	r3,zero,1000dfd8 <fputwc+0x4c>
1000dfc4:	28c01917 	ldw	r3,100(r5)
1000dfc8:	10880014 	ori	r2,r2,8192
1000dfcc:	2880030d 	sth	r2,12(r5)
1000dfd0:	18880014 	ori	r2,r3,8192
1000dfd4:	28801915 	stw	r2,100(r5)
1000dfd8:	280d883a 	mov	r6,r5
1000dfdc:	8009883a 	mov	r4,r16
1000dfe0:	880b883a 	mov	r5,r17
1000dfe4:	dfc00317 	ldw	ra,12(sp)
1000dfe8:	dc400217 	ldw	r17,8(sp)
1000dfec:	dc000117 	ldw	r16,4(sp)
1000dff0:	dec00404 	addi	sp,sp,16
1000dff4:	000de041 	jmpi	1000de04 <__fputwc>
1000dff8:	8009883a 	mov	r4,r16
1000dffc:	d9400015 	stw	r5,0(sp)
1000e000:	00091540 	call	10009154 <__sinit>
1000e004:	d9400017 	ldw	r5,0(sp)
1000e008:	003feb06 	br	1000dfb8 <__alt_data_end+0xf800dfb8>

1000e00c <_fstat_r>:
1000e00c:	defffd04 	addi	sp,sp,-12
1000e010:	2805883a 	mov	r2,r5
1000e014:	dc000015 	stw	r16,0(sp)
1000e018:	040400b4 	movhi	r16,4098
1000e01c:	dc400115 	stw	r17,4(sp)
1000e020:	8414fe04 	addi	r16,r16,21496
1000e024:	2023883a 	mov	r17,r4
1000e028:	300b883a 	mov	r5,r6
1000e02c:	1009883a 	mov	r4,r2
1000e030:	dfc00215 	stw	ra,8(sp)
1000e034:	80000015 	stw	zero,0(r16)
1000e038:	0011a9c0 	call	10011a9c <fstat>
1000e03c:	00ffffc4 	movi	r3,-1
1000e040:	10c00526 	beq	r2,r3,1000e058 <_fstat_r+0x4c>
1000e044:	dfc00217 	ldw	ra,8(sp)
1000e048:	dc400117 	ldw	r17,4(sp)
1000e04c:	dc000017 	ldw	r16,0(sp)
1000e050:	dec00304 	addi	sp,sp,12
1000e054:	f800283a 	ret
1000e058:	80c00017 	ldw	r3,0(r16)
1000e05c:	183ff926 	beq	r3,zero,1000e044 <__alt_data_end+0xf800e044>
1000e060:	88c00015 	stw	r3,0(r17)
1000e064:	003ff706 	br	1000e044 <__alt_data_end+0xf800e044>

1000e068 <_isatty_r>:
1000e068:	defffd04 	addi	sp,sp,-12
1000e06c:	dc000015 	stw	r16,0(sp)
1000e070:	040400b4 	movhi	r16,4098
1000e074:	dc400115 	stw	r17,4(sp)
1000e078:	8414fe04 	addi	r16,r16,21496
1000e07c:	2023883a 	mov	r17,r4
1000e080:	2809883a 	mov	r4,r5
1000e084:	dfc00215 	stw	ra,8(sp)
1000e088:	80000015 	stw	zero,0(r16)
1000e08c:	0011b900 	call	10011b90 <isatty>
1000e090:	00ffffc4 	movi	r3,-1
1000e094:	10c00526 	beq	r2,r3,1000e0ac <_isatty_r+0x44>
1000e098:	dfc00217 	ldw	ra,8(sp)
1000e09c:	dc400117 	ldw	r17,4(sp)
1000e0a0:	dc000017 	ldw	r16,0(sp)
1000e0a4:	dec00304 	addi	sp,sp,12
1000e0a8:	f800283a 	ret
1000e0ac:	80c00017 	ldw	r3,0(r16)
1000e0b0:	183ff926 	beq	r3,zero,1000e098 <__alt_data_end+0xf800e098>
1000e0b4:	88c00015 	stw	r3,0(r17)
1000e0b8:	003ff706 	br	1000e098 <__alt_data_end+0xf800e098>

1000e0bc <_lseek_r>:
1000e0bc:	defffd04 	addi	sp,sp,-12
1000e0c0:	2805883a 	mov	r2,r5
1000e0c4:	dc000015 	stw	r16,0(sp)
1000e0c8:	040400b4 	movhi	r16,4098
1000e0cc:	dc400115 	stw	r17,4(sp)
1000e0d0:	300b883a 	mov	r5,r6
1000e0d4:	8414fe04 	addi	r16,r16,21496
1000e0d8:	2023883a 	mov	r17,r4
1000e0dc:	380d883a 	mov	r6,r7
1000e0e0:	1009883a 	mov	r4,r2
1000e0e4:	dfc00215 	stw	ra,8(sp)
1000e0e8:	80000015 	stw	zero,0(r16)
1000e0ec:	0011d640 	call	10011d64 <lseek>
1000e0f0:	00ffffc4 	movi	r3,-1
1000e0f4:	10c00526 	beq	r2,r3,1000e10c <_lseek_r+0x50>
1000e0f8:	dfc00217 	ldw	ra,8(sp)
1000e0fc:	dc400117 	ldw	r17,4(sp)
1000e100:	dc000017 	ldw	r16,0(sp)
1000e104:	dec00304 	addi	sp,sp,12
1000e108:	f800283a 	ret
1000e10c:	80c00017 	ldw	r3,0(r16)
1000e110:	183ff926 	beq	r3,zero,1000e0f8 <__alt_data_end+0xf800e0f8>
1000e114:	88c00015 	stw	r3,0(r17)
1000e118:	003ff706 	br	1000e0f8 <__alt_data_end+0xf800e0f8>

1000e11c <_read_r>:
1000e11c:	defffd04 	addi	sp,sp,-12
1000e120:	2805883a 	mov	r2,r5
1000e124:	dc000015 	stw	r16,0(sp)
1000e128:	040400b4 	movhi	r16,4098
1000e12c:	dc400115 	stw	r17,4(sp)
1000e130:	300b883a 	mov	r5,r6
1000e134:	8414fe04 	addi	r16,r16,21496
1000e138:	2023883a 	mov	r17,r4
1000e13c:	380d883a 	mov	r6,r7
1000e140:	1009883a 	mov	r4,r2
1000e144:	dfc00215 	stw	ra,8(sp)
1000e148:	80000015 	stw	zero,0(r16)
1000e14c:	0011f400 	call	10011f40 <read>
1000e150:	00ffffc4 	movi	r3,-1
1000e154:	10c00526 	beq	r2,r3,1000e16c <_read_r+0x50>
1000e158:	dfc00217 	ldw	ra,8(sp)
1000e15c:	dc400117 	ldw	r17,4(sp)
1000e160:	dc000017 	ldw	r16,0(sp)
1000e164:	dec00304 	addi	sp,sp,12
1000e168:	f800283a 	ret
1000e16c:	80c00017 	ldw	r3,0(r16)
1000e170:	183ff926 	beq	r3,zero,1000e158 <__alt_data_end+0xf800e158>
1000e174:	88c00015 	stw	r3,0(r17)
1000e178:	003ff706 	br	1000e158 <__alt_data_end+0xf800e158>

1000e17c <__swbuf_r>:
1000e17c:	defffb04 	addi	sp,sp,-20
1000e180:	dcc00315 	stw	r19,12(sp)
1000e184:	dc800215 	stw	r18,8(sp)
1000e188:	dc000015 	stw	r16,0(sp)
1000e18c:	dfc00415 	stw	ra,16(sp)
1000e190:	dc400115 	stw	r17,4(sp)
1000e194:	2025883a 	mov	r18,r4
1000e198:	2827883a 	mov	r19,r5
1000e19c:	3021883a 	mov	r16,r6
1000e1a0:	20000226 	beq	r4,zero,1000e1ac <__swbuf_r+0x30>
1000e1a4:	20800e17 	ldw	r2,56(r4)
1000e1a8:	10004226 	beq	r2,zero,1000e2b4 <__swbuf_r+0x138>
1000e1ac:	80800617 	ldw	r2,24(r16)
1000e1b0:	8100030b 	ldhu	r4,12(r16)
1000e1b4:	80800215 	stw	r2,8(r16)
1000e1b8:	2080020c 	andi	r2,r4,8
1000e1bc:	10003626 	beq	r2,zero,1000e298 <__swbuf_r+0x11c>
1000e1c0:	80c00417 	ldw	r3,16(r16)
1000e1c4:	18003426 	beq	r3,zero,1000e298 <__swbuf_r+0x11c>
1000e1c8:	2088000c 	andi	r2,r4,8192
1000e1cc:	9c403fcc 	andi	r17,r19,255
1000e1d0:	10001a26 	beq	r2,zero,1000e23c <__swbuf_r+0xc0>
1000e1d4:	80800017 	ldw	r2,0(r16)
1000e1d8:	81000517 	ldw	r4,20(r16)
1000e1dc:	10c7c83a 	sub	r3,r2,r3
1000e1e0:	1900200e 	bge	r3,r4,1000e264 <__swbuf_r+0xe8>
1000e1e4:	18c00044 	addi	r3,r3,1
1000e1e8:	81000217 	ldw	r4,8(r16)
1000e1ec:	11400044 	addi	r5,r2,1
1000e1f0:	81400015 	stw	r5,0(r16)
1000e1f4:	213fffc4 	addi	r4,r4,-1
1000e1f8:	81000215 	stw	r4,8(r16)
1000e1fc:	14c00005 	stb	r19,0(r2)
1000e200:	80800517 	ldw	r2,20(r16)
1000e204:	10c01e26 	beq	r2,r3,1000e280 <__swbuf_r+0x104>
1000e208:	8080030b 	ldhu	r2,12(r16)
1000e20c:	1080004c 	andi	r2,r2,1
1000e210:	10000226 	beq	r2,zero,1000e21c <__swbuf_r+0xa0>
1000e214:	00800284 	movi	r2,10
1000e218:	88801926 	beq	r17,r2,1000e280 <__swbuf_r+0x104>
1000e21c:	8805883a 	mov	r2,r17
1000e220:	dfc00417 	ldw	ra,16(sp)
1000e224:	dcc00317 	ldw	r19,12(sp)
1000e228:	dc800217 	ldw	r18,8(sp)
1000e22c:	dc400117 	ldw	r17,4(sp)
1000e230:	dc000017 	ldw	r16,0(sp)
1000e234:	dec00504 	addi	sp,sp,20
1000e238:	f800283a 	ret
1000e23c:	81401917 	ldw	r5,100(r16)
1000e240:	00b7ffc4 	movi	r2,-8193
1000e244:	21080014 	ori	r4,r4,8192
1000e248:	2884703a 	and	r2,r5,r2
1000e24c:	80801915 	stw	r2,100(r16)
1000e250:	80800017 	ldw	r2,0(r16)
1000e254:	8100030d 	sth	r4,12(r16)
1000e258:	81000517 	ldw	r4,20(r16)
1000e25c:	10c7c83a 	sub	r3,r2,r3
1000e260:	193fe016 	blt	r3,r4,1000e1e4 <__alt_data_end+0xf800e1e4>
1000e264:	800b883a 	mov	r5,r16
1000e268:	9009883a 	mov	r4,r18
1000e26c:	0008d680 	call	10008d68 <_fflush_r>
1000e270:	1000071e 	bne	r2,zero,1000e290 <__swbuf_r+0x114>
1000e274:	80800017 	ldw	r2,0(r16)
1000e278:	00c00044 	movi	r3,1
1000e27c:	003fda06 	br	1000e1e8 <__alt_data_end+0xf800e1e8>
1000e280:	800b883a 	mov	r5,r16
1000e284:	9009883a 	mov	r4,r18
1000e288:	0008d680 	call	10008d68 <_fflush_r>
1000e28c:	103fe326 	beq	r2,zero,1000e21c <__alt_data_end+0xf800e21c>
1000e290:	00bfffc4 	movi	r2,-1
1000e294:	003fe206 	br	1000e220 <__alt_data_end+0xf800e220>
1000e298:	800b883a 	mov	r5,r16
1000e29c:	9009883a 	mov	r4,r18
1000e2a0:	00071480 	call	10007148 <__swsetup_r>
1000e2a4:	103ffa1e 	bne	r2,zero,1000e290 <__alt_data_end+0xf800e290>
1000e2a8:	8100030b 	ldhu	r4,12(r16)
1000e2ac:	80c00417 	ldw	r3,16(r16)
1000e2b0:	003fc506 	br	1000e1c8 <__alt_data_end+0xf800e1c8>
1000e2b4:	00091540 	call	10009154 <__sinit>
1000e2b8:	003fbc06 	br	1000e1ac <__alt_data_end+0xf800e1ac>

1000e2bc <__swbuf>:
1000e2bc:	008400b4 	movhi	r2,4098
1000e2c0:	10b3fa04 	addi	r2,r2,-12312
1000e2c4:	280d883a 	mov	r6,r5
1000e2c8:	200b883a 	mov	r5,r4
1000e2cc:	11000017 	ldw	r4,0(r2)
1000e2d0:	000e17c1 	jmpi	1000e17c <__swbuf_r>

1000e2d4 <_wcrtomb_r>:
1000e2d4:	defff604 	addi	sp,sp,-40
1000e2d8:	008400b4 	movhi	r2,4098
1000e2dc:	dc800815 	stw	r18,32(sp)
1000e2e0:	dc400715 	stw	r17,28(sp)
1000e2e4:	dc000615 	stw	r16,24(sp)
1000e2e8:	10b3fe04 	addi	r2,r2,-12296
1000e2ec:	dfc00915 	stw	ra,36(sp)
1000e2f0:	2021883a 	mov	r16,r4
1000e2f4:	3823883a 	mov	r17,r7
1000e2f8:	14800017 	ldw	r18,0(r2)
1000e2fc:	28001426 	beq	r5,zero,1000e350 <_wcrtomb_r+0x7c>
1000e300:	d9400415 	stw	r5,16(sp)
1000e304:	d9800515 	stw	r6,20(sp)
1000e308:	0009ca40 	call	10009ca4 <__locale_charset>
1000e30c:	d9800517 	ldw	r6,20(sp)
1000e310:	d9400417 	ldw	r5,16(sp)
1000e314:	100f883a 	mov	r7,r2
1000e318:	dc400015 	stw	r17,0(sp)
1000e31c:	8009883a 	mov	r4,r16
1000e320:	903ee83a 	callr	r18
1000e324:	00ffffc4 	movi	r3,-1
1000e328:	10c0031e 	bne	r2,r3,1000e338 <_wcrtomb_r+0x64>
1000e32c:	88000015 	stw	zero,0(r17)
1000e330:	00c02284 	movi	r3,138
1000e334:	80c00015 	stw	r3,0(r16)
1000e338:	dfc00917 	ldw	ra,36(sp)
1000e33c:	dc800817 	ldw	r18,32(sp)
1000e340:	dc400717 	ldw	r17,28(sp)
1000e344:	dc000617 	ldw	r16,24(sp)
1000e348:	dec00a04 	addi	sp,sp,40
1000e34c:	f800283a 	ret
1000e350:	0009ca40 	call	10009ca4 <__locale_charset>
1000e354:	100f883a 	mov	r7,r2
1000e358:	dc400015 	stw	r17,0(sp)
1000e35c:	000d883a 	mov	r6,zero
1000e360:	d9400104 	addi	r5,sp,4
1000e364:	8009883a 	mov	r4,r16
1000e368:	903ee83a 	callr	r18
1000e36c:	003fed06 	br	1000e324 <__alt_data_end+0xf800e324>

1000e370 <wcrtomb>:
1000e370:	defff604 	addi	sp,sp,-40
1000e374:	008400b4 	movhi	r2,4098
1000e378:	dc800615 	stw	r18,24(sp)
1000e37c:	dc400515 	stw	r17,20(sp)
1000e380:	10b3fa04 	addi	r2,r2,-12312
1000e384:	dfc00915 	stw	ra,36(sp)
1000e388:	dd000815 	stw	r20,32(sp)
1000e38c:	dcc00715 	stw	r19,28(sp)
1000e390:	dc000415 	stw	r16,16(sp)
1000e394:	3025883a 	mov	r18,r6
1000e398:	14400017 	ldw	r17,0(r2)
1000e39c:	20001926 	beq	r4,zero,1000e404 <wcrtomb+0x94>
1000e3a0:	008400b4 	movhi	r2,4098
1000e3a4:	10b3fe04 	addi	r2,r2,-12296
1000e3a8:	15000017 	ldw	r20,0(r2)
1000e3ac:	2021883a 	mov	r16,r4
1000e3b0:	2827883a 	mov	r19,r5
1000e3b4:	0009ca40 	call	10009ca4 <__locale_charset>
1000e3b8:	100f883a 	mov	r7,r2
1000e3bc:	dc800015 	stw	r18,0(sp)
1000e3c0:	980d883a 	mov	r6,r19
1000e3c4:	800b883a 	mov	r5,r16
1000e3c8:	8809883a 	mov	r4,r17
1000e3cc:	a03ee83a 	callr	r20
1000e3d0:	00ffffc4 	movi	r3,-1
1000e3d4:	10c0031e 	bne	r2,r3,1000e3e4 <wcrtomb+0x74>
1000e3d8:	90000015 	stw	zero,0(r18)
1000e3dc:	00c02284 	movi	r3,138
1000e3e0:	88c00015 	stw	r3,0(r17)
1000e3e4:	dfc00917 	ldw	ra,36(sp)
1000e3e8:	dd000817 	ldw	r20,32(sp)
1000e3ec:	dcc00717 	ldw	r19,28(sp)
1000e3f0:	dc800617 	ldw	r18,24(sp)
1000e3f4:	dc400517 	ldw	r17,20(sp)
1000e3f8:	dc000417 	ldw	r16,16(sp)
1000e3fc:	dec00a04 	addi	sp,sp,40
1000e400:	f800283a 	ret
1000e404:	008400b4 	movhi	r2,4098
1000e408:	10b3fe04 	addi	r2,r2,-12296
1000e40c:	14000017 	ldw	r16,0(r2)
1000e410:	0009ca40 	call	10009ca4 <__locale_charset>
1000e414:	100f883a 	mov	r7,r2
1000e418:	dc800015 	stw	r18,0(sp)
1000e41c:	000d883a 	mov	r6,zero
1000e420:	d9400104 	addi	r5,sp,4
1000e424:	8809883a 	mov	r4,r17
1000e428:	803ee83a 	callr	r16
1000e42c:	003fe806 	br	1000e3d0 <__alt_data_end+0xf800e3d0>

1000e430 <__ascii_wctomb>:
1000e430:	28000526 	beq	r5,zero,1000e448 <__ascii_wctomb+0x18>
1000e434:	00803fc4 	movi	r2,255
1000e438:	11800536 	bltu	r2,r6,1000e450 <__ascii_wctomb+0x20>
1000e43c:	29800005 	stb	r6,0(r5)
1000e440:	00800044 	movi	r2,1
1000e444:	f800283a 	ret
1000e448:	0005883a 	mov	r2,zero
1000e44c:	f800283a 	ret
1000e450:	00802284 	movi	r2,138
1000e454:	20800015 	stw	r2,0(r4)
1000e458:	00bfffc4 	movi	r2,-1
1000e45c:	f800283a 	ret

1000e460 <_wctomb_r>:
1000e460:	008400b4 	movhi	r2,4098
1000e464:	defff904 	addi	sp,sp,-28
1000e468:	10b3fe04 	addi	r2,r2,-12296
1000e46c:	dfc00615 	stw	ra,24(sp)
1000e470:	dc400515 	stw	r17,20(sp)
1000e474:	dc000415 	stw	r16,16(sp)
1000e478:	3823883a 	mov	r17,r7
1000e47c:	14000017 	ldw	r16,0(r2)
1000e480:	d9000115 	stw	r4,4(sp)
1000e484:	d9400215 	stw	r5,8(sp)
1000e488:	d9800315 	stw	r6,12(sp)
1000e48c:	0009ca40 	call	10009ca4 <__locale_charset>
1000e490:	d9800317 	ldw	r6,12(sp)
1000e494:	d9400217 	ldw	r5,8(sp)
1000e498:	d9000117 	ldw	r4,4(sp)
1000e49c:	100f883a 	mov	r7,r2
1000e4a0:	dc400015 	stw	r17,0(sp)
1000e4a4:	803ee83a 	callr	r16
1000e4a8:	dfc00617 	ldw	ra,24(sp)
1000e4ac:	dc400517 	ldw	r17,20(sp)
1000e4b0:	dc000417 	ldw	r16,16(sp)
1000e4b4:	dec00704 	addi	sp,sp,28
1000e4b8:	f800283a 	ret

1000e4bc <__udivdi3>:
1000e4bc:	defff404 	addi	sp,sp,-48
1000e4c0:	dcc00515 	stw	r19,20(sp)
1000e4c4:	dc000215 	stw	r16,8(sp)
1000e4c8:	dfc00b15 	stw	ra,44(sp)
1000e4cc:	df000a15 	stw	fp,40(sp)
1000e4d0:	ddc00915 	stw	r23,36(sp)
1000e4d4:	dd800815 	stw	r22,32(sp)
1000e4d8:	dd400715 	stw	r21,28(sp)
1000e4dc:	dd000615 	stw	r20,24(sp)
1000e4e0:	dc800415 	stw	r18,16(sp)
1000e4e4:	dc400315 	stw	r17,12(sp)
1000e4e8:	2027883a 	mov	r19,r4
1000e4ec:	2821883a 	mov	r16,r5
1000e4f0:	3800461e 	bne	r7,zero,1000e60c <__udivdi3+0x150>
1000e4f4:	3023883a 	mov	r17,r6
1000e4f8:	2025883a 	mov	r18,r4
1000e4fc:	2980572e 	bgeu	r5,r6,1000e65c <__udivdi3+0x1a0>
1000e500:	00bfffd4 	movui	r2,65535
1000e504:	282d883a 	mov	r22,r5
1000e508:	1180b236 	bltu	r2,r6,1000e7d4 <__udivdi3+0x318>
1000e50c:	00803fc4 	movi	r2,255
1000e510:	1185803a 	cmpltu	r2,r2,r6
1000e514:	100490fa 	slli	r2,r2,3
1000e518:	3086d83a 	srl	r3,r6,r2
1000e51c:	01040074 	movhi	r4,4097
1000e520:	2112d604 	addi	r4,r4,19288
1000e524:	20c7883a 	add	r3,r4,r3
1000e528:	18c00003 	ldbu	r3,0(r3)
1000e52c:	1885883a 	add	r2,r3,r2
1000e530:	00c00804 	movi	r3,32
1000e534:	1887c83a 	sub	r3,r3,r2
1000e538:	18000526 	beq	r3,zero,1000e550 <__udivdi3+0x94>
1000e53c:	80e0983a 	sll	r16,r16,r3
1000e540:	9884d83a 	srl	r2,r19,r2
1000e544:	30e2983a 	sll	r17,r6,r3
1000e548:	98e4983a 	sll	r18,r19,r3
1000e54c:	142cb03a 	or	r22,r2,r16
1000e550:	882ad43a 	srli	r21,r17,16
1000e554:	b009883a 	mov	r4,r22
1000e558:	8d3fffcc 	andi	r20,r17,65535
1000e55c:	a80b883a 	mov	r5,r21
1000e560:	0004b3c0 	call	10004b3c <__umodsi3>
1000e564:	b009883a 	mov	r4,r22
1000e568:	a80b883a 	mov	r5,r21
1000e56c:	1027883a 	mov	r19,r2
1000e570:	0004ad80 	call	10004ad8 <__udivsi3>
1000e574:	100b883a 	mov	r5,r2
1000e578:	a009883a 	mov	r4,r20
1000e57c:	102d883a 	mov	r22,r2
1000e580:	0004b940 	call	10004b94 <__mulsi3>
1000e584:	9826943a 	slli	r19,r19,16
1000e588:	9006d43a 	srli	r3,r18,16
1000e58c:	1cc6b03a 	or	r3,r3,r19
1000e590:	1880052e 	bgeu	r3,r2,1000e5a8 <__udivdi3+0xec>
1000e594:	1c47883a 	add	r3,r3,r17
1000e598:	b13fffc4 	addi	r4,r22,-1
1000e59c:	1c400136 	bltu	r3,r17,1000e5a4 <__udivdi3+0xe8>
1000e5a0:	18814236 	bltu	r3,r2,1000eaac <__udivdi3+0x5f0>
1000e5a4:	202d883a 	mov	r22,r4
1000e5a8:	18a1c83a 	sub	r16,r3,r2
1000e5ac:	8009883a 	mov	r4,r16
1000e5b0:	a80b883a 	mov	r5,r21
1000e5b4:	0004b3c0 	call	10004b3c <__umodsi3>
1000e5b8:	1027883a 	mov	r19,r2
1000e5bc:	8009883a 	mov	r4,r16
1000e5c0:	a80b883a 	mov	r5,r21
1000e5c4:	9826943a 	slli	r19,r19,16
1000e5c8:	0004ad80 	call	10004ad8 <__udivsi3>
1000e5cc:	100b883a 	mov	r5,r2
1000e5d0:	a009883a 	mov	r4,r20
1000e5d4:	94bfffcc 	andi	r18,r18,65535
1000e5d8:	1021883a 	mov	r16,r2
1000e5dc:	94e4b03a 	or	r18,r18,r19
1000e5e0:	0004b940 	call	10004b94 <__mulsi3>
1000e5e4:	9080052e 	bgeu	r18,r2,1000e5fc <__udivdi3+0x140>
1000e5e8:	8ca5883a 	add	r18,r17,r18
1000e5ec:	80ffffc4 	addi	r3,r16,-1
1000e5f0:	94410c36 	bltu	r18,r17,1000ea24 <__udivdi3+0x568>
1000e5f4:	90810b2e 	bgeu	r18,r2,1000ea24 <__udivdi3+0x568>
1000e5f8:	843fff84 	addi	r16,r16,-2
1000e5fc:	b004943a 	slli	r2,r22,16
1000e600:	0007883a 	mov	r3,zero
1000e604:	1404b03a 	or	r2,r2,r16
1000e608:	00005e06 	br	1000e784 <__udivdi3+0x2c8>
1000e60c:	29c05b36 	bltu	r5,r7,1000e77c <__udivdi3+0x2c0>
1000e610:	00bfffd4 	movui	r2,65535
1000e614:	11c0672e 	bgeu	r2,r7,1000e7b4 <__udivdi3+0x2f8>
1000e618:	00804034 	movhi	r2,256
1000e61c:	10bfffc4 	addi	r2,r2,-1
1000e620:	11c10a36 	bltu	r2,r7,1000ea4c <__udivdi3+0x590>
1000e624:	00800404 	movi	r2,16
1000e628:	3886d83a 	srl	r3,r7,r2
1000e62c:	01040074 	movhi	r4,4097
1000e630:	2112d604 	addi	r4,r4,19288
1000e634:	20c7883a 	add	r3,r4,r3
1000e638:	18c00003 	ldbu	r3,0(r3)
1000e63c:	05c00804 	movi	r23,32
1000e640:	1885883a 	add	r2,r3,r2
1000e644:	b8afc83a 	sub	r23,r23,r2
1000e648:	b800671e 	bne	r23,zero,1000e7e8 <__udivdi3+0x32c>
1000e64c:	3c010536 	bltu	r7,r16,1000ea64 <__udivdi3+0x5a8>
1000e650:	9985403a 	cmpgeu	r2,r19,r6
1000e654:	0007883a 	mov	r3,zero
1000e658:	00004a06 	br	1000e784 <__udivdi3+0x2c8>
1000e65c:	3000041e 	bne	r6,zero,1000e670 <__udivdi3+0x1b4>
1000e660:	000b883a 	mov	r5,zero
1000e664:	01000044 	movi	r4,1
1000e668:	0004ad80 	call	10004ad8 <__udivsi3>
1000e66c:	1023883a 	mov	r17,r2
1000e670:	00bfffd4 	movui	r2,65535
1000e674:	1440532e 	bgeu	r2,r17,1000e7c4 <__udivdi3+0x308>
1000e678:	00804034 	movhi	r2,256
1000e67c:	10bfffc4 	addi	r2,r2,-1
1000e680:	1440f436 	bltu	r2,r17,1000ea54 <__udivdi3+0x598>
1000e684:	00800404 	movi	r2,16
1000e688:	8886d83a 	srl	r3,r17,r2
1000e68c:	01040074 	movhi	r4,4097
1000e690:	2112d604 	addi	r4,r4,19288
1000e694:	20c7883a 	add	r3,r4,r3
1000e698:	18c00003 	ldbu	r3,0(r3)
1000e69c:	1885883a 	add	r2,r3,r2
1000e6a0:	00c00804 	movi	r3,32
1000e6a4:	1887c83a 	sub	r3,r3,r2
1000e6a8:	1800a51e 	bne	r3,zero,1000e940 <__udivdi3+0x484>
1000e6ac:	882ad43a 	srli	r21,r17,16
1000e6b0:	8461c83a 	sub	r16,r16,r17
1000e6b4:	8d3fffcc 	andi	r20,r17,65535
1000e6b8:	00c00044 	movi	r3,1
1000e6bc:	a80b883a 	mov	r5,r21
1000e6c0:	8009883a 	mov	r4,r16
1000e6c4:	d8c00115 	stw	r3,4(sp)
1000e6c8:	0004b3c0 	call	10004b3c <__umodsi3>
1000e6cc:	a80b883a 	mov	r5,r21
1000e6d0:	8009883a 	mov	r4,r16
1000e6d4:	1027883a 	mov	r19,r2
1000e6d8:	0004ad80 	call	10004ad8 <__udivsi3>
1000e6dc:	a00b883a 	mov	r5,r20
1000e6e0:	1009883a 	mov	r4,r2
1000e6e4:	102d883a 	mov	r22,r2
1000e6e8:	0004b940 	call	10004b94 <__mulsi3>
1000e6ec:	9826943a 	slli	r19,r19,16
1000e6f0:	900ed43a 	srli	r7,r18,16
1000e6f4:	d8c00117 	ldw	r3,4(sp)
1000e6f8:	3cceb03a 	or	r7,r7,r19
1000e6fc:	3880052e 	bgeu	r7,r2,1000e714 <__udivdi3+0x258>
1000e700:	3c4f883a 	add	r7,r7,r17
1000e704:	b13fffc4 	addi	r4,r22,-1
1000e708:	3c400136 	bltu	r7,r17,1000e710 <__udivdi3+0x254>
1000e70c:	3880e436 	bltu	r7,r2,1000eaa0 <__udivdi3+0x5e4>
1000e710:	202d883a 	mov	r22,r4
1000e714:	38a1c83a 	sub	r16,r7,r2
1000e718:	8009883a 	mov	r4,r16
1000e71c:	a80b883a 	mov	r5,r21
1000e720:	d8c00115 	stw	r3,4(sp)
1000e724:	0004b3c0 	call	10004b3c <__umodsi3>
1000e728:	1027883a 	mov	r19,r2
1000e72c:	8009883a 	mov	r4,r16
1000e730:	a80b883a 	mov	r5,r21
1000e734:	9826943a 	slli	r19,r19,16
1000e738:	0004ad80 	call	10004ad8 <__udivsi3>
1000e73c:	a00b883a 	mov	r5,r20
1000e740:	1009883a 	mov	r4,r2
1000e744:	94bfffcc 	andi	r18,r18,65535
1000e748:	1021883a 	mov	r16,r2
1000e74c:	94e4b03a 	or	r18,r18,r19
1000e750:	0004b940 	call	10004b94 <__mulsi3>
1000e754:	d8c00117 	ldw	r3,4(sp)
1000e758:	9080052e 	bgeu	r18,r2,1000e770 <__udivdi3+0x2b4>
1000e75c:	8ca5883a 	add	r18,r17,r18
1000e760:	813fffc4 	addi	r4,r16,-1
1000e764:	9440ad36 	bltu	r18,r17,1000ea1c <__udivdi3+0x560>
1000e768:	9080ac2e 	bgeu	r18,r2,1000ea1c <__udivdi3+0x560>
1000e76c:	843fff84 	addi	r16,r16,-2
1000e770:	b004943a 	slli	r2,r22,16
1000e774:	1404b03a 	or	r2,r2,r16
1000e778:	00000206 	br	1000e784 <__udivdi3+0x2c8>
1000e77c:	0007883a 	mov	r3,zero
1000e780:	0005883a 	mov	r2,zero
1000e784:	dfc00b17 	ldw	ra,44(sp)
1000e788:	df000a17 	ldw	fp,40(sp)
1000e78c:	ddc00917 	ldw	r23,36(sp)
1000e790:	dd800817 	ldw	r22,32(sp)
1000e794:	dd400717 	ldw	r21,28(sp)
1000e798:	dd000617 	ldw	r20,24(sp)
1000e79c:	dcc00517 	ldw	r19,20(sp)
1000e7a0:	dc800417 	ldw	r18,16(sp)
1000e7a4:	dc400317 	ldw	r17,12(sp)
1000e7a8:	dc000217 	ldw	r16,8(sp)
1000e7ac:	dec00c04 	addi	sp,sp,48
1000e7b0:	f800283a 	ret
1000e7b4:	00803fc4 	movi	r2,255
1000e7b8:	11c5803a 	cmpltu	r2,r2,r7
1000e7bc:	100490fa 	slli	r2,r2,3
1000e7c0:	003f9906 	br	1000e628 <__alt_data_end+0xf800e628>
1000e7c4:	00803fc4 	movi	r2,255
1000e7c8:	1445803a 	cmpltu	r2,r2,r17
1000e7cc:	100490fa 	slli	r2,r2,3
1000e7d0:	003fad06 	br	1000e688 <__alt_data_end+0xf800e688>
1000e7d4:	00804034 	movhi	r2,256
1000e7d8:	10bfffc4 	addi	r2,r2,-1
1000e7dc:	11809f36 	bltu	r2,r6,1000ea5c <__udivdi3+0x5a0>
1000e7e0:	00800404 	movi	r2,16
1000e7e4:	003f4c06 	br	1000e518 <__alt_data_end+0xf800e518>
1000e7e8:	3dce983a 	sll	r7,r7,r23
1000e7ec:	30b8d83a 	srl	fp,r6,r2
1000e7f0:	80a2d83a 	srl	r17,r16,r2
1000e7f4:	35cc983a 	sll	r6,r6,r23
1000e7f8:	3f38b03a 	or	fp,r7,fp
1000e7fc:	e024d43a 	srli	r18,fp,16
1000e800:	9884d83a 	srl	r2,r19,r2
1000e804:	85e0983a 	sll	r16,r16,r23
1000e808:	8809883a 	mov	r4,r17
1000e80c:	900b883a 	mov	r5,r18
1000e810:	d9800015 	stw	r6,0(sp)
1000e814:	1420b03a 	or	r16,r2,r16
1000e818:	0004b3c0 	call	10004b3c <__umodsi3>
1000e81c:	900b883a 	mov	r5,r18
1000e820:	8809883a 	mov	r4,r17
1000e824:	1029883a 	mov	r20,r2
1000e828:	e5bfffcc 	andi	r22,fp,65535
1000e82c:	0004ad80 	call	10004ad8 <__udivsi3>
1000e830:	100b883a 	mov	r5,r2
1000e834:	b009883a 	mov	r4,r22
1000e838:	102b883a 	mov	r21,r2
1000e83c:	0004b940 	call	10004b94 <__mulsi3>
1000e840:	a028943a 	slli	r20,r20,16
1000e844:	8006d43a 	srli	r3,r16,16
1000e848:	1d06b03a 	or	r3,r3,r20
1000e84c:	1880042e 	bgeu	r3,r2,1000e860 <__udivdi3+0x3a4>
1000e850:	1f07883a 	add	r3,r3,fp
1000e854:	a93fffc4 	addi	r4,r21,-1
1000e858:	1f00892e 	bgeu	r3,fp,1000ea80 <__udivdi3+0x5c4>
1000e85c:	202b883a 	mov	r21,r4
1000e860:	18a3c83a 	sub	r17,r3,r2
1000e864:	8809883a 	mov	r4,r17
1000e868:	900b883a 	mov	r5,r18
1000e86c:	0004b3c0 	call	10004b3c <__umodsi3>
1000e870:	1029883a 	mov	r20,r2
1000e874:	8809883a 	mov	r4,r17
1000e878:	900b883a 	mov	r5,r18
1000e87c:	a028943a 	slli	r20,r20,16
1000e880:	0004ad80 	call	10004ad8 <__udivsi3>
1000e884:	100b883a 	mov	r5,r2
1000e888:	b009883a 	mov	r4,r22
1000e88c:	843fffcc 	andi	r16,r16,65535
1000e890:	1023883a 	mov	r17,r2
1000e894:	8520b03a 	or	r16,r16,r20
1000e898:	0004b940 	call	10004b94 <__mulsi3>
1000e89c:	8080042e 	bgeu	r16,r2,1000e8b0 <__udivdi3+0x3f4>
1000e8a0:	8721883a 	add	r16,r16,fp
1000e8a4:	88ffffc4 	addi	r3,r17,-1
1000e8a8:	8700712e 	bgeu	r16,fp,1000ea70 <__udivdi3+0x5b4>
1000e8ac:	1823883a 	mov	r17,r3
1000e8b0:	a80e943a 	slli	r7,r21,16
1000e8b4:	d8c00017 	ldw	r3,0(sp)
1000e8b8:	80a1c83a 	sub	r16,r16,r2
1000e8bc:	3c64b03a 	or	r18,r7,r17
1000e8c0:	1d3fffcc 	andi	r20,r3,65535
1000e8c4:	9022d43a 	srli	r17,r18,16
1000e8c8:	95bfffcc 	andi	r22,r18,65535
1000e8cc:	a00b883a 	mov	r5,r20
1000e8d0:	b009883a 	mov	r4,r22
1000e8d4:	182ad43a 	srli	r21,r3,16
1000e8d8:	0004b940 	call	10004b94 <__mulsi3>
1000e8dc:	a00b883a 	mov	r5,r20
1000e8e0:	8809883a 	mov	r4,r17
1000e8e4:	1039883a 	mov	fp,r2
1000e8e8:	0004b940 	call	10004b94 <__mulsi3>
1000e8ec:	8809883a 	mov	r4,r17
1000e8f0:	a80b883a 	mov	r5,r21
1000e8f4:	1029883a 	mov	r20,r2
1000e8f8:	0004b940 	call	10004b94 <__mulsi3>
1000e8fc:	a80b883a 	mov	r5,r21
1000e900:	b009883a 	mov	r4,r22
1000e904:	1023883a 	mov	r17,r2
1000e908:	0004b940 	call	10004b94 <__mulsi3>
1000e90c:	e006d43a 	srli	r3,fp,16
1000e910:	1505883a 	add	r2,r2,r20
1000e914:	1887883a 	add	r3,r3,r2
1000e918:	1d00022e 	bgeu	r3,r20,1000e924 <__udivdi3+0x468>
1000e91c:	00800074 	movhi	r2,1
1000e920:	88a3883a 	add	r17,r17,r2
1000e924:	1804d43a 	srli	r2,r3,16
1000e928:	1463883a 	add	r17,r2,r17
1000e92c:	84404436 	bltu	r16,r17,1000ea40 <__udivdi3+0x584>
1000e930:	84403e26 	beq	r16,r17,1000ea2c <__udivdi3+0x570>
1000e934:	9005883a 	mov	r2,r18
1000e938:	0007883a 	mov	r3,zero
1000e93c:	003f9106 	br	1000e784 <__alt_data_end+0xf800e784>
1000e940:	88e2983a 	sll	r17,r17,r3
1000e944:	80aed83a 	srl	r23,r16,r2
1000e948:	80e0983a 	sll	r16,r16,r3
1000e94c:	882ad43a 	srli	r21,r17,16
1000e950:	9884d83a 	srl	r2,r19,r2
1000e954:	b809883a 	mov	r4,r23
1000e958:	a80b883a 	mov	r5,r21
1000e95c:	98e4983a 	sll	r18,r19,r3
1000e960:	142cb03a 	or	r22,r2,r16
1000e964:	0004b3c0 	call	10004b3c <__umodsi3>
1000e968:	b809883a 	mov	r4,r23
1000e96c:	a80b883a 	mov	r5,r21
1000e970:	1027883a 	mov	r19,r2
1000e974:	8d3fffcc 	andi	r20,r17,65535
1000e978:	0004ad80 	call	10004ad8 <__udivsi3>
1000e97c:	a009883a 	mov	r4,r20
1000e980:	100b883a 	mov	r5,r2
1000e984:	102f883a 	mov	r23,r2
1000e988:	0004b940 	call	10004b94 <__mulsi3>
1000e98c:	9826943a 	slli	r19,r19,16
1000e990:	b008d43a 	srli	r4,r22,16
1000e994:	24c8b03a 	or	r4,r4,r19
1000e998:	2080062e 	bgeu	r4,r2,1000e9b4 <__udivdi3+0x4f8>
1000e99c:	2449883a 	add	r4,r4,r17
1000e9a0:	b8ffffc4 	addi	r3,r23,-1
1000e9a4:	24403c36 	bltu	r4,r17,1000ea98 <__udivdi3+0x5dc>
1000e9a8:	20803b2e 	bgeu	r4,r2,1000ea98 <__udivdi3+0x5dc>
1000e9ac:	bdffff84 	addi	r23,r23,-2
1000e9b0:	2449883a 	add	r4,r4,r17
1000e9b4:	20a1c83a 	sub	r16,r4,r2
1000e9b8:	a80b883a 	mov	r5,r21
1000e9bc:	8009883a 	mov	r4,r16
1000e9c0:	0004b3c0 	call	10004b3c <__umodsi3>
1000e9c4:	a80b883a 	mov	r5,r21
1000e9c8:	8009883a 	mov	r4,r16
1000e9cc:	1027883a 	mov	r19,r2
1000e9d0:	0004ad80 	call	10004ad8 <__udivsi3>
1000e9d4:	a009883a 	mov	r4,r20
1000e9d8:	100b883a 	mov	r5,r2
1000e9dc:	9826943a 	slli	r19,r19,16
1000e9e0:	1039883a 	mov	fp,r2
1000e9e4:	0004b940 	call	10004b94 <__mulsi3>
1000e9e8:	b13fffcc 	andi	r4,r22,65535
1000e9ec:	24c8b03a 	or	r4,r4,r19
1000e9f0:	2080062e 	bgeu	r4,r2,1000ea0c <__udivdi3+0x550>
1000e9f4:	2449883a 	add	r4,r4,r17
1000e9f8:	e0ffffc4 	addi	r3,fp,-1
1000e9fc:	24402436 	bltu	r4,r17,1000ea90 <__udivdi3+0x5d4>
1000ea00:	2080232e 	bgeu	r4,r2,1000ea90 <__udivdi3+0x5d4>
1000ea04:	e73fff84 	addi	fp,fp,-2
1000ea08:	2449883a 	add	r4,r4,r17
1000ea0c:	b82e943a 	slli	r23,r23,16
1000ea10:	20a1c83a 	sub	r16,r4,r2
1000ea14:	bf06b03a 	or	r3,r23,fp
1000ea18:	003f2806 	br	1000e6bc <__alt_data_end+0xf800e6bc>
1000ea1c:	2021883a 	mov	r16,r4
1000ea20:	003f5306 	br	1000e770 <__alt_data_end+0xf800e770>
1000ea24:	1821883a 	mov	r16,r3
1000ea28:	003ef406 	br	1000e5fc <__alt_data_end+0xf800e5fc>
1000ea2c:	1806943a 	slli	r3,r3,16
1000ea30:	9de6983a 	sll	r19,r19,r23
1000ea34:	e73fffcc 	andi	fp,fp,65535
1000ea38:	1f07883a 	add	r3,r3,fp
1000ea3c:	98ffbd2e 	bgeu	r19,r3,1000e934 <__alt_data_end+0xf800e934>
1000ea40:	90bfffc4 	addi	r2,r18,-1
1000ea44:	0007883a 	mov	r3,zero
1000ea48:	003f4e06 	br	1000e784 <__alt_data_end+0xf800e784>
1000ea4c:	00800604 	movi	r2,24
1000ea50:	003ef506 	br	1000e628 <__alt_data_end+0xf800e628>
1000ea54:	00800604 	movi	r2,24
1000ea58:	003f0b06 	br	1000e688 <__alt_data_end+0xf800e688>
1000ea5c:	00800604 	movi	r2,24
1000ea60:	003ead06 	br	1000e518 <__alt_data_end+0xf800e518>
1000ea64:	0007883a 	mov	r3,zero
1000ea68:	00800044 	movi	r2,1
1000ea6c:	003f4506 	br	1000e784 <__alt_data_end+0xf800e784>
1000ea70:	80bf8e2e 	bgeu	r16,r2,1000e8ac <__alt_data_end+0xf800e8ac>
1000ea74:	8c7fff84 	addi	r17,r17,-2
1000ea78:	8721883a 	add	r16,r16,fp
1000ea7c:	003f8c06 	br	1000e8b0 <__alt_data_end+0xf800e8b0>
1000ea80:	18bf762e 	bgeu	r3,r2,1000e85c <__alt_data_end+0xf800e85c>
1000ea84:	ad7fff84 	addi	r21,r21,-2
1000ea88:	1f07883a 	add	r3,r3,fp
1000ea8c:	003f7406 	br	1000e860 <__alt_data_end+0xf800e860>
1000ea90:	1839883a 	mov	fp,r3
1000ea94:	003fdd06 	br	1000ea0c <__alt_data_end+0xf800ea0c>
1000ea98:	182f883a 	mov	r23,r3
1000ea9c:	003fc506 	br	1000e9b4 <__alt_data_end+0xf800e9b4>
1000eaa0:	b5bfff84 	addi	r22,r22,-2
1000eaa4:	3c4f883a 	add	r7,r7,r17
1000eaa8:	003f1a06 	br	1000e714 <__alt_data_end+0xf800e714>
1000eaac:	b5bfff84 	addi	r22,r22,-2
1000eab0:	1c47883a 	add	r3,r3,r17
1000eab4:	003ebc06 	br	1000e5a8 <__alt_data_end+0xf800e5a8>

1000eab8 <__umoddi3>:
1000eab8:	defff304 	addi	sp,sp,-52
1000eabc:	df000b15 	stw	fp,44(sp)
1000eac0:	dc400415 	stw	r17,16(sp)
1000eac4:	dc000315 	stw	r16,12(sp)
1000eac8:	dfc00c15 	stw	ra,48(sp)
1000eacc:	ddc00a15 	stw	r23,40(sp)
1000ead0:	dd800915 	stw	r22,36(sp)
1000ead4:	dd400815 	stw	r21,32(sp)
1000ead8:	dd000715 	stw	r20,28(sp)
1000eadc:	dcc00615 	stw	r19,24(sp)
1000eae0:	dc800515 	stw	r18,20(sp)
1000eae4:	2021883a 	mov	r16,r4
1000eae8:	2823883a 	mov	r17,r5
1000eaec:	2839883a 	mov	fp,r5
1000eaf0:	3800401e 	bne	r7,zero,1000ebf4 <__umoddi3+0x13c>
1000eaf4:	3027883a 	mov	r19,r6
1000eaf8:	2029883a 	mov	r20,r4
1000eafc:	2980552e 	bgeu	r5,r6,1000ec54 <__umoddi3+0x19c>
1000eb00:	00bfffd4 	movui	r2,65535
1000eb04:	1180a236 	bltu	r2,r6,1000ed90 <__umoddi3+0x2d8>
1000eb08:	01003fc4 	movi	r4,255
1000eb0c:	2189803a 	cmpltu	r4,r4,r6
1000eb10:	200890fa 	slli	r4,r4,3
1000eb14:	3104d83a 	srl	r2,r6,r4
1000eb18:	00c40074 	movhi	r3,4097
1000eb1c:	18d2d604 	addi	r3,r3,19288
1000eb20:	1885883a 	add	r2,r3,r2
1000eb24:	10c00003 	ldbu	r3,0(r2)
1000eb28:	00800804 	movi	r2,32
1000eb2c:	1909883a 	add	r4,r3,r4
1000eb30:	1125c83a 	sub	r18,r2,r4
1000eb34:	90000526 	beq	r18,zero,1000eb4c <__umoddi3+0x94>
1000eb38:	8ca2983a 	sll	r17,r17,r18
1000eb3c:	8108d83a 	srl	r4,r16,r4
1000eb40:	34a6983a 	sll	r19,r6,r18
1000eb44:	84a8983a 	sll	r20,r16,r18
1000eb48:	2478b03a 	or	fp,r4,r17
1000eb4c:	982cd43a 	srli	r22,r19,16
1000eb50:	e009883a 	mov	r4,fp
1000eb54:	9dffffcc 	andi	r23,r19,65535
1000eb58:	b00b883a 	mov	r5,r22
1000eb5c:	0004b3c0 	call	10004b3c <__umodsi3>
1000eb60:	b00b883a 	mov	r5,r22
1000eb64:	e009883a 	mov	r4,fp
1000eb68:	102b883a 	mov	r21,r2
1000eb6c:	0004ad80 	call	10004ad8 <__udivsi3>
1000eb70:	100b883a 	mov	r5,r2
1000eb74:	b809883a 	mov	r4,r23
1000eb78:	0004b940 	call	10004b94 <__mulsi3>
1000eb7c:	a82a943a 	slli	r21,r21,16
1000eb80:	a006d43a 	srli	r3,r20,16
1000eb84:	1d46b03a 	or	r3,r3,r21
1000eb88:	1880032e 	bgeu	r3,r2,1000eb98 <__umoddi3+0xe0>
1000eb8c:	1cc7883a 	add	r3,r3,r19
1000eb90:	1cc00136 	bltu	r3,r19,1000eb98 <__umoddi3+0xe0>
1000eb94:	18813136 	bltu	r3,r2,1000f05c <__umoddi3+0x5a4>
1000eb98:	18a1c83a 	sub	r16,r3,r2
1000eb9c:	b00b883a 	mov	r5,r22
1000eba0:	8009883a 	mov	r4,r16
1000eba4:	0004b3c0 	call	10004b3c <__umodsi3>
1000eba8:	b00b883a 	mov	r5,r22
1000ebac:	8009883a 	mov	r4,r16
1000ebb0:	1023883a 	mov	r17,r2
1000ebb4:	0004ad80 	call	10004ad8 <__udivsi3>
1000ebb8:	100b883a 	mov	r5,r2
1000ebbc:	b809883a 	mov	r4,r23
1000ebc0:	8822943a 	slli	r17,r17,16
1000ebc4:	0004b940 	call	10004b94 <__mulsi3>
1000ebc8:	a0ffffcc 	andi	r3,r20,65535
1000ebcc:	1c46b03a 	or	r3,r3,r17
1000ebd0:	1880042e 	bgeu	r3,r2,1000ebe4 <__umoddi3+0x12c>
1000ebd4:	1cc7883a 	add	r3,r3,r19
1000ebd8:	1cc00236 	bltu	r3,r19,1000ebe4 <__umoddi3+0x12c>
1000ebdc:	1880012e 	bgeu	r3,r2,1000ebe4 <__umoddi3+0x12c>
1000ebe0:	1cc7883a 	add	r3,r3,r19
1000ebe4:	1885c83a 	sub	r2,r3,r2
1000ebe8:	1484d83a 	srl	r2,r2,r18
1000ebec:	0007883a 	mov	r3,zero
1000ebf0:	00005306 	br	1000ed40 <__umoddi3+0x288>
1000ebf4:	29c05036 	bltu	r5,r7,1000ed38 <__umoddi3+0x280>
1000ebf8:	00bfffd4 	movui	r2,65535
1000ebfc:	11c05c2e 	bgeu	r2,r7,1000ed70 <__umoddi3+0x2b8>
1000ec00:	00804034 	movhi	r2,256
1000ec04:	10bfffc4 	addi	r2,r2,-1
1000ec08:	11c10636 	bltu	r2,r7,1000f024 <__umoddi3+0x56c>
1000ec0c:	01000404 	movi	r4,16
1000ec10:	3904d83a 	srl	r2,r7,r4
1000ec14:	00c40074 	movhi	r3,4097
1000ec18:	18d2d604 	addi	r3,r3,19288
1000ec1c:	1885883a 	add	r2,r3,r2
1000ec20:	14c00003 	ldbu	r19,0(r2)
1000ec24:	00c00804 	movi	r3,32
1000ec28:	9927883a 	add	r19,r19,r4
1000ec2c:	1ce9c83a 	sub	r20,r3,r19
1000ec30:	a0005c1e 	bne	r20,zero,1000eda4 <__umoddi3+0x2ec>
1000ec34:	3c400136 	bltu	r7,r17,1000ec3c <__umoddi3+0x184>
1000ec38:	81810a36 	bltu	r16,r6,1000f064 <__umoddi3+0x5ac>
1000ec3c:	8185c83a 	sub	r2,r16,r6
1000ec40:	89e3c83a 	sub	r17,r17,r7
1000ec44:	8089803a 	cmpltu	r4,r16,r2
1000ec48:	8939c83a 	sub	fp,r17,r4
1000ec4c:	e007883a 	mov	r3,fp
1000ec50:	00003b06 	br	1000ed40 <__umoddi3+0x288>
1000ec54:	3000041e 	bne	r6,zero,1000ec68 <__umoddi3+0x1b0>
1000ec58:	000b883a 	mov	r5,zero
1000ec5c:	01000044 	movi	r4,1
1000ec60:	0004ad80 	call	10004ad8 <__udivsi3>
1000ec64:	1027883a 	mov	r19,r2
1000ec68:	00bfffd4 	movui	r2,65535
1000ec6c:	14c0442e 	bgeu	r2,r19,1000ed80 <__umoddi3+0x2c8>
1000ec70:	00804034 	movhi	r2,256
1000ec74:	10bfffc4 	addi	r2,r2,-1
1000ec78:	14c0ec36 	bltu	r2,r19,1000f02c <__umoddi3+0x574>
1000ec7c:	00800404 	movi	r2,16
1000ec80:	9886d83a 	srl	r3,r19,r2
1000ec84:	01040074 	movhi	r4,4097
1000ec88:	2112d604 	addi	r4,r4,19288
1000ec8c:	20c7883a 	add	r3,r4,r3
1000ec90:	18c00003 	ldbu	r3,0(r3)
1000ec94:	1887883a 	add	r3,r3,r2
1000ec98:	00800804 	movi	r2,32
1000ec9c:	10e5c83a 	sub	r18,r2,r3
1000eca0:	9000ab1e 	bne	r18,zero,1000ef50 <__umoddi3+0x498>
1000eca4:	982cd43a 	srli	r22,r19,16
1000eca8:	8ce3c83a 	sub	r17,r17,r19
1000ecac:	9dffffcc 	andi	r23,r19,65535
1000ecb0:	b00b883a 	mov	r5,r22
1000ecb4:	8809883a 	mov	r4,r17
1000ecb8:	0004b3c0 	call	10004b3c <__umodsi3>
1000ecbc:	b00b883a 	mov	r5,r22
1000ecc0:	8809883a 	mov	r4,r17
1000ecc4:	102b883a 	mov	r21,r2
1000ecc8:	0004ad80 	call	10004ad8 <__udivsi3>
1000eccc:	b80b883a 	mov	r5,r23
1000ecd0:	1009883a 	mov	r4,r2
1000ecd4:	0004b940 	call	10004b94 <__mulsi3>
1000ecd8:	a82a943a 	slli	r21,r21,16
1000ecdc:	a006d43a 	srli	r3,r20,16
1000ece0:	1d46b03a 	or	r3,r3,r21
1000ece4:	1880042e 	bgeu	r3,r2,1000ecf8 <__umoddi3+0x240>
1000ece8:	1cc7883a 	add	r3,r3,r19
1000ecec:	1cc00236 	bltu	r3,r19,1000ecf8 <__umoddi3+0x240>
1000ecf0:	1880012e 	bgeu	r3,r2,1000ecf8 <__umoddi3+0x240>
1000ecf4:	1cc7883a 	add	r3,r3,r19
1000ecf8:	18a1c83a 	sub	r16,r3,r2
1000ecfc:	b00b883a 	mov	r5,r22
1000ed00:	8009883a 	mov	r4,r16
1000ed04:	0004b3c0 	call	10004b3c <__umodsi3>
1000ed08:	1023883a 	mov	r17,r2
1000ed0c:	b00b883a 	mov	r5,r22
1000ed10:	8009883a 	mov	r4,r16
1000ed14:	0004ad80 	call	10004ad8 <__udivsi3>
1000ed18:	8822943a 	slli	r17,r17,16
1000ed1c:	b80b883a 	mov	r5,r23
1000ed20:	1009883a 	mov	r4,r2
1000ed24:	0004b940 	call	10004b94 <__mulsi3>
1000ed28:	a53fffcc 	andi	r20,r20,65535
1000ed2c:	a446b03a 	or	r3,r20,r17
1000ed30:	18bfac2e 	bgeu	r3,r2,1000ebe4 <__alt_data_end+0xf800ebe4>
1000ed34:	003fa706 	br	1000ebd4 <__alt_data_end+0xf800ebd4>
1000ed38:	2005883a 	mov	r2,r4
1000ed3c:	2807883a 	mov	r3,r5
1000ed40:	dfc00c17 	ldw	ra,48(sp)
1000ed44:	df000b17 	ldw	fp,44(sp)
1000ed48:	ddc00a17 	ldw	r23,40(sp)
1000ed4c:	dd800917 	ldw	r22,36(sp)
1000ed50:	dd400817 	ldw	r21,32(sp)
1000ed54:	dd000717 	ldw	r20,28(sp)
1000ed58:	dcc00617 	ldw	r19,24(sp)
1000ed5c:	dc800517 	ldw	r18,20(sp)
1000ed60:	dc400417 	ldw	r17,16(sp)
1000ed64:	dc000317 	ldw	r16,12(sp)
1000ed68:	dec00d04 	addi	sp,sp,52
1000ed6c:	f800283a 	ret
1000ed70:	04c03fc4 	movi	r19,255
1000ed74:	99c9803a 	cmpltu	r4,r19,r7
1000ed78:	200890fa 	slli	r4,r4,3
1000ed7c:	003fa406 	br	1000ec10 <__alt_data_end+0xf800ec10>
1000ed80:	00803fc4 	movi	r2,255
1000ed84:	14c5803a 	cmpltu	r2,r2,r19
1000ed88:	100490fa 	slli	r2,r2,3
1000ed8c:	003fbc06 	br	1000ec80 <__alt_data_end+0xf800ec80>
1000ed90:	00804034 	movhi	r2,256
1000ed94:	10bfffc4 	addi	r2,r2,-1
1000ed98:	1180a636 	bltu	r2,r6,1000f034 <__umoddi3+0x57c>
1000ed9c:	01000404 	movi	r4,16
1000eda0:	003f5c06 	br	1000eb14 <__alt_data_end+0xf800eb14>
1000eda4:	3d0e983a 	sll	r7,r7,r20
1000eda8:	34ead83a 	srl	r21,r6,r19
1000edac:	8cc6d83a 	srl	r3,r17,r19
1000edb0:	8d10983a 	sll	r8,r17,r20
1000edb4:	3d6ab03a 	or	r21,r7,r21
1000edb8:	a82cd43a 	srli	r22,r21,16
1000edbc:	84e2d83a 	srl	r17,r16,r19
1000edc0:	1809883a 	mov	r4,r3
1000edc4:	b00b883a 	mov	r5,r22
1000edc8:	8a22b03a 	or	r17,r17,r8
1000edcc:	3524983a 	sll	r18,r6,r20
1000edd0:	dc400015 	stw	r17,0(sp)
1000edd4:	d8c00115 	stw	r3,4(sp)
1000edd8:	0004b3c0 	call	10004b3c <__umodsi3>
1000eddc:	d8c00117 	ldw	r3,4(sp)
1000ede0:	b00b883a 	mov	r5,r22
1000ede4:	1039883a 	mov	fp,r2
1000ede8:	1809883a 	mov	r4,r3
1000edec:	0004ad80 	call	10004ad8 <__udivsi3>
1000edf0:	adffffcc 	andi	r23,r21,65535
1000edf4:	100b883a 	mov	r5,r2
1000edf8:	b809883a 	mov	r4,r23
1000edfc:	1023883a 	mov	r17,r2
1000ee00:	0004b940 	call	10004b94 <__mulsi3>
1000ee04:	d9400017 	ldw	r5,0(sp)
1000ee08:	e008943a 	slli	r4,fp,16
1000ee0c:	8520983a 	sll	r16,r16,r20
1000ee10:	2806d43a 	srli	r3,r5,16
1000ee14:	1906b03a 	or	r3,r3,r4
1000ee18:	1880042e 	bgeu	r3,r2,1000ee2c <__umoddi3+0x374>
1000ee1c:	1d47883a 	add	r3,r3,r21
1000ee20:	893fffc4 	addi	r4,r17,-1
1000ee24:	1d40892e 	bgeu	r3,r21,1000f04c <__umoddi3+0x594>
1000ee28:	2023883a 	mov	r17,r4
1000ee2c:	18b9c83a 	sub	fp,r3,r2
1000ee30:	b00b883a 	mov	r5,r22
1000ee34:	e009883a 	mov	r4,fp
1000ee38:	0004b3c0 	call	10004b3c <__umodsi3>
1000ee3c:	b00b883a 	mov	r5,r22
1000ee40:	e009883a 	mov	r4,fp
1000ee44:	d8800215 	stw	r2,8(sp)
1000ee48:	0004ad80 	call	10004ad8 <__udivsi3>
1000ee4c:	100b883a 	mov	r5,r2
1000ee50:	b809883a 	mov	r4,r23
1000ee54:	102d883a 	mov	r22,r2
1000ee58:	0004b940 	call	10004b94 <__mulsi3>
1000ee5c:	d9800217 	ldw	r6,8(sp)
1000ee60:	d8c00017 	ldw	r3,0(sp)
1000ee64:	300c943a 	slli	r6,r6,16
1000ee68:	1a3fffcc 	andi	r8,r3,65535
1000ee6c:	4190b03a 	or	r8,r8,r6
1000ee70:	4080042e 	bgeu	r8,r2,1000ee84 <__umoddi3+0x3cc>
1000ee74:	4551883a 	add	r8,r8,r21
1000ee78:	b0ffffc4 	addi	r3,r22,-1
1000ee7c:	45406f2e 	bgeu	r8,r21,1000f03c <__umoddi3+0x584>
1000ee80:	182d883a 	mov	r22,r3
1000ee84:	880e943a 	slli	r7,r17,16
1000ee88:	9006d43a 	srli	r3,r18,16
1000ee8c:	91bfffcc 	andi	r6,r18,65535
1000ee90:	3dacb03a 	or	r22,r7,r22
1000ee94:	b02ed43a 	srli	r23,r22,16
1000ee98:	b5bfffcc 	andi	r22,r22,65535
1000ee9c:	300b883a 	mov	r5,r6
1000eea0:	b009883a 	mov	r4,r22
1000eea4:	40a3c83a 	sub	r17,r8,r2
1000eea8:	d8c00115 	stw	r3,4(sp)
1000eeac:	d9800215 	stw	r6,8(sp)
1000eeb0:	0004b940 	call	10004b94 <__mulsi3>
1000eeb4:	d9800217 	ldw	r6,8(sp)
1000eeb8:	b809883a 	mov	r4,r23
1000eebc:	1039883a 	mov	fp,r2
1000eec0:	300b883a 	mov	r5,r6
1000eec4:	0004b940 	call	10004b94 <__mulsi3>
1000eec8:	d8c00117 	ldw	r3,4(sp)
1000eecc:	b809883a 	mov	r4,r23
1000eed0:	d8800215 	stw	r2,8(sp)
1000eed4:	180b883a 	mov	r5,r3
1000eed8:	0004b940 	call	10004b94 <__mulsi3>
1000eedc:	d8c00117 	ldw	r3,4(sp)
1000eee0:	b009883a 	mov	r4,r22
1000eee4:	102f883a 	mov	r23,r2
1000eee8:	180b883a 	mov	r5,r3
1000eeec:	0004b940 	call	10004b94 <__mulsi3>
1000eef0:	d9800217 	ldw	r6,8(sp)
1000eef4:	e006d43a 	srli	r3,fp,16
1000eef8:	1185883a 	add	r2,r2,r6
1000eefc:	1885883a 	add	r2,r3,r2
1000ef00:	1180022e 	bgeu	r2,r6,1000ef0c <__umoddi3+0x454>
1000ef04:	00c00074 	movhi	r3,1
1000ef08:	b8ef883a 	add	r23,r23,r3
1000ef0c:	1006d43a 	srli	r3,r2,16
1000ef10:	1004943a 	slli	r2,r2,16
1000ef14:	e73fffcc 	andi	fp,fp,65535
1000ef18:	1dc7883a 	add	r3,r3,r23
1000ef1c:	1739883a 	add	fp,r2,fp
1000ef20:	88c03a36 	bltu	r17,r3,1000f00c <__umoddi3+0x554>
1000ef24:	88c05126 	beq	r17,r3,1000f06c <__umoddi3+0x5b4>
1000ef28:	88c9c83a 	sub	r4,r17,r3
1000ef2c:	e00f883a 	mov	r7,fp
1000ef30:	81cfc83a 	sub	r7,r16,r7
1000ef34:	81c7803a 	cmpltu	r3,r16,r7
1000ef38:	20c7c83a 	sub	r3,r4,r3
1000ef3c:	1cc4983a 	sll	r2,r3,r19
1000ef40:	3d0ed83a 	srl	r7,r7,r20
1000ef44:	1d06d83a 	srl	r3,r3,r20
1000ef48:	11c4b03a 	or	r2,r2,r7
1000ef4c:	003f7c06 	br	1000ed40 <__alt_data_end+0xf800ed40>
1000ef50:	9ca6983a 	sll	r19,r19,r18
1000ef54:	88f8d83a 	srl	fp,r17,r3
1000ef58:	80c4d83a 	srl	r2,r16,r3
1000ef5c:	982cd43a 	srli	r22,r19,16
1000ef60:	8ca2983a 	sll	r17,r17,r18
1000ef64:	e009883a 	mov	r4,fp
1000ef68:	b00b883a 	mov	r5,r22
1000ef6c:	146ab03a 	or	r21,r2,r17
1000ef70:	0004b3c0 	call	10004b3c <__umodsi3>
1000ef74:	b00b883a 	mov	r5,r22
1000ef78:	e009883a 	mov	r4,fp
1000ef7c:	1029883a 	mov	r20,r2
1000ef80:	9dffffcc 	andi	r23,r19,65535
1000ef84:	0004ad80 	call	10004ad8 <__udivsi3>
1000ef88:	b809883a 	mov	r4,r23
1000ef8c:	100b883a 	mov	r5,r2
1000ef90:	0004b940 	call	10004b94 <__mulsi3>
1000ef94:	a008943a 	slli	r4,r20,16
1000ef98:	a806d43a 	srli	r3,r21,16
1000ef9c:	84a8983a 	sll	r20,r16,r18
1000efa0:	1906b03a 	or	r3,r3,r4
1000efa4:	1880042e 	bgeu	r3,r2,1000efb8 <__umoddi3+0x500>
1000efa8:	1cc7883a 	add	r3,r3,r19
1000efac:	1cc00236 	bltu	r3,r19,1000efb8 <__umoddi3+0x500>
1000efb0:	1880012e 	bgeu	r3,r2,1000efb8 <__umoddi3+0x500>
1000efb4:	1cc7883a 	add	r3,r3,r19
1000efb8:	18a3c83a 	sub	r17,r3,r2
1000efbc:	b00b883a 	mov	r5,r22
1000efc0:	8809883a 	mov	r4,r17
1000efc4:	0004b3c0 	call	10004b3c <__umodsi3>
1000efc8:	b00b883a 	mov	r5,r22
1000efcc:	8809883a 	mov	r4,r17
1000efd0:	1021883a 	mov	r16,r2
1000efd4:	0004ad80 	call	10004ad8 <__udivsi3>
1000efd8:	100b883a 	mov	r5,r2
1000efdc:	b809883a 	mov	r4,r23
1000efe0:	8020943a 	slli	r16,r16,16
1000efe4:	0004b940 	call	10004b94 <__mulsi3>
1000efe8:	a8ffffcc 	andi	r3,r21,65535
1000efec:	1c06b03a 	or	r3,r3,r16
1000eff0:	1880042e 	bgeu	r3,r2,1000f004 <__umoddi3+0x54c>
1000eff4:	1cc7883a 	add	r3,r3,r19
1000eff8:	1cc00236 	bltu	r3,r19,1000f004 <__umoddi3+0x54c>
1000effc:	1880012e 	bgeu	r3,r2,1000f004 <__umoddi3+0x54c>
1000f000:	1cc7883a 	add	r3,r3,r19
1000f004:	18a3c83a 	sub	r17,r3,r2
1000f008:	003f2906 	br	1000ecb0 <__alt_data_end+0xf800ecb0>
1000f00c:	e48fc83a 	sub	r7,fp,r18
1000f010:	1d49c83a 	sub	r4,r3,r21
1000f014:	e1f9803a 	cmpltu	fp,fp,r7
1000f018:	2739c83a 	sub	fp,r4,fp
1000f01c:	8f09c83a 	sub	r4,r17,fp
1000f020:	003fc306 	br	1000ef30 <__alt_data_end+0xf800ef30>
1000f024:	01000604 	movi	r4,24
1000f028:	003ef906 	br	1000ec10 <__alt_data_end+0xf800ec10>
1000f02c:	00800604 	movi	r2,24
1000f030:	003f1306 	br	1000ec80 <__alt_data_end+0xf800ec80>
1000f034:	01000604 	movi	r4,24
1000f038:	003eb606 	br	1000eb14 <__alt_data_end+0xf800eb14>
1000f03c:	40bf902e 	bgeu	r8,r2,1000ee80 <__alt_data_end+0xf800ee80>
1000f040:	b5bfff84 	addi	r22,r22,-2
1000f044:	4551883a 	add	r8,r8,r21
1000f048:	003f8e06 	br	1000ee84 <__alt_data_end+0xf800ee84>
1000f04c:	18bf762e 	bgeu	r3,r2,1000ee28 <__alt_data_end+0xf800ee28>
1000f050:	8c7fff84 	addi	r17,r17,-2
1000f054:	1d47883a 	add	r3,r3,r21
1000f058:	003f7406 	br	1000ee2c <__alt_data_end+0xf800ee2c>
1000f05c:	1cc7883a 	add	r3,r3,r19
1000f060:	003ecd06 	br	1000eb98 <__alt_data_end+0xf800eb98>
1000f064:	8005883a 	mov	r2,r16
1000f068:	003ef806 	br	1000ec4c <__alt_data_end+0xf800ec4c>
1000f06c:	873fe736 	bltu	r16,fp,1000f00c <__alt_data_end+0xf800f00c>
1000f070:	e00f883a 	mov	r7,fp
1000f074:	0009883a 	mov	r4,zero
1000f078:	003fad06 	br	1000ef30 <__alt_data_end+0xf800ef30>

1000f07c <__adddf3>:
1000f07c:	02c00434 	movhi	r11,16
1000f080:	5affffc4 	addi	r11,r11,-1
1000f084:	2806d7fa 	srli	r3,r5,31
1000f088:	2ad4703a 	and	r10,r5,r11
1000f08c:	3ad2703a 	and	r9,r7,r11
1000f090:	3804d53a 	srli	r2,r7,20
1000f094:	3018d77a 	srli	r12,r6,29
1000f098:	280ad53a 	srli	r5,r5,20
1000f09c:	501490fa 	slli	r10,r10,3
1000f0a0:	2010d77a 	srli	r8,r4,29
1000f0a4:	481290fa 	slli	r9,r9,3
1000f0a8:	380ed7fa 	srli	r7,r7,31
1000f0ac:	defffb04 	addi	sp,sp,-20
1000f0b0:	dc800215 	stw	r18,8(sp)
1000f0b4:	dc400115 	stw	r17,4(sp)
1000f0b8:	dc000015 	stw	r16,0(sp)
1000f0bc:	dfc00415 	stw	ra,16(sp)
1000f0c0:	dcc00315 	stw	r19,12(sp)
1000f0c4:	1c803fcc 	andi	r18,r3,255
1000f0c8:	2c01ffcc 	andi	r16,r5,2047
1000f0cc:	5210b03a 	or	r8,r10,r8
1000f0d0:	202290fa 	slli	r17,r4,3
1000f0d4:	1081ffcc 	andi	r2,r2,2047
1000f0d8:	4b12b03a 	or	r9,r9,r12
1000f0dc:	300c90fa 	slli	r6,r6,3
1000f0e0:	91c07526 	beq	r18,r7,1000f2b8 <__adddf3+0x23c>
1000f0e4:	8087c83a 	sub	r3,r16,r2
1000f0e8:	00c0ab0e 	bge	zero,r3,1000f398 <__adddf3+0x31c>
1000f0ec:	10002a1e 	bne	r2,zero,1000f198 <__adddf3+0x11c>
1000f0f0:	4984b03a 	or	r2,r9,r6
1000f0f4:	1000961e 	bne	r2,zero,1000f350 <__adddf3+0x2d4>
1000f0f8:	888001cc 	andi	r2,r17,7
1000f0fc:	10000726 	beq	r2,zero,1000f11c <__adddf3+0xa0>
1000f100:	888003cc 	andi	r2,r17,15
1000f104:	00c00104 	movi	r3,4
1000f108:	10c00426 	beq	r2,r3,1000f11c <__adddf3+0xa0>
1000f10c:	88c7883a 	add	r3,r17,r3
1000f110:	1c63803a 	cmpltu	r17,r3,r17
1000f114:	4451883a 	add	r8,r8,r17
1000f118:	1823883a 	mov	r17,r3
1000f11c:	4080202c 	andhi	r2,r8,128
1000f120:	10005926 	beq	r2,zero,1000f288 <__adddf3+0x20c>
1000f124:	84000044 	addi	r16,r16,1
1000f128:	0081ffc4 	movi	r2,2047
1000f12c:	8080ba26 	beq	r16,r2,1000f418 <__adddf3+0x39c>
1000f130:	00bfe034 	movhi	r2,65408
1000f134:	10bfffc4 	addi	r2,r2,-1
1000f138:	4090703a 	and	r8,r8,r2
1000f13c:	4004977a 	slli	r2,r8,29
1000f140:	4010927a 	slli	r8,r8,9
1000f144:	8822d0fa 	srli	r17,r17,3
1000f148:	8401ffcc 	andi	r16,r16,2047
1000f14c:	4010d33a 	srli	r8,r8,12
1000f150:	9007883a 	mov	r3,r18
1000f154:	1444b03a 	or	r2,r2,r17
1000f158:	8401ffcc 	andi	r16,r16,2047
1000f15c:	8020953a 	slli	r16,r16,20
1000f160:	18c03fcc 	andi	r3,r3,255
1000f164:	01000434 	movhi	r4,16
1000f168:	213fffc4 	addi	r4,r4,-1
1000f16c:	180697fa 	slli	r3,r3,31
1000f170:	4110703a 	and	r8,r8,r4
1000f174:	4410b03a 	or	r8,r8,r16
1000f178:	40c6b03a 	or	r3,r8,r3
1000f17c:	dfc00417 	ldw	ra,16(sp)
1000f180:	dcc00317 	ldw	r19,12(sp)
1000f184:	dc800217 	ldw	r18,8(sp)
1000f188:	dc400117 	ldw	r17,4(sp)
1000f18c:	dc000017 	ldw	r16,0(sp)
1000f190:	dec00504 	addi	sp,sp,20
1000f194:	f800283a 	ret
1000f198:	0081ffc4 	movi	r2,2047
1000f19c:	80bfd626 	beq	r16,r2,1000f0f8 <__alt_data_end+0xf800f0f8>
1000f1a0:	4a402034 	orhi	r9,r9,128
1000f1a4:	00800e04 	movi	r2,56
1000f1a8:	10c09f16 	blt	r2,r3,1000f428 <__adddf3+0x3ac>
1000f1ac:	008007c4 	movi	r2,31
1000f1b0:	10c0c216 	blt	r2,r3,1000f4bc <__adddf3+0x440>
1000f1b4:	00800804 	movi	r2,32
1000f1b8:	10c5c83a 	sub	r2,r2,r3
1000f1bc:	488a983a 	sll	r5,r9,r2
1000f1c0:	30c8d83a 	srl	r4,r6,r3
1000f1c4:	3084983a 	sll	r2,r6,r2
1000f1c8:	48c6d83a 	srl	r3,r9,r3
1000f1cc:	290cb03a 	or	r6,r5,r4
1000f1d0:	1004c03a 	cmpne	r2,r2,zero
1000f1d4:	308cb03a 	or	r6,r6,r2
1000f1d8:	898dc83a 	sub	r6,r17,r6
1000f1dc:	89a3803a 	cmpltu	r17,r17,r6
1000f1e0:	40d1c83a 	sub	r8,r8,r3
1000f1e4:	4451c83a 	sub	r8,r8,r17
1000f1e8:	3023883a 	mov	r17,r6
1000f1ec:	4080202c 	andhi	r2,r8,128
1000f1f0:	10002326 	beq	r2,zero,1000f280 <__adddf3+0x204>
1000f1f4:	04c02034 	movhi	r19,128
1000f1f8:	9cffffc4 	addi	r19,r19,-1
1000f1fc:	44e6703a 	and	r19,r8,r19
1000f200:	98007626 	beq	r19,zero,1000f3dc <__adddf3+0x360>
1000f204:	9809883a 	mov	r4,r19
1000f208:	00118bc0 	call	100118bc <__clzsi2>
1000f20c:	10fffe04 	addi	r3,r2,-8
1000f210:	010007c4 	movi	r4,31
1000f214:	20c07716 	blt	r4,r3,1000f3f4 <__adddf3+0x378>
1000f218:	00800804 	movi	r2,32
1000f21c:	10c5c83a 	sub	r2,r2,r3
1000f220:	8884d83a 	srl	r2,r17,r2
1000f224:	98d0983a 	sll	r8,r19,r3
1000f228:	88e2983a 	sll	r17,r17,r3
1000f22c:	1204b03a 	or	r2,r2,r8
1000f230:	1c007416 	blt	r3,r16,1000f404 <__adddf3+0x388>
1000f234:	1c21c83a 	sub	r16,r3,r16
1000f238:	82000044 	addi	r8,r16,1
1000f23c:	00c007c4 	movi	r3,31
1000f240:	1a009116 	blt	r3,r8,1000f488 <__adddf3+0x40c>
1000f244:	00c00804 	movi	r3,32
1000f248:	1a07c83a 	sub	r3,r3,r8
1000f24c:	8a08d83a 	srl	r4,r17,r8
1000f250:	88e2983a 	sll	r17,r17,r3
1000f254:	10c6983a 	sll	r3,r2,r3
1000f258:	1210d83a 	srl	r8,r2,r8
1000f25c:	8804c03a 	cmpne	r2,r17,zero
1000f260:	1906b03a 	or	r3,r3,r4
1000f264:	18a2b03a 	or	r17,r3,r2
1000f268:	0021883a 	mov	r16,zero
1000f26c:	003fa206 	br	1000f0f8 <__alt_data_end+0xf800f0f8>
1000f270:	1890b03a 	or	r8,r3,r2
1000f274:	40017d26 	beq	r8,zero,1000f86c <__adddf3+0x7f0>
1000f278:	1011883a 	mov	r8,r2
1000f27c:	1823883a 	mov	r17,r3
1000f280:	888001cc 	andi	r2,r17,7
1000f284:	103f9e1e 	bne	r2,zero,1000f100 <__alt_data_end+0xf800f100>
1000f288:	4004977a 	slli	r2,r8,29
1000f28c:	8822d0fa 	srli	r17,r17,3
1000f290:	4010d0fa 	srli	r8,r8,3
1000f294:	9007883a 	mov	r3,r18
1000f298:	1444b03a 	or	r2,r2,r17
1000f29c:	0101ffc4 	movi	r4,2047
1000f2a0:	81002426 	beq	r16,r4,1000f334 <__adddf3+0x2b8>
1000f2a4:	8120703a 	and	r16,r16,r4
1000f2a8:	01000434 	movhi	r4,16
1000f2ac:	213fffc4 	addi	r4,r4,-1
1000f2b0:	4110703a 	and	r8,r8,r4
1000f2b4:	003fa806 	br	1000f158 <__alt_data_end+0xf800f158>
1000f2b8:	8089c83a 	sub	r4,r16,r2
1000f2bc:	01005e0e 	bge	zero,r4,1000f438 <__adddf3+0x3bc>
1000f2c0:	10002b26 	beq	r2,zero,1000f370 <__adddf3+0x2f4>
1000f2c4:	0081ffc4 	movi	r2,2047
1000f2c8:	80bf8b26 	beq	r16,r2,1000f0f8 <__alt_data_end+0xf800f0f8>
1000f2cc:	4a402034 	orhi	r9,r9,128
1000f2d0:	00800e04 	movi	r2,56
1000f2d4:	1100a40e 	bge	r2,r4,1000f568 <__adddf3+0x4ec>
1000f2d8:	498cb03a 	or	r6,r9,r6
1000f2dc:	300ac03a 	cmpne	r5,r6,zero
1000f2e0:	0013883a 	mov	r9,zero
1000f2e4:	2c4b883a 	add	r5,r5,r17
1000f2e8:	2c63803a 	cmpltu	r17,r5,r17
1000f2ec:	4a11883a 	add	r8,r9,r8
1000f2f0:	8a11883a 	add	r8,r17,r8
1000f2f4:	2823883a 	mov	r17,r5
1000f2f8:	4080202c 	andhi	r2,r8,128
1000f2fc:	103fe026 	beq	r2,zero,1000f280 <__alt_data_end+0xf800f280>
1000f300:	84000044 	addi	r16,r16,1
1000f304:	0081ffc4 	movi	r2,2047
1000f308:	8080d226 	beq	r16,r2,1000f654 <__adddf3+0x5d8>
1000f30c:	00bfe034 	movhi	r2,65408
1000f310:	10bfffc4 	addi	r2,r2,-1
1000f314:	4090703a 	and	r8,r8,r2
1000f318:	880ad07a 	srli	r5,r17,1
1000f31c:	400897fa 	slli	r4,r8,31
1000f320:	88c0004c 	andi	r3,r17,1
1000f324:	28e2b03a 	or	r17,r5,r3
1000f328:	4010d07a 	srli	r8,r8,1
1000f32c:	2462b03a 	or	r17,r4,r17
1000f330:	003f7106 	br	1000f0f8 <__alt_data_end+0xf800f0f8>
1000f334:	4088b03a 	or	r4,r8,r2
1000f338:	20014526 	beq	r4,zero,1000f850 <__adddf3+0x7d4>
1000f33c:	01000434 	movhi	r4,16
1000f340:	42000234 	orhi	r8,r8,8
1000f344:	213fffc4 	addi	r4,r4,-1
1000f348:	4110703a 	and	r8,r8,r4
1000f34c:	003f8206 	br	1000f158 <__alt_data_end+0xf800f158>
1000f350:	18ffffc4 	addi	r3,r3,-1
1000f354:	1800491e 	bne	r3,zero,1000f47c <__adddf3+0x400>
1000f358:	898bc83a 	sub	r5,r17,r6
1000f35c:	8963803a 	cmpltu	r17,r17,r5
1000f360:	4251c83a 	sub	r8,r8,r9
1000f364:	4451c83a 	sub	r8,r8,r17
1000f368:	2823883a 	mov	r17,r5
1000f36c:	003f9f06 	br	1000f1ec <__alt_data_end+0xf800f1ec>
1000f370:	4984b03a 	or	r2,r9,r6
1000f374:	103f6026 	beq	r2,zero,1000f0f8 <__alt_data_end+0xf800f0f8>
1000f378:	213fffc4 	addi	r4,r4,-1
1000f37c:	2000931e 	bne	r4,zero,1000f5cc <__adddf3+0x550>
1000f380:	898d883a 	add	r6,r17,r6
1000f384:	3463803a 	cmpltu	r17,r6,r17
1000f388:	4251883a 	add	r8,r8,r9
1000f38c:	8a11883a 	add	r8,r17,r8
1000f390:	3023883a 	mov	r17,r6
1000f394:	003fd806 	br	1000f2f8 <__alt_data_end+0xf800f2f8>
1000f398:	1800541e 	bne	r3,zero,1000f4ec <__adddf3+0x470>
1000f39c:	80800044 	addi	r2,r16,1
1000f3a0:	1081ffcc 	andi	r2,r2,2047
1000f3a4:	00c00044 	movi	r3,1
1000f3a8:	1880a00e 	bge	r3,r2,1000f62c <__adddf3+0x5b0>
1000f3ac:	8989c83a 	sub	r4,r17,r6
1000f3b0:	8905803a 	cmpltu	r2,r17,r4
1000f3b4:	4267c83a 	sub	r19,r8,r9
1000f3b8:	98a7c83a 	sub	r19,r19,r2
1000f3bc:	9880202c 	andhi	r2,r19,128
1000f3c0:	10006326 	beq	r2,zero,1000f550 <__adddf3+0x4d4>
1000f3c4:	3463c83a 	sub	r17,r6,r17
1000f3c8:	4a07c83a 	sub	r3,r9,r8
1000f3cc:	344d803a 	cmpltu	r6,r6,r17
1000f3d0:	19a7c83a 	sub	r19,r3,r6
1000f3d4:	3825883a 	mov	r18,r7
1000f3d8:	983f8a1e 	bne	r19,zero,1000f204 <__alt_data_end+0xf800f204>
1000f3dc:	8809883a 	mov	r4,r17
1000f3e0:	00118bc0 	call	100118bc <__clzsi2>
1000f3e4:	10800804 	addi	r2,r2,32
1000f3e8:	10fffe04 	addi	r3,r2,-8
1000f3ec:	010007c4 	movi	r4,31
1000f3f0:	20ff890e 	bge	r4,r3,1000f218 <__alt_data_end+0xf800f218>
1000f3f4:	10bff604 	addi	r2,r2,-40
1000f3f8:	8884983a 	sll	r2,r17,r2
1000f3fc:	0023883a 	mov	r17,zero
1000f400:	1c3f8c0e 	bge	r3,r16,1000f234 <__alt_data_end+0xf800f234>
1000f404:	023fe034 	movhi	r8,65408
1000f408:	423fffc4 	addi	r8,r8,-1
1000f40c:	80e1c83a 	sub	r16,r16,r3
1000f410:	1210703a 	and	r8,r2,r8
1000f414:	003f3806 	br	1000f0f8 <__alt_data_end+0xf800f0f8>
1000f418:	9007883a 	mov	r3,r18
1000f41c:	0011883a 	mov	r8,zero
1000f420:	0005883a 	mov	r2,zero
1000f424:	003f4c06 	br	1000f158 <__alt_data_end+0xf800f158>
1000f428:	498cb03a 	or	r6,r9,r6
1000f42c:	300cc03a 	cmpne	r6,r6,zero
1000f430:	0007883a 	mov	r3,zero
1000f434:	003f6806 	br	1000f1d8 <__alt_data_end+0xf800f1d8>
1000f438:	20009c1e 	bne	r4,zero,1000f6ac <__adddf3+0x630>
1000f43c:	80800044 	addi	r2,r16,1
1000f440:	1141ffcc 	andi	r5,r2,2047
1000f444:	01000044 	movi	r4,1
1000f448:	2140670e 	bge	r4,r5,1000f5e8 <__adddf3+0x56c>
1000f44c:	0101ffc4 	movi	r4,2047
1000f450:	11007f26 	beq	r2,r4,1000f650 <__adddf3+0x5d4>
1000f454:	898d883a 	add	r6,r17,r6
1000f458:	4247883a 	add	r3,r8,r9
1000f45c:	3451803a 	cmpltu	r8,r6,r17
1000f460:	40d1883a 	add	r8,r8,r3
1000f464:	402297fa 	slli	r17,r8,31
1000f468:	300cd07a 	srli	r6,r6,1
1000f46c:	4010d07a 	srli	r8,r8,1
1000f470:	1021883a 	mov	r16,r2
1000f474:	89a2b03a 	or	r17,r17,r6
1000f478:	003f1f06 	br	1000f0f8 <__alt_data_end+0xf800f0f8>
1000f47c:	0081ffc4 	movi	r2,2047
1000f480:	80bf481e 	bne	r16,r2,1000f1a4 <__alt_data_end+0xf800f1a4>
1000f484:	003f1c06 	br	1000f0f8 <__alt_data_end+0xf800f0f8>
1000f488:	843ff844 	addi	r16,r16,-31
1000f48c:	01000804 	movi	r4,32
1000f490:	1406d83a 	srl	r3,r2,r16
1000f494:	41005026 	beq	r8,r4,1000f5d8 <__adddf3+0x55c>
1000f498:	01001004 	movi	r4,64
1000f49c:	2211c83a 	sub	r8,r4,r8
1000f4a0:	1204983a 	sll	r2,r2,r8
1000f4a4:	88a2b03a 	or	r17,r17,r2
1000f4a8:	8822c03a 	cmpne	r17,r17,zero
1000f4ac:	1c62b03a 	or	r17,r3,r17
1000f4b0:	0011883a 	mov	r8,zero
1000f4b4:	0021883a 	mov	r16,zero
1000f4b8:	003f7106 	br	1000f280 <__alt_data_end+0xf800f280>
1000f4bc:	193ff804 	addi	r4,r3,-32
1000f4c0:	00800804 	movi	r2,32
1000f4c4:	4908d83a 	srl	r4,r9,r4
1000f4c8:	18804526 	beq	r3,r2,1000f5e0 <__adddf3+0x564>
1000f4cc:	00801004 	movi	r2,64
1000f4d0:	10c5c83a 	sub	r2,r2,r3
1000f4d4:	4886983a 	sll	r3,r9,r2
1000f4d8:	198cb03a 	or	r6,r3,r6
1000f4dc:	300cc03a 	cmpne	r6,r6,zero
1000f4e0:	218cb03a 	or	r6,r4,r6
1000f4e4:	0007883a 	mov	r3,zero
1000f4e8:	003f3b06 	br	1000f1d8 <__alt_data_end+0xf800f1d8>
1000f4ec:	80002a26 	beq	r16,zero,1000f598 <__adddf3+0x51c>
1000f4f0:	0101ffc4 	movi	r4,2047
1000f4f4:	11006826 	beq	r2,r4,1000f698 <__adddf3+0x61c>
1000f4f8:	00c7c83a 	sub	r3,zero,r3
1000f4fc:	42002034 	orhi	r8,r8,128
1000f500:	01000e04 	movi	r4,56
1000f504:	20c07c16 	blt	r4,r3,1000f6f8 <__adddf3+0x67c>
1000f508:	010007c4 	movi	r4,31
1000f50c:	20c0da16 	blt	r4,r3,1000f878 <__adddf3+0x7fc>
1000f510:	01000804 	movi	r4,32
1000f514:	20c9c83a 	sub	r4,r4,r3
1000f518:	4114983a 	sll	r10,r8,r4
1000f51c:	88cad83a 	srl	r5,r17,r3
1000f520:	8908983a 	sll	r4,r17,r4
1000f524:	40c6d83a 	srl	r3,r8,r3
1000f528:	5162b03a 	or	r17,r10,r5
1000f52c:	2008c03a 	cmpne	r4,r4,zero
1000f530:	8922b03a 	or	r17,r17,r4
1000f534:	3463c83a 	sub	r17,r6,r17
1000f538:	48c7c83a 	sub	r3,r9,r3
1000f53c:	344d803a 	cmpltu	r6,r6,r17
1000f540:	1991c83a 	sub	r8,r3,r6
1000f544:	1021883a 	mov	r16,r2
1000f548:	3825883a 	mov	r18,r7
1000f54c:	003f2706 	br	1000f1ec <__alt_data_end+0xf800f1ec>
1000f550:	24d0b03a 	or	r8,r4,r19
1000f554:	40001b1e 	bne	r8,zero,1000f5c4 <__adddf3+0x548>
1000f558:	0005883a 	mov	r2,zero
1000f55c:	0007883a 	mov	r3,zero
1000f560:	0021883a 	mov	r16,zero
1000f564:	003f4d06 	br	1000f29c <__alt_data_end+0xf800f29c>
1000f568:	008007c4 	movi	r2,31
1000f56c:	11003c16 	blt	r2,r4,1000f660 <__adddf3+0x5e4>
1000f570:	00800804 	movi	r2,32
1000f574:	1105c83a 	sub	r2,r2,r4
1000f578:	488e983a 	sll	r7,r9,r2
1000f57c:	310ad83a 	srl	r5,r6,r4
1000f580:	3084983a 	sll	r2,r6,r2
1000f584:	4912d83a 	srl	r9,r9,r4
1000f588:	394ab03a 	or	r5,r7,r5
1000f58c:	1004c03a 	cmpne	r2,r2,zero
1000f590:	288ab03a 	or	r5,r5,r2
1000f594:	003f5306 	br	1000f2e4 <__alt_data_end+0xf800f2e4>
1000f598:	4448b03a 	or	r4,r8,r17
1000f59c:	20003e26 	beq	r4,zero,1000f698 <__adddf3+0x61c>
1000f5a0:	00c6303a 	nor	r3,zero,r3
1000f5a4:	18003a1e 	bne	r3,zero,1000f690 <__adddf3+0x614>
1000f5a8:	3463c83a 	sub	r17,r6,r17
1000f5ac:	4a07c83a 	sub	r3,r9,r8
1000f5b0:	344d803a 	cmpltu	r6,r6,r17
1000f5b4:	1991c83a 	sub	r8,r3,r6
1000f5b8:	1021883a 	mov	r16,r2
1000f5bc:	3825883a 	mov	r18,r7
1000f5c0:	003f0a06 	br	1000f1ec <__alt_data_end+0xf800f1ec>
1000f5c4:	2023883a 	mov	r17,r4
1000f5c8:	003f0d06 	br	1000f200 <__alt_data_end+0xf800f200>
1000f5cc:	0081ffc4 	movi	r2,2047
1000f5d0:	80bf3f1e 	bne	r16,r2,1000f2d0 <__alt_data_end+0xf800f2d0>
1000f5d4:	003ec806 	br	1000f0f8 <__alt_data_end+0xf800f0f8>
1000f5d8:	0005883a 	mov	r2,zero
1000f5dc:	003fb106 	br	1000f4a4 <__alt_data_end+0xf800f4a4>
1000f5e0:	0007883a 	mov	r3,zero
1000f5e4:	003fbc06 	br	1000f4d8 <__alt_data_end+0xf800f4d8>
1000f5e8:	4444b03a 	or	r2,r8,r17
1000f5ec:	8000871e 	bne	r16,zero,1000f80c <__adddf3+0x790>
1000f5f0:	1000ba26 	beq	r2,zero,1000f8dc <__adddf3+0x860>
1000f5f4:	4984b03a 	or	r2,r9,r6
1000f5f8:	103ebf26 	beq	r2,zero,1000f0f8 <__alt_data_end+0xf800f0f8>
1000f5fc:	8985883a 	add	r2,r17,r6
1000f600:	4247883a 	add	r3,r8,r9
1000f604:	1451803a 	cmpltu	r8,r2,r17
1000f608:	40d1883a 	add	r8,r8,r3
1000f60c:	40c0202c 	andhi	r3,r8,128
1000f610:	1023883a 	mov	r17,r2
1000f614:	183f1a26 	beq	r3,zero,1000f280 <__alt_data_end+0xf800f280>
1000f618:	00bfe034 	movhi	r2,65408
1000f61c:	10bfffc4 	addi	r2,r2,-1
1000f620:	2021883a 	mov	r16,r4
1000f624:	4090703a 	and	r8,r8,r2
1000f628:	003eb306 	br	1000f0f8 <__alt_data_end+0xf800f0f8>
1000f62c:	4444b03a 	or	r2,r8,r17
1000f630:	8000291e 	bne	r16,zero,1000f6d8 <__adddf3+0x65c>
1000f634:	10004b1e 	bne	r2,zero,1000f764 <__adddf3+0x6e8>
1000f638:	4990b03a 	or	r8,r9,r6
1000f63c:	40008b26 	beq	r8,zero,1000f86c <__adddf3+0x7f0>
1000f640:	4811883a 	mov	r8,r9
1000f644:	3023883a 	mov	r17,r6
1000f648:	3825883a 	mov	r18,r7
1000f64c:	003eaa06 	br	1000f0f8 <__alt_data_end+0xf800f0f8>
1000f650:	1021883a 	mov	r16,r2
1000f654:	0011883a 	mov	r8,zero
1000f658:	0005883a 	mov	r2,zero
1000f65c:	003f0f06 	br	1000f29c <__alt_data_end+0xf800f29c>
1000f660:	217ff804 	addi	r5,r4,-32
1000f664:	00800804 	movi	r2,32
1000f668:	494ad83a 	srl	r5,r9,r5
1000f66c:	20807d26 	beq	r4,r2,1000f864 <__adddf3+0x7e8>
1000f670:	00801004 	movi	r2,64
1000f674:	1109c83a 	sub	r4,r2,r4
1000f678:	4912983a 	sll	r9,r9,r4
1000f67c:	498cb03a 	or	r6,r9,r6
1000f680:	300cc03a 	cmpne	r6,r6,zero
1000f684:	298ab03a 	or	r5,r5,r6
1000f688:	0013883a 	mov	r9,zero
1000f68c:	003f1506 	br	1000f2e4 <__alt_data_end+0xf800f2e4>
1000f690:	0101ffc4 	movi	r4,2047
1000f694:	113f9a1e 	bne	r2,r4,1000f500 <__alt_data_end+0xf800f500>
1000f698:	4811883a 	mov	r8,r9
1000f69c:	3023883a 	mov	r17,r6
1000f6a0:	1021883a 	mov	r16,r2
1000f6a4:	3825883a 	mov	r18,r7
1000f6a8:	003e9306 	br	1000f0f8 <__alt_data_end+0xf800f0f8>
1000f6ac:	8000161e 	bne	r16,zero,1000f708 <__adddf3+0x68c>
1000f6b0:	444ab03a 	or	r5,r8,r17
1000f6b4:	28005126 	beq	r5,zero,1000f7fc <__adddf3+0x780>
1000f6b8:	0108303a 	nor	r4,zero,r4
1000f6bc:	20004d1e 	bne	r4,zero,1000f7f4 <__adddf3+0x778>
1000f6c0:	89a3883a 	add	r17,r17,r6
1000f6c4:	4253883a 	add	r9,r8,r9
1000f6c8:	898d803a 	cmpltu	r6,r17,r6
1000f6cc:	3251883a 	add	r8,r6,r9
1000f6d0:	1021883a 	mov	r16,r2
1000f6d4:	003f0806 	br	1000f2f8 <__alt_data_end+0xf800f2f8>
1000f6d8:	1000301e 	bne	r2,zero,1000f79c <__adddf3+0x720>
1000f6dc:	4984b03a 	or	r2,r9,r6
1000f6e0:	10007126 	beq	r2,zero,1000f8a8 <__adddf3+0x82c>
1000f6e4:	4811883a 	mov	r8,r9
1000f6e8:	3023883a 	mov	r17,r6
1000f6ec:	3825883a 	mov	r18,r7
1000f6f0:	0401ffc4 	movi	r16,2047
1000f6f4:	003e8006 	br	1000f0f8 <__alt_data_end+0xf800f0f8>
1000f6f8:	4462b03a 	or	r17,r8,r17
1000f6fc:	8822c03a 	cmpne	r17,r17,zero
1000f700:	0007883a 	mov	r3,zero
1000f704:	003f8b06 	br	1000f534 <__alt_data_end+0xf800f534>
1000f708:	0141ffc4 	movi	r5,2047
1000f70c:	11403b26 	beq	r2,r5,1000f7fc <__adddf3+0x780>
1000f710:	0109c83a 	sub	r4,zero,r4
1000f714:	42002034 	orhi	r8,r8,128
1000f718:	01400e04 	movi	r5,56
1000f71c:	29006716 	blt	r5,r4,1000f8bc <__adddf3+0x840>
1000f720:	014007c4 	movi	r5,31
1000f724:	29007016 	blt	r5,r4,1000f8e8 <__adddf3+0x86c>
1000f728:	01400804 	movi	r5,32
1000f72c:	290bc83a 	sub	r5,r5,r4
1000f730:	4154983a 	sll	r10,r8,r5
1000f734:	890ed83a 	srl	r7,r17,r4
1000f738:	894a983a 	sll	r5,r17,r5
1000f73c:	4108d83a 	srl	r4,r8,r4
1000f740:	51e2b03a 	or	r17,r10,r7
1000f744:	280ac03a 	cmpne	r5,r5,zero
1000f748:	8962b03a 	or	r17,r17,r5
1000f74c:	89a3883a 	add	r17,r17,r6
1000f750:	2253883a 	add	r9,r4,r9
1000f754:	898d803a 	cmpltu	r6,r17,r6
1000f758:	3251883a 	add	r8,r6,r9
1000f75c:	1021883a 	mov	r16,r2
1000f760:	003ee506 	br	1000f2f8 <__alt_data_end+0xf800f2f8>
1000f764:	4984b03a 	or	r2,r9,r6
1000f768:	103e6326 	beq	r2,zero,1000f0f8 <__alt_data_end+0xf800f0f8>
1000f76c:	8987c83a 	sub	r3,r17,r6
1000f770:	88c9803a 	cmpltu	r4,r17,r3
1000f774:	4245c83a 	sub	r2,r8,r9
1000f778:	1105c83a 	sub	r2,r2,r4
1000f77c:	1100202c 	andhi	r4,r2,128
1000f780:	203ebb26 	beq	r4,zero,1000f270 <__alt_data_end+0xf800f270>
1000f784:	3463c83a 	sub	r17,r6,r17
1000f788:	4a07c83a 	sub	r3,r9,r8
1000f78c:	344d803a 	cmpltu	r6,r6,r17
1000f790:	1991c83a 	sub	r8,r3,r6
1000f794:	3825883a 	mov	r18,r7
1000f798:	003e5706 	br	1000f0f8 <__alt_data_end+0xf800f0f8>
1000f79c:	4984b03a 	or	r2,r9,r6
1000f7a0:	10002e26 	beq	r2,zero,1000f85c <__adddf3+0x7e0>
1000f7a4:	4004d0fa 	srli	r2,r8,3
1000f7a8:	8822d0fa 	srli	r17,r17,3
1000f7ac:	4010977a 	slli	r8,r8,29
1000f7b0:	10c0022c 	andhi	r3,r2,8
1000f7b4:	4462b03a 	or	r17,r8,r17
1000f7b8:	18000826 	beq	r3,zero,1000f7dc <__adddf3+0x760>
1000f7bc:	4808d0fa 	srli	r4,r9,3
1000f7c0:	20c0022c 	andhi	r3,r4,8
1000f7c4:	1800051e 	bne	r3,zero,1000f7dc <__adddf3+0x760>
1000f7c8:	300cd0fa 	srli	r6,r6,3
1000f7cc:	4806977a 	slli	r3,r9,29
1000f7d0:	2005883a 	mov	r2,r4
1000f7d4:	3825883a 	mov	r18,r7
1000f7d8:	19a2b03a 	or	r17,r3,r6
1000f7dc:	8810d77a 	srli	r8,r17,29
1000f7e0:	100490fa 	slli	r2,r2,3
1000f7e4:	882290fa 	slli	r17,r17,3
1000f7e8:	0401ffc4 	movi	r16,2047
1000f7ec:	4090b03a 	or	r8,r8,r2
1000f7f0:	003e4106 	br	1000f0f8 <__alt_data_end+0xf800f0f8>
1000f7f4:	0141ffc4 	movi	r5,2047
1000f7f8:	117fc71e 	bne	r2,r5,1000f718 <__alt_data_end+0xf800f718>
1000f7fc:	4811883a 	mov	r8,r9
1000f800:	3023883a 	mov	r17,r6
1000f804:	1021883a 	mov	r16,r2
1000f808:	003e3b06 	br	1000f0f8 <__alt_data_end+0xf800f0f8>
1000f80c:	10002f26 	beq	r2,zero,1000f8cc <__adddf3+0x850>
1000f810:	4984b03a 	or	r2,r9,r6
1000f814:	10001126 	beq	r2,zero,1000f85c <__adddf3+0x7e0>
1000f818:	4004d0fa 	srli	r2,r8,3
1000f81c:	8822d0fa 	srli	r17,r17,3
1000f820:	4010977a 	slli	r8,r8,29
1000f824:	10c0022c 	andhi	r3,r2,8
1000f828:	4462b03a 	or	r17,r8,r17
1000f82c:	183feb26 	beq	r3,zero,1000f7dc <__alt_data_end+0xf800f7dc>
1000f830:	4808d0fa 	srli	r4,r9,3
1000f834:	20c0022c 	andhi	r3,r4,8
1000f838:	183fe81e 	bne	r3,zero,1000f7dc <__alt_data_end+0xf800f7dc>
1000f83c:	300cd0fa 	srli	r6,r6,3
1000f840:	4806977a 	slli	r3,r9,29
1000f844:	2005883a 	mov	r2,r4
1000f848:	19a2b03a 	or	r17,r3,r6
1000f84c:	003fe306 	br	1000f7dc <__alt_data_end+0xf800f7dc>
1000f850:	0011883a 	mov	r8,zero
1000f854:	0005883a 	mov	r2,zero
1000f858:	003e3f06 	br	1000f158 <__alt_data_end+0xf800f158>
1000f85c:	0401ffc4 	movi	r16,2047
1000f860:	003e2506 	br	1000f0f8 <__alt_data_end+0xf800f0f8>
1000f864:	0013883a 	mov	r9,zero
1000f868:	003f8406 	br	1000f67c <__alt_data_end+0xf800f67c>
1000f86c:	0005883a 	mov	r2,zero
1000f870:	0007883a 	mov	r3,zero
1000f874:	003e8906 	br	1000f29c <__alt_data_end+0xf800f29c>
1000f878:	197ff804 	addi	r5,r3,-32
1000f87c:	01000804 	movi	r4,32
1000f880:	414ad83a 	srl	r5,r8,r5
1000f884:	19002426 	beq	r3,r4,1000f918 <__adddf3+0x89c>
1000f888:	01001004 	movi	r4,64
1000f88c:	20c7c83a 	sub	r3,r4,r3
1000f890:	40c6983a 	sll	r3,r8,r3
1000f894:	1c46b03a 	or	r3,r3,r17
1000f898:	1806c03a 	cmpne	r3,r3,zero
1000f89c:	28e2b03a 	or	r17,r5,r3
1000f8a0:	0007883a 	mov	r3,zero
1000f8a4:	003f2306 	br	1000f534 <__alt_data_end+0xf800f534>
1000f8a8:	0007883a 	mov	r3,zero
1000f8ac:	5811883a 	mov	r8,r11
1000f8b0:	00bfffc4 	movi	r2,-1
1000f8b4:	0401ffc4 	movi	r16,2047
1000f8b8:	003e7806 	br	1000f29c <__alt_data_end+0xf800f29c>
1000f8bc:	4462b03a 	or	r17,r8,r17
1000f8c0:	8822c03a 	cmpne	r17,r17,zero
1000f8c4:	0009883a 	mov	r4,zero
1000f8c8:	003fa006 	br	1000f74c <__alt_data_end+0xf800f74c>
1000f8cc:	4811883a 	mov	r8,r9
1000f8d0:	3023883a 	mov	r17,r6
1000f8d4:	0401ffc4 	movi	r16,2047
1000f8d8:	003e0706 	br	1000f0f8 <__alt_data_end+0xf800f0f8>
1000f8dc:	4811883a 	mov	r8,r9
1000f8e0:	3023883a 	mov	r17,r6
1000f8e4:	003e0406 	br	1000f0f8 <__alt_data_end+0xf800f0f8>
1000f8e8:	21fff804 	addi	r7,r4,-32
1000f8ec:	01400804 	movi	r5,32
1000f8f0:	41ced83a 	srl	r7,r8,r7
1000f8f4:	21400a26 	beq	r4,r5,1000f920 <__adddf3+0x8a4>
1000f8f8:	01401004 	movi	r5,64
1000f8fc:	2909c83a 	sub	r4,r5,r4
1000f900:	4108983a 	sll	r4,r8,r4
1000f904:	2448b03a 	or	r4,r4,r17
1000f908:	2008c03a 	cmpne	r4,r4,zero
1000f90c:	3922b03a 	or	r17,r7,r4
1000f910:	0009883a 	mov	r4,zero
1000f914:	003f8d06 	br	1000f74c <__alt_data_end+0xf800f74c>
1000f918:	0007883a 	mov	r3,zero
1000f91c:	003fdd06 	br	1000f894 <__alt_data_end+0xf800f894>
1000f920:	0009883a 	mov	r4,zero
1000f924:	003ff706 	br	1000f904 <__alt_data_end+0xf800f904>

1000f928 <__divdf3>:
1000f928:	defff004 	addi	sp,sp,-64
1000f92c:	dc800815 	stw	r18,32(sp)
1000f930:	2824d53a 	srli	r18,r5,20
1000f934:	dd800c15 	stw	r22,48(sp)
1000f938:	282cd7fa 	srli	r22,r5,31
1000f93c:	dc000615 	stw	r16,24(sp)
1000f940:	04000434 	movhi	r16,16
1000f944:	843fffc4 	addi	r16,r16,-1
1000f948:	dfc00f15 	stw	ra,60(sp)
1000f94c:	df000e15 	stw	fp,56(sp)
1000f950:	ddc00d15 	stw	r23,52(sp)
1000f954:	dd400b15 	stw	r21,44(sp)
1000f958:	dd000a15 	stw	r20,40(sp)
1000f95c:	dcc00915 	stw	r19,36(sp)
1000f960:	dc400715 	stw	r17,28(sp)
1000f964:	9481ffcc 	andi	r18,r18,2047
1000f968:	2c20703a 	and	r16,r5,r16
1000f96c:	b2003fcc 	andi	r8,r22,255
1000f970:	90006126 	beq	r18,zero,1000faf8 <__divdf3+0x1d0>
1000f974:	0081ffc4 	movi	r2,2047
1000f978:	202b883a 	mov	r21,r4
1000f97c:	90803726 	beq	r18,r2,1000fa5c <__divdf3+0x134>
1000f980:	80800434 	orhi	r2,r16,16
1000f984:	100490fa 	slli	r2,r2,3
1000f988:	2020d77a 	srli	r16,r4,29
1000f98c:	202a90fa 	slli	r21,r4,3
1000f990:	94bf0044 	addi	r18,r18,-1023
1000f994:	80a0b03a 	or	r16,r16,r2
1000f998:	0013883a 	mov	r9,zero
1000f99c:	000b883a 	mov	r5,zero
1000f9a0:	3806d53a 	srli	r3,r7,20
1000f9a4:	382ed7fa 	srli	r23,r7,31
1000f9a8:	04400434 	movhi	r17,16
1000f9ac:	8c7fffc4 	addi	r17,r17,-1
1000f9b0:	18c1ffcc 	andi	r3,r3,2047
1000f9b4:	3029883a 	mov	r20,r6
1000f9b8:	3c62703a 	and	r17,r7,r17
1000f9bc:	bf003fcc 	andi	fp,r23,255
1000f9c0:	18006e26 	beq	r3,zero,1000fb7c <__divdf3+0x254>
1000f9c4:	0081ffc4 	movi	r2,2047
1000f9c8:	18806626 	beq	r3,r2,1000fb64 <__divdf3+0x23c>
1000f9cc:	88800434 	orhi	r2,r17,16
1000f9d0:	100490fa 	slli	r2,r2,3
1000f9d4:	3022d77a 	srli	r17,r6,29
1000f9d8:	302890fa 	slli	r20,r6,3
1000f9dc:	18ff0044 	addi	r3,r3,-1023
1000f9e0:	88a2b03a 	or	r17,r17,r2
1000f9e4:	000f883a 	mov	r7,zero
1000f9e8:	b5e6f03a 	xor	r19,r22,r23
1000f9ec:	3a4cb03a 	or	r6,r7,r9
1000f9f0:	008003c4 	movi	r2,15
1000f9f4:	9809883a 	mov	r4,r19
1000f9f8:	90c7c83a 	sub	r3,r18,r3
1000f9fc:	9cc03fcc 	andi	r19,r19,255
1000fa00:	11809636 	bltu	r2,r6,1000fc5c <__divdf3+0x334>
1000fa04:	300c90ba 	slli	r6,r6,2
1000fa08:	00840074 	movhi	r2,4097
1000fa0c:	10be8704 	addi	r2,r2,-1508
1000fa10:	308d883a 	add	r6,r6,r2
1000fa14:	30800017 	ldw	r2,0(r6)
1000fa18:	1000683a 	jmp	r2
1000fa1c:	1000fc5c 	xori	zero,r2,1009
1000fa20:	1000fa94 	ori	zero,r2,1002
1000fa24:	1000fc4c 	andi	zero,r2,1009
1000fa28:	1000fa88 	cmpgei	zero,r2,1002
1000fa2c:	1000fc4c 	andi	zero,r2,1009
1000fa30:	1000fc20 	cmpeqi	zero,r2,1008
1000fa34:	1000fc4c 	andi	zero,r2,1009
1000fa38:	1000fa88 	cmpgei	zero,r2,1002
1000fa3c:	1000fa94 	ori	zero,r2,1002
1000fa40:	1000fa94 	ori	zero,r2,1002
1000fa44:	1000fc20 	cmpeqi	zero,r2,1008
1000fa48:	1000fa88 	cmpgei	zero,r2,1002
1000fa4c:	1000fa78 	rdprs	zero,r2,1001
1000fa50:	1000fa78 	rdprs	zero,r2,1001
1000fa54:	1000fa78 	rdprs	zero,r2,1001
1000fa58:	1000ffe4 	muli	zero,r2,1023
1000fa5c:	2404b03a 	or	r2,r4,r16
1000fa60:	10006c1e 	bne	r2,zero,1000fc14 <__divdf3+0x2ec>
1000fa64:	02400204 	movi	r9,8
1000fa68:	0021883a 	mov	r16,zero
1000fa6c:	002b883a 	mov	r21,zero
1000fa70:	01400084 	movi	r5,2
1000fa74:	003fca06 	br	1000f9a0 <__alt_data_end+0xf800f9a0>
1000fa78:	8023883a 	mov	r17,r16
1000fa7c:	a829883a 	mov	r20,r21
1000fa80:	4039883a 	mov	fp,r8
1000fa84:	280f883a 	mov	r7,r5
1000fa88:	00800084 	movi	r2,2
1000fa8c:	3881601e 	bne	r7,r2,10010010 <__divdf3+0x6e8>
1000fa90:	e027883a 	mov	r19,fp
1000fa94:	9900004c 	andi	r4,r19,1
1000fa98:	0081ffc4 	movi	r2,2047
1000fa9c:	0021883a 	mov	r16,zero
1000faa0:	002b883a 	mov	r21,zero
1000faa4:	1004953a 	slli	r2,r2,20
1000faa8:	20c03fcc 	andi	r3,r4,255
1000faac:	01400434 	movhi	r5,16
1000fab0:	297fffc4 	addi	r5,r5,-1
1000fab4:	180697fa 	slli	r3,r3,31
1000fab8:	8160703a 	and	r16,r16,r5
1000fabc:	80a0b03a 	or	r16,r16,r2
1000fac0:	80c6b03a 	or	r3,r16,r3
1000fac4:	a805883a 	mov	r2,r21
1000fac8:	dfc00f17 	ldw	ra,60(sp)
1000facc:	df000e17 	ldw	fp,56(sp)
1000fad0:	ddc00d17 	ldw	r23,52(sp)
1000fad4:	dd800c17 	ldw	r22,48(sp)
1000fad8:	dd400b17 	ldw	r21,44(sp)
1000fadc:	dd000a17 	ldw	r20,40(sp)
1000fae0:	dcc00917 	ldw	r19,36(sp)
1000fae4:	dc800817 	ldw	r18,32(sp)
1000fae8:	dc400717 	ldw	r17,28(sp)
1000faec:	dc000617 	ldw	r16,24(sp)
1000faf0:	dec01004 	addi	sp,sp,64
1000faf4:	f800283a 	ret
1000faf8:	2404b03a 	or	r2,r4,r16
1000fafc:	2023883a 	mov	r17,r4
1000fb00:	10003f26 	beq	r2,zero,1000fc00 <__divdf3+0x2d8>
1000fb04:	80015e26 	beq	r16,zero,10010080 <__divdf3+0x758>
1000fb08:	8009883a 	mov	r4,r16
1000fb0c:	d9800215 	stw	r6,8(sp)
1000fb10:	d9c00515 	stw	r7,20(sp)
1000fb14:	da000415 	stw	r8,16(sp)
1000fb18:	00118bc0 	call	100118bc <__clzsi2>
1000fb1c:	d9800217 	ldw	r6,8(sp)
1000fb20:	d9c00517 	ldw	r7,20(sp)
1000fb24:	da000417 	ldw	r8,16(sp)
1000fb28:	113ffd44 	addi	r4,r2,-11
1000fb2c:	00c00704 	movi	r3,28
1000fb30:	19014f16 	blt	r3,r4,10010070 <__divdf3+0x748>
1000fb34:	00c00744 	movi	r3,29
1000fb38:	157ffe04 	addi	r21,r2,-8
1000fb3c:	1907c83a 	sub	r3,r3,r4
1000fb40:	8560983a 	sll	r16,r16,r21
1000fb44:	88c6d83a 	srl	r3,r17,r3
1000fb48:	8d6a983a 	sll	r21,r17,r21
1000fb4c:	1c20b03a 	or	r16,r3,r16
1000fb50:	1080fcc4 	addi	r2,r2,1011
1000fb54:	00a5c83a 	sub	r18,zero,r2
1000fb58:	0013883a 	mov	r9,zero
1000fb5c:	000b883a 	mov	r5,zero
1000fb60:	003f8f06 	br	1000f9a0 <__alt_data_end+0xf800f9a0>
1000fb64:	3444b03a 	or	r2,r6,r17
1000fb68:	1000231e 	bne	r2,zero,1000fbf8 <__divdf3+0x2d0>
1000fb6c:	0023883a 	mov	r17,zero
1000fb70:	0029883a 	mov	r20,zero
1000fb74:	01c00084 	movi	r7,2
1000fb78:	003f9b06 	br	1000f9e8 <__alt_data_end+0xf800f9e8>
1000fb7c:	3444b03a 	or	r2,r6,r17
1000fb80:	10001926 	beq	r2,zero,1000fbe8 <__divdf3+0x2c0>
1000fb84:	88014b26 	beq	r17,zero,100100b4 <__divdf3+0x78c>
1000fb88:	8809883a 	mov	r4,r17
1000fb8c:	d9400115 	stw	r5,4(sp)
1000fb90:	d9800215 	stw	r6,8(sp)
1000fb94:	da000415 	stw	r8,16(sp)
1000fb98:	da400315 	stw	r9,12(sp)
1000fb9c:	00118bc0 	call	100118bc <__clzsi2>
1000fba0:	d9400117 	ldw	r5,4(sp)
1000fba4:	d9800217 	ldw	r6,8(sp)
1000fba8:	da000417 	ldw	r8,16(sp)
1000fbac:	da400317 	ldw	r9,12(sp)
1000fbb0:	113ffd44 	addi	r4,r2,-11
1000fbb4:	00c00704 	movi	r3,28
1000fbb8:	19013a16 	blt	r3,r4,100100a4 <__divdf3+0x77c>
1000fbbc:	00c00744 	movi	r3,29
1000fbc0:	153ffe04 	addi	r20,r2,-8
1000fbc4:	1907c83a 	sub	r3,r3,r4
1000fbc8:	8d22983a 	sll	r17,r17,r20
1000fbcc:	30c6d83a 	srl	r3,r6,r3
1000fbd0:	3528983a 	sll	r20,r6,r20
1000fbd4:	1c62b03a 	or	r17,r3,r17
1000fbd8:	1080fcc4 	addi	r2,r2,1011
1000fbdc:	0087c83a 	sub	r3,zero,r2
1000fbe0:	000f883a 	mov	r7,zero
1000fbe4:	003f8006 	br	1000f9e8 <__alt_data_end+0xf800f9e8>
1000fbe8:	0023883a 	mov	r17,zero
1000fbec:	0029883a 	mov	r20,zero
1000fbf0:	01c00044 	movi	r7,1
1000fbf4:	003f7c06 	br	1000f9e8 <__alt_data_end+0xf800f9e8>
1000fbf8:	01c000c4 	movi	r7,3
1000fbfc:	003f7a06 	br	1000f9e8 <__alt_data_end+0xf800f9e8>
1000fc00:	02400104 	movi	r9,4
1000fc04:	0021883a 	mov	r16,zero
1000fc08:	002b883a 	mov	r21,zero
1000fc0c:	01400044 	movi	r5,1
1000fc10:	003f6306 	br	1000f9a0 <__alt_data_end+0xf800f9a0>
1000fc14:	02400304 	movi	r9,12
1000fc18:	014000c4 	movi	r5,3
1000fc1c:	003f6006 	br	1000f9a0 <__alt_data_end+0xf800f9a0>
1000fc20:	04000434 	movhi	r16,16
1000fc24:	0009883a 	mov	r4,zero
1000fc28:	843fffc4 	addi	r16,r16,-1
1000fc2c:	057fffc4 	movi	r21,-1
1000fc30:	0081ffc4 	movi	r2,2047
1000fc34:	003f9b06 	br	1000faa4 <__alt_data_end+0xf800faa4>
1000fc38:	00c00044 	movi	r3,1
1000fc3c:	1887c83a 	sub	r3,r3,r2
1000fc40:	01000e04 	movi	r4,56
1000fc44:	20c1530e 	bge	r4,r3,10010194 <__divdf3+0x86c>
1000fc48:	9900004c 	andi	r4,r19,1
1000fc4c:	0005883a 	mov	r2,zero
1000fc50:	0021883a 	mov	r16,zero
1000fc54:	002b883a 	mov	r21,zero
1000fc58:	003f9206 	br	1000faa4 <__alt_data_end+0xf800faa4>
1000fc5c:	8c012e36 	bltu	r17,r16,10010118 <__divdf3+0x7f0>
1000fc60:	84412c26 	beq	r16,r17,10010114 <__divdf3+0x7ec>
1000fc64:	a82f883a 	mov	r23,r21
1000fc68:	18ffffc4 	addi	r3,r3,-1
1000fc6c:	002b883a 	mov	r21,zero
1000fc70:	a004d63a 	srli	r2,r20,24
1000fc74:	8822923a 	slli	r17,r17,8
1000fc78:	a028923a 	slli	r20,r20,8
1000fc7c:	8009883a 	mov	r4,r16
1000fc80:	88acb03a 	or	r22,r17,r2
1000fc84:	dd000015 	stw	r20,0(sp)
1000fc88:	b028d43a 	srli	r20,r22,16
1000fc8c:	d8c00215 	stw	r3,8(sp)
1000fc90:	b4bfffcc 	andi	r18,r22,65535
1000fc94:	a00b883a 	mov	r5,r20
1000fc98:	0004ad80 	call	10004ad8 <__udivsi3>
1000fc9c:	100b883a 	mov	r5,r2
1000fca0:	9009883a 	mov	r4,r18
1000fca4:	1023883a 	mov	r17,r2
1000fca8:	0004b940 	call	10004b94 <__mulsi3>
1000fcac:	8009883a 	mov	r4,r16
1000fcb0:	a00b883a 	mov	r5,r20
1000fcb4:	1039883a 	mov	fp,r2
1000fcb8:	0004b3c0 	call	10004b3c <__umodsi3>
1000fcbc:	1004943a 	slli	r2,r2,16
1000fcc0:	b808d43a 	srli	r4,r23,16
1000fcc4:	d8c00217 	ldw	r3,8(sp)
1000fcc8:	2084b03a 	or	r2,r4,r2
1000fccc:	1700062e 	bgeu	r2,fp,1000fce8 <__divdf3+0x3c0>
1000fcd0:	1585883a 	add	r2,r2,r22
1000fcd4:	893fffc4 	addi	r4,r17,-1
1000fcd8:	15811d36 	bltu	r2,r22,10010150 <__divdf3+0x828>
1000fcdc:	17011c2e 	bgeu	r2,fp,10010150 <__divdf3+0x828>
1000fce0:	8c7fff84 	addi	r17,r17,-2
1000fce4:	1585883a 	add	r2,r2,r22
1000fce8:	1739c83a 	sub	fp,r2,fp
1000fcec:	a00b883a 	mov	r5,r20
1000fcf0:	e009883a 	mov	r4,fp
1000fcf4:	d8c00215 	stw	r3,8(sp)
1000fcf8:	0004ad80 	call	10004ad8 <__udivsi3>
1000fcfc:	100b883a 	mov	r5,r2
1000fd00:	9009883a 	mov	r4,r18
1000fd04:	1021883a 	mov	r16,r2
1000fd08:	0004b940 	call	10004b94 <__mulsi3>
1000fd0c:	a00b883a 	mov	r5,r20
1000fd10:	e009883a 	mov	r4,fp
1000fd14:	d8800415 	stw	r2,16(sp)
1000fd18:	0004b3c0 	call	10004b3c <__umodsi3>
1000fd1c:	1004943a 	slli	r2,r2,16
1000fd20:	da000417 	ldw	r8,16(sp)
1000fd24:	bdffffcc 	andi	r23,r23,65535
1000fd28:	b884b03a 	or	r2,r23,r2
1000fd2c:	d8c00217 	ldw	r3,8(sp)
1000fd30:	1200062e 	bgeu	r2,r8,1000fd4c <__divdf3+0x424>
1000fd34:	1585883a 	add	r2,r2,r22
1000fd38:	813fffc4 	addi	r4,r16,-1
1000fd3c:	15810236 	bltu	r2,r22,10010148 <__divdf3+0x820>
1000fd40:	1201012e 	bgeu	r2,r8,10010148 <__divdf3+0x820>
1000fd44:	843fff84 	addi	r16,r16,-2
1000fd48:	1585883a 	add	r2,r2,r22
1000fd4c:	8822943a 	slli	r17,r17,16
1000fd50:	d9800017 	ldw	r6,0(sp)
1000fd54:	1211c83a 	sub	r8,r2,r8
1000fd58:	8c22b03a 	or	r17,r17,r16
1000fd5c:	373fffcc 	andi	fp,r6,65535
1000fd60:	8abfffcc 	andi	r10,r17,65535
1000fd64:	8820d43a 	srli	r16,r17,16
1000fd68:	5009883a 	mov	r4,r10
1000fd6c:	e00b883a 	mov	r5,fp
1000fd70:	302ed43a 	srli	r23,r6,16
1000fd74:	d8c00215 	stw	r3,8(sp)
1000fd78:	da000415 	stw	r8,16(sp)
1000fd7c:	da800115 	stw	r10,4(sp)
1000fd80:	0004b940 	call	10004b94 <__mulsi3>
1000fd84:	800b883a 	mov	r5,r16
1000fd88:	e009883a 	mov	r4,fp
1000fd8c:	d8800515 	stw	r2,20(sp)
1000fd90:	0004b940 	call	10004b94 <__mulsi3>
1000fd94:	8009883a 	mov	r4,r16
1000fd98:	b80b883a 	mov	r5,r23
1000fd9c:	d8800315 	stw	r2,12(sp)
1000fda0:	0004b940 	call	10004b94 <__mulsi3>
1000fda4:	da800117 	ldw	r10,4(sp)
1000fda8:	b80b883a 	mov	r5,r23
1000fdac:	1021883a 	mov	r16,r2
1000fdb0:	5009883a 	mov	r4,r10
1000fdb4:	0004b940 	call	10004b94 <__mulsi3>
1000fdb8:	d9c00517 	ldw	r7,20(sp)
1000fdbc:	da400317 	ldw	r9,12(sp)
1000fdc0:	d8c00217 	ldw	r3,8(sp)
1000fdc4:	3808d43a 	srli	r4,r7,16
1000fdc8:	1245883a 	add	r2,r2,r9
1000fdcc:	da000417 	ldw	r8,16(sp)
1000fdd0:	2085883a 	add	r2,r4,r2
1000fdd4:	1240022e 	bgeu	r2,r9,1000fde0 <__divdf3+0x4b8>
1000fdd8:	01000074 	movhi	r4,1
1000fddc:	8121883a 	add	r16,r16,r4
1000fde0:	1008d43a 	srli	r4,r2,16
1000fde4:	1004943a 	slli	r2,r2,16
1000fde8:	39ffffcc 	andi	r7,r7,65535
1000fdec:	2409883a 	add	r4,r4,r16
1000fdf0:	11c5883a 	add	r2,r2,r7
1000fdf4:	4100bb36 	bltu	r8,r4,100100e4 <__divdf3+0x7bc>
1000fdf8:	4100d726 	beq	r8,r4,10010158 <__divdf3+0x830>
1000fdfc:	4109c83a 	sub	r4,r8,r4
1000fe00:	a8a1c83a 	sub	r16,r21,r2
1000fe04:	ac2b803a 	cmpltu	r21,r21,r16
1000fe08:	256bc83a 	sub	r21,r4,r21
1000fe0c:	b540d926 	beq	r22,r21,10010174 <__divdf3+0x84c>
1000fe10:	a00b883a 	mov	r5,r20
1000fe14:	a809883a 	mov	r4,r21
1000fe18:	d8c00215 	stw	r3,8(sp)
1000fe1c:	0004ad80 	call	10004ad8 <__udivsi3>
1000fe20:	100b883a 	mov	r5,r2
1000fe24:	9009883a 	mov	r4,r18
1000fe28:	d8800515 	stw	r2,20(sp)
1000fe2c:	0004b940 	call	10004b94 <__mulsi3>
1000fe30:	a809883a 	mov	r4,r21
1000fe34:	a00b883a 	mov	r5,r20
1000fe38:	d8800415 	stw	r2,16(sp)
1000fe3c:	0004b3c0 	call	10004b3c <__umodsi3>
1000fe40:	1004943a 	slli	r2,r2,16
1000fe44:	8008d43a 	srli	r4,r16,16
1000fe48:	da000417 	ldw	r8,16(sp)
1000fe4c:	d8c00217 	ldw	r3,8(sp)
1000fe50:	2084b03a 	or	r2,r4,r2
1000fe54:	d9c00517 	ldw	r7,20(sp)
1000fe58:	1200062e 	bgeu	r2,r8,1000fe74 <__divdf3+0x54c>
1000fe5c:	1585883a 	add	r2,r2,r22
1000fe60:	393fffc4 	addi	r4,r7,-1
1000fe64:	1580c536 	bltu	r2,r22,1001017c <__divdf3+0x854>
1000fe68:	1200c42e 	bgeu	r2,r8,1001017c <__divdf3+0x854>
1000fe6c:	39ffff84 	addi	r7,r7,-2
1000fe70:	1585883a 	add	r2,r2,r22
1000fe74:	122bc83a 	sub	r21,r2,r8
1000fe78:	a00b883a 	mov	r5,r20
1000fe7c:	a809883a 	mov	r4,r21
1000fe80:	d8c00215 	stw	r3,8(sp)
1000fe84:	d9c00515 	stw	r7,20(sp)
1000fe88:	0004ad80 	call	10004ad8 <__udivsi3>
1000fe8c:	9009883a 	mov	r4,r18
1000fe90:	100b883a 	mov	r5,r2
1000fe94:	d8800415 	stw	r2,16(sp)
1000fe98:	0004b940 	call	10004b94 <__mulsi3>
1000fe9c:	a809883a 	mov	r4,r21
1000fea0:	a00b883a 	mov	r5,r20
1000fea4:	1025883a 	mov	r18,r2
1000fea8:	0004b3c0 	call	10004b3c <__umodsi3>
1000feac:	1004943a 	slli	r2,r2,16
1000feb0:	813fffcc 	andi	r4,r16,65535
1000feb4:	d8c00217 	ldw	r3,8(sp)
1000feb8:	20a0b03a 	or	r16,r4,r2
1000febc:	d9c00517 	ldw	r7,20(sp)
1000fec0:	da000417 	ldw	r8,16(sp)
1000fec4:	8480062e 	bgeu	r16,r18,1000fee0 <__divdf3+0x5b8>
1000fec8:	85a1883a 	add	r16,r16,r22
1000fecc:	40bfffc4 	addi	r2,r8,-1
1000fed0:	8580ac36 	bltu	r16,r22,10010184 <__divdf3+0x85c>
1000fed4:	8480ab2e 	bgeu	r16,r18,10010184 <__divdf3+0x85c>
1000fed8:	423fff84 	addi	r8,r8,-2
1000fedc:	85a1883a 	add	r16,r16,r22
1000fee0:	3804943a 	slli	r2,r7,16
1000fee4:	84a1c83a 	sub	r16,r16,r18
1000fee8:	e009883a 	mov	r4,fp
1000feec:	1228b03a 	or	r20,r2,r8
1000fef0:	a1ffffcc 	andi	r7,r20,65535
1000fef4:	a024d43a 	srli	r18,r20,16
1000fef8:	380b883a 	mov	r5,r7
1000fefc:	d8c00215 	stw	r3,8(sp)
1000ff00:	d9c00515 	stw	r7,20(sp)
1000ff04:	0004b940 	call	10004b94 <__mulsi3>
1000ff08:	900b883a 	mov	r5,r18
1000ff0c:	e009883a 	mov	r4,fp
1000ff10:	102b883a 	mov	r21,r2
1000ff14:	0004b940 	call	10004b94 <__mulsi3>
1000ff18:	900b883a 	mov	r5,r18
1000ff1c:	b809883a 	mov	r4,r23
1000ff20:	1039883a 	mov	fp,r2
1000ff24:	0004b940 	call	10004b94 <__mulsi3>
1000ff28:	d9c00517 	ldw	r7,20(sp)
1000ff2c:	b80b883a 	mov	r5,r23
1000ff30:	1025883a 	mov	r18,r2
1000ff34:	3809883a 	mov	r4,r7
1000ff38:	0004b940 	call	10004b94 <__mulsi3>
1000ff3c:	a808d43a 	srli	r4,r21,16
1000ff40:	1705883a 	add	r2,r2,fp
1000ff44:	d8c00217 	ldw	r3,8(sp)
1000ff48:	2085883a 	add	r2,r4,r2
1000ff4c:	1700022e 	bgeu	r2,fp,1000ff58 <__divdf3+0x630>
1000ff50:	01000074 	movhi	r4,1
1000ff54:	9125883a 	add	r18,r18,r4
1000ff58:	1008d43a 	srli	r4,r2,16
1000ff5c:	1004943a 	slli	r2,r2,16
1000ff60:	ad7fffcc 	andi	r21,r21,65535
1000ff64:	2489883a 	add	r4,r4,r18
1000ff68:	1545883a 	add	r2,r2,r21
1000ff6c:	81003836 	bltu	r16,r4,10010050 <__divdf3+0x728>
1000ff70:	81003626 	beq	r16,r4,1001004c <__divdf3+0x724>
1000ff74:	a5000054 	ori	r20,r20,1
1000ff78:	1880ffc4 	addi	r2,r3,1023
1000ff7c:	00bf2e0e 	bge	zero,r2,1000fc38 <__alt_data_end+0xf800fc38>
1000ff80:	a10001cc 	andi	r4,r20,7
1000ff84:	20000726 	beq	r4,zero,1000ffa4 <__divdf3+0x67c>
1000ff88:	a10003cc 	andi	r4,r20,15
1000ff8c:	01400104 	movi	r5,4
1000ff90:	21400426 	beq	r4,r5,1000ffa4 <__divdf3+0x67c>
1000ff94:	a149883a 	add	r4,r20,r5
1000ff98:	2529803a 	cmpltu	r20,r4,r20
1000ff9c:	8d23883a 	add	r17,r17,r20
1000ffa0:	2029883a 	mov	r20,r4
1000ffa4:	8900402c 	andhi	r4,r17,256
1000ffa8:	20000426 	beq	r4,zero,1000ffbc <__divdf3+0x694>
1000ffac:	18810004 	addi	r2,r3,1024
1000ffb0:	00ffc034 	movhi	r3,65280
1000ffb4:	18ffffc4 	addi	r3,r3,-1
1000ffb8:	88e2703a 	and	r17,r17,r3
1000ffbc:	00c1ff84 	movi	r3,2046
1000ffc0:	18beb416 	blt	r3,r2,1000fa94 <__alt_data_end+0xf800fa94>
1000ffc4:	a028d0fa 	srli	r20,r20,3
1000ffc8:	882a977a 	slli	r21,r17,29
1000ffcc:	8820927a 	slli	r16,r17,9
1000ffd0:	1081ffcc 	andi	r2,r2,2047
1000ffd4:	ad2ab03a 	or	r21,r21,r20
1000ffd8:	8020d33a 	srli	r16,r16,12
1000ffdc:	9900004c 	andi	r4,r19,1
1000ffe0:	003eb006 	br	1000faa4 <__alt_data_end+0xf800faa4>
1000ffe4:	8080022c 	andhi	r2,r16,8
1000ffe8:	10001226 	beq	r2,zero,10010034 <__divdf3+0x70c>
1000ffec:	8880022c 	andhi	r2,r17,8
1000fff0:	1000101e 	bne	r2,zero,10010034 <__divdf3+0x70c>
1000fff4:	00800434 	movhi	r2,16
1000fff8:	8c000234 	orhi	r16,r17,8
1000fffc:	10bfffc4 	addi	r2,r2,-1
10010000:	b809883a 	mov	r4,r23
10010004:	80a0703a 	and	r16,r16,r2
10010008:	a02b883a 	mov	r21,r20
1001000c:	003f0806 	br	1000fc30 <__alt_data_end+0xf800fc30>
10010010:	008000c4 	movi	r2,3
10010014:	3880b126 	beq	r7,r2,100102dc <__divdf3+0x9b4>
10010018:	00800044 	movi	r2,1
1001001c:	38805b1e 	bne	r7,r2,1001018c <__divdf3+0x864>
10010020:	e009883a 	mov	r4,fp
10010024:	0005883a 	mov	r2,zero
10010028:	0021883a 	mov	r16,zero
1001002c:	002b883a 	mov	r21,zero
10010030:	003e9c06 	br	1000faa4 <__alt_data_end+0xf800faa4>
10010034:	00800434 	movhi	r2,16
10010038:	84000234 	orhi	r16,r16,8
1001003c:	10bfffc4 	addi	r2,r2,-1
10010040:	b009883a 	mov	r4,r22
10010044:	80a0703a 	and	r16,r16,r2
10010048:	003ef906 	br	1000fc30 <__alt_data_end+0xf800fc30>
1001004c:	103fca26 	beq	r2,zero,1000ff78 <__alt_data_end+0xf800ff78>
10010050:	b421883a 	add	r16,r22,r16
10010054:	a17fffc4 	addi	r5,r20,-1
10010058:	8580422e 	bgeu	r16,r22,10010164 <__divdf3+0x83c>
1001005c:	2829883a 	mov	r20,r5
10010060:	813fc41e 	bne	r16,r4,1000ff74 <__alt_data_end+0xf800ff74>
10010064:	d9800017 	ldw	r6,0(sp)
10010068:	30bfc21e 	bne	r6,r2,1000ff74 <__alt_data_end+0xf800ff74>
1001006c:	003fc206 	br	1000ff78 <__alt_data_end+0xf800ff78>
10010070:	143ff604 	addi	r16,r2,-40
10010074:	8c20983a 	sll	r16,r17,r16
10010078:	002b883a 	mov	r21,zero
1001007c:	003eb406 	br	1000fb50 <__alt_data_end+0xf800fb50>
10010080:	d9800215 	stw	r6,8(sp)
10010084:	d9c00515 	stw	r7,20(sp)
10010088:	da000415 	stw	r8,16(sp)
1001008c:	00118bc0 	call	100118bc <__clzsi2>
10010090:	10800804 	addi	r2,r2,32
10010094:	da000417 	ldw	r8,16(sp)
10010098:	d9c00517 	ldw	r7,20(sp)
1001009c:	d9800217 	ldw	r6,8(sp)
100100a0:	003ea106 	br	1000fb28 <__alt_data_end+0xf800fb28>
100100a4:	147ff604 	addi	r17,r2,-40
100100a8:	3462983a 	sll	r17,r6,r17
100100ac:	0029883a 	mov	r20,zero
100100b0:	003ec906 	br	1000fbd8 <__alt_data_end+0xf800fbd8>
100100b4:	3009883a 	mov	r4,r6
100100b8:	d9400115 	stw	r5,4(sp)
100100bc:	d9800215 	stw	r6,8(sp)
100100c0:	da000415 	stw	r8,16(sp)
100100c4:	da400315 	stw	r9,12(sp)
100100c8:	00118bc0 	call	100118bc <__clzsi2>
100100cc:	10800804 	addi	r2,r2,32
100100d0:	da400317 	ldw	r9,12(sp)
100100d4:	da000417 	ldw	r8,16(sp)
100100d8:	d9800217 	ldw	r6,8(sp)
100100dc:	d9400117 	ldw	r5,4(sp)
100100e0:	003eb306 	br	1000fbb0 <__alt_data_end+0xf800fbb0>
100100e4:	d9800017 	ldw	r6,0(sp)
100100e8:	a9ab883a 	add	r21,r21,r6
100100ec:	a98b803a 	cmpltu	r5,r21,r6
100100f0:	2d8b883a 	add	r5,r5,r22
100100f4:	2a11883a 	add	r8,r5,r8
100100f8:	897fffc4 	addi	r5,r17,-1
100100fc:	b2000c2e 	bgeu	r22,r8,10010130 <__divdf3+0x808>
10010100:	41003f36 	bltu	r8,r4,10010200 <__divdf3+0x8d8>
10010104:	22006c26 	beq	r4,r8,100102b8 <__divdf3+0x990>
10010108:	4109c83a 	sub	r4,r8,r4
1001010c:	2823883a 	mov	r17,r5
10010110:	003f3b06 	br	1000fe00 <__alt_data_end+0xf800fe00>
10010114:	ad3ed336 	bltu	r21,r20,1000fc64 <__alt_data_end+0xf800fc64>
10010118:	a804d07a 	srli	r2,r21,1
1001011c:	802e97fa 	slli	r23,r16,31
10010120:	a82a97fa 	slli	r21,r21,31
10010124:	8020d07a 	srli	r16,r16,1
10010128:	b8aeb03a 	or	r23,r23,r2
1001012c:	003ed006 	br	1000fc70 <__alt_data_end+0xf800fc70>
10010130:	b23ff51e 	bne	r22,r8,10010108 <__alt_data_end+0xf8010108>
10010134:	d9800017 	ldw	r6,0(sp)
10010138:	a9bff12e 	bgeu	r21,r6,10010100 <__alt_data_end+0xf8010100>
1001013c:	b109c83a 	sub	r4,r22,r4
10010140:	2823883a 	mov	r17,r5
10010144:	003f2e06 	br	1000fe00 <__alt_data_end+0xf800fe00>
10010148:	2021883a 	mov	r16,r4
1001014c:	003eff06 	br	1000fd4c <__alt_data_end+0xf800fd4c>
10010150:	2023883a 	mov	r17,r4
10010154:	003ee406 	br	1000fce8 <__alt_data_end+0xf800fce8>
10010158:	a8bfe236 	bltu	r21,r2,100100e4 <__alt_data_end+0xf80100e4>
1001015c:	0009883a 	mov	r4,zero
10010160:	003f2706 	br	1000fe00 <__alt_data_end+0xf800fe00>
10010164:	81002d36 	bltu	r16,r4,1001021c <__divdf3+0x8f4>
10010168:	24005626 	beq	r4,r16,100102c4 <__divdf3+0x99c>
1001016c:	2829883a 	mov	r20,r5
10010170:	003f8006 	br	1000ff74 <__alt_data_end+0xf800ff74>
10010174:	053fffc4 	movi	r20,-1
10010178:	003f7f06 	br	1000ff78 <__alt_data_end+0xf800ff78>
1001017c:	200f883a 	mov	r7,r4
10010180:	003f3c06 	br	1000fe74 <__alt_data_end+0xf800fe74>
10010184:	1011883a 	mov	r8,r2
10010188:	003f5506 	br	1000fee0 <__alt_data_end+0xf800fee0>
1001018c:	e027883a 	mov	r19,fp
10010190:	003f7906 	br	1000ff78 <__alt_data_end+0xf800ff78>
10010194:	010007c4 	movi	r4,31
10010198:	20c02816 	blt	r4,r3,1001023c <__divdf3+0x914>
1001019c:	00800804 	movi	r2,32
100101a0:	10c5c83a 	sub	r2,r2,r3
100101a4:	888a983a 	sll	r5,r17,r2
100101a8:	a0c8d83a 	srl	r4,r20,r3
100101ac:	a084983a 	sll	r2,r20,r2
100101b0:	88e2d83a 	srl	r17,r17,r3
100101b4:	2906b03a 	or	r3,r5,r4
100101b8:	1004c03a 	cmpne	r2,r2,zero
100101bc:	1886b03a 	or	r3,r3,r2
100101c0:	188001cc 	andi	r2,r3,7
100101c4:	10000726 	beq	r2,zero,100101e4 <__divdf3+0x8bc>
100101c8:	188003cc 	andi	r2,r3,15
100101cc:	01000104 	movi	r4,4
100101d0:	11000426 	beq	r2,r4,100101e4 <__divdf3+0x8bc>
100101d4:	1805883a 	mov	r2,r3
100101d8:	10c00104 	addi	r3,r2,4
100101dc:	1885803a 	cmpltu	r2,r3,r2
100101e0:	88a3883a 	add	r17,r17,r2
100101e4:	8880202c 	andhi	r2,r17,128
100101e8:	10002926 	beq	r2,zero,10010290 <__divdf3+0x968>
100101ec:	9900004c 	andi	r4,r19,1
100101f0:	00800044 	movi	r2,1
100101f4:	0021883a 	mov	r16,zero
100101f8:	002b883a 	mov	r21,zero
100101fc:	003e2906 	br	1000faa4 <__alt_data_end+0xf800faa4>
10010200:	d9800017 	ldw	r6,0(sp)
10010204:	8c7fff84 	addi	r17,r17,-2
10010208:	a9ab883a 	add	r21,r21,r6
1001020c:	a98b803a 	cmpltu	r5,r21,r6
10010210:	2d8b883a 	add	r5,r5,r22
10010214:	2a11883a 	add	r8,r5,r8
10010218:	003ef806 	br	1000fdfc <__alt_data_end+0xf800fdfc>
1001021c:	d9800017 	ldw	r6,0(sp)
10010220:	318f883a 	add	r7,r6,r6
10010224:	398b803a 	cmpltu	r5,r7,r6
10010228:	2d8d883a 	add	r6,r5,r22
1001022c:	81a1883a 	add	r16,r16,r6
10010230:	a17fff84 	addi	r5,r20,-2
10010234:	d9c00015 	stw	r7,0(sp)
10010238:	003f8806 	br	1001005c <__alt_data_end+0xf801005c>
1001023c:	013ff844 	movi	r4,-31
10010240:	2085c83a 	sub	r2,r4,r2
10010244:	8888d83a 	srl	r4,r17,r2
10010248:	00800804 	movi	r2,32
1001024c:	18802126 	beq	r3,r2,100102d4 <__divdf3+0x9ac>
10010250:	04001004 	movi	r16,64
10010254:	80c7c83a 	sub	r3,r16,r3
10010258:	88e0983a 	sll	r16,r17,r3
1001025c:	8504b03a 	or	r2,r16,r20
10010260:	1004c03a 	cmpne	r2,r2,zero
10010264:	2084b03a 	or	r2,r4,r2
10010268:	144001cc 	andi	r17,r2,7
1001026c:	88000d1e 	bne	r17,zero,100102a4 <__divdf3+0x97c>
10010270:	0021883a 	mov	r16,zero
10010274:	102ad0fa 	srli	r21,r2,3
10010278:	9900004c 	andi	r4,r19,1
1001027c:	0005883a 	mov	r2,zero
10010280:	ac6ab03a 	or	r21,r21,r17
10010284:	003e0706 	br	1000faa4 <__alt_data_end+0xf800faa4>
10010288:	1007883a 	mov	r3,r2
1001028c:	0023883a 	mov	r17,zero
10010290:	8820927a 	slli	r16,r17,9
10010294:	1805883a 	mov	r2,r3
10010298:	8822977a 	slli	r17,r17,29
1001029c:	8020d33a 	srli	r16,r16,12
100102a0:	003ff406 	br	10010274 <__alt_data_end+0xf8010274>
100102a4:	10c003cc 	andi	r3,r2,15
100102a8:	01000104 	movi	r4,4
100102ac:	193ff626 	beq	r3,r4,10010288 <__alt_data_end+0xf8010288>
100102b0:	0023883a 	mov	r17,zero
100102b4:	003fc806 	br	100101d8 <__alt_data_end+0xf80101d8>
100102b8:	a8bfd136 	bltu	r21,r2,10010200 <__alt_data_end+0xf8010200>
100102bc:	2823883a 	mov	r17,r5
100102c0:	003fa606 	br	1001015c <__alt_data_end+0xf801015c>
100102c4:	d9800017 	ldw	r6,0(sp)
100102c8:	30bfd436 	bltu	r6,r2,1001021c <__alt_data_end+0xf801021c>
100102cc:	2829883a 	mov	r20,r5
100102d0:	003f6406 	br	10010064 <__alt_data_end+0xf8010064>
100102d4:	0021883a 	mov	r16,zero
100102d8:	003fe006 	br	1001025c <__alt_data_end+0xf801025c>
100102dc:	00800434 	movhi	r2,16
100102e0:	8c000234 	orhi	r16,r17,8
100102e4:	10bfffc4 	addi	r2,r2,-1
100102e8:	e009883a 	mov	r4,fp
100102ec:	80a0703a 	and	r16,r16,r2
100102f0:	a02b883a 	mov	r21,r20
100102f4:	003e4e06 	br	1000fc30 <__alt_data_end+0xf800fc30>

100102f8 <__eqdf2>:
100102f8:	2804d53a 	srli	r2,r5,20
100102fc:	3806d53a 	srli	r3,r7,20
10010300:	02000434 	movhi	r8,16
10010304:	423fffc4 	addi	r8,r8,-1
10010308:	1081ffcc 	andi	r2,r2,2047
1001030c:	0281ffc4 	movi	r10,2047
10010310:	2a12703a 	and	r9,r5,r8
10010314:	18c1ffcc 	andi	r3,r3,2047
10010318:	3a10703a 	and	r8,r7,r8
1001031c:	280ad7fa 	srli	r5,r5,31
10010320:	380ed7fa 	srli	r7,r7,31
10010324:	12801026 	beq	r2,r10,10010368 <__eqdf2+0x70>
10010328:	0281ffc4 	movi	r10,2047
1001032c:	1a800a26 	beq	r3,r10,10010358 <__eqdf2+0x60>
10010330:	10c00226 	beq	r2,r3,1001033c <__eqdf2+0x44>
10010334:	00800044 	movi	r2,1
10010338:	f800283a 	ret
1001033c:	4a3ffd1e 	bne	r9,r8,10010334 <__alt_data_end+0xf8010334>
10010340:	21bffc1e 	bne	r4,r6,10010334 <__alt_data_end+0xf8010334>
10010344:	29c00c26 	beq	r5,r7,10010378 <__eqdf2+0x80>
10010348:	103ffa1e 	bne	r2,zero,10010334 <__alt_data_end+0xf8010334>
1001034c:	2244b03a 	or	r2,r4,r9
10010350:	1004c03a 	cmpne	r2,r2,zero
10010354:	f800283a 	ret
10010358:	3214b03a 	or	r10,r6,r8
1001035c:	503ff426 	beq	r10,zero,10010330 <__alt_data_end+0xf8010330>
10010360:	00800044 	movi	r2,1
10010364:	f800283a 	ret
10010368:	2254b03a 	or	r10,r4,r9
1001036c:	503fee26 	beq	r10,zero,10010328 <__alt_data_end+0xf8010328>
10010370:	00800044 	movi	r2,1
10010374:	f800283a 	ret
10010378:	0005883a 	mov	r2,zero
1001037c:	f800283a 	ret

10010380 <__gedf2>:
10010380:	2804d53a 	srli	r2,r5,20
10010384:	3806d53a 	srli	r3,r7,20
10010388:	02000434 	movhi	r8,16
1001038c:	423fffc4 	addi	r8,r8,-1
10010390:	1081ffcc 	andi	r2,r2,2047
10010394:	0241ffc4 	movi	r9,2047
10010398:	2a14703a 	and	r10,r5,r8
1001039c:	18c1ffcc 	andi	r3,r3,2047
100103a0:	3a10703a 	and	r8,r7,r8
100103a4:	280ad7fa 	srli	r5,r5,31
100103a8:	380ed7fa 	srli	r7,r7,31
100103ac:	12401d26 	beq	r2,r9,10010424 <__gedf2+0xa4>
100103b0:	0241ffc4 	movi	r9,2047
100103b4:	1a401226 	beq	r3,r9,10010400 <__gedf2+0x80>
100103b8:	1000081e 	bne	r2,zero,100103dc <__gedf2+0x5c>
100103bc:	2296b03a 	or	r11,r4,r10
100103c0:	5813003a 	cmpeq	r9,r11,zero
100103c4:	1800091e 	bne	r3,zero,100103ec <__gedf2+0x6c>
100103c8:	3218b03a 	or	r12,r6,r8
100103cc:	6000071e 	bne	r12,zero,100103ec <__gedf2+0x6c>
100103d0:	0005883a 	mov	r2,zero
100103d4:	5800101e 	bne	r11,zero,10010418 <__gedf2+0x98>
100103d8:	f800283a 	ret
100103dc:	18000c1e 	bne	r3,zero,10010410 <__gedf2+0x90>
100103e0:	3212b03a 	or	r9,r6,r8
100103e4:	48000c26 	beq	r9,zero,10010418 <__gedf2+0x98>
100103e8:	0013883a 	mov	r9,zero
100103ec:	39c03fcc 	andi	r7,r7,255
100103f0:	48000826 	beq	r9,zero,10010414 <__gedf2+0x94>
100103f4:	38000926 	beq	r7,zero,1001041c <__gedf2+0x9c>
100103f8:	00800044 	movi	r2,1
100103fc:	f800283a 	ret
10010400:	3212b03a 	or	r9,r6,r8
10010404:	483fec26 	beq	r9,zero,100103b8 <__alt_data_end+0xf80103b8>
10010408:	00bfff84 	movi	r2,-2
1001040c:	f800283a 	ret
10010410:	39c03fcc 	andi	r7,r7,255
10010414:	29c00626 	beq	r5,r7,10010430 <__gedf2+0xb0>
10010418:	283ff726 	beq	r5,zero,100103f8 <__alt_data_end+0xf80103f8>
1001041c:	00bfffc4 	movi	r2,-1
10010420:	f800283a 	ret
10010424:	2292b03a 	or	r9,r4,r10
10010428:	483fe126 	beq	r9,zero,100103b0 <__alt_data_end+0xf80103b0>
1001042c:	003ff606 	br	10010408 <__alt_data_end+0xf8010408>
10010430:	18bff916 	blt	r3,r2,10010418 <__alt_data_end+0xf8010418>
10010434:	10c00316 	blt	r2,r3,10010444 <__gedf2+0xc4>
10010438:	42bff736 	bltu	r8,r10,10010418 <__alt_data_end+0xf8010418>
1001043c:	52000326 	beq	r10,r8,1001044c <__gedf2+0xcc>
10010440:	5200042e 	bgeu	r10,r8,10010454 <__gedf2+0xd4>
10010444:	283fec1e 	bne	r5,zero,100103f8 <__alt_data_end+0xf80103f8>
10010448:	003ff406 	br	1001041c <__alt_data_end+0xf801041c>
1001044c:	313ff236 	bltu	r6,r4,10010418 <__alt_data_end+0xf8010418>
10010450:	21bffc36 	bltu	r4,r6,10010444 <__alt_data_end+0xf8010444>
10010454:	0005883a 	mov	r2,zero
10010458:	f800283a 	ret

1001045c <__ledf2>:
1001045c:	2804d53a 	srli	r2,r5,20
10010460:	3810d53a 	srli	r8,r7,20
10010464:	00c00434 	movhi	r3,16
10010468:	18ffffc4 	addi	r3,r3,-1
1001046c:	1081ffcc 	andi	r2,r2,2047
10010470:	0241ffc4 	movi	r9,2047
10010474:	28d4703a 	and	r10,r5,r3
10010478:	4201ffcc 	andi	r8,r8,2047
1001047c:	38c6703a 	and	r3,r7,r3
10010480:	280ad7fa 	srli	r5,r5,31
10010484:	380ed7fa 	srli	r7,r7,31
10010488:	12401f26 	beq	r2,r9,10010508 <__ledf2+0xac>
1001048c:	0241ffc4 	movi	r9,2047
10010490:	42401426 	beq	r8,r9,100104e4 <__ledf2+0x88>
10010494:	1000091e 	bne	r2,zero,100104bc <__ledf2+0x60>
10010498:	2296b03a 	or	r11,r4,r10
1001049c:	5813003a 	cmpeq	r9,r11,zero
100104a0:	29403fcc 	andi	r5,r5,255
100104a4:	40000a1e 	bne	r8,zero,100104d0 <__ledf2+0x74>
100104a8:	30d8b03a 	or	r12,r6,r3
100104ac:	6000081e 	bne	r12,zero,100104d0 <__ledf2+0x74>
100104b0:	0005883a 	mov	r2,zero
100104b4:	5800111e 	bne	r11,zero,100104fc <__ledf2+0xa0>
100104b8:	f800283a 	ret
100104bc:	29403fcc 	andi	r5,r5,255
100104c0:	40000c1e 	bne	r8,zero,100104f4 <__ledf2+0x98>
100104c4:	30d2b03a 	or	r9,r6,r3
100104c8:	48000c26 	beq	r9,zero,100104fc <__ledf2+0xa0>
100104cc:	0013883a 	mov	r9,zero
100104d0:	39c03fcc 	andi	r7,r7,255
100104d4:	48000826 	beq	r9,zero,100104f8 <__ledf2+0x9c>
100104d8:	38001126 	beq	r7,zero,10010520 <__ledf2+0xc4>
100104dc:	00800044 	movi	r2,1
100104e0:	f800283a 	ret
100104e4:	30d2b03a 	or	r9,r6,r3
100104e8:	483fea26 	beq	r9,zero,10010494 <__alt_data_end+0xf8010494>
100104ec:	00800084 	movi	r2,2
100104f0:	f800283a 	ret
100104f4:	39c03fcc 	andi	r7,r7,255
100104f8:	39400726 	beq	r7,r5,10010518 <__ledf2+0xbc>
100104fc:	2800081e 	bne	r5,zero,10010520 <__ledf2+0xc4>
10010500:	00800044 	movi	r2,1
10010504:	f800283a 	ret
10010508:	2292b03a 	or	r9,r4,r10
1001050c:	483fdf26 	beq	r9,zero,1001048c <__alt_data_end+0xf801048c>
10010510:	00800084 	movi	r2,2
10010514:	f800283a 	ret
10010518:	4080030e 	bge	r8,r2,10010528 <__ledf2+0xcc>
1001051c:	383fef26 	beq	r7,zero,100104dc <__alt_data_end+0xf80104dc>
10010520:	00bfffc4 	movi	r2,-1
10010524:	f800283a 	ret
10010528:	123feb16 	blt	r2,r8,100104d8 <__alt_data_end+0xf80104d8>
1001052c:	1abff336 	bltu	r3,r10,100104fc <__alt_data_end+0xf80104fc>
10010530:	50c00326 	beq	r10,r3,10010540 <__ledf2+0xe4>
10010534:	50c0042e 	bgeu	r10,r3,10010548 <__ledf2+0xec>
10010538:	283fe81e 	bne	r5,zero,100104dc <__alt_data_end+0xf80104dc>
1001053c:	003ff806 	br	10010520 <__alt_data_end+0xf8010520>
10010540:	313fee36 	bltu	r6,r4,100104fc <__alt_data_end+0xf80104fc>
10010544:	21bffc36 	bltu	r4,r6,10010538 <__alt_data_end+0xf8010538>
10010548:	0005883a 	mov	r2,zero
1001054c:	f800283a 	ret

10010550 <__muldf3>:
10010550:	deffee04 	addi	sp,sp,-72
10010554:	dd000c15 	stw	r20,48(sp)
10010558:	2828d53a 	srli	r20,r5,20
1001055c:	ddc00f15 	stw	r23,60(sp)
10010560:	282ed7fa 	srli	r23,r5,31
10010564:	dc000815 	stw	r16,32(sp)
10010568:	04000434 	movhi	r16,16
1001056c:	dcc00b15 	stw	r19,44(sp)
10010570:	843fffc4 	addi	r16,r16,-1
10010574:	dfc01115 	stw	ra,68(sp)
10010578:	df001015 	stw	fp,64(sp)
1001057c:	dd800e15 	stw	r22,56(sp)
10010580:	dd400d15 	stw	r21,52(sp)
10010584:	dc800a15 	stw	r18,40(sp)
10010588:	dc400915 	stw	r17,36(sp)
1001058c:	a501ffcc 	andi	r20,r20,2047
10010590:	2c20703a 	and	r16,r5,r16
10010594:	b827883a 	mov	r19,r23
10010598:	ba403fcc 	andi	r9,r23,255
1001059c:	a0006026 	beq	r20,zero,10010720 <__muldf3+0x1d0>
100105a0:	0081ffc4 	movi	r2,2047
100105a4:	202d883a 	mov	r22,r4
100105a8:	a0803626 	beq	r20,r2,10010684 <__muldf3+0x134>
100105ac:	84000434 	orhi	r16,r16,16
100105b0:	200ad77a 	srli	r5,r4,29
100105b4:	800490fa 	slli	r2,r16,3
100105b8:	202c90fa 	slli	r22,r4,3
100105bc:	a53f0044 	addi	r20,r20,-1023
100105c0:	28a0b03a 	or	r16,r5,r2
100105c4:	002b883a 	mov	r21,zero
100105c8:	000b883a 	mov	r5,zero
100105cc:	3804d53a 	srli	r2,r7,20
100105d0:	3838d7fa 	srli	fp,r7,31
100105d4:	04400434 	movhi	r17,16
100105d8:	8c7fffc4 	addi	r17,r17,-1
100105dc:	1081ffcc 	andi	r2,r2,2047
100105e0:	3025883a 	mov	r18,r6
100105e4:	3c62703a 	and	r17,r7,r17
100105e8:	e2803fcc 	andi	r10,fp,255
100105ec:	10006d26 	beq	r2,zero,100107a4 <__muldf3+0x254>
100105f0:	00c1ffc4 	movi	r3,2047
100105f4:	10c06526 	beq	r2,r3,1001078c <__muldf3+0x23c>
100105f8:	8c400434 	orhi	r17,r17,16
100105fc:	300ed77a 	srli	r7,r6,29
10010600:	880690fa 	slli	r3,r17,3
10010604:	302490fa 	slli	r18,r6,3
10010608:	10bf0044 	addi	r2,r2,-1023
1001060c:	38e2b03a 	or	r17,r7,r3
10010610:	000f883a 	mov	r7,zero
10010614:	a087883a 	add	r3,r20,r2
10010618:	010003c4 	movi	r4,15
1001061c:	3d44b03a 	or	r2,r7,r21
10010620:	e5ccf03a 	xor	r6,fp,r23
10010624:	1a000044 	addi	r8,r3,1
10010628:	20809b36 	bltu	r4,r2,10010898 <__muldf3+0x348>
1001062c:	100490ba 	slli	r2,r2,2
10010630:	01040074 	movhi	r4,4097
10010634:	21019104 	addi	r4,r4,1604
10010638:	1105883a 	add	r2,r2,r4
1001063c:	10800017 	ldw	r2,0(r2)
10010640:	1000683a 	jmp	r2
10010644:	10010898 	cmpnei	zero,r2,1058
10010648:	100106a4 	muli	zero,r2,1050
1001064c:	100106a4 	muli	zero,r2,1050
10010650:	100106a0 	cmpeqi	zero,r2,1050
10010654:	10010874 	orhi	zero,r2,1057
10010658:	10010874 	orhi	zero,r2,1057
1001065c:	1001085c 	xori	zero,r2,1057
10010660:	100106a0 	cmpeqi	zero,r2,1050
10010664:	10010874 	orhi	zero,r2,1057
10010668:	1001085c 	xori	zero,r2,1057
1001066c:	10010874 	orhi	zero,r2,1057
10010670:	100106a0 	cmpeqi	zero,r2,1050
10010674:	10010884 	addi	zero,r2,1058
10010678:	10010884 	addi	zero,r2,1058
1001067c:	10010884 	addi	zero,r2,1058
10010680:	10010be4 	muli	zero,r2,1071
10010684:	2404b03a 	or	r2,r4,r16
10010688:	1000711e 	bne	r2,zero,10010850 <__muldf3+0x300>
1001068c:	05400204 	movi	r21,8
10010690:	0021883a 	mov	r16,zero
10010694:	002d883a 	mov	r22,zero
10010698:	01400084 	movi	r5,2
1001069c:	003fcb06 	br	100105cc <__alt_data_end+0xf80105cc>
100106a0:	500d883a 	mov	r6,r10
100106a4:	00800084 	movi	r2,2
100106a8:	38805926 	beq	r7,r2,10010810 <__muldf3+0x2c0>
100106ac:	008000c4 	movi	r2,3
100106b0:	3881bb26 	beq	r7,r2,10010da0 <__muldf3+0x850>
100106b4:	00800044 	movi	r2,1
100106b8:	3881961e 	bne	r7,r2,10010d14 <__muldf3+0x7c4>
100106bc:	3027883a 	mov	r19,r6
100106c0:	0005883a 	mov	r2,zero
100106c4:	0021883a 	mov	r16,zero
100106c8:	002d883a 	mov	r22,zero
100106cc:	1004953a 	slli	r2,r2,20
100106d0:	98c03fcc 	andi	r3,r19,255
100106d4:	04400434 	movhi	r17,16
100106d8:	8c7fffc4 	addi	r17,r17,-1
100106dc:	180697fa 	slli	r3,r3,31
100106e0:	8460703a 	and	r16,r16,r17
100106e4:	80a0b03a 	or	r16,r16,r2
100106e8:	80c6b03a 	or	r3,r16,r3
100106ec:	b005883a 	mov	r2,r22
100106f0:	dfc01117 	ldw	ra,68(sp)
100106f4:	df001017 	ldw	fp,64(sp)
100106f8:	ddc00f17 	ldw	r23,60(sp)
100106fc:	dd800e17 	ldw	r22,56(sp)
10010700:	dd400d17 	ldw	r21,52(sp)
10010704:	dd000c17 	ldw	r20,48(sp)
10010708:	dcc00b17 	ldw	r19,44(sp)
1001070c:	dc800a17 	ldw	r18,40(sp)
10010710:	dc400917 	ldw	r17,36(sp)
10010714:	dc000817 	ldw	r16,32(sp)
10010718:	dec01204 	addi	sp,sp,72
1001071c:	f800283a 	ret
10010720:	2404b03a 	or	r2,r4,r16
10010724:	202b883a 	mov	r21,r4
10010728:	10004426 	beq	r2,zero,1001083c <__muldf3+0x2ec>
1001072c:	80015126 	beq	r16,zero,10010c74 <__muldf3+0x724>
10010730:	8009883a 	mov	r4,r16
10010734:	d9800715 	stw	r6,28(sp)
10010738:	d9c00215 	stw	r7,8(sp)
1001073c:	da400415 	stw	r9,16(sp)
10010740:	00118bc0 	call	100118bc <__clzsi2>
10010744:	d9800717 	ldw	r6,28(sp)
10010748:	d9c00217 	ldw	r7,8(sp)
1001074c:	da400417 	ldw	r9,16(sp)
10010750:	113ffd44 	addi	r4,r2,-11
10010754:	00c00704 	movi	r3,28
10010758:	19014216 	blt	r3,r4,10010c64 <__muldf3+0x714>
1001075c:	00c00744 	movi	r3,29
10010760:	15bffe04 	addi	r22,r2,-8
10010764:	1907c83a 	sub	r3,r3,r4
10010768:	85a0983a 	sll	r16,r16,r22
1001076c:	a8c6d83a 	srl	r3,r21,r3
10010770:	adac983a 	sll	r22,r21,r22
10010774:	1c20b03a 	or	r16,r3,r16
10010778:	1080fcc4 	addi	r2,r2,1011
1001077c:	00a9c83a 	sub	r20,zero,r2
10010780:	002b883a 	mov	r21,zero
10010784:	000b883a 	mov	r5,zero
10010788:	003f9006 	br	100105cc <__alt_data_end+0xf80105cc>
1001078c:	3446b03a 	or	r3,r6,r17
10010790:	1800281e 	bne	r3,zero,10010834 <__muldf3+0x2e4>
10010794:	0023883a 	mov	r17,zero
10010798:	0025883a 	mov	r18,zero
1001079c:	01c00084 	movi	r7,2
100107a0:	003f9c06 	br	10010614 <__alt_data_end+0xf8010614>
100107a4:	3446b03a 	or	r3,r6,r17
100107a8:	18001e26 	beq	r3,zero,10010824 <__muldf3+0x2d4>
100107ac:	88012126 	beq	r17,zero,10010c34 <__muldf3+0x6e4>
100107b0:	8809883a 	mov	r4,r17
100107b4:	d9400215 	stw	r5,8(sp)
100107b8:	d9800715 	stw	r6,28(sp)
100107bc:	da400415 	stw	r9,16(sp)
100107c0:	da800315 	stw	r10,12(sp)
100107c4:	00118bc0 	call	100118bc <__clzsi2>
100107c8:	d9400217 	ldw	r5,8(sp)
100107cc:	d9800717 	ldw	r6,28(sp)
100107d0:	da400417 	ldw	r9,16(sp)
100107d4:	da800317 	ldw	r10,12(sp)
100107d8:	113ffd44 	addi	r4,r2,-11
100107dc:	00c00704 	movi	r3,28
100107e0:	19011016 	blt	r3,r4,10010c24 <__muldf3+0x6d4>
100107e4:	00c00744 	movi	r3,29
100107e8:	14bffe04 	addi	r18,r2,-8
100107ec:	1907c83a 	sub	r3,r3,r4
100107f0:	8ca2983a 	sll	r17,r17,r18
100107f4:	30c6d83a 	srl	r3,r6,r3
100107f8:	34a4983a 	sll	r18,r6,r18
100107fc:	1c62b03a 	or	r17,r3,r17
10010800:	1080fcc4 	addi	r2,r2,1011
10010804:	0085c83a 	sub	r2,zero,r2
10010808:	000f883a 	mov	r7,zero
1001080c:	003f8106 	br	10010614 <__alt_data_end+0xf8010614>
10010810:	3027883a 	mov	r19,r6
10010814:	0081ffc4 	movi	r2,2047
10010818:	0021883a 	mov	r16,zero
1001081c:	002d883a 	mov	r22,zero
10010820:	003faa06 	br	100106cc <__alt_data_end+0xf80106cc>
10010824:	0023883a 	mov	r17,zero
10010828:	0025883a 	mov	r18,zero
1001082c:	01c00044 	movi	r7,1
10010830:	003f7806 	br	10010614 <__alt_data_end+0xf8010614>
10010834:	01c000c4 	movi	r7,3
10010838:	003f7606 	br	10010614 <__alt_data_end+0xf8010614>
1001083c:	05400104 	movi	r21,4
10010840:	0021883a 	mov	r16,zero
10010844:	002d883a 	mov	r22,zero
10010848:	01400044 	movi	r5,1
1001084c:	003f5f06 	br	100105cc <__alt_data_end+0xf80105cc>
10010850:	05400304 	movi	r21,12
10010854:	014000c4 	movi	r5,3
10010858:	003f5c06 	br	100105cc <__alt_data_end+0xf80105cc>
1001085c:	04000434 	movhi	r16,16
10010860:	0027883a 	mov	r19,zero
10010864:	843fffc4 	addi	r16,r16,-1
10010868:	05bfffc4 	movi	r22,-1
1001086c:	0081ffc4 	movi	r2,2047
10010870:	003f9606 	br	100106cc <__alt_data_end+0xf80106cc>
10010874:	8023883a 	mov	r17,r16
10010878:	b025883a 	mov	r18,r22
1001087c:	280f883a 	mov	r7,r5
10010880:	003f8806 	br	100106a4 <__alt_data_end+0xf80106a4>
10010884:	8023883a 	mov	r17,r16
10010888:	b025883a 	mov	r18,r22
1001088c:	480d883a 	mov	r6,r9
10010890:	280f883a 	mov	r7,r5
10010894:	003f8306 	br	100106a4 <__alt_data_end+0xf80106a4>
10010898:	b026d43a 	srli	r19,r22,16
1001089c:	902ed43a 	srli	r23,r18,16
100108a0:	b5bfffcc 	andi	r22,r22,65535
100108a4:	94bfffcc 	andi	r18,r18,65535
100108a8:	b00b883a 	mov	r5,r22
100108ac:	9009883a 	mov	r4,r18
100108b0:	d8c00515 	stw	r3,20(sp)
100108b4:	d9800715 	stw	r6,28(sp)
100108b8:	da000615 	stw	r8,24(sp)
100108bc:	0004b940 	call	10004b94 <__mulsi3>
100108c0:	980b883a 	mov	r5,r19
100108c4:	9009883a 	mov	r4,r18
100108c8:	1029883a 	mov	r20,r2
100108cc:	0004b940 	call	10004b94 <__mulsi3>
100108d0:	b80b883a 	mov	r5,r23
100108d4:	9809883a 	mov	r4,r19
100108d8:	102b883a 	mov	r21,r2
100108dc:	0004b940 	call	10004b94 <__mulsi3>
100108e0:	b809883a 	mov	r4,r23
100108e4:	b00b883a 	mov	r5,r22
100108e8:	1039883a 	mov	fp,r2
100108ec:	0004b940 	call	10004b94 <__mulsi3>
100108f0:	a008d43a 	srli	r4,r20,16
100108f4:	1545883a 	add	r2,r2,r21
100108f8:	d8c00517 	ldw	r3,20(sp)
100108fc:	2085883a 	add	r2,r4,r2
10010900:	d9800717 	ldw	r6,28(sp)
10010904:	da000617 	ldw	r8,24(sp)
10010908:	1540022e 	bgeu	r2,r21,10010914 <__muldf3+0x3c4>
1001090c:	01000074 	movhi	r4,1
10010910:	e139883a 	add	fp,fp,r4
10010914:	100e943a 	slli	r7,r2,16
10010918:	1004d43a 	srli	r2,r2,16
1001091c:	882ad43a 	srli	r21,r17,16
10010920:	a53fffcc 	andi	r20,r20,65535
10010924:	8c7fffcc 	andi	r17,r17,65535
10010928:	3d29883a 	add	r20,r7,r20
1001092c:	b00b883a 	mov	r5,r22
10010930:	8809883a 	mov	r4,r17
10010934:	d8c00515 	stw	r3,20(sp)
10010938:	d9800715 	stw	r6,28(sp)
1001093c:	da000615 	stw	r8,24(sp)
10010940:	dd000115 	stw	r20,4(sp)
10010944:	d8800015 	stw	r2,0(sp)
10010948:	0004b940 	call	10004b94 <__mulsi3>
1001094c:	980b883a 	mov	r5,r19
10010950:	8809883a 	mov	r4,r17
10010954:	d8800215 	stw	r2,8(sp)
10010958:	0004b940 	call	10004b94 <__mulsi3>
1001095c:	9809883a 	mov	r4,r19
10010960:	a80b883a 	mov	r5,r21
10010964:	1029883a 	mov	r20,r2
10010968:	0004b940 	call	10004b94 <__mulsi3>
1001096c:	b00b883a 	mov	r5,r22
10010970:	a809883a 	mov	r4,r21
10010974:	d8800415 	stw	r2,16(sp)
10010978:	0004b940 	call	10004b94 <__mulsi3>
1001097c:	d9c00217 	ldw	r7,8(sp)
10010980:	1505883a 	add	r2,r2,r20
10010984:	d8c00517 	ldw	r3,20(sp)
10010988:	3826d43a 	srli	r19,r7,16
1001098c:	d9800717 	ldw	r6,28(sp)
10010990:	da000617 	ldw	r8,24(sp)
10010994:	9885883a 	add	r2,r19,r2
10010998:	da400417 	ldw	r9,16(sp)
1001099c:	1500022e 	bgeu	r2,r20,100109a8 <__muldf3+0x458>
100109a0:	01000074 	movhi	r4,1
100109a4:	4913883a 	add	r9,r9,r4
100109a8:	1028d43a 	srli	r20,r2,16
100109ac:	1004943a 	slli	r2,r2,16
100109b0:	802cd43a 	srli	r22,r16,16
100109b4:	843fffcc 	andi	r16,r16,65535
100109b8:	3cffffcc 	andi	r19,r7,65535
100109bc:	9009883a 	mov	r4,r18
100109c0:	800b883a 	mov	r5,r16
100109c4:	a269883a 	add	r20,r20,r9
100109c8:	d8c00515 	stw	r3,20(sp)
100109cc:	d9800715 	stw	r6,28(sp)
100109d0:	da000615 	stw	r8,24(sp)
100109d4:	14e7883a 	add	r19,r2,r19
100109d8:	0004b940 	call	10004b94 <__mulsi3>
100109dc:	9009883a 	mov	r4,r18
100109e0:	b00b883a 	mov	r5,r22
100109e4:	d8800315 	stw	r2,12(sp)
100109e8:	0004b940 	call	10004b94 <__mulsi3>
100109ec:	b809883a 	mov	r4,r23
100109f0:	b00b883a 	mov	r5,r22
100109f4:	d8800215 	stw	r2,8(sp)
100109f8:	0004b940 	call	10004b94 <__mulsi3>
100109fc:	b80b883a 	mov	r5,r23
10010a00:	8009883a 	mov	r4,r16
10010a04:	d8800415 	stw	r2,16(sp)
10010a08:	0004b940 	call	10004b94 <__mulsi3>
10010a0c:	da800317 	ldw	r10,12(sp)
10010a10:	d9c00217 	ldw	r7,8(sp)
10010a14:	d9000017 	ldw	r4,0(sp)
10010a18:	502ed43a 	srli	r23,r10,16
10010a1c:	11c5883a 	add	r2,r2,r7
10010a20:	24e5883a 	add	r18,r4,r19
10010a24:	b885883a 	add	r2,r23,r2
10010a28:	d8c00517 	ldw	r3,20(sp)
10010a2c:	d9800717 	ldw	r6,28(sp)
10010a30:	da000617 	ldw	r8,24(sp)
10010a34:	da400417 	ldw	r9,16(sp)
10010a38:	11c0022e 	bgeu	r2,r7,10010a44 <__muldf3+0x4f4>
10010a3c:	01000074 	movhi	r4,1
10010a40:	4913883a 	add	r9,r9,r4
10010a44:	100ed43a 	srli	r7,r2,16
10010a48:	1004943a 	slli	r2,r2,16
10010a4c:	55ffffcc 	andi	r23,r10,65535
10010a50:	3a53883a 	add	r9,r7,r9
10010a54:	8809883a 	mov	r4,r17
10010a58:	800b883a 	mov	r5,r16
10010a5c:	d8c00515 	stw	r3,20(sp)
10010a60:	d9800715 	stw	r6,28(sp)
10010a64:	da000615 	stw	r8,24(sp)
10010a68:	da400415 	stw	r9,16(sp)
10010a6c:	15ef883a 	add	r23,r2,r23
10010a70:	0004b940 	call	10004b94 <__mulsi3>
10010a74:	8809883a 	mov	r4,r17
10010a78:	b00b883a 	mov	r5,r22
10010a7c:	d8800215 	stw	r2,8(sp)
10010a80:	0004b940 	call	10004b94 <__mulsi3>
10010a84:	b00b883a 	mov	r5,r22
10010a88:	a809883a 	mov	r4,r21
10010a8c:	d8800315 	stw	r2,12(sp)
10010a90:	0004b940 	call	10004b94 <__mulsi3>
10010a94:	8009883a 	mov	r4,r16
10010a98:	a80b883a 	mov	r5,r21
10010a9c:	1023883a 	mov	r17,r2
10010aa0:	0004b940 	call	10004b94 <__mulsi3>
10010aa4:	d9c00217 	ldw	r7,8(sp)
10010aa8:	da800317 	ldw	r10,12(sp)
10010aac:	d8c00517 	ldw	r3,20(sp)
10010ab0:	3808d43a 	srli	r4,r7,16
10010ab4:	1285883a 	add	r2,r2,r10
10010ab8:	d9800717 	ldw	r6,28(sp)
10010abc:	2085883a 	add	r2,r4,r2
10010ac0:	da000617 	ldw	r8,24(sp)
10010ac4:	da400417 	ldw	r9,16(sp)
10010ac8:	1280022e 	bgeu	r2,r10,10010ad4 <__muldf3+0x584>
10010acc:	01000074 	movhi	r4,1
10010ad0:	8923883a 	add	r17,r17,r4
10010ad4:	1008943a 	slli	r4,r2,16
10010ad8:	39ffffcc 	andi	r7,r7,65535
10010adc:	e4b9883a 	add	fp,fp,r18
10010ae0:	21cf883a 	add	r7,r4,r7
10010ae4:	e4e7803a 	cmpltu	r19,fp,r19
10010ae8:	3d0f883a 	add	r7,r7,r20
10010aec:	bf39883a 	add	fp,r23,fp
10010af0:	99c9883a 	add	r4,r19,r7
10010af4:	e5ef803a 	cmpltu	r23,fp,r23
10010af8:	490b883a 	add	r5,r9,r4
10010afc:	1004d43a 	srli	r2,r2,16
10010b00:	b965883a 	add	r18,r23,r5
10010b04:	24c9803a 	cmpltu	r4,r4,r19
10010b08:	3d29803a 	cmpltu	r20,r7,r20
10010b0c:	a128b03a 	or	r20,r20,r4
10010b10:	95ef803a 	cmpltu	r23,r18,r23
10010b14:	2a53803a 	cmpltu	r9,r5,r9
10010b18:	a0a9883a 	add	r20,r20,r2
10010b1c:	4deeb03a 	or	r23,r9,r23
10010b20:	a5ef883a 	add	r23,r20,r23
10010b24:	bc63883a 	add	r17,r23,r17
10010b28:	e004927a 	slli	r2,fp,9
10010b2c:	d9000117 	ldw	r4,4(sp)
10010b30:	882e927a 	slli	r23,r17,9
10010b34:	9022d5fa 	srli	r17,r18,23
10010b38:	e038d5fa 	srli	fp,fp,23
10010b3c:	1104b03a 	or	r2,r2,r4
10010b40:	9024927a 	slli	r18,r18,9
10010b44:	1004c03a 	cmpne	r2,r2,zero
10010b48:	bc62b03a 	or	r17,r23,r17
10010b4c:	1738b03a 	or	fp,r2,fp
10010b50:	8880402c 	andhi	r2,r17,256
10010b54:	e4a4b03a 	or	r18,fp,r18
10010b58:	10000726 	beq	r2,zero,10010b78 <__muldf3+0x628>
10010b5c:	9006d07a 	srli	r3,r18,1
10010b60:	880497fa 	slli	r2,r17,31
10010b64:	9480004c 	andi	r18,r18,1
10010b68:	8822d07a 	srli	r17,r17,1
10010b6c:	1ca4b03a 	or	r18,r3,r18
10010b70:	14a4b03a 	or	r18,r2,r18
10010b74:	4007883a 	mov	r3,r8
10010b78:	1880ffc4 	addi	r2,r3,1023
10010b7c:	0080460e 	bge	zero,r2,10010c98 <__muldf3+0x748>
10010b80:	910001cc 	andi	r4,r18,7
10010b84:	20000726 	beq	r4,zero,10010ba4 <__muldf3+0x654>
10010b88:	910003cc 	andi	r4,r18,15
10010b8c:	01400104 	movi	r5,4
10010b90:	21400426 	beq	r4,r5,10010ba4 <__muldf3+0x654>
10010b94:	9149883a 	add	r4,r18,r5
10010b98:	24a5803a 	cmpltu	r18,r4,r18
10010b9c:	8ca3883a 	add	r17,r17,r18
10010ba0:	2025883a 	mov	r18,r4
10010ba4:	8900402c 	andhi	r4,r17,256
10010ba8:	20000426 	beq	r4,zero,10010bbc <__muldf3+0x66c>
10010bac:	18810004 	addi	r2,r3,1024
10010bb0:	00ffc034 	movhi	r3,65280
10010bb4:	18ffffc4 	addi	r3,r3,-1
10010bb8:	88e2703a 	and	r17,r17,r3
10010bbc:	00c1ff84 	movi	r3,2046
10010bc0:	18bf1316 	blt	r3,r2,10010810 <__alt_data_end+0xf8010810>
10010bc4:	882c977a 	slli	r22,r17,29
10010bc8:	9024d0fa 	srli	r18,r18,3
10010bcc:	8822927a 	slli	r17,r17,9
10010bd0:	1081ffcc 	andi	r2,r2,2047
10010bd4:	b4acb03a 	or	r22,r22,r18
10010bd8:	8820d33a 	srli	r16,r17,12
10010bdc:	3027883a 	mov	r19,r6
10010be0:	003eba06 	br	100106cc <__alt_data_end+0xf80106cc>
10010be4:	8080022c 	andhi	r2,r16,8
10010be8:	10000926 	beq	r2,zero,10010c10 <__muldf3+0x6c0>
10010bec:	8880022c 	andhi	r2,r17,8
10010bf0:	1000071e 	bne	r2,zero,10010c10 <__muldf3+0x6c0>
10010bf4:	00800434 	movhi	r2,16
10010bf8:	8c000234 	orhi	r16,r17,8
10010bfc:	10bfffc4 	addi	r2,r2,-1
10010c00:	e027883a 	mov	r19,fp
10010c04:	80a0703a 	and	r16,r16,r2
10010c08:	902d883a 	mov	r22,r18
10010c0c:	003f1706 	br	1001086c <__alt_data_end+0xf801086c>
10010c10:	00800434 	movhi	r2,16
10010c14:	84000234 	orhi	r16,r16,8
10010c18:	10bfffc4 	addi	r2,r2,-1
10010c1c:	80a0703a 	and	r16,r16,r2
10010c20:	003f1206 	br	1001086c <__alt_data_end+0xf801086c>
10010c24:	147ff604 	addi	r17,r2,-40
10010c28:	3462983a 	sll	r17,r6,r17
10010c2c:	0025883a 	mov	r18,zero
10010c30:	003ef306 	br	10010800 <__alt_data_end+0xf8010800>
10010c34:	3009883a 	mov	r4,r6
10010c38:	d9400215 	stw	r5,8(sp)
10010c3c:	d9800715 	stw	r6,28(sp)
10010c40:	da400415 	stw	r9,16(sp)
10010c44:	da800315 	stw	r10,12(sp)
10010c48:	00118bc0 	call	100118bc <__clzsi2>
10010c4c:	10800804 	addi	r2,r2,32
10010c50:	da800317 	ldw	r10,12(sp)
10010c54:	da400417 	ldw	r9,16(sp)
10010c58:	d9800717 	ldw	r6,28(sp)
10010c5c:	d9400217 	ldw	r5,8(sp)
10010c60:	003edd06 	br	100107d8 <__alt_data_end+0xf80107d8>
10010c64:	143ff604 	addi	r16,r2,-40
10010c68:	ac20983a 	sll	r16,r21,r16
10010c6c:	002d883a 	mov	r22,zero
10010c70:	003ec106 	br	10010778 <__alt_data_end+0xf8010778>
10010c74:	d9800715 	stw	r6,28(sp)
10010c78:	d9c00215 	stw	r7,8(sp)
10010c7c:	da400415 	stw	r9,16(sp)
10010c80:	00118bc0 	call	100118bc <__clzsi2>
10010c84:	10800804 	addi	r2,r2,32
10010c88:	da400417 	ldw	r9,16(sp)
10010c8c:	d9c00217 	ldw	r7,8(sp)
10010c90:	d9800717 	ldw	r6,28(sp)
10010c94:	003eae06 	br	10010750 <__alt_data_end+0xf8010750>
10010c98:	00c00044 	movi	r3,1
10010c9c:	1887c83a 	sub	r3,r3,r2
10010ca0:	01000e04 	movi	r4,56
10010ca4:	20fe8516 	blt	r4,r3,100106bc <__alt_data_end+0xf80106bc>
10010ca8:	010007c4 	movi	r4,31
10010cac:	20c01b16 	blt	r4,r3,10010d1c <__muldf3+0x7cc>
10010cb0:	00800804 	movi	r2,32
10010cb4:	10c5c83a 	sub	r2,r2,r3
10010cb8:	888a983a 	sll	r5,r17,r2
10010cbc:	90c8d83a 	srl	r4,r18,r3
10010cc0:	9084983a 	sll	r2,r18,r2
10010cc4:	88e2d83a 	srl	r17,r17,r3
10010cc8:	2906b03a 	or	r3,r5,r4
10010ccc:	1004c03a 	cmpne	r2,r2,zero
10010cd0:	1886b03a 	or	r3,r3,r2
10010cd4:	188001cc 	andi	r2,r3,7
10010cd8:	10000726 	beq	r2,zero,10010cf8 <__muldf3+0x7a8>
10010cdc:	188003cc 	andi	r2,r3,15
10010ce0:	01000104 	movi	r4,4
10010ce4:	11000426 	beq	r2,r4,10010cf8 <__muldf3+0x7a8>
10010ce8:	1805883a 	mov	r2,r3
10010cec:	10c00104 	addi	r3,r2,4
10010cf0:	1885803a 	cmpltu	r2,r3,r2
10010cf4:	88a3883a 	add	r17,r17,r2
10010cf8:	8880202c 	andhi	r2,r17,128
10010cfc:	10001c26 	beq	r2,zero,10010d70 <__muldf3+0x820>
10010d00:	3027883a 	mov	r19,r6
10010d04:	00800044 	movi	r2,1
10010d08:	0021883a 	mov	r16,zero
10010d0c:	002d883a 	mov	r22,zero
10010d10:	003e6e06 	br	100106cc <__alt_data_end+0xf80106cc>
10010d14:	4007883a 	mov	r3,r8
10010d18:	003f9706 	br	10010b78 <__alt_data_end+0xf8010b78>
10010d1c:	017ff844 	movi	r5,-31
10010d20:	2885c83a 	sub	r2,r5,r2
10010d24:	888ad83a 	srl	r5,r17,r2
10010d28:	00800804 	movi	r2,32
10010d2c:	18801a26 	beq	r3,r2,10010d98 <__muldf3+0x848>
10010d30:	01001004 	movi	r4,64
10010d34:	20c7c83a 	sub	r3,r4,r3
10010d38:	88e2983a 	sll	r17,r17,r3
10010d3c:	8ca4b03a 	or	r18,r17,r18
10010d40:	9004c03a 	cmpne	r2,r18,zero
10010d44:	2884b03a 	or	r2,r5,r2
10010d48:	144001cc 	andi	r17,r2,7
10010d4c:	88000d1e 	bne	r17,zero,10010d84 <__muldf3+0x834>
10010d50:	0021883a 	mov	r16,zero
10010d54:	102cd0fa 	srli	r22,r2,3
10010d58:	3027883a 	mov	r19,r6
10010d5c:	0005883a 	mov	r2,zero
10010d60:	b46cb03a 	or	r22,r22,r17
10010d64:	003e5906 	br	100106cc <__alt_data_end+0xf80106cc>
10010d68:	1007883a 	mov	r3,r2
10010d6c:	0023883a 	mov	r17,zero
10010d70:	8820927a 	slli	r16,r17,9
10010d74:	1805883a 	mov	r2,r3
10010d78:	8822977a 	slli	r17,r17,29
10010d7c:	8020d33a 	srli	r16,r16,12
10010d80:	003ff406 	br	10010d54 <__alt_data_end+0xf8010d54>
10010d84:	10c003cc 	andi	r3,r2,15
10010d88:	01000104 	movi	r4,4
10010d8c:	193ff626 	beq	r3,r4,10010d68 <__alt_data_end+0xf8010d68>
10010d90:	0023883a 	mov	r17,zero
10010d94:	003fd506 	br	10010cec <__alt_data_end+0xf8010cec>
10010d98:	0023883a 	mov	r17,zero
10010d9c:	003fe706 	br	10010d3c <__alt_data_end+0xf8010d3c>
10010da0:	00800434 	movhi	r2,16
10010da4:	8c000234 	orhi	r16,r17,8
10010da8:	10bfffc4 	addi	r2,r2,-1
10010dac:	3027883a 	mov	r19,r6
10010db0:	80a0703a 	and	r16,r16,r2
10010db4:	902d883a 	mov	r22,r18
10010db8:	003eac06 	br	1001086c <__alt_data_end+0xf801086c>

10010dbc <__subdf3>:
10010dbc:	02000434 	movhi	r8,16
10010dc0:	423fffc4 	addi	r8,r8,-1
10010dc4:	defffb04 	addi	sp,sp,-20
10010dc8:	2a14703a 	and	r10,r5,r8
10010dcc:	3812d53a 	srli	r9,r7,20
10010dd0:	3a10703a 	and	r8,r7,r8
10010dd4:	2006d77a 	srli	r3,r4,29
10010dd8:	3004d77a 	srli	r2,r6,29
10010ddc:	dc000015 	stw	r16,0(sp)
10010de0:	501490fa 	slli	r10,r10,3
10010de4:	2820d53a 	srli	r16,r5,20
10010de8:	401090fa 	slli	r8,r8,3
10010dec:	dc800215 	stw	r18,8(sp)
10010df0:	dc400115 	stw	r17,4(sp)
10010df4:	dfc00415 	stw	ra,16(sp)
10010df8:	202290fa 	slli	r17,r4,3
10010dfc:	dcc00315 	stw	r19,12(sp)
10010e00:	4a41ffcc 	andi	r9,r9,2047
10010e04:	0101ffc4 	movi	r4,2047
10010e08:	2824d7fa 	srli	r18,r5,31
10010e0c:	8401ffcc 	andi	r16,r16,2047
10010e10:	50c6b03a 	or	r3,r10,r3
10010e14:	380ed7fa 	srli	r7,r7,31
10010e18:	408ab03a 	or	r5,r8,r2
10010e1c:	300c90fa 	slli	r6,r6,3
10010e20:	49009626 	beq	r9,r4,1001107c <__subdf3+0x2c0>
10010e24:	39c0005c 	xori	r7,r7,1
10010e28:	8245c83a 	sub	r2,r16,r9
10010e2c:	3c807426 	beq	r7,r18,10011000 <__subdf3+0x244>
10010e30:	0080af0e 	bge	zero,r2,100110f0 <__subdf3+0x334>
10010e34:	48002a1e 	bne	r9,zero,10010ee0 <__subdf3+0x124>
10010e38:	2988b03a 	or	r4,r5,r6
10010e3c:	20009a1e 	bne	r4,zero,100110a8 <__subdf3+0x2ec>
10010e40:	888001cc 	andi	r2,r17,7
10010e44:	10000726 	beq	r2,zero,10010e64 <__subdf3+0xa8>
10010e48:	888003cc 	andi	r2,r17,15
10010e4c:	01000104 	movi	r4,4
10010e50:	11000426 	beq	r2,r4,10010e64 <__subdf3+0xa8>
10010e54:	890b883a 	add	r5,r17,r4
10010e58:	2c63803a 	cmpltu	r17,r5,r17
10010e5c:	1c47883a 	add	r3,r3,r17
10010e60:	2823883a 	mov	r17,r5
10010e64:	1880202c 	andhi	r2,r3,128
10010e68:	10005926 	beq	r2,zero,10010fd0 <__subdf3+0x214>
10010e6c:	84000044 	addi	r16,r16,1
10010e70:	0081ffc4 	movi	r2,2047
10010e74:	8080be26 	beq	r16,r2,10011170 <__subdf3+0x3b4>
10010e78:	017fe034 	movhi	r5,65408
10010e7c:	297fffc4 	addi	r5,r5,-1
10010e80:	1946703a 	and	r3,r3,r5
10010e84:	1804977a 	slli	r2,r3,29
10010e88:	1806927a 	slli	r3,r3,9
10010e8c:	8822d0fa 	srli	r17,r17,3
10010e90:	8401ffcc 	andi	r16,r16,2047
10010e94:	180ad33a 	srli	r5,r3,12
10010e98:	9100004c 	andi	r4,r18,1
10010e9c:	1444b03a 	or	r2,r2,r17
10010ea0:	80c1ffcc 	andi	r3,r16,2047
10010ea4:	1820953a 	slli	r16,r3,20
10010ea8:	20c03fcc 	andi	r3,r4,255
10010eac:	180897fa 	slli	r4,r3,31
10010eb0:	00c00434 	movhi	r3,16
10010eb4:	18ffffc4 	addi	r3,r3,-1
10010eb8:	28c6703a 	and	r3,r5,r3
10010ebc:	1c06b03a 	or	r3,r3,r16
10010ec0:	1906b03a 	or	r3,r3,r4
10010ec4:	dfc00417 	ldw	ra,16(sp)
10010ec8:	dcc00317 	ldw	r19,12(sp)
10010ecc:	dc800217 	ldw	r18,8(sp)
10010ed0:	dc400117 	ldw	r17,4(sp)
10010ed4:	dc000017 	ldw	r16,0(sp)
10010ed8:	dec00504 	addi	sp,sp,20
10010edc:	f800283a 	ret
10010ee0:	0101ffc4 	movi	r4,2047
10010ee4:	813fd626 	beq	r16,r4,10010e40 <__alt_data_end+0xf8010e40>
10010ee8:	29402034 	orhi	r5,r5,128
10010eec:	01000e04 	movi	r4,56
10010ef0:	2080a316 	blt	r4,r2,10011180 <__subdf3+0x3c4>
10010ef4:	010007c4 	movi	r4,31
10010ef8:	2080c616 	blt	r4,r2,10011214 <__subdf3+0x458>
10010efc:	01000804 	movi	r4,32
10010f00:	2089c83a 	sub	r4,r4,r2
10010f04:	2910983a 	sll	r8,r5,r4
10010f08:	308ed83a 	srl	r7,r6,r2
10010f0c:	3108983a 	sll	r4,r6,r4
10010f10:	2884d83a 	srl	r2,r5,r2
10010f14:	41ccb03a 	or	r6,r8,r7
10010f18:	2008c03a 	cmpne	r4,r4,zero
10010f1c:	310cb03a 	or	r6,r6,r4
10010f20:	898dc83a 	sub	r6,r17,r6
10010f24:	89a3803a 	cmpltu	r17,r17,r6
10010f28:	1887c83a 	sub	r3,r3,r2
10010f2c:	1c47c83a 	sub	r3,r3,r17
10010f30:	3023883a 	mov	r17,r6
10010f34:	1880202c 	andhi	r2,r3,128
10010f38:	10002326 	beq	r2,zero,10010fc8 <__subdf3+0x20c>
10010f3c:	04c02034 	movhi	r19,128
10010f40:	9cffffc4 	addi	r19,r19,-1
10010f44:	1ce6703a 	and	r19,r3,r19
10010f48:	98007a26 	beq	r19,zero,10011134 <__subdf3+0x378>
10010f4c:	9809883a 	mov	r4,r19
10010f50:	00118bc0 	call	100118bc <__clzsi2>
10010f54:	113ffe04 	addi	r4,r2,-8
10010f58:	00c007c4 	movi	r3,31
10010f5c:	19007b16 	blt	r3,r4,1001114c <__subdf3+0x390>
10010f60:	00800804 	movi	r2,32
10010f64:	1105c83a 	sub	r2,r2,r4
10010f68:	8884d83a 	srl	r2,r17,r2
10010f6c:	9906983a 	sll	r3,r19,r4
10010f70:	8922983a 	sll	r17,r17,r4
10010f74:	10c4b03a 	or	r2,r2,r3
10010f78:	24007816 	blt	r4,r16,1001115c <__subdf3+0x3a0>
10010f7c:	2421c83a 	sub	r16,r4,r16
10010f80:	80c00044 	addi	r3,r16,1
10010f84:	010007c4 	movi	r4,31
10010f88:	20c09516 	blt	r4,r3,100111e0 <__subdf3+0x424>
10010f8c:	01400804 	movi	r5,32
10010f90:	28cbc83a 	sub	r5,r5,r3
10010f94:	88c8d83a 	srl	r4,r17,r3
10010f98:	8962983a 	sll	r17,r17,r5
10010f9c:	114a983a 	sll	r5,r2,r5
10010fa0:	10c6d83a 	srl	r3,r2,r3
10010fa4:	8804c03a 	cmpne	r2,r17,zero
10010fa8:	290ab03a 	or	r5,r5,r4
10010fac:	28a2b03a 	or	r17,r5,r2
10010fb0:	0021883a 	mov	r16,zero
10010fb4:	003fa206 	br	10010e40 <__alt_data_end+0xf8010e40>
10010fb8:	2090b03a 	or	r8,r4,r2
10010fbc:	40018e26 	beq	r8,zero,100115f8 <__subdf3+0x83c>
10010fc0:	1007883a 	mov	r3,r2
10010fc4:	2023883a 	mov	r17,r4
10010fc8:	888001cc 	andi	r2,r17,7
10010fcc:	103f9e1e 	bne	r2,zero,10010e48 <__alt_data_end+0xf8010e48>
10010fd0:	1804977a 	slli	r2,r3,29
10010fd4:	8822d0fa 	srli	r17,r17,3
10010fd8:	1810d0fa 	srli	r8,r3,3
10010fdc:	9100004c 	andi	r4,r18,1
10010fe0:	1444b03a 	or	r2,r2,r17
10010fe4:	00c1ffc4 	movi	r3,2047
10010fe8:	80c02826 	beq	r16,r3,1001108c <__subdf3+0x2d0>
10010fec:	01400434 	movhi	r5,16
10010ff0:	297fffc4 	addi	r5,r5,-1
10010ff4:	80e0703a 	and	r16,r16,r3
10010ff8:	414a703a 	and	r5,r8,r5
10010ffc:	003fa806 	br	10010ea0 <__alt_data_end+0xf8010ea0>
10011000:	0080630e 	bge	zero,r2,10011190 <__subdf3+0x3d4>
10011004:	48003026 	beq	r9,zero,100110c8 <__subdf3+0x30c>
10011008:	0101ffc4 	movi	r4,2047
1001100c:	813f8c26 	beq	r16,r4,10010e40 <__alt_data_end+0xf8010e40>
10011010:	29402034 	orhi	r5,r5,128
10011014:	01000e04 	movi	r4,56
10011018:	2080a90e 	bge	r4,r2,100112c0 <__subdf3+0x504>
1001101c:	298cb03a 	or	r6,r5,r6
10011020:	3012c03a 	cmpne	r9,r6,zero
10011024:	0005883a 	mov	r2,zero
10011028:	4c53883a 	add	r9,r9,r17
1001102c:	4c63803a 	cmpltu	r17,r9,r17
10011030:	10c7883a 	add	r3,r2,r3
10011034:	88c7883a 	add	r3,r17,r3
10011038:	4823883a 	mov	r17,r9
1001103c:	1880202c 	andhi	r2,r3,128
10011040:	1000d026 	beq	r2,zero,10011384 <__subdf3+0x5c8>
10011044:	84000044 	addi	r16,r16,1
10011048:	0081ffc4 	movi	r2,2047
1001104c:	8080fe26 	beq	r16,r2,10011448 <__subdf3+0x68c>
10011050:	00bfe034 	movhi	r2,65408
10011054:	10bfffc4 	addi	r2,r2,-1
10011058:	1886703a 	and	r3,r3,r2
1001105c:	880ad07a 	srli	r5,r17,1
10011060:	180497fa 	slli	r2,r3,31
10011064:	8900004c 	andi	r4,r17,1
10011068:	2922b03a 	or	r17,r5,r4
1001106c:	1806d07a 	srli	r3,r3,1
10011070:	1462b03a 	or	r17,r2,r17
10011074:	3825883a 	mov	r18,r7
10011078:	003f7106 	br	10010e40 <__alt_data_end+0xf8010e40>
1001107c:	2984b03a 	or	r2,r5,r6
10011080:	103f6826 	beq	r2,zero,10010e24 <__alt_data_end+0xf8010e24>
10011084:	39c03fcc 	andi	r7,r7,255
10011088:	003f6706 	br	10010e28 <__alt_data_end+0xf8010e28>
1001108c:	4086b03a 	or	r3,r8,r2
10011090:	18015226 	beq	r3,zero,100115dc <__subdf3+0x820>
10011094:	00c00434 	movhi	r3,16
10011098:	41400234 	orhi	r5,r8,8
1001109c:	18ffffc4 	addi	r3,r3,-1
100110a0:	28ca703a 	and	r5,r5,r3
100110a4:	003f7e06 	br	10010ea0 <__alt_data_end+0xf8010ea0>
100110a8:	10bfffc4 	addi	r2,r2,-1
100110ac:	1000491e 	bne	r2,zero,100111d4 <__subdf3+0x418>
100110b0:	898fc83a 	sub	r7,r17,r6
100110b4:	89e3803a 	cmpltu	r17,r17,r7
100110b8:	1947c83a 	sub	r3,r3,r5
100110bc:	1c47c83a 	sub	r3,r3,r17
100110c0:	3823883a 	mov	r17,r7
100110c4:	003f9b06 	br	10010f34 <__alt_data_end+0xf8010f34>
100110c8:	2988b03a 	or	r4,r5,r6
100110cc:	203f5c26 	beq	r4,zero,10010e40 <__alt_data_end+0xf8010e40>
100110d0:	10bfffc4 	addi	r2,r2,-1
100110d4:	1000931e 	bne	r2,zero,10011324 <__subdf3+0x568>
100110d8:	898d883a 	add	r6,r17,r6
100110dc:	3463803a 	cmpltu	r17,r6,r17
100110e0:	1947883a 	add	r3,r3,r5
100110e4:	88c7883a 	add	r3,r17,r3
100110e8:	3023883a 	mov	r17,r6
100110ec:	003fd306 	br	1001103c <__alt_data_end+0xf801103c>
100110f0:	1000541e 	bne	r2,zero,10011244 <__subdf3+0x488>
100110f4:	80800044 	addi	r2,r16,1
100110f8:	1081ffcc 	andi	r2,r2,2047
100110fc:	01000044 	movi	r4,1
10011100:	2080a20e 	bge	r4,r2,1001138c <__subdf3+0x5d0>
10011104:	8989c83a 	sub	r4,r17,r6
10011108:	8905803a 	cmpltu	r2,r17,r4
1001110c:	1967c83a 	sub	r19,r3,r5
10011110:	98a7c83a 	sub	r19,r19,r2
10011114:	9880202c 	andhi	r2,r19,128
10011118:	10006326 	beq	r2,zero,100112a8 <__subdf3+0x4ec>
1001111c:	3463c83a 	sub	r17,r6,r17
10011120:	28c7c83a 	sub	r3,r5,r3
10011124:	344d803a 	cmpltu	r6,r6,r17
10011128:	19a7c83a 	sub	r19,r3,r6
1001112c:	3825883a 	mov	r18,r7
10011130:	983f861e 	bne	r19,zero,10010f4c <__alt_data_end+0xf8010f4c>
10011134:	8809883a 	mov	r4,r17
10011138:	00118bc0 	call	100118bc <__clzsi2>
1001113c:	10800804 	addi	r2,r2,32
10011140:	113ffe04 	addi	r4,r2,-8
10011144:	00c007c4 	movi	r3,31
10011148:	193f850e 	bge	r3,r4,10010f60 <__alt_data_end+0xf8010f60>
1001114c:	10bff604 	addi	r2,r2,-40
10011150:	8884983a 	sll	r2,r17,r2
10011154:	0023883a 	mov	r17,zero
10011158:	243f880e 	bge	r4,r16,10010f7c <__alt_data_end+0xf8010f7c>
1001115c:	00ffe034 	movhi	r3,65408
10011160:	18ffffc4 	addi	r3,r3,-1
10011164:	8121c83a 	sub	r16,r16,r4
10011168:	10c6703a 	and	r3,r2,r3
1001116c:	003f3406 	br	10010e40 <__alt_data_end+0xf8010e40>
10011170:	9100004c 	andi	r4,r18,1
10011174:	000b883a 	mov	r5,zero
10011178:	0005883a 	mov	r2,zero
1001117c:	003f4806 	br	10010ea0 <__alt_data_end+0xf8010ea0>
10011180:	298cb03a 	or	r6,r5,r6
10011184:	300cc03a 	cmpne	r6,r6,zero
10011188:	0005883a 	mov	r2,zero
1001118c:	003f6406 	br	10010f20 <__alt_data_end+0xf8010f20>
10011190:	10009a1e 	bne	r2,zero,100113fc <__subdf3+0x640>
10011194:	82400044 	addi	r9,r16,1
10011198:	4881ffcc 	andi	r2,r9,2047
1001119c:	02800044 	movi	r10,1
100111a0:	5080670e 	bge	r10,r2,10011340 <__subdf3+0x584>
100111a4:	0081ffc4 	movi	r2,2047
100111a8:	4880af26 	beq	r9,r2,10011468 <__subdf3+0x6ac>
100111ac:	898d883a 	add	r6,r17,r6
100111b0:	1945883a 	add	r2,r3,r5
100111b4:	3447803a 	cmpltu	r3,r6,r17
100111b8:	1887883a 	add	r3,r3,r2
100111bc:	182297fa 	slli	r17,r3,31
100111c0:	300cd07a 	srli	r6,r6,1
100111c4:	1806d07a 	srli	r3,r3,1
100111c8:	4821883a 	mov	r16,r9
100111cc:	89a2b03a 	or	r17,r17,r6
100111d0:	003f1b06 	br	10010e40 <__alt_data_end+0xf8010e40>
100111d4:	0101ffc4 	movi	r4,2047
100111d8:	813f441e 	bne	r16,r4,10010eec <__alt_data_end+0xf8010eec>
100111dc:	003f1806 	br	10010e40 <__alt_data_end+0xf8010e40>
100111e0:	843ff844 	addi	r16,r16,-31
100111e4:	01400804 	movi	r5,32
100111e8:	1408d83a 	srl	r4,r2,r16
100111ec:	19405026 	beq	r3,r5,10011330 <__subdf3+0x574>
100111f0:	01401004 	movi	r5,64
100111f4:	28c7c83a 	sub	r3,r5,r3
100111f8:	10c4983a 	sll	r2,r2,r3
100111fc:	88a2b03a 	or	r17,r17,r2
10011200:	8822c03a 	cmpne	r17,r17,zero
10011204:	2462b03a 	or	r17,r4,r17
10011208:	0007883a 	mov	r3,zero
1001120c:	0021883a 	mov	r16,zero
10011210:	003f6d06 	br	10010fc8 <__alt_data_end+0xf8010fc8>
10011214:	11fff804 	addi	r7,r2,-32
10011218:	01000804 	movi	r4,32
1001121c:	29ced83a 	srl	r7,r5,r7
10011220:	11004526 	beq	r2,r4,10011338 <__subdf3+0x57c>
10011224:	01001004 	movi	r4,64
10011228:	2089c83a 	sub	r4,r4,r2
1001122c:	2904983a 	sll	r2,r5,r4
10011230:	118cb03a 	or	r6,r2,r6
10011234:	300cc03a 	cmpne	r6,r6,zero
10011238:	398cb03a 	or	r6,r7,r6
1001123c:	0005883a 	mov	r2,zero
10011240:	003f3706 	br	10010f20 <__alt_data_end+0xf8010f20>
10011244:	80002a26 	beq	r16,zero,100112f0 <__subdf3+0x534>
10011248:	0101ffc4 	movi	r4,2047
1001124c:	49006626 	beq	r9,r4,100113e8 <__subdf3+0x62c>
10011250:	0085c83a 	sub	r2,zero,r2
10011254:	18c02034 	orhi	r3,r3,128
10011258:	01000e04 	movi	r4,56
1001125c:	20807e16 	blt	r4,r2,10011458 <__subdf3+0x69c>
10011260:	010007c4 	movi	r4,31
10011264:	2080e716 	blt	r4,r2,10011604 <__subdf3+0x848>
10011268:	01000804 	movi	r4,32
1001126c:	2089c83a 	sub	r4,r4,r2
10011270:	1914983a 	sll	r10,r3,r4
10011274:	8890d83a 	srl	r8,r17,r2
10011278:	8908983a 	sll	r4,r17,r4
1001127c:	1884d83a 	srl	r2,r3,r2
10011280:	5222b03a 	or	r17,r10,r8
10011284:	2006c03a 	cmpne	r3,r4,zero
10011288:	88e2b03a 	or	r17,r17,r3
1001128c:	3463c83a 	sub	r17,r6,r17
10011290:	2885c83a 	sub	r2,r5,r2
10011294:	344d803a 	cmpltu	r6,r6,r17
10011298:	1187c83a 	sub	r3,r2,r6
1001129c:	4821883a 	mov	r16,r9
100112a0:	3825883a 	mov	r18,r7
100112a4:	003f2306 	br	10010f34 <__alt_data_end+0xf8010f34>
100112a8:	24d0b03a 	or	r8,r4,r19
100112ac:	40001b1e 	bne	r8,zero,1001131c <__subdf3+0x560>
100112b0:	0005883a 	mov	r2,zero
100112b4:	0009883a 	mov	r4,zero
100112b8:	0021883a 	mov	r16,zero
100112bc:	003f4906 	br	10010fe4 <__alt_data_end+0xf8010fe4>
100112c0:	010007c4 	movi	r4,31
100112c4:	20803a16 	blt	r4,r2,100113b0 <__subdf3+0x5f4>
100112c8:	01000804 	movi	r4,32
100112cc:	2089c83a 	sub	r4,r4,r2
100112d0:	2912983a 	sll	r9,r5,r4
100112d4:	3090d83a 	srl	r8,r6,r2
100112d8:	3108983a 	sll	r4,r6,r4
100112dc:	2884d83a 	srl	r2,r5,r2
100112e0:	4a12b03a 	or	r9,r9,r8
100112e4:	2008c03a 	cmpne	r4,r4,zero
100112e8:	4912b03a 	or	r9,r9,r4
100112ec:	003f4e06 	br	10011028 <__alt_data_end+0xf8011028>
100112f0:	1c48b03a 	or	r4,r3,r17
100112f4:	20003c26 	beq	r4,zero,100113e8 <__subdf3+0x62c>
100112f8:	0084303a 	nor	r2,zero,r2
100112fc:	1000381e 	bne	r2,zero,100113e0 <__subdf3+0x624>
10011300:	3463c83a 	sub	r17,r6,r17
10011304:	28c5c83a 	sub	r2,r5,r3
10011308:	344d803a 	cmpltu	r6,r6,r17
1001130c:	1187c83a 	sub	r3,r2,r6
10011310:	4821883a 	mov	r16,r9
10011314:	3825883a 	mov	r18,r7
10011318:	003f0606 	br	10010f34 <__alt_data_end+0xf8010f34>
1001131c:	2023883a 	mov	r17,r4
10011320:	003f0906 	br	10010f48 <__alt_data_end+0xf8010f48>
10011324:	0101ffc4 	movi	r4,2047
10011328:	813f3a1e 	bne	r16,r4,10011014 <__alt_data_end+0xf8011014>
1001132c:	003ec406 	br	10010e40 <__alt_data_end+0xf8010e40>
10011330:	0005883a 	mov	r2,zero
10011334:	003fb106 	br	100111fc <__alt_data_end+0xf80111fc>
10011338:	0005883a 	mov	r2,zero
1001133c:	003fbc06 	br	10011230 <__alt_data_end+0xf8011230>
10011340:	1c44b03a 	or	r2,r3,r17
10011344:	80008e1e 	bne	r16,zero,10011580 <__subdf3+0x7c4>
10011348:	1000c826 	beq	r2,zero,1001166c <__subdf3+0x8b0>
1001134c:	2984b03a 	or	r2,r5,r6
10011350:	103ebb26 	beq	r2,zero,10010e40 <__alt_data_end+0xf8010e40>
10011354:	8989883a 	add	r4,r17,r6
10011358:	1945883a 	add	r2,r3,r5
1001135c:	2447803a 	cmpltu	r3,r4,r17
10011360:	1887883a 	add	r3,r3,r2
10011364:	1880202c 	andhi	r2,r3,128
10011368:	2023883a 	mov	r17,r4
1001136c:	103f1626 	beq	r2,zero,10010fc8 <__alt_data_end+0xf8010fc8>
10011370:	00bfe034 	movhi	r2,65408
10011374:	10bfffc4 	addi	r2,r2,-1
10011378:	5021883a 	mov	r16,r10
1001137c:	1886703a 	and	r3,r3,r2
10011380:	003eaf06 	br	10010e40 <__alt_data_end+0xf8010e40>
10011384:	3825883a 	mov	r18,r7
10011388:	003f0f06 	br	10010fc8 <__alt_data_end+0xf8010fc8>
1001138c:	1c44b03a 	or	r2,r3,r17
10011390:	8000251e 	bne	r16,zero,10011428 <__subdf3+0x66c>
10011394:	1000661e 	bne	r2,zero,10011530 <__subdf3+0x774>
10011398:	2990b03a 	or	r8,r5,r6
1001139c:	40009626 	beq	r8,zero,100115f8 <__subdf3+0x83c>
100113a0:	2807883a 	mov	r3,r5
100113a4:	3023883a 	mov	r17,r6
100113a8:	3825883a 	mov	r18,r7
100113ac:	003ea406 	br	10010e40 <__alt_data_end+0xf8010e40>
100113b0:	127ff804 	addi	r9,r2,-32
100113b4:	01000804 	movi	r4,32
100113b8:	2a52d83a 	srl	r9,r5,r9
100113bc:	11008c26 	beq	r2,r4,100115f0 <__subdf3+0x834>
100113c0:	01001004 	movi	r4,64
100113c4:	2085c83a 	sub	r2,r4,r2
100113c8:	2884983a 	sll	r2,r5,r2
100113cc:	118cb03a 	or	r6,r2,r6
100113d0:	300cc03a 	cmpne	r6,r6,zero
100113d4:	4992b03a 	or	r9,r9,r6
100113d8:	0005883a 	mov	r2,zero
100113dc:	003f1206 	br	10011028 <__alt_data_end+0xf8011028>
100113e0:	0101ffc4 	movi	r4,2047
100113e4:	493f9c1e 	bne	r9,r4,10011258 <__alt_data_end+0xf8011258>
100113e8:	2807883a 	mov	r3,r5
100113ec:	3023883a 	mov	r17,r6
100113f0:	4821883a 	mov	r16,r9
100113f4:	3825883a 	mov	r18,r7
100113f8:	003e9106 	br	10010e40 <__alt_data_end+0xf8010e40>
100113fc:	80001f1e 	bne	r16,zero,1001147c <__subdf3+0x6c0>
10011400:	1c48b03a 	or	r4,r3,r17
10011404:	20005a26 	beq	r4,zero,10011570 <__subdf3+0x7b4>
10011408:	0084303a 	nor	r2,zero,r2
1001140c:	1000561e 	bne	r2,zero,10011568 <__subdf3+0x7ac>
10011410:	89a3883a 	add	r17,r17,r6
10011414:	1945883a 	add	r2,r3,r5
10011418:	898d803a 	cmpltu	r6,r17,r6
1001141c:	3087883a 	add	r3,r6,r2
10011420:	4821883a 	mov	r16,r9
10011424:	003f0506 	br	1001103c <__alt_data_end+0xf801103c>
10011428:	10002b1e 	bne	r2,zero,100114d8 <__subdf3+0x71c>
1001142c:	2984b03a 	or	r2,r5,r6
10011430:	10008026 	beq	r2,zero,10011634 <__subdf3+0x878>
10011434:	2807883a 	mov	r3,r5
10011438:	3023883a 	mov	r17,r6
1001143c:	3825883a 	mov	r18,r7
10011440:	0401ffc4 	movi	r16,2047
10011444:	003e7e06 	br	10010e40 <__alt_data_end+0xf8010e40>
10011448:	3809883a 	mov	r4,r7
1001144c:	0011883a 	mov	r8,zero
10011450:	0005883a 	mov	r2,zero
10011454:	003ee306 	br	10010fe4 <__alt_data_end+0xf8010fe4>
10011458:	1c62b03a 	or	r17,r3,r17
1001145c:	8822c03a 	cmpne	r17,r17,zero
10011460:	0005883a 	mov	r2,zero
10011464:	003f8906 	br	1001128c <__alt_data_end+0xf801128c>
10011468:	3809883a 	mov	r4,r7
1001146c:	4821883a 	mov	r16,r9
10011470:	0011883a 	mov	r8,zero
10011474:	0005883a 	mov	r2,zero
10011478:	003eda06 	br	10010fe4 <__alt_data_end+0xf8010fe4>
1001147c:	0101ffc4 	movi	r4,2047
10011480:	49003b26 	beq	r9,r4,10011570 <__subdf3+0x7b4>
10011484:	0085c83a 	sub	r2,zero,r2
10011488:	18c02034 	orhi	r3,r3,128
1001148c:	01000e04 	movi	r4,56
10011490:	20806e16 	blt	r4,r2,1001164c <__subdf3+0x890>
10011494:	010007c4 	movi	r4,31
10011498:	20807716 	blt	r4,r2,10011678 <__subdf3+0x8bc>
1001149c:	01000804 	movi	r4,32
100114a0:	2089c83a 	sub	r4,r4,r2
100114a4:	1914983a 	sll	r10,r3,r4
100114a8:	8890d83a 	srl	r8,r17,r2
100114ac:	8908983a 	sll	r4,r17,r4
100114b0:	1884d83a 	srl	r2,r3,r2
100114b4:	5222b03a 	or	r17,r10,r8
100114b8:	2006c03a 	cmpne	r3,r4,zero
100114bc:	88e2b03a 	or	r17,r17,r3
100114c0:	89a3883a 	add	r17,r17,r6
100114c4:	1145883a 	add	r2,r2,r5
100114c8:	898d803a 	cmpltu	r6,r17,r6
100114cc:	3087883a 	add	r3,r6,r2
100114d0:	4821883a 	mov	r16,r9
100114d4:	003ed906 	br	1001103c <__alt_data_end+0xf801103c>
100114d8:	2984b03a 	or	r2,r5,r6
100114dc:	10004226 	beq	r2,zero,100115e8 <__subdf3+0x82c>
100114e0:	1808d0fa 	srli	r4,r3,3
100114e4:	8822d0fa 	srli	r17,r17,3
100114e8:	1806977a 	slli	r3,r3,29
100114ec:	2080022c 	andhi	r2,r4,8
100114f0:	1c62b03a 	or	r17,r3,r17
100114f4:	10000826 	beq	r2,zero,10011518 <__subdf3+0x75c>
100114f8:	2812d0fa 	srli	r9,r5,3
100114fc:	4880022c 	andhi	r2,r9,8
10011500:	1000051e 	bne	r2,zero,10011518 <__subdf3+0x75c>
10011504:	300cd0fa 	srli	r6,r6,3
10011508:	2804977a 	slli	r2,r5,29
1001150c:	4809883a 	mov	r4,r9
10011510:	3825883a 	mov	r18,r7
10011514:	11a2b03a 	or	r17,r2,r6
10011518:	8806d77a 	srli	r3,r17,29
1001151c:	200890fa 	slli	r4,r4,3
10011520:	882290fa 	slli	r17,r17,3
10011524:	0401ffc4 	movi	r16,2047
10011528:	1906b03a 	or	r3,r3,r4
1001152c:	003e4406 	br	10010e40 <__alt_data_end+0xf8010e40>
10011530:	2984b03a 	or	r2,r5,r6
10011534:	103e4226 	beq	r2,zero,10010e40 <__alt_data_end+0xf8010e40>
10011538:	8989c83a 	sub	r4,r17,r6
1001153c:	8911803a 	cmpltu	r8,r17,r4
10011540:	1945c83a 	sub	r2,r3,r5
10011544:	1205c83a 	sub	r2,r2,r8
10011548:	1200202c 	andhi	r8,r2,128
1001154c:	403e9a26 	beq	r8,zero,10010fb8 <__alt_data_end+0xf8010fb8>
10011550:	3463c83a 	sub	r17,r6,r17
10011554:	28c5c83a 	sub	r2,r5,r3
10011558:	344d803a 	cmpltu	r6,r6,r17
1001155c:	1187c83a 	sub	r3,r2,r6
10011560:	3825883a 	mov	r18,r7
10011564:	003e3606 	br	10010e40 <__alt_data_end+0xf8010e40>
10011568:	0101ffc4 	movi	r4,2047
1001156c:	493fc71e 	bne	r9,r4,1001148c <__alt_data_end+0xf801148c>
10011570:	2807883a 	mov	r3,r5
10011574:	3023883a 	mov	r17,r6
10011578:	4821883a 	mov	r16,r9
1001157c:	003e3006 	br	10010e40 <__alt_data_end+0xf8010e40>
10011580:	10003626 	beq	r2,zero,1001165c <__subdf3+0x8a0>
10011584:	2984b03a 	or	r2,r5,r6
10011588:	10001726 	beq	r2,zero,100115e8 <__subdf3+0x82c>
1001158c:	1808d0fa 	srli	r4,r3,3
10011590:	8822d0fa 	srli	r17,r17,3
10011594:	1806977a 	slli	r3,r3,29
10011598:	2080022c 	andhi	r2,r4,8
1001159c:	1c62b03a 	or	r17,r3,r17
100115a0:	10000726 	beq	r2,zero,100115c0 <__subdf3+0x804>
100115a4:	2812d0fa 	srli	r9,r5,3
100115a8:	4880022c 	andhi	r2,r9,8
100115ac:	1000041e 	bne	r2,zero,100115c0 <__subdf3+0x804>
100115b0:	300cd0fa 	srli	r6,r6,3
100115b4:	2804977a 	slli	r2,r5,29
100115b8:	4809883a 	mov	r4,r9
100115bc:	11a2b03a 	or	r17,r2,r6
100115c0:	8806d77a 	srli	r3,r17,29
100115c4:	200890fa 	slli	r4,r4,3
100115c8:	882290fa 	slli	r17,r17,3
100115cc:	3825883a 	mov	r18,r7
100115d0:	1906b03a 	or	r3,r3,r4
100115d4:	0401ffc4 	movi	r16,2047
100115d8:	003e1906 	br	10010e40 <__alt_data_end+0xf8010e40>
100115dc:	000b883a 	mov	r5,zero
100115e0:	0005883a 	mov	r2,zero
100115e4:	003e2e06 	br	10010ea0 <__alt_data_end+0xf8010ea0>
100115e8:	0401ffc4 	movi	r16,2047
100115ec:	003e1406 	br	10010e40 <__alt_data_end+0xf8010e40>
100115f0:	0005883a 	mov	r2,zero
100115f4:	003f7506 	br	100113cc <__alt_data_end+0xf80113cc>
100115f8:	0005883a 	mov	r2,zero
100115fc:	0009883a 	mov	r4,zero
10011600:	003e7806 	br	10010fe4 <__alt_data_end+0xf8010fe4>
10011604:	123ff804 	addi	r8,r2,-32
10011608:	01000804 	movi	r4,32
1001160c:	1a10d83a 	srl	r8,r3,r8
10011610:	11002526 	beq	r2,r4,100116a8 <__subdf3+0x8ec>
10011614:	01001004 	movi	r4,64
10011618:	2085c83a 	sub	r2,r4,r2
1001161c:	1884983a 	sll	r2,r3,r2
10011620:	1444b03a 	or	r2,r2,r17
10011624:	1004c03a 	cmpne	r2,r2,zero
10011628:	40a2b03a 	or	r17,r8,r2
1001162c:	0005883a 	mov	r2,zero
10011630:	003f1606 	br	1001128c <__alt_data_end+0xf801128c>
10011634:	02000434 	movhi	r8,16
10011638:	0009883a 	mov	r4,zero
1001163c:	423fffc4 	addi	r8,r8,-1
10011640:	00bfffc4 	movi	r2,-1
10011644:	0401ffc4 	movi	r16,2047
10011648:	003e6606 	br	10010fe4 <__alt_data_end+0xf8010fe4>
1001164c:	1c62b03a 	or	r17,r3,r17
10011650:	8822c03a 	cmpne	r17,r17,zero
10011654:	0005883a 	mov	r2,zero
10011658:	003f9906 	br	100114c0 <__alt_data_end+0xf80114c0>
1001165c:	2807883a 	mov	r3,r5
10011660:	3023883a 	mov	r17,r6
10011664:	0401ffc4 	movi	r16,2047
10011668:	003df506 	br	10010e40 <__alt_data_end+0xf8010e40>
1001166c:	2807883a 	mov	r3,r5
10011670:	3023883a 	mov	r17,r6
10011674:	003df206 	br	10010e40 <__alt_data_end+0xf8010e40>
10011678:	123ff804 	addi	r8,r2,-32
1001167c:	01000804 	movi	r4,32
10011680:	1a10d83a 	srl	r8,r3,r8
10011684:	11000a26 	beq	r2,r4,100116b0 <__subdf3+0x8f4>
10011688:	01001004 	movi	r4,64
1001168c:	2085c83a 	sub	r2,r4,r2
10011690:	1884983a 	sll	r2,r3,r2
10011694:	1444b03a 	or	r2,r2,r17
10011698:	1004c03a 	cmpne	r2,r2,zero
1001169c:	40a2b03a 	or	r17,r8,r2
100116a0:	0005883a 	mov	r2,zero
100116a4:	003f8606 	br	100114c0 <__alt_data_end+0xf80114c0>
100116a8:	0005883a 	mov	r2,zero
100116ac:	003fdc06 	br	10011620 <__alt_data_end+0xf8011620>
100116b0:	0005883a 	mov	r2,zero
100116b4:	003ff706 	br	10011694 <__alt_data_end+0xf8011694>

100116b8 <__fixdfsi>:
100116b8:	280cd53a 	srli	r6,r5,20
100116bc:	00c00434 	movhi	r3,16
100116c0:	18ffffc4 	addi	r3,r3,-1
100116c4:	3181ffcc 	andi	r6,r6,2047
100116c8:	01c0ff84 	movi	r7,1022
100116cc:	28c6703a 	and	r3,r5,r3
100116d0:	280ad7fa 	srli	r5,r5,31
100116d4:	3980120e 	bge	r7,r6,10011720 <__fixdfsi+0x68>
100116d8:	00810744 	movi	r2,1053
100116dc:	11800c16 	blt	r2,r6,10011710 <__fixdfsi+0x58>
100116e0:	00810cc4 	movi	r2,1075
100116e4:	1185c83a 	sub	r2,r2,r6
100116e8:	01c007c4 	movi	r7,31
100116ec:	18c00434 	orhi	r3,r3,16
100116f0:	38800d16 	blt	r7,r2,10011728 <__fixdfsi+0x70>
100116f4:	31befb44 	addi	r6,r6,-1043
100116f8:	2084d83a 	srl	r2,r4,r2
100116fc:	1986983a 	sll	r3,r3,r6
10011700:	1884b03a 	or	r2,r3,r2
10011704:	28000726 	beq	r5,zero,10011724 <__fixdfsi+0x6c>
10011708:	0085c83a 	sub	r2,zero,r2
1001170c:	f800283a 	ret
10011710:	00a00034 	movhi	r2,32768
10011714:	10bfffc4 	addi	r2,r2,-1
10011718:	2885883a 	add	r2,r5,r2
1001171c:	f800283a 	ret
10011720:	0005883a 	mov	r2,zero
10011724:	f800283a 	ret
10011728:	008104c4 	movi	r2,1043
1001172c:	1185c83a 	sub	r2,r2,r6
10011730:	1884d83a 	srl	r2,r3,r2
10011734:	003ff306 	br	10011704 <__alt_data_end+0xf8011704>

10011738 <__floatsidf>:
10011738:	defffd04 	addi	sp,sp,-12
1001173c:	dfc00215 	stw	ra,8(sp)
10011740:	dc400115 	stw	r17,4(sp)
10011744:	dc000015 	stw	r16,0(sp)
10011748:	20002b26 	beq	r4,zero,100117f8 <__floatsidf+0xc0>
1001174c:	2023883a 	mov	r17,r4
10011750:	2020d7fa 	srli	r16,r4,31
10011754:	20002d16 	blt	r4,zero,1001180c <__floatsidf+0xd4>
10011758:	8809883a 	mov	r4,r17
1001175c:	00118bc0 	call	100118bc <__clzsi2>
10011760:	01410784 	movi	r5,1054
10011764:	288bc83a 	sub	r5,r5,r2
10011768:	01010cc4 	movi	r4,1075
1001176c:	2149c83a 	sub	r4,r4,r5
10011770:	00c007c4 	movi	r3,31
10011774:	1900160e 	bge	r3,r4,100117d0 <__floatsidf+0x98>
10011778:	00c104c4 	movi	r3,1043
1001177c:	1947c83a 	sub	r3,r3,r5
10011780:	88c6983a 	sll	r3,r17,r3
10011784:	00800434 	movhi	r2,16
10011788:	10bfffc4 	addi	r2,r2,-1
1001178c:	1886703a 	and	r3,r3,r2
10011790:	2941ffcc 	andi	r5,r5,2047
10011794:	800d883a 	mov	r6,r16
10011798:	0005883a 	mov	r2,zero
1001179c:	280a953a 	slli	r5,r5,20
100117a0:	31803fcc 	andi	r6,r6,255
100117a4:	01000434 	movhi	r4,16
100117a8:	300c97fa 	slli	r6,r6,31
100117ac:	213fffc4 	addi	r4,r4,-1
100117b0:	1906703a 	and	r3,r3,r4
100117b4:	1946b03a 	or	r3,r3,r5
100117b8:	1986b03a 	or	r3,r3,r6
100117bc:	dfc00217 	ldw	ra,8(sp)
100117c0:	dc400117 	ldw	r17,4(sp)
100117c4:	dc000017 	ldw	r16,0(sp)
100117c8:	dec00304 	addi	sp,sp,12
100117cc:	f800283a 	ret
100117d0:	00c002c4 	movi	r3,11
100117d4:	1887c83a 	sub	r3,r3,r2
100117d8:	88c6d83a 	srl	r3,r17,r3
100117dc:	8904983a 	sll	r2,r17,r4
100117e0:	01000434 	movhi	r4,16
100117e4:	213fffc4 	addi	r4,r4,-1
100117e8:	2941ffcc 	andi	r5,r5,2047
100117ec:	1906703a 	and	r3,r3,r4
100117f0:	800d883a 	mov	r6,r16
100117f4:	003fe906 	br	1001179c <__alt_data_end+0xf801179c>
100117f8:	000d883a 	mov	r6,zero
100117fc:	000b883a 	mov	r5,zero
10011800:	0007883a 	mov	r3,zero
10011804:	0005883a 	mov	r2,zero
10011808:	003fe406 	br	1001179c <__alt_data_end+0xf801179c>
1001180c:	0123c83a 	sub	r17,zero,r4
10011810:	003fd106 	br	10011758 <__alt_data_end+0xf8011758>

10011814 <__floatunsidf>:
10011814:	defffe04 	addi	sp,sp,-8
10011818:	dc000015 	stw	r16,0(sp)
1001181c:	dfc00115 	stw	ra,4(sp)
10011820:	2021883a 	mov	r16,r4
10011824:	20002226 	beq	r4,zero,100118b0 <__floatunsidf+0x9c>
10011828:	00118bc0 	call	100118bc <__clzsi2>
1001182c:	01010784 	movi	r4,1054
10011830:	2089c83a 	sub	r4,r4,r2
10011834:	01810cc4 	movi	r6,1075
10011838:	310dc83a 	sub	r6,r6,r4
1001183c:	00c007c4 	movi	r3,31
10011840:	1980120e 	bge	r3,r6,1001188c <__floatunsidf+0x78>
10011844:	00c104c4 	movi	r3,1043
10011848:	1907c83a 	sub	r3,r3,r4
1001184c:	80ca983a 	sll	r5,r16,r3
10011850:	00800434 	movhi	r2,16
10011854:	10bfffc4 	addi	r2,r2,-1
10011858:	2101ffcc 	andi	r4,r4,2047
1001185c:	0021883a 	mov	r16,zero
10011860:	288a703a 	and	r5,r5,r2
10011864:	2008953a 	slli	r4,r4,20
10011868:	00c00434 	movhi	r3,16
1001186c:	18ffffc4 	addi	r3,r3,-1
10011870:	28c6703a 	and	r3,r5,r3
10011874:	8005883a 	mov	r2,r16
10011878:	1906b03a 	or	r3,r3,r4
1001187c:	dfc00117 	ldw	ra,4(sp)
10011880:	dc000017 	ldw	r16,0(sp)
10011884:	dec00204 	addi	sp,sp,8
10011888:	f800283a 	ret
1001188c:	00c002c4 	movi	r3,11
10011890:	188bc83a 	sub	r5,r3,r2
10011894:	814ad83a 	srl	r5,r16,r5
10011898:	00c00434 	movhi	r3,16
1001189c:	18ffffc4 	addi	r3,r3,-1
100118a0:	81a0983a 	sll	r16,r16,r6
100118a4:	2101ffcc 	andi	r4,r4,2047
100118a8:	28ca703a 	and	r5,r5,r3
100118ac:	003fed06 	br	10011864 <__alt_data_end+0xf8011864>
100118b0:	0009883a 	mov	r4,zero
100118b4:	000b883a 	mov	r5,zero
100118b8:	003fea06 	br	10011864 <__alt_data_end+0xf8011864>

100118bc <__clzsi2>:
100118bc:	00bfffd4 	movui	r2,65535
100118c0:	11000536 	bltu	r2,r4,100118d8 <__clzsi2+0x1c>
100118c4:	00803fc4 	movi	r2,255
100118c8:	11000f36 	bltu	r2,r4,10011908 <__clzsi2+0x4c>
100118cc:	00800804 	movi	r2,32
100118d0:	0007883a 	mov	r3,zero
100118d4:	00000506 	br	100118ec <__clzsi2+0x30>
100118d8:	00804034 	movhi	r2,256
100118dc:	10bfffc4 	addi	r2,r2,-1
100118e0:	11000c2e 	bgeu	r2,r4,10011914 <__clzsi2+0x58>
100118e4:	00800204 	movi	r2,8
100118e8:	00c00604 	movi	r3,24
100118ec:	20c8d83a 	srl	r4,r4,r3
100118f0:	00c40074 	movhi	r3,4097
100118f4:	18d2d604 	addi	r3,r3,19288
100118f8:	1909883a 	add	r4,r3,r4
100118fc:	20c00003 	ldbu	r3,0(r4)
10011900:	10c5c83a 	sub	r2,r2,r3
10011904:	f800283a 	ret
10011908:	00800604 	movi	r2,24
1001190c:	00c00204 	movi	r3,8
10011910:	003ff606 	br	100118ec <__alt_data_end+0xf80118ec>
10011914:	00800404 	movi	r2,16
10011918:	1007883a 	mov	r3,r2
1001191c:	003ff306 	br	100118ec <__alt_data_end+0xf80118ec>

10011920 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011920:	defffe04 	addi	sp,sp,-8
10011924:	dfc00115 	stw	ra,4(sp)
10011928:	df000015 	stw	fp,0(sp)
1001192c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011930:	d0a00b17 	ldw	r2,-32724(gp)
10011934:	10000326 	beq	r2,zero,10011944 <alt_get_errno+0x24>
10011938:	d0a00b17 	ldw	r2,-32724(gp)
1001193c:	103ee83a 	callr	r2
10011940:	00000106 	br	10011948 <alt_get_errno+0x28>
10011944:	d0810504 	addi	r2,gp,1044
}
10011948:	e037883a 	mov	sp,fp
1001194c:	dfc00117 	ldw	ra,4(sp)
10011950:	df000017 	ldw	fp,0(sp)
10011954:	dec00204 	addi	sp,sp,8
10011958:	f800283a 	ret

1001195c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1001195c:	defffb04 	addi	sp,sp,-20
10011960:	dfc00415 	stw	ra,16(sp)
10011964:	df000315 	stw	fp,12(sp)
10011968:	df000304 	addi	fp,sp,12
1001196c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10011970:	e0bfff17 	ldw	r2,-4(fp)
10011974:	10000816 	blt	r2,zero,10011998 <close+0x3c>
10011978:	01400304 	movi	r5,12
1001197c:	e13fff17 	ldw	r4,-4(fp)
10011980:	0004b940 	call	10004b94 <__mulsi3>
10011984:	1007883a 	mov	r3,r2
10011988:	008400b4 	movhi	r2,4098
1001198c:	10af8104 	addi	r2,r2,-16892
10011990:	1885883a 	add	r2,r3,r2
10011994:	00000106 	br	1001199c <close+0x40>
10011998:	0005883a 	mov	r2,zero
1001199c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
100119a0:	e0bffd17 	ldw	r2,-12(fp)
100119a4:	10001926 	beq	r2,zero,10011a0c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
100119a8:	e0bffd17 	ldw	r2,-12(fp)
100119ac:	10800017 	ldw	r2,0(r2)
100119b0:	10800417 	ldw	r2,16(r2)
100119b4:	10000626 	beq	r2,zero,100119d0 <close+0x74>
100119b8:	e0bffd17 	ldw	r2,-12(fp)
100119bc:	10800017 	ldw	r2,0(r2)
100119c0:	10800417 	ldw	r2,16(r2)
100119c4:	e13ffd17 	ldw	r4,-12(fp)
100119c8:	103ee83a 	callr	r2
100119cc:	00000106 	br	100119d4 <close+0x78>
100119d0:	0005883a 	mov	r2,zero
100119d4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
100119d8:	e13fff17 	ldw	r4,-4(fp)
100119dc:	00120440 	call	10012044 <alt_release_fd>
    if (rval < 0)
100119e0:	e0bffe17 	ldw	r2,-8(fp)
100119e4:	1000070e 	bge	r2,zero,10011a04 <close+0xa8>
    {
      ALT_ERRNO = -rval;
100119e8:	00119200 	call	10011920 <alt_get_errno>
100119ec:	1007883a 	mov	r3,r2
100119f0:	e0bffe17 	ldw	r2,-8(fp)
100119f4:	0085c83a 	sub	r2,zero,r2
100119f8:	18800015 	stw	r2,0(r3)
      return -1;
100119fc:	00bfffc4 	movi	r2,-1
10011a00:	00000706 	br	10011a20 <close+0xc4>
    }
    return 0;
10011a04:	0005883a 	mov	r2,zero
10011a08:	00000506 	br	10011a20 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10011a0c:	00119200 	call	10011920 <alt_get_errno>
10011a10:	1007883a 	mov	r3,r2
10011a14:	00801444 	movi	r2,81
10011a18:	18800015 	stw	r2,0(r3)
    return -1;
10011a1c:	00bfffc4 	movi	r2,-1
  }
}
10011a20:	e037883a 	mov	sp,fp
10011a24:	dfc00117 	ldw	ra,4(sp)
10011a28:	df000017 	ldw	fp,0(sp)
10011a2c:	dec00204 	addi	sp,sp,8
10011a30:	f800283a 	ret

10011a34 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10011a34:	defffc04 	addi	sp,sp,-16
10011a38:	df000315 	stw	fp,12(sp)
10011a3c:	df000304 	addi	fp,sp,12
10011a40:	e13ffd15 	stw	r4,-12(fp)
10011a44:	e17ffe15 	stw	r5,-8(fp)
10011a48:	e1bfff15 	stw	r6,-4(fp)
  return len;
10011a4c:	e0bfff17 	ldw	r2,-4(fp)
}
10011a50:	e037883a 	mov	sp,fp
10011a54:	df000017 	ldw	fp,0(sp)
10011a58:	dec00104 	addi	sp,sp,4
10011a5c:	f800283a 	ret

10011a60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011a60:	defffe04 	addi	sp,sp,-8
10011a64:	dfc00115 	stw	ra,4(sp)
10011a68:	df000015 	stw	fp,0(sp)
10011a6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011a70:	d0a00b17 	ldw	r2,-32724(gp)
10011a74:	10000326 	beq	r2,zero,10011a84 <alt_get_errno+0x24>
10011a78:	d0a00b17 	ldw	r2,-32724(gp)
10011a7c:	103ee83a 	callr	r2
10011a80:	00000106 	br	10011a88 <alt_get_errno+0x28>
10011a84:	d0810504 	addi	r2,gp,1044
}
10011a88:	e037883a 	mov	sp,fp
10011a8c:	dfc00117 	ldw	ra,4(sp)
10011a90:	df000017 	ldw	fp,0(sp)
10011a94:	dec00204 	addi	sp,sp,8
10011a98:	f800283a 	ret

10011a9c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
10011a9c:	defffb04 	addi	sp,sp,-20
10011aa0:	dfc00415 	stw	ra,16(sp)
10011aa4:	df000315 	stw	fp,12(sp)
10011aa8:	df000304 	addi	fp,sp,12
10011aac:	e13ffe15 	stw	r4,-8(fp)
10011ab0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011ab4:	e0bffe17 	ldw	r2,-8(fp)
10011ab8:	10000816 	blt	r2,zero,10011adc <fstat+0x40>
10011abc:	01400304 	movi	r5,12
10011ac0:	e13ffe17 	ldw	r4,-8(fp)
10011ac4:	0004b940 	call	10004b94 <__mulsi3>
10011ac8:	1007883a 	mov	r3,r2
10011acc:	008400b4 	movhi	r2,4098
10011ad0:	10af8104 	addi	r2,r2,-16892
10011ad4:	1885883a 	add	r2,r3,r2
10011ad8:	00000106 	br	10011ae0 <fstat+0x44>
10011adc:	0005883a 	mov	r2,zero
10011ae0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10011ae4:	e0bffd17 	ldw	r2,-12(fp)
10011ae8:	10001026 	beq	r2,zero,10011b2c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10011aec:	e0bffd17 	ldw	r2,-12(fp)
10011af0:	10800017 	ldw	r2,0(r2)
10011af4:	10800817 	ldw	r2,32(r2)
10011af8:	10000726 	beq	r2,zero,10011b18 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
10011afc:	e0bffd17 	ldw	r2,-12(fp)
10011b00:	10800017 	ldw	r2,0(r2)
10011b04:	10800817 	ldw	r2,32(r2)
10011b08:	e17fff17 	ldw	r5,-4(fp)
10011b0c:	e13ffd17 	ldw	r4,-12(fp)
10011b10:	103ee83a 	callr	r2
10011b14:	00000a06 	br	10011b40 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10011b18:	e0bfff17 	ldw	r2,-4(fp)
10011b1c:	00c80004 	movi	r3,8192
10011b20:	10c00115 	stw	r3,4(r2)
      return 0;
10011b24:	0005883a 	mov	r2,zero
10011b28:	00000506 	br	10011b40 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10011b2c:	0011a600 	call	10011a60 <alt_get_errno>
10011b30:	1007883a 	mov	r3,r2
10011b34:	00801444 	movi	r2,81
10011b38:	18800015 	stw	r2,0(r3)
    return -1;
10011b3c:	00bfffc4 	movi	r2,-1
  }
}
10011b40:	e037883a 	mov	sp,fp
10011b44:	dfc00117 	ldw	ra,4(sp)
10011b48:	df000017 	ldw	fp,0(sp)
10011b4c:	dec00204 	addi	sp,sp,8
10011b50:	f800283a 	ret

10011b54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011b54:	defffe04 	addi	sp,sp,-8
10011b58:	dfc00115 	stw	ra,4(sp)
10011b5c:	df000015 	stw	fp,0(sp)
10011b60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011b64:	d0a00b17 	ldw	r2,-32724(gp)
10011b68:	10000326 	beq	r2,zero,10011b78 <alt_get_errno+0x24>
10011b6c:	d0a00b17 	ldw	r2,-32724(gp)
10011b70:	103ee83a 	callr	r2
10011b74:	00000106 	br	10011b7c <alt_get_errno+0x28>
10011b78:	d0810504 	addi	r2,gp,1044
}
10011b7c:	e037883a 	mov	sp,fp
10011b80:	dfc00117 	ldw	ra,4(sp)
10011b84:	df000017 	ldw	fp,0(sp)
10011b88:	dec00204 	addi	sp,sp,8
10011b8c:	f800283a 	ret

10011b90 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10011b90:	deffed04 	addi	sp,sp,-76
10011b94:	dfc01215 	stw	ra,72(sp)
10011b98:	df001115 	stw	fp,68(sp)
10011b9c:	df001104 	addi	fp,sp,68
10011ba0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011ba4:	e0bfff17 	ldw	r2,-4(fp)
10011ba8:	10000816 	blt	r2,zero,10011bcc <isatty+0x3c>
10011bac:	01400304 	movi	r5,12
10011bb0:	e13fff17 	ldw	r4,-4(fp)
10011bb4:	0004b940 	call	10004b94 <__mulsi3>
10011bb8:	1007883a 	mov	r3,r2
10011bbc:	008400b4 	movhi	r2,4098
10011bc0:	10af8104 	addi	r2,r2,-16892
10011bc4:	1885883a 	add	r2,r3,r2
10011bc8:	00000106 	br	10011bd0 <isatty+0x40>
10011bcc:	0005883a 	mov	r2,zero
10011bd0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10011bd4:	e0bfef17 	ldw	r2,-68(fp)
10011bd8:	10000e26 	beq	r2,zero,10011c14 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
10011bdc:	e0bfef17 	ldw	r2,-68(fp)
10011be0:	10800017 	ldw	r2,0(r2)
10011be4:	10800817 	ldw	r2,32(r2)
10011be8:	1000021e 	bne	r2,zero,10011bf4 <isatty+0x64>
    {
      return 1;
10011bec:	00800044 	movi	r2,1
10011bf0:	00000d06 	br	10011c28 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10011bf4:	e0bff004 	addi	r2,fp,-64
10011bf8:	100b883a 	mov	r5,r2
10011bfc:	e13fff17 	ldw	r4,-4(fp)
10011c00:	0011a9c0 	call	10011a9c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10011c04:	e0bff117 	ldw	r2,-60(fp)
10011c08:	10880020 	cmpeqi	r2,r2,8192
10011c0c:	10803fcc 	andi	r2,r2,255
10011c10:	00000506 	br	10011c28 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10011c14:	0011b540 	call	10011b54 <alt_get_errno>
10011c18:	1007883a 	mov	r3,r2
10011c1c:	00801444 	movi	r2,81
10011c20:	18800015 	stw	r2,0(r3)
    return 0;
10011c24:	0005883a 	mov	r2,zero
  }
}
10011c28:	e037883a 	mov	sp,fp
10011c2c:	dfc00117 	ldw	ra,4(sp)
10011c30:	df000017 	ldw	fp,0(sp)
10011c34:	dec00204 	addi	sp,sp,8
10011c38:	f800283a 	ret

10011c3c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10011c3c:	defffc04 	addi	sp,sp,-16
10011c40:	df000315 	stw	fp,12(sp)
10011c44:	df000304 	addi	fp,sp,12
10011c48:	e13ffd15 	stw	r4,-12(fp)
10011c4c:	e17ffe15 	stw	r5,-8(fp)
10011c50:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10011c54:	e0fffe17 	ldw	r3,-8(fp)
10011c58:	e0bffd17 	ldw	r2,-12(fp)
10011c5c:	18800c26 	beq	r3,r2,10011c90 <alt_load_section+0x54>
  {
    while( to != end )
10011c60:	00000806 	br	10011c84 <alt_load_section+0x48>
    {
      *to++ = *from++;
10011c64:	e0bffe17 	ldw	r2,-8(fp)
10011c68:	10c00104 	addi	r3,r2,4
10011c6c:	e0fffe15 	stw	r3,-8(fp)
10011c70:	e0fffd17 	ldw	r3,-12(fp)
10011c74:	19000104 	addi	r4,r3,4
10011c78:	e13ffd15 	stw	r4,-12(fp)
10011c7c:	18c00017 	ldw	r3,0(r3)
10011c80:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10011c84:	e0fffe17 	ldw	r3,-8(fp)
10011c88:	e0bfff17 	ldw	r2,-4(fp)
10011c8c:	18bff51e 	bne	r3,r2,10011c64 <__alt_data_end+0xf8011c64>
    {
      *to++ = *from++;
    }
  }
}
10011c90:	0001883a 	nop
10011c94:	e037883a 	mov	sp,fp
10011c98:	df000017 	ldw	fp,0(sp)
10011c9c:	dec00104 	addi	sp,sp,4
10011ca0:	f800283a 	ret

10011ca4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10011ca4:	defffe04 	addi	sp,sp,-8
10011ca8:	dfc00115 	stw	ra,4(sp)
10011cac:	df000015 	stw	fp,0(sp)
10011cb0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10011cb4:	018400b4 	movhi	r6,4098
10011cb8:	31b40904 	addi	r6,r6,-12252
10011cbc:	01440074 	movhi	r5,4097
10011cc0:	29532304 	addi	r5,r5,19596
10011cc4:	010400b4 	movhi	r4,4098
10011cc8:	21340904 	addi	r4,r4,-12252
10011ccc:	0011c3c0 	call	10011c3c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10011cd0:	01840034 	movhi	r6,4096
10011cd4:	31808c04 	addi	r6,r6,560
10011cd8:	01440034 	movhi	r5,4096
10011cdc:	29400804 	addi	r5,r5,32
10011ce0:	01040034 	movhi	r4,4096
10011ce4:	21000804 	addi	r4,r4,32
10011ce8:	0011c3c0 	call	10011c3c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10011cec:	01840074 	movhi	r6,4097
10011cf0:	31932304 	addi	r6,r6,19596
10011cf4:	01440074 	movhi	r5,4097
10011cf8:	29505004 	addi	r5,r5,16704
10011cfc:	01040074 	movhi	r4,4097
10011d00:	21105004 	addi	r4,r4,16704
10011d04:	0011c3c0 	call	10011c3c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10011d08:	00130880 	call	10013088 <alt_dcache_flush_all>
  alt_icache_flush_all();
10011d0c:	00132480 	call	10013248 <alt_icache_flush_all>
}
10011d10:	0001883a 	nop
10011d14:	e037883a 	mov	sp,fp
10011d18:	dfc00117 	ldw	ra,4(sp)
10011d1c:	df000017 	ldw	fp,0(sp)
10011d20:	dec00204 	addi	sp,sp,8
10011d24:	f800283a 	ret

10011d28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011d28:	defffe04 	addi	sp,sp,-8
10011d2c:	dfc00115 	stw	ra,4(sp)
10011d30:	df000015 	stw	fp,0(sp)
10011d34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011d38:	d0a00b17 	ldw	r2,-32724(gp)
10011d3c:	10000326 	beq	r2,zero,10011d4c <alt_get_errno+0x24>
10011d40:	d0a00b17 	ldw	r2,-32724(gp)
10011d44:	103ee83a 	callr	r2
10011d48:	00000106 	br	10011d50 <alt_get_errno+0x28>
10011d4c:	d0810504 	addi	r2,gp,1044
}
10011d50:	e037883a 	mov	sp,fp
10011d54:	dfc00117 	ldw	ra,4(sp)
10011d58:	df000017 	ldw	fp,0(sp)
10011d5c:	dec00204 	addi	sp,sp,8
10011d60:	f800283a 	ret

10011d64 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10011d64:	defff904 	addi	sp,sp,-28
10011d68:	dfc00615 	stw	ra,24(sp)
10011d6c:	df000515 	stw	fp,20(sp)
10011d70:	df000504 	addi	fp,sp,20
10011d74:	e13ffd15 	stw	r4,-12(fp)
10011d78:	e17ffe15 	stw	r5,-8(fp)
10011d7c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10011d80:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011d84:	e0bffd17 	ldw	r2,-12(fp)
10011d88:	10000816 	blt	r2,zero,10011dac <lseek+0x48>
10011d8c:	01400304 	movi	r5,12
10011d90:	e13ffd17 	ldw	r4,-12(fp)
10011d94:	0004b940 	call	10004b94 <__mulsi3>
10011d98:	1007883a 	mov	r3,r2
10011d9c:	008400b4 	movhi	r2,4098
10011da0:	10af8104 	addi	r2,r2,-16892
10011da4:	1885883a 	add	r2,r3,r2
10011da8:	00000106 	br	10011db0 <lseek+0x4c>
10011dac:	0005883a 	mov	r2,zero
10011db0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10011db4:	e0bffc17 	ldw	r2,-16(fp)
10011db8:	10001026 	beq	r2,zero,10011dfc <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10011dbc:	e0bffc17 	ldw	r2,-16(fp)
10011dc0:	10800017 	ldw	r2,0(r2)
10011dc4:	10800717 	ldw	r2,28(r2)
10011dc8:	10000926 	beq	r2,zero,10011df0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10011dcc:	e0bffc17 	ldw	r2,-16(fp)
10011dd0:	10800017 	ldw	r2,0(r2)
10011dd4:	10800717 	ldw	r2,28(r2)
10011dd8:	e1bfff17 	ldw	r6,-4(fp)
10011ddc:	e17ffe17 	ldw	r5,-8(fp)
10011de0:	e13ffc17 	ldw	r4,-16(fp)
10011de4:	103ee83a 	callr	r2
10011de8:	e0bffb15 	stw	r2,-20(fp)
10011dec:	00000506 	br	10011e04 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
10011df0:	00bfde84 	movi	r2,-134
10011df4:	e0bffb15 	stw	r2,-20(fp)
10011df8:	00000206 	br	10011e04 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
10011dfc:	00bfebc4 	movi	r2,-81
10011e00:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10011e04:	e0bffb17 	ldw	r2,-20(fp)
10011e08:	1000070e 	bge	r2,zero,10011e28 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10011e0c:	0011d280 	call	10011d28 <alt_get_errno>
10011e10:	1007883a 	mov	r3,r2
10011e14:	e0bffb17 	ldw	r2,-20(fp)
10011e18:	0085c83a 	sub	r2,zero,r2
10011e1c:	18800015 	stw	r2,0(r3)
    rc = -1;
10011e20:	00bfffc4 	movi	r2,-1
10011e24:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10011e28:	e0bffb17 	ldw	r2,-20(fp)
}
10011e2c:	e037883a 	mov	sp,fp
10011e30:	dfc00117 	ldw	ra,4(sp)
10011e34:	df000017 	ldw	fp,0(sp)
10011e38:	dec00204 	addi	sp,sp,8
10011e3c:	f800283a 	ret

10011e40 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10011e40:	defffd04 	addi	sp,sp,-12
10011e44:	dfc00215 	stw	ra,8(sp)
10011e48:	df000115 	stw	fp,4(sp)
10011e4c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10011e50:	0009883a 	mov	r4,zero
10011e54:	00123180 	call	10012318 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10011e58:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10011e5c:	00123500 	call	10012350 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10011e60:	01840074 	movhi	r6,4097
10011e64:	31931904 	addi	r6,r6,19556
10011e68:	01440074 	movhi	r5,4097
10011e6c:	29531904 	addi	r5,r5,19556
10011e70:	01040074 	movhi	r4,4097
10011e74:	21131904 	addi	r4,r4,19556
10011e78:	00135ec0 	call	100135ec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10011e7c:	00131880 	call	10013188 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10011e80:	01040074 	movhi	r4,4097
10011e84:	210c7a04 	addi	r4,r4,12776
10011e88:	0013dac0 	call	10013dac <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10011e8c:	d0810617 	ldw	r2,1048(gp)
10011e90:	d0c10717 	ldw	r3,1052(gp)
10011e94:	d1010817 	ldw	r4,1056(gp)
10011e98:	200d883a 	mov	r6,r4
10011e9c:	180b883a 	mov	r5,r3
10011ea0:	1009883a 	mov	r4,r2
10011ea4:	000266c0 	call	1000266c <main>
10011ea8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10011eac:	01000044 	movi	r4,1
10011eb0:	001195c0 	call	1001195c <close>
  exit (result);
10011eb4:	e13fff17 	ldw	r4,-4(fp)
10011eb8:	0013dc00 	call	10013dc0 <exit>

10011ebc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10011ebc:	defffe04 	addi	sp,sp,-8
10011ec0:	df000115 	stw	fp,4(sp)
10011ec4:	df000104 	addi	fp,sp,4
10011ec8:	e13fff15 	stw	r4,-4(fp)
}
10011ecc:	0001883a 	nop
10011ed0:	e037883a 	mov	sp,fp
10011ed4:	df000017 	ldw	fp,0(sp)
10011ed8:	dec00104 	addi	sp,sp,4
10011edc:	f800283a 	ret

10011ee0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10011ee0:	defffe04 	addi	sp,sp,-8
10011ee4:	df000115 	stw	fp,4(sp)
10011ee8:	df000104 	addi	fp,sp,4
10011eec:	e13fff15 	stw	r4,-4(fp)
}
10011ef0:	0001883a 	nop
10011ef4:	e037883a 	mov	sp,fp
10011ef8:	df000017 	ldw	fp,0(sp)
10011efc:	dec00104 	addi	sp,sp,4
10011f00:	f800283a 	ret

10011f04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011f04:	defffe04 	addi	sp,sp,-8
10011f08:	dfc00115 	stw	ra,4(sp)
10011f0c:	df000015 	stw	fp,0(sp)
10011f10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011f14:	d0a00b17 	ldw	r2,-32724(gp)
10011f18:	10000326 	beq	r2,zero,10011f28 <alt_get_errno+0x24>
10011f1c:	d0a00b17 	ldw	r2,-32724(gp)
10011f20:	103ee83a 	callr	r2
10011f24:	00000106 	br	10011f2c <alt_get_errno+0x28>
10011f28:	d0810504 	addi	r2,gp,1044
}
10011f2c:	e037883a 	mov	sp,fp
10011f30:	dfc00117 	ldw	ra,4(sp)
10011f34:	df000017 	ldw	fp,0(sp)
10011f38:	dec00204 	addi	sp,sp,8
10011f3c:	f800283a 	ret

10011f40 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10011f40:	defff904 	addi	sp,sp,-28
10011f44:	dfc00615 	stw	ra,24(sp)
10011f48:	df000515 	stw	fp,20(sp)
10011f4c:	df000504 	addi	fp,sp,20
10011f50:	e13ffd15 	stw	r4,-12(fp)
10011f54:	e17ffe15 	stw	r5,-8(fp)
10011f58:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011f5c:	e0bffd17 	ldw	r2,-12(fp)
10011f60:	10000816 	blt	r2,zero,10011f84 <read+0x44>
10011f64:	01400304 	movi	r5,12
10011f68:	e13ffd17 	ldw	r4,-12(fp)
10011f6c:	0004b940 	call	10004b94 <__mulsi3>
10011f70:	1007883a 	mov	r3,r2
10011f74:	008400b4 	movhi	r2,4098
10011f78:	10af8104 	addi	r2,r2,-16892
10011f7c:	1885883a 	add	r2,r3,r2
10011f80:	00000106 	br	10011f88 <read+0x48>
10011f84:	0005883a 	mov	r2,zero
10011f88:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10011f8c:	e0bffb17 	ldw	r2,-20(fp)
10011f90:	10002226 	beq	r2,zero,1001201c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10011f94:	e0bffb17 	ldw	r2,-20(fp)
10011f98:	10800217 	ldw	r2,8(r2)
10011f9c:	108000cc 	andi	r2,r2,3
10011fa0:	10800060 	cmpeqi	r2,r2,1
10011fa4:	1000181e 	bne	r2,zero,10012008 <read+0xc8>
        (fd->dev->read))
10011fa8:	e0bffb17 	ldw	r2,-20(fp)
10011fac:	10800017 	ldw	r2,0(r2)
10011fb0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10011fb4:	10001426 	beq	r2,zero,10012008 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10011fb8:	e0bffb17 	ldw	r2,-20(fp)
10011fbc:	10800017 	ldw	r2,0(r2)
10011fc0:	10800517 	ldw	r2,20(r2)
10011fc4:	e0ffff17 	ldw	r3,-4(fp)
10011fc8:	180d883a 	mov	r6,r3
10011fcc:	e17ffe17 	ldw	r5,-8(fp)
10011fd0:	e13ffb17 	ldw	r4,-20(fp)
10011fd4:	103ee83a 	callr	r2
10011fd8:	e0bffc15 	stw	r2,-16(fp)
10011fdc:	e0bffc17 	ldw	r2,-16(fp)
10011fe0:	1000070e 	bge	r2,zero,10012000 <read+0xc0>
        {
          ALT_ERRNO = -rval;
10011fe4:	0011f040 	call	10011f04 <alt_get_errno>
10011fe8:	1007883a 	mov	r3,r2
10011fec:	e0bffc17 	ldw	r2,-16(fp)
10011ff0:	0085c83a 	sub	r2,zero,r2
10011ff4:	18800015 	stw	r2,0(r3)
          return -1;
10011ff8:	00bfffc4 	movi	r2,-1
10011ffc:	00000c06 	br	10012030 <read+0xf0>
        }
        return rval;
10012000:	e0bffc17 	ldw	r2,-16(fp)
10012004:	00000a06 	br	10012030 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
10012008:	0011f040 	call	10011f04 <alt_get_errno>
1001200c:	1007883a 	mov	r3,r2
10012010:	00800344 	movi	r2,13
10012014:	18800015 	stw	r2,0(r3)
10012018:	00000406 	br	1001202c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1001201c:	0011f040 	call	10011f04 <alt_get_errno>
10012020:	1007883a 	mov	r3,r2
10012024:	00801444 	movi	r2,81
10012028:	18800015 	stw	r2,0(r3)
  }
  return -1;
1001202c:	00bfffc4 	movi	r2,-1
}
10012030:	e037883a 	mov	sp,fp
10012034:	dfc00117 	ldw	ra,4(sp)
10012038:	df000017 	ldw	fp,0(sp)
1001203c:	dec00204 	addi	sp,sp,8
10012040:	f800283a 	ret

10012044 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10012044:	defffc04 	addi	sp,sp,-16
10012048:	dfc00315 	stw	ra,12(sp)
1001204c:	df000215 	stw	fp,8(sp)
10012050:	dc000115 	stw	r16,4(sp)
10012054:	df000204 	addi	fp,sp,8
10012058:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1001205c:	e0bffe17 	ldw	r2,-8(fp)
10012060:	108000d0 	cmplti	r2,r2,3
10012064:	1000111e 	bne	r2,zero,100120ac <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10012068:	040400b4 	movhi	r16,4098
1001206c:	842f8104 	addi	r16,r16,-16892
10012070:	e0bffe17 	ldw	r2,-8(fp)
10012074:	01400304 	movi	r5,12
10012078:	1009883a 	mov	r4,r2
1001207c:	0004b940 	call	10004b94 <__mulsi3>
10012080:	8085883a 	add	r2,r16,r2
10012084:	10800204 	addi	r2,r2,8
10012088:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1001208c:	040400b4 	movhi	r16,4098
10012090:	842f8104 	addi	r16,r16,-16892
10012094:	e0bffe17 	ldw	r2,-8(fp)
10012098:	01400304 	movi	r5,12
1001209c:	1009883a 	mov	r4,r2
100120a0:	0004b940 	call	10004b94 <__mulsi3>
100120a4:	8085883a 	add	r2,r16,r2
100120a8:	10000015 	stw	zero,0(r2)
  }
}
100120ac:	0001883a 	nop
100120b0:	e6ffff04 	addi	sp,fp,-4
100120b4:	dfc00217 	ldw	ra,8(sp)
100120b8:	df000117 	ldw	fp,4(sp)
100120bc:	dc000017 	ldw	r16,0(sp)
100120c0:	dec00304 	addi	sp,sp,12
100120c4:	f800283a 	ret

100120c8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
100120c8:	defff904 	addi	sp,sp,-28
100120cc:	df000615 	stw	fp,24(sp)
100120d0:	df000604 	addi	fp,sp,24
100120d4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100120d8:	0005303a 	rdctl	r2,status
100120dc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100120e0:	e0fffe17 	ldw	r3,-8(fp)
100120e4:	00bfff84 	movi	r2,-2
100120e8:	1884703a 	and	r2,r3,r2
100120ec:	1001703a 	wrctl	status,r2
  
  return context;
100120f0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
100120f4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
100120f8:	d0a00c17 	ldw	r2,-32720(gp)
100120fc:	10c000c4 	addi	r3,r2,3
10012100:	00bfff04 	movi	r2,-4
10012104:	1884703a 	and	r2,r3,r2
10012108:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1001210c:	d0e00c17 	ldw	r3,-32720(gp)
10012110:	e0bfff17 	ldw	r2,-4(fp)
10012114:	1887883a 	add	r3,r3,r2
10012118:	00860034 	movhi	r2,6144
1001211c:	10800004 	addi	r2,r2,0
10012120:	10c0062e 	bgeu	r2,r3,1001213c <sbrk+0x74>
10012124:	e0bffb17 	ldw	r2,-20(fp)
10012128:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001212c:	e0bffa17 	ldw	r2,-24(fp)
10012130:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10012134:	00bfffc4 	movi	r2,-1
10012138:	00000b06 	br	10012168 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1001213c:	d0a00c17 	ldw	r2,-32720(gp)
10012140:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
10012144:	d0e00c17 	ldw	r3,-32720(gp)
10012148:	e0bfff17 	ldw	r2,-4(fp)
1001214c:	1885883a 	add	r2,r3,r2
10012150:	d0a00c15 	stw	r2,-32720(gp)
10012154:	e0bffb17 	ldw	r2,-20(fp)
10012158:	e0bffc15 	stw	r2,-16(fp)
1001215c:	e0bffc17 	ldw	r2,-16(fp)
10012160:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10012164:	e0bffd17 	ldw	r2,-12(fp)
} 
10012168:	e037883a 	mov	sp,fp
1001216c:	df000017 	ldw	fp,0(sp)
10012170:	dec00104 	addi	sp,sp,4
10012174:	f800283a 	ret

10012178 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
10012178:	defffd04 	addi	sp,sp,-12
1001217c:	dfc00215 	stw	ra,8(sp)
10012180:	df000115 	stw	fp,4(sp)
10012184:	df000104 	addi	fp,sp,4
10012188:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1001218c:	e13fff17 	ldw	r4,-4(fp)
10012190:	0012f300 	call	10012f30 <alt_busy_sleep>
}
10012194:	e037883a 	mov	sp,fp
10012198:	dfc00117 	ldw	ra,4(sp)
1001219c:	df000017 	ldw	fp,0(sp)
100121a0:	dec00204 	addi	sp,sp,8
100121a4:	f800283a 	ret

100121a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100121a8:	defffe04 	addi	sp,sp,-8
100121ac:	dfc00115 	stw	ra,4(sp)
100121b0:	df000015 	stw	fp,0(sp)
100121b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100121b8:	d0a00b17 	ldw	r2,-32724(gp)
100121bc:	10000326 	beq	r2,zero,100121cc <alt_get_errno+0x24>
100121c0:	d0a00b17 	ldw	r2,-32724(gp)
100121c4:	103ee83a 	callr	r2
100121c8:	00000106 	br	100121d0 <alt_get_errno+0x28>
100121cc:	d0810504 	addi	r2,gp,1044
}
100121d0:	e037883a 	mov	sp,fp
100121d4:	dfc00117 	ldw	ra,4(sp)
100121d8:	df000017 	ldw	fp,0(sp)
100121dc:	dec00204 	addi	sp,sp,8
100121e0:	f800283a 	ret

100121e4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
100121e4:	defff904 	addi	sp,sp,-28
100121e8:	dfc00615 	stw	ra,24(sp)
100121ec:	df000515 	stw	fp,20(sp)
100121f0:	df000504 	addi	fp,sp,20
100121f4:	e13ffd15 	stw	r4,-12(fp)
100121f8:	e17ffe15 	stw	r5,-8(fp)
100121fc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10012200:	e0bffd17 	ldw	r2,-12(fp)
10012204:	10000816 	blt	r2,zero,10012228 <write+0x44>
10012208:	01400304 	movi	r5,12
1001220c:	e13ffd17 	ldw	r4,-12(fp)
10012210:	0004b940 	call	10004b94 <__mulsi3>
10012214:	1007883a 	mov	r3,r2
10012218:	008400b4 	movhi	r2,4098
1001221c:	10af8104 	addi	r2,r2,-16892
10012220:	1885883a 	add	r2,r3,r2
10012224:	00000106 	br	1001222c <write+0x48>
10012228:	0005883a 	mov	r2,zero
1001222c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10012230:	e0bffb17 	ldw	r2,-20(fp)
10012234:	10002126 	beq	r2,zero,100122bc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10012238:	e0bffb17 	ldw	r2,-20(fp)
1001223c:	10800217 	ldw	r2,8(r2)
10012240:	108000cc 	andi	r2,r2,3
10012244:	10001826 	beq	r2,zero,100122a8 <write+0xc4>
10012248:	e0bffb17 	ldw	r2,-20(fp)
1001224c:	10800017 	ldw	r2,0(r2)
10012250:	10800617 	ldw	r2,24(r2)
10012254:	10001426 	beq	r2,zero,100122a8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10012258:	e0bffb17 	ldw	r2,-20(fp)
1001225c:	10800017 	ldw	r2,0(r2)
10012260:	10800617 	ldw	r2,24(r2)
10012264:	e0ffff17 	ldw	r3,-4(fp)
10012268:	180d883a 	mov	r6,r3
1001226c:	e17ffe17 	ldw	r5,-8(fp)
10012270:	e13ffb17 	ldw	r4,-20(fp)
10012274:	103ee83a 	callr	r2
10012278:	e0bffc15 	stw	r2,-16(fp)
1001227c:	e0bffc17 	ldw	r2,-16(fp)
10012280:	1000070e 	bge	r2,zero,100122a0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
10012284:	00121a80 	call	100121a8 <alt_get_errno>
10012288:	1007883a 	mov	r3,r2
1001228c:	e0bffc17 	ldw	r2,-16(fp)
10012290:	0085c83a 	sub	r2,zero,r2
10012294:	18800015 	stw	r2,0(r3)
        return -1;
10012298:	00bfffc4 	movi	r2,-1
1001229c:	00000c06 	br	100122d0 <write+0xec>
      }
      return rval;
100122a0:	e0bffc17 	ldw	r2,-16(fp)
100122a4:	00000a06 	br	100122d0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
100122a8:	00121a80 	call	100121a8 <alt_get_errno>
100122ac:	1007883a 	mov	r3,r2
100122b0:	00800344 	movi	r2,13
100122b4:	18800015 	stw	r2,0(r3)
100122b8:	00000406 	br	100122cc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
100122bc:	00121a80 	call	100121a8 <alt_get_errno>
100122c0:	1007883a 	mov	r3,r2
100122c4:	00801444 	movi	r2,81
100122c8:	18800015 	stw	r2,0(r3)
  }
  return -1;
100122cc:	00bfffc4 	movi	r2,-1
}
100122d0:	e037883a 	mov	sp,fp
100122d4:	dfc00117 	ldw	ra,4(sp)
100122d8:	df000017 	ldw	fp,0(sp)
100122dc:	dec00204 	addi	sp,sp,8
100122e0:	f800283a 	ret

100122e4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
100122e4:	defffd04 	addi	sp,sp,-12
100122e8:	dfc00215 	stw	ra,8(sp)
100122ec:	df000115 	stw	fp,4(sp)
100122f0:	df000104 	addi	fp,sp,4
100122f4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
100122f8:	d1600804 	addi	r5,gp,-32736
100122fc:	e13fff17 	ldw	r4,-4(fp)
10012300:	00130e40 	call	100130e4 <alt_dev_llist_insert>
}
10012304:	e037883a 	mov	sp,fp
10012308:	dfc00117 	ldw	ra,4(sp)
1001230c:	df000017 	ldw	fp,0(sp)
10012310:	dec00204 	addi	sp,sp,8
10012314:	f800283a 	ret

10012318 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10012318:	defffd04 	addi	sp,sp,-12
1001231c:	dfc00215 	stw	ra,8(sp)
10012320:	df000115 	stw	fp,4(sp)
10012324:	df000104 	addi	fp,sp,4
10012328:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1001232c:	0013a900 	call	10013a90 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10012330:	00800044 	movi	r2,1
10012334:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10012338:	0001883a 	nop
1001233c:	e037883a 	mov	sp,fp
10012340:	dfc00117 	ldw	ra,4(sp)
10012344:	df000017 	ldw	fp,0(sp)
10012348:	dec00204 	addi	sp,sp,8
1001234c:	f800283a 	ret

10012350 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10012350:	defffe04 	addi	sp,sp,-8
10012354:	dfc00115 	stw	ra,4(sp)
10012358:	df000015 	stw	fp,0(sp)
1001235c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10012360:	000d883a 	mov	r6,zero
10012364:	000b883a 	mov	r5,zero
10012368:	010400b4 	movhi	r4,4098
1001236c:	212feb04 	addi	r4,r4,-16468
10012370:	00125000 	call	10012500 <altera_avalon_jtag_uart_init>
10012374:	010400b4 	movhi	r4,4098
10012378:	212fe104 	addi	r4,r4,-16508
1001237c:	00122e40 	call	100122e4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10012380:	0001883a 	nop
}
10012384:	0001883a 	nop
10012388:	e037883a 	mov	sp,fp
1001238c:	dfc00117 	ldw	ra,4(sp)
10012390:	df000017 	ldw	fp,0(sp)
10012394:	dec00204 	addi	sp,sp,8
10012398:	f800283a 	ret

1001239c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1001239c:	defffa04 	addi	sp,sp,-24
100123a0:	dfc00515 	stw	ra,20(sp)
100123a4:	df000415 	stw	fp,16(sp)
100123a8:	df000404 	addi	fp,sp,16
100123ac:	e13ffd15 	stw	r4,-12(fp)
100123b0:	e17ffe15 	stw	r5,-8(fp)
100123b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100123b8:	e0bffd17 	ldw	r2,-12(fp)
100123bc:	10800017 	ldw	r2,0(r2)
100123c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
100123c4:	e0bffc17 	ldw	r2,-16(fp)
100123c8:	10c00a04 	addi	r3,r2,40
100123cc:	e0bffd17 	ldw	r2,-12(fp)
100123d0:	10800217 	ldw	r2,8(r2)
100123d4:	100f883a 	mov	r7,r2
100123d8:	e1bfff17 	ldw	r6,-4(fp)
100123dc:	e17ffe17 	ldw	r5,-8(fp)
100123e0:	1809883a 	mov	r4,r3
100123e4:	00129c40 	call	100129c4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
100123e8:	e037883a 	mov	sp,fp
100123ec:	dfc00117 	ldw	ra,4(sp)
100123f0:	df000017 	ldw	fp,0(sp)
100123f4:	dec00204 	addi	sp,sp,8
100123f8:	f800283a 	ret

100123fc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
100123fc:	defffa04 	addi	sp,sp,-24
10012400:	dfc00515 	stw	ra,20(sp)
10012404:	df000415 	stw	fp,16(sp)
10012408:	df000404 	addi	fp,sp,16
1001240c:	e13ffd15 	stw	r4,-12(fp)
10012410:	e17ffe15 	stw	r5,-8(fp)
10012414:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10012418:	e0bffd17 	ldw	r2,-12(fp)
1001241c:	10800017 	ldw	r2,0(r2)
10012420:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10012424:	e0bffc17 	ldw	r2,-16(fp)
10012428:	10c00a04 	addi	r3,r2,40
1001242c:	e0bffd17 	ldw	r2,-12(fp)
10012430:	10800217 	ldw	r2,8(r2)
10012434:	100f883a 	mov	r7,r2
10012438:	e1bfff17 	ldw	r6,-4(fp)
1001243c:	e17ffe17 	ldw	r5,-8(fp)
10012440:	1809883a 	mov	r4,r3
10012444:	0012be00 	call	10012be0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10012448:	e037883a 	mov	sp,fp
1001244c:	dfc00117 	ldw	ra,4(sp)
10012450:	df000017 	ldw	fp,0(sp)
10012454:	dec00204 	addi	sp,sp,8
10012458:	f800283a 	ret

1001245c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1001245c:	defffc04 	addi	sp,sp,-16
10012460:	dfc00315 	stw	ra,12(sp)
10012464:	df000215 	stw	fp,8(sp)
10012468:	df000204 	addi	fp,sp,8
1001246c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10012470:	e0bfff17 	ldw	r2,-4(fp)
10012474:	10800017 	ldw	r2,0(r2)
10012478:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1001247c:	e0bffe17 	ldw	r2,-8(fp)
10012480:	10c00a04 	addi	r3,r2,40
10012484:	e0bfff17 	ldw	r2,-4(fp)
10012488:	10800217 	ldw	r2,8(r2)
1001248c:	100b883a 	mov	r5,r2
10012490:	1809883a 	mov	r4,r3
10012494:	001286c0 	call	1001286c <altera_avalon_jtag_uart_close>
}
10012498:	e037883a 	mov	sp,fp
1001249c:	dfc00117 	ldw	ra,4(sp)
100124a0:	df000017 	ldw	fp,0(sp)
100124a4:	dec00204 	addi	sp,sp,8
100124a8:	f800283a 	ret

100124ac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
100124ac:	defffa04 	addi	sp,sp,-24
100124b0:	dfc00515 	stw	ra,20(sp)
100124b4:	df000415 	stw	fp,16(sp)
100124b8:	df000404 	addi	fp,sp,16
100124bc:	e13ffd15 	stw	r4,-12(fp)
100124c0:	e17ffe15 	stw	r5,-8(fp)
100124c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
100124c8:	e0bffd17 	ldw	r2,-12(fp)
100124cc:	10800017 	ldw	r2,0(r2)
100124d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
100124d4:	e0bffc17 	ldw	r2,-16(fp)
100124d8:	10800a04 	addi	r2,r2,40
100124dc:	e1bfff17 	ldw	r6,-4(fp)
100124e0:	e17ffe17 	ldw	r5,-8(fp)
100124e4:	1009883a 	mov	r4,r2
100124e8:	00128d40 	call	100128d4 <altera_avalon_jtag_uart_ioctl>
}
100124ec:	e037883a 	mov	sp,fp
100124f0:	dfc00117 	ldw	ra,4(sp)
100124f4:	df000017 	ldw	fp,0(sp)
100124f8:	dec00204 	addi	sp,sp,8
100124fc:	f800283a 	ret

10012500 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10012500:	defffa04 	addi	sp,sp,-24
10012504:	dfc00515 	stw	ra,20(sp)
10012508:	df000415 	stw	fp,16(sp)
1001250c:	df000404 	addi	fp,sp,16
10012510:	e13ffd15 	stw	r4,-12(fp)
10012514:	e17ffe15 	stw	r5,-8(fp)
10012518:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1001251c:	e0bffd17 	ldw	r2,-12(fp)
10012520:	00c00044 	movi	r3,1
10012524:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10012528:	e0bffd17 	ldw	r2,-12(fp)
1001252c:	10800017 	ldw	r2,0(r2)
10012530:	10800104 	addi	r2,r2,4
10012534:	1007883a 	mov	r3,r2
10012538:	e0bffd17 	ldw	r2,-12(fp)
1001253c:	10800817 	ldw	r2,32(r2)
10012540:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10012544:	e0bffe17 	ldw	r2,-8(fp)
10012548:	e0ffff17 	ldw	r3,-4(fp)
1001254c:	d8000015 	stw	zero,0(sp)
10012550:	e1fffd17 	ldw	r7,-12(fp)
10012554:	01840074 	movhi	r6,4097
10012558:	31897004 	addi	r6,r6,9664
1001255c:	180b883a 	mov	r5,r3
10012560:	1009883a 	mov	r4,r2
10012564:	00132680 	call	10013268 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10012568:	e0bffd17 	ldw	r2,-12(fp)
1001256c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10012570:	e0bffd17 	ldw	r2,-12(fp)
10012574:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10012578:	d0c10a17 	ldw	r3,1064(gp)
1001257c:	e1fffd17 	ldw	r7,-12(fp)
10012580:	01840074 	movhi	r6,4097
10012584:	3189f304 	addi	r6,r6,10188
10012588:	180b883a 	mov	r5,r3
1001258c:	1009883a 	mov	r4,r2
10012590:	0012e040 	call	10012e04 <alt_alarm_start>
10012594:	1000040e 	bge	r2,zero,100125a8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10012598:	e0fffd17 	ldw	r3,-12(fp)
1001259c:	00a00034 	movhi	r2,32768
100125a0:	10bfffc4 	addi	r2,r2,-1
100125a4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
100125a8:	0001883a 	nop
100125ac:	e037883a 	mov	sp,fp
100125b0:	dfc00117 	ldw	ra,4(sp)
100125b4:	df000017 	ldw	fp,0(sp)
100125b8:	dec00204 	addi	sp,sp,8
100125bc:	f800283a 	ret

100125c0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
100125c0:	defff804 	addi	sp,sp,-32
100125c4:	df000715 	stw	fp,28(sp)
100125c8:	df000704 	addi	fp,sp,28
100125cc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
100125d0:	e0bfff17 	ldw	r2,-4(fp)
100125d4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
100125d8:	e0bffb17 	ldw	r2,-20(fp)
100125dc:	10800017 	ldw	r2,0(r2)
100125e0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100125e4:	e0bffc17 	ldw	r2,-16(fp)
100125e8:	10800104 	addi	r2,r2,4
100125ec:	10800037 	ldwio	r2,0(r2)
100125f0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
100125f4:	e0bffd17 	ldw	r2,-12(fp)
100125f8:	1080c00c 	andi	r2,r2,768
100125fc:	10006d26 	beq	r2,zero,100127b4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10012600:	e0bffd17 	ldw	r2,-12(fp)
10012604:	1080400c 	andi	r2,r2,256
10012608:	10003526 	beq	r2,zero,100126e0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1001260c:	00800074 	movhi	r2,1
10012610:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012614:	e0bffb17 	ldw	r2,-20(fp)
10012618:	10800a17 	ldw	r2,40(r2)
1001261c:	10800044 	addi	r2,r2,1
10012620:	1081ffcc 	andi	r2,r2,2047
10012624:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10012628:	e0bffb17 	ldw	r2,-20(fp)
1001262c:	10c00b17 	ldw	r3,44(r2)
10012630:	e0bffe17 	ldw	r2,-8(fp)
10012634:	18801526 	beq	r3,r2,1001268c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10012638:	e0bffc17 	ldw	r2,-16(fp)
1001263c:	10800037 	ldwio	r2,0(r2)
10012640:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10012644:	e0bff917 	ldw	r2,-28(fp)
10012648:	10a0000c 	andi	r2,r2,32768
1001264c:	10001126 	beq	r2,zero,10012694 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10012650:	e0bffb17 	ldw	r2,-20(fp)
10012654:	10800a17 	ldw	r2,40(r2)
10012658:	e0fff917 	ldw	r3,-28(fp)
1001265c:	1809883a 	mov	r4,r3
10012660:	e0fffb17 	ldw	r3,-20(fp)
10012664:	1885883a 	add	r2,r3,r2
10012668:	10800e04 	addi	r2,r2,56
1001266c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012670:	e0bffb17 	ldw	r2,-20(fp)
10012674:	10800a17 	ldw	r2,40(r2)
10012678:	10800044 	addi	r2,r2,1
1001267c:	10c1ffcc 	andi	r3,r2,2047
10012680:	e0bffb17 	ldw	r2,-20(fp)
10012684:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10012688:	003fe206 	br	10012614 <__alt_data_end+0xf8012614>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1001268c:	0001883a 	nop
10012690:	00000106 	br	10012698 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10012694:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10012698:	e0bff917 	ldw	r2,-28(fp)
1001269c:	10bfffec 	andhi	r2,r2,65535
100126a0:	10000f26 	beq	r2,zero,100126e0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100126a4:	e0bffb17 	ldw	r2,-20(fp)
100126a8:	10c00817 	ldw	r3,32(r2)
100126ac:	00bfff84 	movi	r2,-2
100126b0:	1886703a 	and	r3,r3,r2
100126b4:	e0bffb17 	ldw	r2,-20(fp)
100126b8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
100126bc:	e0bffc17 	ldw	r2,-16(fp)
100126c0:	10800104 	addi	r2,r2,4
100126c4:	1007883a 	mov	r3,r2
100126c8:	e0bffb17 	ldw	r2,-20(fp)
100126cc:	10800817 	ldw	r2,32(r2)
100126d0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100126d4:	e0bffc17 	ldw	r2,-16(fp)
100126d8:	10800104 	addi	r2,r2,4
100126dc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
100126e0:	e0bffd17 	ldw	r2,-12(fp)
100126e4:	1080800c 	andi	r2,r2,512
100126e8:	103fbe26 	beq	r2,zero,100125e4 <__alt_data_end+0xf80125e4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
100126ec:	e0bffd17 	ldw	r2,-12(fp)
100126f0:	1004d43a 	srli	r2,r2,16
100126f4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
100126f8:	00001406 	br	1001274c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
100126fc:	e0bffc17 	ldw	r2,-16(fp)
10012700:	e0fffb17 	ldw	r3,-20(fp)
10012704:	18c00d17 	ldw	r3,52(r3)
10012708:	e13ffb17 	ldw	r4,-20(fp)
1001270c:	20c7883a 	add	r3,r4,r3
10012710:	18c20e04 	addi	r3,r3,2104
10012714:	18c00003 	ldbu	r3,0(r3)
10012718:	18c03fcc 	andi	r3,r3,255
1001271c:	18c0201c 	xori	r3,r3,128
10012720:	18ffe004 	addi	r3,r3,-128
10012724:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012728:	e0bffb17 	ldw	r2,-20(fp)
1001272c:	10800d17 	ldw	r2,52(r2)
10012730:	10800044 	addi	r2,r2,1
10012734:	10c1ffcc 	andi	r3,r2,2047
10012738:	e0bffb17 	ldw	r2,-20(fp)
1001273c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10012740:	e0bffa17 	ldw	r2,-24(fp)
10012744:	10bfffc4 	addi	r2,r2,-1
10012748:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1001274c:	e0bffa17 	ldw	r2,-24(fp)
10012750:	10000526 	beq	r2,zero,10012768 <altera_avalon_jtag_uart_irq+0x1a8>
10012754:	e0bffb17 	ldw	r2,-20(fp)
10012758:	10c00d17 	ldw	r3,52(r2)
1001275c:	e0bffb17 	ldw	r2,-20(fp)
10012760:	10800c17 	ldw	r2,48(r2)
10012764:	18bfe51e 	bne	r3,r2,100126fc <__alt_data_end+0xf80126fc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10012768:	e0bffa17 	ldw	r2,-24(fp)
1001276c:	103f9d26 	beq	r2,zero,100125e4 <__alt_data_end+0xf80125e4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10012770:	e0bffb17 	ldw	r2,-20(fp)
10012774:	10c00817 	ldw	r3,32(r2)
10012778:	00bfff44 	movi	r2,-3
1001277c:	1886703a 	and	r3,r3,r2
10012780:	e0bffb17 	ldw	r2,-20(fp)
10012784:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10012788:	e0bffb17 	ldw	r2,-20(fp)
1001278c:	10800017 	ldw	r2,0(r2)
10012790:	10800104 	addi	r2,r2,4
10012794:	1007883a 	mov	r3,r2
10012798:	e0bffb17 	ldw	r2,-20(fp)
1001279c:	10800817 	ldw	r2,32(r2)
100127a0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100127a4:	e0bffc17 	ldw	r2,-16(fp)
100127a8:	10800104 	addi	r2,r2,4
100127ac:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
100127b0:	003f8c06 	br	100125e4 <__alt_data_end+0xf80125e4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
100127b4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
100127b8:	0001883a 	nop
100127bc:	e037883a 	mov	sp,fp
100127c0:	df000017 	ldw	fp,0(sp)
100127c4:	dec00104 	addi	sp,sp,4
100127c8:	f800283a 	ret

100127cc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
100127cc:	defff804 	addi	sp,sp,-32
100127d0:	df000715 	stw	fp,28(sp)
100127d4:	df000704 	addi	fp,sp,28
100127d8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
100127dc:	e0bffb17 	ldw	r2,-20(fp)
100127e0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
100127e4:	e0bff917 	ldw	r2,-28(fp)
100127e8:	10800017 	ldw	r2,0(r2)
100127ec:	10800104 	addi	r2,r2,4
100127f0:	10800037 	ldwio	r2,0(r2)
100127f4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
100127f8:	e0bffa17 	ldw	r2,-24(fp)
100127fc:	1081000c 	andi	r2,r2,1024
10012800:	10000b26 	beq	r2,zero,10012830 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10012804:	e0bff917 	ldw	r2,-28(fp)
10012808:	10800017 	ldw	r2,0(r2)
1001280c:	10800104 	addi	r2,r2,4
10012810:	1007883a 	mov	r3,r2
10012814:	e0bff917 	ldw	r2,-28(fp)
10012818:	10800817 	ldw	r2,32(r2)
1001281c:	10810014 	ori	r2,r2,1024
10012820:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10012824:	e0bff917 	ldw	r2,-28(fp)
10012828:	10000915 	stw	zero,36(r2)
1001282c:	00000a06 	br	10012858 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10012830:	e0bff917 	ldw	r2,-28(fp)
10012834:	10c00917 	ldw	r3,36(r2)
10012838:	00a00034 	movhi	r2,32768
1001283c:	10bfff04 	addi	r2,r2,-4
10012840:	10c00536 	bltu	r2,r3,10012858 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10012844:	e0bff917 	ldw	r2,-28(fp)
10012848:	10800917 	ldw	r2,36(r2)
1001284c:	10c00044 	addi	r3,r2,1
10012850:	e0bff917 	ldw	r2,-28(fp)
10012854:	10c00915 	stw	r3,36(r2)
10012858:	d0810a17 	ldw	r2,1064(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1001285c:	e037883a 	mov	sp,fp
10012860:	df000017 	ldw	fp,0(sp)
10012864:	dec00104 	addi	sp,sp,4
10012868:	f800283a 	ret

1001286c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1001286c:	defffd04 	addi	sp,sp,-12
10012870:	df000215 	stw	fp,8(sp)
10012874:	df000204 	addi	fp,sp,8
10012878:	e13ffe15 	stw	r4,-8(fp)
1001287c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10012880:	00000506 	br	10012898 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10012884:	e0bfff17 	ldw	r2,-4(fp)
10012888:	1090000c 	andi	r2,r2,16384
1001288c:	10000226 	beq	r2,zero,10012898 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10012890:	00bffd44 	movi	r2,-11
10012894:	00000b06 	br	100128c4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10012898:	e0bffe17 	ldw	r2,-8(fp)
1001289c:	10c00d17 	ldw	r3,52(r2)
100128a0:	e0bffe17 	ldw	r2,-8(fp)
100128a4:	10800c17 	ldw	r2,48(r2)
100128a8:	18800526 	beq	r3,r2,100128c0 <altera_avalon_jtag_uart_close+0x54>
100128ac:	e0bffe17 	ldw	r2,-8(fp)
100128b0:	10c00917 	ldw	r3,36(r2)
100128b4:	e0bffe17 	ldw	r2,-8(fp)
100128b8:	10800117 	ldw	r2,4(r2)
100128bc:	18bff136 	bltu	r3,r2,10012884 <__alt_data_end+0xf8012884>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
100128c0:	0005883a 	mov	r2,zero
}
100128c4:	e037883a 	mov	sp,fp
100128c8:	df000017 	ldw	fp,0(sp)
100128cc:	dec00104 	addi	sp,sp,4
100128d0:	f800283a 	ret

100128d4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
100128d4:	defffa04 	addi	sp,sp,-24
100128d8:	df000515 	stw	fp,20(sp)
100128dc:	df000504 	addi	fp,sp,20
100128e0:	e13ffd15 	stw	r4,-12(fp)
100128e4:	e17ffe15 	stw	r5,-8(fp)
100128e8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
100128ec:	00bff9c4 	movi	r2,-25
100128f0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
100128f4:	e0bffe17 	ldw	r2,-8(fp)
100128f8:	10da8060 	cmpeqi	r3,r2,27137
100128fc:	1800031e 	bne	r3,zero,1001290c <altera_avalon_jtag_uart_ioctl+0x38>
10012900:	109a80a0 	cmpeqi	r2,r2,27138
10012904:	1000181e 	bne	r2,zero,10012968 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10012908:	00002906 	br	100129b0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1001290c:	e0bffd17 	ldw	r2,-12(fp)
10012910:	10c00117 	ldw	r3,4(r2)
10012914:	00a00034 	movhi	r2,32768
10012918:	10bfffc4 	addi	r2,r2,-1
1001291c:	18802126 	beq	r3,r2,100129a4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10012920:	e0bfff17 	ldw	r2,-4(fp)
10012924:	10800017 	ldw	r2,0(r2)
10012928:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1001292c:	e0bffc17 	ldw	r2,-16(fp)
10012930:	10800090 	cmplti	r2,r2,2
10012934:	1000061e 	bne	r2,zero,10012950 <altera_avalon_jtag_uart_ioctl+0x7c>
10012938:	e0fffc17 	ldw	r3,-16(fp)
1001293c:	00a00034 	movhi	r2,32768
10012940:	10bfffc4 	addi	r2,r2,-1
10012944:	18800226 	beq	r3,r2,10012950 <altera_avalon_jtag_uart_ioctl+0x7c>
10012948:	e0bffc17 	ldw	r2,-16(fp)
1001294c:	00000206 	br	10012958 <altera_avalon_jtag_uart_ioctl+0x84>
10012950:	00a00034 	movhi	r2,32768
10012954:	10bfff84 	addi	r2,r2,-2
10012958:	e0fffd17 	ldw	r3,-12(fp)
1001295c:	18800115 	stw	r2,4(r3)
      rc = 0;
10012960:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10012964:	00000f06 	br	100129a4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10012968:	e0bffd17 	ldw	r2,-12(fp)
1001296c:	10c00117 	ldw	r3,4(r2)
10012970:	00a00034 	movhi	r2,32768
10012974:	10bfffc4 	addi	r2,r2,-1
10012978:	18800c26 	beq	r3,r2,100129ac <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1001297c:	e0bffd17 	ldw	r2,-12(fp)
10012980:	10c00917 	ldw	r3,36(r2)
10012984:	e0bffd17 	ldw	r2,-12(fp)
10012988:	10800117 	ldw	r2,4(r2)
1001298c:	1885803a 	cmpltu	r2,r3,r2
10012990:	10c03fcc 	andi	r3,r2,255
10012994:	e0bfff17 	ldw	r2,-4(fp)
10012998:	10c00015 	stw	r3,0(r2)
      rc = 0;
1001299c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100129a0:	00000206 	br	100129ac <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
100129a4:	0001883a 	nop
100129a8:	00000106 	br	100129b0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
100129ac:	0001883a 	nop

  default:
    break;
  }

  return rc;
100129b0:	e0bffb17 	ldw	r2,-20(fp)
}
100129b4:	e037883a 	mov	sp,fp
100129b8:	df000017 	ldw	fp,0(sp)
100129bc:	dec00104 	addi	sp,sp,4
100129c0:	f800283a 	ret

100129c4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
100129c4:	defff304 	addi	sp,sp,-52
100129c8:	dfc00c15 	stw	ra,48(sp)
100129cc:	df000b15 	stw	fp,44(sp)
100129d0:	df000b04 	addi	fp,sp,44
100129d4:	e13ffc15 	stw	r4,-16(fp)
100129d8:	e17ffd15 	stw	r5,-12(fp)
100129dc:	e1bffe15 	stw	r6,-8(fp)
100129e0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
100129e4:	e0bffd17 	ldw	r2,-12(fp)
100129e8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100129ec:	00004706 	br	10012b0c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
100129f0:	e0bffc17 	ldw	r2,-16(fp)
100129f4:	10800a17 	ldw	r2,40(r2)
100129f8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
100129fc:	e0bffc17 	ldw	r2,-16(fp)
10012a00:	10800b17 	ldw	r2,44(r2)
10012a04:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10012a08:	e0fff717 	ldw	r3,-36(fp)
10012a0c:	e0bff817 	ldw	r2,-32(fp)
10012a10:	18800536 	bltu	r3,r2,10012a28 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10012a14:	e0fff717 	ldw	r3,-36(fp)
10012a18:	e0bff817 	ldw	r2,-32(fp)
10012a1c:	1885c83a 	sub	r2,r3,r2
10012a20:	e0bff615 	stw	r2,-40(fp)
10012a24:	00000406 	br	10012a38 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10012a28:	00c20004 	movi	r3,2048
10012a2c:	e0bff817 	ldw	r2,-32(fp)
10012a30:	1885c83a 	sub	r2,r3,r2
10012a34:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10012a38:	e0bff617 	ldw	r2,-40(fp)
10012a3c:	10001e26 	beq	r2,zero,10012ab8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10012a40:	e0fffe17 	ldw	r3,-8(fp)
10012a44:	e0bff617 	ldw	r2,-40(fp)
10012a48:	1880022e 	bgeu	r3,r2,10012a54 <altera_avalon_jtag_uart_read+0x90>
        n = space;
10012a4c:	e0bffe17 	ldw	r2,-8(fp)
10012a50:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10012a54:	e0bffc17 	ldw	r2,-16(fp)
10012a58:	10c00e04 	addi	r3,r2,56
10012a5c:	e0bff817 	ldw	r2,-32(fp)
10012a60:	1885883a 	add	r2,r3,r2
10012a64:	e1bff617 	ldw	r6,-40(fp)
10012a68:	100b883a 	mov	r5,r2
10012a6c:	e13ff517 	ldw	r4,-44(fp)
10012a70:	000a7b00 	call	1000a7b0 <memcpy>
      ptr   += n;
10012a74:	e0fff517 	ldw	r3,-44(fp)
10012a78:	e0bff617 	ldw	r2,-40(fp)
10012a7c:	1885883a 	add	r2,r3,r2
10012a80:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10012a84:	e0fffe17 	ldw	r3,-8(fp)
10012a88:	e0bff617 	ldw	r2,-40(fp)
10012a8c:	1885c83a 	sub	r2,r3,r2
10012a90:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012a94:	e0fff817 	ldw	r3,-32(fp)
10012a98:	e0bff617 	ldw	r2,-40(fp)
10012a9c:	1885883a 	add	r2,r3,r2
10012aa0:	10c1ffcc 	andi	r3,r2,2047
10012aa4:	e0bffc17 	ldw	r2,-16(fp)
10012aa8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10012aac:	e0bffe17 	ldw	r2,-8(fp)
10012ab0:	00bfcf16 	blt	zero,r2,100129f0 <__alt_data_end+0xf80129f0>
10012ab4:	00000106 	br	10012abc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10012ab8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10012abc:	e0fff517 	ldw	r3,-44(fp)
10012ac0:	e0bffd17 	ldw	r2,-12(fp)
10012ac4:	1880141e 	bne	r3,r2,10012b18 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10012ac8:	e0bfff17 	ldw	r2,-4(fp)
10012acc:	1090000c 	andi	r2,r2,16384
10012ad0:	1000131e 	bne	r2,zero,10012b20 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10012ad4:	0001883a 	nop
10012ad8:	e0bffc17 	ldw	r2,-16(fp)
10012adc:	10c00a17 	ldw	r3,40(r2)
10012ae0:	e0bff717 	ldw	r2,-36(fp)
10012ae4:	1880051e 	bne	r3,r2,10012afc <altera_avalon_jtag_uart_read+0x138>
10012ae8:	e0bffc17 	ldw	r2,-16(fp)
10012aec:	10c00917 	ldw	r3,36(r2)
10012af0:	e0bffc17 	ldw	r2,-16(fp)
10012af4:	10800117 	ldw	r2,4(r2)
10012af8:	18bff736 	bltu	r3,r2,10012ad8 <__alt_data_end+0xf8012ad8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10012afc:	e0bffc17 	ldw	r2,-16(fp)
10012b00:	10c00a17 	ldw	r3,40(r2)
10012b04:	e0bff717 	ldw	r2,-36(fp)
10012b08:	18800726 	beq	r3,r2,10012b28 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10012b0c:	e0bffe17 	ldw	r2,-8(fp)
10012b10:	00bfb716 	blt	zero,r2,100129f0 <__alt_data_end+0xf80129f0>
10012b14:	00000506 	br	10012b2c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10012b18:	0001883a 	nop
10012b1c:	00000306 	br	10012b2c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10012b20:	0001883a 	nop
10012b24:	00000106 	br	10012b2c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10012b28:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10012b2c:	e0fff517 	ldw	r3,-44(fp)
10012b30:	e0bffd17 	ldw	r2,-12(fp)
10012b34:	18801826 	beq	r3,r2,10012b98 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012b38:	0005303a 	rdctl	r2,status
10012b3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012b40:	e0fffb17 	ldw	r3,-20(fp)
10012b44:	00bfff84 	movi	r2,-2
10012b48:	1884703a 	and	r2,r3,r2
10012b4c:	1001703a 	wrctl	status,r2
  
  return context;
10012b50:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10012b54:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10012b58:	e0bffc17 	ldw	r2,-16(fp)
10012b5c:	10800817 	ldw	r2,32(r2)
10012b60:	10c00054 	ori	r3,r2,1
10012b64:	e0bffc17 	ldw	r2,-16(fp)
10012b68:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10012b6c:	e0bffc17 	ldw	r2,-16(fp)
10012b70:	10800017 	ldw	r2,0(r2)
10012b74:	10800104 	addi	r2,r2,4
10012b78:	1007883a 	mov	r3,r2
10012b7c:	e0bffc17 	ldw	r2,-16(fp)
10012b80:	10800817 	ldw	r2,32(r2)
10012b84:	18800035 	stwio	r2,0(r3)
10012b88:	e0bffa17 	ldw	r2,-24(fp)
10012b8c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012b90:	e0bff917 	ldw	r2,-28(fp)
10012b94:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10012b98:	e0fff517 	ldw	r3,-44(fp)
10012b9c:	e0bffd17 	ldw	r2,-12(fp)
10012ba0:	18800426 	beq	r3,r2,10012bb4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10012ba4:	e0fff517 	ldw	r3,-44(fp)
10012ba8:	e0bffd17 	ldw	r2,-12(fp)
10012bac:	1885c83a 	sub	r2,r3,r2
10012bb0:	00000606 	br	10012bcc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10012bb4:	e0bfff17 	ldw	r2,-4(fp)
10012bb8:	1090000c 	andi	r2,r2,16384
10012bbc:	10000226 	beq	r2,zero,10012bc8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10012bc0:	00bffd44 	movi	r2,-11
10012bc4:	00000106 	br	10012bcc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10012bc8:	00bffec4 	movi	r2,-5
}
10012bcc:	e037883a 	mov	sp,fp
10012bd0:	dfc00117 	ldw	ra,4(sp)
10012bd4:	df000017 	ldw	fp,0(sp)
10012bd8:	dec00204 	addi	sp,sp,8
10012bdc:	f800283a 	ret

10012be0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10012be0:	defff304 	addi	sp,sp,-52
10012be4:	dfc00c15 	stw	ra,48(sp)
10012be8:	df000b15 	stw	fp,44(sp)
10012bec:	df000b04 	addi	fp,sp,44
10012bf0:	e13ffc15 	stw	r4,-16(fp)
10012bf4:	e17ffd15 	stw	r5,-12(fp)
10012bf8:	e1bffe15 	stw	r6,-8(fp)
10012bfc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10012c00:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10012c04:	e0bffd17 	ldw	r2,-12(fp)
10012c08:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10012c0c:	00003706 	br	10012cec <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10012c10:	e0bffc17 	ldw	r2,-16(fp)
10012c14:	10800c17 	ldw	r2,48(r2)
10012c18:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10012c1c:	e0bffc17 	ldw	r2,-16(fp)
10012c20:	10800d17 	ldw	r2,52(r2)
10012c24:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10012c28:	e0fff917 	ldw	r3,-28(fp)
10012c2c:	e0bff517 	ldw	r2,-44(fp)
10012c30:	1880062e 	bgeu	r3,r2,10012c4c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10012c34:	e0fff517 	ldw	r3,-44(fp)
10012c38:	e0bff917 	ldw	r2,-28(fp)
10012c3c:	1885c83a 	sub	r2,r3,r2
10012c40:	10bfffc4 	addi	r2,r2,-1
10012c44:	e0bff615 	stw	r2,-40(fp)
10012c48:	00000b06 	br	10012c78 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10012c4c:	e0bff517 	ldw	r2,-44(fp)
10012c50:	10000526 	beq	r2,zero,10012c68 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10012c54:	00c20004 	movi	r3,2048
10012c58:	e0bff917 	ldw	r2,-28(fp)
10012c5c:	1885c83a 	sub	r2,r3,r2
10012c60:	e0bff615 	stw	r2,-40(fp)
10012c64:	00000406 	br	10012c78 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10012c68:	00c1ffc4 	movi	r3,2047
10012c6c:	e0bff917 	ldw	r2,-28(fp)
10012c70:	1885c83a 	sub	r2,r3,r2
10012c74:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10012c78:	e0bff617 	ldw	r2,-40(fp)
10012c7c:	10001e26 	beq	r2,zero,10012cf8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10012c80:	e0fffe17 	ldw	r3,-8(fp)
10012c84:	e0bff617 	ldw	r2,-40(fp)
10012c88:	1880022e 	bgeu	r3,r2,10012c94 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10012c8c:	e0bffe17 	ldw	r2,-8(fp)
10012c90:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10012c94:	e0bffc17 	ldw	r2,-16(fp)
10012c98:	10c20e04 	addi	r3,r2,2104
10012c9c:	e0bff917 	ldw	r2,-28(fp)
10012ca0:	1885883a 	add	r2,r3,r2
10012ca4:	e1bff617 	ldw	r6,-40(fp)
10012ca8:	e17ffd17 	ldw	r5,-12(fp)
10012cac:	1009883a 	mov	r4,r2
10012cb0:	000a7b00 	call	1000a7b0 <memcpy>
      ptr   += n;
10012cb4:	e0fffd17 	ldw	r3,-12(fp)
10012cb8:	e0bff617 	ldw	r2,-40(fp)
10012cbc:	1885883a 	add	r2,r3,r2
10012cc0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10012cc4:	e0fffe17 	ldw	r3,-8(fp)
10012cc8:	e0bff617 	ldw	r2,-40(fp)
10012ccc:	1885c83a 	sub	r2,r3,r2
10012cd0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012cd4:	e0fff917 	ldw	r3,-28(fp)
10012cd8:	e0bff617 	ldw	r2,-40(fp)
10012cdc:	1885883a 	add	r2,r3,r2
10012ce0:	10c1ffcc 	andi	r3,r2,2047
10012ce4:	e0bffc17 	ldw	r2,-16(fp)
10012ce8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10012cec:	e0bffe17 	ldw	r2,-8(fp)
10012cf0:	00bfc716 	blt	zero,r2,10012c10 <__alt_data_end+0xf8012c10>
10012cf4:	00000106 	br	10012cfc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10012cf8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012cfc:	0005303a 	rdctl	r2,status
10012d00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012d04:	e0fffb17 	ldw	r3,-20(fp)
10012d08:	00bfff84 	movi	r2,-2
10012d0c:	1884703a 	and	r2,r3,r2
10012d10:	1001703a 	wrctl	status,r2
  
  return context;
10012d14:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10012d18:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10012d1c:	e0bffc17 	ldw	r2,-16(fp)
10012d20:	10800817 	ldw	r2,32(r2)
10012d24:	10c00094 	ori	r3,r2,2
10012d28:	e0bffc17 	ldw	r2,-16(fp)
10012d2c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10012d30:	e0bffc17 	ldw	r2,-16(fp)
10012d34:	10800017 	ldw	r2,0(r2)
10012d38:	10800104 	addi	r2,r2,4
10012d3c:	1007883a 	mov	r3,r2
10012d40:	e0bffc17 	ldw	r2,-16(fp)
10012d44:	10800817 	ldw	r2,32(r2)
10012d48:	18800035 	stwio	r2,0(r3)
10012d4c:	e0bffa17 	ldw	r2,-24(fp)
10012d50:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012d54:	e0bff817 	ldw	r2,-32(fp)
10012d58:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10012d5c:	e0bffe17 	ldw	r2,-8(fp)
10012d60:	0080100e 	bge	zero,r2,10012da4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10012d64:	e0bfff17 	ldw	r2,-4(fp)
10012d68:	1090000c 	andi	r2,r2,16384
10012d6c:	1000101e 	bne	r2,zero,10012db0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10012d70:	0001883a 	nop
10012d74:	e0bffc17 	ldw	r2,-16(fp)
10012d78:	10c00d17 	ldw	r3,52(r2)
10012d7c:	e0bff517 	ldw	r2,-44(fp)
10012d80:	1880051e 	bne	r3,r2,10012d98 <altera_avalon_jtag_uart_write+0x1b8>
10012d84:	e0bffc17 	ldw	r2,-16(fp)
10012d88:	10c00917 	ldw	r3,36(r2)
10012d8c:	e0bffc17 	ldw	r2,-16(fp)
10012d90:	10800117 	ldw	r2,4(r2)
10012d94:	18bff736 	bltu	r3,r2,10012d74 <__alt_data_end+0xf8012d74>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10012d98:	e0bffc17 	ldw	r2,-16(fp)
10012d9c:	10800917 	ldw	r2,36(r2)
10012da0:	1000051e 	bne	r2,zero,10012db8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10012da4:	e0bffe17 	ldw	r2,-8(fp)
10012da8:	00bfd016 	blt	zero,r2,10012cec <__alt_data_end+0xf8012cec>
10012dac:	00000306 	br	10012dbc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10012db0:	0001883a 	nop
10012db4:	00000106 	br	10012dbc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10012db8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10012dbc:	e0fffd17 	ldw	r3,-12(fp)
10012dc0:	e0bff717 	ldw	r2,-36(fp)
10012dc4:	18800426 	beq	r3,r2,10012dd8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10012dc8:	e0fffd17 	ldw	r3,-12(fp)
10012dcc:	e0bff717 	ldw	r2,-36(fp)
10012dd0:	1885c83a 	sub	r2,r3,r2
10012dd4:	00000606 	br	10012df0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10012dd8:	e0bfff17 	ldw	r2,-4(fp)
10012ddc:	1090000c 	andi	r2,r2,16384
10012de0:	10000226 	beq	r2,zero,10012dec <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10012de4:	00bffd44 	movi	r2,-11
10012de8:	00000106 	br	10012df0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10012dec:	00bffec4 	movi	r2,-5
}
10012df0:	e037883a 	mov	sp,fp
10012df4:	dfc00117 	ldw	ra,4(sp)
10012df8:	df000017 	ldw	fp,0(sp)
10012dfc:	dec00204 	addi	sp,sp,8
10012e00:	f800283a 	ret

10012e04 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10012e04:	defff504 	addi	sp,sp,-44
10012e08:	df000a15 	stw	fp,40(sp)
10012e0c:	df000a04 	addi	fp,sp,40
10012e10:	e13ffc15 	stw	r4,-16(fp)
10012e14:	e17ffd15 	stw	r5,-12(fp)
10012e18:	e1bffe15 	stw	r6,-8(fp)
10012e1c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10012e20:	e03ff615 	stw	zero,-40(fp)
10012e24:	d0810a17 	ldw	r2,1064(gp)
  
  if (alt_ticks_per_second ())
10012e28:	10003c26 	beq	r2,zero,10012f1c <alt_alarm_start+0x118>
  {
    if (alarm)
10012e2c:	e0bffc17 	ldw	r2,-16(fp)
10012e30:	10003826 	beq	r2,zero,10012f14 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10012e34:	e0bffc17 	ldw	r2,-16(fp)
10012e38:	e0fffe17 	ldw	r3,-8(fp)
10012e3c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10012e40:	e0bffc17 	ldw	r2,-16(fp)
10012e44:	e0ffff17 	ldw	r3,-4(fp)
10012e48:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012e4c:	0005303a 	rdctl	r2,status
10012e50:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012e54:	e0fff917 	ldw	r3,-28(fp)
10012e58:	00bfff84 	movi	r2,-2
10012e5c:	1884703a 	and	r2,r3,r2
10012e60:	1001703a 	wrctl	status,r2
  
  return context;
10012e64:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10012e68:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10012e6c:	d0810b17 	ldw	r2,1068(gp)
      
      current_nticks = alt_nticks();
10012e70:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10012e74:	e0fffd17 	ldw	r3,-12(fp)
10012e78:	e0bff617 	ldw	r2,-40(fp)
10012e7c:	1885883a 	add	r2,r3,r2
10012e80:	10c00044 	addi	r3,r2,1
10012e84:	e0bffc17 	ldw	r2,-16(fp)
10012e88:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10012e8c:	e0bffc17 	ldw	r2,-16(fp)
10012e90:	10c00217 	ldw	r3,8(r2)
10012e94:	e0bff617 	ldw	r2,-40(fp)
10012e98:	1880042e 	bgeu	r3,r2,10012eac <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10012e9c:	e0bffc17 	ldw	r2,-16(fp)
10012ea0:	00c00044 	movi	r3,1
10012ea4:	10c00405 	stb	r3,16(r2)
10012ea8:	00000206 	br	10012eb4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10012eac:	e0bffc17 	ldw	r2,-16(fp)
10012eb0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10012eb4:	e0bffc17 	ldw	r2,-16(fp)
10012eb8:	d0e00e04 	addi	r3,gp,-32712
10012ebc:	e0fffa15 	stw	r3,-24(fp)
10012ec0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10012ec4:	e0bffb17 	ldw	r2,-20(fp)
10012ec8:	e0fffa17 	ldw	r3,-24(fp)
10012ecc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10012ed0:	e0bffa17 	ldw	r2,-24(fp)
10012ed4:	10c00017 	ldw	r3,0(r2)
10012ed8:	e0bffb17 	ldw	r2,-20(fp)
10012edc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10012ee0:	e0bffa17 	ldw	r2,-24(fp)
10012ee4:	10800017 	ldw	r2,0(r2)
10012ee8:	e0fffb17 	ldw	r3,-20(fp)
10012eec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10012ef0:	e0bffa17 	ldw	r2,-24(fp)
10012ef4:	e0fffb17 	ldw	r3,-20(fp)
10012ef8:	10c00015 	stw	r3,0(r2)
10012efc:	e0bff817 	ldw	r2,-32(fp)
10012f00:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012f04:	e0bff717 	ldw	r2,-36(fp)
10012f08:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10012f0c:	0005883a 	mov	r2,zero
10012f10:	00000306 	br	10012f20 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10012f14:	00bffa84 	movi	r2,-22
10012f18:	00000106 	br	10012f20 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10012f1c:	00bfde84 	movi	r2,-134
  }
}
10012f20:	e037883a 	mov	sp,fp
10012f24:	df000017 	ldw	fp,0(sp)
10012f28:	dec00104 	addi	sp,sp,4
10012f2c:	f800283a 	ret

10012f30 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10012f30:	defffa04 	addi	sp,sp,-24
10012f34:	dfc00515 	stw	ra,20(sp)
10012f38:	df000415 	stw	fp,16(sp)
10012f3c:	df000404 	addi	fp,sp,16
10012f40:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
10012f44:	00800244 	movi	r2,9
10012f48:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10012f4c:	014003f4 	movhi	r5,15
10012f50:	29509004 	addi	r5,r5,16960
10012f54:	e13ffd17 	ldw	r4,-12(fp)
10012f58:	0004b940 	call	10004b94 <__mulsi3>
10012f5c:	100b883a 	mov	r5,r2
10012f60:	0100bef4 	movhi	r4,763
10012f64:	213c2004 	addi	r4,r4,-3968
10012f68:	0004ad80 	call	10004ad8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10012f6c:	100b883a 	mov	r5,r2
10012f70:	01200034 	movhi	r4,32768
10012f74:	213fffc4 	addi	r4,r4,-1
10012f78:	0004ad80 	call	10004ad8 <__udivsi3>
10012f7c:	100b883a 	mov	r5,r2
10012f80:	e13fff17 	ldw	r4,-4(fp)
10012f84:	0004ad80 	call	10004ad8 <__udivsi3>
10012f88:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10012f8c:	e0bffe17 	ldw	r2,-8(fp)
10012f90:	10002a26 	beq	r2,zero,1001303c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10012f94:	e03ffc15 	stw	zero,-16(fp)
10012f98:	00001706 	br	10012ff8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10012f9c:	00a00034 	movhi	r2,32768
10012fa0:	10bfffc4 	addi	r2,r2,-1
10012fa4:	10bfffc4 	addi	r2,r2,-1
10012fa8:	103ffe1e 	bne	r2,zero,10012fa4 <__alt_data_end+0xf8012fa4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10012fac:	014003f4 	movhi	r5,15
10012fb0:	29509004 	addi	r5,r5,16960
10012fb4:	e13ffd17 	ldw	r4,-12(fp)
10012fb8:	0004b940 	call	10004b94 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10012fbc:	100b883a 	mov	r5,r2
10012fc0:	0100bef4 	movhi	r4,763
10012fc4:	213c2004 	addi	r4,r4,-3968
10012fc8:	0004ad80 	call	10004ad8 <__udivsi3>
10012fcc:	100b883a 	mov	r5,r2
10012fd0:	01200034 	movhi	r4,32768
10012fd4:	213fffc4 	addi	r4,r4,-1
10012fd8:	0004ad80 	call	10004ad8 <__udivsi3>
10012fdc:	1007883a 	mov	r3,r2
10012fe0:	e0bfff17 	ldw	r2,-4(fp)
10012fe4:	10c5c83a 	sub	r2,r2,r3
10012fe8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10012fec:	e0bffc17 	ldw	r2,-16(fp)
10012ff0:	10800044 	addi	r2,r2,1
10012ff4:	e0bffc15 	stw	r2,-16(fp)
10012ff8:	e0fffc17 	ldw	r3,-16(fp)
10012ffc:	e0bffe17 	ldw	r2,-8(fp)
10013000:	18bfe616 	blt	r3,r2,10012f9c <__alt_data_end+0xf8012f9c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10013004:	014003f4 	movhi	r5,15
10013008:	29509004 	addi	r5,r5,16960
1001300c:	e13ffd17 	ldw	r4,-12(fp)
10013010:	0004b940 	call	10004b94 <__mulsi3>
10013014:	100b883a 	mov	r5,r2
10013018:	0100bef4 	movhi	r4,763
1001301c:	213c2004 	addi	r4,r4,-3968
10013020:	0004ad80 	call	10004ad8 <__udivsi3>
10013024:	e17fff17 	ldw	r5,-4(fp)
10013028:	1009883a 	mov	r4,r2
1001302c:	0004b940 	call	10004b94 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10013030:	10bfffc4 	addi	r2,r2,-1
10013034:	103ffe1e 	bne	r2,zero,10013030 <__alt_data_end+0xf8013030>
10013038:	00000d06 	br	10013070 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1001303c:	014003f4 	movhi	r5,15
10013040:	29509004 	addi	r5,r5,16960
10013044:	e13ffd17 	ldw	r4,-12(fp)
10013048:	0004b940 	call	10004b94 <__mulsi3>
1001304c:	100b883a 	mov	r5,r2
10013050:	0100bef4 	movhi	r4,763
10013054:	213c2004 	addi	r4,r4,-3968
10013058:	0004ad80 	call	10004ad8 <__udivsi3>
1001305c:	e17fff17 	ldw	r5,-4(fp)
10013060:	1009883a 	mov	r4,r2
10013064:	0004b940 	call	10004b94 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10013068:	10bfffc4 	addi	r2,r2,-1
1001306c:	00bffe16 	blt	zero,r2,10013068 <__alt_data_end+0xf8013068>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10013070:	0005883a 	mov	r2,zero
}
10013074:	e037883a 	mov	sp,fp
10013078:	dfc00117 	ldw	ra,4(sp)
1001307c:	df000017 	ldw	fp,0(sp)
10013080:	dec00204 	addi	sp,sp,8
10013084:	f800283a 	ret

10013088 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10013088:	deffff04 	addi	sp,sp,-4
1001308c:	df000015 	stw	fp,0(sp)
10013090:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10013094:	0001883a 	nop
10013098:	e037883a 	mov	sp,fp
1001309c:	df000017 	ldw	fp,0(sp)
100130a0:	dec00104 	addi	sp,sp,4
100130a4:	f800283a 	ret

100130a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100130a8:	defffe04 	addi	sp,sp,-8
100130ac:	dfc00115 	stw	ra,4(sp)
100130b0:	df000015 	stw	fp,0(sp)
100130b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100130b8:	d0a00b17 	ldw	r2,-32724(gp)
100130bc:	10000326 	beq	r2,zero,100130cc <alt_get_errno+0x24>
100130c0:	d0a00b17 	ldw	r2,-32724(gp)
100130c4:	103ee83a 	callr	r2
100130c8:	00000106 	br	100130d0 <alt_get_errno+0x28>
100130cc:	d0810504 	addi	r2,gp,1044
}
100130d0:	e037883a 	mov	sp,fp
100130d4:	dfc00117 	ldw	ra,4(sp)
100130d8:	df000017 	ldw	fp,0(sp)
100130dc:	dec00204 	addi	sp,sp,8
100130e0:	f800283a 	ret

100130e4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
100130e4:	defffa04 	addi	sp,sp,-24
100130e8:	dfc00515 	stw	ra,20(sp)
100130ec:	df000415 	stw	fp,16(sp)
100130f0:	df000404 	addi	fp,sp,16
100130f4:	e13ffe15 	stw	r4,-8(fp)
100130f8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
100130fc:	e0bffe17 	ldw	r2,-8(fp)
10013100:	10000326 	beq	r2,zero,10013110 <alt_dev_llist_insert+0x2c>
10013104:	e0bffe17 	ldw	r2,-8(fp)
10013108:	10800217 	ldw	r2,8(r2)
1001310c:	1000061e 	bne	r2,zero,10013128 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10013110:	00130a80 	call	100130a8 <alt_get_errno>
10013114:	1007883a 	mov	r3,r2
10013118:	00800584 	movi	r2,22
1001311c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10013120:	00bffa84 	movi	r2,-22
10013124:	00001306 	br	10013174 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10013128:	e0bffe17 	ldw	r2,-8(fp)
1001312c:	e0ffff17 	ldw	r3,-4(fp)
10013130:	e0fffc15 	stw	r3,-16(fp)
10013134:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10013138:	e0bffd17 	ldw	r2,-12(fp)
1001313c:	e0fffc17 	ldw	r3,-16(fp)
10013140:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10013144:	e0bffc17 	ldw	r2,-16(fp)
10013148:	10c00017 	ldw	r3,0(r2)
1001314c:	e0bffd17 	ldw	r2,-12(fp)
10013150:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10013154:	e0bffc17 	ldw	r2,-16(fp)
10013158:	10800017 	ldw	r2,0(r2)
1001315c:	e0fffd17 	ldw	r3,-12(fp)
10013160:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10013164:	e0bffc17 	ldw	r2,-16(fp)
10013168:	e0fffd17 	ldw	r3,-12(fp)
1001316c:	10c00015 	stw	r3,0(r2)

  return 0;  
10013170:	0005883a 	mov	r2,zero
}
10013174:	e037883a 	mov	sp,fp
10013178:	dfc00117 	ldw	ra,4(sp)
1001317c:	df000017 	ldw	fp,0(sp)
10013180:	dec00204 	addi	sp,sp,8
10013184:	f800283a 	ret

10013188 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10013188:	defffd04 	addi	sp,sp,-12
1001318c:	dfc00215 	stw	ra,8(sp)
10013190:	df000115 	stw	fp,4(sp)
10013194:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10013198:	00840074 	movhi	r2,4097
1001319c:	10904f04 	addi	r2,r2,16700
100131a0:	e0bfff15 	stw	r2,-4(fp)
100131a4:	00000606 	br	100131c0 <_do_ctors+0x38>
        (*ctor) (); 
100131a8:	e0bfff17 	ldw	r2,-4(fp)
100131ac:	10800017 	ldw	r2,0(r2)
100131b0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100131b4:	e0bfff17 	ldw	r2,-4(fp)
100131b8:	10bfff04 	addi	r2,r2,-4
100131bc:	e0bfff15 	stw	r2,-4(fp)
100131c0:	e0ffff17 	ldw	r3,-4(fp)
100131c4:	00840074 	movhi	r2,4097
100131c8:	10905004 	addi	r2,r2,16704
100131cc:	18bff62e 	bgeu	r3,r2,100131a8 <__alt_data_end+0xf80131a8>
        (*ctor) (); 
}
100131d0:	0001883a 	nop
100131d4:	e037883a 	mov	sp,fp
100131d8:	dfc00117 	ldw	ra,4(sp)
100131dc:	df000017 	ldw	fp,0(sp)
100131e0:	dec00204 	addi	sp,sp,8
100131e4:	f800283a 	ret

100131e8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
100131e8:	defffd04 	addi	sp,sp,-12
100131ec:	dfc00215 	stw	ra,8(sp)
100131f0:	df000115 	stw	fp,4(sp)
100131f4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100131f8:	00840074 	movhi	r2,4097
100131fc:	10904f04 	addi	r2,r2,16700
10013200:	e0bfff15 	stw	r2,-4(fp)
10013204:	00000606 	br	10013220 <_do_dtors+0x38>
        (*dtor) (); 
10013208:	e0bfff17 	ldw	r2,-4(fp)
1001320c:	10800017 	ldw	r2,0(r2)
10013210:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10013214:	e0bfff17 	ldw	r2,-4(fp)
10013218:	10bfff04 	addi	r2,r2,-4
1001321c:	e0bfff15 	stw	r2,-4(fp)
10013220:	e0ffff17 	ldw	r3,-4(fp)
10013224:	00840074 	movhi	r2,4097
10013228:	10905004 	addi	r2,r2,16704
1001322c:	18bff62e 	bgeu	r3,r2,10013208 <__alt_data_end+0xf8013208>
        (*dtor) (); 
}
10013230:	0001883a 	nop
10013234:	e037883a 	mov	sp,fp
10013238:	dfc00117 	ldw	ra,4(sp)
1001323c:	df000017 	ldw	fp,0(sp)
10013240:	dec00204 	addi	sp,sp,8
10013244:	f800283a 	ret

10013248 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10013248:	deffff04 	addi	sp,sp,-4
1001324c:	df000015 	stw	fp,0(sp)
10013250:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10013254:	0001883a 	nop
10013258:	e037883a 	mov	sp,fp
1001325c:	df000017 	ldw	fp,0(sp)
10013260:	dec00104 	addi	sp,sp,4
10013264:	f800283a 	ret

10013268 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10013268:	defff904 	addi	sp,sp,-28
1001326c:	dfc00615 	stw	ra,24(sp)
10013270:	df000515 	stw	fp,20(sp)
10013274:	df000504 	addi	fp,sp,20
10013278:	e13ffc15 	stw	r4,-16(fp)
1001327c:	e17ffd15 	stw	r5,-12(fp)
10013280:	e1bffe15 	stw	r6,-8(fp)
10013284:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10013288:	e0800217 	ldw	r2,8(fp)
1001328c:	d8800015 	stw	r2,0(sp)
10013290:	e1ffff17 	ldw	r7,-4(fp)
10013294:	e1bffe17 	ldw	r6,-8(fp)
10013298:	e17ffd17 	ldw	r5,-12(fp)
1001329c:	e13ffc17 	ldw	r4,-16(fp)
100132a0:	00134180 	call	10013418 <alt_iic_isr_register>
}  
100132a4:	e037883a 	mov	sp,fp
100132a8:	dfc00117 	ldw	ra,4(sp)
100132ac:	df000017 	ldw	fp,0(sp)
100132b0:	dec00204 	addi	sp,sp,8
100132b4:	f800283a 	ret

100132b8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
100132b8:	defff904 	addi	sp,sp,-28
100132bc:	df000615 	stw	fp,24(sp)
100132c0:	df000604 	addi	fp,sp,24
100132c4:	e13ffe15 	stw	r4,-8(fp)
100132c8:	e17fff15 	stw	r5,-4(fp)
100132cc:	e0bfff17 	ldw	r2,-4(fp)
100132d0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100132d4:	0005303a 	rdctl	r2,status
100132d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100132dc:	e0fffb17 	ldw	r3,-20(fp)
100132e0:	00bfff84 	movi	r2,-2
100132e4:	1884703a 	and	r2,r3,r2
100132e8:	1001703a 	wrctl	status,r2
  
  return context;
100132ec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100132f0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
100132f4:	00c00044 	movi	r3,1
100132f8:	e0bffa17 	ldw	r2,-24(fp)
100132fc:	1884983a 	sll	r2,r3,r2
10013300:	1007883a 	mov	r3,r2
10013304:	d0810917 	ldw	r2,1060(gp)
10013308:	1884b03a 	or	r2,r3,r2
1001330c:	d0810915 	stw	r2,1060(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10013310:	d0810917 	ldw	r2,1060(gp)
10013314:	100170fa 	wrctl	ienable,r2
10013318:	e0bffc17 	ldw	r2,-16(fp)
1001331c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013320:	e0bffd17 	ldw	r2,-12(fp)
10013324:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10013328:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1001332c:	0001883a 	nop
}
10013330:	e037883a 	mov	sp,fp
10013334:	df000017 	ldw	fp,0(sp)
10013338:	dec00104 	addi	sp,sp,4
1001333c:	f800283a 	ret

10013340 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10013340:	defff904 	addi	sp,sp,-28
10013344:	df000615 	stw	fp,24(sp)
10013348:	df000604 	addi	fp,sp,24
1001334c:	e13ffe15 	stw	r4,-8(fp)
10013350:	e17fff15 	stw	r5,-4(fp)
10013354:	e0bfff17 	ldw	r2,-4(fp)
10013358:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001335c:	0005303a 	rdctl	r2,status
10013360:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013364:	e0fffb17 	ldw	r3,-20(fp)
10013368:	00bfff84 	movi	r2,-2
1001336c:	1884703a 	and	r2,r3,r2
10013370:	1001703a 	wrctl	status,r2
  
  return context;
10013374:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10013378:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1001337c:	00c00044 	movi	r3,1
10013380:	e0bffa17 	ldw	r2,-24(fp)
10013384:	1884983a 	sll	r2,r3,r2
10013388:	0084303a 	nor	r2,zero,r2
1001338c:	1007883a 	mov	r3,r2
10013390:	d0810917 	ldw	r2,1060(gp)
10013394:	1884703a 	and	r2,r3,r2
10013398:	d0810915 	stw	r2,1060(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1001339c:	d0810917 	ldw	r2,1060(gp)
100133a0:	100170fa 	wrctl	ienable,r2
100133a4:	e0bffc17 	ldw	r2,-16(fp)
100133a8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100133ac:	e0bffd17 	ldw	r2,-12(fp)
100133b0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100133b4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
100133b8:	0001883a 	nop
}
100133bc:	e037883a 	mov	sp,fp
100133c0:	df000017 	ldw	fp,0(sp)
100133c4:	dec00104 	addi	sp,sp,4
100133c8:	f800283a 	ret

100133cc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
100133cc:	defffc04 	addi	sp,sp,-16
100133d0:	df000315 	stw	fp,12(sp)
100133d4:	df000304 	addi	fp,sp,12
100133d8:	e13ffe15 	stw	r4,-8(fp)
100133dc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
100133e0:	000530fa 	rdctl	r2,ienable
100133e4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
100133e8:	00c00044 	movi	r3,1
100133ec:	e0bfff17 	ldw	r2,-4(fp)
100133f0:	1884983a 	sll	r2,r3,r2
100133f4:	1007883a 	mov	r3,r2
100133f8:	e0bffd17 	ldw	r2,-12(fp)
100133fc:	1884703a 	and	r2,r3,r2
10013400:	1004c03a 	cmpne	r2,r2,zero
10013404:	10803fcc 	andi	r2,r2,255
}
10013408:	e037883a 	mov	sp,fp
1001340c:	df000017 	ldw	fp,0(sp)
10013410:	dec00104 	addi	sp,sp,4
10013414:	f800283a 	ret

10013418 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10013418:	defff504 	addi	sp,sp,-44
1001341c:	dfc00a15 	stw	ra,40(sp)
10013420:	df000915 	stw	fp,36(sp)
10013424:	df000904 	addi	fp,sp,36
10013428:	e13ffc15 	stw	r4,-16(fp)
1001342c:	e17ffd15 	stw	r5,-12(fp)
10013430:	e1bffe15 	stw	r6,-8(fp)
10013434:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10013438:	00bffa84 	movi	r2,-22
1001343c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10013440:	e0bffd17 	ldw	r2,-12(fp)
10013444:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10013448:	e0bff817 	ldw	r2,-32(fp)
1001344c:	10800808 	cmpgei	r2,r2,32
10013450:	1000271e 	bne	r2,zero,100134f0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013454:	0005303a 	rdctl	r2,status
10013458:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001345c:	e0fffb17 	ldw	r3,-20(fp)
10013460:	00bfff84 	movi	r2,-2
10013464:	1884703a 	and	r2,r3,r2
10013468:	1001703a 	wrctl	status,r2
  
  return context;
1001346c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10013470:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10013474:	008400b4 	movhi	r2,4098
10013478:	10951004 	addi	r2,r2,21568
1001347c:	e0fff817 	ldw	r3,-32(fp)
10013480:	180690fa 	slli	r3,r3,3
10013484:	10c5883a 	add	r2,r2,r3
10013488:	e0fffe17 	ldw	r3,-8(fp)
1001348c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10013490:	008400b4 	movhi	r2,4098
10013494:	10951004 	addi	r2,r2,21568
10013498:	e0fff817 	ldw	r3,-32(fp)
1001349c:	180690fa 	slli	r3,r3,3
100134a0:	10c5883a 	add	r2,r2,r3
100134a4:	10800104 	addi	r2,r2,4
100134a8:	e0ffff17 	ldw	r3,-4(fp)
100134ac:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
100134b0:	e0bffe17 	ldw	r2,-8(fp)
100134b4:	10000526 	beq	r2,zero,100134cc <alt_iic_isr_register+0xb4>
100134b8:	e0bff817 	ldw	r2,-32(fp)
100134bc:	100b883a 	mov	r5,r2
100134c0:	e13ffc17 	ldw	r4,-16(fp)
100134c4:	00132b80 	call	100132b8 <alt_ic_irq_enable>
100134c8:	00000406 	br	100134dc <alt_iic_isr_register+0xc4>
100134cc:	e0bff817 	ldw	r2,-32(fp)
100134d0:	100b883a 	mov	r5,r2
100134d4:	e13ffc17 	ldw	r4,-16(fp)
100134d8:	00133400 	call	10013340 <alt_ic_irq_disable>
100134dc:	e0bff715 	stw	r2,-36(fp)
100134e0:	e0bffa17 	ldw	r2,-24(fp)
100134e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100134e8:	e0bff917 	ldw	r2,-28(fp)
100134ec:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
100134f0:	e0bff717 	ldw	r2,-36(fp)
}
100134f4:	e037883a 	mov	sp,fp
100134f8:	dfc00117 	ldw	ra,4(sp)
100134fc:	df000017 	ldw	fp,0(sp)
10013500:	dec00204 	addi	sp,sp,8
10013504:	f800283a 	ret

10013508 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10013508:	defff804 	addi	sp,sp,-32
1001350c:	dfc00715 	stw	ra,28(sp)
10013510:	df000615 	stw	fp,24(sp)
10013514:	dc000515 	stw	r16,20(sp)
10013518:	df000604 	addi	fp,sp,24
1001351c:	e13ffb15 	stw	r4,-20(fp)
10013520:	e17ffc15 	stw	r5,-16(fp)
10013524:	e1bffd15 	stw	r6,-12(fp)
10013528:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
1001352c:	e1bffe17 	ldw	r6,-8(fp)
10013530:	e17ffd17 	ldw	r5,-12(fp)
10013534:	e13ffc17 	ldw	r4,-16(fp)
10013538:	00137900 	call	10013790 <open>
1001353c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10013540:	e0bffa17 	ldw	r2,-24(fp)
10013544:	10002216 	blt	r2,zero,100135d0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10013548:	040400b4 	movhi	r16,4098
1001354c:	842f8104 	addi	r16,r16,-16892
10013550:	e0bffa17 	ldw	r2,-24(fp)
10013554:	01400304 	movi	r5,12
10013558:	1009883a 	mov	r4,r2
1001355c:	0004b940 	call	10004b94 <__mulsi3>
10013560:	8085883a 	add	r2,r16,r2
10013564:	10c00017 	ldw	r3,0(r2)
10013568:	e0bffb17 	ldw	r2,-20(fp)
1001356c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10013570:	040400b4 	movhi	r16,4098
10013574:	842f8104 	addi	r16,r16,-16892
10013578:	e0bffa17 	ldw	r2,-24(fp)
1001357c:	01400304 	movi	r5,12
10013580:	1009883a 	mov	r4,r2
10013584:	0004b940 	call	10004b94 <__mulsi3>
10013588:	8085883a 	add	r2,r16,r2
1001358c:	10800104 	addi	r2,r2,4
10013590:	10c00017 	ldw	r3,0(r2)
10013594:	e0bffb17 	ldw	r2,-20(fp)
10013598:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1001359c:	040400b4 	movhi	r16,4098
100135a0:	842f8104 	addi	r16,r16,-16892
100135a4:	e0bffa17 	ldw	r2,-24(fp)
100135a8:	01400304 	movi	r5,12
100135ac:	1009883a 	mov	r4,r2
100135b0:	0004b940 	call	10004b94 <__mulsi3>
100135b4:	8085883a 	add	r2,r16,r2
100135b8:	10800204 	addi	r2,r2,8
100135bc:	10c00017 	ldw	r3,0(r2)
100135c0:	e0bffb17 	ldw	r2,-20(fp)
100135c4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
100135c8:	e13ffa17 	ldw	r4,-24(fp)
100135cc:	00120440 	call	10012044 <alt_release_fd>
  }
} 
100135d0:	0001883a 	nop
100135d4:	e6ffff04 	addi	sp,fp,-4
100135d8:	dfc00217 	ldw	ra,8(sp)
100135dc:	df000117 	ldw	fp,4(sp)
100135e0:	dc000017 	ldw	r16,0(sp)
100135e4:	dec00304 	addi	sp,sp,12
100135e8:	f800283a 	ret

100135ec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
100135ec:	defffb04 	addi	sp,sp,-20
100135f0:	dfc00415 	stw	ra,16(sp)
100135f4:	df000315 	stw	fp,12(sp)
100135f8:	df000304 	addi	fp,sp,12
100135fc:	e13ffd15 	stw	r4,-12(fp)
10013600:	e17ffe15 	stw	r5,-8(fp)
10013604:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10013608:	01c07fc4 	movi	r7,511
1001360c:	01800044 	movi	r6,1
10013610:	e17ffd17 	ldw	r5,-12(fp)
10013614:	010400b4 	movhi	r4,4098
10013618:	212f8404 	addi	r4,r4,-16880
1001361c:	00135080 	call	10013508 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10013620:	01c07fc4 	movi	r7,511
10013624:	000d883a 	mov	r6,zero
10013628:	e17ffe17 	ldw	r5,-8(fp)
1001362c:	010400b4 	movhi	r4,4098
10013630:	212f8104 	addi	r4,r4,-16892
10013634:	00135080 	call	10013508 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10013638:	01c07fc4 	movi	r7,511
1001363c:	01800044 	movi	r6,1
10013640:	e17fff17 	ldw	r5,-4(fp)
10013644:	010400b4 	movhi	r4,4098
10013648:	212f8704 	addi	r4,r4,-16868
1001364c:	00135080 	call	10013508 <alt_open_fd>
}  
10013650:	0001883a 	nop
10013654:	e037883a 	mov	sp,fp
10013658:	dfc00117 	ldw	ra,4(sp)
1001365c:	df000017 	ldw	fp,0(sp)
10013660:	dec00204 	addi	sp,sp,8
10013664:	f800283a 	ret

10013668 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10013668:	defffe04 	addi	sp,sp,-8
1001366c:	dfc00115 	stw	ra,4(sp)
10013670:	df000015 	stw	fp,0(sp)
10013674:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10013678:	d0a00b17 	ldw	r2,-32724(gp)
1001367c:	10000326 	beq	r2,zero,1001368c <alt_get_errno+0x24>
10013680:	d0a00b17 	ldw	r2,-32724(gp)
10013684:	103ee83a 	callr	r2
10013688:	00000106 	br	10013690 <alt_get_errno+0x28>
1001368c:	d0810504 	addi	r2,gp,1044
}
10013690:	e037883a 	mov	sp,fp
10013694:	dfc00117 	ldw	ra,4(sp)
10013698:	df000017 	ldw	fp,0(sp)
1001369c:	dec00204 	addi	sp,sp,8
100136a0:	f800283a 	ret

100136a4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
100136a4:	defffb04 	addi	sp,sp,-20
100136a8:	dfc00415 	stw	ra,16(sp)
100136ac:	df000315 	stw	fp,12(sp)
100136b0:	dc000215 	stw	r16,8(sp)
100136b4:	df000304 	addi	fp,sp,12
100136b8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
100136bc:	e0bffe17 	ldw	r2,-8(fp)
100136c0:	10800217 	ldw	r2,8(r2)
100136c4:	10d00034 	orhi	r3,r2,16384
100136c8:	e0bffe17 	ldw	r2,-8(fp)
100136cc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100136d0:	e03ffd15 	stw	zero,-12(fp)
100136d4:	00002306 	br	10013764 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100136d8:	040400b4 	movhi	r16,4098
100136dc:	842f8104 	addi	r16,r16,-16892
100136e0:	e0bffd17 	ldw	r2,-12(fp)
100136e4:	01400304 	movi	r5,12
100136e8:	1009883a 	mov	r4,r2
100136ec:	0004b940 	call	10004b94 <__mulsi3>
100136f0:	8085883a 	add	r2,r16,r2
100136f4:	10c00017 	ldw	r3,0(r2)
100136f8:	e0bffe17 	ldw	r2,-8(fp)
100136fc:	10800017 	ldw	r2,0(r2)
10013700:	1880151e 	bne	r3,r2,10013758 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10013704:	040400b4 	movhi	r16,4098
10013708:	842f8104 	addi	r16,r16,-16892
1001370c:	e0bffd17 	ldw	r2,-12(fp)
10013710:	01400304 	movi	r5,12
10013714:	1009883a 	mov	r4,r2
10013718:	0004b940 	call	10004b94 <__mulsi3>
1001371c:	8085883a 	add	r2,r16,r2
10013720:	10800204 	addi	r2,r2,8
10013724:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10013728:	10000b0e 	bge	r2,zero,10013758 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1001372c:	01400304 	movi	r5,12
10013730:	e13ffd17 	ldw	r4,-12(fp)
10013734:	0004b940 	call	10004b94 <__mulsi3>
10013738:	1007883a 	mov	r3,r2
1001373c:	008400b4 	movhi	r2,4098
10013740:	10af8104 	addi	r2,r2,-16892
10013744:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10013748:	e0bffe17 	ldw	r2,-8(fp)
1001374c:	18800226 	beq	r3,r2,10013758 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10013750:	00bffcc4 	movi	r2,-13
10013754:	00000806 	br	10013778 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10013758:	e0bffd17 	ldw	r2,-12(fp)
1001375c:	10800044 	addi	r2,r2,1
10013760:	e0bffd15 	stw	r2,-12(fp)
10013764:	d0a00a17 	ldw	r2,-32728(gp)
10013768:	1007883a 	mov	r3,r2
1001376c:	e0bffd17 	ldw	r2,-12(fp)
10013770:	18bfd92e 	bgeu	r3,r2,100136d8 <__alt_data_end+0xf80136d8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10013774:	0005883a 	mov	r2,zero
}
10013778:	e6ffff04 	addi	sp,fp,-4
1001377c:	dfc00217 	ldw	ra,8(sp)
10013780:	df000117 	ldw	fp,4(sp)
10013784:	dc000017 	ldw	r16,0(sp)
10013788:	dec00304 	addi	sp,sp,12
1001378c:	f800283a 	ret

10013790 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10013790:	defff604 	addi	sp,sp,-40
10013794:	dfc00915 	stw	ra,36(sp)
10013798:	df000815 	stw	fp,32(sp)
1001379c:	df000804 	addi	fp,sp,32
100137a0:	e13ffd15 	stw	r4,-12(fp)
100137a4:	e17ffe15 	stw	r5,-8(fp)
100137a8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
100137ac:	00bfffc4 	movi	r2,-1
100137b0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
100137b4:	00bffb44 	movi	r2,-19
100137b8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
100137bc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
100137c0:	d1600804 	addi	r5,gp,-32736
100137c4:	e13ffd17 	ldw	r4,-12(fp)
100137c8:	0013ab40 	call	10013ab4 <alt_find_dev>
100137cc:	e0bff815 	stw	r2,-32(fp)
100137d0:	e0bff817 	ldw	r2,-32(fp)
100137d4:	1000051e 	bne	r2,zero,100137ec <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
100137d8:	e13ffd17 	ldw	r4,-12(fp)
100137dc:	0013b440 	call	10013b44 <alt_find_file>
100137e0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
100137e4:	00800044 	movi	r2,1
100137e8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
100137ec:	e0bff817 	ldw	r2,-32(fp)
100137f0:	10002b26 	beq	r2,zero,100138a0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
100137f4:	e13ff817 	ldw	r4,-32(fp)
100137f8:	0013c4c0 	call	10013c4c <alt_get_fd>
100137fc:	e0bff915 	stw	r2,-28(fp)
10013800:	e0bff917 	ldw	r2,-28(fp)
10013804:	1000030e 	bge	r2,zero,10013814 <open+0x84>
    {
      status = index;
10013808:	e0bff917 	ldw	r2,-28(fp)
1001380c:	e0bffa15 	stw	r2,-24(fp)
10013810:	00002506 	br	100138a8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
10013814:	01400304 	movi	r5,12
10013818:	e13ff917 	ldw	r4,-28(fp)
1001381c:	0004b940 	call	10004b94 <__mulsi3>
10013820:	1007883a 	mov	r3,r2
10013824:	008400b4 	movhi	r2,4098
10013828:	10af8104 	addi	r2,r2,-16892
1001382c:	1885883a 	add	r2,r3,r2
10013830:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10013834:	e0fffe17 	ldw	r3,-8(fp)
10013838:	00900034 	movhi	r2,16384
1001383c:	10bfffc4 	addi	r2,r2,-1
10013840:	1886703a 	and	r3,r3,r2
10013844:	e0bffc17 	ldw	r2,-16(fp)
10013848:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1001384c:	e0bffb17 	ldw	r2,-20(fp)
10013850:	1000051e 	bne	r2,zero,10013868 <open+0xd8>
10013854:	e13ffc17 	ldw	r4,-16(fp)
10013858:	00136a40 	call	100136a4 <alt_file_locked>
1001385c:	e0bffa15 	stw	r2,-24(fp)
10013860:	e0bffa17 	ldw	r2,-24(fp)
10013864:	10001016 	blt	r2,zero,100138a8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10013868:	e0bff817 	ldw	r2,-32(fp)
1001386c:	10800317 	ldw	r2,12(r2)
10013870:	10000826 	beq	r2,zero,10013894 <open+0x104>
10013874:	e0bff817 	ldw	r2,-32(fp)
10013878:	10800317 	ldw	r2,12(r2)
1001387c:	e1ffff17 	ldw	r7,-4(fp)
10013880:	e1bffe17 	ldw	r6,-8(fp)
10013884:	e17ffd17 	ldw	r5,-12(fp)
10013888:	e13ffc17 	ldw	r4,-16(fp)
1001388c:	103ee83a 	callr	r2
10013890:	00000106 	br	10013898 <open+0x108>
10013894:	0005883a 	mov	r2,zero
10013898:	e0bffa15 	stw	r2,-24(fp)
1001389c:	00000206 	br	100138a8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
100138a0:	00bffb44 	movi	r2,-19
100138a4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
100138a8:	e0bffa17 	ldw	r2,-24(fp)
100138ac:	1000090e 	bge	r2,zero,100138d4 <open+0x144>
  {
    alt_release_fd (index);  
100138b0:	e13ff917 	ldw	r4,-28(fp)
100138b4:	00120440 	call	10012044 <alt_release_fd>
    ALT_ERRNO = -status;
100138b8:	00136680 	call	10013668 <alt_get_errno>
100138bc:	1007883a 	mov	r3,r2
100138c0:	e0bffa17 	ldw	r2,-24(fp)
100138c4:	0085c83a 	sub	r2,zero,r2
100138c8:	18800015 	stw	r2,0(r3)
    return -1;
100138cc:	00bfffc4 	movi	r2,-1
100138d0:	00000106 	br	100138d8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
100138d4:	e0bff917 	ldw	r2,-28(fp)
}
100138d8:	e037883a 	mov	sp,fp
100138dc:	dfc00117 	ldw	ra,4(sp)
100138e0:	df000017 	ldw	fp,0(sp)
100138e4:	dec00204 	addi	sp,sp,8
100138e8:	f800283a 	ret

100138ec <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
100138ec:	defffa04 	addi	sp,sp,-24
100138f0:	df000515 	stw	fp,20(sp)
100138f4:	df000504 	addi	fp,sp,20
100138f8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100138fc:	0005303a 	rdctl	r2,status
10013900:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013904:	e0fffc17 	ldw	r3,-16(fp)
10013908:	00bfff84 	movi	r2,-2
1001390c:	1884703a 	and	r2,r3,r2
10013910:	1001703a 	wrctl	status,r2
  
  return context;
10013914:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10013918:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1001391c:	e0bfff17 	ldw	r2,-4(fp)
10013920:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10013924:	e0bffd17 	ldw	r2,-12(fp)
10013928:	10800017 	ldw	r2,0(r2)
1001392c:	e0fffd17 	ldw	r3,-12(fp)
10013930:	18c00117 	ldw	r3,4(r3)
10013934:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10013938:	e0bffd17 	ldw	r2,-12(fp)
1001393c:	10800117 	ldw	r2,4(r2)
10013940:	e0fffd17 	ldw	r3,-12(fp)
10013944:	18c00017 	ldw	r3,0(r3)
10013948:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1001394c:	e0bffd17 	ldw	r2,-12(fp)
10013950:	e0fffd17 	ldw	r3,-12(fp)
10013954:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10013958:	e0bffd17 	ldw	r2,-12(fp)
1001395c:	e0fffd17 	ldw	r3,-12(fp)
10013960:	10c00015 	stw	r3,0(r2)
10013964:	e0bffb17 	ldw	r2,-20(fp)
10013968:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001396c:	e0bffe17 	ldw	r2,-8(fp)
10013970:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10013974:	0001883a 	nop
10013978:	e037883a 	mov	sp,fp
1001397c:	df000017 	ldw	fp,0(sp)
10013980:	dec00104 	addi	sp,sp,4
10013984:	f800283a 	ret

10013988 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10013988:	defffb04 	addi	sp,sp,-20
1001398c:	dfc00415 	stw	ra,16(sp)
10013990:	df000315 	stw	fp,12(sp)
10013994:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10013998:	d0a00e17 	ldw	r2,-32712(gp)
1001399c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
100139a0:	d0810b17 	ldw	r2,1068(gp)
100139a4:	10800044 	addi	r2,r2,1
100139a8:	d0810b15 	stw	r2,1068(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100139ac:	00002e06 	br	10013a68 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
100139b0:	e0bffd17 	ldw	r2,-12(fp)
100139b4:	10800017 	ldw	r2,0(r2)
100139b8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
100139bc:	e0bffd17 	ldw	r2,-12(fp)
100139c0:	10800403 	ldbu	r2,16(r2)
100139c4:	10803fcc 	andi	r2,r2,255
100139c8:	10000426 	beq	r2,zero,100139dc <alt_tick+0x54>
100139cc:	d0810b17 	ldw	r2,1068(gp)
100139d0:	1000021e 	bne	r2,zero,100139dc <alt_tick+0x54>
    {
      alarm->rollover = 0;
100139d4:	e0bffd17 	ldw	r2,-12(fp)
100139d8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
100139dc:	e0bffd17 	ldw	r2,-12(fp)
100139e0:	10800217 	ldw	r2,8(r2)
100139e4:	d0c10b17 	ldw	r3,1068(gp)
100139e8:	18801d36 	bltu	r3,r2,10013a60 <alt_tick+0xd8>
100139ec:	e0bffd17 	ldw	r2,-12(fp)
100139f0:	10800403 	ldbu	r2,16(r2)
100139f4:	10803fcc 	andi	r2,r2,255
100139f8:	1000191e 	bne	r2,zero,10013a60 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
100139fc:	e0bffd17 	ldw	r2,-12(fp)
10013a00:	10800317 	ldw	r2,12(r2)
10013a04:	e0fffd17 	ldw	r3,-12(fp)
10013a08:	18c00517 	ldw	r3,20(r3)
10013a0c:	1809883a 	mov	r4,r3
10013a10:	103ee83a 	callr	r2
10013a14:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10013a18:	e0bfff17 	ldw	r2,-4(fp)
10013a1c:	1000031e 	bne	r2,zero,10013a2c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10013a20:	e13ffd17 	ldw	r4,-12(fp)
10013a24:	00138ec0 	call	100138ec <alt_alarm_stop>
10013a28:	00000d06 	br	10013a60 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10013a2c:	e0bffd17 	ldw	r2,-12(fp)
10013a30:	10c00217 	ldw	r3,8(r2)
10013a34:	e0bfff17 	ldw	r2,-4(fp)
10013a38:	1887883a 	add	r3,r3,r2
10013a3c:	e0bffd17 	ldw	r2,-12(fp)
10013a40:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10013a44:	e0bffd17 	ldw	r2,-12(fp)
10013a48:	10c00217 	ldw	r3,8(r2)
10013a4c:	d0810b17 	ldw	r2,1068(gp)
10013a50:	1880032e 	bgeu	r3,r2,10013a60 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10013a54:	e0bffd17 	ldw	r2,-12(fp)
10013a58:	00c00044 	movi	r3,1
10013a5c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10013a60:	e0bffe17 	ldw	r2,-8(fp)
10013a64:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10013a68:	e0fffd17 	ldw	r3,-12(fp)
10013a6c:	d0a00e04 	addi	r2,gp,-32712
10013a70:	18bfcf1e 	bne	r3,r2,100139b0 <__alt_data_end+0xf80139b0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10013a74:	0001883a 	nop
}
10013a78:	0001883a 	nop
10013a7c:	e037883a 	mov	sp,fp
10013a80:	dfc00117 	ldw	ra,4(sp)
10013a84:	df000017 	ldw	fp,0(sp)
10013a88:	dec00204 	addi	sp,sp,8
10013a8c:	f800283a 	ret

10013a90 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10013a90:	deffff04 	addi	sp,sp,-4
10013a94:	df000015 	stw	fp,0(sp)
10013a98:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10013a9c:	000170fa 	wrctl	ienable,zero
}
10013aa0:	0001883a 	nop
10013aa4:	e037883a 	mov	sp,fp
10013aa8:	df000017 	ldw	fp,0(sp)
10013aac:	dec00104 	addi	sp,sp,4
10013ab0:	f800283a 	ret

10013ab4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10013ab4:	defffa04 	addi	sp,sp,-24
10013ab8:	dfc00515 	stw	ra,20(sp)
10013abc:	df000415 	stw	fp,16(sp)
10013ac0:	df000404 	addi	fp,sp,16
10013ac4:	e13ffe15 	stw	r4,-8(fp)
10013ac8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10013acc:	e0bfff17 	ldw	r2,-4(fp)
10013ad0:	10800017 	ldw	r2,0(r2)
10013ad4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10013ad8:	e13ffe17 	ldw	r4,-8(fp)
10013adc:	0004cfc0 	call	10004cfc <strlen>
10013ae0:	10800044 	addi	r2,r2,1
10013ae4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10013ae8:	00000d06 	br	10013b20 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10013aec:	e0bffc17 	ldw	r2,-16(fp)
10013af0:	10800217 	ldw	r2,8(r2)
10013af4:	e0fffd17 	ldw	r3,-12(fp)
10013af8:	180d883a 	mov	r6,r3
10013afc:	e17ffe17 	ldw	r5,-8(fp)
10013b00:	1009883a 	mov	r4,r2
10013b04:	0013df80 	call	10013df8 <memcmp>
10013b08:	1000021e 	bne	r2,zero,10013b14 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10013b0c:	e0bffc17 	ldw	r2,-16(fp)
10013b10:	00000706 	br	10013b30 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10013b14:	e0bffc17 	ldw	r2,-16(fp)
10013b18:	10800017 	ldw	r2,0(r2)
10013b1c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10013b20:	e0fffc17 	ldw	r3,-16(fp)
10013b24:	e0bfff17 	ldw	r2,-4(fp)
10013b28:	18bff01e 	bne	r3,r2,10013aec <__alt_data_end+0xf8013aec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10013b2c:	0005883a 	mov	r2,zero
}
10013b30:	e037883a 	mov	sp,fp
10013b34:	dfc00117 	ldw	ra,4(sp)
10013b38:	df000017 	ldw	fp,0(sp)
10013b3c:	dec00204 	addi	sp,sp,8
10013b40:	f800283a 	ret

10013b44 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10013b44:	defffb04 	addi	sp,sp,-20
10013b48:	dfc00415 	stw	ra,16(sp)
10013b4c:	df000315 	stw	fp,12(sp)
10013b50:	df000304 	addi	fp,sp,12
10013b54:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10013b58:	d0a00617 	ldw	r2,-32744(gp)
10013b5c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10013b60:	00003106 	br	10013c28 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10013b64:	e0bffd17 	ldw	r2,-12(fp)
10013b68:	10800217 	ldw	r2,8(r2)
10013b6c:	1009883a 	mov	r4,r2
10013b70:	0004cfc0 	call	10004cfc <strlen>
10013b74:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10013b78:	e0bffd17 	ldw	r2,-12(fp)
10013b7c:	10c00217 	ldw	r3,8(r2)
10013b80:	e0bffe17 	ldw	r2,-8(fp)
10013b84:	10bfffc4 	addi	r2,r2,-1
10013b88:	1885883a 	add	r2,r3,r2
10013b8c:	10800003 	ldbu	r2,0(r2)
10013b90:	10803fcc 	andi	r2,r2,255
10013b94:	1080201c 	xori	r2,r2,128
10013b98:	10bfe004 	addi	r2,r2,-128
10013b9c:	10800bd8 	cmpnei	r2,r2,47
10013ba0:	1000031e 	bne	r2,zero,10013bb0 <alt_find_file+0x6c>
    {
      len -= 1;
10013ba4:	e0bffe17 	ldw	r2,-8(fp)
10013ba8:	10bfffc4 	addi	r2,r2,-1
10013bac:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10013bb0:	e0bffe17 	ldw	r2,-8(fp)
10013bb4:	e0ffff17 	ldw	r3,-4(fp)
10013bb8:	1885883a 	add	r2,r3,r2
10013bbc:	10800003 	ldbu	r2,0(r2)
10013bc0:	10803fcc 	andi	r2,r2,255
10013bc4:	1080201c 	xori	r2,r2,128
10013bc8:	10bfe004 	addi	r2,r2,-128
10013bcc:	10800be0 	cmpeqi	r2,r2,47
10013bd0:	1000081e 	bne	r2,zero,10013bf4 <alt_find_file+0xb0>
10013bd4:	e0bffe17 	ldw	r2,-8(fp)
10013bd8:	e0ffff17 	ldw	r3,-4(fp)
10013bdc:	1885883a 	add	r2,r3,r2
10013be0:	10800003 	ldbu	r2,0(r2)
10013be4:	10803fcc 	andi	r2,r2,255
10013be8:	1080201c 	xori	r2,r2,128
10013bec:	10bfe004 	addi	r2,r2,-128
10013bf0:	10000a1e 	bne	r2,zero,10013c1c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10013bf4:	e0bffd17 	ldw	r2,-12(fp)
10013bf8:	10800217 	ldw	r2,8(r2)
10013bfc:	e0fffe17 	ldw	r3,-8(fp)
10013c00:	180d883a 	mov	r6,r3
10013c04:	e17fff17 	ldw	r5,-4(fp)
10013c08:	1009883a 	mov	r4,r2
10013c0c:	0013df80 	call	10013df8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10013c10:	1000021e 	bne	r2,zero,10013c1c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10013c14:	e0bffd17 	ldw	r2,-12(fp)
10013c18:	00000706 	br	10013c38 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10013c1c:	e0bffd17 	ldw	r2,-12(fp)
10013c20:	10800017 	ldw	r2,0(r2)
10013c24:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10013c28:	e0fffd17 	ldw	r3,-12(fp)
10013c2c:	d0a00604 	addi	r2,gp,-32744
10013c30:	18bfcc1e 	bne	r3,r2,10013b64 <__alt_data_end+0xf8013b64>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10013c34:	0005883a 	mov	r2,zero
}
10013c38:	e037883a 	mov	sp,fp
10013c3c:	dfc00117 	ldw	ra,4(sp)
10013c40:	df000017 	ldw	fp,0(sp)
10013c44:	dec00204 	addi	sp,sp,8
10013c48:	f800283a 	ret

10013c4c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10013c4c:	defffa04 	addi	sp,sp,-24
10013c50:	dfc00515 	stw	ra,20(sp)
10013c54:	df000415 	stw	fp,16(sp)
10013c58:	dc000315 	stw	r16,12(sp)
10013c5c:	df000404 	addi	fp,sp,16
10013c60:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10013c64:	00bffa04 	movi	r2,-24
10013c68:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10013c6c:	e03ffc15 	stw	zero,-16(fp)
10013c70:	00001d06 	br	10013ce8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
10013c74:	040400b4 	movhi	r16,4098
10013c78:	842f8104 	addi	r16,r16,-16892
10013c7c:	e0bffc17 	ldw	r2,-16(fp)
10013c80:	01400304 	movi	r5,12
10013c84:	1009883a 	mov	r4,r2
10013c88:	0004b940 	call	10004b94 <__mulsi3>
10013c8c:	8085883a 	add	r2,r16,r2
10013c90:	10800017 	ldw	r2,0(r2)
10013c94:	1000111e 	bne	r2,zero,10013cdc <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
10013c98:	040400b4 	movhi	r16,4098
10013c9c:	842f8104 	addi	r16,r16,-16892
10013ca0:	e0bffc17 	ldw	r2,-16(fp)
10013ca4:	01400304 	movi	r5,12
10013ca8:	1009883a 	mov	r4,r2
10013cac:	0004b940 	call	10004b94 <__mulsi3>
10013cb0:	8085883a 	add	r2,r16,r2
10013cb4:	e0fffe17 	ldw	r3,-8(fp)
10013cb8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10013cbc:	d0e00a17 	ldw	r3,-32728(gp)
10013cc0:	e0bffc17 	ldw	r2,-16(fp)
10013cc4:	1880020e 	bge	r3,r2,10013cd0 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
10013cc8:	e0bffc17 	ldw	r2,-16(fp)
10013ccc:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
10013cd0:	e0bffc17 	ldw	r2,-16(fp)
10013cd4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10013cd8:	00000606 	br	10013cf4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10013cdc:	e0bffc17 	ldw	r2,-16(fp)
10013ce0:	10800044 	addi	r2,r2,1
10013ce4:	e0bffc15 	stw	r2,-16(fp)
10013ce8:	e0bffc17 	ldw	r2,-16(fp)
10013cec:	10800810 	cmplti	r2,r2,32
10013cf0:	103fe01e 	bne	r2,zero,10013c74 <__alt_data_end+0xf8013c74>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10013cf4:	e0bffd17 	ldw	r2,-12(fp)
}
10013cf8:	e6ffff04 	addi	sp,fp,-4
10013cfc:	dfc00217 	ldw	ra,8(sp)
10013d00:	df000117 	ldw	fp,4(sp)
10013d04:	dc000017 	ldw	r16,0(sp)
10013d08:	dec00304 	addi	sp,sp,12
10013d0c:	f800283a 	ret

10013d10 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10013d10:	defffe04 	addi	sp,sp,-8
10013d14:	df000115 	stw	fp,4(sp)
10013d18:	df000104 	addi	fp,sp,4
10013d1c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10013d20:	e0bfff17 	ldw	r2,-4(fp)
10013d24:	10bffe84 	addi	r2,r2,-6
10013d28:	10c00428 	cmpgeui	r3,r2,16
10013d2c:	18001a1e 	bne	r3,zero,10013d98 <alt_exception_cause_generated_bad_addr+0x88>
10013d30:	100690ba 	slli	r3,r2,2
10013d34:	00840074 	movhi	r2,4097
10013d38:	108f5204 	addi	r2,r2,15688
10013d3c:	1885883a 	add	r2,r3,r2
10013d40:	10800017 	ldw	r2,0(r2)
10013d44:	1000683a 	jmp	r2
10013d48:	10013d88 	cmpgei	zero,r2,1270
10013d4c:	10013d88 	cmpgei	zero,r2,1270
10013d50:	10013d98 	cmpnei	zero,r2,1270
10013d54:	10013d98 	cmpnei	zero,r2,1270
10013d58:	10013d98 	cmpnei	zero,r2,1270
10013d5c:	10013d88 	cmpgei	zero,r2,1270
10013d60:	10013d90 	cmplti	zero,r2,1270
10013d64:	10013d98 	cmpnei	zero,r2,1270
10013d68:	10013d88 	cmpgei	zero,r2,1270
10013d6c:	10013d88 	cmpgei	zero,r2,1270
10013d70:	10013d98 	cmpnei	zero,r2,1270
10013d74:	10013d88 	cmpgei	zero,r2,1270
10013d78:	10013d90 	cmplti	zero,r2,1270
10013d7c:	10013d98 	cmpnei	zero,r2,1270
10013d80:	10013d98 	cmpnei	zero,r2,1270
10013d84:	10013d88 	cmpgei	zero,r2,1270
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10013d88:	00800044 	movi	r2,1
10013d8c:	00000306 	br	10013d9c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10013d90:	0005883a 	mov	r2,zero
10013d94:	00000106 	br	10013d9c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10013d98:	0005883a 	mov	r2,zero
  }
}
10013d9c:	e037883a 	mov	sp,fp
10013da0:	df000017 	ldw	fp,0(sp)
10013da4:	dec00104 	addi	sp,sp,4
10013da8:	f800283a 	ret

10013dac <atexit>:
10013dac:	200b883a 	mov	r5,r4
10013db0:	000f883a 	mov	r7,zero
10013db4:	000d883a 	mov	r6,zero
10013db8:	0009883a 	mov	r4,zero
10013dbc:	0013e741 	jmpi	10013e74 <__register_exitproc>

10013dc0 <exit>:
10013dc0:	defffe04 	addi	sp,sp,-8
10013dc4:	000b883a 	mov	r5,zero
10013dc8:	dc000015 	stw	r16,0(sp)
10013dcc:	dfc00115 	stw	ra,4(sp)
10013dd0:	2021883a 	mov	r16,r4
10013dd4:	0013f8c0 	call	10013f8c <__call_exitprocs>
10013dd8:	008400b4 	movhi	r2,4098
10013ddc:	10b3f904 	addi	r2,r2,-12316
10013de0:	11000017 	ldw	r4,0(r2)
10013de4:	20800f17 	ldw	r2,60(r4)
10013de8:	10000126 	beq	r2,zero,10013df0 <exit+0x30>
10013dec:	103ee83a 	callr	r2
10013df0:	8009883a 	mov	r4,r16
10013df4:	001410c0 	call	1001410c <_exit>

10013df8 <memcmp>:
10013df8:	01c000c4 	movi	r7,3
10013dfc:	3980192e 	bgeu	r7,r6,10013e64 <memcmp+0x6c>
10013e00:	2144b03a 	or	r2,r4,r5
10013e04:	11c4703a 	and	r2,r2,r7
10013e08:	10000f26 	beq	r2,zero,10013e48 <memcmp+0x50>
10013e0c:	20800003 	ldbu	r2,0(r4)
10013e10:	28c00003 	ldbu	r3,0(r5)
10013e14:	10c0151e 	bne	r2,r3,10013e6c <memcmp+0x74>
10013e18:	31bfff84 	addi	r6,r6,-2
10013e1c:	01ffffc4 	movi	r7,-1
10013e20:	00000406 	br	10013e34 <memcmp+0x3c>
10013e24:	20800003 	ldbu	r2,0(r4)
10013e28:	28c00003 	ldbu	r3,0(r5)
10013e2c:	31bfffc4 	addi	r6,r6,-1
10013e30:	10c00e1e 	bne	r2,r3,10013e6c <memcmp+0x74>
10013e34:	21000044 	addi	r4,r4,1
10013e38:	29400044 	addi	r5,r5,1
10013e3c:	31fff91e 	bne	r6,r7,10013e24 <__alt_data_end+0xf8013e24>
10013e40:	0005883a 	mov	r2,zero
10013e44:	f800283a 	ret
10013e48:	20c00017 	ldw	r3,0(r4)
10013e4c:	28800017 	ldw	r2,0(r5)
10013e50:	18bfee1e 	bne	r3,r2,10013e0c <__alt_data_end+0xf8013e0c>
10013e54:	31bfff04 	addi	r6,r6,-4
10013e58:	21000104 	addi	r4,r4,4
10013e5c:	29400104 	addi	r5,r5,4
10013e60:	39bff936 	bltu	r7,r6,10013e48 <__alt_data_end+0xf8013e48>
10013e64:	303fe91e 	bne	r6,zero,10013e0c <__alt_data_end+0xf8013e0c>
10013e68:	003ff506 	br	10013e40 <__alt_data_end+0xf8013e40>
10013e6c:	10c5c83a 	sub	r2,r2,r3
10013e70:	f800283a 	ret

10013e74 <__register_exitproc>:
10013e74:	defffa04 	addi	sp,sp,-24
10013e78:	dc000315 	stw	r16,12(sp)
10013e7c:	040400b4 	movhi	r16,4098
10013e80:	8433f904 	addi	r16,r16,-12316
10013e84:	80c00017 	ldw	r3,0(r16)
10013e88:	dc400415 	stw	r17,16(sp)
10013e8c:	dfc00515 	stw	ra,20(sp)
10013e90:	18805217 	ldw	r2,328(r3)
10013e94:	2023883a 	mov	r17,r4
10013e98:	10003726 	beq	r2,zero,10013f78 <__register_exitproc+0x104>
10013e9c:	10c00117 	ldw	r3,4(r2)
10013ea0:	010007c4 	movi	r4,31
10013ea4:	20c00e16 	blt	r4,r3,10013ee0 <__register_exitproc+0x6c>
10013ea8:	1a000044 	addi	r8,r3,1
10013eac:	8800221e 	bne	r17,zero,10013f38 <__register_exitproc+0xc4>
10013eb0:	18c00084 	addi	r3,r3,2
10013eb4:	18c7883a 	add	r3,r3,r3
10013eb8:	18c7883a 	add	r3,r3,r3
10013ebc:	12000115 	stw	r8,4(r2)
10013ec0:	10c7883a 	add	r3,r2,r3
10013ec4:	19400015 	stw	r5,0(r3)
10013ec8:	0005883a 	mov	r2,zero
10013ecc:	dfc00517 	ldw	ra,20(sp)
10013ed0:	dc400417 	ldw	r17,16(sp)
10013ed4:	dc000317 	ldw	r16,12(sp)
10013ed8:	dec00604 	addi	sp,sp,24
10013edc:	f800283a 	ret
10013ee0:	00800034 	movhi	r2,0
10013ee4:	10800004 	addi	r2,r2,0
10013ee8:	10002626 	beq	r2,zero,10013f84 <__register_exitproc+0x110>
10013eec:	01006404 	movi	r4,400
10013ef0:	d9400015 	stw	r5,0(sp)
10013ef4:	d9800115 	stw	r6,4(sp)
10013ef8:	d9c00215 	stw	r7,8(sp)
10013efc:	00000000 	call	10000000 <__reset>
10013f00:	d9400017 	ldw	r5,0(sp)
10013f04:	d9800117 	ldw	r6,4(sp)
10013f08:	d9c00217 	ldw	r7,8(sp)
10013f0c:	10001d26 	beq	r2,zero,10013f84 <__register_exitproc+0x110>
10013f10:	81000017 	ldw	r4,0(r16)
10013f14:	10000115 	stw	zero,4(r2)
10013f18:	02000044 	movi	r8,1
10013f1c:	22405217 	ldw	r9,328(r4)
10013f20:	0007883a 	mov	r3,zero
10013f24:	12400015 	stw	r9,0(r2)
10013f28:	20805215 	stw	r2,328(r4)
10013f2c:	10006215 	stw	zero,392(r2)
10013f30:	10006315 	stw	zero,396(r2)
10013f34:	883fde26 	beq	r17,zero,10013eb0 <__alt_data_end+0xf8013eb0>
10013f38:	18c9883a 	add	r4,r3,r3
10013f3c:	2109883a 	add	r4,r4,r4
10013f40:	1109883a 	add	r4,r2,r4
10013f44:	21802215 	stw	r6,136(r4)
10013f48:	01800044 	movi	r6,1
10013f4c:	12406217 	ldw	r9,392(r2)
10013f50:	30cc983a 	sll	r6,r6,r3
10013f54:	4992b03a 	or	r9,r9,r6
10013f58:	12406215 	stw	r9,392(r2)
10013f5c:	21c04215 	stw	r7,264(r4)
10013f60:	01000084 	movi	r4,2
10013f64:	893fd21e 	bne	r17,r4,10013eb0 <__alt_data_end+0xf8013eb0>
10013f68:	11006317 	ldw	r4,396(r2)
10013f6c:	218cb03a 	or	r6,r4,r6
10013f70:	11806315 	stw	r6,396(r2)
10013f74:	003fce06 	br	10013eb0 <__alt_data_end+0xf8013eb0>
10013f78:	18805304 	addi	r2,r3,332
10013f7c:	18805215 	stw	r2,328(r3)
10013f80:	003fc606 	br	10013e9c <__alt_data_end+0xf8013e9c>
10013f84:	00bfffc4 	movi	r2,-1
10013f88:	003fd006 	br	10013ecc <__alt_data_end+0xf8013ecc>

10013f8c <__call_exitprocs>:
10013f8c:	defff504 	addi	sp,sp,-44
10013f90:	df000915 	stw	fp,36(sp)
10013f94:	dd400615 	stw	r21,24(sp)
10013f98:	dc800315 	stw	r18,12(sp)
10013f9c:	dfc00a15 	stw	ra,40(sp)
10013fa0:	ddc00815 	stw	r23,32(sp)
10013fa4:	dd800715 	stw	r22,28(sp)
10013fa8:	dd000515 	stw	r20,20(sp)
10013fac:	dcc00415 	stw	r19,16(sp)
10013fb0:	dc400215 	stw	r17,8(sp)
10013fb4:	dc000115 	stw	r16,4(sp)
10013fb8:	d9000015 	stw	r4,0(sp)
10013fbc:	2839883a 	mov	fp,r5
10013fc0:	04800044 	movi	r18,1
10013fc4:	057fffc4 	movi	r21,-1
10013fc8:	008400b4 	movhi	r2,4098
10013fcc:	10b3f904 	addi	r2,r2,-12316
10013fd0:	12000017 	ldw	r8,0(r2)
10013fd4:	45005217 	ldw	r20,328(r8)
10013fd8:	44c05204 	addi	r19,r8,328
10013fdc:	a0001c26 	beq	r20,zero,10014050 <__call_exitprocs+0xc4>
10013fe0:	a0800117 	ldw	r2,4(r20)
10013fe4:	15ffffc4 	addi	r23,r2,-1
10013fe8:	b8000d16 	blt	r23,zero,10014020 <__call_exitprocs+0x94>
10013fec:	14000044 	addi	r16,r2,1
10013ff0:	8421883a 	add	r16,r16,r16
10013ff4:	8421883a 	add	r16,r16,r16
10013ff8:	84402004 	addi	r17,r16,128
10013ffc:	a463883a 	add	r17,r20,r17
10014000:	a421883a 	add	r16,r20,r16
10014004:	e0001e26 	beq	fp,zero,10014080 <__call_exitprocs+0xf4>
10014008:	80804017 	ldw	r2,256(r16)
1001400c:	e0801c26 	beq	fp,r2,10014080 <__call_exitprocs+0xf4>
10014010:	bdffffc4 	addi	r23,r23,-1
10014014:	843fff04 	addi	r16,r16,-4
10014018:	8c7fff04 	addi	r17,r17,-4
1001401c:	bd7ff91e 	bne	r23,r21,10014004 <__alt_data_end+0xf8014004>
10014020:	00800034 	movhi	r2,0
10014024:	10800004 	addi	r2,r2,0
10014028:	10000926 	beq	r2,zero,10014050 <__call_exitprocs+0xc4>
1001402c:	a0800117 	ldw	r2,4(r20)
10014030:	1000301e 	bne	r2,zero,100140f4 <__call_exitprocs+0x168>
10014034:	a0800017 	ldw	r2,0(r20)
10014038:	10003226 	beq	r2,zero,10014104 <__call_exitprocs+0x178>
1001403c:	a009883a 	mov	r4,r20
10014040:	98800015 	stw	r2,0(r19)
10014044:	00000000 	call	10000000 <__reset>
10014048:	9d000017 	ldw	r20,0(r19)
1001404c:	a03fe41e 	bne	r20,zero,10013fe0 <__alt_data_end+0xf8013fe0>
10014050:	dfc00a17 	ldw	ra,40(sp)
10014054:	df000917 	ldw	fp,36(sp)
10014058:	ddc00817 	ldw	r23,32(sp)
1001405c:	dd800717 	ldw	r22,28(sp)
10014060:	dd400617 	ldw	r21,24(sp)
10014064:	dd000517 	ldw	r20,20(sp)
10014068:	dcc00417 	ldw	r19,16(sp)
1001406c:	dc800317 	ldw	r18,12(sp)
10014070:	dc400217 	ldw	r17,8(sp)
10014074:	dc000117 	ldw	r16,4(sp)
10014078:	dec00b04 	addi	sp,sp,44
1001407c:	f800283a 	ret
10014080:	a0800117 	ldw	r2,4(r20)
10014084:	80c00017 	ldw	r3,0(r16)
10014088:	10bfffc4 	addi	r2,r2,-1
1001408c:	15c01426 	beq	r2,r23,100140e0 <__call_exitprocs+0x154>
10014090:	80000015 	stw	zero,0(r16)
10014094:	183fde26 	beq	r3,zero,10014010 <__alt_data_end+0xf8014010>
10014098:	95c8983a 	sll	r4,r18,r23
1001409c:	a0806217 	ldw	r2,392(r20)
100140a0:	a5800117 	ldw	r22,4(r20)
100140a4:	2084703a 	and	r2,r4,r2
100140a8:	10000b26 	beq	r2,zero,100140d8 <__call_exitprocs+0x14c>
100140ac:	a0806317 	ldw	r2,396(r20)
100140b0:	2088703a 	and	r4,r4,r2
100140b4:	20000c1e 	bne	r4,zero,100140e8 <__call_exitprocs+0x15c>
100140b8:	89400017 	ldw	r5,0(r17)
100140bc:	d9000017 	ldw	r4,0(sp)
100140c0:	183ee83a 	callr	r3
100140c4:	a0800117 	ldw	r2,4(r20)
100140c8:	15bfbf1e 	bne	r2,r22,10013fc8 <__alt_data_end+0xf8013fc8>
100140cc:	98800017 	ldw	r2,0(r19)
100140d0:	153fcf26 	beq	r2,r20,10014010 <__alt_data_end+0xf8014010>
100140d4:	003fbc06 	br	10013fc8 <__alt_data_end+0xf8013fc8>
100140d8:	183ee83a 	callr	r3
100140dc:	003ff906 	br	100140c4 <__alt_data_end+0xf80140c4>
100140e0:	a5c00115 	stw	r23,4(r20)
100140e4:	003feb06 	br	10014094 <__alt_data_end+0xf8014094>
100140e8:	89000017 	ldw	r4,0(r17)
100140ec:	183ee83a 	callr	r3
100140f0:	003ff406 	br	100140c4 <__alt_data_end+0xf80140c4>
100140f4:	a0800017 	ldw	r2,0(r20)
100140f8:	a027883a 	mov	r19,r20
100140fc:	1029883a 	mov	r20,r2
10014100:	003fb606 	br	10013fdc <__alt_data_end+0xf8013fdc>
10014104:	0005883a 	mov	r2,zero
10014108:	003ffb06 	br	100140f8 <__alt_data_end+0xf80140f8>

1001410c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1001410c:	defffd04 	addi	sp,sp,-12
10014110:	df000215 	stw	fp,8(sp)
10014114:	df000204 	addi	fp,sp,8
10014118:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1001411c:	0001883a 	nop
10014120:	e0bfff17 	ldw	r2,-4(fp)
10014124:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10014128:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1001412c:	10000226 	beq	r2,zero,10014138 <_exit+0x2c>
    ALT_SIM_FAIL();
10014130:	002af070 	cmpltui	zero,zero,43969
10014134:	00000106 	br	1001413c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10014138:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1001413c:	003fff06 	br	1001413c <__alt_data_end+0xf801413c>
