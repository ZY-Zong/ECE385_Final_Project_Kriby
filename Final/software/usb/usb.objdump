
usb.elf:     file format elf32-littlenios2
usb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00012bb0 memsz 0x00012bb0 flags r-x
    LOAD off    0x00013bd0 vaddr 0x10012bd0 paddr 0x100146bc align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x000161a8 vaddr 0x100161a8 paddr 0x100161a8 align 2**12
         filesz 0x00000000 memsz 0x00000180 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011ee8  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000ab8  10012118  10012118  00013118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  10012bd0  100146bc  00013bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000180  100161a8  100161a8  000161a8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000000e0  000000e0  000156bc  2**0
                  CONTENTS
  7 .sdram        00000000  10016328  10016328  000156bc  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000156bc  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f98  00000000  00000000  000156e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023c3b  00000000  00000000  00016678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000093b7  00000000  00000000  0003a2b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ba63  00000000  00000000  0004366a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002524  00000000  00000000  0004f0d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003b8b  00000000  00000000  000515f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001786c  00000000  00000000  0005517f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0006c9ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018d0  00000000  00000000  0006ca30  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00071902  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00071905  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00071911  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00071912  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00071913  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00071917  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007191b  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0007191f  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0007192a  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00071935  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  00071940  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000037  00000000  00000000  00071951  2**0
                  CONTENTS, READONLY
 30 .jdi          00005b3a  00000000  00000000  00071988  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0007dafc  00000000  00000000  000774c2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10012118 l    d  .rodata	00000000 .rodata
10012bd0 l    d  .rwdata	00000000 .rwdata
100161a8 l    d  .bss	00000000 .bss
000000e0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10016328 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 game_logic.c
100161a8 l     O .bss	00000004 ADDRESS_PTR
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 kirby.c
100161ac l     O .bss	00000004 ADDRESS_PTR
00000000 l    df *ABS*	00000000 main.c
100161b0 l     O .bss	00000004 ADDRESS_PTR
00000000 l    df *ABS*	00000000 test.c
100161b4 l     O .bss	00000004 ADDRESS_PTR
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 usb_main.c
100161b8 l     O .bss	00000002 intStat
100161ba l     O .bss	00000002 usb_ctl_val
100161bc l     O .bss	00000002 ctl_reg
100161be l     O .bss	00000002 no_device
100161c0 l     O .bss	00000002 fs_device
100161c2 l     O .bss	00000001 toggle
100161c3 l     O .bss	00000001 data_size
100161c4 l     O .bss	00000001 hot_plug_count
100161c6 l     O .bss	00000002 code
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10012916 l     O .rodata	00000010 zeroes.4404
10005064 l     F .text	000000bc __sbprintf
10012926 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10005274 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10006dcc l     F .text	00000008 __fp_unlock
10006de0 l     F .text	0000019c __sinit.part.1
10006f7c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10012bd0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10013014 l     O .rwdata	00000020 lc_ctype_charset
10012ff4 l     O .rwdata	00000020 lc_message_charset
10013034 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10012958 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000a450 l     F .text	000000fc __sprint_r.part.0
10012a7c l     O .rodata	00000010 zeroes.4349
1000ba8c l     F .text	000000bc __sbprintf
10012a8c l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000f8f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000fa0c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000fa38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000fb2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000fc14 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000fd00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000fedc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
100146ac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
10010180 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
100102bc l     F .text	00000034 alt_dev_reg
1001361c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10010598 l     F .text	0000020c altera_avalon_jtag_uart_irq
100107a4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10011080 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
100114e0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10011640 l     F .text	0000003c alt_get_errno
1001167c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
100161fc g     O .bss	00000004 alt_instruction_exception_handler
10009a94 g     F .text	00000074 _mprec_log10
10009b80 g     F .text	0000008c __any_on
1000c040 g     F .text	00000054 _isatty_r
10012964 g     O .rodata	00000028 __mprec_tinytens
1000fe18 g     F .text	0000007c alt_main
10002c00 g     F .text	000000c0 _puts_r
10016228 g     O .bss	00000100 alt_irq
1000c094 g     F .text	00000060 _lseek_r
100026a4 g     F .text	00000314 get_keycode_value
100146bc g       *ABS*	00000000 __flash_rwdata_start
1000e2d0 g     F .text	00000088 .hidden __eqdf2
10016328 g       *ABS*	00000000 __alt_heap_start
10002bc4 g     F .text	0000003c printf
1000c2ac g     F .text	0000009c _wcrtomb_r
1000a310 g     F .text	0000005c __sseek
1000712c g     F .text	00000010 __sinit
1000c154 g     F .text	00000140 __swbuf_r
10007c00 g     F .text	0000007c _setlocale_r
10006f84 g     F .text	00000078 __sfmoreglue
1000feb8 g     F .text	00000024 __malloc_unlock
10001aac g     F .text	00000080 UsbGetRetryCnt
100088d0 g     F .text	0000015c memmove
10000348 g     F .text	00000088 IO_init
1000026c g     F .text	000000dc GameStart
10007114 g     F .text	00000018 _cleanup
10008b54 g     F .text	000000a8 _Balloc
1000e358 g     F .text	000000dc .hidden __gtdf2
10011a68 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000bfe4 g     F .text	0000005c _fstat_r
100161e0 g     O .bss	00000004 errno
1000a28c g     F .text	00000008 __seofread
100161e8 g     O .bss	00000004 alt_argv
1001c67c g       *ABS*	00000000 _gp
10010150 g     F .text	00000030 usleep
1001349c g     O .rwdata	00000180 alt_fd_list
10011a8c g     F .text	00000090 alt_find_dev
10008788 g     F .text	00000148 memcpy
10006dd4 g     F .text	0000000c _cleanup_r
1000f710 g     F .text	000000dc .hidden __floatsidf
100115c4 g     F .text	0000007c alt_io_redirect
1000e434 g     F .text	000000f4 .hidden __ltdf2
10000908 g     F .text	00000044 frame_Time
10012118 g       *ABS*	00000000 __DTOR_END__
10002cc0 g     F .text	00000014 puts
10011ce8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
1000a170 g     F .text	00000074 __fpclassifyd
100099f0 g     F .text	000000a4 __ratio
1000ba70 g     F .text	0000001c __vfiprintf_internal
1001099c g     F .text	0000021c altera_avalon_jtag_uart_read
10002b94 g     F .text	00000030 _printf_r
000000e0 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10002ab0 g     F .text	00000064 .hidden __udivsi3
1000fb68 g     F .text	000000ac isatty
100129b4 g     O .rodata	000000c8 __mprec_tens
10007c7c g     F .text	0000000c __locale_charset
100161dc g     O .bss	00000004 __malloc_top_pad
10001138 g     F .text	00000268 UsbGetConfigDesc2
10014684 g     O .rwdata	00000004 __mb_cur_max
10007cac g     F .text	0000000c _localeconv_r
10008f88 g     F .text	0000003c __i2b
100075b0 g     F .text	000004c8 __sfvwrite_r
1000a1e4 g     F .text	00000054 _sbrk_r
1000c0f4 g     F .text	00000060 _read_r
100146a4 g     O .rwdata	00000004 alt_max_fd
1000bcd8 g     F .text	000000f0 _fclose_r
10006d9c g     F .text	00000030 fflush
100161d8 g     O .bss	00000004 __malloc_max_sbrked_mem
1000d054 g     F .text	000008ac .hidden __adddf3
10009798 g     F .text	0000010c __b2d
1000ca90 g     F .text	000005c4 .hidden __umoddi3
1000fd3c g     F .text	000000dc lseek
1001467c g     O .rwdata	00000004 _global_impure_ptr
10009c0c g     F .text	00000564 _realloc_r
10016328 g       *ABS*	00000000 __bss_end
100113f0 g     F .text	000000f0 alt_iic_isr_register
10011960 g     F .text	00000108 alt_tick
1000c494 g     F .text	000005fc .hidden __udivdi3
1000bf40 g     F .text	00000024 _fputwc_r
1001298c g     O .rodata	00000028 __mprec_bigtens
10008d6c g     F .text	00000104 __s2b
1000f7ec g     F .text	000000a8 .hidden __floatunsidf
10000644 g     F .text	000002c4 updateKirby
100094d8 g     F .text	00000060 __mcmp
10000b88 g     F .text	00000100 UsbSetAddress
1000714c g     F .text	00000018 __fp_lock_all
100113a4 g     F .text	0000004c alt_ic_irq_enabled
100118c4 g     F .text	0000009c alt_alarm_stop
100161f0 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
10013474 g     O .rwdata	00000028 alt_dev_null
10011060 g     F .text	00000020 alt_dcache_flush_all
10008e70 g     F .text	00000068 __hi0bits
1000044c g     F .text	00000074 IO_read
1000f690 g     F .text	00000080 .hidden __fixdfsi
100146bc g       *ABS*	00000000 __ram_rwdata_end
1001469c g     O .rwdata	00000008 alt_dev_list
100101bc g     F .text	00000100 write
10012bd0 g       *ABS*	00000000 __ram_rodata_end
1000fa74 g     F .text	000000b8 fstat
1000e434 g     F .text	000000f4 .hidden __ledf2
10001b2c g     F .text	00000080 UsbPrintMem
10009250 g     F .text	00000140 __pow5mult
1000a564 g     F .text	0000150c ___vfiprintf_internal_r
100161d0 g     O .bss	00000004 __nlocale_changed
10002b14 g     F .text	00000058 .hidden __umodsi3
10016328 g       *ABS*	00000000 end
100005e8 g     F .text	0000005c encryption
100104d8 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10012118 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000f894 g     F .text	00000064 .hidden __clzsi2
10010bb8 g     F .text	00000224 altera_avalon_jtag_uart_write
1000713c g     F .text	00000004 __sfp_lock_acquire
100086a4 g     F .text	000000e4 memchr
10002d6c g     F .text	000022dc ___vfprintf_internal_r
100014a0 g     F .text	00000100 UsbClassRequest
100072a0 g     F .text	00000310 _free_r
10007c88 g     F .text	00000010 __locale_mb_cur_max
10011f64 g     F .text	00000180 __call_exitprocs
100161cc g     O .bss	00000004 __mlocale_changed
10014688 g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
100161f4 g     O .bss	00000004 _alt_tick_rate
10009390 g     F .text	00000148 __lshift
100161f8 g     O .bss	00000004 _alt_nticks
1000ff18 g     F .text	00000104 read
10010328 g     F .text	0000004c alt_sys_init
1000051c g     F .text	000000cc upload_Kirby_Info
10011e4c g     F .text	00000118 __register_exitproc
10008fc4 g     F .text	0000028c __multiply
10010844 g     F .text	00000068 altera_avalon_jtag_uart_close
10002b6c g     F .text	00000028 .hidden __mulsi3
10012bd0 g       *ABS*	00000000 __ram_rwdata_start
10012118 g       *ABS*	00000000 __ram_rodata_start
10016200 g     O .bss	00000028 __malloc_current_mallinfo
100098a4 g     F .text	0000014c __d2b
10000c88 g     F .text	00000148 UsbGetDeviceDesc1
10010374 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10011c24 g     F .text	000000c4 alt_get_fd
10010f08 g     F .text	00000158 alt_busy_sleep
1000bba8 g     F .text	00000054 _close_r
10011dd0 g     F .text	0000007c memcmp
10010434 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10016328 g       *ABS*	00000000 __alt_stack_base
10010484 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10005120 g     F .text	00000154 __swsetup_r
1000d900 g     F .text	000009d0 .hidden __divdf3
10006ffc g     F .text	00000118 __sfp
10009b08 g     F .text	00000078 __copybits
1001306c g     O .rwdata	00000408 __malloc_av_
10007148 g     F .text	00000004 __sinit_lock_release
1000e528 g     F .text	0000086c .hidden __muldf3
1000a238 g     F .text	00000054 __sread
10001a28 g     F .text	00000084 UsbWaitTDListDone
10011b1c g     F .text	00000108 alt_find_file
100110bc g     F .text	000000a4 alt_dev_llist_insert
1000fe94 g     F .text	00000024 __malloc_lock
100100a0 g     F .text	000000b0 sbrk
10006d40 g     F .text	0000005c _fflush_r
1000bbfc g     F .text	000000dc _calloc_r
100161a8 g       *ABS*	00000000 __bss_start
10008a2c g     F .text	00000128 memset
1000094c g     F .text	0000002c main
100161ec g     O .bss	00000004 alt_envp
100161d4 g     O .bss	00000004 __malloc_max_total_mem
100103d4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
100013a0 g     F .text	00000100 UsbSetConfig
1000c294 g     F .text	00000018 __swbuf
1000a36c g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000bdc8 g     F .text	00000014 fclose
10000978 g     F .text	000000c0 test_keyboard
1000549c g     F .text	00001688 _dtoa_r
10007e98 g     F .text	0000080c _malloc_r
1000c408 g     F .text	00000030 __ascii_wctomb
100146a8 g     O .rwdata	00000004 alt_errno
10007a78 g     F .text	000000c4 _fwalk
100029b8 g     F .text	00000084 .hidden __divsi3
1000717c g     F .text	00000124 _malloc_trim_r
100015a0 g     F .text	00000148 UsbGetHidDesc
10012118 g       *ABS*	00000000 __CTOR_END__
1000a374 g     F .text	000000dc strcmp
10012118 g       *ABS*	00000000 __flash_rodata_start
10012118 g       *ABS*	00000000 __DTOR_LIST__
1000e2d0 g     F .text	00000088 .hidden __nedf2
10000a90 g     F .text	00000044 UsbRead
100102f0 g     F .text	00000038 alt_irq_init
1001001c g     F .text	00000084 alt_release_fd
10012a9c g     O .rodata	00000100 .hidden __clz_tab
100161c8 g     O .bss	00000004 _PathLocale
10011d84 g     F .text	00000014 atexit
1000bb48 g     F .text	00000060 _write_r
10007cb8 g     F .text	00000018 setlocale
10014680 g     O .rwdata	00000004 _impure_ptr
100161e4 g     O .bss	00000004 alt_argc
10006b24 g     F .text	0000021c __sflush_r
100111c0 g     F .text	00000060 _do_dtors
10007ca4 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
10009734 g     F .text	00000064 __ulp
10007164 g     F .text	00000018 __fp_unlock_all
10014694 g     O .rwdata	00000008 alt_fs_list
100016e8 g     F .text	00000340 UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
10007cd0 g     F .text	0000000c localeconv
10011240 g     F .text	00000050 alt_ic_isr_register
100004c0 g     F .text	0000005c initial_Kirby
100146bc g       *ABS*	00000000 _edata
10016328 g       *ABS*	00000000 _end
10000a38 g     F .text	00000058 UsbWrite
1000bddc g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
100108ac g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10011318 g     F .text	0000008c alt_ic_irq_disable
1000a294 g     F .text	0000007c __swrite
1001468c g     O .rwdata	00000004 __malloc_trim_threshold
10007c98 g     F .text	0000000c __locale_msgcharset
10011d98 g     F .text	00000038 exit
10001bac g     F .text	00000af8 usb_initialize
10007b3c g     F .text	000000c4 _fwalk_reent
10009538 g     F .text	000001fc __mdiff
10002a3c g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10007140 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100003d0 g     F .text	0000007c IO_write
100120e4 g     F .text	00000034 _exit
10010ddc g     F .text	0000012c alt_alarm_start
10007cdc g     F .text	000001bc __smakebuf_r
10002cd4 g     F .text	00000098 strlen
10011768 g     F .text	0000015c open
1000e358 g     F .text	000000dc .hidden __gedf2
10014690 g     O .rwdata	00000004 __wctomb
1000a54c g     F .text	00000018 __sprint_r
10011220 g     F .text	00000020 alt_icache_flush_all
100146b0 g     O .rwdata	00000004 alt_priority_mask
10011290 g     F .text	00000088 alt_ic_irq_enable
10005048 g     F .text	0000001c __vfprintf_internal
1000c438 g     F .text	0000005c _wctomb_r
1000ed94 g     F .text	000008fc .hidden __subdf3
10008ed8 g     F .text	000000b0 __lo0bits
10000fa8 g     F .text	00000190 UsbGetConfigDesc1
100146b4 g     O .rwdata	00000008 alt_alarm_list
10011160 g     F .text	00000060 _do_ctors
10000ad4 g     F .text	000000b4 UsbSoftReset
1000c348 g     F .text	000000c0 wcrtomb
1000f934 g     F .text	000000d8 close
10000dd0 g     F .text	000001d8 UsbGetDeviceDesc2
1000fc7c g     F .text	00000084 alt_load
1000bf64 g     F .text	00000080 fputwc
10007144 g     F .text	00000004 __sinit_lock_acquire
10008c24 g     F .text	00000148 __multadd
10008bfc g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10988a04 	addi	r2,r2,25128
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10988a04 	addi	r2,r2,25128
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a6e017 	ldw	r2,-25728(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a6e017 	ldw	r2,-25728(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
1000023c:	d6b19f14 	ori	gp,gp,50812
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	10986a14 	ori	r2,r2,25000

    movhi r3, %hi(__bss_end)
10000248:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
1000024c:	18d8ca14 	ori	r3,r3,25384

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	000fc7c0 	call	1000fc7c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	000fe180 	call	1000fe18 <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <GameStart>:
#include "game_logic.h"
#include "parameter.h"
#include "kirby.h"
#include "test.h"

void GameStart() {
1000026c:	deffee04 	addi	sp,sp,-72
10000270:	dfc01115 	stw	ra,68(sp)
10000274:	df001015 	stw	fp,64(sp)
10000278:	df001004 	addi	fp,sp,64
    Kirby kirby;
    initial_Kirby(kirby);
1000027c:	e0bffc17 	ldw	r2,-16(fp)
10000280:	d8800015 	stw	r2,0(sp)
10000284:	e0bffd17 	ldw	r2,-12(fp)
10000288:	d8800115 	stw	r2,4(sp)
1000028c:	e0bffe17 	ldw	r2,-8(fp)
10000290:	d8800215 	stw	r2,8(sp)
10000294:	e0bfff17 	ldw	r2,-4(fp)
10000298:	d8800315 	stw	r2,12(sp)
1000029c:	e13ff817 	ldw	r4,-32(fp)
100002a0:	e17ff917 	ldw	r5,-28(fp)
100002a4:	e1bffa17 	ldw	r6,-24(fp)
100002a8:	e1fffb17 	ldw	r7,-20(fp)
100002ac:	00004c00 	call	100004c0 <initial_Kirby>

    int keycode = 0;
100002b0:	e03ff615 	stw	zero,-40(fp)
    int pre_keycode = 0;
100002b4:	e03ff715 	stw	zero,-36(fp)

    usb_initialize();
100002b8:	0001bac0 	call	10001bac <usb_initialize>

    while (1)
    {
        pre_keycode = keycode;
100002bc:	e0bff617 	ldw	r2,-40(fp)
100002c0:	e0bff715 	stw	r2,-36(fp)
        keycode = get_keycode_value();
100002c4:	00026a40 	call	100026a4 <get_keycode_value>
100002c8:	e0bff615 	stw	r2,-40(fp)

        // test_keyboard(keycode);
        updateKirby(kirby, keycode, pre_keycode);
100002cc:	e0bff717 	ldw	r2,-36(fp)
100002d0:	d8800515 	stw	r2,20(sp)
100002d4:	e0bff617 	ldw	r2,-40(fp)
100002d8:	d8800415 	stw	r2,16(sp)
100002dc:	e0bffc17 	ldw	r2,-16(fp)
100002e0:	d8800015 	stw	r2,0(sp)
100002e4:	e0bffd17 	ldw	r2,-12(fp)
100002e8:	d8800115 	stw	r2,4(sp)
100002ec:	e0bffe17 	ldw	r2,-8(fp)
100002f0:	d8800215 	stw	r2,8(sp)
100002f4:	e0bfff17 	ldw	r2,-4(fp)
100002f8:	d8800315 	stw	r2,12(sp)
100002fc:	e13ff817 	ldw	r4,-32(fp)
10000300:	e17ff917 	ldw	r5,-28(fp)
10000304:	e1bffa17 	ldw	r6,-24(fp)
10000308:	e1fffb17 	ldw	r7,-20(fp)
1000030c:	00006440 	call	10000644 <updateKirby>
        upload_Kirby_Info(kirby);
10000310:	e0bffc17 	ldw	r2,-16(fp)
10000314:	d8800015 	stw	r2,0(sp)
10000318:	e0bffd17 	ldw	r2,-12(fp)
1000031c:	d8800115 	stw	r2,4(sp)
10000320:	e0bffe17 	ldw	r2,-8(fp)
10000324:	d8800215 	stw	r2,8(sp)
10000328:	e0bfff17 	ldw	r2,-4(fp)
1000032c:	d8800315 	stw	r2,12(sp)
10000330:	e13ff817 	ldw	r4,-32(fp)
10000334:	e17ff917 	ldw	r5,-28(fp)
10000338:	e1bffa17 	ldw	r6,-24(fp)
1000033c:	e1fffb17 	ldw	r7,-20(fp)
10000340:	000051c0 	call	1000051c <upload_Kirby_Info>
    }
10000344:	003fdd06 	br	100002bc <__alt_data_end+0xf80002bc>

10000348 <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
10000348:	deffff04 	addi	sp,sp,-4
1000034c:	df000015 	stw	fp,0(sp)
10000350:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
10000354:	00801c04 	movi	r2,112
10000358:	00c00044 	movi	r3,1
1000035c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000360:	00802004 	movi	r2,128
10000364:	00c00044 	movi	r3,1
10000368:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
1000036c:	00802804 	movi	r2,160
10000370:	00c00044 	movi	r3,1
10000374:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
10000378:	00802404 	movi	r2,144
1000037c:	00c00044 	movi	r3,1
10000380:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
10000384:	00803004 	movi	r2,192
10000388:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
1000038c:	00802c04 	movi	r2,176
10000390:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
10000394:	00802004 	movi	r2,128
10000398:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
1000039c:	00801c04 	movi	r2,112
100003a0:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
100003a4:	00801c04 	movi	r2,112
100003a8:	00c00044 	movi	r3,1
100003ac:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100003b0:	00802004 	movi	r2,128
100003b4:	00c00044 	movi	r3,1
100003b8:	10c00005 	stb	r3,0(r2)
}
100003bc:	0001883a 	nop
100003c0:	e037883a 	mov	sp,fp
100003c4:	df000017 	ldw	fp,0(sp)
100003c8:	dec00104 	addi	sp,sp,4
100003cc:	f800283a 	ret

100003d0 <IO_write>:


void IO_write(alt_u8 Address, alt_u16 Data)
{
100003d0:	defffd04 	addi	sp,sp,-12
100003d4:	df000215 	stw	fp,8(sp)
100003d8:	df000204 	addi	fp,sp,8
100003dc:	2007883a 	mov	r3,r4
100003e0:	2805883a 	mov	r2,r5
100003e4:	e0fffe05 	stb	r3,-8(fp)
100003e8:	e0bfff0d 	sth	r2,-4(fp)
	//*otg_hpi_data = Data;


	//*otg_hpi_w = 1;
	// Disable read, enable CS and write, prepare address and data to be written
	*otg_hpi_r = 1;
100003ec:	00802804 	movi	r2,160
100003f0:	00c00044 	movi	r3,1
100003f4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = Address;
100003f8:	00803004 	movi	r2,192
100003fc:	e0fffe03 	ldbu	r3,-8(fp)
10000400:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
10000404:	00802c04 	movi	r2,176
10000408:	e0ffff0b 	ldhu	r3,-4(fp)
1000040c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10000410:	00802004 	movi	r2,128
10000414:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10000418:	00802404 	movi	r2,144
1000041c:	10000005 	stb	zero,0(r2)

	// Disable write and CS
	*otg_hpi_w = 1;
10000420:	00802404 	movi	r2,144
10000424:	00c00044 	movi	r3,1
10000428:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
1000042c:	00802004 	movi	r2,128
10000430:	00c00044 	movi	r3,1
10000434:	10c00005 	stb	r3,0(r2)
}
10000438:	0001883a 	nop
1000043c:	e037883a 	mov	sp,fp
10000440:	df000017 	ldw	fp,0(sp)
10000444:	dec00104 	addi	sp,sp,4
10000448:	f800283a 	ret

1000044c <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
1000044c:	defffd04 	addi	sp,sp,-12
10000450:	df000215 	stw	fp,8(sp)
10000454:	df000204 	addi	fp,sp,8
10000458:	2005883a 	mov	r2,r4
1000045c:	e0bfff05 	stb	r2,-4(fp)
	//*otg_hpi_address = Address;
	//*otg_hpi_r = 0;
	//*otg_hpi_data = Data;
	//*otg_hpi_r = 1;
	// Enable select chip and read, disable write, prepare address
	*otg_hpi_w = 1;
10000460:	00802404 	movi	r2,144
10000464:	00c00044 	movi	r3,1
10000468:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = Address;
1000046c:	00803004 	movi	r2,192
10000470:	e0ffff03 	ldbu	r3,-4(fp)
10000474:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10000478:	00802004 	movi	r2,128
1000047c:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
10000480:	00802804 	movi	r2,160
10000484:	10000005 	stb	zero,0(r2)

	// Read data to temporary variable
	temp = *otg_hpi_data;
10000488:	00802c04 	movi	r2,176
1000048c:	10800017 	ldw	r2,0(r2)
10000490:	e0bffe0d 	sth	r2,-8(fp)

	// Disable CS and read
	*otg_hpi_cs = 1;
10000494:	00802004 	movi	r2,128
10000498:	00c00044 	movi	r3,1
1000049c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
100004a0:	00802804 	movi	r2,160
100004a4:	00c00044 	movi	r3,1
100004a8:	10c00005 	stb	r3,0(r2)

	//printf("%x\n",temp);
	return temp;
100004ac:	e0bffe0b 	ldhu	r2,-8(fp)
}
100004b0:	e037883a 	mov	sp,fp
100004b4:	df000017 	ldw	fp,0(sp)
100004b8:	dec00104 	addi	sp,sp,4
100004bc:	f800283a 	ret

100004c0 <initial_Kirby>:
#include "kirby.h"
#include "parameter.h"

void initial_Kirby(Kirby kirby){
100004c0:	defffb04 	addi	sp,sp,-20
100004c4:	df000015 	stw	fp,0(sp)
100004c8:	d839883a 	mov	fp,sp
100004cc:	e1000115 	stw	r4,4(fp)
100004d0:	e1400215 	stw	r5,8(fp)
100004d4:	e1800315 	stw	r6,12(fp)
100004d8:	e1c00415 	stw	r7,16(fp)
    kirby.x = KIRBY_START_X;
100004dc:	00800144 	movi	r2,5
100004e0:	e0800115 	stw	r2,4(fp)
    kirby.y = KIRBY_START_Y;
100004e4:	00800ec4 	movi	r2,59
100004e8:	e0800215 	stw	r2,8(fp)
    kirby.is_left = 0;
100004ec:	e0000315 	stw	zero,12(fp)
    kirby.health = 8;
100004f0:	00800204 	movi	r2,8
100004f4:	e0800415 	stw	r2,16(fp)
    kirby.action = 0;
100004f8:	e0000515 	stw	zero,20(fp)
    kirby.frame = 0;
100004fc:	e0000615 	stw	zero,24(fp)
    kirby.in_slope = 0;
10000500:	e0000715 	stw	zero,28(fp)
    kirby.is_inhaled = 0;
10000504:	e0000815 	stw	zero,32(fp)
}
10000508:	0001883a 	nop
1000050c:	e037883a 	mov	sp,fp
10000510:	df000017 	ldw	fp,0(sp)
10000514:	dec00504 	addi	sp,sp,20
10000518:	f800283a 	ret

1000051c <upload_Kirby_Info>:


void upload_Kirby_Info(Kirby kirby) {
1000051c:	defff504 	addi	sp,sp,-44
10000520:	dfc00615 	stw	ra,24(sp)
10000524:	df000515 	stw	fp,20(sp)
10000528:	dc000415 	stw	r16,16(sp)
1000052c:	df000504 	addi	fp,sp,20
10000530:	e1000215 	stw	r4,8(fp)
10000534:	e1400315 	stw	r5,12(fp)
10000538:	e1800415 	stw	r6,16(fp)
1000053c:	e1c00515 	stw	r7,20(fp)
    int Kirby_Pos_X = kirby.x + SCREEN_START_X;
10000540:	e0800217 	ldw	r2,8(fp)
10000544:	108032c4 	addi	r2,r2,203
10000548:	e0bffb15 	stw	r2,-20(fp)
    int Kirby_Pos_Y = kirby.y + SCREEN_START_Y;
1000054c:	e0800317 	ldw	r2,12(fp)
10000550:	10802604 	addi	r2,r2,152
10000554:	e0bffc15 	stw	r2,-16(fp)
    int Kirby_Image_X = kirby.frame * KIRBY_WIDTH;
10000558:	e0800717 	ldw	r2,28(fp)
1000055c:	01400704 	movi	r5,28
10000560:	1009883a 	mov	r4,r2
10000564:	0002b6c0 	call	10002b6c <__mulsi3>
10000568:	e0bffd15 	stw	r2,-12(fp)
    int Kirby_Image_Y = kirby.action * KIRBY_HEIGHT;
1000056c:	e0800617 	ldw	r2,24(fp)
10000570:	01400704 	movi	r5,28
10000574:	1009883a 	mov	r4,r2
10000578:	0002b6c0 	call	10002b6c <__mulsi3>
1000057c:	e0bffe15 	stw	r2,-8(fp)
    REG_1_KIRBY_INFO = encryption(Kirby_Pos_X, Kirby_Pos_Y, Kirby_Image_X, Kirby_Image_Y);
10000580:	d0a6cc17 	ldw	r2,-25808(gp)
10000584:	14000104 	addi	r16,r2,4
10000588:	e1fffe17 	ldw	r7,-8(fp)
1000058c:	e1bffd17 	ldw	r6,-12(fp)
10000590:	e17ffc17 	ldw	r5,-16(fp)
10000594:	e13ffb17 	ldw	r4,-20(fp)
10000598:	00005e80 	call	100005e8 <encryption>
1000059c:	80800015 	stw	r2,0(r16)
    REG_2_DIRECTION = (REG_2_DIRECTION & 0xfffffff0) + (kirby.is_left & 0x0000000f);
100005a0:	d0a6cc17 	ldw	r2,-25808(gp)
100005a4:	10800204 	addi	r2,r2,8
100005a8:	d0e6cc17 	ldw	r3,-25808(gp)
100005ac:	18c00204 	addi	r3,r3,8
100005b0:	19000017 	ldw	r4,0(r3)
100005b4:	00fffc04 	movi	r3,-16
100005b8:	20c8703a 	and	r4,r4,r3
100005bc:	e0c00417 	ldw	r3,16(fp)
100005c0:	18c003cc 	andi	r3,r3,15
100005c4:	20c7883a 	add	r3,r4,r3
100005c8:	10c00015 	stw	r3,0(r2)
}
100005cc:	0001883a 	nop
100005d0:	e6ffff04 	addi	sp,fp,-4
100005d4:	dfc00217 	ldw	ra,8(sp)
100005d8:	df000117 	ldw	fp,4(sp)
100005dc:	dc000017 	ldw	r16,0(sp)
100005e0:	dec00704 	addi	sp,sp,28
100005e4:	f800283a 	ret

100005e8 <encryption>:


unsigned int encryption(int a, int b, int c, int d) {
100005e8:	defffa04 	addi	sp,sp,-24
100005ec:	df000515 	stw	fp,20(sp)
100005f0:	df000504 	addi	fp,sp,20
100005f4:	e13ffc15 	stw	r4,-16(fp)
100005f8:	e17ffd15 	stw	r5,-12(fp)
100005fc:	e1bffe15 	stw	r6,-8(fp)
10000600:	e1ffff15 	stw	r7,-4(fp)
    unsigned int packet_info = (a << 24) | (b << 16) | (c << 8) | d;
10000604:	e0bffc17 	ldw	r2,-16(fp)
10000608:	1006963a 	slli	r3,r2,24
1000060c:	e0bffd17 	ldw	r2,-12(fp)
10000610:	1004943a 	slli	r2,r2,16
10000614:	1886b03a 	or	r3,r3,r2
10000618:	e0bffe17 	ldw	r2,-8(fp)
1000061c:	1004923a 	slli	r2,r2,8
10000620:	1886b03a 	or	r3,r3,r2
10000624:	e0bfff17 	ldw	r2,-4(fp)
10000628:	1884b03a 	or	r2,r3,r2
1000062c:	e0bffb15 	stw	r2,-20(fp)
    return packet_info;
10000630:	e0bffb17 	ldw	r2,-20(fp)
}
10000634:	e037883a 	mov	sp,fp
10000638:	df000017 	ldw	fp,0(sp)
1000063c:	dec00104 	addi	sp,sp,4
10000640:	f800283a 	ret

10000644 <updateKirby>:

void updateKirby(Kirby kirby, int keycode, int pre_keycode){
10000644:	defff604 	addi	sp,sp,-40
10000648:	dfc00515 	stw	ra,20(sp)
1000064c:	df000415 	stw	fp,16(sp)
10000650:	df000404 	addi	fp,sp,16
10000654:	e1000215 	stw	r4,8(fp)
10000658:	e1400315 	stw	r5,12(fp)
1000065c:	e1800415 	stw	r6,16(fp)
10000660:	e1c00515 	stw	r7,20(fp)
    int key0 = keycode & 0xff;
10000664:	e0800a17 	ldw	r2,40(fp)
10000668:	10803fcc 	andi	r2,r2,255
1000066c:	e0bffc15 	stw	r2,-16(fp)
    int key1 = (keycode >> 8) & 0xff;
10000670:	e0800a17 	ldw	r2,40(fp)
10000674:	1005d23a 	srai	r2,r2,8
10000678:	10803fcc 	andi	r2,r2,255
1000067c:	e0bffd15 	stw	r2,-12(fp)
    int prekey0 = pre_keycode & 0xff;
10000680:	e0800b17 	ldw	r2,44(fp)
10000684:	10803fcc 	andi	r2,r2,255
10000688:	e0bffe15 	stw	r2,-8(fp)
    int prekey1 = (pre_keycode >> 8) & 0xff;
1000068c:	e0800b17 	ldw	r2,44(fp)
10000690:	1005d23a 	srai	r2,r2,8
10000694:	10803fcc 	andi	r2,r2,255
10000698:	e0bfff15 	stw	r2,-4(fp)

    switch (keycode) {
1000069c:	e0800a17 	ldw	r2,40(fp)
100006a0:	108009e8 	cmpgeui	r2,r2,39
100006a4:	10008f1e 	bne	r2,zero,100008e4 <updateKirby+0x2a0>
100006a8:	e0800a17 	ldw	r2,40(fp)
100006ac:	100690ba 	slli	r3,r2,2
100006b0:	00840034 	movhi	r2,4096
100006b4:	1081b104 	addi	r2,r2,1732
100006b8:	1885883a 	add	r2,r3,r2
100006bc:	10800017 	ldw	r2,0(r2)
100006c0:	1000683a 	jmp	r2
100006c4:	10000760 	cmpeqi	zero,r2,29
100006c8:	100008e4 	muli	zero,r2,35
100006cc:	100008e4 	muli	zero,r2,35
100006d0:	100008e4 	muli	zero,r2,35
100006d4:	100007c8 	cmpgei	zero,r2,31
100006d8:	100008e4 	muli	zero,r2,35
100006dc:	100008e4 	muli	zero,r2,35
100006e0:	10000814 	ori	zero,r2,32
100006e4:	100008e4 	muli	zero,r2,35
100006e8:	100008e4 	muli	zero,r2,35
100006ec:	100008e4 	muli	zero,r2,35
100006f0:	100008e4 	muli	zero,r2,35
100006f4:	100008e4 	muli	zero,r2,35
100006f8:	100008e4 	muli	zero,r2,35
100006fc:	100008e4 	muli	zero,r2,35
10000700:	100008e4 	muli	zero,r2,35
10000704:	100008e4 	muli	zero,r2,35
10000708:	100008e4 	muli	zero,r2,35
1000070c:	100008e4 	muli	zero,r2,35
10000710:	100008e4 	muli	zero,r2,35
10000714:	100008e4 	muli	zero,r2,35
10000718:	100008e4 	muli	zero,r2,35
1000071c:	10000860 	cmpeqi	zero,r2,33
10000720:	100008e4 	muli	zero,r2,35
10000724:	100008e4 	muli	zero,r2,35
10000728:	100008e4 	muli	zero,r2,35
1000072c:	100008e4 	muli	zero,r2,35
10000730:	100008e4 	muli	zero,r2,35
10000734:	100008e4 	muli	zero,r2,35
10000738:	100008e4 	muli	zero,r2,35
1000073c:	100008e4 	muli	zero,r2,35
10000740:	100008e4 	muli	zero,r2,35
10000744:	100008e4 	muli	zero,r2,35
10000748:	100008e4 	muli	zero,r2,35
1000074c:	100008e4 	muli	zero,r2,35
10000750:	100008e4 	muli	zero,r2,35
10000754:	100008e4 	muli	zero,r2,35
10000758:	100008e4 	muli	zero,r2,35
1000075c:	100008cc 	andi	zero,r2,35
    case 0x0000: // "" Stand
        kirby.action = 0;
10000760:	e0000615 	stw	zero,24(fp)
        if (pre_keycode == keycode) {
10000764:	e0c00b17 	ldw	r3,44(fp)
10000768:	e0800a17 	ldw	r2,40(fp)
1000076c:	1880101e 	bne	r3,r2,100007b0 <updateKirby+0x16c>
            kirby.frame = (kirby.frame + 1) % 2 + 2 * kirby.in_slope;
10000770:	e0800717 	ldw	r2,28(fp)
10000774:	10c00044 	addi	r3,r2,1
10000778:	00a00034 	movhi	r2,32768
1000077c:	10800044 	addi	r2,r2,1
10000780:	1884703a 	and	r2,r3,r2
10000784:	1000040e 	bge	r2,zero,10000798 <updateKirby+0x154>
10000788:	10bfffc4 	addi	r2,r2,-1
1000078c:	00ffff84 	movi	r3,-2
10000790:	10c4b03a 	or	r2,r2,r3
10000794:	10800044 	addi	r2,r2,1
10000798:	1007883a 	mov	r3,r2
1000079c:	e0800817 	ldw	r2,32(fp)
100007a0:	1085883a 	add	r2,r2,r2
100007a4:	1885883a 	add	r2,r3,r2
100007a8:	e0800715 	stw	r2,28(fp)
100007ac:	00000306 	br	100007bc <updateKirby+0x178>
        } else {
            kirby.frame = 0 + 2 * kirby.in_slope;
100007b0:	e0800817 	ldw	r2,32(fp)
100007b4:	1085883a 	add	r2,r2,r2
100007b8:	e0800715 	stw	r2,28(fp)
        }
        frame_Time(1000);
100007bc:	0100fa04 	movi	r4,1000
100007c0:	00009080 	call	10000908 <frame_Time>
        break;
100007c4:	00004a06 	br	100008f0 <updateKirby+0x2ac>

    case 0x0004: //"a" left move
        kirby.action = 1;
100007c8:	00800044 	movi	r2,1
100007cc:	e0800615 	stw	r2,24(fp)
        if (pre_keycode == keycode) {
100007d0:	e0c00b17 	ldw	r3,44(fp)
100007d4:	e0800a17 	ldw	r2,40(fp)
100007d8:	1880071e 	bne	r3,r2,100007f8 <updateKirby+0x1b4>
            kirby.frame = (kirby.frame + 1) % 10;
100007dc:	e0800717 	ldw	r2,28(fp)
100007e0:	10800044 	addi	r2,r2,1
100007e4:	01400284 	movi	r5,10
100007e8:	1009883a 	mov	r4,r2
100007ec:	0002a3c0 	call	10002a3c <__modsi3>
100007f0:	e0800715 	stw	r2,28(fp)
100007f4:	00000106 	br	100007fc <updateKirby+0x1b8>
        } else {
            kirby.frame = 0;
100007f8:	e0000715 	stw	zero,28(fp)
        }
        frame_Time(1000);
100007fc:	0100fa04 	movi	r4,1000
10000800:	00009080 	call	10000908 <frame_Time>
        kirby.x -= KIRBY_STEP_X;
10000804:	e0800217 	ldw	r2,8(fp)
10000808:	10bffe84 	addi	r2,r2,-6
1000080c:	e0800215 	stw	r2,8(fp)
        break;
10000810:	00003706 	br	100008f0 <updateKirby+0x2ac>

    case 0x0007: //"d" right move
        kirby.action = 1;
10000814:	00800044 	movi	r2,1
10000818:	e0800615 	stw	r2,24(fp)
        if (pre_keycode == keycode) {
1000081c:	e0c00b17 	ldw	r3,44(fp)
10000820:	e0800a17 	ldw	r2,40(fp)
10000824:	1880071e 	bne	r3,r2,10000844 <updateKirby+0x200>
            kirby.frame = (kirby.frame + 1) % 10;
10000828:	e0800717 	ldw	r2,28(fp)
1000082c:	10800044 	addi	r2,r2,1
10000830:	01400284 	movi	r5,10
10000834:	1009883a 	mov	r4,r2
10000838:	0002a3c0 	call	10002a3c <__modsi3>
1000083c:	e0800715 	stw	r2,28(fp)
10000840:	00000106 	br	10000848 <updateKirby+0x204>
        } else {
            kirby.frame = 0;
10000844:	e0000715 	stw	zero,28(fp)
        }
        frame_Time(1000);
10000848:	0100fa04 	movi	r4,1000
1000084c:	00009080 	call	10000908 <frame_Time>
        kirby.x += KIRBY_STEP_X;
10000850:	e0800217 	ldw	r2,8(fp)
10000854:	10800184 	addi	r2,r2,6
10000858:	e0800215 	stw	r2,8(fp)
        break;
1000085c:	00002406 	br	100008f0 <updateKirby+0x2ac>
    
    case 0x0016: //"s" squat
        kirby.action = 2;
10000860:	00800084 	movi	r2,2
10000864:	e0800615 	stw	r2,24(fp)
        if (pre_keycode == keycode) {
10000868:	e0c00b17 	ldw	r3,44(fp)
1000086c:	e0800a17 	ldw	r2,40(fp)
10000870:	1880101e 	bne	r3,r2,100008b4 <updateKirby+0x270>
            kirby.frame = (kirby.frame + 1) % 2 + 2 * kirby.in_slope;
10000874:	e0800717 	ldw	r2,28(fp)
10000878:	10c00044 	addi	r3,r2,1
1000087c:	00a00034 	movhi	r2,32768
10000880:	10800044 	addi	r2,r2,1
10000884:	1884703a 	and	r2,r3,r2
10000888:	1000040e 	bge	r2,zero,1000089c <updateKirby+0x258>
1000088c:	10bfffc4 	addi	r2,r2,-1
10000890:	00ffff84 	movi	r3,-2
10000894:	10c4b03a 	or	r2,r2,r3
10000898:	10800044 	addi	r2,r2,1
1000089c:	1007883a 	mov	r3,r2
100008a0:	e0800817 	ldw	r2,32(fp)
100008a4:	1085883a 	add	r2,r2,r2
100008a8:	1885883a 	add	r2,r3,r2
100008ac:	e0800715 	stw	r2,28(fp)
100008b0:	00000306 	br	100008c0 <updateKirby+0x27c>
        } else {
            kirby.frame = 0 + 2 * kirby.in_slope;
100008b4:	e0800817 	ldw	r2,32(fp)
100008b8:	1085883a 	add	r2,r2,r2
100008bc:	e0800715 	stw	r2,28(fp)
        }
         frame_Time(1000);
100008c0:	0100fa04 	movi	r4,1000
100008c4:	00009080 	call	10000908 <frame_Time>
        break;
100008c8:	00000906 	br	100008f0 <updateKirby+0x2ac>
    case 0x0026: //"w" fly
        if (kirby.is_inhaled == 1) {
100008cc:	e0800917 	ldw	r2,36(fp)
100008d0:	10800058 	cmpnei	r2,r2,1
100008d4:	1000051e 	bne	r2,zero,100008ec <updateKirby+0x2a8>
            kirby.action = 3;
100008d8:	008000c4 	movi	r2,3
100008dc:	e0800615 	stw	r2,24(fp)
        }
        //TO DO: Continue
        break;
100008e0:	00000206 	br	100008ec <updateKirby+0x2a8>
    default:
        break;
100008e4:	0001883a 	nop
100008e8:	00000106 	br	100008f0 <updateKirby+0x2ac>
    case 0x0026: //"w" fly
        if (kirby.is_inhaled == 1) {
            kirby.action = 3;
        }
        //TO DO: Continue
        break;
100008ec:	0001883a 	nop
    default:
        break;
    }
    
    
}
100008f0:	0001883a 	nop
100008f4:	e037883a 	mov	sp,fp
100008f8:	dfc00117 	ldw	ra,4(sp)
100008fc:	df000017 	ldw	fp,0(sp)
10000900:	dec00604 	addi	sp,sp,24
10000904:	f800283a 	ret

10000908 <frame_Time>:


void frame_Time(int t) {
10000908:	defffd04 	addi	sp,sp,-12
1000090c:	df000215 	stw	fp,8(sp)
10000910:	df000204 	addi	fp,sp,8
10000914:	e13fff15 	stw	r4,-4(fp)
    int i;
    for (i = 0; i < t; i++) {
10000918:	e03ffe15 	stw	zero,-8(fp)
1000091c:	00000306 	br	1000092c <frame_Time+0x24>
10000920:	e0bffe17 	ldw	r2,-8(fp)
10000924:	10800044 	addi	r2,r2,1
10000928:	e0bffe15 	stw	r2,-8(fp)
1000092c:	e0fffe17 	ldw	r3,-8(fp)
10000930:	e0bfff17 	ldw	r2,-4(fp)
10000934:	18bffa16 	blt	r3,r2,10000920 <__alt_data_end+0xf8000920>
        /* wait unitl the frame is over */
    }
10000938:	0001883a 	nop
1000093c:	e037883a 	mov	sp,fp
10000940:	df000017 	ldw	fp,0(sp)
10000944:	dec00104 	addi	sp,sp,4
10000948:	f800283a 	ret

1000094c <main>:
#include "test.h"
#include "usb_main.h"
#include "parameter.h"
#include "game_logic.h"

int main(void) {
1000094c:	defffe04 	addi	sp,sp,-8
10000950:	dfc00115 	stw	ra,4(sp)
10000954:	df000015 	stw	fp,0(sp)
10000958:	d839883a 	mov	fp,sp
    GameStart();
1000095c:	000026c0 	call	1000026c <GameStart>

    return 0;
10000960:	0005883a 	mov	r2,zero
}
10000964:	e037883a 	mov	sp,fp
10000968:	dfc00117 	ldw	ra,4(sp)
1000096c:	df000017 	ldw	fp,0(sp)
10000970:	dec00204 	addi	sp,sp,8
10000974:	f800283a 	ret

10000978 <test_keyboard>:
#include "parameter.h"




void test_keyboard(int keycode) {
10000978:	defffd04 	addi	sp,sp,-12
1000097c:	dfc00215 	stw	ra,8(sp)
10000980:	df000115 	stw	fp,4(sp)
10000984:	df000104 	addi	fp,sp,4
10000988:	e13fff15 	stw	r4,-4(fp)

    printf("########Test KeyBoard########");
1000098c:	01040074 	movhi	r4,4097
10000990:	21084604 	addi	r4,r4,8472
10000994:	0002bc40 	call	10002bc4 <printf>
    switch (keycode){
10000998:	e0bfff17 	ldw	r2,-4(fp)
1000099c:	10c001e0 	cmpeqi	r3,r2,7
100009a0:	1800151e 	bne	r3,zero,100009f8 <test_keyboard+0x80>
100009a4:	10c00208 	cmpgei	r3,r2,8
100009a8:	1800031e 	bne	r3,zero,100009b8 <test_keyboard+0x40>
100009ac:	10800120 	cmpeqi	r2,r2,4
100009b0:	10000d1e 	bne	r2,zero,100009e8 <test_keyboard+0x70>
100009b4:	00001406 	br	10000a08 <test_keyboard+0x90>
100009b8:	10c005a0 	cmpeqi	r3,r2,22
100009bc:	1800061e 	bne	r3,zero,100009d8 <test_keyboard+0x60>
100009c0:	108006a0 	cmpeqi	r2,r2,26
100009c4:	10001026 	beq	r2,zero,10000a08 <test_keyboard+0x90>
        case 0x001a:  // h1A, "w"
            REG_0_MAP_INFO = 1 << 16;
100009c8:	d0a6ce17 	ldw	r2,-25800(gp)
100009cc:	00c00074 	movhi	r3,1
100009d0:	10c00015 	stw	r3,0(r2)
            break;
100009d4:	00000f06 	br	10000a14 <test_keyboard+0x9c>
        case 0x0016:  // h16, "s"
            REG_0_MAP_INFO = 2 << 16;
100009d8:	d0a6ce17 	ldw	r2,-25800(gp)
100009dc:	00c000b4 	movhi	r3,2
100009e0:	10c00015 	stw	r3,0(r2)
            break;
100009e4:	00000b06 	br	10000a14 <test_keyboard+0x9c>
        case 0x0004:   // h04, "a"
            REG_0_MAP_INFO = 1 << 16;
100009e8:	d0a6ce17 	ldw	r2,-25800(gp)
100009ec:	00c00074 	movhi	r3,1
100009f0:	10c00015 	stw	r3,0(r2)
            break;
100009f4:	00000706 	br	10000a14 <test_keyboard+0x9c>
        case 0x0007:   // h07, "d"
            REG_0_MAP_INFO = 2 << 16;
100009f8:	d0a6ce17 	ldw	r2,-25800(gp)
100009fc:	00c000b4 	movhi	r3,2
10000a00:	10c00015 	stw	r3,0(r2)
            break;
10000a04:	00000306 	br	10000a14 <test_keyboard+0x9c>
        default:
            REG_0_MAP_INFO = 0 << 16;
10000a08:	d0a6ce17 	ldw	r2,-25800(gp)
10000a0c:	10000015 	stw	zero,0(r2)
            break;
10000a10:	0001883a 	nop
    }
    printf("######### End Test ##########");
10000a14:	01040074 	movhi	r4,4097
10000a18:	21084e04 	addi	r4,r4,8504
10000a1c:	0002bc40 	call	10002bc4 <printf>
}
10000a20:	0001883a 	nop
10000a24:	e037883a 	mov	sp,fp
10000a28:	dfc00117 	ldw	ra,4(sp)
10000a2c:	df000017 	ldw	fp,0(sp)
10000a30:	dec00204 	addi	sp,sp,8
10000a34:	f800283a 	ret

10000a38 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
10000a38:	defffc04 	addi	sp,sp,-16
10000a3c:	dfc00315 	stw	ra,12(sp)
10000a40:	df000215 	stw	fp,8(sp)
10000a44:	df000204 	addi	fp,sp,8
10000a48:	2007883a 	mov	r3,r4
10000a4c:	2805883a 	mov	r2,r5
10000a50:	e0fffe0d 	sth	r3,-8(fp)
10000a54:	e0bfff0d 	sth	r2,-4(fp)
	//write address of registers to HDI
	IO_write(HPI_ADDR, Address);
10000a58:	e0bffe0b 	ldhu	r2,-8(fp)
10000a5c:	100b883a 	mov	r5,r2
10000a60:	01000084 	movi	r4,2
10000a64:	00003d00 	call	100003d0 <IO_write>

	//write data to address in HDI
	IO_write(HPI_DATA, Data);
10000a68:	e0bfff0b 	ldhu	r2,-4(fp)
10000a6c:	100b883a 	mov	r5,r2
10000a70:	0009883a 	mov	r4,zero
10000a74:	00003d00 	call	100003d0 <IO_write>
}
10000a78:	0001883a 	nop
10000a7c:	e037883a 	mov	sp,fp
10000a80:	dfc00117 	ldw	ra,4(sp)
10000a84:	df000017 	ldw	fp,0(sp)
10000a88:	dec00204 	addi	sp,sp,8
10000a8c:	f800283a 	ret

10000a90 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10000a90:	defffd04 	addi	sp,sp,-12
10000a94:	dfc00215 	stw	ra,8(sp)
10000a98:	df000115 	stw	fp,4(sp)
10000a9c:	df000104 	addi	fp,sp,4
10000aa0:	2005883a 	mov	r2,r4
10000aa4:	e0bfff0d 	sth	r2,-4(fp)
	//write address of registers to HDI
	IO_write(HPI_ADDR, Address);
10000aa8:	e0bfff0b 	ldhu	r2,-4(fp)
10000aac:	100b883a 	mov	r5,r2
10000ab0:	01000084 	movi	r4,2
10000ab4:	00003d00 	call	100003d0 <IO_write>

	//read the data stored in HPI address and return the value
	return IO_read(HPI_DATA);
10000ab8:	0009883a 	mov	r4,zero
10000abc:	000044c0 	call	1000044c <IO_read>
}
10000ac0:	e037883a 	mov	sp,fp
10000ac4:	dfc00117 	ldw	ra,4(sp)
10000ac8:	df000017 	ldw	fp,0(sp)
10000acc:	dec00204 	addi	sp,sp,8
10000ad0:	f800283a 	ret

10000ad4 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10000ad4:	defffe04 	addi	sp,sp,-8
10000ad8:	dfc00115 	stw	ra,4(sp)
10000adc:	df000015 	stw	fp,0(sp)
10000ae0:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
10000ae4:	017e9414 	movui	r5,64080
10000ae8:	01000044 	movi	r4,1
10000aec:	00003d00 	call	100003d0 <IO_write>
	usleep(100000);
10000af0:	010000b4 	movhi	r4,2
10000af4:	2121a804 	addi	r4,r4,-31072
10000af8:	00101500 	call	10010150 <usleep>
	printf("[USB INIT]:reset finished!\n");
10000afc:	01040074 	movhi	r4,4097
10000b00:	21085604 	addi	r4,r4,8536
10000b04:	0002cc00 	call	10002cc0 <puts>

	usleep(500000);
10000b08:	01000234 	movhi	r4,8
10000b0c:	21284804 	addi	r4,r4,-24288
10000b10:	00101500 	call	10010150 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
10000b14:	01040074 	movhi	r4,4097
10000b18:	21085d04 	addi	r4,r4,8564
10000b1c:	0002cc00 	call	10002cc0 <puts>
	IO_read(HPI_MAILBOX);
10000b20:	01000044 	movi	r4,1
10000b24:	000044c0 	call	1000044c <IO_read>
	IO_read(HPI_STATUS);
10000b28:	010000c4 	movi	r4,3
10000b2c:	000044c0 	call	1000044c <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10000b30:	01005104 	movi	r4,324
10000b34:	0000a900 	call	10000a90 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10000b38:	000b883a 	mov	r5,zero
10000b3c:	01005104 	movi	r4,324
10000b40:	0000a380 	call	10000a38 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
10000b44:	01005204 	movi	r4,328
10000b48:	0000a900 	call	10000a90 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10000b4c:	000b883a 	mov	r5,zero
10000b50:	01005204 	movi	r4,328
10000b54:	0000a380 	call	10000a38 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10000b58:	017fffd4 	movui	r5,65535
10000b5c:	01302414 	movui	r4,49296
10000b60:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
10000b64:	017fffd4 	movui	r5,65535
10000b68:	01302c14 	movui	r4,49328
10000b6c:	0000a380 	call	10000a38 <UsbWrite>
}
10000b70:	0001883a 	nop
10000b74:	e037883a 	mov	sp,fp
10000b78:	dfc00117 	ldw	ra,4(sp)
10000b7c:	df000017 	ldw	fp,0(sp)
10000b80:	dec00204 	addi	sp,sp,8
10000b84:	f800283a 	ret

10000b88 <UsbSetAddress>:


void UsbSetAddress()
{
10000b88:	defffe04 	addi	sp,sp,-8
10000b8c:	dfc00115 	stw	ra,4(sp)
10000b90:	df000015 	stw	fp,0(sp)
10000b94:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10000b98:	01414004 	movi	r5,1280
10000b9c:	01000084 	movi	r4,2
10000ba0:	00003d00 	call	100003d0 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
10000ba4:	01414304 	movi	r5,1292
10000ba8:	0009883a 	mov	r4,zero
10000bac:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10000bb0:	01400204 	movi	r5,8
10000bb4:	0009883a 	mov	r4,zero
10000bb8:	00003d00 	call	100003d0 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
10000bbc:	01403404 	movi	r5,208
10000bc0:	0009883a 	mov	r4,zero
10000bc4:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10000bc8:	01400044 	movi	r5,1
10000bcc:	0009883a 	mov	r4,zero
10000bd0:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10000bd4:	014004c4 	movi	r5,19
10000bd8:	0009883a 	mov	r4,zero
10000bdc:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10000be0:	01414504 	movi	r5,1300
10000be4:	0009883a 	mov	r4,zero
10000be8:	00003d00 	call	100003d0 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
10000bec:	01414004 	movi	r5,1280
10000bf0:	0009883a 	mov	r4,zero
10000bf4:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0002);
10000bf8:	01400084 	movi	r5,2
10000bfc:	0009883a 	mov	r4,zero
10000c00:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10000c04:	000b883a 	mov	r5,zero
10000c08:	0009883a 	mov	r4,zero
10000c0c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10000c10:	000b883a 	mov	r5,zero
10000c14:	0009883a 	mov	r4,zero
10000c18:	00003d00 	call	100003d0 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10000c1c:	000b883a 	mov	r5,zero
10000c20:	0009883a 	mov	r4,zero
10000c24:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//
10000c28:	000b883a 	mov	r5,zero
10000c2c:	0009883a 	mov	r4,zero
10000c30:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0090);//
10000c34:	01402404 	movi	r5,144
10000c38:	0009883a 	mov	r4,zero
10000c3c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0041);
10000c40:	01401044 	movi	r5,65
10000c44:	0009883a 	mov	r4,zero
10000c48:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10000c4c:	014004c4 	movi	r5,19
10000c50:	0009883a 	mov	r4,zero
10000c54:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10000c58:	000b883a 	mov	r5,zero
10000c5c:	0009883a 	mov	r4,zero
10000c60:	00003d00 	call	100003d0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000c64:	01414004 	movi	r5,1280
10000c68:	01006c04 	movi	r4,432
10000c6c:	0000a380 	call	10000a38 <UsbWrite>
}
10000c70:	0001883a 	nop
10000c74:	e037883a 	mov	sp,fp
10000c78:	dfc00117 	ldw	ra,4(sp)
10000c7c:	df000017 	ldw	fp,0(sp)
10000c80:	dec00204 	addi	sp,sp,8
10000c84:	f800283a 	ret

10000c88 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
10000c88:	defffe04 	addi	sp,sp,-8
10000c8c:	dfc00115 	stw	ra,4(sp)
10000c90:	df000015 	stw	fp,0(sp)
10000c94:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10000c98:	01414004 	movi	r5,1280
10000c9c:	01000084 	movi	r4,2
10000ca0:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10000ca4:	01414304 	movi	r5,1292
10000ca8:	0009883a 	mov	r4,zero
10000cac:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10000cb0:	01400204 	movi	r5,8
10000cb4:	0009883a 	mov	r4,zero
10000cb8:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10000cbc:	0140b404 	movi	r5,720
10000cc0:	0009883a 	mov	r4,zero
10000cc4:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10000cc8:	01400044 	movi	r5,1
10000ccc:	0009883a 	mov	r4,zero
10000cd0:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10000cd4:	014004c4 	movi	r5,19
10000cd8:	0009883a 	mov	r4,zero
10000cdc:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10000ce0:	01414504 	movi	r5,1300
10000ce4:	0009883a 	mov	r4,zero
10000ce8:	00003d00 	call	100003d0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10000cec:	0141a004 	movi	r5,1664
10000cf0:	0009883a 	mov	r4,zero
10000cf4:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
10000cf8:	01404004 	movi	r5,256
10000cfc:	0009883a 	mov	r4,zero
10000d00:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10000d04:	000b883a 	mov	r5,zero
10000d08:	0009883a 	mov	r4,zero
10000d0c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0008);
10000d10:	01400204 	movi	r5,8
10000d14:	0009883a 	mov	r4,zero
10000d18:	00003d00 	call	100003d0 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
10000d1c:	01414b04 	movi	r5,1324
10000d20:	0009883a 	mov	r4,zero
10000d24:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//
10000d28:	01400204 	movi	r5,8
10000d2c:	0009883a 	mov	r4,zero
10000d30:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//
10000d34:	0140a404 	movi	r5,656
10000d38:	0009883a 	mov	r4,zero
10000d3c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0041);
10000d40:	01401044 	movi	r5,65
10000d44:	0009883a 	mov	r4,zero
10000d48:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10000d4c:	014004c4 	movi	r5,19
10000d50:	0009883a 	mov	r4,zero
10000d54:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0520);
10000d58:	01414804 	movi	r5,1312
10000d5c:	0009883a 	mov	r4,zero
10000d60:	00003d00 	call	100003d0 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
10000d64:	000b883a 	mov	r5,zero
10000d68:	0009883a 	mov	r4,zero
10000d6c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10000d70:	000b883a 	mov	r5,zero
10000d74:	0009883a 	mov	r4,zero
10000d78:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
10000d7c:	01408404 	movi	r5,528
10000d80:	0009883a 	mov	r4,zero
10000d84:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0041);
10000d88:	01401044 	movi	r5,65
10000d8c:	0009883a 	mov	r4,zero
10000d90:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10000d94:	014004c4 	movi	r5,19
10000d98:	0009883a 	mov	r4,zero
10000d9c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10000da0:	000b883a 	mov	r5,zero
10000da4:	0009883a 	mov	r4,zero
10000da8:	00003d00 	call	100003d0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000dac:	01414004 	movi	r5,1280
10000db0:	01006c04 	movi	r4,432
10000db4:	0000a380 	call	10000a38 <UsbWrite>
}
10000db8:	0001883a 	nop
10000dbc:	e037883a 	mov	sp,fp
10000dc0:	dfc00117 	ldw	ra,4(sp)
10000dc4:	df000017 	ldw	fp,0(sp)
10000dc8:	dec00204 	addi	sp,sp,8
10000dcc:	f800283a 	ret

10000dd0 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
10000dd0:	defffe04 	addi	sp,sp,-8
10000dd4:	dfc00115 	stw	ra,4(sp)
10000dd8:	df000015 	stw	fp,0(sp)
10000ddc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10000de0:	01414004 	movi	r5,1280
10000de4:	01000084 	movi	r4,2
10000de8:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10000dec:	01414304 	movi	r5,1292
10000df0:	0009883a 	mov	r4,zero
10000df4:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10000df8:	01400204 	movi	r5,8
10000dfc:	0009883a 	mov	r4,zero
10000e00:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10000e04:	0140b404 	movi	r5,720
10000e08:	0009883a 	mov	r4,zero
10000e0c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10000e10:	01400044 	movi	r5,1
10000e14:	0009883a 	mov	r4,zero
10000e18:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10000e1c:	014004c4 	movi	r5,19
10000e20:	0009883a 	mov	r4,zero
10000e24:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10000e28:	01414504 	movi	r5,1300
10000e2c:	0009883a 	mov	r4,zero
10000e30:	00003d00 	call	100003d0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10000e34:	0141a004 	movi	r5,1664
10000e38:	0009883a 	mov	r4,zero
10000e3c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
10000e40:	01404004 	movi	r5,256
10000e44:	0009883a 	mov	r4,zero
10000e48:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10000e4c:	000b883a 	mov	r5,zero
10000e50:	0009883a 	mov	r4,zero
10000e54:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
10000e58:	01400484 	movi	r5,18
10000e5c:	0009883a 	mov	r4,zero
10000e60:	00003d00 	call	100003d0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10000e64:	01415104 	movi	r5,1348
10000e68:	0009883a 	mov	r4,zero
10000e6c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10000e70:	01400204 	movi	r5,8
10000e74:	0009883a 	mov	r4,zero
10000e78:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10000e7c:	0140a404 	movi	r5,656
10000e80:	0009883a 	mov	r4,zero
10000e84:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10000e88:	01401044 	movi	r5,65
10000e8c:	0009883a 	mov	r4,zero
10000e90:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10000e94:	014004c4 	movi	r5,19
10000e98:	0009883a 	mov	r4,zero
10000e9c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10000ea0:	01414804 	movi	r5,1312
10000ea4:	0009883a 	mov	r4,zero
10000ea8:	00003d00 	call	100003d0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10000eac:	01415304 	movi	r5,1356
10000eb0:	0009883a 	mov	r4,zero
10000eb4:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10000eb8:	01400204 	movi	r5,8
10000ebc:	0009883a 	mov	r4,zero
10000ec0:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10000ec4:	0140a404 	movi	r5,656
10000ec8:	0009883a 	mov	r4,zero
10000ecc:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
10000ed0:	01400044 	movi	r5,1
10000ed4:	0009883a 	mov	r4,zero
10000ed8:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10000edc:	014004c4 	movi	r5,19
10000ee0:	0009883a 	mov	r4,zero
10000ee4:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10000ee8:	01414b04 	movi	r5,1324
10000eec:	0009883a 	mov	r4,zero
10000ef0:	00003d00 	call	100003d0 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
10000ef4:	01415504 	movi	r5,1364
10000ef8:	0009883a 	mov	r4,zero
10000efc:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
10000f00:	01400084 	movi	r5,2
10000f04:	0009883a 	mov	r4,zero
10000f08:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10000f0c:	0140a404 	movi	r5,656
10000f10:	0009883a 	mov	r4,zero
10000f14:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10000f18:	01401044 	movi	r5,65
10000f1c:	0009883a 	mov	r4,zero
10000f20:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10000f24:	014004c4 	movi	r5,19
10000f28:	0009883a 	mov	r4,zero
10000f2c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10000f30:	01414e04 	movi	r5,1336
10000f34:	0009883a 	mov	r4,zero
10000f38:	00003d00 	call	100003d0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10000f3c:	000b883a 	mov	r5,zero
10000f40:	0009883a 	mov	r4,zero
10000f44:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10000f48:	000b883a 	mov	r5,zero
10000f4c:	0009883a 	mov	r4,zero
10000f50:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10000f54:	01408404 	movi	r5,528
10000f58:	0009883a 	mov	r4,zero
10000f5c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
10000f60:	01401044 	movi	r5,65
10000f64:	0009883a 	mov	r4,zero
10000f68:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10000f6c:	014004c4 	movi	r5,19
10000f70:	0009883a 	mov	r4,zero
10000f74:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10000f78:	000b883a 	mov	r5,zero
10000f7c:	0009883a 	mov	r4,zero
10000f80:	00003d00 	call	100003d0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000f84:	01414004 	movi	r5,1280
10000f88:	01006c04 	movi	r4,432
10000f8c:	0000a380 	call	10000a38 <UsbWrite>
}
10000f90:	0001883a 	nop
10000f94:	e037883a 	mov	sp,fp
10000f98:	dfc00117 	ldw	ra,4(sp)
10000f9c:	df000017 	ldw	fp,0(sp)
10000fa0:	dec00204 	addi	sp,sp,8
10000fa4:	f800283a 	ret

10000fa8 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
10000fa8:	defffe04 	addi	sp,sp,-8
10000fac:	dfc00115 	stw	ra,4(sp)
10000fb0:	df000015 	stw	fp,0(sp)
10000fb4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10000fb8:	01414004 	movi	r5,1280
10000fbc:	01000084 	movi	r4,2
10000fc0:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10000fc4:	01414304 	movi	r5,1292
10000fc8:	0009883a 	mov	r4,zero
10000fcc:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10000fd0:	01400204 	movi	r5,8
10000fd4:	0009883a 	mov	r4,zero
10000fd8:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10000fdc:	0140b404 	movi	r5,720
10000fe0:	0009883a 	mov	r4,zero
10000fe4:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10000fe8:	01400044 	movi	r5,1
10000fec:	0009883a 	mov	r4,zero
10000ff0:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10000ff4:	014004c4 	movi	r5,19
10000ff8:	0009883a 	mov	r4,zero
10000ffc:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001000:	01414504 	movi	r5,1300
10001004:	0009883a 	mov	r4,zero
10001008:	00003d00 	call	100003d0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
1000100c:	0141a004 	movi	r5,1664
10001010:	0009883a 	mov	r4,zero
10001014:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10001018:	01408004 	movi	r5,512
1000101c:	0009883a 	mov	r4,zero
10001020:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001024:	000b883a 	mov	r5,zero
10001028:	0009883a 	mov	r4,zero
1000102c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10001030:	01400244 	movi	r5,9
10001034:	0009883a 	mov	r4,zero
10001038:	00003d00 	call	100003d0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
1000103c:	01415104 	movi	r5,1348
10001040:	0009883a 	mov	r4,zero
10001044:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001048:	01400204 	movi	r5,8
1000104c:	0009883a 	mov	r4,zero
10001050:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001054:	0140a404 	movi	r5,656
10001058:	0009883a 	mov	r4,zero
1000105c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001060:	01401044 	movi	r5,65
10001064:	0009883a 	mov	r4,zero
10001068:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
1000106c:	014004c4 	movi	r5,19
10001070:	0009883a 	mov	r4,zero
10001074:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001078:	01414804 	movi	r5,1312
1000107c:	0009883a 	mov	r4,zero
10001080:	00003d00 	call	100003d0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10001084:	01415304 	movi	r5,1356
10001088:	0009883a 	mov	r4,zero
1000108c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
10001090:	01400044 	movi	r5,1
10001094:	0009883a 	mov	r4,zero
10001098:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
1000109c:	0140a404 	movi	r5,656
100010a0:	0009883a 	mov	r4,zero
100010a4:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100010a8:	01400044 	movi	r5,1
100010ac:	0009883a 	mov	r4,zero
100010b0:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100010b4:	014004c4 	movi	r5,19
100010b8:	0009883a 	mov	r4,zero
100010bc:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100010c0:	01414b04 	movi	r5,1324
100010c4:	0009883a 	mov	r4,zero
100010c8:	00003d00 	call	100003d0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
100010cc:	000b883a 	mov	r5,zero
100010d0:	0009883a 	mov	r4,zero
100010d4:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
100010d8:	000b883a 	mov	r5,zero
100010dc:	0009883a 	mov	r4,zero
100010e0:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
100010e4:	01408404 	movi	r5,528
100010e8:	0009883a 	mov	r4,zero
100010ec:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100010f0:	01401044 	movi	r5,65
100010f4:	0009883a 	mov	r4,zero
100010f8:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100010fc:	014004c4 	movi	r5,19
10001100:	0009883a 	mov	r4,zero
10001104:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10001108:	000b883a 	mov	r5,zero
1000110c:	0009883a 	mov	r4,zero
10001110:	00003d00 	call	100003d0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001114:	01414004 	movi	r5,1280
10001118:	01006c04 	movi	r4,432
1000111c:	0000a380 	call	10000a38 <UsbWrite>
}
10001120:	0001883a 	nop
10001124:	e037883a 	mov	sp,fp
10001128:	dfc00117 	ldw	ra,4(sp)
1000112c:	df000017 	ldw	fp,0(sp)
10001130:	dec00204 	addi	sp,sp,8
10001134:	f800283a 	ret

10001138 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
10001138:	defffe04 	addi	sp,sp,-8
1000113c:	dfc00115 	stw	ra,4(sp)
10001140:	df000015 	stw	fp,0(sp)
10001144:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001148:	01414004 	movi	r5,1280
1000114c:	01000084 	movi	r4,2
10001150:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001154:	01414304 	movi	r5,1292
10001158:	0009883a 	mov	r4,zero
1000115c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001160:	01400204 	movi	r5,8
10001164:	0009883a 	mov	r4,zero
10001168:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
1000116c:	0140b404 	movi	r5,720
10001170:	0009883a 	mov	r4,zero
10001174:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001178:	01400044 	movi	r5,1
1000117c:	0009883a 	mov	r4,zero
10001180:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001184:	014004c4 	movi	r5,19
10001188:	0009883a 	mov	r4,zero
1000118c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001190:	01414504 	movi	r5,1300
10001194:	0009883a 	mov	r4,zero
10001198:	00003d00 	call	100003d0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
1000119c:	0141a004 	movi	r5,1664
100011a0:	0009883a 	mov	r4,zero
100011a4:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
100011a8:	01408004 	movi	r5,512
100011ac:	0009883a 	mov	r4,zero
100011b0:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100011b4:	000b883a 	mov	r5,zero
100011b8:	0009883a 	mov	r4,zero
100011bc:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
100011c0:	01403fc4 	movi	r5,255
100011c4:	0009883a 	mov	r4,zero
100011c8:	00003d00 	call	100003d0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
100011cc:	01415704 	movi	r5,1372
100011d0:	0009883a 	mov	r4,zero
100011d4:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100011d8:	01400204 	movi	r5,8
100011dc:	0009883a 	mov	r4,zero
100011e0:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100011e4:	0140a404 	movi	r5,656
100011e8:	0009883a 	mov	r4,zero
100011ec:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100011f0:	01401044 	movi	r5,65
100011f4:	0009883a 	mov	r4,zero
100011f8:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100011fc:	014004c4 	movi	r5,19
10001200:	0009883a 	mov	r4,zero
10001204:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001208:	01414804 	movi	r5,1312
1000120c:	0009883a 	mov	r4,zero
10001210:	00003d00 	call	100003d0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
10001214:	01415904 	movi	r5,1380
10001218:	0009883a 	mov	r4,zero
1000121c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001220:	01400204 	movi	r5,8
10001224:	0009883a 	mov	r4,zero
10001228:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
1000122c:	0140a404 	movi	r5,656
10001230:	0009883a 	mov	r4,zero
10001234:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001238:	01400044 	movi	r5,1
1000123c:	0009883a 	mov	r4,zero
10001240:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001244:	014004c4 	movi	r5,19
10001248:	0009883a 	mov	r4,zero
1000124c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001250:	01414b04 	movi	r5,1324
10001254:	0009883a 	mov	r4,zero
10001258:	00003d00 	call	100003d0 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
1000125c:	01415b04 	movi	r5,1388
10001260:	0009883a 	mov	r4,zero
10001264:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001268:	01400204 	movi	r5,8
1000126c:	0009883a 	mov	r4,zero
10001270:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001274:	0140a404 	movi	r5,656
10001278:	0009883a 	mov	r4,zero
1000127c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001280:	01401044 	movi	r5,65
10001284:	0009883a 	mov	r4,zero
10001288:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
1000128c:	014004c4 	movi	r5,19
10001290:	0009883a 	mov	r4,zero
10001294:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001298:	01414e04 	movi	r5,1336
1000129c:	0009883a 	mov	r4,zero
100012a0:	00003d00 	call	100003d0 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
100012a4:	01415d04 	movi	r5,1396
100012a8:	0009883a 	mov	r4,zero
100012ac:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
100012b0:	01400204 	movi	r5,8
100012b4:	0009883a 	mov	r4,zero
100012b8:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
100012bc:	0140a404 	movi	r5,656
100012c0:	0009883a 	mov	r4,zero
100012c4:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
100012c8:	01400044 	movi	r5,1
100012cc:	0009883a 	mov	r4,zero
100012d0:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
100012d4:	014004c4 	movi	r5,19
100012d8:	0009883a 	mov	r4,zero
100012dc:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
100012e0:	01415104 	movi	r5,1348
100012e4:	0009883a 	mov	r4,zero
100012e8:	00003d00 	call	100003d0 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
100012ec:	01415f04 	movi	r5,1404
100012f0:	0009883a 	mov	r4,zero
100012f4:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
100012f8:	01400084 	movi	r5,2
100012fc:	0009883a 	mov	r4,zero
10001300:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001304:	0140a404 	movi	r5,656
10001308:	0009883a 	mov	r4,zero
1000130c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10001310:	01401044 	movi	r5,65
10001314:	0009883a 	mov	r4,zero
10001318:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
1000131c:	014004c4 	movi	r5,19
10001320:	0009883a 	mov	r4,zero
10001324:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10001328:	01415404 	movi	r5,1360
1000132c:	0009883a 	mov	r4,zero
10001330:	00003d00 	call	100003d0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10001334:	000b883a 	mov	r5,zero
10001338:	0009883a 	mov	r4,zero
1000133c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10001340:	000b883a 	mov	r5,zero
10001344:	0009883a 	mov	r4,zero
10001348:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
1000134c:	01408404 	movi	r5,528
10001350:	0009883a 	mov	r4,zero
10001354:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10001358:	01401044 	movi	r5,65
1000135c:	0009883a 	mov	r4,zero
10001360:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001364:	014004c4 	movi	r5,19
10001368:	0009883a 	mov	r4,zero
1000136c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10001370:	000b883a 	mov	r5,zero
10001374:	0009883a 	mov	r4,zero
10001378:	00003d00 	call	100003d0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000137c:	01414004 	movi	r5,1280
10001380:	01006c04 	movi	r4,432
10001384:	0000a380 	call	10000a38 <UsbWrite>
}
10001388:	0001883a 	nop
1000138c:	e037883a 	mov	sp,fp
10001390:	dfc00117 	ldw	ra,4(sp)
10001394:	df000017 	ldw	fp,0(sp)
10001398:	dec00204 	addi	sp,sp,8
1000139c:	f800283a 	ret

100013a0 <UsbSetConfig>:

void UsbSetConfig()
{
100013a0:	defffe04 	addi	sp,sp,-8
100013a4:	dfc00115 	stw	ra,4(sp)
100013a8:	df000015 	stw	fp,0(sp)
100013ac:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100013b0:	01414004 	movi	r5,1280
100013b4:	01000084 	movi	r4,2
100013b8:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x050C);
100013bc:	01414304 	movi	r5,1292
100013c0:	0009883a 	mov	r4,zero
100013c4:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100013c8:	01400204 	movi	r5,8
100013cc:	0009883a 	mov	r4,zero
100013d0:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100013d4:	0140b404 	movi	r5,720
100013d8:	0009883a 	mov	r4,zero
100013dc:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0001);
100013e0:	01400044 	movi	r5,1
100013e4:	0009883a 	mov	r4,zero
100013e8:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
100013ec:	014004c4 	movi	r5,19
100013f0:	0009883a 	mov	r4,zero
100013f4:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0514);
100013f8:	01414504 	movi	r5,1300
100013fc:	0009883a 	mov	r4,zero
10001400:	00003d00 	call	100003d0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10001404:	01424004 	movi	r5,2304
10001408:	0009883a 	mov	r4,zero
1000140c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10001410:	01400044 	movi	r5,1
10001414:	0009883a 	mov	r4,zero
10001418:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000141c:	000b883a 	mov	r5,zero
10001420:	0009883a 	mov	r4,zero
10001424:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001428:	000b883a 	mov	r5,zero
1000142c:	0009883a 	mov	r4,zero
10001430:	00003d00 	call	100003d0 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001434:	000b883a 	mov	r5,zero
10001438:	0009883a 	mov	r4,zero
1000143c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10001440:	000b883a 	mov	r5,zero
10001444:	0009883a 	mov	r4,zero
10001448:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
1000144c:	0140a404 	movi	r5,656
10001450:	0009883a 	mov	r4,zero
10001454:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001458:	01401044 	movi	r5,65
1000145c:	0009883a 	mov	r4,zero
10001460:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001464:	014004c4 	movi	r5,19
10001468:	0009883a 	mov	r4,zero
1000146c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001470:	000b883a 	mov	r5,zero
10001474:	0009883a 	mov	r4,zero
10001478:	00003d00 	call	100003d0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000147c:	01414004 	movi	r5,1280
10001480:	01006c04 	movi	r4,432
10001484:	0000a380 	call	10000a38 <UsbWrite>

}
10001488:	0001883a 	nop
1000148c:	e037883a 	mov	sp,fp
10001490:	dfc00117 	ldw	ra,4(sp)
10001494:	df000017 	ldw	fp,0(sp)
10001498:	dec00204 	addi	sp,sp,8
1000149c:	f800283a 	ret

100014a0 <UsbClassRequest>:

void UsbClassRequest()
{
100014a0:	defffe04 	addi	sp,sp,-8
100014a4:	dfc00115 	stw	ra,4(sp)
100014a8:	df000015 	stw	fp,0(sp)
100014ac:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100014b0:	01414004 	movi	r5,1280
100014b4:	01000084 	movi	r4,2
100014b8:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x050C);
100014bc:	01414304 	movi	r5,1292
100014c0:	0009883a 	mov	r4,zero
100014c4:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100014c8:	01400204 	movi	r5,8
100014cc:	0009883a 	mov	r4,zero
100014d0:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100014d4:	0140b404 	movi	r5,720
100014d8:	0009883a 	mov	r4,zero
100014dc:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0001);
100014e0:	01400044 	movi	r5,1
100014e4:	0009883a 	mov	r4,zero
100014e8:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
100014ec:	014004c4 	movi	r5,19
100014f0:	0009883a 	mov	r4,zero
100014f4:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0514);
100014f8:	01414504 	movi	r5,1300
100014fc:	0009883a 	mov	r4,zero
10001500:	00003d00 	call	100003d0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10001504:	01428844 	movi	r5,2593
10001508:	0009883a 	mov	r4,zero
1000150c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10001510:	000b883a 	mov	r5,zero
10001514:	0009883a 	mov	r4,zero
10001518:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000151c:	000b883a 	mov	r5,zero
10001520:	0009883a 	mov	r4,zero
10001524:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001528:	000b883a 	mov	r5,zero
1000152c:	0009883a 	mov	r4,zero
10001530:	00003d00 	call	100003d0 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001534:	000b883a 	mov	r5,zero
10001538:	0009883a 	mov	r4,zero
1000153c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10001540:	000b883a 	mov	r5,zero
10001544:	0009883a 	mov	r4,zero
10001548:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
1000154c:	0140a404 	movi	r5,656
10001550:	0009883a 	mov	r4,zero
10001554:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001558:	01401044 	movi	r5,65
1000155c:	0009883a 	mov	r4,zero
10001560:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001564:	014004c4 	movi	r5,19
10001568:	0009883a 	mov	r4,zero
1000156c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001570:	000b883a 	mov	r5,zero
10001574:	0009883a 	mov	r4,zero
10001578:	00003d00 	call	100003d0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000157c:	01414004 	movi	r5,1280
10001580:	01006c04 	movi	r4,432
10001584:	0000a380 	call	10000a38 <UsbWrite>
}
10001588:	0001883a 	nop
1000158c:	e037883a 	mov	sp,fp
10001590:	dfc00117 	ldw	ra,4(sp)
10001594:	df000017 	ldw	fp,0(sp)
10001598:	dec00204 	addi	sp,sp,8
1000159c:	f800283a 	ret

100015a0 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
100015a0:	defffe04 	addi	sp,sp,-8
100015a4:	dfc00115 	stw	ra,4(sp)
100015a8:	df000015 	stw	fp,0(sp)
100015ac:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100015b0:	01414004 	movi	r5,1280
100015b4:	01000084 	movi	r4,2
100015b8:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x050C);
100015bc:	01414304 	movi	r5,1292
100015c0:	0009883a 	mov	r4,zero
100015c4:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100015c8:	01400204 	movi	r5,8
100015cc:	0009883a 	mov	r4,zero
100015d0:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100015d4:	0140b404 	movi	r5,720
100015d8:	0009883a 	mov	r4,zero
100015dc:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0001);
100015e0:	01400044 	movi	r5,1
100015e4:	0009883a 	mov	r4,zero
100015e8:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
100015ec:	014004c4 	movi	r5,19
100015f0:	0009883a 	mov	r4,zero
100015f4:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0514);
100015f8:	01414504 	movi	r5,1300
100015fc:	0009883a 	mov	r4,zero
10001600:	00003d00 	call	100003d0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10001604:	0141a044 	movi	r5,1665
10001608:	0009883a 	mov	r4,zero
1000160c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10001610:	01484004 	movi	r5,8448
10001614:	0009883a 	mov	r4,zero
10001618:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
1000161c:	000b883a 	mov	r5,zero
10001620:	0009883a 	mov	r4,zero
10001624:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10001628:	01401ec4 	movi	r5,123
1000162c:	0009883a 	mov	r4,zero
10001630:	00003d00 	call	100003d0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001634:	01415104 	movi	r5,1348
10001638:	0009883a 	mov	r4,zero
1000163c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001640:	01400204 	movi	r5,8
10001644:	0009883a 	mov	r4,zero
10001648:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
1000164c:	0140a404 	movi	r5,656
10001650:	0009883a 	mov	r4,zero
10001654:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001658:	01401044 	movi	r5,65
1000165c:	0009883a 	mov	r4,zero
10001660:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001664:	014004c4 	movi	r5,19
10001668:	0009883a 	mov	r4,zero
1000166c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001670:	01414804 	movi	r5,1312
10001674:	0009883a 	mov	r4,zero
10001678:	00003d00 	call	100003d0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
1000167c:	000b883a 	mov	r5,zero
10001680:	0009883a 	mov	r4,zero
10001684:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10001688:	000b883a 	mov	r5,zero
1000168c:	0009883a 	mov	r4,zero
10001690:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10001694:	01408404 	movi	r5,528
10001698:	0009883a 	mov	r4,zero
1000169c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100016a0:	01401044 	movi	r5,65
100016a4:	0009883a 	mov	r4,zero
100016a8:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100016ac:	014004c4 	movi	r5,19
100016b0:	0009883a 	mov	r4,zero
100016b4:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
100016b8:	000b883a 	mov	r5,zero
100016bc:	0009883a 	mov	r4,zero
100016c0:	00003d00 	call	100003d0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100016c4:	01414004 	movi	r5,1280
100016c8:	01006c04 	movi	r4,432
100016cc:	0000a380 	call	10000a38 <UsbWrite>

}
100016d0:	0001883a 	nop
100016d4:	e037883a 	mov	sp,fp
100016d8:	dfc00117 	ldw	ra,4(sp)
100016dc:	df000017 	ldw	fp,0(sp)
100016e0:	dec00204 	addi	sp,sp,8
100016e4:	f800283a 	ret

100016e8 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
100016e8:	defffe04 	addi	sp,sp,-8
100016ec:	dfc00115 	stw	ra,4(sp)
100016f0:	df000015 	stw	fp,0(sp)
100016f4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100016f8:	01414004 	movi	r5,1280
100016fc:	01000084 	movi	r4,2
10001700:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001704:	01414304 	movi	r5,1292
10001708:	0009883a 	mov	r4,zero
1000170c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001710:	01400204 	movi	r5,8
10001714:	0009883a 	mov	r4,zero
10001718:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
1000171c:	0140b404 	movi	r5,720
10001720:	0009883a 	mov	r4,zero
10001724:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001728:	01400044 	movi	r5,1
1000172c:	0009883a 	mov	r4,zero
10001730:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001734:	014004c4 	movi	r5,19
10001738:	0009883a 	mov	r4,zero
1000173c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001740:	01414504 	movi	r5,1300
10001744:	0009883a 	mov	r4,zero
10001748:	00003d00 	call	100003d0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
1000174c:	0141a044 	movi	r5,1665
10001750:	0009883a 	mov	r4,zero
10001754:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10001758:	01488004 	movi	r5,8704
1000175c:	0009883a 	mov	r4,zero
10001760:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001764:	000b883a 	mov	r5,zero
10001768:	0009883a 	mov	r4,zero
1000176c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10001770:	01401ec4 	movi	r5,123
10001774:	0009883a 	mov	r4,zero
10001778:	00003d00 	call	100003d0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
1000177c:	01416004 	movi	r5,1408
10001780:	0009883a 	mov	r4,zero
10001784:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001788:	01400204 	movi	r5,8
1000178c:	0009883a 	mov	r4,zero
10001790:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001794:	0140a404 	movi	r5,656
10001798:	0009883a 	mov	r4,zero
1000179c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100017a0:	01401044 	movi	r5,65
100017a4:	0009883a 	mov	r4,zero
100017a8:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100017ac:	014004c4 	movi	r5,19
100017b0:	0009883a 	mov	r4,zero
100017b4:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100017b8:	01414804 	movi	r5,1312
100017bc:	0009883a 	mov	r4,zero
100017c0:	00003d00 	call	100003d0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
100017c4:	01416204 	movi	r5,1416
100017c8:	0009883a 	mov	r4,zero
100017cc:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100017d0:	01400204 	movi	r5,8
100017d4:	0009883a 	mov	r4,zero
100017d8:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100017dc:	0140a404 	movi	r5,656
100017e0:	0009883a 	mov	r4,zero
100017e4:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100017e8:	01400044 	movi	r5,1
100017ec:	0009883a 	mov	r4,zero
100017f0:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100017f4:	014004c4 	movi	r5,19
100017f8:	0009883a 	mov	r4,zero
100017fc:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001800:	01414b04 	movi	r5,1324
10001804:	0009883a 	mov	r4,zero
10001808:	00003d00 	call	100003d0 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
1000180c:	01416404 	movi	r5,1424
10001810:	0009883a 	mov	r4,zero
10001814:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001818:	01400204 	movi	r5,8
1000181c:	0009883a 	mov	r4,zero
10001820:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001824:	0140a404 	movi	r5,656
10001828:	0009883a 	mov	r4,zero
1000182c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001830:	01401044 	movi	r5,65
10001834:	0009883a 	mov	r4,zero
10001838:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
1000183c:	014004c4 	movi	r5,19
10001840:	0009883a 	mov	r4,zero
10001844:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001848:	01414e04 	movi	r5,1336
1000184c:	0009883a 	mov	r4,zero
10001850:	00003d00 	call	100003d0 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10001854:	01416604 	movi	r5,1432
10001858:	0009883a 	mov	r4,zero
1000185c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10001860:	01400204 	movi	r5,8
10001864:	0009883a 	mov	r4,zero
10001868:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
1000186c:	0140a404 	movi	r5,656
10001870:	0009883a 	mov	r4,zero
10001874:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10001878:	01400044 	movi	r5,1
1000187c:	0009883a 	mov	r4,zero
10001880:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001884:	014004c4 	movi	r5,19
10001888:	0009883a 	mov	r4,zero
1000188c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10001890:	01415104 	movi	r5,1348
10001894:	0009883a 	mov	r4,zero
10001898:	00003d00 	call	100003d0 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
1000189c:	01416804 	movi	r5,1440
100018a0:	0009883a 	mov	r4,zero
100018a4:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100018a8:	01400204 	movi	r5,8
100018ac:	0009883a 	mov	r4,zero
100018b0:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100018b4:	0140a404 	movi	r5,656
100018b8:	0009883a 	mov	r4,zero
100018bc:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
100018c0:	01401044 	movi	r5,65
100018c4:	0009883a 	mov	r4,zero
100018c8:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100018cc:	014004c4 	movi	r5,19
100018d0:	0009883a 	mov	r4,zero
100018d4:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
100018d8:	01415404 	movi	r5,1360
100018dc:	0009883a 	mov	r4,zero
100018e0:	00003d00 	call	100003d0 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
100018e4:	01416a04 	movi	r5,1448
100018e8:	0009883a 	mov	r4,zero
100018ec:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100018f0:	01400204 	movi	r5,8
100018f4:	0009883a 	mov	r4,zero
100018f8:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100018fc:	0140a404 	movi	r5,656
10001900:	0009883a 	mov	r4,zero
10001904:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001908:	01400044 	movi	r5,1
1000190c:	0009883a 	mov	r4,zero
10001910:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001914:	014004c4 	movi	r5,19
10001918:	0009883a 	mov	r4,zero
1000191c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
10001920:	01415704 	movi	r5,1372
10001924:	0009883a 	mov	r4,zero
10001928:	00003d00 	call	100003d0 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
1000192c:	01416c04 	movi	r5,1456
10001930:	0009883a 	mov	r4,zero
10001934:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001938:	01400204 	movi	r5,8
1000193c:	0009883a 	mov	r4,zero
10001940:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
10001944:	0140a404 	movi	r5,656
10001948:	0009883a 	mov	r4,zero
1000194c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
10001950:	01401044 	movi	r5,65
10001954:	0009883a 	mov	r4,zero
10001958:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
1000195c:	014004c4 	movi	r5,19
10001960:	0009883a 	mov	r4,zero
10001964:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10001968:	01415a04 	movi	r5,1384
1000196c:	0009883a 	mov	r4,zero
10001970:	00003d00 	call	100003d0 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10001974:	01416e04 	movi	r5,1464
10001978:	0009883a 	mov	r4,zero
1000197c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10001980:	014000c4 	movi	r5,3
10001984:	0009883a 	mov	r4,zero
10001988:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
1000198c:	0140a404 	movi	r5,656
10001990:	0009883a 	mov	r4,zero
10001994:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10001998:	01400044 	movi	r5,1
1000199c:	0009883a 	mov	r4,zero
100019a0:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
100019a4:	014004c4 	movi	r5,19
100019a8:	0009883a 	mov	r4,zero
100019ac:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
100019b0:	01415d04 	movi	r5,1396
100019b4:	0009883a 	mov	r4,zero
100019b8:	00003d00 	call	100003d0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
100019bc:	000b883a 	mov	r5,zero
100019c0:	0009883a 	mov	r4,zero
100019c4:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
100019c8:	000b883a 	mov	r5,zero
100019cc:	0009883a 	mov	r4,zero
100019d0:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
100019d4:	01408404 	movi	r5,528
100019d8:	0009883a 	mov	r4,zero
100019dc:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100019e0:	01401044 	movi	r5,65
100019e4:	0009883a 	mov	r4,zero
100019e8:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100019ec:	014004c4 	movi	r5,19
100019f0:	0009883a 	mov	r4,zero
100019f4:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
100019f8:	000b883a 	mov	r5,zero
100019fc:	0009883a 	mov	r4,zero
10001a00:	00003d00 	call	100003d0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001a04:	01414004 	movi	r5,1280
10001a08:	01006c04 	movi	r4,432
10001a0c:	0000a380 	call	10000a38 <UsbWrite>

}
10001a10:	0001883a 	nop
10001a14:	e037883a 	mov	sp,fp
10001a18:	dfc00117 	ldw	ra,4(sp)
10001a1c:	df000017 	ldw	fp,0(sp)
10001a20:	dec00204 	addi	sp,sp,8
10001a24:	f800283a 	ret

10001a28 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
10001a28:	defffd04 	addi	sp,sp,-12
10001a2c:	dfc00215 	stw	ra,8(sp)
10001a30:	df000115 	stw	fp,4(sp)
10001a34:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
10001a38:	01005104 	movi	r4,324
10001a3c:	0000a900 	call	10000a90 <UsbRead>
10001a40:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
10001a44:	000b883a 	mov	r5,zero
10001a48:	01005104 	movi	r4,324
10001a4c:	0000a380 	call	10000a38 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10001a50:	00000d06 	br	10001a88 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
10001a54:	e0bfff0b 	ldhu	r2,-4(fp)
10001a58:	10000526 	beq	r2,zero,10001a70 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
10001a5c:	e0bfff0b 	ldhu	r2,-4(fp)
10001a60:	100b883a 	mov	r5,r2
10001a64:	01040074 	movhi	r4,4097
10001a68:	21086604 	addi	r4,r4,8600
10001a6c:	0002bc40 	call	10002bc4 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10001a70:	01005104 	movi	r4,324
10001a74:	0000a900 	call	10000a90 <UsbRead>
10001a78:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10001a7c:	000b883a 	mov	r5,zero
10001a80:	01005104 	movi	r4,324
10001a84:	0000a380 	call	10000a38 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10001a88:	e0bfff0b 	ldhu	r2,-4(fp)
10001a8c:	10840018 	cmpnei	r2,r2,4096
10001a90:	103ff01e 	bne	r2,zero,10001a54 <__alt_data_end+0xf8001a54>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
10001a94:	e0bfff0b 	ldhu	r2,-4(fp)
}
10001a98:	e037883a 	mov	sp,fp
10001a9c:	dfc00117 	ldw	ra,4(sp)
10001aa0:	df000017 	ldw	fp,0(sp)
10001aa4:	dec00204 	addi	sp,sp,8
10001aa8:	f800283a 	ret

10001aac <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10001aac:	defffd04 	addi	sp,sp,-12
10001ab0:	dfc00215 	stw	ra,8(sp)
10001ab4:	df000115 	stw	fp,4(sp)
10001ab8:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10001abc:	010000c4 	movi	r4,3
10001ac0:	000044c0 	call	1000044c <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
10001ac4:	01005104 	movi	r4,324
10001ac8:	0000a900 	call	10000a90 <UsbRead>
10001acc:	10bfffcc 	andi	r2,r2,65535
10001ad0:	10840018 	cmpnei	r2,r2,4096
10001ad4:	1000091e 	bne	r2,zero,10001afc <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10001ad8:	000b883a 	mov	r5,zero
10001adc:	01005104 	movi	r4,324
10001ae0:	0000a380 	call	10000a38 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001ae4:	0001883a 	nop
10001ae8:	010000c4 	movi	r4,3
10001aec:	000044c0 	call	1000044c <IO_read>
10001af0:	10bfffcc 	andi	r2,r2,65535
10001af4:	1080040c 	andi	r2,r2,16
10001af8:	103ffb26 	beq	r2,zero,10001ae8 <__alt_data_end+0xf8001ae8>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10001afc:	01414204 	movi	r5,1288
10001b00:	01000084 	movi	r4,2
10001b04:	00003d00 	call	100003d0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10001b08:	0009883a 	mov	r4,zero
10001b0c:	000044c0 	call	1000044c <IO_read>
10001b10:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
10001b14:	e0bfff0b 	ldhu	r2,-4(fp)
}
10001b18:	e037883a 	mov	sp,fp
10001b1c:	dfc00117 	ldw	ra,4(sp)
10001b20:	df000017 	ldw	fp,0(sp)
10001b24:	dec00204 	addi	sp,sp,8
10001b28:	f800283a 	ret

10001b2c <UsbPrintMem>:


void UsbPrintMem()
{
10001b2c:	defffc04 	addi	sp,sp,-16
10001b30:	dfc00315 	stw	ra,12(sp)
10001b34:	df000215 	stw	fp,8(sp)
10001b38:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10001b3c:	01414004 	movi	r5,1280
10001b40:	01000084 	movi	r4,2
10001b44:	00003d00 	call	100003d0 <IO_write>
	for (i = 0; i <= 200; i += 2)
10001b48:	e03ffe15 	stw	zero,-8(fp)
10001b4c:	00000e06 	br	10001b88 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
10001b50:	0009883a 	mov	r4,zero
10001b54:	000044c0 	call	1000044c <IO_read>
10001b58:	10bfffcc 	andi	r2,r2,65535
10001b5c:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
10001b60:	e0bffe17 	ldw	r2,-8(fp)
10001b64:	10814004 	addi	r2,r2,1280
10001b68:	e1bfff17 	ldw	r6,-4(fp)
10001b6c:	100b883a 	mov	r5,r2
10001b70:	01040074 	movhi	r4,4097
10001b74:	21086e04 	addi	r4,r4,8632
10001b78:	0002bc40 	call	10002bc4 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
10001b7c:	e0bffe17 	ldw	r2,-8(fp)
10001b80:	10800084 	addi	r2,r2,2
10001b84:	e0bffe15 	stw	r2,-8(fp)
10001b88:	e0bffe17 	ldw	r2,-8(fp)
10001b8c:	10803250 	cmplti	r2,r2,201
10001b90:	103fef1e 	bne	r2,zero,10001b50 <__alt_data_end+0xf8001b50>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
10001b94:	0001883a 	nop
10001b98:	e037883a 	mov	sp,fp
10001b9c:	dfc00117 	ldw	ra,4(sp)
10001ba0:	df000017 	ldw	fp,0(sp)
10001ba4:	dec00204 	addi	sp,sp,8
10001ba8:	f800283a 	ret

10001bac <usb_initialize>:
static alt_u8  hot_plug_count;
static alt_u16 code;


void usb_initialize()
{
10001bac:	defffe04 	addi	sp,sp,-8
10001bb0:	dfc00115 	stw	ra,4(sp)
10001bb4:	df000015 	stw	fp,0(sp)
10001bb8:	d839883a 	mov	fp,sp
	IO_init();
10001bbc:	00003480 	call	10000348 <IO_init>
	// alt_u8 toggle = 0;
	// alt_u8 data_size;
	// alt_u8 hot_plug_count;
	// alt_u16 code;

	printf("USB keyboard setup...\n\n");
10001bc0:	01040074 	movhi	r4,4097
10001bc4:	21087304 	addi	r4,r4,8652
10001bc8:	0002cc00 	call	10002cc0 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
10001bcc:	0000ad40 	call	10000ad4 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10001bd0:	000b883a 	mov	r5,zero
10001bd4:	01005104 	movi	r4,324
10001bd8:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10001bdc:	017fffd4 	movui	r5,65535
10001be0:	01302414 	movui	r4,49296
10001be4:	0000a380 	call	10000a38 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10001be8:	01409604 	movi	r5,600
10001bec:	01006d04 	movi	r4,436
10001bf0:	0000a380 	call	10000a38 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10001bf4:	00811004 	movi	r2,1088
10001bf8:	d0a6cf8d 	sth	r2,-25794(gp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10001bfc:	d0a6cf8b 	ldhu	r2,-25794(gp)
10001c00:	10bfffcc 	andi	r2,r2,65535
10001c04:	100b883a 	mov	r5,r2
10001c08:	01005084 	movi	r4,322
10001c0c:	0000a380 	call	10000a38 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
10001c10:	00808404 	movi	r2,528
10001c14:	d0a6cf0d 	sth	r2,-25796(gp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
10001c18:	d0a6cf0b 	ldhu	r2,-25796(gp)
10001c1c:	10bfffcc 	andi	r2,r2,65535
10001c20:	100b883a 	mov	r5,r2
10001c24:	01302314 	movui	r4,49292
10001c28:	0000a380 	call	10000a38 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
10001c2c:	000b883a 	mov	r5,zero
10001c30:	01007104 	movi	r4,452
10001c34:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10001c38:	000b883a 	mov	r5,zero
10001c3c:	01007184 	movi	r4,454
10001c40:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10001c44:	000b883a 	mov	r5,zero
10001c48:	01007204 	movi	r4,456
10001c4c:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10001c50:	000b883a 	mov	r5,zero
10001c54:	01007284 	movi	r4,458
10001c58:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10001c5c:	000b883a 	mov	r5,zero
10001c60:	01007304 	movi	r4,460
10001c64:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10001c68:	000b883a 	mov	r5,zero
10001c6c:	01007384 	movi	r4,462
10001c70:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10001c74:	000b883a 	mov	r5,zero
10001c78:	01007404 	movi	r4,464
10001c7c:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10001c80:	000b883a 	mov	r5,zero
10001c84:	01007484 	movi	r4,466
10001c88:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10001c8c:	000b883a 	mov	r5,zero
10001c90:	01007504 	movi	r4,468
10001c94:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10001c98:	000b883a 	mov	r5,zero
10001c9c:	01007584 	movi	r4,470
10001ca0:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10001ca4:	000b883a 	mov	r5,zero
10001ca8:	01007604 	movi	r4,472
10001cac:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10001cb0:	000b883a 	mov	r5,zero
10001cb4:	01007684 	movi	r4,474
10001cb8:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10001cbc:	000b883a 	mov	r5,zero
10001cc0:	01007704 	movi	r4,476
10001cc4:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10001cc8:	000b883a 	mov	r5,zero
10001ccc:	01007784 	movi	r4,478
10001cd0:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
10001cd4:	01401c84 	movi	r5,114
10001cd8:	01007084 	movi	r4,450
10001cdc:	0000a380 	call	10000a38 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10001ce0:	01738054 	movui	r5,52737
10001ce4:	01000044 	movi	r4,1
10001ce8:	00003d00 	call	100003d0 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10001cec:	0001883a 	nop
10001cf0:	010000c4 	movi	r4,3
10001cf4:	000044c0 	call	1000044c <IO_read>
10001cf8:	10bfffcc 	andi	r2,r2,65535
10001cfc:	103ffc26 	beq	r2,zero,10001cf0 <__alt_data_end+0xf8001cf0>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10001d00:	00000806 	br	10001d24 <usb_initialize+0x178>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10001d04:	01000044 	movi	r4,1
10001d08:	000044c0 	call	1000044c <IO_read>
10001d0c:	10bfffcc 	andi	r2,r2,65535
10001d10:	100b883a 	mov	r5,r2
10001d14:	01040074 	movhi	r4,4097
10001d18:	21087904 	addi	r4,r4,8676
10001d1c:	0002bc40 	call	10002bc4 <printf>
		goto USB_HOT_PLUG;
10001d20:	003faa06 	br	10001bcc <__alt_data_end+0xf8001bcc>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10001d24:	01000044 	movi	r4,1
10001d28:	000044c0 	call	1000044c <IO_read>
10001d2c:	10bfffcc 	andi	r2,r2,65535
10001d30:	1083fb58 	cmpnei	r2,r2,4077
10001d34:	103ff31e 	bne	r2,zero,10001d04 <__alt_data_end+0xf8001d04>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
10001d38:	01040074 	movhi	r4,4097
10001d3c:	21088204 	addi	r4,r4,8712
10001d40:	0002bc40 	call	10002bc4 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
10001d44:	01401d04 	movi	r5,116
10001d48:	01007084 	movi	r4,450
10001d4c:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
10001d50:	01400f04 	movi	r5,60
10001d54:	01007104 	movi	r4,452
10001d58:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10001d5c:	000b883a 	mov	r5,zero
10001d60:	01007184 	movi	r4,454
10001d64:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10001d68:	000b883a 	mov	r5,zero
10001d6c:	01007204 	movi	r4,456
10001d70:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10001d74:	000b883a 	mov	r5,zero
10001d78:	01007284 	movi	r4,458
10001d7c:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10001d80:	000b883a 	mov	r5,zero
10001d84:	01007304 	movi	r4,460
10001d88:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10001d8c:	000b883a 	mov	r5,zero
10001d90:	01007384 	movi	r4,462
10001d94:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10001d98:	000b883a 	mov	r5,zero
10001d9c:	01007404 	movi	r4,464
10001da0:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10001da4:	000b883a 	mov	r5,zero
10001da8:	01007484 	movi	r4,466
10001dac:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10001db0:	000b883a 	mov	r5,zero
10001db4:	01007504 	movi	r4,468
10001db8:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10001dbc:	000b883a 	mov	r5,zero
10001dc0:	01007584 	movi	r4,470
10001dc4:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10001dc8:	000b883a 	mov	r5,zero
10001dcc:	01007604 	movi	r4,472
10001dd0:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10001dd4:	000b883a 	mov	r5,zero
10001dd8:	01007684 	movi	r4,474
10001ddc:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10001de0:	000b883a 	mov	r5,zero
10001de4:	01007704 	movi	r4,476
10001de8:	0000a380 	call	10000a38 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10001dec:	000b883a 	mov	r5,zero
10001df0:	01007784 	movi	r4,478
10001df4:	0000a380 	call	10000a38 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10001df8:	01738054 	movui	r5,52737
10001dfc:	01000044 	movi	r4,1
10001e00:	00003d00 	call	100003d0 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10001e04:	0001883a 	nop
10001e08:	01000044 	movi	r4,1
10001e0c:	000044c0 	call	1000044c <IO_read>
10001e10:	10bfffcc 	andi	r2,r2,65535
10001e14:	1083fb58 	cmpnei	r2,r2,4077
10001e18:	10000826 	beq	r2,zero,10001e3c <usb_initialize+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10001e1c:	01000044 	movi	r4,1
10001e20:	000044c0 	call	1000044c <IO_read>
10001e24:	10bfffcc 	andi	r2,r2,65535
10001e28:	100b883a 	mov	r5,r2
10001e2c:	01040074 	movhi	r4,4097
10001e30:	21087904 	addi	r4,r4,8676
10001e34:	0002bc40 	call	10002bc4 <printf>
		goto USB_HOT_PLUG;
10001e38:	003f6406 	br	10001bcc <__alt_data_end+0xf8001bcc>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
10001e3c:	00b02284 	movi	r2,-16246
10001e40:	d0a6d00d 	sth	r2,-25792(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
10001e44:	008c0004 	movi	r2,12288
10001e48:	d0a6d08d 	sth	r2,-25790(gp)
	fs_device = A_DP_STAT;
10001e4c:	00880004 	movi	r2,8192
10001e50:	d0a6d10d 	sth	r2,-25788(gp)
	usb_ctl_val = UsbRead(ctl_reg);
10001e54:	d0a6d00b 	ldhu	r2,-25792(gp)
10001e58:	10bfffcc 	andi	r2,r2,65535
10001e5c:	1009883a 	mov	r4,r2
10001e60:	0000a900 	call	10000a90 <UsbRead>
10001e64:	d0a6cf8d 	sth	r2,-25794(gp)

	if (!(usb_ctl_val & no_device))
10001e68:	d0e6cf8b 	ldhu	r3,-25794(gp)
10001e6c:	d0a6d08b 	ldhu	r2,-25790(gp)
10001e70:	1884703a 	and	r2,r3,r2
10001e74:	10bfffcc 	andi	r2,r2,65535
10001e78:	1000361e 	bne	r2,zero,10001f54 <usb_initialize+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10001e7c:	d026d205 	stb	zero,-25784(gp)
10001e80:	00000f06 	br	10001ec0 <usb_initialize+0x314>
		{
			usleep(5*1000);
10001e84:	0104e204 	movi	r4,5000
10001e88:	00101500 	call	10010150 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001e8c:	d0a6d00b 	ldhu	r2,-25792(gp)
10001e90:	10bfffcc 	andi	r2,r2,65535
10001e94:	1009883a 	mov	r4,r2
10001e98:	0000a900 	call	10000a90 <UsbRead>
10001e9c:	d0a6cf8d 	sth	r2,-25794(gp)
			if(usb_ctl_val & no_device) break;
10001ea0:	d0e6cf8b 	ldhu	r3,-25794(gp)
10001ea4:	d0a6d08b 	ldhu	r2,-25790(gp)
10001ea8:	1884703a 	and	r2,r3,r2
10001eac:	10bfffcc 	andi	r2,r2,65535
10001eb0:	1000081e 	bne	r2,zero,10001ed4 <usb_initialize+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10001eb4:	d0a6d203 	ldbu	r2,-25784(gp)
10001eb8:	10800044 	addi	r2,r2,1
10001ebc:	d0a6d205 	stb	r2,-25784(gp)
10001ec0:	d0a6d203 	ldbu	r2,-25784(gp)
10001ec4:	10803fcc 	andi	r2,r2,255
10001ec8:	10800170 	cmpltui	r2,r2,5
10001ecc:	103fed1e 	bne	r2,zero,10001e84 <__alt_data_end+0xf8001e84>
10001ed0:	00000106 	br	10001ed8 <usb_initialize+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
10001ed4:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
10001ed8:	d0e6cf8b 	ldhu	r3,-25794(gp)
10001edc:	d0a6d08b 	ldhu	r2,-25790(gp)
10001ee0:	1884703a 	and	r2,r3,r2
10001ee4:	10bfffcc 	andi	r2,r2,65535
10001ee8:	1000261e 	bne	r2,zero,10001f84 <usb_initialize+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
10001eec:	01040074 	movhi	r4,4097
10001ef0:	21088604 	addi	r4,r4,8728
10001ef4:	0002cc00 	call	10002cc0 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10001ef8:	01040074 	movhi	r4,4097
10001efc:	21089004 	addi	r4,r4,8768
10001f00:	0002cc00 	call	10002cc0 <puts>
			while (!(usb_ctl_val & no_device))
10001f04:	00000d06 	br	10001f3c <usb_initialize+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10001f08:	d0a6d00b 	ldhu	r2,-25792(gp)
10001f0c:	10bfffcc 	andi	r2,r2,65535
10001f10:	1009883a 	mov	r4,r2
10001f14:	0000a900 	call	10000a90 <UsbRead>
10001f18:	d0a6cf8d 	sth	r2,-25794(gp)
				if(usb_ctl_val & no_device)
10001f1c:	d0e6cf8b 	ldhu	r3,-25794(gp)
10001f20:	d0a6d08b 	ldhu	r2,-25790(gp)
10001f24:	1884703a 	and	r2,r3,r2
10001f28:	10bfffcc 	andi	r2,r2,65535
10001f2c:	10000126 	beq	r2,zero,10001f34 <usb_initialize+0x388>
					goto USB_HOT_PLUG;
10001f30:	003f2606 	br	10001bcc <__alt_data_end+0xf8001bcc>

				usleep(2000);
10001f34:	0101f404 	movi	r4,2000
10001f38:	00101500 	call	10010150 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
10001f3c:	d0e6cf8b 	ldhu	r3,-25794(gp)
10001f40:	d0a6d08b 	ldhu	r2,-25790(gp)
10001f44:	1884703a 	and	r2,r3,r2
10001f48:	10bfffcc 	andi	r2,r2,65535
10001f4c:	103fee26 	beq	r2,zero,10001f08 <__alt_data_end+0xf8001f08>
10001f50:	00000c06 	br	10001f84 <usb_initialize+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
10001f54:	d0e6cf8b 	ldhu	r3,-25794(gp)
10001f58:	d0a6d10b 	ldhu	r2,-25788(gp)
10001f5c:	1884703a 	and	r2,r3,r2
10001f60:	10bfffcc 	andi	r2,r2,65535
10001f64:	10000426 	beq	r2,zero,10001f78 <usb_initialize+0x3cc>
		{
			printf("[INFO]: full speed device\n");
10001f68:	01040074 	movhi	r4,4097
10001f6c:	21089c04 	addi	r4,r4,8816
10001f70:	0002cc00 	call	10002cc0 <puts>
10001f74:	00000306 	br	10001f84 <usb_initialize+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
10001f78:	01040074 	movhi	r4,4097
10001f7c:	2108a304 	addi	r4,r4,8844
10001f80:	0002cc00 	call	10002cc0 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
10001f84:	0000b880 	call	10000b88 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001f88:	00000306 	br	10001f98 <usb_initialize+0x3ec>
	{
		UsbSetAddress();
10001f8c:	0000b880 	call	10000b88 <UsbSetAddress>
		usleep(10*1000);
10001f90:	0109c404 	movi	r4,10000
10001f94:	00101500 	call	10010150 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001f98:	010000c4 	movi	r4,3
10001f9c:	000044c0 	call	1000044c <IO_read>
10001fa0:	10bfffcc 	andi	r2,r2,65535
10001fa4:	1080040c 	andi	r2,r2,16
10001fa8:	103ff826 	beq	r2,zero,10001f8c <__alt_data_end+0xf8001f8c>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10001fac:	0001a280 	call	10001a28 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
10001fb0:	01414184 	movi	r5,1286
10001fb4:	01000084 	movi	r4,2
10001fb8:	00003d00 	call	100003d0 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
10001fbc:	0009883a 	mov	r4,zero
10001fc0:	000044c0 	call	1000044c <IO_read>
10001fc4:	10bfffcc 	andi	r2,r2,65535
10001fc8:	100b883a 	mov	r5,r2
10001fcc:	01040074 	movhi	r4,4097
10001fd0:	2108aa04 	addi	r4,r4,8872
10001fd4:	0002bc40 	call	10002bc4 <printf>

	IO_write(HPI_ADDR,0x0508); // n
10001fd8:	01414204 	movi	r5,1288
10001fdc:	01000084 	movi	r4,2
10001fe0:	00003d00 	call	100003d0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10001fe4:	0009883a 	mov	r4,zero
10001fe8:	000044c0 	call	1000044c <IO_read>
10001fec:	d0a6cf8d 	sth	r2,-25794(gp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
10001ff0:	d0a6cf8b 	ldhu	r2,-25794(gp)
10001ff4:	10bfffcc 	andi	r2,r2,65535
10001ff8:	100b883a 	mov	r5,r2
10001ffc:	01040074 	movhi	r4,4097
10002000:	2108b504 	addi	r4,r4,8916
10002004:	0002bc40 	call	10002bc4 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
10002008:	0001883a 	nop
1000200c:	d0a6cf8b 	ldhu	r2,-25794(gp)
10002010:	10bfffcc 	andi	r2,r2,65535
10002014:	108000d8 	cmpnei	r2,r2,3
10002018:	10000326 	beq	r2,zero,10002028 <usb_initialize+0x47c>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000201c:	0001aac0 	call	10001aac <UsbGetRetryCnt>
10002020:	d0a6cf8d 	sth	r2,-25794(gp)

		goto USB_HOT_PLUG;
10002024:	003ee906 	br	10001bcc <__alt_data_end+0xf8001bcc>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
10002028:	01040074 	movhi	r4,4097
1000202c:	2108c104 	addi	r4,r4,8964
10002030:	0002cc00 	call	10002cc0 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
10002034:	0000c880 	call	10000c88 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002038:	00000306 	br	10002048 <usb_initialize+0x49c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
1000203c:	0000c880 	call	10000c88 <UsbGetDeviceDesc1>
		usleep(10*1000);
10002040:	0109c404 	movi	r4,10000
10002044:	00101500 	call	10010150 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002048:	010000c4 	movi	r4,3
1000204c:	000044c0 	call	1000044c <IO_read>
10002050:	10bfffcc 	andi	r2,r2,65535
10002054:	1080040c 	andi	r2,r2,16
10002058:	103ff826 	beq	r2,zero,1000203c <__alt_data_end+0xf800203c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000205c:	0001a280 	call	10001a28 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10002060:	01414184 	movi	r5,1286
10002064:	01000084 	movi	r4,2
10002068:	00003d00 	call	100003d0 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000206c:	0009883a 	mov	r4,zero
10002070:	000044c0 	call	1000044c <IO_read>
10002074:	10bfffcc 	andi	r2,r2,65535
10002078:	100b883a 	mov	r5,r2
1000207c:	01040074 	movhi	r4,4097
10002080:	2108d004 	addi	r4,r4,9024
10002084:	0002bc40 	call	10002bc4 <printf>

	IO_write(HPI_ADDR,0x0508);
10002088:	01414204 	movi	r5,1288
1000208c:	01000084 	movi	r4,2
10002090:	00003d00 	call	100003d0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10002094:	0009883a 	mov	r4,zero
10002098:	000044c0 	call	1000044c <IO_read>
1000209c:	d0a6cf8d 	sth	r2,-25794(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100020a0:	d0a6cf8b 	ldhu	r2,-25794(gp)
100020a4:	10bfffcc 	andi	r2,r2,65535
100020a8:	100b883a 	mov	r5,r2
100020ac:	01040074 	movhi	r4,4097
100020b0:	2108db04 	addi	r4,r4,9068
100020b4:	0002bc40 	call	10002bc4 <printf>
	while (usb_ctl_val != 0x03)
100020b8:	00000206 	br	100020c4 <usb_initialize+0x518>
	{
		usb_ctl_val = UsbGetRetryCnt();
100020bc:	0001aac0 	call	10001aac <UsbGetRetryCnt>
100020c0:	d0a6cf8d 	sth	r2,-25794(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100020c4:	d0a6cf8b 	ldhu	r2,-25794(gp)
100020c8:	10bfffcc 	andi	r2,r2,65535
100020cc:	108000d8 	cmpnei	r2,r2,3
100020d0:	103ffa1e 	bne	r2,zero,100020bc <__alt_data_end+0xf80020bc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
100020d4:	01040074 	movhi	r4,4097
100020d8:	2108e704 	addi	r4,r4,9116
100020dc:	0002cc00 	call	10002cc0 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
100020e0:	0000dd00 	call	10000dd0 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100020e4:	00000306 	br	100020f4 <usb_initialize+0x548>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
100020e8:	0000dd00 	call	10000dd0 <UsbGetDeviceDesc2>
		usleep(10*1000);
100020ec:	0109c404 	movi	r4,10000
100020f0:	00101500 	call	10010150 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100020f4:	010000c4 	movi	r4,3
100020f8:	000044c0 	call	1000044c <IO_read>
100020fc:	10bfffcc 	andi	r2,r2,65535
10002100:	1080040c 	andi	r2,r2,16
10002104:	103ff826 	beq	r2,zero,100020e8 <__alt_data_end+0xf80020e8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10002108:	0001a280 	call	10001a28 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
1000210c:	01414184 	movi	r5,1286
10002110:	01000084 	movi	r4,2
10002114:	00003d00 	call	100003d0 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10002118:	0009883a 	mov	r4,zero
1000211c:	000044c0 	call	1000044c <IO_read>
10002120:	10bfffcc 	andi	r2,r2,65535
10002124:	100b883a 	mov	r5,r2
10002128:	01040074 	movhi	r4,4097
1000212c:	2108d004 	addi	r4,r4,9024
10002130:	0002bc40 	call	10002bc4 <printf>

	IO_write(HPI_ADDR,0x0508);
10002134:	01414204 	movi	r5,1288
10002138:	01000084 	movi	r4,2
1000213c:	00003d00 	call	100003d0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10002140:	0009883a 	mov	r4,zero
10002144:	000044c0 	call	1000044c <IO_read>
10002148:	d0a6cf8d 	sth	r2,-25794(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
1000214c:	d0a6cf8b 	ldhu	r2,-25794(gp)
10002150:	10bfffcc 	andi	r2,r2,65535
10002154:	100b883a 	mov	r5,r2
10002158:	01040074 	movhi	r4,4097
1000215c:	2108db04 	addi	r4,r4,9068
10002160:	0002bc40 	call	10002bc4 <printf>
	while (usb_ctl_val != 0x03)
10002164:	00000206 	br	10002170 <usb_initialize+0x5c4>
	{
		usb_ctl_val = UsbGetRetryCnt();
10002168:	0001aac0 	call	10001aac <UsbGetRetryCnt>
1000216c:	d0a6cf8d 	sth	r2,-25794(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10002170:	d0a6cf8b 	ldhu	r2,-25794(gp)
10002174:	10bfffcc 	andi	r2,r2,65535
10002178:	108000d8 	cmpnei	r2,r2,3
1000217c:	103ffa1e 	bne	r2,zero,10002168 <__alt_data_end+0xf8002168>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
10002180:	01040074 	movhi	r4,4097
10002184:	2108fb04 	addi	r4,r4,9196
10002188:	0002cc00 	call	10002cc0 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
1000218c:	0000fa80 	call	10000fa8 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002190:	00000306 	br	100021a0 <usb_initialize+0x5f4>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
10002194:	0000fa80 	call	10000fa8 <UsbGetConfigDesc1>
		usleep(10*1000);
10002198:	0109c404 	movi	r4,10000
1000219c:	00101500 	call	10010150 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100021a0:	010000c4 	movi	r4,3
100021a4:	000044c0 	call	1000044c <IO_read>
100021a8:	10bfffcc 	andi	r2,r2,65535
100021ac:	1080040c 	andi	r2,r2,16
100021b0:	103ff826 	beq	r2,zero,10002194 <__alt_data_end+0xf8002194>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100021b4:	0001a280 	call	10001a28 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100021b8:	01414184 	movi	r5,1286
100021bc:	01000084 	movi	r4,2
100021c0:	00003d00 	call	100003d0 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
100021c4:	0009883a 	mov	r4,zero
100021c8:	000044c0 	call	1000044c <IO_read>
100021cc:	10bfffcc 	andi	r2,r2,65535
100021d0:	100b883a 	mov	r5,r2
100021d4:	01040074 	movhi	r4,4097
100021d8:	21090d04 	addi	r4,r4,9268
100021dc:	0002bc40 	call	10002bc4 <printf>

	IO_write(HPI_ADDR,0x0508);
100021e0:	01414204 	movi	r5,1288
100021e4:	01000084 	movi	r4,2
100021e8:	00003d00 	call	100003d0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100021ec:	0009883a 	mov	r4,zero
100021f0:	000044c0 	call	1000044c <IO_read>
100021f4:	d0a6cf8d 	sth	r2,-25794(gp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
100021f8:	d0a6cf8b 	ldhu	r2,-25794(gp)
100021fc:	10bfffcc 	andi	r2,r2,65535
10002200:	100b883a 	mov	r5,r2
10002204:	01040074 	movhi	r4,4097
10002208:	21091804 	addi	r4,r4,9312
1000220c:	0002bc40 	call	10002bc4 <printf>
	while (usb_ctl_val != 0x03)
10002210:	00000206 	br	1000221c <usb_initialize+0x670>
	{
		usb_ctl_val = UsbGetRetryCnt();
10002214:	0001aac0 	call	10001aac <UsbGetRetryCnt>
10002218:	d0a6cf8d 	sth	r2,-25794(gp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
1000221c:	d0a6cf8b 	ldhu	r2,-25794(gp)
10002220:	10bfffcc 	andi	r2,r2,65535
10002224:	108000d8 	cmpnei	r2,r2,3
10002228:	103ffa1e 	bne	r2,zero,10002214 <__alt_data_end+0xf8002214>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
1000222c:	01040074 	movhi	r4,4097
10002230:	21092404 	addi	r4,r4,9360
10002234:	0002cc00 	call	10002cc0 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10002238:	00011380 	call	10001138 <UsbGetConfigDesc2>

	usleep(100*1000);
1000223c:	010000b4 	movhi	r4,2
10002240:	2121a804 	addi	r4,r4,-31072
10002244:	00101500 	call	10010150 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002248:	00000306 	br	10002258 <usb_initialize+0x6ac>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
1000224c:	00011380 	call	10001138 <UsbGetConfigDesc2>
		usleep(10*1000);
10002250:	0109c404 	movi	r4,10000
10002254:	00101500 	call	10010150 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002258:	010000c4 	movi	r4,3
1000225c:	000044c0 	call	1000044c <IO_read>
10002260:	10bfffcc 	andi	r2,r2,65535
10002264:	1080040c 	andi	r2,r2,16
10002268:	103ff826 	beq	r2,zero,1000224c <__alt_data_end+0xf800224c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000226c:	0001a280 	call	10001a28 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10002270:	01414184 	movi	r5,1286
10002274:	01000084 	movi	r4,2
10002278:	00003d00 	call	100003d0 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000227c:	0009883a 	mov	r4,zero
10002280:	000044c0 	call	1000044c <IO_read>
10002284:	10bfffcc 	andi	r2,r2,65535
10002288:	100b883a 	mov	r5,r2
1000228c:	01040074 	movhi	r4,4097
10002290:	21093704 	addi	r4,r4,9436
10002294:	0002bc40 	call	10002bc4 <printf>

	IO_write(HPI_ADDR,0x0508);
10002298:	01414204 	movi	r5,1288
1000229c:	01000084 	movi	r4,2
100022a0:	00003d00 	call	100003d0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100022a4:	0009883a 	mov	r4,zero
100022a8:	000044c0 	call	1000044c <IO_read>
100022ac:	d0a6cf8d 	sth	r2,-25794(gp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
100022b0:	d0a6cf8b 	ldhu	r2,-25794(gp)
100022b4:	10bfffcc 	andi	r2,r2,65535
100022b8:	100b883a 	mov	r5,r2
100022bc:	01040074 	movhi	r4,4097
100022c0:	21094204 	addi	r4,r4,9480
100022c4:	0002bc40 	call	10002bc4 <printf>
	while (usb_ctl_val != 0x03)
100022c8:	00000206 	br	100022d4 <usb_initialize+0x728>
	{
		usb_ctl_val = UsbGetRetryCnt();
100022cc:	0001aac0 	call	10001aac <UsbGetRetryCnt>
100022d0:	d0a6cf8d 	sth	r2,-25794(gp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100022d4:	d0a6cf8b 	ldhu	r2,-25794(gp)
100022d8:	10bfffcc 	andi	r2,r2,65535
100022dc:	108000d8 	cmpnei	r2,r2,3
100022e0:	103ffa1e 	bne	r2,zero,100022cc <__alt_data_end+0xf80022cc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
100022e4:	01040074 	movhi	r4,4097
100022e8:	21094e04 	addi	r4,r4,9528
100022ec:	0002cc00 	call	10002cc0 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
100022f0:	01415b04 	movi	r5,1388
100022f4:	01000084 	movi	r4,2
100022f8:	00003d00 	call	100003d0 <IO_write>
	code = IO_read(HPI_DATA);
100022fc:	0009883a 	mov	r4,zero
10002300:	000044c0 	call	1000044c <IO_read>
10002304:	d0a6d28d 	sth	r2,-25782(gp)
	code = code & 0x003;
10002308:	d0a6d28b 	ldhu	r2,-25782(gp)
1000230c:	108000cc 	andi	r2,r2,3
10002310:	d0a6d28d 	sth	r2,-25782(gp)
	printf("\ncode = %x\n", code);
10002314:	d0a6d28b 	ldhu	r2,-25782(gp)
10002318:	10bfffcc 	andi	r2,r2,65535
1000231c:	100b883a 	mov	r5,r2
10002320:	01040074 	movhi	r4,4097
10002324:	21096104 	addi	r4,r4,9604
10002328:	0002bc40 	call	10002bc4 <printf>

	if (code == 0x01)
1000232c:	d0a6d28b 	ldhu	r2,-25782(gp)
10002330:	10bfffcc 	andi	r2,r2,65535
10002334:	10800058 	cmpnei	r2,r2,1
10002338:	1000041e 	bne	r2,zero,1000234c <usb_initialize+0x7a0>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
1000233c:	01040074 	movhi	r4,4097
10002340:	21096404 	addi	r4,r4,9616
10002344:	0002cc00 	call	10002cc0 <puts>
10002348:	00000306 	br	10002358 <usb_initialize+0x7ac>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
1000234c:	01040074 	movhi	r4,4097
10002350:	21097304 	addi	r4,r4,9676
10002354:	0002cc00 	call	10002cc0 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10002358:	01415d84 	movi	r5,1398
1000235c:	01000084 	movi	r4,2
10002360:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x073F);
10002364:	0141cfc4 	movi	r5,1855
10002368:	0009883a 	mov	r4,zero
1000236c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x8105);
10002370:	01604154 	movui	r5,33029
10002374:	0009883a 	mov	r4,zero
10002378:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0003);
1000237c:	014000c4 	movi	r5,3
10002380:	0009883a 	mov	r4,zero
10002384:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0008);
10002388:	01400204 	movi	r5,8
1000238c:	0009883a 	mov	r4,zero
10002390:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10002394:	016b0294 	movui	r5,44042
10002398:	0009883a 	mov	r4,zero
1000239c:	00003d00 	call	100003d0 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
100023a0:	01415d84 	movi	r5,1398
100023a4:	01006c04 	movi	r4,432
100023a8:	0000a380 	call	10000a38 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
100023ac:	01415f04 	movi	r5,1404
100023b0:	01000084 	movi	r4,2
100023b4:	00003d00 	call	100003d0 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
100023b8:	0009883a 	mov	r4,zero
100023bc:	000044c0 	call	1000044c <IO_read>
100023c0:	d0a6d1c5 	stb	r2,-25785(gp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
100023c4:	d0a6d1c3 	ldbu	r2,-25785(gp)
100023c8:	10803fcc 	andi	r2,r2,255
100023cc:	100b883a 	mov	r5,r2
100023d0:	01040074 	movhi	r4,4097
100023d4:	21097c04 	addi	r4,r4,9712
100023d8:	0002bc40 	call	10002bc4 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
100023dc:	00013a00 	call	100013a0 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100023e0:	00000306 	br	100023f0 <usb_initialize+0x844>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
100023e4:	00013a00 	call	100013a0 <UsbSetConfig>
		usleep(10*1000);
100023e8:	0109c404 	movi	r4,10000
100023ec:	00101500 	call	10010150 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100023f0:	010000c4 	movi	r4,3
100023f4:	000044c0 	call	1000044c <IO_read>
100023f8:	10bfffcc 	andi	r2,r2,65535
100023fc:	1080040c 	andi	r2,r2,16
10002400:	103ff826 	beq	r2,zero,100023e4 <__alt_data_end+0xf80023e4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10002404:	0001a280 	call	10001a28 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10002408:	01414184 	movi	r5,1286
1000240c:	01000084 	movi	r4,2
10002410:	00003d00 	call	100003d0 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10002414:	0009883a 	mov	r4,zero
10002418:	000044c0 	call	1000044c <IO_read>
1000241c:	10bfffcc 	andi	r2,r2,65535
10002420:	100b883a 	mov	r5,r2
10002424:	01040074 	movhi	r4,4097
10002428:	21098604 	addi	r4,r4,9752
1000242c:	0002bc40 	call	10002bc4 <printf>

	IO_write(HPI_ADDR,0x0508);
10002430:	01414204 	movi	r5,1288
10002434:	01000084 	movi	r4,2
10002438:	00003d00 	call	100003d0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
1000243c:	0009883a 	mov	r4,zero
10002440:	000044c0 	call	1000044c <IO_read>
10002444:	d0a6cf8d 	sth	r2,-25794(gp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10002448:	d0a6cf8b 	ldhu	r2,-25794(gp)
1000244c:	10bfffcc 	andi	r2,r2,65535
10002450:	100b883a 	mov	r5,r2
10002454:	01040074 	movhi	r4,4097
10002458:	21099104 	addi	r4,r4,9796
1000245c:	0002bc40 	call	10002bc4 <printf>
	while (usb_ctl_val != 0x03)
10002460:	00000206 	br	1000246c <usb_initialize+0x8c0>
	{
		usb_ctl_val = UsbGetRetryCnt();
10002464:	0001aac0 	call	10001aac <UsbGetRetryCnt>
10002468:	d0a6cf8d 	sth	r2,-25794(gp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
1000246c:	d0a6cf8b 	ldhu	r2,-25794(gp)
10002470:	10bfffcc 	andi	r2,r2,65535
10002474:	108000d8 	cmpnei	r2,r2,3
10002478:	103ffa1e 	bne	r2,zero,10002464 <__alt_data_end+0xf8002464>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
1000247c:	01040074 	movhi	r4,4097
10002480:	21099d04 	addi	r4,r4,9844
10002484:	0002cc00 	call	10002cc0 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10002488:	00014a00 	call	100014a0 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000248c:	00000306 	br	1000249c <usb_initialize+0x8f0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10002490:	00014a00 	call	100014a0 <UsbClassRequest>
		usleep(10*1000);
10002494:	0109c404 	movi	r4,10000
10002498:	00101500 	call	10010150 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000249c:	010000c4 	movi	r4,3
100024a0:	000044c0 	call	1000044c <IO_read>
100024a4:	10bfffcc 	andi	r2,r2,65535
100024a8:	1080040c 	andi	r2,r2,16
100024ac:	103ff826 	beq	r2,zero,10002490 <__alt_data_end+0xf8002490>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100024b0:	0001a280 	call	10001a28 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100024b4:	01414184 	movi	r5,1286
100024b8:	01000084 	movi	r4,2
100024bc:	00003d00 	call	100003d0 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
100024c0:	0009883a 	mov	r4,zero
100024c4:	000044c0 	call	1000044c <IO_read>
100024c8:	10bfffcc 	andi	r2,r2,65535
100024cc:	100b883a 	mov	r5,r2
100024d0:	01040074 	movhi	r4,4097
100024d4:	2109af04 	addi	r4,r4,9916
100024d8:	0002bc40 	call	10002bc4 <printf>

	IO_write(HPI_ADDR,0x0508);
100024dc:	01414204 	movi	r5,1288
100024e0:	01000084 	movi	r4,2
100024e4:	00003d00 	call	100003d0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100024e8:	0009883a 	mov	r4,zero
100024ec:	000044c0 	call	1000044c <IO_read>
100024f0:	d0a6cf8d 	sth	r2,-25794(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
100024f4:	d0a6cf8b 	ldhu	r2,-25794(gp)
100024f8:	10bfffcc 	andi	r2,r2,65535
100024fc:	100b883a 	mov	r5,r2
10002500:	01040074 	movhi	r4,4097
10002504:	2109ba04 	addi	r4,r4,9960
10002508:	0002bc40 	call	10002bc4 <printf>
	while (usb_ctl_val != 0x03)
1000250c:	00000206 	br	10002518 <usb_initialize+0x96c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10002510:	0001aac0 	call	10001aac <UsbGetRetryCnt>
10002514:	d0a6cf8d 	sth	r2,-25794(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10002518:	d0a6cf8b 	ldhu	r2,-25794(gp)
1000251c:	10bfffcc 	andi	r2,r2,65535
10002520:	108000d8 	cmpnei	r2,r2,3
10002524:	103ffa1e 	bne	r2,zero,10002510 <__alt_data_end+0xf8002510>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10002528:	01040074 	movhi	r4,4097
1000252c:	2109c604 	addi	r4,r4,10008
10002530:	0002cc00 	call	10002cc0 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10002534:	00015a00 	call	100015a0 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002538:	00000306 	br	10002548 <usb_initialize+0x99c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
1000253c:	00015a00 	call	100015a0 <UsbGetHidDesc>
		usleep(10*1000);
10002540:	0109c404 	movi	r4,10000
10002544:	00101500 	call	10010150 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002548:	010000c4 	movi	r4,3
1000254c:	000044c0 	call	1000044c <IO_read>
10002550:	10bfffcc 	andi	r2,r2,65535
10002554:	1080040c 	andi	r2,r2,16
10002558:	103ff826 	beq	r2,zero,1000253c <__alt_data_end+0xf800253c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000255c:	0001a280 	call	10001a28 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10002560:	01414184 	movi	r5,1286
10002564:	01000084 	movi	r4,2
10002568:	00003d00 	call	100003d0 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000256c:	0009883a 	mov	r4,zero
10002570:	000044c0 	call	1000044c <IO_read>
10002574:	10bfffcc 	andi	r2,r2,65535
10002578:	100b883a 	mov	r5,r2
1000257c:	01040074 	movhi	r4,4097
10002580:	2109af04 	addi	r4,r4,9916
10002584:	0002bc40 	call	10002bc4 <printf>

	IO_write(HPI_ADDR,0x0508);
10002588:	01414204 	movi	r5,1288
1000258c:	01000084 	movi	r4,2
10002590:	00003d00 	call	100003d0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10002594:	0009883a 	mov	r4,zero
10002598:	000044c0 	call	1000044c <IO_read>
1000259c:	d0a6cf8d 	sth	r2,-25794(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
100025a0:	d0a6cf8b 	ldhu	r2,-25794(gp)
100025a4:	10bfffcc 	andi	r2,r2,65535
100025a8:	100b883a 	mov	r5,r2
100025ac:	01040074 	movhi	r4,4097
100025b0:	2109ba04 	addi	r4,r4,9960
100025b4:	0002bc40 	call	10002bc4 <printf>
	while (usb_ctl_val != 0x03)
100025b8:	00000206 	br	100025c4 <usb_initialize+0xa18>
	{
		usb_ctl_val = UsbGetRetryCnt();
100025bc:	0001aac0 	call	10001aac <UsbGetRetryCnt>
100025c0:	d0a6cf8d 	sth	r2,-25794(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100025c4:	d0a6cf8b 	ldhu	r2,-25794(gp)
100025c8:	10bfffcc 	andi	r2,r2,65535
100025cc:	108000d8 	cmpnei	r2,r2,3
100025d0:	103ffa1e 	bne	r2,zero,100025bc <__alt_data_end+0xf80025bc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
100025d4:	01040074 	movhi	r4,4097
100025d8:	2109d804 	addi	r4,r4,10080
100025dc:	0002cc00 	call	10002cc0 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
100025e0:	00016e80 	call	100016e8 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100025e4:	00000306 	br	100025f4 <usb_initialize+0xa48>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
100025e8:	00016e80 	call	100016e8 <UsbGetReportDesc>
		usleep(10*1000);
100025ec:	0109c404 	movi	r4,10000
100025f0:	00101500 	call	10010150 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100025f4:	010000c4 	movi	r4,3
100025f8:	000044c0 	call	1000044c <IO_read>
100025fc:	10bfffcc 	andi	r2,r2,65535
10002600:	1080040c 	andi	r2,r2,16
10002604:	103ff826 	beq	r2,zero,100025e8 <__alt_data_end+0xf80025e8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10002608:	0001a280 	call	10001a28 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
1000260c:	01414184 	movi	r5,1286
10002610:	01000084 	movi	r4,2
10002614:	00003d00 	call	100003d0 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10002618:	0009883a 	mov	r4,zero
1000261c:	000044c0 	call	1000044c <IO_read>
10002620:	10bfffcc 	andi	r2,r2,65535
10002624:	100b883a 	mov	r5,r2
10002628:	01040074 	movhi	r4,4097
1000262c:	2109ec04 	addi	r4,r4,10160
10002630:	0002bc40 	call	10002bc4 <printf>

	IO_write(HPI_ADDR,0x0508);
10002634:	01414204 	movi	r5,1288
10002638:	01000084 	movi	r4,2
1000263c:	00003d00 	call	100003d0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10002640:	0009883a 	mov	r4,zero
10002644:	000044c0 	call	1000044c <IO_read>
10002648:	d0a6cf8d 	sth	r2,-25794(gp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
1000264c:	d0a6cf8b 	ldhu	r2,-25794(gp)
10002650:	10bfffcc 	andi	r2,r2,65535
10002654:	100b883a 	mov	r5,r2
10002658:	01040074 	movhi	r4,4097
1000265c:	2109f804 	addi	r4,r4,10208
10002660:	0002bc40 	call	10002bc4 <printf>
	while (usb_ctl_val != 0x03)
10002664:	00000206 	br	10002670 <usb_initialize+0xac4>
	{
		usb_ctl_val = UsbGetRetryCnt();
10002668:	0001aac0 	call	10001aac <UsbGetRetryCnt>
1000266c:	d0a6cf8d 	sth	r2,-25794(gp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10002670:	d0a6cf8b 	ldhu	r2,-25794(gp)
10002674:	10bfffcc 	andi	r2,r2,65535
10002678:	108000d8 	cmpnei	r2,r2,3
1000267c:	103ffa1e 	bne	r2,zero,10002668 <__alt_data_end+0xf8002668>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10002680:	01040074 	movhi	r4,4097
10002684:	210a0404 	addi	r4,r4,10256
10002688:	0002cc00 	call	10002cc0 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	// usleep(10000);
}
1000268c:	0001883a 	nop
10002690:	e037883a 	mov	sp,fp
10002694:	dfc00117 	ldw	ra,4(sp)
10002698:	df000017 	ldw	fp,0(sp)
1000269c:	dec00204 	addi	sp,sp,8
100026a0:	f800283a 	ret

100026a4 <get_keycode_value>:


// Should be place in a while loop to keep fetching keycodes
int get_keycode_value() 
{
100026a4:	defffb04 	addi	sp,sp,-20
100026a8:	dfc00415 	stw	ra,16(sp)
100026ac:	df000315 	stw	fp,12(sp)
100026b0:	df000304 	addi	fp,sp,12
	int keycode0 = 0;
100026b4:	e03ffd15 	stw	zero,-12(fp)
	int keycode1 = 0;
100026b8:	e03ffe15 	stw	zero,-8(fp)
	int keycode = 0;
100026bc:	e03fff15 	stw	zero,-4(fp)

	toggle++;
100026c0:	d0a6d183 	ldbu	r2,-25786(gp)
100026c4:	10800044 	addi	r2,r2,1
100026c8:	d0a6d185 	stb	r2,-25786(gp)
	IO_write(HPI_ADDR,0x0500); //the start address
100026cc:	01414004 	movi	r5,1280
100026d0:	01000084 	movi	r4,2
100026d4:	00003d00 	call	100003d0 <IO_write>
	//data phase IN-1
	IO_write(HPI_DATA,0x051c); //500
100026d8:	01414704 	movi	r5,1308
100026dc:	0009883a 	mov	r4,zero
100026e0:	00003d00 	call	100003d0 <IO_write>

	IO_write(HPI_DATA,0x000f & data_size);//2 data length
100026e4:	d0a6d1c3 	ldbu	r2,-25785(gp)
100026e8:	10803fcc 	andi	r2,r2,255
100026ec:	108003cc 	andi	r2,r2,15
100026f0:	100b883a 	mov	r5,r2
100026f4:	0009883a 	mov	r4,zero
100026f8:	00003d00 	call	100003d0 <IO_write>

	IO_write(HPI_DATA,0x0291);//4 //endpoint 1
100026fc:	0140a444 	movi	r5,657
10002700:	0009883a 	mov	r4,zero
10002704:	00003d00 	call	100003d0 <IO_write>
	if(toggle%2)
10002708:	d0a6d183 	ldbu	r2,-25786(gp)
1000270c:	1080004c 	andi	r2,r2,1
10002710:	10803fcc 	andi	r2,r2,255
10002714:	10000426 	beq	r2,zero,10002728 <get_keycode_value+0x84>
	{
		IO_write(HPI_DATA,0x0001);//6 //data 1
10002718:	01400044 	movi	r5,1
1000271c:	0009883a 	mov	r4,zero
10002720:	00003d00 	call	100003d0 <IO_write>
10002724:	00000306 	br	10002734 <get_keycode_value+0x90>
	}
	else
	{
		IO_write(HPI_DATA,0x0041);//6 //data 1
10002728:	01401044 	movi	r5,65
1000272c:	0009883a 	mov	r4,zero
10002730:	00003d00 	call	100003d0 <IO_write>
	}
	IO_write(HPI_DATA,0x0013);//8
10002734:	014004c4 	movi	r5,19
10002738:	0009883a 	mov	r4,zero
1000273c:	00003d00 	call	100003d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10002740:	000b883a 	mov	r5,zero
10002744:	0009883a 	mov	r4,zero
10002748:	00003d00 	call	100003d0 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000274c:	01414004 	movi	r5,1280
10002750:	01006c04 	movi	r4,432
10002754:	0000a380 	call	10000a38 <UsbWrite>
	
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002758:	00002506 	br	100027f0 <get_keycode_value+0x14c>
	{
		IO_write(HPI_ADDR,0x0500); //the start address
1000275c:	01414004 	movi	r5,1280
10002760:	01000084 	movi	r4,2
10002764:	00003d00 	call	100003d0 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10002768:	01414704 	movi	r5,1308
1000276c:	0009883a 	mov	r4,zero
10002770:	00003d00 	call	100003d0 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10002774:	d0a6d1c3 	ldbu	r2,-25785(gp)
10002778:	10803fcc 	andi	r2,r2,255
1000277c:	108003cc 	andi	r2,r2,15
10002780:	100b883a 	mov	r5,r2
10002784:	0009883a 	mov	r4,zero
10002788:	00003d00 	call	100003d0 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
1000278c:	0140a444 	movi	r5,657
10002790:	0009883a 	mov	r4,zero
10002794:	00003d00 	call	100003d0 <IO_write>
		if(toggle%2)
10002798:	d0a6d183 	ldbu	r2,-25786(gp)
1000279c:	1080004c 	andi	r2,r2,1
100027a0:	10803fcc 	andi	r2,r2,255
100027a4:	10000426 	beq	r2,zero,100027b8 <get_keycode_value+0x114>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
100027a8:	01400044 	movi	r5,1
100027ac:	0009883a 	mov	r4,zero
100027b0:	00003d00 	call	100003d0 <IO_write>
100027b4:	00000306 	br	100027c4 <get_keycode_value+0x120>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
100027b8:	01401044 	movi	r5,65
100027bc:	0009883a 	mov	r4,zero
100027c0:	00003d00 	call	100003d0 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
100027c4:	014004c4 	movi	r5,19
100027c8:	0009883a 	mov	r4,zero
100027cc:	00003d00 	call	100003d0 <IO_write>
		IO_write(HPI_DATA,0x0000);//
100027d0:	000b883a 	mov	r5,zero
100027d4:	0009883a 	mov	r4,zero
100027d8:	00003d00 	call	100003d0 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100027dc:	01414004 	movi	r5,1280
100027e0:	01006c04 	movi	r4,432
100027e4:	0000a380 	call	10000a38 <UsbWrite>
		usleep(10*1000);
100027e8:	0109c404 	movi	r4,10000
100027ec:	00101500 	call	10010150 <usleep>
	}
	IO_write(HPI_DATA,0x0013);//8
	IO_write(HPI_DATA,0x0000);//a
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
	
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100027f0:	010000c4 	movi	r4,3
100027f4:	000044c0 	call	1000044c <IO_read>
100027f8:	10bfffcc 	andi	r2,r2,65535
100027fc:	1080040c 	andi	r2,r2,16
10002800:	103fd626 	beq	r2,zero,1000275c <__alt_data_end+0xf800275c>
		IO_write(HPI_DATA,0x0000);//
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		usleep(10*1000);
	}//end while

	usb_ctl_val = UsbWaitTDListDone();
10002804:	0001a280 	call	10001a28 <UsbWaitTDListDone>
10002808:	d0a6cf8d 	sth	r2,-25794(gp)

	// The first two keycodes are stored in 0x051E. Other keycodes are in 
	// subsequent addresses.
	keycode0 = UsbRead(0x051e);
1000280c:	01014784 	movi	r4,1310
10002810:	0000a900 	call	10000a90 <UsbRead>
10002814:	10bfffcc 	andi	r2,r2,65535
10002818:	e0bffd15 	stw	r2,-12(fp)
	keycode1 = UsbRead(0x0520);
1000281c:	01014804 	movi	r4,1312
10002820:	0000a900 	call	10000a90 <UsbRead>
10002824:	10bfffcc 	andi	r2,r2,65535
10002828:	e0bffe15 	stw	r2,-8(fp)
	keycode = keycode0 + (keycode1 << 8);
1000282c:	e0bffe17 	ldw	r2,-8(fp)
10002830:	1006923a 	slli	r3,r2,8
10002834:	e0bffd17 	ldw	r2,-12(fp)
10002838:	1885883a 	add	r2,r3,r2
1000283c:	e0bfff15 	stw	r2,-4(fp)
	printf("\nfirst two keycode values are %04x\n",keycode);
10002840:	e17fff17 	ldw	r5,-4(fp)
10002844:	01040074 	movhi	r4,4097
10002848:	210a1804 	addi	r4,r4,10336
1000284c:	0002bc40 	call	10002bc4 <printf>
	// We only need the first keycode, which is at the lower byte of keycode.
	// Send the keycode to hardware via PIO.
	*keycode_base = keycode & 0xffff;
10002850:	00803404 	movi	r2,208
10002854:	e0ffff17 	ldw	r3,-4(fp)
10002858:	10c00005 	stb	r3,0(r2)

	usleep(200);//usleep(5000);
1000285c:	01003204 	movi	r4,200
10002860:	00101500 	call	10010150 <usleep>
	usb_ctl_val = UsbRead(ctl_reg);
10002864:	d0a6d00b 	ldhu	r2,-25792(gp)
10002868:	10bfffcc 	andi	r2,r2,65535
1000286c:	1009883a 	mov	r4,r2
10002870:	0000a900 	call	10000a90 <UsbRead>
10002874:	d0a6cf8d 	sth	r2,-25794(gp)

	if(!(usb_ctl_val & no_device))
10002878:	d0e6cf8b 	ldhu	r3,-25794(gp)
1000287c:	d0a6d08b 	ldhu	r2,-25790(gp)
10002880:	1884703a 	and	r2,r3,r2
10002884:	10bfffcc 	andi	r2,r2,65535
10002888:	1000401e 	bne	r2,zero,1000298c <get_keycode_value+0x2e8>
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
1000288c:	d026d205 	stb	zero,-25784(gp)
10002890:	00000f06 	br	100028d0 <get_keycode_value+0x22c>
		{
			usleep(5*1000);
10002894:	0104e204 	movi	r4,5000
10002898:	00101500 	call	10010150 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
1000289c:	d0a6d00b 	ldhu	r2,-25792(gp)
100028a0:	10bfffcc 	andi	r2,r2,65535
100028a4:	1009883a 	mov	r4,r2
100028a8:	0000a900 	call	10000a90 <UsbRead>
100028ac:	d0a6cf8d 	sth	r2,-25794(gp)
			if(usb_ctl_val & no_device) break;
100028b0:	d0e6cf8b 	ldhu	r3,-25794(gp)
100028b4:	d0a6d08b 	ldhu	r2,-25790(gp)
100028b8:	1884703a 	and	r2,r3,r2
100028bc:	10bfffcc 	andi	r2,r2,65535
100028c0:	1000081e 	bne	r2,zero,100028e4 <get_keycode_value+0x240>
	usb_ctl_val = UsbRead(ctl_reg);

	if(!(usb_ctl_val & no_device))
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
100028c4:	d0a6d203 	ldbu	r2,-25784(gp)
100028c8:	10800044 	addi	r2,r2,1
100028cc:	d0a6d205 	stb	r2,-25784(gp)
100028d0:	d0a6d203 	ldbu	r2,-25784(gp)
100028d4:	10803fcc 	andi	r2,r2,255
100028d8:	108001f0 	cmpltui	r2,r2,7
100028dc:	103fed1e 	bne	r2,zero,10002894 <__alt_data_end+0xf8002894>
100028e0:	00000106 	br	100028e8 <get_keycode_value+0x244>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
100028e4:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
100028e8:	d0e6cf8b 	ldhu	r3,-25794(gp)
100028ec:	d0a6d08b 	ldhu	r2,-25790(gp)
100028f0:	1884703a 	and	r2,r3,r2
100028f4:	10bfffcc 	andi	r2,r2,65535
100028f8:	1000241e 	bne	r2,zero,1000298c <get_keycode_value+0x2e8>
		{
			printf("\n[INFO]: the keyboard has been removed!!! \n");
100028fc:	01040074 	movhi	r4,4097
10002900:	210a2104 	addi	r4,r4,10372
10002904:	0002cc00 	call	10002cc0 <puts>
			printf("[INFO]: please insert again!!! \n");
10002908:	01040074 	movhi	r4,4097
1000290c:	210a2c04 	addi	r4,r4,10416
10002910:	0002cc00 	call	10002cc0 <puts>
		}
	}

	while (!(usb_ctl_val & no_device))
10002914:	00001d06 	br	1000298c <get_keycode_value+0x2e8>
	{

		usb_ctl_val = UsbRead(ctl_reg);
10002918:	d0a6d00b 	ldhu	r2,-25792(gp)
1000291c:	10bfffcc 	andi	r2,r2,65535
10002920:	1009883a 	mov	r4,r2
10002924:	0000a900 	call	10000a90 <UsbRead>
10002928:	d0a6cf8d 	sth	r2,-25794(gp)
		usleep(5*1000);
1000292c:	0104e204 	movi	r4,5000
10002930:	00101500 	call	10010150 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10002934:	d0a6d00b 	ldhu	r2,-25792(gp)
10002938:	10bfffcc 	andi	r2,r2,65535
1000293c:	1009883a 	mov	r4,r2
10002940:	0000a900 	call	10000a90 <UsbRead>
10002944:	d0a6cf8d 	sth	r2,-25794(gp)
		usleep(5*1000);
10002948:	0104e204 	movi	r4,5000
1000294c:	00101500 	call	10010150 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10002950:	d0a6d00b 	ldhu	r2,-25792(gp)
10002954:	10bfffcc 	andi	r2,r2,65535
10002958:	1009883a 	mov	r4,r2
1000295c:	0000a900 	call	10000a90 <UsbRead>
10002960:	d0a6cf8d 	sth	r2,-25794(gp)
		usleep(5*1000);
10002964:	0104e204 	movi	r4,5000
10002968:	00101500 	call	10010150 <usleep>

		if(usb_ctl_val & no_device)
1000296c:	d0e6cf8b 	ldhu	r3,-25794(gp)
10002970:	d0a6d08b 	ldhu	r2,-25790(gp)
10002974:	1884703a 	and	r2,r3,r2
10002978:	10bfffcc 	andi	r2,r2,65535
1000297c:	10000126 	beq	r2,zero,10002984 <get_keycode_value+0x2e0>
			usb_initialize();
10002980:	0001bac0 	call	10001bac <usb_initialize>

		usleep(200);
10002984:	01003204 	movi	r4,200
10002988:	00101500 	call	10010150 <usleep>
			printf("\n[INFO]: the keyboard has been removed!!! \n");
			printf("[INFO]: please insert again!!! \n");
		}
	}

	while (!(usb_ctl_val & no_device))
1000298c:	d0e6cf8b 	ldhu	r3,-25794(gp)
10002990:	d0a6d08b 	ldhu	r2,-25790(gp)
10002994:	1884703a 	and	r2,r3,r2
10002998:	10bfffcc 	andi	r2,r2,65535
1000299c:	103fde26 	beq	r2,zero,10002918 <__alt_data_end+0xf8002918>
		if(usb_ctl_val & no_device)
			usb_initialize();

		usleep(200);
	}
	return keycode;
100029a0:	e0bfff17 	ldw	r2,-4(fp)
}
100029a4:	e037883a 	mov	sp,fp
100029a8:	dfc00117 	ldw	ra,4(sp)
100029ac:	df000017 	ldw	fp,0(sp)
100029b0:	dec00204 	addi	sp,sp,8
100029b4:	f800283a 	ret

100029b8 <__divsi3>:
100029b8:	20001b16 	blt	r4,zero,10002a28 <__divsi3+0x70>
100029bc:	000f883a 	mov	r7,zero
100029c0:	28001616 	blt	r5,zero,10002a1c <__divsi3+0x64>
100029c4:	200d883a 	mov	r6,r4
100029c8:	29001a2e 	bgeu	r5,r4,10002a34 <__divsi3+0x7c>
100029cc:	00800804 	movi	r2,32
100029d0:	00c00044 	movi	r3,1
100029d4:	00000106 	br	100029dc <__divsi3+0x24>
100029d8:	10000d26 	beq	r2,zero,10002a10 <__divsi3+0x58>
100029dc:	294b883a 	add	r5,r5,r5
100029e0:	10bfffc4 	addi	r2,r2,-1
100029e4:	18c7883a 	add	r3,r3,r3
100029e8:	293ffb36 	bltu	r5,r4,100029d8 <__alt_data_end+0xf80029d8>
100029ec:	0005883a 	mov	r2,zero
100029f0:	18000726 	beq	r3,zero,10002a10 <__divsi3+0x58>
100029f4:	0005883a 	mov	r2,zero
100029f8:	31400236 	bltu	r6,r5,10002a04 <__divsi3+0x4c>
100029fc:	314dc83a 	sub	r6,r6,r5
10002a00:	10c4b03a 	or	r2,r2,r3
10002a04:	1806d07a 	srli	r3,r3,1
10002a08:	280ad07a 	srli	r5,r5,1
10002a0c:	183ffa1e 	bne	r3,zero,100029f8 <__alt_data_end+0xf80029f8>
10002a10:	38000126 	beq	r7,zero,10002a18 <__divsi3+0x60>
10002a14:	0085c83a 	sub	r2,zero,r2
10002a18:	f800283a 	ret
10002a1c:	014bc83a 	sub	r5,zero,r5
10002a20:	39c0005c 	xori	r7,r7,1
10002a24:	003fe706 	br	100029c4 <__alt_data_end+0xf80029c4>
10002a28:	0109c83a 	sub	r4,zero,r4
10002a2c:	01c00044 	movi	r7,1
10002a30:	003fe306 	br	100029c0 <__alt_data_end+0xf80029c0>
10002a34:	00c00044 	movi	r3,1
10002a38:	003fee06 	br	100029f4 <__alt_data_end+0xf80029f4>

10002a3c <__modsi3>:
10002a3c:	20001716 	blt	r4,zero,10002a9c <__modsi3+0x60>
10002a40:	000f883a 	mov	r7,zero
10002a44:	2005883a 	mov	r2,r4
10002a48:	28001216 	blt	r5,zero,10002a94 <__modsi3+0x58>
10002a4c:	2900162e 	bgeu	r5,r4,10002aa8 <__modsi3+0x6c>
10002a50:	01800804 	movi	r6,32
10002a54:	00c00044 	movi	r3,1
10002a58:	00000106 	br	10002a60 <__modsi3+0x24>
10002a5c:	30000a26 	beq	r6,zero,10002a88 <__modsi3+0x4c>
10002a60:	294b883a 	add	r5,r5,r5
10002a64:	31bfffc4 	addi	r6,r6,-1
10002a68:	18c7883a 	add	r3,r3,r3
10002a6c:	293ffb36 	bltu	r5,r4,10002a5c <__alt_data_end+0xf8002a5c>
10002a70:	18000526 	beq	r3,zero,10002a88 <__modsi3+0x4c>
10002a74:	1806d07a 	srli	r3,r3,1
10002a78:	11400136 	bltu	r2,r5,10002a80 <__modsi3+0x44>
10002a7c:	1145c83a 	sub	r2,r2,r5
10002a80:	280ad07a 	srli	r5,r5,1
10002a84:	183ffb1e 	bne	r3,zero,10002a74 <__alt_data_end+0xf8002a74>
10002a88:	38000126 	beq	r7,zero,10002a90 <__modsi3+0x54>
10002a8c:	0085c83a 	sub	r2,zero,r2
10002a90:	f800283a 	ret
10002a94:	014bc83a 	sub	r5,zero,r5
10002a98:	003fec06 	br	10002a4c <__alt_data_end+0xf8002a4c>
10002a9c:	0109c83a 	sub	r4,zero,r4
10002aa0:	01c00044 	movi	r7,1
10002aa4:	003fe706 	br	10002a44 <__alt_data_end+0xf8002a44>
10002aa8:	00c00044 	movi	r3,1
10002aac:	003ff106 	br	10002a74 <__alt_data_end+0xf8002a74>

10002ab0 <__udivsi3>:
10002ab0:	200d883a 	mov	r6,r4
10002ab4:	2900152e 	bgeu	r5,r4,10002b0c <__udivsi3+0x5c>
10002ab8:	28001416 	blt	r5,zero,10002b0c <__udivsi3+0x5c>
10002abc:	00800804 	movi	r2,32
10002ac0:	00c00044 	movi	r3,1
10002ac4:	00000206 	br	10002ad0 <__udivsi3+0x20>
10002ac8:	10000e26 	beq	r2,zero,10002b04 <__udivsi3+0x54>
10002acc:	28000516 	blt	r5,zero,10002ae4 <__udivsi3+0x34>
10002ad0:	294b883a 	add	r5,r5,r5
10002ad4:	10bfffc4 	addi	r2,r2,-1
10002ad8:	18c7883a 	add	r3,r3,r3
10002adc:	293ffa36 	bltu	r5,r4,10002ac8 <__alt_data_end+0xf8002ac8>
10002ae0:	18000826 	beq	r3,zero,10002b04 <__udivsi3+0x54>
10002ae4:	0005883a 	mov	r2,zero
10002ae8:	31400236 	bltu	r6,r5,10002af4 <__udivsi3+0x44>
10002aec:	314dc83a 	sub	r6,r6,r5
10002af0:	10c4b03a 	or	r2,r2,r3
10002af4:	1806d07a 	srli	r3,r3,1
10002af8:	280ad07a 	srli	r5,r5,1
10002afc:	183ffa1e 	bne	r3,zero,10002ae8 <__alt_data_end+0xf8002ae8>
10002b00:	f800283a 	ret
10002b04:	0005883a 	mov	r2,zero
10002b08:	f800283a 	ret
10002b0c:	00c00044 	movi	r3,1
10002b10:	003ff406 	br	10002ae4 <__alt_data_end+0xf8002ae4>

10002b14 <__umodsi3>:
10002b14:	2005883a 	mov	r2,r4
10002b18:	2900122e 	bgeu	r5,r4,10002b64 <__umodsi3+0x50>
10002b1c:	28001116 	blt	r5,zero,10002b64 <__umodsi3+0x50>
10002b20:	01800804 	movi	r6,32
10002b24:	00c00044 	movi	r3,1
10002b28:	00000206 	br	10002b34 <__umodsi3+0x20>
10002b2c:	30000c26 	beq	r6,zero,10002b60 <__umodsi3+0x4c>
10002b30:	28000516 	blt	r5,zero,10002b48 <__umodsi3+0x34>
10002b34:	294b883a 	add	r5,r5,r5
10002b38:	31bfffc4 	addi	r6,r6,-1
10002b3c:	18c7883a 	add	r3,r3,r3
10002b40:	293ffa36 	bltu	r5,r4,10002b2c <__alt_data_end+0xf8002b2c>
10002b44:	18000626 	beq	r3,zero,10002b60 <__umodsi3+0x4c>
10002b48:	1806d07a 	srli	r3,r3,1
10002b4c:	11400136 	bltu	r2,r5,10002b54 <__umodsi3+0x40>
10002b50:	1145c83a 	sub	r2,r2,r5
10002b54:	280ad07a 	srli	r5,r5,1
10002b58:	183ffb1e 	bne	r3,zero,10002b48 <__alt_data_end+0xf8002b48>
10002b5c:	f800283a 	ret
10002b60:	f800283a 	ret
10002b64:	00c00044 	movi	r3,1
10002b68:	003ff706 	br	10002b48 <__alt_data_end+0xf8002b48>

10002b6c <__mulsi3>:
10002b6c:	0005883a 	mov	r2,zero
10002b70:	20000726 	beq	r4,zero,10002b90 <__mulsi3+0x24>
10002b74:	20c0004c 	andi	r3,r4,1
10002b78:	2008d07a 	srli	r4,r4,1
10002b7c:	18000126 	beq	r3,zero,10002b84 <__mulsi3+0x18>
10002b80:	1145883a 	add	r2,r2,r5
10002b84:	294b883a 	add	r5,r5,r5
10002b88:	203ffa1e 	bne	r4,zero,10002b74 <__alt_data_end+0xf8002b74>
10002b8c:	f800283a 	ret
10002b90:	f800283a 	ret

10002b94 <_printf_r>:
10002b94:	defffd04 	addi	sp,sp,-12
10002b98:	2805883a 	mov	r2,r5
10002b9c:	dfc00015 	stw	ra,0(sp)
10002ba0:	d9800115 	stw	r6,4(sp)
10002ba4:	d9c00215 	stw	r7,8(sp)
10002ba8:	21400217 	ldw	r5,8(r4)
10002bac:	d9c00104 	addi	r7,sp,4
10002bb0:	100d883a 	mov	r6,r2
10002bb4:	0002d6c0 	call	10002d6c <___vfprintf_internal_r>
10002bb8:	dfc00017 	ldw	ra,0(sp)
10002bbc:	dec00304 	addi	sp,sp,12
10002bc0:	f800283a 	ret

10002bc4 <printf>:
10002bc4:	defffc04 	addi	sp,sp,-16
10002bc8:	dfc00015 	stw	ra,0(sp)
10002bcc:	d9400115 	stw	r5,4(sp)
10002bd0:	d9800215 	stw	r6,8(sp)
10002bd4:	d9c00315 	stw	r7,12(sp)
10002bd8:	00840074 	movhi	r2,4097
10002bdc:	1091a004 	addi	r2,r2,18048
10002be0:	10800017 	ldw	r2,0(r2)
10002be4:	200b883a 	mov	r5,r4
10002be8:	d9800104 	addi	r6,sp,4
10002bec:	11000217 	ldw	r4,8(r2)
10002bf0:	00050480 	call	10005048 <__vfprintf_internal>
10002bf4:	dfc00017 	ldw	ra,0(sp)
10002bf8:	dec00404 	addi	sp,sp,16
10002bfc:	f800283a 	ret

10002c00 <_puts_r>:
10002c00:	defff604 	addi	sp,sp,-40
10002c04:	dc000715 	stw	r16,28(sp)
10002c08:	2021883a 	mov	r16,r4
10002c0c:	2809883a 	mov	r4,r5
10002c10:	dc400815 	stw	r17,32(sp)
10002c14:	dfc00915 	stw	ra,36(sp)
10002c18:	2823883a 	mov	r17,r5
10002c1c:	0002cd40 	call	10002cd4 <strlen>
10002c20:	10c00044 	addi	r3,r2,1
10002c24:	d8800115 	stw	r2,4(sp)
10002c28:	00840074 	movhi	r2,4097
10002c2c:	108a3404 	addi	r2,r2,10448
10002c30:	d8800215 	stw	r2,8(sp)
10002c34:	00800044 	movi	r2,1
10002c38:	d8800315 	stw	r2,12(sp)
10002c3c:	00800084 	movi	r2,2
10002c40:	dc400015 	stw	r17,0(sp)
10002c44:	d8c00615 	stw	r3,24(sp)
10002c48:	dec00415 	stw	sp,16(sp)
10002c4c:	d8800515 	stw	r2,20(sp)
10002c50:	80000226 	beq	r16,zero,10002c5c <_puts_r+0x5c>
10002c54:	80800e17 	ldw	r2,56(r16)
10002c58:	10001426 	beq	r2,zero,10002cac <_puts_r+0xac>
10002c5c:	81400217 	ldw	r5,8(r16)
10002c60:	2880030b 	ldhu	r2,12(r5)
10002c64:	10c8000c 	andi	r3,r2,8192
10002c68:	1800061e 	bne	r3,zero,10002c84 <_puts_r+0x84>
10002c6c:	29001917 	ldw	r4,100(r5)
10002c70:	00f7ffc4 	movi	r3,-8193
10002c74:	10880014 	ori	r2,r2,8192
10002c78:	20c6703a 	and	r3,r4,r3
10002c7c:	2880030d 	sth	r2,12(r5)
10002c80:	28c01915 	stw	r3,100(r5)
10002c84:	d9800404 	addi	r6,sp,16
10002c88:	8009883a 	mov	r4,r16
10002c8c:	00075b00 	call	100075b0 <__sfvwrite_r>
10002c90:	1000091e 	bne	r2,zero,10002cb8 <_puts_r+0xb8>
10002c94:	00800284 	movi	r2,10
10002c98:	dfc00917 	ldw	ra,36(sp)
10002c9c:	dc400817 	ldw	r17,32(sp)
10002ca0:	dc000717 	ldw	r16,28(sp)
10002ca4:	dec00a04 	addi	sp,sp,40
10002ca8:	f800283a 	ret
10002cac:	8009883a 	mov	r4,r16
10002cb0:	000712c0 	call	1000712c <__sinit>
10002cb4:	003fe906 	br	10002c5c <__alt_data_end+0xf8002c5c>
10002cb8:	00bfffc4 	movi	r2,-1
10002cbc:	003ff606 	br	10002c98 <__alt_data_end+0xf8002c98>

10002cc0 <puts>:
10002cc0:	00840074 	movhi	r2,4097
10002cc4:	1091a004 	addi	r2,r2,18048
10002cc8:	200b883a 	mov	r5,r4
10002ccc:	11000017 	ldw	r4,0(r2)
10002cd0:	0002c001 	jmpi	10002c00 <_puts_r>

10002cd4 <strlen>:
10002cd4:	208000cc 	andi	r2,r4,3
10002cd8:	10002026 	beq	r2,zero,10002d5c <strlen+0x88>
10002cdc:	20800007 	ldb	r2,0(r4)
10002ce0:	10002026 	beq	r2,zero,10002d64 <strlen+0x90>
10002ce4:	2005883a 	mov	r2,r4
10002ce8:	00000206 	br	10002cf4 <strlen+0x20>
10002cec:	10c00007 	ldb	r3,0(r2)
10002cf0:	18001826 	beq	r3,zero,10002d54 <strlen+0x80>
10002cf4:	10800044 	addi	r2,r2,1
10002cf8:	10c000cc 	andi	r3,r2,3
10002cfc:	183ffb1e 	bne	r3,zero,10002cec <__alt_data_end+0xf8002cec>
10002d00:	10c00017 	ldw	r3,0(r2)
10002d04:	01ffbff4 	movhi	r7,65279
10002d08:	39ffbfc4 	addi	r7,r7,-257
10002d0c:	00ca303a 	nor	r5,zero,r3
10002d10:	01a02074 	movhi	r6,32897
10002d14:	19c7883a 	add	r3,r3,r7
10002d18:	31a02004 	addi	r6,r6,-32640
10002d1c:	1946703a 	and	r3,r3,r5
10002d20:	1986703a 	and	r3,r3,r6
10002d24:	1800091e 	bne	r3,zero,10002d4c <strlen+0x78>
10002d28:	10800104 	addi	r2,r2,4
10002d2c:	10c00017 	ldw	r3,0(r2)
10002d30:	19cb883a 	add	r5,r3,r7
10002d34:	00c6303a 	nor	r3,zero,r3
10002d38:	28c6703a 	and	r3,r5,r3
10002d3c:	1986703a 	and	r3,r3,r6
10002d40:	183ff926 	beq	r3,zero,10002d28 <__alt_data_end+0xf8002d28>
10002d44:	00000106 	br	10002d4c <strlen+0x78>
10002d48:	10800044 	addi	r2,r2,1
10002d4c:	10c00007 	ldb	r3,0(r2)
10002d50:	183ffd1e 	bne	r3,zero,10002d48 <__alt_data_end+0xf8002d48>
10002d54:	1105c83a 	sub	r2,r2,r4
10002d58:	f800283a 	ret
10002d5c:	2005883a 	mov	r2,r4
10002d60:	003fe706 	br	10002d00 <__alt_data_end+0xf8002d00>
10002d64:	0005883a 	mov	r2,zero
10002d68:	f800283a 	ret

10002d6c <___vfprintf_internal_r>:
10002d6c:	deffb804 	addi	sp,sp,-288
10002d70:	dfc04715 	stw	ra,284(sp)
10002d74:	ddc04515 	stw	r23,276(sp)
10002d78:	dd404315 	stw	r21,268(sp)
10002d7c:	d9002d15 	stw	r4,180(sp)
10002d80:	282f883a 	mov	r23,r5
10002d84:	302b883a 	mov	r21,r6
10002d88:	d9c02e15 	stw	r7,184(sp)
10002d8c:	df004615 	stw	fp,280(sp)
10002d90:	dd804415 	stw	r22,272(sp)
10002d94:	dd004215 	stw	r20,264(sp)
10002d98:	dcc04115 	stw	r19,260(sp)
10002d9c:	dc804015 	stw	r18,256(sp)
10002da0:	dc403f15 	stw	r17,252(sp)
10002da4:	dc003e15 	stw	r16,248(sp)
10002da8:	0007cac0 	call	10007cac <_localeconv_r>
10002dac:	10800017 	ldw	r2,0(r2)
10002db0:	1009883a 	mov	r4,r2
10002db4:	d8803415 	stw	r2,208(sp)
10002db8:	0002cd40 	call	10002cd4 <strlen>
10002dbc:	d8803715 	stw	r2,220(sp)
10002dc0:	d8802d17 	ldw	r2,180(sp)
10002dc4:	10000226 	beq	r2,zero,10002dd0 <___vfprintf_internal_r+0x64>
10002dc8:	10800e17 	ldw	r2,56(r2)
10002dcc:	1000fb26 	beq	r2,zero,100031bc <___vfprintf_internal_r+0x450>
10002dd0:	b880030b 	ldhu	r2,12(r23)
10002dd4:	10c8000c 	andi	r3,r2,8192
10002dd8:	1800061e 	bne	r3,zero,10002df4 <___vfprintf_internal_r+0x88>
10002ddc:	b9001917 	ldw	r4,100(r23)
10002de0:	00f7ffc4 	movi	r3,-8193
10002de4:	10880014 	ori	r2,r2,8192
10002de8:	20c6703a 	and	r3,r4,r3
10002dec:	b880030d 	sth	r2,12(r23)
10002df0:	b8c01915 	stw	r3,100(r23)
10002df4:	10c0020c 	andi	r3,r2,8
10002df8:	1800c326 	beq	r3,zero,10003108 <___vfprintf_internal_r+0x39c>
10002dfc:	b8c00417 	ldw	r3,16(r23)
10002e00:	1800c126 	beq	r3,zero,10003108 <___vfprintf_internal_r+0x39c>
10002e04:	1080068c 	andi	r2,r2,26
10002e08:	00c00284 	movi	r3,10
10002e0c:	10c0c626 	beq	r2,r3,10003128 <___vfprintf_internal_r+0x3bc>
10002e10:	d8c00404 	addi	r3,sp,16
10002e14:	05040074 	movhi	r20,4097
10002e18:	d9001e04 	addi	r4,sp,120
10002e1c:	a50a4584 	addi	r20,r20,10518
10002e20:	d8c01e15 	stw	r3,120(sp)
10002e24:	d8002015 	stw	zero,128(sp)
10002e28:	d8001f15 	stw	zero,124(sp)
10002e2c:	d8003315 	stw	zero,204(sp)
10002e30:	d8003615 	stw	zero,216(sp)
10002e34:	d8003815 	stw	zero,224(sp)
10002e38:	1811883a 	mov	r8,r3
10002e3c:	d8003915 	stw	zero,228(sp)
10002e40:	d8003a15 	stw	zero,232(sp)
10002e44:	d8002f15 	stw	zero,188(sp)
10002e48:	d9002815 	stw	r4,160(sp)
10002e4c:	a8800007 	ldb	r2,0(r21)
10002e50:	10028b26 	beq	r2,zero,10003880 <___vfprintf_internal_r+0xb14>
10002e54:	00c00944 	movi	r3,37
10002e58:	a823883a 	mov	r17,r21
10002e5c:	10c0021e 	bne	r2,r3,10002e68 <___vfprintf_internal_r+0xfc>
10002e60:	00001406 	br	10002eb4 <___vfprintf_internal_r+0x148>
10002e64:	10c00326 	beq	r2,r3,10002e74 <___vfprintf_internal_r+0x108>
10002e68:	8c400044 	addi	r17,r17,1
10002e6c:	88800007 	ldb	r2,0(r17)
10002e70:	103ffc1e 	bne	r2,zero,10002e64 <__alt_data_end+0xf8002e64>
10002e74:	8d61c83a 	sub	r16,r17,r21
10002e78:	80000e26 	beq	r16,zero,10002eb4 <___vfprintf_internal_r+0x148>
10002e7c:	d8c02017 	ldw	r3,128(sp)
10002e80:	d8801f17 	ldw	r2,124(sp)
10002e84:	45400015 	stw	r21,0(r8)
10002e88:	1c07883a 	add	r3,r3,r16
10002e8c:	10800044 	addi	r2,r2,1
10002e90:	d8c02015 	stw	r3,128(sp)
10002e94:	44000115 	stw	r16,4(r8)
10002e98:	d8801f15 	stw	r2,124(sp)
10002e9c:	00c001c4 	movi	r3,7
10002ea0:	1880a916 	blt	r3,r2,10003148 <___vfprintf_internal_r+0x3dc>
10002ea4:	42000204 	addi	r8,r8,8
10002ea8:	d9402f17 	ldw	r5,188(sp)
10002eac:	2c0b883a 	add	r5,r5,r16
10002eb0:	d9402f15 	stw	r5,188(sp)
10002eb4:	88800007 	ldb	r2,0(r17)
10002eb8:	1000aa26 	beq	r2,zero,10003164 <___vfprintf_internal_r+0x3f8>
10002ebc:	8d400044 	addi	r21,r17,1
10002ec0:	8c400047 	ldb	r17,1(r17)
10002ec4:	0021883a 	mov	r16,zero
10002ec8:	00bfffc4 	movi	r2,-1
10002ecc:	0025883a 	mov	r18,zero
10002ed0:	dc002905 	stb	r16,164(sp)
10002ed4:	d8002785 	stb	zero,158(sp)
10002ed8:	d8002b05 	stb	zero,172(sp)
10002edc:	d8802a15 	stw	r2,168(sp)
10002ee0:	d8003115 	stw	zero,196(sp)
10002ee4:	04c01604 	movi	r19,88
10002ee8:	05800244 	movi	r22,9
10002eec:	9021883a 	mov	r16,r18
10002ef0:	4039883a 	mov	fp,r8
10002ef4:	ad400044 	addi	r21,r21,1
10002ef8:	88bff804 	addi	r2,r17,-32
10002efc:	98833236 	bltu	r19,r2,10003bc8 <___vfprintf_internal_r+0xe5c>
10002f00:	100490ba 	slli	r2,r2,2
10002f04:	00c40034 	movhi	r3,4096
10002f08:	18cbc604 	addi	r3,r3,12056
10002f0c:	10c5883a 	add	r2,r2,r3
10002f10:	10800017 	ldw	r2,0(r2)
10002f14:	1000683a 	jmp	r2
10002f18:	10003ac0 	call	110003ac <_gp+0xfe3d30>
10002f1c:	10003bc8 	cmpgei	zero,r2,239
10002f20:	10003bc8 	cmpgei	zero,r2,239
10002f24:	10003ae0 	cmpeqi	zero,r2,235
10002f28:	10003bc8 	cmpgei	zero,r2,239
10002f2c:	10003bc8 	cmpgei	zero,r2,239
10002f30:	10003bc8 	cmpgei	zero,r2,239
10002f34:	10003bc8 	cmpgei	zero,r2,239
10002f38:	10003bc8 	cmpgei	zero,r2,239
10002f3c:	10003bc8 	cmpgei	zero,r2,239
10002f40:	100031c8 	cmpgei	zero,r2,199
10002f44:	100039d0 	cmplti	zero,r2,231
10002f48:	10003bc8 	cmpgei	zero,r2,239
10002f4c:	1000308c 	andi	zero,r2,194
10002f50:	100031ec 	andhi	zero,r2,199
10002f54:	10003bc8 	cmpgei	zero,r2,239
10002f58:	1000323c 	xorhi	zero,r2,200
10002f5c:	10003248 	cmpgei	zero,r2,201
10002f60:	10003248 	cmpgei	zero,r2,201
10002f64:	10003248 	cmpgei	zero,r2,201
10002f68:	10003248 	cmpgei	zero,r2,201
10002f6c:	10003248 	cmpgei	zero,r2,201
10002f70:	10003248 	cmpgei	zero,r2,201
10002f74:	10003248 	cmpgei	zero,r2,201
10002f78:	10003248 	cmpgei	zero,r2,201
10002f7c:	10003248 	cmpgei	zero,r2,201
10002f80:	10003bc8 	cmpgei	zero,r2,239
10002f84:	10003bc8 	cmpgei	zero,r2,239
10002f88:	10003bc8 	cmpgei	zero,r2,239
10002f8c:	10003bc8 	cmpgei	zero,r2,239
10002f90:	10003bc8 	cmpgei	zero,r2,239
10002f94:	10003bc8 	cmpgei	zero,r2,239
10002f98:	10003bc8 	cmpgei	zero,r2,239
10002f9c:	10003bc8 	cmpgei	zero,r2,239
10002fa0:	10003bc8 	cmpgei	zero,r2,239
10002fa4:	10003bc8 	cmpgei	zero,r2,239
10002fa8:	10003284 	addi	zero,r2,202
10002fac:	1000334c 	andi	zero,r2,205
10002fb0:	10003bc8 	cmpgei	zero,r2,239
10002fb4:	1000334c 	andi	zero,r2,205
10002fb8:	10003bc8 	cmpgei	zero,r2,239
10002fbc:	10003bc8 	cmpgei	zero,r2,239
10002fc0:	10003bc8 	cmpgei	zero,r2,239
10002fc4:	10003bc8 	cmpgei	zero,r2,239
10002fc8:	100033f8 	rdprs	zero,r2,207
10002fcc:	10003bc8 	cmpgei	zero,r2,239
10002fd0:	10003bc8 	cmpgei	zero,r2,239
10002fd4:	10003404 	addi	zero,r2,208
10002fd8:	10003bc8 	cmpgei	zero,r2,239
10002fdc:	10003bc8 	cmpgei	zero,r2,239
10002fe0:	10003bc8 	cmpgei	zero,r2,239
10002fe4:	10003bc8 	cmpgei	zero,r2,239
10002fe8:	10003bc8 	cmpgei	zero,r2,239
10002fec:	10003888 	cmpgei	zero,r2,226
10002ff0:	10003bc8 	cmpgei	zero,r2,239
10002ff4:	10003bc8 	cmpgei	zero,r2,239
10002ff8:	100038f4 	orhi	zero,r2,227
10002ffc:	10003bc8 	cmpgei	zero,r2,239
10003000:	10003bc8 	cmpgei	zero,r2,239
10003004:	10003bc8 	cmpgei	zero,r2,239
10003008:	10003bc8 	cmpgei	zero,r2,239
1000300c:	10003bc8 	cmpgei	zero,r2,239
10003010:	10003bc8 	cmpgei	zero,r2,239
10003014:	10003bc8 	cmpgei	zero,r2,239
10003018:	10003bc8 	cmpgei	zero,r2,239
1000301c:	10003bc8 	cmpgei	zero,r2,239
10003020:	10003bc8 	cmpgei	zero,r2,239
10003024:	10003b6c 	andhi	zero,r2,237
10003028:	10003aec 	andhi	zero,r2,235
1000302c:	1000334c 	andi	zero,r2,205
10003030:	1000334c 	andi	zero,r2,205
10003034:	1000334c 	andi	zero,r2,205
10003038:	10003b0c 	andi	zero,r2,236
1000303c:	10003aec 	andhi	zero,r2,235
10003040:	10003bc8 	cmpgei	zero,r2,239
10003044:	10003bc8 	cmpgei	zero,r2,239
10003048:	10003b18 	cmpnei	zero,r2,236
1000304c:	10003bc8 	cmpgei	zero,r2,239
10003050:	10003b2c 	andhi	zero,r2,236
10003054:	100039b0 	cmpltui	zero,r2,230
10003058:	10003098 	cmpnei	zero,r2,194
1000305c:	100039e8 	cmpgeui	zero,r2,231
10003060:	10003bc8 	cmpgei	zero,r2,239
10003064:	100039f4 	orhi	zero,r2,231
10003068:	10003bc8 	cmpgei	zero,r2,239
1000306c:	10003a58 	cmpnei	zero,r2,233
10003070:	10003bc8 	cmpgei	zero,r2,239
10003074:	10003bc8 	cmpgei	zero,r2,239
10003078:	10003a78 	rdprs	zero,r2,233
1000307c:	d8c03117 	ldw	r3,196(sp)
10003080:	d8802e15 	stw	r2,184(sp)
10003084:	00c7c83a 	sub	r3,zero,r3
10003088:	d8c03115 	stw	r3,196(sp)
1000308c:	84000114 	ori	r16,r16,4
10003090:	ac400007 	ldb	r17,0(r21)
10003094:	003f9706 	br	10002ef4 <__alt_data_end+0xf8002ef4>
10003098:	00800c04 	movi	r2,48
1000309c:	d8802705 	stb	r2,156(sp)
100030a0:	00801e04 	movi	r2,120
100030a4:	d8802745 	stb	r2,157(sp)
100030a8:	d9002a17 	ldw	r4,168(sp)
100030ac:	d8802e17 	ldw	r2,184(sp)
100030b0:	d8002785 	stb	zero,158(sp)
100030b4:	e011883a 	mov	r8,fp
100030b8:	10c00104 	addi	r3,r2,4
100030bc:	14c00017 	ldw	r19,0(r2)
100030c0:	002d883a 	mov	r22,zero
100030c4:	80800094 	ori	r2,r16,2
100030c8:	2002ca16 	blt	r4,zero,10003bf4 <___vfprintf_internal_r+0xe88>
100030cc:	00bfdfc4 	movi	r2,-129
100030d0:	80a4703a 	and	r18,r16,r2
100030d4:	d8c02e15 	stw	r3,184(sp)
100030d8:	94800094 	ori	r18,r18,2
100030dc:	9802b41e 	bne	r19,zero,10003bb0 <___vfprintf_internal_r+0xe44>
100030e0:	01440074 	movhi	r5,4097
100030e4:	294a3e04 	addi	r5,r5,10488
100030e8:	d9403915 	stw	r5,228(sp)
100030ec:	04401e04 	movi	r17,120
100030f0:	d8802a17 	ldw	r2,168(sp)
100030f4:	0039883a 	mov	fp,zero
100030f8:	1001fa26 	beq	r2,zero,100038e4 <___vfprintf_internal_r+0xb78>
100030fc:	0027883a 	mov	r19,zero
10003100:	002d883a 	mov	r22,zero
10003104:	00021906 	br	1000396c <___vfprintf_internal_r+0xc00>
10003108:	d9002d17 	ldw	r4,180(sp)
1000310c:	b80b883a 	mov	r5,r23
10003110:	00051200 	call	10005120 <__swsetup_r>
10003114:	1005dc1e 	bne	r2,zero,10004888 <___vfprintf_internal_r+0x1b1c>
10003118:	b880030b 	ldhu	r2,12(r23)
1000311c:	00c00284 	movi	r3,10
10003120:	1080068c 	andi	r2,r2,26
10003124:	10ff3a1e 	bne	r2,r3,10002e10 <__alt_data_end+0xf8002e10>
10003128:	b880038f 	ldh	r2,14(r23)
1000312c:	103f3816 	blt	r2,zero,10002e10 <__alt_data_end+0xf8002e10>
10003130:	d9c02e17 	ldw	r7,184(sp)
10003134:	d9002d17 	ldw	r4,180(sp)
10003138:	a80d883a 	mov	r6,r21
1000313c:	b80b883a 	mov	r5,r23
10003140:	00050640 	call	10005064 <__sbprintf>
10003144:	00001106 	br	1000318c <___vfprintf_internal_r+0x420>
10003148:	d9002d17 	ldw	r4,180(sp)
1000314c:	d9801e04 	addi	r6,sp,120
10003150:	b80b883a 	mov	r5,r23
10003154:	000a54c0 	call	1000a54c <__sprint_r>
10003158:	1000081e 	bne	r2,zero,1000317c <___vfprintf_internal_r+0x410>
1000315c:	da000404 	addi	r8,sp,16
10003160:	003f5106 	br	10002ea8 <__alt_data_end+0xf8002ea8>
10003164:	d8802017 	ldw	r2,128(sp)
10003168:	10000426 	beq	r2,zero,1000317c <___vfprintf_internal_r+0x410>
1000316c:	d9002d17 	ldw	r4,180(sp)
10003170:	d9801e04 	addi	r6,sp,120
10003174:	b80b883a 	mov	r5,r23
10003178:	000a54c0 	call	1000a54c <__sprint_r>
1000317c:	b880030b 	ldhu	r2,12(r23)
10003180:	1080100c 	andi	r2,r2,64
10003184:	1005c01e 	bne	r2,zero,10004888 <___vfprintf_internal_r+0x1b1c>
10003188:	d8802f17 	ldw	r2,188(sp)
1000318c:	dfc04717 	ldw	ra,284(sp)
10003190:	df004617 	ldw	fp,280(sp)
10003194:	ddc04517 	ldw	r23,276(sp)
10003198:	dd804417 	ldw	r22,272(sp)
1000319c:	dd404317 	ldw	r21,268(sp)
100031a0:	dd004217 	ldw	r20,264(sp)
100031a4:	dcc04117 	ldw	r19,260(sp)
100031a8:	dc804017 	ldw	r18,256(sp)
100031ac:	dc403f17 	ldw	r17,252(sp)
100031b0:	dc003e17 	ldw	r16,248(sp)
100031b4:	dec04804 	addi	sp,sp,288
100031b8:	f800283a 	ret
100031bc:	d9002d17 	ldw	r4,180(sp)
100031c0:	000712c0 	call	1000712c <__sinit>
100031c4:	003f0206 	br	10002dd0 <__alt_data_end+0xf8002dd0>
100031c8:	d9002e17 	ldw	r4,184(sp)
100031cc:	d9402e17 	ldw	r5,184(sp)
100031d0:	21000017 	ldw	r4,0(r4)
100031d4:	28800104 	addi	r2,r5,4
100031d8:	d9003115 	stw	r4,196(sp)
100031dc:	203fa716 	blt	r4,zero,1000307c <__alt_data_end+0xf800307c>
100031e0:	d8802e15 	stw	r2,184(sp)
100031e4:	ac400007 	ldb	r17,0(r21)
100031e8:	003f4206 	br	10002ef4 <__alt_data_end+0xf8002ef4>
100031ec:	ac400007 	ldb	r17,0(r21)
100031f0:	01000a84 	movi	r4,42
100031f4:	a8c00044 	addi	r3,r21,1
100031f8:	89075826 	beq	r17,r4,10004f5c <___vfprintf_internal_r+0x21f0>
100031fc:	8cbff404 	addi	r18,r17,-48
10003200:	b486ae36 	bltu	r22,r18,10004cbc <___vfprintf_internal_r+0x1f50>
10003204:	0009883a 	mov	r4,zero
10003208:	1823883a 	mov	r17,r3
1000320c:	01400284 	movi	r5,10
10003210:	0002b6c0 	call	10002b6c <__mulsi3>
10003214:	88c00007 	ldb	r3,0(r17)
10003218:	1489883a 	add	r4,r2,r18
1000321c:	8d400044 	addi	r21,r17,1
10003220:	1cbff404 	addi	r18,r3,-48
10003224:	a823883a 	mov	r17,r21
10003228:	b4bff82e 	bgeu	r22,r18,1000320c <__alt_data_end+0xf800320c>
1000322c:	1823883a 	mov	r17,r3
10003230:	2005f616 	blt	r4,zero,10004a0c <___vfprintf_internal_r+0x1ca0>
10003234:	d9002a15 	stw	r4,168(sp)
10003238:	003f2f06 	br	10002ef8 <__alt_data_end+0xf8002ef8>
1000323c:	84002014 	ori	r16,r16,128
10003240:	ac400007 	ldb	r17,0(r21)
10003244:	003f2b06 	br	10002ef4 <__alt_data_end+0xf8002ef4>
10003248:	8cbff404 	addi	r18,r17,-48
1000324c:	d8003115 	stw	zero,196(sp)
10003250:	0009883a 	mov	r4,zero
10003254:	a823883a 	mov	r17,r21
10003258:	01400284 	movi	r5,10
1000325c:	0002b6c0 	call	10002b6c <__mulsi3>
10003260:	88c00007 	ldb	r3,0(r17)
10003264:	9089883a 	add	r4,r18,r2
10003268:	ad400044 	addi	r21,r21,1
1000326c:	1cbff404 	addi	r18,r3,-48
10003270:	a823883a 	mov	r17,r21
10003274:	b4bff82e 	bgeu	r22,r18,10003258 <__alt_data_end+0xf8003258>
10003278:	1823883a 	mov	r17,r3
1000327c:	d9003115 	stw	r4,196(sp)
10003280:	003f1d06 	br	10002ef8 <__alt_data_end+0xf8002ef8>
10003284:	8025883a 	mov	r18,r16
10003288:	dc002903 	ldbu	r16,164(sp)
1000328c:	e011883a 	mov	r8,fp
10003290:	84003fcc 	andi	r16,r16,255
10003294:	8007531e 	bne	r16,zero,10004fe4 <___vfprintf_internal_r+0x2278>
10003298:	94800414 	ori	r18,r18,16
1000329c:	9080080c 	andi	r2,r18,32
100032a0:	1003a326 	beq	r2,zero,10004130 <___vfprintf_internal_r+0x13c4>
100032a4:	d9002e17 	ldw	r4,184(sp)
100032a8:	20800117 	ldw	r2,4(r4)
100032ac:	24c00017 	ldw	r19,0(r4)
100032b0:	21000204 	addi	r4,r4,8
100032b4:	d9002e15 	stw	r4,184(sp)
100032b8:	102d883a 	mov	r22,r2
100032bc:	10047316 	blt	r2,zero,1000448c <___vfprintf_internal_r+0x1720>
100032c0:	d9002a17 	ldw	r4,168(sp)
100032c4:	df002783 	ldbu	fp,158(sp)
100032c8:	2003e416 	blt	r4,zero,1000425c <___vfprintf_internal_r+0x14f0>
100032cc:	00ffdfc4 	movi	r3,-129
100032d0:	9d84b03a 	or	r2,r19,r22
100032d4:	90e4703a 	and	r18,r18,r3
100032d8:	10018026 	beq	r2,zero,100038dc <___vfprintf_internal_r+0xb70>
100032dc:	b003ab26 	beq	r22,zero,1000418c <___vfprintf_internal_r+0x1420>
100032e0:	dc402915 	stw	r17,164(sp)
100032e4:	dc001e04 	addi	r16,sp,120
100032e8:	b023883a 	mov	r17,r22
100032ec:	402d883a 	mov	r22,r8
100032f0:	9809883a 	mov	r4,r19
100032f4:	880b883a 	mov	r5,r17
100032f8:	01800284 	movi	r6,10
100032fc:	000f883a 	mov	r7,zero
10003300:	000ca900 	call	1000ca90 <__umoddi3>
10003304:	10800c04 	addi	r2,r2,48
10003308:	843fffc4 	addi	r16,r16,-1
1000330c:	9809883a 	mov	r4,r19
10003310:	880b883a 	mov	r5,r17
10003314:	80800005 	stb	r2,0(r16)
10003318:	01800284 	movi	r6,10
1000331c:	000f883a 	mov	r7,zero
10003320:	000c4940 	call	1000c494 <__udivdi3>
10003324:	1027883a 	mov	r19,r2
10003328:	10c4b03a 	or	r2,r2,r3
1000332c:	1823883a 	mov	r17,r3
10003330:	103fef1e 	bne	r2,zero,100032f0 <__alt_data_end+0xf80032f0>
10003334:	d8c02817 	ldw	r3,160(sp)
10003338:	dc402917 	ldw	r17,164(sp)
1000333c:	b011883a 	mov	r8,r22
10003340:	1c07c83a 	sub	r3,r3,r16
10003344:	d8c02b15 	stw	r3,172(sp)
10003348:	00005f06 	br	100034c8 <___vfprintf_internal_r+0x75c>
1000334c:	8025883a 	mov	r18,r16
10003350:	dc002903 	ldbu	r16,164(sp)
10003354:	e011883a 	mov	r8,fp
10003358:	84003fcc 	andi	r16,r16,255
1000335c:	80071e1e 	bne	r16,zero,10004fd8 <___vfprintf_internal_r+0x226c>
10003360:	9080020c 	andi	r2,r18,8
10003364:	1004af26 	beq	r2,zero,10004624 <___vfprintf_internal_r+0x18b8>
10003368:	d9002e17 	ldw	r4,184(sp)
1000336c:	d9402e17 	ldw	r5,184(sp)
10003370:	d8802e17 	ldw	r2,184(sp)
10003374:	21000017 	ldw	r4,0(r4)
10003378:	29400117 	ldw	r5,4(r5)
1000337c:	10800204 	addi	r2,r2,8
10003380:	d9003615 	stw	r4,216(sp)
10003384:	d9403815 	stw	r5,224(sp)
10003388:	d8802e15 	stw	r2,184(sp)
1000338c:	d9003617 	ldw	r4,216(sp)
10003390:	d9403817 	ldw	r5,224(sp)
10003394:	da003d15 	stw	r8,244(sp)
10003398:	04000044 	movi	r16,1
1000339c:	000a1700 	call	1000a170 <__fpclassifyd>
100033a0:	da003d17 	ldw	r8,244(sp)
100033a4:	1404441e 	bne	r2,r16,100044b8 <___vfprintf_internal_r+0x174c>
100033a8:	d9003617 	ldw	r4,216(sp)
100033ac:	d9403817 	ldw	r5,224(sp)
100033b0:	000d883a 	mov	r6,zero
100033b4:	000f883a 	mov	r7,zero
100033b8:	000e4340 	call	1000e434 <__ledf2>
100033bc:	da003d17 	ldw	r8,244(sp)
100033c0:	1005e316 	blt	r2,zero,10004b50 <___vfprintf_internal_r+0x1de4>
100033c4:	df002783 	ldbu	fp,158(sp)
100033c8:	008011c4 	movi	r2,71
100033cc:	1445580e 	bge	r2,r17,10004930 <___vfprintf_internal_r+0x1bc4>
100033d0:	04040074 	movhi	r16,4097
100033d4:	840a3604 	addi	r16,r16,10456
100033d8:	00c000c4 	movi	r3,3
100033dc:	00bfdfc4 	movi	r2,-129
100033e0:	d8c02915 	stw	r3,164(sp)
100033e4:	90a4703a 	and	r18,r18,r2
100033e8:	d8c02b15 	stw	r3,172(sp)
100033ec:	d8002a15 	stw	zero,168(sp)
100033f0:	d8003215 	stw	zero,200(sp)
100033f4:	00003a06 	br	100034e0 <___vfprintf_internal_r+0x774>
100033f8:	84000214 	ori	r16,r16,8
100033fc:	ac400007 	ldb	r17,0(r21)
10003400:	003ebc06 	br	10002ef4 <__alt_data_end+0xf8002ef4>
10003404:	8025883a 	mov	r18,r16
10003408:	dc002903 	ldbu	r16,164(sp)
1000340c:	e011883a 	mov	r8,fp
10003410:	84003fcc 	andi	r16,r16,255
10003414:	8007001e 	bne	r16,zero,10005018 <___vfprintf_internal_r+0x22ac>
10003418:	94800414 	ori	r18,r18,16
1000341c:	9080080c 	andi	r2,r18,32
10003420:	1002fa26 	beq	r2,zero,1000400c <___vfprintf_internal_r+0x12a0>
10003424:	d9002e17 	ldw	r4,184(sp)
10003428:	d9402a17 	ldw	r5,168(sp)
1000342c:	d8002785 	stb	zero,158(sp)
10003430:	20800204 	addi	r2,r4,8
10003434:	24c00017 	ldw	r19,0(r4)
10003438:	25800117 	ldw	r22,4(r4)
1000343c:	2804b116 	blt	r5,zero,10004704 <___vfprintf_internal_r+0x1998>
10003440:	013fdfc4 	movi	r4,-129
10003444:	9d86b03a 	or	r3,r19,r22
10003448:	d8802e15 	stw	r2,184(sp)
1000344c:	9124703a 	and	r18,r18,r4
10003450:	1802fb1e 	bne	r3,zero,10004040 <___vfprintf_internal_r+0x12d4>
10003454:	d8c02a17 	ldw	r3,168(sp)
10003458:	0039883a 	mov	fp,zero
1000345c:	1805e526 	beq	r3,zero,10004bf4 <___vfprintf_internal_r+0x1e88>
10003460:	0027883a 	mov	r19,zero
10003464:	002d883a 	mov	r22,zero
10003468:	dc001e04 	addi	r16,sp,120
1000346c:	9806d0fa 	srli	r3,r19,3
10003470:	b008977a 	slli	r4,r22,29
10003474:	b02cd0fa 	srli	r22,r22,3
10003478:	9cc001cc 	andi	r19,r19,7
1000347c:	98800c04 	addi	r2,r19,48
10003480:	843fffc4 	addi	r16,r16,-1
10003484:	20e6b03a 	or	r19,r4,r3
10003488:	80800005 	stb	r2,0(r16)
1000348c:	9d86b03a 	or	r3,r19,r22
10003490:	183ff61e 	bne	r3,zero,1000346c <__alt_data_end+0xf800346c>
10003494:	90c0004c 	andi	r3,r18,1
10003498:	18014126 	beq	r3,zero,100039a0 <___vfprintf_internal_r+0xc34>
1000349c:	10803fcc 	andi	r2,r2,255
100034a0:	1080201c 	xori	r2,r2,128
100034a4:	10bfe004 	addi	r2,r2,-128
100034a8:	00c00c04 	movi	r3,48
100034ac:	10c13c26 	beq	r2,r3,100039a0 <___vfprintf_internal_r+0xc34>
100034b0:	80ffffc5 	stb	r3,-1(r16)
100034b4:	d8c02817 	ldw	r3,160(sp)
100034b8:	80bfffc4 	addi	r2,r16,-1
100034bc:	1021883a 	mov	r16,r2
100034c0:	1887c83a 	sub	r3,r3,r2
100034c4:	d8c02b15 	stw	r3,172(sp)
100034c8:	d8802b17 	ldw	r2,172(sp)
100034cc:	d9002a17 	ldw	r4,168(sp)
100034d0:	1100010e 	bge	r2,r4,100034d8 <___vfprintf_internal_r+0x76c>
100034d4:	2005883a 	mov	r2,r4
100034d8:	d8802915 	stw	r2,164(sp)
100034dc:	d8003215 	stw	zero,200(sp)
100034e0:	e7003fcc 	andi	fp,fp,255
100034e4:	e700201c 	xori	fp,fp,128
100034e8:	e73fe004 	addi	fp,fp,-128
100034ec:	e0000326 	beq	fp,zero,100034fc <___vfprintf_internal_r+0x790>
100034f0:	d8c02917 	ldw	r3,164(sp)
100034f4:	18c00044 	addi	r3,r3,1
100034f8:	d8c02915 	stw	r3,164(sp)
100034fc:	90c0008c 	andi	r3,r18,2
10003500:	d8c02c15 	stw	r3,176(sp)
10003504:	18000326 	beq	r3,zero,10003514 <___vfprintf_internal_r+0x7a8>
10003508:	d8c02917 	ldw	r3,164(sp)
1000350c:	18c00084 	addi	r3,r3,2
10003510:	d8c02915 	stw	r3,164(sp)
10003514:	90c0210c 	andi	r3,r18,132
10003518:	d8c03015 	stw	r3,192(sp)
1000351c:	1801c51e 	bne	r3,zero,10003c34 <___vfprintf_internal_r+0xec8>
10003520:	d9003117 	ldw	r4,196(sp)
10003524:	d8c02917 	ldw	r3,164(sp)
10003528:	20e7c83a 	sub	r19,r4,r3
1000352c:	04c1c10e 	bge	zero,r19,10003c34 <___vfprintf_internal_r+0xec8>
10003530:	02400404 	movi	r9,16
10003534:	d8c02017 	ldw	r3,128(sp)
10003538:	d8801f17 	ldw	r2,124(sp)
1000353c:	4cc52f0e 	bge	r9,r19,100049fc <___vfprintf_internal_r+0x1c90>
10003540:	01440074 	movhi	r5,4097
10003544:	294a4984 	addi	r5,r5,10534
10003548:	dc403b15 	stw	r17,236(sp)
1000354c:	d9403515 	stw	r5,212(sp)
10003550:	9823883a 	mov	r17,r19
10003554:	482d883a 	mov	r22,r9
10003558:	9027883a 	mov	r19,r18
1000355c:	070001c4 	movi	fp,7
10003560:	8025883a 	mov	r18,r16
10003564:	dc002d17 	ldw	r16,180(sp)
10003568:	00000306 	br	10003578 <___vfprintf_internal_r+0x80c>
1000356c:	8c7ffc04 	addi	r17,r17,-16
10003570:	42000204 	addi	r8,r8,8
10003574:	b440130e 	bge	r22,r17,100035c4 <___vfprintf_internal_r+0x858>
10003578:	01040074 	movhi	r4,4097
1000357c:	18c00404 	addi	r3,r3,16
10003580:	10800044 	addi	r2,r2,1
10003584:	210a4984 	addi	r4,r4,10534
10003588:	41000015 	stw	r4,0(r8)
1000358c:	45800115 	stw	r22,4(r8)
10003590:	d8c02015 	stw	r3,128(sp)
10003594:	d8801f15 	stw	r2,124(sp)
10003598:	e0bff40e 	bge	fp,r2,1000356c <__alt_data_end+0xf800356c>
1000359c:	d9801e04 	addi	r6,sp,120
100035a0:	b80b883a 	mov	r5,r23
100035a4:	8009883a 	mov	r4,r16
100035a8:	000a54c0 	call	1000a54c <__sprint_r>
100035ac:	103ef31e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
100035b0:	8c7ffc04 	addi	r17,r17,-16
100035b4:	d8c02017 	ldw	r3,128(sp)
100035b8:	d8801f17 	ldw	r2,124(sp)
100035bc:	da000404 	addi	r8,sp,16
100035c0:	b47fed16 	blt	r22,r17,10003578 <__alt_data_end+0xf8003578>
100035c4:	9021883a 	mov	r16,r18
100035c8:	9825883a 	mov	r18,r19
100035cc:	8827883a 	mov	r19,r17
100035d0:	dc403b17 	ldw	r17,236(sp)
100035d4:	d9403517 	ldw	r5,212(sp)
100035d8:	98c7883a 	add	r3,r19,r3
100035dc:	10800044 	addi	r2,r2,1
100035e0:	41400015 	stw	r5,0(r8)
100035e4:	44c00115 	stw	r19,4(r8)
100035e8:	d8c02015 	stw	r3,128(sp)
100035ec:	d8801f15 	stw	r2,124(sp)
100035f0:	010001c4 	movi	r4,7
100035f4:	2082c516 	blt	r4,r2,1000410c <___vfprintf_internal_r+0x13a0>
100035f8:	df002787 	ldb	fp,158(sp)
100035fc:	42000204 	addi	r8,r8,8
10003600:	e0000c26 	beq	fp,zero,10003634 <___vfprintf_internal_r+0x8c8>
10003604:	d8801f17 	ldw	r2,124(sp)
10003608:	d9002784 	addi	r4,sp,158
1000360c:	18c00044 	addi	r3,r3,1
10003610:	10800044 	addi	r2,r2,1
10003614:	41000015 	stw	r4,0(r8)
10003618:	01000044 	movi	r4,1
1000361c:	41000115 	stw	r4,4(r8)
10003620:	d8c02015 	stw	r3,128(sp)
10003624:	d8801f15 	stw	r2,124(sp)
10003628:	010001c4 	movi	r4,7
1000362c:	20825e16 	blt	r4,r2,10003fa8 <___vfprintf_internal_r+0x123c>
10003630:	42000204 	addi	r8,r8,8
10003634:	d8802c17 	ldw	r2,176(sp)
10003638:	10000c26 	beq	r2,zero,1000366c <___vfprintf_internal_r+0x900>
1000363c:	d8801f17 	ldw	r2,124(sp)
10003640:	d9002704 	addi	r4,sp,156
10003644:	18c00084 	addi	r3,r3,2
10003648:	10800044 	addi	r2,r2,1
1000364c:	41000015 	stw	r4,0(r8)
10003650:	01000084 	movi	r4,2
10003654:	41000115 	stw	r4,4(r8)
10003658:	d8c02015 	stw	r3,128(sp)
1000365c:	d8801f15 	stw	r2,124(sp)
10003660:	010001c4 	movi	r4,7
10003664:	20825816 	blt	r4,r2,10003fc8 <___vfprintf_internal_r+0x125c>
10003668:	42000204 	addi	r8,r8,8
1000366c:	d9003017 	ldw	r4,192(sp)
10003670:	00802004 	movi	r2,128
10003674:	2081bb26 	beq	r4,r2,10003d64 <___vfprintf_internal_r+0xff8>
10003678:	d9402a17 	ldw	r5,168(sp)
1000367c:	d8802b17 	ldw	r2,172(sp)
10003680:	28adc83a 	sub	r22,r5,r2
10003684:	0580310e 	bge	zero,r22,1000374c <___vfprintf_internal_r+0x9e0>
10003688:	07000404 	movi	fp,16
1000368c:	d8801f17 	ldw	r2,124(sp)
10003690:	e584360e 	bge	fp,r22,1000476c <___vfprintf_internal_r+0x1a00>
10003694:	01440074 	movhi	r5,4097
10003698:	294a4584 	addi	r5,r5,10518
1000369c:	dc402a15 	stw	r17,168(sp)
100036a0:	d9402c15 	stw	r5,176(sp)
100036a4:	b023883a 	mov	r17,r22
100036a8:	04c001c4 	movi	r19,7
100036ac:	a82d883a 	mov	r22,r21
100036b0:	902b883a 	mov	r21,r18
100036b4:	8025883a 	mov	r18,r16
100036b8:	dc002d17 	ldw	r16,180(sp)
100036bc:	00000306 	br	100036cc <___vfprintf_internal_r+0x960>
100036c0:	8c7ffc04 	addi	r17,r17,-16
100036c4:	42000204 	addi	r8,r8,8
100036c8:	e440110e 	bge	fp,r17,10003710 <___vfprintf_internal_r+0x9a4>
100036cc:	18c00404 	addi	r3,r3,16
100036d0:	10800044 	addi	r2,r2,1
100036d4:	45000015 	stw	r20,0(r8)
100036d8:	47000115 	stw	fp,4(r8)
100036dc:	d8c02015 	stw	r3,128(sp)
100036e0:	d8801f15 	stw	r2,124(sp)
100036e4:	98bff60e 	bge	r19,r2,100036c0 <__alt_data_end+0xf80036c0>
100036e8:	d9801e04 	addi	r6,sp,120
100036ec:	b80b883a 	mov	r5,r23
100036f0:	8009883a 	mov	r4,r16
100036f4:	000a54c0 	call	1000a54c <__sprint_r>
100036f8:	103ea01e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
100036fc:	8c7ffc04 	addi	r17,r17,-16
10003700:	d8c02017 	ldw	r3,128(sp)
10003704:	d8801f17 	ldw	r2,124(sp)
10003708:	da000404 	addi	r8,sp,16
1000370c:	e47fef16 	blt	fp,r17,100036cc <__alt_data_end+0xf80036cc>
10003710:	9021883a 	mov	r16,r18
10003714:	a825883a 	mov	r18,r21
10003718:	b02b883a 	mov	r21,r22
1000371c:	882d883a 	mov	r22,r17
10003720:	dc402a17 	ldw	r17,168(sp)
10003724:	d9002c17 	ldw	r4,176(sp)
10003728:	1d87883a 	add	r3,r3,r22
1000372c:	10800044 	addi	r2,r2,1
10003730:	41000015 	stw	r4,0(r8)
10003734:	45800115 	stw	r22,4(r8)
10003738:	d8c02015 	stw	r3,128(sp)
1000373c:	d8801f15 	stw	r2,124(sp)
10003740:	010001c4 	movi	r4,7
10003744:	20821016 	blt	r4,r2,10003f88 <___vfprintf_internal_r+0x121c>
10003748:	42000204 	addi	r8,r8,8
1000374c:	9080400c 	andi	r2,r18,256
10003750:	10013a1e 	bne	r2,zero,10003c3c <___vfprintf_internal_r+0xed0>
10003754:	d9402b17 	ldw	r5,172(sp)
10003758:	d8801f17 	ldw	r2,124(sp)
1000375c:	44000015 	stw	r16,0(r8)
10003760:	1947883a 	add	r3,r3,r5
10003764:	10800044 	addi	r2,r2,1
10003768:	41400115 	stw	r5,4(r8)
1000376c:	d8c02015 	stw	r3,128(sp)
10003770:	d8801f15 	stw	r2,124(sp)
10003774:	010001c4 	movi	r4,7
10003778:	2081f516 	blt	r4,r2,10003f50 <___vfprintf_internal_r+0x11e4>
1000377c:	42000204 	addi	r8,r8,8
10003780:	9480010c 	andi	r18,r18,4
10003784:	90003226 	beq	r18,zero,10003850 <___vfprintf_internal_r+0xae4>
10003788:	d9403117 	ldw	r5,196(sp)
1000378c:	d8802917 	ldw	r2,164(sp)
10003790:	28a1c83a 	sub	r16,r5,r2
10003794:	04002e0e 	bge	zero,r16,10003850 <___vfprintf_internal_r+0xae4>
10003798:	04400404 	movi	r17,16
1000379c:	d8801f17 	ldw	r2,124(sp)
100037a0:	8c04c40e 	bge	r17,r16,10004ab4 <___vfprintf_internal_r+0x1d48>
100037a4:	01440074 	movhi	r5,4097
100037a8:	294a4984 	addi	r5,r5,10534
100037ac:	d9403515 	stw	r5,212(sp)
100037b0:	048001c4 	movi	r18,7
100037b4:	dcc02d17 	ldw	r19,180(sp)
100037b8:	00000306 	br	100037c8 <___vfprintf_internal_r+0xa5c>
100037bc:	843ffc04 	addi	r16,r16,-16
100037c0:	42000204 	addi	r8,r8,8
100037c4:	8c00130e 	bge	r17,r16,10003814 <___vfprintf_internal_r+0xaa8>
100037c8:	01040074 	movhi	r4,4097
100037cc:	18c00404 	addi	r3,r3,16
100037d0:	10800044 	addi	r2,r2,1
100037d4:	210a4984 	addi	r4,r4,10534
100037d8:	41000015 	stw	r4,0(r8)
100037dc:	44400115 	stw	r17,4(r8)
100037e0:	d8c02015 	stw	r3,128(sp)
100037e4:	d8801f15 	stw	r2,124(sp)
100037e8:	90bff40e 	bge	r18,r2,100037bc <__alt_data_end+0xf80037bc>
100037ec:	d9801e04 	addi	r6,sp,120
100037f0:	b80b883a 	mov	r5,r23
100037f4:	9809883a 	mov	r4,r19
100037f8:	000a54c0 	call	1000a54c <__sprint_r>
100037fc:	103e5f1e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
10003800:	843ffc04 	addi	r16,r16,-16
10003804:	d8c02017 	ldw	r3,128(sp)
10003808:	d8801f17 	ldw	r2,124(sp)
1000380c:	da000404 	addi	r8,sp,16
10003810:	8c3fed16 	blt	r17,r16,100037c8 <__alt_data_end+0xf80037c8>
10003814:	d9403517 	ldw	r5,212(sp)
10003818:	1c07883a 	add	r3,r3,r16
1000381c:	10800044 	addi	r2,r2,1
10003820:	41400015 	stw	r5,0(r8)
10003824:	44000115 	stw	r16,4(r8)
10003828:	d8c02015 	stw	r3,128(sp)
1000382c:	d8801f15 	stw	r2,124(sp)
10003830:	010001c4 	movi	r4,7
10003834:	2080060e 	bge	r4,r2,10003850 <___vfprintf_internal_r+0xae4>
10003838:	d9002d17 	ldw	r4,180(sp)
1000383c:	d9801e04 	addi	r6,sp,120
10003840:	b80b883a 	mov	r5,r23
10003844:	000a54c0 	call	1000a54c <__sprint_r>
10003848:	103e4c1e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
1000384c:	d8c02017 	ldw	r3,128(sp)
10003850:	d8803117 	ldw	r2,196(sp)
10003854:	d9002917 	ldw	r4,164(sp)
10003858:	1100010e 	bge	r2,r4,10003860 <___vfprintf_internal_r+0xaf4>
1000385c:	2005883a 	mov	r2,r4
10003860:	d9402f17 	ldw	r5,188(sp)
10003864:	288b883a 	add	r5,r5,r2
10003868:	d9402f15 	stw	r5,188(sp)
1000386c:	1801c01e 	bne	r3,zero,10003f70 <___vfprintf_internal_r+0x1204>
10003870:	a8800007 	ldb	r2,0(r21)
10003874:	d8001f15 	stw	zero,124(sp)
10003878:	da000404 	addi	r8,sp,16
1000387c:	103d751e 	bne	r2,zero,10002e54 <__alt_data_end+0xf8002e54>
10003880:	a823883a 	mov	r17,r21
10003884:	003d8b06 	br	10002eb4 <__alt_data_end+0xf8002eb4>
10003888:	8025883a 	mov	r18,r16
1000388c:	dc002903 	ldbu	r16,164(sp)
10003890:	e011883a 	mov	r8,fp
10003894:	84003fcc 	andi	r16,r16,255
10003898:	8005e51e 	bne	r16,zero,10005030 <___vfprintf_internal_r+0x22c4>
1000389c:	94800414 	ori	r18,r18,16
100038a0:	9080080c 	andi	r2,r18,32
100038a4:	10022b26 	beq	r2,zero,10004154 <___vfprintf_internal_r+0x13e8>
100038a8:	d9002e17 	ldw	r4,184(sp)
100038ac:	d9402a17 	ldw	r5,168(sp)
100038b0:	d8002785 	stb	zero,158(sp)
100038b4:	20c00204 	addi	r3,r4,8
100038b8:	24c00017 	ldw	r19,0(r4)
100038bc:	25800117 	ldw	r22,4(r4)
100038c0:	28042e16 	blt	r5,zero,1000497c <___vfprintf_internal_r+0x1c10>
100038c4:	013fdfc4 	movi	r4,-129
100038c8:	9d84b03a 	or	r2,r19,r22
100038cc:	d8c02e15 	stw	r3,184(sp)
100038d0:	9124703a 	and	r18,r18,r4
100038d4:	0039883a 	mov	fp,zero
100038d8:	103e801e 	bne	r2,zero,100032dc <__alt_data_end+0xf80032dc>
100038dc:	d9002a17 	ldw	r4,168(sp)
100038e0:	2002e01e 	bne	r4,zero,10004464 <___vfprintf_internal_r+0x16f8>
100038e4:	d8002a15 	stw	zero,168(sp)
100038e8:	d8002b15 	stw	zero,172(sp)
100038ec:	dc001e04 	addi	r16,sp,120
100038f0:	003ef506 	br	100034c8 <__alt_data_end+0xf80034c8>
100038f4:	8025883a 	mov	r18,r16
100038f8:	dc002903 	ldbu	r16,164(sp)
100038fc:	e011883a 	mov	r8,fp
10003900:	84003fcc 	andi	r16,r16,255
10003904:	8005ba1e 	bne	r16,zero,10004ff0 <___vfprintf_internal_r+0x2284>
10003908:	01040074 	movhi	r4,4097
1000390c:	210a3904 	addi	r4,r4,10468
10003910:	d9003915 	stw	r4,228(sp)
10003914:	9080080c 	andi	r2,r18,32
10003918:	10006126 	beq	r2,zero,10003aa0 <___vfprintf_internal_r+0xd34>
1000391c:	d9402e17 	ldw	r5,184(sp)
10003920:	2cc00017 	ldw	r19,0(r5)
10003924:	2d800117 	ldw	r22,4(r5)
10003928:	29400204 	addi	r5,r5,8
1000392c:	d9402e15 	stw	r5,184(sp)
10003930:	9080004c 	andi	r2,r18,1
10003934:	1001ac26 	beq	r2,zero,10003fe8 <___vfprintf_internal_r+0x127c>
10003938:	9d84b03a 	or	r2,r19,r22
1000393c:	10038526 	beq	r2,zero,10004754 <___vfprintf_internal_r+0x19e8>
10003940:	d8c02a17 	ldw	r3,168(sp)
10003944:	00800c04 	movi	r2,48
10003948:	d8802705 	stb	r2,156(sp)
1000394c:	dc402745 	stb	r17,157(sp)
10003950:	d8002785 	stb	zero,158(sp)
10003954:	90800094 	ori	r2,r18,2
10003958:	18047916 	blt	r3,zero,10004b40 <___vfprintf_internal_r+0x1dd4>
1000395c:	00bfdfc4 	movi	r2,-129
10003960:	90a4703a 	and	r18,r18,r2
10003964:	94800094 	ori	r18,r18,2
10003968:	0039883a 	mov	fp,zero
1000396c:	d9003917 	ldw	r4,228(sp)
10003970:	dc001e04 	addi	r16,sp,120
10003974:	988003cc 	andi	r2,r19,15
10003978:	b006973a 	slli	r3,r22,28
1000397c:	2085883a 	add	r2,r4,r2
10003980:	9826d13a 	srli	r19,r19,4
10003984:	10800003 	ldbu	r2,0(r2)
10003988:	b02cd13a 	srli	r22,r22,4
1000398c:	843fffc4 	addi	r16,r16,-1
10003990:	1ce6b03a 	or	r19,r3,r19
10003994:	80800005 	stb	r2,0(r16)
10003998:	9d84b03a 	or	r2,r19,r22
1000399c:	103ff51e 	bne	r2,zero,10003974 <__alt_data_end+0xf8003974>
100039a0:	d8c02817 	ldw	r3,160(sp)
100039a4:	1c07c83a 	sub	r3,r3,r16
100039a8:	d8c02b15 	stw	r3,172(sp)
100039ac:	003ec606 	br	100034c8 <__alt_data_end+0xf80034c8>
100039b0:	8025883a 	mov	r18,r16
100039b4:	dc002903 	ldbu	r16,164(sp)
100039b8:	e011883a 	mov	r8,fp
100039bc:	84003fcc 	andi	r16,r16,255
100039c0:	803e9626 	beq	r16,zero,1000341c <__alt_data_end+0xf800341c>
100039c4:	d8c02b03 	ldbu	r3,172(sp)
100039c8:	d8c02785 	stb	r3,158(sp)
100039cc:	003e9306 	br	1000341c <__alt_data_end+0xf800341c>
100039d0:	00c00044 	movi	r3,1
100039d4:	d8c02905 	stb	r3,164(sp)
100039d8:	00c00ac4 	movi	r3,43
100039dc:	d8c02b05 	stb	r3,172(sp)
100039e0:	ac400007 	ldb	r17,0(r21)
100039e4:	003d4306 	br	10002ef4 <__alt_data_end+0xf8002ef4>
100039e8:	84000814 	ori	r16,r16,32
100039ec:	ac400007 	ldb	r17,0(r21)
100039f0:	003d4006 	br	10002ef4 <__alt_data_end+0xf8002ef4>
100039f4:	d8802e17 	ldw	r2,184(sp)
100039f8:	8025883a 	mov	r18,r16
100039fc:	d8002785 	stb	zero,158(sp)
10003a00:	14000017 	ldw	r16,0(r2)
10003a04:	e011883a 	mov	r8,fp
10003a08:	14c00104 	addi	r19,r2,4
10003a0c:	80042d26 	beq	r16,zero,10004ac4 <___vfprintf_internal_r+0x1d58>
10003a10:	d8c02a17 	ldw	r3,168(sp)
10003a14:	1803e416 	blt	r3,zero,100049a8 <___vfprintf_internal_r+0x1c3c>
10003a18:	180d883a 	mov	r6,r3
10003a1c:	000b883a 	mov	r5,zero
10003a20:	8009883a 	mov	r4,r16
10003a24:	df003d15 	stw	fp,244(sp)
10003a28:	00086a40 	call	100086a4 <memchr>
10003a2c:	da003d17 	ldw	r8,244(sp)
10003a30:	10046826 	beq	r2,zero,10004bd4 <___vfprintf_internal_r+0x1e68>
10003a34:	1405c83a 	sub	r2,r2,r16
10003a38:	d8802b15 	stw	r2,172(sp)
10003a3c:	1003e016 	blt	r2,zero,100049c0 <___vfprintf_internal_r+0x1c54>
10003a40:	df002783 	ldbu	fp,158(sp)
10003a44:	d8802915 	stw	r2,164(sp)
10003a48:	dcc02e15 	stw	r19,184(sp)
10003a4c:	d8002a15 	stw	zero,168(sp)
10003a50:	d8003215 	stw	zero,200(sp)
10003a54:	003ea206 	br	100034e0 <__alt_data_end+0xf80034e0>
10003a58:	8025883a 	mov	r18,r16
10003a5c:	dc002903 	ldbu	r16,164(sp)
10003a60:	e011883a 	mov	r8,fp
10003a64:	84003fcc 	andi	r16,r16,255
10003a68:	803f8d26 	beq	r16,zero,100038a0 <__alt_data_end+0xf80038a0>
10003a6c:	d8c02b03 	ldbu	r3,172(sp)
10003a70:	d8c02785 	stb	r3,158(sp)
10003a74:	003f8a06 	br	100038a0 <__alt_data_end+0xf80038a0>
10003a78:	8025883a 	mov	r18,r16
10003a7c:	dc002903 	ldbu	r16,164(sp)
10003a80:	e011883a 	mov	r8,fp
10003a84:	84003fcc 	andi	r16,r16,255
10003a88:	8005661e 	bne	r16,zero,10005024 <___vfprintf_internal_r+0x22b8>
10003a8c:	01040074 	movhi	r4,4097
10003a90:	210a3e04 	addi	r4,r4,10488
10003a94:	d9003915 	stw	r4,228(sp)
10003a98:	9080080c 	andi	r2,r18,32
10003a9c:	103f9f1e 	bne	r2,zero,1000391c <__alt_data_end+0xf800391c>
10003aa0:	9080040c 	andi	r2,r18,16
10003aa4:	1002eb26 	beq	r2,zero,10004654 <___vfprintf_internal_r+0x18e8>
10003aa8:	d8802e17 	ldw	r2,184(sp)
10003aac:	002d883a 	mov	r22,zero
10003ab0:	14c00017 	ldw	r19,0(r2)
10003ab4:	10800104 	addi	r2,r2,4
10003ab8:	d8802e15 	stw	r2,184(sp)
10003abc:	003f9c06 	br	10003930 <__alt_data_end+0xf8003930>
10003ac0:	d8802b07 	ldb	r2,172(sp)
10003ac4:	1002e11e 	bne	r2,zero,1000464c <___vfprintf_internal_r+0x18e0>
10003ac8:	00c00044 	movi	r3,1
10003acc:	d8c02905 	stb	r3,164(sp)
10003ad0:	00c00804 	movi	r3,32
10003ad4:	d8c02b05 	stb	r3,172(sp)
10003ad8:	ac400007 	ldb	r17,0(r21)
10003adc:	003d0506 	br	10002ef4 <__alt_data_end+0xf8002ef4>
10003ae0:	84000054 	ori	r16,r16,1
10003ae4:	ac400007 	ldb	r17,0(r21)
10003ae8:	003d0206 	br	10002ef4 <__alt_data_end+0xf8002ef4>
10003aec:	8025883a 	mov	r18,r16
10003af0:	dc002903 	ldbu	r16,164(sp)
10003af4:	e011883a 	mov	r8,fp
10003af8:	84003fcc 	andi	r16,r16,255
10003afc:	803de726 	beq	r16,zero,1000329c <__alt_data_end+0xf800329c>
10003b00:	d8c02b03 	ldbu	r3,172(sp)
10003b04:	d8c02785 	stb	r3,158(sp)
10003b08:	003de406 	br	1000329c <__alt_data_end+0xf800329c>
10003b0c:	84001014 	ori	r16,r16,64
10003b10:	ac400007 	ldb	r17,0(r21)
10003b14:	003cf706 	br	10002ef4 <__alt_data_end+0xf8002ef4>
10003b18:	ac400007 	ldb	r17,0(r21)
10003b1c:	00801b04 	movi	r2,108
10003b20:	88838f26 	beq	r17,r2,10004960 <___vfprintf_internal_r+0x1bf4>
10003b24:	84000414 	ori	r16,r16,16
10003b28:	003cf206 	br	10002ef4 <__alt_data_end+0xf8002ef4>
10003b2c:	8025883a 	mov	r18,r16
10003b30:	dc002903 	ldbu	r16,164(sp)
10003b34:	e011883a 	mov	r8,fp
10003b38:	84003fcc 	andi	r16,r16,255
10003b3c:	80053f1e 	bne	r16,zero,1000503c <___vfprintf_internal_r+0x22d0>
10003b40:	9080080c 	andi	r2,r18,32
10003b44:	1002d226 	beq	r2,zero,10004690 <___vfprintf_internal_r+0x1924>
10003b48:	d9002e17 	ldw	r4,184(sp)
10003b4c:	d9402f17 	ldw	r5,188(sp)
10003b50:	20800017 	ldw	r2,0(r4)
10003b54:	2807d7fa 	srai	r3,r5,31
10003b58:	21000104 	addi	r4,r4,4
10003b5c:	d9002e15 	stw	r4,184(sp)
10003b60:	11400015 	stw	r5,0(r2)
10003b64:	10c00115 	stw	r3,4(r2)
10003b68:	003cb806 	br	10002e4c <__alt_data_end+0xf8002e4c>
10003b6c:	d8c02e17 	ldw	r3,184(sp)
10003b70:	d9002e17 	ldw	r4,184(sp)
10003b74:	8025883a 	mov	r18,r16
10003b78:	18800017 	ldw	r2,0(r3)
10003b7c:	21000104 	addi	r4,r4,4
10003b80:	00c00044 	movi	r3,1
10003b84:	e011883a 	mov	r8,fp
10003b88:	d8c02915 	stw	r3,164(sp)
10003b8c:	d8002785 	stb	zero,158(sp)
10003b90:	d8801405 	stb	r2,80(sp)
10003b94:	d9002e15 	stw	r4,184(sp)
10003b98:	d8c02b15 	stw	r3,172(sp)
10003b9c:	d8002a15 	stw	zero,168(sp)
10003ba0:	d8003215 	stw	zero,200(sp)
10003ba4:	dc001404 	addi	r16,sp,80
10003ba8:	0039883a 	mov	fp,zero
10003bac:	003e5306 	br	100034fc <__alt_data_end+0xf80034fc>
10003bb0:	01040074 	movhi	r4,4097
10003bb4:	210a3e04 	addi	r4,r4,10488
10003bb8:	0039883a 	mov	fp,zero
10003bbc:	d9003915 	stw	r4,228(sp)
10003bc0:	04401e04 	movi	r17,120
10003bc4:	003f6906 	br	1000396c <__alt_data_end+0xf800396c>
10003bc8:	8025883a 	mov	r18,r16
10003bcc:	dc002903 	ldbu	r16,164(sp)
10003bd0:	e011883a 	mov	r8,fp
10003bd4:	84003fcc 	andi	r16,r16,255
10003bd8:	8005081e 	bne	r16,zero,10004ffc <___vfprintf_internal_r+0x2290>
10003bdc:	883d6126 	beq	r17,zero,10003164 <__alt_data_end+0xf8003164>
10003be0:	00c00044 	movi	r3,1
10003be4:	d8c02915 	stw	r3,164(sp)
10003be8:	dc401405 	stb	r17,80(sp)
10003bec:	d8002785 	stb	zero,158(sp)
10003bf0:	003fe906 	br	10003b98 <__alt_data_end+0xf8003b98>
10003bf4:	01440074 	movhi	r5,4097
10003bf8:	294a3e04 	addi	r5,r5,10488
10003bfc:	d9403915 	stw	r5,228(sp)
10003c00:	d8c02e15 	stw	r3,184(sp)
10003c04:	1025883a 	mov	r18,r2
10003c08:	04401e04 	movi	r17,120
10003c0c:	9d84b03a 	or	r2,r19,r22
10003c10:	1000fc1e 	bne	r2,zero,10004004 <___vfprintf_internal_r+0x1298>
10003c14:	0039883a 	mov	fp,zero
10003c18:	00800084 	movi	r2,2
10003c1c:	10803fcc 	andi	r2,r2,255
10003c20:	00c00044 	movi	r3,1
10003c24:	10c20f26 	beq	r2,r3,10004464 <___vfprintf_internal_r+0x16f8>
10003c28:	00c00084 	movi	r3,2
10003c2c:	10fd3326 	beq	r2,r3,100030fc <__alt_data_end+0xf80030fc>
10003c30:	003e0b06 	br	10003460 <__alt_data_end+0xf8003460>
10003c34:	d8c02017 	ldw	r3,128(sp)
10003c38:	003e7106 	br	10003600 <__alt_data_end+0xf8003600>
10003c3c:	00801944 	movi	r2,101
10003c40:	14407e0e 	bge	r2,r17,10003e3c <___vfprintf_internal_r+0x10d0>
10003c44:	d9003617 	ldw	r4,216(sp)
10003c48:	d9403817 	ldw	r5,224(sp)
10003c4c:	000d883a 	mov	r6,zero
10003c50:	000f883a 	mov	r7,zero
10003c54:	d8c03c15 	stw	r3,240(sp)
10003c58:	da003d15 	stw	r8,244(sp)
10003c5c:	000e2d00 	call	1000e2d0 <__eqdf2>
10003c60:	d8c03c17 	ldw	r3,240(sp)
10003c64:	da003d17 	ldw	r8,244(sp)
10003c68:	1000f71e 	bne	r2,zero,10004048 <___vfprintf_internal_r+0x12dc>
10003c6c:	d8801f17 	ldw	r2,124(sp)
10003c70:	01040074 	movhi	r4,4097
10003c74:	210a4504 	addi	r4,r4,10516
10003c78:	18c00044 	addi	r3,r3,1
10003c7c:	10800044 	addi	r2,r2,1
10003c80:	41000015 	stw	r4,0(r8)
10003c84:	01000044 	movi	r4,1
10003c88:	41000115 	stw	r4,4(r8)
10003c8c:	d8c02015 	stw	r3,128(sp)
10003c90:	d8801f15 	stw	r2,124(sp)
10003c94:	010001c4 	movi	r4,7
10003c98:	2082b816 	blt	r4,r2,1000477c <___vfprintf_internal_r+0x1a10>
10003c9c:	42000204 	addi	r8,r8,8
10003ca0:	d8802617 	ldw	r2,152(sp)
10003ca4:	d9403317 	ldw	r5,204(sp)
10003ca8:	11400216 	blt	r2,r5,10003cb4 <___vfprintf_internal_r+0xf48>
10003cac:	9080004c 	andi	r2,r18,1
10003cb0:	103eb326 	beq	r2,zero,10003780 <__alt_data_end+0xf8003780>
10003cb4:	d8803717 	ldw	r2,220(sp)
10003cb8:	d9003417 	ldw	r4,208(sp)
10003cbc:	d9403717 	ldw	r5,220(sp)
10003cc0:	1887883a 	add	r3,r3,r2
10003cc4:	d8801f17 	ldw	r2,124(sp)
10003cc8:	41000015 	stw	r4,0(r8)
10003ccc:	41400115 	stw	r5,4(r8)
10003cd0:	10800044 	addi	r2,r2,1
10003cd4:	d8c02015 	stw	r3,128(sp)
10003cd8:	d8801f15 	stw	r2,124(sp)
10003cdc:	010001c4 	movi	r4,7
10003ce0:	20832916 	blt	r4,r2,10004988 <___vfprintf_internal_r+0x1c1c>
10003ce4:	42000204 	addi	r8,r8,8
10003ce8:	d8803317 	ldw	r2,204(sp)
10003cec:	143fffc4 	addi	r16,r2,-1
10003cf0:	043ea30e 	bge	zero,r16,10003780 <__alt_data_end+0xf8003780>
10003cf4:	04400404 	movi	r17,16
10003cf8:	d8801f17 	ldw	r2,124(sp)
10003cfc:	8c00880e 	bge	r17,r16,10003f20 <___vfprintf_internal_r+0x11b4>
10003d00:	01440074 	movhi	r5,4097
10003d04:	294a4584 	addi	r5,r5,10518
10003d08:	d9402c15 	stw	r5,176(sp)
10003d0c:	058001c4 	movi	r22,7
10003d10:	dcc02d17 	ldw	r19,180(sp)
10003d14:	00000306 	br	10003d24 <___vfprintf_internal_r+0xfb8>
10003d18:	42000204 	addi	r8,r8,8
10003d1c:	843ffc04 	addi	r16,r16,-16
10003d20:	8c00820e 	bge	r17,r16,10003f2c <___vfprintf_internal_r+0x11c0>
10003d24:	18c00404 	addi	r3,r3,16
10003d28:	10800044 	addi	r2,r2,1
10003d2c:	45000015 	stw	r20,0(r8)
10003d30:	44400115 	stw	r17,4(r8)
10003d34:	d8c02015 	stw	r3,128(sp)
10003d38:	d8801f15 	stw	r2,124(sp)
10003d3c:	b0bff60e 	bge	r22,r2,10003d18 <__alt_data_end+0xf8003d18>
10003d40:	d9801e04 	addi	r6,sp,120
10003d44:	b80b883a 	mov	r5,r23
10003d48:	9809883a 	mov	r4,r19
10003d4c:	000a54c0 	call	1000a54c <__sprint_r>
10003d50:	103d0a1e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
10003d54:	d8c02017 	ldw	r3,128(sp)
10003d58:	d8801f17 	ldw	r2,124(sp)
10003d5c:	da000404 	addi	r8,sp,16
10003d60:	003fee06 	br	10003d1c <__alt_data_end+0xf8003d1c>
10003d64:	d9403117 	ldw	r5,196(sp)
10003d68:	d8802917 	ldw	r2,164(sp)
10003d6c:	28adc83a 	sub	r22,r5,r2
10003d70:	05be410e 	bge	zero,r22,10003678 <__alt_data_end+0xf8003678>
10003d74:	07000404 	movi	fp,16
10003d78:	d8801f17 	ldw	r2,124(sp)
10003d7c:	e5838f0e 	bge	fp,r22,10004bbc <___vfprintf_internal_r+0x1e50>
10003d80:	01440074 	movhi	r5,4097
10003d84:	294a4584 	addi	r5,r5,10518
10003d88:	dc403015 	stw	r17,192(sp)
10003d8c:	d9402c15 	stw	r5,176(sp)
10003d90:	b023883a 	mov	r17,r22
10003d94:	04c001c4 	movi	r19,7
10003d98:	a82d883a 	mov	r22,r21
10003d9c:	902b883a 	mov	r21,r18
10003da0:	8025883a 	mov	r18,r16
10003da4:	dc002d17 	ldw	r16,180(sp)
10003da8:	00000306 	br	10003db8 <___vfprintf_internal_r+0x104c>
10003dac:	8c7ffc04 	addi	r17,r17,-16
10003db0:	42000204 	addi	r8,r8,8
10003db4:	e440110e 	bge	fp,r17,10003dfc <___vfprintf_internal_r+0x1090>
10003db8:	18c00404 	addi	r3,r3,16
10003dbc:	10800044 	addi	r2,r2,1
10003dc0:	45000015 	stw	r20,0(r8)
10003dc4:	47000115 	stw	fp,4(r8)
10003dc8:	d8c02015 	stw	r3,128(sp)
10003dcc:	d8801f15 	stw	r2,124(sp)
10003dd0:	98bff60e 	bge	r19,r2,10003dac <__alt_data_end+0xf8003dac>
10003dd4:	d9801e04 	addi	r6,sp,120
10003dd8:	b80b883a 	mov	r5,r23
10003ddc:	8009883a 	mov	r4,r16
10003de0:	000a54c0 	call	1000a54c <__sprint_r>
10003de4:	103ce51e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
10003de8:	8c7ffc04 	addi	r17,r17,-16
10003dec:	d8c02017 	ldw	r3,128(sp)
10003df0:	d8801f17 	ldw	r2,124(sp)
10003df4:	da000404 	addi	r8,sp,16
10003df8:	e47fef16 	blt	fp,r17,10003db8 <__alt_data_end+0xf8003db8>
10003dfc:	9021883a 	mov	r16,r18
10003e00:	a825883a 	mov	r18,r21
10003e04:	b02b883a 	mov	r21,r22
10003e08:	882d883a 	mov	r22,r17
10003e0c:	dc403017 	ldw	r17,192(sp)
10003e10:	d9002c17 	ldw	r4,176(sp)
10003e14:	1d87883a 	add	r3,r3,r22
10003e18:	10800044 	addi	r2,r2,1
10003e1c:	41000015 	stw	r4,0(r8)
10003e20:	45800115 	stw	r22,4(r8)
10003e24:	d8c02015 	stw	r3,128(sp)
10003e28:	d8801f15 	stw	r2,124(sp)
10003e2c:	010001c4 	movi	r4,7
10003e30:	20818e16 	blt	r4,r2,1000446c <___vfprintf_internal_r+0x1700>
10003e34:	42000204 	addi	r8,r8,8
10003e38:	003e0f06 	br	10003678 <__alt_data_end+0xf8003678>
10003e3c:	d9403317 	ldw	r5,204(sp)
10003e40:	00800044 	movi	r2,1
10003e44:	18c00044 	addi	r3,r3,1
10003e48:	1141530e 	bge	r2,r5,10004398 <___vfprintf_internal_r+0x162c>
10003e4c:	dc401f17 	ldw	r17,124(sp)
10003e50:	00800044 	movi	r2,1
10003e54:	40800115 	stw	r2,4(r8)
10003e58:	8c400044 	addi	r17,r17,1
10003e5c:	44000015 	stw	r16,0(r8)
10003e60:	d8c02015 	stw	r3,128(sp)
10003e64:	dc401f15 	stw	r17,124(sp)
10003e68:	008001c4 	movi	r2,7
10003e6c:	14416b16 	blt	r2,r17,1000441c <___vfprintf_internal_r+0x16b0>
10003e70:	42000204 	addi	r8,r8,8
10003e74:	d8803717 	ldw	r2,220(sp)
10003e78:	d9003417 	ldw	r4,208(sp)
10003e7c:	8c400044 	addi	r17,r17,1
10003e80:	10c7883a 	add	r3,r2,r3
10003e84:	40800115 	stw	r2,4(r8)
10003e88:	41000015 	stw	r4,0(r8)
10003e8c:	d8c02015 	stw	r3,128(sp)
10003e90:	dc401f15 	stw	r17,124(sp)
10003e94:	008001c4 	movi	r2,7
10003e98:	14416916 	blt	r2,r17,10004440 <___vfprintf_internal_r+0x16d4>
10003e9c:	45800204 	addi	r22,r8,8
10003ea0:	d9003617 	ldw	r4,216(sp)
10003ea4:	d9403817 	ldw	r5,224(sp)
10003ea8:	000d883a 	mov	r6,zero
10003eac:	000f883a 	mov	r7,zero
10003eb0:	d8c03c15 	stw	r3,240(sp)
10003eb4:	000e2d00 	call	1000e2d0 <__eqdf2>
10003eb8:	d8c03c17 	ldw	r3,240(sp)
10003ebc:	1000bc26 	beq	r2,zero,100041b0 <___vfprintf_internal_r+0x1444>
10003ec0:	d9403317 	ldw	r5,204(sp)
10003ec4:	84000044 	addi	r16,r16,1
10003ec8:	8c400044 	addi	r17,r17,1
10003ecc:	28bfffc4 	addi	r2,r5,-1
10003ed0:	1887883a 	add	r3,r3,r2
10003ed4:	b0800115 	stw	r2,4(r22)
10003ed8:	b4000015 	stw	r16,0(r22)
10003edc:	d8c02015 	stw	r3,128(sp)
10003ee0:	dc401f15 	stw	r17,124(sp)
10003ee4:	008001c4 	movi	r2,7
10003ee8:	14414316 	blt	r2,r17,100043f8 <___vfprintf_internal_r+0x168c>
10003eec:	b5800204 	addi	r22,r22,8
10003ef0:	d9003a17 	ldw	r4,232(sp)
10003ef4:	df0022c4 	addi	fp,sp,139
10003ef8:	8c400044 	addi	r17,r17,1
10003efc:	20c7883a 	add	r3,r4,r3
10003f00:	b7000015 	stw	fp,0(r22)
10003f04:	b1000115 	stw	r4,4(r22)
10003f08:	d8c02015 	stw	r3,128(sp)
10003f0c:	dc401f15 	stw	r17,124(sp)
10003f10:	008001c4 	movi	r2,7
10003f14:	14400e16 	blt	r2,r17,10003f50 <___vfprintf_internal_r+0x11e4>
10003f18:	b2000204 	addi	r8,r22,8
10003f1c:	003e1806 	br	10003780 <__alt_data_end+0xf8003780>
10003f20:	01040074 	movhi	r4,4097
10003f24:	210a4584 	addi	r4,r4,10518
10003f28:	d9002c15 	stw	r4,176(sp)
10003f2c:	d9002c17 	ldw	r4,176(sp)
10003f30:	1c07883a 	add	r3,r3,r16
10003f34:	44000115 	stw	r16,4(r8)
10003f38:	41000015 	stw	r4,0(r8)
10003f3c:	10800044 	addi	r2,r2,1
10003f40:	d8c02015 	stw	r3,128(sp)
10003f44:	d8801f15 	stw	r2,124(sp)
10003f48:	010001c4 	movi	r4,7
10003f4c:	20be0b0e 	bge	r4,r2,1000377c <__alt_data_end+0xf800377c>
10003f50:	d9002d17 	ldw	r4,180(sp)
10003f54:	d9801e04 	addi	r6,sp,120
10003f58:	b80b883a 	mov	r5,r23
10003f5c:	000a54c0 	call	1000a54c <__sprint_r>
10003f60:	103c861e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
10003f64:	d8c02017 	ldw	r3,128(sp)
10003f68:	da000404 	addi	r8,sp,16
10003f6c:	003e0406 	br	10003780 <__alt_data_end+0xf8003780>
10003f70:	d9002d17 	ldw	r4,180(sp)
10003f74:	d9801e04 	addi	r6,sp,120
10003f78:	b80b883a 	mov	r5,r23
10003f7c:	000a54c0 	call	1000a54c <__sprint_r>
10003f80:	103e3b26 	beq	r2,zero,10003870 <__alt_data_end+0xf8003870>
10003f84:	003c7d06 	br	1000317c <__alt_data_end+0xf800317c>
10003f88:	d9002d17 	ldw	r4,180(sp)
10003f8c:	d9801e04 	addi	r6,sp,120
10003f90:	b80b883a 	mov	r5,r23
10003f94:	000a54c0 	call	1000a54c <__sprint_r>
10003f98:	103c781e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
10003f9c:	d8c02017 	ldw	r3,128(sp)
10003fa0:	da000404 	addi	r8,sp,16
10003fa4:	003de906 	br	1000374c <__alt_data_end+0xf800374c>
10003fa8:	d9002d17 	ldw	r4,180(sp)
10003fac:	d9801e04 	addi	r6,sp,120
10003fb0:	b80b883a 	mov	r5,r23
10003fb4:	000a54c0 	call	1000a54c <__sprint_r>
10003fb8:	103c701e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
10003fbc:	d8c02017 	ldw	r3,128(sp)
10003fc0:	da000404 	addi	r8,sp,16
10003fc4:	003d9b06 	br	10003634 <__alt_data_end+0xf8003634>
10003fc8:	d9002d17 	ldw	r4,180(sp)
10003fcc:	d9801e04 	addi	r6,sp,120
10003fd0:	b80b883a 	mov	r5,r23
10003fd4:	000a54c0 	call	1000a54c <__sprint_r>
10003fd8:	103c681e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
10003fdc:	d8c02017 	ldw	r3,128(sp)
10003fe0:	da000404 	addi	r8,sp,16
10003fe4:	003da106 	br	1000366c <__alt_data_end+0xf800366c>
10003fe8:	d9402a17 	ldw	r5,168(sp)
10003fec:	d8002785 	stb	zero,158(sp)
10003ff0:	283f0616 	blt	r5,zero,10003c0c <__alt_data_end+0xf8003c0c>
10003ff4:	00ffdfc4 	movi	r3,-129
10003ff8:	9d84b03a 	or	r2,r19,r22
10003ffc:	90e4703a 	and	r18,r18,r3
10004000:	103c3b26 	beq	r2,zero,100030f0 <__alt_data_end+0xf80030f0>
10004004:	0039883a 	mov	fp,zero
10004008:	003e5806 	br	1000396c <__alt_data_end+0xf800396c>
1000400c:	9080040c 	andi	r2,r18,16
10004010:	1001b326 	beq	r2,zero,100046e0 <___vfprintf_internal_r+0x1974>
10004014:	d8c02e17 	ldw	r3,184(sp)
10004018:	d9002a17 	ldw	r4,168(sp)
1000401c:	d8002785 	stb	zero,158(sp)
10004020:	18800104 	addi	r2,r3,4
10004024:	1cc00017 	ldw	r19,0(r3)
10004028:	002d883a 	mov	r22,zero
1000402c:	2001b516 	blt	r4,zero,10004704 <___vfprintf_internal_r+0x1998>
10004030:	00ffdfc4 	movi	r3,-129
10004034:	d8802e15 	stw	r2,184(sp)
10004038:	90e4703a 	and	r18,r18,r3
1000403c:	983d0526 	beq	r19,zero,10003454 <__alt_data_end+0xf8003454>
10004040:	0039883a 	mov	fp,zero
10004044:	003d0806 	br	10003468 <__alt_data_end+0xf8003468>
10004048:	dc402617 	ldw	r17,152(sp)
1000404c:	0441d30e 	bge	zero,r17,1000479c <___vfprintf_internal_r+0x1a30>
10004050:	dc403217 	ldw	r17,200(sp)
10004054:	d8803317 	ldw	r2,204(sp)
10004058:	1440010e 	bge	r2,r17,10004060 <___vfprintf_internal_r+0x12f4>
1000405c:	1023883a 	mov	r17,r2
10004060:	04400a0e 	bge	zero,r17,1000408c <___vfprintf_internal_r+0x1320>
10004064:	d8801f17 	ldw	r2,124(sp)
10004068:	1c47883a 	add	r3,r3,r17
1000406c:	44000015 	stw	r16,0(r8)
10004070:	10800044 	addi	r2,r2,1
10004074:	44400115 	stw	r17,4(r8)
10004078:	d8c02015 	stw	r3,128(sp)
1000407c:	d8801f15 	stw	r2,124(sp)
10004080:	010001c4 	movi	r4,7
10004084:	20826516 	blt	r4,r2,10004a1c <___vfprintf_internal_r+0x1cb0>
10004088:	42000204 	addi	r8,r8,8
1000408c:	88026116 	blt	r17,zero,10004a14 <___vfprintf_internal_r+0x1ca8>
10004090:	d9003217 	ldw	r4,200(sp)
10004094:	2463c83a 	sub	r17,r4,r17
10004098:	04407b0e 	bge	zero,r17,10004288 <___vfprintf_internal_r+0x151c>
1000409c:	05800404 	movi	r22,16
100040a0:	d8801f17 	ldw	r2,124(sp)
100040a4:	b4419d0e 	bge	r22,r17,1000471c <___vfprintf_internal_r+0x19b0>
100040a8:	01040074 	movhi	r4,4097
100040ac:	210a4584 	addi	r4,r4,10518
100040b0:	d9002c15 	stw	r4,176(sp)
100040b4:	070001c4 	movi	fp,7
100040b8:	dcc02d17 	ldw	r19,180(sp)
100040bc:	00000306 	br	100040cc <___vfprintf_internal_r+0x1360>
100040c0:	42000204 	addi	r8,r8,8
100040c4:	8c7ffc04 	addi	r17,r17,-16
100040c8:	b441970e 	bge	r22,r17,10004728 <___vfprintf_internal_r+0x19bc>
100040cc:	18c00404 	addi	r3,r3,16
100040d0:	10800044 	addi	r2,r2,1
100040d4:	45000015 	stw	r20,0(r8)
100040d8:	45800115 	stw	r22,4(r8)
100040dc:	d8c02015 	stw	r3,128(sp)
100040e0:	d8801f15 	stw	r2,124(sp)
100040e4:	e0bff60e 	bge	fp,r2,100040c0 <__alt_data_end+0xf80040c0>
100040e8:	d9801e04 	addi	r6,sp,120
100040ec:	b80b883a 	mov	r5,r23
100040f0:	9809883a 	mov	r4,r19
100040f4:	000a54c0 	call	1000a54c <__sprint_r>
100040f8:	103c201e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
100040fc:	d8c02017 	ldw	r3,128(sp)
10004100:	d8801f17 	ldw	r2,124(sp)
10004104:	da000404 	addi	r8,sp,16
10004108:	003fee06 	br	100040c4 <__alt_data_end+0xf80040c4>
1000410c:	d9002d17 	ldw	r4,180(sp)
10004110:	d9801e04 	addi	r6,sp,120
10004114:	b80b883a 	mov	r5,r23
10004118:	000a54c0 	call	1000a54c <__sprint_r>
1000411c:	103c171e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
10004120:	d8c02017 	ldw	r3,128(sp)
10004124:	df002787 	ldb	fp,158(sp)
10004128:	da000404 	addi	r8,sp,16
1000412c:	003d3406 	br	10003600 <__alt_data_end+0xf8003600>
10004130:	9080040c 	andi	r2,r18,16
10004134:	10016126 	beq	r2,zero,100046bc <___vfprintf_internal_r+0x1950>
10004138:	d9402e17 	ldw	r5,184(sp)
1000413c:	2cc00017 	ldw	r19,0(r5)
10004140:	29400104 	addi	r5,r5,4
10004144:	d9402e15 	stw	r5,184(sp)
10004148:	982dd7fa 	srai	r22,r19,31
1000414c:	b005883a 	mov	r2,r22
10004150:	003c5a06 	br	100032bc <__alt_data_end+0xf80032bc>
10004154:	9080040c 	andi	r2,r18,16
10004158:	10003526 	beq	r2,zero,10004230 <___vfprintf_internal_r+0x14c4>
1000415c:	d8c02e17 	ldw	r3,184(sp)
10004160:	d9002a17 	ldw	r4,168(sp)
10004164:	d8002785 	stb	zero,158(sp)
10004168:	18800104 	addi	r2,r3,4
1000416c:	1cc00017 	ldw	r19,0(r3)
10004170:	002d883a 	mov	r22,zero
10004174:	20003716 	blt	r4,zero,10004254 <___vfprintf_internal_r+0x14e8>
10004178:	00ffdfc4 	movi	r3,-129
1000417c:	d8802e15 	stw	r2,184(sp)
10004180:	90e4703a 	and	r18,r18,r3
10004184:	0039883a 	mov	fp,zero
10004188:	983dd426 	beq	r19,zero,100038dc <__alt_data_end+0xf80038dc>
1000418c:	00800244 	movi	r2,9
10004190:	14fc5336 	bltu	r2,r19,100032e0 <__alt_data_end+0xf80032e0>
10004194:	d8c02817 	ldw	r3,160(sp)
10004198:	dc001dc4 	addi	r16,sp,119
1000419c:	9cc00c04 	addi	r19,r19,48
100041a0:	1c07c83a 	sub	r3,r3,r16
100041a4:	dcc01dc5 	stb	r19,119(sp)
100041a8:	d8c02b15 	stw	r3,172(sp)
100041ac:	003cc606 	br	100034c8 <__alt_data_end+0xf80034c8>
100041b0:	d8803317 	ldw	r2,204(sp)
100041b4:	143fffc4 	addi	r16,r2,-1
100041b8:	043f4d0e 	bge	zero,r16,10003ef0 <__alt_data_end+0xf8003ef0>
100041bc:	07000404 	movi	fp,16
100041c0:	e400810e 	bge	fp,r16,100043c8 <___vfprintf_internal_r+0x165c>
100041c4:	01440074 	movhi	r5,4097
100041c8:	294a4584 	addi	r5,r5,10518
100041cc:	d9402c15 	stw	r5,176(sp)
100041d0:	01c001c4 	movi	r7,7
100041d4:	dcc02d17 	ldw	r19,180(sp)
100041d8:	00000306 	br	100041e8 <___vfprintf_internal_r+0x147c>
100041dc:	b5800204 	addi	r22,r22,8
100041e0:	843ffc04 	addi	r16,r16,-16
100041e4:	e4007b0e 	bge	fp,r16,100043d4 <___vfprintf_internal_r+0x1668>
100041e8:	18c00404 	addi	r3,r3,16
100041ec:	8c400044 	addi	r17,r17,1
100041f0:	b5000015 	stw	r20,0(r22)
100041f4:	b7000115 	stw	fp,4(r22)
100041f8:	d8c02015 	stw	r3,128(sp)
100041fc:	dc401f15 	stw	r17,124(sp)
10004200:	3c7ff60e 	bge	r7,r17,100041dc <__alt_data_end+0xf80041dc>
10004204:	d9801e04 	addi	r6,sp,120
10004208:	b80b883a 	mov	r5,r23
1000420c:	9809883a 	mov	r4,r19
10004210:	d9c03c15 	stw	r7,240(sp)
10004214:	000a54c0 	call	1000a54c <__sprint_r>
10004218:	d9c03c17 	ldw	r7,240(sp)
1000421c:	103bd71e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
10004220:	d8c02017 	ldw	r3,128(sp)
10004224:	dc401f17 	ldw	r17,124(sp)
10004228:	dd800404 	addi	r22,sp,16
1000422c:	003fec06 	br	100041e0 <__alt_data_end+0xf80041e0>
10004230:	9080100c 	andi	r2,r18,64
10004234:	d8002785 	stb	zero,158(sp)
10004238:	10010e26 	beq	r2,zero,10004674 <___vfprintf_internal_r+0x1908>
1000423c:	d9402e17 	ldw	r5,184(sp)
10004240:	d8c02a17 	ldw	r3,168(sp)
10004244:	002d883a 	mov	r22,zero
10004248:	28800104 	addi	r2,r5,4
1000424c:	2cc0000b 	ldhu	r19,0(r5)
10004250:	183fc90e 	bge	r3,zero,10004178 <__alt_data_end+0xf8004178>
10004254:	d8802e15 	stw	r2,184(sp)
10004258:	0039883a 	mov	fp,zero
1000425c:	9d84b03a 	or	r2,r19,r22
10004260:	103c1e1e 	bne	r2,zero,100032dc <__alt_data_end+0xf80032dc>
10004264:	00800044 	movi	r2,1
10004268:	003e6c06 	br	10003c1c <__alt_data_end+0xf8003c1c>
1000426c:	d9002d17 	ldw	r4,180(sp)
10004270:	d9801e04 	addi	r6,sp,120
10004274:	b80b883a 	mov	r5,r23
10004278:	000a54c0 	call	1000a54c <__sprint_r>
1000427c:	103bbf1e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
10004280:	d8c02017 	ldw	r3,128(sp)
10004284:	da000404 	addi	r8,sp,16
10004288:	d9003217 	ldw	r4,200(sp)
1000428c:	d8802617 	ldw	r2,152(sp)
10004290:	d9403317 	ldw	r5,204(sp)
10004294:	8123883a 	add	r17,r16,r4
10004298:	11400216 	blt	r2,r5,100042a4 <___vfprintf_internal_r+0x1538>
1000429c:	9100004c 	andi	r4,r18,1
100042a0:	20000d26 	beq	r4,zero,100042d8 <___vfprintf_internal_r+0x156c>
100042a4:	d9003717 	ldw	r4,220(sp)
100042a8:	d9403417 	ldw	r5,208(sp)
100042ac:	1907883a 	add	r3,r3,r4
100042b0:	d9001f17 	ldw	r4,124(sp)
100042b4:	41400015 	stw	r5,0(r8)
100042b8:	d9403717 	ldw	r5,220(sp)
100042bc:	21000044 	addi	r4,r4,1
100042c0:	d8c02015 	stw	r3,128(sp)
100042c4:	41400115 	stw	r5,4(r8)
100042c8:	d9001f15 	stw	r4,124(sp)
100042cc:	014001c4 	movi	r5,7
100042d0:	2901e816 	blt	r5,r4,10004a74 <___vfprintf_internal_r+0x1d08>
100042d4:	42000204 	addi	r8,r8,8
100042d8:	d9003317 	ldw	r4,204(sp)
100042dc:	8121883a 	add	r16,r16,r4
100042e0:	2085c83a 	sub	r2,r4,r2
100042e4:	8461c83a 	sub	r16,r16,r17
100042e8:	1400010e 	bge	r2,r16,100042f0 <___vfprintf_internal_r+0x1584>
100042ec:	1021883a 	mov	r16,r2
100042f0:	04000a0e 	bge	zero,r16,1000431c <___vfprintf_internal_r+0x15b0>
100042f4:	d9001f17 	ldw	r4,124(sp)
100042f8:	1c07883a 	add	r3,r3,r16
100042fc:	44400015 	stw	r17,0(r8)
10004300:	21000044 	addi	r4,r4,1
10004304:	44000115 	stw	r16,4(r8)
10004308:	d8c02015 	stw	r3,128(sp)
1000430c:	d9001f15 	stw	r4,124(sp)
10004310:	014001c4 	movi	r5,7
10004314:	2901fb16 	blt	r5,r4,10004b04 <___vfprintf_internal_r+0x1d98>
10004318:	42000204 	addi	r8,r8,8
1000431c:	8001f716 	blt	r16,zero,10004afc <___vfprintf_internal_r+0x1d90>
10004320:	1421c83a 	sub	r16,r2,r16
10004324:	043d160e 	bge	zero,r16,10003780 <__alt_data_end+0xf8003780>
10004328:	04400404 	movi	r17,16
1000432c:	d8801f17 	ldw	r2,124(sp)
10004330:	8c3efb0e 	bge	r17,r16,10003f20 <__alt_data_end+0xf8003f20>
10004334:	01440074 	movhi	r5,4097
10004338:	294a4584 	addi	r5,r5,10518
1000433c:	d9402c15 	stw	r5,176(sp)
10004340:	058001c4 	movi	r22,7
10004344:	dcc02d17 	ldw	r19,180(sp)
10004348:	00000306 	br	10004358 <___vfprintf_internal_r+0x15ec>
1000434c:	42000204 	addi	r8,r8,8
10004350:	843ffc04 	addi	r16,r16,-16
10004354:	8c3ef50e 	bge	r17,r16,10003f2c <__alt_data_end+0xf8003f2c>
10004358:	18c00404 	addi	r3,r3,16
1000435c:	10800044 	addi	r2,r2,1
10004360:	45000015 	stw	r20,0(r8)
10004364:	44400115 	stw	r17,4(r8)
10004368:	d8c02015 	stw	r3,128(sp)
1000436c:	d8801f15 	stw	r2,124(sp)
10004370:	b0bff60e 	bge	r22,r2,1000434c <__alt_data_end+0xf800434c>
10004374:	d9801e04 	addi	r6,sp,120
10004378:	b80b883a 	mov	r5,r23
1000437c:	9809883a 	mov	r4,r19
10004380:	000a54c0 	call	1000a54c <__sprint_r>
10004384:	103b7d1e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
10004388:	d8c02017 	ldw	r3,128(sp)
1000438c:	d8801f17 	ldw	r2,124(sp)
10004390:	da000404 	addi	r8,sp,16
10004394:	003fee06 	br	10004350 <__alt_data_end+0xf8004350>
10004398:	9088703a 	and	r4,r18,r2
1000439c:	203eab1e 	bne	r4,zero,10003e4c <__alt_data_end+0xf8003e4c>
100043a0:	dc401f17 	ldw	r17,124(sp)
100043a4:	40800115 	stw	r2,4(r8)
100043a8:	44000015 	stw	r16,0(r8)
100043ac:	8c400044 	addi	r17,r17,1
100043b0:	d8c02015 	stw	r3,128(sp)
100043b4:	dc401f15 	stw	r17,124(sp)
100043b8:	008001c4 	movi	r2,7
100043bc:	14400e16 	blt	r2,r17,100043f8 <___vfprintf_internal_r+0x168c>
100043c0:	45800204 	addi	r22,r8,8
100043c4:	003eca06 	br	10003ef0 <__alt_data_end+0xf8003ef0>
100043c8:	01040074 	movhi	r4,4097
100043cc:	210a4584 	addi	r4,r4,10518
100043d0:	d9002c15 	stw	r4,176(sp)
100043d4:	d8802c17 	ldw	r2,176(sp)
100043d8:	1c07883a 	add	r3,r3,r16
100043dc:	8c400044 	addi	r17,r17,1
100043e0:	b0800015 	stw	r2,0(r22)
100043e4:	b4000115 	stw	r16,4(r22)
100043e8:	d8c02015 	stw	r3,128(sp)
100043ec:	dc401f15 	stw	r17,124(sp)
100043f0:	008001c4 	movi	r2,7
100043f4:	147ebd0e 	bge	r2,r17,10003eec <__alt_data_end+0xf8003eec>
100043f8:	d9002d17 	ldw	r4,180(sp)
100043fc:	d9801e04 	addi	r6,sp,120
10004400:	b80b883a 	mov	r5,r23
10004404:	000a54c0 	call	1000a54c <__sprint_r>
10004408:	103b5c1e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
1000440c:	d8c02017 	ldw	r3,128(sp)
10004410:	dc401f17 	ldw	r17,124(sp)
10004414:	dd800404 	addi	r22,sp,16
10004418:	003eb506 	br	10003ef0 <__alt_data_end+0xf8003ef0>
1000441c:	d9002d17 	ldw	r4,180(sp)
10004420:	d9801e04 	addi	r6,sp,120
10004424:	b80b883a 	mov	r5,r23
10004428:	000a54c0 	call	1000a54c <__sprint_r>
1000442c:	103b531e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
10004430:	d8c02017 	ldw	r3,128(sp)
10004434:	dc401f17 	ldw	r17,124(sp)
10004438:	da000404 	addi	r8,sp,16
1000443c:	003e8d06 	br	10003e74 <__alt_data_end+0xf8003e74>
10004440:	d9002d17 	ldw	r4,180(sp)
10004444:	d9801e04 	addi	r6,sp,120
10004448:	b80b883a 	mov	r5,r23
1000444c:	000a54c0 	call	1000a54c <__sprint_r>
10004450:	103b4a1e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
10004454:	d8c02017 	ldw	r3,128(sp)
10004458:	dc401f17 	ldw	r17,124(sp)
1000445c:	dd800404 	addi	r22,sp,16
10004460:	003e8f06 	br	10003ea0 <__alt_data_end+0xf8003ea0>
10004464:	0027883a 	mov	r19,zero
10004468:	003f4a06 	br	10004194 <__alt_data_end+0xf8004194>
1000446c:	d9002d17 	ldw	r4,180(sp)
10004470:	d9801e04 	addi	r6,sp,120
10004474:	b80b883a 	mov	r5,r23
10004478:	000a54c0 	call	1000a54c <__sprint_r>
1000447c:	103b3f1e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
10004480:	d8c02017 	ldw	r3,128(sp)
10004484:	da000404 	addi	r8,sp,16
10004488:	003c7b06 	br	10003678 <__alt_data_end+0xf8003678>
1000448c:	d9402a17 	ldw	r5,168(sp)
10004490:	04e7c83a 	sub	r19,zero,r19
10004494:	07000b44 	movi	fp,45
10004498:	9804c03a 	cmpne	r2,r19,zero
1000449c:	05adc83a 	sub	r22,zero,r22
100044a0:	df002785 	stb	fp,158(sp)
100044a4:	b0adc83a 	sub	r22,r22,r2
100044a8:	28017b16 	blt	r5,zero,10004a98 <___vfprintf_internal_r+0x1d2c>
100044ac:	00bfdfc4 	movi	r2,-129
100044b0:	90a4703a 	and	r18,r18,r2
100044b4:	003b8906 	br	100032dc <__alt_data_end+0xf80032dc>
100044b8:	d9003617 	ldw	r4,216(sp)
100044bc:	d9403817 	ldw	r5,224(sp)
100044c0:	da003d15 	stw	r8,244(sp)
100044c4:	000a1700 	call	1000a170 <__fpclassifyd>
100044c8:	da003d17 	ldw	r8,244(sp)
100044cc:	1000f026 	beq	r2,zero,10004890 <___vfprintf_internal_r+0x1b24>
100044d0:	d9002a17 	ldw	r4,168(sp)
100044d4:	05bff7c4 	movi	r22,-33
100044d8:	00bfffc4 	movi	r2,-1
100044dc:	8dac703a 	and	r22,r17,r22
100044e0:	20820026 	beq	r4,r2,10004ce4 <___vfprintf_internal_r+0x1f78>
100044e4:	008011c4 	movi	r2,71
100044e8:	b081f726 	beq	r22,r2,10004cc8 <___vfprintf_internal_r+0x1f5c>
100044ec:	d9003817 	ldw	r4,224(sp)
100044f0:	90c04014 	ori	r3,r18,256
100044f4:	d8c02c15 	stw	r3,176(sp)
100044f8:	20021516 	blt	r4,zero,10004d50 <___vfprintf_internal_r+0x1fe4>
100044fc:	dcc03817 	ldw	r19,224(sp)
10004500:	d8002905 	stb	zero,164(sp)
10004504:	00801984 	movi	r2,102
10004508:	8881f926 	beq	r17,r2,10004cf0 <___vfprintf_internal_r+0x1f84>
1000450c:	00801184 	movi	r2,70
10004510:	88821c26 	beq	r17,r2,10004d84 <___vfprintf_internal_r+0x2018>
10004514:	00801144 	movi	r2,69
10004518:	b081ef26 	beq	r22,r2,10004cd8 <___vfprintf_internal_r+0x1f6c>
1000451c:	d8c02a17 	ldw	r3,168(sp)
10004520:	d8802104 	addi	r2,sp,132
10004524:	d8800315 	stw	r2,12(sp)
10004528:	d9403617 	ldw	r5,216(sp)
1000452c:	d8802504 	addi	r2,sp,148
10004530:	d9002d17 	ldw	r4,180(sp)
10004534:	d8800215 	stw	r2,8(sp)
10004538:	d8802604 	addi	r2,sp,152
1000453c:	d8c00015 	stw	r3,0(sp)
10004540:	d8800115 	stw	r2,4(sp)
10004544:	01c00084 	movi	r7,2
10004548:	980d883a 	mov	r6,r19
1000454c:	d8c03c15 	stw	r3,240(sp)
10004550:	da003d15 	stw	r8,244(sp)
10004554:	000549c0 	call	1000549c <_dtoa_r>
10004558:	1021883a 	mov	r16,r2
1000455c:	008019c4 	movi	r2,103
10004560:	d8c03c17 	ldw	r3,240(sp)
10004564:	da003d17 	ldw	r8,244(sp)
10004568:	88817126 	beq	r17,r2,10004b30 <___vfprintf_internal_r+0x1dc4>
1000456c:	008011c4 	movi	r2,71
10004570:	88829126 	beq	r17,r2,10004fb8 <___vfprintf_internal_r+0x224c>
10004574:	80f9883a 	add	fp,r16,r3
10004578:	d9003617 	ldw	r4,216(sp)
1000457c:	000d883a 	mov	r6,zero
10004580:	000f883a 	mov	r7,zero
10004584:	980b883a 	mov	r5,r19
10004588:	da003d15 	stw	r8,244(sp)
1000458c:	000e2d00 	call	1000e2d0 <__eqdf2>
10004590:	da003d17 	ldw	r8,244(sp)
10004594:	10018d26 	beq	r2,zero,10004bcc <___vfprintf_internal_r+0x1e60>
10004598:	d8802117 	ldw	r2,132(sp)
1000459c:	1700062e 	bgeu	r2,fp,100045b8 <___vfprintf_internal_r+0x184c>
100045a0:	01000c04 	movi	r4,48
100045a4:	10c00044 	addi	r3,r2,1
100045a8:	d8c02115 	stw	r3,132(sp)
100045ac:	11000005 	stb	r4,0(r2)
100045b0:	d8802117 	ldw	r2,132(sp)
100045b4:	173ffb36 	bltu	r2,fp,100045a4 <__alt_data_end+0xf80045a4>
100045b8:	1405c83a 	sub	r2,r2,r16
100045bc:	d8803315 	stw	r2,204(sp)
100045c0:	008011c4 	movi	r2,71
100045c4:	b0817626 	beq	r22,r2,10004ba0 <___vfprintf_internal_r+0x1e34>
100045c8:	00801944 	movi	r2,101
100045cc:	1442800e 	bge	r2,r17,10004fd0 <___vfprintf_internal_r+0x2264>
100045d0:	d8c02617 	ldw	r3,152(sp)
100045d4:	00801984 	movi	r2,102
100045d8:	d8c03215 	stw	r3,200(sp)
100045dc:	8881fe26 	beq	r17,r2,10004dd8 <___vfprintf_internal_r+0x206c>
100045e0:	d8c03217 	ldw	r3,200(sp)
100045e4:	d9003317 	ldw	r4,204(sp)
100045e8:	1901dd16 	blt	r3,r4,10004d60 <___vfprintf_internal_r+0x1ff4>
100045ec:	9480004c 	andi	r18,r18,1
100045f0:	90022b1e 	bne	r18,zero,10004ea0 <___vfprintf_internal_r+0x2134>
100045f4:	1805883a 	mov	r2,r3
100045f8:	18028316 	blt	r3,zero,10005008 <___vfprintf_internal_r+0x229c>
100045fc:	d8c03217 	ldw	r3,200(sp)
10004600:	044019c4 	movi	r17,103
10004604:	d8c02b15 	stw	r3,172(sp)
10004608:	df002907 	ldb	fp,164(sp)
1000460c:	e001531e 	bne	fp,zero,10004b5c <___vfprintf_internal_r+0x1df0>
10004610:	df002783 	ldbu	fp,158(sp)
10004614:	d8802915 	stw	r2,164(sp)
10004618:	dc802c17 	ldw	r18,176(sp)
1000461c:	d8002a15 	stw	zero,168(sp)
10004620:	003baf06 	br	100034e0 <__alt_data_end+0xf80034e0>
10004624:	d8c02e17 	ldw	r3,184(sp)
10004628:	d9002e17 	ldw	r4,184(sp)
1000462c:	d9402e17 	ldw	r5,184(sp)
10004630:	18c00017 	ldw	r3,0(r3)
10004634:	21000117 	ldw	r4,4(r4)
10004638:	29400204 	addi	r5,r5,8
1000463c:	d8c03615 	stw	r3,216(sp)
10004640:	d9003815 	stw	r4,224(sp)
10004644:	d9402e15 	stw	r5,184(sp)
10004648:	003b5006 	br	1000338c <__alt_data_end+0xf800338c>
1000464c:	ac400007 	ldb	r17,0(r21)
10004650:	003a2806 	br	10002ef4 <__alt_data_end+0xf8002ef4>
10004654:	9080100c 	andi	r2,r18,64
10004658:	1000a826 	beq	r2,zero,100048fc <___vfprintf_internal_r+0x1b90>
1000465c:	d8c02e17 	ldw	r3,184(sp)
10004660:	002d883a 	mov	r22,zero
10004664:	1cc0000b 	ldhu	r19,0(r3)
10004668:	18c00104 	addi	r3,r3,4
1000466c:	d8c02e15 	stw	r3,184(sp)
10004670:	003caf06 	br	10003930 <__alt_data_end+0xf8003930>
10004674:	d9002e17 	ldw	r4,184(sp)
10004678:	d9402a17 	ldw	r5,168(sp)
1000467c:	002d883a 	mov	r22,zero
10004680:	20800104 	addi	r2,r4,4
10004684:	24c00017 	ldw	r19,0(r4)
10004688:	283ebb0e 	bge	r5,zero,10004178 <__alt_data_end+0xf8004178>
1000468c:	003ef106 	br	10004254 <__alt_data_end+0xf8004254>
10004690:	9080040c 	andi	r2,r18,16
10004694:	1000921e 	bne	r2,zero,100048e0 <___vfprintf_internal_r+0x1b74>
10004698:	9480100c 	andi	r18,r18,64
1000469c:	90013926 	beq	r18,zero,10004b84 <___vfprintf_internal_r+0x1e18>
100046a0:	d9402e17 	ldw	r5,184(sp)
100046a4:	d8c02f17 	ldw	r3,188(sp)
100046a8:	28800017 	ldw	r2,0(r5)
100046ac:	29400104 	addi	r5,r5,4
100046b0:	d9402e15 	stw	r5,184(sp)
100046b4:	10c0000d 	sth	r3,0(r2)
100046b8:	0039e406 	br	10002e4c <__alt_data_end+0xf8002e4c>
100046bc:	9080100c 	andi	r2,r18,64
100046c0:	10008026 	beq	r2,zero,100048c4 <___vfprintf_internal_r+0x1b58>
100046c4:	d8802e17 	ldw	r2,184(sp)
100046c8:	14c0000f 	ldh	r19,0(r2)
100046cc:	10800104 	addi	r2,r2,4
100046d0:	d8802e15 	stw	r2,184(sp)
100046d4:	982dd7fa 	srai	r22,r19,31
100046d8:	b005883a 	mov	r2,r22
100046dc:	003af706 	br	100032bc <__alt_data_end+0xf80032bc>
100046e0:	9080100c 	andi	r2,r18,64
100046e4:	d8002785 	stb	zero,158(sp)
100046e8:	10008a1e 	bne	r2,zero,10004914 <___vfprintf_internal_r+0x1ba8>
100046ec:	d9002e17 	ldw	r4,184(sp)
100046f0:	d9402a17 	ldw	r5,168(sp)
100046f4:	002d883a 	mov	r22,zero
100046f8:	20800104 	addi	r2,r4,4
100046fc:	24c00017 	ldw	r19,0(r4)
10004700:	283e4b0e 	bge	r5,zero,10004030 <__alt_data_end+0xf8004030>
10004704:	9d86b03a 	or	r3,r19,r22
10004708:	d8802e15 	stw	r2,184(sp)
1000470c:	183e4c1e 	bne	r3,zero,10004040 <__alt_data_end+0xf8004040>
10004710:	0039883a 	mov	fp,zero
10004714:	0005883a 	mov	r2,zero
10004718:	003d4006 	br	10003c1c <__alt_data_end+0xf8003c1c>
1000471c:	01440074 	movhi	r5,4097
10004720:	294a4584 	addi	r5,r5,10518
10004724:	d9402c15 	stw	r5,176(sp)
10004728:	d9402c17 	ldw	r5,176(sp)
1000472c:	1c47883a 	add	r3,r3,r17
10004730:	10800044 	addi	r2,r2,1
10004734:	41400015 	stw	r5,0(r8)
10004738:	44400115 	stw	r17,4(r8)
1000473c:	d8c02015 	stw	r3,128(sp)
10004740:	d8801f15 	stw	r2,124(sp)
10004744:	010001c4 	movi	r4,7
10004748:	20bec816 	blt	r4,r2,1000426c <__alt_data_end+0xf800426c>
1000474c:	42000204 	addi	r8,r8,8
10004750:	003ecd06 	br	10004288 <__alt_data_end+0xf8004288>
10004754:	d9002a17 	ldw	r4,168(sp)
10004758:	d8002785 	stb	zero,158(sp)
1000475c:	203d2d16 	blt	r4,zero,10003c14 <__alt_data_end+0xf8003c14>
10004760:	00bfdfc4 	movi	r2,-129
10004764:	90a4703a 	and	r18,r18,r2
10004768:	003a6106 	br	100030f0 <__alt_data_end+0xf80030f0>
1000476c:	01040074 	movhi	r4,4097
10004770:	210a4584 	addi	r4,r4,10518
10004774:	d9002c15 	stw	r4,176(sp)
10004778:	003bea06 	br	10003724 <__alt_data_end+0xf8003724>
1000477c:	d9002d17 	ldw	r4,180(sp)
10004780:	d9801e04 	addi	r6,sp,120
10004784:	b80b883a 	mov	r5,r23
10004788:	000a54c0 	call	1000a54c <__sprint_r>
1000478c:	103a7b1e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
10004790:	d8c02017 	ldw	r3,128(sp)
10004794:	da000404 	addi	r8,sp,16
10004798:	003d4106 	br	10003ca0 <__alt_data_end+0xf8003ca0>
1000479c:	d8801f17 	ldw	r2,124(sp)
100047a0:	01440074 	movhi	r5,4097
100047a4:	01000044 	movi	r4,1
100047a8:	18c00044 	addi	r3,r3,1
100047ac:	10800044 	addi	r2,r2,1
100047b0:	294a4504 	addi	r5,r5,10516
100047b4:	41000115 	stw	r4,4(r8)
100047b8:	41400015 	stw	r5,0(r8)
100047bc:	d8c02015 	stw	r3,128(sp)
100047c0:	d8801f15 	stw	r2,124(sp)
100047c4:	010001c4 	movi	r4,7
100047c8:	20805c16 	blt	r4,r2,1000493c <___vfprintf_internal_r+0x1bd0>
100047cc:	42000204 	addi	r8,r8,8
100047d0:	8800041e 	bne	r17,zero,100047e4 <___vfprintf_internal_r+0x1a78>
100047d4:	d8803317 	ldw	r2,204(sp)
100047d8:	1000021e 	bne	r2,zero,100047e4 <___vfprintf_internal_r+0x1a78>
100047dc:	9080004c 	andi	r2,r18,1
100047e0:	103be726 	beq	r2,zero,10003780 <__alt_data_end+0xf8003780>
100047e4:	d9003717 	ldw	r4,220(sp)
100047e8:	d8801f17 	ldw	r2,124(sp)
100047ec:	d9403417 	ldw	r5,208(sp)
100047f0:	20c7883a 	add	r3,r4,r3
100047f4:	10800044 	addi	r2,r2,1
100047f8:	41000115 	stw	r4,4(r8)
100047fc:	41400015 	stw	r5,0(r8)
10004800:	d8c02015 	stw	r3,128(sp)
10004804:	d8801f15 	stw	r2,124(sp)
10004808:	010001c4 	movi	r4,7
1000480c:	20812116 	blt	r4,r2,10004c94 <___vfprintf_internal_r+0x1f28>
10004810:	42000204 	addi	r8,r8,8
10004814:	0463c83a 	sub	r17,zero,r17
10004818:	0440730e 	bge	zero,r17,100049e8 <___vfprintf_internal_r+0x1c7c>
1000481c:	05800404 	movi	r22,16
10004820:	b440860e 	bge	r22,r17,10004a3c <___vfprintf_internal_r+0x1cd0>
10004824:	01440074 	movhi	r5,4097
10004828:	294a4584 	addi	r5,r5,10518
1000482c:	d9402c15 	stw	r5,176(sp)
10004830:	070001c4 	movi	fp,7
10004834:	dcc02d17 	ldw	r19,180(sp)
10004838:	00000306 	br	10004848 <___vfprintf_internal_r+0x1adc>
1000483c:	42000204 	addi	r8,r8,8
10004840:	8c7ffc04 	addi	r17,r17,-16
10004844:	b440800e 	bge	r22,r17,10004a48 <___vfprintf_internal_r+0x1cdc>
10004848:	18c00404 	addi	r3,r3,16
1000484c:	10800044 	addi	r2,r2,1
10004850:	45000015 	stw	r20,0(r8)
10004854:	45800115 	stw	r22,4(r8)
10004858:	d8c02015 	stw	r3,128(sp)
1000485c:	d8801f15 	stw	r2,124(sp)
10004860:	e0bff60e 	bge	fp,r2,1000483c <__alt_data_end+0xf800483c>
10004864:	d9801e04 	addi	r6,sp,120
10004868:	b80b883a 	mov	r5,r23
1000486c:	9809883a 	mov	r4,r19
10004870:	000a54c0 	call	1000a54c <__sprint_r>
10004874:	103a411e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
10004878:	d8c02017 	ldw	r3,128(sp)
1000487c:	d8801f17 	ldw	r2,124(sp)
10004880:	da000404 	addi	r8,sp,16
10004884:	003fee06 	br	10004840 <__alt_data_end+0xf8004840>
10004888:	00bfffc4 	movi	r2,-1
1000488c:	003a3f06 	br	1000318c <__alt_data_end+0xf800318c>
10004890:	008011c4 	movi	r2,71
10004894:	1440b816 	blt	r2,r17,10004b78 <___vfprintf_internal_r+0x1e0c>
10004898:	04040074 	movhi	r16,4097
1000489c:	840a3704 	addi	r16,r16,10460
100048a0:	00c000c4 	movi	r3,3
100048a4:	00bfdfc4 	movi	r2,-129
100048a8:	d8c02915 	stw	r3,164(sp)
100048ac:	90a4703a 	and	r18,r18,r2
100048b0:	df002783 	ldbu	fp,158(sp)
100048b4:	d8c02b15 	stw	r3,172(sp)
100048b8:	d8002a15 	stw	zero,168(sp)
100048bc:	d8003215 	stw	zero,200(sp)
100048c0:	003b0706 	br	100034e0 <__alt_data_end+0xf80034e0>
100048c4:	d8c02e17 	ldw	r3,184(sp)
100048c8:	1cc00017 	ldw	r19,0(r3)
100048cc:	18c00104 	addi	r3,r3,4
100048d0:	d8c02e15 	stw	r3,184(sp)
100048d4:	982dd7fa 	srai	r22,r19,31
100048d8:	b005883a 	mov	r2,r22
100048dc:	003a7706 	br	100032bc <__alt_data_end+0xf80032bc>
100048e0:	d8c02e17 	ldw	r3,184(sp)
100048e4:	d9002f17 	ldw	r4,188(sp)
100048e8:	18800017 	ldw	r2,0(r3)
100048ec:	18c00104 	addi	r3,r3,4
100048f0:	d8c02e15 	stw	r3,184(sp)
100048f4:	11000015 	stw	r4,0(r2)
100048f8:	00395406 	br	10002e4c <__alt_data_end+0xf8002e4c>
100048fc:	d9002e17 	ldw	r4,184(sp)
10004900:	002d883a 	mov	r22,zero
10004904:	24c00017 	ldw	r19,0(r4)
10004908:	21000104 	addi	r4,r4,4
1000490c:	d9002e15 	stw	r4,184(sp)
10004910:	003c0706 	br	10003930 <__alt_data_end+0xf8003930>
10004914:	d9402e17 	ldw	r5,184(sp)
10004918:	d8c02a17 	ldw	r3,168(sp)
1000491c:	002d883a 	mov	r22,zero
10004920:	28800104 	addi	r2,r5,4
10004924:	2cc0000b 	ldhu	r19,0(r5)
10004928:	183dc10e 	bge	r3,zero,10004030 <__alt_data_end+0xf8004030>
1000492c:	003f7506 	br	10004704 <__alt_data_end+0xf8004704>
10004930:	04040074 	movhi	r16,4097
10004934:	840a3504 	addi	r16,r16,10452
10004938:	003aa706 	br	100033d8 <__alt_data_end+0xf80033d8>
1000493c:	d9002d17 	ldw	r4,180(sp)
10004940:	d9801e04 	addi	r6,sp,120
10004944:	b80b883a 	mov	r5,r23
10004948:	000a54c0 	call	1000a54c <__sprint_r>
1000494c:	103a0b1e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
10004950:	dc402617 	ldw	r17,152(sp)
10004954:	d8c02017 	ldw	r3,128(sp)
10004958:	da000404 	addi	r8,sp,16
1000495c:	003f9c06 	br	100047d0 <__alt_data_end+0xf80047d0>
10004960:	ac400043 	ldbu	r17,1(r21)
10004964:	84000814 	ori	r16,r16,32
10004968:	ad400044 	addi	r21,r21,1
1000496c:	8c403fcc 	andi	r17,r17,255
10004970:	8c40201c 	xori	r17,r17,128
10004974:	8c7fe004 	addi	r17,r17,-128
10004978:	00395e06 	br	10002ef4 <__alt_data_end+0xf8002ef4>
1000497c:	d8c02e15 	stw	r3,184(sp)
10004980:	0039883a 	mov	fp,zero
10004984:	003e3506 	br	1000425c <__alt_data_end+0xf800425c>
10004988:	d9002d17 	ldw	r4,180(sp)
1000498c:	d9801e04 	addi	r6,sp,120
10004990:	b80b883a 	mov	r5,r23
10004994:	000a54c0 	call	1000a54c <__sprint_r>
10004998:	1039f81e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
1000499c:	d8c02017 	ldw	r3,128(sp)
100049a0:	da000404 	addi	r8,sp,16
100049a4:	003cd006 	br	10003ce8 <__alt_data_end+0xf8003ce8>
100049a8:	8009883a 	mov	r4,r16
100049ac:	df003d15 	stw	fp,244(sp)
100049b0:	0002cd40 	call	10002cd4 <strlen>
100049b4:	d8802b15 	stw	r2,172(sp)
100049b8:	da003d17 	ldw	r8,244(sp)
100049bc:	103c200e 	bge	r2,zero,10003a40 <__alt_data_end+0xf8003a40>
100049c0:	0005883a 	mov	r2,zero
100049c4:	003c1e06 	br	10003a40 <__alt_data_end+0xf8003a40>
100049c8:	d9002d17 	ldw	r4,180(sp)
100049cc:	d9801e04 	addi	r6,sp,120
100049d0:	b80b883a 	mov	r5,r23
100049d4:	000a54c0 	call	1000a54c <__sprint_r>
100049d8:	1039e81e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
100049dc:	d8c02017 	ldw	r3,128(sp)
100049e0:	d8801f17 	ldw	r2,124(sp)
100049e4:	da000404 	addi	r8,sp,16
100049e8:	d9403317 	ldw	r5,204(sp)
100049ec:	10800044 	addi	r2,r2,1
100049f0:	44000015 	stw	r16,0(r8)
100049f4:	28c7883a 	add	r3,r5,r3
100049f8:	003b5b06 	br	10003768 <__alt_data_end+0xf8003768>
100049fc:	01040074 	movhi	r4,4097
10004a00:	210a4984 	addi	r4,r4,10534
10004a04:	d9003515 	stw	r4,212(sp)
10004a08:	003af206 	br	100035d4 <__alt_data_end+0xf80035d4>
10004a0c:	013fffc4 	movi	r4,-1
10004a10:	003a0806 	br	10003234 <__alt_data_end+0xf8003234>
10004a14:	0023883a 	mov	r17,zero
10004a18:	003d9d06 	br	10004090 <__alt_data_end+0xf8004090>
10004a1c:	d9002d17 	ldw	r4,180(sp)
10004a20:	d9801e04 	addi	r6,sp,120
10004a24:	b80b883a 	mov	r5,r23
10004a28:	000a54c0 	call	1000a54c <__sprint_r>
10004a2c:	1039d31e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
10004a30:	d8c02017 	ldw	r3,128(sp)
10004a34:	da000404 	addi	r8,sp,16
10004a38:	003d9406 	br	1000408c <__alt_data_end+0xf800408c>
10004a3c:	01040074 	movhi	r4,4097
10004a40:	210a4584 	addi	r4,r4,10518
10004a44:	d9002c15 	stw	r4,176(sp)
10004a48:	d9002c17 	ldw	r4,176(sp)
10004a4c:	1c47883a 	add	r3,r3,r17
10004a50:	10800044 	addi	r2,r2,1
10004a54:	41000015 	stw	r4,0(r8)
10004a58:	44400115 	stw	r17,4(r8)
10004a5c:	d8c02015 	stw	r3,128(sp)
10004a60:	d8801f15 	stw	r2,124(sp)
10004a64:	010001c4 	movi	r4,7
10004a68:	20bfd716 	blt	r4,r2,100049c8 <__alt_data_end+0xf80049c8>
10004a6c:	42000204 	addi	r8,r8,8
10004a70:	003fdd06 	br	100049e8 <__alt_data_end+0xf80049e8>
10004a74:	d9002d17 	ldw	r4,180(sp)
10004a78:	d9801e04 	addi	r6,sp,120
10004a7c:	b80b883a 	mov	r5,r23
10004a80:	000a54c0 	call	1000a54c <__sprint_r>
10004a84:	1039bd1e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
10004a88:	d8802617 	ldw	r2,152(sp)
10004a8c:	d8c02017 	ldw	r3,128(sp)
10004a90:	da000404 	addi	r8,sp,16
10004a94:	003e1006 	br	100042d8 <__alt_data_end+0xf80042d8>
10004a98:	00800044 	movi	r2,1
10004a9c:	10803fcc 	andi	r2,r2,255
10004aa0:	00c00044 	movi	r3,1
10004aa4:	10fa0d26 	beq	r2,r3,100032dc <__alt_data_end+0xf80032dc>
10004aa8:	00c00084 	movi	r3,2
10004aac:	10fbaf26 	beq	r2,r3,1000396c <__alt_data_end+0xf800396c>
10004ab0:	003a6d06 	br	10003468 <__alt_data_end+0xf8003468>
10004ab4:	01040074 	movhi	r4,4097
10004ab8:	210a4984 	addi	r4,r4,10534
10004abc:	d9003515 	stw	r4,212(sp)
10004ac0:	003b5406 	br	10003814 <__alt_data_end+0xf8003814>
10004ac4:	d8802a17 	ldw	r2,168(sp)
10004ac8:	00c00184 	movi	r3,6
10004acc:	1880012e 	bgeu	r3,r2,10004ad4 <___vfprintf_internal_r+0x1d68>
10004ad0:	1805883a 	mov	r2,r3
10004ad4:	d8802b15 	stw	r2,172(sp)
10004ad8:	1000ef16 	blt	r2,zero,10004e98 <___vfprintf_internal_r+0x212c>
10004adc:	04040074 	movhi	r16,4097
10004ae0:	d8802915 	stw	r2,164(sp)
10004ae4:	dcc02e15 	stw	r19,184(sp)
10004ae8:	d8002a15 	stw	zero,168(sp)
10004aec:	d8003215 	stw	zero,200(sp)
10004af0:	840a4304 	addi	r16,r16,10508
10004af4:	0039883a 	mov	fp,zero
10004af8:	003a8006 	br	100034fc <__alt_data_end+0xf80034fc>
10004afc:	0021883a 	mov	r16,zero
10004b00:	003e0706 	br	10004320 <__alt_data_end+0xf8004320>
10004b04:	d9002d17 	ldw	r4,180(sp)
10004b08:	d9801e04 	addi	r6,sp,120
10004b0c:	b80b883a 	mov	r5,r23
10004b10:	000a54c0 	call	1000a54c <__sprint_r>
10004b14:	1039991e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
10004b18:	d8802617 	ldw	r2,152(sp)
10004b1c:	d9403317 	ldw	r5,204(sp)
10004b20:	d8c02017 	ldw	r3,128(sp)
10004b24:	da000404 	addi	r8,sp,16
10004b28:	2885c83a 	sub	r2,r5,r2
10004b2c:	003dfb06 	br	1000431c <__alt_data_end+0xf800431c>
10004b30:	9080004c 	andi	r2,r18,1
10004b34:	103e8f1e 	bne	r2,zero,10004574 <__alt_data_end+0xf8004574>
10004b38:	d8802117 	ldw	r2,132(sp)
10004b3c:	003e9e06 	br	100045b8 <__alt_data_end+0xf80045b8>
10004b40:	1025883a 	mov	r18,r2
10004b44:	0039883a 	mov	fp,zero
10004b48:	00800084 	movi	r2,2
10004b4c:	003fd306 	br	10004a9c <__alt_data_end+0xf8004a9c>
10004b50:	07000b44 	movi	fp,45
10004b54:	df002785 	stb	fp,158(sp)
10004b58:	003a1b06 	br	100033c8 <__alt_data_end+0xf80033c8>
10004b5c:	00c00b44 	movi	r3,45
10004b60:	d8c02785 	stb	r3,158(sp)
10004b64:	d8802915 	stw	r2,164(sp)
10004b68:	dc802c17 	ldw	r18,176(sp)
10004b6c:	d8002a15 	stw	zero,168(sp)
10004b70:	07000b44 	movi	fp,45
10004b74:	003a5e06 	br	100034f0 <__alt_data_end+0xf80034f0>
10004b78:	04040074 	movhi	r16,4097
10004b7c:	840a3804 	addi	r16,r16,10464
10004b80:	003f4706 	br	100048a0 <__alt_data_end+0xf80048a0>
10004b84:	d9002e17 	ldw	r4,184(sp)
10004b88:	d9402f17 	ldw	r5,188(sp)
10004b8c:	20800017 	ldw	r2,0(r4)
10004b90:	21000104 	addi	r4,r4,4
10004b94:	d9002e15 	stw	r4,184(sp)
10004b98:	11400015 	stw	r5,0(r2)
10004b9c:	0038ab06 	br	10002e4c <__alt_data_end+0xf8002e4c>
10004ba0:	dd802617 	ldw	r22,152(sp)
10004ba4:	00bfff44 	movi	r2,-3
10004ba8:	b0801c16 	blt	r22,r2,10004c1c <___vfprintf_internal_r+0x1eb0>
10004bac:	d9402a17 	ldw	r5,168(sp)
10004bb0:	2d801a16 	blt	r5,r22,10004c1c <___vfprintf_internal_r+0x1eb0>
10004bb4:	dd803215 	stw	r22,200(sp)
10004bb8:	003e8906 	br	100045e0 <__alt_data_end+0xf80045e0>
10004bbc:	01040074 	movhi	r4,4097
10004bc0:	210a4584 	addi	r4,r4,10518
10004bc4:	d9002c15 	stw	r4,176(sp)
10004bc8:	003c9106 	br	10003e10 <__alt_data_end+0xf8003e10>
10004bcc:	e005883a 	mov	r2,fp
10004bd0:	003e7906 	br	100045b8 <__alt_data_end+0xf80045b8>
10004bd4:	d9002a17 	ldw	r4,168(sp)
10004bd8:	df002783 	ldbu	fp,158(sp)
10004bdc:	dcc02e15 	stw	r19,184(sp)
10004be0:	d9002915 	stw	r4,164(sp)
10004be4:	d9002b15 	stw	r4,172(sp)
10004be8:	d8002a15 	stw	zero,168(sp)
10004bec:	d8003215 	stw	zero,200(sp)
10004bf0:	003a3b06 	br	100034e0 <__alt_data_end+0xf80034e0>
10004bf4:	9080004c 	andi	r2,r18,1
10004bf8:	0039883a 	mov	fp,zero
10004bfc:	10000426 	beq	r2,zero,10004c10 <___vfprintf_internal_r+0x1ea4>
10004c00:	00800c04 	movi	r2,48
10004c04:	dc001dc4 	addi	r16,sp,119
10004c08:	d8801dc5 	stb	r2,119(sp)
10004c0c:	003b6406 	br	100039a0 <__alt_data_end+0xf80039a0>
10004c10:	d8002b15 	stw	zero,172(sp)
10004c14:	dc001e04 	addi	r16,sp,120
10004c18:	003a2b06 	br	100034c8 <__alt_data_end+0xf80034c8>
10004c1c:	8c7fff84 	addi	r17,r17,-2
10004c20:	b5bfffc4 	addi	r22,r22,-1
10004c24:	dd802615 	stw	r22,152(sp)
10004c28:	dc4022c5 	stb	r17,139(sp)
10004c2c:	b000bf16 	blt	r22,zero,10004f2c <___vfprintf_internal_r+0x21c0>
10004c30:	00800ac4 	movi	r2,43
10004c34:	d8802305 	stb	r2,140(sp)
10004c38:	00800244 	movi	r2,9
10004c3c:	15807016 	blt	r2,r22,10004e00 <___vfprintf_internal_r+0x2094>
10004c40:	00800c04 	movi	r2,48
10004c44:	b5800c04 	addi	r22,r22,48
10004c48:	d8802345 	stb	r2,141(sp)
10004c4c:	dd802385 	stb	r22,142(sp)
10004c50:	d88023c4 	addi	r2,sp,143
10004c54:	df0022c4 	addi	fp,sp,139
10004c58:	d8c03317 	ldw	r3,204(sp)
10004c5c:	1739c83a 	sub	fp,r2,fp
10004c60:	d9003317 	ldw	r4,204(sp)
10004c64:	e0c7883a 	add	r3,fp,r3
10004c68:	df003a15 	stw	fp,232(sp)
10004c6c:	d8c02b15 	stw	r3,172(sp)
10004c70:	00800044 	movi	r2,1
10004c74:	1100b30e 	bge	r2,r4,10004f44 <___vfprintf_internal_r+0x21d8>
10004c78:	d8c02b17 	ldw	r3,172(sp)
10004c7c:	18c00044 	addi	r3,r3,1
10004c80:	d8c02b15 	stw	r3,172(sp)
10004c84:	1805883a 	mov	r2,r3
10004c88:	1800ac16 	blt	r3,zero,10004f3c <___vfprintf_internal_r+0x21d0>
10004c8c:	d8003215 	stw	zero,200(sp)
10004c90:	003e5d06 	br	10004608 <__alt_data_end+0xf8004608>
10004c94:	d9002d17 	ldw	r4,180(sp)
10004c98:	d9801e04 	addi	r6,sp,120
10004c9c:	b80b883a 	mov	r5,r23
10004ca0:	000a54c0 	call	1000a54c <__sprint_r>
10004ca4:	1039351e 	bne	r2,zero,1000317c <__alt_data_end+0xf800317c>
10004ca8:	dc402617 	ldw	r17,152(sp)
10004cac:	d8c02017 	ldw	r3,128(sp)
10004cb0:	d8801f17 	ldw	r2,124(sp)
10004cb4:	da000404 	addi	r8,sp,16
10004cb8:	003ed606 	br	10004814 <__alt_data_end+0xf8004814>
10004cbc:	182b883a 	mov	r21,r3
10004cc0:	d8002a15 	stw	zero,168(sp)
10004cc4:	00388c06 	br	10002ef8 <__alt_data_end+0xf8002ef8>
10004cc8:	d8802a17 	ldw	r2,168(sp)
10004ccc:	103e071e 	bne	r2,zero,100044ec <__alt_data_end+0xf80044ec>
10004cd0:	dc002a15 	stw	r16,168(sp)
10004cd4:	003e0506 	br	100044ec <__alt_data_end+0xf80044ec>
10004cd8:	d9002a17 	ldw	r4,168(sp)
10004cdc:	20c00044 	addi	r3,r4,1
10004ce0:	003e0f06 	br	10004520 <__alt_data_end+0xf8004520>
10004ce4:	01400184 	movi	r5,6
10004ce8:	d9402a15 	stw	r5,168(sp)
10004cec:	003dff06 	br	100044ec <__alt_data_end+0xf80044ec>
10004cf0:	d8802104 	addi	r2,sp,132
10004cf4:	d8800315 	stw	r2,12(sp)
10004cf8:	d8802504 	addi	r2,sp,148
10004cfc:	d8800215 	stw	r2,8(sp)
10004d00:	d8802604 	addi	r2,sp,152
10004d04:	d8800115 	stw	r2,4(sp)
10004d08:	d8802a17 	ldw	r2,168(sp)
10004d0c:	d9403617 	ldw	r5,216(sp)
10004d10:	d9002d17 	ldw	r4,180(sp)
10004d14:	d8800015 	stw	r2,0(sp)
10004d18:	01c000c4 	movi	r7,3
10004d1c:	980d883a 	mov	r6,r19
10004d20:	da003d15 	stw	r8,244(sp)
10004d24:	000549c0 	call	1000549c <_dtoa_r>
10004d28:	d8c02a17 	ldw	r3,168(sp)
10004d2c:	da003d17 	ldw	r8,244(sp)
10004d30:	1021883a 	mov	r16,r2
10004d34:	10f9883a 	add	fp,r2,r3
10004d38:	81000007 	ldb	r4,0(r16)
10004d3c:	00800c04 	movi	r2,48
10004d40:	20805e26 	beq	r4,r2,10004ebc <___vfprintf_internal_r+0x2150>
10004d44:	d8c02617 	ldw	r3,152(sp)
10004d48:	e0f9883a 	add	fp,fp,r3
10004d4c:	003e0a06 	br	10004578 <__alt_data_end+0xf8004578>
10004d50:	00c00b44 	movi	r3,45
10004d54:	24e0003c 	xorhi	r19,r4,32768
10004d58:	d8c02905 	stb	r3,164(sp)
10004d5c:	003de906 	br	10004504 <__alt_data_end+0xf8004504>
10004d60:	d8c03217 	ldw	r3,200(sp)
10004d64:	00c07a0e 	bge	zero,r3,10004f50 <___vfprintf_internal_r+0x21e4>
10004d68:	00800044 	movi	r2,1
10004d6c:	d9003317 	ldw	r4,204(sp)
10004d70:	1105883a 	add	r2,r2,r4
10004d74:	d8802b15 	stw	r2,172(sp)
10004d78:	10004e16 	blt	r2,zero,10004eb4 <___vfprintf_internal_r+0x2148>
10004d7c:	044019c4 	movi	r17,103
10004d80:	003e2106 	br	10004608 <__alt_data_end+0xf8004608>
10004d84:	d9002a17 	ldw	r4,168(sp)
10004d88:	d8802104 	addi	r2,sp,132
10004d8c:	d8800315 	stw	r2,12(sp)
10004d90:	d9000015 	stw	r4,0(sp)
10004d94:	d8802504 	addi	r2,sp,148
10004d98:	d9403617 	ldw	r5,216(sp)
10004d9c:	d9002d17 	ldw	r4,180(sp)
10004da0:	d8800215 	stw	r2,8(sp)
10004da4:	d8802604 	addi	r2,sp,152
10004da8:	d8800115 	stw	r2,4(sp)
10004dac:	01c000c4 	movi	r7,3
10004db0:	980d883a 	mov	r6,r19
10004db4:	da003d15 	stw	r8,244(sp)
10004db8:	000549c0 	call	1000549c <_dtoa_r>
10004dbc:	d8c02a17 	ldw	r3,168(sp)
10004dc0:	da003d17 	ldw	r8,244(sp)
10004dc4:	1021883a 	mov	r16,r2
10004dc8:	00801184 	movi	r2,70
10004dcc:	80f9883a 	add	fp,r16,r3
10004dd0:	88bfd926 	beq	r17,r2,10004d38 <__alt_data_end+0xf8004d38>
10004dd4:	003de806 	br	10004578 <__alt_data_end+0xf8004578>
10004dd8:	d9002a17 	ldw	r4,168(sp)
10004ddc:	00c04d0e 	bge	zero,r3,10004f14 <___vfprintf_internal_r+0x21a8>
10004de0:	2000441e 	bne	r4,zero,10004ef4 <___vfprintf_internal_r+0x2188>
10004de4:	9480004c 	andi	r18,r18,1
10004de8:	9000421e 	bne	r18,zero,10004ef4 <___vfprintf_internal_r+0x2188>
10004dec:	1805883a 	mov	r2,r3
10004df0:	18006f16 	blt	r3,zero,10004fb0 <___vfprintf_internal_r+0x2244>
10004df4:	d8c03217 	ldw	r3,200(sp)
10004df8:	d8c02b15 	stw	r3,172(sp)
10004dfc:	003e0206 	br	10004608 <__alt_data_end+0xf8004608>
10004e00:	df0022c4 	addi	fp,sp,139
10004e04:	dc002a15 	stw	r16,168(sp)
10004e08:	4027883a 	mov	r19,r8
10004e0c:	e021883a 	mov	r16,fp
10004e10:	b009883a 	mov	r4,r22
10004e14:	01400284 	movi	r5,10
10004e18:	0002a3c0 	call	10002a3c <__modsi3>
10004e1c:	10800c04 	addi	r2,r2,48
10004e20:	843fffc4 	addi	r16,r16,-1
10004e24:	b009883a 	mov	r4,r22
10004e28:	01400284 	movi	r5,10
10004e2c:	80800005 	stb	r2,0(r16)
10004e30:	00029b80 	call	100029b8 <__divsi3>
10004e34:	102d883a 	mov	r22,r2
10004e38:	00800244 	movi	r2,9
10004e3c:	15bff416 	blt	r2,r22,10004e10 <__alt_data_end+0xf8004e10>
10004e40:	9811883a 	mov	r8,r19
10004e44:	b0800c04 	addi	r2,r22,48
10004e48:	8027883a 	mov	r19,r16
10004e4c:	997fffc4 	addi	r5,r19,-1
10004e50:	98bfffc5 	stb	r2,-1(r19)
10004e54:	dc002a17 	ldw	r16,168(sp)
10004e58:	2f006d2e 	bgeu	r5,fp,10005010 <___vfprintf_internal_r+0x22a4>
10004e5c:	d9c02384 	addi	r7,sp,142
10004e60:	3ccfc83a 	sub	r7,r7,r19
10004e64:	d9002344 	addi	r4,sp,141
10004e68:	e1cf883a 	add	r7,fp,r7
10004e6c:	00000106 	br	10004e74 <___vfprintf_internal_r+0x2108>
10004e70:	28800003 	ldbu	r2,0(r5)
10004e74:	20800005 	stb	r2,0(r4)
10004e78:	21000044 	addi	r4,r4,1
10004e7c:	29400044 	addi	r5,r5,1
10004e80:	393ffb1e 	bne	r7,r4,10004e70 <__alt_data_end+0xf8004e70>
10004e84:	d8802304 	addi	r2,sp,140
10004e88:	14c5c83a 	sub	r2,r2,r19
10004e8c:	d8c02344 	addi	r3,sp,141
10004e90:	1885883a 	add	r2,r3,r2
10004e94:	003f7006 	br	10004c58 <__alt_data_end+0xf8004c58>
10004e98:	0005883a 	mov	r2,zero
10004e9c:	003f0f06 	br	10004adc <__alt_data_end+0xf8004adc>
10004ea0:	d8c03217 	ldw	r3,200(sp)
10004ea4:	18c00044 	addi	r3,r3,1
10004ea8:	d8c02b15 	stw	r3,172(sp)
10004eac:	1805883a 	mov	r2,r3
10004eb0:	183fb20e 	bge	r3,zero,10004d7c <__alt_data_end+0xf8004d7c>
10004eb4:	0005883a 	mov	r2,zero
10004eb8:	003fb006 	br	10004d7c <__alt_data_end+0xf8004d7c>
10004ebc:	d9003617 	ldw	r4,216(sp)
10004ec0:	000d883a 	mov	r6,zero
10004ec4:	000f883a 	mov	r7,zero
10004ec8:	980b883a 	mov	r5,r19
10004ecc:	d8c03c15 	stw	r3,240(sp)
10004ed0:	da003d15 	stw	r8,244(sp)
10004ed4:	000e2d00 	call	1000e2d0 <__eqdf2>
10004ed8:	d8c03c17 	ldw	r3,240(sp)
10004edc:	da003d17 	ldw	r8,244(sp)
10004ee0:	103f9826 	beq	r2,zero,10004d44 <__alt_data_end+0xf8004d44>
10004ee4:	00800044 	movi	r2,1
10004ee8:	10c7c83a 	sub	r3,r2,r3
10004eec:	d8c02615 	stw	r3,152(sp)
10004ef0:	003f9506 	br	10004d48 <__alt_data_end+0xf8004d48>
10004ef4:	d9002a17 	ldw	r4,168(sp)
10004ef8:	d8c03217 	ldw	r3,200(sp)
10004efc:	20800044 	addi	r2,r4,1
10004f00:	1885883a 	add	r2,r3,r2
10004f04:	d8802b15 	stw	r2,172(sp)
10004f08:	103dbf0e 	bge	r2,zero,10004608 <__alt_data_end+0xf8004608>
10004f0c:	0005883a 	mov	r2,zero
10004f10:	003dbd06 	br	10004608 <__alt_data_end+0xf8004608>
10004f14:	2000201e 	bne	r4,zero,10004f98 <___vfprintf_internal_r+0x222c>
10004f18:	9480004c 	andi	r18,r18,1
10004f1c:	90001e1e 	bne	r18,zero,10004f98 <___vfprintf_internal_r+0x222c>
10004f20:	00800044 	movi	r2,1
10004f24:	d8802b15 	stw	r2,172(sp)
10004f28:	003db706 	br	10004608 <__alt_data_end+0xf8004608>
10004f2c:	00800b44 	movi	r2,45
10004f30:	05adc83a 	sub	r22,zero,r22
10004f34:	d8802305 	stb	r2,140(sp)
10004f38:	003f3f06 	br	10004c38 <__alt_data_end+0xf8004c38>
10004f3c:	0005883a 	mov	r2,zero
10004f40:	003f5206 	br	10004c8c <__alt_data_end+0xf8004c8c>
10004f44:	90a4703a 	and	r18,r18,r2
10004f48:	903f4e26 	beq	r18,zero,10004c84 <__alt_data_end+0xf8004c84>
10004f4c:	003f4a06 	br	10004c78 <__alt_data_end+0xf8004c78>
10004f50:	00800084 	movi	r2,2
10004f54:	10c5c83a 	sub	r2,r2,r3
10004f58:	003f8406 	br	10004d6c <__alt_data_end+0xf8004d6c>
10004f5c:	d9402e17 	ldw	r5,184(sp)
10004f60:	d9002e17 	ldw	r4,184(sp)
10004f64:	ac400043 	ldbu	r17,1(r21)
10004f68:	29400017 	ldw	r5,0(r5)
10004f6c:	20800104 	addi	r2,r4,4
10004f70:	d8802e15 	stw	r2,184(sp)
10004f74:	d9402a15 	stw	r5,168(sp)
10004f78:	182b883a 	mov	r21,r3
10004f7c:	283e7b0e 	bge	r5,zero,1000496c <__alt_data_end+0xf800496c>
10004f80:	8c403fcc 	andi	r17,r17,255
10004f84:	017fffc4 	movi	r5,-1
10004f88:	8c40201c 	xori	r17,r17,128
10004f8c:	d9402a15 	stw	r5,168(sp)
10004f90:	8c7fe004 	addi	r17,r17,-128
10004f94:	0037d706 	br	10002ef4 <__alt_data_end+0xf8002ef4>
10004f98:	d8c02a17 	ldw	r3,168(sp)
10004f9c:	18c00084 	addi	r3,r3,2
10004fa0:	d8c02b15 	stw	r3,172(sp)
10004fa4:	1805883a 	mov	r2,r3
10004fa8:	183d970e 	bge	r3,zero,10004608 <__alt_data_end+0xf8004608>
10004fac:	003fd706 	br	10004f0c <__alt_data_end+0xf8004f0c>
10004fb0:	0005883a 	mov	r2,zero
10004fb4:	003f8f06 	br	10004df4 <__alt_data_end+0xf8004df4>
10004fb8:	9080004c 	andi	r2,r18,1
10004fbc:	103f821e 	bne	r2,zero,10004dc8 <__alt_data_end+0xf8004dc8>
10004fc0:	d8802117 	ldw	r2,132(sp)
10004fc4:	1405c83a 	sub	r2,r2,r16
10004fc8:	d8803315 	stw	r2,204(sp)
10004fcc:	b47ef426 	beq	r22,r17,10004ba0 <__alt_data_end+0xf8004ba0>
10004fd0:	dd802617 	ldw	r22,152(sp)
10004fd4:	003f1206 	br	10004c20 <__alt_data_end+0xf8004c20>
10004fd8:	d8c02b03 	ldbu	r3,172(sp)
10004fdc:	d8c02785 	stb	r3,158(sp)
10004fe0:	0038df06 	br	10003360 <__alt_data_end+0xf8003360>
10004fe4:	d8c02b03 	ldbu	r3,172(sp)
10004fe8:	d8c02785 	stb	r3,158(sp)
10004fec:	0038aa06 	br	10003298 <__alt_data_end+0xf8003298>
10004ff0:	d8c02b03 	ldbu	r3,172(sp)
10004ff4:	d8c02785 	stb	r3,158(sp)
10004ff8:	003a4306 	br	10003908 <__alt_data_end+0xf8003908>
10004ffc:	d8c02b03 	ldbu	r3,172(sp)
10005000:	d8c02785 	stb	r3,158(sp)
10005004:	003af506 	br	10003bdc <__alt_data_end+0xf8003bdc>
10005008:	0005883a 	mov	r2,zero
1000500c:	003d7b06 	br	100045fc <__alt_data_end+0xf80045fc>
10005010:	d8802344 	addi	r2,sp,141
10005014:	003f1006 	br	10004c58 <__alt_data_end+0xf8004c58>
10005018:	d8c02b03 	ldbu	r3,172(sp)
1000501c:	d8c02785 	stb	r3,158(sp)
10005020:	0038fd06 	br	10003418 <__alt_data_end+0xf8003418>
10005024:	d8c02b03 	ldbu	r3,172(sp)
10005028:	d8c02785 	stb	r3,158(sp)
1000502c:	003a9706 	br	10003a8c <__alt_data_end+0xf8003a8c>
10005030:	d8c02b03 	ldbu	r3,172(sp)
10005034:	d8c02785 	stb	r3,158(sp)
10005038:	003a1806 	br	1000389c <__alt_data_end+0xf800389c>
1000503c:	d8c02b03 	ldbu	r3,172(sp)
10005040:	d8c02785 	stb	r3,158(sp)
10005044:	003abe06 	br	10003b40 <__alt_data_end+0xf8003b40>

10005048 <__vfprintf_internal>:
10005048:	00840074 	movhi	r2,4097
1000504c:	1091a004 	addi	r2,r2,18048
10005050:	300f883a 	mov	r7,r6
10005054:	280d883a 	mov	r6,r5
10005058:	200b883a 	mov	r5,r4
1000505c:	11000017 	ldw	r4,0(r2)
10005060:	0002d6c1 	jmpi	10002d6c <___vfprintf_internal_r>

10005064 <__sbprintf>:
10005064:	2880030b 	ldhu	r2,12(r5)
10005068:	2ac01917 	ldw	r11,100(r5)
1000506c:	2a80038b 	ldhu	r10,14(r5)
10005070:	2a400717 	ldw	r9,28(r5)
10005074:	2a000917 	ldw	r8,36(r5)
10005078:	defee204 	addi	sp,sp,-1144
1000507c:	00c10004 	movi	r3,1024
10005080:	dc011a15 	stw	r16,1128(sp)
10005084:	10bfff4c 	andi	r2,r2,65533
10005088:	2821883a 	mov	r16,r5
1000508c:	d8cb883a 	add	r5,sp,r3
10005090:	dc811c15 	stw	r18,1136(sp)
10005094:	dc411b15 	stw	r17,1132(sp)
10005098:	dfc11d15 	stw	ra,1140(sp)
1000509c:	2025883a 	mov	r18,r4
100050a0:	d881030d 	sth	r2,1036(sp)
100050a4:	dac11915 	stw	r11,1124(sp)
100050a8:	da81038d 	sth	r10,1038(sp)
100050ac:	da410715 	stw	r9,1052(sp)
100050b0:	da010915 	stw	r8,1060(sp)
100050b4:	dec10015 	stw	sp,1024(sp)
100050b8:	dec10415 	stw	sp,1040(sp)
100050bc:	d8c10215 	stw	r3,1032(sp)
100050c0:	d8c10515 	stw	r3,1044(sp)
100050c4:	d8010615 	stw	zero,1048(sp)
100050c8:	0002d6c0 	call	10002d6c <___vfprintf_internal_r>
100050cc:	1023883a 	mov	r17,r2
100050d0:	10000416 	blt	r2,zero,100050e4 <__sbprintf+0x80>
100050d4:	d9410004 	addi	r5,sp,1024
100050d8:	9009883a 	mov	r4,r18
100050dc:	0006d400 	call	10006d40 <_fflush_r>
100050e0:	10000d1e 	bne	r2,zero,10005118 <__sbprintf+0xb4>
100050e4:	d881030b 	ldhu	r2,1036(sp)
100050e8:	1080100c 	andi	r2,r2,64
100050ec:	10000326 	beq	r2,zero,100050fc <__sbprintf+0x98>
100050f0:	8080030b 	ldhu	r2,12(r16)
100050f4:	10801014 	ori	r2,r2,64
100050f8:	8080030d 	sth	r2,12(r16)
100050fc:	8805883a 	mov	r2,r17
10005100:	dfc11d17 	ldw	ra,1140(sp)
10005104:	dc811c17 	ldw	r18,1136(sp)
10005108:	dc411b17 	ldw	r17,1132(sp)
1000510c:	dc011a17 	ldw	r16,1128(sp)
10005110:	dec11e04 	addi	sp,sp,1144
10005114:	f800283a 	ret
10005118:	047fffc4 	movi	r17,-1
1000511c:	003ff106 	br	100050e4 <__alt_data_end+0xf80050e4>

10005120 <__swsetup_r>:
10005120:	00840074 	movhi	r2,4097
10005124:	defffd04 	addi	sp,sp,-12
10005128:	1091a004 	addi	r2,r2,18048
1000512c:	dc400115 	stw	r17,4(sp)
10005130:	2023883a 	mov	r17,r4
10005134:	11000017 	ldw	r4,0(r2)
10005138:	dc000015 	stw	r16,0(sp)
1000513c:	dfc00215 	stw	ra,8(sp)
10005140:	2821883a 	mov	r16,r5
10005144:	20000226 	beq	r4,zero,10005150 <__swsetup_r+0x30>
10005148:	20800e17 	ldw	r2,56(r4)
1000514c:	10003126 	beq	r2,zero,10005214 <__swsetup_r+0xf4>
10005150:	8080030b 	ldhu	r2,12(r16)
10005154:	10c0020c 	andi	r3,r2,8
10005158:	1009883a 	mov	r4,r2
1000515c:	18000f26 	beq	r3,zero,1000519c <__swsetup_r+0x7c>
10005160:	80c00417 	ldw	r3,16(r16)
10005164:	18001526 	beq	r3,zero,100051bc <__swsetup_r+0x9c>
10005168:	1100004c 	andi	r4,r2,1
1000516c:	20001c1e 	bne	r4,zero,100051e0 <__swsetup_r+0xc0>
10005170:	1080008c 	andi	r2,r2,2
10005174:	1000291e 	bne	r2,zero,1000521c <__swsetup_r+0xfc>
10005178:	80800517 	ldw	r2,20(r16)
1000517c:	80800215 	stw	r2,8(r16)
10005180:	18001c26 	beq	r3,zero,100051f4 <__swsetup_r+0xd4>
10005184:	0005883a 	mov	r2,zero
10005188:	dfc00217 	ldw	ra,8(sp)
1000518c:	dc400117 	ldw	r17,4(sp)
10005190:	dc000017 	ldw	r16,0(sp)
10005194:	dec00304 	addi	sp,sp,12
10005198:	f800283a 	ret
1000519c:	2080040c 	andi	r2,r4,16
100051a0:	10002e26 	beq	r2,zero,1000525c <__swsetup_r+0x13c>
100051a4:	2080010c 	andi	r2,r4,4
100051a8:	10001e1e 	bne	r2,zero,10005224 <__swsetup_r+0x104>
100051ac:	80c00417 	ldw	r3,16(r16)
100051b0:	20800214 	ori	r2,r4,8
100051b4:	8080030d 	sth	r2,12(r16)
100051b8:	183feb1e 	bne	r3,zero,10005168 <__alt_data_end+0xf8005168>
100051bc:	1100a00c 	andi	r4,r2,640
100051c0:	01408004 	movi	r5,512
100051c4:	217fe826 	beq	r4,r5,10005168 <__alt_data_end+0xf8005168>
100051c8:	800b883a 	mov	r5,r16
100051cc:	8809883a 	mov	r4,r17
100051d0:	0007cdc0 	call	10007cdc <__smakebuf_r>
100051d4:	8080030b 	ldhu	r2,12(r16)
100051d8:	80c00417 	ldw	r3,16(r16)
100051dc:	003fe206 	br	10005168 <__alt_data_end+0xf8005168>
100051e0:	80800517 	ldw	r2,20(r16)
100051e4:	80000215 	stw	zero,8(r16)
100051e8:	0085c83a 	sub	r2,zero,r2
100051ec:	80800615 	stw	r2,24(r16)
100051f0:	183fe41e 	bne	r3,zero,10005184 <__alt_data_end+0xf8005184>
100051f4:	80c0030b 	ldhu	r3,12(r16)
100051f8:	0005883a 	mov	r2,zero
100051fc:	1900200c 	andi	r4,r3,128
10005200:	203fe126 	beq	r4,zero,10005188 <__alt_data_end+0xf8005188>
10005204:	18c01014 	ori	r3,r3,64
10005208:	80c0030d 	sth	r3,12(r16)
1000520c:	00bfffc4 	movi	r2,-1
10005210:	003fdd06 	br	10005188 <__alt_data_end+0xf8005188>
10005214:	000712c0 	call	1000712c <__sinit>
10005218:	003fcd06 	br	10005150 <__alt_data_end+0xf8005150>
1000521c:	0005883a 	mov	r2,zero
10005220:	003fd606 	br	1000517c <__alt_data_end+0xf800517c>
10005224:	81400c17 	ldw	r5,48(r16)
10005228:	28000626 	beq	r5,zero,10005244 <__swsetup_r+0x124>
1000522c:	80801004 	addi	r2,r16,64
10005230:	28800326 	beq	r5,r2,10005240 <__swsetup_r+0x120>
10005234:	8809883a 	mov	r4,r17
10005238:	00072a00 	call	100072a0 <_free_r>
1000523c:	8100030b 	ldhu	r4,12(r16)
10005240:	80000c15 	stw	zero,48(r16)
10005244:	80c00417 	ldw	r3,16(r16)
10005248:	00bff6c4 	movi	r2,-37
1000524c:	1108703a 	and	r4,r2,r4
10005250:	80000115 	stw	zero,4(r16)
10005254:	80c00015 	stw	r3,0(r16)
10005258:	003fd506 	br	100051b0 <__alt_data_end+0xf80051b0>
1000525c:	00800244 	movi	r2,9
10005260:	88800015 	stw	r2,0(r17)
10005264:	20801014 	ori	r2,r4,64
10005268:	8080030d 	sth	r2,12(r16)
1000526c:	00bfffc4 	movi	r2,-1
10005270:	003fc506 	br	10005188 <__alt_data_end+0xf8005188>

10005274 <quorem>:
10005274:	defff204 	addi	sp,sp,-56
10005278:	ddc00b15 	stw	r23,44(sp)
1000527c:	20800417 	ldw	r2,16(r4)
10005280:	2dc00417 	ldw	r23,16(r5)
10005284:	dfc00d15 	stw	ra,52(sp)
10005288:	df000c15 	stw	fp,48(sp)
1000528c:	dd800a15 	stw	r22,40(sp)
10005290:	dd400915 	stw	r21,36(sp)
10005294:	dd000815 	stw	r20,32(sp)
10005298:	dcc00715 	stw	r19,28(sp)
1000529c:	dc800615 	stw	r18,24(sp)
100052a0:	dc400515 	stw	r17,20(sp)
100052a4:	dc000415 	stw	r16,16(sp)
100052a8:	15c07a16 	blt	r2,r23,10005494 <quorem+0x220>
100052ac:	bdffffc4 	addi	r23,r23,-1
100052b0:	bde9883a 	add	r20,r23,r23
100052b4:	28c00504 	addi	r3,r5,20
100052b8:	a529883a 	add	r20,r20,r20
100052bc:	1d39883a 	add	fp,r3,r20
100052c0:	24c00504 	addi	r19,r4,20
100052c4:	d9400215 	stw	r5,8(sp)
100052c8:	9d29883a 	add	r20,r19,r20
100052cc:	e1400017 	ldw	r5,0(fp)
100052d0:	d9000015 	stw	r4,0(sp)
100052d4:	a1000017 	ldw	r4,0(r20)
100052d8:	29400044 	addi	r5,r5,1
100052dc:	d8c00115 	stw	r3,4(sp)
100052e0:	dd000315 	stw	r20,12(sp)
100052e4:	0002ab00 	call	10002ab0 <__udivsi3>
100052e8:	1025883a 	mov	r18,r2
100052ec:	10003026 	beq	r2,zero,100053b0 <quorem+0x13c>
100052f0:	dc400117 	ldw	r17,4(sp)
100052f4:	9829883a 	mov	r20,r19
100052f8:	002d883a 	mov	r22,zero
100052fc:	0021883a 	mov	r16,zero
10005300:	8d400017 	ldw	r21,0(r17)
10005304:	900b883a 	mov	r5,r18
10005308:	8c400104 	addi	r17,r17,4
1000530c:	a93fffcc 	andi	r4,r21,65535
10005310:	0002b6c0 	call	10002b6c <__mulsi3>
10005314:	a808d43a 	srli	r4,r21,16
10005318:	900b883a 	mov	r5,r18
1000531c:	15ad883a 	add	r22,r2,r22
10005320:	0002b6c0 	call	10002b6c <__mulsi3>
10005324:	a1000017 	ldw	r4,0(r20)
10005328:	b00cd43a 	srli	r6,r22,16
1000532c:	b0ffffcc 	andi	r3,r22,65535
10005330:	217fffcc 	andi	r5,r4,65535
10005334:	2c21883a 	add	r16,r5,r16
10005338:	80c7c83a 	sub	r3,r16,r3
1000533c:	2008d43a 	srli	r4,r4,16
10005340:	1185883a 	add	r2,r2,r6
10005344:	1821d43a 	srai	r16,r3,16
10005348:	117fffcc 	andi	r5,r2,65535
1000534c:	2149c83a 	sub	r4,r4,r5
10005350:	2421883a 	add	r16,r4,r16
10005354:	8008943a 	slli	r4,r16,16
10005358:	18ffffcc 	andi	r3,r3,65535
1000535c:	102cd43a 	srli	r22,r2,16
10005360:	20c8b03a 	or	r4,r4,r3
10005364:	a1000015 	stw	r4,0(r20)
10005368:	8021d43a 	srai	r16,r16,16
1000536c:	a5000104 	addi	r20,r20,4
10005370:	e47fe32e 	bgeu	fp,r17,10005300 <__alt_data_end+0xf8005300>
10005374:	d8c00317 	ldw	r3,12(sp)
10005378:	18800017 	ldw	r2,0(r3)
1000537c:	10000c1e 	bne	r2,zero,100053b0 <quorem+0x13c>
10005380:	18bfff04 	addi	r2,r3,-4
10005384:	9880082e 	bgeu	r19,r2,100053a8 <quorem+0x134>
10005388:	18ffff17 	ldw	r3,-4(r3)
1000538c:	18000326 	beq	r3,zero,1000539c <quorem+0x128>
10005390:	00000506 	br	100053a8 <quorem+0x134>
10005394:	10c00017 	ldw	r3,0(r2)
10005398:	1800031e 	bne	r3,zero,100053a8 <quorem+0x134>
1000539c:	10bfff04 	addi	r2,r2,-4
100053a0:	bdffffc4 	addi	r23,r23,-1
100053a4:	98bffb36 	bltu	r19,r2,10005394 <__alt_data_end+0xf8005394>
100053a8:	d8c00017 	ldw	r3,0(sp)
100053ac:	1dc00415 	stw	r23,16(r3)
100053b0:	d9400217 	ldw	r5,8(sp)
100053b4:	d9000017 	ldw	r4,0(sp)
100053b8:	00094d80 	call	100094d8 <__mcmp>
100053bc:	10002816 	blt	r2,zero,10005460 <quorem+0x1ec>
100053c0:	dc400117 	ldw	r17,4(sp)
100053c4:	94800044 	addi	r18,r18,1
100053c8:	980d883a 	mov	r6,r19
100053cc:	0007883a 	mov	r3,zero
100053d0:	31000017 	ldw	r4,0(r6)
100053d4:	89400017 	ldw	r5,0(r17)
100053d8:	31800104 	addi	r6,r6,4
100053dc:	20bfffcc 	andi	r2,r4,65535
100053e0:	10c7883a 	add	r3,r2,r3
100053e4:	28bfffcc 	andi	r2,r5,65535
100053e8:	1885c83a 	sub	r2,r3,r2
100053ec:	280ad43a 	srli	r5,r5,16
100053f0:	2008d43a 	srli	r4,r4,16
100053f4:	1007d43a 	srai	r3,r2,16
100053f8:	10bfffcc 	andi	r2,r2,65535
100053fc:	2149c83a 	sub	r4,r4,r5
10005400:	20c9883a 	add	r4,r4,r3
10005404:	200a943a 	slli	r5,r4,16
10005408:	8c400104 	addi	r17,r17,4
1000540c:	2007d43a 	srai	r3,r4,16
10005410:	2884b03a 	or	r2,r5,r2
10005414:	30bfff15 	stw	r2,-4(r6)
10005418:	e47fed2e 	bgeu	fp,r17,100053d0 <__alt_data_end+0xf80053d0>
1000541c:	bdc5883a 	add	r2,r23,r23
10005420:	1085883a 	add	r2,r2,r2
10005424:	9887883a 	add	r3,r19,r2
10005428:	18800017 	ldw	r2,0(r3)
1000542c:	10000c1e 	bne	r2,zero,10005460 <quorem+0x1ec>
10005430:	18bfff04 	addi	r2,r3,-4
10005434:	9880082e 	bgeu	r19,r2,10005458 <quorem+0x1e4>
10005438:	18ffff17 	ldw	r3,-4(r3)
1000543c:	18000326 	beq	r3,zero,1000544c <quorem+0x1d8>
10005440:	00000506 	br	10005458 <quorem+0x1e4>
10005444:	10c00017 	ldw	r3,0(r2)
10005448:	1800031e 	bne	r3,zero,10005458 <quorem+0x1e4>
1000544c:	10bfff04 	addi	r2,r2,-4
10005450:	bdffffc4 	addi	r23,r23,-1
10005454:	98bffb36 	bltu	r19,r2,10005444 <__alt_data_end+0xf8005444>
10005458:	d8c00017 	ldw	r3,0(sp)
1000545c:	1dc00415 	stw	r23,16(r3)
10005460:	9005883a 	mov	r2,r18
10005464:	dfc00d17 	ldw	ra,52(sp)
10005468:	df000c17 	ldw	fp,48(sp)
1000546c:	ddc00b17 	ldw	r23,44(sp)
10005470:	dd800a17 	ldw	r22,40(sp)
10005474:	dd400917 	ldw	r21,36(sp)
10005478:	dd000817 	ldw	r20,32(sp)
1000547c:	dcc00717 	ldw	r19,28(sp)
10005480:	dc800617 	ldw	r18,24(sp)
10005484:	dc400517 	ldw	r17,20(sp)
10005488:	dc000417 	ldw	r16,16(sp)
1000548c:	dec00e04 	addi	sp,sp,56
10005490:	f800283a 	ret
10005494:	0005883a 	mov	r2,zero
10005498:	003ff206 	br	10005464 <__alt_data_end+0xf8005464>

1000549c <_dtoa_r>:
1000549c:	20801017 	ldw	r2,64(r4)
100054a0:	deffde04 	addi	sp,sp,-136
100054a4:	df002015 	stw	fp,128(sp)
100054a8:	dcc01b15 	stw	r19,108(sp)
100054ac:	dc801a15 	stw	r18,104(sp)
100054b0:	dc401915 	stw	r17,100(sp)
100054b4:	dc001815 	stw	r16,96(sp)
100054b8:	dfc02115 	stw	ra,132(sp)
100054bc:	ddc01f15 	stw	r23,124(sp)
100054c0:	dd801e15 	stw	r22,120(sp)
100054c4:	dd401d15 	stw	r21,116(sp)
100054c8:	dd001c15 	stw	r20,112(sp)
100054cc:	d9c00315 	stw	r7,12(sp)
100054d0:	2039883a 	mov	fp,r4
100054d4:	3023883a 	mov	r17,r6
100054d8:	2825883a 	mov	r18,r5
100054dc:	dc002417 	ldw	r16,144(sp)
100054e0:	3027883a 	mov	r19,r6
100054e4:	10000826 	beq	r2,zero,10005508 <_dtoa_r+0x6c>
100054e8:	21801117 	ldw	r6,68(r4)
100054ec:	00c00044 	movi	r3,1
100054f0:	100b883a 	mov	r5,r2
100054f4:	1986983a 	sll	r3,r3,r6
100054f8:	11800115 	stw	r6,4(r2)
100054fc:	10c00215 	stw	r3,8(r2)
10005500:	0008bfc0 	call	10008bfc <_Bfree>
10005504:	e0001015 	stw	zero,64(fp)
10005508:	88002e16 	blt	r17,zero,100055c4 <_dtoa_r+0x128>
1000550c:	80000015 	stw	zero,0(r16)
10005510:	889ffc2c 	andhi	r2,r17,32752
10005514:	00dffc34 	movhi	r3,32752
10005518:	10c01c26 	beq	r2,r3,1000558c <_dtoa_r+0xf0>
1000551c:	000d883a 	mov	r6,zero
10005520:	000f883a 	mov	r7,zero
10005524:	9009883a 	mov	r4,r18
10005528:	980b883a 	mov	r5,r19
1000552c:	000e2d00 	call	1000e2d0 <__eqdf2>
10005530:	10002b1e 	bne	r2,zero,100055e0 <_dtoa_r+0x144>
10005534:	d9c02317 	ldw	r7,140(sp)
10005538:	00800044 	movi	r2,1
1000553c:	38800015 	stw	r2,0(r7)
10005540:	d8802517 	ldw	r2,148(sp)
10005544:	10019e26 	beq	r2,zero,10005bc0 <_dtoa_r+0x724>
10005548:	d8c02517 	ldw	r3,148(sp)
1000554c:	00840074 	movhi	r2,4097
10005550:	108a4544 	addi	r2,r2,10517
10005554:	18800015 	stw	r2,0(r3)
10005558:	10bfffc4 	addi	r2,r2,-1
1000555c:	dfc02117 	ldw	ra,132(sp)
10005560:	df002017 	ldw	fp,128(sp)
10005564:	ddc01f17 	ldw	r23,124(sp)
10005568:	dd801e17 	ldw	r22,120(sp)
1000556c:	dd401d17 	ldw	r21,116(sp)
10005570:	dd001c17 	ldw	r20,112(sp)
10005574:	dcc01b17 	ldw	r19,108(sp)
10005578:	dc801a17 	ldw	r18,104(sp)
1000557c:	dc401917 	ldw	r17,100(sp)
10005580:	dc001817 	ldw	r16,96(sp)
10005584:	dec02204 	addi	sp,sp,136
10005588:	f800283a 	ret
1000558c:	d8c02317 	ldw	r3,140(sp)
10005590:	0089c3c4 	movi	r2,9999
10005594:	18800015 	stw	r2,0(r3)
10005598:	90017726 	beq	r18,zero,10005b78 <_dtoa_r+0x6dc>
1000559c:	00840074 	movhi	r2,4097
100055a0:	108a5104 	addi	r2,r2,10564
100055a4:	d9002517 	ldw	r4,148(sp)
100055a8:	203fec26 	beq	r4,zero,1000555c <__alt_data_end+0xf800555c>
100055ac:	10c000c7 	ldb	r3,3(r2)
100055b0:	1801781e 	bne	r3,zero,10005b94 <_dtoa_r+0x6f8>
100055b4:	10c000c4 	addi	r3,r2,3
100055b8:	d9802517 	ldw	r6,148(sp)
100055bc:	30c00015 	stw	r3,0(r6)
100055c0:	003fe606 	br	1000555c <__alt_data_end+0xf800555c>
100055c4:	04e00034 	movhi	r19,32768
100055c8:	9cffffc4 	addi	r19,r19,-1
100055cc:	00800044 	movi	r2,1
100055d0:	8ce6703a 	and	r19,r17,r19
100055d4:	80800015 	stw	r2,0(r16)
100055d8:	9823883a 	mov	r17,r19
100055dc:	003fcc06 	br	10005510 <__alt_data_end+0xf8005510>
100055e0:	d8800204 	addi	r2,sp,8
100055e4:	d8800015 	stw	r2,0(sp)
100055e8:	d9c00104 	addi	r7,sp,4
100055ec:	900b883a 	mov	r5,r18
100055f0:	980d883a 	mov	r6,r19
100055f4:	e009883a 	mov	r4,fp
100055f8:	8820d53a 	srli	r16,r17,20
100055fc:	00098a40 	call	100098a4 <__d2b>
10005600:	d8800915 	stw	r2,36(sp)
10005604:	8001651e 	bne	r16,zero,10005b9c <_dtoa_r+0x700>
10005608:	dd800217 	ldw	r22,8(sp)
1000560c:	dc000117 	ldw	r16,4(sp)
10005610:	00800804 	movi	r2,32
10005614:	b421883a 	add	r16,r22,r16
10005618:	80c10c84 	addi	r3,r16,1074
1000561c:	10c2d10e 	bge	r2,r3,10006164 <_dtoa_r+0xcc8>
10005620:	00801004 	movi	r2,64
10005624:	81010484 	addi	r4,r16,1042
10005628:	10c7c83a 	sub	r3,r2,r3
1000562c:	9108d83a 	srl	r4,r18,r4
10005630:	88e2983a 	sll	r17,r17,r3
10005634:	2448b03a 	or	r4,r4,r17
10005638:	000f7ec0 	call	1000f7ec <__floatunsidf>
1000563c:	017f8434 	movhi	r5,65040
10005640:	01800044 	movi	r6,1
10005644:	1009883a 	mov	r4,r2
10005648:	194b883a 	add	r5,r3,r5
1000564c:	843fffc4 	addi	r16,r16,-1
10005650:	d9801115 	stw	r6,68(sp)
10005654:	000d883a 	mov	r6,zero
10005658:	01cffe34 	movhi	r7,16376
1000565c:	000ed940 	call	1000ed94 <__subdf3>
10005660:	0198dbf4 	movhi	r6,25455
10005664:	01cff4f4 	movhi	r7,16339
10005668:	3190d844 	addi	r6,r6,17249
1000566c:	39e1e9c4 	addi	r7,r7,-30809
10005670:	1009883a 	mov	r4,r2
10005674:	180b883a 	mov	r5,r3
10005678:	000e5280 	call	1000e528 <__muldf3>
1000567c:	01a2d874 	movhi	r6,35681
10005680:	01cff1f4 	movhi	r7,16327
10005684:	31b22cc4 	addi	r6,r6,-14157
10005688:	39e28a04 	addi	r7,r7,-30168
1000568c:	180b883a 	mov	r5,r3
10005690:	1009883a 	mov	r4,r2
10005694:	000d0540 	call	1000d054 <__adddf3>
10005698:	8009883a 	mov	r4,r16
1000569c:	1029883a 	mov	r20,r2
100056a0:	1823883a 	mov	r17,r3
100056a4:	000f7100 	call	1000f710 <__floatsidf>
100056a8:	019427f4 	movhi	r6,20639
100056ac:	01cff4f4 	movhi	r7,16339
100056b0:	319e7ec4 	addi	r6,r6,31227
100056b4:	39d104c4 	addi	r7,r7,17427
100056b8:	1009883a 	mov	r4,r2
100056bc:	180b883a 	mov	r5,r3
100056c0:	000e5280 	call	1000e528 <__muldf3>
100056c4:	100d883a 	mov	r6,r2
100056c8:	180f883a 	mov	r7,r3
100056cc:	a009883a 	mov	r4,r20
100056d0:	880b883a 	mov	r5,r17
100056d4:	000d0540 	call	1000d054 <__adddf3>
100056d8:	1009883a 	mov	r4,r2
100056dc:	180b883a 	mov	r5,r3
100056e0:	1029883a 	mov	r20,r2
100056e4:	1823883a 	mov	r17,r3
100056e8:	000f6900 	call	1000f690 <__fixdfsi>
100056ec:	000d883a 	mov	r6,zero
100056f0:	000f883a 	mov	r7,zero
100056f4:	a009883a 	mov	r4,r20
100056f8:	880b883a 	mov	r5,r17
100056fc:	d8800515 	stw	r2,20(sp)
10005700:	000e4340 	call	1000e434 <__ledf2>
10005704:	10028716 	blt	r2,zero,10006124 <_dtoa_r+0xc88>
10005708:	d8c00517 	ldw	r3,20(sp)
1000570c:	00800584 	movi	r2,22
10005710:	10c27536 	bltu	r2,r3,100060e8 <_dtoa_r+0xc4c>
10005714:	180490fa 	slli	r2,r3,3
10005718:	00c40074 	movhi	r3,4097
1000571c:	18ca6d04 	addi	r3,r3,10676
10005720:	1885883a 	add	r2,r3,r2
10005724:	11000017 	ldw	r4,0(r2)
10005728:	11400117 	ldw	r5,4(r2)
1000572c:	900d883a 	mov	r6,r18
10005730:	980f883a 	mov	r7,r19
10005734:	000e3580 	call	1000e358 <__gedf2>
10005738:	00828d0e 	bge	zero,r2,10006170 <_dtoa_r+0xcd4>
1000573c:	d9000517 	ldw	r4,20(sp)
10005740:	d8000e15 	stw	zero,56(sp)
10005744:	213fffc4 	addi	r4,r4,-1
10005748:	d9000515 	stw	r4,20(sp)
1000574c:	b42dc83a 	sub	r22,r22,r16
10005750:	b5bfffc4 	addi	r22,r22,-1
10005754:	b0026f16 	blt	r22,zero,10006114 <_dtoa_r+0xc78>
10005758:	d8000815 	stw	zero,32(sp)
1000575c:	d9c00517 	ldw	r7,20(sp)
10005760:	38026416 	blt	r7,zero,100060f4 <_dtoa_r+0xc58>
10005764:	b1ed883a 	add	r22,r22,r7
10005768:	d9c00d15 	stw	r7,52(sp)
1000576c:	d8000a15 	stw	zero,40(sp)
10005770:	d9800317 	ldw	r6,12(sp)
10005774:	00800244 	movi	r2,9
10005778:	11811436 	bltu	r2,r6,10005bcc <_dtoa_r+0x730>
1000577c:	00800144 	movi	r2,5
10005780:	1184e10e 	bge	r2,r6,10006b08 <_dtoa_r+0x166c>
10005784:	31bfff04 	addi	r6,r6,-4
10005788:	d9800315 	stw	r6,12(sp)
1000578c:	0023883a 	mov	r17,zero
10005790:	d9800317 	ldw	r6,12(sp)
10005794:	008000c4 	movi	r2,3
10005798:	30836726 	beq	r6,r2,10006538 <_dtoa_r+0x109c>
1000579c:	1183410e 	bge	r2,r6,100064a4 <_dtoa_r+0x1008>
100057a0:	d9c00317 	ldw	r7,12(sp)
100057a4:	00800104 	movi	r2,4
100057a8:	38827c26 	beq	r7,r2,1000619c <_dtoa_r+0xd00>
100057ac:	00800144 	movi	r2,5
100057b0:	3884c41e 	bne	r7,r2,10006ac4 <_dtoa_r+0x1628>
100057b4:	00800044 	movi	r2,1
100057b8:	d8800b15 	stw	r2,44(sp)
100057bc:	d8c00517 	ldw	r3,20(sp)
100057c0:	d9002217 	ldw	r4,136(sp)
100057c4:	1907883a 	add	r3,r3,r4
100057c8:	19800044 	addi	r6,r3,1
100057cc:	d8c00c15 	stw	r3,48(sp)
100057d0:	d9800615 	stw	r6,24(sp)
100057d4:	0183a40e 	bge	zero,r6,10006668 <_dtoa_r+0x11cc>
100057d8:	d9800617 	ldw	r6,24(sp)
100057dc:	3021883a 	mov	r16,r6
100057e0:	e0001115 	stw	zero,68(fp)
100057e4:	008005c4 	movi	r2,23
100057e8:	1184c92e 	bgeu	r2,r6,10006b10 <_dtoa_r+0x1674>
100057ec:	00c00044 	movi	r3,1
100057f0:	00800104 	movi	r2,4
100057f4:	1085883a 	add	r2,r2,r2
100057f8:	11000504 	addi	r4,r2,20
100057fc:	180b883a 	mov	r5,r3
10005800:	18c00044 	addi	r3,r3,1
10005804:	313ffb2e 	bgeu	r6,r4,100057f4 <__alt_data_end+0xf80057f4>
10005808:	e1401115 	stw	r5,68(fp)
1000580c:	e009883a 	mov	r4,fp
10005810:	0008b540 	call	10008b54 <_Balloc>
10005814:	d8800715 	stw	r2,28(sp)
10005818:	e0801015 	stw	r2,64(fp)
1000581c:	00800384 	movi	r2,14
10005820:	1400f736 	bltu	r2,r16,10005c00 <_dtoa_r+0x764>
10005824:	8800f626 	beq	r17,zero,10005c00 <_dtoa_r+0x764>
10005828:	d9c00517 	ldw	r7,20(sp)
1000582c:	01c39a0e 	bge	zero,r7,10006698 <_dtoa_r+0x11fc>
10005830:	388003cc 	andi	r2,r7,15
10005834:	100490fa 	slli	r2,r2,3
10005838:	382bd13a 	srai	r21,r7,4
1000583c:	00c40074 	movhi	r3,4097
10005840:	18ca6d04 	addi	r3,r3,10676
10005844:	1885883a 	add	r2,r3,r2
10005848:	a8c0040c 	andi	r3,r21,16
1000584c:	12400017 	ldw	r9,0(r2)
10005850:	12000117 	ldw	r8,4(r2)
10005854:	18037926 	beq	r3,zero,1000663c <_dtoa_r+0x11a0>
10005858:	00840074 	movhi	r2,4097
1000585c:	108a6304 	addi	r2,r2,10636
10005860:	11800817 	ldw	r6,32(r2)
10005864:	11c00917 	ldw	r7,36(r2)
10005868:	9009883a 	mov	r4,r18
1000586c:	980b883a 	mov	r5,r19
10005870:	da001715 	stw	r8,92(sp)
10005874:	da401615 	stw	r9,88(sp)
10005878:	000d9000 	call	1000d900 <__divdf3>
1000587c:	da001717 	ldw	r8,92(sp)
10005880:	da401617 	ldw	r9,88(sp)
10005884:	ad4003cc 	andi	r21,r21,15
10005888:	040000c4 	movi	r16,3
1000588c:	1023883a 	mov	r17,r2
10005890:	1829883a 	mov	r20,r3
10005894:	a8001126 	beq	r21,zero,100058dc <_dtoa_r+0x440>
10005898:	05c40074 	movhi	r23,4097
1000589c:	bdca6304 	addi	r23,r23,10636
100058a0:	4805883a 	mov	r2,r9
100058a4:	4007883a 	mov	r3,r8
100058a8:	a980004c 	andi	r6,r21,1
100058ac:	1009883a 	mov	r4,r2
100058b0:	a82bd07a 	srai	r21,r21,1
100058b4:	180b883a 	mov	r5,r3
100058b8:	30000426 	beq	r6,zero,100058cc <_dtoa_r+0x430>
100058bc:	b9800017 	ldw	r6,0(r23)
100058c0:	b9c00117 	ldw	r7,4(r23)
100058c4:	84000044 	addi	r16,r16,1
100058c8:	000e5280 	call	1000e528 <__muldf3>
100058cc:	bdc00204 	addi	r23,r23,8
100058d0:	a83ff51e 	bne	r21,zero,100058a8 <__alt_data_end+0xf80058a8>
100058d4:	1013883a 	mov	r9,r2
100058d8:	1811883a 	mov	r8,r3
100058dc:	480d883a 	mov	r6,r9
100058e0:	400f883a 	mov	r7,r8
100058e4:	8809883a 	mov	r4,r17
100058e8:	a00b883a 	mov	r5,r20
100058ec:	000d9000 	call	1000d900 <__divdf3>
100058f0:	d8800f15 	stw	r2,60(sp)
100058f4:	d8c01015 	stw	r3,64(sp)
100058f8:	d8c00e17 	ldw	r3,56(sp)
100058fc:	18000626 	beq	r3,zero,10005918 <_dtoa_r+0x47c>
10005900:	d9000f17 	ldw	r4,60(sp)
10005904:	d9401017 	ldw	r5,64(sp)
10005908:	000d883a 	mov	r6,zero
1000590c:	01cffc34 	movhi	r7,16368
10005910:	000e4340 	call	1000e434 <__ledf2>
10005914:	10040b16 	blt	r2,zero,10006944 <_dtoa_r+0x14a8>
10005918:	8009883a 	mov	r4,r16
1000591c:	000f7100 	call	1000f710 <__floatsidf>
10005920:	d9800f17 	ldw	r6,60(sp)
10005924:	d9c01017 	ldw	r7,64(sp)
10005928:	1009883a 	mov	r4,r2
1000592c:	180b883a 	mov	r5,r3
10005930:	000e5280 	call	1000e528 <__muldf3>
10005934:	000d883a 	mov	r6,zero
10005938:	01d00734 	movhi	r7,16412
1000593c:	1009883a 	mov	r4,r2
10005940:	180b883a 	mov	r5,r3
10005944:	000d0540 	call	1000d054 <__adddf3>
10005948:	1021883a 	mov	r16,r2
1000594c:	d8800617 	ldw	r2,24(sp)
10005950:	047f3034 	movhi	r17,64704
10005954:	1c63883a 	add	r17,r3,r17
10005958:	10031826 	beq	r2,zero,100065bc <_dtoa_r+0x1120>
1000595c:	d8c00517 	ldw	r3,20(sp)
10005960:	db000617 	ldw	r12,24(sp)
10005964:	d8c01315 	stw	r3,76(sp)
10005968:	d9000b17 	ldw	r4,44(sp)
1000596c:	20038f26 	beq	r4,zero,100067ac <_dtoa_r+0x1310>
10005970:	60bfffc4 	addi	r2,r12,-1
10005974:	100490fa 	slli	r2,r2,3
10005978:	00c40074 	movhi	r3,4097
1000597c:	18ca6d04 	addi	r3,r3,10676
10005980:	1885883a 	add	r2,r3,r2
10005984:	11800017 	ldw	r6,0(r2)
10005988:	11c00117 	ldw	r7,4(r2)
1000598c:	d8800717 	ldw	r2,28(sp)
10005990:	0009883a 	mov	r4,zero
10005994:	014ff834 	movhi	r5,16352
10005998:	db001615 	stw	r12,88(sp)
1000599c:	15c00044 	addi	r23,r2,1
100059a0:	000d9000 	call	1000d900 <__divdf3>
100059a4:	800d883a 	mov	r6,r16
100059a8:	880f883a 	mov	r7,r17
100059ac:	1009883a 	mov	r4,r2
100059b0:	180b883a 	mov	r5,r3
100059b4:	000ed940 	call	1000ed94 <__subdf3>
100059b8:	d9401017 	ldw	r5,64(sp)
100059bc:	d9000f17 	ldw	r4,60(sp)
100059c0:	102b883a 	mov	r21,r2
100059c4:	d8c01215 	stw	r3,72(sp)
100059c8:	000f6900 	call	1000f690 <__fixdfsi>
100059cc:	1009883a 	mov	r4,r2
100059d0:	1029883a 	mov	r20,r2
100059d4:	000f7100 	call	1000f710 <__floatsidf>
100059d8:	d9000f17 	ldw	r4,60(sp)
100059dc:	d9401017 	ldw	r5,64(sp)
100059e0:	100d883a 	mov	r6,r2
100059e4:	180f883a 	mov	r7,r3
100059e8:	000ed940 	call	1000ed94 <__subdf3>
100059ec:	1823883a 	mov	r17,r3
100059f0:	d8c00717 	ldw	r3,28(sp)
100059f4:	d9401217 	ldw	r5,72(sp)
100059f8:	a2000c04 	addi	r8,r20,48
100059fc:	1021883a 	mov	r16,r2
10005a00:	1a000005 	stb	r8,0(r3)
10005a04:	800d883a 	mov	r6,r16
10005a08:	880f883a 	mov	r7,r17
10005a0c:	a809883a 	mov	r4,r21
10005a10:	4029883a 	mov	r20,r8
10005a14:	000e3580 	call	1000e358 <__gedf2>
10005a18:	00841d16 	blt	zero,r2,10006a90 <_dtoa_r+0x15f4>
10005a1c:	800d883a 	mov	r6,r16
10005a20:	880f883a 	mov	r7,r17
10005a24:	0009883a 	mov	r4,zero
10005a28:	014ffc34 	movhi	r5,16368
10005a2c:	000ed940 	call	1000ed94 <__subdf3>
10005a30:	d9401217 	ldw	r5,72(sp)
10005a34:	100d883a 	mov	r6,r2
10005a38:	180f883a 	mov	r7,r3
10005a3c:	a809883a 	mov	r4,r21
10005a40:	000e3580 	call	1000e358 <__gedf2>
10005a44:	db001617 	ldw	r12,88(sp)
10005a48:	00840e16 	blt	zero,r2,10006a84 <_dtoa_r+0x15e8>
10005a4c:	00800044 	movi	r2,1
10005a50:	13006b0e 	bge	r2,r12,10005c00 <_dtoa_r+0x764>
10005a54:	d9000717 	ldw	r4,28(sp)
10005a58:	dd800f15 	stw	r22,60(sp)
10005a5c:	dcc01015 	stw	r19,64(sp)
10005a60:	2319883a 	add	r12,r4,r12
10005a64:	dcc01217 	ldw	r19,72(sp)
10005a68:	602d883a 	mov	r22,r12
10005a6c:	dc801215 	stw	r18,72(sp)
10005a70:	b825883a 	mov	r18,r23
10005a74:	00000906 	br	10005a9c <_dtoa_r+0x600>
10005a78:	000ed940 	call	1000ed94 <__subdf3>
10005a7c:	a80d883a 	mov	r6,r21
10005a80:	980f883a 	mov	r7,r19
10005a84:	1009883a 	mov	r4,r2
10005a88:	180b883a 	mov	r5,r3
10005a8c:	000e4340 	call	1000e434 <__ledf2>
10005a90:	1003e816 	blt	r2,zero,10006a34 <_dtoa_r+0x1598>
10005a94:	b825883a 	mov	r18,r23
10005a98:	bd83e926 	beq	r23,r22,10006a40 <_dtoa_r+0x15a4>
10005a9c:	a809883a 	mov	r4,r21
10005aa0:	980b883a 	mov	r5,r19
10005aa4:	000d883a 	mov	r6,zero
10005aa8:	01d00934 	movhi	r7,16420
10005aac:	000e5280 	call	1000e528 <__muldf3>
10005ab0:	000d883a 	mov	r6,zero
10005ab4:	01d00934 	movhi	r7,16420
10005ab8:	8009883a 	mov	r4,r16
10005abc:	880b883a 	mov	r5,r17
10005ac0:	102b883a 	mov	r21,r2
10005ac4:	1827883a 	mov	r19,r3
10005ac8:	000e5280 	call	1000e528 <__muldf3>
10005acc:	180b883a 	mov	r5,r3
10005ad0:	1009883a 	mov	r4,r2
10005ad4:	1821883a 	mov	r16,r3
10005ad8:	1023883a 	mov	r17,r2
10005adc:	000f6900 	call	1000f690 <__fixdfsi>
10005ae0:	1009883a 	mov	r4,r2
10005ae4:	1029883a 	mov	r20,r2
10005ae8:	000f7100 	call	1000f710 <__floatsidf>
10005aec:	8809883a 	mov	r4,r17
10005af0:	800b883a 	mov	r5,r16
10005af4:	100d883a 	mov	r6,r2
10005af8:	180f883a 	mov	r7,r3
10005afc:	000ed940 	call	1000ed94 <__subdf3>
10005b00:	a5000c04 	addi	r20,r20,48
10005b04:	a80d883a 	mov	r6,r21
10005b08:	980f883a 	mov	r7,r19
10005b0c:	1009883a 	mov	r4,r2
10005b10:	180b883a 	mov	r5,r3
10005b14:	95000005 	stb	r20,0(r18)
10005b18:	1021883a 	mov	r16,r2
10005b1c:	1823883a 	mov	r17,r3
10005b20:	000e4340 	call	1000e434 <__ledf2>
10005b24:	bdc00044 	addi	r23,r23,1
10005b28:	800d883a 	mov	r6,r16
10005b2c:	880f883a 	mov	r7,r17
10005b30:	0009883a 	mov	r4,zero
10005b34:	014ffc34 	movhi	r5,16368
10005b38:	103fcf0e 	bge	r2,zero,10005a78 <__alt_data_end+0xf8005a78>
10005b3c:	d8c01317 	ldw	r3,76(sp)
10005b40:	d8c00515 	stw	r3,20(sp)
10005b44:	d9400917 	ldw	r5,36(sp)
10005b48:	e009883a 	mov	r4,fp
10005b4c:	0008bfc0 	call	10008bfc <_Bfree>
10005b50:	d9000517 	ldw	r4,20(sp)
10005b54:	d9802317 	ldw	r6,140(sp)
10005b58:	d9c02517 	ldw	r7,148(sp)
10005b5c:	b8000005 	stb	zero,0(r23)
10005b60:	20800044 	addi	r2,r4,1
10005b64:	30800015 	stw	r2,0(r6)
10005b68:	3802aa26 	beq	r7,zero,10006614 <_dtoa_r+0x1178>
10005b6c:	3dc00015 	stw	r23,0(r7)
10005b70:	d8800717 	ldw	r2,28(sp)
10005b74:	003e7906 	br	1000555c <__alt_data_end+0xf800555c>
10005b78:	00800434 	movhi	r2,16
10005b7c:	10bfffc4 	addi	r2,r2,-1
10005b80:	88a2703a 	and	r17,r17,r2
10005b84:	883e851e 	bne	r17,zero,1000559c <__alt_data_end+0xf800559c>
10005b88:	00840074 	movhi	r2,4097
10005b8c:	108a4e04 	addi	r2,r2,10552
10005b90:	003e8406 	br	100055a4 <__alt_data_end+0xf80055a4>
10005b94:	10c00204 	addi	r3,r2,8
10005b98:	003e8706 	br	100055b8 <__alt_data_end+0xf80055b8>
10005b9c:	01400434 	movhi	r5,16
10005ba0:	297fffc4 	addi	r5,r5,-1
10005ba4:	994a703a 	and	r5,r19,r5
10005ba8:	9009883a 	mov	r4,r18
10005bac:	843f0044 	addi	r16,r16,-1023
10005bb0:	294ffc34 	orhi	r5,r5,16368
10005bb4:	dd800217 	ldw	r22,8(sp)
10005bb8:	d8001115 	stw	zero,68(sp)
10005bbc:	003ea506 	br	10005654 <__alt_data_end+0xf8005654>
10005bc0:	00840074 	movhi	r2,4097
10005bc4:	108a4504 	addi	r2,r2,10516
10005bc8:	003e6406 	br	1000555c <__alt_data_end+0xf800555c>
10005bcc:	e0001115 	stw	zero,68(fp)
10005bd0:	000b883a 	mov	r5,zero
10005bd4:	e009883a 	mov	r4,fp
10005bd8:	0008b540 	call	10008b54 <_Balloc>
10005bdc:	01bfffc4 	movi	r6,-1
10005be0:	01c00044 	movi	r7,1
10005be4:	d8800715 	stw	r2,28(sp)
10005be8:	d9800c15 	stw	r6,48(sp)
10005bec:	e0801015 	stw	r2,64(fp)
10005bf0:	d8000315 	stw	zero,12(sp)
10005bf4:	d9c00b15 	stw	r7,44(sp)
10005bf8:	d9800615 	stw	r6,24(sp)
10005bfc:	d8002215 	stw	zero,136(sp)
10005c00:	d8800117 	ldw	r2,4(sp)
10005c04:	10008916 	blt	r2,zero,10005e2c <_dtoa_r+0x990>
10005c08:	d9000517 	ldw	r4,20(sp)
10005c0c:	00c00384 	movi	r3,14
10005c10:	19008616 	blt	r3,r4,10005e2c <_dtoa_r+0x990>
10005c14:	200490fa 	slli	r2,r4,3
10005c18:	00c40074 	movhi	r3,4097
10005c1c:	d9802217 	ldw	r6,136(sp)
10005c20:	18ca6d04 	addi	r3,r3,10676
10005c24:	1885883a 	add	r2,r3,r2
10005c28:	14000017 	ldw	r16,0(r2)
10005c2c:	14400117 	ldw	r17,4(r2)
10005c30:	30016316 	blt	r6,zero,100061c0 <_dtoa_r+0xd24>
10005c34:	800d883a 	mov	r6,r16
10005c38:	880f883a 	mov	r7,r17
10005c3c:	9009883a 	mov	r4,r18
10005c40:	980b883a 	mov	r5,r19
10005c44:	000d9000 	call	1000d900 <__divdf3>
10005c48:	180b883a 	mov	r5,r3
10005c4c:	1009883a 	mov	r4,r2
10005c50:	000f6900 	call	1000f690 <__fixdfsi>
10005c54:	1009883a 	mov	r4,r2
10005c58:	102b883a 	mov	r21,r2
10005c5c:	000f7100 	call	1000f710 <__floatsidf>
10005c60:	800d883a 	mov	r6,r16
10005c64:	880f883a 	mov	r7,r17
10005c68:	1009883a 	mov	r4,r2
10005c6c:	180b883a 	mov	r5,r3
10005c70:	000e5280 	call	1000e528 <__muldf3>
10005c74:	100d883a 	mov	r6,r2
10005c78:	180f883a 	mov	r7,r3
10005c7c:	9009883a 	mov	r4,r18
10005c80:	980b883a 	mov	r5,r19
10005c84:	000ed940 	call	1000ed94 <__subdf3>
10005c88:	d9c00717 	ldw	r7,28(sp)
10005c8c:	1009883a 	mov	r4,r2
10005c90:	a8800c04 	addi	r2,r21,48
10005c94:	38800005 	stb	r2,0(r7)
10005c98:	3dc00044 	addi	r23,r7,1
10005c9c:	d9c00617 	ldw	r7,24(sp)
10005ca0:	01800044 	movi	r6,1
10005ca4:	180b883a 	mov	r5,r3
10005ca8:	2005883a 	mov	r2,r4
10005cac:	39803826 	beq	r7,r6,10005d90 <_dtoa_r+0x8f4>
10005cb0:	000d883a 	mov	r6,zero
10005cb4:	01d00934 	movhi	r7,16420
10005cb8:	000e5280 	call	1000e528 <__muldf3>
10005cbc:	000d883a 	mov	r6,zero
10005cc0:	000f883a 	mov	r7,zero
10005cc4:	1009883a 	mov	r4,r2
10005cc8:	180b883a 	mov	r5,r3
10005ccc:	1025883a 	mov	r18,r2
10005cd0:	1827883a 	mov	r19,r3
10005cd4:	000e2d00 	call	1000e2d0 <__eqdf2>
10005cd8:	103f9a26 	beq	r2,zero,10005b44 <__alt_data_end+0xf8005b44>
10005cdc:	d9c00617 	ldw	r7,24(sp)
10005ce0:	d8c00717 	ldw	r3,28(sp)
10005ce4:	b829883a 	mov	r20,r23
10005ce8:	38bfffc4 	addi	r2,r7,-1
10005cec:	18ad883a 	add	r22,r3,r2
10005cf0:	00000a06 	br	10005d1c <_dtoa_r+0x880>
10005cf4:	000e5280 	call	1000e528 <__muldf3>
10005cf8:	000d883a 	mov	r6,zero
10005cfc:	000f883a 	mov	r7,zero
10005d00:	1009883a 	mov	r4,r2
10005d04:	180b883a 	mov	r5,r3
10005d08:	1025883a 	mov	r18,r2
10005d0c:	1827883a 	mov	r19,r3
10005d10:	b829883a 	mov	r20,r23
10005d14:	000e2d00 	call	1000e2d0 <__eqdf2>
10005d18:	103f8a26 	beq	r2,zero,10005b44 <__alt_data_end+0xf8005b44>
10005d1c:	800d883a 	mov	r6,r16
10005d20:	880f883a 	mov	r7,r17
10005d24:	9009883a 	mov	r4,r18
10005d28:	980b883a 	mov	r5,r19
10005d2c:	000d9000 	call	1000d900 <__divdf3>
10005d30:	180b883a 	mov	r5,r3
10005d34:	1009883a 	mov	r4,r2
10005d38:	000f6900 	call	1000f690 <__fixdfsi>
10005d3c:	1009883a 	mov	r4,r2
10005d40:	102b883a 	mov	r21,r2
10005d44:	000f7100 	call	1000f710 <__floatsidf>
10005d48:	800d883a 	mov	r6,r16
10005d4c:	880f883a 	mov	r7,r17
10005d50:	1009883a 	mov	r4,r2
10005d54:	180b883a 	mov	r5,r3
10005d58:	000e5280 	call	1000e528 <__muldf3>
10005d5c:	100d883a 	mov	r6,r2
10005d60:	180f883a 	mov	r7,r3
10005d64:	9009883a 	mov	r4,r18
10005d68:	980b883a 	mov	r5,r19
10005d6c:	000ed940 	call	1000ed94 <__subdf3>
10005d70:	aa000c04 	addi	r8,r21,48
10005d74:	a2000005 	stb	r8,0(r20)
10005d78:	000d883a 	mov	r6,zero
10005d7c:	01d00934 	movhi	r7,16420
10005d80:	1009883a 	mov	r4,r2
10005d84:	180b883a 	mov	r5,r3
10005d88:	a5c00044 	addi	r23,r20,1
10005d8c:	b53fd91e 	bne	r22,r20,10005cf4 <__alt_data_end+0xf8005cf4>
10005d90:	100d883a 	mov	r6,r2
10005d94:	180f883a 	mov	r7,r3
10005d98:	1009883a 	mov	r4,r2
10005d9c:	180b883a 	mov	r5,r3
10005da0:	000d0540 	call	1000d054 <__adddf3>
10005da4:	100d883a 	mov	r6,r2
10005da8:	180f883a 	mov	r7,r3
10005dac:	8009883a 	mov	r4,r16
10005db0:	880b883a 	mov	r5,r17
10005db4:	1027883a 	mov	r19,r2
10005db8:	1825883a 	mov	r18,r3
10005dbc:	000e4340 	call	1000e434 <__ledf2>
10005dc0:	10000816 	blt	r2,zero,10005de4 <_dtoa_r+0x948>
10005dc4:	980d883a 	mov	r6,r19
10005dc8:	900f883a 	mov	r7,r18
10005dcc:	8009883a 	mov	r4,r16
10005dd0:	880b883a 	mov	r5,r17
10005dd4:	000e2d00 	call	1000e2d0 <__eqdf2>
10005dd8:	103f5a1e 	bne	r2,zero,10005b44 <__alt_data_end+0xf8005b44>
10005ddc:	ad40004c 	andi	r21,r21,1
10005de0:	a83f5826 	beq	r21,zero,10005b44 <__alt_data_end+0xf8005b44>
10005de4:	bd3fffc3 	ldbu	r20,-1(r23)
10005de8:	b8bfffc4 	addi	r2,r23,-1
10005dec:	1007883a 	mov	r3,r2
10005df0:	01400e44 	movi	r5,57
10005df4:	d9800717 	ldw	r6,28(sp)
10005df8:	00000506 	br	10005e10 <_dtoa_r+0x974>
10005dfc:	18ffffc4 	addi	r3,r3,-1
10005e00:	11824726 	beq	r2,r6,10006720 <_dtoa_r+0x1284>
10005e04:	1d000003 	ldbu	r20,0(r3)
10005e08:	102f883a 	mov	r23,r2
10005e0c:	10bfffc4 	addi	r2,r2,-1
10005e10:	a1003fcc 	andi	r4,r20,255
10005e14:	2100201c 	xori	r4,r4,128
10005e18:	213fe004 	addi	r4,r4,-128
10005e1c:	217ff726 	beq	r4,r5,10005dfc <__alt_data_end+0xf8005dfc>
10005e20:	a2000044 	addi	r8,r20,1
10005e24:	12000005 	stb	r8,0(r2)
10005e28:	003f4606 	br	10005b44 <__alt_data_end+0xf8005b44>
10005e2c:	d9000b17 	ldw	r4,44(sp)
10005e30:	2000c826 	beq	r4,zero,10006154 <_dtoa_r+0xcb8>
10005e34:	d9800317 	ldw	r6,12(sp)
10005e38:	00c00044 	movi	r3,1
10005e3c:	1980f90e 	bge	r3,r6,10006224 <_dtoa_r+0xd88>
10005e40:	d8800617 	ldw	r2,24(sp)
10005e44:	d8c00a17 	ldw	r3,40(sp)
10005e48:	157fffc4 	addi	r21,r2,-1
10005e4c:	1d41f316 	blt	r3,r21,1000661c <_dtoa_r+0x1180>
10005e50:	1d6bc83a 	sub	r21,r3,r21
10005e54:	d9c00617 	ldw	r7,24(sp)
10005e58:	3802aa16 	blt	r7,zero,10006904 <_dtoa_r+0x1468>
10005e5c:	dd000817 	ldw	r20,32(sp)
10005e60:	d8800617 	ldw	r2,24(sp)
10005e64:	d8c00817 	ldw	r3,32(sp)
10005e68:	01400044 	movi	r5,1
10005e6c:	e009883a 	mov	r4,fp
10005e70:	1887883a 	add	r3,r3,r2
10005e74:	d8c00815 	stw	r3,32(sp)
10005e78:	b0ad883a 	add	r22,r22,r2
10005e7c:	0008f880 	call	10008f88 <__i2b>
10005e80:	1023883a 	mov	r17,r2
10005e84:	a0000826 	beq	r20,zero,10005ea8 <_dtoa_r+0xa0c>
10005e88:	0580070e 	bge	zero,r22,10005ea8 <_dtoa_r+0xa0c>
10005e8c:	a005883a 	mov	r2,r20
10005e90:	b500b916 	blt	r22,r20,10006178 <_dtoa_r+0xcdc>
10005e94:	d9000817 	ldw	r4,32(sp)
10005e98:	a0a9c83a 	sub	r20,r20,r2
10005e9c:	b0adc83a 	sub	r22,r22,r2
10005ea0:	2089c83a 	sub	r4,r4,r2
10005ea4:	d9000815 	stw	r4,32(sp)
10005ea8:	d9800a17 	ldw	r6,40(sp)
10005eac:	0181810e 	bge	zero,r6,100064b4 <_dtoa_r+0x1018>
10005eb0:	d9c00b17 	ldw	r7,44(sp)
10005eb4:	3800b326 	beq	r7,zero,10006184 <_dtoa_r+0xce8>
10005eb8:	a800b226 	beq	r21,zero,10006184 <_dtoa_r+0xce8>
10005ebc:	880b883a 	mov	r5,r17
10005ec0:	a80d883a 	mov	r6,r21
10005ec4:	e009883a 	mov	r4,fp
10005ec8:	00092500 	call	10009250 <__pow5mult>
10005ecc:	d9800917 	ldw	r6,36(sp)
10005ed0:	100b883a 	mov	r5,r2
10005ed4:	e009883a 	mov	r4,fp
10005ed8:	1023883a 	mov	r17,r2
10005edc:	0008fc40 	call	10008fc4 <__multiply>
10005ee0:	1021883a 	mov	r16,r2
10005ee4:	d8800a17 	ldw	r2,40(sp)
10005ee8:	d9400917 	ldw	r5,36(sp)
10005eec:	e009883a 	mov	r4,fp
10005ef0:	1545c83a 	sub	r2,r2,r21
10005ef4:	d8800a15 	stw	r2,40(sp)
10005ef8:	0008bfc0 	call	10008bfc <_Bfree>
10005efc:	d8c00a17 	ldw	r3,40(sp)
10005f00:	18009f1e 	bne	r3,zero,10006180 <_dtoa_r+0xce4>
10005f04:	05c00044 	movi	r23,1
10005f08:	e009883a 	mov	r4,fp
10005f0c:	b80b883a 	mov	r5,r23
10005f10:	0008f880 	call	10008f88 <__i2b>
10005f14:	d9000d17 	ldw	r4,52(sp)
10005f18:	102b883a 	mov	r21,r2
10005f1c:	2000ce26 	beq	r4,zero,10006258 <_dtoa_r+0xdbc>
10005f20:	200d883a 	mov	r6,r4
10005f24:	100b883a 	mov	r5,r2
10005f28:	e009883a 	mov	r4,fp
10005f2c:	00092500 	call	10009250 <__pow5mult>
10005f30:	d9800317 	ldw	r6,12(sp)
10005f34:	102b883a 	mov	r21,r2
10005f38:	b981810e 	bge	r23,r6,10006540 <_dtoa_r+0x10a4>
10005f3c:	0027883a 	mov	r19,zero
10005f40:	a8800417 	ldw	r2,16(r21)
10005f44:	05c00804 	movi	r23,32
10005f48:	10800104 	addi	r2,r2,4
10005f4c:	1085883a 	add	r2,r2,r2
10005f50:	1085883a 	add	r2,r2,r2
10005f54:	a885883a 	add	r2,r21,r2
10005f58:	11000017 	ldw	r4,0(r2)
10005f5c:	0008e700 	call	10008e70 <__hi0bits>
10005f60:	b885c83a 	sub	r2,r23,r2
10005f64:	1585883a 	add	r2,r2,r22
10005f68:	108007cc 	andi	r2,r2,31
10005f6c:	1000b326 	beq	r2,zero,1000623c <_dtoa_r+0xda0>
10005f70:	00c00804 	movi	r3,32
10005f74:	1887c83a 	sub	r3,r3,r2
10005f78:	01000104 	movi	r4,4
10005f7c:	20c2cd0e 	bge	r4,r3,10006ab4 <_dtoa_r+0x1618>
10005f80:	00c00704 	movi	r3,28
10005f84:	1885c83a 	sub	r2,r3,r2
10005f88:	d8c00817 	ldw	r3,32(sp)
10005f8c:	a0a9883a 	add	r20,r20,r2
10005f90:	b0ad883a 	add	r22,r22,r2
10005f94:	1887883a 	add	r3,r3,r2
10005f98:	d8c00815 	stw	r3,32(sp)
10005f9c:	d9800817 	ldw	r6,32(sp)
10005fa0:	0180040e 	bge	zero,r6,10005fb4 <_dtoa_r+0xb18>
10005fa4:	800b883a 	mov	r5,r16
10005fa8:	e009883a 	mov	r4,fp
10005fac:	00093900 	call	10009390 <__lshift>
10005fb0:	1021883a 	mov	r16,r2
10005fb4:	0580050e 	bge	zero,r22,10005fcc <_dtoa_r+0xb30>
10005fb8:	a80b883a 	mov	r5,r21
10005fbc:	b00d883a 	mov	r6,r22
10005fc0:	e009883a 	mov	r4,fp
10005fc4:	00093900 	call	10009390 <__lshift>
10005fc8:	102b883a 	mov	r21,r2
10005fcc:	d9c00e17 	ldw	r7,56(sp)
10005fd0:	3801211e 	bne	r7,zero,10006458 <_dtoa_r+0xfbc>
10005fd4:	d9800617 	ldw	r6,24(sp)
10005fd8:	0181380e 	bge	zero,r6,100064bc <_dtoa_r+0x1020>
10005fdc:	d8c00b17 	ldw	r3,44(sp)
10005fe0:	1800ab1e 	bne	r3,zero,10006290 <_dtoa_r+0xdf4>
10005fe4:	dc800717 	ldw	r18,28(sp)
10005fe8:	dcc00617 	ldw	r19,24(sp)
10005fec:	9029883a 	mov	r20,r18
10005ff0:	00000206 	br	10005ffc <_dtoa_r+0xb60>
10005ff4:	0008c240 	call	10008c24 <__multadd>
10005ff8:	1021883a 	mov	r16,r2
10005ffc:	a80b883a 	mov	r5,r21
10006000:	8009883a 	mov	r4,r16
10006004:	00052740 	call	10005274 <quorem>
10006008:	10800c04 	addi	r2,r2,48
1000600c:	90800005 	stb	r2,0(r18)
10006010:	94800044 	addi	r18,r18,1
10006014:	9507c83a 	sub	r3,r18,r20
10006018:	000f883a 	mov	r7,zero
1000601c:	01800284 	movi	r6,10
10006020:	800b883a 	mov	r5,r16
10006024:	e009883a 	mov	r4,fp
10006028:	1cfff216 	blt	r3,r19,10005ff4 <__alt_data_end+0xf8005ff4>
1000602c:	1011883a 	mov	r8,r2
10006030:	d8800617 	ldw	r2,24(sp)
10006034:	0082370e 	bge	zero,r2,10006914 <_dtoa_r+0x1478>
10006038:	d9000717 	ldw	r4,28(sp)
1000603c:	0025883a 	mov	r18,zero
10006040:	20af883a 	add	r23,r4,r2
10006044:	01800044 	movi	r6,1
10006048:	800b883a 	mov	r5,r16
1000604c:	e009883a 	mov	r4,fp
10006050:	da001715 	stw	r8,92(sp)
10006054:	00093900 	call	10009390 <__lshift>
10006058:	a80b883a 	mov	r5,r21
1000605c:	1009883a 	mov	r4,r2
10006060:	d8800915 	stw	r2,36(sp)
10006064:	00094d80 	call	100094d8 <__mcmp>
10006068:	da001717 	ldw	r8,92(sp)
1000606c:	0081800e 	bge	zero,r2,10006670 <_dtoa_r+0x11d4>
10006070:	b93fffc3 	ldbu	r4,-1(r23)
10006074:	b8bfffc4 	addi	r2,r23,-1
10006078:	1007883a 	mov	r3,r2
1000607c:	01800e44 	movi	r6,57
10006080:	d9c00717 	ldw	r7,28(sp)
10006084:	00000506 	br	1000609c <_dtoa_r+0xc00>
10006088:	18ffffc4 	addi	r3,r3,-1
1000608c:	11c12326 	beq	r2,r7,1000651c <_dtoa_r+0x1080>
10006090:	19000003 	ldbu	r4,0(r3)
10006094:	102f883a 	mov	r23,r2
10006098:	10bfffc4 	addi	r2,r2,-1
1000609c:	21403fcc 	andi	r5,r4,255
100060a0:	2940201c 	xori	r5,r5,128
100060a4:	297fe004 	addi	r5,r5,-128
100060a8:	29bff726 	beq	r5,r6,10006088 <__alt_data_end+0xf8006088>
100060ac:	21000044 	addi	r4,r4,1
100060b0:	11000005 	stb	r4,0(r2)
100060b4:	a80b883a 	mov	r5,r21
100060b8:	e009883a 	mov	r4,fp
100060bc:	0008bfc0 	call	10008bfc <_Bfree>
100060c0:	883ea026 	beq	r17,zero,10005b44 <__alt_data_end+0xf8005b44>
100060c4:	90000426 	beq	r18,zero,100060d8 <_dtoa_r+0xc3c>
100060c8:	94400326 	beq	r18,r17,100060d8 <_dtoa_r+0xc3c>
100060cc:	900b883a 	mov	r5,r18
100060d0:	e009883a 	mov	r4,fp
100060d4:	0008bfc0 	call	10008bfc <_Bfree>
100060d8:	880b883a 	mov	r5,r17
100060dc:	e009883a 	mov	r4,fp
100060e0:	0008bfc0 	call	10008bfc <_Bfree>
100060e4:	003e9706 	br	10005b44 <__alt_data_end+0xf8005b44>
100060e8:	01800044 	movi	r6,1
100060ec:	d9800e15 	stw	r6,56(sp)
100060f0:	003d9606 	br	1000574c <__alt_data_end+0xf800574c>
100060f4:	d8800817 	ldw	r2,32(sp)
100060f8:	d8c00517 	ldw	r3,20(sp)
100060fc:	d8000d15 	stw	zero,52(sp)
10006100:	10c5c83a 	sub	r2,r2,r3
10006104:	00c9c83a 	sub	r4,zero,r3
10006108:	d8800815 	stw	r2,32(sp)
1000610c:	d9000a15 	stw	r4,40(sp)
10006110:	003d9706 	br	10005770 <__alt_data_end+0xf8005770>
10006114:	05adc83a 	sub	r22,zero,r22
10006118:	dd800815 	stw	r22,32(sp)
1000611c:	002d883a 	mov	r22,zero
10006120:	003d8e06 	br	1000575c <__alt_data_end+0xf800575c>
10006124:	d9000517 	ldw	r4,20(sp)
10006128:	000f7100 	call	1000f710 <__floatsidf>
1000612c:	100d883a 	mov	r6,r2
10006130:	180f883a 	mov	r7,r3
10006134:	a009883a 	mov	r4,r20
10006138:	880b883a 	mov	r5,r17
1000613c:	000e2d00 	call	1000e2d0 <__eqdf2>
10006140:	103d7126 	beq	r2,zero,10005708 <__alt_data_end+0xf8005708>
10006144:	d9c00517 	ldw	r7,20(sp)
10006148:	39ffffc4 	addi	r7,r7,-1
1000614c:	d9c00515 	stw	r7,20(sp)
10006150:	003d6d06 	br	10005708 <__alt_data_end+0xf8005708>
10006154:	dd400a17 	ldw	r21,40(sp)
10006158:	dd000817 	ldw	r20,32(sp)
1000615c:	0023883a 	mov	r17,zero
10006160:	003f4806 	br	10005e84 <__alt_data_end+0xf8005e84>
10006164:	10e3c83a 	sub	r17,r2,r3
10006168:	9448983a 	sll	r4,r18,r17
1000616c:	003d3206 	br	10005638 <__alt_data_end+0xf8005638>
10006170:	d8000e15 	stw	zero,56(sp)
10006174:	003d7506 	br	1000574c <__alt_data_end+0xf800574c>
10006178:	b005883a 	mov	r2,r22
1000617c:	003f4506 	br	10005e94 <__alt_data_end+0xf8005e94>
10006180:	dc000915 	stw	r16,36(sp)
10006184:	d9800a17 	ldw	r6,40(sp)
10006188:	d9400917 	ldw	r5,36(sp)
1000618c:	e009883a 	mov	r4,fp
10006190:	00092500 	call	10009250 <__pow5mult>
10006194:	1021883a 	mov	r16,r2
10006198:	003f5a06 	br	10005f04 <__alt_data_end+0xf8005f04>
1000619c:	01c00044 	movi	r7,1
100061a0:	d9c00b15 	stw	r7,44(sp)
100061a4:	d8802217 	ldw	r2,136(sp)
100061a8:	0081280e 	bge	zero,r2,1000664c <_dtoa_r+0x11b0>
100061ac:	100d883a 	mov	r6,r2
100061b0:	1021883a 	mov	r16,r2
100061b4:	d8800c15 	stw	r2,48(sp)
100061b8:	d8800615 	stw	r2,24(sp)
100061bc:	003d8806 	br	100057e0 <__alt_data_end+0xf80057e0>
100061c0:	d8800617 	ldw	r2,24(sp)
100061c4:	00be9b16 	blt	zero,r2,10005c34 <__alt_data_end+0xf8005c34>
100061c8:	10010f1e 	bne	r2,zero,10006608 <_dtoa_r+0x116c>
100061cc:	880b883a 	mov	r5,r17
100061d0:	000d883a 	mov	r6,zero
100061d4:	01d00534 	movhi	r7,16404
100061d8:	8009883a 	mov	r4,r16
100061dc:	000e5280 	call	1000e528 <__muldf3>
100061e0:	900d883a 	mov	r6,r18
100061e4:	980f883a 	mov	r7,r19
100061e8:	1009883a 	mov	r4,r2
100061ec:	180b883a 	mov	r5,r3
100061f0:	000e3580 	call	1000e358 <__gedf2>
100061f4:	002b883a 	mov	r21,zero
100061f8:	0023883a 	mov	r17,zero
100061fc:	1000bf16 	blt	r2,zero,100064fc <_dtoa_r+0x1060>
10006200:	d9802217 	ldw	r6,136(sp)
10006204:	ddc00717 	ldw	r23,28(sp)
10006208:	018c303a 	nor	r6,zero,r6
1000620c:	d9800515 	stw	r6,20(sp)
10006210:	a80b883a 	mov	r5,r21
10006214:	e009883a 	mov	r4,fp
10006218:	0008bfc0 	call	10008bfc <_Bfree>
1000621c:	883e4926 	beq	r17,zero,10005b44 <__alt_data_end+0xf8005b44>
10006220:	003fad06 	br	100060d8 <__alt_data_end+0xf80060d8>
10006224:	d9c01117 	ldw	r7,68(sp)
10006228:	3801bc26 	beq	r7,zero,1000691c <_dtoa_r+0x1480>
1000622c:	10810cc4 	addi	r2,r2,1075
10006230:	dd400a17 	ldw	r21,40(sp)
10006234:	dd000817 	ldw	r20,32(sp)
10006238:	003f0a06 	br	10005e64 <__alt_data_end+0xf8005e64>
1000623c:	00800704 	movi	r2,28
10006240:	d9000817 	ldw	r4,32(sp)
10006244:	a0a9883a 	add	r20,r20,r2
10006248:	b0ad883a 	add	r22,r22,r2
1000624c:	2089883a 	add	r4,r4,r2
10006250:	d9000815 	stw	r4,32(sp)
10006254:	003f5106 	br	10005f9c <__alt_data_end+0xf8005f9c>
10006258:	d8c00317 	ldw	r3,12(sp)
1000625c:	b8c1fc0e 	bge	r23,r3,10006a50 <_dtoa_r+0x15b4>
10006260:	0027883a 	mov	r19,zero
10006264:	b805883a 	mov	r2,r23
10006268:	003f3e06 	br	10005f64 <__alt_data_end+0xf8005f64>
1000626c:	880b883a 	mov	r5,r17
10006270:	e009883a 	mov	r4,fp
10006274:	000f883a 	mov	r7,zero
10006278:	01800284 	movi	r6,10
1000627c:	0008c240 	call	10008c24 <__multadd>
10006280:	d9000c17 	ldw	r4,48(sp)
10006284:	1023883a 	mov	r17,r2
10006288:	0102040e 	bge	zero,r4,10006a9c <_dtoa_r+0x1600>
1000628c:	d9000615 	stw	r4,24(sp)
10006290:	0500050e 	bge	zero,r20,100062a8 <_dtoa_r+0xe0c>
10006294:	880b883a 	mov	r5,r17
10006298:	a00d883a 	mov	r6,r20
1000629c:	e009883a 	mov	r4,fp
100062a0:	00093900 	call	10009390 <__lshift>
100062a4:	1023883a 	mov	r17,r2
100062a8:	9801241e 	bne	r19,zero,1000673c <_dtoa_r+0x12a0>
100062ac:	8829883a 	mov	r20,r17
100062b0:	d9000617 	ldw	r4,24(sp)
100062b4:	dcc00717 	ldw	r19,28(sp)
100062b8:	9480004c 	andi	r18,r18,1
100062bc:	20bfffc4 	addi	r2,r4,-1
100062c0:	9885883a 	add	r2,r19,r2
100062c4:	d8800415 	stw	r2,16(sp)
100062c8:	dc800615 	stw	r18,24(sp)
100062cc:	a80b883a 	mov	r5,r21
100062d0:	8009883a 	mov	r4,r16
100062d4:	00052740 	call	10005274 <quorem>
100062d8:	880b883a 	mov	r5,r17
100062dc:	8009883a 	mov	r4,r16
100062e0:	102f883a 	mov	r23,r2
100062e4:	00094d80 	call	100094d8 <__mcmp>
100062e8:	a80b883a 	mov	r5,r21
100062ec:	a00d883a 	mov	r6,r20
100062f0:	e009883a 	mov	r4,fp
100062f4:	102d883a 	mov	r22,r2
100062f8:	00095380 	call	10009538 <__mdiff>
100062fc:	1007883a 	mov	r3,r2
10006300:	10800317 	ldw	r2,12(r2)
10006304:	bc800c04 	addi	r18,r23,48
10006308:	180b883a 	mov	r5,r3
1000630c:	10004e1e 	bne	r2,zero,10006448 <_dtoa_r+0xfac>
10006310:	8009883a 	mov	r4,r16
10006314:	d8c01615 	stw	r3,88(sp)
10006318:	00094d80 	call	100094d8 <__mcmp>
1000631c:	d8c01617 	ldw	r3,88(sp)
10006320:	e009883a 	mov	r4,fp
10006324:	d8801615 	stw	r2,88(sp)
10006328:	180b883a 	mov	r5,r3
1000632c:	0008bfc0 	call	10008bfc <_Bfree>
10006330:	d8801617 	ldw	r2,88(sp)
10006334:	1000041e 	bne	r2,zero,10006348 <_dtoa_r+0xeac>
10006338:	d9800317 	ldw	r6,12(sp)
1000633c:	3000021e 	bne	r6,zero,10006348 <_dtoa_r+0xeac>
10006340:	d8c00617 	ldw	r3,24(sp)
10006344:	18003726 	beq	r3,zero,10006424 <_dtoa_r+0xf88>
10006348:	b0002016 	blt	r22,zero,100063cc <_dtoa_r+0xf30>
1000634c:	b000041e 	bne	r22,zero,10006360 <_dtoa_r+0xec4>
10006350:	d9000317 	ldw	r4,12(sp)
10006354:	2000021e 	bne	r4,zero,10006360 <_dtoa_r+0xec4>
10006358:	d8c00617 	ldw	r3,24(sp)
1000635c:	18001b26 	beq	r3,zero,100063cc <_dtoa_r+0xf30>
10006360:	00810716 	blt	zero,r2,10006780 <_dtoa_r+0x12e4>
10006364:	d8c00417 	ldw	r3,16(sp)
10006368:	9d800044 	addi	r22,r19,1
1000636c:	9c800005 	stb	r18,0(r19)
10006370:	b02f883a 	mov	r23,r22
10006374:	98c10626 	beq	r19,r3,10006790 <_dtoa_r+0x12f4>
10006378:	800b883a 	mov	r5,r16
1000637c:	000f883a 	mov	r7,zero
10006380:	01800284 	movi	r6,10
10006384:	e009883a 	mov	r4,fp
10006388:	0008c240 	call	10008c24 <__multadd>
1000638c:	1021883a 	mov	r16,r2
10006390:	000f883a 	mov	r7,zero
10006394:	01800284 	movi	r6,10
10006398:	880b883a 	mov	r5,r17
1000639c:	e009883a 	mov	r4,fp
100063a0:	8d002526 	beq	r17,r20,10006438 <_dtoa_r+0xf9c>
100063a4:	0008c240 	call	10008c24 <__multadd>
100063a8:	a00b883a 	mov	r5,r20
100063ac:	000f883a 	mov	r7,zero
100063b0:	01800284 	movi	r6,10
100063b4:	e009883a 	mov	r4,fp
100063b8:	1023883a 	mov	r17,r2
100063bc:	0008c240 	call	10008c24 <__multadd>
100063c0:	1029883a 	mov	r20,r2
100063c4:	b027883a 	mov	r19,r22
100063c8:	003fc006 	br	100062cc <__alt_data_end+0xf80062cc>
100063cc:	9011883a 	mov	r8,r18
100063d0:	00800e0e 	bge	zero,r2,1000640c <_dtoa_r+0xf70>
100063d4:	800b883a 	mov	r5,r16
100063d8:	01800044 	movi	r6,1
100063dc:	e009883a 	mov	r4,fp
100063e0:	da001715 	stw	r8,92(sp)
100063e4:	00093900 	call	10009390 <__lshift>
100063e8:	a80b883a 	mov	r5,r21
100063ec:	1009883a 	mov	r4,r2
100063f0:	1021883a 	mov	r16,r2
100063f4:	00094d80 	call	100094d8 <__mcmp>
100063f8:	da001717 	ldw	r8,92(sp)
100063fc:	0081960e 	bge	zero,r2,10006a58 <_dtoa_r+0x15bc>
10006400:	00800e44 	movi	r2,57
10006404:	40817026 	beq	r8,r2,100069c8 <_dtoa_r+0x152c>
10006408:	ba000c44 	addi	r8,r23,49
1000640c:	8825883a 	mov	r18,r17
10006410:	9dc00044 	addi	r23,r19,1
10006414:	9a000005 	stb	r8,0(r19)
10006418:	a023883a 	mov	r17,r20
1000641c:	dc000915 	stw	r16,36(sp)
10006420:	003f2406 	br	100060b4 <__alt_data_end+0xf80060b4>
10006424:	00800e44 	movi	r2,57
10006428:	9011883a 	mov	r8,r18
1000642c:	90816626 	beq	r18,r2,100069c8 <_dtoa_r+0x152c>
10006430:	05bff516 	blt	zero,r22,10006408 <__alt_data_end+0xf8006408>
10006434:	003ff506 	br	1000640c <__alt_data_end+0xf800640c>
10006438:	0008c240 	call	10008c24 <__multadd>
1000643c:	1023883a 	mov	r17,r2
10006440:	1029883a 	mov	r20,r2
10006444:	003fdf06 	br	100063c4 <__alt_data_end+0xf80063c4>
10006448:	e009883a 	mov	r4,fp
1000644c:	0008bfc0 	call	10008bfc <_Bfree>
10006450:	00800044 	movi	r2,1
10006454:	003fbc06 	br	10006348 <__alt_data_end+0xf8006348>
10006458:	a80b883a 	mov	r5,r21
1000645c:	8009883a 	mov	r4,r16
10006460:	00094d80 	call	100094d8 <__mcmp>
10006464:	103edb0e 	bge	r2,zero,10005fd4 <__alt_data_end+0xf8005fd4>
10006468:	800b883a 	mov	r5,r16
1000646c:	000f883a 	mov	r7,zero
10006470:	01800284 	movi	r6,10
10006474:	e009883a 	mov	r4,fp
10006478:	0008c240 	call	10008c24 <__multadd>
1000647c:	1021883a 	mov	r16,r2
10006480:	d8800517 	ldw	r2,20(sp)
10006484:	d8c00b17 	ldw	r3,44(sp)
10006488:	10bfffc4 	addi	r2,r2,-1
1000648c:	d8800515 	stw	r2,20(sp)
10006490:	183f761e 	bne	r3,zero,1000626c <__alt_data_end+0xf800626c>
10006494:	d9000c17 	ldw	r4,48(sp)
10006498:	0101730e 	bge	zero,r4,10006a68 <_dtoa_r+0x15cc>
1000649c:	d9000615 	stw	r4,24(sp)
100064a0:	003ed006 	br	10005fe4 <__alt_data_end+0xf8005fe4>
100064a4:	00800084 	movi	r2,2
100064a8:	3081861e 	bne	r6,r2,10006ac4 <_dtoa_r+0x1628>
100064ac:	d8000b15 	stw	zero,44(sp)
100064b0:	003f3c06 	br	100061a4 <__alt_data_end+0xf80061a4>
100064b4:	dc000917 	ldw	r16,36(sp)
100064b8:	003e9206 	br	10005f04 <__alt_data_end+0xf8005f04>
100064bc:	d9c00317 	ldw	r7,12(sp)
100064c0:	00800084 	movi	r2,2
100064c4:	11fec50e 	bge	r2,r7,10005fdc <__alt_data_end+0xf8005fdc>
100064c8:	d9000617 	ldw	r4,24(sp)
100064cc:	20013c1e 	bne	r4,zero,100069c0 <_dtoa_r+0x1524>
100064d0:	a80b883a 	mov	r5,r21
100064d4:	000f883a 	mov	r7,zero
100064d8:	01800144 	movi	r6,5
100064dc:	e009883a 	mov	r4,fp
100064e0:	0008c240 	call	10008c24 <__multadd>
100064e4:	100b883a 	mov	r5,r2
100064e8:	8009883a 	mov	r4,r16
100064ec:	102b883a 	mov	r21,r2
100064f0:	00094d80 	call	100094d8 <__mcmp>
100064f4:	dc000915 	stw	r16,36(sp)
100064f8:	00bf410e 	bge	zero,r2,10006200 <__alt_data_end+0xf8006200>
100064fc:	d9c00717 	ldw	r7,28(sp)
10006500:	00800c44 	movi	r2,49
10006504:	38800005 	stb	r2,0(r7)
10006508:	d8800517 	ldw	r2,20(sp)
1000650c:	3dc00044 	addi	r23,r7,1
10006510:	10800044 	addi	r2,r2,1
10006514:	d8800515 	stw	r2,20(sp)
10006518:	003f3d06 	br	10006210 <__alt_data_end+0xf8006210>
1000651c:	d9800517 	ldw	r6,20(sp)
10006520:	d9c00717 	ldw	r7,28(sp)
10006524:	00800c44 	movi	r2,49
10006528:	31800044 	addi	r6,r6,1
1000652c:	d9800515 	stw	r6,20(sp)
10006530:	38800005 	stb	r2,0(r7)
10006534:	003edf06 	br	100060b4 <__alt_data_end+0xf80060b4>
10006538:	d8000b15 	stw	zero,44(sp)
1000653c:	003c9f06 	br	100057bc <__alt_data_end+0xf80057bc>
10006540:	903e7e1e 	bne	r18,zero,10005f3c <__alt_data_end+0xf8005f3c>
10006544:	00800434 	movhi	r2,16
10006548:	10bfffc4 	addi	r2,r2,-1
1000654c:	9884703a 	and	r2,r19,r2
10006550:	1000ea1e 	bne	r2,zero,100068fc <_dtoa_r+0x1460>
10006554:	9cdffc2c 	andhi	r19,r19,32752
10006558:	9800e826 	beq	r19,zero,100068fc <_dtoa_r+0x1460>
1000655c:	d9c00817 	ldw	r7,32(sp)
10006560:	b5800044 	addi	r22,r22,1
10006564:	04c00044 	movi	r19,1
10006568:	39c00044 	addi	r7,r7,1
1000656c:	d9c00815 	stw	r7,32(sp)
10006570:	d8800d17 	ldw	r2,52(sp)
10006574:	103e721e 	bne	r2,zero,10005f40 <__alt_data_end+0xf8005f40>
10006578:	00800044 	movi	r2,1
1000657c:	003e7906 	br	10005f64 <__alt_data_end+0xf8005f64>
10006580:	8009883a 	mov	r4,r16
10006584:	000f7100 	call	1000f710 <__floatsidf>
10006588:	d9800f17 	ldw	r6,60(sp)
1000658c:	d9c01017 	ldw	r7,64(sp)
10006590:	1009883a 	mov	r4,r2
10006594:	180b883a 	mov	r5,r3
10006598:	000e5280 	call	1000e528 <__muldf3>
1000659c:	000d883a 	mov	r6,zero
100065a0:	01d00734 	movhi	r7,16412
100065a4:	1009883a 	mov	r4,r2
100065a8:	180b883a 	mov	r5,r3
100065ac:	000d0540 	call	1000d054 <__adddf3>
100065b0:	047f3034 	movhi	r17,64704
100065b4:	1021883a 	mov	r16,r2
100065b8:	1c63883a 	add	r17,r3,r17
100065bc:	d9000f17 	ldw	r4,60(sp)
100065c0:	d9401017 	ldw	r5,64(sp)
100065c4:	000d883a 	mov	r6,zero
100065c8:	01d00534 	movhi	r7,16404
100065cc:	000ed940 	call	1000ed94 <__subdf3>
100065d0:	800d883a 	mov	r6,r16
100065d4:	880f883a 	mov	r7,r17
100065d8:	1009883a 	mov	r4,r2
100065dc:	180b883a 	mov	r5,r3
100065e0:	102b883a 	mov	r21,r2
100065e4:	1829883a 	mov	r20,r3
100065e8:	000e3580 	call	1000e358 <__gedf2>
100065ec:	00806c16 	blt	zero,r2,100067a0 <_dtoa_r+0x1304>
100065f0:	89e0003c 	xorhi	r7,r17,32768
100065f4:	800d883a 	mov	r6,r16
100065f8:	a809883a 	mov	r4,r21
100065fc:	a00b883a 	mov	r5,r20
10006600:	000e4340 	call	1000e434 <__ledf2>
10006604:	103d7e0e 	bge	r2,zero,10005c00 <__alt_data_end+0xf8005c00>
10006608:	002b883a 	mov	r21,zero
1000660c:	0023883a 	mov	r17,zero
10006610:	003efb06 	br	10006200 <__alt_data_end+0xf8006200>
10006614:	d8800717 	ldw	r2,28(sp)
10006618:	003bd006 	br	1000555c <__alt_data_end+0xf800555c>
1000661c:	d9000a17 	ldw	r4,40(sp)
10006620:	d9800d17 	ldw	r6,52(sp)
10006624:	dd400a15 	stw	r21,40(sp)
10006628:	a905c83a 	sub	r2,r21,r4
1000662c:	308d883a 	add	r6,r6,r2
10006630:	d9800d15 	stw	r6,52(sp)
10006634:	002b883a 	mov	r21,zero
10006638:	003e0606 	br	10005e54 <__alt_data_end+0xf8005e54>
1000663c:	9023883a 	mov	r17,r18
10006640:	9829883a 	mov	r20,r19
10006644:	04000084 	movi	r16,2
10006648:	003c9206 	br	10005894 <__alt_data_end+0xf8005894>
1000664c:	04000044 	movi	r16,1
10006650:	dc000c15 	stw	r16,48(sp)
10006654:	dc000615 	stw	r16,24(sp)
10006658:	dc002215 	stw	r16,136(sp)
1000665c:	e0001115 	stw	zero,68(fp)
10006660:	000b883a 	mov	r5,zero
10006664:	003c6906 	br	1000580c <__alt_data_end+0xf800580c>
10006668:	3021883a 	mov	r16,r6
1000666c:	003ffb06 	br	1000665c <__alt_data_end+0xf800665c>
10006670:	1000021e 	bne	r2,zero,1000667c <_dtoa_r+0x11e0>
10006674:	4200004c 	andi	r8,r8,1
10006678:	403e7d1e 	bne	r8,zero,10006070 <__alt_data_end+0xf8006070>
1000667c:	01000c04 	movi	r4,48
10006680:	00000106 	br	10006688 <_dtoa_r+0x11ec>
10006684:	102f883a 	mov	r23,r2
10006688:	b8bfffc4 	addi	r2,r23,-1
1000668c:	10c00007 	ldb	r3,0(r2)
10006690:	193ffc26 	beq	r3,r4,10006684 <__alt_data_end+0xf8006684>
10006694:	003e8706 	br	100060b4 <__alt_data_end+0xf80060b4>
10006698:	d8800517 	ldw	r2,20(sp)
1000669c:	00a3c83a 	sub	r17,zero,r2
100066a0:	8800a426 	beq	r17,zero,10006934 <_dtoa_r+0x1498>
100066a4:	888003cc 	andi	r2,r17,15
100066a8:	100490fa 	slli	r2,r2,3
100066ac:	00c40074 	movhi	r3,4097
100066b0:	18ca6d04 	addi	r3,r3,10676
100066b4:	1885883a 	add	r2,r3,r2
100066b8:	11800017 	ldw	r6,0(r2)
100066bc:	11c00117 	ldw	r7,4(r2)
100066c0:	9009883a 	mov	r4,r18
100066c4:	980b883a 	mov	r5,r19
100066c8:	8823d13a 	srai	r17,r17,4
100066cc:	000e5280 	call	1000e528 <__muldf3>
100066d0:	d8800f15 	stw	r2,60(sp)
100066d4:	d8c01015 	stw	r3,64(sp)
100066d8:	8800e826 	beq	r17,zero,10006a7c <_dtoa_r+0x15e0>
100066dc:	05040074 	movhi	r20,4097
100066e0:	a50a6304 	addi	r20,r20,10636
100066e4:	04000084 	movi	r16,2
100066e8:	8980004c 	andi	r6,r17,1
100066ec:	1009883a 	mov	r4,r2
100066f0:	8823d07a 	srai	r17,r17,1
100066f4:	180b883a 	mov	r5,r3
100066f8:	30000426 	beq	r6,zero,1000670c <_dtoa_r+0x1270>
100066fc:	a1800017 	ldw	r6,0(r20)
10006700:	a1c00117 	ldw	r7,4(r20)
10006704:	84000044 	addi	r16,r16,1
10006708:	000e5280 	call	1000e528 <__muldf3>
1000670c:	a5000204 	addi	r20,r20,8
10006710:	883ff51e 	bne	r17,zero,100066e8 <__alt_data_end+0xf80066e8>
10006714:	d8800f15 	stw	r2,60(sp)
10006718:	d8c01015 	stw	r3,64(sp)
1000671c:	003c7606 	br	100058f8 <__alt_data_end+0xf80058f8>
10006720:	00c00c04 	movi	r3,48
10006724:	10c00005 	stb	r3,0(r2)
10006728:	d8c00517 	ldw	r3,20(sp)
1000672c:	bd3fffc3 	ldbu	r20,-1(r23)
10006730:	18c00044 	addi	r3,r3,1
10006734:	d8c00515 	stw	r3,20(sp)
10006738:	003db906 	br	10005e20 <__alt_data_end+0xf8005e20>
1000673c:	89400117 	ldw	r5,4(r17)
10006740:	e009883a 	mov	r4,fp
10006744:	0008b540 	call	10008b54 <_Balloc>
10006748:	89800417 	ldw	r6,16(r17)
1000674c:	89400304 	addi	r5,r17,12
10006750:	11000304 	addi	r4,r2,12
10006754:	31800084 	addi	r6,r6,2
10006758:	318d883a 	add	r6,r6,r6
1000675c:	318d883a 	add	r6,r6,r6
10006760:	1027883a 	mov	r19,r2
10006764:	00087880 	call	10008788 <memcpy>
10006768:	01800044 	movi	r6,1
1000676c:	980b883a 	mov	r5,r19
10006770:	e009883a 	mov	r4,fp
10006774:	00093900 	call	10009390 <__lshift>
10006778:	1029883a 	mov	r20,r2
1000677c:	003ecc06 	br	100062b0 <__alt_data_end+0xf80062b0>
10006780:	00800e44 	movi	r2,57
10006784:	90809026 	beq	r18,r2,100069c8 <_dtoa_r+0x152c>
10006788:	92000044 	addi	r8,r18,1
1000678c:	003f1f06 	br	1000640c <__alt_data_end+0xf800640c>
10006790:	9011883a 	mov	r8,r18
10006794:	8825883a 	mov	r18,r17
10006798:	a023883a 	mov	r17,r20
1000679c:	003e2906 	br	10006044 <__alt_data_end+0xf8006044>
100067a0:	002b883a 	mov	r21,zero
100067a4:	0023883a 	mov	r17,zero
100067a8:	003f5406 	br	100064fc <__alt_data_end+0xf80064fc>
100067ac:	61bfffc4 	addi	r6,r12,-1
100067b0:	300490fa 	slli	r2,r6,3
100067b4:	00c40074 	movhi	r3,4097
100067b8:	18ca6d04 	addi	r3,r3,10676
100067bc:	1885883a 	add	r2,r3,r2
100067c0:	11000017 	ldw	r4,0(r2)
100067c4:	11400117 	ldw	r5,4(r2)
100067c8:	d8800717 	ldw	r2,28(sp)
100067cc:	880f883a 	mov	r7,r17
100067d0:	d9801215 	stw	r6,72(sp)
100067d4:	800d883a 	mov	r6,r16
100067d8:	db001615 	stw	r12,88(sp)
100067dc:	15c00044 	addi	r23,r2,1
100067e0:	000e5280 	call	1000e528 <__muldf3>
100067e4:	d9401017 	ldw	r5,64(sp)
100067e8:	d9000f17 	ldw	r4,60(sp)
100067ec:	d8c01515 	stw	r3,84(sp)
100067f0:	d8801415 	stw	r2,80(sp)
100067f4:	000f6900 	call	1000f690 <__fixdfsi>
100067f8:	1009883a 	mov	r4,r2
100067fc:	1021883a 	mov	r16,r2
10006800:	000f7100 	call	1000f710 <__floatsidf>
10006804:	d9000f17 	ldw	r4,60(sp)
10006808:	d9401017 	ldw	r5,64(sp)
1000680c:	100d883a 	mov	r6,r2
10006810:	180f883a 	mov	r7,r3
10006814:	000ed940 	call	1000ed94 <__subdf3>
10006818:	1829883a 	mov	r20,r3
1000681c:	d8c00717 	ldw	r3,28(sp)
10006820:	84000c04 	addi	r16,r16,48
10006824:	1023883a 	mov	r17,r2
10006828:	1c000005 	stb	r16,0(r3)
1000682c:	db001617 	ldw	r12,88(sp)
10006830:	00800044 	movi	r2,1
10006834:	60802226 	beq	r12,r2,100068c0 <_dtoa_r+0x1424>
10006838:	d9c00717 	ldw	r7,28(sp)
1000683c:	8805883a 	mov	r2,r17
10006840:	b82b883a 	mov	r21,r23
10006844:	3b19883a 	add	r12,r7,r12
10006848:	6023883a 	mov	r17,r12
1000684c:	a007883a 	mov	r3,r20
10006850:	dc800f15 	stw	r18,60(sp)
10006854:	000d883a 	mov	r6,zero
10006858:	01d00934 	movhi	r7,16420
1000685c:	1009883a 	mov	r4,r2
10006860:	180b883a 	mov	r5,r3
10006864:	000e5280 	call	1000e528 <__muldf3>
10006868:	180b883a 	mov	r5,r3
1000686c:	1009883a 	mov	r4,r2
10006870:	1829883a 	mov	r20,r3
10006874:	1025883a 	mov	r18,r2
10006878:	000f6900 	call	1000f690 <__fixdfsi>
1000687c:	1009883a 	mov	r4,r2
10006880:	1021883a 	mov	r16,r2
10006884:	000f7100 	call	1000f710 <__floatsidf>
10006888:	100d883a 	mov	r6,r2
1000688c:	180f883a 	mov	r7,r3
10006890:	9009883a 	mov	r4,r18
10006894:	a00b883a 	mov	r5,r20
10006898:	84000c04 	addi	r16,r16,48
1000689c:	000ed940 	call	1000ed94 <__subdf3>
100068a0:	ad400044 	addi	r21,r21,1
100068a4:	ac3fffc5 	stb	r16,-1(r21)
100068a8:	ac7fea1e 	bne	r21,r17,10006854 <__alt_data_end+0xf8006854>
100068ac:	1023883a 	mov	r17,r2
100068b0:	d8801217 	ldw	r2,72(sp)
100068b4:	dc800f17 	ldw	r18,60(sp)
100068b8:	1829883a 	mov	r20,r3
100068bc:	b8af883a 	add	r23,r23,r2
100068c0:	d9001417 	ldw	r4,80(sp)
100068c4:	d9401517 	ldw	r5,84(sp)
100068c8:	000d883a 	mov	r6,zero
100068cc:	01cff834 	movhi	r7,16352
100068d0:	000d0540 	call	1000d054 <__adddf3>
100068d4:	880d883a 	mov	r6,r17
100068d8:	a00f883a 	mov	r7,r20
100068dc:	1009883a 	mov	r4,r2
100068e0:	180b883a 	mov	r5,r3
100068e4:	000e4340 	call	1000e434 <__ledf2>
100068e8:	10003e0e 	bge	r2,zero,100069e4 <_dtoa_r+0x1548>
100068ec:	d9001317 	ldw	r4,76(sp)
100068f0:	bd3fffc3 	ldbu	r20,-1(r23)
100068f4:	d9000515 	stw	r4,20(sp)
100068f8:	003d3b06 	br	10005de8 <__alt_data_end+0xf8005de8>
100068fc:	0027883a 	mov	r19,zero
10006900:	003f1b06 	br	10006570 <__alt_data_end+0xf8006570>
10006904:	d8800817 	ldw	r2,32(sp)
10006908:	11e9c83a 	sub	r20,r2,r7
1000690c:	0005883a 	mov	r2,zero
10006910:	003d5406 	br	10005e64 <__alt_data_end+0xf8005e64>
10006914:	00800044 	movi	r2,1
10006918:	003dc706 	br	10006038 <__alt_data_end+0xf8006038>
1000691c:	d8c00217 	ldw	r3,8(sp)
10006920:	00800d84 	movi	r2,54
10006924:	dd400a17 	ldw	r21,40(sp)
10006928:	10c5c83a 	sub	r2,r2,r3
1000692c:	dd000817 	ldw	r20,32(sp)
10006930:	003d4c06 	br	10005e64 <__alt_data_end+0xf8005e64>
10006934:	dc800f15 	stw	r18,60(sp)
10006938:	dcc01015 	stw	r19,64(sp)
1000693c:	04000084 	movi	r16,2
10006940:	003bed06 	br	100058f8 <__alt_data_end+0xf80058f8>
10006944:	d9000617 	ldw	r4,24(sp)
10006948:	203f0d26 	beq	r4,zero,10006580 <__alt_data_end+0xf8006580>
1000694c:	d9800c17 	ldw	r6,48(sp)
10006950:	01bcab0e 	bge	zero,r6,10005c00 <__alt_data_end+0xf8005c00>
10006954:	d9401017 	ldw	r5,64(sp)
10006958:	d9000f17 	ldw	r4,60(sp)
1000695c:	000d883a 	mov	r6,zero
10006960:	01d00934 	movhi	r7,16420
10006964:	000e5280 	call	1000e528 <__muldf3>
10006968:	81000044 	addi	r4,r16,1
1000696c:	d8800f15 	stw	r2,60(sp)
10006970:	d8c01015 	stw	r3,64(sp)
10006974:	000f7100 	call	1000f710 <__floatsidf>
10006978:	d9800f17 	ldw	r6,60(sp)
1000697c:	d9c01017 	ldw	r7,64(sp)
10006980:	1009883a 	mov	r4,r2
10006984:	180b883a 	mov	r5,r3
10006988:	000e5280 	call	1000e528 <__muldf3>
1000698c:	01d00734 	movhi	r7,16412
10006990:	000d883a 	mov	r6,zero
10006994:	1009883a 	mov	r4,r2
10006998:	180b883a 	mov	r5,r3
1000699c:	000d0540 	call	1000d054 <__adddf3>
100069a0:	d9c00517 	ldw	r7,20(sp)
100069a4:	047f3034 	movhi	r17,64704
100069a8:	1021883a 	mov	r16,r2
100069ac:	39ffffc4 	addi	r7,r7,-1
100069b0:	d9c01315 	stw	r7,76(sp)
100069b4:	1c63883a 	add	r17,r3,r17
100069b8:	db000c17 	ldw	r12,48(sp)
100069bc:	003bea06 	br	10005968 <__alt_data_end+0xf8005968>
100069c0:	dc000915 	stw	r16,36(sp)
100069c4:	003e0e06 	br	10006200 <__alt_data_end+0xf8006200>
100069c8:	01000e44 	movi	r4,57
100069cc:	8825883a 	mov	r18,r17
100069d0:	9dc00044 	addi	r23,r19,1
100069d4:	99000005 	stb	r4,0(r19)
100069d8:	a023883a 	mov	r17,r20
100069dc:	dc000915 	stw	r16,36(sp)
100069e0:	003da406 	br	10006074 <__alt_data_end+0xf8006074>
100069e4:	d9801417 	ldw	r6,80(sp)
100069e8:	d9c01517 	ldw	r7,84(sp)
100069ec:	0009883a 	mov	r4,zero
100069f0:	014ff834 	movhi	r5,16352
100069f4:	000ed940 	call	1000ed94 <__subdf3>
100069f8:	880d883a 	mov	r6,r17
100069fc:	a00f883a 	mov	r7,r20
10006a00:	1009883a 	mov	r4,r2
10006a04:	180b883a 	mov	r5,r3
10006a08:	000e3580 	call	1000e358 <__gedf2>
10006a0c:	00bc7c0e 	bge	zero,r2,10005c00 <__alt_data_end+0xf8005c00>
10006a10:	01000c04 	movi	r4,48
10006a14:	00000106 	br	10006a1c <_dtoa_r+0x1580>
10006a18:	102f883a 	mov	r23,r2
10006a1c:	b8bfffc4 	addi	r2,r23,-1
10006a20:	10c00007 	ldb	r3,0(r2)
10006a24:	193ffc26 	beq	r3,r4,10006a18 <__alt_data_end+0xf8006a18>
10006a28:	d9801317 	ldw	r6,76(sp)
10006a2c:	d9800515 	stw	r6,20(sp)
10006a30:	003c4406 	br	10005b44 <__alt_data_end+0xf8005b44>
10006a34:	d9801317 	ldw	r6,76(sp)
10006a38:	d9800515 	stw	r6,20(sp)
10006a3c:	003cea06 	br	10005de8 <__alt_data_end+0xf8005de8>
10006a40:	dd800f17 	ldw	r22,60(sp)
10006a44:	dcc01017 	ldw	r19,64(sp)
10006a48:	dc801217 	ldw	r18,72(sp)
10006a4c:	003c6c06 	br	10005c00 <__alt_data_end+0xf8005c00>
10006a50:	903e031e 	bne	r18,zero,10006260 <__alt_data_end+0xf8006260>
10006a54:	003ebb06 	br	10006544 <__alt_data_end+0xf8006544>
10006a58:	103e6c1e 	bne	r2,zero,1000640c <__alt_data_end+0xf800640c>
10006a5c:	4080004c 	andi	r2,r8,1
10006a60:	103e6a26 	beq	r2,zero,1000640c <__alt_data_end+0xf800640c>
10006a64:	003e6606 	br	10006400 <__alt_data_end+0xf8006400>
10006a68:	d8c00317 	ldw	r3,12(sp)
10006a6c:	00800084 	movi	r2,2
10006a70:	10c02916 	blt	r2,r3,10006b18 <_dtoa_r+0x167c>
10006a74:	d9000c17 	ldw	r4,48(sp)
10006a78:	003e8806 	br	1000649c <__alt_data_end+0xf800649c>
10006a7c:	04000084 	movi	r16,2
10006a80:	003b9d06 	br	100058f8 <__alt_data_end+0xf80058f8>
10006a84:	d9001317 	ldw	r4,76(sp)
10006a88:	d9000515 	stw	r4,20(sp)
10006a8c:	003cd606 	br	10005de8 <__alt_data_end+0xf8005de8>
10006a90:	d8801317 	ldw	r2,76(sp)
10006a94:	d8800515 	stw	r2,20(sp)
10006a98:	003c2a06 	br	10005b44 <__alt_data_end+0xf8005b44>
10006a9c:	d9800317 	ldw	r6,12(sp)
10006aa0:	00800084 	movi	r2,2
10006aa4:	11801516 	blt	r2,r6,10006afc <_dtoa_r+0x1660>
10006aa8:	d9c00c17 	ldw	r7,48(sp)
10006aac:	d9c00615 	stw	r7,24(sp)
10006ab0:	003df706 	br	10006290 <__alt_data_end+0xf8006290>
10006ab4:	193d3926 	beq	r3,r4,10005f9c <__alt_data_end+0xf8005f9c>
10006ab8:	00c00f04 	movi	r3,60
10006abc:	1885c83a 	sub	r2,r3,r2
10006ac0:	003ddf06 	br	10006240 <__alt_data_end+0xf8006240>
10006ac4:	e009883a 	mov	r4,fp
10006ac8:	e0001115 	stw	zero,68(fp)
10006acc:	000b883a 	mov	r5,zero
10006ad0:	0008b540 	call	10008b54 <_Balloc>
10006ad4:	d8800715 	stw	r2,28(sp)
10006ad8:	d8c00717 	ldw	r3,28(sp)
10006adc:	00bfffc4 	movi	r2,-1
10006ae0:	01000044 	movi	r4,1
10006ae4:	d8800c15 	stw	r2,48(sp)
10006ae8:	e0c01015 	stw	r3,64(fp)
10006aec:	d9000b15 	stw	r4,44(sp)
10006af0:	d8800615 	stw	r2,24(sp)
10006af4:	d8002215 	stw	zero,136(sp)
10006af8:	003c4106 	br	10005c00 <__alt_data_end+0xf8005c00>
10006afc:	d8c00c17 	ldw	r3,48(sp)
10006b00:	d8c00615 	stw	r3,24(sp)
10006b04:	003e7006 	br	100064c8 <__alt_data_end+0xf80064c8>
10006b08:	04400044 	movi	r17,1
10006b0c:	003b2006 	br	10005790 <__alt_data_end+0xf8005790>
10006b10:	000b883a 	mov	r5,zero
10006b14:	003b3d06 	br	1000580c <__alt_data_end+0xf800580c>
10006b18:	d8800c17 	ldw	r2,48(sp)
10006b1c:	d8800615 	stw	r2,24(sp)
10006b20:	003e6906 	br	100064c8 <__alt_data_end+0xf80064c8>

10006b24 <__sflush_r>:
10006b24:	2880030b 	ldhu	r2,12(r5)
10006b28:	defffb04 	addi	sp,sp,-20
10006b2c:	dcc00315 	stw	r19,12(sp)
10006b30:	dc400115 	stw	r17,4(sp)
10006b34:	dfc00415 	stw	ra,16(sp)
10006b38:	dc800215 	stw	r18,8(sp)
10006b3c:	dc000015 	stw	r16,0(sp)
10006b40:	10c0020c 	andi	r3,r2,8
10006b44:	2823883a 	mov	r17,r5
10006b48:	2027883a 	mov	r19,r4
10006b4c:	1800311e 	bne	r3,zero,10006c14 <__sflush_r+0xf0>
10006b50:	28c00117 	ldw	r3,4(r5)
10006b54:	10820014 	ori	r2,r2,2048
10006b58:	2880030d 	sth	r2,12(r5)
10006b5c:	00c04b0e 	bge	zero,r3,10006c8c <__sflush_r+0x168>
10006b60:	8a000a17 	ldw	r8,40(r17)
10006b64:	40002326 	beq	r8,zero,10006bf4 <__sflush_r+0xd0>
10006b68:	9c000017 	ldw	r16,0(r19)
10006b6c:	10c4000c 	andi	r3,r2,4096
10006b70:	98000015 	stw	zero,0(r19)
10006b74:	18004826 	beq	r3,zero,10006c98 <__sflush_r+0x174>
10006b78:	89801417 	ldw	r6,80(r17)
10006b7c:	10c0010c 	andi	r3,r2,4
10006b80:	18000626 	beq	r3,zero,10006b9c <__sflush_r+0x78>
10006b84:	88c00117 	ldw	r3,4(r17)
10006b88:	88800c17 	ldw	r2,48(r17)
10006b8c:	30cdc83a 	sub	r6,r6,r3
10006b90:	10000226 	beq	r2,zero,10006b9c <__sflush_r+0x78>
10006b94:	88800f17 	ldw	r2,60(r17)
10006b98:	308dc83a 	sub	r6,r6,r2
10006b9c:	89400717 	ldw	r5,28(r17)
10006ba0:	000f883a 	mov	r7,zero
10006ba4:	9809883a 	mov	r4,r19
10006ba8:	403ee83a 	callr	r8
10006bac:	00ffffc4 	movi	r3,-1
10006bb0:	10c04426 	beq	r2,r3,10006cc4 <__sflush_r+0x1a0>
10006bb4:	88c0030b 	ldhu	r3,12(r17)
10006bb8:	89000417 	ldw	r4,16(r17)
10006bbc:	88000115 	stw	zero,4(r17)
10006bc0:	197dffcc 	andi	r5,r3,63487
10006bc4:	8940030d 	sth	r5,12(r17)
10006bc8:	89000015 	stw	r4,0(r17)
10006bcc:	18c4000c 	andi	r3,r3,4096
10006bd0:	18002c1e 	bne	r3,zero,10006c84 <__sflush_r+0x160>
10006bd4:	89400c17 	ldw	r5,48(r17)
10006bd8:	9c000015 	stw	r16,0(r19)
10006bdc:	28000526 	beq	r5,zero,10006bf4 <__sflush_r+0xd0>
10006be0:	88801004 	addi	r2,r17,64
10006be4:	28800226 	beq	r5,r2,10006bf0 <__sflush_r+0xcc>
10006be8:	9809883a 	mov	r4,r19
10006bec:	00072a00 	call	100072a0 <_free_r>
10006bf0:	88000c15 	stw	zero,48(r17)
10006bf4:	0005883a 	mov	r2,zero
10006bf8:	dfc00417 	ldw	ra,16(sp)
10006bfc:	dcc00317 	ldw	r19,12(sp)
10006c00:	dc800217 	ldw	r18,8(sp)
10006c04:	dc400117 	ldw	r17,4(sp)
10006c08:	dc000017 	ldw	r16,0(sp)
10006c0c:	dec00504 	addi	sp,sp,20
10006c10:	f800283a 	ret
10006c14:	2c800417 	ldw	r18,16(r5)
10006c18:	903ff626 	beq	r18,zero,10006bf4 <__alt_data_end+0xf8006bf4>
10006c1c:	2c000017 	ldw	r16,0(r5)
10006c20:	108000cc 	andi	r2,r2,3
10006c24:	2c800015 	stw	r18,0(r5)
10006c28:	84a1c83a 	sub	r16,r16,r18
10006c2c:	1000131e 	bne	r2,zero,10006c7c <__sflush_r+0x158>
10006c30:	28800517 	ldw	r2,20(r5)
10006c34:	88800215 	stw	r2,8(r17)
10006c38:	04000316 	blt	zero,r16,10006c48 <__sflush_r+0x124>
10006c3c:	003fed06 	br	10006bf4 <__alt_data_end+0xf8006bf4>
10006c40:	90a5883a 	add	r18,r18,r2
10006c44:	043feb0e 	bge	zero,r16,10006bf4 <__alt_data_end+0xf8006bf4>
10006c48:	88800917 	ldw	r2,36(r17)
10006c4c:	89400717 	ldw	r5,28(r17)
10006c50:	800f883a 	mov	r7,r16
10006c54:	900d883a 	mov	r6,r18
10006c58:	9809883a 	mov	r4,r19
10006c5c:	103ee83a 	callr	r2
10006c60:	80a1c83a 	sub	r16,r16,r2
10006c64:	00bff616 	blt	zero,r2,10006c40 <__alt_data_end+0xf8006c40>
10006c68:	88c0030b 	ldhu	r3,12(r17)
10006c6c:	00bfffc4 	movi	r2,-1
10006c70:	18c01014 	ori	r3,r3,64
10006c74:	88c0030d 	sth	r3,12(r17)
10006c78:	003fdf06 	br	10006bf8 <__alt_data_end+0xf8006bf8>
10006c7c:	0005883a 	mov	r2,zero
10006c80:	003fec06 	br	10006c34 <__alt_data_end+0xf8006c34>
10006c84:	88801415 	stw	r2,80(r17)
10006c88:	003fd206 	br	10006bd4 <__alt_data_end+0xf8006bd4>
10006c8c:	28c00f17 	ldw	r3,60(r5)
10006c90:	00ffb316 	blt	zero,r3,10006b60 <__alt_data_end+0xf8006b60>
10006c94:	003fd706 	br	10006bf4 <__alt_data_end+0xf8006bf4>
10006c98:	89400717 	ldw	r5,28(r17)
10006c9c:	000d883a 	mov	r6,zero
10006ca0:	01c00044 	movi	r7,1
10006ca4:	9809883a 	mov	r4,r19
10006ca8:	403ee83a 	callr	r8
10006cac:	100d883a 	mov	r6,r2
10006cb0:	00bfffc4 	movi	r2,-1
10006cb4:	30801426 	beq	r6,r2,10006d08 <__sflush_r+0x1e4>
10006cb8:	8880030b 	ldhu	r2,12(r17)
10006cbc:	8a000a17 	ldw	r8,40(r17)
10006cc0:	003fae06 	br	10006b7c <__alt_data_end+0xf8006b7c>
10006cc4:	98c00017 	ldw	r3,0(r19)
10006cc8:	183fba26 	beq	r3,zero,10006bb4 <__alt_data_end+0xf8006bb4>
10006ccc:	01000744 	movi	r4,29
10006cd0:	19000626 	beq	r3,r4,10006cec <__sflush_r+0x1c8>
10006cd4:	01000584 	movi	r4,22
10006cd8:	19000426 	beq	r3,r4,10006cec <__sflush_r+0x1c8>
10006cdc:	88c0030b 	ldhu	r3,12(r17)
10006ce0:	18c01014 	ori	r3,r3,64
10006ce4:	88c0030d 	sth	r3,12(r17)
10006ce8:	003fc306 	br	10006bf8 <__alt_data_end+0xf8006bf8>
10006cec:	8880030b 	ldhu	r2,12(r17)
10006cf0:	88c00417 	ldw	r3,16(r17)
10006cf4:	88000115 	stw	zero,4(r17)
10006cf8:	10bdffcc 	andi	r2,r2,63487
10006cfc:	8880030d 	sth	r2,12(r17)
10006d00:	88c00015 	stw	r3,0(r17)
10006d04:	003fb306 	br	10006bd4 <__alt_data_end+0xf8006bd4>
10006d08:	98800017 	ldw	r2,0(r19)
10006d0c:	103fea26 	beq	r2,zero,10006cb8 <__alt_data_end+0xf8006cb8>
10006d10:	00c00744 	movi	r3,29
10006d14:	10c00226 	beq	r2,r3,10006d20 <__sflush_r+0x1fc>
10006d18:	00c00584 	movi	r3,22
10006d1c:	10c0031e 	bne	r2,r3,10006d2c <__sflush_r+0x208>
10006d20:	9c000015 	stw	r16,0(r19)
10006d24:	0005883a 	mov	r2,zero
10006d28:	003fb306 	br	10006bf8 <__alt_data_end+0xf8006bf8>
10006d2c:	88c0030b 	ldhu	r3,12(r17)
10006d30:	3005883a 	mov	r2,r6
10006d34:	18c01014 	ori	r3,r3,64
10006d38:	88c0030d 	sth	r3,12(r17)
10006d3c:	003fae06 	br	10006bf8 <__alt_data_end+0xf8006bf8>

10006d40 <_fflush_r>:
10006d40:	defffd04 	addi	sp,sp,-12
10006d44:	dc000115 	stw	r16,4(sp)
10006d48:	dfc00215 	stw	ra,8(sp)
10006d4c:	2021883a 	mov	r16,r4
10006d50:	20000226 	beq	r4,zero,10006d5c <_fflush_r+0x1c>
10006d54:	20800e17 	ldw	r2,56(r4)
10006d58:	10000c26 	beq	r2,zero,10006d8c <_fflush_r+0x4c>
10006d5c:	2880030f 	ldh	r2,12(r5)
10006d60:	1000051e 	bne	r2,zero,10006d78 <_fflush_r+0x38>
10006d64:	0005883a 	mov	r2,zero
10006d68:	dfc00217 	ldw	ra,8(sp)
10006d6c:	dc000117 	ldw	r16,4(sp)
10006d70:	dec00304 	addi	sp,sp,12
10006d74:	f800283a 	ret
10006d78:	8009883a 	mov	r4,r16
10006d7c:	dfc00217 	ldw	ra,8(sp)
10006d80:	dc000117 	ldw	r16,4(sp)
10006d84:	dec00304 	addi	sp,sp,12
10006d88:	0006b241 	jmpi	10006b24 <__sflush_r>
10006d8c:	d9400015 	stw	r5,0(sp)
10006d90:	000712c0 	call	1000712c <__sinit>
10006d94:	d9400017 	ldw	r5,0(sp)
10006d98:	003ff006 	br	10006d5c <__alt_data_end+0xf8006d5c>

10006d9c <fflush>:
10006d9c:	20000526 	beq	r4,zero,10006db4 <fflush+0x18>
10006da0:	00840074 	movhi	r2,4097
10006da4:	1091a004 	addi	r2,r2,18048
10006da8:	200b883a 	mov	r5,r4
10006dac:	11000017 	ldw	r4,0(r2)
10006db0:	0006d401 	jmpi	10006d40 <_fflush_r>
10006db4:	00840074 	movhi	r2,4097
10006db8:	10919f04 	addi	r2,r2,18044
10006dbc:	11000017 	ldw	r4,0(r2)
10006dc0:	01440034 	movhi	r5,4096
10006dc4:	295b5004 	addi	r5,r5,27968
10006dc8:	0007b3c1 	jmpi	10007b3c <_fwalk_reent>

10006dcc <__fp_unlock>:
10006dcc:	0005883a 	mov	r2,zero
10006dd0:	f800283a 	ret

10006dd4 <_cleanup_r>:
10006dd4:	01440074 	movhi	r5,4097
10006dd8:	296f3604 	addi	r5,r5,-17192
10006ddc:	0007b3c1 	jmpi	10007b3c <_fwalk_reent>

10006de0 <__sinit.part.1>:
10006de0:	defff704 	addi	sp,sp,-36
10006de4:	00c40034 	movhi	r3,4096
10006de8:	dfc00815 	stw	ra,32(sp)
10006dec:	ddc00715 	stw	r23,28(sp)
10006df0:	dd800615 	stw	r22,24(sp)
10006df4:	dd400515 	stw	r21,20(sp)
10006df8:	dd000415 	stw	r20,16(sp)
10006dfc:	dcc00315 	stw	r19,12(sp)
10006e00:	dc800215 	stw	r18,8(sp)
10006e04:	dc400115 	stw	r17,4(sp)
10006e08:	dc000015 	stw	r16,0(sp)
10006e0c:	18db7504 	addi	r3,r3,28116
10006e10:	24000117 	ldw	r16,4(r4)
10006e14:	20c00f15 	stw	r3,60(r4)
10006e18:	2080bb04 	addi	r2,r4,748
10006e1c:	00c000c4 	movi	r3,3
10006e20:	20c0b915 	stw	r3,740(r4)
10006e24:	2080ba15 	stw	r2,744(r4)
10006e28:	2000b815 	stw	zero,736(r4)
10006e2c:	05c00204 	movi	r23,8
10006e30:	00800104 	movi	r2,4
10006e34:	2025883a 	mov	r18,r4
10006e38:	b80d883a 	mov	r6,r23
10006e3c:	81001704 	addi	r4,r16,92
10006e40:	000b883a 	mov	r5,zero
10006e44:	80000015 	stw	zero,0(r16)
10006e48:	80000115 	stw	zero,4(r16)
10006e4c:	80000215 	stw	zero,8(r16)
10006e50:	8080030d 	sth	r2,12(r16)
10006e54:	80001915 	stw	zero,100(r16)
10006e58:	8000038d 	sth	zero,14(r16)
10006e5c:	80000415 	stw	zero,16(r16)
10006e60:	80000515 	stw	zero,20(r16)
10006e64:	80000615 	stw	zero,24(r16)
10006e68:	0008a2c0 	call	10008a2c <memset>
10006e6c:	05840074 	movhi	r22,4097
10006e70:	94400217 	ldw	r17,8(r18)
10006e74:	05440074 	movhi	r21,4097
10006e78:	05040074 	movhi	r20,4097
10006e7c:	04c40074 	movhi	r19,4097
10006e80:	b5a88e04 	addi	r22,r22,-24008
10006e84:	ad68a504 	addi	r21,r21,-23916
10006e88:	a528c404 	addi	r20,r20,-23792
10006e8c:	9ce8db04 	addi	r19,r19,-23700
10006e90:	85800815 	stw	r22,32(r16)
10006e94:	85400915 	stw	r21,36(r16)
10006e98:	85000a15 	stw	r20,40(r16)
10006e9c:	84c00b15 	stw	r19,44(r16)
10006ea0:	84000715 	stw	r16,28(r16)
10006ea4:	00800284 	movi	r2,10
10006ea8:	8880030d 	sth	r2,12(r17)
10006eac:	00800044 	movi	r2,1
10006eb0:	b80d883a 	mov	r6,r23
10006eb4:	89001704 	addi	r4,r17,92
10006eb8:	000b883a 	mov	r5,zero
10006ebc:	88000015 	stw	zero,0(r17)
10006ec0:	88000115 	stw	zero,4(r17)
10006ec4:	88000215 	stw	zero,8(r17)
10006ec8:	88001915 	stw	zero,100(r17)
10006ecc:	8880038d 	sth	r2,14(r17)
10006ed0:	88000415 	stw	zero,16(r17)
10006ed4:	88000515 	stw	zero,20(r17)
10006ed8:	88000615 	stw	zero,24(r17)
10006edc:	0008a2c0 	call	10008a2c <memset>
10006ee0:	94000317 	ldw	r16,12(r18)
10006ee4:	00800484 	movi	r2,18
10006ee8:	8c400715 	stw	r17,28(r17)
10006eec:	8d800815 	stw	r22,32(r17)
10006ef0:	8d400915 	stw	r21,36(r17)
10006ef4:	8d000a15 	stw	r20,40(r17)
10006ef8:	8cc00b15 	stw	r19,44(r17)
10006efc:	8080030d 	sth	r2,12(r16)
10006f00:	00800084 	movi	r2,2
10006f04:	80000015 	stw	zero,0(r16)
10006f08:	80000115 	stw	zero,4(r16)
10006f0c:	80000215 	stw	zero,8(r16)
10006f10:	80001915 	stw	zero,100(r16)
10006f14:	8080038d 	sth	r2,14(r16)
10006f18:	80000415 	stw	zero,16(r16)
10006f1c:	80000515 	stw	zero,20(r16)
10006f20:	80000615 	stw	zero,24(r16)
10006f24:	b80d883a 	mov	r6,r23
10006f28:	000b883a 	mov	r5,zero
10006f2c:	81001704 	addi	r4,r16,92
10006f30:	0008a2c0 	call	10008a2c <memset>
10006f34:	00800044 	movi	r2,1
10006f38:	84000715 	stw	r16,28(r16)
10006f3c:	85800815 	stw	r22,32(r16)
10006f40:	85400915 	stw	r21,36(r16)
10006f44:	85000a15 	stw	r20,40(r16)
10006f48:	84c00b15 	stw	r19,44(r16)
10006f4c:	90800e15 	stw	r2,56(r18)
10006f50:	dfc00817 	ldw	ra,32(sp)
10006f54:	ddc00717 	ldw	r23,28(sp)
10006f58:	dd800617 	ldw	r22,24(sp)
10006f5c:	dd400517 	ldw	r21,20(sp)
10006f60:	dd000417 	ldw	r20,16(sp)
10006f64:	dcc00317 	ldw	r19,12(sp)
10006f68:	dc800217 	ldw	r18,8(sp)
10006f6c:	dc400117 	ldw	r17,4(sp)
10006f70:	dc000017 	ldw	r16,0(sp)
10006f74:	dec00904 	addi	sp,sp,36
10006f78:	f800283a 	ret

10006f7c <__fp_lock>:
10006f7c:	0005883a 	mov	r2,zero
10006f80:	f800283a 	ret

10006f84 <__sfmoreglue>:
10006f84:	defffc04 	addi	sp,sp,-16
10006f88:	dc800215 	stw	r18,8(sp)
10006f8c:	2825883a 	mov	r18,r5
10006f90:	dc000015 	stw	r16,0(sp)
10006f94:	01401a04 	movi	r5,104
10006f98:	2021883a 	mov	r16,r4
10006f9c:	913fffc4 	addi	r4,r18,-1
10006fa0:	dfc00315 	stw	ra,12(sp)
10006fa4:	dc400115 	stw	r17,4(sp)
10006fa8:	0002b6c0 	call	10002b6c <__mulsi3>
10006fac:	8009883a 	mov	r4,r16
10006fb0:	11401d04 	addi	r5,r2,116
10006fb4:	1023883a 	mov	r17,r2
10006fb8:	0007e980 	call	10007e98 <_malloc_r>
10006fbc:	1021883a 	mov	r16,r2
10006fc0:	10000726 	beq	r2,zero,10006fe0 <__sfmoreglue+0x5c>
10006fc4:	11000304 	addi	r4,r2,12
10006fc8:	10000015 	stw	zero,0(r2)
10006fcc:	14800115 	stw	r18,4(r2)
10006fd0:	11000215 	stw	r4,8(r2)
10006fd4:	89801a04 	addi	r6,r17,104
10006fd8:	000b883a 	mov	r5,zero
10006fdc:	0008a2c0 	call	10008a2c <memset>
10006fe0:	8005883a 	mov	r2,r16
10006fe4:	dfc00317 	ldw	ra,12(sp)
10006fe8:	dc800217 	ldw	r18,8(sp)
10006fec:	dc400117 	ldw	r17,4(sp)
10006ff0:	dc000017 	ldw	r16,0(sp)
10006ff4:	dec00404 	addi	sp,sp,16
10006ff8:	f800283a 	ret

10006ffc <__sfp>:
10006ffc:	defffb04 	addi	sp,sp,-20
10007000:	dc000015 	stw	r16,0(sp)
10007004:	04040074 	movhi	r16,4097
10007008:	84119f04 	addi	r16,r16,18044
1000700c:	dcc00315 	stw	r19,12(sp)
10007010:	2027883a 	mov	r19,r4
10007014:	81000017 	ldw	r4,0(r16)
10007018:	dfc00415 	stw	ra,16(sp)
1000701c:	dc800215 	stw	r18,8(sp)
10007020:	20800e17 	ldw	r2,56(r4)
10007024:	dc400115 	stw	r17,4(sp)
10007028:	1000021e 	bne	r2,zero,10007034 <__sfp+0x38>
1000702c:	0006de00 	call	10006de0 <__sinit.part.1>
10007030:	81000017 	ldw	r4,0(r16)
10007034:	2480b804 	addi	r18,r4,736
10007038:	047fffc4 	movi	r17,-1
1000703c:	91000117 	ldw	r4,4(r18)
10007040:	94000217 	ldw	r16,8(r18)
10007044:	213fffc4 	addi	r4,r4,-1
10007048:	20000a16 	blt	r4,zero,10007074 <__sfp+0x78>
1000704c:	8080030f 	ldh	r2,12(r16)
10007050:	10000c26 	beq	r2,zero,10007084 <__sfp+0x88>
10007054:	80c01d04 	addi	r3,r16,116
10007058:	00000206 	br	10007064 <__sfp+0x68>
1000705c:	18bfe60f 	ldh	r2,-104(r3)
10007060:	10000826 	beq	r2,zero,10007084 <__sfp+0x88>
10007064:	213fffc4 	addi	r4,r4,-1
10007068:	1c3ffd04 	addi	r16,r3,-12
1000706c:	18c01a04 	addi	r3,r3,104
10007070:	247ffa1e 	bne	r4,r17,1000705c <__alt_data_end+0xf800705c>
10007074:	90800017 	ldw	r2,0(r18)
10007078:	10001d26 	beq	r2,zero,100070f0 <__sfp+0xf4>
1000707c:	1025883a 	mov	r18,r2
10007080:	003fee06 	br	1000703c <__alt_data_end+0xf800703c>
10007084:	00bfffc4 	movi	r2,-1
10007088:	8080038d 	sth	r2,14(r16)
1000708c:	00800044 	movi	r2,1
10007090:	8080030d 	sth	r2,12(r16)
10007094:	80001915 	stw	zero,100(r16)
10007098:	80000015 	stw	zero,0(r16)
1000709c:	80000215 	stw	zero,8(r16)
100070a0:	80000115 	stw	zero,4(r16)
100070a4:	80000415 	stw	zero,16(r16)
100070a8:	80000515 	stw	zero,20(r16)
100070ac:	80000615 	stw	zero,24(r16)
100070b0:	01800204 	movi	r6,8
100070b4:	000b883a 	mov	r5,zero
100070b8:	81001704 	addi	r4,r16,92
100070bc:	0008a2c0 	call	10008a2c <memset>
100070c0:	8005883a 	mov	r2,r16
100070c4:	80000c15 	stw	zero,48(r16)
100070c8:	80000d15 	stw	zero,52(r16)
100070cc:	80001115 	stw	zero,68(r16)
100070d0:	80001215 	stw	zero,72(r16)
100070d4:	dfc00417 	ldw	ra,16(sp)
100070d8:	dcc00317 	ldw	r19,12(sp)
100070dc:	dc800217 	ldw	r18,8(sp)
100070e0:	dc400117 	ldw	r17,4(sp)
100070e4:	dc000017 	ldw	r16,0(sp)
100070e8:	dec00504 	addi	sp,sp,20
100070ec:	f800283a 	ret
100070f0:	01400104 	movi	r5,4
100070f4:	9809883a 	mov	r4,r19
100070f8:	0006f840 	call	10006f84 <__sfmoreglue>
100070fc:	90800015 	stw	r2,0(r18)
10007100:	103fde1e 	bne	r2,zero,1000707c <__alt_data_end+0xf800707c>
10007104:	00800304 	movi	r2,12
10007108:	98800015 	stw	r2,0(r19)
1000710c:	0005883a 	mov	r2,zero
10007110:	003ff006 	br	100070d4 <__alt_data_end+0xf80070d4>

10007114 <_cleanup>:
10007114:	00840074 	movhi	r2,4097
10007118:	10919f04 	addi	r2,r2,18044
1000711c:	11000017 	ldw	r4,0(r2)
10007120:	01440074 	movhi	r5,4097
10007124:	296f3604 	addi	r5,r5,-17192
10007128:	0007b3c1 	jmpi	10007b3c <_fwalk_reent>

1000712c <__sinit>:
1000712c:	20800e17 	ldw	r2,56(r4)
10007130:	10000126 	beq	r2,zero,10007138 <__sinit+0xc>
10007134:	f800283a 	ret
10007138:	0006de01 	jmpi	10006de0 <__sinit.part.1>

1000713c <__sfp_lock_acquire>:
1000713c:	f800283a 	ret

10007140 <__sfp_lock_release>:
10007140:	f800283a 	ret

10007144 <__sinit_lock_acquire>:
10007144:	f800283a 	ret

10007148 <__sinit_lock_release>:
10007148:	f800283a 	ret

1000714c <__fp_lock_all>:
1000714c:	00840074 	movhi	r2,4097
10007150:	1091a004 	addi	r2,r2,18048
10007154:	11000017 	ldw	r4,0(r2)
10007158:	01440034 	movhi	r5,4096
1000715c:	295bdf04 	addi	r5,r5,28540
10007160:	0007a781 	jmpi	10007a78 <_fwalk>

10007164 <__fp_unlock_all>:
10007164:	00840074 	movhi	r2,4097
10007168:	1091a004 	addi	r2,r2,18048
1000716c:	11000017 	ldw	r4,0(r2)
10007170:	01440034 	movhi	r5,4096
10007174:	295b7304 	addi	r5,r5,28108
10007178:	0007a781 	jmpi	10007a78 <_fwalk>

1000717c <_malloc_trim_r>:
1000717c:	defffb04 	addi	sp,sp,-20
10007180:	dcc00315 	stw	r19,12(sp)
10007184:	04c40074 	movhi	r19,4097
10007188:	dc800215 	stw	r18,8(sp)
1000718c:	dc400115 	stw	r17,4(sp)
10007190:	dc000015 	stw	r16,0(sp)
10007194:	dfc00415 	stw	ra,16(sp)
10007198:	2821883a 	mov	r16,r5
1000719c:	9ccc1b04 	addi	r19,r19,12396
100071a0:	2025883a 	mov	r18,r4
100071a4:	000fe940 	call	1000fe94 <__malloc_lock>
100071a8:	98800217 	ldw	r2,8(r19)
100071ac:	14400117 	ldw	r17,4(r2)
100071b0:	00bfff04 	movi	r2,-4
100071b4:	88a2703a 	and	r17,r17,r2
100071b8:	8c21c83a 	sub	r16,r17,r16
100071bc:	8403fbc4 	addi	r16,r16,4079
100071c0:	8020d33a 	srli	r16,r16,12
100071c4:	0083ffc4 	movi	r2,4095
100071c8:	843fffc4 	addi	r16,r16,-1
100071cc:	8020933a 	slli	r16,r16,12
100071d0:	1400060e 	bge	r2,r16,100071ec <_malloc_trim_r+0x70>
100071d4:	000b883a 	mov	r5,zero
100071d8:	9009883a 	mov	r4,r18
100071dc:	000a1e40 	call	1000a1e4 <_sbrk_r>
100071e0:	98c00217 	ldw	r3,8(r19)
100071e4:	1c47883a 	add	r3,r3,r17
100071e8:	10c00a26 	beq	r2,r3,10007214 <_malloc_trim_r+0x98>
100071ec:	9009883a 	mov	r4,r18
100071f0:	000feb80 	call	1000feb8 <__malloc_unlock>
100071f4:	0005883a 	mov	r2,zero
100071f8:	dfc00417 	ldw	ra,16(sp)
100071fc:	dcc00317 	ldw	r19,12(sp)
10007200:	dc800217 	ldw	r18,8(sp)
10007204:	dc400117 	ldw	r17,4(sp)
10007208:	dc000017 	ldw	r16,0(sp)
1000720c:	dec00504 	addi	sp,sp,20
10007210:	f800283a 	ret
10007214:	040bc83a 	sub	r5,zero,r16
10007218:	9009883a 	mov	r4,r18
1000721c:	000a1e40 	call	1000a1e4 <_sbrk_r>
10007220:	00ffffc4 	movi	r3,-1
10007224:	10c00d26 	beq	r2,r3,1000725c <_malloc_trim_r+0xe0>
10007228:	00c40074 	movhi	r3,4097
1000722c:	18d88004 	addi	r3,r3,25088
10007230:	18800017 	ldw	r2,0(r3)
10007234:	99000217 	ldw	r4,8(r19)
10007238:	8c23c83a 	sub	r17,r17,r16
1000723c:	8c400054 	ori	r17,r17,1
10007240:	1421c83a 	sub	r16,r2,r16
10007244:	24400115 	stw	r17,4(r4)
10007248:	9009883a 	mov	r4,r18
1000724c:	1c000015 	stw	r16,0(r3)
10007250:	000feb80 	call	1000feb8 <__malloc_unlock>
10007254:	00800044 	movi	r2,1
10007258:	003fe706 	br	100071f8 <__alt_data_end+0xf80071f8>
1000725c:	000b883a 	mov	r5,zero
10007260:	9009883a 	mov	r4,r18
10007264:	000a1e40 	call	1000a1e4 <_sbrk_r>
10007268:	99000217 	ldw	r4,8(r19)
1000726c:	014003c4 	movi	r5,15
10007270:	1107c83a 	sub	r3,r2,r4
10007274:	28ffdd0e 	bge	r5,r3,100071ec <__alt_data_end+0xf80071ec>
10007278:	01440074 	movhi	r5,4097
1000727c:	2951a204 	addi	r5,r5,18056
10007280:	29400017 	ldw	r5,0(r5)
10007284:	18c00054 	ori	r3,r3,1
10007288:	20c00115 	stw	r3,4(r4)
1000728c:	00c40074 	movhi	r3,4097
10007290:	1145c83a 	sub	r2,r2,r5
10007294:	18d88004 	addi	r3,r3,25088
10007298:	18800015 	stw	r2,0(r3)
1000729c:	003fd306 	br	100071ec <__alt_data_end+0xf80071ec>

100072a0 <_free_r>:
100072a0:	28004126 	beq	r5,zero,100073a8 <_free_r+0x108>
100072a4:	defffd04 	addi	sp,sp,-12
100072a8:	dc400115 	stw	r17,4(sp)
100072ac:	dc000015 	stw	r16,0(sp)
100072b0:	2023883a 	mov	r17,r4
100072b4:	2821883a 	mov	r16,r5
100072b8:	dfc00215 	stw	ra,8(sp)
100072bc:	000fe940 	call	1000fe94 <__malloc_lock>
100072c0:	81ffff17 	ldw	r7,-4(r16)
100072c4:	00bfff84 	movi	r2,-2
100072c8:	01040074 	movhi	r4,4097
100072cc:	81bffe04 	addi	r6,r16,-8
100072d0:	3884703a 	and	r2,r7,r2
100072d4:	210c1b04 	addi	r4,r4,12396
100072d8:	308b883a 	add	r5,r6,r2
100072dc:	2a400117 	ldw	r9,4(r5)
100072e0:	22000217 	ldw	r8,8(r4)
100072e4:	00ffff04 	movi	r3,-4
100072e8:	48c6703a 	and	r3,r9,r3
100072ec:	2a005726 	beq	r5,r8,1000744c <_free_r+0x1ac>
100072f0:	28c00115 	stw	r3,4(r5)
100072f4:	39c0004c 	andi	r7,r7,1
100072f8:	3800091e 	bne	r7,zero,10007320 <_free_r+0x80>
100072fc:	823ffe17 	ldw	r8,-8(r16)
10007300:	22400204 	addi	r9,r4,8
10007304:	320dc83a 	sub	r6,r6,r8
10007308:	31c00217 	ldw	r7,8(r6)
1000730c:	1205883a 	add	r2,r2,r8
10007310:	3a406526 	beq	r7,r9,100074a8 <_free_r+0x208>
10007314:	32000317 	ldw	r8,12(r6)
10007318:	3a000315 	stw	r8,12(r7)
1000731c:	41c00215 	stw	r7,8(r8)
10007320:	28cf883a 	add	r7,r5,r3
10007324:	39c00117 	ldw	r7,4(r7)
10007328:	39c0004c 	andi	r7,r7,1
1000732c:	38003a26 	beq	r7,zero,10007418 <_free_r+0x178>
10007330:	10c00054 	ori	r3,r2,1
10007334:	30c00115 	stw	r3,4(r6)
10007338:	3087883a 	add	r3,r6,r2
1000733c:	18800015 	stw	r2,0(r3)
10007340:	00c07fc4 	movi	r3,511
10007344:	18801936 	bltu	r3,r2,100073ac <_free_r+0x10c>
10007348:	1004d0fa 	srli	r2,r2,3
1000734c:	01c00044 	movi	r7,1
10007350:	21400117 	ldw	r5,4(r4)
10007354:	10c00044 	addi	r3,r2,1
10007358:	18c7883a 	add	r3,r3,r3
1000735c:	1005d0ba 	srai	r2,r2,2
10007360:	18c7883a 	add	r3,r3,r3
10007364:	18c7883a 	add	r3,r3,r3
10007368:	1907883a 	add	r3,r3,r4
1000736c:	3884983a 	sll	r2,r7,r2
10007370:	19c00017 	ldw	r7,0(r3)
10007374:	1a3ffe04 	addi	r8,r3,-8
10007378:	1144b03a 	or	r2,r2,r5
1000737c:	32000315 	stw	r8,12(r6)
10007380:	31c00215 	stw	r7,8(r6)
10007384:	20800115 	stw	r2,4(r4)
10007388:	19800015 	stw	r6,0(r3)
1000738c:	39800315 	stw	r6,12(r7)
10007390:	8809883a 	mov	r4,r17
10007394:	dfc00217 	ldw	ra,8(sp)
10007398:	dc400117 	ldw	r17,4(sp)
1000739c:	dc000017 	ldw	r16,0(sp)
100073a0:	dec00304 	addi	sp,sp,12
100073a4:	000feb81 	jmpi	1000feb8 <__malloc_unlock>
100073a8:	f800283a 	ret
100073ac:	100ad27a 	srli	r5,r2,9
100073b0:	00c00104 	movi	r3,4
100073b4:	19404a36 	bltu	r3,r5,100074e0 <_free_r+0x240>
100073b8:	100ad1ba 	srli	r5,r2,6
100073bc:	28c00e44 	addi	r3,r5,57
100073c0:	18c7883a 	add	r3,r3,r3
100073c4:	29400e04 	addi	r5,r5,56
100073c8:	18c7883a 	add	r3,r3,r3
100073cc:	18c7883a 	add	r3,r3,r3
100073d0:	1909883a 	add	r4,r3,r4
100073d4:	20c00017 	ldw	r3,0(r4)
100073d8:	01c40074 	movhi	r7,4097
100073dc:	213ffe04 	addi	r4,r4,-8
100073e0:	39cc1b04 	addi	r7,r7,12396
100073e4:	20c04426 	beq	r4,r3,100074f8 <_free_r+0x258>
100073e8:	01ffff04 	movi	r7,-4
100073ec:	19400117 	ldw	r5,4(r3)
100073f0:	29ca703a 	and	r5,r5,r7
100073f4:	1140022e 	bgeu	r2,r5,10007400 <_free_r+0x160>
100073f8:	18c00217 	ldw	r3,8(r3)
100073fc:	20fffb1e 	bne	r4,r3,100073ec <__alt_data_end+0xf80073ec>
10007400:	19000317 	ldw	r4,12(r3)
10007404:	31000315 	stw	r4,12(r6)
10007408:	30c00215 	stw	r3,8(r6)
1000740c:	21800215 	stw	r6,8(r4)
10007410:	19800315 	stw	r6,12(r3)
10007414:	003fde06 	br	10007390 <__alt_data_end+0xf8007390>
10007418:	29c00217 	ldw	r7,8(r5)
1000741c:	10c5883a 	add	r2,r2,r3
10007420:	00c40074 	movhi	r3,4097
10007424:	18cc1d04 	addi	r3,r3,12404
10007428:	38c03b26 	beq	r7,r3,10007518 <_free_r+0x278>
1000742c:	2a000317 	ldw	r8,12(r5)
10007430:	11400054 	ori	r5,r2,1
10007434:	3087883a 	add	r3,r6,r2
10007438:	3a000315 	stw	r8,12(r7)
1000743c:	41c00215 	stw	r7,8(r8)
10007440:	31400115 	stw	r5,4(r6)
10007444:	18800015 	stw	r2,0(r3)
10007448:	003fbd06 	br	10007340 <__alt_data_end+0xf8007340>
1000744c:	39c0004c 	andi	r7,r7,1
10007450:	10c5883a 	add	r2,r2,r3
10007454:	3800071e 	bne	r7,zero,10007474 <_free_r+0x1d4>
10007458:	81fffe17 	ldw	r7,-8(r16)
1000745c:	31cdc83a 	sub	r6,r6,r7
10007460:	30c00317 	ldw	r3,12(r6)
10007464:	31400217 	ldw	r5,8(r6)
10007468:	11c5883a 	add	r2,r2,r7
1000746c:	28c00315 	stw	r3,12(r5)
10007470:	19400215 	stw	r5,8(r3)
10007474:	10c00054 	ori	r3,r2,1
10007478:	30c00115 	stw	r3,4(r6)
1000747c:	00c40074 	movhi	r3,4097
10007480:	18d1a304 	addi	r3,r3,18060
10007484:	18c00017 	ldw	r3,0(r3)
10007488:	21800215 	stw	r6,8(r4)
1000748c:	10ffc036 	bltu	r2,r3,10007390 <__alt_data_end+0xf8007390>
10007490:	00840074 	movhi	r2,4097
10007494:	10987704 	addi	r2,r2,25052
10007498:	11400017 	ldw	r5,0(r2)
1000749c:	8809883a 	mov	r4,r17
100074a0:	000717c0 	call	1000717c <_malloc_trim_r>
100074a4:	003fba06 	br	10007390 <__alt_data_end+0xf8007390>
100074a8:	28c9883a 	add	r4,r5,r3
100074ac:	21000117 	ldw	r4,4(r4)
100074b0:	2100004c 	andi	r4,r4,1
100074b4:	2000391e 	bne	r4,zero,1000759c <_free_r+0x2fc>
100074b8:	29c00217 	ldw	r7,8(r5)
100074bc:	29000317 	ldw	r4,12(r5)
100074c0:	1885883a 	add	r2,r3,r2
100074c4:	10c00054 	ori	r3,r2,1
100074c8:	39000315 	stw	r4,12(r7)
100074cc:	21c00215 	stw	r7,8(r4)
100074d0:	30c00115 	stw	r3,4(r6)
100074d4:	308d883a 	add	r6,r6,r2
100074d8:	30800015 	stw	r2,0(r6)
100074dc:	003fac06 	br	10007390 <__alt_data_end+0xf8007390>
100074e0:	00c00504 	movi	r3,20
100074e4:	19401536 	bltu	r3,r5,1000753c <_free_r+0x29c>
100074e8:	28c01704 	addi	r3,r5,92
100074ec:	18c7883a 	add	r3,r3,r3
100074f0:	294016c4 	addi	r5,r5,91
100074f4:	003fb406 	br	100073c8 <__alt_data_end+0xf80073c8>
100074f8:	280bd0ba 	srai	r5,r5,2
100074fc:	00c00044 	movi	r3,1
10007500:	38800117 	ldw	r2,4(r7)
10007504:	194a983a 	sll	r5,r3,r5
10007508:	2007883a 	mov	r3,r4
1000750c:	2884b03a 	or	r2,r5,r2
10007510:	38800115 	stw	r2,4(r7)
10007514:	003fbb06 	br	10007404 <__alt_data_end+0xf8007404>
10007518:	21800515 	stw	r6,20(r4)
1000751c:	21800415 	stw	r6,16(r4)
10007520:	10c00054 	ori	r3,r2,1
10007524:	31c00315 	stw	r7,12(r6)
10007528:	31c00215 	stw	r7,8(r6)
1000752c:	30c00115 	stw	r3,4(r6)
10007530:	308d883a 	add	r6,r6,r2
10007534:	30800015 	stw	r2,0(r6)
10007538:	003f9506 	br	10007390 <__alt_data_end+0xf8007390>
1000753c:	00c01504 	movi	r3,84
10007540:	19400536 	bltu	r3,r5,10007558 <_free_r+0x2b8>
10007544:	100ad33a 	srli	r5,r2,12
10007548:	28c01bc4 	addi	r3,r5,111
1000754c:	18c7883a 	add	r3,r3,r3
10007550:	29401b84 	addi	r5,r5,110
10007554:	003f9c06 	br	100073c8 <__alt_data_end+0xf80073c8>
10007558:	00c05504 	movi	r3,340
1000755c:	19400536 	bltu	r3,r5,10007574 <_free_r+0x2d4>
10007560:	100ad3fa 	srli	r5,r2,15
10007564:	28c01e04 	addi	r3,r5,120
10007568:	18c7883a 	add	r3,r3,r3
1000756c:	29401dc4 	addi	r5,r5,119
10007570:	003f9506 	br	100073c8 <__alt_data_end+0xf80073c8>
10007574:	00c15504 	movi	r3,1364
10007578:	19400536 	bltu	r3,r5,10007590 <_free_r+0x2f0>
1000757c:	100ad4ba 	srli	r5,r2,18
10007580:	28c01f44 	addi	r3,r5,125
10007584:	18c7883a 	add	r3,r3,r3
10007588:	29401f04 	addi	r5,r5,124
1000758c:	003f8e06 	br	100073c8 <__alt_data_end+0xf80073c8>
10007590:	00c03f84 	movi	r3,254
10007594:	01401f84 	movi	r5,126
10007598:	003f8b06 	br	100073c8 <__alt_data_end+0xf80073c8>
1000759c:	10c00054 	ori	r3,r2,1
100075a0:	30c00115 	stw	r3,4(r6)
100075a4:	308d883a 	add	r6,r6,r2
100075a8:	30800015 	stw	r2,0(r6)
100075ac:	003f7806 	br	10007390 <__alt_data_end+0xf8007390>

100075b0 <__sfvwrite_r>:
100075b0:	30800217 	ldw	r2,8(r6)
100075b4:	10006726 	beq	r2,zero,10007754 <__sfvwrite_r+0x1a4>
100075b8:	28c0030b 	ldhu	r3,12(r5)
100075bc:	defff404 	addi	sp,sp,-48
100075c0:	dd400715 	stw	r21,28(sp)
100075c4:	dd000615 	stw	r20,24(sp)
100075c8:	dc000215 	stw	r16,8(sp)
100075cc:	dfc00b15 	stw	ra,44(sp)
100075d0:	df000a15 	stw	fp,40(sp)
100075d4:	ddc00915 	stw	r23,36(sp)
100075d8:	dd800815 	stw	r22,32(sp)
100075dc:	dcc00515 	stw	r19,20(sp)
100075e0:	dc800415 	stw	r18,16(sp)
100075e4:	dc400315 	stw	r17,12(sp)
100075e8:	1880020c 	andi	r2,r3,8
100075ec:	2821883a 	mov	r16,r5
100075f0:	202b883a 	mov	r21,r4
100075f4:	3029883a 	mov	r20,r6
100075f8:	10002726 	beq	r2,zero,10007698 <__sfvwrite_r+0xe8>
100075fc:	28800417 	ldw	r2,16(r5)
10007600:	10002526 	beq	r2,zero,10007698 <__sfvwrite_r+0xe8>
10007604:	1880008c 	andi	r2,r3,2
10007608:	a4400017 	ldw	r17,0(r20)
1000760c:	10002a26 	beq	r2,zero,100076b8 <__sfvwrite_r+0x108>
10007610:	05a00034 	movhi	r22,32768
10007614:	0027883a 	mov	r19,zero
10007618:	0025883a 	mov	r18,zero
1000761c:	b5bf0004 	addi	r22,r22,-1024
10007620:	980d883a 	mov	r6,r19
10007624:	a809883a 	mov	r4,r21
10007628:	90004626 	beq	r18,zero,10007744 <__sfvwrite_r+0x194>
1000762c:	900f883a 	mov	r7,r18
10007630:	b480022e 	bgeu	r22,r18,1000763c <__sfvwrite_r+0x8c>
10007634:	01e00034 	movhi	r7,32768
10007638:	39ff0004 	addi	r7,r7,-1024
1000763c:	80800917 	ldw	r2,36(r16)
10007640:	81400717 	ldw	r5,28(r16)
10007644:	103ee83a 	callr	r2
10007648:	00805a0e 	bge	zero,r2,100077b4 <__sfvwrite_r+0x204>
1000764c:	a0c00217 	ldw	r3,8(r20)
10007650:	98a7883a 	add	r19,r19,r2
10007654:	90a5c83a 	sub	r18,r18,r2
10007658:	1885c83a 	sub	r2,r3,r2
1000765c:	a0800215 	stw	r2,8(r20)
10007660:	103fef1e 	bne	r2,zero,10007620 <__alt_data_end+0xf8007620>
10007664:	0005883a 	mov	r2,zero
10007668:	dfc00b17 	ldw	ra,44(sp)
1000766c:	df000a17 	ldw	fp,40(sp)
10007670:	ddc00917 	ldw	r23,36(sp)
10007674:	dd800817 	ldw	r22,32(sp)
10007678:	dd400717 	ldw	r21,28(sp)
1000767c:	dd000617 	ldw	r20,24(sp)
10007680:	dcc00517 	ldw	r19,20(sp)
10007684:	dc800417 	ldw	r18,16(sp)
10007688:	dc400317 	ldw	r17,12(sp)
1000768c:	dc000217 	ldw	r16,8(sp)
10007690:	dec00c04 	addi	sp,sp,48
10007694:	f800283a 	ret
10007698:	800b883a 	mov	r5,r16
1000769c:	a809883a 	mov	r4,r21
100076a0:	00051200 	call	10005120 <__swsetup_r>
100076a4:	1000ee1e 	bne	r2,zero,10007a60 <__sfvwrite_r+0x4b0>
100076a8:	80c0030b 	ldhu	r3,12(r16)
100076ac:	a4400017 	ldw	r17,0(r20)
100076b0:	1880008c 	andi	r2,r3,2
100076b4:	103fd61e 	bne	r2,zero,10007610 <__alt_data_end+0xf8007610>
100076b8:	1880004c 	andi	r2,r3,1
100076bc:	1000421e 	bne	r2,zero,100077c8 <__sfvwrite_r+0x218>
100076c0:	0039883a 	mov	fp,zero
100076c4:	0025883a 	mov	r18,zero
100076c8:	90001a26 	beq	r18,zero,10007734 <__sfvwrite_r+0x184>
100076cc:	1880800c 	andi	r2,r3,512
100076d0:	84c00217 	ldw	r19,8(r16)
100076d4:	10002126 	beq	r2,zero,1000775c <__sfvwrite_r+0x1ac>
100076d8:	982f883a 	mov	r23,r19
100076dc:	94c09636 	bltu	r18,r19,10007938 <__sfvwrite_r+0x388>
100076e0:	1881200c 	andi	r2,r3,1152
100076e4:	1000a11e 	bne	r2,zero,1000796c <__sfvwrite_r+0x3bc>
100076e8:	81000017 	ldw	r4,0(r16)
100076ec:	b80d883a 	mov	r6,r23
100076f0:	e00b883a 	mov	r5,fp
100076f4:	00088d00 	call	100088d0 <memmove>
100076f8:	80c00217 	ldw	r3,8(r16)
100076fc:	81000017 	ldw	r4,0(r16)
10007700:	9005883a 	mov	r2,r18
10007704:	1ce7c83a 	sub	r19,r3,r19
10007708:	25cf883a 	add	r7,r4,r23
1000770c:	84c00215 	stw	r19,8(r16)
10007710:	81c00015 	stw	r7,0(r16)
10007714:	a0c00217 	ldw	r3,8(r20)
10007718:	e0b9883a 	add	fp,fp,r2
1000771c:	90a5c83a 	sub	r18,r18,r2
10007720:	18a7c83a 	sub	r19,r3,r2
10007724:	a4c00215 	stw	r19,8(r20)
10007728:	983fce26 	beq	r19,zero,10007664 <__alt_data_end+0xf8007664>
1000772c:	80c0030b 	ldhu	r3,12(r16)
10007730:	903fe61e 	bne	r18,zero,100076cc <__alt_data_end+0xf80076cc>
10007734:	8f000017 	ldw	fp,0(r17)
10007738:	8c800117 	ldw	r18,4(r17)
1000773c:	8c400204 	addi	r17,r17,8
10007740:	003fe106 	br	100076c8 <__alt_data_end+0xf80076c8>
10007744:	8cc00017 	ldw	r19,0(r17)
10007748:	8c800117 	ldw	r18,4(r17)
1000774c:	8c400204 	addi	r17,r17,8
10007750:	003fb306 	br	10007620 <__alt_data_end+0xf8007620>
10007754:	0005883a 	mov	r2,zero
10007758:	f800283a 	ret
1000775c:	81000017 	ldw	r4,0(r16)
10007760:	80800417 	ldw	r2,16(r16)
10007764:	11005a36 	bltu	r2,r4,100078d0 <__sfvwrite_r+0x320>
10007768:	85c00517 	ldw	r23,20(r16)
1000776c:	95c05836 	bltu	r18,r23,100078d0 <__sfvwrite_r+0x320>
10007770:	00a00034 	movhi	r2,32768
10007774:	10bfffc4 	addi	r2,r2,-1
10007778:	9009883a 	mov	r4,r18
1000777c:	1480012e 	bgeu	r2,r18,10007784 <__sfvwrite_r+0x1d4>
10007780:	1009883a 	mov	r4,r2
10007784:	b80b883a 	mov	r5,r23
10007788:	00029b80 	call	100029b8 <__divsi3>
1000778c:	b80b883a 	mov	r5,r23
10007790:	1009883a 	mov	r4,r2
10007794:	0002b6c0 	call	10002b6c <__mulsi3>
10007798:	81400717 	ldw	r5,28(r16)
1000779c:	80c00917 	ldw	r3,36(r16)
100077a0:	100f883a 	mov	r7,r2
100077a4:	e00d883a 	mov	r6,fp
100077a8:	a809883a 	mov	r4,r21
100077ac:	183ee83a 	callr	r3
100077b0:	00bfd816 	blt	zero,r2,10007714 <__alt_data_end+0xf8007714>
100077b4:	8080030b 	ldhu	r2,12(r16)
100077b8:	10801014 	ori	r2,r2,64
100077bc:	8080030d 	sth	r2,12(r16)
100077c0:	00bfffc4 	movi	r2,-1
100077c4:	003fa806 	br	10007668 <__alt_data_end+0xf8007668>
100077c8:	0027883a 	mov	r19,zero
100077cc:	0011883a 	mov	r8,zero
100077d0:	0039883a 	mov	fp,zero
100077d4:	0025883a 	mov	r18,zero
100077d8:	90001f26 	beq	r18,zero,10007858 <__sfvwrite_r+0x2a8>
100077dc:	40005a26 	beq	r8,zero,10007948 <__sfvwrite_r+0x398>
100077e0:	982d883a 	mov	r22,r19
100077e4:	94c0012e 	bgeu	r18,r19,100077ec <__sfvwrite_r+0x23c>
100077e8:	902d883a 	mov	r22,r18
100077ec:	81000017 	ldw	r4,0(r16)
100077f0:	80800417 	ldw	r2,16(r16)
100077f4:	b02f883a 	mov	r23,r22
100077f8:	81c00517 	ldw	r7,20(r16)
100077fc:	1100032e 	bgeu	r2,r4,1000780c <__sfvwrite_r+0x25c>
10007800:	80c00217 	ldw	r3,8(r16)
10007804:	38c7883a 	add	r3,r7,r3
10007808:	1d801816 	blt	r3,r22,1000786c <__sfvwrite_r+0x2bc>
1000780c:	b1c03e16 	blt	r22,r7,10007908 <__sfvwrite_r+0x358>
10007810:	80800917 	ldw	r2,36(r16)
10007814:	81400717 	ldw	r5,28(r16)
10007818:	e00d883a 	mov	r6,fp
1000781c:	da000115 	stw	r8,4(sp)
10007820:	a809883a 	mov	r4,r21
10007824:	103ee83a 	callr	r2
10007828:	102f883a 	mov	r23,r2
1000782c:	da000117 	ldw	r8,4(sp)
10007830:	00bfe00e 	bge	zero,r2,100077b4 <__alt_data_end+0xf80077b4>
10007834:	9de7c83a 	sub	r19,r19,r23
10007838:	98001f26 	beq	r19,zero,100078b8 <__sfvwrite_r+0x308>
1000783c:	a0800217 	ldw	r2,8(r20)
10007840:	e5f9883a 	add	fp,fp,r23
10007844:	95e5c83a 	sub	r18,r18,r23
10007848:	15efc83a 	sub	r23,r2,r23
1000784c:	a5c00215 	stw	r23,8(r20)
10007850:	b83f8426 	beq	r23,zero,10007664 <__alt_data_end+0xf8007664>
10007854:	903fe11e 	bne	r18,zero,100077dc <__alt_data_end+0xf80077dc>
10007858:	8f000017 	ldw	fp,0(r17)
1000785c:	8c800117 	ldw	r18,4(r17)
10007860:	0011883a 	mov	r8,zero
10007864:	8c400204 	addi	r17,r17,8
10007868:	003fdb06 	br	100077d8 <__alt_data_end+0xf80077d8>
1000786c:	180d883a 	mov	r6,r3
10007870:	e00b883a 	mov	r5,fp
10007874:	da000115 	stw	r8,4(sp)
10007878:	d8c00015 	stw	r3,0(sp)
1000787c:	00088d00 	call	100088d0 <memmove>
10007880:	d8c00017 	ldw	r3,0(sp)
10007884:	80800017 	ldw	r2,0(r16)
10007888:	800b883a 	mov	r5,r16
1000788c:	a809883a 	mov	r4,r21
10007890:	10c5883a 	add	r2,r2,r3
10007894:	80800015 	stw	r2,0(r16)
10007898:	d8c00015 	stw	r3,0(sp)
1000789c:	0006d400 	call	10006d40 <_fflush_r>
100078a0:	d8c00017 	ldw	r3,0(sp)
100078a4:	da000117 	ldw	r8,4(sp)
100078a8:	103fc21e 	bne	r2,zero,100077b4 <__alt_data_end+0xf80077b4>
100078ac:	182f883a 	mov	r23,r3
100078b0:	9de7c83a 	sub	r19,r19,r23
100078b4:	983fe11e 	bne	r19,zero,1000783c <__alt_data_end+0xf800783c>
100078b8:	800b883a 	mov	r5,r16
100078bc:	a809883a 	mov	r4,r21
100078c0:	0006d400 	call	10006d40 <_fflush_r>
100078c4:	103fbb1e 	bne	r2,zero,100077b4 <__alt_data_end+0xf80077b4>
100078c8:	0011883a 	mov	r8,zero
100078cc:	003fdb06 	br	1000783c <__alt_data_end+0xf800783c>
100078d0:	94c0012e 	bgeu	r18,r19,100078d8 <__sfvwrite_r+0x328>
100078d4:	9027883a 	mov	r19,r18
100078d8:	980d883a 	mov	r6,r19
100078dc:	e00b883a 	mov	r5,fp
100078e0:	00088d00 	call	100088d0 <memmove>
100078e4:	80800217 	ldw	r2,8(r16)
100078e8:	80c00017 	ldw	r3,0(r16)
100078ec:	14c5c83a 	sub	r2,r2,r19
100078f0:	1cc7883a 	add	r3,r3,r19
100078f4:	80800215 	stw	r2,8(r16)
100078f8:	80c00015 	stw	r3,0(r16)
100078fc:	10004326 	beq	r2,zero,10007a0c <__sfvwrite_r+0x45c>
10007900:	9805883a 	mov	r2,r19
10007904:	003f8306 	br	10007714 <__alt_data_end+0xf8007714>
10007908:	b00d883a 	mov	r6,r22
1000790c:	e00b883a 	mov	r5,fp
10007910:	da000115 	stw	r8,4(sp)
10007914:	00088d00 	call	100088d0 <memmove>
10007918:	80800217 	ldw	r2,8(r16)
1000791c:	80c00017 	ldw	r3,0(r16)
10007920:	da000117 	ldw	r8,4(sp)
10007924:	1585c83a 	sub	r2,r2,r22
10007928:	1dad883a 	add	r22,r3,r22
1000792c:	80800215 	stw	r2,8(r16)
10007930:	85800015 	stw	r22,0(r16)
10007934:	003fbf06 	br	10007834 <__alt_data_end+0xf8007834>
10007938:	81000017 	ldw	r4,0(r16)
1000793c:	9027883a 	mov	r19,r18
10007940:	902f883a 	mov	r23,r18
10007944:	003f6906 	br	100076ec <__alt_data_end+0xf80076ec>
10007948:	900d883a 	mov	r6,r18
1000794c:	01400284 	movi	r5,10
10007950:	e009883a 	mov	r4,fp
10007954:	00086a40 	call	100086a4 <memchr>
10007958:	10003e26 	beq	r2,zero,10007a54 <__sfvwrite_r+0x4a4>
1000795c:	10800044 	addi	r2,r2,1
10007960:	1727c83a 	sub	r19,r2,fp
10007964:	02000044 	movi	r8,1
10007968:	003f9d06 	br	100077e0 <__alt_data_end+0xf80077e0>
1000796c:	80800517 	ldw	r2,20(r16)
10007970:	81400417 	ldw	r5,16(r16)
10007974:	81c00017 	ldw	r7,0(r16)
10007978:	10a7883a 	add	r19,r2,r2
1000797c:	9885883a 	add	r2,r19,r2
10007980:	1026d7fa 	srli	r19,r2,31
10007984:	396dc83a 	sub	r22,r7,r5
10007988:	b1000044 	addi	r4,r22,1
1000798c:	9885883a 	add	r2,r19,r2
10007990:	1027d07a 	srai	r19,r2,1
10007994:	2485883a 	add	r2,r4,r18
10007998:	980d883a 	mov	r6,r19
1000799c:	9880022e 	bgeu	r19,r2,100079a8 <__sfvwrite_r+0x3f8>
100079a0:	1027883a 	mov	r19,r2
100079a4:	100d883a 	mov	r6,r2
100079a8:	18c1000c 	andi	r3,r3,1024
100079ac:	18001c26 	beq	r3,zero,10007a20 <__sfvwrite_r+0x470>
100079b0:	300b883a 	mov	r5,r6
100079b4:	a809883a 	mov	r4,r21
100079b8:	0007e980 	call	10007e98 <_malloc_r>
100079bc:	102f883a 	mov	r23,r2
100079c0:	10002926 	beq	r2,zero,10007a68 <__sfvwrite_r+0x4b8>
100079c4:	81400417 	ldw	r5,16(r16)
100079c8:	b00d883a 	mov	r6,r22
100079cc:	1009883a 	mov	r4,r2
100079d0:	00087880 	call	10008788 <memcpy>
100079d4:	8080030b 	ldhu	r2,12(r16)
100079d8:	00fedfc4 	movi	r3,-1153
100079dc:	10c4703a 	and	r2,r2,r3
100079e0:	10802014 	ori	r2,r2,128
100079e4:	8080030d 	sth	r2,12(r16)
100079e8:	bd89883a 	add	r4,r23,r22
100079ec:	9d8fc83a 	sub	r7,r19,r22
100079f0:	85c00415 	stw	r23,16(r16)
100079f4:	84c00515 	stw	r19,20(r16)
100079f8:	81000015 	stw	r4,0(r16)
100079fc:	9027883a 	mov	r19,r18
10007a00:	81c00215 	stw	r7,8(r16)
10007a04:	902f883a 	mov	r23,r18
10007a08:	003f3806 	br	100076ec <__alt_data_end+0xf80076ec>
10007a0c:	800b883a 	mov	r5,r16
10007a10:	a809883a 	mov	r4,r21
10007a14:	0006d400 	call	10006d40 <_fflush_r>
10007a18:	103fb926 	beq	r2,zero,10007900 <__alt_data_end+0xf8007900>
10007a1c:	003f6506 	br	100077b4 <__alt_data_end+0xf80077b4>
10007a20:	a809883a 	mov	r4,r21
10007a24:	0009c0c0 	call	10009c0c <_realloc_r>
10007a28:	102f883a 	mov	r23,r2
10007a2c:	103fee1e 	bne	r2,zero,100079e8 <__alt_data_end+0xf80079e8>
10007a30:	81400417 	ldw	r5,16(r16)
10007a34:	a809883a 	mov	r4,r21
10007a38:	00072a00 	call	100072a0 <_free_r>
10007a3c:	8080030b 	ldhu	r2,12(r16)
10007a40:	00ffdfc4 	movi	r3,-129
10007a44:	1884703a 	and	r2,r3,r2
10007a48:	00c00304 	movi	r3,12
10007a4c:	a8c00015 	stw	r3,0(r21)
10007a50:	003f5906 	br	100077b8 <__alt_data_end+0xf80077b8>
10007a54:	94c00044 	addi	r19,r18,1
10007a58:	02000044 	movi	r8,1
10007a5c:	003f6006 	br	100077e0 <__alt_data_end+0xf80077e0>
10007a60:	00bfffc4 	movi	r2,-1
10007a64:	003f0006 	br	10007668 <__alt_data_end+0xf8007668>
10007a68:	00800304 	movi	r2,12
10007a6c:	a8800015 	stw	r2,0(r21)
10007a70:	8080030b 	ldhu	r2,12(r16)
10007a74:	003f5006 	br	100077b8 <__alt_data_end+0xf80077b8>

10007a78 <_fwalk>:
10007a78:	defff704 	addi	sp,sp,-36
10007a7c:	dd000415 	stw	r20,16(sp)
10007a80:	dfc00815 	stw	ra,32(sp)
10007a84:	ddc00715 	stw	r23,28(sp)
10007a88:	dd800615 	stw	r22,24(sp)
10007a8c:	dd400515 	stw	r21,20(sp)
10007a90:	dcc00315 	stw	r19,12(sp)
10007a94:	dc800215 	stw	r18,8(sp)
10007a98:	dc400115 	stw	r17,4(sp)
10007a9c:	dc000015 	stw	r16,0(sp)
10007aa0:	2500b804 	addi	r20,r4,736
10007aa4:	a0002326 	beq	r20,zero,10007b34 <_fwalk+0xbc>
10007aa8:	282b883a 	mov	r21,r5
10007aac:	002f883a 	mov	r23,zero
10007ab0:	05800044 	movi	r22,1
10007ab4:	04ffffc4 	movi	r19,-1
10007ab8:	a4400117 	ldw	r17,4(r20)
10007abc:	a4800217 	ldw	r18,8(r20)
10007ac0:	8c7fffc4 	addi	r17,r17,-1
10007ac4:	88000d16 	blt	r17,zero,10007afc <_fwalk+0x84>
10007ac8:	94000304 	addi	r16,r18,12
10007acc:	94800384 	addi	r18,r18,14
10007ad0:	8080000b 	ldhu	r2,0(r16)
10007ad4:	8c7fffc4 	addi	r17,r17,-1
10007ad8:	813ffd04 	addi	r4,r16,-12
10007adc:	b080042e 	bgeu	r22,r2,10007af0 <_fwalk+0x78>
10007ae0:	9080000f 	ldh	r2,0(r18)
10007ae4:	14c00226 	beq	r2,r19,10007af0 <_fwalk+0x78>
10007ae8:	a83ee83a 	callr	r21
10007aec:	b8aeb03a 	or	r23,r23,r2
10007af0:	84001a04 	addi	r16,r16,104
10007af4:	94801a04 	addi	r18,r18,104
10007af8:	8cfff51e 	bne	r17,r19,10007ad0 <__alt_data_end+0xf8007ad0>
10007afc:	a5000017 	ldw	r20,0(r20)
10007b00:	a03fed1e 	bne	r20,zero,10007ab8 <__alt_data_end+0xf8007ab8>
10007b04:	b805883a 	mov	r2,r23
10007b08:	dfc00817 	ldw	ra,32(sp)
10007b0c:	ddc00717 	ldw	r23,28(sp)
10007b10:	dd800617 	ldw	r22,24(sp)
10007b14:	dd400517 	ldw	r21,20(sp)
10007b18:	dd000417 	ldw	r20,16(sp)
10007b1c:	dcc00317 	ldw	r19,12(sp)
10007b20:	dc800217 	ldw	r18,8(sp)
10007b24:	dc400117 	ldw	r17,4(sp)
10007b28:	dc000017 	ldw	r16,0(sp)
10007b2c:	dec00904 	addi	sp,sp,36
10007b30:	f800283a 	ret
10007b34:	002f883a 	mov	r23,zero
10007b38:	003ff206 	br	10007b04 <__alt_data_end+0xf8007b04>

10007b3c <_fwalk_reent>:
10007b3c:	defff704 	addi	sp,sp,-36
10007b40:	dd000415 	stw	r20,16(sp)
10007b44:	dfc00815 	stw	ra,32(sp)
10007b48:	ddc00715 	stw	r23,28(sp)
10007b4c:	dd800615 	stw	r22,24(sp)
10007b50:	dd400515 	stw	r21,20(sp)
10007b54:	dcc00315 	stw	r19,12(sp)
10007b58:	dc800215 	stw	r18,8(sp)
10007b5c:	dc400115 	stw	r17,4(sp)
10007b60:	dc000015 	stw	r16,0(sp)
10007b64:	2500b804 	addi	r20,r4,736
10007b68:	a0002326 	beq	r20,zero,10007bf8 <_fwalk_reent+0xbc>
10007b6c:	282b883a 	mov	r21,r5
10007b70:	2027883a 	mov	r19,r4
10007b74:	002f883a 	mov	r23,zero
10007b78:	05800044 	movi	r22,1
10007b7c:	04bfffc4 	movi	r18,-1
10007b80:	a4400117 	ldw	r17,4(r20)
10007b84:	a4000217 	ldw	r16,8(r20)
10007b88:	8c7fffc4 	addi	r17,r17,-1
10007b8c:	88000c16 	blt	r17,zero,10007bc0 <_fwalk_reent+0x84>
10007b90:	84000304 	addi	r16,r16,12
10007b94:	8080000b 	ldhu	r2,0(r16)
10007b98:	8c7fffc4 	addi	r17,r17,-1
10007b9c:	817ffd04 	addi	r5,r16,-12
10007ba0:	b080052e 	bgeu	r22,r2,10007bb8 <_fwalk_reent+0x7c>
10007ba4:	8080008f 	ldh	r2,2(r16)
10007ba8:	9809883a 	mov	r4,r19
10007bac:	14800226 	beq	r2,r18,10007bb8 <_fwalk_reent+0x7c>
10007bb0:	a83ee83a 	callr	r21
10007bb4:	b8aeb03a 	or	r23,r23,r2
10007bb8:	84001a04 	addi	r16,r16,104
10007bbc:	8cbff51e 	bne	r17,r18,10007b94 <__alt_data_end+0xf8007b94>
10007bc0:	a5000017 	ldw	r20,0(r20)
10007bc4:	a03fee1e 	bne	r20,zero,10007b80 <__alt_data_end+0xf8007b80>
10007bc8:	b805883a 	mov	r2,r23
10007bcc:	dfc00817 	ldw	ra,32(sp)
10007bd0:	ddc00717 	ldw	r23,28(sp)
10007bd4:	dd800617 	ldw	r22,24(sp)
10007bd8:	dd400517 	ldw	r21,20(sp)
10007bdc:	dd000417 	ldw	r20,16(sp)
10007be0:	dcc00317 	ldw	r19,12(sp)
10007be4:	dc800217 	ldw	r18,8(sp)
10007be8:	dc400117 	ldw	r17,4(sp)
10007bec:	dc000017 	ldw	r16,0(sp)
10007bf0:	dec00904 	addi	sp,sp,36
10007bf4:	f800283a 	ret
10007bf8:	002f883a 	mov	r23,zero
10007bfc:	003ff206 	br	10007bc8 <__alt_data_end+0xf8007bc8>

10007c00 <_setlocale_r>:
10007c00:	30001b26 	beq	r6,zero,10007c70 <_setlocale_r+0x70>
10007c04:	01440074 	movhi	r5,4097
10007c08:	defffe04 	addi	sp,sp,-8
10007c0c:	294a5304 	addi	r5,r5,10572
10007c10:	3009883a 	mov	r4,r6
10007c14:	dc000015 	stw	r16,0(sp)
10007c18:	dfc00115 	stw	ra,4(sp)
10007c1c:	3021883a 	mov	r16,r6
10007c20:	000a3740 	call	1000a374 <strcmp>
10007c24:	1000061e 	bne	r2,zero,10007c40 <_setlocale_r+0x40>
10007c28:	00840074 	movhi	r2,4097
10007c2c:	108a5204 	addi	r2,r2,10568
10007c30:	dfc00117 	ldw	ra,4(sp)
10007c34:	dc000017 	ldw	r16,0(sp)
10007c38:	dec00204 	addi	sp,sp,8
10007c3c:	f800283a 	ret
10007c40:	01440074 	movhi	r5,4097
10007c44:	294a5204 	addi	r5,r5,10568
10007c48:	8009883a 	mov	r4,r16
10007c4c:	000a3740 	call	1000a374 <strcmp>
10007c50:	103ff526 	beq	r2,zero,10007c28 <__alt_data_end+0xf8007c28>
10007c54:	01440074 	movhi	r5,4097
10007c58:	294a3d04 	addi	r5,r5,10484
10007c5c:	8009883a 	mov	r4,r16
10007c60:	000a3740 	call	1000a374 <strcmp>
10007c64:	103ff026 	beq	r2,zero,10007c28 <__alt_data_end+0xf8007c28>
10007c68:	0005883a 	mov	r2,zero
10007c6c:	003ff006 	br	10007c30 <__alt_data_end+0xf8007c30>
10007c70:	00840074 	movhi	r2,4097
10007c74:	108a5204 	addi	r2,r2,10568
10007c78:	f800283a 	ret

10007c7c <__locale_charset>:
10007c7c:	00840074 	movhi	r2,4097
10007c80:	108c0504 	addi	r2,r2,12308
10007c84:	f800283a 	ret

10007c88 <__locale_mb_cur_max>:
10007c88:	00840074 	movhi	r2,4097
10007c8c:	1091a104 	addi	r2,r2,18052
10007c90:	10800017 	ldw	r2,0(r2)
10007c94:	f800283a 	ret

10007c98 <__locale_msgcharset>:
10007c98:	00840074 	movhi	r2,4097
10007c9c:	108bfd04 	addi	r2,r2,12276
10007ca0:	f800283a 	ret

10007ca4 <__locale_cjk_lang>:
10007ca4:	0005883a 	mov	r2,zero
10007ca8:	f800283a 	ret

10007cac <_localeconv_r>:
10007cac:	00840074 	movhi	r2,4097
10007cb0:	108c0d04 	addi	r2,r2,12340
10007cb4:	f800283a 	ret

10007cb8 <setlocale>:
10007cb8:	00840074 	movhi	r2,4097
10007cbc:	1091a004 	addi	r2,r2,18048
10007cc0:	280d883a 	mov	r6,r5
10007cc4:	200b883a 	mov	r5,r4
10007cc8:	11000017 	ldw	r4,0(r2)
10007ccc:	0007c001 	jmpi	10007c00 <_setlocale_r>

10007cd0 <localeconv>:
10007cd0:	00840074 	movhi	r2,4097
10007cd4:	108c0d04 	addi	r2,r2,12340
10007cd8:	f800283a 	ret

10007cdc <__smakebuf_r>:
10007cdc:	2880030b 	ldhu	r2,12(r5)
10007ce0:	10c0008c 	andi	r3,r2,2
10007ce4:	1800411e 	bne	r3,zero,10007dec <__smakebuf_r+0x110>
10007ce8:	deffec04 	addi	sp,sp,-80
10007cec:	dc000f15 	stw	r16,60(sp)
10007cf0:	2821883a 	mov	r16,r5
10007cf4:	2940038f 	ldh	r5,14(r5)
10007cf8:	dc401015 	stw	r17,64(sp)
10007cfc:	dfc01315 	stw	ra,76(sp)
10007d00:	dcc01215 	stw	r19,72(sp)
10007d04:	dc801115 	stw	r18,68(sp)
10007d08:	2023883a 	mov	r17,r4
10007d0c:	28001c16 	blt	r5,zero,10007d80 <__smakebuf_r+0xa4>
10007d10:	d80d883a 	mov	r6,sp
10007d14:	000bfe40 	call	1000bfe4 <_fstat_r>
10007d18:	10001816 	blt	r2,zero,10007d7c <__smakebuf_r+0xa0>
10007d1c:	d8800117 	ldw	r2,4(sp)
10007d20:	00e00014 	movui	r3,32768
10007d24:	10bc000c 	andi	r2,r2,61440
10007d28:	14c80020 	cmpeqi	r19,r2,8192
10007d2c:	10c03726 	beq	r2,r3,10007e0c <__smakebuf_r+0x130>
10007d30:	80c0030b 	ldhu	r3,12(r16)
10007d34:	18c20014 	ori	r3,r3,2048
10007d38:	80c0030d 	sth	r3,12(r16)
10007d3c:	00c80004 	movi	r3,8192
10007d40:	10c0521e 	bne	r2,r3,10007e8c <__smakebuf_r+0x1b0>
10007d44:	8140038f 	ldh	r5,14(r16)
10007d48:	8809883a 	mov	r4,r17
10007d4c:	000c0400 	call	1000c040 <_isatty_r>
10007d50:	10004c26 	beq	r2,zero,10007e84 <__smakebuf_r+0x1a8>
10007d54:	8080030b 	ldhu	r2,12(r16)
10007d58:	80c010c4 	addi	r3,r16,67
10007d5c:	80c00015 	stw	r3,0(r16)
10007d60:	10800054 	ori	r2,r2,1
10007d64:	8080030d 	sth	r2,12(r16)
10007d68:	00800044 	movi	r2,1
10007d6c:	80c00415 	stw	r3,16(r16)
10007d70:	80800515 	stw	r2,20(r16)
10007d74:	04810004 	movi	r18,1024
10007d78:	00000706 	br	10007d98 <__smakebuf_r+0xbc>
10007d7c:	8080030b 	ldhu	r2,12(r16)
10007d80:	10c0200c 	andi	r3,r2,128
10007d84:	18001f1e 	bne	r3,zero,10007e04 <__smakebuf_r+0x128>
10007d88:	04810004 	movi	r18,1024
10007d8c:	10820014 	ori	r2,r2,2048
10007d90:	8080030d 	sth	r2,12(r16)
10007d94:	0027883a 	mov	r19,zero
10007d98:	900b883a 	mov	r5,r18
10007d9c:	8809883a 	mov	r4,r17
10007da0:	0007e980 	call	10007e98 <_malloc_r>
10007da4:	10002c26 	beq	r2,zero,10007e58 <__smakebuf_r+0x17c>
10007da8:	80c0030b 	ldhu	r3,12(r16)
10007dac:	01040034 	movhi	r4,4096
10007db0:	211b7504 	addi	r4,r4,28116
10007db4:	89000f15 	stw	r4,60(r17)
10007db8:	18c02014 	ori	r3,r3,128
10007dbc:	80c0030d 	sth	r3,12(r16)
10007dc0:	80800015 	stw	r2,0(r16)
10007dc4:	80800415 	stw	r2,16(r16)
10007dc8:	84800515 	stw	r18,20(r16)
10007dcc:	98001a1e 	bne	r19,zero,10007e38 <__smakebuf_r+0x15c>
10007dd0:	dfc01317 	ldw	ra,76(sp)
10007dd4:	dcc01217 	ldw	r19,72(sp)
10007dd8:	dc801117 	ldw	r18,68(sp)
10007ddc:	dc401017 	ldw	r17,64(sp)
10007de0:	dc000f17 	ldw	r16,60(sp)
10007de4:	dec01404 	addi	sp,sp,80
10007de8:	f800283a 	ret
10007dec:	288010c4 	addi	r2,r5,67
10007df0:	28800015 	stw	r2,0(r5)
10007df4:	28800415 	stw	r2,16(r5)
10007df8:	00800044 	movi	r2,1
10007dfc:	28800515 	stw	r2,20(r5)
10007e00:	f800283a 	ret
10007e04:	04801004 	movi	r18,64
10007e08:	003fe006 	br	10007d8c <__alt_data_end+0xf8007d8c>
10007e0c:	81000a17 	ldw	r4,40(r16)
10007e10:	00c40074 	movhi	r3,4097
10007e14:	18e8c404 	addi	r3,r3,-23792
10007e18:	20ffc51e 	bne	r4,r3,10007d30 <__alt_data_end+0xf8007d30>
10007e1c:	8080030b 	ldhu	r2,12(r16)
10007e20:	04810004 	movi	r18,1024
10007e24:	84801315 	stw	r18,76(r16)
10007e28:	1484b03a 	or	r2,r2,r18
10007e2c:	8080030d 	sth	r2,12(r16)
10007e30:	0027883a 	mov	r19,zero
10007e34:	003fd806 	br	10007d98 <__alt_data_end+0xf8007d98>
10007e38:	8140038f 	ldh	r5,14(r16)
10007e3c:	8809883a 	mov	r4,r17
10007e40:	000c0400 	call	1000c040 <_isatty_r>
10007e44:	103fe226 	beq	r2,zero,10007dd0 <__alt_data_end+0xf8007dd0>
10007e48:	8080030b 	ldhu	r2,12(r16)
10007e4c:	10800054 	ori	r2,r2,1
10007e50:	8080030d 	sth	r2,12(r16)
10007e54:	003fde06 	br	10007dd0 <__alt_data_end+0xf8007dd0>
10007e58:	8080030b 	ldhu	r2,12(r16)
10007e5c:	10c0800c 	andi	r3,r2,512
10007e60:	183fdb1e 	bne	r3,zero,10007dd0 <__alt_data_end+0xf8007dd0>
10007e64:	10800094 	ori	r2,r2,2
10007e68:	80c010c4 	addi	r3,r16,67
10007e6c:	8080030d 	sth	r2,12(r16)
10007e70:	00800044 	movi	r2,1
10007e74:	80c00015 	stw	r3,0(r16)
10007e78:	80c00415 	stw	r3,16(r16)
10007e7c:	80800515 	stw	r2,20(r16)
10007e80:	003fd306 	br	10007dd0 <__alt_data_end+0xf8007dd0>
10007e84:	04810004 	movi	r18,1024
10007e88:	003fc306 	br	10007d98 <__alt_data_end+0xf8007d98>
10007e8c:	0027883a 	mov	r19,zero
10007e90:	04810004 	movi	r18,1024
10007e94:	003fc006 	br	10007d98 <__alt_data_end+0xf8007d98>

10007e98 <_malloc_r>:
10007e98:	defff504 	addi	sp,sp,-44
10007e9c:	dc800315 	stw	r18,12(sp)
10007ea0:	dfc00a15 	stw	ra,40(sp)
10007ea4:	df000915 	stw	fp,36(sp)
10007ea8:	ddc00815 	stw	r23,32(sp)
10007eac:	dd800715 	stw	r22,28(sp)
10007eb0:	dd400615 	stw	r21,24(sp)
10007eb4:	dd000515 	stw	r20,20(sp)
10007eb8:	dcc00415 	stw	r19,16(sp)
10007ebc:	dc400215 	stw	r17,8(sp)
10007ec0:	dc000115 	stw	r16,4(sp)
10007ec4:	288002c4 	addi	r2,r5,11
10007ec8:	00c00584 	movi	r3,22
10007ecc:	2025883a 	mov	r18,r4
10007ed0:	18807f2e 	bgeu	r3,r2,100080d0 <_malloc_r+0x238>
10007ed4:	047ffe04 	movi	r17,-8
10007ed8:	1462703a 	and	r17,r2,r17
10007edc:	8800a316 	blt	r17,zero,1000816c <_malloc_r+0x2d4>
10007ee0:	8940a236 	bltu	r17,r5,1000816c <_malloc_r+0x2d4>
10007ee4:	000fe940 	call	1000fe94 <__malloc_lock>
10007ee8:	00807dc4 	movi	r2,503
10007eec:	1441e92e 	bgeu	r2,r17,10008694 <_malloc_r+0x7fc>
10007ef0:	8804d27a 	srli	r2,r17,9
10007ef4:	1000a126 	beq	r2,zero,1000817c <_malloc_r+0x2e4>
10007ef8:	00c00104 	movi	r3,4
10007efc:	18811e36 	bltu	r3,r2,10008378 <_malloc_r+0x4e0>
10007f00:	8804d1ba 	srli	r2,r17,6
10007f04:	12000e44 	addi	r8,r2,57
10007f08:	11c00e04 	addi	r7,r2,56
10007f0c:	4209883a 	add	r4,r8,r8
10007f10:	04c40074 	movhi	r19,4097
10007f14:	2109883a 	add	r4,r4,r4
10007f18:	9ccc1b04 	addi	r19,r19,12396
10007f1c:	2109883a 	add	r4,r4,r4
10007f20:	9909883a 	add	r4,r19,r4
10007f24:	24000117 	ldw	r16,4(r4)
10007f28:	213ffe04 	addi	r4,r4,-8
10007f2c:	24009726 	beq	r4,r16,1000818c <_malloc_r+0x2f4>
10007f30:	80800117 	ldw	r2,4(r16)
10007f34:	01bfff04 	movi	r6,-4
10007f38:	014003c4 	movi	r5,15
10007f3c:	1184703a 	and	r2,r2,r6
10007f40:	1447c83a 	sub	r3,r2,r17
10007f44:	28c00716 	blt	r5,r3,10007f64 <_malloc_r+0xcc>
10007f48:	1800920e 	bge	r3,zero,10008194 <_malloc_r+0x2fc>
10007f4c:	84000317 	ldw	r16,12(r16)
10007f50:	24008e26 	beq	r4,r16,1000818c <_malloc_r+0x2f4>
10007f54:	80800117 	ldw	r2,4(r16)
10007f58:	1184703a 	and	r2,r2,r6
10007f5c:	1447c83a 	sub	r3,r2,r17
10007f60:	28fff90e 	bge	r5,r3,10007f48 <__alt_data_end+0xf8007f48>
10007f64:	3809883a 	mov	r4,r7
10007f68:	01840074 	movhi	r6,4097
10007f6c:	9c000417 	ldw	r16,16(r19)
10007f70:	318c1b04 	addi	r6,r6,12396
10007f74:	32000204 	addi	r8,r6,8
10007f78:	82013426 	beq	r16,r8,1000844c <_malloc_r+0x5b4>
10007f7c:	80c00117 	ldw	r3,4(r16)
10007f80:	00bfff04 	movi	r2,-4
10007f84:	188e703a 	and	r7,r3,r2
10007f88:	3c45c83a 	sub	r2,r7,r17
10007f8c:	00c003c4 	movi	r3,15
10007f90:	18811f16 	blt	r3,r2,10008410 <_malloc_r+0x578>
10007f94:	32000515 	stw	r8,20(r6)
10007f98:	32000415 	stw	r8,16(r6)
10007f9c:	10007f0e 	bge	r2,zero,1000819c <_malloc_r+0x304>
10007fa0:	00807fc4 	movi	r2,511
10007fa4:	11c0fd36 	bltu	r2,r7,1000839c <_malloc_r+0x504>
10007fa8:	3806d0fa 	srli	r3,r7,3
10007fac:	01c00044 	movi	r7,1
10007fb0:	30800117 	ldw	r2,4(r6)
10007fb4:	19400044 	addi	r5,r3,1
10007fb8:	294b883a 	add	r5,r5,r5
10007fbc:	1807d0ba 	srai	r3,r3,2
10007fc0:	294b883a 	add	r5,r5,r5
10007fc4:	294b883a 	add	r5,r5,r5
10007fc8:	298b883a 	add	r5,r5,r6
10007fcc:	38c6983a 	sll	r3,r7,r3
10007fd0:	29c00017 	ldw	r7,0(r5)
10007fd4:	2a7ffe04 	addi	r9,r5,-8
10007fd8:	1886b03a 	or	r3,r3,r2
10007fdc:	82400315 	stw	r9,12(r16)
10007fe0:	81c00215 	stw	r7,8(r16)
10007fe4:	30c00115 	stw	r3,4(r6)
10007fe8:	2c000015 	stw	r16,0(r5)
10007fec:	3c000315 	stw	r16,12(r7)
10007ff0:	2005d0ba 	srai	r2,r4,2
10007ff4:	01400044 	movi	r5,1
10007ff8:	288a983a 	sll	r5,r5,r2
10007ffc:	19406f36 	bltu	r3,r5,100081bc <_malloc_r+0x324>
10008000:	28c4703a 	and	r2,r5,r3
10008004:	10000a1e 	bne	r2,zero,10008030 <_malloc_r+0x198>
10008008:	00bfff04 	movi	r2,-4
1000800c:	294b883a 	add	r5,r5,r5
10008010:	2088703a 	and	r4,r4,r2
10008014:	28c4703a 	and	r2,r5,r3
10008018:	21000104 	addi	r4,r4,4
1000801c:	1000041e 	bne	r2,zero,10008030 <_malloc_r+0x198>
10008020:	294b883a 	add	r5,r5,r5
10008024:	28c4703a 	and	r2,r5,r3
10008028:	21000104 	addi	r4,r4,4
1000802c:	103ffc26 	beq	r2,zero,10008020 <__alt_data_end+0xf8008020>
10008030:	02bfff04 	movi	r10,-4
10008034:	024003c4 	movi	r9,15
10008038:	21800044 	addi	r6,r4,1
1000803c:	318d883a 	add	r6,r6,r6
10008040:	318d883a 	add	r6,r6,r6
10008044:	318d883a 	add	r6,r6,r6
10008048:	998d883a 	add	r6,r19,r6
1000804c:	333ffe04 	addi	r12,r6,-8
10008050:	2017883a 	mov	r11,r4
10008054:	31800104 	addi	r6,r6,4
10008058:	34000017 	ldw	r16,0(r6)
1000805c:	31fffd04 	addi	r7,r6,-12
10008060:	81c0041e 	bne	r16,r7,10008074 <_malloc_r+0x1dc>
10008064:	0000fb06 	br	10008454 <_malloc_r+0x5bc>
10008068:	1801030e 	bge	r3,zero,10008478 <_malloc_r+0x5e0>
1000806c:	84000317 	ldw	r16,12(r16)
10008070:	81c0f826 	beq	r16,r7,10008454 <_malloc_r+0x5bc>
10008074:	80800117 	ldw	r2,4(r16)
10008078:	1284703a 	and	r2,r2,r10
1000807c:	1447c83a 	sub	r3,r2,r17
10008080:	48fff90e 	bge	r9,r3,10008068 <__alt_data_end+0xf8008068>
10008084:	80800317 	ldw	r2,12(r16)
10008088:	81000217 	ldw	r4,8(r16)
1000808c:	89400054 	ori	r5,r17,1
10008090:	81400115 	stw	r5,4(r16)
10008094:	20800315 	stw	r2,12(r4)
10008098:	11000215 	stw	r4,8(r2)
1000809c:	8463883a 	add	r17,r16,r17
100080a0:	9c400515 	stw	r17,20(r19)
100080a4:	9c400415 	stw	r17,16(r19)
100080a8:	18800054 	ori	r2,r3,1
100080ac:	88800115 	stw	r2,4(r17)
100080b0:	8a000315 	stw	r8,12(r17)
100080b4:	8a000215 	stw	r8,8(r17)
100080b8:	88e3883a 	add	r17,r17,r3
100080bc:	88c00015 	stw	r3,0(r17)
100080c0:	9009883a 	mov	r4,r18
100080c4:	000feb80 	call	1000feb8 <__malloc_unlock>
100080c8:	80800204 	addi	r2,r16,8
100080cc:	00001b06 	br	1000813c <_malloc_r+0x2a4>
100080d0:	04400404 	movi	r17,16
100080d4:	89402536 	bltu	r17,r5,1000816c <_malloc_r+0x2d4>
100080d8:	000fe940 	call	1000fe94 <__malloc_lock>
100080dc:	00800184 	movi	r2,6
100080e0:	01000084 	movi	r4,2
100080e4:	04c40074 	movhi	r19,4097
100080e8:	1085883a 	add	r2,r2,r2
100080ec:	9ccc1b04 	addi	r19,r19,12396
100080f0:	1085883a 	add	r2,r2,r2
100080f4:	9885883a 	add	r2,r19,r2
100080f8:	14000117 	ldw	r16,4(r2)
100080fc:	10fffe04 	addi	r3,r2,-8
10008100:	80c0d926 	beq	r16,r3,10008468 <_malloc_r+0x5d0>
10008104:	80c00117 	ldw	r3,4(r16)
10008108:	81000317 	ldw	r4,12(r16)
1000810c:	00bfff04 	movi	r2,-4
10008110:	1884703a 	and	r2,r3,r2
10008114:	81400217 	ldw	r5,8(r16)
10008118:	8085883a 	add	r2,r16,r2
1000811c:	10c00117 	ldw	r3,4(r2)
10008120:	29000315 	stw	r4,12(r5)
10008124:	21400215 	stw	r5,8(r4)
10008128:	18c00054 	ori	r3,r3,1
1000812c:	10c00115 	stw	r3,4(r2)
10008130:	9009883a 	mov	r4,r18
10008134:	000feb80 	call	1000feb8 <__malloc_unlock>
10008138:	80800204 	addi	r2,r16,8
1000813c:	dfc00a17 	ldw	ra,40(sp)
10008140:	df000917 	ldw	fp,36(sp)
10008144:	ddc00817 	ldw	r23,32(sp)
10008148:	dd800717 	ldw	r22,28(sp)
1000814c:	dd400617 	ldw	r21,24(sp)
10008150:	dd000517 	ldw	r20,20(sp)
10008154:	dcc00417 	ldw	r19,16(sp)
10008158:	dc800317 	ldw	r18,12(sp)
1000815c:	dc400217 	ldw	r17,8(sp)
10008160:	dc000117 	ldw	r16,4(sp)
10008164:	dec00b04 	addi	sp,sp,44
10008168:	f800283a 	ret
1000816c:	00800304 	movi	r2,12
10008170:	90800015 	stw	r2,0(r18)
10008174:	0005883a 	mov	r2,zero
10008178:	003ff006 	br	1000813c <__alt_data_end+0xf800813c>
1000817c:	01002004 	movi	r4,128
10008180:	02001004 	movi	r8,64
10008184:	01c00fc4 	movi	r7,63
10008188:	003f6106 	br	10007f10 <__alt_data_end+0xf8007f10>
1000818c:	4009883a 	mov	r4,r8
10008190:	003f7506 	br	10007f68 <__alt_data_end+0xf8007f68>
10008194:	81000317 	ldw	r4,12(r16)
10008198:	003fde06 	br	10008114 <__alt_data_end+0xf8008114>
1000819c:	81c5883a 	add	r2,r16,r7
100081a0:	11400117 	ldw	r5,4(r2)
100081a4:	9009883a 	mov	r4,r18
100081a8:	29400054 	ori	r5,r5,1
100081ac:	11400115 	stw	r5,4(r2)
100081b0:	000feb80 	call	1000feb8 <__malloc_unlock>
100081b4:	80800204 	addi	r2,r16,8
100081b8:	003fe006 	br	1000813c <__alt_data_end+0xf800813c>
100081bc:	9c000217 	ldw	r16,8(r19)
100081c0:	00bfff04 	movi	r2,-4
100081c4:	85800117 	ldw	r22,4(r16)
100081c8:	b0ac703a 	and	r22,r22,r2
100081cc:	b4400336 	bltu	r22,r17,100081dc <_malloc_r+0x344>
100081d0:	b445c83a 	sub	r2,r22,r17
100081d4:	00c003c4 	movi	r3,15
100081d8:	18805d16 	blt	r3,r2,10008350 <_malloc_r+0x4b8>
100081dc:	05c40074 	movhi	r23,4097
100081e0:	00840074 	movhi	r2,4097
100081e4:	10987704 	addi	r2,r2,25052
100081e8:	bdd1a204 	addi	r23,r23,18056
100081ec:	15400017 	ldw	r21,0(r2)
100081f0:	b8c00017 	ldw	r3,0(r23)
100081f4:	00bfffc4 	movi	r2,-1
100081f8:	858d883a 	add	r6,r16,r22
100081fc:	8d6b883a 	add	r21,r17,r21
10008200:	1880ea26 	beq	r3,r2,100085ac <_malloc_r+0x714>
10008204:	ad4403c4 	addi	r21,r21,4111
10008208:	00bc0004 	movi	r2,-4096
1000820c:	a8aa703a 	and	r21,r21,r2
10008210:	a80b883a 	mov	r5,r21
10008214:	9009883a 	mov	r4,r18
10008218:	d9800015 	stw	r6,0(sp)
1000821c:	000a1e40 	call	1000a1e4 <_sbrk_r>
10008220:	1029883a 	mov	r20,r2
10008224:	00bfffc4 	movi	r2,-1
10008228:	d9800017 	ldw	r6,0(sp)
1000822c:	a080e826 	beq	r20,r2,100085d0 <_malloc_r+0x738>
10008230:	a180a636 	bltu	r20,r6,100084cc <_malloc_r+0x634>
10008234:	07040074 	movhi	fp,4097
10008238:	e7188004 	addi	fp,fp,25088
1000823c:	e0800017 	ldw	r2,0(fp)
10008240:	a887883a 	add	r3,r21,r2
10008244:	e0c00015 	stw	r3,0(fp)
10008248:	3500e626 	beq	r6,r20,100085e4 <_malloc_r+0x74c>
1000824c:	b9000017 	ldw	r4,0(r23)
10008250:	00bfffc4 	movi	r2,-1
10008254:	2080ee26 	beq	r4,r2,10008610 <_malloc_r+0x778>
10008258:	a185c83a 	sub	r2,r20,r6
1000825c:	10c5883a 	add	r2,r2,r3
10008260:	e0800015 	stw	r2,0(fp)
10008264:	a0c001cc 	andi	r3,r20,7
10008268:	1800bc26 	beq	r3,zero,1000855c <_malloc_r+0x6c4>
1000826c:	a0e9c83a 	sub	r20,r20,r3
10008270:	00840204 	movi	r2,4104
10008274:	a5000204 	addi	r20,r20,8
10008278:	10c7c83a 	sub	r3,r2,r3
1000827c:	a545883a 	add	r2,r20,r21
10008280:	1083ffcc 	andi	r2,r2,4095
10008284:	18abc83a 	sub	r21,r3,r2
10008288:	a80b883a 	mov	r5,r21
1000828c:	9009883a 	mov	r4,r18
10008290:	000a1e40 	call	1000a1e4 <_sbrk_r>
10008294:	00ffffc4 	movi	r3,-1
10008298:	10c0e126 	beq	r2,r3,10008620 <_malloc_r+0x788>
1000829c:	1505c83a 	sub	r2,r2,r20
100082a0:	1545883a 	add	r2,r2,r21
100082a4:	10800054 	ori	r2,r2,1
100082a8:	e0c00017 	ldw	r3,0(fp)
100082ac:	9d000215 	stw	r20,8(r19)
100082b0:	a0800115 	stw	r2,4(r20)
100082b4:	a8c7883a 	add	r3,r21,r3
100082b8:	e0c00015 	stw	r3,0(fp)
100082bc:	84c00e26 	beq	r16,r19,100082f8 <_malloc_r+0x460>
100082c0:	018003c4 	movi	r6,15
100082c4:	3580a72e 	bgeu	r6,r22,10008564 <_malloc_r+0x6cc>
100082c8:	81400117 	ldw	r5,4(r16)
100082cc:	013ffe04 	movi	r4,-8
100082d0:	b0bffd04 	addi	r2,r22,-12
100082d4:	1104703a 	and	r2,r2,r4
100082d8:	2900004c 	andi	r4,r5,1
100082dc:	2088b03a 	or	r4,r4,r2
100082e0:	81000115 	stw	r4,4(r16)
100082e4:	01400144 	movi	r5,5
100082e8:	8089883a 	add	r4,r16,r2
100082ec:	21400115 	stw	r5,4(r4)
100082f0:	21400215 	stw	r5,8(r4)
100082f4:	3080cd36 	bltu	r6,r2,1000862c <_malloc_r+0x794>
100082f8:	00840074 	movhi	r2,4097
100082fc:	10987604 	addi	r2,r2,25048
10008300:	11000017 	ldw	r4,0(r2)
10008304:	20c0012e 	bgeu	r4,r3,1000830c <_malloc_r+0x474>
10008308:	10c00015 	stw	r3,0(r2)
1000830c:	00840074 	movhi	r2,4097
10008310:	10987504 	addi	r2,r2,25044
10008314:	11000017 	ldw	r4,0(r2)
10008318:	9c000217 	ldw	r16,8(r19)
1000831c:	20c0012e 	bgeu	r4,r3,10008324 <_malloc_r+0x48c>
10008320:	10c00015 	stw	r3,0(r2)
10008324:	80c00117 	ldw	r3,4(r16)
10008328:	00bfff04 	movi	r2,-4
1000832c:	1886703a 	and	r3,r3,r2
10008330:	1c45c83a 	sub	r2,r3,r17
10008334:	1c400236 	bltu	r3,r17,10008340 <_malloc_r+0x4a8>
10008338:	00c003c4 	movi	r3,15
1000833c:	18800416 	blt	r3,r2,10008350 <_malloc_r+0x4b8>
10008340:	9009883a 	mov	r4,r18
10008344:	000feb80 	call	1000feb8 <__malloc_unlock>
10008348:	0005883a 	mov	r2,zero
1000834c:	003f7b06 	br	1000813c <__alt_data_end+0xf800813c>
10008350:	88c00054 	ori	r3,r17,1
10008354:	80c00115 	stw	r3,4(r16)
10008358:	8463883a 	add	r17,r16,r17
1000835c:	10800054 	ori	r2,r2,1
10008360:	9c400215 	stw	r17,8(r19)
10008364:	88800115 	stw	r2,4(r17)
10008368:	9009883a 	mov	r4,r18
1000836c:	000feb80 	call	1000feb8 <__malloc_unlock>
10008370:	80800204 	addi	r2,r16,8
10008374:	003f7106 	br	1000813c <__alt_data_end+0xf800813c>
10008378:	00c00504 	movi	r3,20
1000837c:	18804a2e 	bgeu	r3,r2,100084a8 <_malloc_r+0x610>
10008380:	00c01504 	movi	r3,84
10008384:	18806e36 	bltu	r3,r2,10008540 <_malloc_r+0x6a8>
10008388:	8804d33a 	srli	r2,r17,12
1000838c:	12001bc4 	addi	r8,r2,111
10008390:	11c01b84 	addi	r7,r2,110
10008394:	4209883a 	add	r4,r8,r8
10008398:	003edd06 	br	10007f10 <__alt_data_end+0xf8007f10>
1000839c:	3804d27a 	srli	r2,r7,9
100083a0:	00c00104 	movi	r3,4
100083a4:	1880442e 	bgeu	r3,r2,100084b8 <_malloc_r+0x620>
100083a8:	00c00504 	movi	r3,20
100083ac:	18808136 	bltu	r3,r2,100085b4 <_malloc_r+0x71c>
100083b0:	11401704 	addi	r5,r2,92
100083b4:	10c016c4 	addi	r3,r2,91
100083b8:	294b883a 	add	r5,r5,r5
100083bc:	294b883a 	add	r5,r5,r5
100083c0:	294b883a 	add	r5,r5,r5
100083c4:	994b883a 	add	r5,r19,r5
100083c8:	28800017 	ldw	r2,0(r5)
100083cc:	01840074 	movhi	r6,4097
100083d0:	297ffe04 	addi	r5,r5,-8
100083d4:	318c1b04 	addi	r6,r6,12396
100083d8:	28806526 	beq	r5,r2,10008570 <_malloc_r+0x6d8>
100083dc:	01bfff04 	movi	r6,-4
100083e0:	10c00117 	ldw	r3,4(r2)
100083e4:	1986703a 	and	r3,r3,r6
100083e8:	38c0022e 	bgeu	r7,r3,100083f4 <_malloc_r+0x55c>
100083ec:	10800217 	ldw	r2,8(r2)
100083f0:	28bffb1e 	bne	r5,r2,100083e0 <__alt_data_end+0xf80083e0>
100083f4:	11400317 	ldw	r5,12(r2)
100083f8:	98c00117 	ldw	r3,4(r19)
100083fc:	81400315 	stw	r5,12(r16)
10008400:	80800215 	stw	r2,8(r16)
10008404:	2c000215 	stw	r16,8(r5)
10008408:	14000315 	stw	r16,12(r2)
1000840c:	003ef806 	br	10007ff0 <__alt_data_end+0xf8007ff0>
10008410:	88c00054 	ori	r3,r17,1
10008414:	80c00115 	stw	r3,4(r16)
10008418:	8463883a 	add	r17,r16,r17
1000841c:	34400515 	stw	r17,20(r6)
10008420:	34400415 	stw	r17,16(r6)
10008424:	10c00054 	ori	r3,r2,1
10008428:	8a000315 	stw	r8,12(r17)
1000842c:	8a000215 	stw	r8,8(r17)
10008430:	88c00115 	stw	r3,4(r17)
10008434:	88a3883a 	add	r17,r17,r2
10008438:	88800015 	stw	r2,0(r17)
1000843c:	9009883a 	mov	r4,r18
10008440:	000feb80 	call	1000feb8 <__malloc_unlock>
10008444:	80800204 	addi	r2,r16,8
10008448:	003f3c06 	br	1000813c <__alt_data_end+0xf800813c>
1000844c:	30c00117 	ldw	r3,4(r6)
10008450:	003ee706 	br	10007ff0 <__alt_data_end+0xf8007ff0>
10008454:	5ac00044 	addi	r11,r11,1
10008458:	588000cc 	andi	r2,r11,3
1000845c:	31800204 	addi	r6,r6,8
10008460:	103efd1e 	bne	r2,zero,10008058 <__alt_data_end+0xf8008058>
10008464:	00002406 	br	100084f8 <_malloc_r+0x660>
10008468:	14000317 	ldw	r16,12(r2)
1000846c:	143f251e 	bne	r2,r16,10008104 <__alt_data_end+0xf8008104>
10008470:	21000084 	addi	r4,r4,2
10008474:	003ebc06 	br	10007f68 <__alt_data_end+0xf8007f68>
10008478:	8085883a 	add	r2,r16,r2
1000847c:	10c00117 	ldw	r3,4(r2)
10008480:	81000317 	ldw	r4,12(r16)
10008484:	81400217 	ldw	r5,8(r16)
10008488:	18c00054 	ori	r3,r3,1
1000848c:	10c00115 	stw	r3,4(r2)
10008490:	29000315 	stw	r4,12(r5)
10008494:	21400215 	stw	r5,8(r4)
10008498:	9009883a 	mov	r4,r18
1000849c:	000feb80 	call	1000feb8 <__malloc_unlock>
100084a0:	80800204 	addi	r2,r16,8
100084a4:	003f2506 	br	1000813c <__alt_data_end+0xf800813c>
100084a8:	12001704 	addi	r8,r2,92
100084ac:	11c016c4 	addi	r7,r2,91
100084b0:	4209883a 	add	r4,r8,r8
100084b4:	003e9606 	br	10007f10 <__alt_data_end+0xf8007f10>
100084b8:	3804d1ba 	srli	r2,r7,6
100084bc:	11400e44 	addi	r5,r2,57
100084c0:	10c00e04 	addi	r3,r2,56
100084c4:	294b883a 	add	r5,r5,r5
100084c8:	003fbc06 	br	100083bc <__alt_data_end+0xf80083bc>
100084cc:	84ff5926 	beq	r16,r19,10008234 <__alt_data_end+0xf8008234>
100084d0:	00840074 	movhi	r2,4097
100084d4:	108c1b04 	addi	r2,r2,12396
100084d8:	14000217 	ldw	r16,8(r2)
100084dc:	00bfff04 	movi	r2,-4
100084e0:	80c00117 	ldw	r3,4(r16)
100084e4:	1886703a 	and	r3,r3,r2
100084e8:	003f9106 	br	10008330 <__alt_data_end+0xf8008330>
100084ec:	60800217 	ldw	r2,8(r12)
100084f0:	213fffc4 	addi	r4,r4,-1
100084f4:	1300651e 	bne	r2,r12,1000868c <_malloc_r+0x7f4>
100084f8:	208000cc 	andi	r2,r4,3
100084fc:	633ffe04 	addi	r12,r12,-8
10008500:	103ffa1e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
10008504:	98800117 	ldw	r2,4(r19)
10008508:	0146303a 	nor	r3,zero,r5
1000850c:	1884703a 	and	r2,r3,r2
10008510:	98800115 	stw	r2,4(r19)
10008514:	294b883a 	add	r5,r5,r5
10008518:	117f2836 	bltu	r2,r5,100081bc <__alt_data_end+0xf80081bc>
1000851c:	283f2726 	beq	r5,zero,100081bc <__alt_data_end+0xf80081bc>
10008520:	2886703a 	and	r3,r5,r2
10008524:	5809883a 	mov	r4,r11
10008528:	183ec31e 	bne	r3,zero,10008038 <__alt_data_end+0xf8008038>
1000852c:	294b883a 	add	r5,r5,r5
10008530:	2886703a 	and	r3,r5,r2
10008534:	21000104 	addi	r4,r4,4
10008538:	183ffc26 	beq	r3,zero,1000852c <__alt_data_end+0xf800852c>
1000853c:	003ebe06 	br	10008038 <__alt_data_end+0xf8008038>
10008540:	00c05504 	movi	r3,340
10008544:	18801236 	bltu	r3,r2,10008590 <_malloc_r+0x6f8>
10008548:	8804d3fa 	srli	r2,r17,15
1000854c:	12001e04 	addi	r8,r2,120
10008550:	11c01dc4 	addi	r7,r2,119
10008554:	4209883a 	add	r4,r8,r8
10008558:	003e6d06 	br	10007f10 <__alt_data_end+0xf8007f10>
1000855c:	00c40004 	movi	r3,4096
10008560:	003f4606 	br	1000827c <__alt_data_end+0xf800827c>
10008564:	00800044 	movi	r2,1
10008568:	a0800115 	stw	r2,4(r20)
1000856c:	003f7406 	br	10008340 <__alt_data_end+0xf8008340>
10008570:	1805d0ba 	srai	r2,r3,2
10008574:	01c00044 	movi	r7,1
10008578:	30c00117 	ldw	r3,4(r6)
1000857c:	388e983a 	sll	r7,r7,r2
10008580:	2805883a 	mov	r2,r5
10008584:	38c6b03a 	or	r3,r7,r3
10008588:	30c00115 	stw	r3,4(r6)
1000858c:	003f9b06 	br	100083fc <__alt_data_end+0xf80083fc>
10008590:	00c15504 	movi	r3,1364
10008594:	18801a36 	bltu	r3,r2,10008600 <_malloc_r+0x768>
10008598:	8804d4ba 	srli	r2,r17,18
1000859c:	12001f44 	addi	r8,r2,125
100085a0:	11c01f04 	addi	r7,r2,124
100085a4:	4209883a 	add	r4,r8,r8
100085a8:	003e5906 	br	10007f10 <__alt_data_end+0xf8007f10>
100085ac:	ad400404 	addi	r21,r21,16
100085b0:	003f1706 	br	10008210 <__alt_data_end+0xf8008210>
100085b4:	00c01504 	movi	r3,84
100085b8:	18802336 	bltu	r3,r2,10008648 <_malloc_r+0x7b0>
100085bc:	3804d33a 	srli	r2,r7,12
100085c0:	11401bc4 	addi	r5,r2,111
100085c4:	10c01b84 	addi	r3,r2,110
100085c8:	294b883a 	add	r5,r5,r5
100085cc:	003f7b06 	br	100083bc <__alt_data_end+0xf80083bc>
100085d0:	9c000217 	ldw	r16,8(r19)
100085d4:	00bfff04 	movi	r2,-4
100085d8:	80c00117 	ldw	r3,4(r16)
100085dc:	1886703a 	and	r3,r3,r2
100085e0:	003f5306 	br	10008330 <__alt_data_end+0xf8008330>
100085e4:	3083ffcc 	andi	r2,r6,4095
100085e8:	103f181e 	bne	r2,zero,1000824c <__alt_data_end+0xf800824c>
100085ec:	99000217 	ldw	r4,8(r19)
100085f0:	b545883a 	add	r2,r22,r21
100085f4:	10800054 	ori	r2,r2,1
100085f8:	20800115 	stw	r2,4(r4)
100085fc:	003f3e06 	br	100082f8 <__alt_data_end+0xf80082f8>
10008600:	01003f84 	movi	r4,254
10008604:	02001fc4 	movi	r8,127
10008608:	01c01f84 	movi	r7,126
1000860c:	003e4006 	br	10007f10 <__alt_data_end+0xf8007f10>
10008610:	00840074 	movhi	r2,4097
10008614:	1091a204 	addi	r2,r2,18056
10008618:	15000015 	stw	r20,0(r2)
1000861c:	003f1106 	br	10008264 <__alt_data_end+0xf8008264>
10008620:	00800044 	movi	r2,1
10008624:	002b883a 	mov	r21,zero
10008628:	003f1f06 	br	100082a8 <__alt_data_end+0xf80082a8>
1000862c:	81400204 	addi	r5,r16,8
10008630:	9009883a 	mov	r4,r18
10008634:	00072a00 	call	100072a0 <_free_r>
10008638:	00840074 	movhi	r2,4097
1000863c:	10988004 	addi	r2,r2,25088
10008640:	10c00017 	ldw	r3,0(r2)
10008644:	003f2c06 	br	100082f8 <__alt_data_end+0xf80082f8>
10008648:	00c05504 	movi	r3,340
1000864c:	18800536 	bltu	r3,r2,10008664 <_malloc_r+0x7cc>
10008650:	3804d3fa 	srli	r2,r7,15
10008654:	11401e04 	addi	r5,r2,120
10008658:	10c01dc4 	addi	r3,r2,119
1000865c:	294b883a 	add	r5,r5,r5
10008660:	003f5606 	br	100083bc <__alt_data_end+0xf80083bc>
10008664:	00c15504 	movi	r3,1364
10008668:	18800536 	bltu	r3,r2,10008680 <_malloc_r+0x7e8>
1000866c:	3804d4ba 	srli	r2,r7,18
10008670:	11401f44 	addi	r5,r2,125
10008674:	10c01f04 	addi	r3,r2,124
10008678:	294b883a 	add	r5,r5,r5
1000867c:	003f4f06 	br	100083bc <__alt_data_end+0xf80083bc>
10008680:	01403f84 	movi	r5,254
10008684:	00c01f84 	movi	r3,126
10008688:	003f4c06 	br	100083bc <__alt_data_end+0xf80083bc>
1000868c:	98800117 	ldw	r2,4(r19)
10008690:	003fa006 	br	10008514 <__alt_data_end+0xf8008514>
10008694:	8808d0fa 	srli	r4,r17,3
10008698:	20800044 	addi	r2,r4,1
1000869c:	1085883a 	add	r2,r2,r2
100086a0:	003e9006 	br	100080e4 <__alt_data_end+0xf80080e4>

100086a4 <memchr>:
100086a4:	208000cc 	andi	r2,r4,3
100086a8:	280f883a 	mov	r7,r5
100086ac:	10003426 	beq	r2,zero,10008780 <memchr+0xdc>
100086b0:	30bfffc4 	addi	r2,r6,-1
100086b4:	30001a26 	beq	r6,zero,10008720 <memchr+0x7c>
100086b8:	20c00003 	ldbu	r3,0(r4)
100086bc:	29803fcc 	andi	r6,r5,255
100086c0:	30c0051e 	bne	r6,r3,100086d8 <memchr+0x34>
100086c4:	00001806 	br	10008728 <memchr+0x84>
100086c8:	10001526 	beq	r2,zero,10008720 <memchr+0x7c>
100086cc:	20c00003 	ldbu	r3,0(r4)
100086d0:	10bfffc4 	addi	r2,r2,-1
100086d4:	30c01426 	beq	r6,r3,10008728 <memchr+0x84>
100086d8:	21000044 	addi	r4,r4,1
100086dc:	20c000cc 	andi	r3,r4,3
100086e0:	183ff91e 	bne	r3,zero,100086c8 <__alt_data_end+0xf80086c8>
100086e4:	020000c4 	movi	r8,3
100086e8:	40801136 	bltu	r8,r2,10008730 <memchr+0x8c>
100086ec:	10000c26 	beq	r2,zero,10008720 <memchr+0x7c>
100086f0:	20c00003 	ldbu	r3,0(r4)
100086f4:	29403fcc 	andi	r5,r5,255
100086f8:	28c00b26 	beq	r5,r3,10008728 <memchr+0x84>
100086fc:	20c00044 	addi	r3,r4,1
10008700:	39803fcc 	andi	r6,r7,255
10008704:	2089883a 	add	r4,r4,r2
10008708:	00000306 	br	10008718 <memchr+0x74>
1000870c:	18c00044 	addi	r3,r3,1
10008710:	197fffc3 	ldbu	r5,-1(r3)
10008714:	31400526 	beq	r6,r5,1000872c <memchr+0x88>
10008718:	1805883a 	mov	r2,r3
1000871c:	20fffb1e 	bne	r4,r3,1000870c <__alt_data_end+0xf800870c>
10008720:	0005883a 	mov	r2,zero
10008724:	f800283a 	ret
10008728:	2005883a 	mov	r2,r4
1000872c:	f800283a 	ret
10008730:	28c03fcc 	andi	r3,r5,255
10008734:	1812923a 	slli	r9,r3,8
10008738:	02ffbff4 	movhi	r11,65279
1000873c:	02a02074 	movhi	r10,32897
10008740:	48d2b03a 	or	r9,r9,r3
10008744:	4806943a 	slli	r3,r9,16
10008748:	5affbfc4 	addi	r11,r11,-257
1000874c:	52a02004 	addi	r10,r10,-32640
10008750:	48d2b03a 	or	r9,r9,r3
10008754:	20c00017 	ldw	r3,0(r4)
10008758:	48c6f03a 	xor	r3,r9,r3
1000875c:	1acd883a 	add	r6,r3,r11
10008760:	00c6303a 	nor	r3,zero,r3
10008764:	30c6703a 	and	r3,r6,r3
10008768:	1a86703a 	and	r3,r3,r10
1000876c:	183fe01e 	bne	r3,zero,100086f0 <__alt_data_end+0xf80086f0>
10008770:	10bfff04 	addi	r2,r2,-4
10008774:	21000104 	addi	r4,r4,4
10008778:	40bff636 	bltu	r8,r2,10008754 <__alt_data_end+0xf8008754>
1000877c:	003fdb06 	br	100086ec <__alt_data_end+0xf80086ec>
10008780:	3005883a 	mov	r2,r6
10008784:	003fd706 	br	100086e4 <__alt_data_end+0xf80086e4>

10008788 <memcpy>:
10008788:	defffd04 	addi	sp,sp,-12
1000878c:	dfc00215 	stw	ra,8(sp)
10008790:	dc400115 	stw	r17,4(sp)
10008794:	dc000015 	stw	r16,0(sp)
10008798:	00c003c4 	movi	r3,15
1000879c:	2005883a 	mov	r2,r4
100087a0:	1980452e 	bgeu	r3,r6,100088b8 <memcpy+0x130>
100087a4:	2906b03a 	or	r3,r5,r4
100087a8:	18c000cc 	andi	r3,r3,3
100087ac:	1800441e 	bne	r3,zero,100088c0 <memcpy+0x138>
100087b0:	347ffc04 	addi	r17,r6,-16
100087b4:	8822d13a 	srli	r17,r17,4
100087b8:	28c00104 	addi	r3,r5,4
100087bc:	23400104 	addi	r13,r4,4
100087c0:	8820913a 	slli	r16,r17,4
100087c4:	2b000204 	addi	r12,r5,8
100087c8:	22c00204 	addi	r11,r4,8
100087cc:	84000504 	addi	r16,r16,20
100087d0:	2a800304 	addi	r10,r5,12
100087d4:	22400304 	addi	r9,r4,12
100087d8:	2c21883a 	add	r16,r5,r16
100087dc:	2811883a 	mov	r8,r5
100087e0:	200f883a 	mov	r7,r4
100087e4:	41000017 	ldw	r4,0(r8)
100087e8:	1fc00017 	ldw	ra,0(r3)
100087ec:	63c00017 	ldw	r15,0(r12)
100087f0:	39000015 	stw	r4,0(r7)
100087f4:	53800017 	ldw	r14,0(r10)
100087f8:	6fc00015 	stw	ra,0(r13)
100087fc:	5bc00015 	stw	r15,0(r11)
10008800:	4b800015 	stw	r14,0(r9)
10008804:	18c00404 	addi	r3,r3,16
10008808:	39c00404 	addi	r7,r7,16
1000880c:	42000404 	addi	r8,r8,16
10008810:	6b400404 	addi	r13,r13,16
10008814:	63000404 	addi	r12,r12,16
10008818:	5ac00404 	addi	r11,r11,16
1000881c:	52800404 	addi	r10,r10,16
10008820:	4a400404 	addi	r9,r9,16
10008824:	1c3fef1e 	bne	r3,r16,100087e4 <__alt_data_end+0xf80087e4>
10008828:	89c00044 	addi	r7,r17,1
1000882c:	380e913a 	slli	r7,r7,4
10008830:	310003cc 	andi	r4,r6,15
10008834:	02c000c4 	movi	r11,3
10008838:	11c7883a 	add	r3,r2,r7
1000883c:	29cb883a 	add	r5,r5,r7
10008840:	5900212e 	bgeu	r11,r4,100088c8 <memcpy+0x140>
10008844:	1813883a 	mov	r9,r3
10008848:	2811883a 	mov	r8,r5
1000884c:	200f883a 	mov	r7,r4
10008850:	42800017 	ldw	r10,0(r8)
10008854:	4a400104 	addi	r9,r9,4
10008858:	39ffff04 	addi	r7,r7,-4
1000885c:	4abfff15 	stw	r10,-4(r9)
10008860:	42000104 	addi	r8,r8,4
10008864:	59fffa36 	bltu	r11,r7,10008850 <__alt_data_end+0xf8008850>
10008868:	213fff04 	addi	r4,r4,-4
1000886c:	2008d0ba 	srli	r4,r4,2
10008870:	318000cc 	andi	r6,r6,3
10008874:	21000044 	addi	r4,r4,1
10008878:	2109883a 	add	r4,r4,r4
1000887c:	2109883a 	add	r4,r4,r4
10008880:	1907883a 	add	r3,r3,r4
10008884:	290b883a 	add	r5,r5,r4
10008888:	30000626 	beq	r6,zero,100088a4 <memcpy+0x11c>
1000888c:	198d883a 	add	r6,r3,r6
10008890:	29c00003 	ldbu	r7,0(r5)
10008894:	18c00044 	addi	r3,r3,1
10008898:	29400044 	addi	r5,r5,1
1000889c:	19ffffc5 	stb	r7,-1(r3)
100088a0:	19bffb1e 	bne	r3,r6,10008890 <__alt_data_end+0xf8008890>
100088a4:	dfc00217 	ldw	ra,8(sp)
100088a8:	dc400117 	ldw	r17,4(sp)
100088ac:	dc000017 	ldw	r16,0(sp)
100088b0:	dec00304 	addi	sp,sp,12
100088b4:	f800283a 	ret
100088b8:	2007883a 	mov	r3,r4
100088bc:	003ff206 	br	10008888 <__alt_data_end+0xf8008888>
100088c0:	2007883a 	mov	r3,r4
100088c4:	003ff106 	br	1000888c <__alt_data_end+0xf800888c>
100088c8:	200d883a 	mov	r6,r4
100088cc:	003fee06 	br	10008888 <__alt_data_end+0xf8008888>

100088d0 <memmove>:
100088d0:	2005883a 	mov	r2,r4
100088d4:	29000b2e 	bgeu	r5,r4,10008904 <memmove+0x34>
100088d8:	298f883a 	add	r7,r5,r6
100088dc:	21c0092e 	bgeu	r4,r7,10008904 <memmove+0x34>
100088e0:	2187883a 	add	r3,r4,r6
100088e4:	198bc83a 	sub	r5,r3,r6
100088e8:	30004826 	beq	r6,zero,10008a0c <memmove+0x13c>
100088ec:	39ffffc4 	addi	r7,r7,-1
100088f0:	39000003 	ldbu	r4,0(r7)
100088f4:	18ffffc4 	addi	r3,r3,-1
100088f8:	19000005 	stb	r4,0(r3)
100088fc:	28fffb1e 	bne	r5,r3,100088ec <__alt_data_end+0xf80088ec>
10008900:	f800283a 	ret
10008904:	00c003c4 	movi	r3,15
10008908:	1980412e 	bgeu	r3,r6,10008a10 <memmove+0x140>
1000890c:	2886b03a 	or	r3,r5,r2
10008910:	18c000cc 	andi	r3,r3,3
10008914:	1800401e 	bne	r3,zero,10008a18 <memmove+0x148>
10008918:	33fffc04 	addi	r15,r6,-16
1000891c:	781ed13a 	srli	r15,r15,4
10008920:	28c00104 	addi	r3,r5,4
10008924:	13400104 	addi	r13,r2,4
10008928:	781c913a 	slli	r14,r15,4
1000892c:	2b000204 	addi	r12,r5,8
10008930:	12c00204 	addi	r11,r2,8
10008934:	73800504 	addi	r14,r14,20
10008938:	2a800304 	addi	r10,r5,12
1000893c:	12400304 	addi	r9,r2,12
10008940:	2b9d883a 	add	r14,r5,r14
10008944:	2811883a 	mov	r8,r5
10008948:	100f883a 	mov	r7,r2
1000894c:	41000017 	ldw	r4,0(r8)
10008950:	39c00404 	addi	r7,r7,16
10008954:	18c00404 	addi	r3,r3,16
10008958:	393ffc15 	stw	r4,-16(r7)
1000895c:	193ffc17 	ldw	r4,-16(r3)
10008960:	6b400404 	addi	r13,r13,16
10008964:	5ac00404 	addi	r11,r11,16
10008968:	693ffc15 	stw	r4,-16(r13)
1000896c:	61000017 	ldw	r4,0(r12)
10008970:	4a400404 	addi	r9,r9,16
10008974:	42000404 	addi	r8,r8,16
10008978:	593ffc15 	stw	r4,-16(r11)
1000897c:	51000017 	ldw	r4,0(r10)
10008980:	63000404 	addi	r12,r12,16
10008984:	52800404 	addi	r10,r10,16
10008988:	493ffc15 	stw	r4,-16(r9)
1000898c:	1bbfef1e 	bne	r3,r14,1000894c <__alt_data_end+0xf800894c>
10008990:	79000044 	addi	r4,r15,1
10008994:	2008913a 	slli	r4,r4,4
10008998:	328003cc 	andi	r10,r6,15
1000899c:	02c000c4 	movi	r11,3
100089a0:	1107883a 	add	r3,r2,r4
100089a4:	290b883a 	add	r5,r5,r4
100089a8:	5a801e2e 	bgeu	r11,r10,10008a24 <memmove+0x154>
100089ac:	1813883a 	mov	r9,r3
100089b0:	2811883a 	mov	r8,r5
100089b4:	500f883a 	mov	r7,r10
100089b8:	41000017 	ldw	r4,0(r8)
100089bc:	4a400104 	addi	r9,r9,4
100089c0:	39ffff04 	addi	r7,r7,-4
100089c4:	493fff15 	stw	r4,-4(r9)
100089c8:	42000104 	addi	r8,r8,4
100089cc:	59fffa36 	bltu	r11,r7,100089b8 <__alt_data_end+0xf80089b8>
100089d0:	513fff04 	addi	r4,r10,-4
100089d4:	2008d0ba 	srli	r4,r4,2
100089d8:	318000cc 	andi	r6,r6,3
100089dc:	21000044 	addi	r4,r4,1
100089e0:	2109883a 	add	r4,r4,r4
100089e4:	2109883a 	add	r4,r4,r4
100089e8:	1907883a 	add	r3,r3,r4
100089ec:	290b883a 	add	r5,r5,r4
100089f0:	30000b26 	beq	r6,zero,10008a20 <memmove+0x150>
100089f4:	198d883a 	add	r6,r3,r6
100089f8:	29c00003 	ldbu	r7,0(r5)
100089fc:	18c00044 	addi	r3,r3,1
10008a00:	29400044 	addi	r5,r5,1
10008a04:	19ffffc5 	stb	r7,-1(r3)
10008a08:	19bffb1e 	bne	r3,r6,100089f8 <__alt_data_end+0xf80089f8>
10008a0c:	f800283a 	ret
10008a10:	1007883a 	mov	r3,r2
10008a14:	003ff606 	br	100089f0 <__alt_data_end+0xf80089f0>
10008a18:	1007883a 	mov	r3,r2
10008a1c:	003ff506 	br	100089f4 <__alt_data_end+0xf80089f4>
10008a20:	f800283a 	ret
10008a24:	500d883a 	mov	r6,r10
10008a28:	003ff106 	br	100089f0 <__alt_data_end+0xf80089f0>

10008a2c <memset>:
10008a2c:	20c000cc 	andi	r3,r4,3
10008a30:	2005883a 	mov	r2,r4
10008a34:	18004426 	beq	r3,zero,10008b48 <memset+0x11c>
10008a38:	31ffffc4 	addi	r7,r6,-1
10008a3c:	30004026 	beq	r6,zero,10008b40 <memset+0x114>
10008a40:	2813883a 	mov	r9,r5
10008a44:	200d883a 	mov	r6,r4
10008a48:	2007883a 	mov	r3,r4
10008a4c:	00000406 	br	10008a60 <memset+0x34>
10008a50:	3a3fffc4 	addi	r8,r7,-1
10008a54:	31800044 	addi	r6,r6,1
10008a58:	38003926 	beq	r7,zero,10008b40 <memset+0x114>
10008a5c:	400f883a 	mov	r7,r8
10008a60:	18c00044 	addi	r3,r3,1
10008a64:	32400005 	stb	r9,0(r6)
10008a68:	1a0000cc 	andi	r8,r3,3
10008a6c:	403ff81e 	bne	r8,zero,10008a50 <__alt_data_end+0xf8008a50>
10008a70:	010000c4 	movi	r4,3
10008a74:	21c02d2e 	bgeu	r4,r7,10008b2c <memset+0x100>
10008a78:	29003fcc 	andi	r4,r5,255
10008a7c:	200c923a 	slli	r6,r4,8
10008a80:	3108b03a 	or	r4,r6,r4
10008a84:	200c943a 	slli	r6,r4,16
10008a88:	218cb03a 	or	r6,r4,r6
10008a8c:	010003c4 	movi	r4,15
10008a90:	21c0182e 	bgeu	r4,r7,10008af4 <memset+0xc8>
10008a94:	3b3ffc04 	addi	r12,r7,-16
10008a98:	6018d13a 	srli	r12,r12,4
10008a9c:	1a000104 	addi	r8,r3,4
10008aa0:	1ac00204 	addi	r11,r3,8
10008aa4:	6008913a 	slli	r4,r12,4
10008aa8:	1a800304 	addi	r10,r3,12
10008aac:	1813883a 	mov	r9,r3
10008ab0:	21000504 	addi	r4,r4,20
10008ab4:	1909883a 	add	r4,r3,r4
10008ab8:	49800015 	stw	r6,0(r9)
10008abc:	41800015 	stw	r6,0(r8)
10008ac0:	59800015 	stw	r6,0(r11)
10008ac4:	51800015 	stw	r6,0(r10)
10008ac8:	42000404 	addi	r8,r8,16
10008acc:	4a400404 	addi	r9,r9,16
10008ad0:	5ac00404 	addi	r11,r11,16
10008ad4:	52800404 	addi	r10,r10,16
10008ad8:	413ff71e 	bne	r8,r4,10008ab8 <__alt_data_end+0xf8008ab8>
10008adc:	63000044 	addi	r12,r12,1
10008ae0:	6018913a 	slli	r12,r12,4
10008ae4:	39c003cc 	andi	r7,r7,15
10008ae8:	010000c4 	movi	r4,3
10008aec:	1b07883a 	add	r3,r3,r12
10008af0:	21c00e2e 	bgeu	r4,r7,10008b2c <memset+0x100>
10008af4:	1813883a 	mov	r9,r3
10008af8:	3811883a 	mov	r8,r7
10008afc:	010000c4 	movi	r4,3
10008b00:	49800015 	stw	r6,0(r9)
10008b04:	423fff04 	addi	r8,r8,-4
10008b08:	4a400104 	addi	r9,r9,4
10008b0c:	223ffc36 	bltu	r4,r8,10008b00 <__alt_data_end+0xf8008b00>
10008b10:	393fff04 	addi	r4,r7,-4
10008b14:	2008d0ba 	srli	r4,r4,2
10008b18:	39c000cc 	andi	r7,r7,3
10008b1c:	21000044 	addi	r4,r4,1
10008b20:	2109883a 	add	r4,r4,r4
10008b24:	2109883a 	add	r4,r4,r4
10008b28:	1907883a 	add	r3,r3,r4
10008b2c:	38000526 	beq	r7,zero,10008b44 <memset+0x118>
10008b30:	19cf883a 	add	r7,r3,r7
10008b34:	19400005 	stb	r5,0(r3)
10008b38:	18c00044 	addi	r3,r3,1
10008b3c:	38fffd1e 	bne	r7,r3,10008b34 <__alt_data_end+0xf8008b34>
10008b40:	f800283a 	ret
10008b44:	f800283a 	ret
10008b48:	2007883a 	mov	r3,r4
10008b4c:	300f883a 	mov	r7,r6
10008b50:	003fc706 	br	10008a70 <__alt_data_end+0xf8008a70>

10008b54 <_Balloc>:
10008b54:	20801317 	ldw	r2,76(r4)
10008b58:	defffc04 	addi	sp,sp,-16
10008b5c:	dc400115 	stw	r17,4(sp)
10008b60:	dc000015 	stw	r16,0(sp)
10008b64:	dfc00315 	stw	ra,12(sp)
10008b68:	dc800215 	stw	r18,8(sp)
10008b6c:	2023883a 	mov	r17,r4
10008b70:	2821883a 	mov	r16,r5
10008b74:	10000f26 	beq	r2,zero,10008bb4 <_Balloc+0x60>
10008b78:	8407883a 	add	r3,r16,r16
10008b7c:	18c7883a 	add	r3,r3,r3
10008b80:	10c7883a 	add	r3,r2,r3
10008b84:	18800017 	ldw	r2,0(r3)
10008b88:	10001126 	beq	r2,zero,10008bd0 <_Balloc+0x7c>
10008b8c:	11000017 	ldw	r4,0(r2)
10008b90:	19000015 	stw	r4,0(r3)
10008b94:	10000415 	stw	zero,16(r2)
10008b98:	10000315 	stw	zero,12(r2)
10008b9c:	dfc00317 	ldw	ra,12(sp)
10008ba0:	dc800217 	ldw	r18,8(sp)
10008ba4:	dc400117 	ldw	r17,4(sp)
10008ba8:	dc000017 	ldw	r16,0(sp)
10008bac:	dec00404 	addi	sp,sp,16
10008bb0:	f800283a 	ret
10008bb4:	01800844 	movi	r6,33
10008bb8:	01400104 	movi	r5,4
10008bbc:	000bbfc0 	call	1000bbfc <_calloc_r>
10008bc0:	88801315 	stw	r2,76(r17)
10008bc4:	103fec1e 	bne	r2,zero,10008b78 <__alt_data_end+0xf8008b78>
10008bc8:	0005883a 	mov	r2,zero
10008bcc:	003ff306 	br	10008b9c <__alt_data_end+0xf8008b9c>
10008bd0:	01400044 	movi	r5,1
10008bd4:	2c24983a 	sll	r18,r5,r16
10008bd8:	8809883a 	mov	r4,r17
10008bdc:	91800144 	addi	r6,r18,5
10008be0:	318d883a 	add	r6,r6,r6
10008be4:	318d883a 	add	r6,r6,r6
10008be8:	000bbfc0 	call	1000bbfc <_calloc_r>
10008bec:	103ff626 	beq	r2,zero,10008bc8 <__alt_data_end+0xf8008bc8>
10008bf0:	14000115 	stw	r16,4(r2)
10008bf4:	14800215 	stw	r18,8(r2)
10008bf8:	003fe606 	br	10008b94 <__alt_data_end+0xf8008b94>

10008bfc <_Bfree>:
10008bfc:	28000826 	beq	r5,zero,10008c20 <_Bfree+0x24>
10008c00:	28c00117 	ldw	r3,4(r5)
10008c04:	20801317 	ldw	r2,76(r4)
10008c08:	18c7883a 	add	r3,r3,r3
10008c0c:	18c7883a 	add	r3,r3,r3
10008c10:	10c5883a 	add	r2,r2,r3
10008c14:	10c00017 	ldw	r3,0(r2)
10008c18:	28c00015 	stw	r3,0(r5)
10008c1c:	11400015 	stw	r5,0(r2)
10008c20:	f800283a 	ret

10008c24 <__multadd>:
10008c24:	defff704 	addi	sp,sp,-36
10008c28:	dc800215 	stw	r18,8(sp)
10008c2c:	2c800417 	ldw	r18,16(r5)
10008c30:	dd800615 	stw	r22,24(sp)
10008c34:	dd400515 	stw	r21,20(sp)
10008c38:	dd000415 	stw	r20,16(sp)
10008c3c:	dcc00315 	stw	r19,12(sp)
10008c40:	dc400115 	stw	r17,4(sp)
10008c44:	dc000015 	stw	r16,0(sp)
10008c48:	dfc00815 	stw	ra,32(sp)
10008c4c:	ddc00715 	stw	r23,28(sp)
10008c50:	2827883a 	mov	r19,r5
10008c54:	2029883a 	mov	r20,r4
10008c58:	3023883a 	mov	r17,r6
10008c5c:	3821883a 	mov	r16,r7
10008c60:	2d400504 	addi	r21,r5,20
10008c64:	002d883a 	mov	r22,zero
10008c68:	adc00017 	ldw	r23,0(r21)
10008c6c:	880b883a 	mov	r5,r17
10008c70:	ad400104 	addi	r21,r21,4
10008c74:	b93fffcc 	andi	r4,r23,65535
10008c78:	0002b6c0 	call	10002b6c <__mulsi3>
10008c7c:	b808d43a 	srli	r4,r23,16
10008c80:	880b883a 	mov	r5,r17
10008c84:	1421883a 	add	r16,r2,r16
10008c88:	0002b6c0 	call	10002b6c <__mulsi3>
10008c8c:	800ed43a 	srli	r7,r16,16
10008c90:	80ffffcc 	andi	r3,r16,65535
10008c94:	b5800044 	addi	r22,r22,1
10008c98:	11c5883a 	add	r2,r2,r7
10008c9c:	100e943a 	slli	r7,r2,16
10008ca0:	1020d43a 	srli	r16,r2,16
10008ca4:	38c7883a 	add	r3,r7,r3
10008ca8:	a8ffff15 	stw	r3,-4(r21)
10008cac:	b4bfee16 	blt	r22,r18,10008c68 <__alt_data_end+0xf8008c68>
10008cb0:	80000926 	beq	r16,zero,10008cd8 <__multadd+0xb4>
10008cb4:	98800217 	ldw	r2,8(r19)
10008cb8:	9080130e 	bge	r18,r2,10008d08 <__multadd+0xe4>
10008cbc:	90800144 	addi	r2,r18,5
10008cc0:	1085883a 	add	r2,r2,r2
10008cc4:	1085883a 	add	r2,r2,r2
10008cc8:	9885883a 	add	r2,r19,r2
10008ccc:	14000015 	stw	r16,0(r2)
10008cd0:	94800044 	addi	r18,r18,1
10008cd4:	9c800415 	stw	r18,16(r19)
10008cd8:	9805883a 	mov	r2,r19
10008cdc:	dfc00817 	ldw	ra,32(sp)
10008ce0:	ddc00717 	ldw	r23,28(sp)
10008ce4:	dd800617 	ldw	r22,24(sp)
10008ce8:	dd400517 	ldw	r21,20(sp)
10008cec:	dd000417 	ldw	r20,16(sp)
10008cf0:	dcc00317 	ldw	r19,12(sp)
10008cf4:	dc800217 	ldw	r18,8(sp)
10008cf8:	dc400117 	ldw	r17,4(sp)
10008cfc:	dc000017 	ldw	r16,0(sp)
10008d00:	dec00904 	addi	sp,sp,36
10008d04:	f800283a 	ret
10008d08:	99400117 	ldw	r5,4(r19)
10008d0c:	a009883a 	mov	r4,r20
10008d10:	29400044 	addi	r5,r5,1
10008d14:	0008b540 	call	10008b54 <_Balloc>
10008d18:	99800417 	ldw	r6,16(r19)
10008d1c:	99400304 	addi	r5,r19,12
10008d20:	11000304 	addi	r4,r2,12
10008d24:	31800084 	addi	r6,r6,2
10008d28:	318d883a 	add	r6,r6,r6
10008d2c:	318d883a 	add	r6,r6,r6
10008d30:	1023883a 	mov	r17,r2
10008d34:	00087880 	call	10008788 <memcpy>
10008d38:	98000a26 	beq	r19,zero,10008d64 <__multadd+0x140>
10008d3c:	98c00117 	ldw	r3,4(r19)
10008d40:	a0801317 	ldw	r2,76(r20)
10008d44:	18c7883a 	add	r3,r3,r3
10008d48:	18c7883a 	add	r3,r3,r3
10008d4c:	10c5883a 	add	r2,r2,r3
10008d50:	10c00017 	ldw	r3,0(r2)
10008d54:	98c00015 	stw	r3,0(r19)
10008d58:	14c00015 	stw	r19,0(r2)
10008d5c:	8827883a 	mov	r19,r17
10008d60:	003fd606 	br	10008cbc <__alt_data_end+0xf8008cbc>
10008d64:	8827883a 	mov	r19,r17
10008d68:	003fd406 	br	10008cbc <__alt_data_end+0xf8008cbc>

10008d6c <__s2b>:
10008d6c:	defff904 	addi	sp,sp,-28
10008d70:	dc400115 	stw	r17,4(sp)
10008d74:	dc000015 	stw	r16,0(sp)
10008d78:	2023883a 	mov	r17,r4
10008d7c:	2821883a 	mov	r16,r5
10008d80:	39000204 	addi	r4,r7,8
10008d84:	01400244 	movi	r5,9
10008d88:	dcc00315 	stw	r19,12(sp)
10008d8c:	dc800215 	stw	r18,8(sp)
10008d90:	dfc00615 	stw	ra,24(sp)
10008d94:	dd400515 	stw	r21,20(sp)
10008d98:	dd000415 	stw	r20,16(sp)
10008d9c:	3825883a 	mov	r18,r7
10008da0:	3027883a 	mov	r19,r6
10008da4:	00029b80 	call	100029b8 <__divsi3>
10008da8:	00c00044 	movi	r3,1
10008dac:	000b883a 	mov	r5,zero
10008db0:	1880030e 	bge	r3,r2,10008dc0 <__s2b+0x54>
10008db4:	18c7883a 	add	r3,r3,r3
10008db8:	29400044 	addi	r5,r5,1
10008dbc:	18bffd16 	blt	r3,r2,10008db4 <__alt_data_end+0xf8008db4>
10008dc0:	8809883a 	mov	r4,r17
10008dc4:	0008b540 	call	10008b54 <_Balloc>
10008dc8:	d8c00717 	ldw	r3,28(sp)
10008dcc:	10c00515 	stw	r3,20(r2)
10008dd0:	00c00044 	movi	r3,1
10008dd4:	10c00415 	stw	r3,16(r2)
10008dd8:	00c00244 	movi	r3,9
10008ddc:	1cc0210e 	bge	r3,r19,10008e64 <__s2b+0xf8>
10008de0:	80eb883a 	add	r21,r16,r3
10008de4:	a829883a 	mov	r20,r21
10008de8:	84e1883a 	add	r16,r16,r19
10008dec:	a1c00007 	ldb	r7,0(r20)
10008df0:	01800284 	movi	r6,10
10008df4:	a5000044 	addi	r20,r20,1
10008df8:	100b883a 	mov	r5,r2
10008dfc:	39fff404 	addi	r7,r7,-48
10008e00:	8809883a 	mov	r4,r17
10008e04:	0008c240 	call	10008c24 <__multadd>
10008e08:	a43ff81e 	bne	r20,r16,10008dec <__alt_data_end+0xf8008dec>
10008e0c:	ace1883a 	add	r16,r21,r19
10008e10:	843ffe04 	addi	r16,r16,-8
10008e14:	9c800a0e 	bge	r19,r18,10008e40 <__s2b+0xd4>
10008e18:	94e5c83a 	sub	r18,r18,r19
10008e1c:	84a5883a 	add	r18,r16,r18
10008e20:	81c00007 	ldb	r7,0(r16)
10008e24:	01800284 	movi	r6,10
10008e28:	84000044 	addi	r16,r16,1
10008e2c:	100b883a 	mov	r5,r2
10008e30:	39fff404 	addi	r7,r7,-48
10008e34:	8809883a 	mov	r4,r17
10008e38:	0008c240 	call	10008c24 <__multadd>
10008e3c:	84bff81e 	bne	r16,r18,10008e20 <__alt_data_end+0xf8008e20>
10008e40:	dfc00617 	ldw	ra,24(sp)
10008e44:	dd400517 	ldw	r21,20(sp)
10008e48:	dd000417 	ldw	r20,16(sp)
10008e4c:	dcc00317 	ldw	r19,12(sp)
10008e50:	dc800217 	ldw	r18,8(sp)
10008e54:	dc400117 	ldw	r17,4(sp)
10008e58:	dc000017 	ldw	r16,0(sp)
10008e5c:	dec00704 	addi	sp,sp,28
10008e60:	f800283a 	ret
10008e64:	84000284 	addi	r16,r16,10
10008e68:	1827883a 	mov	r19,r3
10008e6c:	003fe906 	br	10008e14 <__alt_data_end+0xf8008e14>

10008e70 <__hi0bits>:
10008e70:	20bfffec 	andhi	r2,r4,65535
10008e74:	1000141e 	bne	r2,zero,10008ec8 <__hi0bits+0x58>
10008e78:	2008943a 	slli	r4,r4,16
10008e7c:	00800404 	movi	r2,16
10008e80:	20ffc02c 	andhi	r3,r4,65280
10008e84:	1800021e 	bne	r3,zero,10008e90 <__hi0bits+0x20>
10008e88:	2008923a 	slli	r4,r4,8
10008e8c:	10800204 	addi	r2,r2,8
10008e90:	20fc002c 	andhi	r3,r4,61440
10008e94:	1800021e 	bne	r3,zero,10008ea0 <__hi0bits+0x30>
10008e98:	2008913a 	slli	r4,r4,4
10008e9c:	10800104 	addi	r2,r2,4
10008ea0:	20f0002c 	andhi	r3,r4,49152
10008ea4:	1800031e 	bne	r3,zero,10008eb4 <__hi0bits+0x44>
10008ea8:	2109883a 	add	r4,r4,r4
10008eac:	10800084 	addi	r2,r2,2
10008eb0:	2109883a 	add	r4,r4,r4
10008eb4:	20000316 	blt	r4,zero,10008ec4 <__hi0bits+0x54>
10008eb8:	2110002c 	andhi	r4,r4,16384
10008ebc:	2000041e 	bne	r4,zero,10008ed0 <__hi0bits+0x60>
10008ec0:	00800804 	movi	r2,32
10008ec4:	f800283a 	ret
10008ec8:	0005883a 	mov	r2,zero
10008ecc:	003fec06 	br	10008e80 <__alt_data_end+0xf8008e80>
10008ed0:	10800044 	addi	r2,r2,1
10008ed4:	f800283a 	ret

10008ed8 <__lo0bits>:
10008ed8:	20c00017 	ldw	r3,0(r4)
10008edc:	188001cc 	andi	r2,r3,7
10008ee0:	10000826 	beq	r2,zero,10008f04 <__lo0bits+0x2c>
10008ee4:	1880004c 	andi	r2,r3,1
10008ee8:	1000211e 	bne	r2,zero,10008f70 <__lo0bits+0x98>
10008eec:	1880008c 	andi	r2,r3,2
10008ef0:	1000211e 	bne	r2,zero,10008f78 <__lo0bits+0xa0>
10008ef4:	1806d0ba 	srli	r3,r3,2
10008ef8:	00800084 	movi	r2,2
10008efc:	20c00015 	stw	r3,0(r4)
10008f00:	f800283a 	ret
10008f04:	18bfffcc 	andi	r2,r3,65535
10008f08:	10001326 	beq	r2,zero,10008f58 <__lo0bits+0x80>
10008f0c:	0005883a 	mov	r2,zero
10008f10:	19403fcc 	andi	r5,r3,255
10008f14:	2800021e 	bne	r5,zero,10008f20 <__lo0bits+0x48>
10008f18:	1806d23a 	srli	r3,r3,8
10008f1c:	10800204 	addi	r2,r2,8
10008f20:	194003cc 	andi	r5,r3,15
10008f24:	2800021e 	bne	r5,zero,10008f30 <__lo0bits+0x58>
10008f28:	1806d13a 	srli	r3,r3,4
10008f2c:	10800104 	addi	r2,r2,4
10008f30:	194000cc 	andi	r5,r3,3
10008f34:	2800021e 	bne	r5,zero,10008f40 <__lo0bits+0x68>
10008f38:	1806d0ba 	srli	r3,r3,2
10008f3c:	10800084 	addi	r2,r2,2
10008f40:	1940004c 	andi	r5,r3,1
10008f44:	2800081e 	bne	r5,zero,10008f68 <__lo0bits+0x90>
10008f48:	1806d07a 	srli	r3,r3,1
10008f4c:	1800051e 	bne	r3,zero,10008f64 <__lo0bits+0x8c>
10008f50:	00800804 	movi	r2,32
10008f54:	f800283a 	ret
10008f58:	1806d43a 	srli	r3,r3,16
10008f5c:	00800404 	movi	r2,16
10008f60:	003feb06 	br	10008f10 <__alt_data_end+0xf8008f10>
10008f64:	10800044 	addi	r2,r2,1
10008f68:	20c00015 	stw	r3,0(r4)
10008f6c:	f800283a 	ret
10008f70:	0005883a 	mov	r2,zero
10008f74:	f800283a 	ret
10008f78:	1806d07a 	srli	r3,r3,1
10008f7c:	00800044 	movi	r2,1
10008f80:	20c00015 	stw	r3,0(r4)
10008f84:	f800283a 	ret

10008f88 <__i2b>:
10008f88:	defffd04 	addi	sp,sp,-12
10008f8c:	dc000015 	stw	r16,0(sp)
10008f90:	04000044 	movi	r16,1
10008f94:	dc400115 	stw	r17,4(sp)
10008f98:	2823883a 	mov	r17,r5
10008f9c:	800b883a 	mov	r5,r16
10008fa0:	dfc00215 	stw	ra,8(sp)
10008fa4:	0008b540 	call	10008b54 <_Balloc>
10008fa8:	14400515 	stw	r17,20(r2)
10008fac:	14000415 	stw	r16,16(r2)
10008fb0:	dfc00217 	ldw	ra,8(sp)
10008fb4:	dc400117 	ldw	r17,4(sp)
10008fb8:	dc000017 	ldw	r16,0(sp)
10008fbc:	dec00304 	addi	sp,sp,12
10008fc0:	f800283a 	ret

10008fc4 <__multiply>:
10008fc4:	deffef04 	addi	sp,sp,-68
10008fc8:	dc400815 	stw	r17,32(sp)
10008fcc:	dc000715 	stw	r16,28(sp)
10008fd0:	34400417 	ldw	r17,16(r6)
10008fd4:	2c000417 	ldw	r16,16(r5)
10008fd8:	dd800d15 	stw	r22,52(sp)
10008fdc:	dc800915 	stw	r18,36(sp)
10008fe0:	dfc01015 	stw	ra,64(sp)
10008fe4:	df000f15 	stw	fp,60(sp)
10008fe8:	ddc00e15 	stw	r23,56(sp)
10008fec:	dd400c15 	stw	r21,48(sp)
10008ff0:	dd000b15 	stw	r20,44(sp)
10008ff4:	dcc00a15 	stw	r19,40(sp)
10008ff8:	2825883a 	mov	r18,r5
10008ffc:	302d883a 	mov	r22,r6
10009000:	8440050e 	bge	r16,r17,10009018 <__multiply+0x54>
10009004:	8007883a 	mov	r3,r16
10009008:	3025883a 	mov	r18,r6
1000900c:	8821883a 	mov	r16,r17
10009010:	282d883a 	mov	r22,r5
10009014:	1823883a 	mov	r17,r3
10009018:	90800217 	ldw	r2,8(r18)
1000901c:	8447883a 	add	r3,r16,r17
10009020:	d8c00215 	stw	r3,8(sp)
10009024:	91400117 	ldw	r5,4(r18)
10009028:	10c0010e 	bge	r2,r3,10009030 <__multiply+0x6c>
1000902c:	29400044 	addi	r5,r5,1
10009030:	0008b540 	call	10008b54 <_Balloc>
10009034:	d8c00217 	ldw	r3,8(sp)
10009038:	d8800615 	stw	r2,24(sp)
1000903c:	18eb883a 	add	r21,r3,r3
10009040:	ad6b883a 	add	r21,r21,r21
10009044:	10c00504 	addi	r3,r2,20
10009048:	1d6b883a 	add	r21,r3,r21
1000904c:	d8c00115 	stw	r3,4(sp)
10009050:	dd400315 	stw	r21,12(sp)
10009054:	1805883a 	mov	r2,r3
10009058:	1d40042e 	bgeu	r3,r21,1000906c <__multiply+0xa8>
1000905c:	d8c00317 	ldw	r3,12(sp)
10009060:	10000015 	stw	zero,0(r2)
10009064:	10800104 	addi	r2,r2,4
10009068:	10fffc36 	bltu	r2,r3,1000905c <__alt_data_end+0xf800905c>
1000906c:	8c63883a 	add	r17,r17,r17
10009070:	b5800504 	addi	r22,r22,20
10009074:	8c63883a 	add	r17,r17,r17
10009078:	94800504 	addi	r18,r18,20
1000907c:	8421883a 	add	r16,r16,r16
10009080:	b463883a 	add	r17,r22,r17
10009084:	8421883a 	add	r16,r16,r16
10009088:	dd800015 	stw	r22,0(sp)
1000908c:	dc800415 	stw	r18,16(sp)
10009090:	dc400515 	stw	r17,20(sp)
10009094:	9429883a 	add	r20,r18,r16
10009098:	b4404f2e 	bgeu	r22,r17,100091d8 <__multiply+0x214>
1000909c:	d8c00017 	ldw	r3,0(sp)
100090a0:	1c800017 	ldw	r18,0(r3)
100090a4:	947fffcc 	andi	r17,r18,65535
100090a8:	88001e26 	beq	r17,zero,10009124 <__multiply+0x160>
100090ac:	dd800117 	ldw	r22,4(sp)
100090b0:	dd400417 	ldw	r21,16(sp)
100090b4:	0027883a 	mov	r19,zero
100090b8:	ac800017 	ldw	r18,0(r21)
100090bc:	b4000017 	ldw	r16,0(r22)
100090c0:	880b883a 	mov	r5,r17
100090c4:	913fffcc 	andi	r4,r18,65535
100090c8:	0002b6c0 	call	10002b6c <__mulsi3>
100090cc:	9008d43a 	srli	r4,r18,16
100090d0:	84bfffcc 	andi	r18,r16,65535
100090d4:	1485883a 	add	r2,r2,r18
100090d8:	14e5883a 	add	r18,r2,r19
100090dc:	8020d43a 	srli	r16,r16,16
100090e0:	9026d43a 	srli	r19,r18,16
100090e4:	880b883a 	mov	r5,r17
100090e8:	0002b6c0 	call	10002b6c <__mulsi3>
100090ec:	1405883a 	add	r2,r2,r16
100090f0:	14e1883a 	add	r16,r2,r19
100090f4:	90ffffcc 	andi	r3,r18,65535
100090f8:	8024943a 	slli	r18,r16,16
100090fc:	ad400104 	addi	r21,r21,4
10009100:	b005883a 	mov	r2,r22
10009104:	90c6b03a 	or	r3,r18,r3
10009108:	b0c00015 	stw	r3,0(r22)
1000910c:	8026d43a 	srli	r19,r16,16
10009110:	b5800104 	addi	r22,r22,4
10009114:	ad3fe836 	bltu	r21,r20,100090b8 <__alt_data_end+0xf80090b8>
10009118:	d8c00017 	ldw	r3,0(sp)
1000911c:	14c00115 	stw	r19,4(r2)
10009120:	1c800017 	ldw	r18,0(r3)
10009124:	9024d43a 	srli	r18,r18,16
10009128:	90002226 	beq	r18,zero,100091b4 <__multiply+0x1f0>
1000912c:	d8c00117 	ldw	r3,4(sp)
10009130:	dd800417 	ldw	r22,16(sp)
10009134:	002f883a 	mov	r23,zero
10009138:	1f000017 	ldw	fp,0(r3)
1000913c:	1823883a 	mov	r17,r3
10009140:	182b883a 	mov	r21,r3
10009144:	e021883a 	mov	r16,fp
10009148:	00000106 	br	10009150 <__multiply+0x18c>
1000914c:	982b883a 	mov	r21,r19
10009150:	b100000b 	ldhu	r4,0(r22)
10009154:	8020d43a 	srli	r16,r16,16
10009158:	900b883a 	mov	r5,r18
1000915c:	0002b6c0 	call	10002b6c <__mulsi3>
10009160:	1405883a 	add	r2,r2,r16
10009164:	15ef883a 	add	r23,r2,r23
10009168:	b804943a 	slli	r2,r23,16
1000916c:	e0ffffcc 	andi	r3,fp,65535
10009170:	8c400104 	addi	r17,r17,4
10009174:	10c6b03a 	or	r3,r2,r3
10009178:	88ffff15 	stw	r3,-4(r17)
1000917c:	b5800104 	addi	r22,r22,4
10009180:	b13fff17 	ldw	r4,-4(r22)
10009184:	acc00104 	addi	r19,r21,4
10009188:	900b883a 	mov	r5,r18
1000918c:	2008d43a 	srli	r4,r4,16
10009190:	9c000017 	ldw	r16,0(r19)
10009194:	0002b6c0 	call	10002b6c <__mulsi3>
10009198:	b806d43a 	srli	r3,r23,16
1000919c:	813fffcc 	andi	r4,r16,65535
100091a0:	1105883a 	add	r2,r2,r4
100091a4:	10f9883a 	add	fp,r2,r3
100091a8:	e02ed43a 	srli	r23,fp,16
100091ac:	b53fe736 	bltu	r22,r20,1000914c <__alt_data_end+0xf800914c>
100091b0:	af000115 	stw	fp,4(r21)
100091b4:	d8c00017 	ldw	r3,0(sp)
100091b8:	d9000517 	ldw	r4,20(sp)
100091bc:	18c00104 	addi	r3,r3,4
100091c0:	d8c00015 	stw	r3,0(sp)
100091c4:	d8c00117 	ldw	r3,4(sp)
100091c8:	18c00104 	addi	r3,r3,4
100091cc:	d8c00115 	stw	r3,4(sp)
100091d0:	d8c00017 	ldw	r3,0(sp)
100091d4:	193fb136 	bltu	r3,r4,1000909c <__alt_data_end+0xf800909c>
100091d8:	d8c00217 	ldw	r3,8(sp)
100091dc:	00c00c0e 	bge	zero,r3,10009210 <__multiply+0x24c>
100091e0:	d8c00317 	ldw	r3,12(sp)
100091e4:	18bfff17 	ldw	r2,-4(r3)
100091e8:	1d7fff04 	addi	r21,r3,-4
100091ec:	10000326 	beq	r2,zero,100091fc <__multiply+0x238>
100091f0:	00000706 	br	10009210 <__multiply+0x24c>
100091f4:	a8800017 	ldw	r2,0(r21)
100091f8:	1000051e 	bne	r2,zero,10009210 <__multiply+0x24c>
100091fc:	d8c00217 	ldw	r3,8(sp)
10009200:	ad7fff04 	addi	r21,r21,-4
10009204:	18ffffc4 	addi	r3,r3,-1
10009208:	d8c00215 	stw	r3,8(sp)
1000920c:	183ff91e 	bne	r3,zero,100091f4 <__alt_data_end+0xf80091f4>
10009210:	d8c00617 	ldw	r3,24(sp)
10009214:	d9000217 	ldw	r4,8(sp)
10009218:	1805883a 	mov	r2,r3
1000921c:	19000415 	stw	r4,16(r3)
10009220:	dfc01017 	ldw	ra,64(sp)
10009224:	df000f17 	ldw	fp,60(sp)
10009228:	ddc00e17 	ldw	r23,56(sp)
1000922c:	dd800d17 	ldw	r22,52(sp)
10009230:	dd400c17 	ldw	r21,48(sp)
10009234:	dd000b17 	ldw	r20,44(sp)
10009238:	dcc00a17 	ldw	r19,40(sp)
1000923c:	dc800917 	ldw	r18,36(sp)
10009240:	dc400817 	ldw	r17,32(sp)
10009244:	dc000717 	ldw	r16,28(sp)
10009248:	dec01104 	addi	sp,sp,68
1000924c:	f800283a 	ret

10009250 <__pow5mult>:
10009250:	defffa04 	addi	sp,sp,-24
10009254:	dcc00315 	stw	r19,12(sp)
10009258:	dc000015 	stw	r16,0(sp)
1000925c:	dfc00515 	stw	ra,20(sp)
10009260:	dd000415 	stw	r20,16(sp)
10009264:	dc800215 	stw	r18,8(sp)
10009268:	dc400115 	stw	r17,4(sp)
1000926c:	308000cc 	andi	r2,r6,3
10009270:	3021883a 	mov	r16,r6
10009274:	2027883a 	mov	r19,r4
10009278:	10002f1e 	bne	r2,zero,10009338 <__pow5mult+0xe8>
1000927c:	2825883a 	mov	r18,r5
10009280:	8021d0ba 	srai	r16,r16,2
10009284:	80001a26 	beq	r16,zero,100092f0 <__pow5mult+0xa0>
10009288:	9c401217 	ldw	r17,72(r19)
1000928c:	8800061e 	bne	r17,zero,100092a8 <__pow5mult+0x58>
10009290:	00003406 	br	10009364 <__pow5mult+0x114>
10009294:	8021d07a 	srai	r16,r16,1
10009298:	80001526 	beq	r16,zero,100092f0 <__pow5mult+0xa0>
1000929c:	88800017 	ldw	r2,0(r17)
100092a0:	10001c26 	beq	r2,zero,10009314 <__pow5mult+0xc4>
100092a4:	1023883a 	mov	r17,r2
100092a8:	8080004c 	andi	r2,r16,1
100092ac:	103ff926 	beq	r2,zero,10009294 <__alt_data_end+0xf8009294>
100092b0:	880d883a 	mov	r6,r17
100092b4:	900b883a 	mov	r5,r18
100092b8:	9809883a 	mov	r4,r19
100092bc:	0008fc40 	call	10008fc4 <__multiply>
100092c0:	90001b26 	beq	r18,zero,10009330 <__pow5mult+0xe0>
100092c4:	91000117 	ldw	r4,4(r18)
100092c8:	98c01317 	ldw	r3,76(r19)
100092cc:	8021d07a 	srai	r16,r16,1
100092d0:	2109883a 	add	r4,r4,r4
100092d4:	2109883a 	add	r4,r4,r4
100092d8:	1907883a 	add	r3,r3,r4
100092dc:	19000017 	ldw	r4,0(r3)
100092e0:	91000015 	stw	r4,0(r18)
100092e4:	1c800015 	stw	r18,0(r3)
100092e8:	1025883a 	mov	r18,r2
100092ec:	803feb1e 	bne	r16,zero,1000929c <__alt_data_end+0xf800929c>
100092f0:	9005883a 	mov	r2,r18
100092f4:	dfc00517 	ldw	ra,20(sp)
100092f8:	dd000417 	ldw	r20,16(sp)
100092fc:	dcc00317 	ldw	r19,12(sp)
10009300:	dc800217 	ldw	r18,8(sp)
10009304:	dc400117 	ldw	r17,4(sp)
10009308:	dc000017 	ldw	r16,0(sp)
1000930c:	dec00604 	addi	sp,sp,24
10009310:	f800283a 	ret
10009314:	880d883a 	mov	r6,r17
10009318:	880b883a 	mov	r5,r17
1000931c:	9809883a 	mov	r4,r19
10009320:	0008fc40 	call	10008fc4 <__multiply>
10009324:	88800015 	stw	r2,0(r17)
10009328:	10000015 	stw	zero,0(r2)
1000932c:	003fdd06 	br	100092a4 <__alt_data_end+0xf80092a4>
10009330:	1025883a 	mov	r18,r2
10009334:	003fd706 	br	10009294 <__alt_data_end+0xf8009294>
10009338:	10bfffc4 	addi	r2,r2,-1
1000933c:	1085883a 	add	r2,r2,r2
10009340:	00c40074 	movhi	r3,4097
10009344:	18ca5604 	addi	r3,r3,10584
10009348:	1085883a 	add	r2,r2,r2
1000934c:	1885883a 	add	r2,r3,r2
10009350:	11800017 	ldw	r6,0(r2)
10009354:	000f883a 	mov	r7,zero
10009358:	0008c240 	call	10008c24 <__multadd>
1000935c:	1025883a 	mov	r18,r2
10009360:	003fc706 	br	10009280 <__alt_data_end+0xf8009280>
10009364:	05000044 	movi	r20,1
10009368:	a00b883a 	mov	r5,r20
1000936c:	9809883a 	mov	r4,r19
10009370:	0008b540 	call	10008b54 <_Balloc>
10009374:	1023883a 	mov	r17,r2
10009378:	00809c44 	movi	r2,625
1000937c:	88800515 	stw	r2,20(r17)
10009380:	8d000415 	stw	r20,16(r17)
10009384:	9c401215 	stw	r17,72(r19)
10009388:	88000015 	stw	zero,0(r17)
1000938c:	003fc606 	br	100092a8 <__alt_data_end+0xf80092a8>

10009390 <__lshift>:
10009390:	defff904 	addi	sp,sp,-28
10009394:	dd400515 	stw	r21,20(sp)
10009398:	dcc00315 	stw	r19,12(sp)
1000939c:	302bd17a 	srai	r21,r6,5
100093a0:	2cc00417 	ldw	r19,16(r5)
100093a4:	28800217 	ldw	r2,8(r5)
100093a8:	dd000415 	stw	r20,16(sp)
100093ac:	ace7883a 	add	r19,r21,r19
100093b0:	dc800215 	stw	r18,8(sp)
100093b4:	dc400115 	stw	r17,4(sp)
100093b8:	dc000015 	stw	r16,0(sp)
100093bc:	dfc00615 	stw	ra,24(sp)
100093c0:	9c000044 	addi	r16,r19,1
100093c4:	2823883a 	mov	r17,r5
100093c8:	3029883a 	mov	r20,r6
100093cc:	2025883a 	mov	r18,r4
100093d0:	29400117 	ldw	r5,4(r5)
100093d4:	1400030e 	bge	r2,r16,100093e4 <__lshift+0x54>
100093d8:	1085883a 	add	r2,r2,r2
100093dc:	29400044 	addi	r5,r5,1
100093e0:	143ffd16 	blt	r2,r16,100093d8 <__alt_data_end+0xf80093d8>
100093e4:	9009883a 	mov	r4,r18
100093e8:	0008b540 	call	10008b54 <_Balloc>
100093ec:	10c00504 	addi	r3,r2,20
100093f0:	0540070e 	bge	zero,r21,10009410 <__lshift+0x80>
100093f4:	ad6b883a 	add	r21,r21,r21
100093f8:	ad6b883a 	add	r21,r21,r21
100093fc:	1809883a 	mov	r4,r3
10009400:	1d47883a 	add	r3,r3,r21
10009404:	20000015 	stw	zero,0(r4)
10009408:	21000104 	addi	r4,r4,4
1000940c:	193ffd1e 	bne	r3,r4,10009404 <__alt_data_end+0xf8009404>
10009410:	8a000417 	ldw	r8,16(r17)
10009414:	89000504 	addi	r4,r17,20
10009418:	a18007cc 	andi	r6,r20,31
1000941c:	4211883a 	add	r8,r8,r8
10009420:	4211883a 	add	r8,r8,r8
10009424:	2211883a 	add	r8,r4,r8
10009428:	30002326 	beq	r6,zero,100094b8 <__lshift+0x128>
1000942c:	02400804 	movi	r9,32
10009430:	4993c83a 	sub	r9,r9,r6
10009434:	000b883a 	mov	r5,zero
10009438:	21c00017 	ldw	r7,0(r4)
1000943c:	1815883a 	mov	r10,r3
10009440:	18c00104 	addi	r3,r3,4
10009444:	398e983a 	sll	r7,r7,r6
10009448:	21000104 	addi	r4,r4,4
1000944c:	394ab03a 	or	r5,r7,r5
10009450:	197fff15 	stw	r5,-4(r3)
10009454:	217fff17 	ldw	r5,-4(r4)
10009458:	2a4ad83a 	srl	r5,r5,r9
1000945c:	223ff636 	bltu	r4,r8,10009438 <__alt_data_end+0xf8009438>
10009460:	51400115 	stw	r5,4(r10)
10009464:	28001a1e 	bne	r5,zero,100094d0 <__lshift+0x140>
10009468:	843fffc4 	addi	r16,r16,-1
1000946c:	14000415 	stw	r16,16(r2)
10009470:	88000826 	beq	r17,zero,10009494 <__lshift+0x104>
10009474:	89000117 	ldw	r4,4(r17)
10009478:	90c01317 	ldw	r3,76(r18)
1000947c:	2109883a 	add	r4,r4,r4
10009480:	2109883a 	add	r4,r4,r4
10009484:	1907883a 	add	r3,r3,r4
10009488:	19000017 	ldw	r4,0(r3)
1000948c:	89000015 	stw	r4,0(r17)
10009490:	1c400015 	stw	r17,0(r3)
10009494:	dfc00617 	ldw	ra,24(sp)
10009498:	dd400517 	ldw	r21,20(sp)
1000949c:	dd000417 	ldw	r20,16(sp)
100094a0:	dcc00317 	ldw	r19,12(sp)
100094a4:	dc800217 	ldw	r18,8(sp)
100094a8:	dc400117 	ldw	r17,4(sp)
100094ac:	dc000017 	ldw	r16,0(sp)
100094b0:	dec00704 	addi	sp,sp,28
100094b4:	f800283a 	ret
100094b8:	21400017 	ldw	r5,0(r4)
100094bc:	18c00104 	addi	r3,r3,4
100094c0:	21000104 	addi	r4,r4,4
100094c4:	197fff15 	stw	r5,-4(r3)
100094c8:	223ffb36 	bltu	r4,r8,100094b8 <__alt_data_end+0xf80094b8>
100094cc:	003fe606 	br	10009468 <__alt_data_end+0xf8009468>
100094d0:	9c000084 	addi	r16,r19,2
100094d4:	003fe406 	br	10009468 <__alt_data_end+0xf8009468>

100094d8 <__mcmp>:
100094d8:	20800417 	ldw	r2,16(r4)
100094dc:	28c00417 	ldw	r3,16(r5)
100094e0:	10c5c83a 	sub	r2,r2,r3
100094e4:	1000111e 	bne	r2,zero,1000952c <__mcmp+0x54>
100094e8:	18c7883a 	add	r3,r3,r3
100094ec:	18c7883a 	add	r3,r3,r3
100094f0:	21000504 	addi	r4,r4,20
100094f4:	29400504 	addi	r5,r5,20
100094f8:	20c5883a 	add	r2,r4,r3
100094fc:	28cb883a 	add	r5,r5,r3
10009500:	00000106 	br	10009508 <__mcmp+0x30>
10009504:	20800a2e 	bgeu	r4,r2,10009530 <__mcmp+0x58>
10009508:	10bfff04 	addi	r2,r2,-4
1000950c:	297fff04 	addi	r5,r5,-4
10009510:	11800017 	ldw	r6,0(r2)
10009514:	28c00017 	ldw	r3,0(r5)
10009518:	30fffa26 	beq	r6,r3,10009504 <__alt_data_end+0xf8009504>
1000951c:	30c00236 	bltu	r6,r3,10009528 <__mcmp+0x50>
10009520:	00800044 	movi	r2,1
10009524:	f800283a 	ret
10009528:	00bfffc4 	movi	r2,-1
1000952c:	f800283a 	ret
10009530:	0005883a 	mov	r2,zero
10009534:	f800283a 	ret

10009538 <__mdiff>:
10009538:	28c00417 	ldw	r3,16(r5)
1000953c:	30800417 	ldw	r2,16(r6)
10009540:	defffa04 	addi	sp,sp,-24
10009544:	dcc00315 	stw	r19,12(sp)
10009548:	dc800215 	stw	r18,8(sp)
1000954c:	dfc00515 	stw	ra,20(sp)
10009550:	dd000415 	stw	r20,16(sp)
10009554:	dc400115 	stw	r17,4(sp)
10009558:	dc000015 	stw	r16,0(sp)
1000955c:	1887c83a 	sub	r3,r3,r2
10009560:	2825883a 	mov	r18,r5
10009564:	3027883a 	mov	r19,r6
10009568:	1800141e 	bne	r3,zero,100095bc <__mdiff+0x84>
1000956c:	1085883a 	add	r2,r2,r2
10009570:	1085883a 	add	r2,r2,r2
10009574:	2a000504 	addi	r8,r5,20
10009578:	34000504 	addi	r16,r6,20
1000957c:	4087883a 	add	r3,r8,r2
10009580:	8085883a 	add	r2,r16,r2
10009584:	00000106 	br	1000958c <__mdiff+0x54>
10009588:	40c0592e 	bgeu	r8,r3,100096f0 <__mdiff+0x1b8>
1000958c:	18ffff04 	addi	r3,r3,-4
10009590:	10bfff04 	addi	r2,r2,-4
10009594:	19c00017 	ldw	r7,0(r3)
10009598:	11400017 	ldw	r5,0(r2)
1000959c:	397ffa26 	beq	r7,r5,10009588 <__alt_data_end+0xf8009588>
100095a0:	3940592e 	bgeu	r7,r5,10009708 <__mdiff+0x1d0>
100095a4:	9005883a 	mov	r2,r18
100095a8:	4023883a 	mov	r17,r8
100095ac:	9825883a 	mov	r18,r19
100095b0:	05000044 	movi	r20,1
100095b4:	1027883a 	mov	r19,r2
100095b8:	00000406 	br	100095cc <__mdiff+0x94>
100095bc:	18005616 	blt	r3,zero,10009718 <__mdiff+0x1e0>
100095c0:	34400504 	addi	r17,r6,20
100095c4:	2c000504 	addi	r16,r5,20
100095c8:	0029883a 	mov	r20,zero
100095cc:	91400117 	ldw	r5,4(r18)
100095d0:	0008b540 	call	10008b54 <_Balloc>
100095d4:	92400417 	ldw	r9,16(r18)
100095d8:	9b000417 	ldw	r12,16(r19)
100095dc:	12c00504 	addi	r11,r2,20
100095e0:	4a51883a 	add	r8,r9,r9
100095e4:	6319883a 	add	r12,r12,r12
100095e8:	4211883a 	add	r8,r8,r8
100095ec:	6319883a 	add	r12,r12,r12
100095f0:	15000315 	stw	r20,12(r2)
100095f4:	8211883a 	add	r8,r16,r8
100095f8:	8b19883a 	add	r12,r17,r12
100095fc:	0007883a 	mov	r3,zero
10009600:	81400017 	ldw	r5,0(r16)
10009604:	89c00017 	ldw	r7,0(r17)
10009608:	59800104 	addi	r6,r11,4
1000960c:	293fffcc 	andi	r4,r5,65535
10009610:	20c7883a 	add	r3,r4,r3
10009614:	393fffcc 	andi	r4,r7,65535
10009618:	1909c83a 	sub	r4,r3,r4
1000961c:	280ad43a 	srli	r5,r5,16
10009620:	380ed43a 	srli	r7,r7,16
10009624:	2007d43a 	srai	r3,r4,16
10009628:	213fffcc 	andi	r4,r4,65535
1000962c:	29cbc83a 	sub	r5,r5,r7
10009630:	28c7883a 	add	r3,r5,r3
10009634:	180a943a 	slli	r5,r3,16
10009638:	8c400104 	addi	r17,r17,4
1000963c:	84000104 	addi	r16,r16,4
10009640:	2908b03a 	or	r4,r5,r4
10009644:	59000015 	stw	r4,0(r11)
10009648:	1807d43a 	srai	r3,r3,16
1000964c:	3015883a 	mov	r10,r6
10009650:	3017883a 	mov	r11,r6
10009654:	8b3fea36 	bltu	r17,r12,10009600 <__alt_data_end+0xf8009600>
10009658:	8200162e 	bgeu	r16,r8,100096b4 <__mdiff+0x17c>
1000965c:	8017883a 	mov	r11,r16
10009660:	59400017 	ldw	r5,0(r11)
10009664:	31800104 	addi	r6,r6,4
10009668:	5ac00104 	addi	r11,r11,4
1000966c:	293fffcc 	andi	r4,r5,65535
10009670:	20c7883a 	add	r3,r4,r3
10009674:	280ed43a 	srli	r7,r5,16
10009678:	180bd43a 	srai	r5,r3,16
1000967c:	193fffcc 	andi	r4,r3,65535
10009680:	3947883a 	add	r3,r7,r5
10009684:	180a943a 	slli	r5,r3,16
10009688:	1807d43a 	srai	r3,r3,16
1000968c:	2908b03a 	or	r4,r5,r4
10009690:	313fff15 	stw	r4,-4(r6)
10009694:	5a3ff236 	bltu	r11,r8,10009660 <__alt_data_end+0xf8009660>
10009698:	0406303a 	nor	r3,zero,r16
1000969c:	1a07883a 	add	r3,r3,r8
100096a0:	1806d0ba 	srli	r3,r3,2
100096a4:	18c00044 	addi	r3,r3,1
100096a8:	18c7883a 	add	r3,r3,r3
100096ac:	18c7883a 	add	r3,r3,r3
100096b0:	50d5883a 	add	r10,r10,r3
100096b4:	50ffff04 	addi	r3,r10,-4
100096b8:	2000041e 	bne	r4,zero,100096cc <__mdiff+0x194>
100096bc:	18ffff04 	addi	r3,r3,-4
100096c0:	19000017 	ldw	r4,0(r3)
100096c4:	4a7fffc4 	addi	r9,r9,-1
100096c8:	203ffc26 	beq	r4,zero,100096bc <__alt_data_end+0xf80096bc>
100096cc:	12400415 	stw	r9,16(r2)
100096d0:	dfc00517 	ldw	ra,20(sp)
100096d4:	dd000417 	ldw	r20,16(sp)
100096d8:	dcc00317 	ldw	r19,12(sp)
100096dc:	dc800217 	ldw	r18,8(sp)
100096e0:	dc400117 	ldw	r17,4(sp)
100096e4:	dc000017 	ldw	r16,0(sp)
100096e8:	dec00604 	addi	sp,sp,24
100096ec:	f800283a 	ret
100096f0:	000b883a 	mov	r5,zero
100096f4:	0008b540 	call	10008b54 <_Balloc>
100096f8:	00c00044 	movi	r3,1
100096fc:	10c00415 	stw	r3,16(r2)
10009700:	10000515 	stw	zero,20(r2)
10009704:	003ff206 	br	100096d0 <__alt_data_end+0xf80096d0>
10009708:	8023883a 	mov	r17,r16
1000970c:	0029883a 	mov	r20,zero
10009710:	4021883a 	mov	r16,r8
10009714:	003fad06 	br	100095cc <__alt_data_end+0xf80095cc>
10009718:	9005883a 	mov	r2,r18
1000971c:	94400504 	addi	r17,r18,20
10009720:	9c000504 	addi	r16,r19,20
10009724:	9825883a 	mov	r18,r19
10009728:	05000044 	movi	r20,1
1000972c:	1027883a 	mov	r19,r2
10009730:	003fa606 	br	100095cc <__alt_data_end+0xf80095cc>

10009734 <__ulp>:
10009734:	295ffc2c 	andhi	r5,r5,32752
10009738:	00bf3034 	movhi	r2,64704
1000973c:	2887883a 	add	r3,r5,r2
10009740:	00c0020e 	bge	zero,r3,1000974c <__ulp+0x18>
10009744:	0005883a 	mov	r2,zero
10009748:	f800283a 	ret
1000974c:	00c7c83a 	sub	r3,zero,r3
10009750:	1807d53a 	srai	r3,r3,20
10009754:	008004c4 	movi	r2,19
10009758:	10c00b0e 	bge	r2,r3,10009788 <__ulp+0x54>
1000975c:	18bffb04 	addi	r2,r3,-20
10009760:	01000784 	movi	r4,30
10009764:	0007883a 	mov	r3,zero
10009768:	20800516 	blt	r4,r2,10009780 <__ulp+0x4c>
1000976c:	010007c4 	movi	r4,31
10009770:	2089c83a 	sub	r4,r4,r2
10009774:	00800044 	movi	r2,1
10009778:	1104983a 	sll	r2,r2,r4
1000977c:	f800283a 	ret
10009780:	00800044 	movi	r2,1
10009784:	f800283a 	ret
10009788:	01400234 	movhi	r5,8
1000978c:	28c7d83a 	sra	r3,r5,r3
10009790:	0005883a 	mov	r2,zero
10009794:	f800283a 	ret

10009798 <__b2d>:
10009798:	defffa04 	addi	sp,sp,-24
1000979c:	dc000015 	stw	r16,0(sp)
100097a0:	24000417 	ldw	r16,16(r4)
100097a4:	dc400115 	stw	r17,4(sp)
100097a8:	24400504 	addi	r17,r4,20
100097ac:	8421883a 	add	r16,r16,r16
100097b0:	8421883a 	add	r16,r16,r16
100097b4:	8c21883a 	add	r16,r17,r16
100097b8:	dc800215 	stw	r18,8(sp)
100097bc:	84bfff17 	ldw	r18,-4(r16)
100097c0:	dd000415 	stw	r20,16(sp)
100097c4:	dcc00315 	stw	r19,12(sp)
100097c8:	9009883a 	mov	r4,r18
100097cc:	2829883a 	mov	r20,r5
100097d0:	dfc00515 	stw	ra,20(sp)
100097d4:	0008e700 	call	10008e70 <__hi0bits>
100097d8:	00c00804 	movi	r3,32
100097dc:	1889c83a 	sub	r4,r3,r2
100097e0:	a1000015 	stw	r4,0(r20)
100097e4:	01000284 	movi	r4,10
100097e8:	84ffff04 	addi	r19,r16,-4
100097ec:	20801216 	blt	r4,r2,10009838 <__b2d+0xa0>
100097f0:	018002c4 	movi	r6,11
100097f4:	308dc83a 	sub	r6,r6,r2
100097f8:	9186d83a 	srl	r3,r18,r6
100097fc:	18cffc34 	orhi	r3,r3,16368
10009800:	8cc0212e 	bgeu	r17,r19,10009888 <__b2d+0xf0>
10009804:	813ffe17 	ldw	r4,-8(r16)
10009808:	218cd83a 	srl	r6,r4,r6
1000980c:	10800544 	addi	r2,r2,21
10009810:	9084983a 	sll	r2,r18,r2
10009814:	1184b03a 	or	r2,r2,r6
10009818:	dfc00517 	ldw	ra,20(sp)
1000981c:	dd000417 	ldw	r20,16(sp)
10009820:	dcc00317 	ldw	r19,12(sp)
10009824:	dc800217 	ldw	r18,8(sp)
10009828:	dc400117 	ldw	r17,4(sp)
1000982c:	dc000017 	ldw	r16,0(sp)
10009830:	dec00604 	addi	sp,sp,24
10009834:	f800283a 	ret
10009838:	8cc00f2e 	bgeu	r17,r19,10009878 <__b2d+0xe0>
1000983c:	117ffd44 	addi	r5,r2,-11
10009840:	80bffe17 	ldw	r2,-8(r16)
10009844:	28000e26 	beq	r5,zero,10009880 <__b2d+0xe8>
10009848:	1949c83a 	sub	r4,r3,r5
1000984c:	9164983a 	sll	r18,r18,r5
10009850:	1106d83a 	srl	r3,r2,r4
10009854:	81bffe04 	addi	r6,r16,-8
10009858:	948ffc34 	orhi	r18,r18,16368
1000985c:	90c6b03a 	or	r3,r18,r3
10009860:	89800e2e 	bgeu	r17,r6,1000989c <__b2d+0x104>
10009864:	81bffd17 	ldw	r6,-12(r16)
10009868:	1144983a 	sll	r2,r2,r5
1000986c:	310ad83a 	srl	r5,r6,r4
10009870:	2884b03a 	or	r2,r5,r2
10009874:	003fe806 	br	10009818 <__alt_data_end+0xf8009818>
10009878:	10bffd44 	addi	r2,r2,-11
1000987c:	1000041e 	bne	r2,zero,10009890 <__b2d+0xf8>
10009880:	90cffc34 	orhi	r3,r18,16368
10009884:	003fe406 	br	10009818 <__alt_data_end+0xf8009818>
10009888:	000d883a 	mov	r6,zero
1000988c:	003fdf06 	br	1000980c <__alt_data_end+0xf800980c>
10009890:	90a4983a 	sll	r18,r18,r2
10009894:	0005883a 	mov	r2,zero
10009898:	003ff906 	br	10009880 <__alt_data_end+0xf8009880>
1000989c:	1144983a 	sll	r2,r2,r5
100098a0:	003fdd06 	br	10009818 <__alt_data_end+0xf8009818>

100098a4 <__d2b>:
100098a4:	defff804 	addi	sp,sp,-32
100098a8:	dc000215 	stw	r16,8(sp)
100098ac:	3021883a 	mov	r16,r6
100098b0:	dc400315 	stw	r17,12(sp)
100098b4:	8022907a 	slli	r17,r16,1
100098b8:	dd000615 	stw	r20,24(sp)
100098bc:	2829883a 	mov	r20,r5
100098c0:	01400044 	movi	r5,1
100098c4:	dcc00515 	stw	r19,20(sp)
100098c8:	dc800415 	stw	r18,16(sp)
100098cc:	dfc00715 	stw	ra,28(sp)
100098d0:	3825883a 	mov	r18,r7
100098d4:	8822d57a 	srli	r17,r17,21
100098d8:	0008b540 	call	10008b54 <_Balloc>
100098dc:	1027883a 	mov	r19,r2
100098e0:	00800434 	movhi	r2,16
100098e4:	10bfffc4 	addi	r2,r2,-1
100098e8:	808c703a 	and	r6,r16,r2
100098ec:	88000126 	beq	r17,zero,100098f4 <__d2b+0x50>
100098f0:	31800434 	orhi	r6,r6,16
100098f4:	d9800015 	stw	r6,0(sp)
100098f8:	a0002426 	beq	r20,zero,1000998c <__d2b+0xe8>
100098fc:	d9000104 	addi	r4,sp,4
10009900:	dd000115 	stw	r20,4(sp)
10009904:	0008ed80 	call	10008ed8 <__lo0bits>
10009908:	d8c00017 	ldw	r3,0(sp)
1000990c:	10002f1e 	bne	r2,zero,100099cc <__d2b+0x128>
10009910:	d9000117 	ldw	r4,4(sp)
10009914:	99000515 	stw	r4,20(r19)
10009918:	1821003a 	cmpeq	r16,r3,zero
1000991c:	01000084 	movi	r4,2
10009920:	2421c83a 	sub	r16,r4,r16
10009924:	98c00615 	stw	r3,24(r19)
10009928:	9c000415 	stw	r16,16(r19)
1000992c:	88001f1e 	bne	r17,zero,100099ac <__d2b+0x108>
10009930:	10bef384 	addi	r2,r2,-1074
10009934:	90800015 	stw	r2,0(r18)
10009938:	00900034 	movhi	r2,16384
1000993c:	10bfffc4 	addi	r2,r2,-1
10009940:	8085883a 	add	r2,r16,r2
10009944:	1085883a 	add	r2,r2,r2
10009948:	1085883a 	add	r2,r2,r2
1000994c:	9885883a 	add	r2,r19,r2
10009950:	11000517 	ldw	r4,20(r2)
10009954:	8020917a 	slli	r16,r16,5
10009958:	0008e700 	call	10008e70 <__hi0bits>
1000995c:	d8c00817 	ldw	r3,32(sp)
10009960:	8085c83a 	sub	r2,r16,r2
10009964:	18800015 	stw	r2,0(r3)
10009968:	9805883a 	mov	r2,r19
1000996c:	dfc00717 	ldw	ra,28(sp)
10009970:	dd000617 	ldw	r20,24(sp)
10009974:	dcc00517 	ldw	r19,20(sp)
10009978:	dc800417 	ldw	r18,16(sp)
1000997c:	dc400317 	ldw	r17,12(sp)
10009980:	dc000217 	ldw	r16,8(sp)
10009984:	dec00804 	addi	sp,sp,32
10009988:	f800283a 	ret
1000998c:	d809883a 	mov	r4,sp
10009990:	0008ed80 	call	10008ed8 <__lo0bits>
10009994:	d8c00017 	ldw	r3,0(sp)
10009998:	04000044 	movi	r16,1
1000999c:	9c000415 	stw	r16,16(r19)
100099a0:	98c00515 	stw	r3,20(r19)
100099a4:	10800804 	addi	r2,r2,32
100099a8:	883fe126 	beq	r17,zero,10009930 <__alt_data_end+0xf8009930>
100099ac:	00c00d44 	movi	r3,53
100099b0:	8c7ef344 	addi	r17,r17,-1075
100099b4:	88a3883a 	add	r17,r17,r2
100099b8:	1885c83a 	sub	r2,r3,r2
100099bc:	d8c00817 	ldw	r3,32(sp)
100099c0:	94400015 	stw	r17,0(r18)
100099c4:	18800015 	stw	r2,0(r3)
100099c8:	003fe706 	br	10009968 <__alt_data_end+0xf8009968>
100099cc:	01000804 	movi	r4,32
100099d0:	2089c83a 	sub	r4,r4,r2
100099d4:	1908983a 	sll	r4,r3,r4
100099d8:	d9400117 	ldw	r5,4(sp)
100099dc:	1886d83a 	srl	r3,r3,r2
100099e0:	2148b03a 	or	r4,r4,r5
100099e4:	99000515 	stw	r4,20(r19)
100099e8:	d8c00015 	stw	r3,0(sp)
100099ec:	003fca06 	br	10009918 <__alt_data_end+0xf8009918>

100099f0 <__ratio>:
100099f0:	defff904 	addi	sp,sp,-28
100099f4:	dc400315 	stw	r17,12(sp)
100099f8:	2823883a 	mov	r17,r5
100099fc:	d9400104 	addi	r5,sp,4
10009a00:	dfc00615 	stw	ra,24(sp)
10009a04:	dcc00515 	stw	r19,20(sp)
10009a08:	dc800415 	stw	r18,16(sp)
10009a0c:	2027883a 	mov	r19,r4
10009a10:	dc000215 	stw	r16,8(sp)
10009a14:	00097980 	call	10009798 <__b2d>
10009a18:	d80b883a 	mov	r5,sp
10009a1c:	8809883a 	mov	r4,r17
10009a20:	1025883a 	mov	r18,r2
10009a24:	1821883a 	mov	r16,r3
10009a28:	00097980 	call	10009798 <__b2d>
10009a2c:	8a000417 	ldw	r8,16(r17)
10009a30:	99000417 	ldw	r4,16(r19)
10009a34:	d9400117 	ldw	r5,4(sp)
10009a38:	2209c83a 	sub	r4,r4,r8
10009a3c:	2010917a 	slli	r8,r4,5
10009a40:	d9000017 	ldw	r4,0(sp)
10009a44:	2909c83a 	sub	r4,r5,r4
10009a48:	4109883a 	add	r4,r8,r4
10009a4c:	01000e0e 	bge	zero,r4,10009a88 <__ratio+0x98>
10009a50:	2008953a 	slli	r4,r4,20
10009a54:	2421883a 	add	r16,r4,r16
10009a58:	100d883a 	mov	r6,r2
10009a5c:	180f883a 	mov	r7,r3
10009a60:	9009883a 	mov	r4,r18
10009a64:	800b883a 	mov	r5,r16
10009a68:	000d9000 	call	1000d900 <__divdf3>
10009a6c:	dfc00617 	ldw	ra,24(sp)
10009a70:	dcc00517 	ldw	r19,20(sp)
10009a74:	dc800417 	ldw	r18,16(sp)
10009a78:	dc400317 	ldw	r17,12(sp)
10009a7c:	dc000217 	ldw	r16,8(sp)
10009a80:	dec00704 	addi	sp,sp,28
10009a84:	f800283a 	ret
10009a88:	2008953a 	slli	r4,r4,20
10009a8c:	1907c83a 	sub	r3,r3,r4
10009a90:	003ff106 	br	10009a58 <__alt_data_end+0xf8009a58>

10009a94 <_mprec_log10>:
10009a94:	defffe04 	addi	sp,sp,-8
10009a98:	dc000015 	stw	r16,0(sp)
10009a9c:	dfc00115 	stw	ra,4(sp)
10009aa0:	008005c4 	movi	r2,23
10009aa4:	2021883a 	mov	r16,r4
10009aa8:	11000d0e 	bge	r2,r4,10009ae0 <_mprec_log10+0x4c>
10009aac:	0005883a 	mov	r2,zero
10009ab0:	00cffc34 	movhi	r3,16368
10009ab4:	843fffc4 	addi	r16,r16,-1
10009ab8:	000d883a 	mov	r6,zero
10009abc:	01d00934 	movhi	r7,16420
10009ac0:	1009883a 	mov	r4,r2
10009ac4:	180b883a 	mov	r5,r3
10009ac8:	000e5280 	call	1000e528 <__muldf3>
10009acc:	803ff91e 	bne	r16,zero,10009ab4 <__alt_data_end+0xf8009ab4>
10009ad0:	dfc00117 	ldw	ra,4(sp)
10009ad4:	dc000017 	ldw	r16,0(sp)
10009ad8:	dec00204 	addi	sp,sp,8
10009adc:	f800283a 	ret
10009ae0:	202090fa 	slli	r16,r4,3
10009ae4:	00840074 	movhi	r2,4097
10009ae8:	108a6d04 	addi	r2,r2,10676
10009aec:	1421883a 	add	r16,r2,r16
10009af0:	80800017 	ldw	r2,0(r16)
10009af4:	80c00117 	ldw	r3,4(r16)
10009af8:	dfc00117 	ldw	ra,4(sp)
10009afc:	dc000017 	ldw	r16,0(sp)
10009b00:	dec00204 	addi	sp,sp,8
10009b04:	f800283a 	ret

10009b08 <__copybits>:
10009b08:	297fffc4 	addi	r5,r5,-1
10009b0c:	280fd17a 	srai	r7,r5,5
10009b10:	30c00417 	ldw	r3,16(r6)
10009b14:	30800504 	addi	r2,r6,20
10009b18:	39c00044 	addi	r7,r7,1
10009b1c:	18c7883a 	add	r3,r3,r3
10009b20:	39cf883a 	add	r7,r7,r7
10009b24:	18c7883a 	add	r3,r3,r3
10009b28:	39cf883a 	add	r7,r7,r7
10009b2c:	10c7883a 	add	r3,r2,r3
10009b30:	21cf883a 	add	r7,r4,r7
10009b34:	10c00d2e 	bgeu	r2,r3,10009b6c <__copybits+0x64>
10009b38:	200b883a 	mov	r5,r4
10009b3c:	12000017 	ldw	r8,0(r2)
10009b40:	29400104 	addi	r5,r5,4
10009b44:	10800104 	addi	r2,r2,4
10009b48:	2a3fff15 	stw	r8,-4(r5)
10009b4c:	10fffb36 	bltu	r2,r3,10009b3c <__alt_data_end+0xf8009b3c>
10009b50:	1985c83a 	sub	r2,r3,r6
10009b54:	10bffac4 	addi	r2,r2,-21
10009b58:	1004d0ba 	srli	r2,r2,2
10009b5c:	10800044 	addi	r2,r2,1
10009b60:	1085883a 	add	r2,r2,r2
10009b64:	1085883a 	add	r2,r2,r2
10009b68:	2089883a 	add	r4,r4,r2
10009b6c:	21c0032e 	bgeu	r4,r7,10009b7c <__copybits+0x74>
10009b70:	20000015 	stw	zero,0(r4)
10009b74:	21000104 	addi	r4,r4,4
10009b78:	21fffd36 	bltu	r4,r7,10009b70 <__alt_data_end+0xf8009b70>
10009b7c:	f800283a 	ret

10009b80 <__any_on>:
10009b80:	20c00417 	ldw	r3,16(r4)
10009b84:	2805d17a 	srai	r2,r5,5
10009b88:	21000504 	addi	r4,r4,20
10009b8c:	18800d0e 	bge	r3,r2,10009bc4 <__any_on+0x44>
10009b90:	18c7883a 	add	r3,r3,r3
10009b94:	18c7883a 	add	r3,r3,r3
10009b98:	20c7883a 	add	r3,r4,r3
10009b9c:	20c0192e 	bgeu	r4,r3,10009c04 <__any_on+0x84>
10009ba0:	18bfff17 	ldw	r2,-4(r3)
10009ba4:	18ffff04 	addi	r3,r3,-4
10009ba8:	1000041e 	bne	r2,zero,10009bbc <__any_on+0x3c>
10009bac:	20c0142e 	bgeu	r4,r3,10009c00 <__any_on+0x80>
10009bb0:	18ffff04 	addi	r3,r3,-4
10009bb4:	19400017 	ldw	r5,0(r3)
10009bb8:	283ffc26 	beq	r5,zero,10009bac <__alt_data_end+0xf8009bac>
10009bbc:	00800044 	movi	r2,1
10009bc0:	f800283a 	ret
10009bc4:	10c00a0e 	bge	r2,r3,10009bf0 <__any_on+0x70>
10009bc8:	1085883a 	add	r2,r2,r2
10009bcc:	1085883a 	add	r2,r2,r2
10009bd0:	294007cc 	andi	r5,r5,31
10009bd4:	2087883a 	add	r3,r4,r2
10009bd8:	283ff026 	beq	r5,zero,10009b9c <__alt_data_end+0xf8009b9c>
10009bdc:	19800017 	ldw	r6,0(r3)
10009be0:	3144d83a 	srl	r2,r6,r5
10009be4:	114a983a 	sll	r5,r2,r5
10009be8:	317ff41e 	bne	r6,r5,10009bbc <__alt_data_end+0xf8009bbc>
10009bec:	003feb06 	br	10009b9c <__alt_data_end+0xf8009b9c>
10009bf0:	1085883a 	add	r2,r2,r2
10009bf4:	1085883a 	add	r2,r2,r2
10009bf8:	2087883a 	add	r3,r4,r2
10009bfc:	003fe706 	br	10009b9c <__alt_data_end+0xf8009b9c>
10009c00:	f800283a 	ret
10009c04:	0005883a 	mov	r2,zero
10009c08:	f800283a 	ret

10009c0c <_realloc_r>:
10009c0c:	defff604 	addi	sp,sp,-40
10009c10:	dc800215 	stw	r18,8(sp)
10009c14:	dfc00915 	stw	ra,36(sp)
10009c18:	df000815 	stw	fp,32(sp)
10009c1c:	ddc00715 	stw	r23,28(sp)
10009c20:	dd800615 	stw	r22,24(sp)
10009c24:	dd400515 	stw	r21,20(sp)
10009c28:	dd000415 	stw	r20,16(sp)
10009c2c:	dcc00315 	stw	r19,12(sp)
10009c30:	dc400115 	stw	r17,4(sp)
10009c34:	dc000015 	stw	r16,0(sp)
10009c38:	3025883a 	mov	r18,r6
10009c3c:	2800b726 	beq	r5,zero,10009f1c <_realloc_r+0x310>
10009c40:	282b883a 	mov	r21,r5
10009c44:	2029883a 	mov	r20,r4
10009c48:	000fe940 	call	1000fe94 <__malloc_lock>
10009c4c:	a8bfff17 	ldw	r2,-4(r21)
10009c50:	043fff04 	movi	r16,-4
10009c54:	90c002c4 	addi	r3,r18,11
10009c58:	01000584 	movi	r4,22
10009c5c:	acfffe04 	addi	r19,r21,-8
10009c60:	1420703a 	and	r16,r2,r16
10009c64:	20c0332e 	bgeu	r4,r3,10009d34 <_realloc_r+0x128>
10009c68:	047ffe04 	movi	r17,-8
10009c6c:	1c62703a 	and	r17,r3,r17
10009c70:	8807883a 	mov	r3,r17
10009c74:	88005816 	blt	r17,zero,10009dd8 <_realloc_r+0x1cc>
10009c78:	8c805736 	bltu	r17,r18,10009dd8 <_realloc_r+0x1cc>
10009c7c:	80c0300e 	bge	r16,r3,10009d40 <_realloc_r+0x134>
10009c80:	07040074 	movhi	fp,4097
10009c84:	e70c1b04 	addi	fp,fp,12396
10009c88:	e1c00217 	ldw	r7,8(fp)
10009c8c:	9c09883a 	add	r4,r19,r16
10009c90:	22000117 	ldw	r8,4(r4)
10009c94:	21c06326 	beq	r4,r7,10009e24 <_realloc_r+0x218>
10009c98:	017fff84 	movi	r5,-2
10009c9c:	414a703a 	and	r5,r8,r5
10009ca0:	214b883a 	add	r5,r4,r5
10009ca4:	29800117 	ldw	r6,4(r5)
10009ca8:	3180004c 	andi	r6,r6,1
10009cac:	30003f26 	beq	r6,zero,10009dac <_realloc_r+0x1a0>
10009cb0:	1080004c 	andi	r2,r2,1
10009cb4:	10008326 	beq	r2,zero,10009ec4 <_realloc_r+0x2b8>
10009cb8:	900b883a 	mov	r5,r18
10009cbc:	a009883a 	mov	r4,r20
10009cc0:	0007e980 	call	10007e98 <_malloc_r>
10009cc4:	1025883a 	mov	r18,r2
10009cc8:	10011e26 	beq	r2,zero,1000a144 <_realloc_r+0x538>
10009ccc:	a93fff17 	ldw	r4,-4(r21)
10009cd0:	10fffe04 	addi	r3,r2,-8
10009cd4:	00bfff84 	movi	r2,-2
10009cd8:	2084703a 	and	r2,r4,r2
10009cdc:	9885883a 	add	r2,r19,r2
10009ce0:	1880ee26 	beq	r3,r2,1000a09c <_realloc_r+0x490>
10009ce4:	81bfff04 	addi	r6,r16,-4
10009ce8:	00800904 	movi	r2,36
10009cec:	1180b836 	bltu	r2,r6,10009fd0 <_realloc_r+0x3c4>
10009cf0:	00c004c4 	movi	r3,19
10009cf4:	19809636 	bltu	r3,r6,10009f50 <_realloc_r+0x344>
10009cf8:	9005883a 	mov	r2,r18
10009cfc:	a807883a 	mov	r3,r21
10009d00:	19000017 	ldw	r4,0(r3)
10009d04:	11000015 	stw	r4,0(r2)
10009d08:	19000117 	ldw	r4,4(r3)
10009d0c:	11000115 	stw	r4,4(r2)
10009d10:	18c00217 	ldw	r3,8(r3)
10009d14:	10c00215 	stw	r3,8(r2)
10009d18:	a80b883a 	mov	r5,r21
10009d1c:	a009883a 	mov	r4,r20
10009d20:	00072a00 	call	100072a0 <_free_r>
10009d24:	a009883a 	mov	r4,r20
10009d28:	000feb80 	call	1000feb8 <__malloc_unlock>
10009d2c:	9005883a 	mov	r2,r18
10009d30:	00001206 	br	10009d7c <_realloc_r+0x170>
10009d34:	00c00404 	movi	r3,16
10009d38:	1823883a 	mov	r17,r3
10009d3c:	003fce06 	br	10009c78 <__alt_data_end+0xf8009c78>
10009d40:	a825883a 	mov	r18,r21
10009d44:	8445c83a 	sub	r2,r16,r17
10009d48:	00c003c4 	movi	r3,15
10009d4c:	18802636 	bltu	r3,r2,10009de8 <_realloc_r+0x1dc>
10009d50:	99800117 	ldw	r6,4(r19)
10009d54:	9c07883a 	add	r3,r19,r16
10009d58:	3180004c 	andi	r6,r6,1
10009d5c:	3420b03a 	or	r16,r6,r16
10009d60:	9c000115 	stw	r16,4(r19)
10009d64:	18800117 	ldw	r2,4(r3)
10009d68:	10800054 	ori	r2,r2,1
10009d6c:	18800115 	stw	r2,4(r3)
10009d70:	a009883a 	mov	r4,r20
10009d74:	000feb80 	call	1000feb8 <__malloc_unlock>
10009d78:	9005883a 	mov	r2,r18
10009d7c:	dfc00917 	ldw	ra,36(sp)
10009d80:	df000817 	ldw	fp,32(sp)
10009d84:	ddc00717 	ldw	r23,28(sp)
10009d88:	dd800617 	ldw	r22,24(sp)
10009d8c:	dd400517 	ldw	r21,20(sp)
10009d90:	dd000417 	ldw	r20,16(sp)
10009d94:	dcc00317 	ldw	r19,12(sp)
10009d98:	dc800217 	ldw	r18,8(sp)
10009d9c:	dc400117 	ldw	r17,4(sp)
10009da0:	dc000017 	ldw	r16,0(sp)
10009da4:	dec00a04 	addi	sp,sp,40
10009da8:	f800283a 	ret
10009dac:	017fff04 	movi	r5,-4
10009db0:	414a703a 	and	r5,r8,r5
10009db4:	814d883a 	add	r6,r16,r5
10009db8:	30c01f16 	blt	r6,r3,10009e38 <_realloc_r+0x22c>
10009dbc:	20800317 	ldw	r2,12(r4)
10009dc0:	20c00217 	ldw	r3,8(r4)
10009dc4:	a825883a 	mov	r18,r21
10009dc8:	3021883a 	mov	r16,r6
10009dcc:	18800315 	stw	r2,12(r3)
10009dd0:	10c00215 	stw	r3,8(r2)
10009dd4:	003fdb06 	br	10009d44 <__alt_data_end+0xf8009d44>
10009dd8:	00800304 	movi	r2,12
10009ddc:	a0800015 	stw	r2,0(r20)
10009de0:	0005883a 	mov	r2,zero
10009de4:	003fe506 	br	10009d7c <__alt_data_end+0xf8009d7c>
10009de8:	98c00117 	ldw	r3,4(r19)
10009dec:	9c4b883a 	add	r5,r19,r17
10009df0:	11000054 	ori	r4,r2,1
10009df4:	18c0004c 	andi	r3,r3,1
10009df8:	1c62b03a 	or	r17,r3,r17
10009dfc:	9c400115 	stw	r17,4(r19)
10009e00:	29000115 	stw	r4,4(r5)
10009e04:	2885883a 	add	r2,r5,r2
10009e08:	10c00117 	ldw	r3,4(r2)
10009e0c:	29400204 	addi	r5,r5,8
10009e10:	a009883a 	mov	r4,r20
10009e14:	18c00054 	ori	r3,r3,1
10009e18:	10c00115 	stw	r3,4(r2)
10009e1c:	00072a00 	call	100072a0 <_free_r>
10009e20:	003fd306 	br	10009d70 <__alt_data_end+0xf8009d70>
10009e24:	017fff04 	movi	r5,-4
10009e28:	414a703a 	and	r5,r8,r5
10009e2c:	89800404 	addi	r6,r17,16
10009e30:	8151883a 	add	r8,r16,r5
10009e34:	4180590e 	bge	r8,r6,10009f9c <_realloc_r+0x390>
10009e38:	1080004c 	andi	r2,r2,1
10009e3c:	103f9e1e 	bne	r2,zero,10009cb8 <__alt_data_end+0xf8009cb8>
10009e40:	adbffe17 	ldw	r22,-8(r21)
10009e44:	00bfff04 	movi	r2,-4
10009e48:	9dadc83a 	sub	r22,r19,r22
10009e4c:	b1800117 	ldw	r6,4(r22)
10009e50:	3084703a 	and	r2,r6,r2
10009e54:	20002026 	beq	r4,zero,10009ed8 <_realloc_r+0x2cc>
10009e58:	80af883a 	add	r23,r16,r2
10009e5c:	b96f883a 	add	r23,r23,r5
10009e60:	21c05f26 	beq	r4,r7,10009fe0 <_realloc_r+0x3d4>
10009e64:	b8c01c16 	blt	r23,r3,10009ed8 <_realloc_r+0x2cc>
10009e68:	20800317 	ldw	r2,12(r4)
10009e6c:	20c00217 	ldw	r3,8(r4)
10009e70:	81bfff04 	addi	r6,r16,-4
10009e74:	01000904 	movi	r4,36
10009e78:	18800315 	stw	r2,12(r3)
10009e7c:	10c00215 	stw	r3,8(r2)
10009e80:	b0c00217 	ldw	r3,8(r22)
10009e84:	b0800317 	ldw	r2,12(r22)
10009e88:	b4800204 	addi	r18,r22,8
10009e8c:	18800315 	stw	r2,12(r3)
10009e90:	10c00215 	stw	r3,8(r2)
10009e94:	21801b36 	bltu	r4,r6,10009f04 <_realloc_r+0x2f8>
10009e98:	008004c4 	movi	r2,19
10009e9c:	1180352e 	bgeu	r2,r6,10009f74 <_realloc_r+0x368>
10009ea0:	a8800017 	ldw	r2,0(r21)
10009ea4:	b0800215 	stw	r2,8(r22)
10009ea8:	a8800117 	ldw	r2,4(r21)
10009eac:	b0800315 	stw	r2,12(r22)
10009eb0:	008006c4 	movi	r2,27
10009eb4:	11807f36 	bltu	r2,r6,1000a0b4 <_realloc_r+0x4a8>
10009eb8:	b0800404 	addi	r2,r22,16
10009ebc:	ad400204 	addi	r21,r21,8
10009ec0:	00002d06 	br	10009f78 <_realloc_r+0x36c>
10009ec4:	adbffe17 	ldw	r22,-8(r21)
10009ec8:	00bfff04 	movi	r2,-4
10009ecc:	9dadc83a 	sub	r22,r19,r22
10009ed0:	b1000117 	ldw	r4,4(r22)
10009ed4:	2084703a 	and	r2,r4,r2
10009ed8:	b03f7726 	beq	r22,zero,10009cb8 <__alt_data_end+0xf8009cb8>
10009edc:	80af883a 	add	r23,r16,r2
10009ee0:	b8ff7516 	blt	r23,r3,10009cb8 <__alt_data_end+0xf8009cb8>
10009ee4:	b0800317 	ldw	r2,12(r22)
10009ee8:	b0c00217 	ldw	r3,8(r22)
10009eec:	81bfff04 	addi	r6,r16,-4
10009ef0:	01000904 	movi	r4,36
10009ef4:	18800315 	stw	r2,12(r3)
10009ef8:	10c00215 	stw	r3,8(r2)
10009efc:	b4800204 	addi	r18,r22,8
10009f00:	21bfe52e 	bgeu	r4,r6,10009e98 <__alt_data_end+0xf8009e98>
10009f04:	a80b883a 	mov	r5,r21
10009f08:	9009883a 	mov	r4,r18
10009f0c:	00088d00 	call	100088d0 <memmove>
10009f10:	b821883a 	mov	r16,r23
10009f14:	b027883a 	mov	r19,r22
10009f18:	003f8a06 	br	10009d44 <__alt_data_end+0xf8009d44>
10009f1c:	300b883a 	mov	r5,r6
10009f20:	dfc00917 	ldw	ra,36(sp)
10009f24:	df000817 	ldw	fp,32(sp)
10009f28:	ddc00717 	ldw	r23,28(sp)
10009f2c:	dd800617 	ldw	r22,24(sp)
10009f30:	dd400517 	ldw	r21,20(sp)
10009f34:	dd000417 	ldw	r20,16(sp)
10009f38:	dcc00317 	ldw	r19,12(sp)
10009f3c:	dc800217 	ldw	r18,8(sp)
10009f40:	dc400117 	ldw	r17,4(sp)
10009f44:	dc000017 	ldw	r16,0(sp)
10009f48:	dec00a04 	addi	sp,sp,40
10009f4c:	0007e981 	jmpi	10007e98 <_malloc_r>
10009f50:	a8c00017 	ldw	r3,0(r21)
10009f54:	90c00015 	stw	r3,0(r18)
10009f58:	a8c00117 	ldw	r3,4(r21)
10009f5c:	90c00115 	stw	r3,4(r18)
10009f60:	00c006c4 	movi	r3,27
10009f64:	19804536 	bltu	r3,r6,1000a07c <_realloc_r+0x470>
10009f68:	90800204 	addi	r2,r18,8
10009f6c:	a8c00204 	addi	r3,r21,8
10009f70:	003f6306 	br	10009d00 <__alt_data_end+0xf8009d00>
10009f74:	9005883a 	mov	r2,r18
10009f78:	a8c00017 	ldw	r3,0(r21)
10009f7c:	b821883a 	mov	r16,r23
10009f80:	b027883a 	mov	r19,r22
10009f84:	10c00015 	stw	r3,0(r2)
10009f88:	a8c00117 	ldw	r3,4(r21)
10009f8c:	10c00115 	stw	r3,4(r2)
10009f90:	a8c00217 	ldw	r3,8(r21)
10009f94:	10c00215 	stw	r3,8(r2)
10009f98:	003f6a06 	br	10009d44 <__alt_data_end+0xf8009d44>
10009f9c:	9c67883a 	add	r19,r19,r17
10009fa0:	4445c83a 	sub	r2,r8,r17
10009fa4:	e4c00215 	stw	r19,8(fp)
10009fa8:	10800054 	ori	r2,r2,1
10009fac:	98800115 	stw	r2,4(r19)
10009fb0:	a8bfff17 	ldw	r2,-4(r21)
10009fb4:	a009883a 	mov	r4,r20
10009fb8:	1080004c 	andi	r2,r2,1
10009fbc:	1462b03a 	or	r17,r2,r17
10009fc0:	ac7fff15 	stw	r17,-4(r21)
10009fc4:	000feb80 	call	1000feb8 <__malloc_unlock>
10009fc8:	a805883a 	mov	r2,r21
10009fcc:	003f6b06 	br	10009d7c <__alt_data_end+0xf8009d7c>
10009fd0:	a80b883a 	mov	r5,r21
10009fd4:	9009883a 	mov	r4,r18
10009fd8:	00088d00 	call	100088d0 <memmove>
10009fdc:	003f4e06 	br	10009d18 <__alt_data_end+0xf8009d18>
10009fe0:	89000404 	addi	r4,r17,16
10009fe4:	b93fbc16 	blt	r23,r4,10009ed8 <__alt_data_end+0xf8009ed8>
10009fe8:	b0800317 	ldw	r2,12(r22)
10009fec:	b0c00217 	ldw	r3,8(r22)
10009ff0:	81bfff04 	addi	r6,r16,-4
10009ff4:	01000904 	movi	r4,36
10009ff8:	18800315 	stw	r2,12(r3)
10009ffc:	10c00215 	stw	r3,8(r2)
1000a000:	b4800204 	addi	r18,r22,8
1000a004:	21804336 	bltu	r4,r6,1000a114 <_realloc_r+0x508>
1000a008:	008004c4 	movi	r2,19
1000a00c:	11803f2e 	bgeu	r2,r6,1000a10c <_realloc_r+0x500>
1000a010:	a8800017 	ldw	r2,0(r21)
1000a014:	b0800215 	stw	r2,8(r22)
1000a018:	a8800117 	ldw	r2,4(r21)
1000a01c:	b0800315 	stw	r2,12(r22)
1000a020:	008006c4 	movi	r2,27
1000a024:	11803f36 	bltu	r2,r6,1000a124 <_realloc_r+0x518>
1000a028:	b0800404 	addi	r2,r22,16
1000a02c:	ad400204 	addi	r21,r21,8
1000a030:	a8c00017 	ldw	r3,0(r21)
1000a034:	10c00015 	stw	r3,0(r2)
1000a038:	a8c00117 	ldw	r3,4(r21)
1000a03c:	10c00115 	stw	r3,4(r2)
1000a040:	a8c00217 	ldw	r3,8(r21)
1000a044:	10c00215 	stw	r3,8(r2)
1000a048:	b447883a 	add	r3,r22,r17
1000a04c:	bc45c83a 	sub	r2,r23,r17
1000a050:	e0c00215 	stw	r3,8(fp)
1000a054:	10800054 	ori	r2,r2,1
1000a058:	18800115 	stw	r2,4(r3)
1000a05c:	b0800117 	ldw	r2,4(r22)
1000a060:	a009883a 	mov	r4,r20
1000a064:	1080004c 	andi	r2,r2,1
1000a068:	1462b03a 	or	r17,r2,r17
1000a06c:	b4400115 	stw	r17,4(r22)
1000a070:	000feb80 	call	1000feb8 <__malloc_unlock>
1000a074:	9005883a 	mov	r2,r18
1000a078:	003f4006 	br	10009d7c <__alt_data_end+0xf8009d7c>
1000a07c:	a8c00217 	ldw	r3,8(r21)
1000a080:	90c00215 	stw	r3,8(r18)
1000a084:	a8c00317 	ldw	r3,12(r21)
1000a088:	90c00315 	stw	r3,12(r18)
1000a08c:	30801126 	beq	r6,r2,1000a0d4 <_realloc_r+0x4c8>
1000a090:	90800404 	addi	r2,r18,16
1000a094:	a8c00404 	addi	r3,r21,16
1000a098:	003f1906 	br	10009d00 <__alt_data_end+0xf8009d00>
1000a09c:	90ffff17 	ldw	r3,-4(r18)
1000a0a0:	00bfff04 	movi	r2,-4
1000a0a4:	a825883a 	mov	r18,r21
1000a0a8:	1884703a 	and	r2,r3,r2
1000a0ac:	80a1883a 	add	r16,r16,r2
1000a0b0:	003f2406 	br	10009d44 <__alt_data_end+0xf8009d44>
1000a0b4:	a8800217 	ldw	r2,8(r21)
1000a0b8:	b0800415 	stw	r2,16(r22)
1000a0bc:	a8800317 	ldw	r2,12(r21)
1000a0c0:	b0800515 	stw	r2,20(r22)
1000a0c4:	31000a26 	beq	r6,r4,1000a0f0 <_realloc_r+0x4e4>
1000a0c8:	b0800604 	addi	r2,r22,24
1000a0cc:	ad400404 	addi	r21,r21,16
1000a0d0:	003fa906 	br	10009f78 <__alt_data_end+0xf8009f78>
1000a0d4:	a9000417 	ldw	r4,16(r21)
1000a0d8:	90800604 	addi	r2,r18,24
1000a0dc:	a8c00604 	addi	r3,r21,24
1000a0e0:	91000415 	stw	r4,16(r18)
1000a0e4:	a9000517 	ldw	r4,20(r21)
1000a0e8:	91000515 	stw	r4,20(r18)
1000a0ec:	003f0406 	br	10009d00 <__alt_data_end+0xf8009d00>
1000a0f0:	a8c00417 	ldw	r3,16(r21)
1000a0f4:	ad400604 	addi	r21,r21,24
1000a0f8:	b0800804 	addi	r2,r22,32
1000a0fc:	b0c00615 	stw	r3,24(r22)
1000a100:	a8ffff17 	ldw	r3,-4(r21)
1000a104:	b0c00715 	stw	r3,28(r22)
1000a108:	003f9b06 	br	10009f78 <__alt_data_end+0xf8009f78>
1000a10c:	9005883a 	mov	r2,r18
1000a110:	003fc706 	br	1000a030 <__alt_data_end+0xf800a030>
1000a114:	a80b883a 	mov	r5,r21
1000a118:	9009883a 	mov	r4,r18
1000a11c:	00088d00 	call	100088d0 <memmove>
1000a120:	003fc906 	br	1000a048 <__alt_data_end+0xf800a048>
1000a124:	a8800217 	ldw	r2,8(r21)
1000a128:	b0800415 	stw	r2,16(r22)
1000a12c:	a8800317 	ldw	r2,12(r21)
1000a130:	b0800515 	stw	r2,20(r22)
1000a134:	31000726 	beq	r6,r4,1000a154 <_realloc_r+0x548>
1000a138:	b0800604 	addi	r2,r22,24
1000a13c:	ad400404 	addi	r21,r21,16
1000a140:	003fbb06 	br	1000a030 <__alt_data_end+0xf800a030>
1000a144:	a009883a 	mov	r4,r20
1000a148:	000feb80 	call	1000feb8 <__malloc_unlock>
1000a14c:	0005883a 	mov	r2,zero
1000a150:	003f0a06 	br	10009d7c <__alt_data_end+0xf8009d7c>
1000a154:	a8c00417 	ldw	r3,16(r21)
1000a158:	ad400604 	addi	r21,r21,24
1000a15c:	b0800804 	addi	r2,r22,32
1000a160:	b0c00615 	stw	r3,24(r22)
1000a164:	a8ffff17 	ldw	r3,-4(r21)
1000a168:	b0c00715 	stw	r3,28(r22)
1000a16c:	003fb006 	br	1000a030 <__alt_data_end+0xf800a030>

1000a170 <__fpclassifyd>:
1000a170:	00a00034 	movhi	r2,32768
1000a174:	10bfffc4 	addi	r2,r2,-1
1000a178:	2884703a 	and	r2,r5,r2
1000a17c:	10000726 	beq	r2,zero,1000a19c <__fpclassifyd+0x2c>
1000a180:	00fffc34 	movhi	r3,65520
1000a184:	019ff834 	movhi	r6,32736
1000a188:	28c7883a 	add	r3,r5,r3
1000a18c:	31bfffc4 	addi	r6,r6,-1
1000a190:	30c00536 	bltu	r6,r3,1000a1a8 <__fpclassifyd+0x38>
1000a194:	00800104 	movi	r2,4
1000a198:	f800283a 	ret
1000a19c:	2000021e 	bne	r4,zero,1000a1a8 <__fpclassifyd+0x38>
1000a1a0:	00800084 	movi	r2,2
1000a1a4:	f800283a 	ret
1000a1a8:	00dffc34 	movhi	r3,32752
1000a1ac:	019ff834 	movhi	r6,32736
1000a1b0:	28cb883a 	add	r5,r5,r3
1000a1b4:	31bfffc4 	addi	r6,r6,-1
1000a1b8:	317ff62e 	bgeu	r6,r5,1000a194 <__alt_data_end+0xf800a194>
1000a1bc:	01400434 	movhi	r5,16
1000a1c0:	297fffc4 	addi	r5,r5,-1
1000a1c4:	28800236 	bltu	r5,r2,1000a1d0 <__fpclassifyd+0x60>
1000a1c8:	008000c4 	movi	r2,3
1000a1cc:	f800283a 	ret
1000a1d0:	10c00226 	beq	r2,r3,1000a1dc <__fpclassifyd+0x6c>
1000a1d4:	0005883a 	mov	r2,zero
1000a1d8:	f800283a 	ret
1000a1dc:	2005003a 	cmpeq	r2,r4,zero
1000a1e0:	f800283a 	ret

1000a1e4 <_sbrk_r>:
1000a1e4:	defffd04 	addi	sp,sp,-12
1000a1e8:	dc000015 	stw	r16,0(sp)
1000a1ec:	04040074 	movhi	r16,4097
1000a1f0:	dc400115 	stw	r17,4(sp)
1000a1f4:	84187804 	addi	r16,r16,25056
1000a1f8:	2023883a 	mov	r17,r4
1000a1fc:	2809883a 	mov	r4,r5
1000a200:	dfc00215 	stw	ra,8(sp)
1000a204:	80000015 	stw	zero,0(r16)
1000a208:	00100a00 	call	100100a0 <sbrk>
1000a20c:	00ffffc4 	movi	r3,-1
1000a210:	10c00526 	beq	r2,r3,1000a228 <_sbrk_r+0x44>
1000a214:	dfc00217 	ldw	ra,8(sp)
1000a218:	dc400117 	ldw	r17,4(sp)
1000a21c:	dc000017 	ldw	r16,0(sp)
1000a220:	dec00304 	addi	sp,sp,12
1000a224:	f800283a 	ret
1000a228:	80c00017 	ldw	r3,0(r16)
1000a22c:	183ff926 	beq	r3,zero,1000a214 <__alt_data_end+0xf800a214>
1000a230:	88c00015 	stw	r3,0(r17)
1000a234:	003ff706 	br	1000a214 <__alt_data_end+0xf800a214>

1000a238 <__sread>:
1000a238:	defffe04 	addi	sp,sp,-8
1000a23c:	dc000015 	stw	r16,0(sp)
1000a240:	2821883a 	mov	r16,r5
1000a244:	2940038f 	ldh	r5,14(r5)
1000a248:	dfc00115 	stw	ra,4(sp)
1000a24c:	000c0f40 	call	1000c0f4 <_read_r>
1000a250:	10000716 	blt	r2,zero,1000a270 <__sread+0x38>
1000a254:	80c01417 	ldw	r3,80(r16)
1000a258:	1887883a 	add	r3,r3,r2
1000a25c:	80c01415 	stw	r3,80(r16)
1000a260:	dfc00117 	ldw	ra,4(sp)
1000a264:	dc000017 	ldw	r16,0(sp)
1000a268:	dec00204 	addi	sp,sp,8
1000a26c:	f800283a 	ret
1000a270:	80c0030b 	ldhu	r3,12(r16)
1000a274:	18fbffcc 	andi	r3,r3,61439
1000a278:	80c0030d 	sth	r3,12(r16)
1000a27c:	dfc00117 	ldw	ra,4(sp)
1000a280:	dc000017 	ldw	r16,0(sp)
1000a284:	dec00204 	addi	sp,sp,8
1000a288:	f800283a 	ret

1000a28c <__seofread>:
1000a28c:	0005883a 	mov	r2,zero
1000a290:	f800283a 	ret

1000a294 <__swrite>:
1000a294:	2880030b 	ldhu	r2,12(r5)
1000a298:	defffb04 	addi	sp,sp,-20
1000a29c:	dcc00315 	stw	r19,12(sp)
1000a2a0:	dc800215 	stw	r18,8(sp)
1000a2a4:	dc400115 	stw	r17,4(sp)
1000a2a8:	dc000015 	stw	r16,0(sp)
1000a2ac:	dfc00415 	stw	ra,16(sp)
1000a2b0:	10c0400c 	andi	r3,r2,256
1000a2b4:	2821883a 	mov	r16,r5
1000a2b8:	2023883a 	mov	r17,r4
1000a2bc:	3025883a 	mov	r18,r6
1000a2c0:	3827883a 	mov	r19,r7
1000a2c4:	18000526 	beq	r3,zero,1000a2dc <__swrite+0x48>
1000a2c8:	2940038f 	ldh	r5,14(r5)
1000a2cc:	01c00084 	movi	r7,2
1000a2d0:	000d883a 	mov	r6,zero
1000a2d4:	000c0940 	call	1000c094 <_lseek_r>
1000a2d8:	8080030b 	ldhu	r2,12(r16)
1000a2dc:	8140038f 	ldh	r5,14(r16)
1000a2e0:	10bbffcc 	andi	r2,r2,61439
1000a2e4:	980f883a 	mov	r7,r19
1000a2e8:	900d883a 	mov	r6,r18
1000a2ec:	8809883a 	mov	r4,r17
1000a2f0:	8080030d 	sth	r2,12(r16)
1000a2f4:	dfc00417 	ldw	ra,16(sp)
1000a2f8:	dcc00317 	ldw	r19,12(sp)
1000a2fc:	dc800217 	ldw	r18,8(sp)
1000a300:	dc400117 	ldw	r17,4(sp)
1000a304:	dc000017 	ldw	r16,0(sp)
1000a308:	dec00504 	addi	sp,sp,20
1000a30c:	000bb481 	jmpi	1000bb48 <_write_r>

1000a310 <__sseek>:
1000a310:	defffe04 	addi	sp,sp,-8
1000a314:	dc000015 	stw	r16,0(sp)
1000a318:	2821883a 	mov	r16,r5
1000a31c:	2940038f 	ldh	r5,14(r5)
1000a320:	dfc00115 	stw	ra,4(sp)
1000a324:	000c0940 	call	1000c094 <_lseek_r>
1000a328:	00ffffc4 	movi	r3,-1
1000a32c:	10c00826 	beq	r2,r3,1000a350 <__sseek+0x40>
1000a330:	80c0030b 	ldhu	r3,12(r16)
1000a334:	80801415 	stw	r2,80(r16)
1000a338:	18c40014 	ori	r3,r3,4096
1000a33c:	80c0030d 	sth	r3,12(r16)
1000a340:	dfc00117 	ldw	ra,4(sp)
1000a344:	dc000017 	ldw	r16,0(sp)
1000a348:	dec00204 	addi	sp,sp,8
1000a34c:	f800283a 	ret
1000a350:	80c0030b 	ldhu	r3,12(r16)
1000a354:	18fbffcc 	andi	r3,r3,61439
1000a358:	80c0030d 	sth	r3,12(r16)
1000a35c:	dfc00117 	ldw	ra,4(sp)
1000a360:	dc000017 	ldw	r16,0(sp)
1000a364:	dec00204 	addi	sp,sp,8
1000a368:	f800283a 	ret

1000a36c <__sclose>:
1000a36c:	2940038f 	ldh	r5,14(r5)
1000a370:	000bba81 	jmpi	1000bba8 <_close_r>

1000a374 <strcmp>:
1000a374:	2144b03a 	or	r2,r4,r5
1000a378:	108000cc 	andi	r2,r2,3
1000a37c:	1000171e 	bne	r2,zero,1000a3dc <strcmp+0x68>
1000a380:	20800017 	ldw	r2,0(r4)
1000a384:	28c00017 	ldw	r3,0(r5)
1000a388:	10c0141e 	bne	r2,r3,1000a3dc <strcmp+0x68>
1000a38c:	027fbff4 	movhi	r9,65279
1000a390:	4a7fbfc4 	addi	r9,r9,-257
1000a394:	0086303a 	nor	r3,zero,r2
1000a398:	02202074 	movhi	r8,32897
1000a39c:	1245883a 	add	r2,r2,r9
1000a3a0:	42202004 	addi	r8,r8,-32640
1000a3a4:	10c4703a 	and	r2,r2,r3
1000a3a8:	1204703a 	and	r2,r2,r8
1000a3ac:	10000226 	beq	r2,zero,1000a3b8 <strcmp+0x44>
1000a3b0:	00002306 	br	1000a440 <strcmp+0xcc>
1000a3b4:	1000221e 	bne	r2,zero,1000a440 <strcmp+0xcc>
1000a3b8:	21000104 	addi	r4,r4,4
1000a3bc:	20c00017 	ldw	r3,0(r4)
1000a3c0:	29400104 	addi	r5,r5,4
1000a3c4:	29800017 	ldw	r6,0(r5)
1000a3c8:	1a4f883a 	add	r7,r3,r9
1000a3cc:	00c4303a 	nor	r2,zero,r3
1000a3d0:	3884703a 	and	r2,r7,r2
1000a3d4:	1204703a 	and	r2,r2,r8
1000a3d8:	19bff626 	beq	r3,r6,1000a3b4 <__alt_data_end+0xf800a3b4>
1000a3dc:	20800003 	ldbu	r2,0(r4)
1000a3e0:	10c03fcc 	andi	r3,r2,255
1000a3e4:	18c0201c 	xori	r3,r3,128
1000a3e8:	18ffe004 	addi	r3,r3,-128
1000a3ec:	18000c26 	beq	r3,zero,1000a420 <strcmp+0xac>
1000a3f0:	29800007 	ldb	r6,0(r5)
1000a3f4:	19800326 	beq	r3,r6,1000a404 <strcmp+0x90>
1000a3f8:	00001306 	br	1000a448 <strcmp+0xd4>
1000a3fc:	29800007 	ldb	r6,0(r5)
1000a400:	11800b1e 	bne	r2,r6,1000a430 <strcmp+0xbc>
1000a404:	21000044 	addi	r4,r4,1
1000a408:	20c00003 	ldbu	r3,0(r4)
1000a40c:	29400044 	addi	r5,r5,1
1000a410:	18803fcc 	andi	r2,r3,255
1000a414:	1080201c 	xori	r2,r2,128
1000a418:	10bfe004 	addi	r2,r2,-128
1000a41c:	103ff71e 	bne	r2,zero,1000a3fc <__alt_data_end+0xf800a3fc>
1000a420:	0007883a 	mov	r3,zero
1000a424:	28800003 	ldbu	r2,0(r5)
1000a428:	1885c83a 	sub	r2,r3,r2
1000a42c:	f800283a 	ret
1000a430:	28800003 	ldbu	r2,0(r5)
1000a434:	18c03fcc 	andi	r3,r3,255
1000a438:	1885c83a 	sub	r2,r3,r2
1000a43c:	f800283a 	ret
1000a440:	0005883a 	mov	r2,zero
1000a444:	f800283a 	ret
1000a448:	10c03fcc 	andi	r3,r2,255
1000a44c:	003ff506 	br	1000a424 <__alt_data_end+0xf800a424>

1000a450 <__sprint_r.part.0>:
1000a450:	28801917 	ldw	r2,100(r5)
1000a454:	defff604 	addi	sp,sp,-40
1000a458:	dd400515 	stw	r21,20(sp)
1000a45c:	dfc00915 	stw	ra,36(sp)
1000a460:	df000815 	stw	fp,32(sp)
1000a464:	ddc00715 	stw	r23,28(sp)
1000a468:	dd800615 	stw	r22,24(sp)
1000a46c:	dd000415 	stw	r20,16(sp)
1000a470:	dcc00315 	stw	r19,12(sp)
1000a474:	dc800215 	stw	r18,8(sp)
1000a478:	dc400115 	stw	r17,4(sp)
1000a47c:	dc000015 	stw	r16,0(sp)
1000a480:	1088000c 	andi	r2,r2,8192
1000a484:	302b883a 	mov	r21,r6
1000a488:	10002e26 	beq	r2,zero,1000a544 <__sprint_r.part.0+0xf4>
1000a48c:	30800217 	ldw	r2,8(r6)
1000a490:	35800017 	ldw	r22,0(r6)
1000a494:	10002926 	beq	r2,zero,1000a53c <__sprint_r.part.0+0xec>
1000a498:	2827883a 	mov	r19,r5
1000a49c:	2029883a 	mov	r20,r4
1000a4a0:	b5c00104 	addi	r23,r22,4
1000a4a4:	04bfffc4 	movi	r18,-1
1000a4a8:	bc400017 	ldw	r17,0(r23)
1000a4ac:	b4000017 	ldw	r16,0(r22)
1000a4b0:	0039883a 	mov	fp,zero
1000a4b4:	8822d0ba 	srli	r17,r17,2
1000a4b8:	8800031e 	bne	r17,zero,1000a4c8 <__sprint_r.part.0+0x78>
1000a4bc:	00001806 	br	1000a520 <__sprint_r.part.0+0xd0>
1000a4c0:	84000104 	addi	r16,r16,4
1000a4c4:	8f001526 	beq	r17,fp,1000a51c <__sprint_r.part.0+0xcc>
1000a4c8:	81400017 	ldw	r5,0(r16)
1000a4cc:	980d883a 	mov	r6,r19
1000a4d0:	a009883a 	mov	r4,r20
1000a4d4:	000bf400 	call	1000bf40 <_fputwc_r>
1000a4d8:	e7000044 	addi	fp,fp,1
1000a4dc:	14bff81e 	bne	r2,r18,1000a4c0 <__alt_data_end+0xf800a4c0>
1000a4e0:	9005883a 	mov	r2,r18
1000a4e4:	a8000215 	stw	zero,8(r21)
1000a4e8:	a8000115 	stw	zero,4(r21)
1000a4ec:	dfc00917 	ldw	ra,36(sp)
1000a4f0:	df000817 	ldw	fp,32(sp)
1000a4f4:	ddc00717 	ldw	r23,28(sp)
1000a4f8:	dd800617 	ldw	r22,24(sp)
1000a4fc:	dd400517 	ldw	r21,20(sp)
1000a500:	dd000417 	ldw	r20,16(sp)
1000a504:	dcc00317 	ldw	r19,12(sp)
1000a508:	dc800217 	ldw	r18,8(sp)
1000a50c:	dc400117 	ldw	r17,4(sp)
1000a510:	dc000017 	ldw	r16,0(sp)
1000a514:	dec00a04 	addi	sp,sp,40
1000a518:	f800283a 	ret
1000a51c:	a8800217 	ldw	r2,8(r21)
1000a520:	8c63883a 	add	r17,r17,r17
1000a524:	8c63883a 	add	r17,r17,r17
1000a528:	1445c83a 	sub	r2,r2,r17
1000a52c:	a8800215 	stw	r2,8(r21)
1000a530:	b5800204 	addi	r22,r22,8
1000a534:	bdc00204 	addi	r23,r23,8
1000a538:	103fdb1e 	bne	r2,zero,1000a4a8 <__alt_data_end+0xf800a4a8>
1000a53c:	0005883a 	mov	r2,zero
1000a540:	003fe806 	br	1000a4e4 <__alt_data_end+0xf800a4e4>
1000a544:	00075b00 	call	100075b0 <__sfvwrite_r>
1000a548:	003fe606 	br	1000a4e4 <__alt_data_end+0xf800a4e4>

1000a54c <__sprint_r>:
1000a54c:	30c00217 	ldw	r3,8(r6)
1000a550:	18000126 	beq	r3,zero,1000a558 <__sprint_r+0xc>
1000a554:	000a4501 	jmpi	1000a450 <__sprint_r.part.0>
1000a558:	30000115 	stw	zero,4(r6)
1000a55c:	0005883a 	mov	r2,zero
1000a560:	f800283a 	ret

1000a564 <___vfiprintf_internal_r>:
1000a564:	deffca04 	addi	sp,sp,-216
1000a568:	dd403115 	stw	r21,196(sp)
1000a56c:	dfc03515 	stw	ra,212(sp)
1000a570:	df003415 	stw	fp,208(sp)
1000a574:	ddc03315 	stw	r23,204(sp)
1000a578:	dd803215 	stw	r22,200(sp)
1000a57c:	dd003015 	stw	r20,192(sp)
1000a580:	dcc02f15 	stw	r19,188(sp)
1000a584:	dc802e15 	stw	r18,184(sp)
1000a588:	dc402d15 	stw	r17,180(sp)
1000a58c:	dc002c15 	stw	r16,176(sp)
1000a590:	d9002115 	stw	r4,132(sp)
1000a594:	d9402015 	stw	r5,128(sp)
1000a598:	d9c02215 	stw	r7,136(sp)
1000a59c:	302b883a 	mov	r21,r6
1000a5a0:	20000226 	beq	r4,zero,1000a5ac <___vfiprintf_internal_r+0x48>
1000a5a4:	20800e17 	ldw	r2,56(r4)
1000a5a8:	1000cf26 	beq	r2,zero,1000a8e8 <___vfiprintf_internal_r+0x384>
1000a5ac:	d8c02017 	ldw	r3,128(sp)
1000a5b0:	1880030b 	ldhu	r2,12(r3)
1000a5b4:	10c8000c 	andi	r3,r2,8192
1000a5b8:	1800071e 	bne	r3,zero,1000a5d8 <___vfiprintf_internal_r+0x74>
1000a5bc:	d9402017 	ldw	r5,128(sp)
1000a5c0:	00f7ffc4 	movi	r3,-8193
1000a5c4:	10880014 	ori	r2,r2,8192
1000a5c8:	29001917 	ldw	r4,100(r5)
1000a5cc:	2880030d 	sth	r2,12(r5)
1000a5d0:	20c6703a 	and	r3,r4,r3
1000a5d4:	28c01915 	stw	r3,100(r5)
1000a5d8:	10c0020c 	andi	r3,r2,8
1000a5dc:	1800a526 	beq	r3,zero,1000a874 <___vfiprintf_internal_r+0x310>
1000a5e0:	d9002017 	ldw	r4,128(sp)
1000a5e4:	20c00417 	ldw	r3,16(r4)
1000a5e8:	1800a226 	beq	r3,zero,1000a874 <___vfiprintf_internal_r+0x310>
1000a5ec:	1080068c 	andi	r2,r2,26
1000a5f0:	00c00284 	movi	r3,10
1000a5f4:	10c0a826 	beq	r2,r3,1000a898 <___vfiprintf_internal_r+0x334>
1000a5f8:	d9001a04 	addi	r4,sp,104
1000a5fc:	d94019c4 	addi	r5,sp,103
1000a600:	04840074 	movhi	r18,4097
1000a604:	2145c83a 	sub	r2,r4,r5
1000a608:	948a9f04 	addi	r18,r18,10876
1000a60c:	d9001e15 	stw	r4,120(sp)
1000a610:	d9401f15 	stw	r5,124(sp)
1000a614:	dec01a15 	stw	sp,104(sp)
1000a618:	d8001c15 	stw	zero,112(sp)
1000a61c:	d8001b15 	stw	zero,108(sp)
1000a620:	d811883a 	mov	r8,sp
1000a624:	d8002615 	stw	zero,152(sp)
1000a628:	d8002415 	stw	zero,144(sp)
1000a62c:	d8802815 	stw	r2,160(sp)
1000a630:	a82d883a 	mov	r22,r21
1000a634:	b0800007 	ldb	r2,0(r22)
1000a638:	10040d26 	beq	r2,zero,1000b670 <___vfiprintf_internal_r+0x110c>
1000a63c:	00c00944 	movi	r3,37
1000a640:	b029883a 	mov	r20,r22
1000a644:	10c0021e 	bne	r2,r3,1000a650 <___vfiprintf_internal_r+0xec>
1000a648:	00001606 	br	1000a6a4 <___vfiprintf_internal_r+0x140>
1000a64c:	10c00326 	beq	r2,r3,1000a65c <___vfiprintf_internal_r+0xf8>
1000a650:	a5000044 	addi	r20,r20,1
1000a654:	a0800007 	ldb	r2,0(r20)
1000a658:	103ffc1e 	bne	r2,zero,1000a64c <__alt_data_end+0xf800a64c>
1000a65c:	a5a1c83a 	sub	r16,r20,r22
1000a660:	80001026 	beq	r16,zero,1000a6a4 <___vfiprintf_internal_r+0x140>
1000a664:	d8c01c17 	ldw	r3,112(sp)
1000a668:	d8801b17 	ldw	r2,108(sp)
1000a66c:	45800015 	stw	r22,0(r8)
1000a670:	80c7883a 	add	r3,r16,r3
1000a674:	10800044 	addi	r2,r2,1
1000a678:	44000115 	stw	r16,4(r8)
1000a67c:	d8c01c15 	stw	r3,112(sp)
1000a680:	d8801b15 	stw	r2,108(sp)
1000a684:	010001c4 	movi	r4,7
1000a688:	2080750e 	bge	r4,r2,1000a860 <___vfiprintf_internal_r+0x2fc>
1000a68c:	1803951e 	bne	r3,zero,1000b4e4 <___vfiprintf_internal_r+0xf80>
1000a690:	d8c02417 	ldw	r3,144(sp)
1000a694:	d8001b15 	stw	zero,108(sp)
1000a698:	d811883a 	mov	r8,sp
1000a69c:	1c07883a 	add	r3,r3,r16
1000a6a0:	d8c02415 	stw	r3,144(sp)
1000a6a4:	a0800007 	ldb	r2,0(r20)
1000a6a8:	1002e026 	beq	r2,zero,1000b22c <___vfiprintf_internal_r+0xcc8>
1000a6ac:	a5800044 	addi	r22,r20,1
1000a6b0:	a0c00047 	ldb	r3,1(r20)
1000a6b4:	d8001d85 	stb	zero,118(sp)
1000a6b8:	0027883a 	mov	r19,zero
1000a6bc:	d8002305 	stb	zero,140(sp)
1000a6c0:	043fffc4 	movi	r16,-1
1000a6c4:	d8002515 	stw	zero,148(sp)
1000a6c8:	0023883a 	mov	r17,zero
1000a6cc:	05001604 	movi	r20,88
1000a6d0:	05400244 	movi	r21,9
1000a6d4:	402f883a 	mov	r23,r8
1000a6d8:	b5800044 	addi	r22,r22,1
1000a6dc:	18bff804 	addi	r2,r3,-32
1000a6e0:	a0827736 	bltu	r20,r2,1000b0c0 <___vfiprintf_internal_r+0xb5c>
1000a6e4:	100490ba 	slli	r2,r2,2
1000a6e8:	01040074 	movhi	r4,4097
1000a6ec:	2129bf04 	addi	r4,r4,-22788
1000a6f0:	1105883a 	add	r2,r2,r4
1000a6f4:	10800017 	ldw	r2,0(r2)
1000a6f8:	1000683a 	jmp	r2
1000a6fc:	1000adc0 	call	11000adc <_gp+0xfe4460>
1000a700:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a704:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a708:	1000addc 	xori	zero,r2,695
1000a70c:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a710:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a714:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a718:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a71c:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a720:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a724:	1000afe4 	muli	zero,r2,703
1000a728:	1000b008 	cmpgei	zero,r2,704
1000a72c:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a730:	1000a900 	call	11000a90 <_gp+0xfe4414>
1000a734:	1000b01c 	xori	zero,r2,704
1000a738:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a73c:	1000ade8 	cmpgeui	zero,r2,695
1000a740:	1000adf4 	orhi	zero,r2,695
1000a744:	1000adf4 	orhi	zero,r2,695
1000a748:	1000adf4 	orhi	zero,r2,695
1000a74c:	1000adf4 	orhi	zero,r2,695
1000a750:	1000adf4 	orhi	zero,r2,695
1000a754:	1000adf4 	orhi	zero,r2,695
1000a758:	1000adf4 	orhi	zero,r2,695
1000a75c:	1000adf4 	orhi	zero,r2,695
1000a760:	1000adf4 	orhi	zero,r2,695
1000a764:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a768:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a76c:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a770:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a774:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a778:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a77c:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a780:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a784:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a788:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a78c:	1000ae34 	orhi	zero,r2,696
1000a790:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a794:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a798:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a79c:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a7a0:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a7a4:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a7a8:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a7ac:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a7b0:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a7b4:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a7b8:	1000ae70 	cmpltui	zero,r2,697
1000a7bc:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a7c0:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a7c4:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a7c8:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a7cc:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a7d0:	1000aecc 	andi	zero,r2,699
1000a7d4:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a7d8:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a7dc:	1000af40 	call	11000af4 <_gp+0xfe4478>
1000a7e0:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a7e4:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a7e8:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a7ec:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a7f0:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a7f4:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a7f8:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a7fc:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a800:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a804:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a808:	1000ace8 	cmpgeui	zero,r2,691
1000a80c:	1000ad18 	cmpnei	zero,r2,692
1000a810:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a814:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a818:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a81c:	1000b068 	cmpgeui	zero,r2,705
1000a820:	1000ad18 	cmpnei	zero,r2,692
1000a824:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a828:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a82c:	1000abc0 	call	11000abc <_gp+0xfe4440>
1000a830:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a834:	1000abd4 	ori	zero,r2,687
1000a838:	1000ac0c 	andi	zero,r2,688
1000a83c:	1000a90c 	andi	zero,r2,676
1000a840:	1000abb4 	orhi	zero,r2,686
1000a844:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a848:	1000af80 	call	11000af8 <_gp+0xfe447c>
1000a84c:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a850:	1000afcc 	andi	zero,r2,703
1000a854:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a858:	1000b0c0 	call	11000b0c <_gp+0xfe4490>
1000a85c:	1000ac90 	cmplti	zero,r2,690
1000a860:	42000204 	addi	r8,r8,8
1000a864:	d8c02417 	ldw	r3,144(sp)
1000a868:	1c07883a 	add	r3,r3,r16
1000a86c:	d8c02415 	stw	r3,144(sp)
1000a870:	003f8c06 	br	1000a6a4 <__alt_data_end+0xf800a6a4>
1000a874:	d9402017 	ldw	r5,128(sp)
1000a878:	d9002117 	ldw	r4,132(sp)
1000a87c:	00051200 	call	10005120 <__swsetup_r>
1000a880:	1003c11e 	bne	r2,zero,1000b788 <___vfiprintf_internal_r+0x1224>
1000a884:	d9402017 	ldw	r5,128(sp)
1000a888:	00c00284 	movi	r3,10
1000a88c:	2880030b 	ldhu	r2,12(r5)
1000a890:	1080068c 	andi	r2,r2,26
1000a894:	10ff581e 	bne	r2,r3,1000a5f8 <__alt_data_end+0xf800a5f8>
1000a898:	d8c02017 	ldw	r3,128(sp)
1000a89c:	1880038f 	ldh	r2,14(r3)
1000a8a0:	103f5516 	blt	r2,zero,1000a5f8 <__alt_data_end+0xf800a5f8>
1000a8a4:	d9c02217 	ldw	r7,136(sp)
1000a8a8:	d9002117 	ldw	r4,132(sp)
1000a8ac:	a80d883a 	mov	r6,r21
1000a8b0:	180b883a 	mov	r5,r3
1000a8b4:	000ba8c0 	call	1000ba8c <__sbprintf>
1000a8b8:	dfc03517 	ldw	ra,212(sp)
1000a8bc:	df003417 	ldw	fp,208(sp)
1000a8c0:	ddc03317 	ldw	r23,204(sp)
1000a8c4:	dd803217 	ldw	r22,200(sp)
1000a8c8:	dd403117 	ldw	r21,196(sp)
1000a8cc:	dd003017 	ldw	r20,192(sp)
1000a8d0:	dcc02f17 	ldw	r19,188(sp)
1000a8d4:	dc802e17 	ldw	r18,184(sp)
1000a8d8:	dc402d17 	ldw	r17,180(sp)
1000a8dc:	dc002c17 	ldw	r16,176(sp)
1000a8e0:	dec03604 	addi	sp,sp,216
1000a8e4:	f800283a 	ret
1000a8e8:	000712c0 	call	1000712c <__sinit>
1000a8ec:	003f2f06 	br	1000a5ac <__alt_data_end+0xf800a5ac>
1000a8f0:	d8c02517 	ldw	r3,148(sp)
1000a8f4:	d8802215 	stw	r2,136(sp)
1000a8f8:	00c7c83a 	sub	r3,zero,r3
1000a8fc:	d8c02515 	stw	r3,148(sp)
1000a900:	8c400114 	ori	r17,r17,4
1000a904:	b0c00007 	ldb	r3,0(r22)
1000a908:	003f7306 	br	1000a6d8 <__alt_data_end+0xf800a6d8>
1000a90c:	00800c04 	movi	r2,48
1000a910:	d9402217 	ldw	r5,136(sp)
1000a914:	d8801d05 	stb	r2,116(sp)
1000a918:	00801e04 	movi	r2,120
1000a91c:	d8801d45 	stb	r2,117(sp)
1000a920:	d8001d85 	stb	zero,118(sp)
1000a924:	b811883a 	mov	r8,r23
1000a928:	28c00104 	addi	r3,r5,4
1000a92c:	2cc00017 	ldw	r19,0(r5)
1000a930:	0029883a 	mov	r20,zero
1000a934:	88800094 	ori	r2,r17,2
1000a938:	80032516 	blt	r16,zero,1000b5d0 <___vfiprintf_internal_r+0x106c>
1000a93c:	00bfdfc4 	movi	r2,-129
1000a940:	88a2703a 	and	r17,r17,r2
1000a944:	d8c02215 	stw	r3,136(sp)
1000a948:	8c400094 	ori	r17,r17,2
1000a94c:	98032a1e 	bne	r19,zero,1000b5f8 <___vfiprintf_internal_r+0x1094>
1000a950:	00840074 	movhi	r2,4097
1000a954:	108a3e04 	addi	r2,r2,10488
1000a958:	d8802615 	stw	r2,152(sp)
1000a95c:	002b883a 	mov	r21,zero
1000a960:	8001741e 	bne	r16,zero,1000af34 <___vfiprintf_internal_r+0x9d0>
1000a964:	0021883a 	mov	r16,zero
1000a968:	0029883a 	mov	r20,zero
1000a96c:	ddc01a04 	addi	r23,sp,104
1000a970:	8027883a 	mov	r19,r16
1000a974:	8500010e 	bge	r16,r20,1000a97c <___vfiprintf_internal_r+0x418>
1000a978:	a027883a 	mov	r19,r20
1000a97c:	ad403fcc 	andi	r21,r21,255
1000a980:	ad40201c 	xori	r21,r21,128
1000a984:	ad7fe004 	addi	r21,r21,-128
1000a988:	a8000126 	beq	r21,zero,1000a990 <___vfiprintf_internal_r+0x42c>
1000a98c:	9cc00044 	addi	r19,r19,1
1000a990:	89c0008c 	andi	r7,r17,2
1000a994:	38000126 	beq	r7,zero,1000a99c <___vfiprintf_internal_r+0x438>
1000a998:	9cc00084 	addi	r19,r19,2
1000a99c:	88c0210c 	andi	r3,r17,132
1000a9a0:	1801dd1e 	bne	r3,zero,1000b118 <___vfiprintf_internal_r+0xbb4>
1000a9a4:	d9402517 	ldw	r5,148(sp)
1000a9a8:	2cebc83a 	sub	r21,r5,r19
1000a9ac:	0541da0e 	bge	zero,r21,1000b118 <___vfiprintf_internal_r+0xbb4>
1000a9b0:	07000404 	movi	fp,16
1000a9b4:	d8801c17 	ldw	r2,112(sp)
1000a9b8:	e543be0e 	bge	fp,r21,1000b8b4 <___vfiprintf_internal_r+0x1350>
1000a9bc:	01440074 	movhi	r5,4097
1000a9c0:	294aa304 	addi	r5,r5,10892
1000a9c4:	dc002715 	stw	r16,156(sp)
1000a9c8:	d9801b17 	ldw	r6,108(sp)
1000a9cc:	a821883a 	mov	r16,r21
1000a9d0:	d9402315 	stw	r5,140(sp)
1000a9d4:	028001c4 	movi	r10,7
1000a9d8:	d9c02915 	stw	r7,164(sp)
1000a9dc:	182b883a 	mov	r21,r3
1000a9e0:	00000506 	br	1000a9f8 <___vfiprintf_internal_r+0x494>
1000a9e4:	31000084 	addi	r4,r6,2
1000a9e8:	42000204 	addi	r8,r8,8
1000a9ec:	180d883a 	mov	r6,r3
1000a9f0:	843ffc04 	addi	r16,r16,-16
1000a9f4:	e4000f0e 	bge	fp,r16,1000aa34 <___vfiprintf_internal_r+0x4d0>
1000a9f8:	01040074 	movhi	r4,4097
1000a9fc:	10800404 	addi	r2,r2,16
1000aa00:	30c00044 	addi	r3,r6,1
1000aa04:	210aa304 	addi	r4,r4,10892
1000aa08:	41000015 	stw	r4,0(r8)
1000aa0c:	47000115 	stw	fp,4(r8)
1000aa10:	d8801c15 	stw	r2,112(sp)
1000aa14:	d8c01b15 	stw	r3,108(sp)
1000aa18:	50fff20e 	bge	r10,r3,1000a9e4 <__alt_data_end+0xf800a9e4>
1000aa1c:	1001b21e 	bne	r2,zero,1000b0e8 <___vfiprintf_internal_r+0xb84>
1000aa20:	843ffc04 	addi	r16,r16,-16
1000aa24:	000d883a 	mov	r6,zero
1000aa28:	01000044 	movi	r4,1
1000aa2c:	d811883a 	mov	r8,sp
1000aa30:	e43ff116 	blt	fp,r16,1000a9f8 <__alt_data_end+0xf800a9f8>
1000aa34:	a807883a 	mov	r3,r21
1000aa38:	d9c02917 	ldw	r7,164(sp)
1000aa3c:	802b883a 	mov	r21,r16
1000aa40:	dc002717 	ldw	r16,156(sp)
1000aa44:	d9402317 	ldw	r5,140(sp)
1000aa48:	a885883a 	add	r2,r21,r2
1000aa4c:	45400115 	stw	r21,4(r8)
1000aa50:	41400015 	stw	r5,0(r8)
1000aa54:	d8801c15 	stw	r2,112(sp)
1000aa58:	d9001b15 	stw	r4,108(sp)
1000aa5c:	014001c4 	movi	r5,7
1000aa60:	29026216 	blt	r5,r4,1000b3ec <___vfiprintf_internal_r+0xe88>
1000aa64:	d9801d87 	ldb	r6,118(sp)
1000aa68:	42000204 	addi	r8,r8,8
1000aa6c:	21400044 	addi	r5,r4,1
1000aa70:	3001ae1e 	bne	r6,zero,1000b12c <___vfiprintf_internal_r+0xbc8>
1000aa74:	3801bb26 	beq	r7,zero,1000b164 <___vfiprintf_internal_r+0xc00>
1000aa78:	d9001d04 	addi	r4,sp,116
1000aa7c:	10800084 	addi	r2,r2,2
1000aa80:	41000015 	stw	r4,0(r8)
1000aa84:	01000084 	movi	r4,2
1000aa88:	41000115 	stw	r4,4(r8)
1000aa8c:	d8801c15 	stw	r2,112(sp)
1000aa90:	d9401b15 	stw	r5,108(sp)
1000aa94:	010001c4 	movi	r4,7
1000aa98:	2142680e 	bge	r4,r5,1000b43c <___vfiprintf_internal_r+0xed8>
1000aa9c:	1002b11e 	bne	r2,zero,1000b564 <___vfiprintf_internal_r+0x1000>
1000aaa0:	01802004 	movi	r6,128
1000aaa4:	01400044 	movi	r5,1
1000aaa8:	0009883a 	mov	r4,zero
1000aaac:	d811883a 	mov	r8,sp
1000aab0:	1981ae1e 	bne	r3,r6,1000b16c <___vfiprintf_internal_r+0xc08>
1000aab4:	d8c02517 	ldw	r3,148(sp)
1000aab8:	1cf9c83a 	sub	fp,r3,r19
1000aabc:	0701ab0e 	bge	zero,fp,1000b16c <___vfiprintf_internal_r+0xc08>
1000aac0:	05400404 	movi	r21,16
1000aac4:	af03a90e 	bge	r21,fp,1000b96c <___vfiprintf_internal_r+0x1408>
1000aac8:	01440074 	movhi	r5,4097
1000aacc:	294a9f04 	addi	r5,r5,10876
1000aad0:	d9402315 	stw	r5,140(sp)
1000aad4:	01c001c4 	movi	r7,7
1000aad8:	00000506 	br	1000aaf0 <___vfiprintf_internal_r+0x58c>
1000aadc:	21800084 	addi	r6,r4,2
1000aae0:	42000204 	addi	r8,r8,8
1000aae4:	1809883a 	mov	r4,r3
1000aae8:	e73ffc04 	addi	fp,fp,-16
1000aaec:	af000d0e 	bge	r21,fp,1000ab24 <___vfiprintf_internal_r+0x5c0>
1000aaf0:	10800404 	addi	r2,r2,16
1000aaf4:	20c00044 	addi	r3,r4,1
1000aaf8:	44800015 	stw	r18,0(r8)
1000aafc:	45400115 	stw	r21,4(r8)
1000ab00:	d8801c15 	stw	r2,112(sp)
1000ab04:	d8c01b15 	stw	r3,108(sp)
1000ab08:	38fff40e 	bge	r7,r3,1000aadc <__alt_data_end+0xf800aadc>
1000ab0c:	10022b1e 	bne	r2,zero,1000b3bc <___vfiprintf_internal_r+0xe58>
1000ab10:	e73ffc04 	addi	fp,fp,-16
1000ab14:	01800044 	movi	r6,1
1000ab18:	0009883a 	mov	r4,zero
1000ab1c:	d811883a 	mov	r8,sp
1000ab20:	af3ff316 	blt	r21,fp,1000aaf0 <__alt_data_end+0xf800aaf0>
1000ab24:	d8c02317 	ldw	r3,140(sp)
1000ab28:	1705883a 	add	r2,r2,fp
1000ab2c:	47000115 	stw	fp,4(r8)
1000ab30:	40c00015 	stw	r3,0(r8)
1000ab34:	d8801c15 	stw	r2,112(sp)
1000ab38:	d9801b15 	stw	r6,108(sp)
1000ab3c:	00c001c4 	movi	r3,7
1000ab40:	19829416 	blt	r3,r6,1000b594 <___vfiprintf_internal_r+0x1030>
1000ab44:	8521c83a 	sub	r16,r16,r20
1000ab48:	42000204 	addi	r8,r8,8
1000ab4c:	31400044 	addi	r5,r6,1
1000ab50:	3009883a 	mov	r4,r6
1000ab54:	04018716 	blt	zero,r16,1000b174 <___vfiprintf_internal_r+0xc10>
1000ab58:	a085883a 	add	r2,r20,r2
1000ab5c:	45c00015 	stw	r23,0(r8)
1000ab60:	45000115 	stw	r20,4(r8)
1000ab64:	d8801c15 	stw	r2,112(sp)
1000ab68:	d9401b15 	stw	r5,108(sp)
1000ab6c:	00c001c4 	movi	r3,7
1000ab70:	1941c20e 	bge	r3,r5,1000b27c <___vfiprintf_internal_r+0xd18>
1000ab74:	1002531e 	bne	r2,zero,1000b4c4 <___vfiprintf_internal_r+0xf60>
1000ab78:	d8001b15 	stw	zero,108(sp)
1000ab7c:	8c40010c 	andi	r17,r17,4
1000ab80:	88023226 	beq	r17,zero,1000b44c <___vfiprintf_internal_r+0xee8>
1000ab84:	d9002517 	ldw	r4,148(sp)
1000ab88:	24e3c83a 	sub	r17,r4,r19
1000ab8c:	04432916 	blt	zero,r17,1000b834 <___vfiprintf_internal_r+0x12d0>
1000ab90:	d8802517 	ldw	r2,148(sp)
1000ab94:	14c0010e 	bge	r2,r19,1000ab9c <___vfiprintf_internal_r+0x638>
1000ab98:	9805883a 	mov	r2,r19
1000ab9c:	d8c02417 	ldw	r3,144(sp)
1000aba0:	1887883a 	add	r3,r3,r2
1000aba4:	d8c02415 	stw	r3,144(sp)
1000aba8:	d8001b15 	stw	zero,108(sp)
1000abac:	d811883a 	mov	r8,sp
1000abb0:	003ea006 	br	1000a634 <__alt_data_end+0xf800a634>
1000abb4:	8c400814 	ori	r17,r17,32
1000abb8:	b0c00007 	ldb	r3,0(r22)
1000abbc:	003ec606 	br	1000a6d8 <__alt_data_end+0xf800a6d8>
1000abc0:	b0c00007 	ldb	r3,0(r22)
1000abc4:	00801b04 	movi	r2,108
1000abc8:	18832026 	beq	r3,r2,1000b84c <___vfiprintf_internal_r+0x12e8>
1000abcc:	8c400414 	ori	r17,r17,16
1000abd0:	003ec106 	br	1000a6d8 <__alt_data_end+0xf800a6d8>
1000abd4:	9cc03fcc 	andi	r19,r19,255
1000abd8:	b811883a 	mov	r8,r23
1000abdc:	9803981e 	bne	r19,zero,1000ba40 <___vfiprintf_internal_r+0x14dc>
1000abe0:	8880080c 	andi	r2,r17,32
1000abe4:	1002be26 	beq	r2,zero,1000b6e0 <___vfiprintf_internal_r+0x117c>
1000abe8:	d9002217 	ldw	r4,136(sp)
1000abec:	d9402417 	ldw	r5,144(sp)
1000abf0:	20800017 	ldw	r2,0(r4)
1000abf4:	2807d7fa 	srai	r3,r5,31
1000abf8:	21000104 	addi	r4,r4,4
1000abfc:	d9002215 	stw	r4,136(sp)
1000ac00:	11400015 	stw	r5,0(r2)
1000ac04:	10c00115 	stw	r3,4(r2)
1000ac08:	003e8a06 	br	1000a634 <__alt_data_end+0xf800a634>
1000ac0c:	9cc03fcc 	andi	r19,r19,255
1000ac10:	b811883a 	mov	r8,r23
1000ac14:	9803871e 	bne	r19,zero,1000ba34 <___vfiprintf_internal_r+0x14d0>
1000ac18:	8880080c 	andi	r2,r17,32
1000ac1c:	10009a26 	beq	r2,zero,1000ae88 <___vfiprintf_internal_r+0x924>
1000ac20:	d9002217 	ldw	r4,136(sp)
1000ac24:	d8001d85 	stb	zero,118(sp)
1000ac28:	20800204 	addi	r2,r4,8
1000ac2c:	24c00017 	ldw	r19,0(r4)
1000ac30:	25000117 	ldw	r20,4(r4)
1000ac34:	8002a416 	blt	r16,zero,1000b6c8 <___vfiprintf_internal_r+0x1164>
1000ac38:	013fdfc4 	movi	r4,-129
1000ac3c:	9d06b03a 	or	r3,r19,r20
1000ac40:	d8802215 	stw	r2,136(sp)
1000ac44:	8922703a 	and	r17,r17,r4
1000ac48:	18009b26 	beq	r3,zero,1000aeb8 <___vfiprintf_internal_r+0x954>
1000ac4c:	002b883a 	mov	r21,zero
1000ac50:	ddc01a04 	addi	r23,sp,104
1000ac54:	9806d0fa 	srli	r3,r19,3
1000ac58:	a008977a 	slli	r4,r20,29
1000ac5c:	a028d0fa 	srli	r20,r20,3
1000ac60:	9cc001cc 	andi	r19,r19,7
1000ac64:	98800c04 	addi	r2,r19,48
1000ac68:	bdffffc4 	addi	r23,r23,-1
1000ac6c:	20e6b03a 	or	r19,r4,r3
1000ac70:	b8800005 	stb	r2,0(r23)
1000ac74:	9d06b03a 	or	r3,r19,r20
1000ac78:	183ff61e 	bne	r3,zero,1000ac54 <__alt_data_end+0xf800ac54>
1000ac7c:	88c0004c 	andi	r3,r17,1
1000ac80:	18021f1e 	bne	r3,zero,1000b500 <___vfiprintf_internal_r+0xf9c>
1000ac84:	d9401e17 	ldw	r5,120(sp)
1000ac88:	2de9c83a 	sub	r20,r5,r23
1000ac8c:	003f3806 	br	1000a970 <__alt_data_end+0xf800a970>
1000ac90:	9cc03fcc 	andi	r19,r19,255
1000ac94:	b811883a 	mov	r8,r23
1000ac98:	98034f1e 	bne	r19,zero,1000b9d8 <___vfiprintf_internal_r+0x1474>
1000ac9c:	00840074 	movhi	r2,4097
1000aca0:	108a3e04 	addi	r2,r2,10488
1000aca4:	d8802615 	stw	r2,152(sp)
1000aca8:	8880080c 	andi	r2,r17,32
1000acac:	1000ac26 	beq	r2,zero,1000af60 <___vfiprintf_internal_r+0x9fc>
1000acb0:	d9002217 	ldw	r4,136(sp)
1000acb4:	24c00017 	ldw	r19,0(r4)
1000acb8:	25000117 	ldw	r20,4(r4)
1000acbc:	21000204 	addi	r4,r4,8
1000acc0:	d9002215 	stw	r4,136(sp)
1000acc4:	8880004c 	andi	r2,r17,1
1000acc8:	1001e726 	beq	r2,zero,1000b468 <___vfiprintf_internal_r+0xf04>
1000accc:	9d04b03a 	or	r2,r19,r20
1000acd0:	10025c1e 	bne	r2,zero,1000b644 <___vfiprintf_internal_r+0x10e0>
1000acd4:	d8001d85 	stb	zero,118(sp)
1000acd8:	80024416 	blt	r16,zero,1000b5ec <___vfiprintf_internal_r+0x1088>
1000acdc:	00bfdfc4 	movi	r2,-129
1000ace0:	88a2703a 	and	r17,r17,r2
1000ace4:	003f1d06 	br	1000a95c <__alt_data_end+0xf800a95c>
1000ace8:	d8c02217 	ldw	r3,136(sp)
1000acec:	04c00044 	movi	r19,1
1000acf0:	b811883a 	mov	r8,r23
1000acf4:	18800017 	ldw	r2,0(r3)
1000acf8:	18c00104 	addi	r3,r3,4
1000acfc:	d8001d85 	stb	zero,118(sp)
1000ad00:	d8801005 	stb	r2,64(sp)
1000ad04:	d8c02215 	stw	r3,136(sp)
1000ad08:	9829883a 	mov	r20,r19
1000ad0c:	ddc01004 	addi	r23,sp,64
1000ad10:	0021883a 	mov	r16,zero
1000ad14:	003f1e06 	br	1000a990 <__alt_data_end+0xf800a990>
1000ad18:	9cc03fcc 	andi	r19,r19,255
1000ad1c:	b811883a 	mov	r8,r23
1000ad20:	9803331e 	bne	r19,zero,1000b9f0 <___vfiprintf_internal_r+0x148c>
1000ad24:	8880080c 	andi	r2,r17,32
1000ad28:	10004826 	beq	r2,zero,1000ae4c <___vfiprintf_internal_r+0x8e8>
1000ad2c:	d9002217 	ldw	r4,136(sp)
1000ad30:	20800117 	ldw	r2,4(r4)
1000ad34:	24c00017 	ldw	r19,0(r4)
1000ad38:	21000204 	addi	r4,r4,8
1000ad3c:	d9002215 	stw	r4,136(sp)
1000ad40:	1029883a 	mov	r20,r2
1000ad44:	10024c16 	blt	r2,zero,1000b678 <___vfiprintf_internal_r+0x1114>
1000ad48:	dd401d83 	ldbu	r21,118(sp)
1000ad4c:	80007116 	blt	r16,zero,1000af14 <___vfiprintf_internal_r+0x9b0>
1000ad50:	00ffdfc4 	movi	r3,-129
1000ad54:	9d04b03a 	or	r2,r19,r20
1000ad58:	88e2703a 	and	r17,r17,r3
1000ad5c:	1000d126 	beq	r2,zero,1000b0a4 <___vfiprintf_internal_r+0xb40>
1000ad60:	a0023526 	beq	r20,zero,1000b638 <___vfiprintf_internal_r+0x10d4>
1000ad64:	ddc01a04 	addi	r23,sp,104
1000ad68:	4039883a 	mov	fp,r8
1000ad6c:	9809883a 	mov	r4,r19
1000ad70:	a00b883a 	mov	r5,r20
1000ad74:	01800284 	movi	r6,10
1000ad78:	000f883a 	mov	r7,zero
1000ad7c:	000ca900 	call	1000ca90 <__umoddi3>
1000ad80:	10800c04 	addi	r2,r2,48
1000ad84:	bdffffc4 	addi	r23,r23,-1
1000ad88:	9809883a 	mov	r4,r19
1000ad8c:	a00b883a 	mov	r5,r20
1000ad90:	b8800005 	stb	r2,0(r23)
1000ad94:	01800284 	movi	r6,10
1000ad98:	000f883a 	mov	r7,zero
1000ad9c:	000c4940 	call	1000c494 <__udivdi3>
1000ada0:	1027883a 	mov	r19,r2
1000ada4:	10c4b03a 	or	r2,r2,r3
1000ada8:	1829883a 	mov	r20,r3
1000adac:	103fef1e 	bne	r2,zero,1000ad6c <__alt_data_end+0xf800ad6c>
1000adb0:	d9001e17 	ldw	r4,120(sp)
1000adb4:	e011883a 	mov	r8,fp
1000adb8:	25e9c83a 	sub	r20,r4,r23
1000adbc:	003eec06 	br	1000a970 <__alt_data_end+0xf800a970>
1000adc0:	d8802307 	ldb	r2,140(sp)
1000adc4:	1002361e 	bne	r2,zero,1000b6a0 <___vfiprintf_internal_r+0x113c>
1000adc8:	00c00804 	movi	r3,32
1000adcc:	d8c02305 	stb	r3,140(sp)
1000add0:	04c00044 	movi	r19,1
1000add4:	b0c00007 	ldb	r3,0(r22)
1000add8:	003e3f06 	br	1000a6d8 <__alt_data_end+0xf800a6d8>
1000addc:	8c400054 	ori	r17,r17,1
1000ade0:	b0c00007 	ldb	r3,0(r22)
1000ade4:	003e3c06 	br	1000a6d8 <__alt_data_end+0xf800a6d8>
1000ade8:	8c402014 	ori	r17,r17,128
1000adec:	b0c00007 	ldb	r3,0(r22)
1000adf0:	003e3906 	br	1000a6d8 <__alt_data_end+0xf800a6d8>
1000adf4:	dc002715 	stw	r16,156(sp)
1000adf8:	d8002515 	stw	zero,148(sp)
1000adfc:	1f3ff404 	addi	fp,r3,-48
1000ae00:	0009883a 	mov	r4,zero
1000ae04:	b021883a 	mov	r16,r22
1000ae08:	01400284 	movi	r5,10
1000ae0c:	0002b6c0 	call	10002b6c <__mulsi3>
1000ae10:	80c00007 	ldb	r3,0(r16)
1000ae14:	e089883a 	add	r4,fp,r2
1000ae18:	b5800044 	addi	r22,r22,1
1000ae1c:	1f3ff404 	addi	fp,r3,-48
1000ae20:	b021883a 	mov	r16,r22
1000ae24:	af3ff82e 	bgeu	r21,fp,1000ae08 <__alt_data_end+0xf800ae08>
1000ae28:	d9002515 	stw	r4,148(sp)
1000ae2c:	dc002717 	ldw	r16,156(sp)
1000ae30:	003e2a06 	br	1000a6dc <__alt_data_end+0xf800a6dc>
1000ae34:	9cc03fcc 	andi	r19,r19,255
1000ae38:	b811883a 	mov	r8,r23
1000ae3c:	9802e91e 	bne	r19,zero,1000b9e4 <___vfiprintf_internal_r+0x1480>
1000ae40:	8c400414 	ori	r17,r17,16
1000ae44:	8880080c 	andi	r2,r17,32
1000ae48:	103fb81e 	bne	r2,zero,1000ad2c <__alt_data_end+0xf800ad2c>
1000ae4c:	8880040c 	andi	r2,r17,16
1000ae50:	10022e26 	beq	r2,zero,1000b70c <___vfiprintf_internal_r+0x11a8>
1000ae54:	d9402217 	ldw	r5,136(sp)
1000ae58:	2cc00017 	ldw	r19,0(r5)
1000ae5c:	29400104 	addi	r5,r5,4
1000ae60:	d9402215 	stw	r5,136(sp)
1000ae64:	9829d7fa 	srai	r20,r19,31
1000ae68:	a005883a 	mov	r2,r20
1000ae6c:	003fb506 	br	1000ad44 <__alt_data_end+0xf800ad44>
1000ae70:	9cc03fcc 	andi	r19,r19,255
1000ae74:	b811883a 	mov	r8,r23
1000ae78:	9802fa1e 	bne	r19,zero,1000ba64 <___vfiprintf_internal_r+0x1500>
1000ae7c:	8c400414 	ori	r17,r17,16
1000ae80:	8880080c 	andi	r2,r17,32
1000ae84:	103f661e 	bne	r2,zero,1000ac20 <__alt_data_end+0xf800ac20>
1000ae88:	8880040c 	andi	r2,r17,16
1000ae8c:	10020626 	beq	r2,zero,1000b6a8 <___vfiprintf_internal_r+0x1144>
1000ae90:	d9402217 	ldw	r5,136(sp)
1000ae94:	d8001d85 	stb	zero,118(sp)
1000ae98:	0029883a 	mov	r20,zero
1000ae9c:	28800104 	addi	r2,r5,4
1000aea0:	2cc00017 	ldw	r19,0(r5)
1000aea4:	80020816 	blt	r16,zero,1000b6c8 <___vfiprintf_internal_r+0x1164>
1000aea8:	00ffdfc4 	movi	r3,-129
1000aeac:	d8802215 	stw	r2,136(sp)
1000aeb0:	88e2703a 	and	r17,r17,r3
1000aeb4:	983f651e 	bne	r19,zero,1000ac4c <__alt_data_end+0xf800ac4c>
1000aeb8:	002b883a 	mov	r21,zero
1000aebc:	8002cf26 	beq	r16,zero,1000b9fc <___vfiprintf_internal_r+0x1498>
1000aec0:	0027883a 	mov	r19,zero
1000aec4:	0029883a 	mov	r20,zero
1000aec8:	003f6106 	br	1000ac50 <__alt_data_end+0xf800ac50>
1000aecc:	9cc03fcc 	andi	r19,r19,255
1000aed0:	b811883a 	mov	r8,r23
1000aed4:	9802e01e 	bne	r19,zero,1000ba58 <___vfiprintf_internal_r+0x14f4>
1000aed8:	8c400414 	ori	r17,r17,16
1000aedc:	8880080c 	andi	r2,r17,32
1000aee0:	1000641e 	bne	r2,zero,1000b074 <___vfiprintf_internal_r+0xb10>
1000aee4:	8880040c 	andi	r2,r17,16
1000aee8:	1001c81e 	bne	r2,zero,1000b60c <___vfiprintf_internal_r+0x10a8>
1000aeec:	8880100c 	andi	r2,r17,64
1000aef0:	d8001d85 	stb	zero,118(sp)
1000aef4:	1002281e 	bne	r2,zero,1000b798 <___vfiprintf_internal_r+0x1234>
1000aef8:	d9002217 	ldw	r4,136(sp)
1000aefc:	0029883a 	mov	r20,zero
1000af00:	20800104 	addi	r2,r4,4
1000af04:	24c00017 	ldw	r19,0(r4)
1000af08:	8001c60e 	bge	r16,zero,1000b624 <___vfiprintf_internal_r+0x10c0>
1000af0c:	d8802215 	stw	r2,136(sp)
1000af10:	002b883a 	mov	r21,zero
1000af14:	9d04b03a 	or	r2,r19,r20
1000af18:	103f911e 	bne	r2,zero,1000ad60 <__alt_data_end+0xf800ad60>
1000af1c:	00800044 	movi	r2,1
1000af20:	10803fcc 	andi	r2,r2,255
1000af24:	00c00044 	movi	r3,1
1000af28:	10c05f26 	beq	r2,r3,1000b0a8 <___vfiprintf_internal_r+0xb44>
1000af2c:	00c00084 	movi	r3,2
1000af30:	10ffe31e 	bne	r2,r3,1000aec0 <__alt_data_end+0xf800aec0>
1000af34:	0027883a 	mov	r19,zero
1000af38:	0029883a 	mov	r20,zero
1000af3c:	00015106 	br	1000b484 <___vfiprintf_internal_r+0xf20>
1000af40:	9cc03fcc 	andi	r19,r19,255
1000af44:	b811883a 	mov	r8,r23
1000af48:	9802c01e 	bne	r19,zero,1000ba4c <___vfiprintf_internal_r+0x14e8>
1000af4c:	01440074 	movhi	r5,4097
1000af50:	294a3904 	addi	r5,r5,10468
1000af54:	d9402615 	stw	r5,152(sp)
1000af58:	8880080c 	andi	r2,r17,32
1000af5c:	103f541e 	bne	r2,zero,1000acb0 <__alt_data_end+0xf800acb0>
1000af60:	8880040c 	andi	r2,r17,16
1000af64:	1001f226 	beq	r2,zero,1000b730 <___vfiprintf_internal_r+0x11cc>
1000af68:	d9402217 	ldw	r5,136(sp)
1000af6c:	0029883a 	mov	r20,zero
1000af70:	2cc00017 	ldw	r19,0(r5)
1000af74:	29400104 	addi	r5,r5,4
1000af78:	d9402215 	stw	r5,136(sp)
1000af7c:	003f5106 	br	1000acc4 <__alt_data_end+0xf800acc4>
1000af80:	d8c02217 	ldw	r3,136(sp)
1000af84:	b811883a 	mov	r8,r23
1000af88:	d8001d85 	stb	zero,118(sp)
1000af8c:	1dc00017 	ldw	r23,0(r3)
1000af90:	1f000104 	addi	fp,r3,4
1000af94:	b8025926 	beq	r23,zero,1000b8fc <___vfiprintf_internal_r+0x1398>
1000af98:	80023316 	blt	r16,zero,1000b868 <___vfiprintf_internal_r+0x1304>
1000af9c:	800d883a 	mov	r6,r16
1000afa0:	000b883a 	mov	r5,zero
1000afa4:	b809883a 	mov	r4,r23
1000afa8:	da002a15 	stw	r8,168(sp)
1000afac:	00086a40 	call	100086a4 <memchr>
1000afb0:	da002a17 	ldw	r8,168(sp)
1000afb4:	10026826 	beq	r2,zero,1000b958 <___vfiprintf_internal_r+0x13f4>
1000afb8:	15e9c83a 	sub	r20,r2,r23
1000afbc:	dd401d83 	ldbu	r21,118(sp)
1000afc0:	df002215 	stw	fp,136(sp)
1000afc4:	0021883a 	mov	r16,zero
1000afc8:	003e6906 	br	1000a970 <__alt_data_end+0xf800a970>
1000afcc:	9cc03fcc 	andi	r19,r19,255
1000afd0:	b811883a 	mov	r8,r23
1000afd4:	983fc126 	beq	r19,zero,1000aedc <__alt_data_end+0xf800aedc>
1000afd8:	d8c02303 	ldbu	r3,140(sp)
1000afdc:	d8c01d85 	stb	r3,118(sp)
1000afe0:	003fbe06 	br	1000aedc <__alt_data_end+0xf800aedc>
1000afe4:	d9002217 	ldw	r4,136(sp)
1000afe8:	d9402217 	ldw	r5,136(sp)
1000afec:	21000017 	ldw	r4,0(r4)
1000aff0:	28800104 	addi	r2,r5,4
1000aff4:	d9002515 	stw	r4,148(sp)
1000aff8:	203e3d16 	blt	r4,zero,1000a8f0 <__alt_data_end+0xf800a8f0>
1000affc:	d8802215 	stw	r2,136(sp)
1000b000:	b0c00007 	ldb	r3,0(r22)
1000b004:	003db406 	br	1000a6d8 <__alt_data_end+0xf800a6d8>
1000b008:	00c00ac4 	movi	r3,43
1000b00c:	d8c02305 	stb	r3,140(sp)
1000b010:	04c00044 	movi	r19,1
1000b014:	b0c00007 	ldb	r3,0(r22)
1000b018:	003daf06 	br	1000a6d8 <__alt_data_end+0xf800a6d8>
1000b01c:	b0c00007 	ldb	r3,0(r22)
1000b020:	01000a84 	movi	r4,42
1000b024:	b4000044 	addi	r16,r22,1
1000b028:	19025e26 	beq	r3,r4,1000b9a4 <___vfiprintf_internal_r+0x1440>
1000b02c:	1f3ff404 	addi	fp,r3,-48
1000b030:	0009883a 	mov	r4,zero
1000b034:	af025236 	bltu	r21,fp,1000b980 <___vfiprintf_internal_r+0x141c>
1000b038:	01400284 	movi	r5,10
1000b03c:	0002b6c0 	call	10002b6c <__mulsi3>
1000b040:	80c00007 	ldb	r3,0(r16)
1000b044:	1709883a 	add	r4,r2,fp
1000b048:	85800044 	addi	r22,r16,1
1000b04c:	1f3ff404 	addi	fp,r3,-48
1000b050:	b021883a 	mov	r16,r22
1000b054:	af3ff82e 	bgeu	r21,fp,1000b038 <__alt_data_end+0xf800b038>
1000b058:	2021883a 	mov	r16,r4
1000b05c:	203d9f0e 	bge	r4,zero,1000a6dc <__alt_data_end+0xf800a6dc>
1000b060:	043fffc4 	movi	r16,-1
1000b064:	003d9d06 	br	1000a6dc <__alt_data_end+0xf800a6dc>
1000b068:	8c401014 	ori	r17,r17,64
1000b06c:	b0c00007 	ldb	r3,0(r22)
1000b070:	003d9906 	br	1000a6d8 <__alt_data_end+0xf800a6d8>
1000b074:	d9002217 	ldw	r4,136(sp)
1000b078:	d8001d85 	stb	zero,118(sp)
1000b07c:	20c00204 	addi	r3,r4,8
1000b080:	24c00017 	ldw	r19,0(r4)
1000b084:	25000117 	ldw	r20,4(r4)
1000b088:	8001e716 	blt	r16,zero,1000b828 <___vfiprintf_internal_r+0x12c4>
1000b08c:	013fdfc4 	movi	r4,-129
1000b090:	9d04b03a 	or	r2,r19,r20
1000b094:	d8c02215 	stw	r3,136(sp)
1000b098:	8922703a 	and	r17,r17,r4
1000b09c:	002b883a 	mov	r21,zero
1000b0a0:	103f2f1e 	bne	r2,zero,1000ad60 <__alt_data_end+0xf800ad60>
1000b0a4:	803e2f26 	beq	r16,zero,1000a964 <__alt_data_end+0xf800a964>
1000b0a8:	0027883a 	mov	r19,zero
1000b0ac:	9cc00c04 	addi	r19,r19,48
1000b0b0:	dcc019c5 	stb	r19,103(sp)
1000b0b4:	dd002817 	ldw	r20,160(sp)
1000b0b8:	ddc019c4 	addi	r23,sp,103
1000b0bc:	003e2c06 	br	1000a970 <__alt_data_end+0xf800a970>
1000b0c0:	9cc03fcc 	andi	r19,r19,255
1000b0c4:	b811883a 	mov	r8,r23
1000b0c8:	9802571e 	bne	r19,zero,1000ba28 <___vfiprintf_internal_r+0x14c4>
1000b0cc:	18005726 	beq	r3,zero,1000b22c <___vfiprintf_internal_r+0xcc8>
1000b0d0:	04c00044 	movi	r19,1
1000b0d4:	d8c01005 	stb	r3,64(sp)
1000b0d8:	d8001d85 	stb	zero,118(sp)
1000b0dc:	9829883a 	mov	r20,r19
1000b0e0:	ddc01004 	addi	r23,sp,64
1000b0e4:	003f0a06 	br	1000ad10 <__alt_data_end+0xf800ad10>
1000b0e8:	d9402017 	ldw	r5,128(sp)
1000b0ec:	d9002117 	ldw	r4,132(sp)
1000b0f0:	d9801a04 	addi	r6,sp,104
1000b0f4:	da802a15 	stw	r10,168(sp)
1000b0f8:	000a4500 	call	1000a450 <__sprint_r.part.0>
1000b0fc:	da802a17 	ldw	r10,168(sp)
1000b100:	1000501e 	bne	r2,zero,1000b244 <___vfiprintf_internal_r+0xce0>
1000b104:	d9801b17 	ldw	r6,108(sp)
1000b108:	d8801c17 	ldw	r2,112(sp)
1000b10c:	d811883a 	mov	r8,sp
1000b110:	31000044 	addi	r4,r6,1
1000b114:	003e3606 	br	1000a9f0 <__alt_data_end+0xf800a9f0>
1000b118:	d9001b17 	ldw	r4,108(sp)
1000b11c:	d8801c17 	ldw	r2,112(sp)
1000b120:	21400044 	addi	r5,r4,1
1000b124:	d9801d87 	ldb	r6,118(sp)
1000b128:	303e5226 	beq	r6,zero,1000aa74 <__alt_data_end+0xf800aa74>
1000b12c:	01800044 	movi	r6,1
1000b130:	d9001d84 	addi	r4,sp,118
1000b134:	1185883a 	add	r2,r2,r6
1000b138:	41000015 	stw	r4,0(r8)
1000b13c:	41800115 	stw	r6,4(r8)
1000b140:	d8801c15 	stw	r2,112(sp)
1000b144:	d9401b15 	stw	r5,108(sp)
1000b148:	010001c4 	movi	r4,7
1000b14c:	2140b00e 	bge	r4,r5,1000b410 <___vfiprintf_internal_r+0xeac>
1000b150:	1000f61e 	bne	r2,zero,1000b52c <___vfiprintf_internal_r+0xfc8>
1000b154:	3800b31e 	bne	r7,zero,1000b424 <___vfiprintf_internal_r+0xec0>
1000b158:	0009883a 	mov	r4,zero
1000b15c:	300b883a 	mov	r5,r6
1000b160:	d811883a 	mov	r8,sp
1000b164:	01802004 	movi	r6,128
1000b168:	19be5226 	beq	r3,r6,1000aab4 <__alt_data_end+0xf800aab4>
1000b16c:	8521c83a 	sub	r16,r16,r20
1000b170:	043e790e 	bge	zero,r16,1000ab58 <__alt_data_end+0xf800ab58>
1000b174:	05400404 	movi	r21,16
1000b178:	ac01b00e 	bge	r21,r16,1000b83c <___vfiprintf_internal_r+0x12d8>
1000b17c:	01440074 	movhi	r5,4097
1000b180:	294a9f04 	addi	r5,r5,10876
1000b184:	d9402315 	stw	r5,140(sp)
1000b188:	070001c4 	movi	fp,7
1000b18c:	00000506 	br	1000b1a4 <___vfiprintf_internal_r+0xc40>
1000b190:	21400084 	addi	r5,r4,2
1000b194:	42000204 	addi	r8,r8,8
1000b198:	1809883a 	mov	r4,r3
1000b19c:	843ffc04 	addi	r16,r16,-16
1000b1a0:	ac000d0e 	bge	r21,r16,1000b1d8 <___vfiprintf_internal_r+0xc74>
1000b1a4:	10800404 	addi	r2,r2,16
1000b1a8:	20c00044 	addi	r3,r4,1
1000b1ac:	44800015 	stw	r18,0(r8)
1000b1b0:	45400115 	stw	r21,4(r8)
1000b1b4:	d8801c15 	stw	r2,112(sp)
1000b1b8:	d8c01b15 	stw	r3,108(sp)
1000b1bc:	e0fff40e 	bge	fp,r3,1000b190 <__alt_data_end+0xf800b190>
1000b1c0:	1000101e 	bne	r2,zero,1000b204 <___vfiprintf_internal_r+0xca0>
1000b1c4:	843ffc04 	addi	r16,r16,-16
1000b1c8:	01400044 	movi	r5,1
1000b1cc:	0009883a 	mov	r4,zero
1000b1d0:	d811883a 	mov	r8,sp
1000b1d4:	ac3ff316 	blt	r21,r16,1000b1a4 <__alt_data_end+0xf800b1a4>
1000b1d8:	d8c02317 	ldw	r3,140(sp)
1000b1dc:	1405883a 	add	r2,r2,r16
1000b1e0:	44000115 	stw	r16,4(r8)
1000b1e4:	40c00015 	stw	r3,0(r8)
1000b1e8:	d8801c15 	stw	r2,112(sp)
1000b1ec:	d9401b15 	stw	r5,108(sp)
1000b1f0:	00c001c4 	movi	r3,7
1000b1f4:	19401916 	blt	r3,r5,1000b25c <___vfiprintf_internal_r+0xcf8>
1000b1f8:	42000204 	addi	r8,r8,8
1000b1fc:	29400044 	addi	r5,r5,1
1000b200:	003e5506 	br	1000ab58 <__alt_data_end+0xf800ab58>
1000b204:	d9402017 	ldw	r5,128(sp)
1000b208:	d9002117 	ldw	r4,132(sp)
1000b20c:	d9801a04 	addi	r6,sp,104
1000b210:	000a4500 	call	1000a450 <__sprint_r.part.0>
1000b214:	10000b1e 	bne	r2,zero,1000b244 <___vfiprintf_internal_r+0xce0>
1000b218:	d9001b17 	ldw	r4,108(sp)
1000b21c:	d8801c17 	ldw	r2,112(sp)
1000b220:	d811883a 	mov	r8,sp
1000b224:	21400044 	addi	r5,r4,1
1000b228:	003fdc06 	br	1000b19c <__alt_data_end+0xf800b19c>
1000b22c:	d8801c17 	ldw	r2,112(sp)
1000b230:	10000426 	beq	r2,zero,1000b244 <___vfiprintf_internal_r+0xce0>
1000b234:	d9402017 	ldw	r5,128(sp)
1000b238:	d9002117 	ldw	r4,132(sp)
1000b23c:	d9801a04 	addi	r6,sp,104
1000b240:	000a4500 	call	1000a450 <__sprint_r.part.0>
1000b244:	d9402017 	ldw	r5,128(sp)
1000b248:	2880030b 	ldhu	r2,12(r5)
1000b24c:	1080100c 	andi	r2,r2,64
1000b250:	10014d1e 	bne	r2,zero,1000b788 <___vfiprintf_internal_r+0x1224>
1000b254:	d8802417 	ldw	r2,144(sp)
1000b258:	003d9706 	br	1000a8b8 <__alt_data_end+0xf800a8b8>
1000b25c:	1000d21e 	bne	r2,zero,1000b5a8 <___vfiprintf_internal_r+0x1044>
1000b260:	00c00044 	movi	r3,1
1000b264:	a005883a 	mov	r2,r20
1000b268:	ddc00015 	stw	r23,0(sp)
1000b26c:	dd000115 	stw	r20,4(sp)
1000b270:	dd001c15 	stw	r20,112(sp)
1000b274:	d8c01b15 	stw	r3,108(sp)
1000b278:	d811883a 	mov	r8,sp
1000b27c:	42000204 	addi	r8,r8,8
1000b280:	8c40010c 	andi	r17,r17,4
1000b284:	88004026 	beq	r17,zero,1000b388 <___vfiprintf_internal_r+0xe24>
1000b288:	d9002517 	ldw	r4,148(sp)
1000b28c:	24e3c83a 	sub	r17,r4,r19
1000b290:	04403d0e 	bge	zero,r17,1000b388 <___vfiprintf_internal_r+0xe24>
1000b294:	04000404 	movi	r16,16
1000b298:	8441a90e 	bge	r16,r17,1000b940 <___vfiprintf_internal_r+0x13dc>
1000b29c:	00c40074 	movhi	r3,4097
1000b2a0:	18caa304 	addi	r3,r3,10892
1000b2a4:	d9001b17 	ldw	r4,108(sp)
1000b2a8:	d8c02315 	stw	r3,140(sp)
1000b2ac:	050001c4 	movi	r20,7
1000b2b0:	dd402117 	ldw	r21,132(sp)
1000b2b4:	ddc02017 	ldw	r23,128(sp)
1000b2b8:	00000506 	br	1000b2d0 <___vfiprintf_internal_r+0xd6c>
1000b2bc:	21400084 	addi	r5,r4,2
1000b2c0:	42000204 	addi	r8,r8,8
1000b2c4:	1809883a 	mov	r4,r3
1000b2c8:	8c7ffc04 	addi	r17,r17,-16
1000b2cc:	84400f0e 	bge	r16,r17,1000b30c <___vfiprintf_internal_r+0xda8>
1000b2d0:	01440074 	movhi	r5,4097
1000b2d4:	10800404 	addi	r2,r2,16
1000b2d8:	20c00044 	addi	r3,r4,1
1000b2dc:	294aa304 	addi	r5,r5,10892
1000b2e0:	41400015 	stw	r5,0(r8)
1000b2e4:	44000115 	stw	r16,4(r8)
1000b2e8:	d8801c15 	stw	r2,112(sp)
1000b2ec:	d8c01b15 	stw	r3,108(sp)
1000b2f0:	a0fff20e 	bge	r20,r3,1000b2bc <__alt_data_end+0xf800b2bc>
1000b2f4:	1000141e 	bne	r2,zero,1000b348 <___vfiprintf_internal_r+0xde4>
1000b2f8:	8c7ffc04 	addi	r17,r17,-16
1000b2fc:	01400044 	movi	r5,1
1000b300:	0009883a 	mov	r4,zero
1000b304:	d811883a 	mov	r8,sp
1000b308:	847ff116 	blt	r16,r17,1000b2d0 <__alt_data_end+0xf800b2d0>
1000b30c:	d8c02317 	ldw	r3,140(sp)
1000b310:	1445883a 	add	r2,r2,r17
1000b314:	44400115 	stw	r17,4(r8)
1000b318:	40c00015 	stw	r3,0(r8)
1000b31c:	d8801c15 	stw	r2,112(sp)
1000b320:	d9401b15 	stw	r5,108(sp)
1000b324:	00c001c4 	movi	r3,7
1000b328:	1940170e 	bge	r3,r5,1000b388 <___vfiprintf_internal_r+0xe24>
1000b32c:	1000101e 	bne	r2,zero,1000b370 <___vfiprintf_internal_r+0xe0c>
1000b330:	d8802517 	ldw	r2,148(sp)
1000b334:	14c11616 	blt	r2,r19,1000b790 <___vfiprintf_internal_r+0x122c>
1000b338:	d9002417 	ldw	r4,144(sp)
1000b33c:	2089883a 	add	r4,r4,r2
1000b340:	d9002415 	stw	r4,144(sp)
1000b344:	003e1806 	br	1000aba8 <__alt_data_end+0xf800aba8>
1000b348:	d9801a04 	addi	r6,sp,104
1000b34c:	b80b883a 	mov	r5,r23
1000b350:	a809883a 	mov	r4,r21
1000b354:	000a4500 	call	1000a450 <__sprint_r.part.0>
1000b358:	103fba1e 	bne	r2,zero,1000b244 <__alt_data_end+0xf800b244>
1000b35c:	d9001b17 	ldw	r4,108(sp)
1000b360:	d8801c17 	ldw	r2,112(sp)
1000b364:	d811883a 	mov	r8,sp
1000b368:	21400044 	addi	r5,r4,1
1000b36c:	003fd606 	br	1000b2c8 <__alt_data_end+0xf800b2c8>
1000b370:	d9402017 	ldw	r5,128(sp)
1000b374:	d9002117 	ldw	r4,132(sp)
1000b378:	d9801a04 	addi	r6,sp,104
1000b37c:	000a4500 	call	1000a450 <__sprint_r.part.0>
1000b380:	103fb01e 	bne	r2,zero,1000b244 <__alt_data_end+0xf800b244>
1000b384:	d8801c17 	ldw	r2,112(sp)
1000b388:	d8c02517 	ldw	r3,148(sp)
1000b38c:	1cc0010e 	bge	r3,r19,1000b394 <___vfiprintf_internal_r+0xe30>
1000b390:	9807883a 	mov	r3,r19
1000b394:	d9002417 	ldw	r4,144(sp)
1000b398:	20c9883a 	add	r4,r4,r3
1000b39c:	d9002415 	stw	r4,144(sp)
1000b3a0:	103e0126 	beq	r2,zero,1000aba8 <__alt_data_end+0xf800aba8>
1000b3a4:	d9402017 	ldw	r5,128(sp)
1000b3a8:	d9002117 	ldw	r4,132(sp)
1000b3ac:	d9801a04 	addi	r6,sp,104
1000b3b0:	000a4500 	call	1000a450 <__sprint_r.part.0>
1000b3b4:	103dfc26 	beq	r2,zero,1000aba8 <__alt_data_end+0xf800aba8>
1000b3b8:	003fa206 	br	1000b244 <__alt_data_end+0xf800b244>
1000b3bc:	d9402017 	ldw	r5,128(sp)
1000b3c0:	d9002117 	ldw	r4,132(sp)
1000b3c4:	d9801a04 	addi	r6,sp,104
1000b3c8:	d9c02b15 	stw	r7,172(sp)
1000b3cc:	000a4500 	call	1000a450 <__sprint_r.part.0>
1000b3d0:	d9c02b17 	ldw	r7,172(sp)
1000b3d4:	103f9b1e 	bne	r2,zero,1000b244 <__alt_data_end+0xf800b244>
1000b3d8:	d9001b17 	ldw	r4,108(sp)
1000b3dc:	d8801c17 	ldw	r2,112(sp)
1000b3e0:	d811883a 	mov	r8,sp
1000b3e4:	21800044 	addi	r6,r4,1
1000b3e8:	003dbf06 	br	1000aae8 <__alt_data_end+0xf800aae8>
1000b3ec:	1000d81e 	bne	r2,zero,1000b750 <___vfiprintf_internal_r+0x11ec>
1000b3f0:	d9001d87 	ldb	r4,118(sp)
1000b3f4:	20000a26 	beq	r4,zero,1000b420 <___vfiprintf_internal_r+0xebc>
1000b3f8:	00800044 	movi	r2,1
1000b3fc:	d9001d84 	addi	r4,sp,118
1000b400:	100b883a 	mov	r5,r2
1000b404:	d9000015 	stw	r4,0(sp)
1000b408:	d8800115 	stw	r2,4(sp)
1000b40c:	d811883a 	mov	r8,sp
1000b410:	2809883a 	mov	r4,r5
1000b414:	42000204 	addi	r8,r8,8
1000b418:	29400044 	addi	r5,r5,1
1000b41c:	003d9506 	br	1000aa74 <__alt_data_end+0xf800aa74>
1000b420:	3800fd26 	beq	r7,zero,1000b818 <___vfiprintf_internal_r+0x12b4>
1000b424:	00800084 	movi	r2,2
1000b428:	d9001d04 	addi	r4,sp,116
1000b42c:	d9000015 	stw	r4,0(sp)
1000b430:	d8800115 	stw	r2,4(sp)
1000b434:	01400044 	movi	r5,1
1000b438:	d811883a 	mov	r8,sp
1000b43c:	2809883a 	mov	r4,r5
1000b440:	42000204 	addi	r8,r8,8
1000b444:	29400044 	addi	r5,r5,1
1000b448:	003f4606 	br	1000b164 <__alt_data_end+0xf800b164>
1000b44c:	d8802517 	ldw	r2,148(sp)
1000b450:	14c0010e 	bge	r2,r19,1000b458 <___vfiprintf_internal_r+0xef4>
1000b454:	9805883a 	mov	r2,r19
1000b458:	d9402417 	ldw	r5,144(sp)
1000b45c:	288b883a 	add	r5,r5,r2
1000b460:	d9402415 	stw	r5,144(sp)
1000b464:	003dd006 	br	1000aba8 <__alt_data_end+0xf800aba8>
1000b468:	d8001d85 	stb	zero,118(sp)
1000b46c:	80005d16 	blt	r16,zero,1000b5e4 <___vfiprintf_internal_r+0x1080>
1000b470:	00ffdfc4 	movi	r3,-129
1000b474:	9d04b03a 	or	r2,r19,r20
1000b478:	88e2703a 	and	r17,r17,r3
1000b47c:	103d3726 	beq	r2,zero,1000a95c <__alt_data_end+0xf800a95c>
1000b480:	002b883a 	mov	r21,zero
1000b484:	d9002617 	ldw	r4,152(sp)
1000b488:	ddc01a04 	addi	r23,sp,104
1000b48c:	988003cc 	andi	r2,r19,15
1000b490:	a006973a 	slli	r3,r20,28
1000b494:	2085883a 	add	r2,r4,r2
1000b498:	9826d13a 	srli	r19,r19,4
1000b49c:	10800003 	ldbu	r2,0(r2)
1000b4a0:	a028d13a 	srli	r20,r20,4
1000b4a4:	bdffffc4 	addi	r23,r23,-1
1000b4a8:	1ce6b03a 	or	r19,r3,r19
1000b4ac:	b8800005 	stb	r2,0(r23)
1000b4b0:	9d04b03a 	or	r2,r19,r20
1000b4b4:	103ff51e 	bne	r2,zero,1000b48c <__alt_data_end+0xf800b48c>
1000b4b8:	d8801e17 	ldw	r2,120(sp)
1000b4bc:	15e9c83a 	sub	r20,r2,r23
1000b4c0:	003d2b06 	br	1000a970 <__alt_data_end+0xf800a970>
1000b4c4:	d9402017 	ldw	r5,128(sp)
1000b4c8:	d9002117 	ldw	r4,132(sp)
1000b4cc:	d9801a04 	addi	r6,sp,104
1000b4d0:	000a4500 	call	1000a450 <__sprint_r.part.0>
1000b4d4:	103f5b1e 	bne	r2,zero,1000b244 <__alt_data_end+0xf800b244>
1000b4d8:	d8801c17 	ldw	r2,112(sp)
1000b4dc:	d811883a 	mov	r8,sp
1000b4e0:	003f6706 	br	1000b280 <__alt_data_end+0xf800b280>
1000b4e4:	d9402017 	ldw	r5,128(sp)
1000b4e8:	d9002117 	ldw	r4,132(sp)
1000b4ec:	d9801a04 	addi	r6,sp,104
1000b4f0:	000a4500 	call	1000a450 <__sprint_r.part.0>
1000b4f4:	103f531e 	bne	r2,zero,1000b244 <__alt_data_end+0xf800b244>
1000b4f8:	d811883a 	mov	r8,sp
1000b4fc:	003cd906 	br	1000a864 <__alt_data_end+0xf800a864>
1000b500:	10803fcc 	andi	r2,r2,255
1000b504:	1080201c 	xori	r2,r2,128
1000b508:	10bfe004 	addi	r2,r2,-128
1000b50c:	00c00c04 	movi	r3,48
1000b510:	10ffe926 	beq	r2,r3,1000b4b8 <__alt_data_end+0xf800b4b8>
1000b514:	b8ffffc5 	stb	r3,-1(r23)
1000b518:	d8c01e17 	ldw	r3,120(sp)
1000b51c:	b8bfffc4 	addi	r2,r23,-1
1000b520:	102f883a 	mov	r23,r2
1000b524:	18a9c83a 	sub	r20,r3,r2
1000b528:	003d1106 	br	1000a970 <__alt_data_end+0xf800a970>
1000b52c:	d9402017 	ldw	r5,128(sp)
1000b530:	d9002117 	ldw	r4,132(sp)
1000b534:	d9801a04 	addi	r6,sp,104
1000b538:	d8c02a15 	stw	r3,168(sp)
1000b53c:	d9c02b15 	stw	r7,172(sp)
1000b540:	000a4500 	call	1000a450 <__sprint_r.part.0>
1000b544:	d8c02a17 	ldw	r3,168(sp)
1000b548:	d9c02b17 	ldw	r7,172(sp)
1000b54c:	103f3d1e 	bne	r2,zero,1000b244 <__alt_data_end+0xf800b244>
1000b550:	d9001b17 	ldw	r4,108(sp)
1000b554:	d8801c17 	ldw	r2,112(sp)
1000b558:	d811883a 	mov	r8,sp
1000b55c:	21400044 	addi	r5,r4,1
1000b560:	003d4406 	br	1000aa74 <__alt_data_end+0xf800aa74>
1000b564:	d9402017 	ldw	r5,128(sp)
1000b568:	d9002117 	ldw	r4,132(sp)
1000b56c:	d9801a04 	addi	r6,sp,104
1000b570:	d8c02a15 	stw	r3,168(sp)
1000b574:	000a4500 	call	1000a450 <__sprint_r.part.0>
1000b578:	d8c02a17 	ldw	r3,168(sp)
1000b57c:	103f311e 	bne	r2,zero,1000b244 <__alt_data_end+0xf800b244>
1000b580:	d9001b17 	ldw	r4,108(sp)
1000b584:	d8801c17 	ldw	r2,112(sp)
1000b588:	d811883a 	mov	r8,sp
1000b58c:	21400044 	addi	r5,r4,1
1000b590:	003ef406 	br	1000b164 <__alt_data_end+0xf800b164>
1000b594:	1000bd1e 	bne	r2,zero,1000b88c <___vfiprintf_internal_r+0x1328>
1000b598:	01400044 	movi	r5,1
1000b59c:	0009883a 	mov	r4,zero
1000b5a0:	d811883a 	mov	r8,sp
1000b5a4:	003ef106 	br	1000b16c <__alt_data_end+0xf800b16c>
1000b5a8:	d9402017 	ldw	r5,128(sp)
1000b5ac:	d9002117 	ldw	r4,132(sp)
1000b5b0:	d9801a04 	addi	r6,sp,104
1000b5b4:	000a4500 	call	1000a450 <__sprint_r.part.0>
1000b5b8:	103f221e 	bne	r2,zero,1000b244 <__alt_data_end+0xf800b244>
1000b5bc:	d9401b17 	ldw	r5,108(sp)
1000b5c0:	d8801c17 	ldw	r2,112(sp)
1000b5c4:	d811883a 	mov	r8,sp
1000b5c8:	29400044 	addi	r5,r5,1
1000b5cc:	003d6206 	br	1000ab58 <__alt_data_end+0xf800ab58>
1000b5d0:	01440074 	movhi	r5,4097
1000b5d4:	294a3e04 	addi	r5,r5,10488
1000b5d8:	d9402615 	stw	r5,152(sp)
1000b5dc:	d8c02215 	stw	r3,136(sp)
1000b5e0:	1023883a 	mov	r17,r2
1000b5e4:	9d04b03a 	or	r2,r19,r20
1000b5e8:	103fa51e 	bne	r2,zero,1000b480 <__alt_data_end+0xf800b480>
1000b5ec:	002b883a 	mov	r21,zero
1000b5f0:	00800084 	movi	r2,2
1000b5f4:	003e4a06 	br	1000af20 <__alt_data_end+0xf800af20>
1000b5f8:	01440074 	movhi	r5,4097
1000b5fc:	294a3e04 	addi	r5,r5,10488
1000b600:	002b883a 	mov	r21,zero
1000b604:	d9402615 	stw	r5,152(sp)
1000b608:	003f9e06 	br	1000b484 <__alt_data_end+0xf800b484>
1000b60c:	d9402217 	ldw	r5,136(sp)
1000b610:	d8001d85 	stb	zero,118(sp)
1000b614:	0029883a 	mov	r20,zero
1000b618:	28800104 	addi	r2,r5,4
1000b61c:	2cc00017 	ldw	r19,0(r5)
1000b620:	803e3a16 	blt	r16,zero,1000af0c <__alt_data_end+0xf800af0c>
1000b624:	00ffdfc4 	movi	r3,-129
1000b628:	d8802215 	stw	r2,136(sp)
1000b62c:	88e2703a 	and	r17,r17,r3
1000b630:	002b883a 	mov	r21,zero
1000b634:	983e9b26 	beq	r19,zero,1000b0a4 <__alt_data_end+0xf800b0a4>
1000b638:	00800244 	movi	r2,9
1000b63c:	14fdc936 	bltu	r2,r19,1000ad64 <__alt_data_end+0xf800ad64>
1000b640:	003e9a06 	br	1000b0ac <__alt_data_end+0xf800b0ac>
1000b644:	00800c04 	movi	r2,48
1000b648:	d8c01d45 	stb	r3,117(sp)
1000b64c:	d8801d05 	stb	r2,116(sp)
1000b650:	d8001d85 	stb	zero,118(sp)
1000b654:	88c00094 	ori	r3,r17,2
1000b658:	80009c16 	blt	r16,zero,1000b8cc <___vfiprintf_internal_r+0x1368>
1000b65c:	00bfdfc4 	movi	r2,-129
1000b660:	88a2703a 	and	r17,r17,r2
1000b664:	8c400094 	ori	r17,r17,2
1000b668:	002b883a 	mov	r21,zero
1000b66c:	003f8506 	br	1000b484 <__alt_data_end+0xf800b484>
1000b670:	b029883a 	mov	r20,r22
1000b674:	003c0b06 	br	1000a6a4 <__alt_data_end+0xf800a6a4>
1000b678:	04e7c83a 	sub	r19,zero,r19
1000b67c:	05400b44 	movi	r21,45
1000b680:	9804c03a 	cmpne	r2,r19,zero
1000b684:	0529c83a 	sub	r20,zero,r20
1000b688:	dd401d85 	stb	r21,118(sp)
1000b68c:	a0a9c83a 	sub	r20,r20,r2
1000b690:	80009716 	blt	r16,zero,1000b8f0 <___vfiprintf_internal_r+0x138c>
1000b694:	00bfdfc4 	movi	r2,-129
1000b698:	88a2703a 	and	r17,r17,r2
1000b69c:	003db006 	br	1000ad60 <__alt_data_end+0xf800ad60>
1000b6a0:	b0c00007 	ldb	r3,0(r22)
1000b6a4:	003c0c06 	br	1000a6d8 <__alt_data_end+0xf800a6d8>
1000b6a8:	8880100c 	andi	r2,r17,64
1000b6ac:	d8001d85 	stb	zero,118(sp)
1000b6b0:	1000461e 	bne	r2,zero,1000b7cc <___vfiprintf_internal_r+0x1268>
1000b6b4:	d9002217 	ldw	r4,136(sp)
1000b6b8:	0029883a 	mov	r20,zero
1000b6bc:	20800104 	addi	r2,r4,4
1000b6c0:	24c00017 	ldw	r19,0(r4)
1000b6c4:	803df80e 	bge	r16,zero,1000aea8 <__alt_data_end+0xf800aea8>
1000b6c8:	9d06b03a 	or	r3,r19,r20
1000b6cc:	d8802215 	stw	r2,136(sp)
1000b6d0:	183d5e1e 	bne	r3,zero,1000ac4c <__alt_data_end+0xf800ac4c>
1000b6d4:	002b883a 	mov	r21,zero
1000b6d8:	0005883a 	mov	r2,zero
1000b6dc:	003e1006 	br	1000af20 <__alt_data_end+0xf800af20>
1000b6e0:	8880040c 	andi	r2,r17,16
1000b6e4:	1000321e 	bne	r2,zero,1000b7b0 <___vfiprintf_internal_r+0x124c>
1000b6e8:	8c40100c 	andi	r17,r17,64
1000b6ec:	88008d26 	beq	r17,zero,1000b924 <___vfiprintf_internal_r+0x13c0>
1000b6f0:	d9402217 	ldw	r5,136(sp)
1000b6f4:	d8c02417 	ldw	r3,144(sp)
1000b6f8:	28800017 	ldw	r2,0(r5)
1000b6fc:	29400104 	addi	r5,r5,4
1000b700:	d9402215 	stw	r5,136(sp)
1000b704:	10c0000d 	sth	r3,0(r2)
1000b708:	003bca06 	br	1000a634 <__alt_data_end+0xf800a634>
1000b70c:	8880100c 	andi	r2,r17,64
1000b710:	10003a26 	beq	r2,zero,1000b7fc <___vfiprintf_internal_r+0x1298>
1000b714:	d8802217 	ldw	r2,136(sp)
1000b718:	14c0000f 	ldh	r19,0(r2)
1000b71c:	10800104 	addi	r2,r2,4
1000b720:	d8802215 	stw	r2,136(sp)
1000b724:	9829d7fa 	srai	r20,r19,31
1000b728:	a005883a 	mov	r2,r20
1000b72c:	003d8506 	br	1000ad44 <__alt_data_end+0xf800ad44>
1000b730:	8880100c 	andi	r2,r17,64
1000b734:	10002b26 	beq	r2,zero,1000b7e4 <___vfiprintf_internal_r+0x1280>
1000b738:	d8802217 	ldw	r2,136(sp)
1000b73c:	0029883a 	mov	r20,zero
1000b740:	14c0000b 	ldhu	r19,0(r2)
1000b744:	10800104 	addi	r2,r2,4
1000b748:	d8802215 	stw	r2,136(sp)
1000b74c:	003d5d06 	br	1000acc4 <__alt_data_end+0xf800acc4>
1000b750:	d9402017 	ldw	r5,128(sp)
1000b754:	d9002117 	ldw	r4,132(sp)
1000b758:	d9801a04 	addi	r6,sp,104
1000b75c:	d8c02a15 	stw	r3,168(sp)
1000b760:	d9c02b15 	stw	r7,172(sp)
1000b764:	000a4500 	call	1000a450 <__sprint_r.part.0>
1000b768:	d8c02a17 	ldw	r3,168(sp)
1000b76c:	d9c02b17 	ldw	r7,172(sp)
1000b770:	103eb41e 	bne	r2,zero,1000b244 <__alt_data_end+0xf800b244>
1000b774:	d9001b17 	ldw	r4,108(sp)
1000b778:	d8801c17 	ldw	r2,112(sp)
1000b77c:	d811883a 	mov	r8,sp
1000b780:	21400044 	addi	r5,r4,1
1000b784:	003e6706 	br	1000b124 <__alt_data_end+0xf800b124>
1000b788:	00bfffc4 	movi	r2,-1
1000b78c:	003c4a06 	br	1000a8b8 <__alt_data_end+0xf800a8b8>
1000b790:	9805883a 	mov	r2,r19
1000b794:	003ee806 	br	1000b338 <__alt_data_end+0xf800b338>
1000b798:	d8c02217 	ldw	r3,136(sp)
1000b79c:	0029883a 	mov	r20,zero
1000b7a0:	18800104 	addi	r2,r3,4
1000b7a4:	1cc0000b 	ldhu	r19,0(r3)
1000b7a8:	803f9e0e 	bge	r16,zero,1000b624 <__alt_data_end+0xf800b624>
1000b7ac:	003dd706 	br	1000af0c <__alt_data_end+0xf800af0c>
1000b7b0:	d8c02217 	ldw	r3,136(sp)
1000b7b4:	d9002417 	ldw	r4,144(sp)
1000b7b8:	18800017 	ldw	r2,0(r3)
1000b7bc:	18c00104 	addi	r3,r3,4
1000b7c0:	d8c02215 	stw	r3,136(sp)
1000b7c4:	11000015 	stw	r4,0(r2)
1000b7c8:	003b9a06 	br	1000a634 <__alt_data_end+0xf800a634>
1000b7cc:	d8c02217 	ldw	r3,136(sp)
1000b7d0:	0029883a 	mov	r20,zero
1000b7d4:	18800104 	addi	r2,r3,4
1000b7d8:	1cc0000b 	ldhu	r19,0(r3)
1000b7dc:	803db20e 	bge	r16,zero,1000aea8 <__alt_data_end+0xf800aea8>
1000b7e0:	003fb906 	br	1000b6c8 <__alt_data_end+0xf800b6c8>
1000b7e4:	d9002217 	ldw	r4,136(sp)
1000b7e8:	0029883a 	mov	r20,zero
1000b7ec:	24c00017 	ldw	r19,0(r4)
1000b7f0:	21000104 	addi	r4,r4,4
1000b7f4:	d9002215 	stw	r4,136(sp)
1000b7f8:	003d3206 	br	1000acc4 <__alt_data_end+0xf800acc4>
1000b7fc:	d8c02217 	ldw	r3,136(sp)
1000b800:	1cc00017 	ldw	r19,0(r3)
1000b804:	18c00104 	addi	r3,r3,4
1000b808:	d8c02215 	stw	r3,136(sp)
1000b80c:	9829d7fa 	srai	r20,r19,31
1000b810:	a005883a 	mov	r2,r20
1000b814:	003d4b06 	br	1000ad44 <__alt_data_end+0xf800ad44>
1000b818:	0009883a 	mov	r4,zero
1000b81c:	01400044 	movi	r5,1
1000b820:	d811883a 	mov	r8,sp
1000b824:	003e4f06 	br	1000b164 <__alt_data_end+0xf800b164>
1000b828:	d8c02215 	stw	r3,136(sp)
1000b82c:	002b883a 	mov	r21,zero
1000b830:	003db806 	br	1000af14 <__alt_data_end+0xf800af14>
1000b834:	d811883a 	mov	r8,sp
1000b838:	003e9606 	br	1000b294 <__alt_data_end+0xf800b294>
1000b83c:	01040074 	movhi	r4,4097
1000b840:	210a9f04 	addi	r4,r4,10876
1000b844:	d9002315 	stw	r4,140(sp)
1000b848:	003e6306 	br	1000b1d8 <__alt_data_end+0xf800b1d8>
1000b84c:	b0c00043 	ldbu	r3,1(r22)
1000b850:	8c400814 	ori	r17,r17,32
1000b854:	b5800044 	addi	r22,r22,1
1000b858:	18c03fcc 	andi	r3,r3,255
1000b85c:	18c0201c 	xori	r3,r3,128
1000b860:	18ffe004 	addi	r3,r3,-128
1000b864:	003b9c06 	br	1000a6d8 <__alt_data_end+0xf800a6d8>
1000b868:	b809883a 	mov	r4,r23
1000b86c:	da002a15 	stw	r8,168(sp)
1000b870:	0002cd40 	call	10002cd4 <strlen>
1000b874:	1029883a 	mov	r20,r2
1000b878:	dd401d83 	ldbu	r21,118(sp)
1000b87c:	df002215 	stw	fp,136(sp)
1000b880:	0021883a 	mov	r16,zero
1000b884:	da002a17 	ldw	r8,168(sp)
1000b888:	003c3906 	br	1000a970 <__alt_data_end+0xf800a970>
1000b88c:	d9402017 	ldw	r5,128(sp)
1000b890:	d9002117 	ldw	r4,132(sp)
1000b894:	d9801a04 	addi	r6,sp,104
1000b898:	000a4500 	call	1000a450 <__sprint_r.part.0>
1000b89c:	103e691e 	bne	r2,zero,1000b244 <__alt_data_end+0xf800b244>
1000b8a0:	d9001b17 	ldw	r4,108(sp)
1000b8a4:	d8801c17 	ldw	r2,112(sp)
1000b8a8:	d811883a 	mov	r8,sp
1000b8ac:	21400044 	addi	r5,r4,1
1000b8b0:	003e2e06 	br	1000b16c <__alt_data_end+0xf800b16c>
1000b8b4:	01040074 	movhi	r4,4097
1000b8b8:	210aa304 	addi	r4,r4,10892
1000b8bc:	d9002315 	stw	r4,140(sp)
1000b8c0:	d9001b17 	ldw	r4,108(sp)
1000b8c4:	21000044 	addi	r4,r4,1
1000b8c8:	003c5e06 	br	1000aa44 <__alt_data_end+0xf800aa44>
1000b8cc:	002b883a 	mov	r21,zero
1000b8d0:	00800084 	movi	r2,2
1000b8d4:	10803fcc 	andi	r2,r2,255
1000b8d8:	01000044 	movi	r4,1
1000b8dc:	11002b26 	beq	r2,r4,1000b98c <___vfiprintf_internal_r+0x1428>
1000b8e0:	01000084 	movi	r4,2
1000b8e4:	11002b1e 	bne	r2,r4,1000b994 <___vfiprintf_internal_r+0x1430>
1000b8e8:	1823883a 	mov	r17,r3
1000b8ec:	003ee506 	br	1000b484 <__alt_data_end+0xf800b484>
1000b8f0:	8807883a 	mov	r3,r17
1000b8f4:	00800044 	movi	r2,1
1000b8f8:	003ff606 	br	1000b8d4 <__alt_data_end+0xf800b8d4>
1000b8fc:	00800184 	movi	r2,6
1000b900:	1400012e 	bgeu	r2,r16,1000b908 <___vfiprintf_internal_r+0x13a4>
1000b904:	1021883a 	mov	r16,r2
1000b908:	8029883a 	mov	r20,r16
1000b90c:	8027883a 	mov	r19,r16
1000b910:	80002216 	blt	r16,zero,1000b99c <___vfiprintf_internal_r+0x1438>
1000b914:	05c40074 	movhi	r23,4097
1000b918:	df002215 	stw	fp,136(sp)
1000b91c:	bdca4304 	addi	r23,r23,10508
1000b920:	003cfb06 	br	1000ad10 <__alt_data_end+0xf800ad10>
1000b924:	d9002217 	ldw	r4,136(sp)
1000b928:	d9402417 	ldw	r5,144(sp)
1000b92c:	20800017 	ldw	r2,0(r4)
1000b930:	21000104 	addi	r4,r4,4
1000b934:	d9002215 	stw	r4,136(sp)
1000b938:	11400015 	stw	r5,0(r2)
1000b93c:	003b3d06 	br	1000a634 <__alt_data_end+0xf800a634>
1000b940:	01440074 	movhi	r5,4097
1000b944:	294aa304 	addi	r5,r5,10892
1000b948:	d9402315 	stw	r5,140(sp)
1000b94c:	d9401b17 	ldw	r5,108(sp)
1000b950:	29400044 	addi	r5,r5,1
1000b954:	003e6d06 	br	1000b30c <__alt_data_end+0xf800b30c>
1000b958:	8029883a 	mov	r20,r16
1000b95c:	dd401d83 	ldbu	r21,118(sp)
1000b960:	df002215 	stw	fp,136(sp)
1000b964:	0021883a 	mov	r16,zero
1000b968:	003c0106 	br	1000a970 <__alt_data_end+0xf800a970>
1000b96c:	00c40074 	movhi	r3,4097
1000b970:	18ca9f04 	addi	r3,r3,10876
1000b974:	d8c02315 	stw	r3,140(sp)
1000b978:	280d883a 	mov	r6,r5
1000b97c:	003c6906 	br	1000ab24 <__alt_data_end+0xf800ab24>
1000b980:	802d883a 	mov	r22,r16
1000b984:	0021883a 	mov	r16,zero
1000b988:	003b5406 	br	1000a6dc <__alt_data_end+0xf800a6dc>
1000b98c:	1823883a 	mov	r17,r3
1000b990:	003cf306 	br	1000ad60 <__alt_data_end+0xf800ad60>
1000b994:	1823883a 	mov	r17,r3
1000b998:	003cad06 	br	1000ac50 <__alt_data_end+0xf800ac50>
1000b99c:	0027883a 	mov	r19,zero
1000b9a0:	003fdc06 	br	1000b914 <__alt_data_end+0xf800b914>
1000b9a4:	d9402217 	ldw	r5,136(sp)
1000b9a8:	8005883a 	mov	r2,r16
1000b9ac:	b0c00043 	ldbu	r3,1(r22)
1000b9b0:	2c000017 	ldw	r16,0(r5)
1000b9b4:	29000104 	addi	r4,r5,4
1000b9b8:	d9002215 	stw	r4,136(sp)
1000b9bc:	102d883a 	mov	r22,r2
1000b9c0:	803fa50e 	bge	r16,zero,1000b858 <__alt_data_end+0xf800b858>
1000b9c4:	18c03fcc 	andi	r3,r3,255
1000b9c8:	18c0201c 	xori	r3,r3,128
1000b9cc:	043fffc4 	movi	r16,-1
1000b9d0:	18ffe004 	addi	r3,r3,-128
1000b9d4:	003b4006 	br	1000a6d8 <__alt_data_end+0xf800a6d8>
1000b9d8:	d9402303 	ldbu	r5,140(sp)
1000b9dc:	d9401d85 	stb	r5,118(sp)
1000b9e0:	003cae06 	br	1000ac9c <__alt_data_end+0xf800ac9c>
1000b9e4:	d8c02303 	ldbu	r3,140(sp)
1000b9e8:	d8c01d85 	stb	r3,118(sp)
1000b9ec:	003d1406 	br	1000ae40 <__alt_data_end+0xf800ae40>
1000b9f0:	d8c02303 	ldbu	r3,140(sp)
1000b9f4:	d8c01d85 	stb	r3,118(sp)
1000b9f8:	003cca06 	br	1000ad24 <__alt_data_end+0xf800ad24>
1000b9fc:	8880004c 	andi	r2,r17,1
1000ba00:	002b883a 	mov	r21,zero
1000ba04:	10000526 	beq	r2,zero,1000ba1c <___vfiprintf_internal_r+0x14b8>
1000ba08:	00800c04 	movi	r2,48
1000ba0c:	d88019c5 	stb	r2,103(sp)
1000ba10:	dd002817 	ldw	r20,160(sp)
1000ba14:	ddc019c4 	addi	r23,sp,103
1000ba18:	003bd506 	br	1000a970 <__alt_data_end+0xf800a970>
1000ba1c:	0029883a 	mov	r20,zero
1000ba20:	ddc01a04 	addi	r23,sp,104
1000ba24:	003bd206 	br	1000a970 <__alt_data_end+0xf800a970>
1000ba28:	d9002303 	ldbu	r4,140(sp)
1000ba2c:	d9001d85 	stb	r4,118(sp)
1000ba30:	003da606 	br	1000b0cc <__alt_data_end+0xf800b0cc>
1000ba34:	d8c02303 	ldbu	r3,140(sp)
1000ba38:	d8c01d85 	stb	r3,118(sp)
1000ba3c:	003c7606 	br	1000ac18 <__alt_data_end+0xf800ac18>
1000ba40:	d8c02303 	ldbu	r3,140(sp)
1000ba44:	d8c01d85 	stb	r3,118(sp)
1000ba48:	003c6506 	br	1000abe0 <__alt_data_end+0xf800abe0>
1000ba4c:	d9002303 	ldbu	r4,140(sp)
1000ba50:	d9001d85 	stb	r4,118(sp)
1000ba54:	003d3d06 	br	1000af4c <__alt_data_end+0xf800af4c>
1000ba58:	d8c02303 	ldbu	r3,140(sp)
1000ba5c:	d8c01d85 	stb	r3,118(sp)
1000ba60:	003d1d06 	br	1000aed8 <__alt_data_end+0xf800aed8>
1000ba64:	d8c02303 	ldbu	r3,140(sp)
1000ba68:	d8c01d85 	stb	r3,118(sp)
1000ba6c:	003d0306 	br	1000ae7c <__alt_data_end+0xf800ae7c>

1000ba70 <__vfiprintf_internal>:
1000ba70:	00840074 	movhi	r2,4097
1000ba74:	1091a004 	addi	r2,r2,18048
1000ba78:	300f883a 	mov	r7,r6
1000ba7c:	280d883a 	mov	r6,r5
1000ba80:	200b883a 	mov	r5,r4
1000ba84:	11000017 	ldw	r4,0(r2)
1000ba88:	000a5641 	jmpi	1000a564 <___vfiprintf_internal_r>

1000ba8c <__sbprintf>:
1000ba8c:	2880030b 	ldhu	r2,12(r5)
1000ba90:	2ac01917 	ldw	r11,100(r5)
1000ba94:	2a80038b 	ldhu	r10,14(r5)
1000ba98:	2a400717 	ldw	r9,28(r5)
1000ba9c:	2a000917 	ldw	r8,36(r5)
1000baa0:	defee204 	addi	sp,sp,-1144
1000baa4:	00c10004 	movi	r3,1024
1000baa8:	dc011a15 	stw	r16,1128(sp)
1000baac:	10bfff4c 	andi	r2,r2,65533
1000bab0:	2821883a 	mov	r16,r5
1000bab4:	d8cb883a 	add	r5,sp,r3
1000bab8:	dc811c15 	stw	r18,1136(sp)
1000babc:	dc411b15 	stw	r17,1132(sp)
1000bac0:	dfc11d15 	stw	ra,1140(sp)
1000bac4:	2025883a 	mov	r18,r4
1000bac8:	d881030d 	sth	r2,1036(sp)
1000bacc:	dac11915 	stw	r11,1124(sp)
1000bad0:	da81038d 	sth	r10,1038(sp)
1000bad4:	da410715 	stw	r9,1052(sp)
1000bad8:	da010915 	stw	r8,1060(sp)
1000badc:	dec10015 	stw	sp,1024(sp)
1000bae0:	dec10415 	stw	sp,1040(sp)
1000bae4:	d8c10215 	stw	r3,1032(sp)
1000bae8:	d8c10515 	stw	r3,1044(sp)
1000baec:	d8010615 	stw	zero,1048(sp)
1000baf0:	000a5640 	call	1000a564 <___vfiprintf_internal_r>
1000baf4:	1023883a 	mov	r17,r2
1000baf8:	10000416 	blt	r2,zero,1000bb0c <__sbprintf+0x80>
1000bafc:	d9410004 	addi	r5,sp,1024
1000bb00:	9009883a 	mov	r4,r18
1000bb04:	0006d400 	call	10006d40 <_fflush_r>
1000bb08:	10000d1e 	bne	r2,zero,1000bb40 <__sbprintf+0xb4>
1000bb0c:	d881030b 	ldhu	r2,1036(sp)
1000bb10:	1080100c 	andi	r2,r2,64
1000bb14:	10000326 	beq	r2,zero,1000bb24 <__sbprintf+0x98>
1000bb18:	8080030b 	ldhu	r2,12(r16)
1000bb1c:	10801014 	ori	r2,r2,64
1000bb20:	8080030d 	sth	r2,12(r16)
1000bb24:	8805883a 	mov	r2,r17
1000bb28:	dfc11d17 	ldw	ra,1140(sp)
1000bb2c:	dc811c17 	ldw	r18,1136(sp)
1000bb30:	dc411b17 	ldw	r17,1132(sp)
1000bb34:	dc011a17 	ldw	r16,1128(sp)
1000bb38:	dec11e04 	addi	sp,sp,1144
1000bb3c:	f800283a 	ret
1000bb40:	047fffc4 	movi	r17,-1
1000bb44:	003ff106 	br	1000bb0c <__alt_data_end+0xf800bb0c>

1000bb48 <_write_r>:
1000bb48:	defffd04 	addi	sp,sp,-12
1000bb4c:	2805883a 	mov	r2,r5
1000bb50:	dc000015 	stw	r16,0(sp)
1000bb54:	04040074 	movhi	r16,4097
1000bb58:	dc400115 	stw	r17,4(sp)
1000bb5c:	300b883a 	mov	r5,r6
1000bb60:	84187804 	addi	r16,r16,25056
1000bb64:	2023883a 	mov	r17,r4
1000bb68:	380d883a 	mov	r6,r7
1000bb6c:	1009883a 	mov	r4,r2
1000bb70:	dfc00215 	stw	ra,8(sp)
1000bb74:	80000015 	stw	zero,0(r16)
1000bb78:	00101bc0 	call	100101bc <write>
1000bb7c:	00ffffc4 	movi	r3,-1
1000bb80:	10c00526 	beq	r2,r3,1000bb98 <_write_r+0x50>
1000bb84:	dfc00217 	ldw	ra,8(sp)
1000bb88:	dc400117 	ldw	r17,4(sp)
1000bb8c:	dc000017 	ldw	r16,0(sp)
1000bb90:	dec00304 	addi	sp,sp,12
1000bb94:	f800283a 	ret
1000bb98:	80c00017 	ldw	r3,0(r16)
1000bb9c:	183ff926 	beq	r3,zero,1000bb84 <__alt_data_end+0xf800bb84>
1000bba0:	88c00015 	stw	r3,0(r17)
1000bba4:	003ff706 	br	1000bb84 <__alt_data_end+0xf800bb84>

1000bba8 <_close_r>:
1000bba8:	defffd04 	addi	sp,sp,-12
1000bbac:	dc000015 	stw	r16,0(sp)
1000bbb0:	04040074 	movhi	r16,4097
1000bbb4:	dc400115 	stw	r17,4(sp)
1000bbb8:	84187804 	addi	r16,r16,25056
1000bbbc:	2023883a 	mov	r17,r4
1000bbc0:	2809883a 	mov	r4,r5
1000bbc4:	dfc00215 	stw	ra,8(sp)
1000bbc8:	80000015 	stw	zero,0(r16)
1000bbcc:	000f9340 	call	1000f934 <close>
1000bbd0:	00ffffc4 	movi	r3,-1
1000bbd4:	10c00526 	beq	r2,r3,1000bbec <_close_r+0x44>
1000bbd8:	dfc00217 	ldw	ra,8(sp)
1000bbdc:	dc400117 	ldw	r17,4(sp)
1000bbe0:	dc000017 	ldw	r16,0(sp)
1000bbe4:	dec00304 	addi	sp,sp,12
1000bbe8:	f800283a 	ret
1000bbec:	80c00017 	ldw	r3,0(r16)
1000bbf0:	183ff926 	beq	r3,zero,1000bbd8 <__alt_data_end+0xf800bbd8>
1000bbf4:	88c00015 	stw	r3,0(r17)
1000bbf8:	003ff706 	br	1000bbd8 <__alt_data_end+0xf800bbd8>

1000bbfc <_calloc_r>:
1000bbfc:	defffe04 	addi	sp,sp,-8
1000bc00:	2805883a 	mov	r2,r5
1000bc04:	dc000015 	stw	r16,0(sp)
1000bc08:	300b883a 	mov	r5,r6
1000bc0c:	2021883a 	mov	r16,r4
1000bc10:	1009883a 	mov	r4,r2
1000bc14:	dfc00115 	stw	ra,4(sp)
1000bc18:	0002b6c0 	call	10002b6c <__mulsi3>
1000bc1c:	100b883a 	mov	r5,r2
1000bc20:	8009883a 	mov	r4,r16
1000bc24:	0007e980 	call	10007e98 <_malloc_r>
1000bc28:	10002926 	beq	r2,zero,1000bcd0 <_calloc_r+0xd4>
1000bc2c:	11bfff17 	ldw	r6,-4(r2)
1000bc30:	1021883a 	mov	r16,r2
1000bc34:	00bfff04 	movi	r2,-4
1000bc38:	308c703a 	and	r6,r6,r2
1000bc3c:	00c00904 	movi	r3,36
1000bc40:	308d883a 	add	r6,r6,r2
1000bc44:	19801636 	bltu	r3,r6,1000bca0 <_calloc_r+0xa4>
1000bc48:	008004c4 	movi	r2,19
1000bc4c:	11800b2e 	bgeu	r2,r6,1000bc7c <_calloc_r+0x80>
1000bc50:	80000015 	stw	zero,0(r16)
1000bc54:	80000115 	stw	zero,4(r16)
1000bc58:	008006c4 	movi	r2,27
1000bc5c:	11801a2e 	bgeu	r2,r6,1000bcc8 <_calloc_r+0xcc>
1000bc60:	80000215 	stw	zero,8(r16)
1000bc64:	80000315 	stw	zero,12(r16)
1000bc68:	30c0151e 	bne	r6,r3,1000bcc0 <_calloc_r+0xc4>
1000bc6c:	80000415 	stw	zero,16(r16)
1000bc70:	80800604 	addi	r2,r16,24
1000bc74:	80000515 	stw	zero,20(r16)
1000bc78:	00000106 	br	1000bc80 <_calloc_r+0x84>
1000bc7c:	8005883a 	mov	r2,r16
1000bc80:	10000015 	stw	zero,0(r2)
1000bc84:	10000115 	stw	zero,4(r2)
1000bc88:	10000215 	stw	zero,8(r2)
1000bc8c:	8005883a 	mov	r2,r16
1000bc90:	dfc00117 	ldw	ra,4(sp)
1000bc94:	dc000017 	ldw	r16,0(sp)
1000bc98:	dec00204 	addi	sp,sp,8
1000bc9c:	f800283a 	ret
1000bca0:	000b883a 	mov	r5,zero
1000bca4:	8009883a 	mov	r4,r16
1000bca8:	0008a2c0 	call	10008a2c <memset>
1000bcac:	8005883a 	mov	r2,r16
1000bcb0:	dfc00117 	ldw	ra,4(sp)
1000bcb4:	dc000017 	ldw	r16,0(sp)
1000bcb8:	dec00204 	addi	sp,sp,8
1000bcbc:	f800283a 	ret
1000bcc0:	80800404 	addi	r2,r16,16
1000bcc4:	003fee06 	br	1000bc80 <__alt_data_end+0xf800bc80>
1000bcc8:	80800204 	addi	r2,r16,8
1000bccc:	003fec06 	br	1000bc80 <__alt_data_end+0xf800bc80>
1000bcd0:	0005883a 	mov	r2,zero
1000bcd4:	003fee06 	br	1000bc90 <__alt_data_end+0xf800bc90>

1000bcd8 <_fclose_r>:
1000bcd8:	28003926 	beq	r5,zero,1000bdc0 <_fclose_r+0xe8>
1000bcdc:	defffc04 	addi	sp,sp,-16
1000bce0:	dc400115 	stw	r17,4(sp)
1000bce4:	dc000015 	stw	r16,0(sp)
1000bce8:	dfc00315 	stw	ra,12(sp)
1000bcec:	dc800215 	stw	r18,8(sp)
1000bcf0:	2023883a 	mov	r17,r4
1000bcf4:	2821883a 	mov	r16,r5
1000bcf8:	20000226 	beq	r4,zero,1000bd04 <_fclose_r+0x2c>
1000bcfc:	20800e17 	ldw	r2,56(r4)
1000bd00:	10002726 	beq	r2,zero,1000bda0 <_fclose_r+0xc8>
1000bd04:	8080030f 	ldh	r2,12(r16)
1000bd08:	1000071e 	bne	r2,zero,1000bd28 <_fclose_r+0x50>
1000bd0c:	0005883a 	mov	r2,zero
1000bd10:	dfc00317 	ldw	ra,12(sp)
1000bd14:	dc800217 	ldw	r18,8(sp)
1000bd18:	dc400117 	ldw	r17,4(sp)
1000bd1c:	dc000017 	ldw	r16,0(sp)
1000bd20:	dec00404 	addi	sp,sp,16
1000bd24:	f800283a 	ret
1000bd28:	800b883a 	mov	r5,r16
1000bd2c:	8809883a 	mov	r4,r17
1000bd30:	0006b240 	call	10006b24 <__sflush_r>
1000bd34:	1025883a 	mov	r18,r2
1000bd38:	80800b17 	ldw	r2,44(r16)
1000bd3c:	10000426 	beq	r2,zero,1000bd50 <_fclose_r+0x78>
1000bd40:	81400717 	ldw	r5,28(r16)
1000bd44:	8809883a 	mov	r4,r17
1000bd48:	103ee83a 	callr	r2
1000bd4c:	10001616 	blt	r2,zero,1000bda8 <_fclose_r+0xd0>
1000bd50:	8080030b 	ldhu	r2,12(r16)
1000bd54:	1080200c 	andi	r2,r2,128
1000bd58:	1000151e 	bne	r2,zero,1000bdb0 <_fclose_r+0xd8>
1000bd5c:	81400c17 	ldw	r5,48(r16)
1000bd60:	28000526 	beq	r5,zero,1000bd78 <_fclose_r+0xa0>
1000bd64:	80801004 	addi	r2,r16,64
1000bd68:	28800226 	beq	r5,r2,1000bd74 <_fclose_r+0x9c>
1000bd6c:	8809883a 	mov	r4,r17
1000bd70:	00072a00 	call	100072a0 <_free_r>
1000bd74:	80000c15 	stw	zero,48(r16)
1000bd78:	81401117 	ldw	r5,68(r16)
1000bd7c:	28000326 	beq	r5,zero,1000bd8c <_fclose_r+0xb4>
1000bd80:	8809883a 	mov	r4,r17
1000bd84:	00072a00 	call	100072a0 <_free_r>
1000bd88:	80001115 	stw	zero,68(r16)
1000bd8c:	000713c0 	call	1000713c <__sfp_lock_acquire>
1000bd90:	8000030d 	sth	zero,12(r16)
1000bd94:	00071400 	call	10007140 <__sfp_lock_release>
1000bd98:	9005883a 	mov	r2,r18
1000bd9c:	003fdc06 	br	1000bd10 <__alt_data_end+0xf800bd10>
1000bda0:	000712c0 	call	1000712c <__sinit>
1000bda4:	003fd706 	br	1000bd04 <__alt_data_end+0xf800bd04>
1000bda8:	04bfffc4 	movi	r18,-1
1000bdac:	003fe806 	br	1000bd50 <__alt_data_end+0xf800bd50>
1000bdb0:	81400417 	ldw	r5,16(r16)
1000bdb4:	8809883a 	mov	r4,r17
1000bdb8:	00072a00 	call	100072a0 <_free_r>
1000bdbc:	003fe706 	br	1000bd5c <__alt_data_end+0xf800bd5c>
1000bdc0:	0005883a 	mov	r2,zero
1000bdc4:	f800283a 	ret

1000bdc8 <fclose>:
1000bdc8:	00840074 	movhi	r2,4097
1000bdcc:	1091a004 	addi	r2,r2,18048
1000bdd0:	200b883a 	mov	r5,r4
1000bdd4:	11000017 	ldw	r4,0(r2)
1000bdd8:	000bcd81 	jmpi	1000bcd8 <_fclose_r>

1000bddc <__fputwc>:
1000bddc:	defff804 	addi	sp,sp,-32
1000bde0:	dcc00415 	stw	r19,16(sp)
1000bde4:	dc800315 	stw	r18,12(sp)
1000bde8:	dc000115 	stw	r16,4(sp)
1000bdec:	dfc00715 	stw	ra,28(sp)
1000bdf0:	dd400615 	stw	r21,24(sp)
1000bdf4:	dd000515 	stw	r20,20(sp)
1000bdf8:	dc400215 	stw	r17,8(sp)
1000bdfc:	2027883a 	mov	r19,r4
1000be00:	2825883a 	mov	r18,r5
1000be04:	3021883a 	mov	r16,r6
1000be08:	0007c880 	call	10007c88 <__locale_mb_cur_max>
1000be0c:	00c00044 	movi	r3,1
1000be10:	10c03e26 	beq	r2,r3,1000bf0c <__fputwc+0x130>
1000be14:	81c01704 	addi	r7,r16,92
1000be18:	900d883a 	mov	r6,r18
1000be1c:	d80b883a 	mov	r5,sp
1000be20:	9809883a 	mov	r4,r19
1000be24:	000c2ac0 	call	1000c2ac <_wcrtomb_r>
1000be28:	1029883a 	mov	r20,r2
1000be2c:	00bfffc4 	movi	r2,-1
1000be30:	a0802026 	beq	r20,r2,1000beb4 <__fputwc+0xd8>
1000be34:	d9400003 	ldbu	r5,0(sp)
1000be38:	a0001c26 	beq	r20,zero,1000beac <__fputwc+0xd0>
1000be3c:	0023883a 	mov	r17,zero
1000be40:	05400284 	movi	r21,10
1000be44:	00000906 	br	1000be6c <__fputwc+0x90>
1000be48:	80800017 	ldw	r2,0(r16)
1000be4c:	11400005 	stb	r5,0(r2)
1000be50:	80c00017 	ldw	r3,0(r16)
1000be54:	18c00044 	addi	r3,r3,1
1000be58:	80c00015 	stw	r3,0(r16)
1000be5c:	8c400044 	addi	r17,r17,1
1000be60:	dc45883a 	add	r2,sp,r17
1000be64:	8d00112e 	bgeu	r17,r20,1000beac <__fputwc+0xd0>
1000be68:	11400003 	ldbu	r5,0(r2)
1000be6c:	80c00217 	ldw	r3,8(r16)
1000be70:	18ffffc4 	addi	r3,r3,-1
1000be74:	80c00215 	stw	r3,8(r16)
1000be78:	183ff30e 	bge	r3,zero,1000be48 <__alt_data_end+0xf800be48>
1000be7c:	80800617 	ldw	r2,24(r16)
1000be80:	18801916 	blt	r3,r2,1000bee8 <__fputwc+0x10c>
1000be84:	80800017 	ldw	r2,0(r16)
1000be88:	11400005 	stb	r5,0(r2)
1000be8c:	80800017 	ldw	r2,0(r16)
1000be90:	10c00003 	ldbu	r3,0(r2)
1000be94:	10800044 	addi	r2,r2,1
1000be98:	1d402326 	beq	r3,r21,1000bf28 <__fputwc+0x14c>
1000be9c:	80800015 	stw	r2,0(r16)
1000bea0:	8c400044 	addi	r17,r17,1
1000bea4:	dc45883a 	add	r2,sp,r17
1000bea8:	8d3fef36 	bltu	r17,r20,1000be68 <__alt_data_end+0xf800be68>
1000beac:	9005883a 	mov	r2,r18
1000beb0:	00000406 	br	1000bec4 <__fputwc+0xe8>
1000beb4:	80c0030b 	ldhu	r3,12(r16)
1000beb8:	a005883a 	mov	r2,r20
1000bebc:	18c01014 	ori	r3,r3,64
1000bec0:	80c0030d 	sth	r3,12(r16)
1000bec4:	dfc00717 	ldw	ra,28(sp)
1000bec8:	dd400617 	ldw	r21,24(sp)
1000becc:	dd000517 	ldw	r20,20(sp)
1000bed0:	dcc00417 	ldw	r19,16(sp)
1000bed4:	dc800317 	ldw	r18,12(sp)
1000bed8:	dc400217 	ldw	r17,8(sp)
1000bedc:	dc000117 	ldw	r16,4(sp)
1000bee0:	dec00804 	addi	sp,sp,32
1000bee4:	f800283a 	ret
1000bee8:	800d883a 	mov	r6,r16
1000beec:	29403fcc 	andi	r5,r5,255
1000bef0:	9809883a 	mov	r4,r19
1000bef4:	000c1540 	call	1000c154 <__swbuf_r>
1000bef8:	10bfffe0 	cmpeqi	r2,r2,-1
1000befc:	10803fcc 	andi	r2,r2,255
1000bf00:	103fd626 	beq	r2,zero,1000be5c <__alt_data_end+0xf800be5c>
1000bf04:	00bfffc4 	movi	r2,-1
1000bf08:	003fee06 	br	1000bec4 <__alt_data_end+0xf800bec4>
1000bf0c:	90ffffc4 	addi	r3,r18,-1
1000bf10:	01003f84 	movi	r4,254
1000bf14:	20ffbf36 	bltu	r4,r3,1000be14 <__alt_data_end+0xf800be14>
1000bf18:	900b883a 	mov	r5,r18
1000bf1c:	dc800005 	stb	r18,0(sp)
1000bf20:	1029883a 	mov	r20,r2
1000bf24:	003fc506 	br	1000be3c <__alt_data_end+0xf800be3c>
1000bf28:	800d883a 	mov	r6,r16
1000bf2c:	a80b883a 	mov	r5,r21
1000bf30:	9809883a 	mov	r4,r19
1000bf34:	000c1540 	call	1000c154 <__swbuf_r>
1000bf38:	10bfffe0 	cmpeqi	r2,r2,-1
1000bf3c:	003fef06 	br	1000befc <__alt_data_end+0xf800befc>

1000bf40 <_fputwc_r>:
1000bf40:	3080030b 	ldhu	r2,12(r6)
1000bf44:	10c8000c 	andi	r3,r2,8192
1000bf48:	1800051e 	bne	r3,zero,1000bf60 <_fputwc_r+0x20>
1000bf4c:	30c01917 	ldw	r3,100(r6)
1000bf50:	10880014 	ori	r2,r2,8192
1000bf54:	3080030d 	sth	r2,12(r6)
1000bf58:	18880014 	ori	r2,r3,8192
1000bf5c:	30801915 	stw	r2,100(r6)
1000bf60:	000bddc1 	jmpi	1000bddc <__fputwc>

1000bf64 <fputwc>:
1000bf64:	00840074 	movhi	r2,4097
1000bf68:	defffc04 	addi	sp,sp,-16
1000bf6c:	1091a004 	addi	r2,r2,18048
1000bf70:	dc000115 	stw	r16,4(sp)
1000bf74:	14000017 	ldw	r16,0(r2)
1000bf78:	dc400215 	stw	r17,8(sp)
1000bf7c:	dfc00315 	stw	ra,12(sp)
1000bf80:	2023883a 	mov	r17,r4
1000bf84:	80000226 	beq	r16,zero,1000bf90 <fputwc+0x2c>
1000bf88:	80800e17 	ldw	r2,56(r16)
1000bf8c:	10001026 	beq	r2,zero,1000bfd0 <fputwc+0x6c>
1000bf90:	2880030b 	ldhu	r2,12(r5)
1000bf94:	10c8000c 	andi	r3,r2,8192
1000bf98:	1800051e 	bne	r3,zero,1000bfb0 <fputwc+0x4c>
1000bf9c:	28c01917 	ldw	r3,100(r5)
1000bfa0:	10880014 	ori	r2,r2,8192
1000bfa4:	2880030d 	sth	r2,12(r5)
1000bfa8:	18880014 	ori	r2,r3,8192
1000bfac:	28801915 	stw	r2,100(r5)
1000bfb0:	280d883a 	mov	r6,r5
1000bfb4:	8009883a 	mov	r4,r16
1000bfb8:	880b883a 	mov	r5,r17
1000bfbc:	dfc00317 	ldw	ra,12(sp)
1000bfc0:	dc400217 	ldw	r17,8(sp)
1000bfc4:	dc000117 	ldw	r16,4(sp)
1000bfc8:	dec00404 	addi	sp,sp,16
1000bfcc:	000bddc1 	jmpi	1000bddc <__fputwc>
1000bfd0:	8009883a 	mov	r4,r16
1000bfd4:	d9400015 	stw	r5,0(sp)
1000bfd8:	000712c0 	call	1000712c <__sinit>
1000bfdc:	d9400017 	ldw	r5,0(sp)
1000bfe0:	003feb06 	br	1000bf90 <__alt_data_end+0xf800bf90>

1000bfe4 <_fstat_r>:
1000bfe4:	defffd04 	addi	sp,sp,-12
1000bfe8:	2805883a 	mov	r2,r5
1000bfec:	dc000015 	stw	r16,0(sp)
1000bff0:	04040074 	movhi	r16,4097
1000bff4:	dc400115 	stw	r17,4(sp)
1000bff8:	84187804 	addi	r16,r16,25056
1000bffc:	2023883a 	mov	r17,r4
1000c000:	300b883a 	mov	r5,r6
1000c004:	1009883a 	mov	r4,r2
1000c008:	dfc00215 	stw	ra,8(sp)
1000c00c:	80000015 	stw	zero,0(r16)
1000c010:	000fa740 	call	1000fa74 <fstat>
1000c014:	00ffffc4 	movi	r3,-1
1000c018:	10c00526 	beq	r2,r3,1000c030 <_fstat_r+0x4c>
1000c01c:	dfc00217 	ldw	ra,8(sp)
1000c020:	dc400117 	ldw	r17,4(sp)
1000c024:	dc000017 	ldw	r16,0(sp)
1000c028:	dec00304 	addi	sp,sp,12
1000c02c:	f800283a 	ret
1000c030:	80c00017 	ldw	r3,0(r16)
1000c034:	183ff926 	beq	r3,zero,1000c01c <__alt_data_end+0xf800c01c>
1000c038:	88c00015 	stw	r3,0(r17)
1000c03c:	003ff706 	br	1000c01c <__alt_data_end+0xf800c01c>

1000c040 <_isatty_r>:
1000c040:	defffd04 	addi	sp,sp,-12
1000c044:	dc000015 	stw	r16,0(sp)
1000c048:	04040074 	movhi	r16,4097
1000c04c:	dc400115 	stw	r17,4(sp)
1000c050:	84187804 	addi	r16,r16,25056
1000c054:	2023883a 	mov	r17,r4
1000c058:	2809883a 	mov	r4,r5
1000c05c:	dfc00215 	stw	ra,8(sp)
1000c060:	80000015 	stw	zero,0(r16)
1000c064:	000fb680 	call	1000fb68 <isatty>
1000c068:	00ffffc4 	movi	r3,-1
1000c06c:	10c00526 	beq	r2,r3,1000c084 <_isatty_r+0x44>
1000c070:	dfc00217 	ldw	ra,8(sp)
1000c074:	dc400117 	ldw	r17,4(sp)
1000c078:	dc000017 	ldw	r16,0(sp)
1000c07c:	dec00304 	addi	sp,sp,12
1000c080:	f800283a 	ret
1000c084:	80c00017 	ldw	r3,0(r16)
1000c088:	183ff926 	beq	r3,zero,1000c070 <__alt_data_end+0xf800c070>
1000c08c:	88c00015 	stw	r3,0(r17)
1000c090:	003ff706 	br	1000c070 <__alt_data_end+0xf800c070>

1000c094 <_lseek_r>:
1000c094:	defffd04 	addi	sp,sp,-12
1000c098:	2805883a 	mov	r2,r5
1000c09c:	dc000015 	stw	r16,0(sp)
1000c0a0:	04040074 	movhi	r16,4097
1000c0a4:	dc400115 	stw	r17,4(sp)
1000c0a8:	300b883a 	mov	r5,r6
1000c0ac:	84187804 	addi	r16,r16,25056
1000c0b0:	2023883a 	mov	r17,r4
1000c0b4:	380d883a 	mov	r6,r7
1000c0b8:	1009883a 	mov	r4,r2
1000c0bc:	dfc00215 	stw	ra,8(sp)
1000c0c0:	80000015 	stw	zero,0(r16)
1000c0c4:	000fd3c0 	call	1000fd3c <lseek>
1000c0c8:	00ffffc4 	movi	r3,-1
1000c0cc:	10c00526 	beq	r2,r3,1000c0e4 <_lseek_r+0x50>
1000c0d0:	dfc00217 	ldw	ra,8(sp)
1000c0d4:	dc400117 	ldw	r17,4(sp)
1000c0d8:	dc000017 	ldw	r16,0(sp)
1000c0dc:	dec00304 	addi	sp,sp,12
1000c0e0:	f800283a 	ret
1000c0e4:	80c00017 	ldw	r3,0(r16)
1000c0e8:	183ff926 	beq	r3,zero,1000c0d0 <__alt_data_end+0xf800c0d0>
1000c0ec:	88c00015 	stw	r3,0(r17)
1000c0f0:	003ff706 	br	1000c0d0 <__alt_data_end+0xf800c0d0>

1000c0f4 <_read_r>:
1000c0f4:	defffd04 	addi	sp,sp,-12
1000c0f8:	2805883a 	mov	r2,r5
1000c0fc:	dc000015 	stw	r16,0(sp)
1000c100:	04040074 	movhi	r16,4097
1000c104:	dc400115 	stw	r17,4(sp)
1000c108:	300b883a 	mov	r5,r6
1000c10c:	84187804 	addi	r16,r16,25056
1000c110:	2023883a 	mov	r17,r4
1000c114:	380d883a 	mov	r6,r7
1000c118:	1009883a 	mov	r4,r2
1000c11c:	dfc00215 	stw	ra,8(sp)
1000c120:	80000015 	stw	zero,0(r16)
1000c124:	000ff180 	call	1000ff18 <read>
1000c128:	00ffffc4 	movi	r3,-1
1000c12c:	10c00526 	beq	r2,r3,1000c144 <_read_r+0x50>
1000c130:	dfc00217 	ldw	ra,8(sp)
1000c134:	dc400117 	ldw	r17,4(sp)
1000c138:	dc000017 	ldw	r16,0(sp)
1000c13c:	dec00304 	addi	sp,sp,12
1000c140:	f800283a 	ret
1000c144:	80c00017 	ldw	r3,0(r16)
1000c148:	183ff926 	beq	r3,zero,1000c130 <__alt_data_end+0xf800c130>
1000c14c:	88c00015 	stw	r3,0(r17)
1000c150:	003ff706 	br	1000c130 <__alt_data_end+0xf800c130>

1000c154 <__swbuf_r>:
1000c154:	defffb04 	addi	sp,sp,-20
1000c158:	dcc00315 	stw	r19,12(sp)
1000c15c:	dc800215 	stw	r18,8(sp)
1000c160:	dc000015 	stw	r16,0(sp)
1000c164:	dfc00415 	stw	ra,16(sp)
1000c168:	dc400115 	stw	r17,4(sp)
1000c16c:	2025883a 	mov	r18,r4
1000c170:	2827883a 	mov	r19,r5
1000c174:	3021883a 	mov	r16,r6
1000c178:	20000226 	beq	r4,zero,1000c184 <__swbuf_r+0x30>
1000c17c:	20800e17 	ldw	r2,56(r4)
1000c180:	10004226 	beq	r2,zero,1000c28c <__swbuf_r+0x138>
1000c184:	80800617 	ldw	r2,24(r16)
1000c188:	8100030b 	ldhu	r4,12(r16)
1000c18c:	80800215 	stw	r2,8(r16)
1000c190:	2080020c 	andi	r2,r4,8
1000c194:	10003626 	beq	r2,zero,1000c270 <__swbuf_r+0x11c>
1000c198:	80c00417 	ldw	r3,16(r16)
1000c19c:	18003426 	beq	r3,zero,1000c270 <__swbuf_r+0x11c>
1000c1a0:	2088000c 	andi	r2,r4,8192
1000c1a4:	9c403fcc 	andi	r17,r19,255
1000c1a8:	10001a26 	beq	r2,zero,1000c214 <__swbuf_r+0xc0>
1000c1ac:	80800017 	ldw	r2,0(r16)
1000c1b0:	81000517 	ldw	r4,20(r16)
1000c1b4:	10c7c83a 	sub	r3,r2,r3
1000c1b8:	1900200e 	bge	r3,r4,1000c23c <__swbuf_r+0xe8>
1000c1bc:	18c00044 	addi	r3,r3,1
1000c1c0:	81000217 	ldw	r4,8(r16)
1000c1c4:	11400044 	addi	r5,r2,1
1000c1c8:	81400015 	stw	r5,0(r16)
1000c1cc:	213fffc4 	addi	r4,r4,-1
1000c1d0:	81000215 	stw	r4,8(r16)
1000c1d4:	14c00005 	stb	r19,0(r2)
1000c1d8:	80800517 	ldw	r2,20(r16)
1000c1dc:	10c01e26 	beq	r2,r3,1000c258 <__swbuf_r+0x104>
1000c1e0:	8080030b 	ldhu	r2,12(r16)
1000c1e4:	1080004c 	andi	r2,r2,1
1000c1e8:	10000226 	beq	r2,zero,1000c1f4 <__swbuf_r+0xa0>
1000c1ec:	00800284 	movi	r2,10
1000c1f0:	88801926 	beq	r17,r2,1000c258 <__swbuf_r+0x104>
1000c1f4:	8805883a 	mov	r2,r17
1000c1f8:	dfc00417 	ldw	ra,16(sp)
1000c1fc:	dcc00317 	ldw	r19,12(sp)
1000c200:	dc800217 	ldw	r18,8(sp)
1000c204:	dc400117 	ldw	r17,4(sp)
1000c208:	dc000017 	ldw	r16,0(sp)
1000c20c:	dec00504 	addi	sp,sp,20
1000c210:	f800283a 	ret
1000c214:	81401917 	ldw	r5,100(r16)
1000c218:	00b7ffc4 	movi	r2,-8193
1000c21c:	21080014 	ori	r4,r4,8192
1000c220:	2884703a 	and	r2,r5,r2
1000c224:	80801915 	stw	r2,100(r16)
1000c228:	80800017 	ldw	r2,0(r16)
1000c22c:	8100030d 	sth	r4,12(r16)
1000c230:	81000517 	ldw	r4,20(r16)
1000c234:	10c7c83a 	sub	r3,r2,r3
1000c238:	193fe016 	blt	r3,r4,1000c1bc <__alt_data_end+0xf800c1bc>
1000c23c:	800b883a 	mov	r5,r16
1000c240:	9009883a 	mov	r4,r18
1000c244:	0006d400 	call	10006d40 <_fflush_r>
1000c248:	1000071e 	bne	r2,zero,1000c268 <__swbuf_r+0x114>
1000c24c:	80800017 	ldw	r2,0(r16)
1000c250:	00c00044 	movi	r3,1
1000c254:	003fda06 	br	1000c1c0 <__alt_data_end+0xf800c1c0>
1000c258:	800b883a 	mov	r5,r16
1000c25c:	9009883a 	mov	r4,r18
1000c260:	0006d400 	call	10006d40 <_fflush_r>
1000c264:	103fe326 	beq	r2,zero,1000c1f4 <__alt_data_end+0xf800c1f4>
1000c268:	00bfffc4 	movi	r2,-1
1000c26c:	003fe206 	br	1000c1f8 <__alt_data_end+0xf800c1f8>
1000c270:	800b883a 	mov	r5,r16
1000c274:	9009883a 	mov	r4,r18
1000c278:	00051200 	call	10005120 <__swsetup_r>
1000c27c:	103ffa1e 	bne	r2,zero,1000c268 <__alt_data_end+0xf800c268>
1000c280:	8100030b 	ldhu	r4,12(r16)
1000c284:	80c00417 	ldw	r3,16(r16)
1000c288:	003fc506 	br	1000c1a0 <__alt_data_end+0xf800c1a0>
1000c28c:	000712c0 	call	1000712c <__sinit>
1000c290:	003fbc06 	br	1000c184 <__alt_data_end+0xf800c184>

1000c294 <__swbuf>:
1000c294:	00840074 	movhi	r2,4097
1000c298:	1091a004 	addi	r2,r2,18048
1000c29c:	280d883a 	mov	r6,r5
1000c2a0:	200b883a 	mov	r5,r4
1000c2a4:	11000017 	ldw	r4,0(r2)
1000c2a8:	000c1541 	jmpi	1000c154 <__swbuf_r>

1000c2ac <_wcrtomb_r>:
1000c2ac:	defff604 	addi	sp,sp,-40
1000c2b0:	00840074 	movhi	r2,4097
1000c2b4:	dc800815 	stw	r18,32(sp)
1000c2b8:	dc400715 	stw	r17,28(sp)
1000c2bc:	dc000615 	stw	r16,24(sp)
1000c2c0:	1091a404 	addi	r2,r2,18064
1000c2c4:	dfc00915 	stw	ra,36(sp)
1000c2c8:	2021883a 	mov	r16,r4
1000c2cc:	3823883a 	mov	r17,r7
1000c2d0:	14800017 	ldw	r18,0(r2)
1000c2d4:	28001426 	beq	r5,zero,1000c328 <_wcrtomb_r+0x7c>
1000c2d8:	d9400415 	stw	r5,16(sp)
1000c2dc:	d9800515 	stw	r6,20(sp)
1000c2e0:	0007c7c0 	call	10007c7c <__locale_charset>
1000c2e4:	d9800517 	ldw	r6,20(sp)
1000c2e8:	d9400417 	ldw	r5,16(sp)
1000c2ec:	100f883a 	mov	r7,r2
1000c2f0:	dc400015 	stw	r17,0(sp)
1000c2f4:	8009883a 	mov	r4,r16
1000c2f8:	903ee83a 	callr	r18
1000c2fc:	00ffffc4 	movi	r3,-1
1000c300:	10c0031e 	bne	r2,r3,1000c310 <_wcrtomb_r+0x64>
1000c304:	88000015 	stw	zero,0(r17)
1000c308:	00c02284 	movi	r3,138
1000c30c:	80c00015 	stw	r3,0(r16)
1000c310:	dfc00917 	ldw	ra,36(sp)
1000c314:	dc800817 	ldw	r18,32(sp)
1000c318:	dc400717 	ldw	r17,28(sp)
1000c31c:	dc000617 	ldw	r16,24(sp)
1000c320:	dec00a04 	addi	sp,sp,40
1000c324:	f800283a 	ret
1000c328:	0007c7c0 	call	10007c7c <__locale_charset>
1000c32c:	100f883a 	mov	r7,r2
1000c330:	dc400015 	stw	r17,0(sp)
1000c334:	000d883a 	mov	r6,zero
1000c338:	d9400104 	addi	r5,sp,4
1000c33c:	8009883a 	mov	r4,r16
1000c340:	903ee83a 	callr	r18
1000c344:	003fed06 	br	1000c2fc <__alt_data_end+0xf800c2fc>

1000c348 <wcrtomb>:
1000c348:	defff604 	addi	sp,sp,-40
1000c34c:	00840074 	movhi	r2,4097
1000c350:	dc800615 	stw	r18,24(sp)
1000c354:	dc400515 	stw	r17,20(sp)
1000c358:	1091a004 	addi	r2,r2,18048
1000c35c:	dfc00915 	stw	ra,36(sp)
1000c360:	dd000815 	stw	r20,32(sp)
1000c364:	dcc00715 	stw	r19,28(sp)
1000c368:	dc000415 	stw	r16,16(sp)
1000c36c:	3025883a 	mov	r18,r6
1000c370:	14400017 	ldw	r17,0(r2)
1000c374:	20001926 	beq	r4,zero,1000c3dc <wcrtomb+0x94>
1000c378:	00840074 	movhi	r2,4097
1000c37c:	1091a404 	addi	r2,r2,18064
1000c380:	15000017 	ldw	r20,0(r2)
1000c384:	2021883a 	mov	r16,r4
1000c388:	2827883a 	mov	r19,r5
1000c38c:	0007c7c0 	call	10007c7c <__locale_charset>
1000c390:	100f883a 	mov	r7,r2
1000c394:	dc800015 	stw	r18,0(sp)
1000c398:	980d883a 	mov	r6,r19
1000c39c:	800b883a 	mov	r5,r16
1000c3a0:	8809883a 	mov	r4,r17
1000c3a4:	a03ee83a 	callr	r20
1000c3a8:	00ffffc4 	movi	r3,-1
1000c3ac:	10c0031e 	bne	r2,r3,1000c3bc <wcrtomb+0x74>
1000c3b0:	90000015 	stw	zero,0(r18)
1000c3b4:	00c02284 	movi	r3,138
1000c3b8:	88c00015 	stw	r3,0(r17)
1000c3bc:	dfc00917 	ldw	ra,36(sp)
1000c3c0:	dd000817 	ldw	r20,32(sp)
1000c3c4:	dcc00717 	ldw	r19,28(sp)
1000c3c8:	dc800617 	ldw	r18,24(sp)
1000c3cc:	dc400517 	ldw	r17,20(sp)
1000c3d0:	dc000417 	ldw	r16,16(sp)
1000c3d4:	dec00a04 	addi	sp,sp,40
1000c3d8:	f800283a 	ret
1000c3dc:	00840074 	movhi	r2,4097
1000c3e0:	1091a404 	addi	r2,r2,18064
1000c3e4:	14000017 	ldw	r16,0(r2)
1000c3e8:	0007c7c0 	call	10007c7c <__locale_charset>
1000c3ec:	100f883a 	mov	r7,r2
1000c3f0:	dc800015 	stw	r18,0(sp)
1000c3f4:	000d883a 	mov	r6,zero
1000c3f8:	d9400104 	addi	r5,sp,4
1000c3fc:	8809883a 	mov	r4,r17
1000c400:	803ee83a 	callr	r16
1000c404:	003fe806 	br	1000c3a8 <__alt_data_end+0xf800c3a8>

1000c408 <__ascii_wctomb>:
1000c408:	28000526 	beq	r5,zero,1000c420 <__ascii_wctomb+0x18>
1000c40c:	00803fc4 	movi	r2,255
1000c410:	11800536 	bltu	r2,r6,1000c428 <__ascii_wctomb+0x20>
1000c414:	29800005 	stb	r6,0(r5)
1000c418:	00800044 	movi	r2,1
1000c41c:	f800283a 	ret
1000c420:	0005883a 	mov	r2,zero
1000c424:	f800283a 	ret
1000c428:	00802284 	movi	r2,138
1000c42c:	20800015 	stw	r2,0(r4)
1000c430:	00bfffc4 	movi	r2,-1
1000c434:	f800283a 	ret

1000c438 <_wctomb_r>:
1000c438:	00840074 	movhi	r2,4097
1000c43c:	defff904 	addi	sp,sp,-28
1000c440:	1091a404 	addi	r2,r2,18064
1000c444:	dfc00615 	stw	ra,24(sp)
1000c448:	dc400515 	stw	r17,20(sp)
1000c44c:	dc000415 	stw	r16,16(sp)
1000c450:	3823883a 	mov	r17,r7
1000c454:	14000017 	ldw	r16,0(r2)
1000c458:	d9000115 	stw	r4,4(sp)
1000c45c:	d9400215 	stw	r5,8(sp)
1000c460:	d9800315 	stw	r6,12(sp)
1000c464:	0007c7c0 	call	10007c7c <__locale_charset>
1000c468:	d9800317 	ldw	r6,12(sp)
1000c46c:	d9400217 	ldw	r5,8(sp)
1000c470:	d9000117 	ldw	r4,4(sp)
1000c474:	100f883a 	mov	r7,r2
1000c478:	dc400015 	stw	r17,0(sp)
1000c47c:	803ee83a 	callr	r16
1000c480:	dfc00617 	ldw	ra,24(sp)
1000c484:	dc400517 	ldw	r17,20(sp)
1000c488:	dc000417 	ldw	r16,16(sp)
1000c48c:	dec00704 	addi	sp,sp,28
1000c490:	f800283a 	ret

1000c494 <__udivdi3>:
1000c494:	defff404 	addi	sp,sp,-48
1000c498:	dcc00515 	stw	r19,20(sp)
1000c49c:	dc000215 	stw	r16,8(sp)
1000c4a0:	dfc00b15 	stw	ra,44(sp)
1000c4a4:	df000a15 	stw	fp,40(sp)
1000c4a8:	ddc00915 	stw	r23,36(sp)
1000c4ac:	dd800815 	stw	r22,32(sp)
1000c4b0:	dd400715 	stw	r21,28(sp)
1000c4b4:	dd000615 	stw	r20,24(sp)
1000c4b8:	dc800415 	stw	r18,16(sp)
1000c4bc:	dc400315 	stw	r17,12(sp)
1000c4c0:	2027883a 	mov	r19,r4
1000c4c4:	2821883a 	mov	r16,r5
1000c4c8:	3800461e 	bne	r7,zero,1000c5e4 <__udivdi3+0x150>
1000c4cc:	3023883a 	mov	r17,r6
1000c4d0:	2025883a 	mov	r18,r4
1000c4d4:	2980572e 	bgeu	r5,r6,1000c634 <__udivdi3+0x1a0>
1000c4d8:	00bfffd4 	movui	r2,65535
1000c4dc:	282d883a 	mov	r22,r5
1000c4e0:	1180b236 	bltu	r2,r6,1000c7ac <__udivdi3+0x318>
1000c4e4:	00803fc4 	movi	r2,255
1000c4e8:	1185803a 	cmpltu	r2,r2,r6
1000c4ec:	100490fa 	slli	r2,r2,3
1000c4f0:	3086d83a 	srl	r3,r6,r2
1000c4f4:	01040074 	movhi	r4,4097
1000c4f8:	210aa704 	addi	r4,r4,10908
1000c4fc:	20c7883a 	add	r3,r4,r3
1000c500:	18c00003 	ldbu	r3,0(r3)
1000c504:	1885883a 	add	r2,r3,r2
1000c508:	00c00804 	movi	r3,32
1000c50c:	1887c83a 	sub	r3,r3,r2
1000c510:	18000526 	beq	r3,zero,1000c528 <__udivdi3+0x94>
1000c514:	80e0983a 	sll	r16,r16,r3
1000c518:	9884d83a 	srl	r2,r19,r2
1000c51c:	30e2983a 	sll	r17,r6,r3
1000c520:	98e4983a 	sll	r18,r19,r3
1000c524:	142cb03a 	or	r22,r2,r16
1000c528:	882ad43a 	srli	r21,r17,16
1000c52c:	b009883a 	mov	r4,r22
1000c530:	8d3fffcc 	andi	r20,r17,65535
1000c534:	a80b883a 	mov	r5,r21
1000c538:	0002b140 	call	10002b14 <__umodsi3>
1000c53c:	b009883a 	mov	r4,r22
1000c540:	a80b883a 	mov	r5,r21
1000c544:	1027883a 	mov	r19,r2
1000c548:	0002ab00 	call	10002ab0 <__udivsi3>
1000c54c:	100b883a 	mov	r5,r2
1000c550:	a009883a 	mov	r4,r20
1000c554:	102d883a 	mov	r22,r2
1000c558:	0002b6c0 	call	10002b6c <__mulsi3>
1000c55c:	9826943a 	slli	r19,r19,16
1000c560:	9006d43a 	srli	r3,r18,16
1000c564:	1cc6b03a 	or	r3,r3,r19
1000c568:	1880052e 	bgeu	r3,r2,1000c580 <__udivdi3+0xec>
1000c56c:	1c47883a 	add	r3,r3,r17
1000c570:	b13fffc4 	addi	r4,r22,-1
1000c574:	1c400136 	bltu	r3,r17,1000c57c <__udivdi3+0xe8>
1000c578:	18814236 	bltu	r3,r2,1000ca84 <__udivdi3+0x5f0>
1000c57c:	202d883a 	mov	r22,r4
1000c580:	18a1c83a 	sub	r16,r3,r2
1000c584:	8009883a 	mov	r4,r16
1000c588:	a80b883a 	mov	r5,r21
1000c58c:	0002b140 	call	10002b14 <__umodsi3>
1000c590:	1027883a 	mov	r19,r2
1000c594:	8009883a 	mov	r4,r16
1000c598:	a80b883a 	mov	r5,r21
1000c59c:	9826943a 	slli	r19,r19,16
1000c5a0:	0002ab00 	call	10002ab0 <__udivsi3>
1000c5a4:	100b883a 	mov	r5,r2
1000c5a8:	a009883a 	mov	r4,r20
1000c5ac:	94bfffcc 	andi	r18,r18,65535
1000c5b0:	1021883a 	mov	r16,r2
1000c5b4:	94e4b03a 	or	r18,r18,r19
1000c5b8:	0002b6c0 	call	10002b6c <__mulsi3>
1000c5bc:	9080052e 	bgeu	r18,r2,1000c5d4 <__udivdi3+0x140>
1000c5c0:	8ca5883a 	add	r18,r17,r18
1000c5c4:	80ffffc4 	addi	r3,r16,-1
1000c5c8:	94410c36 	bltu	r18,r17,1000c9fc <__udivdi3+0x568>
1000c5cc:	90810b2e 	bgeu	r18,r2,1000c9fc <__udivdi3+0x568>
1000c5d0:	843fff84 	addi	r16,r16,-2
1000c5d4:	b004943a 	slli	r2,r22,16
1000c5d8:	0007883a 	mov	r3,zero
1000c5dc:	1404b03a 	or	r2,r2,r16
1000c5e0:	00005e06 	br	1000c75c <__udivdi3+0x2c8>
1000c5e4:	29c05b36 	bltu	r5,r7,1000c754 <__udivdi3+0x2c0>
1000c5e8:	00bfffd4 	movui	r2,65535
1000c5ec:	11c0672e 	bgeu	r2,r7,1000c78c <__udivdi3+0x2f8>
1000c5f0:	00804034 	movhi	r2,256
1000c5f4:	10bfffc4 	addi	r2,r2,-1
1000c5f8:	11c10a36 	bltu	r2,r7,1000ca24 <__udivdi3+0x590>
1000c5fc:	00800404 	movi	r2,16
1000c600:	3886d83a 	srl	r3,r7,r2
1000c604:	01040074 	movhi	r4,4097
1000c608:	210aa704 	addi	r4,r4,10908
1000c60c:	20c7883a 	add	r3,r4,r3
1000c610:	18c00003 	ldbu	r3,0(r3)
1000c614:	05c00804 	movi	r23,32
1000c618:	1885883a 	add	r2,r3,r2
1000c61c:	b8afc83a 	sub	r23,r23,r2
1000c620:	b800671e 	bne	r23,zero,1000c7c0 <__udivdi3+0x32c>
1000c624:	3c010536 	bltu	r7,r16,1000ca3c <__udivdi3+0x5a8>
1000c628:	9985403a 	cmpgeu	r2,r19,r6
1000c62c:	0007883a 	mov	r3,zero
1000c630:	00004a06 	br	1000c75c <__udivdi3+0x2c8>
1000c634:	3000041e 	bne	r6,zero,1000c648 <__udivdi3+0x1b4>
1000c638:	000b883a 	mov	r5,zero
1000c63c:	01000044 	movi	r4,1
1000c640:	0002ab00 	call	10002ab0 <__udivsi3>
1000c644:	1023883a 	mov	r17,r2
1000c648:	00bfffd4 	movui	r2,65535
1000c64c:	1440532e 	bgeu	r2,r17,1000c79c <__udivdi3+0x308>
1000c650:	00804034 	movhi	r2,256
1000c654:	10bfffc4 	addi	r2,r2,-1
1000c658:	1440f436 	bltu	r2,r17,1000ca2c <__udivdi3+0x598>
1000c65c:	00800404 	movi	r2,16
1000c660:	8886d83a 	srl	r3,r17,r2
1000c664:	01040074 	movhi	r4,4097
1000c668:	210aa704 	addi	r4,r4,10908
1000c66c:	20c7883a 	add	r3,r4,r3
1000c670:	18c00003 	ldbu	r3,0(r3)
1000c674:	1885883a 	add	r2,r3,r2
1000c678:	00c00804 	movi	r3,32
1000c67c:	1887c83a 	sub	r3,r3,r2
1000c680:	1800a51e 	bne	r3,zero,1000c918 <__udivdi3+0x484>
1000c684:	882ad43a 	srli	r21,r17,16
1000c688:	8461c83a 	sub	r16,r16,r17
1000c68c:	8d3fffcc 	andi	r20,r17,65535
1000c690:	00c00044 	movi	r3,1
1000c694:	a80b883a 	mov	r5,r21
1000c698:	8009883a 	mov	r4,r16
1000c69c:	d8c00115 	stw	r3,4(sp)
1000c6a0:	0002b140 	call	10002b14 <__umodsi3>
1000c6a4:	a80b883a 	mov	r5,r21
1000c6a8:	8009883a 	mov	r4,r16
1000c6ac:	1027883a 	mov	r19,r2
1000c6b0:	0002ab00 	call	10002ab0 <__udivsi3>
1000c6b4:	a00b883a 	mov	r5,r20
1000c6b8:	1009883a 	mov	r4,r2
1000c6bc:	102d883a 	mov	r22,r2
1000c6c0:	0002b6c0 	call	10002b6c <__mulsi3>
1000c6c4:	9826943a 	slli	r19,r19,16
1000c6c8:	900ed43a 	srli	r7,r18,16
1000c6cc:	d8c00117 	ldw	r3,4(sp)
1000c6d0:	3cceb03a 	or	r7,r7,r19
1000c6d4:	3880052e 	bgeu	r7,r2,1000c6ec <__udivdi3+0x258>
1000c6d8:	3c4f883a 	add	r7,r7,r17
1000c6dc:	b13fffc4 	addi	r4,r22,-1
1000c6e0:	3c400136 	bltu	r7,r17,1000c6e8 <__udivdi3+0x254>
1000c6e4:	3880e436 	bltu	r7,r2,1000ca78 <__udivdi3+0x5e4>
1000c6e8:	202d883a 	mov	r22,r4
1000c6ec:	38a1c83a 	sub	r16,r7,r2
1000c6f0:	8009883a 	mov	r4,r16
1000c6f4:	a80b883a 	mov	r5,r21
1000c6f8:	d8c00115 	stw	r3,4(sp)
1000c6fc:	0002b140 	call	10002b14 <__umodsi3>
1000c700:	1027883a 	mov	r19,r2
1000c704:	8009883a 	mov	r4,r16
1000c708:	a80b883a 	mov	r5,r21
1000c70c:	9826943a 	slli	r19,r19,16
1000c710:	0002ab00 	call	10002ab0 <__udivsi3>
1000c714:	a00b883a 	mov	r5,r20
1000c718:	1009883a 	mov	r4,r2
1000c71c:	94bfffcc 	andi	r18,r18,65535
1000c720:	1021883a 	mov	r16,r2
1000c724:	94e4b03a 	or	r18,r18,r19
1000c728:	0002b6c0 	call	10002b6c <__mulsi3>
1000c72c:	d8c00117 	ldw	r3,4(sp)
1000c730:	9080052e 	bgeu	r18,r2,1000c748 <__udivdi3+0x2b4>
1000c734:	8ca5883a 	add	r18,r17,r18
1000c738:	813fffc4 	addi	r4,r16,-1
1000c73c:	9440ad36 	bltu	r18,r17,1000c9f4 <__udivdi3+0x560>
1000c740:	9080ac2e 	bgeu	r18,r2,1000c9f4 <__udivdi3+0x560>
1000c744:	843fff84 	addi	r16,r16,-2
1000c748:	b004943a 	slli	r2,r22,16
1000c74c:	1404b03a 	or	r2,r2,r16
1000c750:	00000206 	br	1000c75c <__udivdi3+0x2c8>
1000c754:	0007883a 	mov	r3,zero
1000c758:	0005883a 	mov	r2,zero
1000c75c:	dfc00b17 	ldw	ra,44(sp)
1000c760:	df000a17 	ldw	fp,40(sp)
1000c764:	ddc00917 	ldw	r23,36(sp)
1000c768:	dd800817 	ldw	r22,32(sp)
1000c76c:	dd400717 	ldw	r21,28(sp)
1000c770:	dd000617 	ldw	r20,24(sp)
1000c774:	dcc00517 	ldw	r19,20(sp)
1000c778:	dc800417 	ldw	r18,16(sp)
1000c77c:	dc400317 	ldw	r17,12(sp)
1000c780:	dc000217 	ldw	r16,8(sp)
1000c784:	dec00c04 	addi	sp,sp,48
1000c788:	f800283a 	ret
1000c78c:	00803fc4 	movi	r2,255
1000c790:	11c5803a 	cmpltu	r2,r2,r7
1000c794:	100490fa 	slli	r2,r2,3
1000c798:	003f9906 	br	1000c600 <__alt_data_end+0xf800c600>
1000c79c:	00803fc4 	movi	r2,255
1000c7a0:	1445803a 	cmpltu	r2,r2,r17
1000c7a4:	100490fa 	slli	r2,r2,3
1000c7a8:	003fad06 	br	1000c660 <__alt_data_end+0xf800c660>
1000c7ac:	00804034 	movhi	r2,256
1000c7b0:	10bfffc4 	addi	r2,r2,-1
1000c7b4:	11809f36 	bltu	r2,r6,1000ca34 <__udivdi3+0x5a0>
1000c7b8:	00800404 	movi	r2,16
1000c7bc:	003f4c06 	br	1000c4f0 <__alt_data_end+0xf800c4f0>
1000c7c0:	3dce983a 	sll	r7,r7,r23
1000c7c4:	30b8d83a 	srl	fp,r6,r2
1000c7c8:	80a2d83a 	srl	r17,r16,r2
1000c7cc:	35cc983a 	sll	r6,r6,r23
1000c7d0:	3f38b03a 	or	fp,r7,fp
1000c7d4:	e024d43a 	srli	r18,fp,16
1000c7d8:	9884d83a 	srl	r2,r19,r2
1000c7dc:	85e0983a 	sll	r16,r16,r23
1000c7e0:	8809883a 	mov	r4,r17
1000c7e4:	900b883a 	mov	r5,r18
1000c7e8:	d9800015 	stw	r6,0(sp)
1000c7ec:	1420b03a 	or	r16,r2,r16
1000c7f0:	0002b140 	call	10002b14 <__umodsi3>
1000c7f4:	900b883a 	mov	r5,r18
1000c7f8:	8809883a 	mov	r4,r17
1000c7fc:	1029883a 	mov	r20,r2
1000c800:	e5bfffcc 	andi	r22,fp,65535
1000c804:	0002ab00 	call	10002ab0 <__udivsi3>
1000c808:	100b883a 	mov	r5,r2
1000c80c:	b009883a 	mov	r4,r22
1000c810:	102b883a 	mov	r21,r2
1000c814:	0002b6c0 	call	10002b6c <__mulsi3>
1000c818:	a028943a 	slli	r20,r20,16
1000c81c:	8006d43a 	srli	r3,r16,16
1000c820:	1d06b03a 	or	r3,r3,r20
1000c824:	1880042e 	bgeu	r3,r2,1000c838 <__udivdi3+0x3a4>
1000c828:	1f07883a 	add	r3,r3,fp
1000c82c:	a93fffc4 	addi	r4,r21,-1
1000c830:	1f00892e 	bgeu	r3,fp,1000ca58 <__udivdi3+0x5c4>
1000c834:	202b883a 	mov	r21,r4
1000c838:	18a3c83a 	sub	r17,r3,r2
1000c83c:	8809883a 	mov	r4,r17
1000c840:	900b883a 	mov	r5,r18
1000c844:	0002b140 	call	10002b14 <__umodsi3>
1000c848:	1029883a 	mov	r20,r2
1000c84c:	8809883a 	mov	r4,r17
1000c850:	900b883a 	mov	r5,r18
1000c854:	a028943a 	slli	r20,r20,16
1000c858:	0002ab00 	call	10002ab0 <__udivsi3>
1000c85c:	100b883a 	mov	r5,r2
1000c860:	b009883a 	mov	r4,r22
1000c864:	843fffcc 	andi	r16,r16,65535
1000c868:	1023883a 	mov	r17,r2
1000c86c:	8520b03a 	or	r16,r16,r20
1000c870:	0002b6c0 	call	10002b6c <__mulsi3>
1000c874:	8080042e 	bgeu	r16,r2,1000c888 <__udivdi3+0x3f4>
1000c878:	8721883a 	add	r16,r16,fp
1000c87c:	88ffffc4 	addi	r3,r17,-1
1000c880:	8700712e 	bgeu	r16,fp,1000ca48 <__udivdi3+0x5b4>
1000c884:	1823883a 	mov	r17,r3
1000c888:	a80e943a 	slli	r7,r21,16
1000c88c:	d8c00017 	ldw	r3,0(sp)
1000c890:	80a1c83a 	sub	r16,r16,r2
1000c894:	3c64b03a 	or	r18,r7,r17
1000c898:	1d3fffcc 	andi	r20,r3,65535
1000c89c:	9022d43a 	srli	r17,r18,16
1000c8a0:	95bfffcc 	andi	r22,r18,65535
1000c8a4:	a00b883a 	mov	r5,r20
1000c8a8:	b009883a 	mov	r4,r22
1000c8ac:	182ad43a 	srli	r21,r3,16
1000c8b0:	0002b6c0 	call	10002b6c <__mulsi3>
1000c8b4:	a00b883a 	mov	r5,r20
1000c8b8:	8809883a 	mov	r4,r17
1000c8bc:	1039883a 	mov	fp,r2
1000c8c0:	0002b6c0 	call	10002b6c <__mulsi3>
1000c8c4:	8809883a 	mov	r4,r17
1000c8c8:	a80b883a 	mov	r5,r21
1000c8cc:	1029883a 	mov	r20,r2
1000c8d0:	0002b6c0 	call	10002b6c <__mulsi3>
1000c8d4:	a80b883a 	mov	r5,r21
1000c8d8:	b009883a 	mov	r4,r22
1000c8dc:	1023883a 	mov	r17,r2
1000c8e0:	0002b6c0 	call	10002b6c <__mulsi3>
1000c8e4:	e006d43a 	srli	r3,fp,16
1000c8e8:	1505883a 	add	r2,r2,r20
1000c8ec:	1887883a 	add	r3,r3,r2
1000c8f0:	1d00022e 	bgeu	r3,r20,1000c8fc <__udivdi3+0x468>
1000c8f4:	00800074 	movhi	r2,1
1000c8f8:	88a3883a 	add	r17,r17,r2
1000c8fc:	1804d43a 	srli	r2,r3,16
1000c900:	1463883a 	add	r17,r2,r17
1000c904:	84404436 	bltu	r16,r17,1000ca18 <__udivdi3+0x584>
1000c908:	84403e26 	beq	r16,r17,1000ca04 <__udivdi3+0x570>
1000c90c:	9005883a 	mov	r2,r18
1000c910:	0007883a 	mov	r3,zero
1000c914:	003f9106 	br	1000c75c <__alt_data_end+0xf800c75c>
1000c918:	88e2983a 	sll	r17,r17,r3
1000c91c:	80aed83a 	srl	r23,r16,r2
1000c920:	80e0983a 	sll	r16,r16,r3
1000c924:	882ad43a 	srli	r21,r17,16
1000c928:	9884d83a 	srl	r2,r19,r2
1000c92c:	b809883a 	mov	r4,r23
1000c930:	a80b883a 	mov	r5,r21
1000c934:	98e4983a 	sll	r18,r19,r3
1000c938:	142cb03a 	or	r22,r2,r16
1000c93c:	0002b140 	call	10002b14 <__umodsi3>
1000c940:	b809883a 	mov	r4,r23
1000c944:	a80b883a 	mov	r5,r21
1000c948:	1027883a 	mov	r19,r2
1000c94c:	8d3fffcc 	andi	r20,r17,65535
1000c950:	0002ab00 	call	10002ab0 <__udivsi3>
1000c954:	a009883a 	mov	r4,r20
1000c958:	100b883a 	mov	r5,r2
1000c95c:	102f883a 	mov	r23,r2
1000c960:	0002b6c0 	call	10002b6c <__mulsi3>
1000c964:	9826943a 	slli	r19,r19,16
1000c968:	b008d43a 	srli	r4,r22,16
1000c96c:	24c8b03a 	or	r4,r4,r19
1000c970:	2080062e 	bgeu	r4,r2,1000c98c <__udivdi3+0x4f8>
1000c974:	2449883a 	add	r4,r4,r17
1000c978:	b8ffffc4 	addi	r3,r23,-1
1000c97c:	24403c36 	bltu	r4,r17,1000ca70 <__udivdi3+0x5dc>
1000c980:	20803b2e 	bgeu	r4,r2,1000ca70 <__udivdi3+0x5dc>
1000c984:	bdffff84 	addi	r23,r23,-2
1000c988:	2449883a 	add	r4,r4,r17
1000c98c:	20a1c83a 	sub	r16,r4,r2
1000c990:	a80b883a 	mov	r5,r21
1000c994:	8009883a 	mov	r4,r16
1000c998:	0002b140 	call	10002b14 <__umodsi3>
1000c99c:	a80b883a 	mov	r5,r21
1000c9a0:	8009883a 	mov	r4,r16
1000c9a4:	1027883a 	mov	r19,r2
1000c9a8:	0002ab00 	call	10002ab0 <__udivsi3>
1000c9ac:	a009883a 	mov	r4,r20
1000c9b0:	100b883a 	mov	r5,r2
1000c9b4:	9826943a 	slli	r19,r19,16
1000c9b8:	1039883a 	mov	fp,r2
1000c9bc:	0002b6c0 	call	10002b6c <__mulsi3>
1000c9c0:	b13fffcc 	andi	r4,r22,65535
1000c9c4:	24c8b03a 	or	r4,r4,r19
1000c9c8:	2080062e 	bgeu	r4,r2,1000c9e4 <__udivdi3+0x550>
1000c9cc:	2449883a 	add	r4,r4,r17
1000c9d0:	e0ffffc4 	addi	r3,fp,-1
1000c9d4:	24402436 	bltu	r4,r17,1000ca68 <__udivdi3+0x5d4>
1000c9d8:	2080232e 	bgeu	r4,r2,1000ca68 <__udivdi3+0x5d4>
1000c9dc:	e73fff84 	addi	fp,fp,-2
1000c9e0:	2449883a 	add	r4,r4,r17
1000c9e4:	b82e943a 	slli	r23,r23,16
1000c9e8:	20a1c83a 	sub	r16,r4,r2
1000c9ec:	bf06b03a 	or	r3,r23,fp
1000c9f0:	003f2806 	br	1000c694 <__alt_data_end+0xf800c694>
1000c9f4:	2021883a 	mov	r16,r4
1000c9f8:	003f5306 	br	1000c748 <__alt_data_end+0xf800c748>
1000c9fc:	1821883a 	mov	r16,r3
1000ca00:	003ef406 	br	1000c5d4 <__alt_data_end+0xf800c5d4>
1000ca04:	1806943a 	slli	r3,r3,16
1000ca08:	9de6983a 	sll	r19,r19,r23
1000ca0c:	e73fffcc 	andi	fp,fp,65535
1000ca10:	1f07883a 	add	r3,r3,fp
1000ca14:	98ffbd2e 	bgeu	r19,r3,1000c90c <__alt_data_end+0xf800c90c>
1000ca18:	90bfffc4 	addi	r2,r18,-1
1000ca1c:	0007883a 	mov	r3,zero
1000ca20:	003f4e06 	br	1000c75c <__alt_data_end+0xf800c75c>
1000ca24:	00800604 	movi	r2,24
1000ca28:	003ef506 	br	1000c600 <__alt_data_end+0xf800c600>
1000ca2c:	00800604 	movi	r2,24
1000ca30:	003f0b06 	br	1000c660 <__alt_data_end+0xf800c660>
1000ca34:	00800604 	movi	r2,24
1000ca38:	003ead06 	br	1000c4f0 <__alt_data_end+0xf800c4f0>
1000ca3c:	0007883a 	mov	r3,zero
1000ca40:	00800044 	movi	r2,1
1000ca44:	003f4506 	br	1000c75c <__alt_data_end+0xf800c75c>
1000ca48:	80bf8e2e 	bgeu	r16,r2,1000c884 <__alt_data_end+0xf800c884>
1000ca4c:	8c7fff84 	addi	r17,r17,-2
1000ca50:	8721883a 	add	r16,r16,fp
1000ca54:	003f8c06 	br	1000c888 <__alt_data_end+0xf800c888>
1000ca58:	18bf762e 	bgeu	r3,r2,1000c834 <__alt_data_end+0xf800c834>
1000ca5c:	ad7fff84 	addi	r21,r21,-2
1000ca60:	1f07883a 	add	r3,r3,fp
1000ca64:	003f7406 	br	1000c838 <__alt_data_end+0xf800c838>
1000ca68:	1839883a 	mov	fp,r3
1000ca6c:	003fdd06 	br	1000c9e4 <__alt_data_end+0xf800c9e4>
1000ca70:	182f883a 	mov	r23,r3
1000ca74:	003fc506 	br	1000c98c <__alt_data_end+0xf800c98c>
1000ca78:	b5bfff84 	addi	r22,r22,-2
1000ca7c:	3c4f883a 	add	r7,r7,r17
1000ca80:	003f1a06 	br	1000c6ec <__alt_data_end+0xf800c6ec>
1000ca84:	b5bfff84 	addi	r22,r22,-2
1000ca88:	1c47883a 	add	r3,r3,r17
1000ca8c:	003ebc06 	br	1000c580 <__alt_data_end+0xf800c580>

1000ca90 <__umoddi3>:
1000ca90:	defff304 	addi	sp,sp,-52
1000ca94:	df000b15 	stw	fp,44(sp)
1000ca98:	dc400415 	stw	r17,16(sp)
1000ca9c:	dc000315 	stw	r16,12(sp)
1000caa0:	dfc00c15 	stw	ra,48(sp)
1000caa4:	ddc00a15 	stw	r23,40(sp)
1000caa8:	dd800915 	stw	r22,36(sp)
1000caac:	dd400815 	stw	r21,32(sp)
1000cab0:	dd000715 	stw	r20,28(sp)
1000cab4:	dcc00615 	stw	r19,24(sp)
1000cab8:	dc800515 	stw	r18,20(sp)
1000cabc:	2021883a 	mov	r16,r4
1000cac0:	2823883a 	mov	r17,r5
1000cac4:	2839883a 	mov	fp,r5
1000cac8:	3800401e 	bne	r7,zero,1000cbcc <__umoddi3+0x13c>
1000cacc:	3027883a 	mov	r19,r6
1000cad0:	2029883a 	mov	r20,r4
1000cad4:	2980552e 	bgeu	r5,r6,1000cc2c <__umoddi3+0x19c>
1000cad8:	00bfffd4 	movui	r2,65535
1000cadc:	1180a236 	bltu	r2,r6,1000cd68 <__umoddi3+0x2d8>
1000cae0:	01003fc4 	movi	r4,255
1000cae4:	2189803a 	cmpltu	r4,r4,r6
1000cae8:	200890fa 	slli	r4,r4,3
1000caec:	3104d83a 	srl	r2,r6,r4
1000caf0:	00c40074 	movhi	r3,4097
1000caf4:	18caa704 	addi	r3,r3,10908
1000caf8:	1885883a 	add	r2,r3,r2
1000cafc:	10c00003 	ldbu	r3,0(r2)
1000cb00:	00800804 	movi	r2,32
1000cb04:	1909883a 	add	r4,r3,r4
1000cb08:	1125c83a 	sub	r18,r2,r4
1000cb0c:	90000526 	beq	r18,zero,1000cb24 <__umoddi3+0x94>
1000cb10:	8ca2983a 	sll	r17,r17,r18
1000cb14:	8108d83a 	srl	r4,r16,r4
1000cb18:	34a6983a 	sll	r19,r6,r18
1000cb1c:	84a8983a 	sll	r20,r16,r18
1000cb20:	2478b03a 	or	fp,r4,r17
1000cb24:	982cd43a 	srli	r22,r19,16
1000cb28:	e009883a 	mov	r4,fp
1000cb2c:	9dffffcc 	andi	r23,r19,65535
1000cb30:	b00b883a 	mov	r5,r22
1000cb34:	0002b140 	call	10002b14 <__umodsi3>
1000cb38:	b00b883a 	mov	r5,r22
1000cb3c:	e009883a 	mov	r4,fp
1000cb40:	102b883a 	mov	r21,r2
1000cb44:	0002ab00 	call	10002ab0 <__udivsi3>
1000cb48:	100b883a 	mov	r5,r2
1000cb4c:	b809883a 	mov	r4,r23
1000cb50:	0002b6c0 	call	10002b6c <__mulsi3>
1000cb54:	a82a943a 	slli	r21,r21,16
1000cb58:	a006d43a 	srli	r3,r20,16
1000cb5c:	1d46b03a 	or	r3,r3,r21
1000cb60:	1880032e 	bgeu	r3,r2,1000cb70 <__umoddi3+0xe0>
1000cb64:	1cc7883a 	add	r3,r3,r19
1000cb68:	1cc00136 	bltu	r3,r19,1000cb70 <__umoddi3+0xe0>
1000cb6c:	18813136 	bltu	r3,r2,1000d034 <__umoddi3+0x5a4>
1000cb70:	18a1c83a 	sub	r16,r3,r2
1000cb74:	b00b883a 	mov	r5,r22
1000cb78:	8009883a 	mov	r4,r16
1000cb7c:	0002b140 	call	10002b14 <__umodsi3>
1000cb80:	b00b883a 	mov	r5,r22
1000cb84:	8009883a 	mov	r4,r16
1000cb88:	1023883a 	mov	r17,r2
1000cb8c:	0002ab00 	call	10002ab0 <__udivsi3>
1000cb90:	100b883a 	mov	r5,r2
1000cb94:	b809883a 	mov	r4,r23
1000cb98:	8822943a 	slli	r17,r17,16
1000cb9c:	0002b6c0 	call	10002b6c <__mulsi3>
1000cba0:	a0ffffcc 	andi	r3,r20,65535
1000cba4:	1c46b03a 	or	r3,r3,r17
1000cba8:	1880042e 	bgeu	r3,r2,1000cbbc <__umoddi3+0x12c>
1000cbac:	1cc7883a 	add	r3,r3,r19
1000cbb0:	1cc00236 	bltu	r3,r19,1000cbbc <__umoddi3+0x12c>
1000cbb4:	1880012e 	bgeu	r3,r2,1000cbbc <__umoddi3+0x12c>
1000cbb8:	1cc7883a 	add	r3,r3,r19
1000cbbc:	1885c83a 	sub	r2,r3,r2
1000cbc0:	1484d83a 	srl	r2,r2,r18
1000cbc4:	0007883a 	mov	r3,zero
1000cbc8:	00005306 	br	1000cd18 <__umoddi3+0x288>
1000cbcc:	29c05036 	bltu	r5,r7,1000cd10 <__umoddi3+0x280>
1000cbd0:	00bfffd4 	movui	r2,65535
1000cbd4:	11c05c2e 	bgeu	r2,r7,1000cd48 <__umoddi3+0x2b8>
1000cbd8:	00804034 	movhi	r2,256
1000cbdc:	10bfffc4 	addi	r2,r2,-1
1000cbe0:	11c10636 	bltu	r2,r7,1000cffc <__umoddi3+0x56c>
1000cbe4:	01000404 	movi	r4,16
1000cbe8:	3904d83a 	srl	r2,r7,r4
1000cbec:	00c40074 	movhi	r3,4097
1000cbf0:	18caa704 	addi	r3,r3,10908
1000cbf4:	1885883a 	add	r2,r3,r2
1000cbf8:	14c00003 	ldbu	r19,0(r2)
1000cbfc:	00c00804 	movi	r3,32
1000cc00:	9927883a 	add	r19,r19,r4
1000cc04:	1ce9c83a 	sub	r20,r3,r19
1000cc08:	a0005c1e 	bne	r20,zero,1000cd7c <__umoddi3+0x2ec>
1000cc0c:	3c400136 	bltu	r7,r17,1000cc14 <__umoddi3+0x184>
1000cc10:	81810a36 	bltu	r16,r6,1000d03c <__umoddi3+0x5ac>
1000cc14:	8185c83a 	sub	r2,r16,r6
1000cc18:	89e3c83a 	sub	r17,r17,r7
1000cc1c:	8089803a 	cmpltu	r4,r16,r2
1000cc20:	8939c83a 	sub	fp,r17,r4
1000cc24:	e007883a 	mov	r3,fp
1000cc28:	00003b06 	br	1000cd18 <__umoddi3+0x288>
1000cc2c:	3000041e 	bne	r6,zero,1000cc40 <__umoddi3+0x1b0>
1000cc30:	000b883a 	mov	r5,zero
1000cc34:	01000044 	movi	r4,1
1000cc38:	0002ab00 	call	10002ab0 <__udivsi3>
1000cc3c:	1027883a 	mov	r19,r2
1000cc40:	00bfffd4 	movui	r2,65535
1000cc44:	14c0442e 	bgeu	r2,r19,1000cd58 <__umoddi3+0x2c8>
1000cc48:	00804034 	movhi	r2,256
1000cc4c:	10bfffc4 	addi	r2,r2,-1
1000cc50:	14c0ec36 	bltu	r2,r19,1000d004 <__umoddi3+0x574>
1000cc54:	00800404 	movi	r2,16
1000cc58:	9886d83a 	srl	r3,r19,r2
1000cc5c:	01040074 	movhi	r4,4097
1000cc60:	210aa704 	addi	r4,r4,10908
1000cc64:	20c7883a 	add	r3,r4,r3
1000cc68:	18c00003 	ldbu	r3,0(r3)
1000cc6c:	1887883a 	add	r3,r3,r2
1000cc70:	00800804 	movi	r2,32
1000cc74:	10e5c83a 	sub	r18,r2,r3
1000cc78:	9000ab1e 	bne	r18,zero,1000cf28 <__umoddi3+0x498>
1000cc7c:	982cd43a 	srli	r22,r19,16
1000cc80:	8ce3c83a 	sub	r17,r17,r19
1000cc84:	9dffffcc 	andi	r23,r19,65535
1000cc88:	b00b883a 	mov	r5,r22
1000cc8c:	8809883a 	mov	r4,r17
1000cc90:	0002b140 	call	10002b14 <__umodsi3>
1000cc94:	b00b883a 	mov	r5,r22
1000cc98:	8809883a 	mov	r4,r17
1000cc9c:	102b883a 	mov	r21,r2
1000cca0:	0002ab00 	call	10002ab0 <__udivsi3>
1000cca4:	b80b883a 	mov	r5,r23
1000cca8:	1009883a 	mov	r4,r2
1000ccac:	0002b6c0 	call	10002b6c <__mulsi3>
1000ccb0:	a82a943a 	slli	r21,r21,16
1000ccb4:	a006d43a 	srli	r3,r20,16
1000ccb8:	1d46b03a 	or	r3,r3,r21
1000ccbc:	1880042e 	bgeu	r3,r2,1000ccd0 <__umoddi3+0x240>
1000ccc0:	1cc7883a 	add	r3,r3,r19
1000ccc4:	1cc00236 	bltu	r3,r19,1000ccd0 <__umoddi3+0x240>
1000ccc8:	1880012e 	bgeu	r3,r2,1000ccd0 <__umoddi3+0x240>
1000cccc:	1cc7883a 	add	r3,r3,r19
1000ccd0:	18a1c83a 	sub	r16,r3,r2
1000ccd4:	b00b883a 	mov	r5,r22
1000ccd8:	8009883a 	mov	r4,r16
1000ccdc:	0002b140 	call	10002b14 <__umodsi3>
1000cce0:	1023883a 	mov	r17,r2
1000cce4:	b00b883a 	mov	r5,r22
1000cce8:	8009883a 	mov	r4,r16
1000ccec:	0002ab00 	call	10002ab0 <__udivsi3>
1000ccf0:	8822943a 	slli	r17,r17,16
1000ccf4:	b80b883a 	mov	r5,r23
1000ccf8:	1009883a 	mov	r4,r2
1000ccfc:	0002b6c0 	call	10002b6c <__mulsi3>
1000cd00:	a53fffcc 	andi	r20,r20,65535
1000cd04:	a446b03a 	or	r3,r20,r17
1000cd08:	18bfac2e 	bgeu	r3,r2,1000cbbc <__alt_data_end+0xf800cbbc>
1000cd0c:	003fa706 	br	1000cbac <__alt_data_end+0xf800cbac>
1000cd10:	2005883a 	mov	r2,r4
1000cd14:	2807883a 	mov	r3,r5
1000cd18:	dfc00c17 	ldw	ra,48(sp)
1000cd1c:	df000b17 	ldw	fp,44(sp)
1000cd20:	ddc00a17 	ldw	r23,40(sp)
1000cd24:	dd800917 	ldw	r22,36(sp)
1000cd28:	dd400817 	ldw	r21,32(sp)
1000cd2c:	dd000717 	ldw	r20,28(sp)
1000cd30:	dcc00617 	ldw	r19,24(sp)
1000cd34:	dc800517 	ldw	r18,20(sp)
1000cd38:	dc400417 	ldw	r17,16(sp)
1000cd3c:	dc000317 	ldw	r16,12(sp)
1000cd40:	dec00d04 	addi	sp,sp,52
1000cd44:	f800283a 	ret
1000cd48:	04c03fc4 	movi	r19,255
1000cd4c:	99c9803a 	cmpltu	r4,r19,r7
1000cd50:	200890fa 	slli	r4,r4,3
1000cd54:	003fa406 	br	1000cbe8 <__alt_data_end+0xf800cbe8>
1000cd58:	00803fc4 	movi	r2,255
1000cd5c:	14c5803a 	cmpltu	r2,r2,r19
1000cd60:	100490fa 	slli	r2,r2,3
1000cd64:	003fbc06 	br	1000cc58 <__alt_data_end+0xf800cc58>
1000cd68:	00804034 	movhi	r2,256
1000cd6c:	10bfffc4 	addi	r2,r2,-1
1000cd70:	1180a636 	bltu	r2,r6,1000d00c <__umoddi3+0x57c>
1000cd74:	01000404 	movi	r4,16
1000cd78:	003f5c06 	br	1000caec <__alt_data_end+0xf800caec>
1000cd7c:	3d0e983a 	sll	r7,r7,r20
1000cd80:	34ead83a 	srl	r21,r6,r19
1000cd84:	8cc6d83a 	srl	r3,r17,r19
1000cd88:	8d10983a 	sll	r8,r17,r20
1000cd8c:	3d6ab03a 	or	r21,r7,r21
1000cd90:	a82cd43a 	srli	r22,r21,16
1000cd94:	84e2d83a 	srl	r17,r16,r19
1000cd98:	1809883a 	mov	r4,r3
1000cd9c:	b00b883a 	mov	r5,r22
1000cda0:	8a22b03a 	or	r17,r17,r8
1000cda4:	3524983a 	sll	r18,r6,r20
1000cda8:	dc400015 	stw	r17,0(sp)
1000cdac:	d8c00115 	stw	r3,4(sp)
1000cdb0:	0002b140 	call	10002b14 <__umodsi3>
1000cdb4:	d8c00117 	ldw	r3,4(sp)
1000cdb8:	b00b883a 	mov	r5,r22
1000cdbc:	1039883a 	mov	fp,r2
1000cdc0:	1809883a 	mov	r4,r3
1000cdc4:	0002ab00 	call	10002ab0 <__udivsi3>
1000cdc8:	adffffcc 	andi	r23,r21,65535
1000cdcc:	100b883a 	mov	r5,r2
1000cdd0:	b809883a 	mov	r4,r23
1000cdd4:	1023883a 	mov	r17,r2
1000cdd8:	0002b6c0 	call	10002b6c <__mulsi3>
1000cddc:	d9400017 	ldw	r5,0(sp)
1000cde0:	e008943a 	slli	r4,fp,16
1000cde4:	8520983a 	sll	r16,r16,r20
1000cde8:	2806d43a 	srli	r3,r5,16
1000cdec:	1906b03a 	or	r3,r3,r4
1000cdf0:	1880042e 	bgeu	r3,r2,1000ce04 <__umoddi3+0x374>
1000cdf4:	1d47883a 	add	r3,r3,r21
1000cdf8:	893fffc4 	addi	r4,r17,-1
1000cdfc:	1d40892e 	bgeu	r3,r21,1000d024 <__umoddi3+0x594>
1000ce00:	2023883a 	mov	r17,r4
1000ce04:	18b9c83a 	sub	fp,r3,r2
1000ce08:	b00b883a 	mov	r5,r22
1000ce0c:	e009883a 	mov	r4,fp
1000ce10:	0002b140 	call	10002b14 <__umodsi3>
1000ce14:	b00b883a 	mov	r5,r22
1000ce18:	e009883a 	mov	r4,fp
1000ce1c:	d8800215 	stw	r2,8(sp)
1000ce20:	0002ab00 	call	10002ab0 <__udivsi3>
1000ce24:	100b883a 	mov	r5,r2
1000ce28:	b809883a 	mov	r4,r23
1000ce2c:	102d883a 	mov	r22,r2
1000ce30:	0002b6c0 	call	10002b6c <__mulsi3>
1000ce34:	d9800217 	ldw	r6,8(sp)
1000ce38:	d8c00017 	ldw	r3,0(sp)
1000ce3c:	300c943a 	slli	r6,r6,16
1000ce40:	1a3fffcc 	andi	r8,r3,65535
1000ce44:	4190b03a 	or	r8,r8,r6
1000ce48:	4080042e 	bgeu	r8,r2,1000ce5c <__umoddi3+0x3cc>
1000ce4c:	4551883a 	add	r8,r8,r21
1000ce50:	b0ffffc4 	addi	r3,r22,-1
1000ce54:	45406f2e 	bgeu	r8,r21,1000d014 <__umoddi3+0x584>
1000ce58:	182d883a 	mov	r22,r3
1000ce5c:	880e943a 	slli	r7,r17,16
1000ce60:	9006d43a 	srli	r3,r18,16
1000ce64:	91bfffcc 	andi	r6,r18,65535
1000ce68:	3dacb03a 	or	r22,r7,r22
1000ce6c:	b02ed43a 	srli	r23,r22,16
1000ce70:	b5bfffcc 	andi	r22,r22,65535
1000ce74:	300b883a 	mov	r5,r6
1000ce78:	b009883a 	mov	r4,r22
1000ce7c:	40a3c83a 	sub	r17,r8,r2
1000ce80:	d8c00115 	stw	r3,4(sp)
1000ce84:	d9800215 	stw	r6,8(sp)
1000ce88:	0002b6c0 	call	10002b6c <__mulsi3>
1000ce8c:	d9800217 	ldw	r6,8(sp)
1000ce90:	b809883a 	mov	r4,r23
1000ce94:	1039883a 	mov	fp,r2
1000ce98:	300b883a 	mov	r5,r6
1000ce9c:	0002b6c0 	call	10002b6c <__mulsi3>
1000cea0:	d8c00117 	ldw	r3,4(sp)
1000cea4:	b809883a 	mov	r4,r23
1000cea8:	d8800215 	stw	r2,8(sp)
1000ceac:	180b883a 	mov	r5,r3
1000ceb0:	0002b6c0 	call	10002b6c <__mulsi3>
1000ceb4:	d8c00117 	ldw	r3,4(sp)
1000ceb8:	b009883a 	mov	r4,r22
1000cebc:	102f883a 	mov	r23,r2
1000cec0:	180b883a 	mov	r5,r3
1000cec4:	0002b6c0 	call	10002b6c <__mulsi3>
1000cec8:	d9800217 	ldw	r6,8(sp)
1000cecc:	e006d43a 	srli	r3,fp,16
1000ced0:	1185883a 	add	r2,r2,r6
1000ced4:	1885883a 	add	r2,r3,r2
1000ced8:	1180022e 	bgeu	r2,r6,1000cee4 <__umoddi3+0x454>
1000cedc:	00c00074 	movhi	r3,1
1000cee0:	b8ef883a 	add	r23,r23,r3
1000cee4:	1006d43a 	srli	r3,r2,16
1000cee8:	1004943a 	slli	r2,r2,16
1000ceec:	e73fffcc 	andi	fp,fp,65535
1000cef0:	1dc7883a 	add	r3,r3,r23
1000cef4:	1739883a 	add	fp,r2,fp
1000cef8:	88c03a36 	bltu	r17,r3,1000cfe4 <__umoddi3+0x554>
1000cefc:	88c05126 	beq	r17,r3,1000d044 <__umoddi3+0x5b4>
1000cf00:	88c9c83a 	sub	r4,r17,r3
1000cf04:	e00f883a 	mov	r7,fp
1000cf08:	81cfc83a 	sub	r7,r16,r7
1000cf0c:	81c7803a 	cmpltu	r3,r16,r7
1000cf10:	20c7c83a 	sub	r3,r4,r3
1000cf14:	1cc4983a 	sll	r2,r3,r19
1000cf18:	3d0ed83a 	srl	r7,r7,r20
1000cf1c:	1d06d83a 	srl	r3,r3,r20
1000cf20:	11c4b03a 	or	r2,r2,r7
1000cf24:	003f7c06 	br	1000cd18 <__alt_data_end+0xf800cd18>
1000cf28:	9ca6983a 	sll	r19,r19,r18
1000cf2c:	88f8d83a 	srl	fp,r17,r3
1000cf30:	80c4d83a 	srl	r2,r16,r3
1000cf34:	982cd43a 	srli	r22,r19,16
1000cf38:	8ca2983a 	sll	r17,r17,r18
1000cf3c:	e009883a 	mov	r4,fp
1000cf40:	b00b883a 	mov	r5,r22
1000cf44:	146ab03a 	or	r21,r2,r17
1000cf48:	0002b140 	call	10002b14 <__umodsi3>
1000cf4c:	b00b883a 	mov	r5,r22
1000cf50:	e009883a 	mov	r4,fp
1000cf54:	1029883a 	mov	r20,r2
1000cf58:	9dffffcc 	andi	r23,r19,65535
1000cf5c:	0002ab00 	call	10002ab0 <__udivsi3>
1000cf60:	b809883a 	mov	r4,r23
1000cf64:	100b883a 	mov	r5,r2
1000cf68:	0002b6c0 	call	10002b6c <__mulsi3>
1000cf6c:	a008943a 	slli	r4,r20,16
1000cf70:	a806d43a 	srli	r3,r21,16
1000cf74:	84a8983a 	sll	r20,r16,r18
1000cf78:	1906b03a 	or	r3,r3,r4
1000cf7c:	1880042e 	bgeu	r3,r2,1000cf90 <__umoddi3+0x500>
1000cf80:	1cc7883a 	add	r3,r3,r19
1000cf84:	1cc00236 	bltu	r3,r19,1000cf90 <__umoddi3+0x500>
1000cf88:	1880012e 	bgeu	r3,r2,1000cf90 <__umoddi3+0x500>
1000cf8c:	1cc7883a 	add	r3,r3,r19
1000cf90:	18a3c83a 	sub	r17,r3,r2
1000cf94:	b00b883a 	mov	r5,r22
1000cf98:	8809883a 	mov	r4,r17
1000cf9c:	0002b140 	call	10002b14 <__umodsi3>
1000cfa0:	b00b883a 	mov	r5,r22
1000cfa4:	8809883a 	mov	r4,r17
1000cfa8:	1021883a 	mov	r16,r2
1000cfac:	0002ab00 	call	10002ab0 <__udivsi3>
1000cfb0:	100b883a 	mov	r5,r2
1000cfb4:	b809883a 	mov	r4,r23
1000cfb8:	8020943a 	slli	r16,r16,16
1000cfbc:	0002b6c0 	call	10002b6c <__mulsi3>
1000cfc0:	a8ffffcc 	andi	r3,r21,65535
1000cfc4:	1c06b03a 	or	r3,r3,r16
1000cfc8:	1880042e 	bgeu	r3,r2,1000cfdc <__umoddi3+0x54c>
1000cfcc:	1cc7883a 	add	r3,r3,r19
1000cfd0:	1cc00236 	bltu	r3,r19,1000cfdc <__umoddi3+0x54c>
1000cfd4:	1880012e 	bgeu	r3,r2,1000cfdc <__umoddi3+0x54c>
1000cfd8:	1cc7883a 	add	r3,r3,r19
1000cfdc:	18a3c83a 	sub	r17,r3,r2
1000cfe0:	003f2906 	br	1000cc88 <__alt_data_end+0xf800cc88>
1000cfe4:	e48fc83a 	sub	r7,fp,r18
1000cfe8:	1d49c83a 	sub	r4,r3,r21
1000cfec:	e1f9803a 	cmpltu	fp,fp,r7
1000cff0:	2739c83a 	sub	fp,r4,fp
1000cff4:	8f09c83a 	sub	r4,r17,fp
1000cff8:	003fc306 	br	1000cf08 <__alt_data_end+0xf800cf08>
1000cffc:	01000604 	movi	r4,24
1000d000:	003ef906 	br	1000cbe8 <__alt_data_end+0xf800cbe8>
1000d004:	00800604 	movi	r2,24
1000d008:	003f1306 	br	1000cc58 <__alt_data_end+0xf800cc58>
1000d00c:	01000604 	movi	r4,24
1000d010:	003eb606 	br	1000caec <__alt_data_end+0xf800caec>
1000d014:	40bf902e 	bgeu	r8,r2,1000ce58 <__alt_data_end+0xf800ce58>
1000d018:	b5bfff84 	addi	r22,r22,-2
1000d01c:	4551883a 	add	r8,r8,r21
1000d020:	003f8e06 	br	1000ce5c <__alt_data_end+0xf800ce5c>
1000d024:	18bf762e 	bgeu	r3,r2,1000ce00 <__alt_data_end+0xf800ce00>
1000d028:	8c7fff84 	addi	r17,r17,-2
1000d02c:	1d47883a 	add	r3,r3,r21
1000d030:	003f7406 	br	1000ce04 <__alt_data_end+0xf800ce04>
1000d034:	1cc7883a 	add	r3,r3,r19
1000d038:	003ecd06 	br	1000cb70 <__alt_data_end+0xf800cb70>
1000d03c:	8005883a 	mov	r2,r16
1000d040:	003ef806 	br	1000cc24 <__alt_data_end+0xf800cc24>
1000d044:	873fe736 	bltu	r16,fp,1000cfe4 <__alt_data_end+0xf800cfe4>
1000d048:	e00f883a 	mov	r7,fp
1000d04c:	0009883a 	mov	r4,zero
1000d050:	003fad06 	br	1000cf08 <__alt_data_end+0xf800cf08>

1000d054 <__adddf3>:
1000d054:	02c00434 	movhi	r11,16
1000d058:	5affffc4 	addi	r11,r11,-1
1000d05c:	2806d7fa 	srli	r3,r5,31
1000d060:	2ad4703a 	and	r10,r5,r11
1000d064:	3ad2703a 	and	r9,r7,r11
1000d068:	3804d53a 	srli	r2,r7,20
1000d06c:	3018d77a 	srli	r12,r6,29
1000d070:	280ad53a 	srli	r5,r5,20
1000d074:	501490fa 	slli	r10,r10,3
1000d078:	2010d77a 	srli	r8,r4,29
1000d07c:	481290fa 	slli	r9,r9,3
1000d080:	380ed7fa 	srli	r7,r7,31
1000d084:	defffb04 	addi	sp,sp,-20
1000d088:	dc800215 	stw	r18,8(sp)
1000d08c:	dc400115 	stw	r17,4(sp)
1000d090:	dc000015 	stw	r16,0(sp)
1000d094:	dfc00415 	stw	ra,16(sp)
1000d098:	dcc00315 	stw	r19,12(sp)
1000d09c:	1c803fcc 	andi	r18,r3,255
1000d0a0:	2c01ffcc 	andi	r16,r5,2047
1000d0a4:	5210b03a 	or	r8,r10,r8
1000d0a8:	202290fa 	slli	r17,r4,3
1000d0ac:	1081ffcc 	andi	r2,r2,2047
1000d0b0:	4b12b03a 	or	r9,r9,r12
1000d0b4:	300c90fa 	slli	r6,r6,3
1000d0b8:	91c07526 	beq	r18,r7,1000d290 <__adddf3+0x23c>
1000d0bc:	8087c83a 	sub	r3,r16,r2
1000d0c0:	00c0ab0e 	bge	zero,r3,1000d370 <__adddf3+0x31c>
1000d0c4:	10002a1e 	bne	r2,zero,1000d170 <__adddf3+0x11c>
1000d0c8:	4984b03a 	or	r2,r9,r6
1000d0cc:	1000961e 	bne	r2,zero,1000d328 <__adddf3+0x2d4>
1000d0d0:	888001cc 	andi	r2,r17,7
1000d0d4:	10000726 	beq	r2,zero,1000d0f4 <__adddf3+0xa0>
1000d0d8:	888003cc 	andi	r2,r17,15
1000d0dc:	00c00104 	movi	r3,4
1000d0e0:	10c00426 	beq	r2,r3,1000d0f4 <__adddf3+0xa0>
1000d0e4:	88c7883a 	add	r3,r17,r3
1000d0e8:	1c63803a 	cmpltu	r17,r3,r17
1000d0ec:	4451883a 	add	r8,r8,r17
1000d0f0:	1823883a 	mov	r17,r3
1000d0f4:	4080202c 	andhi	r2,r8,128
1000d0f8:	10005926 	beq	r2,zero,1000d260 <__adddf3+0x20c>
1000d0fc:	84000044 	addi	r16,r16,1
1000d100:	0081ffc4 	movi	r2,2047
1000d104:	8080ba26 	beq	r16,r2,1000d3f0 <__adddf3+0x39c>
1000d108:	00bfe034 	movhi	r2,65408
1000d10c:	10bfffc4 	addi	r2,r2,-1
1000d110:	4090703a 	and	r8,r8,r2
1000d114:	4004977a 	slli	r2,r8,29
1000d118:	4010927a 	slli	r8,r8,9
1000d11c:	8822d0fa 	srli	r17,r17,3
1000d120:	8401ffcc 	andi	r16,r16,2047
1000d124:	4010d33a 	srli	r8,r8,12
1000d128:	9007883a 	mov	r3,r18
1000d12c:	1444b03a 	or	r2,r2,r17
1000d130:	8401ffcc 	andi	r16,r16,2047
1000d134:	8020953a 	slli	r16,r16,20
1000d138:	18c03fcc 	andi	r3,r3,255
1000d13c:	01000434 	movhi	r4,16
1000d140:	213fffc4 	addi	r4,r4,-1
1000d144:	180697fa 	slli	r3,r3,31
1000d148:	4110703a 	and	r8,r8,r4
1000d14c:	4410b03a 	or	r8,r8,r16
1000d150:	40c6b03a 	or	r3,r8,r3
1000d154:	dfc00417 	ldw	ra,16(sp)
1000d158:	dcc00317 	ldw	r19,12(sp)
1000d15c:	dc800217 	ldw	r18,8(sp)
1000d160:	dc400117 	ldw	r17,4(sp)
1000d164:	dc000017 	ldw	r16,0(sp)
1000d168:	dec00504 	addi	sp,sp,20
1000d16c:	f800283a 	ret
1000d170:	0081ffc4 	movi	r2,2047
1000d174:	80bfd626 	beq	r16,r2,1000d0d0 <__alt_data_end+0xf800d0d0>
1000d178:	4a402034 	orhi	r9,r9,128
1000d17c:	00800e04 	movi	r2,56
1000d180:	10c09f16 	blt	r2,r3,1000d400 <__adddf3+0x3ac>
1000d184:	008007c4 	movi	r2,31
1000d188:	10c0c216 	blt	r2,r3,1000d494 <__adddf3+0x440>
1000d18c:	00800804 	movi	r2,32
1000d190:	10c5c83a 	sub	r2,r2,r3
1000d194:	488a983a 	sll	r5,r9,r2
1000d198:	30c8d83a 	srl	r4,r6,r3
1000d19c:	3084983a 	sll	r2,r6,r2
1000d1a0:	48c6d83a 	srl	r3,r9,r3
1000d1a4:	290cb03a 	or	r6,r5,r4
1000d1a8:	1004c03a 	cmpne	r2,r2,zero
1000d1ac:	308cb03a 	or	r6,r6,r2
1000d1b0:	898dc83a 	sub	r6,r17,r6
1000d1b4:	89a3803a 	cmpltu	r17,r17,r6
1000d1b8:	40d1c83a 	sub	r8,r8,r3
1000d1bc:	4451c83a 	sub	r8,r8,r17
1000d1c0:	3023883a 	mov	r17,r6
1000d1c4:	4080202c 	andhi	r2,r8,128
1000d1c8:	10002326 	beq	r2,zero,1000d258 <__adddf3+0x204>
1000d1cc:	04c02034 	movhi	r19,128
1000d1d0:	9cffffc4 	addi	r19,r19,-1
1000d1d4:	44e6703a 	and	r19,r8,r19
1000d1d8:	98007626 	beq	r19,zero,1000d3b4 <__adddf3+0x360>
1000d1dc:	9809883a 	mov	r4,r19
1000d1e0:	000f8940 	call	1000f894 <__clzsi2>
1000d1e4:	10fffe04 	addi	r3,r2,-8
1000d1e8:	010007c4 	movi	r4,31
1000d1ec:	20c07716 	blt	r4,r3,1000d3cc <__adddf3+0x378>
1000d1f0:	00800804 	movi	r2,32
1000d1f4:	10c5c83a 	sub	r2,r2,r3
1000d1f8:	8884d83a 	srl	r2,r17,r2
1000d1fc:	98d0983a 	sll	r8,r19,r3
1000d200:	88e2983a 	sll	r17,r17,r3
1000d204:	1204b03a 	or	r2,r2,r8
1000d208:	1c007416 	blt	r3,r16,1000d3dc <__adddf3+0x388>
1000d20c:	1c21c83a 	sub	r16,r3,r16
1000d210:	82000044 	addi	r8,r16,1
1000d214:	00c007c4 	movi	r3,31
1000d218:	1a009116 	blt	r3,r8,1000d460 <__adddf3+0x40c>
1000d21c:	00c00804 	movi	r3,32
1000d220:	1a07c83a 	sub	r3,r3,r8
1000d224:	8a08d83a 	srl	r4,r17,r8
1000d228:	88e2983a 	sll	r17,r17,r3
1000d22c:	10c6983a 	sll	r3,r2,r3
1000d230:	1210d83a 	srl	r8,r2,r8
1000d234:	8804c03a 	cmpne	r2,r17,zero
1000d238:	1906b03a 	or	r3,r3,r4
1000d23c:	18a2b03a 	or	r17,r3,r2
1000d240:	0021883a 	mov	r16,zero
1000d244:	003fa206 	br	1000d0d0 <__alt_data_end+0xf800d0d0>
1000d248:	1890b03a 	or	r8,r3,r2
1000d24c:	40017d26 	beq	r8,zero,1000d844 <__adddf3+0x7f0>
1000d250:	1011883a 	mov	r8,r2
1000d254:	1823883a 	mov	r17,r3
1000d258:	888001cc 	andi	r2,r17,7
1000d25c:	103f9e1e 	bne	r2,zero,1000d0d8 <__alt_data_end+0xf800d0d8>
1000d260:	4004977a 	slli	r2,r8,29
1000d264:	8822d0fa 	srli	r17,r17,3
1000d268:	4010d0fa 	srli	r8,r8,3
1000d26c:	9007883a 	mov	r3,r18
1000d270:	1444b03a 	or	r2,r2,r17
1000d274:	0101ffc4 	movi	r4,2047
1000d278:	81002426 	beq	r16,r4,1000d30c <__adddf3+0x2b8>
1000d27c:	8120703a 	and	r16,r16,r4
1000d280:	01000434 	movhi	r4,16
1000d284:	213fffc4 	addi	r4,r4,-1
1000d288:	4110703a 	and	r8,r8,r4
1000d28c:	003fa806 	br	1000d130 <__alt_data_end+0xf800d130>
1000d290:	8089c83a 	sub	r4,r16,r2
1000d294:	01005e0e 	bge	zero,r4,1000d410 <__adddf3+0x3bc>
1000d298:	10002b26 	beq	r2,zero,1000d348 <__adddf3+0x2f4>
1000d29c:	0081ffc4 	movi	r2,2047
1000d2a0:	80bf8b26 	beq	r16,r2,1000d0d0 <__alt_data_end+0xf800d0d0>
1000d2a4:	4a402034 	orhi	r9,r9,128
1000d2a8:	00800e04 	movi	r2,56
1000d2ac:	1100a40e 	bge	r2,r4,1000d540 <__adddf3+0x4ec>
1000d2b0:	498cb03a 	or	r6,r9,r6
1000d2b4:	300ac03a 	cmpne	r5,r6,zero
1000d2b8:	0013883a 	mov	r9,zero
1000d2bc:	2c4b883a 	add	r5,r5,r17
1000d2c0:	2c63803a 	cmpltu	r17,r5,r17
1000d2c4:	4a11883a 	add	r8,r9,r8
1000d2c8:	8a11883a 	add	r8,r17,r8
1000d2cc:	2823883a 	mov	r17,r5
1000d2d0:	4080202c 	andhi	r2,r8,128
1000d2d4:	103fe026 	beq	r2,zero,1000d258 <__alt_data_end+0xf800d258>
1000d2d8:	84000044 	addi	r16,r16,1
1000d2dc:	0081ffc4 	movi	r2,2047
1000d2e0:	8080d226 	beq	r16,r2,1000d62c <__adddf3+0x5d8>
1000d2e4:	00bfe034 	movhi	r2,65408
1000d2e8:	10bfffc4 	addi	r2,r2,-1
1000d2ec:	4090703a 	and	r8,r8,r2
1000d2f0:	880ad07a 	srli	r5,r17,1
1000d2f4:	400897fa 	slli	r4,r8,31
1000d2f8:	88c0004c 	andi	r3,r17,1
1000d2fc:	28e2b03a 	or	r17,r5,r3
1000d300:	4010d07a 	srli	r8,r8,1
1000d304:	2462b03a 	or	r17,r4,r17
1000d308:	003f7106 	br	1000d0d0 <__alt_data_end+0xf800d0d0>
1000d30c:	4088b03a 	or	r4,r8,r2
1000d310:	20014526 	beq	r4,zero,1000d828 <__adddf3+0x7d4>
1000d314:	01000434 	movhi	r4,16
1000d318:	42000234 	orhi	r8,r8,8
1000d31c:	213fffc4 	addi	r4,r4,-1
1000d320:	4110703a 	and	r8,r8,r4
1000d324:	003f8206 	br	1000d130 <__alt_data_end+0xf800d130>
1000d328:	18ffffc4 	addi	r3,r3,-1
1000d32c:	1800491e 	bne	r3,zero,1000d454 <__adddf3+0x400>
1000d330:	898bc83a 	sub	r5,r17,r6
1000d334:	8963803a 	cmpltu	r17,r17,r5
1000d338:	4251c83a 	sub	r8,r8,r9
1000d33c:	4451c83a 	sub	r8,r8,r17
1000d340:	2823883a 	mov	r17,r5
1000d344:	003f9f06 	br	1000d1c4 <__alt_data_end+0xf800d1c4>
1000d348:	4984b03a 	or	r2,r9,r6
1000d34c:	103f6026 	beq	r2,zero,1000d0d0 <__alt_data_end+0xf800d0d0>
1000d350:	213fffc4 	addi	r4,r4,-1
1000d354:	2000931e 	bne	r4,zero,1000d5a4 <__adddf3+0x550>
1000d358:	898d883a 	add	r6,r17,r6
1000d35c:	3463803a 	cmpltu	r17,r6,r17
1000d360:	4251883a 	add	r8,r8,r9
1000d364:	8a11883a 	add	r8,r17,r8
1000d368:	3023883a 	mov	r17,r6
1000d36c:	003fd806 	br	1000d2d0 <__alt_data_end+0xf800d2d0>
1000d370:	1800541e 	bne	r3,zero,1000d4c4 <__adddf3+0x470>
1000d374:	80800044 	addi	r2,r16,1
1000d378:	1081ffcc 	andi	r2,r2,2047
1000d37c:	00c00044 	movi	r3,1
1000d380:	1880a00e 	bge	r3,r2,1000d604 <__adddf3+0x5b0>
1000d384:	8989c83a 	sub	r4,r17,r6
1000d388:	8905803a 	cmpltu	r2,r17,r4
1000d38c:	4267c83a 	sub	r19,r8,r9
1000d390:	98a7c83a 	sub	r19,r19,r2
1000d394:	9880202c 	andhi	r2,r19,128
1000d398:	10006326 	beq	r2,zero,1000d528 <__adddf3+0x4d4>
1000d39c:	3463c83a 	sub	r17,r6,r17
1000d3a0:	4a07c83a 	sub	r3,r9,r8
1000d3a4:	344d803a 	cmpltu	r6,r6,r17
1000d3a8:	19a7c83a 	sub	r19,r3,r6
1000d3ac:	3825883a 	mov	r18,r7
1000d3b0:	983f8a1e 	bne	r19,zero,1000d1dc <__alt_data_end+0xf800d1dc>
1000d3b4:	8809883a 	mov	r4,r17
1000d3b8:	000f8940 	call	1000f894 <__clzsi2>
1000d3bc:	10800804 	addi	r2,r2,32
1000d3c0:	10fffe04 	addi	r3,r2,-8
1000d3c4:	010007c4 	movi	r4,31
1000d3c8:	20ff890e 	bge	r4,r3,1000d1f0 <__alt_data_end+0xf800d1f0>
1000d3cc:	10bff604 	addi	r2,r2,-40
1000d3d0:	8884983a 	sll	r2,r17,r2
1000d3d4:	0023883a 	mov	r17,zero
1000d3d8:	1c3f8c0e 	bge	r3,r16,1000d20c <__alt_data_end+0xf800d20c>
1000d3dc:	023fe034 	movhi	r8,65408
1000d3e0:	423fffc4 	addi	r8,r8,-1
1000d3e4:	80e1c83a 	sub	r16,r16,r3
1000d3e8:	1210703a 	and	r8,r2,r8
1000d3ec:	003f3806 	br	1000d0d0 <__alt_data_end+0xf800d0d0>
1000d3f0:	9007883a 	mov	r3,r18
1000d3f4:	0011883a 	mov	r8,zero
1000d3f8:	0005883a 	mov	r2,zero
1000d3fc:	003f4c06 	br	1000d130 <__alt_data_end+0xf800d130>
1000d400:	498cb03a 	or	r6,r9,r6
1000d404:	300cc03a 	cmpne	r6,r6,zero
1000d408:	0007883a 	mov	r3,zero
1000d40c:	003f6806 	br	1000d1b0 <__alt_data_end+0xf800d1b0>
1000d410:	20009c1e 	bne	r4,zero,1000d684 <__adddf3+0x630>
1000d414:	80800044 	addi	r2,r16,1
1000d418:	1141ffcc 	andi	r5,r2,2047
1000d41c:	01000044 	movi	r4,1
1000d420:	2140670e 	bge	r4,r5,1000d5c0 <__adddf3+0x56c>
1000d424:	0101ffc4 	movi	r4,2047
1000d428:	11007f26 	beq	r2,r4,1000d628 <__adddf3+0x5d4>
1000d42c:	898d883a 	add	r6,r17,r6
1000d430:	4247883a 	add	r3,r8,r9
1000d434:	3451803a 	cmpltu	r8,r6,r17
1000d438:	40d1883a 	add	r8,r8,r3
1000d43c:	402297fa 	slli	r17,r8,31
1000d440:	300cd07a 	srli	r6,r6,1
1000d444:	4010d07a 	srli	r8,r8,1
1000d448:	1021883a 	mov	r16,r2
1000d44c:	89a2b03a 	or	r17,r17,r6
1000d450:	003f1f06 	br	1000d0d0 <__alt_data_end+0xf800d0d0>
1000d454:	0081ffc4 	movi	r2,2047
1000d458:	80bf481e 	bne	r16,r2,1000d17c <__alt_data_end+0xf800d17c>
1000d45c:	003f1c06 	br	1000d0d0 <__alt_data_end+0xf800d0d0>
1000d460:	843ff844 	addi	r16,r16,-31
1000d464:	01000804 	movi	r4,32
1000d468:	1406d83a 	srl	r3,r2,r16
1000d46c:	41005026 	beq	r8,r4,1000d5b0 <__adddf3+0x55c>
1000d470:	01001004 	movi	r4,64
1000d474:	2211c83a 	sub	r8,r4,r8
1000d478:	1204983a 	sll	r2,r2,r8
1000d47c:	88a2b03a 	or	r17,r17,r2
1000d480:	8822c03a 	cmpne	r17,r17,zero
1000d484:	1c62b03a 	or	r17,r3,r17
1000d488:	0011883a 	mov	r8,zero
1000d48c:	0021883a 	mov	r16,zero
1000d490:	003f7106 	br	1000d258 <__alt_data_end+0xf800d258>
1000d494:	193ff804 	addi	r4,r3,-32
1000d498:	00800804 	movi	r2,32
1000d49c:	4908d83a 	srl	r4,r9,r4
1000d4a0:	18804526 	beq	r3,r2,1000d5b8 <__adddf3+0x564>
1000d4a4:	00801004 	movi	r2,64
1000d4a8:	10c5c83a 	sub	r2,r2,r3
1000d4ac:	4886983a 	sll	r3,r9,r2
1000d4b0:	198cb03a 	or	r6,r3,r6
1000d4b4:	300cc03a 	cmpne	r6,r6,zero
1000d4b8:	218cb03a 	or	r6,r4,r6
1000d4bc:	0007883a 	mov	r3,zero
1000d4c0:	003f3b06 	br	1000d1b0 <__alt_data_end+0xf800d1b0>
1000d4c4:	80002a26 	beq	r16,zero,1000d570 <__adddf3+0x51c>
1000d4c8:	0101ffc4 	movi	r4,2047
1000d4cc:	11006826 	beq	r2,r4,1000d670 <__adddf3+0x61c>
1000d4d0:	00c7c83a 	sub	r3,zero,r3
1000d4d4:	42002034 	orhi	r8,r8,128
1000d4d8:	01000e04 	movi	r4,56
1000d4dc:	20c07c16 	blt	r4,r3,1000d6d0 <__adddf3+0x67c>
1000d4e0:	010007c4 	movi	r4,31
1000d4e4:	20c0da16 	blt	r4,r3,1000d850 <__adddf3+0x7fc>
1000d4e8:	01000804 	movi	r4,32
1000d4ec:	20c9c83a 	sub	r4,r4,r3
1000d4f0:	4114983a 	sll	r10,r8,r4
1000d4f4:	88cad83a 	srl	r5,r17,r3
1000d4f8:	8908983a 	sll	r4,r17,r4
1000d4fc:	40c6d83a 	srl	r3,r8,r3
1000d500:	5162b03a 	or	r17,r10,r5
1000d504:	2008c03a 	cmpne	r4,r4,zero
1000d508:	8922b03a 	or	r17,r17,r4
1000d50c:	3463c83a 	sub	r17,r6,r17
1000d510:	48c7c83a 	sub	r3,r9,r3
1000d514:	344d803a 	cmpltu	r6,r6,r17
1000d518:	1991c83a 	sub	r8,r3,r6
1000d51c:	1021883a 	mov	r16,r2
1000d520:	3825883a 	mov	r18,r7
1000d524:	003f2706 	br	1000d1c4 <__alt_data_end+0xf800d1c4>
1000d528:	24d0b03a 	or	r8,r4,r19
1000d52c:	40001b1e 	bne	r8,zero,1000d59c <__adddf3+0x548>
1000d530:	0005883a 	mov	r2,zero
1000d534:	0007883a 	mov	r3,zero
1000d538:	0021883a 	mov	r16,zero
1000d53c:	003f4d06 	br	1000d274 <__alt_data_end+0xf800d274>
1000d540:	008007c4 	movi	r2,31
1000d544:	11003c16 	blt	r2,r4,1000d638 <__adddf3+0x5e4>
1000d548:	00800804 	movi	r2,32
1000d54c:	1105c83a 	sub	r2,r2,r4
1000d550:	488e983a 	sll	r7,r9,r2
1000d554:	310ad83a 	srl	r5,r6,r4
1000d558:	3084983a 	sll	r2,r6,r2
1000d55c:	4912d83a 	srl	r9,r9,r4
1000d560:	394ab03a 	or	r5,r7,r5
1000d564:	1004c03a 	cmpne	r2,r2,zero
1000d568:	288ab03a 	or	r5,r5,r2
1000d56c:	003f5306 	br	1000d2bc <__alt_data_end+0xf800d2bc>
1000d570:	4448b03a 	or	r4,r8,r17
1000d574:	20003e26 	beq	r4,zero,1000d670 <__adddf3+0x61c>
1000d578:	00c6303a 	nor	r3,zero,r3
1000d57c:	18003a1e 	bne	r3,zero,1000d668 <__adddf3+0x614>
1000d580:	3463c83a 	sub	r17,r6,r17
1000d584:	4a07c83a 	sub	r3,r9,r8
1000d588:	344d803a 	cmpltu	r6,r6,r17
1000d58c:	1991c83a 	sub	r8,r3,r6
1000d590:	1021883a 	mov	r16,r2
1000d594:	3825883a 	mov	r18,r7
1000d598:	003f0a06 	br	1000d1c4 <__alt_data_end+0xf800d1c4>
1000d59c:	2023883a 	mov	r17,r4
1000d5a0:	003f0d06 	br	1000d1d8 <__alt_data_end+0xf800d1d8>
1000d5a4:	0081ffc4 	movi	r2,2047
1000d5a8:	80bf3f1e 	bne	r16,r2,1000d2a8 <__alt_data_end+0xf800d2a8>
1000d5ac:	003ec806 	br	1000d0d0 <__alt_data_end+0xf800d0d0>
1000d5b0:	0005883a 	mov	r2,zero
1000d5b4:	003fb106 	br	1000d47c <__alt_data_end+0xf800d47c>
1000d5b8:	0007883a 	mov	r3,zero
1000d5bc:	003fbc06 	br	1000d4b0 <__alt_data_end+0xf800d4b0>
1000d5c0:	4444b03a 	or	r2,r8,r17
1000d5c4:	8000871e 	bne	r16,zero,1000d7e4 <__adddf3+0x790>
1000d5c8:	1000ba26 	beq	r2,zero,1000d8b4 <__adddf3+0x860>
1000d5cc:	4984b03a 	or	r2,r9,r6
1000d5d0:	103ebf26 	beq	r2,zero,1000d0d0 <__alt_data_end+0xf800d0d0>
1000d5d4:	8985883a 	add	r2,r17,r6
1000d5d8:	4247883a 	add	r3,r8,r9
1000d5dc:	1451803a 	cmpltu	r8,r2,r17
1000d5e0:	40d1883a 	add	r8,r8,r3
1000d5e4:	40c0202c 	andhi	r3,r8,128
1000d5e8:	1023883a 	mov	r17,r2
1000d5ec:	183f1a26 	beq	r3,zero,1000d258 <__alt_data_end+0xf800d258>
1000d5f0:	00bfe034 	movhi	r2,65408
1000d5f4:	10bfffc4 	addi	r2,r2,-1
1000d5f8:	2021883a 	mov	r16,r4
1000d5fc:	4090703a 	and	r8,r8,r2
1000d600:	003eb306 	br	1000d0d0 <__alt_data_end+0xf800d0d0>
1000d604:	4444b03a 	or	r2,r8,r17
1000d608:	8000291e 	bne	r16,zero,1000d6b0 <__adddf3+0x65c>
1000d60c:	10004b1e 	bne	r2,zero,1000d73c <__adddf3+0x6e8>
1000d610:	4990b03a 	or	r8,r9,r6
1000d614:	40008b26 	beq	r8,zero,1000d844 <__adddf3+0x7f0>
1000d618:	4811883a 	mov	r8,r9
1000d61c:	3023883a 	mov	r17,r6
1000d620:	3825883a 	mov	r18,r7
1000d624:	003eaa06 	br	1000d0d0 <__alt_data_end+0xf800d0d0>
1000d628:	1021883a 	mov	r16,r2
1000d62c:	0011883a 	mov	r8,zero
1000d630:	0005883a 	mov	r2,zero
1000d634:	003f0f06 	br	1000d274 <__alt_data_end+0xf800d274>
1000d638:	217ff804 	addi	r5,r4,-32
1000d63c:	00800804 	movi	r2,32
1000d640:	494ad83a 	srl	r5,r9,r5
1000d644:	20807d26 	beq	r4,r2,1000d83c <__adddf3+0x7e8>
1000d648:	00801004 	movi	r2,64
1000d64c:	1109c83a 	sub	r4,r2,r4
1000d650:	4912983a 	sll	r9,r9,r4
1000d654:	498cb03a 	or	r6,r9,r6
1000d658:	300cc03a 	cmpne	r6,r6,zero
1000d65c:	298ab03a 	or	r5,r5,r6
1000d660:	0013883a 	mov	r9,zero
1000d664:	003f1506 	br	1000d2bc <__alt_data_end+0xf800d2bc>
1000d668:	0101ffc4 	movi	r4,2047
1000d66c:	113f9a1e 	bne	r2,r4,1000d4d8 <__alt_data_end+0xf800d4d8>
1000d670:	4811883a 	mov	r8,r9
1000d674:	3023883a 	mov	r17,r6
1000d678:	1021883a 	mov	r16,r2
1000d67c:	3825883a 	mov	r18,r7
1000d680:	003e9306 	br	1000d0d0 <__alt_data_end+0xf800d0d0>
1000d684:	8000161e 	bne	r16,zero,1000d6e0 <__adddf3+0x68c>
1000d688:	444ab03a 	or	r5,r8,r17
1000d68c:	28005126 	beq	r5,zero,1000d7d4 <__adddf3+0x780>
1000d690:	0108303a 	nor	r4,zero,r4
1000d694:	20004d1e 	bne	r4,zero,1000d7cc <__adddf3+0x778>
1000d698:	89a3883a 	add	r17,r17,r6
1000d69c:	4253883a 	add	r9,r8,r9
1000d6a0:	898d803a 	cmpltu	r6,r17,r6
1000d6a4:	3251883a 	add	r8,r6,r9
1000d6a8:	1021883a 	mov	r16,r2
1000d6ac:	003f0806 	br	1000d2d0 <__alt_data_end+0xf800d2d0>
1000d6b0:	1000301e 	bne	r2,zero,1000d774 <__adddf3+0x720>
1000d6b4:	4984b03a 	or	r2,r9,r6
1000d6b8:	10007126 	beq	r2,zero,1000d880 <__adddf3+0x82c>
1000d6bc:	4811883a 	mov	r8,r9
1000d6c0:	3023883a 	mov	r17,r6
1000d6c4:	3825883a 	mov	r18,r7
1000d6c8:	0401ffc4 	movi	r16,2047
1000d6cc:	003e8006 	br	1000d0d0 <__alt_data_end+0xf800d0d0>
1000d6d0:	4462b03a 	or	r17,r8,r17
1000d6d4:	8822c03a 	cmpne	r17,r17,zero
1000d6d8:	0007883a 	mov	r3,zero
1000d6dc:	003f8b06 	br	1000d50c <__alt_data_end+0xf800d50c>
1000d6e0:	0141ffc4 	movi	r5,2047
1000d6e4:	11403b26 	beq	r2,r5,1000d7d4 <__adddf3+0x780>
1000d6e8:	0109c83a 	sub	r4,zero,r4
1000d6ec:	42002034 	orhi	r8,r8,128
1000d6f0:	01400e04 	movi	r5,56
1000d6f4:	29006716 	blt	r5,r4,1000d894 <__adddf3+0x840>
1000d6f8:	014007c4 	movi	r5,31
1000d6fc:	29007016 	blt	r5,r4,1000d8c0 <__adddf3+0x86c>
1000d700:	01400804 	movi	r5,32
1000d704:	290bc83a 	sub	r5,r5,r4
1000d708:	4154983a 	sll	r10,r8,r5
1000d70c:	890ed83a 	srl	r7,r17,r4
1000d710:	894a983a 	sll	r5,r17,r5
1000d714:	4108d83a 	srl	r4,r8,r4
1000d718:	51e2b03a 	or	r17,r10,r7
1000d71c:	280ac03a 	cmpne	r5,r5,zero
1000d720:	8962b03a 	or	r17,r17,r5
1000d724:	89a3883a 	add	r17,r17,r6
1000d728:	2253883a 	add	r9,r4,r9
1000d72c:	898d803a 	cmpltu	r6,r17,r6
1000d730:	3251883a 	add	r8,r6,r9
1000d734:	1021883a 	mov	r16,r2
1000d738:	003ee506 	br	1000d2d0 <__alt_data_end+0xf800d2d0>
1000d73c:	4984b03a 	or	r2,r9,r6
1000d740:	103e6326 	beq	r2,zero,1000d0d0 <__alt_data_end+0xf800d0d0>
1000d744:	8987c83a 	sub	r3,r17,r6
1000d748:	88c9803a 	cmpltu	r4,r17,r3
1000d74c:	4245c83a 	sub	r2,r8,r9
1000d750:	1105c83a 	sub	r2,r2,r4
1000d754:	1100202c 	andhi	r4,r2,128
1000d758:	203ebb26 	beq	r4,zero,1000d248 <__alt_data_end+0xf800d248>
1000d75c:	3463c83a 	sub	r17,r6,r17
1000d760:	4a07c83a 	sub	r3,r9,r8
1000d764:	344d803a 	cmpltu	r6,r6,r17
1000d768:	1991c83a 	sub	r8,r3,r6
1000d76c:	3825883a 	mov	r18,r7
1000d770:	003e5706 	br	1000d0d0 <__alt_data_end+0xf800d0d0>
1000d774:	4984b03a 	or	r2,r9,r6
1000d778:	10002e26 	beq	r2,zero,1000d834 <__adddf3+0x7e0>
1000d77c:	4004d0fa 	srli	r2,r8,3
1000d780:	8822d0fa 	srli	r17,r17,3
1000d784:	4010977a 	slli	r8,r8,29
1000d788:	10c0022c 	andhi	r3,r2,8
1000d78c:	4462b03a 	or	r17,r8,r17
1000d790:	18000826 	beq	r3,zero,1000d7b4 <__adddf3+0x760>
1000d794:	4808d0fa 	srli	r4,r9,3
1000d798:	20c0022c 	andhi	r3,r4,8
1000d79c:	1800051e 	bne	r3,zero,1000d7b4 <__adddf3+0x760>
1000d7a0:	300cd0fa 	srli	r6,r6,3
1000d7a4:	4806977a 	slli	r3,r9,29
1000d7a8:	2005883a 	mov	r2,r4
1000d7ac:	3825883a 	mov	r18,r7
1000d7b0:	19a2b03a 	or	r17,r3,r6
1000d7b4:	8810d77a 	srli	r8,r17,29
1000d7b8:	100490fa 	slli	r2,r2,3
1000d7bc:	882290fa 	slli	r17,r17,3
1000d7c0:	0401ffc4 	movi	r16,2047
1000d7c4:	4090b03a 	or	r8,r8,r2
1000d7c8:	003e4106 	br	1000d0d0 <__alt_data_end+0xf800d0d0>
1000d7cc:	0141ffc4 	movi	r5,2047
1000d7d0:	117fc71e 	bne	r2,r5,1000d6f0 <__alt_data_end+0xf800d6f0>
1000d7d4:	4811883a 	mov	r8,r9
1000d7d8:	3023883a 	mov	r17,r6
1000d7dc:	1021883a 	mov	r16,r2
1000d7e0:	003e3b06 	br	1000d0d0 <__alt_data_end+0xf800d0d0>
1000d7e4:	10002f26 	beq	r2,zero,1000d8a4 <__adddf3+0x850>
1000d7e8:	4984b03a 	or	r2,r9,r6
1000d7ec:	10001126 	beq	r2,zero,1000d834 <__adddf3+0x7e0>
1000d7f0:	4004d0fa 	srli	r2,r8,3
1000d7f4:	8822d0fa 	srli	r17,r17,3
1000d7f8:	4010977a 	slli	r8,r8,29
1000d7fc:	10c0022c 	andhi	r3,r2,8
1000d800:	4462b03a 	or	r17,r8,r17
1000d804:	183feb26 	beq	r3,zero,1000d7b4 <__alt_data_end+0xf800d7b4>
1000d808:	4808d0fa 	srli	r4,r9,3
1000d80c:	20c0022c 	andhi	r3,r4,8
1000d810:	183fe81e 	bne	r3,zero,1000d7b4 <__alt_data_end+0xf800d7b4>
1000d814:	300cd0fa 	srli	r6,r6,3
1000d818:	4806977a 	slli	r3,r9,29
1000d81c:	2005883a 	mov	r2,r4
1000d820:	19a2b03a 	or	r17,r3,r6
1000d824:	003fe306 	br	1000d7b4 <__alt_data_end+0xf800d7b4>
1000d828:	0011883a 	mov	r8,zero
1000d82c:	0005883a 	mov	r2,zero
1000d830:	003e3f06 	br	1000d130 <__alt_data_end+0xf800d130>
1000d834:	0401ffc4 	movi	r16,2047
1000d838:	003e2506 	br	1000d0d0 <__alt_data_end+0xf800d0d0>
1000d83c:	0013883a 	mov	r9,zero
1000d840:	003f8406 	br	1000d654 <__alt_data_end+0xf800d654>
1000d844:	0005883a 	mov	r2,zero
1000d848:	0007883a 	mov	r3,zero
1000d84c:	003e8906 	br	1000d274 <__alt_data_end+0xf800d274>
1000d850:	197ff804 	addi	r5,r3,-32
1000d854:	01000804 	movi	r4,32
1000d858:	414ad83a 	srl	r5,r8,r5
1000d85c:	19002426 	beq	r3,r4,1000d8f0 <__adddf3+0x89c>
1000d860:	01001004 	movi	r4,64
1000d864:	20c7c83a 	sub	r3,r4,r3
1000d868:	40c6983a 	sll	r3,r8,r3
1000d86c:	1c46b03a 	or	r3,r3,r17
1000d870:	1806c03a 	cmpne	r3,r3,zero
1000d874:	28e2b03a 	or	r17,r5,r3
1000d878:	0007883a 	mov	r3,zero
1000d87c:	003f2306 	br	1000d50c <__alt_data_end+0xf800d50c>
1000d880:	0007883a 	mov	r3,zero
1000d884:	5811883a 	mov	r8,r11
1000d888:	00bfffc4 	movi	r2,-1
1000d88c:	0401ffc4 	movi	r16,2047
1000d890:	003e7806 	br	1000d274 <__alt_data_end+0xf800d274>
1000d894:	4462b03a 	or	r17,r8,r17
1000d898:	8822c03a 	cmpne	r17,r17,zero
1000d89c:	0009883a 	mov	r4,zero
1000d8a0:	003fa006 	br	1000d724 <__alt_data_end+0xf800d724>
1000d8a4:	4811883a 	mov	r8,r9
1000d8a8:	3023883a 	mov	r17,r6
1000d8ac:	0401ffc4 	movi	r16,2047
1000d8b0:	003e0706 	br	1000d0d0 <__alt_data_end+0xf800d0d0>
1000d8b4:	4811883a 	mov	r8,r9
1000d8b8:	3023883a 	mov	r17,r6
1000d8bc:	003e0406 	br	1000d0d0 <__alt_data_end+0xf800d0d0>
1000d8c0:	21fff804 	addi	r7,r4,-32
1000d8c4:	01400804 	movi	r5,32
1000d8c8:	41ced83a 	srl	r7,r8,r7
1000d8cc:	21400a26 	beq	r4,r5,1000d8f8 <__adddf3+0x8a4>
1000d8d0:	01401004 	movi	r5,64
1000d8d4:	2909c83a 	sub	r4,r5,r4
1000d8d8:	4108983a 	sll	r4,r8,r4
1000d8dc:	2448b03a 	or	r4,r4,r17
1000d8e0:	2008c03a 	cmpne	r4,r4,zero
1000d8e4:	3922b03a 	or	r17,r7,r4
1000d8e8:	0009883a 	mov	r4,zero
1000d8ec:	003f8d06 	br	1000d724 <__alt_data_end+0xf800d724>
1000d8f0:	0007883a 	mov	r3,zero
1000d8f4:	003fdd06 	br	1000d86c <__alt_data_end+0xf800d86c>
1000d8f8:	0009883a 	mov	r4,zero
1000d8fc:	003ff706 	br	1000d8dc <__alt_data_end+0xf800d8dc>

1000d900 <__divdf3>:
1000d900:	defff004 	addi	sp,sp,-64
1000d904:	dc800815 	stw	r18,32(sp)
1000d908:	2824d53a 	srli	r18,r5,20
1000d90c:	dd800c15 	stw	r22,48(sp)
1000d910:	282cd7fa 	srli	r22,r5,31
1000d914:	dc000615 	stw	r16,24(sp)
1000d918:	04000434 	movhi	r16,16
1000d91c:	843fffc4 	addi	r16,r16,-1
1000d920:	dfc00f15 	stw	ra,60(sp)
1000d924:	df000e15 	stw	fp,56(sp)
1000d928:	ddc00d15 	stw	r23,52(sp)
1000d92c:	dd400b15 	stw	r21,44(sp)
1000d930:	dd000a15 	stw	r20,40(sp)
1000d934:	dcc00915 	stw	r19,36(sp)
1000d938:	dc400715 	stw	r17,28(sp)
1000d93c:	9481ffcc 	andi	r18,r18,2047
1000d940:	2c20703a 	and	r16,r5,r16
1000d944:	b2003fcc 	andi	r8,r22,255
1000d948:	90006126 	beq	r18,zero,1000dad0 <__divdf3+0x1d0>
1000d94c:	0081ffc4 	movi	r2,2047
1000d950:	202b883a 	mov	r21,r4
1000d954:	90803726 	beq	r18,r2,1000da34 <__divdf3+0x134>
1000d958:	80800434 	orhi	r2,r16,16
1000d95c:	100490fa 	slli	r2,r2,3
1000d960:	2020d77a 	srli	r16,r4,29
1000d964:	202a90fa 	slli	r21,r4,3
1000d968:	94bf0044 	addi	r18,r18,-1023
1000d96c:	80a0b03a 	or	r16,r16,r2
1000d970:	0013883a 	mov	r9,zero
1000d974:	000b883a 	mov	r5,zero
1000d978:	3806d53a 	srli	r3,r7,20
1000d97c:	382ed7fa 	srli	r23,r7,31
1000d980:	04400434 	movhi	r17,16
1000d984:	8c7fffc4 	addi	r17,r17,-1
1000d988:	18c1ffcc 	andi	r3,r3,2047
1000d98c:	3029883a 	mov	r20,r6
1000d990:	3c62703a 	and	r17,r7,r17
1000d994:	bf003fcc 	andi	fp,r23,255
1000d998:	18006e26 	beq	r3,zero,1000db54 <__divdf3+0x254>
1000d99c:	0081ffc4 	movi	r2,2047
1000d9a0:	18806626 	beq	r3,r2,1000db3c <__divdf3+0x23c>
1000d9a4:	88800434 	orhi	r2,r17,16
1000d9a8:	100490fa 	slli	r2,r2,3
1000d9ac:	3022d77a 	srli	r17,r6,29
1000d9b0:	302890fa 	slli	r20,r6,3
1000d9b4:	18ff0044 	addi	r3,r3,-1023
1000d9b8:	88a2b03a 	or	r17,r17,r2
1000d9bc:	000f883a 	mov	r7,zero
1000d9c0:	b5e6f03a 	xor	r19,r22,r23
1000d9c4:	3a4cb03a 	or	r6,r7,r9
1000d9c8:	008003c4 	movi	r2,15
1000d9cc:	9809883a 	mov	r4,r19
1000d9d0:	90c7c83a 	sub	r3,r18,r3
1000d9d4:	9cc03fcc 	andi	r19,r19,255
1000d9d8:	11809636 	bltu	r2,r6,1000dc34 <__divdf3+0x334>
1000d9dc:	300c90ba 	slli	r6,r6,2
1000d9e0:	00840074 	movhi	r2,4097
1000d9e4:	10b67d04 	addi	r2,r2,-9740
1000d9e8:	308d883a 	add	r6,r6,r2
1000d9ec:	30800017 	ldw	r2,0(r6)
1000d9f0:	1000683a 	jmp	r2
1000d9f4:	1000dc34 	orhi	zero,r2,880
1000d9f8:	1000da6c 	andhi	zero,r2,873
1000d9fc:	1000dc24 	muli	zero,r2,880
1000da00:	1000da60 	cmpeqi	zero,r2,873
1000da04:	1000dc24 	muli	zero,r2,880
1000da08:	1000dbf8 	rdprs	zero,r2,879
1000da0c:	1000dc24 	muli	zero,r2,880
1000da10:	1000da60 	cmpeqi	zero,r2,873
1000da14:	1000da6c 	andhi	zero,r2,873
1000da18:	1000da6c 	andhi	zero,r2,873
1000da1c:	1000dbf8 	rdprs	zero,r2,879
1000da20:	1000da60 	cmpeqi	zero,r2,873
1000da24:	1000da50 	cmplti	zero,r2,873
1000da28:	1000da50 	cmplti	zero,r2,873
1000da2c:	1000da50 	cmplti	zero,r2,873
1000da30:	1000dfbc 	xorhi	zero,r2,894
1000da34:	2404b03a 	or	r2,r4,r16
1000da38:	10006c1e 	bne	r2,zero,1000dbec <__divdf3+0x2ec>
1000da3c:	02400204 	movi	r9,8
1000da40:	0021883a 	mov	r16,zero
1000da44:	002b883a 	mov	r21,zero
1000da48:	01400084 	movi	r5,2
1000da4c:	003fca06 	br	1000d978 <__alt_data_end+0xf800d978>
1000da50:	8023883a 	mov	r17,r16
1000da54:	a829883a 	mov	r20,r21
1000da58:	4039883a 	mov	fp,r8
1000da5c:	280f883a 	mov	r7,r5
1000da60:	00800084 	movi	r2,2
1000da64:	3881601e 	bne	r7,r2,1000dfe8 <__divdf3+0x6e8>
1000da68:	e027883a 	mov	r19,fp
1000da6c:	9900004c 	andi	r4,r19,1
1000da70:	0081ffc4 	movi	r2,2047
1000da74:	0021883a 	mov	r16,zero
1000da78:	002b883a 	mov	r21,zero
1000da7c:	1004953a 	slli	r2,r2,20
1000da80:	20c03fcc 	andi	r3,r4,255
1000da84:	01400434 	movhi	r5,16
1000da88:	297fffc4 	addi	r5,r5,-1
1000da8c:	180697fa 	slli	r3,r3,31
1000da90:	8160703a 	and	r16,r16,r5
1000da94:	80a0b03a 	or	r16,r16,r2
1000da98:	80c6b03a 	or	r3,r16,r3
1000da9c:	a805883a 	mov	r2,r21
1000daa0:	dfc00f17 	ldw	ra,60(sp)
1000daa4:	df000e17 	ldw	fp,56(sp)
1000daa8:	ddc00d17 	ldw	r23,52(sp)
1000daac:	dd800c17 	ldw	r22,48(sp)
1000dab0:	dd400b17 	ldw	r21,44(sp)
1000dab4:	dd000a17 	ldw	r20,40(sp)
1000dab8:	dcc00917 	ldw	r19,36(sp)
1000dabc:	dc800817 	ldw	r18,32(sp)
1000dac0:	dc400717 	ldw	r17,28(sp)
1000dac4:	dc000617 	ldw	r16,24(sp)
1000dac8:	dec01004 	addi	sp,sp,64
1000dacc:	f800283a 	ret
1000dad0:	2404b03a 	or	r2,r4,r16
1000dad4:	2023883a 	mov	r17,r4
1000dad8:	10003f26 	beq	r2,zero,1000dbd8 <__divdf3+0x2d8>
1000dadc:	80015e26 	beq	r16,zero,1000e058 <__divdf3+0x758>
1000dae0:	8009883a 	mov	r4,r16
1000dae4:	d9800215 	stw	r6,8(sp)
1000dae8:	d9c00515 	stw	r7,20(sp)
1000daec:	da000415 	stw	r8,16(sp)
1000daf0:	000f8940 	call	1000f894 <__clzsi2>
1000daf4:	d9800217 	ldw	r6,8(sp)
1000daf8:	d9c00517 	ldw	r7,20(sp)
1000dafc:	da000417 	ldw	r8,16(sp)
1000db00:	113ffd44 	addi	r4,r2,-11
1000db04:	00c00704 	movi	r3,28
1000db08:	19014f16 	blt	r3,r4,1000e048 <__divdf3+0x748>
1000db0c:	00c00744 	movi	r3,29
1000db10:	157ffe04 	addi	r21,r2,-8
1000db14:	1907c83a 	sub	r3,r3,r4
1000db18:	8560983a 	sll	r16,r16,r21
1000db1c:	88c6d83a 	srl	r3,r17,r3
1000db20:	8d6a983a 	sll	r21,r17,r21
1000db24:	1c20b03a 	or	r16,r3,r16
1000db28:	1080fcc4 	addi	r2,r2,1011
1000db2c:	00a5c83a 	sub	r18,zero,r2
1000db30:	0013883a 	mov	r9,zero
1000db34:	000b883a 	mov	r5,zero
1000db38:	003f8f06 	br	1000d978 <__alt_data_end+0xf800d978>
1000db3c:	3444b03a 	or	r2,r6,r17
1000db40:	1000231e 	bne	r2,zero,1000dbd0 <__divdf3+0x2d0>
1000db44:	0023883a 	mov	r17,zero
1000db48:	0029883a 	mov	r20,zero
1000db4c:	01c00084 	movi	r7,2
1000db50:	003f9b06 	br	1000d9c0 <__alt_data_end+0xf800d9c0>
1000db54:	3444b03a 	or	r2,r6,r17
1000db58:	10001926 	beq	r2,zero,1000dbc0 <__divdf3+0x2c0>
1000db5c:	88014b26 	beq	r17,zero,1000e08c <__divdf3+0x78c>
1000db60:	8809883a 	mov	r4,r17
1000db64:	d9400115 	stw	r5,4(sp)
1000db68:	d9800215 	stw	r6,8(sp)
1000db6c:	da000415 	stw	r8,16(sp)
1000db70:	da400315 	stw	r9,12(sp)
1000db74:	000f8940 	call	1000f894 <__clzsi2>
1000db78:	d9400117 	ldw	r5,4(sp)
1000db7c:	d9800217 	ldw	r6,8(sp)
1000db80:	da000417 	ldw	r8,16(sp)
1000db84:	da400317 	ldw	r9,12(sp)
1000db88:	113ffd44 	addi	r4,r2,-11
1000db8c:	00c00704 	movi	r3,28
1000db90:	19013a16 	blt	r3,r4,1000e07c <__divdf3+0x77c>
1000db94:	00c00744 	movi	r3,29
1000db98:	153ffe04 	addi	r20,r2,-8
1000db9c:	1907c83a 	sub	r3,r3,r4
1000dba0:	8d22983a 	sll	r17,r17,r20
1000dba4:	30c6d83a 	srl	r3,r6,r3
1000dba8:	3528983a 	sll	r20,r6,r20
1000dbac:	1c62b03a 	or	r17,r3,r17
1000dbb0:	1080fcc4 	addi	r2,r2,1011
1000dbb4:	0087c83a 	sub	r3,zero,r2
1000dbb8:	000f883a 	mov	r7,zero
1000dbbc:	003f8006 	br	1000d9c0 <__alt_data_end+0xf800d9c0>
1000dbc0:	0023883a 	mov	r17,zero
1000dbc4:	0029883a 	mov	r20,zero
1000dbc8:	01c00044 	movi	r7,1
1000dbcc:	003f7c06 	br	1000d9c0 <__alt_data_end+0xf800d9c0>
1000dbd0:	01c000c4 	movi	r7,3
1000dbd4:	003f7a06 	br	1000d9c0 <__alt_data_end+0xf800d9c0>
1000dbd8:	02400104 	movi	r9,4
1000dbdc:	0021883a 	mov	r16,zero
1000dbe0:	002b883a 	mov	r21,zero
1000dbe4:	01400044 	movi	r5,1
1000dbe8:	003f6306 	br	1000d978 <__alt_data_end+0xf800d978>
1000dbec:	02400304 	movi	r9,12
1000dbf0:	014000c4 	movi	r5,3
1000dbf4:	003f6006 	br	1000d978 <__alt_data_end+0xf800d978>
1000dbf8:	04000434 	movhi	r16,16
1000dbfc:	0009883a 	mov	r4,zero
1000dc00:	843fffc4 	addi	r16,r16,-1
1000dc04:	057fffc4 	movi	r21,-1
1000dc08:	0081ffc4 	movi	r2,2047
1000dc0c:	003f9b06 	br	1000da7c <__alt_data_end+0xf800da7c>
1000dc10:	00c00044 	movi	r3,1
1000dc14:	1887c83a 	sub	r3,r3,r2
1000dc18:	01000e04 	movi	r4,56
1000dc1c:	20c1530e 	bge	r4,r3,1000e16c <__divdf3+0x86c>
1000dc20:	9900004c 	andi	r4,r19,1
1000dc24:	0005883a 	mov	r2,zero
1000dc28:	0021883a 	mov	r16,zero
1000dc2c:	002b883a 	mov	r21,zero
1000dc30:	003f9206 	br	1000da7c <__alt_data_end+0xf800da7c>
1000dc34:	8c012e36 	bltu	r17,r16,1000e0f0 <__divdf3+0x7f0>
1000dc38:	84412c26 	beq	r16,r17,1000e0ec <__divdf3+0x7ec>
1000dc3c:	a82f883a 	mov	r23,r21
1000dc40:	18ffffc4 	addi	r3,r3,-1
1000dc44:	002b883a 	mov	r21,zero
1000dc48:	a004d63a 	srli	r2,r20,24
1000dc4c:	8822923a 	slli	r17,r17,8
1000dc50:	a028923a 	slli	r20,r20,8
1000dc54:	8009883a 	mov	r4,r16
1000dc58:	88acb03a 	or	r22,r17,r2
1000dc5c:	dd000015 	stw	r20,0(sp)
1000dc60:	b028d43a 	srli	r20,r22,16
1000dc64:	d8c00215 	stw	r3,8(sp)
1000dc68:	b4bfffcc 	andi	r18,r22,65535
1000dc6c:	a00b883a 	mov	r5,r20
1000dc70:	0002ab00 	call	10002ab0 <__udivsi3>
1000dc74:	100b883a 	mov	r5,r2
1000dc78:	9009883a 	mov	r4,r18
1000dc7c:	1023883a 	mov	r17,r2
1000dc80:	0002b6c0 	call	10002b6c <__mulsi3>
1000dc84:	8009883a 	mov	r4,r16
1000dc88:	a00b883a 	mov	r5,r20
1000dc8c:	1039883a 	mov	fp,r2
1000dc90:	0002b140 	call	10002b14 <__umodsi3>
1000dc94:	1004943a 	slli	r2,r2,16
1000dc98:	b808d43a 	srli	r4,r23,16
1000dc9c:	d8c00217 	ldw	r3,8(sp)
1000dca0:	2084b03a 	or	r2,r4,r2
1000dca4:	1700062e 	bgeu	r2,fp,1000dcc0 <__divdf3+0x3c0>
1000dca8:	1585883a 	add	r2,r2,r22
1000dcac:	893fffc4 	addi	r4,r17,-1
1000dcb0:	15811d36 	bltu	r2,r22,1000e128 <__divdf3+0x828>
1000dcb4:	17011c2e 	bgeu	r2,fp,1000e128 <__divdf3+0x828>
1000dcb8:	8c7fff84 	addi	r17,r17,-2
1000dcbc:	1585883a 	add	r2,r2,r22
1000dcc0:	1739c83a 	sub	fp,r2,fp
1000dcc4:	a00b883a 	mov	r5,r20
1000dcc8:	e009883a 	mov	r4,fp
1000dccc:	d8c00215 	stw	r3,8(sp)
1000dcd0:	0002ab00 	call	10002ab0 <__udivsi3>
1000dcd4:	100b883a 	mov	r5,r2
1000dcd8:	9009883a 	mov	r4,r18
1000dcdc:	1021883a 	mov	r16,r2
1000dce0:	0002b6c0 	call	10002b6c <__mulsi3>
1000dce4:	a00b883a 	mov	r5,r20
1000dce8:	e009883a 	mov	r4,fp
1000dcec:	d8800415 	stw	r2,16(sp)
1000dcf0:	0002b140 	call	10002b14 <__umodsi3>
1000dcf4:	1004943a 	slli	r2,r2,16
1000dcf8:	da000417 	ldw	r8,16(sp)
1000dcfc:	bdffffcc 	andi	r23,r23,65535
1000dd00:	b884b03a 	or	r2,r23,r2
1000dd04:	d8c00217 	ldw	r3,8(sp)
1000dd08:	1200062e 	bgeu	r2,r8,1000dd24 <__divdf3+0x424>
1000dd0c:	1585883a 	add	r2,r2,r22
1000dd10:	813fffc4 	addi	r4,r16,-1
1000dd14:	15810236 	bltu	r2,r22,1000e120 <__divdf3+0x820>
1000dd18:	1201012e 	bgeu	r2,r8,1000e120 <__divdf3+0x820>
1000dd1c:	843fff84 	addi	r16,r16,-2
1000dd20:	1585883a 	add	r2,r2,r22
1000dd24:	8822943a 	slli	r17,r17,16
1000dd28:	d9800017 	ldw	r6,0(sp)
1000dd2c:	1211c83a 	sub	r8,r2,r8
1000dd30:	8c22b03a 	or	r17,r17,r16
1000dd34:	373fffcc 	andi	fp,r6,65535
1000dd38:	8abfffcc 	andi	r10,r17,65535
1000dd3c:	8820d43a 	srli	r16,r17,16
1000dd40:	5009883a 	mov	r4,r10
1000dd44:	e00b883a 	mov	r5,fp
1000dd48:	302ed43a 	srli	r23,r6,16
1000dd4c:	d8c00215 	stw	r3,8(sp)
1000dd50:	da000415 	stw	r8,16(sp)
1000dd54:	da800115 	stw	r10,4(sp)
1000dd58:	0002b6c0 	call	10002b6c <__mulsi3>
1000dd5c:	800b883a 	mov	r5,r16
1000dd60:	e009883a 	mov	r4,fp
1000dd64:	d8800515 	stw	r2,20(sp)
1000dd68:	0002b6c0 	call	10002b6c <__mulsi3>
1000dd6c:	8009883a 	mov	r4,r16
1000dd70:	b80b883a 	mov	r5,r23
1000dd74:	d8800315 	stw	r2,12(sp)
1000dd78:	0002b6c0 	call	10002b6c <__mulsi3>
1000dd7c:	da800117 	ldw	r10,4(sp)
1000dd80:	b80b883a 	mov	r5,r23
1000dd84:	1021883a 	mov	r16,r2
1000dd88:	5009883a 	mov	r4,r10
1000dd8c:	0002b6c0 	call	10002b6c <__mulsi3>
1000dd90:	d9c00517 	ldw	r7,20(sp)
1000dd94:	da400317 	ldw	r9,12(sp)
1000dd98:	d8c00217 	ldw	r3,8(sp)
1000dd9c:	3808d43a 	srli	r4,r7,16
1000dda0:	1245883a 	add	r2,r2,r9
1000dda4:	da000417 	ldw	r8,16(sp)
1000dda8:	2085883a 	add	r2,r4,r2
1000ddac:	1240022e 	bgeu	r2,r9,1000ddb8 <__divdf3+0x4b8>
1000ddb0:	01000074 	movhi	r4,1
1000ddb4:	8121883a 	add	r16,r16,r4
1000ddb8:	1008d43a 	srli	r4,r2,16
1000ddbc:	1004943a 	slli	r2,r2,16
1000ddc0:	39ffffcc 	andi	r7,r7,65535
1000ddc4:	2409883a 	add	r4,r4,r16
1000ddc8:	11c5883a 	add	r2,r2,r7
1000ddcc:	4100bb36 	bltu	r8,r4,1000e0bc <__divdf3+0x7bc>
1000ddd0:	4100d726 	beq	r8,r4,1000e130 <__divdf3+0x830>
1000ddd4:	4109c83a 	sub	r4,r8,r4
1000ddd8:	a8a1c83a 	sub	r16,r21,r2
1000dddc:	ac2b803a 	cmpltu	r21,r21,r16
1000dde0:	256bc83a 	sub	r21,r4,r21
1000dde4:	b540d926 	beq	r22,r21,1000e14c <__divdf3+0x84c>
1000dde8:	a00b883a 	mov	r5,r20
1000ddec:	a809883a 	mov	r4,r21
1000ddf0:	d8c00215 	stw	r3,8(sp)
1000ddf4:	0002ab00 	call	10002ab0 <__udivsi3>
1000ddf8:	100b883a 	mov	r5,r2
1000ddfc:	9009883a 	mov	r4,r18
1000de00:	d8800515 	stw	r2,20(sp)
1000de04:	0002b6c0 	call	10002b6c <__mulsi3>
1000de08:	a809883a 	mov	r4,r21
1000de0c:	a00b883a 	mov	r5,r20
1000de10:	d8800415 	stw	r2,16(sp)
1000de14:	0002b140 	call	10002b14 <__umodsi3>
1000de18:	1004943a 	slli	r2,r2,16
1000de1c:	8008d43a 	srli	r4,r16,16
1000de20:	da000417 	ldw	r8,16(sp)
1000de24:	d8c00217 	ldw	r3,8(sp)
1000de28:	2084b03a 	or	r2,r4,r2
1000de2c:	d9c00517 	ldw	r7,20(sp)
1000de30:	1200062e 	bgeu	r2,r8,1000de4c <__divdf3+0x54c>
1000de34:	1585883a 	add	r2,r2,r22
1000de38:	393fffc4 	addi	r4,r7,-1
1000de3c:	1580c536 	bltu	r2,r22,1000e154 <__divdf3+0x854>
1000de40:	1200c42e 	bgeu	r2,r8,1000e154 <__divdf3+0x854>
1000de44:	39ffff84 	addi	r7,r7,-2
1000de48:	1585883a 	add	r2,r2,r22
1000de4c:	122bc83a 	sub	r21,r2,r8
1000de50:	a00b883a 	mov	r5,r20
1000de54:	a809883a 	mov	r4,r21
1000de58:	d8c00215 	stw	r3,8(sp)
1000de5c:	d9c00515 	stw	r7,20(sp)
1000de60:	0002ab00 	call	10002ab0 <__udivsi3>
1000de64:	9009883a 	mov	r4,r18
1000de68:	100b883a 	mov	r5,r2
1000de6c:	d8800415 	stw	r2,16(sp)
1000de70:	0002b6c0 	call	10002b6c <__mulsi3>
1000de74:	a809883a 	mov	r4,r21
1000de78:	a00b883a 	mov	r5,r20
1000de7c:	1025883a 	mov	r18,r2
1000de80:	0002b140 	call	10002b14 <__umodsi3>
1000de84:	1004943a 	slli	r2,r2,16
1000de88:	813fffcc 	andi	r4,r16,65535
1000de8c:	d8c00217 	ldw	r3,8(sp)
1000de90:	20a0b03a 	or	r16,r4,r2
1000de94:	d9c00517 	ldw	r7,20(sp)
1000de98:	da000417 	ldw	r8,16(sp)
1000de9c:	8480062e 	bgeu	r16,r18,1000deb8 <__divdf3+0x5b8>
1000dea0:	85a1883a 	add	r16,r16,r22
1000dea4:	40bfffc4 	addi	r2,r8,-1
1000dea8:	8580ac36 	bltu	r16,r22,1000e15c <__divdf3+0x85c>
1000deac:	8480ab2e 	bgeu	r16,r18,1000e15c <__divdf3+0x85c>
1000deb0:	423fff84 	addi	r8,r8,-2
1000deb4:	85a1883a 	add	r16,r16,r22
1000deb8:	3804943a 	slli	r2,r7,16
1000debc:	84a1c83a 	sub	r16,r16,r18
1000dec0:	e009883a 	mov	r4,fp
1000dec4:	1228b03a 	or	r20,r2,r8
1000dec8:	a1ffffcc 	andi	r7,r20,65535
1000decc:	a024d43a 	srli	r18,r20,16
1000ded0:	380b883a 	mov	r5,r7
1000ded4:	d8c00215 	stw	r3,8(sp)
1000ded8:	d9c00515 	stw	r7,20(sp)
1000dedc:	0002b6c0 	call	10002b6c <__mulsi3>
1000dee0:	900b883a 	mov	r5,r18
1000dee4:	e009883a 	mov	r4,fp
1000dee8:	102b883a 	mov	r21,r2
1000deec:	0002b6c0 	call	10002b6c <__mulsi3>
1000def0:	900b883a 	mov	r5,r18
1000def4:	b809883a 	mov	r4,r23
1000def8:	1039883a 	mov	fp,r2
1000defc:	0002b6c0 	call	10002b6c <__mulsi3>
1000df00:	d9c00517 	ldw	r7,20(sp)
1000df04:	b80b883a 	mov	r5,r23
1000df08:	1025883a 	mov	r18,r2
1000df0c:	3809883a 	mov	r4,r7
1000df10:	0002b6c0 	call	10002b6c <__mulsi3>
1000df14:	a808d43a 	srli	r4,r21,16
1000df18:	1705883a 	add	r2,r2,fp
1000df1c:	d8c00217 	ldw	r3,8(sp)
1000df20:	2085883a 	add	r2,r4,r2
1000df24:	1700022e 	bgeu	r2,fp,1000df30 <__divdf3+0x630>
1000df28:	01000074 	movhi	r4,1
1000df2c:	9125883a 	add	r18,r18,r4
1000df30:	1008d43a 	srli	r4,r2,16
1000df34:	1004943a 	slli	r2,r2,16
1000df38:	ad7fffcc 	andi	r21,r21,65535
1000df3c:	2489883a 	add	r4,r4,r18
1000df40:	1545883a 	add	r2,r2,r21
1000df44:	81003836 	bltu	r16,r4,1000e028 <__divdf3+0x728>
1000df48:	81003626 	beq	r16,r4,1000e024 <__divdf3+0x724>
1000df4c:	a5000054 	ori	r20,r20,1
1000df50:	1880ffc4 	addi	r2,r3,1023
1000df54:	00bf2e0e 	bge	zero,r2,1000dc10 <__alt_data_end+0xf800dc10>
1000df58:	a10001cc 	andi	r4,r20,7
1000df5c:	20000726 	beq	r4,zero,1000df7c <__divdf3+0x67c>
1000df60:	a10003cc 	andi	r4,r20,15
1000df64:	01400104 	movi	r5,4
1000df68:	21400426 	beq	r4,r5,1000df7c <__divdf3+0x67c>
1000df6c:	a149883a 	add	r4,r20,r5
1000df70:	2529803a 	cmpltu	r20,r4,r20
1000df74:	8d23883a 	add	r17,r17,r20
1000df78:	2029883a 	mov	r20,r4
1000df7c:	8900402c 	andhi	r4,r17,256
1000df80:	20000426 	beq	r4,zero,1000df94 <__divdf3+0x694>
1000df84:	18810004 	addi	r2,r3,1024
1000df88:	00ffc034 	movhi	r3,65280
1000df8c:	18ffffc4 	addi	r3,r3,-1
1000df90:	88e2703a 	and	r17,r17,r3
1000df94:	00c1ff84 	movi	r3,2046
1000df98:	18beb416 	blt	r3,r2,1000da6c <__alt_data_end+0xf800da6c>
1000df9c:	a028d0fa 	srli	r20,r20,3
1000dfa0:	882a977a 	slli	r21,r17,29
1000dfa4:	8820927a 	slli	r16,r17,9
1000dfa8:	1081ffcc 	andi	r2,r2,2047
1000dfac:	ad2ab03a 	or	r21,r21,r20
1000dfb0:	8020d33a 	srli	r16,r16,12
1000dfb4:	9900004c 	andi	r4,r19,1
1000dfb8:	003eb006 	br	1000da7c <__alt_data_end+0xf800da7c>
1000dfbc:	8080022c 	andhi	r2,r16,8
1000dfc0:	10001226 	beq	r2,zero,1000e00c <__divdf3+0x70c>
1000dfc4:	8880022c 	andhi	r2,r17,8
1000dfc8:	1000101e 	bne	r2,zero,1000e00c <__divdf3+0x70c>
1000dfcc:	00800434 	movhi	r2,16
1000dfd0:	8c000234 	orhi	r16,r17,8
1000dfd4:	10bfffc4 	addi	r2,r2,-1
1000dfd8:	b809883a 	mov	r4,r23
1000dfdc:	80a0703a 	and	r16,r16,r2
1000dfe0:	a02b883a 	mov	r21,r20
1000dfe4:	003f0806 	br	1000dc08 <__alt_data_end+0xf800dc08>
1000dfe8:	008000c4 	movi	r2,3
1000dfec:	3880b126 	beq	r7,r2,1000e2b4 <__divdf3+0x9b4>
1000dff0:	00800044 	movi	r2,1
1000dff4:	38805b1e 	bne	r7,r2,1000e164 <__divdf3+0x864>
1000dff8:	e009883a 	mov	r4,fp
1000dffc:	0005883a 	mov	r2,zero
1000e000:	0021883a 	mov	r16,zero
1000e004:	002b883a 	mov	r21,zero
1000e008:	003e9c06 	br	1000da7c <__alt_data_end+0xf800da7c>
1000e00c:	00800434 	movhi	r2,16
1000e010:	84000234 	orhi	r16,r16,8
1000e014:	10bfffc4 	addi	r2,r2,-1
1000e018:	b009883a 	mov	r4,r22
1000e01c:	80a0703a 	and	r16,r16,r2
1000e020:	003ef906 	br	1000dc08 <__alt_data_end+0xf800dc08>
1000e024:	103fca26 	beq	r2,zero,1000df50 <__alt_data_end+0xf800df50>
1000e028:	b421883a 	add	r16,r22,r16
1000e02c:	a17fffc4 	addi	r5,r20,-1
1000e030:	8580422e 	bgeu	r16,r22,1000e13c <__divdf3+0x83c>
1000e034:	2829883a 	mov	r20,r5
1000e038:	813fc41e 	bne	r16,r4,1000df4c <__alt_data_end+0xf800df4c>
1000e03c:	d9800017 	ldw	r6,0(sp)
1000e040:	30bfc21e 	bne	r6,r2,1000df4c <__alt_data_end+0xf800df4c>
1000e044:	003fc206 	br	1000df50 <__alt_data_end+0xf800df50>
1000e048:	143ff604 	addi	r16,r2,-40
1000e04c:	8c20983a 	sll	r16,r17,r16
1000e050:	002b883a 	mov	r21,zero
1000e054:	003eb406 	br	1000db28 <__alt_data_end+0xf800db28>
1000e058:	d9800215 	stw	r6,8(sp)
1000e05c:	d9c00515 	stw	r7,20(sp)
1000e060:	da000415 	stw	r8,16(sp)
1000e064:	000f8940 	call	1000f894 <__clzsi2>
1000e068:	10800804 	addi	r2,r2,32
1000e06c:	da000417 	ldw	r8,16(sp)
1000e070:	d9c00517 	ldw	r7,20(sp)
1000e074:	d9800217 	ldw	r6,8(sp)
1000e078:	003ea106 	br	1000db00 <__alt_data_end+0xf800db00>
1000e07c:	147ff604 	addi	r17,r2,-40
1000e080:	3462983a 	sll	r17,r6,r17
1000e084:	0029883a 	mov	r20,zero
1000e088:	003ec906 	br	1000dbb0 <__alt_data_end+0xf800dbb0>
1000e08c:	3009883a 	mov	r4,r6
1000e090:	d9400115 	stw	r5,4(sp)
1000e094:	d9800215 	stw	r6,8(sp)
1000e098:	da000415 	stw	r8,16(sp)
1000e09c:	da400315 	stw	r9,12(sp)
1000e0a0:	000f8940 	call	1000f894 <__clzsi2>
1000e0a4:	10800804 	addi	r2,r2,32
1000e0a8:	da400317 	ldw	r9,12(sp)
1000e0ac:	da000417 	ldw	r8,16(sp)
1000e0b0:	d9800217 	ldw	r6,8(sp)
1000e0b4:	d9400117 	ldw	r5,4(sp)
1000e0b8:	003eb306 	br	1000db88 <__alt_data_end+0xf800db88>
1000e0bc:	d9800017 	ldw	r6,0(sp)
1000e0c0:	a9ab883a 	add	r21,r21,r6
1000e0c4:	a98b803a 	cmpltu	r5,r21,r6
1000e0c8:	2d8b883a 	add	r5,r5,r22
1000e0cc:	2a11883a 	add	r8,r5,r8
1000e0d0:	897fffc4 	addi	r5,r17,-1
1000e0d4:	b2000c2e 	bgeu	r22,r8,1000e108 <__divdf3+0x808>
1000e0d8:	41003f36 	bltu	r8,r4,1000e1d8 <__divdf3+0x8d8>
1000e0dc:	22006c26 	beq	r4,r8,1000e290 <__divdf3+0x990>
1000e0e0:	4109c83a 	sub	r4,r8,r4
1000e0e4:	2823883a 	mov	r17,r5
1000e0e8:	003f3b06 	br	1000ddd8 <__alt_data_end+0xf800ddd8>
1000e0ec:	ad3ed336 	bltu	r21,r20,1000dc3c <__alt_data_end+0xf800dc3c>
1000e0f0:	a804d07a 	srli	r2,r21,1
1000e0f4:	802e97fa 	slli	r23,r16,31
1000e0f8:	a82a97fa 	slli	r21,r21,31
1000e0fc:	8020d07a 	srli	r16,r16,1
1000e100:	b8aeb03a 	or	r23,r23,r2
1000e104:	003ed006 	br	1000dc48 <__alt_data_end+0xf800dc48>
1000e108:	b23ff51e 	bne	r22,r8,1000e0e0 <__alt_data_end+0xf800e0e0>
1000e10c:	d9800017 	ldw	r6,0(sp)
1000e110:	a9bff12e 	bgeu	r21,r6,1000e0d8 <__alt_data_end+0xf800e0d8>
1000e114:	b109c83a 	sub	r4,r22,r4
1000e118:	2823883a 	mov	r17,r5
1000e11c:	003f2e06 	br	1000ddd8 <__alt_data_end+0xf800ddd8>
1000e120:	2021883a 	mov	r16,r4
1000e124:	003eff06 	br	1000dd24 <__alt_data_end+0xf800dd24>
1000e128:	2023883a 	mov	r17,r4
1000e12c:	003ee406 	br	1000dcc0 <__alt_data_end+0xf800dcc0>
1000e130:	a8bfe236 	bltu	r21,r2,1000e0bc <__alt_data_end+0xf800e0bc>
1000e134:	0009883a 	mov	r4,zero
1000e138:	003f2706 	br	1000ddd8 <__alt_data_end+0xf800ddd8>
1000e13c:	81002d36 	bltu	r16,r4,1000e1f4 <__divdf3+0x8f4>
1000e140:	24005626 	beq	r4,r16,1000e29c <__divdf3+0x99c>
1000e144:	2829883a 	mov	r20,r5
1000e148:	003f8006 	br	1000df4c <__alt_data_end+0xf800df4c>
1000e14c:	053fffc4 	movi	r20,-1
1000e150:	003f7f06 	br	1000df50 <__alt_data_end+0xf800df50>
1000e154:	200f883a 	mov	r7,r4
1000e158:	003f3c06 	br	1000de4c <__alt_data_end+0xf800de4c>
1000e15c:	1011883a 	mov	r8,r2
1000e160:	003f5506 	br	1000deb8 <__alt_data_end+0xf800deb8>
1000e164:	e027883a 	mov	r19,fp
1000e168:	003f7906 	br	1000df50 <__alt_data_end+0xf800df50>
1000e16c:	010007c4 	movi	r4,31
1000e170:	20c02816 	blt	r4,r3,1000e214 <__divdf3+0x914>
1000e174:	00800804 	movi	r2,32
1000e178:	10c5c83a 	sub	r2,r2,r3
1000e17c:	888a983a 	sll	r5,r17,r2
1000e180:	a0c8d83a 	srl	r4,r20,r3
1000e184:	a084983a 	sll	r2,r20,r2
1000e188:	88e2d83a 	srl	r17,r17,r3
1000e18c:	2906b03a 	or	r3,r5,r4
1000e190:	1004c03a 	cmpne	r2,r2,zero
1000e194:	1886b03a 	or	r3,r3,r2
1000e198:	188001cc 	andi	r2,r3,7
1000e19c:	10000726 	beq	r2,zero,1000e1bc <__divdf3+0x8bc>
1000e1a0:	188003cc 	andi	r2,r3,15
1000e1a4:	01000104 	movi	r4,4
1000e1a8:	11000426 	beq	r2,r4,1000e1bc <__divdf3+0x8bc>
1000e1ac:	1805883a 	mov	r2,r3
1000e1b0:	10c00104 	addi	r3,r2,4
1000e1b4:	1885803a 	cmpltu	r2,r3,r2
1000e1b8:	88a3883a 	add	r17,r17,r2
1000e1bc:	8880202c 	andhi	r2,r17,128
1000e1c0:	10002926 	beq	r2,zero,1000e268 <__divdf3+0x968>
1000e1c4:	9900004c 	andi	r4,r19,1
1000e1c8:	00800044 	movi	r2,1
1000e1cc:	0021883a 	mov	r16,zero
1000e1d0:	002b883a 	mov	r21,zero
1000e1d4:	003e2906 	br	1000da7c <__alt_data_end+0xf800da7c>
1000e1d8:	d9800017 	ldw	r6,0(sp)
1000e1dc:	8c7fff84 	addi	r17,r17,-2
1000e1e0:	a9ab883a 	add	r21,r21,r6
1000e1e4:	a98b803a 	cmpltu	r5,r21,r6
1000e1e8:	2d8b883a 	add	r5,r5,r22
1000e1ec:	2a11883a 	add	r8,r5,r8
1000e1f0:	003ef806 	br	1000ddd4 <__alt_data_end+0xf800ddd4>
1000e1f4:	d9800017 	ldw	r6,0(sp)
1000e1f8:	318f883a 	add	r7,r6,r6
1000e1fc:	398b803a 	cmpltu	r5,r7,r6
1000e200:	2d8d883a 	add	r6,r5,r22
1000e204:	81a1883a 	add	r16,r16,r6
1000e208:	a17fff84 	addi	r5,r20,-2
1000e20c:	d9c00015 	stw	r7,0(sp)
1000e210:	003f8806 	br	1000e034 <__alt_data_end+0xf800e034>
1000e214:	013ff844 	movi	r4,-31
1000e218:	2085c83a 	sub	r2,r4,r2
1000e21c:	8888d83a 	srl	r4,r17,r2
1000e220:	00800804 	movi	r2,32
1000e224:	18802126 	beq	r3,r2,1000e2ac <__divdf3+0x9ac>
1000e228:	04001004 	movi	r16,64
1000e22c:	80c7c83a 	sub	r3,r16,r3
1000e230:	88e0983a 	sll	r16,r17,r3
1000e234:	8504b03a 	or	r2,r16,r20
1000e238:	1004c03a 	cmpne	r2,r2,zero
1000e23c:	2084b03a 	or	r2,r4,r2
1000e240:	144001cc 	andi	r17,r2,7
1000e244:	88000d1e 	bne	r17,zero,1000e27c <__divdf3+0x97c>
1000e248:	0021883a 	mov	r16,zero
1000e24c:	102ad0fa 	srli	r21,r2,3
1000e250:	9900004c 	andi	r4,r19,1
1000e254:	0005883a 	mov	r2,zero
1000e258:	ac6ab03a 	or	r21,r21,r17
1000e25c:	003e0706 	br	1000da7c <__alt_data_end+0xf800da7c>
1000e260:	1007883a 	mov	r3,r2
1000e264:	0023883a 	mov	r17,zero
1000e268:	8820927a 	slli	r16,r17,9
1000e26c:	1805883a 	mov	r2,r3
1000e270:	8822977a 	slli	r17,r17,29
1000e274:	8020d33a 	srli	r16,r16,12
1000e278:	003ff406 	br	1000e24c <__alt_data_end+0xf800e24c>
1000e27c:	10c003cc 	andi	r3,r2,15
1000e280:	01000104 	movi	r4,4
1000e284:	193ff626 	beq	r3,r4,1000e260 <__alt_data_end+0xf800e260>
1000e288:	0023883a 	mov	r17,zero
1000e28c:	003fc806 	br	1000e1b0 <__alt_data_end+0xf800e1b0>
1000e290:	a8bfd136 	bltu	r21,r2,1000e1d8 <__alt_data_end+0xf800e1d8>
1000e294:	2823883a 	mov	r17,r5
1000e298:	003fa606 	br	1000e134 <__alt_data_end+0xf800e134>
1000e29c:	d9800017 	ldw	r6,0(sp)
1000e2a0:	30bfd436 	bltu	r6,r2,1000e1f4 <__alt_data_end+0xf800e1f4>
1000e2a4:	2829883a 	mov	r20,r5
1000e2a8:	003f6406 	br	1000e03c <__alt_data_end+0xf800e03c>
1000e2ac:	0021883a 	mov	r16,zero
1000e2b0:	003fe006 	br	1000e234 <__alt_data_end+0xf800e234>
1000e2b4:	00800434 	movhi	r2,16
1000e2b8:	8c000234 	orhi	r16,r17,8
1000e2bc:	10bfffc4 	addi	r2,r2,-1
1000e2c0:	e009883a 	mov	r4,fp
1000e2c4:	80a0703a 	and	r16,r16,r2
1000e2c8:	a02b883a 	mov	r21,r20
1000e2cc:	003e4e06 	br	1000dc08 <__alt_data_end+0xf800dc08>

1000e2d0 <__eqdf2>:
1000e2d0:	2804d53a 	srli	r2,r5,20
1000e2d4:	3806d53a 	srli	r3,r7,20
1000e2d8:	02000434 	movhi	r8,16
1000e2dc:	423fffc4 	addi	r8,r8,-1
1000e2e0:	1081ffcc 	andi	r2,r2,2047
1000e2e4:	0281ffc4 	movi	r10,2047
1000e2e8:	2a12703a 	and	r9,r5,r8
1000e2ec:	18c1ffcc 	andi	r3,r3,2047
1000e2f0:	3a10703a 	and	r8,r7,r8
1000e2f4:	280ad7fa 	srli	r5,r5,31
1000e2f8:	380ed7fa 	srli	r7,r7,31
1000e2fc:	12801026 	beq	r2,r10,1000e340 <__eqdf2+0x70>
1000e300:	0281ffc4 	movi	r10,2047
1000e304:	1a800a26 	beq	r3,r10,1000e330 <__eqdf2+0x60>
1000e308:	10c00226 	beq	r2,r3,1000e314 <__eqdf2+0x44>
1000e30c:	00800044 	movi	r2,1
1000e310:	f800283a 	ret
1000e314:	4a3ffd1e 	bne	r9,r8,1000e30c <__alt_data_end+0xf800e30c>
1000e318:	21bffc1e 	bne	r4,r6,1000e30c <__alt_data_end+0xf800e30c>
1000e31c:	29c00c26 	beq	r5,r7,1000e350 <__eqdf2+0x80>
1000e320:	103ffa1e 	bne	r2,zero,1000e30c <__alt_data_end+0xf800e30c>
1000e324:	2244b03a 	or	r2,r4,r9
1000e328:	1004c03a 	cmpne	r2,r2,zero
1000e32c:	f800283a 	ret
1000e330:	3214b03a 	or	r10,r6,r8
1000e334:	503ff426 	beq	r10,zero,1000e308 <__alt_data_end+0xf800e308>
1000e338:	00800044 	movi	r2,1
1000e33c:	f800283a 	ret
1000e340:	2254b03a 	or	r10,r4,r9
1000e344:	503fee26 	beq	r10,zero,1000e300 <__alt_data_end+0xf800e300>
1000e348:	00800044 	movi	r2,1
1000e34c:	f800283a 	ret
1000e350:	0005883a 	mov	r2,zero
1000e354:	f800283a 	ret

1000e358 <__gedf2>:
1000e358:	2804d53a 	srli	r2,r5,20
1000e35c:	3806d53a 	srli	r3,r7,20
1000e360:	02000434 	movhi	r8,16
1000e364:	423fffc4 	addi	r8,r8,-1
1000e368:	1081ffcc 	andi	r2,r2,2047
1000e36c:	0241ffc4 	movi	r9,2047
1000e370:	2a14703a 	and	r10,r5,r8
1000e374:	18c1ffcc 	andi	r3,r3,2047
1000e378:	3a10703a 	and	r8,r7,r8
1000e37c:	280ad7fa 	srli	r5,r5,31
1000e380:	380ed7fa 	srli	r7,r7,31
1000e384:	12401d26 	beq	r2,r9,1000e3fc <__gedf2+0xa4>
1000e388:	0241ffc4 	movi	r9,2047
1000e38c:	1a401226 	beq	r3,r9,1000e3d8 <__gedf2+0x80>
1000e390:	1000081e 	bne	r2,zero,1000e3b4 <__gedf2+0x5c>
1000e394:	2296b03a 	or	r11,r4,r10
1000e398:	5813003a 	cmpeq	r9,r11,zero
1000e39c:	1800091e 	bne	r3,zero,1000e3c4 <__gedf2+0x6c>
1000e3a0:	3218b03a 	or	r12,r6,r8
1000e3a4:	6000071e 	bne	r12,zero,1000e3c4 <__gedf2+0x6c>
1000e3a8:	0005883a 	mov	r2,zero
1000e3ac:	5800101e 	bne	r11,zero,1000e3f0 <__gedf2+0x98>
1000e3b0:	f800283a 	ret
1000e3b4:	18000c1e 	bne	r3,zero,1000e3e8 <__gedf2+0x90>
1000e3b8:	3212b03a 	or	r9,r6,r8
1000e3bc:	48000c26 	beq	r9,zero,1000e3f0 <__gedf2+0x98>
1000e3c0:	0013883a 	mov	r9,zero
1000e3c4:	39c03fcc 	andi	r7,r7,255
1000e3c8:	48000826 	beq	r9,zero,1000e3ec <__gedf2+0x94>
1000e3cc:	38000926 	beq	r7,zero,1000e3f4 <__gedf2+0x9c>
1000e3d0:	00800044 	movi	r2,1
1000e3d4:	f800283a 	ret
1000e3d8:	3212b03a 	or	r9,r6,r8
1000e3dc:	483fec26 	beq	r9,zero,1000e390 <__alt_data_end+0xf800e390>
1000e3e0:	00bfff84 	movi	r2,-2
1000e3e4:	f800283a 	ret
1000e3e8:	39c03fcc 	andi	r7,r7,255
1000e3ec:	29c00626 	beq	r5,r7,1000e408 <__gedf2+0xb0>
1000e3f0:	283ff726 	beq	r5,zero,1000e3d0 <__alt_data_end+0xf800e3d0>
1000e3f4:	00bfffc4 	movi	r2,-1
1000e3f8:	f800283a 	ret
1000e3fc:	2292b03a 	or	r9,r4,r10
1000e400:	483fe126 	beq	r9,zero,1000e388 <__alt_data_end+0xf800e388>
1000e404:	003ff606 	br	1000e3e0 <__alt_data_end+0xf800e3e0>
1000e408:	18bff916 	blt	r3,r2,1000e3f0 <__alt_data_end+0xf800e3f0>
1000e40c:	10c00316 	blt	r2,r3,1000e41c <__gedf2+0xc4>
1000e410:	42bff736 	bltu	r8,r10,1000e3f0 <__alt_data_end+0xf800e3f0>
1000e414:	52000326 	beq	r10,r8,1000e424 <__gedf2+0xcc>
1000e418:	5200042e 	bgeu	r10,r8,1000e42c <__gedf2+0xd4>
1000e41c:	283fec1e 	bne	r5,zero,1000e3d0 <__alt_data_end+0xf800e3d0>
1000e420:	003ff406 	br	1000e3f4 <__alt_data_end+0xf800e3f4>
1000e424:	313ff236 	bltu	r6,r4,1000e3f0 <__alt_data_end+0xf800e3f0>
1000e428:	21bffc36 	bltu	r4,r6,1000e41c <__alt_data_end+0xf800e41c>
1000e42c:	0005883a 	mov	r2,zero
1000e430:	f800283a 	ret

1000e434 <__ledf2>:
1000e434:	2804d53a 	srli	r2,r5,20
1000e438:	3810d53a 	srli	r8,r7,20
1000e43c:	00c00434 	movhi	r3,16
1000e440:	18ffffc4 	addi	r3,r3,-1
1000e444:	1081ffcc 	andi	r2,r2,2047
1000e448:	0241ffc4 	movi	r9,2047
1000e44c:	28d4703a 	and	r10,r5,r3
1000e450:	4201ffcc 	andi	r8,r8,2047
1000e454:	38c6703a 	and	r3,r7,r3
1000e458:	280ad7fa 	srli	r5,r5,31
1000e45c:	380ed7fa 	srli	r7,r7,31
1000e460:	12401f26 	beq	r2,r9,1000e4e0 <__ledf2+0xac>
1000e464:	0241ffc4 	movi	r9,2047
1000e468:	42401426 	beq	r8,r9,1000e4bc <__ledf2+0x88>
1000e46c:	1000091e 	bne	r2,zero,1000e494 <__ledf2+0x60>
1000e470:	2296b03a 	or	r11,r4,r10
1000e474:	5813003a 	cmpeq	r9,r11,zero
1000e478:	29403fcc 	andi	r5,r5,255
1000e47c:	40000a1e 	bne	r8,zero,1000e4a8 <__ledf2+0x74>
1000e480:	30d8b03a 	or	r12,r6,r3
1000e484:	6000081e 	bne	r12,zero,1000e4a8 <__ledf2+0x74>
1000e488:	0005883a 	mov	r2,zero
1000e48c:	5800111e 	bne	r11,zero,1000e4d4 <__ledf2+0xa0>
1000e490:	f800283a 	ret
1000e494:	29403fcc 	andi	r5,r5,255
1000e498:	40000c1e 	bne	r8,zero,1000e4cc <__ledf2+0x98>
1000e49c:	30d2b03a 	or	r9,r6,r3
1000e4a0:	48000c26 	beq	r9,zero,1000e4d4 <__ledf2+0xa0>
1000e4a4:	0013883a 	mov	r9,zero
1000e4a8:	39c03fcc 	andi	r7,r7,255
1000e4ac:	48000826 	beq	r9,zero,1000e4d0 <__ledf2+0x9c>
1000e4b0:	38001126 	beq	r7,zero,1000e4f8 <__ledf2+0xc4>
1000e4b4:	00800044 	movi	r2,1
1000e4b8:	f800283a 	ret
1000e4bc:	30d2b03a 	or	r9,r6,r3
1000e4c0:	483fea26 	beq	r9,zero,1000e46c <__alt_data_end+0xf800e46c>
1000e4c4:	00800084 	movi	r2,2
1000e4c8:	f800283a 	ret
1000e4cc:	39c03fcc 	andi	r7,r7,255
1000e4d0:	39400726 	beq	r7,r5,1000e4f0 <__ledf2+0xbc>
1000e4d4:	2800081e 	bne	r5,zero,1000e4f8 <__ledf2+0xc4>
1000e4d8:	00800044 	movi	r2,1
1000e4dc:	f800283a 	ret
1000e4e0:	2292b03a 	or	r9,r4,r10
1000e4e4:	483fdf26 	beq	r9,zero,1000e464 <__alt_data_end+0xf800e464>
1000e4e8:	00800084 	movi	r2,2
1000e4ec:	f800283a 	ret
1000e4f0:	4080030e 	bge	r8,r2,1000e500 <__ledf2+0xcc>
1000e4f4:	383fef26 	beq	r7,zero,1000e4b4 <__alt_data_end+0xf800e4b4>
1000e4f8:	00bfffc4 	movi	r2,-1
1000e4fc:	f800283a 	ret
1000e500:	123feb16 	blt	r2,r8,1000e4b0 <__alt_data_end+0xf800e4b0>
1000e504:	1abff336 	bltu	r3,r10,1000e4d4 <__alt_data_end+0xf800e4d4>
1000e508:	50c00326 	beq	r10,r3,1000e518 <__ledf2+0xe4>
1000e50c:	50c0042e 	bgeu	r10,r3,1000e520 <__ledf2+0xec>
1000e510:	283fe81e 	bne	r5,zero,1000e4b4 <__alt_data_end+0xf800e4b4>
1000e514:	003ff806 	br	1000e4f8 <__alt_data_end+0xf800e4f8>
1000e518:	313fee36 	bltu	r6,r4,1000e4d4 <__alt_data_end+0xf800e4d4>
1000e51c:	21bffc36 	bltu	r4,r6,1000e510 <__alt_data_end+0xf800e510>
1000e520:	0005883a 	mov	r2,zero
1000e524:	f800283a 	ret

1000e528 <__muldf3>:
1000e528:	deffee04 	addi	sp,sp,-72
1000e52c:	dd000c15 	stw	r20,48(sp)
1000e530:	2828d53a 	srli	r20,r5,20
1000e534:	ddc00f15 	stw	r23,60(sp)
1000e538:	282ed7fa 	srli	r23,r5,31
1000e53c:	dc000815 	stw	r16,32(sp)
1000e540:	04000434 	movhi	r16,16
1000e544:	dcc00b15 	stw	r19,44(sp)
1000e548:	843fffc4 	addi	r16,r16,-1
1000e54c:	dfc01115 	stw	ra,68(sp)
1000e550:	df001015 	stw	fp,64(sp)
1000e554:	dd800e15 	stw	r22,56(sp)
1000e558:	dd400d15 	stw	r21,52(sp)
1000e55c:	dc800a15 	stw	r18,40(sp)
1000e560:	dc400915 	stw	r17,36(sp)
1000e564:	a501ffcc 	andi	r20,r20,2047
1000e568:	2c20703a 	and	r16,r5,r16
1000e56c:	b827883a 	mov	r19,r23
1000e570:	ba403fcc 	andi	r9,r23,255
1000e574:	a0006026 	beq	r20,zero,1000e6f8 <__muldf3+0x1d0>
1000e578:	0081ffc4 	movi	r2,2047
1000e57c:	202d883a 	mov	r22,r4
1000e580:	a0803626 	beq	r20,r2,1000e65c <__muldf3+0x134>
1000e584:	84000434 	orhi	r16,r16,16
1000e588:	200ad77a 	srli	r5,r4,29
1000e58c:	800490fa 	slli	r2,r16,3
1000e590:	202c90fa 	slli	r22,r4,3
1000e594:	a53f0044 	addi	r20,r20,-1023
1000e598:	28a0b03a 	or	r16,r5,r2
1000e59c:	002b883a 	mov	r21,zero
1000e5a0:	000b883a 	mov	r5,zero
1000e5a4:	3804d53a 	srli	r2,r7,20
1000e5a8:	3838d7fa 	srli	fp,r7,31
1000e5ac:	04400434 	movhi	r17,16
1000e5b0:	8c7fffc4 	addi	r17,r17,-1
1000e5b4:	1081ffcc 	andi	r2,r2,2047
1000e5b8:	3025883a 	mov	r18,r6
1000e5bc:	3c62703a 	and	r17,r7,r17
1000e5c0:	e2803fcc 	andi	r10,fp,255
1000e5c4:	10006d26 	beq	r2,zero,1000e77c <__muldf3+0x254>
1000e5c8:	00c1ffc4 	movi	r3,2047
1000e5cc:	10c06526 	beq	r2,r3,1000e764 <__muldf3+0x23c>
1000e5d0:	8c400434 	orhi	r17,r17,16
1000e5d4:	300ed77a 	srli	r7,r6,29
1000e5d8:	880690fa 	slli	r3,r17,3
1000e5dc:	302490fa 	slli	r18,r6,3
1000e5e0:	10bf0044 	addi	r2,r2,-1023
1000e5e4:	38e2b03a 	or	r17,r7,r3
1000e5e8:	000f883a 	mov	r7,zero
1000e5ec:	a087883a 	add	r3,r20,r2
1000e5f0:	010003c4 	movi	r4,15
1000e5f4:	3d44b03a 	or	r2,r7,r21
1000e5f8:	e5ccf03a 	xor	r6,fp,r23
1000e5fc:	1a000044 	addi	r8,r3,1
1000e600:	20809b36 	bltu	r4,r2,1000e870 <__muldf3+0x348>
1000e604:	100490ba 	slli	r2,r2,2
1000e608:	01040074 	movhi	r4,4097
1000e60c:	21398704 	addi	r4,r4,-6628
1000e610:	1105883a 	add	r2,r2,r4
1000e614:	10800017 	ldw	r2,0(r2)
1000e618:	1000683a 	jmp	r2
1000e61c:	1000e870 	cmpltui	zero,r2,929
1000e620:	1000e67c 	xorhi	zero,r2,921
1000e624:	1000e67c 	xorhi	zero,r2,921
1000e628:	1000e678 	rdprs	zero,r2,921
1000e62c:	1000e84c 	andi	zero,r2,929
1000e630:	1000e84c 	andi	zero,r2,929
1000e634:	1000e834 	orhi	zero,r2,928
1000e638:	1000e678 	rdprs	zero,r2,921
1000e63c:	1000e84c 	andi	zero,r2,929
1000e640:	1000e834 	orhi	zero,r2,928
1000e644:	1000e84c 	andi	zero,r2,929
1000e648:	1000e678 	rdprs	zero,r2,921
1000e64c:	1000e85c 	xori	zero,r2,929
1000e650:	1000e85c 	xori	zero,r2,929
1000e654:	1000e85c 	xori	zero,r2,929
1000e658:	1000ebbc 	xorhi	zero,r2,942
1000e65c:	2404b03a 	or	r2,r4,r16
1000e660:	1000711e 	bne	r2,zero,1000e828 <__muldf3+0x300>
1000e664:	05400204 	movi	r21,8
1000e668:	0021883a 	mov	r16,zero
1000e66c:	002d883a 	mov	r22,zero
1000e670:	01400084 	movi	r5,2
1000e674:	003fcb06 	br	1000e5a4 <__alt_data_end+0xf800e5a4>
1000e678:	500d883a 	mov	r6,r10
1000e67c:	00800084 	movi	r2,2
1000e680:	38805926 	beq	r7,r2,1000e7e8 <__muldf3+0x2c0>
1000e684:	008000c4 	movi	r2,3
1000e688:	3881bb26 	beq	r7,r2,1000ed78 <__muldf3+0x850>
1000e68c:	00800044 	movi	r2,1
1000e690:	3881961e 	bne	r7,r2,1000ecec <__muldf3+0x7c4>
1000e694:	3027883a 	mov	r19,r6
1000e698:	0005883a 	mov	r2,zero
1000e69c:	0021883a 	mov	r16,zero
1000e6a0:	002d883a 	mov	r22,zero
1000e6a4:	1004953a 	slli	r2,r2,20
1000e6a8:	98c03fcc 	andi	r3,r19,255
1000e6ac:	04400434 	movhi	r17,16
1000e6b0:	8c7fffc4 	addi	r17,r17,-1
1000e6b4:	180697fa 	slli	r3,r3,31
1000e6b8:	8460703a 	and	r16,r16,r17
1000e6bc:	80a0b03a 	or	r16,r16,r2
1000e6c0:	80c6b03a 	or	r3,r16,r3
1000e6c4:	b005883a 	mov	r2,r22
1000e6c8:	dfc01117 	ldw	ra,68(sp)
1000e6cc:	df001017 	ldw	fp,64(sp)
1000e6d0:	ddc00f17 	ldw	r23,60(sp)
1000e6d4:	dd800e17 	ldw	r22,56(sp)
1000e6d8:	dd400d17 	ldw	r21,52(sp)
1000e6dc:	dd000c17 	ldw	r20,48(sp)
1000e6e0:	dcc00b17 	ldw	r19,44(sp)
1000e6e4:	dc800a17 	ldw	r18,40(sp)
1000e6e8:	dc400917 	ldw	r17,36(sp)
1000e6ec:	dc000817 	ldw	r16,32(sp)
1000e6f0:	dec01204 	addi	sp,sp,72
1000e6f4:	f800283a 	ret
1000e6f8:	2404b03a 	or	r2,r4,r16
1000e6fc:	202b883a 	mov	r21,r4
1000e700:	10004426 	beq	r2,zero,1000e814 <__muldf3+0x2ec>
1000e704:	80015126 	beq	r16,zero,1000ec4c <__muldf3+0x724>
1000e708:	8009883a 	mov	r4,r16
1000e70c:	d9800715 	stw	r6,28(sp)
1000e710:	d9c00215 	stw	r7,8(sp)
1000e714:	da400415 	stw	r9,16(sp)
1000e718:	000f8940 	call	1000f894 <__clzsi2>
1000e71c:	d9800717 	ldw	r6,28(sp)
1000e720:	d9c00217 	ldw	r7,8(sp)
1000e724:	da400417 	ldw	r9,16(sp)
1000e728:	113ffd44 	addi	r4,r2,-11
1000e72c:	00c00704 	movi	r3,28
1000e730:	19014216 	blt	r3,r4,1000ec3c <__muldf3+0x714>
1000e734:	00c00744 	movi	r3,29
1000e738:	15bffe04 	addi	r22,r2,-8
1000e73c:	1907c83a 	sub	r3,r3,r4
1000e740:	85a0983a 	sll	r16,r16,r22
1000e744:	a8c6d83a 	srl	r3,r21,r3
1000e748:	adac983a 	sll	r22,r21,r22
1000e74c:	1c20b03a 	or	r16,r3,r16
1000e750:	1080fcc4 	addi	r2,r2,1011
1000e754:	00a9c83a 	sub	r20,zero,r2
1000e758:	002b883a 	mov	r21,zero
1000e75c:	000b883a 	mov	r5,zero
1000e760:	003f9006 	br	1000e5a4 <__alt_data_end+0xf800e5a4>
1000e764:	3446b03a 	or	r3,r6,r17
1000e768:	1800281e 	bne	r3,zero,1000e80c <__muldf3+0x2e4>
1000e76c:	0023883a 	mov	r17,zero
1000e770:	0025883a 	mov	r18,zero
1000e774:	01c00084 	movi	r7,2
1000e778:	003f9c06 	br	1000e5ec <__alt_data_end+0xf800e5ec>
1000e77c:	3446b03a 	or	r3,r6,r17
1000e780:	18001e26 	beq	r3,zero,1000e7fc <__muldf3+0x2d4>
1000e784:	88012126 	beq	r17,zero,1000ec0c <__muldf3+0x6e4>
1000e788:	8809883a 	mov	r4,r17
1000e78c:	d9400215 	stw	r5,8(sp)
1000e790:	d9800715 	stw	r6,28(sp)
1000e794:	da400415 	stw	r9,16(sp)
1000e798:	da800315 	stw	r10,12(sp)
1000e79c:	000f8940 	call	1000f894 <__clzsi2>
1000e7a0:	d9400217 	ldw	r5,8(sp)
1000e7a4:	d9800717 	ldw	r6,28(sp)
1000e7a8:	da400417 	ldw	r9,16(sp)
1000e7ac:	da800317 	ldw	r10,12(sp)
1000e7b0:	113ffd44 	addi	r4,r2,-11
1000e7b4:	00c00704 	movi	r3,28
1000e7b8:	19011016 	blt	r3,r4,1000ebfc <__muldf3+0x6d4>
1000e7bc:	00c00744 	movi	r3,29
1000e7c0:	14bffe04 	addi	r18,r2,-8
1000e7c4:	1907c83a 	sub	r3,r3,r4
1000e7c8:	8ca2983a 	sll	r17,r17,r18
1000e7cc:	30c6d83a 	srl	r3,r6,r3
1000e7d0:	34a4983a 	sll	r18,r6,r18
1000e7d4:	1c62b03a 	or	r17,r3,r17
1000e7d8:	1080fcc4 	addi	r2,r2,1011
1000e7dc:	0085c83a 	sub	r2,zero,r2
1000e7e0:	000f883a 	mov	r7,zero
1000e7e4:	003f8106 	br	1000e5ec <__alt_data_end+0xf800e5ec>
1000e7e8:	3027883a 	mov	r19,r6
1000e7ec:	0081ffc4 	movi	r2,2047
1000e7f0:	0021883a 	mov	r16,zero
1000e7f4:	002d883a 	mov	r22,zero
1000e7f8:	003faa06 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000e7fc:	0023883a 	mov	r17,zero
1000e800:	0025883a 	mov	r18,zero
1000e804:	01c00044 	movi	r7,1
1000e808:	003f7806 	br	1000e5ec <__alt_data_end+0xf800e5ec>
1000e80c:	01c000c4 	movi	r7,3
1000e810:	003f7606 	br	1000e5ec <__alt_data_end+0xf800e5ec>
1000e814:	05400104 	movi	r21,4
1000e818:	0021883a 	mov	r16,zero
1000e81c:	002d883a 	mov	r22,zero
1000e820:	01400044 	movi	r5,1
1000e824:	003f5f06 	br	1000e5a4 <__alt_data_end+0xf800e5a4>
1000e828:	05400304 	movi	r21,12
1000e82c:	014000c4 	movi	r5,3
1000e830:	003f5c06 	br	1000e5a4 <__alt_data_end+0xf800e5a4>
1000e834:	04000434 	movhi	r16,16
1000e838:	0027883a 	mov	r19,zero
1000e83c:	843fffc4 	addi	r16,r16,-1
1000e840:	05bfffc4 	movi	r22,-1
1000e844:	0081ffc4 	movi	r2,2047
1000e848:	003f9606 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000e84c:	8023883a 	mov	r17,r16
1000e850:	b025883a 	mov	r18,r22
1000e854:	280f883a 	mov	r7,r5
1000e858:	003f8806 	br	1000e67c <__alt_data_end+0xf800e67c>
1000e85c:	8023883a 	mov	r17,r16
1000e860:	b025883a 	mov	r18,r22
1000e864:	480d883a 	mov	r6,r9
1000e868:	280f883a 	mov	r7,r5
1000e86c:	003f8306 	br	1000e67c <__alt_data_end+0xf800e67c>
1000e870:	b026d43a 	srli	r19,r22,16
1000e874:	902ed43a 	srli	r23,r18,16
1000e878:	b5bfffcc 	andi	r22,r22,65535
1000e87c:	94bfffcc 	andi	r18,r18,65535
1000e880:	b00b883a 	mov	r5,r22
1000e884:	9009883a 	mov	r4,r18
1000e888:	d8c00515 	stw	r3,20(sp)
1000e88c:	d9800715 	stw	r6,28(sp)
1000e890:	da000615 	stw	r8,24(sp)
1000e894:	0002b6c0 	call	10002b6c <__mulsi3>
1000e898:	980b883a 	mov	r5,r19
1000e89c:	9009883a 	mov	r4,r18
1000e8a0:	1029883a 	mov	r20,r2
1000e8a4:	0002b6c0 	call	10002b6c <__mulsi3>
1000e8a8:	b80b883a 	mov	r5,r23
1000e8ac:	9809883a 	mov	r4,r19
1000e8b0:	102b883a 	mov	r21,r2
1000e8b4:	0002b6c0 	call	10002b6c <__mulsi3>
1000e8b8:	b809883a 	mov	r4,r23
1000e8bc:	b00b883a 	mov	r5,r22
1000e8c0:	1039883a 	mov	fp,r2
1000e8c4:	0002b6c0 	call	10002b6c <__mulsi3>
1000e8c8:	a008d43a 	srli	r4,r20,16
1000e8cc:	1545883a 	add	r2,r2,r21
1000e8d0:	d8c00517 	ldw	r3,20(sp)
1000e8d4:	2085883a 	add	r2,r4,r2
1000e8d8:	d9800717 	ldw	r6,28(sp)
1000e8dc:	da000617 	ldw	r8,24(sp)
1000e8e0:	1540022e 	bgeu	r2,r21,1000e8ec <__muldf3+0x3c4>
1000e8e4:	01000074 	movhi	r4,1
1000e8e8:	e139883a 	add	fp,fp,r4
1000e8ec:	100e943a 	slli	r7,r2,16
1000e8f0:	1004d43a 	srli	r2,r2,16
1000e8f4:	882ad43a 	srli	r21,r17,16
1000e8f8:	a53fffcc 	andi	r20,r20,65535
1000e8fc:	8c7fffcc 	andi	r17,r17,65535
1000e900:	3d29883a 	add	r20,r7,r20
1000e904:	b00b883a 	mov	r5,r22
1000e908:	8809883a 	mov	r4,r17
1000e90c:	d8c00515 	stw	r3,20(sp)
1000e910:	d9800715 	stw	r6,28(sp)
1000e914:	da000615 	stw	r8,24(sp)
1000e918:	dd000115 	stw	r20,4(sp)
1000e91c:	d8800015 	stw	r2,0(sp)
1000e920:	0002b6c0 	call	10002b6c <__mulsi3>
1000e924:	980b883a 	mov	r5,r19
1000e928:	8809883a 	mov	r4,r17
1000e92c:	d8800215 	stw	r2,8(sp)
1000e930:	0002b6c0 	call	10002b6c <__mulsi3>
1000e934:	9809883a 	mov	r4,r19
1000e938:	a80b883a 	mov	r5,r21
1000e93c:	1029883a 	mov	r20,r2
1000e940:	0002b6c0 	call	10002b6c <__mulsi3>
1000e944:	b00b883a 	mov	r5,r22
1000e948:	a809883a 	mov	r4,r21
1000e94c:	d8800415 	stw	r2,16(sp)
1000e950:	0002b6c0 	call	10002b6c <__mulsi3>
1000e954:	d9c00217 	ldw	r7,8(sp)
1000e958:	1505883a 	add	r2,r2,r20
1000e95c:	d8c00517 	ldw	r3,20(sp)
1000e960:	3826d43a 	srli	r19,r7,16
1000e964:	d9800717 	ldw	r6,28(sp)
1000e968:	da000617 	ldw	r8,24(sp)
1000e96c:	9885883a 	add	r2,r19,r2
1000e970:	da400417 	ldw	r9,16(sp)
1000e974:	1500022e 	bgeu	r2,r20,1000e980 <__muldf3+0x458>
1000e978:	01000074 	movhi	r4,1
1000e97c:	4913883a 	add	r9,r9,r4
1000e980:	1028d43a 	srli	r20,r2,16
1000e984:	1004943a 	slli	r2,r2,16
1000e988:	802cd43a 	srli	r22,r16,16
1000e98c:	843fffcc 	andi	r16,r16,65535
1000e990:	3cffffcc 	andi	r19,r7,65535
1000e994:	9009883a 	mov	r4,r18
1000e998:	800b883a 	mov	r5,r16
1000e99c:	a269883a 	add	r20,r20,r9
1000e9a0:	d8c00515 	stw	r3,20(sp)
1000e9a4:	d9800715 	stw	r6,28(sp)
1000e9a8:	da000615 	stw	r8,24(sp)
1000e9ac:	14e7883a 	add	r19,r2,r19
1000e9b0:	0002b6c0 	call	10002b6c <__mulsi3>
1000e9b4:	9009883a 	mov	r4,r18
1000e9b8:	b00b883a 	mov	r5,r22
1000e9bc:	d8800315 	stw	r2,12(sp)
1000e9c0:	0002b6c0 	call	10002b6c <__mulsi3>
1000e9c4:	b809883a 	mov	r4,r23
1000e9c8:	b00b883a 	mov	r5,r22
1000e9cc:	d8800215 	stw	r2,8(sp)
1000e9d0:	0002b6c0 	call	10002b6c <__mulsi3>
1000e9d4:	b80b883a 	mov	r5,r23
1000e9d8:	8009883a 	mov	r4,r16
1000e9dc:	d8800415 	stw	r2,16(sp)
1000e9e0:	0002b6c0 	call	10002b6c <__mulsi3>
1000e9e4:	da800317 	ldw	r10,12(sp)
1000e9e8:	d9c00217 	ldw	r7,8(sp)
1000e9ec:	d9000017 	ldw	r4,0(sp)
1000e9f0:	502ed43a 	srli	r23,r10,16
1000e9f4:	11c5883a 	add	r2,r2,r7
1000e9f8:	24e5883a 	add	r18,r4,r19
1000e9fc:	b885883a 	add	r2,r23,r2
1000ea00:	d8c00517 	ldw	r3,20(sp)
1000ea04:	d9800717 	ldw	r6,28(sp)
1000ea08:	da000617 	ldw	r8,24(sp)
1000ea0c:	da400417 	ldw	r9,16(sp)
1000ea10:	11c0022e 	bgeu	r2,r7,1000ea1c <__muldf3+0x4f4>
1000ea14:	01000074 	movhi	r4,1
1000ea18:	4913883a 	add	r9,r9,r4
1000ea1c:	100ed43a 	srli	r7,r2,16
1000ea20:	1004943a 	slli	r2,r2,16
1000ea24:	55ffffcc 	andi	r23,r10,65535
1000ea28:	3a53883a 	add	r9,r7,r9
1000ea2c:	8809883a 	mov	r4,r17
1000ea30:	800b883a 	mov	r5,r16
1000ea34:	d8c00515 	stw	r3,20(sp)
1000ea38:	d9800715 	stw	r6,28(sp)
1000ea3c:	da000615 	stw	r8,24(sp)
1000ea40:	da400415 	stw	r9,16(sp)
1000ea44:	15ef883a 	add	r23,r2,r23
1000ea48:	0002b6c0 	call	10002b6c <__mulsi3>
1000ea4c:	8809883a 	mov	r4,r17
1000ea50:	b00b883a 	mov	r5,r22
1000ea54:	d8800215 	stw	r2,8(sp)
1000ea58:	0002b6c0 	call	10002b6c <__mulsi3>
1000ea5c:	b00b883a 	mov	r5,r22
1000ea60:	a809883a 	mov	r4,r21
1000ea64:	d8800315 	stw	r2,12(sp)
1000ea68:	0002b6c0 	call	10002b6c <__mulsi3>
1000ea6c:	8009883a 	mov	r4,r16
1000ea70:	a80b883a 	mov	r5,r21
1000ea74:	1023883a 	mov	r17,r2
1000ea78:	0002b6c0 	call	10002b6c <__mulsi3>
1000ea7c:	d9c00217 	ldw	r7,8(sp)
1000ea80:	da800317 	ldw	r10,12(sp)
1000ea84:	d8c00517 	ldw	r3,20(sp)
1000ea88:	3808d43a 	srli	r4,r7,16
1000ea8c:	1285883a 	add	r2,r2,r10
1000ea90:	d9800717 	ldw	r6,28(sp)
1000ea94:	2085883a 	add	r2,r4,r2
1000ea98:	da000617 	ldw	r8,24(sp)
1000ea9c:	da400417 	ldw	r9,16(sp)
1000eaa0:	1280022e 	bgeu	r2,r10,1000eaac <__muldf3+0x584>
1000eaa4:	01000074 	movhi	r4,1
1000eaa8:	8923883a 	add	r17,r17,r4
1000eaac:	1008943a 	slli	r4,r2,16
1000eab0:	39ffffcc 	andi	r7,r7,65535
1000eab4:	e4b9883a 	add	fp,fp,r18
1000eab8:	21cf883a 	add	r7,r4,r7
1000eabc:	e4e7803a 	cmpltu	r19,fp,r19
1000eac0:	3d0f883a 	add	r7,r7,r20
1000eac4:	bf39883a 	add	fp,r23,fp
1000eac8:	99c9883a 	add	r4,r19,r7
1000eacc:	e5ef803a 	cmpltu	r23,fp,r23
1000ead0:	490b883a 	add	r5,r9,r4
1000ead4:	1004d43a 	srli	r2,r2,16
1000ead8:	b965883a 	add	r18,r23,r5
1000eadc:	24c9803a 	cmpltu	r4,r4,r19
1000eae0:	3d29803a 	cmpltu	r20,r7,r20
1000eae4:	a128b03a 	or	r20,r20,r4
1000eae8:	95ef803a 	cmpltu	r23,r18,r23
1000eaec:	2a53803a 	cmpltu	r9,r5,r9
1000eaf0:	a0a9883a 	add	r20,r20,r2
1000eaf4:	4deeb03a 	or	r23,r9,r23
1000eaf8:	a5ef883a 	add	r23,r20,r23
1000eafc:	bc63883a 	add	r17,r23,r17
1000eb00:	e004927a 	slli	r2,fp,9
1000eb04:	d9000117 	ldw	r4,4(sp)
1000eb08:	882e927a 	slli	r23,r17,9
1000eb0c:	9022d5fa 	srli	r17,r18,23
1000eb10:	e038d5fa 	srli	fp,fp,23
1000eb14:	1104b03a 	or	r2,r2,r4
1000eb18:	9024927a 	slli	r18,r18,9
1000eb1c:	1004c03a 	cmpne	r2,r2,zero
1000eb20:	bc62b03a 	or	r17,r23,r17
1000eb24:	1738b03a 	or	fp,r2,fp
1000eb28:	8880402c 	andhi	r2,r17,256
1000eb2c:	e4a4b03a 	or	r18,fp,r18
1000eb30:	10000726 	beq	r2,zero,1000eb50 <__muldf3+0x628>
1000eb34:	9006d07a 	srli	r3,r18,1
1000eb38:	880497fa 	slli	r2,r17,31
1000eb3c:	9480004c 	andi	r18,r18,1
1000eb40:	8822d07a 	srli	r17,r17,1
1000eb44:	1ca4b03a 	or	r18,r3,r18
1000eb48:	14a4b03a 	or	r18,r2,r18
1000eb4c:	4007883a 	mov	r3,r8
1000eb50:	1880ffc4 	addi	r2,r3,1023
1000eb54:	0080460e 	bge	zero,r2,1000ec70 <__muldf3+0x748>
1000eb58:	910001cc 	andi	r4,r18,7
1000eb5c:	20000726 	beq	r4,zero,1000eb7c <__muldf3+0x654>
1000eb60:	910003cc 	andi	r4,r18,15
1000eb64:	01400104 	movi	r5,4
1000eb68:	21400426 	beq	r4,r5,1000eb7c <__muldf3+0x654>
1000eb6c:	9149883a 	add	r4,r18,r5
1000eb70:	24a5803a 	cmpltu	r18,r4,r18
1000eb74:	8ca3883a 	add	r17,r17,r18
1000eb78:	2025883a 	mov	r18,r4
1000eb7c:	8900402c 	andhi	r4,r17,256
1000eb80:	20000426 	beq	r4,zero,1000eb94 <__muldf3+0x66c>
1000eb84:	18810004 	addi	r2,r3,1024
1000eb88:	00ffc034 	movhi	r3,65280
1000eb8c:	18ffffc4 	addi	r3,r3,-1
1000eb90:	88e2703a 	and	r17,r17,r3
1000eb94:	00c1ff84 	movi	r3,2046
1000eb98:	18bf1316 	blt	r3,r2,1000e7e8 <__alt_data_end+0xf800e7e8>
1000eb9c:	882c977a 	slli	r22,r17,29
1000eba0:	9024d0fa 	srli	r18,r18,3
1000eba4:	8822927a 	slli	r17,r17,9
1000eba8:	1081ffcc 	andi	r2,r2,2047
1000ebac:	b4acb03a 	or	r22,r22,r18
1000ebb0:	8820d33a 	srli	r16,r17,12
1000ebb4:	3027883a 	mov	r19,r6
1000ebb8:	003eba06 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000ebbc:	8080022c 	andhi	r2,r16,8
1000ebc0:	10000926 	beq	r2,zero,1000ebe8 <__muldf3+0x6c0>
1000ebc4:	8880022c 	andhi	r2,r17,8
1000ebc8:	1000071e 	bne	r2,zero,1000ebe8 <__muldf3+0x6c0>
1000ebcc:	00800434 	movhi	r2,16
1000ebd0:	8c000234 	orhi	r16,r17,8
1000ebd4:	10bfffc4 	addi	r2,r2,-1
1000ebd8:	e027883a 	mov	r19,fp
1000ebdc:	80a0703a 	and	r16,r16,r2
1000ebe0:	902d883a 	mov	r22,r18
1000ebe4:	003f1706 	br	1000e844 <__alt_data_end+0xf800e844>
1000ebe8:	00800434 	movhi	r2,16
1000ebec:	84000234 	orhi	r16,r16,8
1000ebf0:	10bfffc4 	addi	r2,r2,-1
1000ebf4:	80a0703a 	and	r16,r16,r2
1000ebf8:	003f1206 	br	1000e844 <__alt_data_end+0xf800e844>
1000ebfc:	147ff604 	addi	r17,r2,-40
1000ec00:	3462983a 	sll	r17,r6,r17
1000ec04:	0025883a 	mov	r18,zero
1000ec08:	003ef306 	br	1000e7d8 <__alt_data_end+0xf800e7d8>
1000ec0c:	3009883a 	mov	r4,r6
1000ec10:	d9400215 	stw	r5,8(sp)
1000ec14:	d9800715 	stw	r6,28(sp)
1000ec18:	da400415 	stw	r9,16(sp)
1000ec1c:	da800315 	stw	r10,12(sp)
1000ec20:	000f8940 	call	1000f894 <__clzsi2>
1000ec24:	10800804 	addi	r2,r2,32
1000ec28:	da800317 	ldw	r10,12(sp)
1000ec2c:	da400417 	ldw	r9,16(sp)
1000ec30:	d9800717 	ldw	r6,28(sp)
1000ec34:	d9400217 	ldw	r5,8(sp)
1000ec38:	003edd06 	br	1000e7b0 <__alt_data_end+0xf800e7b0>
1000ec3c:	143ff604 	addi	r16,r2,-40
1000ec40:	ac20983a 	sll	r16,r21,r16
1000ec44:	002d883a 	mov	r22,zero
1000ec48:	003ec106 	br	1000e750 <__alt_data_end+0xf800e750>
1000ec4c:	d9800715 	stw	r6,28(sp)
1000ec50:	d9c00215 	stw	r7,8(sp)
1000ec54:	da400415 	stw	r9,16(sp)
1000ec58:	000f8940 	call	1000f894 <__clzsi2>
1000ec5c:	10800804 	addi	r2,r2,32
1000ec60:	da400417 	ldw	r9,16(sp)
1000ec64:	d9c00217 	ldw	r7,8(sp)
1000ec68:	d9800717 	ldw	r6,28(sp)
1000ec6c:	003eae06 	br	1000e728 <__alt_data_end+0xf800e728>
1000ec70:	00c00044 	movi	r3,1
1000ec74:	1887c83a 	sub	r3,r3,r2
1000ec78:	01000e04 	movi	r4,56
1000ec7c:	20fe8516 	blt	r4,r3,1000e694 <__alt_data_end+0xf800e694>
1000ec80:	010007c4 	movi	r4,31
1000ec84:	20c01b16 	blt	r4,r3,1000ecf4 <__muldf3+0x7cc>
1000ec88:	00800804 	movi	r2,32
1000ec8c:	10c5c83a 	sub	r2,r2,r3
1000ec90:	888a983a 	sll	r5,r17,r2
1000ec94:	90c8d83a 	srl	r4,r18,r3
1000ec98:	9084983a 	sll	r2,r18,r2
1000ec9c:	88e2d83a 	srl	r17,r17,r3
1000eca0:	2906b03a 	or	r3,r5,r4
1000eca4:	1004c03a 	cmpne	r2,r2,zero
1000eca8:	1886b03a 	or	r3,r3,r2
1000ecac:	188001cc 	andi	r2,r3,7
1000ecb0:	10000726 	beq	r2,zero,1000ecd0 <__muldf3+0x7a8>
1000ecb4:	188003cc 	andi	r2,r3,15
1000ecb8:	01000104 	movi	r4,4
1000ecbc:	11000426 	beq	r2,r4,1000ecd0 <__muldf3+0x7a8>
1000ecc0:	1805883a 	mov	r2,r3
1000ecc4:	10c00104 	addi	r3,r2,4
1000ecc8:	1885803a 	cmpltu	r2,r3,r2
1000eccc:	88a3883a 	add	r17,r17,r2
1000ecd0:	8880202c 	andhi	r2,r17,128
1000ecd4:	10001c26 	beq	r2,zero,1000ed48 <__muldf3+0x820>
1000ecd8:	3027883a 	mov	r19,r6
1000ecdc:	00800044 	movi	r2,1
1000ece0:	0021883a 	mov	r16,zero
1000ece4:	002d883a 	mov	r22,zero
1000ece8:	003e6e06 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000ecec:	4007883a 	mov	r3,r8
1000ecf0:	003f9706 	br	1000eb50 <__alt_data_end+0xf800eb50>
1000ecf4:	017ff844 	movi	r5,-31
1000ecf8:	2885c83a 	sub	r2,r5,r2
1000ecfc:	888ad83a 	srl	r5,r17,r2
1000ed00:	00800804 	movi	r2,32
1000ed04:	18801a26 	beq	r3,r2,1000ed70 <__muldf3+0x848>
1000ed08:	01001004 	movi	r4,64
1000ed0c:	20c7c83a 	sub	r3,r4,r3
1000ed10:	88e2983a 	sll	r17,r17,r3
1000ed14:	8ca4b03a 	or	r18,r17,r18
1000ed18:	9004c03a 	cmpne	r2,r18,zero
1000ed1c:	2884b03a 	or	r2,r5,r2
1000ed20:	144001cc 	andi	r17,r2,7
1000ed24:	88000d1e 	bne	r17,zero,1000ed5c <__muldf3+0x834>
1000ed28:	0021883a 	mov	r16,zero
1000ed2c:	102cd0fa 	srli	r22,r2,3
1000ed30:	3027883a 	mov	r19,r6
1000ed34:	0005883a 	mov	r2,zero
1000ed38:	b46cb03a 	or	r22,r22,r17
1000ed3c:	003e5906 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000ed40:	1007883a 	mov	r3,r2
1000ed44:	0023883a 	mov	r17,zero
1000ed48:	8820927a 	slli	r16,r17,9
1000ed4c:	1805883a 	mov	r2,r3
1000ed50:	8822977a 	slli	r17,r17,29
1000ed54:	8020d33a 	srli	r16,r16,12
1000ed58:	003ff406 	br	1000ed2c <__alt_data_end+0xf800ed2c>
1000ed5c:	10c003cc 	andi	r3,r2,15
1000ed60:	01000104 	movi	r4,4
1000ed64:	193ff626 	beq	r3,r4,1000ed40 <__alt_data_end+0xf800ed40>
1000ed68:	0023883a 	mov	r17,zero
1000ed6c:	003fd506 	br	1000ecc4 <__alt_data_end+0xf800ecc4>
1000ed70:	0023883a 	mov	r17,zero
1000ed74:	003fe706 	br	1000ed14 <__alt_data_end+0xf800ed14>
1000ed78:	00800434 	movhi	r2,16
1000ed7c:	8c000234 	orhi	r16,r17,8
1000ed80:	10bfffc4 	addi	r2,r2,-1
1000ed84:	3027883a 	mov	r19,r6
1000ed88:	80a0703a 	and	r16,r16,r2
1000ed8c:	902d883a 	mov	r22,r18
1000ed90:	003eac06 	br	1000e844 <__alt_data_end+0xf800e844>

1000ed94 <__subdf3>:
1000ed94:	02000434 	movhi	r8,16
1000ed98:	423fffc4 	addi	r8,r8,-1
1000ed9c:	defffb04 	addi	sp,sp,-20
1000eda0:	2a14703a 	and	r10,r5,r8
1000eda4:	3812d53a 	srli	r9,r7,20
1000eda8:	3a10703a 	and	r8,r7,r8
1000edac:	2006d77a 	srli	r3,r4,29
1000edb0:	3004d77a 	srli	r2,r6,29
1000edb4:	dc000015 	stw	r16,0(sp)
1000edb8:	501490fa 	slli	r10,r10,3
1000edbc:	2820d53a 	srli	r16,r5,20
1000edc0:	401090fa 	slli	r8,r8,3
1000edc4:	dc800215 	stw	r18,8(sp)
1000edc8:	dc400115 	stw	r17,4(sp)
1000edcc:	dfc00415 	stw	ra,16(sp)
1000edd0:	202290fa 	slli	r17,r4,3
1000edd4:	dcc00315 	stw	r19,12(sp)
1000edd8:	4a41ffcc 	andi	r9,r9,2047
1000eddc:	0101ffc4 	movi	r4,2047
1000ede0:	2824d7fa 	srli	r18,r5,31
1000ede4:	8401ffcc 	andi	r16,r16,2047
1000ede8:	50c6b03a 	or	r3,r10,r3
1000edec:	380ed7fa 	srli	r7,r7,31
1000edf0:	408ab03a 	or	r5,r8,r2
1000edf4:	300c90fa 	slli	r6,r6,3
1000edf8:	49009626 	beq	r9,r4,1000f054 <__subdf3+0x2c0>
1000edfc:	39c0005c 	xori	r7,r7,1
1000ee00:	8245c83a 	sub	r2,r16,r9
1000ee04:	3c807426 	beq	r7,r18,1000efd8 <__subdf3+0x244>
1000ee08:	0080af0e 	bge	zero,r2,1000f0c8 <__subdf3+0x334>
1000ee0c:	48002a1e 	bne	r9,zero,1000eeb8 <__subdf3+0x124>
1000ee10:	2988b03a 	or	r4,r5,r6
1000ee14:	20009a1e 	bne	r4,zero,1000f080 <__subdf3+0x2ec>
1000ee18:	888001cc 	andi	r2,r17,7
1000ee1c:	10000726 	beq	r2,zero,1000ee3c <__subdf3+0xa8>
1000ee20:	888003cc 	andi	r2,r17,15
1000ee24:	01000104 	movi	r4,4
1000ee28:	11000426 	beq	r2,r4,1000ee3c <__subdf3+0xa8>
1000ee2c:	890b883a 	add	r5,r17,r4
1000ee30:	2c63803a 	cmpltu	r17,r5,r17
1000ee34:	1c47883a 	add	r3,r3,r17
1000ee38:	2823883a 	mov	r17,r5
1000ee3c:	1880202c 	andhi	r2,r3,128
1000ee40:	10005926 	beq	r2,zero,1000efa8 <__subdf3+0x214>
1000ee44:	84000044 	addi	r16,r16,1
1000ee48:	0081ffc4 	movi	r2,2047
1000ee4c:	8080be26 	beq	r16,r2,1000f148 <__subdf3+0x3b4>
1000ee50:	017fe034 	movhi	r5,65408
1000ee54:	297fffc4 	addi	r5,r5,-1
1000ee58:	1946703a 	and	r3,r3,r5
1000ee5c:	1804977a 	slli	r2,r3,29
1000ee60:	1806927a 	slli	r3,r3,9
1000ee64:	8822d0fa 	srli	r17,r17,3
1000ee68:	8401ffcc 	andi	r16,r16,2047
1000ee6c:	180ad33a 	srli	r5,r3,12
1000ee70:	9100004c 	andi	r4,r18,1
1000ee74:	1444b03a 	or	r2,r2,r17
1000ee78:	80c1ffcc 	andi	r3,r16,2047
1000ee7c:	1820953a 	slli	r16,r3,20
1000ee80:	20c03fcc 	andi	r3,r4,255
1000ee84:	180897fa 	slli	r4,r3,31
1000ee88:	00c00434 	movhi	r3,16
1000ee8c:	18ffffc4 	addi	r3,r3,-1
1000ee90:	28c6703a 	and	r3,r5,r3
1000ee94:	1c06b03a 	or	r3,r3,r16
1000ee98:	1906b03a 	or	r3,r3,r4
1000ee9c:	dfc00417 	ldw	ra,16(sp)
1000eea0:	dcc00317 	ldw	r19,12(sp)
1000eea4:	dc800217 	ldw	r18,8(sp)
1000eea8:	dc400117 	ldw	r17,4(sp)
1000eeac:	dc000017 	ldw	r16,0(sp)
1000eeb0:	dec00504 	addi	sp,sp,20
1000eeb4:	f800283a 	ret
1000eeb8:	0101ffc4 	movi	r4,2047
1000eebc:	813fd626 	beq	r16,r4,1000ee18 <__alt_data_end+0xf800ee18>
1000eec0:	29402034 	orhi	r5,r5,128
1000eec4:	01000e04 	movi	r4,56
1000eec8:	2080a316 	blt	r4,r2,1000f158 <__subdf3+0x3c4>
1000eecc:	010007c4 	movi	r4,31
1000eed0:	2080c616 	blt	r4,r2,1000f1ec <__subdf3+0x458>
1000eed4:	01000804 	movi	r4,32
1000eed8:	2089c83a 	sub	r4,r4,r2
1000eedc:	2910983a 	sll	r8,r5,r4
1000eee0:	308ed83a 	srl	r7,r6,r2
1000eee4:	3108983a 	sll	r4,r6,r4
1000eee8:	2884d83a 	srl	r2,r5,r2
1000eeec:	41ccb03a 	or	r6,r8,r7
1000eef0:	2008c03a 	cmpne	r4,r4,zero
1000eef4:	310cb03a 	or	r6,r6,r4
1000eef8:	898dc83a 	sub	r6,r17,r6
1000eefc:	89a3803a 	cmpltu	r17,r17,r6
1000ef00:	1887c83a 	sub	r3,r3,r2
1000ef04:	1c47c83a 	sub	r3,r3,r17
1000ef08:	3023883a 	mov	r17,r6
1000ef0c:	1880202c 	andhi	r2,r3,128
1000ef10:	10002326 	beq	r2,zero,1000efa0 <__subdf3+0x20c>
1000ef14:	04c02034 	movhi	r19,128
1000ef18:	9cffffc4 	addi	r19,r19,-1
1000ef1c:	1ce6703a 	and	r19,r3,r19
1000ef20:	98007a26 	beq	r19,zero,1000f10c <__subdf3+0x378>
1000ef24:	9809883a 	mov	r4,r19
1000ef28:	000f8940 	call	1000f894 <__clzsi2>
1000ef2c:	113ffe04 	addi	r4,r2,-8
1000ef30:	00c007c4 	movi	r3,31
1000ef34:	19007b16 	blt	r3,r4,1000f124 <__subdf3+0x390>
1000ef38:	00800804 	movi	r2,32
1000ef3c:	1105c83a 	sub	r2,r2,r4
1000ef40:	8884d83a 	srl	r2,r17,r2
1000ef44:	9906983a 	sll	r3,r19,r4
1000ef48:	8922983a 	sll	r17,r17,r4
1000ef4c:	10c4b03a 	or	r2,r2,r3
1000ef50:	24007816 	blt	r4,r16,1000f134 <__subdf3+0x3a0>
1000ef54:	2421c83a 	sub	r16,r4,r16
1000ef58:	80c00044 	addi	r3,r16,1
1000ef5c:	010007c4 	movi	r4,31
1000ef60:	20c09516 	blt	r4,r3,1000f1b8 <__subdf3+0x424>
1000ef64:	01400804 	movi	r5,32
1000ef68:	28cbc83a 	sub	r5,r5,r3
1000ef6c:	88c8d83a 	srl	r4,r17,r3
1000ef70:	8962983a 	sll	r17,r17,r5
1000ef74:	114a983a 	sll	r5,r2,r5
1000ef78:	10c6d83a 	srl	r3,r2,r3
1000ef7c:	8804c03a 	cmpne	r2,r17,zero
1000ef80:	290ab03a 	or	r5,r5,r4
1000ef84:	28a2b03a 	or	r17,r5,r2
1000ef88:	0021883a 	mov	r16,zero
1000ef8c:	003fa206 	br	1000ee18 <__alt_data_end+0xf800ee18>
1000ef90:	2090b03a 	or	r8,r4,r2
1000ef94:	40018e26 	beq	r8,zero,1000f5d0 <__subdf3+0x83c>
1000ef98:	1007883a 	mov	r3,r2
1000ef9c:	2023883a 	mov	r17,r4
1000efa0:	888001cc 	andi	r2,r17,7
1000efa4:	103f9e1e 	bne	r2,zero,1000ee20 <__alt_data_end+0xf800ee20>
1000efa8:	1804977a 	slli	r2,r3,29
1000efac:	8822d0fa 	srli	r17,r17,3
1000efb0:	1810d0fa 	srli	r8,r3,3
1000efb4:	9100004c 	andi	r4,r18,1
1000efb8:	1444b03a 	or	r2,r2,r17
1000efbc:	00c1ffc4 	movi	r3,2047
1000efc0:	80c02826 	beq	r16,r3,1000f064 <__subdf3+0x2d0>
1000efc4:	01400434 	movhi	r5,16
1000efc8:	297fffc4 	addi	r5,r5,-1
1000efcc:	80e0703a 	and	r16,r16,r3
1000efd0:	414a703a 	and	r5,r8,r5
1000efd4:	003fa806 	br	1000ee78 <__alt_data_end+0xf800ee78>
1000efd8:	0080630e 	bge	zero,r2,1000f168 <__subdf3+0x3d4>
1000efdc:	48003026 	beq	r9,zero,1000f0a0 <__subdf3+0x30c>
1000efe0:	0101ffc4 	movi	r4,2047
1000efe4:	813f8c26 	beq	r16,r4,1000ee18 <__alt_data_end+0xf800ee18>
1000efe8:	29402034 	orhi	r5,r5,128
1000efec:	01000e04 	movi	r4,56
1000eff0:	2080a90e 	bge	r4,r2,1000f298 <__subdf3+0x504>
1000eff4:	298cb03a 	or	r6,r5,r6
1000eff8:	3012c03a 	cmpne	r9,r6,zero
1000effc:	0005883a 	mov	r2,zero
1000f000:	4c53883a 	add	r9,r9,r17
1000f004:	4c63803a 	cmpltu	r17,r9,r17
1000f008:	10c7883a 	add	r3,r2,r3
1000f00c:	88c7883a 	add	r3,r17,r3
1000f010:	4823883a 	mov	r17,r9
1000f014:	1880202c 	andhi	r2,r3,128
1000f018:	1000d026 	beq	r2,zero,1000f35c <__subdf3+0x5c8>
1000f01c:	84000044 	addi	r16,r16,1
1000f020:	0081ffc4 	movi	r2,2047
1000f024:	8080fe26 	beq	r16,r2,1000f420 <__subdf3+0x68c>
1000f028:	00bfe034 	movhi	r2,65408
1000f02c:	10bfffc4 	addi	r2,r2,-1
1000f030:	1886703a 	and	r3,r3,r2
1000f034:	880ad07a 	srli	r5,r17,1
1000f038:	180497fa 	slli	r2,r3,31
1000f03c:	8900004c 	andi	r4,r17,1
1000f040:	2922b03a 	or	r17,r5,r4
1000f044:	1806d07a 	srli	r3,r3,1
1000f048:	1462b03a 	or	r17,r2,r17
1000f04c:	3825883a 	mov	r18,r7
1000f050:	003f7106 	br	1000ee18 <__alt_data_end+0xf800ee18>
1000f054:	2984b03a 	or	r2,r5,r6
1000f058:	103f6826 	beq	r2,zero,1000edfc <__alt_data_end+0xf800edfc>
1000f05c:	39c03fcc 	andi	r7,r7,255
1000f060:	003f6706 	br	1000ee00 <__alt_data_end+0xf800ee00>
1000f064:	4086b03a 	or	r3,r8,r2
1000f068:	18015226 	beq	r3,zero,1000f5b4 <__subdf3+0x820>
1000f06c:	00c00434 	movhi	r3,16
1000f070:	41400234 	orhi	r5,r8,8
1000f074:	18ffffc4 	addi	r3,r3,-1
1000f078:	28ca703a 	and	r5,r5,r3
1000f07c:	003f7e06 	br	1000ee78 <__alt_data_end+0xf800ee78>
1000f080:	10bfffc4 	addi	r2,r2,-1
1000f084:	1000491e 	bne	r2,zero,1000f1ac <__subdf3+0x418>
1000f088:	898fc83a 	sub	r7,r17,r6
1000f08c:	89e3803a 	cmpltu	r17,r17,r7
1000f090:	1947c83a 	sub	r3,r3,r5
1000f094:	1c47c83a 	sub	r3,r3,r17
1000f098:	3823883a 	mov	r17,r7
1000f09c:	003f9b06 	br	1000ef0c <__alt_data_end+0xf800ef0c>
1000f0a0:	2988b03a 	or	r4,r5,r6
1000f0a4:	203f5c26 	beq	r4,zero,1000ee18 <__alt_data_end+0xf800ee18>
1000f0a8:	10bfffc4 	addi	r2,r2,-1
1000f0ac:	1000931e 	bne	r2,zero,1000f2fc <__subdf3+0x568>
1000f0b0:	898d883a 	add	r6,r17,r6
1000f0b4:	3463803a 	cmpltu	r17,r6,r17
1000f0b8:	1947883a 	add	r3,r3,r5
1000f0bc:	88c7883a 	add	r3,r17,r3
1000f0c0:	3023883a 	mov	r17,r6
1000f0c4:	003fd306 	br	1000f014 <__alt_data_end+0xf800f014>
1000f0c8:	1000541e 	bne	r2,zero,1000f21c <__subdf3+0x488>
1000f0cc:	80800044 	addi	r2,r16,1
1000f0d0:	1081ffcc 	andi	r2,r2,2047
1000f0d4:	01000044 	movi	r4,1
1000f0d8:	2080a20e 	bge	r4,r2,1000f364 <__subdf3+0x5d0>
1000f0dc:	8989c83a 	sub	r4,r17,r6
1000f0e0:	8905803a 	cmpltu	r2,r17,r4
1000f0e4:	1967c83a 	sub	r19,r3,r5
1000f0e8:	98a7c83a 	sub	r19,r19,r2
1000f0ec:	9880202c 	andhi	r2,r19,128
1000f0f0:	10006326 	beq	r2,zero,1000f280 <__subdf3+0x4ec>
1000f0f4:	3463c83a 	sub	r17,r6,r17
1000f0f8:	28c7c83a 	sub	r3,r5,r3
1000f0fc:	344d803a 	cmpltu	r6,r6,r17
1000f100:	19a7c83a 	sub	r19,r3,r6
1000f104:	3825883a 	mov	r18,r7
1000f108:	983f861e 	bne	r19,zero,1000ef24 <__alt_data_end+0xf800ef24>
1000f10c:	8809883a 	mov	r4,r17
1000f110:	000f8940 	call	1000f894 <__clzsi2>
1000f114:	10800804 	addi	r2,r2,32
1000f118:	113ffe04 	addi	r4,r2,-8
1000f11c:	00c007c4 	movi	r3,31
1000f120:	193f850e 	bge	r3,r4,1000ef38 <__alt_data_end+0xf800ef38>
1000f124:	10bff604 	addi	r2,r2,-40
1000f128:	8884983a 	sll	r2,r17,r2
1000f12c:	0023883a 	mov	r17,zero
1000f130:	243f880e 	bge	r4,r16,1000ef54 <__alt_data_end+0xf800ef54>
1000f134:	00ffe034 	movhi	r3,65408
1000f138:	18ffffc4 	addi	r3,r3,-1
1000f13c:	8121c83a 	sub	r16,r16,r4
1000f140:	10c6703a 	and	r3,r2,r3
1000f144:	003f3406 	br	1000ee18 <__alt_data_end+0xf800ee18>
1000f148:	9100004c 	andi	r4,r18,1
1000f14c:	000b883a 	mov	r5,zero
1000f150:	0005883a 	mov	r2,zero
1000f154:	003f4806 	br	1000ee78 <__alt_data_end+0xf800ee78>
1000f158:	298cb03a 	or	r6,r5,r6
1000f15c:	300cc03a 	cmpne	r6,r6,zero
1000f160:	0005883a 	mov	r2,zero
1000f164:	003f6406 	br	1000eef8 <__alt_data_end+0xf800eef8>
1000f168:	10009a1e 	bne	r2,zero,1000f3d4 <__subdf3+0x640>
1000f16c:	82400044 	addi	r9,r16,1
1000f170:	4881ffcc 	andi	r2,r9,2047
1000f174:	02800044 	movi	r10,1
1000f178:	5080670e 	bge	r10,r2,1000f318 <__subdf3+0x584>
1000f17c:	0081ffc4 	movi	r2,2047
1000f180:	4880af26 	beq	r9,r2,1000f440 <__subdf3+0x6ac>
1000f184:	898d883a 	add	r6,r17,r6
1000f188:	1945883a 	add	r2,r3,r5
1000f18c:	3447803a 	cmpltu	r3,r6,r17
1000f190:	1887883a 	add	r3,r3,r2
1000f194:	182297fa 	slli	r17,r3,31
1000f198:	300cd07a 	srli	r6,r6,1
1000f19c:	1806d07a 	srli	r3,r3,1
1000f1a0:	4821883a 	mov	r16,r9
1000f1a4:	89a2b03a 	or	r17,r17,r6
1000f1a8:	003f1b06 	br	1000ee18 <__alt_data_end+0xf800ee18>
1000f1ac:	0101ffc4 	movi	r4,2047
1000f1b0:	813f441e 	bne	r16,r4,1000eec4 <__alt_data_end+0xf800eec4>
1000f1b4:	003f1806 	br	1000ee18 <__alt_data_end+0xf800ee18>
1000f1b8:	843ff844 	addi	r16,r16,-31
1000f1bc:	01400804 	movi	r5,32
1000f1c0:	1408d83a 	srl	r4,r2,r16
1000f1c4:	19405026 	beq	r3,r5,1000f308 <__subdf3+0x574>
1000f1c8:	01401004 	movi	r5,64
1000f1cc:	28c7c83a 	sub	r3,r5,r3
1000f1d0:	10c4983a 	sll	r2,r2,r3
1000f1d4:	88a2b03a 	or	r17,r17,r2
1000f1d8:	8822c03a 	cmpne	r17,r17,zero
1000f1dc:	2462b03a 	or	r17,r4,r17
1000f1e0:	0007883a 	mov	r3,zero
1000f1e4:	0021883a 	mov	r16,zero
1000f1e8:	003f6d06 	br	1000efa0 <__alt_data_end+0xf800efa0>
1000f1ec:	11fff804 	addi	r7,r2,-32
1000f1f0:	01000804 	movi	r4,32
1000f1f4:	29ced83a 	srl	r7,r5,r7
1000f1f8:	11004526 	beq	r2,r4,1000f310 <__subdf3+0x57c>
1000f1fc:	01001004 	movi	r4,64
1000f200:	2089c83a 	sub	r4,r4,r2
1000f204:	2904983a 	sll	r2,r5,r4
1000f208:	118cb03a 	or	r6,r2,r6
1000f20c:	300cc03a 	cmpne	r6,r6,zero
1000f210:	398cb03a 	or	r6,r7,r6
1000f214:	0005883a 	mov	r2,zero
1000f218:	003f3706 	br	1000eef8 <__alt_data_end+0xf800eef8>
1000f21c:	80002a26 	beq	r16,zero,1000f2c8 <__subdf3+0x534>
1000f220:	0101ffc4 	movi	r4,2047
1000f224:	49006626 	beq	r9,r4,1000f3c0 <__subdf3+0x62c>
1000f228:	0085c83a 	sub	r2,zero,r2
1000f22c:	18c02034 	orhi	r3,r3,128
1000f230:	01000e04 	movi	r4,56
1000f234:	20807e16 	blt	r4,r2,1000f430 <__subdf3+0x69c>
1000f238:	010007c4 	movi	r4,31
1000f23c:	2080e716 	blt	r4,r2,1000f5dc <__subdf3+0x848>
1000f240:	01000804 	movi	r4,32
1000f244:	2089c83a 	sub	r4,r4,r2
1000f248:	1914983a 	sll	r10,r3,r4
1000f24c:	8890d83a 	srl	r8,r17,r2
1000f250:	8908983a 	sll	r4,r17,r4
1000f254:	1884d83a 	srl	r2,r3,r2
1000f258:	5222b03a 	or	r17,r10,r8
1000f25c:	2006c03a 	cmpne	r3,r4,zero
1000f260:	88e2b03a 	or	r17,r17,r3
1000f264:	3463c83a 	sub	r17,r6,r17
1000f268:	2885c83a 	sub	r2,r5,r2
1000f26c:	344d803a 	cmpltu	r6,r6,r17
1000f270:	1187c83a 	sub	r3,r2,r6
1000f274:	4821883a 	mov	r16,r9
1000f278:	3825883a 	mov	r18,r7
1000f27c:	003f2306 	br	1000ef0c <__alt_data_end+0xf800ef0c>
1000f280:	24d0b03a 	or	r8,r4,r19
1000f284:	40001b1e 	bne	r8,zero,1000f2f4 <__subdf3+0x560>
1000f288:	0005883a 	mov	r2,zero
1000f28c:	0009883a 	mov	r4,zero
1000f290:	0021883a 	mov	r16,zero
1000f294:	003f4906 	br	1000efbc <__alt_data_end+0xf800efbc>
1000f298:	010007c4 	movi	r4,31
1000f29c:	20803a16 	blt	r4,r2,1000f388 <__subdf3+0x5f4>
1000f2a0:	01000804 	movi	r4,32
1000f2a4:	2089c83a 	sub	r4,r4,r2
1000f2a8:	2912983a 	sll	r9,r5,r4
1000f2ac:	3090d83a 	srl	r8,r6,r2
1000f2b0:	3108983a 	sll	r4,r6,r4
1000f2b4:	2884d83a 	srl	r2,r5,r2
1000f2b8:	4a12b03a 	or	r9,r9,r8
1000f2bc:	2008c03a 	cmpne	r4,r4,zero
1000f2c0:	4912b03a 	or	r9,r9,r4
1000f2c4:	003f4e06 	br	1000f000 <__alt_data_end+0xf800f000>
1000f2c8:	1c48b03a 	or	r4,r3,r17
1000f2cc:	20003c26 	beq	r4,zero,1000f3c0 <__subdf3+0x62c>
1000f2d0:	0084303a 	nor	r2,zero,r2
1000f2d4:	1000381e 	bne	r2,zero,1000f3b8 <__subdf3+0x624>
1000f2d8:	3463c83a 	sub	r17,r6,r17
1000f2dc:	28c5c83a 	sub	r2,r5,r3
1000f2e0:	344d803a 	cmpltu	r6,r6,r17
1000f2e4:	1187c83a 	sub	r3,r2,r6
1000f2e8:	4821883a 	mov	r16,r9
1000f2ec:	3825883a 	mov	r18,r7
1000f2f0:	003f0606 	br	1000ef0c <__alt_data_end+0xf800ef0c>
1000f2f4:	2023883a 	mov	r17,r4
1000f2f8:	003f0906 	br	1000ef20 <__alt_data_end+0xf800ef20>
1000f2fc:	0101ffc4 	movi	r4,2047
1000f300:	813f3a1e 	bne	r16,r4,1000efec <__alt_data_end+0xf800efec>
1000f304:	003ec406 	br	1000ee18 <__alt_data_end+0xf800ee18>
1000f308:	0005883a 	mov	r2,zero
1000f30c:	003fb106 	br	1000f1d4 <__alt_data_end+0xf800f1d4>
1000f310:	0005883a 	mov	r2,zero
1000f314:	003fbc06 	br	1000f208 <__alt_data_end+0xf800f208>
1000f318:	1c44b03a 	or	r2,r3,r17
1000f31c:	80008e1e 	bne	r16,zero,1000f558 <__subdf3+0x7c4>
1000f320:	1000c826 	beq	r2,zero,1000f644 <__subdf3+0x8b0>
1000f324:	2984b03a 	or	r2,r5,r6
1000f328:	103ebb26 	beq	r2,zero,1000ee18 <__alt_data_end+0xf800ee18>
1000f32c:	8989883a 	add	r4,r17,r6
1000f330:	1945883a 	add	r2,r3,r5
1000f334:	2447803a 	cmpltu	r3,r4,r17
1000f338:	1887883a 	add	r3,r3,r2
1000f33c:	1880202c 	andhi	r2,r3,128
1000f340:	2023883a 	mov	r17,r4
1000f344:	103f1626 	beq	r2,zero,1000efa0 <__alt_data_end+0xf800efa0>
1000f348:	00bfe034 	movhi	r2,65408
1000f34c:	10bfffc4 	addi	r2,r2,-1
1000f350:	5021883a 	mov	r16,r10
1000f354:	1886703a 	and	r3,r3,r2
1000f358:	003eaf06 	br	1000ee18 <__alt_data_end+0xf800ee18>
1000f35c:	3825883a 	mov	r18,r7
1000f360:	003f0f06 	br	1000efa0 <__alt_data_end+0xf800efa0>
1000f364:	1c44b03a 	or	r2,r3,r17
1000f368:	8000251e 	bne	r16,zero,1000f400 <__subdf3+0x66c>
1000f36c:	1000661e 	bne	r2,zero,1000f508 <__subdf3+0x774>
1000f370:	2990b03a 	or	r8,r5,r6
1000f374:	40009626 	beq	r8,zero,1000f5d0 <__subdf3+0x83c>
1000f378:	2807883a 	mov	r3,r5
1000f37c:	3023883a 	mov	r17,r6
1000f380:	3825883a 	mov	r18,r7
1000f384:	003ea406 	br	1000ee18 <__alt_data_end+0xf800ee18>
1000f388:	127ff804 	addi	r9,r2,-32
1000f38c:	01000804 	movi	r4,32
1000f390:	2a52d83a 	srl	r9,r5,r9
1000f394:	11008c26 	beq	r2,r4,1000f5c8 <__subdf3+0x834>
1000f398:	01001004 	movi	r4,64
1000f39c:	2085c83a 	sub	r2,r4,r2
1000f3a0:	2884983a 	sll	r2,r5,r2
1000f3a4:	118cb03a 	or	r6,r2,r6
1000f3a8:	300cc03a 	cmpne	r6,r6,zero
1000f3ac:	4992b03a 	or	r9,r9,r6
1000f3b0:	0005883a 	mov	r2,zero
1000f3b4:	003f1206 	br	1000f000 <__alt_data_end+0xf800f000>
1000f3b8:	0101ffc4 	movi	r4,2047
1000f3bc:	493f9c1e 	bne	r9,r4,1000f230 <__alt_data_end+0xf800f230>
1000f3c0:	2807883a 	mov	r3,r5
1000f3c4:	3023883a 	mov	r17,r6
1000f3c8:	4821883a 	mov	r16,r9
1000f3cc:	3825883a 	mov	r18,r7
1000f3d0:	003e9106 	br	1000ee18 <__alt_data_end+0xf800ee18>
1000f3d4:	80001f1e 	bne	r16,zero,1000f454 <__subdf3+0x6c0>
1000f3d8:	1c48b03a 	or	r4,r3,r17
1000f3dc:	20005a26 	beq	r4,zero,1000f548 <__subdf3+0x7b4>
1000f3e0:	0084303a 	nor	r2,zero,r2
1000f3e4:	1000561e 	bne	r2,zero,1000f540 <__subdf3+0x7ac>
1000f3e8:	89a3883a 	add	r17,r17,r6
1000f3ec:	1945883a 	add	r2,r3,r5
1000f3f0:	898d803a 	cmpltu	r6,r17,r6
1000f3f4:	3087883a 	add	r3,r6,r2
1000f3f8:	4821883a 	mov	r16,r9
1000f3fc:	003f0506 	br	1000f014 <__alt_data_end+0xf800f014>
1000f400:	10002b1e 	bne	r2,zero,1000f4b0 <__subdf3+0x71c>
1000f404:	2984b03a 	or	r2,r5,r6
1000f408:	10008026 	beq	r2,zero,1000f60c <__subdf3+0x878>
1000f40c:	2807883a 	mov	r3,r5
1000f410:	3023883a 	mov	r17,r6
1000f414:	3825883a 	mov	r18,r7
1000f418:	0401ffc4 	movi	r16,2047
1000f41c:	003e7e06 	br	1000ee18 <__alt_data_end+0xf800ee18>
1000f420:	3809883a 	mov	r4,r7
1000f424:	0011883a 	mov	r8,zero
1000f428:	0005883a 	mov	r2,zero
1000f42c:	003ee306 	br	1000efbc <__alt_data_end+0xf800efbc>
1000f430:	1c62b03a 	or	r17,r3,r17
1000f434:	8822c03a 	cmpne	r17,r17,zero
1000f438:	0005883a 	mov	r2,zero
1000f43c:	003f8906 	br	1000f264 <__alt_data_end+0xf800f264>
1000f440:	3809883a 	mov	r4,r7
1000f444:	4821883a 	mov	r16,r9
1000f448:	0011883a 	mov	r8,zero
1000f44c:	0005883a 	mov	r2,zero
1000f450:	003eda06 	br	1000efbc <__alt_data_end+0xf800efbc>
1000f454:	0101ffc4 	movi	r4,2047
1000f458:	49003b26 	beq	r9,r4,1000f548 <__subdf3+0x7b4>
1000f45c:	0085c83a 	sub	r2,zero,r2
1000f460:	18c02034 	orhi	r3,r3,128
1000f464:	01000e04 	movi	r4,56
1000f468:	20806e16 	blt	r4,r2,1000f624 <__subdf3+0x890>
1000f46c:	010007c4 	movi	r4,31
1000f470:	20807716 	blt	r4,r2,1000f650 <__subdf3+0x8bc>
1000f474:	01000804 	movi	r4,32
1000f478:	2089c83a 	sub	r4,r4,r2
1000f47c:	1914983a 	sll	r10,r3,r4
1000f480:	8890d83a 	srl	r8,r17,r2
1000f484:	8908983a 	sll	r4,r17,r4
1000f488:	1884d83a 	srl	r2,r3,r2
1000f48c:	5222b03a 	or	r17,r10,r8
1000f490:	2006c03a 	cmpne	r3,r4,zero
1000f494:	88e2b03a 	or	r17,r17,r3
1000f498:	89a3883a 	add	r17,r17,r6
1000f49c:	1145883a 	add	r2,r2,r5
1000f4a0:	898d803a 	cmpltu	r6,r17,r6
1000f4a4:	3087883a 	add	r3,r6,r2
1000f4a8:	4821883a 	mov	r16,r9
1000f4ac:	003ed906 	br	1000f014 <__alt_data_end+0xf800f014>
1000f4b0:	2984b03a 	or	r2,r5,r6
1000f4b4:	10004226 	beq	r2,zero,1000f5c0 <__subdf3+0x82c>
1000f4b8:	1808d0fa 	srli	r4,r3,3
1000f4bc:	8822d0fa 	srli	r17,r17,3
1000f4c0:	1806977a 	slli	r3,r3,29
1000f4c4:	2080022c 	andhi	r2,r4,8
1000f4c8:	1c62b03a 	or	r17,r3,r17
1000f4cc:	10000826 	beq	r2,zero,1000f4f0 <__subdf3+0x75c>
1000f4d0:	2812d0fa 	srli	r9,r5,3
1000f4d4:	4880022c 	andhi	r2,r9,8
1000f4d8:	1000051e 	bne	r2,zero,1000f4f0 <__subdf3+0x75c>
1000f4dc:	300cd0fa 	srli	r6,r6,3
1000f4e0:	2804977a 	slli	r2,r5,29
1000f4e4:	4809883a 	mov	r4,r9
1000f4e8:	3825883a 	mov	r18,r7
1000f4ec:	11a2b03a 	or	r17,r2,r6
1000f4f0:	8806d77a 	srli	r3,r17,29
1000f4f4:	200890fa 	slli	r4,r4,3
1000f4f8:	882290fa 	slli	r17,r17,3
1000f4fc:	0401ffc4 	movi	r16,2047
1000f500:	1906b03a 	or	r3,r3,r4
1000f504:	003e4406 	br	1000ee18 <__alt_data_end+0xf800ee18>
1000f508:	2984b03a 	or	r2,r5,r6
1000f50c:	103e4226 	beq	r2,zero,1000ee18 <__alt_data_end+0xf800ee18>
1000f510:	8989c83a 	sub	r4,r17,r6
1000f514:	8911803a 	cmpltu	r8,r17,r4
1000f518:	1945c83a 	sub	r2,r3,r5
1000f51c:	1205c83a 	sub	r2,r2,r8
1000f520:	1200202c 	andhi	r8,r2,128
1000f524:	403e9a26 	beq	r8,zero,1000ef90 <__alt_data_end+0xf800ef90>
1000f528:	3463c83a 	sub	r17,r6,r17
1000f52c:	28c5c83a 	sub	r2,r5,r3
1000f530:	344d803a 	cmpltu	r6,r6,r17
1000f534:	1187c83a 	sub	r3,r2,r6
1000f538:	3825883a 	mov	r18,r7
1000f53c:	003e3606 	br	1000ee18 <__alt_data_end+0xf800ee18>
1000f540:	0101ffc4 	movi	r4,2047
1000f544:	493fc71e 	bne	r9,r4,1000f464 <__alt_data_end+0xf800f464>
1000f548:	2807883a 	mov	r3,r5
1000f54c:	3023883a 	mov	r17,r6
1000f550:	4821883a 	mov	r16,r9
1000f554:	003e3006 	br	1000ee18 <__alt_data_end+0xf800ee18>
1000f558:	10003626 	beq	r2,zero,1000f634 <__subdf3+0x8a0>
1000f55c:	2984b03a 	or	r2,r5,r6
1000f560:	10001726 	beq	r2,zero,1000f5c0 <__subdf3+0x82c>
1000f564:	1808d0fa 	srli	r4,r3,3
1000f568:	8822d0fa 	srli	r17,r17,3
1000f56c:	1806977a 	slli	r3,r3,29
1000f570:	2080022c 	andhi	r2,r4,8
1000f574:	1c62b03a 	or	r17,r3,r17
1000f578:	10000726 	beq	r2,zero,1000f598 <__subdf3+0x804>
1000f57c:	2812d0fa 	srli	r9,r5,3
1000f580:	4880022c 	andhi	r2,r9,8
1000f584:	1000041e 	bne	r2,zero,1000f598 <__subdf3+0x804>
1000f588:	300cd0fa 	srli	r6,r6,3
1000f58c:	2804977a 	slli	r2,r5,29
1000f590:	4809883a 	mov	r4,r9
1000f594:	11a2b03a 	or	r17,r2,r6
1000f598:	8806d77a 	srli	r3,r17,29
1000f59c:	200890fa 	slli	r4,r4,3
1000f5a0:	882290fa 	slli	r17,r17,3
1000f5a4:	3825883a 	mov	r18,r7
1000f5a8:	1906b03a 	or	r3,r3,r4
1000f5ac:	0401ffc4 	movi	r16,2047
1000f5b0:	003e1906 	br	1000ee18 <__alt_data_end+0xf800ee18>
1000f5b4:	000b883a 	mov	r5,zero
1000f5b8:	0005883a 	mov	r2,zero
1000f5bc:	003e2e06 	br	1000ee78 <__alt_data_end+0xf800ee78>
1000f5c0:	0401ffc4 	movi	r16,2047
1000f5c4:	003e1406 	br	1000ee18 <__alt_data_end+0xf800ee18>
1000f5c8:	0005883a 	mov	r2,zero
1000f5cc:	003f7506 	br	1000f3a4 <__alt_data_end+0xf800f3a4>
1000f5d0:	0005883a 	mov	r2,zero
1000f5d4:	0009883a 	mov	r4,zero
1000f5d8:	003e7806 	br	1000efbc <__alt_data_end+0xf800efbc>
1000f5dc:	123ff804 	addi	r8,r2,-32
1000f5e0:	01000804 	movi	r4,32
1000f5e4:	1a10d83a 	srl	r8,r3,r8
1000f5e8:	11002526 	beq	r2,r4,1000f680 <__subdf3+0x8ec>
1000f5ec:	01001004 	movi	r4,64
1000f5f0:	2085c83a 	sub	r2,r4,r2
1000f5f4:	1884983a 	sll	r2,r3,r2
1000f5f8:	1444b03a 	or	r2,r2,r17
1000f5fc:	1004c03a 	cmpne	r2,r2,zero
1000f600:	40a2b03a 	or	r17,r8,r2
1000f604:	0005883a 	mov	r2,zero
1000f608:	003f1606 	br	1000f264 <__alt_data_end+0xf800f264>
1000f60c:	02000434 	movhi	r8,16
1000f610:	0009883a 	mov	r4,zero
1000f614:	423fffc4 	addi	r8,r8,-1
1000f618:	00bfffc4 	movi	r2,-1
1000f61c:	0401ffc4 	movi	r16,2047
1000f620:	003e6606 	br	1000efbc <__alt_data_end+0xf800efbc>
1000f624:	1c62b03a 	or	r17,r3,r17
1000f628:	8822c03a 	cmpne	r17,r17,zero
1000f62c:	0005883a 	mov	r2,zero
1000f630:	003f9906 	br	1000f498 <__alt_data_end+0xf800f498>
1000f634:	2807883a 	mov	r3,r5
1000f638:	3023883a 	mov	r17,r6
1000f63c:	0401ffc4 	movi	r16,2047
1000f640:	003df506 	br	1000ee18 <__alt_data_end+0xf800ee18>
1000f644:	2807883a 	mov	r3,r5
1000f648:	3023883a 	mov	r17,r6
1000f64c:	003df206 	br	1000ee18 <__alt_data_end+0xf800ee18>
1000f650:	123ff804 	addi	r8,r2,-32
1000f654:	01000804 	movi	r4,32
1000f658:	1a10d83a 	srl	r8,r3,r8
1000f65c:	11000a26 	beq	r2,r4,1000f688 <__subdf3+0x8f4>
1000f660:	01001004 	movi	r4,64
1000f664:	2085c83a 	sub	r2,r4,r2
1000f668:	1884983a 	sll	r2,r3,r2
1000f66c:	1444b03a 	or	r2,r2,r17
1000f670:	1004c03a 	cmpne	r2,r2,zero
1000f674:	40a2b03a 	or	r17,r8,r2
1000f678:	0005883a 	mov	r2,zero
1000f67c:	003f8606 	br	1000f498 <__alt_data_end+0xf800f498>
1000f680:	0005883a 	mov	r2,zero
1000f684:	003fdc06 	br	1000f5f8 <__alt_data_end+0xf800f5f8>
1000f688:	0005883a 	mov	r2,zero
1000f68c:	003ff706 	br	1000f66c <__alt_data_end+0xf800f66c>

1000f690 <__fixdfsi>:
1000f690:	280cd53a 	srli	r6,r5,20
1000f694:	00c00434 	movhi	r3,16
1000f698:	18ffffc4 	addi	r3,r3,-1
1000f69c:	3181ffcc 	andi	r6,r6,2047
1000f6a0:	01c0ff84 	movi	r7,1022
1000f6a4:	28c6703a 	and	r3,r5,r3
1000f6a8:	280ad7fa 	srli	r5,r5,31
1000f6ac:	3980120e 	bge	r7,r6,1000f6f8 <__fixdfsi+0x68>
1000f6b0:	00810744 	movi	r2,1053
1000f6b4:	11800c16 	blt	r2,r6,1000f6e8 <__fixdfsi+0x58>
1000f6b8:	00810cc4 	movi	r2,1075
1000f6bc:	1185c83a 	sub	r2,r2,r6
1000f6c0:	01c007c4 	movi	r7,31
1000f6c4:	18c00434 	orhi	r3,r3,16
1000f6c8:	38800d16 	blt	r7,r2,1000f700 <__fixdfsi+0x70>
1000f6cc:	31befb44 	addi	r6,r6,-1043
1000f6d0:	2084d83a 	srl	r2,r4,r2
1000f6d4:	1986983a 	sll	r3,r3,r6
1000f6d8:	1884b03a 	or	r2,r3,r2
1000f6dc:	28000726 	beq	r5,zero,1000f6fc <__fixdfsi+0x6c>
1000f6e0:	0085c83a 	sub	r2,zero,r2
1000f6e4:	f800283a 	ret
1000f6e8:	00a00034 	movhi	r2,32768
1000f6ec:	10bfffc4 	addi	r2,r2,-1
1000f6f0:	2885883a 	add	r2,r5,r2
1000f6f4:	f800283a 	ret
1000f6f8:	0005883a 	mov	r2,zero
1000f6fc:	f800283a 	ret
1000f700:	008104c4 	movi	r2,1043
1000f704:	1185c83a 	sub	r2,r2,r6
1000f708:	1884d83a 	srl	r2,r3,r2
1000f70c:	003ff306 	br	1000f6dc <__alt_data_end+0xf800f6dc>

1000f710 <__floatsidf>:
1000f710:	defffd04 	addi	sp,sp,-12
1000f714:	dfc00215 	stw	ra,8(sp)
1000f718:	dc400115 	stw	r17,4(sp)
1000f71c:	dc000015 	stw	r16,0(sp)
1000f720:	20002b26 	beq	r4,zero,1000f7d0 <__floatsidf+0xc0>
1000f724:	2023883a 	mov	r17,r4
1000f728:	2020d7fa 	srli	r16,r4,31
1000f72c:	20002d16 	blt	r4,zero,1000f7e4 <__floatsidf+0xd4>
1000f730:	8809883a 	mov	r4,r17
1000f734:	000f8940 	call	1000f894 <__clzsi2>
1000f738:	01410784 	movi	r5,1054
1000f73c:	288bc83a 	sub	r5,r5,r2
1000f740:	01010cc4 	movi	r4,1075
1000f744:	2149c83a 	sub	r4,r4,r5
1000f748:	00c007c4 	movi	r3,31
1000f74c:	1900160e 	bge	r3,r4,1000f7a8 <__floatsidf+0x98>
1000f750:	00c104c4 	movi	r3,1043
1000f754:	1947c83a 	sub	r3,r3,r5
1000f758:	88c6983a 	sll	r3,r17,r3
1000f75c:	00800434 	movhi	r2,16
1000f760:	10bfffc4 	addi	r2,r2,-1
1000f764:	1886703a 	and	r3,r3,r2
1000f768:	2941ffcc 	andi	r5,r5,2047
1000f76c:	800d883a 	mov	r6,r16
1000f770:	0005883a 	mov	r2,zero
1000f774:	280a953a 	slli	r5,r5,20
1000f778:	31803fcc 	andi	r6,r6,255
1000f77c:	01000434 	movhi	r4,16
1000f780:	300c97fa 	slli	r6,r6,31
1000f784:	213fffc4 	addi	r4,r4,-1
1000f788:	1906703a 	and	r3,r3,r4
1000f78c:	1946b03a 	or	r3,r3,r5
1000f790:	1986b03a 	or	r3,r3,r6
1000f794:	dfc00217 	ldw	ra,8(sp)
1000f798:	dc400117 	ldw	r17,4(sp)
1000f79c:	dc000017 	ldw	r16,0(sp)
1000f7a0:	dec00304 	addi	sp,sp,12
1000f7a4:	f800283a 	ret
1000f7a8:	00c002c4 	movi	r3,11
1000f7ac:	1887c83a 	sub	r3,r3,r2
1000f7b0:	88c6d83a 	srl	r3,r17,r3
1000f7b4:	8904983a 	sll	r2,r17,r4
1000f7b8:	01000434 	movhi	r4,16
1000f7bc:	213fffc4 	addi	r4,r4,-1
1000f7c0:	2941ffcc 	andi	r5,r5,2047
1000f7c4:	1906703a 	and	r3,r3,r4
1000f7c8:	800d883a 	mov	r6,r16
1000f7cc:	003fe906 	br	1000f774 <__alt_data_end+0xf800f774>
1000f7d0:	000d883a 	mov	r6,zero
1000f7d4:	000b883a 	mov	r5,zero
1000f7d8:	0007883a 	mov	r3,zero
1000f7dc:	0005883a 	mov	r2,zero
1000f7e0:	003fe406 	br	1000f774 <__alt_data_end+0xf800f774>
1000f7e4:	0123c83a 	sub	r17,zero,r4
1000f7e8:	003fd106 	br	1000f730 <__alt_data_end+0xf800f730>

1000f7ec <__floatunsidf>:
1000f7ec:	defffe04 	addi	sp,sp,-8
1000f7f0:	dc000015 	stw	r16,0(sp)
1000f7f4:	dfc00115 	stw	ra,4(sp)
1000f7f8:	2021883a 	mov	r16,r4
1000f7fc:	20002226 	beq	r4,zero,1000f888 <__floatunsidf+0x9c>
1000f800:	000f8940 	call	1000f894 <__clzsi2>
1000f804:	01010784 	movi	r4,1054
1000f808:	2089c83a 	sub	r4,r4,r2
1000f80c:	01810cc4 	movi	r6,1075
1000f810:	310dc83a 	sub	r6,r6,r4
1000f814:	00c007c4 	movi	r3,31
1000f818:	1980120e 	bge	r3,r6,1000f864 <__floatunsidf+0x78>
1000f81c:	00c104c4 	movi	r3,1043
1000f820:	1907c83a 	sub	r3,r3,r4
1000f824:	80ca983a 	sll	r5,r16,r3
1000f828:	00800434 	movhi	r2,16
1000f82c:	10bfffc4 	addi	r2,r2,-1
1000f830:	2101ffcc 	andi	r4,r4,2047
1000f834:	0021883a 	mov	r16,zero
1000f838:	288a703a 	and	r5,r5,r2
1000f83c:	2008953a 	slli	r4,r4,20
1000f840:	00c00434 	movhi	r3,16
1000f844:	18ffffc4 	addi	r3,r3,-1
1000f848:	28c6703a 	and	r3,r5,r3
1000f84c:	8005883a 	mov	r2,r16
1000f850:	1906b03a 	or	r3,r3,r4
1000f854:	dfc00117 	ldw	ra,4(sp)
1000f858:	dc000017 	ldw	r16,0(sp)
1000f85c:	dec00204 	addi	sp,sp,8
1000f860:	f800283a 	ret
1000f864:	00c002c4 	movi	r3,11
1000f868:	188bc83a 	sub	r5,r3,r2
1000f86c:	814ad83a 	srl	r5,r16,r5
1000f870:	00c00434 	movhi	r3,16
1000f874:	18ffffc4 	addi	r3,r3,-1
1000f878:	81a0983a 	sll	r16,r16,r6
1000f87c:	2101ffcc 	andi	r4,r4,2047
1000f880:	28ca703a 	and	r5,r5,r3
1000f884:	003fed06 	br	1000f83c <__alt_data_end+0xf800f83c>
1000f888:	0009883a 	mov	r4,zero
1000f88c:	000b883a 	mov	r5,zero
1000f890:	003fea06 	br	1000f83c <__alt_data_end+0xf800f83c>

1000f894 <__clzsi2>:
1000f894:	00bfffd4 	movui	r2,65535
1000f898:	11000536 	bltu	r2,r4,1000f8b0 <__clzsi2+0x1c>
1000f89c:	00803fc4 	movi	r2,255
1000f8a0:	11000f36 	bltu	r2,r4,1000f8e0 <__clzsi2+0x4c>
1000f8a4:	00800804 	movi	r2,32
1000f8a8:	0007883a 	mov	r3,zero
1000f8ac:	00000506 	br	1000f8c4 <__clzsi2+0x30>
1000f8b0:	00804034 	movhi	r2,256
1000f8b4:	10bfffc4 	addi	r2,r2,-1
1000f8b8:	11000c2e 	bgeu	r2,r4,1000f8ec <__clzsi2+0x58>
1000f8bc:	00800204 	movi	r2,8
1000f8c0:	00c00604 	movi	r3,24
1000f8c4:	20c8d83a 	srl	r4,r4,r3
1000f8c8:	00c40074 	movhi	r3,4097
1000f8cc:	18caa704 	addi	r3,r3,10908
1000f8d0:	1909883a 	add	r4,r3,r4
1000f8d4:	20c00003 	ldbu	r3,0(r4)
1000f8d8:	10c5c83a 	sub	r2,r2,r3
1000f8dc:	f800283a 	ret
1000f8e0:	00800604 	movi	r2,24
1000f8e4:	00c00204 	movi	r3,8
1000f8e8:	003ff606 	br	1000f8c4 <__alt_data_end+0xf800f8c4>
1000f8ec:	00800404 	movi	r2,16
1000f8f0:	1007883a 	mov	r3,r2
1000f8f4:	003ff306 	br	1000f8c4 <__alt_data_end+0xf800f8c4>

1000f8f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f8f8:	defffe04 	addi	sp,sp,-8
1000f8fc:	dfc00115 	stw	ra,4(sp)
1000f900:	df000015 	stw	fp,0(sp)
1000f904:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f908:	d0a00b17 	ldw	r2,-32724(gp)
1000f90c:	10000326 	beq	r2,zero,1000f91c <alt_get_errno+0x24>
1000f910:	d0a00b17 	ldw	r2,-32724(gp)
1000f914:	103ee83a 	callr	r2
1000f918:	00000106 	br	1000f920 <alt_get_errno+0x28>
1000f91c:	d0a6d904 	addi	r2,gp,-25756
}
1000f920:	e037883a 	mov	sp,fp
1000f924:	dfc00117 	ldw	ra,4(sp)
1000f928:	df000017 	ldw	fp,0(sp)
1000f92c:	dec00204 	addi	sp,sp,8
1000f930:	f800283a 	ret

1000f934 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000f934:	defffb04 	addi	sp,sp,-20
1000f938:	dfc00415 	stw	ra,16(sp)
1000f93c:	df000315 	stw	fp,12(sp)
1000f940:	df000304 	addi	fp,sp,12
1000f944:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000f948:	e0bfff17 	ldw	r2,-4(fp)
1000f94c:	10000816 	blt	r2,zero,1000f970 <close+0x3c>
1000f950:	01400304 	movi	r5,12
1000f954:	e13fff17 	ldw	r4,-4(fp)
1000f958:	0002b6c0 	call	10002b6c <__mulsi3>
1000f95c:	1007883a 	mov	r3,r2
1000f960:	00840074 	movhi	r2,4097
1000f964:	108d2704 	addi	r2,r2,13468
1000f968:	1885883a 	add	r2,r3,r2
1000f96c:	00000106 	br	1000f974 <close+0x40>
1000f970:	0005883a 	mov	r2,zero
1000f974:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000f978:	e0bffd17 	ldw	r2,-12(fp)
1000f97c:	10001926 	beq	r2,zero,1000f9e4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000f980:	e0bffd17 	ldw	r2,-12(fp)
1000f984:	10800017 	ldw	r2,0(r2)
1000f988:	10800417 	ldw	r2,16(r2)
1000f98c:	10000626 	beq	r2,zero,1000f9a8 <close+0x74>
1000f990:	e0bffd17 	ldw	r2,-12(fp)
1000f994:	10800017 	ldw	r2,0(r2)
1000f998:	10800417 	ldw	r2,16(r2)
1000f99c:	e13ffd17 	ldw	r4,-12(fp)
1000f9a0:	103ee83a 	callr	r2
1000f9a4:	00000106 	br	1000f9ac <close+0x78>
1000f9a8:	0005883a 	mov	r2,zero
1000f9ac:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000f9b0:	e13fff17 	ldw	r4,-4(fp)
1000f9b4:	001001c0 	call	1001001c <alt_release_fd>
    if (rval < 0)
1000f9b8:	e0bffe17 	ldw	r2,-8(fp)
1000f9bc:	1000070e 	bge	r2,zero,1000f9dc <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000f9c0:	000f8f80 	call	1000f8f8 <alt_get_errno>
1000f9c4:	1007883a 	mov	r3,r2
1000f9c8:	e0bffe17 	ldw	r2,-8(fp)
1000f9cc:	0085c83a 	sub	r2,zero,r2
1000f9d0:	18800015 	stw	r2,0(r3)
      return -1;
1000f9d4:	00bfffc4 	movi	r2,-1
1000f9d8:	00000706 	br	1000f9f8 <close+0xc4>
    }
    return 0;
1000f9dc:	0005883a 	mov	r2,zero
1000f9e0:	00000506 	br	1000f9f8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f9e4:	000f8f80 	call	1000f8f8 <alt_get_errno>
1000f9e8:	1007883a 	mov	r3,r2
1000f9ec:	00801444 	movi	r2,81
1000f9f0:	18800015 	stw	r2,0(r3)
    return -1;
1000f9f4:	00bfffc4 	movi	r2,-1
  }
}
1000f9f8:	e037883a 	mov	sp,fp
1000f9fc:	dfc00117 	ldw	ra,4(sp)
1000fa00:	df000017 	ldw	fp,0(sp)
1000fa04:	dec00204 	addi	sp,sp,8
1000fa08:	f800283a 	ret

1000fa0c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000fa0c:	defffc04 	addi	sp,sp,-16
1000fa10:	df000315 	stw	fp,12(sp)
1000fa14:	df000304 	addi	fp,sp,12
1000fa18:	e13ffd15 	stw	r4,-12(fp)
1000fa1c:	e17ffe15 	stw	r5,-8(fp)
1000fa20:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000fa24:	e0bfff17 	ldw	r2,-4(fp)
}
1000fa28:	e037883a 	mov	sp,fp
1000fa2c:	df000017 	ldw	fp,0(sp)
1000fa30:	dec00104 	addi	sp,sp,4
1000fa34:	f800283a 	ret

1000fa38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fa38:	defffe04 	addi	sp,sp,-8
1000fa3c:	dfc00115 	stw	ra,4(sp)
1000fa40:	df000015 	stw	fp,0(sp)
1000fa44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fa48:	d0a00b17 	ldw	r2,-32724(gp)
1000fa4c:	10000326 	beq	r2,zero,1000fa5c <alt_get_errno+0x24>
1000fa50:	d0a00b17 	ldw	r2,-32724(gp)
1000fa54:	103ee83a 	callr	r2
1000fa58:	00000106 	br	1000fa60 <alt_get_errno+0x28>
1000fa5c:	d0a6d904 	addi	r2,gp,-25756
}
1000fa60:	e037883a 	mov	sp,fp
1000fa64:	dfc00117 	ldw	ra,4(sp)
1000fa68:	df000017 	ldw	fp,0(sp)
1000fa6c:	dec00204 	addi	sp,sp,8
1000fa70:	f800283a 	ret

1000fa74 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000fa74:	defffb04 	addi	sp,sp,-20
1000fa78:	dfc00415 	stw	ra,16(sp)
1000fa7c:	df000315 	stw	fp,12(sp)
1000fa80:	df000304 	addi	fp,sp,12
1000fa84:	e13ffe15 	stw	r4,-8(fp)
1000fa88:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fa8c:	e0bffe17 	ldw	r2,-8(fp)
1000fa90:	10000816 	blt	r2,zero,1000fab4 <fstat+0x40>
1000fa94:	01400304 	movi	r5,12
1000fa98:	e13ffe17 	ldw	r4,-8(fp)
1000fa9c:	0002b6c0 	call	10002b6c <__mulsi3>
1000faa0:	1007883a 	mov	r3,r2
1000faa4:	00840074 	movhi	r2,4097
1000faa8:	108d2704 	addi	r2,r2,13468
1000faac:	1885883a 	add	r2,r3,r2
1000fab0:	00000106 	br	1000fab8 <fstat+0x44>
1000fab4:	0005883a 	mov	r2,zero
1000fab8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000fabc:	e0bffd17 	ldw	r2,-12(fp)
1000fac0:	10001026 	beq	r2,zero,1000fb04 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000fac4:	e0bffd17 	ldw	r2,-12(fp)
1000fac8:	10800017 	ldw	r2,0(r2)
1000facc:	10800817 	ldw	r2,32(r2)
1000fad0:	10000726 	beq	r2,zero,1000faf0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000fad4:	e0bffd17 	ldw	r2,-12(fp)
1000fad8:	10800017 	ldw	r2,0(r2)
1000fadc:	10800817 	ldw	r2,32(r2)
1000fae0:	e17fff17 	ldw	r5,-4(fp)
1000fae4:	e13ffd17 	ldw	r4,-12(fp)
1000fae8:	103ee83a 	callr	r2
1000faec:	00000a06 	br	1000fb18 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000faf0:	e0bfff17 	ldw	r2,-4(fp)
1000faf4:	00c80004 	movi	r3,8192
1000faf8:	10c00115 	stw	r3,4(r2)
      return 0;
1000fafc:	0005883a 	mov	r2,zero
1000fb00:	00000506 	br	1000fb18 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000fb04:	000fa380 	call	1000fa38 <alt_get_errno>
1000fb08:	1007883a 	mov	r3,r2
1000fb0c:	00801444 	movi	r2,81
1000fb10:	18800015 	stw	r2,0(r3)
    return -1;
1000fb14:	00bfffc4 	movi	r2,-1
  }
}
1000fb18:	e037883a 	mov	sp,fp
1000fb1c:	dfc00117 	ldw	ra,4(sp)
1000fb20:	df000017 	ldw	fp,0(sp)
1000fb24:	dec00204 	addi	sp,sp,8
1000fb28:	f800283a 	ret

1000fb2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fb2c:	defffe04 	addi	sp,sp,-8
1000fb30:	dfc00115 	stw	ra,4(sp)
1000fb34:	df000015 	stw	fp,0(sp)
1000fb38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fb3c:	d0a00b17 	ldw	r2,-32724(gp)
1000fb40:	10000326 	beq	r2,zero,1000fb50 <alt_get_errno+0x24>
1000fb44:	d0a00b17 	ldw	r2,-32724(gp)
1000fb48:	103ee83a 	callr	r2
1000fb4c:	00000106 	br	1000fb54 <alt_get_errno+0x28>
1000fb50:	d0a6d904 	addi	r2,gp,-25756
}
1000fb54:	e037883a 	mov	sp,fp
1000fb58:	dfc00117 	ldw	ra,4(sp)
1000fb5c:	df000017 	ldw	fp,0(sp)
1000fb60:	dec00204 	addi	sp,sp,8
1000fb64:	f800283a 	ret

1000fb68 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000fb68:	deffed04 	addi	sp,sp,-76
1000fb6c:	dfc01215 	stw	ra,72(sp)
1000fb70:	df001115 	stw	fp,68(sp)
1000fb74:	df001104 	addi	fp,sp,68
1000fb78:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fb7c:	e0bfff17 	ldw	r2,-4(fp)
1000fb80:	10000816 	blt	r2,zero,1000fba4 <isatty+0x3c>
1000fb84:	01400304 	movi	r5,12
1000fb88:	e13fff17 	ldw	r4,-4(fp)
1000fb8c:	0002b6c0 	call	10002b6c <__mulsi3>
1000fb90:	1007883a 	mov	r3,r2
1000fb94:	00840074 	movhi	r2,4097
1000fb98:	108d2704 	addi	r2,r2,13468
1000fb9c:	1885883a 	add	r2,r3,r2
1000fba0:	00000106 	br	1000fba8 <isatty+0x40>
1000fba4:	0005883a 	mov	r2,zero
1000fba8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000fbac:	e0bfef17 	ldw	r2,-68(fp)
1000fbb0:	10000e26 	beq	r2,zero,1000fbec <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000fbb4:	e0bfef17 	ldw	r2,-68(fp)
1000fbb8:	10800017 	ldw	r2,0(r2)
1000fbbc:	10800817 	ldw	r2,32(r2)
1000fbc0:	1000021e 	bne	r2,zero,1000fbcc <isatty+0x64>
    {
      return 1;
1000fbc4:	00800044 	movi	r2,1
1000fbc8:	00000d06 	br	1000fc00 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000fbcc:	e0bff004 	addi	r2,fp,-64
1000fbd0:	100b883a 	mov	r5,r2
1000fbd4:	e13fff17 	ldw	r4,-4(fp)
1000fbd8:	000fa740 	call	1000fa74 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000fbdc:	e0bff117 	ldw	r2,-60(fp)
1000fbe0:	10880020 	cmpeqi	r2,r2,8192
1000fbe4:	10803fcc 	andi	r2,r2,255
1000fbe8:	00000506 	br	1000fc00 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000fbec:	000fb2c0 	call	1000fb2c <alt_get_errno>
1000fbf0:	1007883a 	mov	r3,r2
1000fbf4:	00801444 	movi	r2,81
1000fbf8:	18800015 	stw	r2,0(r3)
    return 0;
1000fbfc:	0005883a 	mov	r2,zero
  }
}
1000fc00:	e037883a 	mov	sp,fp
1000fc04:	dfc00117 	ldw	ra,4(sp)
1000fc08:	df000017 	ldw	fp,0(sp)
1000fc0c:	dec00204 	addi	sp,sp,8
1000fc10:	f800283a 	ret

1000fc14 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000fc14:	defffc04 	addi	sp,sp,-16
1000fc18:	df000315 	stw	fp,12(sp)
1000fc1c:	df000304 	addi	fp,sp,12
1000fc20:	e13ffd15 	stw	r4,-12(fp)
1000fc24:	e17ffe15 	stw	r5,-8(fp)
1000fc28:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000fc2c:	e0fffe17 	ldw	r3,-8(fp)
1000fc30:	e0bffd17 	ldw	r2,-12(fp)
1000fc34:	18800c26 	beq	r3,r2,1000fc68 <alt_load_section+0x54>
  {
    while( to != end )
1000fc38:	00000806 	br	1000fc5c <alt_load_section+0x48>
    {
      *to++ = *from++;
1000fc3c:	e0bffe17 	ldw	r2,-8(fp)
1000fc40:	10c00104 	addi	r3,r2,4
1000fc44:	e0fffe15 	stw	r3,-8(fp)
1000fc48:	e0fffd17 	ldw	r3,-12(fp)
1000fc4c:	19000104 	addi	r4,r3,4
1000fc50:	e13ffd15 	stw	r4,-12(fp)
1000fc54:	18c00017 	ldw	r3,0(r3)
1000fc58:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000fc5c:	e0fffe17 	ldw	r3,-8(fp)
1000fc60:	e0bfff17 	ldw	r2,-4(fp)
1000fc64:	18bff51e 	bne	r3,r2,1000fc3c <__alt_data_end+0xf800fc3c>
    {
      *to++ = *from++;
    }
  }
}
1000fc68:	0001883a 	nop
1000fc6c:	e037883a 	mov	sp,fp
1000fc70:	df000017 	ldw	fp,0(sp)
1000fc74:	dec00104 	addi	sp,sp,4
1000fc78:	f800283a 	ret

1000fc7c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000fc7c:	defffe04 	addi	sp,sp,-8
1000fc80:	dfc00115 	stw	ra,4(sp)
1000fc84:	df000015 	stw	fp,0(sp)
1000fc88:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000fc8c:	01840074 	movhi	r6,4097
1000fc90:	3191af04 	addi	r6,r6,18108
1000fc94:	01440074 	movhi	r5,4097
1000fc98:	294af404 	addi	r5,r5,11216
1000fc9c:	01040074 	movhi	r4,4097
1000fca0:	2111af04 	addi	r4,r4,18108
1000fca4:	000fc140 	call	1000fc14 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000fca8:	01840034 	movhi	r6,4096
1000fcac:	31808c04 	addi	r6,r6,560
1000fcb0:	01440034 	movhi	r5,4096
1000fcb4:	29400804 	addi	r5,r5,32
1000fcb8:	01040034 	movhi	r4,4096
1000fcbc:	21000804 	addi	r4,r4,32
1000fcc0:	000fc140 	call	1000fc14 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000fcc4:	01840074 	movhi	r6,4097
1000fcc8:	318af404 	addi	r6,r6,11216
1000fccc:	01440074 	movhi	r5,4097
1000fcd0:	29484604 	addi	r5,r5,8472
1000fcd4:	01040074 	movhi	r4,4097
1000fcd8:	21084604 	addi	r4,r4,8472
1000fcdc:	000fc140 	call	1000fc14 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000fce0:	00110600 	call	10011060 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000fce4:	00112200 	call	10011220 <alt_icache_flush_all>
}
1000fce8:	0001883a 	nop
1000fcec:	e037883a 	mov	sp,fp
1000fcf0:	dfc00117 	ldw	ra,4(sp)
1000fcf4:	df000017 	ldw	fp,0(sp)
1000fcf8:	dec00204 	addi	sp,sp,8
1000fcfc:	f800283a 	ret

1000fd00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fd00:	defffe04 	addi	sp,sp,-8
1000fd04:	dfc00115 	stw	ra,4(sp)
1000fd08:	df000015 	stw	fp,0(sp)
1000fd0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fd10:	d0a00b17 	ldw	r2,-32724(gp)
1000fd14:	10000326 	beq	r2,zero,1000fd24 <alt_get_errno+0x24>
1000fd18:	d0a00b17 	ldw	r2,-32724(gp)
1000fd1c:	103ee83a 	callr	r2
1000fd20:	00000106 	br	1000fd28 <alt_get_errno+0x28>
1000fd24:	d0a6d904 	addi	r2,gp,-25756
}
1000fd28:	e037883a 	mov	sp,fp
1000fd2c:	dfc00117 	ldw	ra,4(sp)
1000fd30:	df000017 	ldw	fp,0(sp)
1000fd34:	dec00204 	addi	sp,sp,8
1000fd38:	f800283a 	ret

1000fd3c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000fd3c:	defff904 	addi	sp,sp,-28
1000fd40:	dfc00615 	stw	ra,24(sp)
1000fd44:	df000515 	stw	fp,20(sp)
1000fd48:	df000504 	addi	fp,sp,20
1000fd4c:	e13ffd15 	stw	r4,-12(fp)
1000fd50:	e17ffe15 	stw	r5,-8(fp)
1000fd54:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000fd58:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fd5c:	e0bffd17 	ldw	r2,-12(fp)
1000fd60:	10000816 	blt	r2,zero,1000fd84 <lseek+0x48>
1000fd64:	01400304 	movi	r5,12
1000fd68:	e13ffd17 	ldw	r4,-12(fp)
1000fd6c:	0002b6c0 	call	10002b6c <__mulsi3>
1000fd70:	1007883a 	mov	r3,r2
1000fd74:	00840074 	movhi	r2,4097
1000fd78:	108d2704 	addi	r2,r2,13468
1000fd7c:	1885883a 	add	r2,r3,r2
1000fd80:	00000106 	br	1000fd88 <lseek+0x4c>
1000fd84:	0005883a 	mov	r2,zero
1000fd88:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000fd8c:	e0bffc17 	ldw	r2,-16(fp)
1000fd90:	10001026 	beq	r2,zero,1000fdd4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000fd94:	e0bffc17 	ldw	r2,-16(fp)
1000fd98:	10800017 	ldw	r2,0(r2)
1000fd9c:	10800717 	ldw	r2,28(r2)
1000fda0:	10000926 	beq	r2,zero,1000fdc8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000fda4:	e0bffc17 	ldw	r2,-16(fp)
1000fda8:	10800017 	ldw	r2,0(r2)
1000fdac:	10800717 	ldw	r2,28(r2)
1000fdb0:	e1bfff17 	ldw	r6,-4(fp)
1000fdb4:	e17ffe17 	ldw	r5,-8(fp)
1000fdb8:	e13ffc17 	ldw	r4,-16(fp)
1000fdbc:	103ee83a 	callr	r2
1000fdc0:	e0bffb15 	stw	r2,-20(fp)
1000fdc4:	00000506 	br	1000fddc <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000fdc8:	00bfde84 	movi	r2,-134
1000fdcc:	e0bffb15 	stw	r2,-20(fp)
1000fdd0:	00000206 	br	1000fddc <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000fdd4:	00bfebc4 	movi	r2,-81
1000fdd8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000fddc:	e0bffb17 	ldw	r2,-20(fp)
1000fde0:	1000070e 	bge	r2,zero,1000fe00 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000fde4:	000fd000 	call	1000fd00 <alt_get_errno>
1000fde8:	1007883a 	mov	r3,r2
1000fdec:	e0bffb17 	ldw	r2,-20(fp)
1000fdf0:	0085c83a 	sub	r2,zero,r2
1000fdf4:	18800015 	stw	r2,0(r3)
    rc = -1;
1000fdf8:	00bfffc4 	movi	r2,-1
1000fdfc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000fe00:	e0bffb17 	ldw	r2,-20(fp)
}
1000fe04:	e037883a 	mov	sp,fp
1000fe08:	dfc00117 	ldw	ra,4(sp)
1000fe0c:	df000017 	ldw	fp,0(sp)
1000fe10:	dec00204 	addi	sp,sp,8
1000fe14:	f800283a 	ret

1000fe18 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000fe18:	defffd04 	addi	sp,sp,-12
1000fe1c:	dfc00215 	stw	ra,8(sp)
1000fe20:	df000115 	stw	fp,4(sp)
1000fe24:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000fe28:	0009883a 	mov	r4,zero
1000fe2c:	00102f00 	call	100102f0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000fe30:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000fe34:	00103280 	call	10010328 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000fe38:	01840074 	movhi	r6,4097
1000fe3c:	318aea04 	addi	r6,r6,11176
1000fe40:	01440074 	movhi	r5,4097
1000fe44:	294aea04 	addi	r5,r5,11176
1000fe48:	01040074 	movhi	r4,4097
1000fe4c:	210aea04 	addi	r4,r4,11176
1000fe50:	00115c40 	call	100115c4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000fe54:	00111600 	call	10011160 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000fe58:	01040074 	movhi	r4,4097
1000fe5c:	21047004 	addi	r4,r4,4544
1000fe60:	0011d840 	call	10011d84 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000fe64:	d0a6da17 	ldw	r2,-25752(gp)
1000fe68:	d0e6db17 	ldw	r3,-25748(gp)
1000fe6c:	d126dc17 	ldw	r4,-25744(gp)
1000fe70:	200d883a 	mov	r6,r4
1000fe74:	180b883a 	mov	r5,r3
1000fe78:	1009883a 	mov	r4,r2
1000fe7c:	000094c0 	call	1000094c <main>
1000fe80:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000fe84:	01000044 	movi	r4,1
1000fe88:	000f9340 	call	1000f934 <close>
  exit (result);
1000fe8c:	e13fff17 	ldw	r4,-4(fp)
1000fe90:	0011d980 	call	10011d98 <exit>

1000fe94 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000fe94:	defffe04 	addi	sp,sp,-8
1000fe98:	df000115 	stw	fp,4(sp)
1000fe9c:	df000104 	addi	fp,sp,4
1000fea0:	e13fff15 	stw	r4,-4(fp)
}
1000fea4:	0001883a 	nop
1000fea8:	e037883a 	mov	sp,fp
1000feac:	df000017 	ldw	fp,0(sp)
1000feb0:	dec00104 	addi	sp,sp,4
1000feb4:	f800283a 	ret

1000feb8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000feb8:	defffe04 	addi	sp,sp,-8
1000febc:	df000115 	stw	fp,4(sp)
1000fec0:	df000104 	addi	fp,sp,4
1000fec4:	e13fff15 	stw	r4,-4(fp)
}
1000fec8:	0001883a 	nop
1000fecc:	e037883a 	mov	sp,fp
1000fed0:	df000017 	ldw	fp,0(sp)
1000fed4:	dec00104 	addi	sp,sp,4
1000fed8:	f800283a 	ret

1000fedc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fedc:	defffe04 	addi	sp,sp,-8
1000fee0:	dfc00115 	stw	ra,4(sp)
1000fee4:	df000015 	stw	fp,0(sp)
1000fee8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000feec:	d0a00b17 	ldw	r2,-32724(gp)
1000fef0:	10000326 	beq	r2,zero,1000ff00 <alt_get_errno+0x24>
1000fef4:	d0a00b17 	ldw	r2,-32724(gp)
1000fef8:	103ee83a 	callr	r2
1000fefc:	00000106 	br	1000ff04 <alt_get_errno+0x28>
1000ff00:	d0a6d904 	addi	r2,gp,-25756
}
1000ff04:	e037883a 	mov	sp,fp
1000ff08:	dfc00117 	ldw	ra,4(sp)
1000ff0c:	df000017 	ldw	fp,0(sp)
1000ff10:	dec00204 	addi	sp,sp,8
1000ff14:	f800283a 	ret

1000ff18 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000ff18:	defff904 	addi	sp,sp,-28
1000ff1c:	dfc00615 	stw	ra,24(sp)
1000ff20:	df000515 	stw	fp,20(sp)
1000ff24:	df000504 	addi	fp,sp,20
1000ff28:	e13ffd15 	stw	r4,-12(fp)
1000ff2c:	e17ffe15 	stw	r5,-8(fp)
1000ff30:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000ff34:	e0bffd17 	ldw	r2,-12(fp)
1000ff38:	10000816 	blt	r2,zero,1000ff5c <read+0x44>
1000ff3c:	01400304 	movi	r5,12
1000ff40:	e13ffd17 	ldw	r4,-12(fp)
1000ff44:	0002b6c0 	call	10002b6c <__mulsi3>
1000ff48:	1007883a 	mov	r3,r2
1000ff4c:	00840074 	movhi	r2,4097
1000ff50:	108d2704 	addi	r2,r2,13468
1000ff54:	1885883a 	add	r2,r3,r2
1000ff58:	00000106 	br	1000ff60 <read+0x48>
1000ff5c:	0005883a 	mov	r2,zero
1000ff60:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000ff64:	e0bffb17 	ldw	r2,-20(fp)
1000ff68:	10002226 	beq	r2,zero,1000fff4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000ff6c:	e0bffb17 	ldw	r2,-20(fp)
1000ff70:	10800217 	ldw	r2,8(r2)
1000ff74:	108000cc 	andi	r2,r2,3
1000ff78:	10800060 	cmpeqi	r2,r2,1
1000ff7c:	1000181e 	bne	r2,zero,1000ffe0 <read+0xc8>
        (fd->dev->read))
1000ff80:	e0bffb17 	ldw	r2,-20(fp)
1000ff84:	10800017 	ldw	r2,0(r2)
1000ff88:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000ff8c:	10001426 	beq	r2,zero,1000ffe0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000ff90:	e0bffb17 	ldw	r2,-20(fp)
1000ff94:	10800017 	ldw	r2,0(r2)
1000ff98:	10800517 	ldw	r2,20(r2)
1000ff9c:	e0ffff17 	ldw	r3,-4(fp)
1000ffa0:	180d883a 	mov	r6,r3
1000ffa4:	e17ffe17 	ldw	r5,-8(fp)
1000ffa8:	e13ffb17 	ldw	r4,-20(fp)
1000ffac:	103ee83a 	callr	r2
1000ffb0:	e0bffc15 	stw	r2,-16(fp)
1000ffb4:	e0bffc17 	ldw	r2,-16(fp)
1000ffb8:	1000070e 	bge	r2,zero,1000ffd8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
1000ffbc:	000fedc0 	call	1000fedc <alt_get_errno>
1000ffc0:	1007883a 	mov	r3,r2
1000ffc4:	e0bffc17 	ldw	r2,-16(fp)
1000ffc8:	0085c83a 	sub	r2,zero,r2
1000ffcc:	18800015 	stw	r2,0(r3)
          return -1;
1000ffd0:	00bfffc4 	movi	r2,-1
1000ffd4:	00000c06 	br	10010008 <read+0xf0>
        }
        return rval;
1000ffd8:	e0bffc17 	ldw	r2,-16(fp)
1000ffdc:	00000a06 	br	10010008 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000ffe0:	000fedc0 	call	1000fedc <alt_get_errno>
1000ffe4:	1007883a 	mov	r3,r2
1000ffe8:	00800344 	movi	r2,13
1000ffec:	18800015 	stw	r2,0(r3)
1000fff0:	00000406 	br	10010004 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000fff4:	000fedc0 	call	1000fedc <alt_get_errno>
1000fff8:	1007883a 	mov	r3,r2
1000fffc:	00801444 	movi	r2,81
10010000:	18800015 	stw	r2,0(r3)
  }
  return -1;
10010004:	00bfffc4 	movi	r2,-1
}
10010008:	e037883a 	mov	sp,fp
1001000c:	dfc00117 	ldw	ra,4(sp)
10010010:	df000017 	ldw	fp,0(sp)
10010014:	dec00204 	addi	sp,sp,8
10010018:	f800283a 	ret

1001001c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1001001c:	defffc04 	addi	sp,sp,-16
10010020:	dfc00315 	stw	ra,12(sp)
10010024:	df000215 	stw	fp,8(sp)
10010028:	dc000115 	stw	r16,4(sp)
1001002c:	df000204 	addi	fp,sp,8
10010030:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10010034:	e0bffe17 	ldw	r2,-8(fp)
10010038:	108000d0 	cmplti	r2,r2,3
1001003c:	1000111e 	bne	r2,zero,10010084 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10010040:	04040074 	movhi	r16,4097
10010044:	840d2704 	addi	r16,r16,13468
10010048:	e0bffe17 	ldw	r2,-8(fp)
1001004c:	01400304 	movi	r5,12
10010050:	1009883a 	mov	r4,r2
10010054:	0002b6c0 	call	10002b6c <__mulsi3>
10010058:	8085883a 	add	r2,r16,r2
1001005c:	10800204 	addi	r2,r2,8
10010060:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10010064:	04040074 	movhi	r16,4097
10010068:	840d2704 	addi	r16,r16,13468
1001006c:	e0bffe17 	ldw	r2,-8(fp)
10010070:	01400304 	movi	r5,12
10010074:	1009883a 	mov	r4,r2
10010078:	0002b6c0 	call	10002b6c <__mulsi3>
1001007c:	8085883a 	add	r2,r16,r2
10010080:	10000015 	stw	zero,0(r2)
  }
}
10010084:	0001883a 	nop
10010088:	e6ffff04 	addi	sp,fp,-4
1001008c:	dfc00217 	ldw	ra,8(sp)
10010090:	df000117 	ldw	fp,4(sp)
10010094:	dc000017 	ldw	r16,0(sp)
10010098:	dec00304 	addi	sp,sp,12
1001009c:	f800283a 	ret

100100a0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
100100a0:	defff904 	addi	sp,sp,-28
100100a4:	df000615 	stw	fp,24(sp)
100100a8:	df000604 	addi	fp,sp,24
100100ac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100100b0:	0005303a 	rdctl	r2,status
100100b4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100100b8:	e0fffe17 	ldw	r3,-8(fp)
100100bc:	00bfff84 	movi	r2,-2
100100c0:	1884703a 	and	r2,r3,r2
100100c4:	1001703a 	wrctl	status,r2
  
  return context;
100100c8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
100100cc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
100100d0:	d0a00c17 	ldw	r2,-32720(gp)
100100d4:	10c000c4 	addi	r3,r2,3
100100d8:	00bfff04 	movi	r2,-4
100100dc:	1884703a 	and	r2,r3,r2
100100e0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
100100e4:	d0e00c17 	ldw	r3,-32720(gp)
100100e8:	e0bfff17 	ldw	r2,-4(fp)
100100ec:	1887883a 	add	r3,r3,r2
100100f0:	00860034 	movhi	r2,6144
100100f4:	10800004 	addi	r2,r2,0
100100f8:	10c0062e 	bgeu	r2,r3,10010114 <sbrk+0x74>
100100fc:	e0bffb17 	ldw	r2,-20(fp)
10010100:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010104:	e0bffa17 	ldw	r2,-24(fp)
10010108:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1001010c:	00bfffc4 	movi	r2,-1
10010110:	00000b06 	br	10010140 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10010114:	d0a00c17 	ldw	r2,-32720(gp)
10010118:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1001011c:	d0e00c17 	ldw	r3,-32720(gp)
10010120:	e0bfff17 	ldw	r2,-4(fp)
10010124:	1885883a 	add	r2,r3,r2
10010128:	d0a00c15 	stw	r2,-32720(gp)
1001012c:	e0bffb17 	ldw	r2,-20(fp)
10010130:	e0bffc15 	stw	r2,-16(fp)
10010134:	e0bffc17 	ldw	r2,-16(fp)
10010138:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1001013c:	e0bffd17 	ldw	r2,-12(fp)
} 
10010140:	e037883a 	mov	sp,fp
10010144:	df000017 	ldw	fp,0(sp)
10010148:	dec00104 	addi	sp,sp,4
1001014c:	f800283a 	ret

10010150 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
10010150:	defffd04 	addi	sp,sp,-12
10010154:	dfc00215 	stw	ra,8(sp)
10010158:	df000115 	stw	fp,4(sp)
1001015c:	df000104 	addi	fp,sp,4
10010160:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
10010164:	e13fff17 	ldw	r4,-4(fp)
10010168:	0010f080 	call	10010f08 <alt_busy_sleep>
}
1001016c:	e037883a 	mov	sp,fp
10010170:	dfc00117 	ldw	ra,4(sp)
10010174:	df000017 	ldw	fp,0(sp)
10010178:	dec00204 	addi	sp,sp,8
1001017c:	f800283a 	ret

10010180 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010180:	defffe04 	addi	sp,sp,-8
10010184:	dfc00115 	stw	ra,4(sp)
10010188:	df000015 	stw	fp,0(sp)
1001018c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010190:	d0a00b17 	ldw	r2,-32724(gp)
10010194:	10000326 	beq	r2,zero,100101a4 <alt_get_errno+0x24>
10010198:	d0a00b17 	ldw	r2,-32724(gp)
1001019c:	103ee83a 	callr	r2
100101a0:	00000106 	br	100101a8 <alt_get_errno+0x28>
100101a4:	d0a6d904 	addi	r2,gp,-25756
}
100101a8:	e037883a 	mov	sp,fp
100101ac:	dfc00117 	ldw	ra,4(sp)
100101b0:	df000017 	ldw	fp,0(sp)
100101b4:	dec00204 	addi	sp,sp,8
100101b8:	f800283a 	ret

100101bc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
100101bc:	defff904 	addi	sp,sp,-28
100101c0:	dfc00615 	stw	ra,24(sp)
100101c4:	df000515 	stw	fp,20(sp)
100101c8:	df000504 	addi	fp,sp,20
100101cc:	e13ffd15 	stw	r4,-12(fp)
100101d0:	e17ffe15 	stw	r5,-8(fp)
100101d4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100101d8:	e0bffd17 	ldw	r2,-12(fp)
100101dc:	10000816 	blt	r2,zero,10010200 <write+0x44>
100101e0:	01400304 	movi	r5,12
100101e4:	e13ffd17 	ldw	r4,-12(fp)
100101e8:	0002b6c0 	call	10002b6c <__mulsi3>
100101ec:	1007883a 	mov	r3,r2
100101f0:	00840074 	movhi	r2,4097
100101f4:	108d2704 	addi	r2,r2,13468
100101f8:	1885883a 	add	r2,r3,r2
100101fc:	00000106 	br	10010204 <write+0x48>
10010200:	0005883a 	mov	r2,zero
10010204:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10010208:	e0bffb17 	ldw	r2,-20(fp)
1001020c:	10002126 	beq	r2,zero,10010294 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10010210:	e0bffb17 	ldw	r2,-20(fp)
10010214:	10800217 	ldw	r2,8(r2)
10010218:	108000cc 	andi	r2,r2,3
1001021c:	10001826 	beq	r2,zero,10010280 <write+0xc4>
10010220:	e0bffb17 	ldw	r2,-20(fp)
10010224:	10800017 	ldw	r2,0(r2)
10010228:	10800617 	ldw	r2,24(r2)
1001022c:	10001426 	beq	r2,zero,10010280 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10010230:	e0bffb17 	ldw	r2,-20(fp)
10010234:	10800017 	ldw	r2,0(r2)
10010238:	10800617 	ldw	r2,24(r2)
1001023c:	e0ffff17 	ldw	r3,-4(fp)
10010240:	180d883a 	mov	r6,r3
10010244:	e17ffe17 	ldw	r5,-8(fp)
10010248:	e13ffb17 	ldw	r4,-20(fp)
1001024c:	103ee83a 	callr	r2
10010250:	e0bffc15 	stw	r2,-16(fp)
10010254:	e0bffc17 	ldw	r2,-16(fp)
10010258:	1000070e 	bge	r2,zero,10010278 <write+0xbc>
      {
        ALT_ERRNO = -rval;
1001025c:	00101800 	call	10010180 <alt_get_errno>
10010260:	1007883a 	mov	r3,r2
10010264:	e0bffc17 	ldw	r2,-16(fp)
10010268:	0085c83a 	sub	r2,zero,r2
1001026c:	18800015 	stw	r2,0(r3)
        return -1;
10010270:	00bfffc4 	movi	r2,-1
10010274:	00000c06 	br	100102a8 <write+0xec>
      }
      return rval;
10010278:	e0bffc17 	ldw	r2,-16(fp)
1001027c:	00000a06 	br	100102a8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10010280:	00101800 	call	10010180 <alt_get_errno>
10010284:	1007883a 	mov	r3,r2
10010288:	00800344 	movi	r2,13
1001028c:	18800015 	stw	r2,0(r3)
10010290:	00000406 	br	100102a4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10010294:	00101800 	call	10010180 <alt_get_errno>
10010298:	1007883a 	mov	r3,r2
1001029c:	00801444 	movi	r2,81
100102a0:	18800015 	stw	r2,0(r3)
  }
  return -1;
100102a4:	00bfffc4 	movi	r2,-1
}
100102a8:	e037883a 	mov	sp,fp
100102ac:	dfc00117 	ldw	ra,4(sp)
100102b0:	df000017 	ldw	fp,0(sp)
100102b4:	dec00204 	addi	sp,sp,8
100102b8:	f800283a 	ret

100102bc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
100102bc:	defffd04 	addi	sp,sp,-12
100102c0:	dfc00215 	stw	ra,8(sp)
100102c4:	df000115 	stw	fp,4(sp)
100102c8:	df000104 	addi	fp,sp,4
100102cc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
100102d0:	d1600804 	addi	r5,gp,-32736
100102d4:	e13fff17 	ldw	r4,-4(fp)
100102d8:	00110bc0 	call	100110bc <alt_dev_llist_insert>
}
100102dc:	e037883a 	mov	sp,fp
100102e0:	dfc00117 	ldw	ra,4(sp)
100102e4:	df000017 	ldw	fp,0(sp)
100102e8:	dec00204 	addi	sp,sp,8
100102ec:	f800283a 	ret

100102f0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
100102f0:	defffd04 	addi	sp,sp,-12
100102f4:	dfc00215 	stw	ra,8(sp)
100102f8:	df000115 	stw	fp,4(sp)
100102fc:	df000104 	addi	fp,sp,4
10010300:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10010304:	0011a680 	call	10011a68 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10010308:	00800044 	movi	r2,1
1001030c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10010310:	0001883a 	nop
10010314:	e037883a 	mov	sp,fp
10010318:	dfc00117 	ldw	ra,4(sp)
1001031c:	df000017 	ldw	fp,0(sp)
10010320:	dec00204 	addi	sp,sp,8
10010324:	f800283a 	ret

10010328 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10010328:	defffe04 	addi	sp,sp,-8
1001032c:	dfc00115 	stw	ra,4(sp)
10010330:	df000015 	stw	fp,0(sp)
10010334:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10010338:	000d883a 	mov	r6,zero
1001033c:	000b883a 	mov	r5,zero
10010340:	01040074 	movhi	r4,4097
10010344:	210d9104 	addi	r4,r4,13892
10010348:	00104d80 	call	100104d8 <altera_avalon_jtag_uart_init>
1001034c:	01040074 	movhi	r4,4097
10010350:	210d8704 	addi	r4,r4,13852
10010354:	00102bc0 	call	100102bc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10010358:	0001883a 	nop
}
1001035c:	0001883a 	nop
10010360:	e037883a 	mov	sp,fp
10010364:	dfc00117 	ldw	ra,4(sp)
10010368:	df000017 	ldw	fp,0(sp)
1001036c:	dec00204 	addi	sp,sp,8
10010370:	f800283a 	ret

10010374 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10010374:	defffa04 	addi	sp,sp,-24
10010378:	dfc00515 	stw	ra,20(sp)
1001037c:	df000415 	stw	fp,16(sp)
10010380:	df000404 	addi	fp,sp,16
10010384:	e13ffd15 	stw	r4,-12(fp)
10010388:	e17ffe15 	stw	r5,-8(fp)
1001038c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010390:	e0bffd17 	ldw	r2,-12(fp)
10010394:	10800017 	ldw	r2,0(r2)
10010398:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1001039c:	e0bffc17 	ldw	r2,-16(fp)
100103a0:	10c00a04 	addi	r3,r2,40
100103a4:	e0bffd17 	ldw	r2,-12(fp)
100103a8:	10800217 	ldw	r2,8(r2)
100103ac:	100f883a 	mov	r7,r2
100103b0:	e1bfff17 	ldw	r6,-4(fp)
100103b4:	e17ffe17 	ldw	r5,-8(fp)
100103b8:	1809883a 	mov	r4,r3
100103bc:	001099c0 	call	1001099c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
100103c0:	e037883a 	mov	sp,fp
100103c4:	dfc00117 	ldw	ra,4(sp)
100103c8:	df000017 	ldw	fp,0(sp)
100103cc:	dec00204 	addi	sp,sp,8
100103d0:	f800283a 	ret

100103d4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
100103d4:	defffa04 	addi	sp,sp,-24
100103d8:	dfc00515 	stw	ra,20(sp)
100103dc:	df000415 	stw	fp,16(sp)
100103e0:	df000404 	addi	fp,sp,16
100103e4:	e13ffd15 	stw	r4,-12(fp)
100103e8:	e17ffe15 	stw	r5,-8(fp)
100103ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100103f0:	e0bffd17 	ldw	r2,-12(fp)
100103f4:	10800017 	ldw	r2,0(r2)
100103f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
100103fc:	e0bffc17 	ldw	r2,-16(fp)
10010400:	10c00a04 	addi	r3,r2,40
10010404:	e0bffd17 	ldw	r2,-12(fp)
10010408:	10800217 	ldw	r2,8(r2)
1001040c:	100f883a 	mov	r7,r2
10010410:	e1bfff17 	ldw	r6,-4(fp)
10010414:	e17ffe17 	ldw	r5,-8(fp)
10010418:	1809883a 	mov	r4,r3
1001041c:	0010bb80 	call	10010bb8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10010420:	e037883a 	mov	sp,fp
10010424:	dfc00117 	ldw	ra,4(sp)
10010428:	df000017 	ldw	fp,0(sp)
1001042c:	dec00204 	addi	sp,sp,8
10010430:	f800283a 	ret

10010434 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10010434:	defffc04 	addi	sp,sp,-16
10010438:	dfc00315 	stw	ra,12(sp)
1001043c:	df000215 	stw	fp,8(sp)
10010440:	df000204 	addi	fp,sp,8
10010444:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010448:	e0bfff17 	ldw	r2,-4(fp)
1001044c:	10800017 	ldw	r2,0(r2)
10010450:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10010454:	e0bffe17 	ldw	r2,-8(fp)
10010458:	10c00a04 	addi	r3,r2,40
1001045c:	e0bfff17 	ldw	r2,-4(fp)
10010460:	10800217 	ldw	r2,8(r2)
10010464:	100b883a 	mov	r5,r2
10010468:	1809883a 	mov	r4,r3
1001046c:	00108440 	call	10010844 <altera_avalon_jtag_uart_close>
}
10010470:	e037883a 	mov	sp,fp
10010474:	dfc00117 	ldw	ra,4(sp)
10010478:	df000017 	ldw	fp,0(sp)
1001047c:	dec00204 	addi	sp,sp,8
10010480:	f800283a 	ret

10010484 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10010484:	defffa04 	addi	sp,sp,-24
10010488:	dfc00515 	stw	ra,20(sp)
1001048c:	df000415 	stw	fp,16(sp)
10010490:	df000404 	addi	fp,sp,16
10010494:	e13ffd15 	stw	r4,-12(fp)
10010498:	e17ffe15 	stw	r5,-8(fp)
1001049c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
100104a0:	e0bffd17 	ldw	r2,-12(fp)
100104a4:	10800017 	ldw	r2,0(r2)
100104a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
100104ac:	e0bffc17 	ldw	r2,-16(fp)
100104b0:	10800a04 	addi	r2,r2,40
100104b4:	e1bfff17 	ldw	r6,-4(fp)
100104b8:	e17ffe17 	ldw	r5,-8(fp)
100104bc:	1009883a 	mov	r4,r2
100104c0:	00108ac0 	call	100108ac <altera_avalon_jtag_uart_ioctl>
}
100104c4:	e037883a 	mov	sp,fp
100104c8:	dfc00117 	ldw	ra,4(sp)
100104cc:	df000017 	ldw	fp,0(sp)
100104d0:	dec00204 	addi	sp,sp,8
100104d4:	f800283a 	ret

100104d8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
100104d8:	defffa04 	addi	sp,sp,-24
100104dc:	dfc00515 	stw	ra,20(sp)
100104e0:	df000415 	stw	fp,16(sp)
100104e4:	df000404 	addi	fp,sp,16
100104e8:	e13ffd15 	stw	r4,-12(fp)
100104ec:	e17ffe15 	stw	r5,-8(fp)
100104f0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100104f4:	e0bffd17 	ldw	r2,-12(fp)
100104f8:	00c00044 	movi	r3,1
100104fc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10010500:	e0bffd17 	ldw	r2,-12(fp)
10010504:	10800017 	ldw	r2,0(r2)
10010508:	10800104 	addi	r2,r2,4
1001050c:	1007883a 	mov	r3,r2
10010510:	e0bffd17 	ldw	r2,-12(fp)
10010514:	10800817 	ldw	r2,32(r2)
10010518:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1001051c:	e0bffe17 	ldw	r2,-8(fp)
10010520:	e0ffff17 	ldw	r3,-4(fp)
10010524:	d8000015 	stw	zero,0(sp)
10010528:	e1fffd17 	ldw	r7,-12(fp)
1001052c:	01840074 	movhi	r6,4097
10010530:	31816604 	addi	r6,r6,1432
10010534:	180b883a 	mov	r5,r3
10010538:	1009883a 	mov	r4,r2
1001053c:	00112400 	call	10011240 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10010540:	e0bffd17 	ldw	r2,-12(fp)
10010544:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10010548:	e0bffd17 	ldw	r2,-12(fp)
1001054c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10010550:	d0e6de17 	ldw	r3,-25736(gp)
10010554:	e1fffd17 	ldw	r7,-12(fp)
10010558:	01840074 	movhi	r6,4097
1001055c:	3181e904 	addi	r6,r6,1956
10010560:	180b883a 	mov	r5,r3
10010564:	1009883a 	mov	r4,r2
10010568:	0010ddc0 	call	10010ddc <alt_alarm_start>
1001056c:	1000040e 	bge	r2,zero,10010580 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10010570:	e0fffd17 	ldw	r3,-12(fp)
10010574:	00a00034 	movhi	r2,32768
10010578:	10bfffc4 	addi	r2,r2,-1
1001057c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10010580:	0001883a 	nop
10010584:	e037883a 	mov	sp,fp
10010588:	dfc00117 	ldw	ra,4(sp)
1001058c:	df000017 	ldw	fp,0(sp)
10010590:	dec00204 	addi	sp,sp,8
10010594:	f800283a 	ret

10010598 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10010598:	defff804 	addi	sp,sp,-32
1001059c:	df000715 	stw	fp,28(sp)
100105a0:	df000704 	addi	fp,sp,28
100105a4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
100105a8:	e0bfff17 	ldw	r2,-4(fp)
100105ac:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
100105b0:	e0bffb17 	ldw	r2,-20(fp)
100105b4:	10800017 	ldw	r2,0(r2)
100105b8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100105bc:	e0bffc17 	ldw	r2,-16(fp)
100105c0:	10800104 	addi	r2,r2,4
100105c4:	10800037 	ldwio	r2,0(r2)
100105c8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
100105cc:	e0bffd17 	ldw	r2,-12(fp)
100105d0:	1080c00c 	andi	r2,r2,768
100105d4:	10006d26 	beq	r2,zero,1001078c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
100105d8:	e0bffd17 	ldw	r2,-12(fp)
100105dc:	1080400c 	andi	r2,r2,256
100105e0:	10003526 	beq	r2,zero,100106b8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
100105e4:	00800074 	movhi	r2,1
100105e8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100105ec:	e0bffb17 	ldw	r2,-20(fp)
100105f0:	10800a17 	ldw	r2,40(r2)
100105f4:	10800044 	addi	r2,r2,1
100105f8:	1081ffcc 	andi	r2,r2,2047
100105fc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10010600:	e0bffb17 	ldw	r2,-20(fp)
10010604:	10c00b17 	ldw	r3,44(r2)
10010608:	e0bffe17 	ldw	r2,-8(fp)
1001060c:	18801526 	beq	r3,r2,10010664 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10010610:	e0bffc17 	ldw	r2,-16(fp)
10010614:	10800037 	ldwio	r2,0(r2)
10010618:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1001061c:	e0bff917 	ldw	r2,-28(fp)
10010620:	10a0000c 	andi	r2,r2,32768
10010624:	10001126 	beq	r2,zero,1001066c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10010628:	e0bffb17 	ldw	r2,-20(fp)
1001062c:	10800a17 	ldw	r2,40(r2)
10010630:	e0fff917 	ldw	r3,-28(fp)
10010634:	1809883a 	mov	r4,r3
10010638:	e0fffb17 	ldw	r3,-20(fp)
1001063c:	1885883a 	add	r2,r3,r2
10010640:	10800e04 	addi	r2,r2,56
10010644:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010648:	e0bffb17 	ldw	r2,-20(fp)
1001064c:	10800a17 	ldw	r2,40(r2)
10010650:	10800044 	addi	r2,r2,1
10010654:	10c1ffcc 	andi	r3,r2,2047
10010658:	e0bffb17 	ldw	r2,-20(fp)
1001065c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10010660:	003fe206 	br	100105ec <__alt_data_end+0xf80105ec>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10010664:	0001883a 	nop
10010668:	00000106 	br	10010670 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
1001066c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10010670:	e0bff917 	ldw	r2,-28(fp)
10010674:	10bfffec 	andhi	r2,r2,65535
10010678:	10000f26 	beq	r2,zero,100106b8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1001067c:	e0bffb17 	ldw	r2,-20(fp)
10010680:	10c00817 	ldw	r3,32(r2)
10010684:	00bfff84 	movi	r2,-2
10010688:	1886703a 	and	r3,r3,r2
1001068c:	e0bffb17 	ldw	r2,-20(fp)
10010690:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10010694:	e0bffc17 	ldw	r2,-16(fp)
10010698:	10800104 	addi	r2,r2,4
1001069c:	1007883a 	mov	r3,r2
100106a0:	e0bffb17 	ldw	r2,-20(fp)
100106a4:	10800817 	ldw	r2,32(r2)
100106a8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100106ac:	e0bffc17 	ldw	r2,-16(fp)
100106b0:	10800104 	addi	r2,r2,4
100106b4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
100106b8:	e0bffd17 	ldw	r2,-12(fp)
100106bc:	1080800c 	andi	r2,r2,512
100106c0:	103fbe26 	beq	r2,zero,100105bc <__alt_data_end+0xf80105bc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
100106c4:	e0bffd17 	ldw	r2,-12(fp)
100106c8:	1004d43a 	srli	r2,r2,16
100106cc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
100106d0:	00001406 	br	10010724 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
100106d4:	e0bffc17 	ldw	r2,-16(fp)
100106d8:	e0fffb17 	ldw	r3,-20(fp)
100106dc:	18c00d17 	ldw	r3,52(r3)
100106e0:	e13ffb17 	ldw	r4,-20(fp)
100106e4:	20c7883a 	add	r3,r4,r3
100106e8:	18c20e04 	addi	r3,r3,2104
100106ec:	18c00003 	ldbu	r3,0(r3)
100106f0:	18c03fcc 	andi	r3,r3,255
100106f4:	18c0201c 	xori	r3,r3,128
100106f8:	18ffe004 	addi	r3,r3,-128
100106fc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010700:	e0bffb17 	ldw	r2,-20(fp)
10010704:	10800d17 	ldw	r2,52(r2)
10010708:	10800044 	addi	r2,r2,1
1001070c:	10c1ffcc 	andi	r3,r2,2047
10010710:	e0bffb17 	ldw	r2,-20(fp)
10010714:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10010718:	e0bffa17 	ldw	r2,-24(fp)
1001071c:	10bfffc4 	addi	r2,r2,-1
10010720:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10010724:	e0bffa17 	ldw	r2,-24(fp)
10010728:	10000526 	beq	r2,zero,10010740 <altera_avalon_jtag_uart_irq+0x1a8>
1001072c:	e0bffb17 	ldw	r2,-20(fp)
10010730:	10c00d17 	ldw	r3,52(r2)
10010734:	e0bffb17 	ldw	r2,-20(fp)
10010738:	10800c17 	ldw	r2,48(r2)
1001073c:	18bfe51e 	bne	r3,r2,100106d4 <__alt_data_end+0xf80106d4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10010740:	e0bffa17 	ldw	r2,-24(fp)
10010744:	103f9d26 	beq	r2,zero,100105bc <__alt_data_end+0xf80105bc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010748:	e0bffb17 	ldw	r2,-20(fp)
1001074c:	10c00817 	ldw	r3,32(r2)
10010750:	00bfff44 	movi	r2,-3
10010754:	1886703a 	and	r3,r3,r2
10010758:	e0bffb17 	ldw	r2,-20(fp)
1001075c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010760:	e0bffb17 	ldw	r2,-20(fp)
10010764:	10800017 	ldw	r2,0(r2)
10010768:	10800104 	addi	r2,r2,4
1001076c:	1007883a 	mov	r3,r2
10010770:	e0bffb17 	ldw	r2,-20(fp)
10010774:	10800817 	ldw	r2,32(r2)
10010778:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1001077c:	e0bffc17 	ldw	r2,-16(fp)
10010780:	10800104 	addi	r2,r2,4
10010784:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10010788:	003f8c06 	br	100105bc <__alt_data_end+0xf80105bc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
1001078c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10010790:	0001883a 	nop
10010794:	e037883a 	mov	sp,fp
10010798:	df000017 	ldw	fp,0(sp)
1001079c:	dec00104 	addi	sp,sp,4
100107a0:	f800283a 	ret

100107a4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
100107a4:	defff804 	addi	sp,sp,-32
100107a8:	df000715 	stw	fp,28(sp)
100107ac:	df000704 	addi	fp,sp,28
100107b0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
100107b4:	e0bffb17 	ldw	r2,-20(fp)
100107b8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
100107bc:	e0bff917 	ldw	r2,-28(fp)
100107c0:	10800017 	ldw	r2,0(r2)
100107c4:	10800104 	addi	r2,r2,4
100107c8:	10800037 	ldwio	r2,0(r2)
100107cc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
100107d0:	e0bffa17 	ldw	r2,-24(fp)
100107d4:	1081000c 	andi	r2,r2,1024
100107d8:	10000b26 	beq	r2,zero,10010808 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
100107dc:	e0bff917 	ldw	r2,-28(fp)
100107e0:	10800017 	ldw	r2,0(r2)
100107e4:	10800104 	addi	r2,r2,4
100107e8:	1007883a 	mov	r3,r2
100107ec:	e0bff917 	ldw	r2,-28(fp)
100107f0:	10800817 	ldw	r2,32(r2)
100107f4:	10810014 	ori	r2,r2,1024
100107f8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
100107fc:	e0bff917 	ldw	r2,-28(fp)
10010800:	10000915 	stw	zero,36(r2)
10010804:	00000a06 	br	10010830 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10010808:	e0bff917 	ldw	r2,-28(fp)
1001080c:	10c00917 	ldw	r3,36(r2)
10010810:	00a00034 	movhi	r2,32768
10010814:	10bfff04 	addi	r2,r2,-4
10010818:	10c00536 	bltu	r2,r3,10010830 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1001081c:	e0bff917 	ldw	r2,-28(fp)
10010820:	10800917 	ldw	r2,36(r2)
10010824:	10c00044 	addi	r3,r2,1
10010828:	e0bff917 	ldw	r2,-28(fp)
1001082c:	10c00915 	stw	r3,36(r2)
10010830:	d0a6de17 	ldw	r2,-25736(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10010834:	e037883a 	mov	sp,fp
10010838:	df000017 	ldw	fp,0(sp)
1001083c:	dec00104 	addi	sp,sp,4
10010840:	f800283a 	ret

10010844 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10010844:	defffd04 	addi	sp,sp,-12
10010848:	df000215 	stw	fp,8(sp)
1001084c:	df000204 	addi	fp,sp,8
10010850:	e13ffe15 	stw	r4,-8(fp)
10010854:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10010858:	00000506 	br	10010870 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1001085c:	e0bfff17 	ldw	r2,-4(fp)
10010860:	1090000c 	andi	r2,r2,16384
10010864:	10000226 	beq	r2,zero,10010870 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10010868:	00bffd44 	movi	r2,-11
1001086c:	00000b06 	br	1001089c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10010870:	e0bffe17 	ldw	r2,-8(fp)
10010874:	10c00d17 	ldw	r3,52(r2)
10010878:	e0bffe17 	ldw	r2,-8(fp)
1001087c:	10800c17 	ldw	r2,48(r2)
10010880:	18800526 	beq	r3,r2,10010898 <altera_avalon_jtag_uart_close+0x54>
10010884:	e0bffe17 	ldw	r2,-8(fp)
10010888:	10c00917 	ldw	r3,36(r2)
1001088c:	e0bffe17 	ldw	r2,-8(fp)
10010890:	10800117 	ldw	r2,4(r2)
10010894:	18bff136 	bltu	r3,r2,1001085c <__alt_data_end+0xf801085c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10010898:	0005883a 	mov	r2,zero
}
1001089c:	e037883a 	mov	sp,fp
100108a0:	df000017 	ldw	fp,0(sp)
100108a4:	dec00104 	addi	sp,sp,4
100108a8:	f800283a 	ret

100108ac <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
100108ac:	defffa04 	addi	sp,sp,-24
100108b0:	df000515 	stw	fp,20(sp)
100108b4:	df000504 	addi	fp,sp,20
100108b8:	e13ffd15 	stw	r4,-12(fp)
100108bc:	e17ffe15 	stw	r5,-8(fp)
100108c0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
100108c4:	00bff9c4 	movi	r2,-25
100108c8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
100108cc:	e0bffe17 	ldw	r2,-8(fp)
100108d0:	10da8060 	cmpeqi	r3,r2,27137
100108d4:	1800031e 	bne	r3,zero,100108e4 <altera_avalon_jtag_uart_ioctl+0x38>
100108d8:	109a80a0 	cmpeqi	r2,r2,27138
100108dc:	1000181e 	bne	r2,zero,10010940 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
100108e0:	00002906 	br	10010988 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
100108e4:	e0bffd17 	ldw	r2,-12(fp)
100108e8:	10c00117 	ldw	r3,4(r2)
100108ec:	00a00034 	movhi	r2,32768
100108f0:	10bfffc4 	addi	r2,r2,-1
100108f4:	18802126 	beq	r3,r2,1001097c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
100108f8:	e0bfff17 	ldw	r2,-4(fp)
100108fc:	10800017 	ldw	r2,0(r2)
10010900:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10010904:	e0bffc17 	ldw	r2,-16(fp)
10010908:	10800090 	cmplti	r2,r2,2
1001090c:	1000061e 	bne	r2,zero,10010928 <altera_avalon_jtag_uart_ioctl+0x7c>
10010910:	e0fffc17 	ldw	r3,-16(fp)
10010914:	00a00034 	movhi	r2,32768
10010918:	10bfffc4 	addi	r2,r2,-1
1001091c:	18800226 	beq	r3,r2,10010928 <altera_avalon_jtag_uart_ioctl+0x7c>
10010920:	e0bffc17 	ldw	r2,-16(fp)
10010924:	00000206 	br	10010930 <altera_avalon_jtag_uart_ioctl+0x84>
10010928:	00a00034 	movhi	r2,32768
1001092c:	10bfff84 	addi	r2,r2,-2
10010930:	e0fffd17 	ldw	r3,-12(fp)
10010934:	18800115 	stw	r2,4(r3)
      rc = 0;
10010938:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1001093c:	00000f06 	br	1001097c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10010940:	e0bffd17 	ldw	r2,-12(fp)
10010944:	10c00117 	ldw	r3,4(r2)
10010948:	00a00034 	movhi	r2,32768
1001094c:	10bfffc4 	addi	r2,r2,-1
10010950:	18800c26 	beq	r3,r2,10010984 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10010954:	e0bffd17 	ldw	r2,-12(fp)
10010958:	10c00917 	ldw	r3,36(r2)
1001095c:	e0bffd17 	ldw	r2,-12(fp)
10010960:	10800117 	ldw	r2,4(r2)
10010964:	1885803a 	cmpltu	r2,r3,r2
10010968:	10c03fcc 	andi	r3,r2,255
1001096c:	e0bfff17 	ldw	r2,-4(fp)
10010970:	10c00015 	stw	r3,0(r2)
      rc = 0;
10010974:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10010978:	00000206 	br	10010984 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
1001097c:	0001883a 	nop
10010980:	00000106 	br	10010988 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10010984:	0001883a 	nop

  default:
    break;
  }

  return rc;
10010988:	e0bffb17 	ldw	r2,-20(fp)
}
1001098c:	e037883a 	mov	sp,fp
10010990:	df000017 	ldw	fp,0(sp)
10010994:	dec00104 	addi	sp,sp,4
10010998:	f800283a 	ret

1001099c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1001099c:	defff304 	addi	sp,sp,-52
100109a0:	dfc00c15 	stw	ra,48(sp)
100109a4:	df000b15 	stw	fp,44(sp)
100109a8:	df000b04 	addi	fp,sp,44
100109ac:	e13ffc15 	stw	r4,-16(fp)
100109b0:	e17ffd15 	stw	r5,-12(fp)
100109b4:	e1bffe15 	stw	r6,-8(fp)
100109b8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
100109bc:	e0bffd17 	ldw	r2,-12(fp)
100109c0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100109c4:	00004706 	br	10010ae4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
100109c8:	e0bffc17 	ldw	r2,-16(fp)
100109cc:	10800a17 	ldw	r2,40(r2)
100109d0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
100109d4:	e0bffc17 	ldw	r2,-16(fp)
100109d8:	10800b17 	ldw	r2,44(r2)
100109dc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
100109e0:	e0fff717 	ldw	r3,-36(fp)
100109e4:	e0bff817 	ldw	r2,-32(fp)
100109e8:	18800536 	bltu	r3,r2,10010a00 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
100109ec:	e0fff717 	ldw	r3,-36(fp)
100109f0:	e0bff817 	ldw	r2,-32(fp)
100109f4:	1885c83a 	sub	r2,r3,r2
100109f8:	e0bff615 	stw	r2,-40(fp)
100109fc:	00000406 	br	10010a10 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10010a00:	00c20004 	movi	r3,2048
10010a04:	e0bff817 	ldw	r2,-32(fp)
10010a08:	1885c83a 	sub	r2,r3,r2
10010a0c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10010a10:	e0bff617 	ldw	r2,-40(fp)
10010a14:	10001e26 	beq	r2,zero,10010a90 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10010a18:	e0fffe17 	ldw	r3,-8(fp)
10010a1c:	e0bff617 	ldw	r2,-40(fp)
10010a20:	1880022e 	bgeu	r3,r2,10010a2c <altera_avalon_jtag_uart_read+0x90>
        n = space;
10010a24:	e0bffe17 	ldw	r2,-8(fp)
10010a28:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10010a2c:	e0bffc17 	ldw	r2,-16(fp)
10010a30:	10c00e04 	addi	r3,r2,56
10010a34:	e0bff817 	ldw	r2,-32(fp)
10010a38:	1885883a 	add	r2,r3,r2
10010a3c:	e1bff617 	ldw	r6,-40(fp)
10010a40:	100b883a 	mov	r5,r2
10010a44:	e13ff517 	ldw	r4,-44(fp)
10010a48:	00087880 	call	10008788 <memcpy>
      ptr   += n;
10010a4c:	e0fff517 	ldw	r3,-44(fp)
10010a50:	e0bff617 	ldw	r2,-40(fp)
10010a54:	1885883a 	add	r2,r3,r2
10010a58:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10010a5c:	e0fffe17 	ldw	r3,-8(fp)
10010a60:	e0bff617 	ldw	r2,-40(fp)
10010a64:	1885c83a 	sub	r2,r3,r2
10010a68:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010a6c:	e0fff817 	ldw	r3,-32(fp)
10010a70:	e0bff617 	ldw	r2,-40(fp)
10010a74:	1885883a 	add	r2,r3,r2
10010a78:	10c1ffcc 	andi	r3,r2,2047
10010a7c:	e0bffc17 	ldw	r2,-16(fp)
10010a80:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10010a84:	e0bffe17 	ldw	r2,-8(fp)
10010a88:	00bfcf16 	blt	zero,r2,100109c8 <__alt_data_end+0xf80109c8>
10010a8c:	00000106 	br	10010a94 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10010a90:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10010a94:	e0fff517 	ldw	r3,-44(fp)
10010a98:	e0bffd17 	ldw	r2,-12(fp)
10010a9c:	1880141e 	bne	r3,r2,10010af0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10010aa0:	e0bfff17 	ldw	r2,-4(fp)
10010aa4:	1090000c 	andi	r2,r2,16384
10010aa8:	1000131e 	bne	r2,zero,10010af8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10010aac:	0001883a 	nop
10010ab0:	e0bffc17 	ldw	r2,-16(fp)
10010ab4:	10c00a17 	ldw	r3,40(r2)
10010ab8:	e0bff717 	ldw	r2,-36(fp)
10010abc:	1880051e 	bne	r3,r2,10010ad4 <altera_avalon_jtag_uart_read+0x138>
10010ac0:	e0bffc17 	ldw	r2,-16(fp)
10010ac4:	10c00917 	ldw	r3,36(r2)
10010ac8:	e0bffc17 	ldw	r2,-16(fp)
10010acc:	10800117 	ldw	r2,4(r2)
10010ad0:	18bff736 	bltu	r3,r2,10010ab0 <__alt_data_end+0xf8010ab0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10010ad4:	e0bffc17 	ldw	r2,-16(fp)
10010ad8:	10c00a17 	ldw	r3,40(r2)
10010adc:	e0bff717 	ldw	r2,-36(fp)
10010ae0:	18800726 	beq	r3,r2,10010b00 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10010ae4:	e0bffe17 	ldw	r2,-8(fp)
10010ae8:	00bfb716 	blt	zero,r2,100109c8 <__alt_data_end+0xf80109c8>
10010aec:	00000506 	br	10010b04 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10010af0:	0001883a 	nop
10010af4:	00000306 	br	10010b04 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10010af8:	0001883a 	nop
10010afc:	00000106 	br	10010b04 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10010b00:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10010b04:	e0fff517 	ldw	r3,-44(fp)
10010b08:	e0bffd17 	ldw	r2,-12(fp)
10010b0c:	18801826 	beq	r3,r2,10010b70 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010b10:	0005303a 	rdctl	r2,status
10010b14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010b18:	e0fffb17 	ldw	r3,-20(fp)
10010b1c:	00bfff84 	movi	r2,-2
10010b20:	1884703a 	and	r2,r3,r2
10010b24:	1001703a 	wrctl	status,r2
  
  return context;
10010b28:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10010b2c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010b30:	e0bffc17 	ldw	r2,-16(fp)
10010b34:	10800817 	ldw	r2,32(r2)
10010b38:	10c00054 	ori	r3,r2,1
10010b3c:	e0bffc17 	ldw	r2,-16(fp)
10010b40:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010b44:	e0bffc17 	ldw	r2,-16(fp)
10010b48:	10800017 	ldw	r2,0(r2)
10010b4c:	10800104 	addi	r2,r2,4
10010b50:	1007883a 	mov	r3,r2
10010b54:	e0bffc17 	ldw	r2,-16(fp)
10010b58:	10800817 	ldw	r2,32(r2)
10010b5c:	18800035 	stwio	r2,0(r3)
10010b60:	e0bffa17 	ldw	r2,-24(fp)
10010b64:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010b68:	e0bff917 	ldw	r2,-28(fp)
10010b6c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10010b70:	e0fff517 	ldw	r3,-44(fp)
10010b74:	e0bffd17 	ldw	r2,-12(fp)
10010b78:	18800426 	beq	r3,r2,10010b8c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10010b7c:	e0fff517 	ldw	r3,-44(fp)
10010b80:	e0bffd17 	ldw	r2,-12(fp)
10010b84:	1885c83a 	sub	r2,r3,r2
10010b88:	00000606 	br	10010ba4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10010b8c:	e0bfff17 	ldw	r2,-4(fp)
10010b90:	1090000c 	andi	r2,r2,16384
10010b94:	10000226 	beq	r2,zero,10010ba0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10010b98:	00bffd44 	movi	r2,-11
10010b9c:	00000106 	br	10010ba4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10010ba0:	00bffec4 	movi	r2,-5
}
10010ba4:	e037883a 	mov	sp,fp
10010ba8:	dfc00117 	ldw	ra,4(sp)
10010bac:	df000017 	ldw	fp,0(sp)
10010bb0:	dec00204 	addi	sp,sp,8
10010bb4:	f800283a 	ret

10010bb8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10010bb8:	defff304 	addi	sp,sp,-52
10010bbc:	dfc00c15 	stw	ra,48(sp)
10010bc0:	df000b15 	stw	fp,44(sp)
10010bc4:	df000b04 	addi	fp,sp,44
10010bc8:	e13ffc15 	stw	r4,-16(fp)
10010bcc:	e17ffd15 	stw	r5,-12(fp)
10010bd0:	e1bffe15 	stw	r6,-8(fp)
10010bd4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10010bd8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10010bdc:	e0bffd17 	ldw	r2,-12(fp)
10010be0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10010be4:	00003706 	br	10010cc4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10010be8:	e0bffc17 	ldw	r2,-16(fp)
10010bec:	10800c17 	ldw	r2,48(r2)
10010bf0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10010bf4:	e0bffc17 	ldw	r2,-16(fp)
10010bf8:	10800d17 	ldw	r2,52(r2)
10010bfc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10010c00:	e0fff917 	ldw	r3,-28(fp)
10010c04:	e0bff517 	ldw	r2,-44(fp)
10010c08:	1880062e 	bgeu	r3,r2,10010c24 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10010c0c:	e0fff517 	ldw	r3,-44(fp)
10010c10:	e0bff917 	ldw	r2,-28(fp)
10010c14:	1885c83a 	sub	r2,r3,r2
10010c18:	10bfffc4 	addi	r2,r2,-1
10010c1c:	e0bff615 	stw	r2,-40(fp)
10010c20:	00000b06 	br	10010c50 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10010c24:	e0bff517 	ldw	r2,-44(fp)
10010c28:	10000526 	beq	r2,zero,10010c40 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10010c2c:	00c20004 	movi	r3,2048
10010c30:	e0bff917 	ldw	r2,-28(fp)
10010c34:	1885c83a 	sub	r2,r3,r2
10010c38:	e0bff615 	stw	r2,-40(fp)
10010c3c:	00000406 	br	10010c50 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10010c40:	00c1ffc4 	movi	r3,2047
10010c44:	e0bff917 	ldw	r2,-28(fp)
10010c48:	1885c83a 	sub	r2,r3,r2
10010c4c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10010c50:	e0bff617 	ldw	r2,-40(fp)
10010c54:	10001e26 	beq	r2,zero,10010cd0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10010c58:	e0fffe17 	ldw	r3,-8(fp)
10010c5c:	e0bff617 	ldw	r2,-40(fp)
10010c60:	1880022e 	bgeu	r3,r2,10010c6c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10010c64:	e0bffe17 	ldw	r2,-8(fp)
10010c68:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10010c6c:	e0bffc17 	ldw	r2,-16(fp)
10010c70:	10c20e04 	addi	r3,r2,2104
10010c74:	e0bff917 	ldw	r2,-28(fp)
10010c78:	1885883a 	add	r2,r3,r2
10010c7c:	e1bff617 	ldw	r6,-40(fp)
10010c80:	e17ffd17 	ldw	r5,-12(fp)
10010c84:	1009883a 	mov	r4,r2
10010c88:	00087880 	call	10008788 <memcpy>
      ptr   += n;
10010c8c:	e0fffd17 	ldw	r3,-12(fp)
10010c90:	e0bff617 	ldw	r2,-40(fp)
10010c94:	1885883a 	add	r2,r3,r2
10010c98:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10010c9c:	e0fffe17 	ldw	r3,-8(fp)
10010ca0:	e0bff617 	ldw	r2,-40(fp)
10010ca4:	1885c83a 	sub	r2,r3,r2
10010ca8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010cac:	e0fff917 	ldw	r3,-28(fp)
10010cb0:	e0bff617 	ldw	r2,-40(fp)
10010cb4:	1885883a 	add	r2,r3,r2
10010cb8:	10c1ffcc 	andi	r3,r2,2047
10010cbc:	e0bffc17 	ldw	r2,-16(fp)
10010cc0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10010cc4:	e0bffe17 	ldw	r2,-8(fp)
10010cc8:	00bfc716 	blt	zero,r2,10010be8 <__alt_data_end+0xf8010be8>
10010ccc:	00000106 	br	10010cd4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10010cd0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010cd4:	0005303a 	rdctl	r2,status
10010cd8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010cdc:	e0fffb17 	ldw	r3,-20(fp)
10010ce0:	00bfff84 	movi	r2,-2
10010ce4:	1884703a 	and	r2,r3,r2
10010ce8:	1001703a 	wrctl	status,r2
  
  return context;
10010cec:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10010cf0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010cf4:	e0bffc17 	ldw	r2,-16(fp)
10010cf8:	10800817 	ldw	r2,32(r2)
10010cfc:	10c00094 	ori	r3,r2,2
10010d00:	e0bffc17 	ldw	r2,-16(fp)
10010d04:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010d08:	e0bffc17 	ldw	r2,-16(fp)
10010d0c:	10800017 	ldw	r2,0(r2)
10010d10:	10800104 	addi	r2,r2,4
10010d14:	1007883a 	mov	r3,r2
10010d18:	e0bffc17 	ldw	r2,-16(fp)
10010d1c:	10800817 	ldw	r2,32(r2)
10010d20:	18800035 	stwio	r2,0(r3)
10010d24:	e0bffa17 	ldw	r2,-24(fp)
10010d28:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010d2c:	e0bff817 	ldw	r2,-32(fp)
10010d30:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10010d34:	e0bffe17 	ldw	r2,-8(fp)
10010d38:	0080100e 	bge	zero,r2,10010d7c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10010d3c:	e0bfff17 	ldw	r2,-4(fp)
10010d40:	1090000c 	andi	r2,r2,16384
10010d44:	1000101e 	bne	r2,zero,10010d88 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10010d48:	0001883a 	nop
10010d4c:	e0bffc17 	ldw	r2,-16(fp)
10010d50:	10c00d17 	ldw	r3,52(r2)
10010d54:	e0bff517 	ldw	r2,-44(fp)
10010d58:	1880051e 	bne	r3,r2,10010d70 <altera_avalon_jtag_uart_write+0x1b8>
10010d5c:	e0bffc17 	ldw	r2,-16(fp)
10010d60:	10c00917 	ldw	r3,36(r2)
10010d64:	e0bffc17 	ldw	r2,-16(fp)
10010d68:	10800117 	ldw	r2,4(r2)
10010d6c:	18bff736 	bltu	r3,r2,10010d4c <__alt_data_end+0xf8010d4c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10010d70:	e0bffc17 	ldw	r2,-16(fp)
10010d74:	10800917 	ldw	r2,36(r2)
10010d78:	1000051e 	bne	r2,zero,10010d90 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10010d7c:	e0bffe17 	ldw	r2,-8(fp)
10010d80:	00bfd016 	blt	zero,r2,10010cc4 <__alt_data_end+0xf8010cc4>
10010d84:	00000306 	br	10010d94 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10010d88:	0001883a 	nop
10010d8c:	00000106 	br	10010d94 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10010d90:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10010d94:	e0fffd17 	ldw	r3,-12(fp)
10010d98:	e0bff717 	ldw	r2,-36(fp)
10010d9c:	18800426 	beq	r3,r2,10010db0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10010da0:	e0fffd17 	ldw	r3,-12(fp)
10010da4:	e0bff717 	ldw	r2,-36(fp)
10010da8:	1885c83a 	sub	r2,r3,r2
10010dac:	00000606 	br	10010dc8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10010db0:	e0bfff17 	ldw	r2,-4(fp)
10010db4:	1090000c 	andi	r2,r2,16384
10010db8:	10000226 	beq	r2,zero,10010dc4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10010dbc:	00bffd44 	movi	r2,-11
10010dc0:	00000106 	br	10010dc8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10010dc4:	00bffec4 	movi	r2,-5
}
10010dc8:	e037883a 	mov	sp,fp
10010dcc:	dfc00117 	ldw	ra,4(sp)
10010dd0:	df000017 	ldw	fp,0(sp)
10010dd4:	dec00204 	addi	sp,sp,8
10010dd8:	f800283a 	ret

10010ddc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10010ddc:	defff504 	addi	sp,sp,-44
10010de0:	df000a15 	stw	fp,40(sp)
10010de4:	df000a04 	addi	fp,sp,40
10010de8:	e13ffc15 	stw	r4,-16(fp)
10010dec:	e17ffd15 	stw	r5,-12(fp)
10010df0:	e1bffe15 	stw	r6,-8(fp)
10010df4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10010df8:	e03ff615 	stw	zero,-40(fp)
10010dfc:	d0a6de17 	ldw	r2,-25736(gp)
  
  if (alt_ticks_per_second ())
10010e00:	10003c26 	beq	r2,zero,10010ef4 <alt_alarm_start+0x118>
  {
    if (alarm)
10010e04:	e0bffc17 	ldw	r2,-16(fp)
10010e08:	10003826 	beq	r2,zero,10010eec <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10010e0c:	e0bffc17 	ldw	r2,-16(fp)
10010e10:	e0fffe17 	ldw	r3,-8(fp)
10010e14:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10010e18:	e0bffc17 	ldw	r2,-16(fp)
10010e1c:	e0ffff17 	ldw	r3,-4(fp)
10010e20:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010e24:	0005303a 	rdctl	r2,status
10010e28:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010e2c:	e0fff917 	ldw	r3,-28(fp)
10010e30:	00bfff84 	movi	r2,-2
10010e34:	1884703a 	and	r2,r3,r2
10010e38:	1001703a 	wrctl	status,r2
  
  return context;
10010e3c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10010e40:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10010e44:	d0a6df17 	ldw	r2,-25732(gp)
      
      current_nticks = alt_nticks();
10010e48:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10010e4c:	e0fffd17 	ldw	r3,-12(fp)
10010e50:	e0bff617 	ldw	r2,-40(fp)
10010e54:	1885883a 	add	r2,r3,r2
10010e58:	10c00044 	addi	r3,r2,1
10010e5c:	e0bffc17 	ldw	r2,-16(fp)
10010e60:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10010e64:	e0bffc17 	ldw	r2,-16(fp)
10010e68:	10c00217 	ldw	r3,8(r2)
10010e6c:	e0bff617 	ldw	r2,-40(fp)
10010e70:	1880042e 	bgeu	r3,r2,10010e84 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10010e74:	e0bffc17 	ldw	r2,-16(fp)
10010e78:	00c00044 	movi	r3,1
10010e7c:	10c00405 	stb	r3,16(r2)
10010e80:	00000206 	br	10010e8c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10010e84:	e0bffc17 	ldw	r2,-16(fp)
10010e88:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10010e8c:	e0bffc17 	ldw	r2,-16(fp)
10010e90:	d0e00e04 	addi	r3,gp,-32712
10010e94:	e0fffa15 	stw	r3,-24(fp)
10010e98:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10010e9c:	e0bffb17 	ldw	r2,-20(fp)
10010ea0:	e0fffa17 	ldw	r3,-24(fp)
10010ea4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10010ea8:	e0bffa17 	ldw	r2,-24(fp)
10010eac:	10c00017 	ldw	r3,0(r2)
10010eb0:	e0bffb17 	ldw	r2,-20(fp)
10010eb4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10010eb8:	e0bffa17 	ldw	r2,-24(fp)
10010ebc:	10800017 	ldw	r2,0(r2)
10010ec0:	e0fffb17 	ldw	r3,-20(fp)
10010ec4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10010ec8:	e0bffa17 	ldw	r2,-24(fp)
10010ecc:	e0fffb17 	ldw	r3,-20(fp)
10010ed0:	10c00015 	stw	r3,0(r2)
10010ed4:	e0bff817 	ldw	r2,-32(fp)
10010ed8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010edc:	e0bff717 	ldw	r2,-36(fp)
10010ee0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10010ee4:	0005883a 	mov	r2,zero
10010ee8:	00000306 	br	10010ef8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10010eec:	00bffa84 	movi	r2,-22
10010ef0:	00000106 	br	10010ef8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10010ef4:	00bfde84 	movi	r2,-134
  }
}
10010ef8:	e037883a 	mov	sp,fp
10010efc:	df000017 	ldw	fp,0(sp)
10010f00:	dec00104 	addi	sp,sp,4
10010f04:	f800283a 	ret

10010f08 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10010f08:	defffa04 	addi	sp,sp,-24
10010f0c:	dfc00515 	stw	ra,20(sp)
10010f10:	df000415 	stw	fp,16(sp)
10010f14:	df000404 	addi	fp,sp,16
10010f18:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
10010f1c:	00800244 	movi	r2,9
10010f20:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10010f24:	014003f4 	movhi	r5,15
10010f28:	29509004 	addi	r5,r5,16960
10010f2c:	e13ffd17 	ldw	r4,-12(fp)
10010f30:	0002b6c0 	call	10002b6c <__mulsi3>
10010f34:	100b883a 	mov	r5,r2
10010f38:	0100bef4 	movhi	r4,763
10010f3c:	213c2004 	addi	r4,r4,-3968
10010f40:	0002ab00 	call	10002ab0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10010f44:	100b883a 	mov	r5,r2
10010f48:	01200034 	movhi	r4,32768
10010f4c:	213fffc4 	addi	r4,r4,-1
10010f50:	0002ab00 	call	10002ab0 <__udivsi3>
10010f54:	100b883a 	mov	r5,r2
10010f58:	e13fff17 	ldw	r4,-4(fp)
10010f5c:	0002ab00 	call	10002ab0 <__udivsi3>
10010f60:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10010f64:	e0bffe17 	ldw	r2,-8(fp)
10010f68:	10002a26 	beq	r2,zero,10011014 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10010f6c:	e03ffc15 	stw	zero,-16(fp)
10010f70:	00001706 	br	10010fd0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10010f74:	00a00034 	movhi	r2,32768
10010f78:	10bfffc4 	addi	r2,r2,-1
10010f7c:	10bfffc4 	addi	r2,r2,-1
10010f80:	103ffe1e 	bne	r2,zero,10010f7c <__alt_data_end+0xf8010f7c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10010f84:	014003f4 	movhi	r5,15
10010f88:	29509004 	addi	r5,r5,16960
10010f8c:	e13ffd17 	ldw	r4,-12(fp)
10010f90:	0002b6c0 	call	10002b6c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10010f94:	100b883a 	mov	r5,r2
10010f98:	0100bef4 	movhi	r4,763
10010f9c:	213c2004 	addi	r4,r4,-3968
10010fa0:	0002ab00 	call	10002ab0 <__udivsi3>
10010fa4:	100b883a 	mov	r5,r2
10010fa8:	01200034 	movhi	r4,32768
10010fac:	213fffc4 	addi	r4,r4,-1
10010fb0:	0002ab00 	call	10002ab0 <__udivsi3>
10010fb4:	1007883a 	mov	r3,r2
10010fb8:	e0bfff17 	ldw	r2,-4(fp)
10010fbc:	10c5c83a 	sub	r2,r2,r3
10010fc0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10010fc4:	e0bffc17 	ldw	r2,-16(fp)
10010fc8:	10800044 	addi	r2,r2,1
10010fcc:	e0bffc15 	stw	r2,-16(fp)
10010fd0:	e0fffc17 	ldw	r3,-16(fp)
10010fd4:	e0bffe17 	ldw	r2,-8(fp)
10010fd8:	18bfe616 	blt	r3,r2,10010f74 <__alt_data_end+0xf8010f74>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10010fdc:	014003f4 	movhi	r5,15
10010fe0:	29509004 	addi	r5,r5,16960
10010fe4:	e13ffd17 	ldw	r4,-12(fp)
10010fe8:	0002b6c0 	call	10002b6c <__mulsi3>
10010fec:	100b883a 	mov	r5,r2
10010ff0:	0100bef4 	movhi	r4,763
10010ff4:	213c2004 	addi	r4,r4,-3968
10010ff8:	0002ab00 	call	10002ab0 <__udivsi3>
10010ffc:	e17fff17 	ldw	r5,-4(fp)
10011000:	1009883a 	mov	r4,r2
10011004:	0002b6c0 	call	10002b6c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10011008:	10bfffc4 	addi	r2,r2,-1
1001100c:	103ffe1e 	bne	r2,zero,10011008 <__alt_data_end+0xf8011008>
10011010:	00000d06 	br	10011048 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10011014:	014003f4 	movhi	r5,15
10011018:	29509004 	addi	r5,r5,16960
1001101c:	e13ffd17 	ldw	r4,-12(fp)
10011020:	0002b6c0 	call	10002b6c <__mulsi3>
10011024:	100b883a 	mov	r5,r2
10011028:	0100bef4 	movhi	r4,763
1001102c:	213c2004 	addi	r4,r4,-3968
10011030:	0002ab00 	call	10002ab0 <__udivsi3>
10011034:	e17fff17 	ldw	r5,-4(fp)
10011038:	1009883a 	mov	r4,r2
1001103c:	0002b6c0 	call	10002b6c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10011040:	10bfffc4 	addi	r2,r2,-1
10011044:	00bffe16 	blt	zero,r2,10011040 <__alt_data_end+0xf8011040>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10011048:	0005883a 	mov	r2,zero
}
1001104c:	e037883a 	mov	sp,fp
10011050:	dfc00117 	ldw	ra,4(sp)
10011054:	df000017 	ldw	fp,0(sp)
10011058:	dec00204 	addi	sp,sp,8
1001105c:	f800283a 	ret

10011060 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10011060:	deffff04 	addi	sp,sp,-4
10011064:	df000015 	stw	fp,0(sp)
10011068:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1001106c:	0001883a 	nop
10011070:	e037883a 	mov	sp,fp
10011074:	df000017 	ldw	fp,0(sp)
10011078:	dec00104 	addi	sp,sp,4
1001107c:	f800283a 	ret

10011080 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011080:	defffe04 	addi	sp,sp,-8
10011084:	dfc00115 	stw	ra,4(sp)
10011088:	df000015 	stw	fp,0(sp)
1001108c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011090:	d0a00b17 	ldw	r2,-32724(gp)
10011094:	10000326 	beq	r2,zero,100110a4 <alt_get_errno+0x24>
10011098:	d0a00b17 	ldw	r2,-32724(gp)
1001109c:	103ee83a 	callr	r2
100110a0:	00000106 	br	100110a8 <alt_get_errno+0x28>
100110a4:	d0a6d904 	addi	r2,gp,-25756
}
100110a8:	e037883a 	mov	sp,fp
100110ac:	dfc00117 	ldw	ra,4(sp)
100110b0:	df000017 	ldw	fp,0(sp)
100110b4:	dec00204 	addi	sp,sp,8
100110b8:	f800283a 	ret

100110bc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
100110bc:	defffa04 	addi	sp,sp,-24
100110c0:	dfc00515 	stw	ra,20(sp)
100110c4:	df000415 	stw	fp,16(sp)
100110c8:	df000404 	addi	fp,sp,16
100110cc:	e13ffe15 	stw	r4,-8(fp)
100110d0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
100110d4:	e0bffe17 	ldw	r2,-8(fp)
100110d8:	10000326 	beq	r2,zero,100110e8 <alt_dev_llist_insert+0x2c>
100110dc:	e0bffe17 	ldw	r2,-8(fp)
100110e0:	10800217 	ldw	r2,8(r2)
100110e4:	1000061e 	bne	r2,zero,10011100 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
100110e8:	00110800 	call	10011080 <alt_get_errno>
100110ec:	1007883a 	mov	r3,r2
100110f0:	00800584 	movi	r2,22
100110f4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
100110f8:	00bffa84 	movi	r2,-22
100110fc:	00001306 	br	1001114c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10011100:	e0bffe17 	ldw	r2,-8(fp)
10011104:	e0ffff17 	ldw	r3,-4(fp)
10011108:	e0fffc15 	stw	r3,-16(fp)
1001110c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10011110:	e0bffd17 	ldw	r2,-12(fp)
10011114:	e0fffc17 	ldw	r3,-16(fp)
10011118:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1001111c:	e0bffc17 	ldw	r2,-16(fp)
10011120:	10c00017 	ldw	r3,0(r2)
10011124:	e0bffd17 	ldw	r2,-12(fp)
10011128:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1001112c:	e0bffc17 	ldw	r2,-16(fp)
10011130:	10800017 	ldw	r2,0(r2)
10011134:	e0fffd17 	ldw	r3,-12(fp)
10011138:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1001113c:	e0bffc17 	ldw	r2,-16(fp)
10011140:	e0fffd17 	ldw	r3,-12(fp)
10011144:	10c00015 	stw	r3,0(r2)

  return 0;  
10011148:	0005883a 	mov	r2,zero
}
1001114c:	e037883a 	mov	sp,fp
10011150:	dfc00117 	ldw	ra,4(sp)
10011154:	df000017 	ldw	fp,0(sp)
10011158:	dec00204 	addi	sp,sp,8
1001115c:	f800283a 	ret

10011160 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10011160:	defffd04 	addi	sp,sp,-12
10011164:	dfc00215 	stw	ra,8(sp)
10011168:	df000115 	stw	fp,4(sp)
1001116c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10011170:	00840074 	movhi	r2,4097
10011174:	10884504 	addi	r2,r2,8468
10011178:	e0bfff15 	stw	r2,-4(fp)
1001117c:	00000606 	br	10011198 <_do_ctors+0x38>
        (*ctor) (); 
10011180:	e0bfff17 	ldw	r2,-4(fp)
10011184:	10800017 	ldw	r2,0(r2)
10011188:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1001118c:	e0bfff17 	ldw	r2,-4(fp)
10011190:	10bfff04 	addi	r2,r2,-4
10011194:	e0bfff15 	stw	r2,-4(fp)
10011198:	e0ffff17 	ldw	r3,-4(fp)
1001119c:	00840074 	movhi	r2,4097
100111a0:	10884604 	addi	r2,r2,8472
100111a4:	18bff62e 	bgeu	r3,r2,10011180 <__alt_data_end+0xf8011180>
        (*ctor) (); 
}
100111a8:	0001883a 	nop
100111ac:	e037883a 	mov	sp,fp
100111b0:	dfc00117 	ldw	ra,4(sp)
100111b4:	df000017 	ldw	fp,0(sp)
100111b8:	dec00204 	addi	sp,sp,8
100111bc:	f800283a 	ret

100111c0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
100111c0:	defffd04 	addi	sp,sp,-12
100111c4:	dfc00215 	stw	ra,8(sp)
100111c8:	df000115 	stw	fp,4(sp)
100111cc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100111d0:	00840074 	movhi	r2,4097
100111d4:	10884504 	addi	r2,r2,8468
100111d8:	e0bfff15 	stw	r2,-4(fp)
100111dc:	00000606 	br	100111f8 <_do_dtors+0x38>
        (*dtor) (); 
100111e0:	e0bfff17 	ldw	r2,-4(fp)
100111e4:	10800017 	ldw	r2,0(r2)
100111e8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100111ec:	e0bfff17 	ldw	r2,-4(fp)
100111f0:	10bfff04 	addi	r2,r2,-4
100111f4:	e0bfff15 	stw	r2,-4(fp)
100111f8:	e0ffff17 	ldw	r3,-4(fp)
100111fc:	00840074 	movhi	r2,4097
10011200:	10884604 	addi	r2,r2,8472
10011204:	18bff62e 	bgeu	r3,r2,100111e0 <__alt_data_end+0xf80111e0>
        (*dtor) (); 
}
10011208:	0001883a 	nop
1001120c:	e037883a 	mov	sp,fp
10011210:	dfc00117 	ldw	ra,4(sp)
10011214:	df000017 	ldw	fp,0(sp)
10011218:	dec00204 	addi	sp,sp,8
1001121c:	f800283a 	ret

10011220 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10011220:	deffff04 	addi	sp,sp,-4
10011224:	df000015 	stw	fp,0(sp)
10011228:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1001122c:	0001883a 	nop
10011230:	e037883a 	mov	sp,fp
10011234:	df000017 	ldw	fp,0(sp)
10011238:	dec00104 	addi	sp,sp,4
1001123c:	f800283a 	ret

10011240 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10011240:	defff904 	addi	sp,sp,-28
10011244:	dfc00615 	stw	ra,24(sp)
10011248:	df000515 	stw	fp,20(sp)
1001124c:	df000504 	addi	fp,sp,20
10011250:	e13ffc15 	stw	r4,-16(fp)
10011254:	e17ffd15 	stw	r5,-12(fp)
10011258:	e1bffe15 	stw	r6,-8(fp)
1001125c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10011260:	e0800217 	ldw	r2,8(fp)
10011264:	d8800015 	stw	r2,0(sp)
10011268:	e1ffff17 	ldw	r7,-4(fp)
1001126c:	e1bffe17 	ldw	r6,-8(fp)
10011270:	e17ffd17 	ldw	r5,-12(fp)
10011274:	e13ffc17 	ldw	r4,-16(fp)
10011278:	00113f00 	call	100113f0 <alt_iic_isr_register>
}  
1001127c:	e037883a 	mov	sp,fp
10011280:	dfc00117 	ldw	ra,4(sp)
10011284:	df000017 	ldw	fp,0(sp)
10011288:	dec00204 	addi	sp,sp,8
1001128c:	f800283a 	ret

10011290 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10011290:	defff904 	addi	sp,sp,-28
10011294:	df000615 	stw	fp,24(sp)
10011298:	df000604 	addi	fp,sp,24
1001129c:	e13ffe15 	stw	r4,-8(fp)
100112a0:	e17fff15 	stw	r5,-4(fp)
100112a4:	e0bfff17 	ldw	r2,-4(fp)
100112a8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100112ac:	0005303a 	rdctl	r2,status
100112b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100112b4:	e0fffb17 	ldw	r3,-20(fp)
100112b8:	00bfff84 	movi	r2,-2
100112bc:	1884703a 	and	r2,r3,r2
100112c0:	1001703a 	wrctl	status,r2
  
  return context;
100112c4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100112c8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
100112cc:	00c00044 	movi	r3,1
100112d0:	e0bffa17 	ldw	r2,-24(fp)
100112d4:	1884983a 	sll	r2,r3,r2
100112d8:	1007883a 	mov	r3,r2
100112dc:	d0a6dd17 	ldw	r2,-25740(gp)
100112e0:	1884b03a 	or	r2,r3,r2
100112e4:	d0a6dd15 	stw	r2,-25740(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100112e8:	d0a6dd17 	ldw	r2,-25740(gp)
100112ec:	100170fa 	wrctl	ienable,r2
100112f0:	e0bffc17 	ldw	r2,-16(fp)
100112f4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100112f8:	e0bffd17 	ldw	r2,-12(fp)
100112fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10011300:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10011304:	0001883a 	nop
}
10011308:	e037883a 	mov	sp,fp
1001130c:	df000017 	ldw	fp,0(sp)
10011310:	dec00104 	addi	sp,sp,4
10011314:	f800283a 	ret

10011318 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10011318:	defff904 	addi	sp,sp,-28
1001131c:	df000615 	stw	fp,24(sp)
10011320:	df000604 	addi	fp,sp,24
10011324:	e13ffe15 	stw	r4,-8(fp)
10011328:	e17fff15 	stw	r5,-4(fp)
1001132c:	e0bfff17 	ldw	r2,-4(fp)
10011330:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011334:	0005303a 	rdctl	r2,status
10011338:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001133c:	e0fffb17 	ldw	r3,-20(fp)
10011340:	00bfff84 	movi	r2,-2
10011344:	1884703a 	and	r2,r3,r2
10011348:	1001703a 	wrctl	status,r2
  
  return context;
1001134c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10011350:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10011354:	00c00044 	movi	r3,1
10011358:	e0bffa17 	ldw	r2,-24(fp)
1001135c:	1884983a 	sll	r2,r3,r2
10011360:	0084303a 	nor	r2,zero,r2
10011364:	1007883a 	mov	r3,r2
10011368:	d0a6dd17 	ldw	r2,-25740(gp)
1001136c:	1884703a 	and	r2,r3,r2
10011370:	d0a6dd15 	stw	r2,-25740(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10011374:	d0a6dd17 	ldw	r2,-25740(gp)
10011378:	100170fa 	wrctl	ienable,r2
1001137c:	e0bffc17 	ldw	r2,-16(fp)
10011380:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011384:	e0bffd17 	ldw	r2,-12(fp)
10011388:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1001138c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10011390:	0001883a 	nop
}
10011394:	e037883a 	mov	sp,fp
10011398:	df000017 	ldw	fp,0(sp)
1001139c:	dec00104 	addi	sp,sp,4
100113a0:	f800283a 	ret

100113a4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
100113a4:	defffc04 	addi	sp,sp,-16
100113a8:	df000315 	stw	fp,12(sp)
100113ac:	df000304 	addi	fp,sp,12
100113b0:	e13ffe15 	stw	r4,-8(fp)
100113b4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
100113b8:	000530fa 	rdctl	r2,ienable
100113bc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
100113c0:	00c00044 	movi	r3,1
100113c4:	e0bfff17 	ldw	r2,-4(fp)
100113c8:	1884983a 	sll	r2,r3,r2
100113cc:	1007883a 	mov	r3,r2
100113d0:	e0bffd17 	ldw	r2,-12(fp)
100113d4:	1884703a 	and	r2,r3,r2
100113d8:	1004c03a 	cmpne	r2,r2,zero
100113dc:	10803fcc 	andi	r2,r2,255
}
100113e0:	e037883a 	mov	sp,fp
100113e4:	df000017 	ldw	fp,0(sp)
100113e8:	dec00104 	addi	sp,sp,4
100113ec:	f800283a 	ret

100113f0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100113f0:	defff504 	addi	sp,sp,-44
100113f4:	dfc00a15 	stw	ra,40(sp)
100113f8:	df000915 	stw	fp,36(sp)
100113fc:	df000904 	addi	fp,sp,36
10011400:	e13ffc15 	stw	r4,-16(fp)
10011404:	e17ffd15 	stw	r5,-12(fp)
10011408:	e1bffe15 	stw	r6,-8(fp)
1001140c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10011410:	00bffa84 	movi	r2,-22
10011414:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10011418:	e0bffd17 	ldw	r2,-12(fp)
1001141c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10011420:	e0bff817 	ldw	r2,-32(fp)
10011424:	10800808 	cmpgei	r2,r2,32
10011428:	1000271e 	bne	r2,zero,100114c8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001142c:	0005303a 	rdctl	r2,status
10011430:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011434:	e0fffb17 	ldw	r3,-20(fp)
10011438:	00bfff84 	movi	r2,-2
1001143c:	1884703a 	and	r2,r3,r2
10011440:	1001703a 	wrctl	status,r2
  
  return context;
10011444:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10011448:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
1001144c:	00840074 	movhi	r2,4097
10011450:	10988a04 	addi	r2,r2,25128
10011454:	e0fff817 	ldw	r3,-32(fp)
10011458:	180690fa 	slli	r3,r3,3
1001145c:	10c5883a 	add	r2,r2,r3
10011460:	e0fffe17 	ldw	r3,-8(fp)
10011464:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10011468:	00840074 	movhi	r2,4097
1001146c:	10988a04 	addi	r2,r2,25128
10011470:	e0fff817 	ldw	r3,-32(fp)
10011474:	180690fa 	slli	r3,r3,3
10011478:	10c5883a 	add	r2,r2,r3
1001147c:	10800104 	addi	r2,r2,4
10011480:	e0ffff17 	ldw	r3,-4(fp)
10011484:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10011488:	e0bffe17 	ldw	r2,-8(fp)
1001148c:	10000526 	beq	r2,zero,100114a4 <alt_iic_isr_register+0xb4>
10011490:	e0bff817 	ldw	r2,-32(fp)
10011494:	100b883a 	mov	r5,r2
10011498:	e13ffc17 	ldw	r4,-16(fp)
1001149c:	00112900 	call	10011290 <alt_ic_irq_enable>
100114a0:	00000406 	br	100114b4 <alt_iic_isr_register+0xc4>
100114a4:	e0bff817 	ldw	r2,-32(fp)
100114a8:	100b883a 	mov	r5,r2
100114ac:	e13ffc17 	ldw	r4,-16(fp)
100114b0:	00113180 	call	10011318 <alt_ic_irq_disable>
100114b4:	e0bff715 	stw	r2,-36(fp)
100114b8:	e0bffa17 	ldw	r2,-24(fp)
100114bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100114c0:	e0bff917 	ldw	r2,-28(fp)
100114c4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
100114c8:	e0bff717 	ldw	r2,-36(fp)
}
100114cc:	e037883a 	mov	sp,fp
100114d0:	dfc00117 	ldw	ra,4(sp)
100114d4:	df000017 	ldw	fp,0(sp)
100114d8:	dec00204 	addi	sp,sp,8
100114dc:	f800283a 	ret

100114e0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
100114e0:	defff804 	addi	sp,sp,-32
100114e4:	dfc00715 	stw	ra,28(sp)
100114e8:	df000615 	stw	fp,24(sp)
100114ec:	dc000515 	stw	r16,20(sp)
100114f0:	df000604 	addi	fp,sp,24
100114f4:	e13ffb15 	stw	r4,-20(fp)
100114f8:	e17ffc15 	stw	r5,-16(fp)
100114fc:	e1bffd15 	stw	r6,-12(fp)
10011500:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10011504:	e1bffe17 	ldw	r6,-8(fp)
10011508:	e17ffd17 	ldw	r5,-12(fp)
1001150c:	e13ffc17 	ldw	r4,-16(fp)
10011510:	00117680 	call	10011768 <open>
10011514:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10011518:	e0bffa17 	ldw	r2,-24(fp)
1001151c:	10002216 	blt	r2,zero,100115a8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10011520:	04040074 	movhi	r16,4097
10011524:	840d2704 	addi	r16,r16,13468
10011528:	e0bffa17 	ldw	r2,-24(fp)
1001152c:	01400304 	movi	r5,12
10011530:	1009883a 	mov	r4,r2
10011534:	0002b6c0 	call	10002b6c <__mulsi3>
10011538:	8085883a 	add	r2,r16,r2
1001153c:	10c00017 	ldw	r3,0(r2)
10011540:	e0bffb17 	ldw	r2,-20(fp)
10011544:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10011548:	04040074 	movhi	r16,4097
1001154c:	840d2704 	addi	r16,r16,13468
10011550:	e0bffa17 	ldw	r2,-24(fp)
10011554:	01400304 	movi	r5,12
10011558:	1009883a 	mov	r4,r2
1001155c:	0002b6c0 	call	10002b6c <__mulsi3>
10011560:	8085883a 	add	r2,r16,r2
10011564:	10800104 	addi	r2,r2,4
10011568:	10c00017 	ldw	r3,0(r2)
1001156c:	e0bffb17 	ldw	r2,-20(fp)
10011570:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10011574:	04040074 	movhi	r16,4097
10011578:	840d2704 	addi	r16,r16,13468
1001157c:	e0bffa17 	ldw	r2,-24(fp)
10011580:	01400304 	movi	r5,12
10011584:	1009883a 	mov	r4,r2
10011588:	0002b6c0 	call	10002b6c <__mulsi3>
1001158c:	8085883a 	add	r2,r16,r2
10011590:	10800204 	addi	r2,r2,8
10011594:	10c00017 	ldw	r3,0(r2)
10011598:	e0bffb17 	ldw	r2,-20(fp)
1001159c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
100115a0:	e13ffa17 	ldw	r4,-24(fp)
100115a4:	001001c0 	call	1001001c <alt_release_fd>
  }
} 
100115a8:	0001883a 	nop
100115ac:	e6ffff04 	addi	sp,fp,-4
100115b0:	dfc00217 	ldw	ra,8(sp)
100115b4:	df000117 	ldw	fp,4(sp)
100115b8:	dc000017 	ldw	r16,0(sp)
100115bc:	dec00304 	addi	sp,sp,12
100115c0:	f800283a 	ret

100115c4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
100115c4:	defffb04 	addi	sp,sp,-20
100115c8:	dfc00415 	stw	ra,16(sp)
100115cc:	df000315 	stw	fp,12(sp)
100115d0:	df000304 	addi	fp,sp,12
100115d4:	e13ffd15 	stw	r4,-12(fp)
100115d8:	e17ffe15 	stw	r5,-8(fp)
100115dc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
100115e0:	01c07fc4 	movi	r7,511
100115e4:	01800044 	movi	r6,1
100115e8:	e17ffd17 	ldw	r5,-12(fp)
100115ec:	01040074 	movhi	r4,4097
100115f0:	210d2a04 	addi	r4,r4,13480
100115f4:	00114e00 	call	100114e0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
100115f8:	01c07fc4 	movi	r7,511
100115fc:	000d883a 	mov	r6,zero
10011600:	e17ffe17 	ldw	r5,-8(fp)
10011604:	01040074 	movhi	r4,4097
10011608:	210d2704 	addi	r4,r4,13468
1001160c:	00114e00 	call	100114e0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10011610:	01c07fc4 	movi	r7,511
10011614:	01800044 	movi	r6,1
10011618:	e17fff17 	ldw	r5,-4(fp)
1001161c:	01040074 	movhi	r4,4097
10011620:	210d2d04 	addi	r4,r4,13492
10011624:	00114e00 	call	100114e0 <alt_open_fd>
}  
10011628:	0001883a 	nop
1001162c:	e037883a 	mov	sp,fp
10011630:	dfc00117 	ldw	ra,4(sp)
10011634:	df000017 	ldw	fp,0(sp)
10011638:	dec00204 	addi	sp,sp,8
1001163c:	f800283a 	ret

10011640 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011640:	defffe04 	addi	sp,sp,-8
10011644:	dfc00115 	stw	ra,4(sp)
10011648:	df000015 	stw	fp,0(sp)
1001164c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011650:	d0a00b17 	ldw	r2,-32724(gp)
10011654:	10000326 	beq	r2,zero,10011664 <alt_get_errno+0x24>
10011658:	d0a00b17 	ldw	r2,-32724(gp)
1001165c:	103ee83a 	callr	r2
10011660:	00000106 	br	10011668 <alt_get_errno+0x28>
10011664:	d0a6d904 	addi	r2,gp,-25756
}
10011668:	e037883a 	mov	sp,fp
1001166c:	dfc00117 	ldw	ra,4(sp)
10011670:	df000017 	ldw	fp,0(sp)
10011674:	dec00204 	addi	sp,sp,8
10011678:	f800283a 	ret

1001167c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1001167c:	defffb04 	addi	sp,sp,-20
10011680:	dfc00415 	stw	ra,16(sp)
10011684:	df000315 	stw	fp,12(sp)
10011688:	dc000215 	stw	r16,8(sp)
1001168c:	df000304 	addi	fp,sp,12
10011690:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10011694:	e0bffe17 	ldw	r2,-8(fp)
10011698:	10800217 	ldw	r2,8(r2)
1001169c:	10d00034 	orhi	r3,r2,16384
100116a0:	e0bffe17 	ldw	r2,-8(fp)
100116a4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100116a8:	e03ffd15 	stw	zero,-12(fp)
100116ac:	00002306 	br	1001173c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100116b0:	04040074 	movhi	r16,4097
100116b4:	840d2704 	addi	r16,r16,13468
100116b8:	e0bffd17 	ldw	r2,-12(fp)
100116bc:	01400304 	movi	r5,12
100116c0:	1009883a 	mov	r4,r2
100116c4:	0002b6c0 	call	10002b6c <__mulsi3>
100116c8:	8085883a 	add	r2,r16,r2
100116cc:	10c00017 	ldw	r3,0(r2)
100116d0:	e0bffe17 	ldw	r2,-8(fp)
100116d4:	10800017 	ldw	r2,0(r2)
100116d8:	1880151e 	bne	r3,r2,10011730 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100116dc:	04040074 	movhi	r16,4097
100116e0:	840d2704 	addi	r16,r16,13468
100116e4:	e0bffd17 	ldw	r2,-12(fp)
100116e8:	01400304 	movi	r5,12
100116ec:	1009883a 	mov	r4,r2
100116f0:	0002b6c0 	call	10002b6c <__mulsi3>
100116f4:	8085883a 	add	r2,r16,r2
100116f8:	10800204 	addi	r2,r2,8
100116fc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10011700:	10000b0e 	bge	r2,zero,10011730 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10011704:	01400304 	movi	r5,12
10011708:	e13ffd17 	ldw	r4,-12(fp)
1001170c:	0002b6c0 	call	10002b6c <__mulsi3>
10011710:	1007883a 	mov	r3,r2
10011714:	00840074 	movhi	r2,4097
10011718:	108d2704 	addi	r2,r2,13468
1001171c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10011720:	e0bffe17 	ldw	r2,-8(fp)
10011724:	18800226 	beq	r3,r2,10011730 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10011728:	00bffcc4 	movi	r2,-13
1001172c:	00000806 	br	10011750 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10011730:	e0bffd17 	ldw	r2,-12(fp)
10011734:	10800044 	addi	r2,r2,1
10011738:	e0bffd15 	stw	r2,-12(fp)
1001173c:	d0a00a17 	ldw	r2,-32728(gp)
10011740:	1007883a 	mov	r3,r2
10011744:	e0bffd17 	ldw	r2,-12(fp)
10011748:	18bfd92e 	bgeu	r3,r2,100116b0 <__alt_data_end+0xf80116b0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1001174c:	0005883a 	mov	r2,zero
}
10011750:	e6ffff04 	addi	sp,fp,-4
10011754:	dfc00217 	ldw	ra,8(sp)
10011758:	df000117 	ldw	fp,4(sp)
1001175c:	dc000017 	ldw	r16,0(sp)
10011760:	dec00304 	addi	sp,sp,12
10011764:	f800283a 	ret

10011768 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10011768:	defff604 	addi	sp,sp,-40
1001176c:	dfc00915 	stw	ra,36(sp)
10011770:	df000815 	stw	fp,32(sp)
10011774:	df000804 	addi	fp,sp,32
10011778:	e13ffd15 	stw	r4,-12(fp)
1001177c:	e17ffe15 	stw	r5,-8(fp)
10011780:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10011784:	00bfffc4 	movi	r2,-1
10011788:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1001178c:	00bffb44 	movi	r2,-19
10011790:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10011794:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10011798:	d1600804 	addi	r5,gp,-32736
1001179c:	e13ffd17 	ldw	r4,-12(fp)
100117a0:	0011a8c0 	call	10011a8c <alt_find_dev>
100117a4:	e0bff815 	stw	r2,-32(fp)
100117a8:	e0bff817 	ldw	r2,-32(fp)
100117ac:	1000051e 	bne	r2,zero,100117c4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
100117b0:	e13ffd17 	ldw	r4,-12(fp)
100117b4:	0011b1c0 	call	10011b1c <alt_find_file>
100117b8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
100117bc:	00800044 	movi	r2,1
100117c0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
100117c4:	e0bff817 	ldw	r2,-32(fp)
100117c8:	10002b26 	beq	r2,zero,10011878 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
100117cc:	e13ff817 	ldw	r4,-32(fp)
100117d0:	0011c240 	call	10011c24 <alt_get_fd>
100117d4:	e0bff915 	stw	r2,-28(fp)
100117d8:	e0bff917 	ldw	r2,-28(fp)
100117dc:	1000030e 	bge	r2,zero,100117ec <open+0x84>
    {
      status = index;
100117e0:	e0bff917 	ldw	r2,-28(fp)
100117e4:	e0bffa15 	stw	r2,-24(fp)
100117e8:	00002506 	br	10011880 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
100117ec:	01400304 	movi	r5,12
100117f0:	e13ff917 	ldw	r4,-28(fp)
100117f4:	0002b6c0 	call	10002b6c <__mulsi3>
100117f8:	1007883a 	mov	r3,r2
100117fc:	00840074 	movhi	r2,4097
10011800:	108d2704 	addi	r2,r2,13468
10011804:	1885883a 	add	r2,r3,r2
10011808:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1001180c:	e0fffe17 	ldw	r3,-8(fp)
10011810:	00900034 	movhi	r2,16384
10011814:	10bfffc4 	addi	r2,r2,-1
10011818:	1886703a 	and	r3,r3,r2
1001181c:	e0bffc17 	ldw	r2,-16(fp)
10011820:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10011824:	e0bffb17 	ldw	r2,-20(fp)
10011828:	1000051e 	bne	r2,zero,10011840 <open+0xd8>
1001182c:	e13ffc17 	ldw	r4,-16(fp)
10011830:	001167c0 	call	1001167c <alt_file_locked>
10011834:	e0bffa15 	stw	r2,-24(fp)
10011838:	e0bffa17 	ldw	r2,-24(fp)
1001183c:	10001016 	blt	r2,zero,10011880 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10011840:	e0bff817 	ldw	r2,-32(fp)
10011844:	10800317 	ldw	r2,12(r2)
10011848:	10000826 	beq	r2,zero,1001186c <open+0x104>
1001184c:	e0bff817 	ldw	r2,-32(fp)
10011850:	10800317 	ldw	r2,12(r2)
10011854:	e1ffff17 	ldw	r7,-4(fp)
10011858:	e1bffe17 	ldw	r6,-8(fp)
1001185c:	e17ffd17 	ldw	r5,-12(fp)
10011860:	e13ffc17 	ldw	r4,-16(fp)
10011864:	103ee83a 	callr	r2
10011868:	00000106 	br	10011870 <open+0x108>
1001186c:	0005883a 	mov	r2,zero
10011870:	e0bffa15 	stw	r2,-24(fp)
10011874:	00000206 	br	10011880 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
10011878:	00bffb44 	movi	r2,-19
1001187c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10011880:	e0bffa17 	ldw	r2,-24(fp)
10011884:	1000090e 	bge	r2,zero,100118ac <open+0x144>
  {
    alt_release_fd (index);  
10011888:	e13ff917 	ldw	r4,-28(fp)
1001188c:	001001c0 	call	1001001c <alt_release_fd>
    ALT_ERRNO = -status;
10011890:	00116400 	call	10011640 <alt_get_errno>
10011894:	1007883a 	mov	r3,r2
10011898:	e0bffa17 	ldw	r2,-24(fp)
1001189c:	0085c83a 	sub	r2,zero,r2
100118a0:	18800015 	stw	r2,0(r3)
    return -1;
100118a4:	00bfffc4 	movi	r2,-1
100118a8:	00000106 	br	100118b0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
100118ac:	e0bff917 	ldw	r2,-28(fp)
}
100118b0:	e037883a 	mov	sp,fp
100118b4:	dfc00117 	ldw	ra,4(sp)
100118b8:	df000017 	ldw	fp,0(sp)
100118bc:	dec00204 	addi	sp,sp,8
100118c0:	f800283a 	ret

100118c4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
100118c4:	defffa04 	addi	sp,sp,-24
100118c8:	df000515 	stw	fp,20(sp)
100118cc:	df000504 	addi	fp,sp,20
100118d0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100118d4:	0005303a 	rdctl	r2,status
100118d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100118dc:	e0fffc17 	ldw	r3,-16(fp)
100118e0:	00bfff84 	movi	r2,-2
100118e4:	1884703a 	and	r2,r3,r2
100118e8:	1001703a 	wrctl	status,r2
  
  return context;
100118ec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
100118f0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
100118f4:	e0bfff17 	ldw	r2,-4(fp)
100118f8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
100118fc:	e0bffd17 	ldw	r2,-12(fp)
10011900:	10800017 	ldw	r2,0(r2)
10011904:	e0fffd17 	ldw	r3,-12(fp)
10011908:	18c00117 	ldw	r3,4(r3)
1001190c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10011910:	e0bffd17 	ldw	r2,-12(fp)
10011914:	10800117 	ldw	r2,4(r2)
10011918:	e0fffd17 	ldw	r3,-12(fp)
1001191c:	18c00017 	ldw	r3,0(r3)
10011920:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10011924:	e0bffd17 	ldw	r2,-12(fp)
10011928:	e0fffd17 	ldw	r3,-12(fp)
1001192c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10011930:	e0bffd17 	ldw	r2,-12(fp)
10011934:	e0fffd17 	ldw	r3,-12(fp)
10011938:	10c00015 	stw	r3,0(r2)
1001193c:	e0bffb17 	ldw	r2,-20(fp)
10011940:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011944:	e0bffe17 	ldw	r2,-8(fp)
10011948:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1001194c:	0001883a 	nop
10011950:	e037883a 	mov	sp,fp
10011954:	df000017 	ldw	fp,0(sp)
10011958:	dec00104 	addi	sp,sp,4
1001195c:	f800283a 	ret

10011960 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10011960:	defffb04 	addi	sp,sp,-20
10011964:	dfc00415 	stw	ra,16(sp)
10011968:	df000315 	stw	fp,12(sp)
1001196c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10011970:	d0a00e17 	ldw	r2,-32712(gp)
10011974:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10011978:	d0a6df17 	ldw	r2,-25732(gp)
1001197c:	10800044 	addi	r2,r2,1
10011980:	d0a6df15 	stw	r2,-25732(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10011984:	00002e06 	br	10011a40 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10011988:	e0bffd17 	ldw	r2,-12(fp)
1001198c:	10800017 	ldw	r2,0(r2)
10011990:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10011994:	e0bffd17 	ldw	r2,-12(fp)
10011998:	10800403 	ldbu	r2,16(r2)
1001199c:	10803fcc 	andi	r2,r2,255
100119a0:	10000426 	beq	r2,zero,100119b4 <alt_tick+0x54>
100119a4:	d0a6df17 	ldw	r2,-25732(gp)
100119a8:	1000021e 	bne	r2,zero,100119b4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
100119ac:	e0bffd17 	ldw	r2,-12(fp)
100119b0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
100119b4:	e0bffd17 	ldw	r2,-12(fp)
100119b8:	10800217 	ldw	r2,8(r2)
100119bc:	d0e6df17 	ldw	r3,-25732(gp)
100119c0:	18801d36 	bltu	r3,r2,10011a38 <alt_tick+0xd8>
100119c4:	e0bffd17 	ldw	r2,-12(fp)
100119c8:	10800403 	ldbu	r2,16(r2)
100119cc:	10803fcc 	andi	r2,r2,255
100119d0:	1000191e 	bne	r2,zero,10011a38 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
100119d4:	e0bffd17 	ldw	r2,-12(fp)
100119d8:	10800317 	ldw	r2,12(r2)
100119dc:	e0fffd17 	ldw	r3,-12(fp)
100119e0:	18c00517 	ldw	r3,20(r3)
100119e4:	1809883a 	mov	r4,r3
100119e8:	103ee83a 	callr	r2
100119ec:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
100119f0:	e0bfff17 	ldw	r2,-4(fp)
100119f4:	1000031e 	bne	r2,zero,10011a04 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
100119f8:	e13ffd17 	ldw	r4,-12(fp)
100119fc:	00118c40 	call	100118c4 <alt_alarm_stop>
10011a00:	00000d06 	br	10011a38 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10011a04:	e0bffd17 	ldw	r2,-12(fp)
10011a08:	10c00217 	ldw	r3,8(r2)
10011a0c:	e0bfff17 	ldw	r2,-4(fp)
10011a10:	1887883a 	add	r3,r3,r2
10011a14:	e0bffd17 	ldw	r2,-12(fp)
10011a18:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10011a1c:	e0bffd17 	ldw	r2,-12(fp)
10011a20:	10c00217 	ldw	r3,8(r2)
10011a24:	d0a6df17 	ldw	r2,-25732(gp)
10011a28:	1880032e 	bgeu	r3,r2,10011a38 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10011a2c:	e0bffd17 	ldw	r2,-12(fp)
10011a30:	00c00044 	movi	r3,1
10011a34:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10011a38:	e0bffe17 	ldw	r2,-8(fp)
10011a3c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10011a40:	e0fffd17 	ldw	r3,-12(fp)
10011a44:	d0a00e04 	addi	r2,gp,-32712
10011a48:	18bfcf1e 	bne	r3,r2,10011988 <__alt_data_end+0xf8011988>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10011a4c:	0001883a 	nop
}
10011a50:	0001883a 	nop
10011a54:	e037883a 	mov	sp,fp
10011a58:	dfc00117 	ldw	ra,4(sp)
10011a5c:	df000017 	ldw	fp,0(sp)
10011a60:	dec00204 	addi	sp,sp,8
10011a64:	f800283a 	ret

10011a68 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10011a68:	deffff04 	addi	sp,sp,-4
10011a6c:	df000015 	stw	fp,0(sp)
10011a70:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10011a74:	000170fa 	wrctl	ienable,zero
}
10011a78:	0001883a 	nop
10011a7c:	e037883a 	mov	sp,fp
10011a80:	df000017 	ldw	fp,0(sp)
10011a84:	dec00104 	addi	sp,sp,4
10011a88:	f800283a 	ret

10011a8c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10011a8c:	defffa04 	addi	sp,sp,-24
10011a90:	dfc00515 	stw	ra,20(sp)
10011a94:	df000415 	stw	fp,16(sp)
10011a98:	df000404 	addi	fp,sp,16
10011a9c:	e13ffe15 	stw	r4,-8(fp)
10011aa0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10011aa4:	e0bfff17 	ldw	r2,-4(fp)
10011aa8:	10800017 	ldw	r2,0(r2)
10011aac:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10011ab0:	e13ffe17 	ldw	r4,-8(fp)
10011ab4:	0002cd40 	call	10002cd4 <strlen>
10011ab8:	10800044 	addi	r2,r2,1
10011abc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10011ac0:	00000d06 	br	10011af8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10011ac4:	e0bffc17 	ldw	r2,-16(fp)
10011ac8:	10800217 	ldw	r2,8(r2)
10011acc:	e0fffd17 	ldw	r3,-12(fp)
10011ad0:	180d883a 	mov	r6,r3
10011ad4:	e17ffe17 	ldw	r5,-8(fp)
10011ad8:	1009883a 	mov	r4,r2
10011adc:	0011dd00 	call	10011dd0 <memcmp>
10011ae0:	1000021e 	bne	r2,zero,10011aec <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10011ae4:	e0bffc17 	ldw	r2,-16(fp)
10011ae8:	00000706 	br	10011b08 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10011aec:	e0bffc17 	ldw	r2,-16(fp)
10011af0:	10800017 	ldw	r2,0(r2)
10011af4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10011af8:	e0fffc17 	ldw	r3,-16(fp)
10011afc:	e0bfff17 	ldw	r2,-4(fp)
10011b00:	18bff01e 	bne	r3,r2,10011ac4 <__alt_data_end+0xf8011ac4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10011b04:	0005883a 	mov	r2,zero
}
10011b08:	e037883a 	mov	sp,fp
10011b0c:	dfc00117 	ldw	ra,4(sp)
10011b10:	df000017 	ldw	fp,0(sp)
10011b14:	dec00204 	addi	sp,sp,8
10011b18:	f800283a 	ret

10011b1c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10011b1c:	defffb04 	addi	sp,sp,-20
10011b20:	dfc00415 	stw	ra,16(sp)
10011b24:	df000315 	stw	fp,12(sp)
10011b28:	df000304 	addi	fp,sp,12
10011b2c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10011b30:	d0a00617 	ldw	r2,-32744(gp)
10011b34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10011b38:	00003106 	br	10011c00 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10011b3c:	e0bffd17 	ldw	r2,-12(fp)
10011b40:	10800217 	ldw	r2,8(r2)
10011b44:	1009883a 	mov	r4,r2
10011b48:	0002cd40 	call	10002cd4 <strlen>
10011b4c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10011b50:	e0bffd17 	ldw	r2,-12(fp)
10011b54:	10c00217 	ldw	r3,8(r2)
10011b58:	e0bffe17 	ldw	r2,-8(fp)
10011b5c:	10bfffc4 	addi	r2,r2,-1
10011b60:	1885883a 	add	r2,r3,r2
10011b64:	10800003 	ldbu	r2,0(r2)
10011b68:	10803fcc 	andi	r2,r2,255
10011b6c:	1080201c 	xori	r2,r2,128
10011b70:	10bfe004 	addi	r2,r2,-128
10011b74:	10800bd8 	cmpnei	r2,r2,47
10011b78:	1000031e 	bne	r2,zero,10011b88 <alt_find_file+0x6c>
    {
      len -= 1;
10011b7c:	e0bffe17 	ldw	r2,-8(fp)
10011b80:	10bfffc4 	addi	r2,r2,-1
10011b84:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10011b88:	e0bffe17 	ldw	r2,-8(fp)
10011b8c:	e0ffff17 	ldw	r3,-4(fp)
10011b90:	1885883a 	add	r2,r3,r2
10011b94:	10800003 	ldbu	r2,0(r2)
10011b98:	10803fcc 	andi	r2,r2,255
10011b9c:	1080201c 	xori	r2,r2,128
10011ba0:	10bfe004 	addi	r2,r2,-128
10011ba4:	10800be0 	cmpeqi	r2,r2,47
10011ba8:	1000081e 	bne	r2,zero,10011bcc <alt_find_file+0xb0>
10011bac:	e0bffe17 	ldw	r2,-8(fp)
10011bb0:	e0ffff17 	ldw	r3,-4(fp)
10011bb4:	1885883a 	add	r2,r3,r2
10011bb8:	10800003 	ldbu	r2,0(r2)
10011bbc:	10803fcc 	andi	r2,r2,255
10011bc0:	1080201c 	xori	r2,r2,128
10011bc4:	10bfe004 	addi	r2,r2,-128
10011bc8:	10000a1e 	bne	r2,zero,10011bf4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10011bcc:	e0bffd17 	ldw	r2,-12(fp)
10011bd0:	10800217 	ldw	r2,8(r2)
10011bd4:	e0fffe17 	ldw	r3,-8(fp)
10011bd8:	180d883a 	mov	r6,r3
10011bdc:	e17fff17 	ldw	r5,-4(fp)
10011be0:	1009883a 	mov	r4,r2
10011be4:	0011dd00 	call	10011dd0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10011be8:	1000021e 	bne	r2,zero,10011bf4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10011bec:	e0bffd17 	ldw	r2,-12(fp)
10011bf0:	00000706 	br	10011c10 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10011bf4:	e0bffd17 	ldw	r2,-12(fp)
10011bf8:	10800017 	ldw	r2,0(r2)
10011bfc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10011c00:	e0fffd17 	ldw	r3,-12(fp)
10011c04:	d0a00604 	addi	r2,gp,-32744
10011c08:	18bfcc1e 	bne	r3,r2,10011b3c <__alt_data_end+0xf8011b3c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10011c0c:	0005883a 	mov	r2,zero
}
10011c10:	e037883a 	mov	sp,fp
10011c14:	dfc00117 	ldw	ra,4(sp)
10011c18:	df000017 	ldw	fp,0(sp)
10011c1c:	dec00204 	addi	sp,sp,8
10011c20:	f800283a 	ret

10011c24 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10011c24:	defffa04 	addi	sp,sp,-24
10011c28:	dfc00515 	stw	ra,20(sp)
10011c2c:	df000415 	stw	fp,16(sp)
10011c30:	dc000315 	stw	r16,12(sp)
10011c34:	df000404 	addi	fp,sp,16
10011c38:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10011c3c:	00bffa04 	movi	r2,-24
10011c40:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10011c44:	e03ffc15 	stw	zero,-16(fp)
10011c48:	00001d06 	br	10011cc0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
10011c4c:	04040074 	movhi	r16,4097
10011c50:	840d2704 	addi	r16,r16,13468
10011c54:	e0bffc17 	ldw	r2,-16(fp)
10011c58:	01400304 	movi	r5,12
10011c5c:	1009883a 	mov	r4,r2
10011c60:	0002b6c0 	call	10002b6c <__mulsi3>
10011c64:	8085883a 	add	r2,r16,r2
10011c68:	10800017 	ldw	r2,0(r2)
10011c6c:	1000111e 	bne	r2,zero,10011cb4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
10011c70:	04040074 	movhi	r16,4097
10011c74:	840d2704 	addi	r16,r16,13468
10011c78:	e0bffc17 	ldw	r2,-16(fp)
10011c7c:	01400304 	movi	r5,12
10011c80:	1009883a 	mov	r4,r2
10011c84:	0002b6c0 	call	10002b6c <__mulsi3>
10011c88:	8085883a 	add	r2,r16,r2
10011c8c:	e0fffe17 	ldw	r3,-8(fp)
10011c90:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10011c94:	d0e00a17 	ldw	r3,-32728(gp)
10011c98:	e0bffc17 	ldw	r2,-16(fp)
10011c9c:	1880020e 	bge	r3,r2,10011ca8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
10011ca0:	e0bffc17 	ldw	r2,-16(fp)
10011ca4:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
10011ca8:	e0bffc17 	ldw	r2,-16(fp)
10011cac:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10011cb0:	00000606 	br	10011ccc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10011cb4:	e0bffc17 	ldw	r2,-16(fp)
10011cb8:	10800044 	addi	r2,r2,1
10011cbc:	e0bffc15 	stw	r2,-16(fp)
10011cc0:	e0bffc17 	ldw	r2,-16(fp)
10011cc4:	10800810 	cmplti	r2,r2,32
10011cc8:	103fe01e 	bne	r2,zero,10011c4c <__alt_data_end+0xf8011c4c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10011ccc:	e0bffd17 	ldw	r2,-12(fp)
}
10011cd0:	e6ffff04 	addi	sp,fp,-4
10011cd4:	dfc00217 	ldw	ra,8(sp)
10011cd8:	df000117 	ldw	fp,4(sp)
10011cdc:	dc000017 	ldw	r16,0(sp)
10011ce0:	dec00304 	addi	sp,sp,12
10011ce4:	f800283a 	ret

10011ce8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10011ce8:	defffe04 	addi	sp,sp,-8
10011cec:	df000115 	stw	fp,4(sp)
10011cf0:	df000104 	addi	fp,sp,4
10011cf4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10011cf8:	e0bfff17 	ldw	r2,-4(fp)
10011cfc:	10bffe84 	addi	r2,r2,-6
10011d00:	10c00428 	cmpgeui	r3,r2,16
10011d04:	18001a1e 	bne	r3,zero,10011d70 <alt_exception_cause_generated_bad_addr+0x88>
10011d08:	100690ba 	slli	r3,r2,2
10011d0c:	00840074 	movhi	r2,4097
10011d10:	10874804 	addi	r2,r2,7456
10011d14:	1885883a 	add	r2,r3,r2
10011d18:	10800017 	ldw	r2,0(r2)
10011d1c:	1000683a 	jmp	r2
10011d20:	10011d60 	cmpeqi	zero,r2,1141
10011d24:	10011d60 	cmpeqi	zero,r2,1141
10011d28:	10011d70 	cmpltui	zero,r2,1141
10011d2c:	10011d70 	cmpltui	zero,r2,1141
10011d30:	10011d70 	cmpltui	zero,r2,1141
10011d34:	10011d60 	cmpeqi	zero,r2,1141
10011d38:	10011d68 	cmpgeui	zero,r2,1141
10011d3c:	10011d70 	cmpltui	zero,r2,1141
10011d40:	10011d60 	cmpeqi	zero,r2,1141
10011d44:	10011d60 	cmpeqi	zero,r2,1141
10011d48:	10011d70 	cmpltui	zero,r2,1141
10011d4c:	10011d60 	cmpeqi	zero,r2,1141
10011d50:	10011d68 	cmpgeui	zero,r2,1141
10011d54:	10011d70 	cmpltui	zero,r2,1141
10011d58:	10011d70 	cmpltui	zero,r2,1141
10011d5c:	10011d60 	cmpeqi	zero,r2,1141
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10011d60:	00800044 	movi	r2,1
10011d64:	00000306 	br	10011d74 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10011d68:	0005883a 	mov	r2,zero
10011d6c:	00000106 	br	10011d74 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10011d70:	0005883a 	mov	r2,zero
  }
}
10011d74:	e037883a 	mov	sp,fp
10011d78:	df000017 	ldw	fp,0(sp)
10011d7c:	dec00104 	addi	sp,sp,4
10011d80:	f800283a 	ret

10011d84 <atexit>:
10011d84:	200b883a 	mov	r5,r4
10011d88:	000f883a 	mov	r7,zero
10011d8c:	000d883a 	mov	r6,zero
10011d90:	0009883a 	mov	r4,zero
10011d94:	0011e4c1 	jmpi	10011e4c <__register_exitproc>

10011d98 <exit>:
10011d98:	defffe04 	addi	sp,sp,-8
10011d9c:	000b883a 	mov	r5,zero
10011da0:	dc000015 	stw	r16,0(sp)
10011da4:	dfc00115 	stw	ra,4(sp)
10011da8:	2021883a 	mov	r16,r4
10011dac:	0011f640 	call	10011f64 <__call_exitprocs>
10011db0:	00840074 	movhi	r2,4097
10011db4:	10919f04 	addi	r2,r2,18044
10011db8:	11000017 	ldw	r4,0(r2)
10011dbc:	20800f17 	ldw	r2,60(r4)
10011dc0:	10000126 	beq	r2,zero,10011dc8 <exit+0x30>
10011dc4:	103ee83a 	callr	r2
10011dc8:	8009883a 	mov	r4,r16
10011dcc:	00120e40 	call	100120e4 <_exit>

10011dd0 <memcmp>:
10011dd0:	01c000c4 	movi	r7,3
10011dd4:	3980192e 	bgeu	r7,r6,10011e3c <memcmp+0x6c>
10011dd8:	2144b03a 	or	r2,r4,r5
10011ddc:	11c4703a 	and	r2,r2,r7
10011de0:	10000f26 	beq	r2,zero,10011e20 <memcmp+0x50>
10011de4:	20800003 	ldbu	r2,0(r4)
10011de8:	28c00003 	ldbu	r3,0(r5)
10011dec:	10c0151e 	bne	r2,r3,10011e44 <memcmp+0x74>
10011df0:	31bfff84 	addi	r6,r6,-2
10011df4:	01ffffc4 	movi	r7,-1
10011df8:	00000406 	br	10011e0c <memcmp+0x3c>
10011dfc:	20800003 	ldbu	r2,0(r4)
10011e00:	28c00003 	ldbu	r3,0(r5)
10011e04:	31bfffc4 	addi	r6,r6,-1
10011e08:	10c00e1e 	bne	r2,r3,10011e44 <memcmp+0x74>
10011e0c:	21000044 	addi	r4,r4,1
10011e10:	29400044 	addi	r5,r5,1
10011e14:	31fff91e 	bne	r6,r7,10011dfc <__alt_data_end+0xf8011dfc>
10011e18:	0005883a 	mov	r2,zero
10011e1c:	f800283a 	ret
10011e20:	20c00017 	ldw	r3,0(r4)
10011e24:	28800017 	ldw	r2,0(r5)
10011e28:	18bfee1e 	bne	r3,r2,10011de4 <__alt_data_end+0xf8011de4>
10011e2c:	31bfff04 	addi	r6,r6,-4
10011e30:	21000104 	addi	r4,r4,4
10011e34:	29400104 	addi	r5,r5,4
10011e38:	39bff936 	bltu	r7,r6,10011e20 <__alt_data_end+0xf8011e20>
10011e3c:	303fe91e 	bne	r6,zero,10011de4 <__alt_data_end+0xf8011de4>
10011e40:	003ff506 	br	10011e18 <__alt_data_end+0xf8011e18>
10011e44:	10c5c83a 	sub	r2,r2,r3
10011e48:	f800283a 	ret

10011e4c <__register_exitproc>:
10011e4c:	defffa04 	addi	sp,sp,-24
10011e50:	dc000315 	stw	r16,12(sp)
10011e54:	04040074 	movhi	r16,4097
10011e58:	84119f04 	addi	r16,r16,18044
10011e5c:	80c00017 	ldw	r3,0(r16)
10011e60:	dc400415 	stw	r17,16(sp)
10011e64:	dfc00515 	stw	ra,20(sp)
10011e68:	18805217 	ldw	r2,328(r3)
10011e6c:	2023883a 	mov	r17,r4
10011e70:	10003726 	beq	r2,zero,10011f50 <__register_exitproc+0x104>
10011e74:	10c00117 	ldw	r3,4(r2)
10011e78:	010007c4 	movi	r4,31
10011e7c:	20c00e16 	blt	r4,r3,10011eb8 <__register_exitproc+0x6c>
10011e80:	1a000044 	addi	r8,r3,1
10011e84:	8800221e 	bne	r17,zero,10011f10 <__register_exitproc+0xc4>
10011e88:	18c00084 	addi	r3,r3,2
10011e8c:	18c7883a 	add	r3,r3,r3
10011e90:	18c7883a 	add	r3,r3,r3
10011e94:	12000115 	stw	r8,4(r2)
10011e98:	10c7883a 	add	r3,r2,r3
10011e9c:	19400015 	stw	r5,0(r3)
10011ea0:	0005883a 	mov	r2,zero
10011ea4:	dfc00517 	ldw	ra,20(sp)
10011ea8:	dc400417 	ldw	r17,16(sp)
10011eac:	dc000317 	ldw	r16,12(sp)
10011eb0:	dec00604 	addi	sp,sp,24
10011eb4:	f800283a 	ret
10011eb8:	00800034 	movhi	r2,0
10011ebc:	10800004 	addi	r2,r2,0
10011ec0:	10002626 	beq	r2,zero,10011f5c <__register_exitproc+0x110>
10011ec4:	01006404 	movi	r4,400
10011ec8:	d9400015 	stw	r5,0(sp)
10011ecc:	d9800115 	stw	r6,4(sp)
10011ed0:	d9c00215 	stw	r7,8(sp)
10011ed4:	00000000 	call	10000000 <__reset>
10011ed8:	d9400017 	ldw	r5,0(sp)
10011edc:	d9800117 	ldw	r6,4(sp)
10011ee0:	d9c00217 	ldw	r7,8(sp)
10011ee4:	10001d26 	beq	r2,zero,10011f5c <__register_exitproc+0x110>
10011ee8:	81000017 	ldw	r4,0(r16)
10011eec:	10000115 	stw	zero,4(r2)
10011ef0:	02000044 	movi	r8,1
10011ef4:	22405217 	ldw	r9,328(r4)
10011ef8:	0007883a 	mov	r3,zero
10011efc:	12400015 	stw	r9,0(r2)
10011f00:	20805215 	stw	r2,328(r4)
10011f04:	10006215 	stw	zero,392(r2)
10011f08:	10006315 	stw	zero,396(r2)
10011f0c:	883fde26 	beq	r17,zero,10011e88 <__alt_data_end+0xf8011e88>
10011f10:	18c9883a 	add	r4,r3,r3
10011f14:	2109883a 	add	r4,r4,r4
10011f18:	1109883a 	add	r4,r2,r4
10011f1c:	21802215 	stw	r6,136(r4)
10011f20:	01800044 	movi	r6,1
10011f24:	12406217 	ldw	r9,392(r2)
10011f28:	30cc983a 	sll	r6,r6,r3
10011f2c:	4992b03a 	or	r9,r9,r6
10011f30:	12406215 	stw	r9,392(r2)
10011f34:	21c04215 	stw	r7,264(r4)
10011f38:	01000084 	movi	r4,2
10011f3c:	893fd21e 	bne	r17,r4,10011e88 <__alt_data_end+0xf8011e88>
10011f40:	11006317 	ldw	r4,396(r2)
10011f44:	218cb03a 	or	r6,r4,r6
10011f48:	11806315 	stw	r6,396(r2)
10011f4c:	003fce06 	br	10011e88 <__alt_data_end+0xf8011e88>
10011f50:	18805304 	addi	r2,r3,332
10011f54:	18805215 	stw	r2,328(r3)
10011f58:	003fc606 	br	10011e74 <__alt_data_end+0xf8011e74>
10011f5c:	00bfffc4 	movi	r2,-1
10011f60:	003fd006 	br	10011ea4 <__alt_data_end+0xf8011ea4>

10011f64 <__call_exitprocs>:
10011f64:	defff504 	addi	sp,sp,-44
10011f68:	df000915 	stw	fp,36(sp)
10011f6c:	dd400615 	stw	r21,24(sp)
10011f70:	dc800315 	stw	r18,12(sp)
10011f74:	dfc00a15 	stw	ra,40(sp)
10011f78:	ddc00815 	stw	r23,32(sp)
10011f7c:	dd800715 	stw	r22,28(sp)
10011f80:	dd000515 	stw	r20,20(sp)
10011f84:	dcc00415 	stw	r19,16(sp)
10011f88:	dc400215 	stw	r17,8(sp)
10011f8c:	dc000115 	stw	r16,4(sp)
10011f90:	d9000015 	stw	r4,0(sp)
10011f94:	2839883a 	mov	fp,r5
10011f98:	04800044 	movi	r18,1
10011f9c:	057fffc4 	movi	r21,-1
10011fa0:	00840074 	movhi	r2,4097
10011fa4:	10919f04 	addi	r2,r2,18044
10011fa8:	12000017 	ldw	r8,0(r2)
10011fac:	45005217 	ldw	r20,328(r8)
10011fb0:	44c05204 	addi	r19,r8,328
10011fb4:	a0001c26 	beq	r20,zero,10012028 <__call_exitprocs+0xc4>
10011fb8:	a0800117 	ldw	r2,4(r20)
10011fbc:	15ffffc4 	addi	r23,r2,-1
10011fc0:	b8000d16 	blt	r23,zero,10011ff8 <__call_exitprocs+0x94>
10011fc4:	14000044 	addi	r16,r2,1
10011fc8:	8421883a 	add	r16,r16,r16
10011fcc:	8421883a 	add	r16,r16,r16
10011fd0:	84402004 	addi	r17,r16,128
10011fd4:	a463883a 	add	r17,r20,r17
10011fd8:	a421883a 	add	r16,r20,r16
10011fdc:	e0001e26 	beq	fp,zero,10012058 <__call_exitprocs+0xf4>
10011fe0:	80804017 	ldw	r2,256(r16)
10011fe4:	e0801c26 	beq	fp,r2,10012058 <__call_exitprocs+0xf4>
10011fe8:	bdffffc4 	addi	r23,r23,-1
10011fec:	843fff04 	addi	r16,r16,-4
10011ff0:	8c7fff04 	addi	r17,r17,-4
10011ff4:	bd7ff91e 	bne	r23,r21,10011fdc <__alt_data_end+0xf8011fdc>
10011ff8:	00800034 	movhi	r2,0
10011ffc:	10800004 	addi	r2,r2,0
10012000:	10000926 	beq	r2,zero,10012028 <__call_exitprocs+0xc4>
10012004:	a0800117 	ldw	r2,4(r20)
10012008:	1000301e 	bne	r2,zero,100120cc <__call_exitprocs+0x168>
1001200c:	a0800017 	ldw	r2,0(r20)
10012010:	10003226 	beq	r2,zero,100120dc <__call_exitprocs+0x178>
10012014:	a009883a 	mov	r4,r20
10012018:	98800015 	stw	r2,0(r19)
1001201c:	00000000 	call	10000000 <__reset>
10012020:	9d000017 	ldw	r20,0(r19)
10012024:	a03fe41e 	bne	r20,zero,10011fb8 <__alt_data_end+0xf8011fb8>
10012028:	dfc00a17 	ldw	ra,40(sp)
1001202c:	df000917 	ldw	fp,36(sp)
10012030:	ddc00817 	ldw	r23,32(sp)
10012034:	dd800717 	ldw	r22,28(sp)
10012038:	dd400617 	ldw	r21,24(sp)
1001203c:	dd000517 	ldw	r20,20(sp)
10012040:	dcc00417 	ldw	r19,16(sp)
10012044:	dc800317 	ldw	r18,12(sp)
10012048:	dc400217 	ldw	r17,8(sp)
1001204c:	dc000117 	ldw	r16,4(sp)
10012050:	dec00b04 	addi	sp,sp,44
10012054:	f800283a 	ret
10012058:	a0800117 	ldw	r2,4(r20)
1001205c:	80c00017 	ldw	r3,0(r16)
10012060:	10bfffc4 	addi	r2,r2,-1
10012064:	15c01426 	beq	r2,r23,100120b8 <__call_exitprocs+0x154>
10012068:	80000015 	stw	zero,0(r16)
1001206c:	183fde26 	beq	r3,zero,10011fe8 <__alt_data_end+0xf8011fe8>
10012070:	95c8983a 	sll	r4,r18,r23
10012074:	a0806217 	ldw	r2,392(r20)
10012078:	a5800117 	ldw	r22,4(r20)
1001207c:	2084703a 	and	r2,r4,r2
10012080:	10000b26 	beq	r2,zero,100120b0 <__call_exitprocs+0x14c>
10012084:	a0806317 	ldw	r2,396(r20)
10012088:	2088703a 	and	r4,r4,r2
1001208c:	20000c1e 	bne	r4,zero,100120c0 <__call_exitprocs+0x15c>
10012090:	89400017 	ldw	r5,0(r17)
10012094:	d9000017 	ldw	r4,0(sp)
10012098:	183ee83a 	callr	r3
1001209c:	a0800117 	ldw	r2,4(r20)
100120a0:	15bfbf1e 	bne	r2,r22,10011fa0 <__alt_data_end+0xf8011fa0>
100120a4:	98800017 	ldw	r2,0(r19)
100120a8:	153fcf26 	beq	r2,r20,10011fe8 <__alt_data_end+0xf8011fe8>
100120ac:	003fbc06 	br	10011fa0 <__alt_data_end+0xf8011fa0>
100120b0:	183ee83a 	callr	r3
100120b4:	003ff906 	br	1001209c <__alt_data_end+0xf801209c>
100120b8:	a5c00115 	stw	r23,4(r20)
100120bc:	003feb06 	br	1001206c <__alt_data_end+0xf801206c>
100120c0:	89000017 	ldw	r4,0(r17)
100120c4:	183ee83a 	callr	r3
100120c8:	003ff406 	br	1001209c <__alt_data_end+0xf801209c>
100120cc:	a0800017 	ldw	r2,0(r20)
100120d0:	a027883a 	mov	r19,r20
100120d4:	1029883a 	mov	r20,r2
100120d8:	003fb606 	br	10011fb4 <__alt_data_end+0xf8011fb4>
100120dc:	0005883a 	mov	r2,zero
100120e0:	003ffb06 	br	100120d0 <__alt_data_end+0xf80120d0>

100120e4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100120e4:	defffd04 	addi	sp,sp,-12
100120e8:	df000215 	stw	fp,8(sp)
100120ec:	df000204 	addi	fp,sp,8
100120f0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
100120f4:	0001883a 	nop
100120f8:	e0bfff17 	ldw	r2,-4(fp)
100120fc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10012100:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10012104:	10000226 	beq	r2,zero,10012110 <_exit+0x2c>
    ALT_SIM_FAIL();
10012108:	002af070 	cmpltui	zero,zero,43969
1001210c:	00000106 	br	10012114 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10012110:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10012114:	003fff06 	br	10012114 <__alt_data_end+0xf8012114>
