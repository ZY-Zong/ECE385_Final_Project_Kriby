
usb.elf:     file format elf32-littlenios2
usb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00016ba4 memsz 0x00016ba4 flags r-x
    LOAD off    0x00017bc4 vaddr 0x10016bc4 paddr 0x10025808 align 2**12
         filesz 0x0000ec44 memsz 0x0000ec44 flags rw-
    LOAD off    0x0002744c vaddr 0x1003444c paddr 0x1003444c align 2**12
         filesz 0x00000000 memsz 0x00000188 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00015e54  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000b40  10016084  10016084  00017084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000ec44  10016bc4  10025808  00017bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000188  1003444c  1003444c  0002744c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000000e0  000000e0  00026808  2**0
                  CONTENTS
  7 .sdram        00000000  100345d4  100345d4  00026808  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00026808  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fd8  00000000  00000000  00026830  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00025105  00000000  00000000  00027808  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000971e  00000000  00000000  0004c90d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c2cd  00000000  00000000  0005602b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002abc  00000000  00000000  000622f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004124  00000000  00000000  00064db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001786c  00000000  00000000  00068ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00080744  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018d0  00000000  00000000  00080788  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00085bca  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00085bcd  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00085bd9  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00085bda  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00085bdb  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00085bdf  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00085be3  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00085be7  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00085bf2  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00085bfd  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  00085c08  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000037  00000000  00000000  00085c19  2**0
                  CONTENTS, READONLY
 30 .jdi          00005b3a  00000000  00000000  00085c50  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0007dafc  00000000  00000000  0008b78a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10016084 l    d  .rodata	00000000 .rodata
10016bc4 l    d  .rwdata	00000000 .rwdata
1003444c l    d  .bss	00000000 .bss
000000e0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
100345d4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 enemy.c
1003444c l     O .bss	00000004 ADDRESS_PTR
10016bc4 l     O .rwdata	00000040 image_indicator
10016c04 l     O .rwdata	0000686c Wall1
00000000 l    df *ABS*	00000000 game_logic.c
10034450 l     O .bss	00000004 ADDRESS_PTR
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 kirby.c
10034454 l     O .bss	00000004 ADDRESS_PTR
1001d470 l     O .rwdata	00000040 image_indicator
1001d4b0 l     O .rwdata	0000686c Wall1
00000000 l    df *ABS*	00000000 main.c
10034458 l     O .bss	00000004 ADDRESS_PTR
00000000 l    df *ABS*	00000000 star.c
1003445c l     O .bss	00000004 ADDRESS_PTR
00000000 l    df *ABS*	00000000 test.c
10034460 l     O .bss	00000004 ADDRESS_PTR
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 usb_main.c
10034464 l     O .bss	00000002 intStat
10034466 l     O .bss	00000002 usb_ctl_val
10034468 l     O .bss	00000002 ctl_reg
1003446a l     O .bss	00000002 no_device
1003446c l     O .bss	00000002 fs_device
1003446e l     O .bss	00000001 toggle
1003446f l     O .bss	00000001 data_size
10034470 l     O .bss	00000001 hot_plug_count
10034472 l     O .bss	00000002 code
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1001690a l     O .rodata	00000010 zeroes.4404
10008fd0 l     F .text	000000bc __sbprintf
1001691a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
100091e0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1000ad38 l     F .text	00000008 __fp_unlock
1000ad4c l     F .text	0000019c __sinit.part.1
1000aee8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10023d1c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10024160 l     O .rwdata	00000020 lc_ctype_charset
10024140 l     O .rwdata	00000020 lc_message_charset
10024180 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
1001694c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000e3bc l     F .text	000000fc __sprint_r.part.0
10016a70 l     O .rodata	00000010 zeroes.4349
1000f9f8 l     F .text	000000bc __sbprintf
10016a80 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
10013864 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10013978 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
100139a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10013a98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10013b80 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10013c6c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10013e48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
100257f8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
100140ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10014228 l     F .text	00000034 alt_dev_reg
10024768 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10014504 l     F .text	0000020c altera_avalon_jtag_uart_irq
10014710 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10014fec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1001544c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
100155ac l     F .text	0000003c alt_get_errno
100155e8 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
100344a8 g     O .bss	00000004 alt_instruction_exception_handler
1000da00 g     F .text	00000074 _mprec_log10
1000daec g     F .text	0000008c __any_on
1000ffac g     F .text	00000054 _isatty_r
10016958 g     O .rodata	00000028 __mprec_tinytens
10013d84 g     F .text	0000007c alt_main
10006b6c g     F .text	000000c0 _puts_r
10003d80 g     F .text	000000c8 kirby_Is_Damaged
100344d4 g     O .bss	00000100 alt_irq
10010000 g     F .text	00000060 _lseek_r
1000663c g     F .text	000002e8 get_keycode_value
10025808 g       *ABS*	00000000 __flash_rwdata_start
1001223c g     F .text	00000088 .hidden __eqdf2
100345d4 g       *ABS*	00000000 __alt_heap_start
1000327c g     F .text	000000a8 force_It_On_Ground
10006b30 g     F .text	0000003c printf
10010218 g     F .text	0000009c _wcrtomb_r
1000e27c g     F .text	0000005c __sseek
1000b098 g     F .text	00000010 __sinit
100100c0 g     F .text	00000140 __swbuf_r
1000bb6c g     F .text	0000007c _setlocale_r
10003ab0 g     F .text	00000104 get_Kirby_Right_Pos
1000aef0 g     F .text	00000078 __sfmoreglue
10013e24 g     F .text	00000024 __malloc_unlock
10003ff4 g     F .text	000000bc sqr_Dis_Kirby_Enemy
10001064 g     F .text	0000010c get_Enemy_Right_Pos
10005a44 g     F .text	00000080 UsbGetRetryCnt
1000c83c g     F .text	0000015c memmove
1000156c g     F .text	00000088 IO_init
10001170 g     F .text	000002ac GameStart
1000b080 g     F .text	00000018 _cleanup
1000cac0 g     F .text	000000a8 _Balloc
100122c4 g     F .text	000000dc .hidden __gtdf2
100159d4 g     F .text	00000024 altera_nios2_gen2_irq_init
100038a8 g     F .text	00000104 get_Kirby_Ceil_Pos
10000000 g     F .entry	0000000c __reset
10003e48 g     F .text	00000088 kirby_Damage_Action
1000152c g     F .text	00000040 draw_Start_Image
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000ff50 g     F .text	0000005c _fstat_r
1003448c g     O .bss	00000004 errno
1000e1f8 g     F .text	00000008 __seofread
10034494 g     O .bss	00000004 alt_argv
1002d7c8 g       *ABS*	00000000 _gp
100140bc g     F .text	00000030 usleep
1000372c g     F .text	00000078 will_Touch_Ground
100245e8 g     O .rwdata	00000180 alt_fd_list
100159f8 g     F .text	00000090 alt_find_dev
1000c6f4 g     F .text	00000148 memcpy
1000ad40 g     F .text	0000000c _cleanup_r
1001367c g     F .text	000000dc .hidden __floatsidf
10015530 g     F .text	0000007c alt_io_redirect
100123a0 g     F .text	000000f4 .hidden __ltdf2
10003694 g     F .text	00000044 frame_Time
10016084 g       *ABS*	00000000 __DTOR_END__
10006c2c g     F .text	00000014 puts
10015c54 g     F .text	0000009c alt_exception_cause_generated_bad_addr
1000e0dc g     F .text	00000074 __fpclassifyd
1000d95c g     F .text	000000a4 __ratio
10004158 g     F .text	00000188 game_Over_Anime
1000f9dc g     F .text	0000001c __vfiprintf_internal
10014908 g     F .text	0000021c altera_avalon_jtag_uart_read
10006b00 g     F .text	00000030 _printf_r
000000e0 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10006a1c g     F .text	00000064 .hidden __udivsi3
10013ad4 g     F .text	000000ac isatty
100169a8 g     O .rodata	000000c8 __mprec_tens
100045cc g     F .text	00000274 update_Star
1000bbe8 g     F .text	0000000c __locale_charset
10034488 g     O .bss	00000004 __malloc_top_pad
100050d0 g     F .text	00000268 UsbGetConfigDesc2
100257d0 g     O .rwdata	00000004 __mb_cur_max
1000bc18 g     F .text	0000000c _localeconv_r
1000cef4 g     F .text	0000003c __i2b
1000b51c g     F .text	000004c8 __sfvwrite_r
100042e0 g     F .text	00000190 win_Anime
1000e150 g     F .text	00000054 _sbrk_r
10000598 g     F .text	000001b4 set_the_enemy_easy
10010060 g     F .text	00000060 _read_r
100257f0 g     O .rwdata	00000004 alt_max_fd
1000fc44 g     F .text	000000f0 _fclose_r
10000e50 g     F .text	0000010c get_Enemy_Ceil_Pos
1000ad08 g     F .text	00000030 fflush
10034484 g     O .bss	00000004 __malloc_max_sbrked_mem
1000074c g     F .text	0000030c set_the_enemy_lightning
10010fc0 g     F .text	000008ac .hidden __adddf3
1000d704 g     F .text	0000010c __b2d
100109fc g     F .text	000005c4 .hidden __umoddi3
10013ca8 g     F .text	000000dc lseek
100257c8 g     O .rwdata	00000004 _global_impure_ptr
1000db78 g     F .text	00000564 _realloc_r
100345d4 g       *ABS*	00000000 __bss_end
1001535c g     F .text	000000f0 alt_iic_isr_register
100158cc g     F .text	00000108 alt_tick
10010400 g     F .text	000005fc .hidden __udivdi3
1000feac g     F .text	00000024 _fputwc_r
10016980 g     O .rodata	00000028 __mprec_bigtens
1000ccd8 g     F .text	00000104 __s2b
10013758 g     F .text	000000a8 .hidden __floatunsidf
100019e4 g     F .text	00001898 updateKirby
1000d444 g     F .text	00000060 __mcmp
10004b20 g     F .text	00000100 UsbSetAddress
1000b0b8 g     F .text	00000018 __fp_lock_all
10015310 g     F .text	0000004c alt_ic_irq_enabled
10015830 g     F .text	0000009c alt_alarm_stop
1003449c g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
100245c0 g     O .rwdata	00000028 alt_dev_null
10014fcc g     F .text	00000020 alt_dcache_flush_all
1000cddc g     F .text	00000068 __hi0bits
10001670 g     F .text	00000074 IO_read
100135fc g     F .text	00000080 .hidden __fixdfsi
10025808 g       *ABS*	00000000 __ram_rwdata_end
100257e8 g     O .rwdata	00000008 alt_dev_list
10014128 g     F .text	00000100 write
10016bc4 g       *ABS*	00000000 __ram_rodata_end
100139e0 g     F .text	000000b8 fstat
100123a0 g     F .text	000000f4 .hidden __ledf2
10005ac4 g     F .text	00000080 UsbPrintMem
100037a4 g     F .text	00000104 get_Kirby_Botton_Pos
1000d1bc g     F .text	00000140 __pow5mult
1000e4d0 g     F .text	0000150c ___vfiprintf_internal_r
1003447c g     O .bss	00000004 __nlocale_changed
10006a80 g     F .text	00000058 .hidden __umodsi3
100345d4 g       *ABS*	00000000 end
10014444 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10016084 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10013800 g     F .text	00000064 .hidden __clzsi2
10014b24 g     F .text	00000224 altera_avalon_jtag_uart_write
1000b0a8 g     F .text	00000004 __sfp_lock_acquire
1000c610 g     F .text	000000e4 memchr
10006cd8 g     F .text	000022dc ___vfprintf_internal_r
10005438 g     F .text	00000100 UsbClassRequest
1000b20c g     F .text	00000310 _free_r
1000bbf4 g     F .text	00000010 __locale_mb_cur_max
100040b0 g     F .text	000000a8 sqr_Dis_Kirby_Door
10015ed0 g     F .text	00000180 __call_exitprocs
10034478 g     O .bss	00000004 __mlocale_changed
100257d4 g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
100344a0 g     O .bss	00000004 _alt_tick_rate
1000d2fc g     F .text	00000148 __lshift
100344a4 g     O .bss	00000004 _alt_nticks
10013e84 g     F .text	00000104 read
10014294 g     F .text	0000004c alt_sys_init
1000179c g     F .text	00000248 upload_Kirby_Info
10015db8 g     F .text	00000118 __register_exitproc
1000cf30 g     F .text	0000028c __multiply
100147b0 g     F .text	00000068 altera_avalon_jtag_uart_close
10006ad8 g     F .text	00000028 .hidden __mulsi3
10016bc4 g       *ABS*	00000000 __ram_rwdata_start
10016084 g       *ABS*	00000000 __ram_rodata_start
100344ac g     O .bss	00000028 __malloc_current_mallinfo
1000d810 g     F .text	0000014c __d2b
10003bb4 g     F .text	00000114 get_Wall_Info
10004c20 g     F .text	00000148 UsbGetDeviceDesc1
100142e0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10015b90 g     F .text	000000c4 alt_get_fd
10014e74 g     F .text	00000158 alt_busy_sleep
1000fb14 g     F .text	00000054 _close_r
10001450 g     F .text	000000dc initial_Registers
1000046c g     F .text	0000012c initial_enemy
10015d3c g     F .text	0000007c memcmp
100143a0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
100345d4 g       *ABS*	00000000 __alt_stack_base
100143f0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
1000908c g     F .text	00000154 __swsetup_r
1001186c g     F .text	000009d0 .hidden __divdf3
1000af68 g     F .text	00000118 __sfp
1000da74 g     F .text	00000078 __copybits
10004840 g     F .text	000000d0 star_Meet_Enemy
100241b8 g     O .rwdata	00000408 __malloc_av_
1000b0b4 g     F .text	00000004 __sinit_lock_release
10012494 g     F .text	0000086c .hidden __muldf3
1000e1a4 g     F .text	00000054 __sread
100059c0 g     F .text	00000084 UsbWaitTDListDone
10015a88 g     F .text	00000108 alt_find_file
10015028 g     F .text	000000a4 alt_dev_llist_insert
10013e00 g     F .text	00000024 __malloc_lock
1001400c g     F .text	000000b0 sbrk
1000acac g     F .text	0000005c _fflush_r
1000fb68 g     F .text	000000dc _calloc_r
1003444c g       *ABS*	00000000 __bss_start
1000c998 g     F .text	00000128 memset
10004470 g     F .text	00000038 main
10034498 g     O .bss	00000004 alt_envp
10034480 g     O .bss	00000004 __malloc_max_total_mem
10014340 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000026c g     F .text	00000200 AI_enemy
10005338 g     F .text	00000100 UsbSetConfig
10010200 g     F .text	00000018 __swbuf
10000a58 g     F .text	00000204 upload_enemy_Info
1000e2d8 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000fd34 g     F .text	00000014 fclose
10004910 g     F .text	000000c0 test_keyboard
10009408 g     F .text	00001688 _dtoa_r
1000be04 g     F .text	0000080c _malloc_r
10010374 g     F .text	00000030 __ascii_wctomb
100257f4 g     O .rwdata	00000004 alt_errno
1000141c g     F .text	00000034 initial_Game_State
1000b9e4 g     F .text	000000c4 _fwalk
10006924 g     F .text	00000084 .hidden __divsi3
1000b0e8 g     F .text	00000124 _malloc_trim_r
10005538 g     F .text	00000148 UsbGetHidDesc
10016084 g       *ABS*	00000000 __CTOR_END__
1000e2e0 g     F .text	000000dc strcmp
10016084 g       *ABS*	00000000 __flash_rodata_start
10016084 g       *ABS*	00000000 __DTOR_LIST__
100044a8 g     F .text	00000054 initial_Star
10003f08 g     F .text	000000ec enemy_Should_Be_Inhaled
1001223c g     F .text	00000088 .hidden __nedf2
10004a28 g     F .text	00000044 UsbRead
1001425c g     F .text	00000038 alt_irq_init
10013f88 g     F .text	00000084 alt_release_fd
10016a90 g     O .rodata	00000100 .hidden __clz_tab
10034474 g     O .bss	00000004 _PathLocale
100036d8 g     F .text	00000054 map_Width
10015cf0 g     F .text	00000014 atexit
1000fab4 g     F .text	00000060 _write_r
1000bc24 g     F .text	00000018 setlocale
100257cc g     O .rwdata	00000004 _impure_ptr
10034490 g     O .bss	00000004 alt_argc
1000aa90 g     F .text	0000021c __sflush_r
10003324 g     F .text	00000370 force_It_Inside_Map
1001512c g     F .text	00000060 _do_dtors
1000bc10 g     F .text	00000008 __locale_cjk_lang
100039ac g     F .text	00000104 get_Kirby_Left_Pos
10003d24 g     F .text	0000005c kirby_Screen_Center_X
10000020 g       .exceptions	00000000 alt_irq_entry
1000d6a0 g     F .text	00000064 __ulp
1000b0d0 g     F .text	00000018 __fp_unlock_all
100257e0 g     O .rwdata	00000008 alt_fs_list
10005680 g     F .text	00000340 UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000bc3c g     F .text	0000000c localeconv
100151ac g     F .text	00000050 alt_ic_isr_register
100016e4 g     F .text	000000b8 initial_Kirby
10025808 g       *ABS*	00000000 _edata
100345d4 g       *ABS*	00000000 _end
100049d0 g     F .text	00000058 UsbWrite
1000fd48 g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
10014818 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10015284 g     F .text	0000008c alt_ic_irq_disable
1000e200 g     F .text	0000007c __swrite
100257d8 g     O .rwdata	00000004 __malloc_trim_threshold
1000bc04 g     F .text	0000000c __locale_msgcharset
10015d04 g     F .text	00000038 exit
10005b44 g     F .text	00000af8 usb_initialize
1000baa8 g     F .text	000000c4 _fwalk_reent
1000d4a4 g     F .text	000001fc __mdiff
10003ed0 g     F .text	00000038 damage_Frame_Number
100069a8 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000f5c g     F .text	00000108 get_Enemy_Left_Pos
10000020 g     F .exceptions	00000000 alt_exception
1000b0ac g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100015f4 g     F .text	0000007c IO_write
10016050 g     F .text	00000034 _exit
10014d48 g     F .text	0000012c alt_alarm_start
10000d44 g     F .text	0000010c get_Enemy_Botton_Pos
1000bc48 g     F .text	000001bc __smakebuf_r
10000c5c g     F .text	000000e8 upload_enemy_Info_notshow
10006c40 g     F .text	00000098 strlen
100156d4 g     F .text	0000015c open
100122c4 g     F .text	000000dc .hidden __gedf2
10003cc8 g     F .text	0000005c kirby_Return_Normal
100257dc g     O .rwdata	00000004 __wctomb
100044fc g     F .text	00000054 spit_Star
1000e4b8 g     F .text	00000018 __sprint_r
1001518c g     F .text	00000020 alt_icache_flush_all
100257fc g     O .rwdata	00000004 alt_priority_mask
10004550 g     F .text	0000007c upload_Star_Info
100151fc g     F .text	00000088 alt_ic_irq_enable
10008fb4 g     F .text	0000001c __vfprintf_internal
100103a4 g     F .text	0000005c _wctomb_r
10012d00 g     F .text	000008fc .hidden __subdf3
1000ce44 g     F .text	000000b0 __lo0bits
10004f40 g     F .text	00000190 UsbGetConfigDesc1
10025800 g     O .rwdata	00000008 alt_alarm_list
100150cc g     F .text	00000060 _do_ctors
10004a6c g     F .text	000000b4 UsbSoftReset
100102b4 g     F .text	000000c0 wcrtomb
100138a0 g     F .text	000000d8 close
10004d68 g     F .text	000001d8 UsbGetDeviceDesc2
10013be8 g     F .text	00000084 alt_load
1000fed0 g     F .text	00000080 fputwc
1000b0b0 g     F .text	00000004 __sinit_lock_acquire
1000cb90 g     F .text	00000148 __multadd
1000cb68 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	008400f4 	movhi	r2,4099
10000140:	10913504 	addi	r2,r2,17620
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	008400f4 	movhi	r2,4099
10000158:	10913504 	addi	r2,r2,17620
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d09b3817 	ldw	r2,27872(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d09b3817 	ldw	r2,27872(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	068400b4 	movhi	gp,4098
    ori gp, gp, %lo(_gp)
1000023c:	d6b5f214 	ori	gp,gp,55240
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	008400f4 	movhi	r2,4099
    ori r2, r2, %lo(__bss_start)
10000244:	10911314 	ori	r2,r2,17484

    movhi r3, %hi(__bss_end)
10000248:	00c400f4 	movhi	r3,4099
    ori r3, r3, %lo(__bss_end)
1000024c:	18d17514 	ori	r3,r3,17876

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	0013be80 	call	10013be8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	0013d840 	call	10013d84 <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <AI_enemy>:
#include "image.h"
#include "wall.h"
#include "usb_main.h"


void AI_enemy(Enemy * enemy, Kirby *  kirby, int startx, int starty){
1000026c:	defffa04 	addi	sp,sp,-24
10000270:	dfc00515 	stw	ra,20(sp)
10000274:	df000415 	stw	fp,16(sp)
10000278:	df000404 	addi	fp,sp,16
1000027c:	e13ffc15 	stw	r4,-16(fp)
10000280:	e17ffd15 	stw	r5,-12(fp)
10000284:	e1bffe15 	stw	r6,-8(fp)
10000288:	e1ffff15 	stw	r7,-4(fp)
        if (enemy->enemyrightcount== enemy->dist ){
1000028c:	e0bffc17 	ldw	r2,-16(fp)
10000290:	10c00717 	ldw	r3,28(r2)
10000294:	e0bffc17 	ldw	r2,-16(fp)
10000298:	10800917 	ldw	r2,36(r2)
1000029c:	1880041e 	bne	r3,r2,100002b0 <AI_enemy+0x44>
			enemy->enemyrightcount =0;
100002a0:	e0bffc17 	ldw	r2,-16(fp)
100002a4:	10000715 	stw	zero,28(r2)
			enemy->is_right=0;
100002a8:	e0bffc17 	ldw	r2,-16(fp)
100002ac:	10000215 	stw	zero,8(r2)
		}
		if (enemy->enemyleftcount== enemy->dist ){
100002b0:	e0bffc17 	ldw	r2,-16(fp)
100002b4:	10c00817 	ldw	r3,32(r2)
100002b8:	e0bffc17 	ldw	r2,-16(fp)
100002bc:	10800917 	ldw	r2,36(r2)
100002c0:	1880051e 	bne	r3,r2,100002d8 <AI_enemy+0x6c>
			enemy->enemyleftcount =0;
100002c4:	e0bffc17 	ldw	r2,-16(fp)
100002c8:	10000815 	stw	zero,32(r2)
			enemy->is_right=1;
100002cc:	e0bffc17 	ldw	r2,-16(fp)
100002d0:	00c00044 	movi	r3,1
100002d4:	10c00215 	stw	r3,8(r2)
		}
		if ((enemy->enemyrightcount < enemy->dist)&&(enemy->is_right==1)){
100002d8:	e0bffc17 	ldw	r2,-16(fp)
100002dc:	10c00717 	ldw	r3,28(r2)
100002e0:	e0bffc17 	ldw	r2,-16(fp)
100002e4:	10800917 	ldw	r2,36(r2)
100002e8:	1880280e 	bge	r3,r2,1000038c <AI_enemy+0x120>
100002ec:	e0bffc17 	ldw	r2,-16(fp)
100002f0:	10800217 	ldw	r2,8(r2)
100002f4:	10800058 	cmpnei	r2,r2,1
100002f8:	1000241e 	bne	r2,zero,1000038c <AI_enemy+0x120>
			if(enemy->action!=1&&enemy->action!=2)
100002fc:	e0bffc17 	ldw	r2,-16(fp)
10000300:	10800417 	ldw	r2,16(r2)
10000304:	10800060 	cmpeqi	r2,r2,1
10000308:	1000091e 	bne	r2,zero,10000330 <AI_enemy+0xc4>
1000030c:	e0bffc17 	ldw	r2,-16(fp)
10000310:	10800417 	ldw	r2,16(r2)
10000314:	108000a0 	cmpeqi	r2,r2,2
10000318:	1000051e 	bne	r2,zero,10000330 <AI_enemy+0xc4>
				enemy->enemyrightcount+=1;
1000031c:	e0bffc17 	ldw	r2,-16(fp)
10000320:	10800717 	ldw	r2,28(r2)
10000324:	10c00044 	addi	r3,r2,1
10000328:	e0bffc17 	ldw	r2,-16(fp)
1000032c:	10c00715 	stw	r3,28(r2)
			if(enemy->tpe==0){
10000330:	e0bffc17 	ldw	r2,-16(fp)
10000334:	10800617 	ldw	r2,24(r2)
10000338:	10000a1e 	bne	r2,zero,10000364 <AI_enemy+0xf8>
				set_the_enemy_lightning(enemy,startx+enemy->enemyrightcount,starty,kirby);
1000033c:	e0bffc17 	ldw	r2,-16(fp)
10000340:	10c00717 	ldw	r3,28(r2)
10000344:	e0bffe17 	ldw	r2,-8(fp)
10000348:	1885883a 	add	r2,r3,r2
1000034c:	e1fffd17 	ldw	r7,-12(fp)
10000350:	e1bfff17 	ldw	r6,-4(fp)
10000354:	100b883a 	mov	r5,r2
10000358:	e13ffc17 	ldw	r4,-16(fp)
1000035c:	000074c0 	call	1000074c <set_the_enemy_lightning>
			enemy->is_right=1;
		}
		if ((enemy->enemyrightcount < enemy->dist)&&(enemy->is_right==1)){
			if(enemy->action!=1&&enemy->action!=2)
				enemy->enemyrightcount+=1;
			if(enemy->tpe==0){
10000360:	00003c06 	br	10000454 <AI_enemy+0x1e8>
				set_the_enemy_lightning(enemy,startx+enemy->enemyrightcount,starty,kirby);
			}else{
				set_the_enemy_easy (enemy,startx+enemy->enemyrightcount,starty,kirby);
10000364:	e0bffc17 	ldw	r2,-16(fp)
10000368:	10c00717 	ldw	r3,28(r2)
1000036c:	e0bffe17 	ldw	r2,-8(fp)
10000370:	1885883a 	add	r2,r3,r2
10000374:	e1fffd17 	ldw	r7,-12(fp)
10000378:	e1bfff17 	ldw	r6,-4(fp)
1000037c:	100b883a 	mov	r5,r2
10000380:	e13ffc17 	ldw	r4,-16(fp)
10000384:	00005980 	call	10000598 <set_the_enemy_easy>
			enemy->is_right=1;
		}
		if ((enemy->enemyrightcount < enemy->dist)&&(enemy->is_right==1)){
			if(enemy->action!=1&&enemy->action!=2)
				enemy->enemyrightcount+=1;
			if(enemy->tpe==0){
10000388:	00003206 	br	10000454 <AI_enemy+0x1e8>
				set_the_enemy_easy (enemy,startx+enemy->enemyrightcount,starty,kirby);
			}



		}else if((enemy->enemyleftcount < enemy->dist)&&(enemy->is_right==0)){
1000038c:	e0bffc17 	ldw	r2,-16(fp)
10000390:	10c00817 	ldw	r3,32(r2)
10000394:	e0bffc17 	ldw	r2,-16(fp)
10000398:	10800917 	ldw	r2,36(r2)
1000039c:	18802d0e 	bge	r3,r2,10000454 <AI_enemy+0x1e8>
100003a0:	e0bffc17 	ldw	r2,-16(fp)
100003a4:	10800217 	ldw	r2,8(r2)
100003a8:	10002a1e 	bne	r2,zero,10000454 <AI_enemy+0x1e8>
			if(enemy->action!=1&&enemy->action!=2)
100003ac:	e0bffc17 	ldw	r2,-16(fp)
100003b0:	10800417 	ldw	r2,16(r2)
100003b4:	10800060 	cmpeqi	r2,r2,1
100003b8:	1000091e 	bne	r2,zero,100003e0 <AI_enemy+0x174>
100003bc:	e0bffc17 	ldw	r2,-16(fp)
100003c0:	10800417 	ldw	r2,16(r2)
100003c4:	108000a0 	cmpeqi	r2,r2,2
100003c8:	1000051e 	bne	r2,zero,100003e0 <AI_enemy+0x174>
				enemy->enemyleftcount+=1;
100003cc:	e0bffc17 	ldw	r2,-16(fp)
100003d0:	10800817 	ldw	r2,32(r2)
100003d4:	10c00044 	addi	r3,r2,1
100003d8:	e0bffc17 	ldw	r2,-16(fp)
100003dc:	10c00815 	stw	r3,32(r2)
			if(enemy->tpe==0){
100003e0:	e0bffc17 	ldw	r2,-16(fp)
100003e4:	10800617 	ldw	r2,24(r2)
100003e8:	10000d1e 	bne	r2,zero,10000420 <AI_enemy+0x1b4>
				set_the_enemy_lightning(enemy,startx+enemy->dist-enemy->enemyleftcount,starty,kirby);
100003ec:	e0bffc17 	ldw	r2,-16(fp)
100003f0:	10c00917 	ldw	r3,36(r2)
100003f4:	e0bffe17 	ldw	r2,-8(fp)
100003f8:	1887883a 	add	r3,r3,r2
100003fc:	e0bffc17 	ldw	r2,-16(fp)
10000400:	10800817 	ldw	r2,32(r2)
10000404:	1885c83a 	sub	r2,r3,r2
10000408:	e1fffd17 	ldw	r7,-12(fp)
1000040c:	e1bfff17 	ldw	r6,-4(fp)
10000410:	100b883a 	mov	r5,r2
10000414:	e13ffc17 	ldw	r4,-16(fp)
10000418:	000074c0 	call	1000074c <set_the_enemy_lightning>
			}else{
				set_the_enemy_easy (enemy,startx+enemy->dist-enemy->enemyleftcount,starty,kirby);
			}
		}

}
1000041c:	00000d06 	br	10000454 <AI_enemy+0x1e8>
			if(enemy->action!=1&&enemy->action!=2)
				enemy->enemyleftcount+=1;
			if(enemy->tpe==0){
				set_the_enemy_lightning(enemy,startx+enemy->dist-enemy->enemyleftcount,starty,kirby);
			}else{
				set_the_enemy_easy (enemy,startx+enemy->dist-enemy->enemyleftcount,starty,kirby);
10000420:	e0bffc17 	ldw	r2,-16(fp)
10000424:	10c00917 	ldw	r3,36(r2)
10000428:	e0bffe17 	ldw	r2,-8(fp)
1000042c:	1887883a 	add	r3,r3,r2
10000430:	e0bffc17 	ldw	r2,-16(fp)
10000434:	10800817 	ldw	r2,32(r2)
10000438:	1885c83a 	sub	r2,r3,r2
1000043c:	e1fffd17 	ldw	r7,-12(fp)
10000440:	e1bfff17 	ldw	r6,-4(fp)
10000444:	100b883a 	mov	r5,r2
10000448:	e13ffc17 	ldw	r4,-16(fp)
1000044c:	00005980 	call	10000598 <set_the_enemy_easy>
			}
		}

}
10000450:	00000006 	br	10000454 <AI_enemy+0x1e8>
10000454:	0001883a 	nop
10000458:	e037883a 	mov	sp,fp
1000045c:	dfc00117 	ldw	ra,4(sp)
10000460:	df000017 	ldw	fp,0(sp)
10000464:	dec00204 	addi	sp,sp,8
10000468:	f800283a 	ret

1000046c <initial_enemy>:




void initial_enemy(Enemy * enemy, int which){
1000046c:	defffd04 	addi	sp,sp,-12
10000470:	df000215 	stw	fp,8(sp)
10000474:	df000204 	addi	fp,sp,8
10000478:	e13ffe15 	stw	r4,-8(fp)
1000047c:	e17fff15 	stw	r5,-4(fp)
    enemy->realx = 0;
10000480:	e0bffe17 	ldw	r2,-8(fp)
10000484:	10000015 	stw	zero,0(r2)
    enemy->realy = 0;
10000488:	e0bffe17 	ldw	r2,-8(fp)
1000048c:	10000115 	stw	zero,4(r2)
    enemy->is_right = 1;
10000490:	e0bffe17 	ldw	r2,-8(fp)
10000494:	00c00044 	movi	r3,1
10000498:	10c00215 	stw	r3,8(r2)
    enemy->health = 1;
1000049c:	e0bffe17 	ldw	r2,-8(fp)
100004a0:	00c00044 	movi	r3,1
100004a4:	10c00315 	stw	r3,12(r2)
    enemy->tpe = which ;
100004a8:	e0bffe17 	ldw	r2,-8(fp)
100004ac:	e0ffff17 	ldw	r3,-4(fp)
100004b0:	10c00615 	stw	r3,24(r2)
    enemy->frame = 0;
100004b4:	e0bffe17 	ldw	r2,-8(fp)
100004b8:	10000515 	stw	zero,20(r2)
    enemy->enemyrightcount=0;
100004bc:	e0bffe17 	ldw	r2,-8(fp)
100004c0:	10000715 	stw	zero,28(r2)
    enemy->enemyleftcount=0;
100004c4:	e0bffe17 	ldw	r2,-8(fp)
100004c8:	10000815 	stw	zero,32(r2)
    enemy->dist=0;
100004cc:	e0bffe17 	ldw	r2,-8(fp)
100004d0:	10000915 	stw	zero,36(r2)
    enemy->framecount=0;
100004d4:	e0bffe17 	ldw	r2,-8(fp)
100004d8:	10000a15 	stw	zero,40(r2)
    enemy->framechange=0;
100004dc:	e0bffe17 	ldw	r2,-8(fp)
100004e0:	10000b15 	stw	zero,44(r2)
    switch(enemy->tpe){
100004e4:	e0bffe17 	ldw	r2,-8(fp)
100004e8:	10800617 	ldw	r2,24(r2)
100004ec:	10c00060 	cmpeqi	r3,r2,1
100004f0:	18000f1e 	bne	r3,zero,10000530 <initial_enemy+0xc4>
100004f4:	10c00088 	cmpgei	r3,r2,2
100004f8:	1800021e 	bne	r3,zero,10000504 <initial_enemy+0x98>
100004fc:	10000626 	beq	r2,zero,10000518 <initial_enemy+0xac>
            break; 
        }


    }  
}
10000500:	00002006 	br	10000584 <initial_enemy+0x118>
    enemy->enemyrightcount=0;
    enemy->enemyleftcount=0;
    enemy->dist=0;
    enemy->framecount=0;
    enemy->framechange=0;
    switch(enemy->tpe){
10000504:	10c000a0 	cmpeqi	r3,r2,2
10000508:	1800101e 	bne	r3,zero,1000054c <initial_enemy+0xe0>
1000050c:	108000e0 	cmpeqi	r2,r2,3
10000510:	1000151e 	bne	r2,zero,10000568 <initial_enemy+0xfc>
            break; 
        }


    }  
}
10000514:	00001b06 	br	10000584 <initial_enemy+0x118>
    enemy->dist=0;
    enemy->framecount=0;
    enemy->framechange=0;
    switch(enemy->tpe){
        case 0:{
            enemy->action = 0;
10000518:	e0bffe17 	ldw	r2,-8(fp)
1000051c:	10000415 	stw	zero,16(r2)
            enemy->dist=100;
10000520:	e0bffe17 	ldw	r2,-8(fp)
10000524:	00c01904 	movi	r3,100
10000528:	10c00915 	stw	r3,36(r2)
            break; 
1000052c:	00001506 	br	10000584 <initial_enemy+0x118>
        }
        case 1:{
            enemy->action = 4;
10000530:	e0bffe17 	ldw	r2,-8(fp)
10000534:	00c00104 	movi	r3,4
10000538:	10c00415 	stw	r3,16(r2)
            enemy->dist=100;
1000053c:	e0bffe17 	ldw	r2,-8(fp)
10000540:	00c01904 	movi	r3,100
10000544:	10c00915 	stw	r3,36(r2)
            break; 
10000548:	00000e06 	br	10000584 <initial_enemy+0x118>
        }
        case 2:{
            enemy->action = 5;
1000054c:	e0bffe17 	ldw	r2,-8(fp)
10000550:	00c00144 	movi	r3,5
10000554:	10c00415 	stw	r3,16(r2)
            enemy->dist=135;
10000558:	e0bffe17 	ldw	r2,-8(fp)
1000055c:	00c021c4 	movi	r3,135
10000560:	10c00915 	stw	r3,36(r2)
            break; 
10000564:	00000706 	br	10000584 <initial_enemy+0x118>
        }
        case 3:{
            enemy->action = 6;
10000568:	e0bffe17 	ldw	r2,-8(fp)
1000056c:	00c00184 	movi	r3,6
10000570:	10c00415 	stw	r3,16(r2)
            enemy->dist=45;
10000574:	e0bffe17 	ldw	r2,-8(fp)
10000578:	00c00b44 	movi	r3,45
1000057c:	10c00915 	stw	r3,36(r2)
            break; 
10000580:	0001883a 	nop
        }


    }  
}
10000584:	0001883a 	nop
10000588:	e037883a 	mov	sp,fp
1000058c:	df000017 	ldw	fp,0(sp)
10000590:	dec00104 	addi	sp,sp,4
10000594:	f800283a 	ret

10000598 <set_the_enemy_easy>:



void set_the_enemy_easy(Enemy * enemy,int x,int y,Kirby * kirby){
10000598:	defffa04 	addi	sp,sp,-24
1000059c:	dfc00515 	stw	ra,20(sp)
100005a0:	df000415 	stw	fp,16(sp)
100005a4:	df000404 	addi	fp,sp,16
100005a8:	e13ffc15 	stw	r4,-16(fp)
100005ac:	e17ffd15 	stw	r5,-12(fp)
100005b0:	e1bffe15 	stw	r6,-8(fp)
100005b4:	e1ffff15 	stw	r7,-4(fp)
    // enemy->realx = x;
    // enemy->realy = y;

    if(enemy->health==0){
100005b8:	e0bffc17 	ldw	r2,-16(fp)
100005bc:	10800317 	ldw	r2,12(r2)
100005c0:	1000431e 	bne	r2,zero,100006d0 <set_the_enemy_easy+0x138>
        // draw the damage pic
        if (kirby-> x >=  enemy->realx ){
100005c4:	e0bfff17 	ldw	r2,-4(fp)
100005c8:	10c00017 	ldw	r3,0(r2)
100005cc:	e0bffc17 	ldw	r2,-16(fp)
100005d0:	10800017 	ldw	r2,0(r2)
100005d4:	18800416 	blt	r3,r2,100005e8 <set_the_enemy_easy+0x50>
            enemy->is_right =1;
100005d8:	e0bffc17 	ldw	r2,-16(fp)
100005dc:	00c00044 	movi	r3,1
100005e0:	10c00215 	stw	r3,8(r2)
100005e4:	00000206 	br	100005f0 <set_the_enemy_easy+0x58>
        }else{
            enemy->is_right =0;
100005e8:	e0bffc17 	ldw	r2,-16(fp)
100005ec:	10000215 	stw	zero,8(r2)
        }
        if((enemy->frame< 8)&&(enemy->tpe==3)){
100005f0:	e0bffc17 	ldw	r2,-16(fp)
100005f4:	10800517 	ldw	r2,20(r2)
100005f8:	10800208 	cmpgei	r2,r2,8
100005fc:	1000071e 	bne	r2,zero,1000061c <set_the_enemy_easy+0x84>
10000600:	e0bffc17 	ldw	r2,-16(fp)
10000604:	10800617 	ldw	r2,24(r2)
10000608:	108000d8 	cmpnei	r2,r2,3
1000060c:	1000031e 	bne	r2,zero,1000061c <set_the_enemy_easy+0x84>
            enemy->frame=8;
10000610:	e0bffc17 	ldw	r2,-16(fp)
10000614:	00c00204 	movi	r3,8
10000618:	10c00515 	stw	r3,20(r2)
        }
        if((enemy->frame< 12)&&(enemy->tpe==2)){
1000061c:	e0bffc17 	ldw	r2,-16(fp)
10000620:	10800517 	ldw	r2,20(r2)
10000624:	10800308 	cmpgei	r2,r2,12
10000628:	1000071e 	bne	r2,zero,10000648 <set_the_enemy_easy+0xb0>
1000062c:	e0bffc17 	ldw	r2,-16(fp)
10000630:	10800617 	ldw	r2,24(r2)
10000634:	10800098 	cmpnei	r2,r2,2
10000638:	1000031e 	bne	r2,zero,10000648 <set_the_enemy_easy+0xb0>
            enemy->frame=12;
1000063c:	e0bffc17 	ldw	r2,-16(fp)
10000640:	00c00304 	movi	r3,12
10000644:	10c00515 	stw	r3,20(r2)
        }
        if((enemy->frame< 11)&&(enemy->tpe==1)){
10000648:	e0bffc17 	ldw	r2,-16(fp)
1000064c:	10800517 	ldw	r2,20(r2)
10000650:	108002c8 	cmpgei	r2,r2,11
10000654:	1000071e 	bne	r2,zero,10000674 <set_the_enemy_easy+0xdc>
10000658:	e0bffc17 	ldw	r2,-16(fp)
1000065c:	10800617 	ldw	r2,24(r2)
10000660:	10800058 	cmpnei	r2,r2,1
10000664:	1000031e 	bne	r2,zero,10000674 <set_the_enemy_easy+0xdc>
            enemy->frame=11;
10000668:	e0bffc17 	ldw	r2,-16(fp)
1000066c:	00c002c4 	movi	r3,11
10000670:	10c00515 	stw	r3,20(r2)
        }

        if(enemy->framecount<4){
10000674:	e0bffc17 	ldw	r2,-16(fp)
10000678:	10800a17 	ldw	r2,40(r2)
1000067c:	10800108 	cmpgei	r2,r2,4
10000680:	1000101e 	bne	r2,zero,100006c4 <set_the_enemy_easy+0x12c>
           enemy->framecount+=1; 
10000684:	e0bffc17 	ldw	r2,-16(fp)
10000688:	10800a17 	ldw	r2,40(r2)
1000068c:	10c00044 	addi	r3,r2,1
10000690:	e0bffc17 	ldw	r2,-16(fp)
10000694:	10c00a15 	stw	r3,40(r2)
           upload_enemy_Info(enemy,kirby);
10000698:	e17fff17 	ldw	r5,-4(fp)
1000069c:	e13ffc17 	ldw	r4,-16(fp)
100006a0:	0000a580 	call	10000a58 <upload_enemy_Info>
           frame_Time(KIRBY_FRAME_STEP/2);
100006a4:	01003e84 	movi	r4,250
100006a8:	00036940 	call	10003694 <frame_Time>
           enemy->frame+=1;
100006ac:	e0bffc17 	ldw	r2,-16(fp)
100006b0:	10800517 	ldw	r2,20(r2)
100006b4:	10c00044 	addi	r3,r2,1
100006b8:	e0bffc17 	ldw	r2,-16(fp)
100006bc:	10c00515 	stw	r3,20(r2)
        frame_Time(KIRBY_FRAME_STEP/2);

    }
                                                                                                                                                                                                                                                                                                                    

}
100006c0:	00001c06 	br	10000734 <set_the_enemy_easy+0x19c>
           enemy->framecount+=1; 
           upload_enemy_Info(enemy,kirby);
           frame_Time(KIRBY_FRAME_STEP/2);
           enemy->frame+=1;
        }else{
             upload_enemy_Info_notshow(enemy);
100006c4:	e13ffc17 	ldw	r4,-16(fp)
100006c8:	0000c5c0 	call	10000c5c <upload_enemy_Info_notshow>
        frame_Time(KIRBY_FRAME_STEP/2);

    }
                                                                                                                                                                                                                                                                                                                    

}
100006cc:	00001906 	br	10000734 <set_the_enemy_easy+0x19c>
        }


    }else
    {
        enemy->realx = x;
100006d0:	e0bffc17 	ldw	r2,-16(fp)
100006d4:	e0fffd17 	ldw	r3,-12(fp)
100006d8:	10c00015 	stw	r3,0(r2)
        enemy->realy = y;
100006dc:	e0bffc17 	ldw	r2,-16(fp)
100006e0:	e0fffe17 	ldw	r3,-8(fp)
100006e4:	10c00115 	stw	r3,4(r2)
        enemy->frame = (enemy->frame  + 1) % LEFT_FRAME_NUM;
100006e8:	e0bffc17 	ldw	r2,-16(fp)
100006ec:	10800517 	ldw	r2,20(r2)
100006f0:	10c00044 	addi	r3,r2,1
100006f4:	00a00034 	movhi	r2,32768
100006f8:	108001c4 	addi	r2,r2,7
100006fc:	1884703a 	and	r2,r3,r2
10000700:	1000040e 	bge	r2,zero,10000714 <set_the_enemy_easy+0x17c>
10000704:	10bfffc4 	addi	r2,r2,-1
10000708:	00fffe04 	movi	r3,-8
1000070c:	10c4b03a 	or	r2,r2,r3
10000710:	10800044 	addi	r2,r2,1
10000714:	1007883a 	mov	r3,r2
10000718:	e0bffc17 	ldw	r2,-16(fp)
1000071c:	10c00515 	stw	r3,20(r2)
        upload_enemy_Info(enemy,kirby);
10000720:	e17fff17 	ldw	r5,-4(fp)
10000724:	e13ffc17 	ldw	r4,-16(fp)
10000728:	0000a580 	call	10000a58 <upload_enemy_Info>
        frame_Time(KIRBY_FRAME_STEP/2);
1000072c:	01003e84 	movi	r4,250
10000730:	00036940 	call	10003694 <frame_Time>

    }
                                                                                                                                                                                                                                                                                                                    

}
10000734:	0001883a 	nop
10000738:	e037883a 	mov	sp,fp
1000073c:	dfc00117 	ldw	ra,4(sp)
10000740:	df000017 	ldw	fp,0(sp)
10000744:	dec00204 	addi	sp,sp,8
10000748:	f800283a 	ret

1000074c <set_the_enemy_lightning>:


void set_the_enemy_lightning(Enemy * enemy,int x,int y,Kirby * kirby){
1000074c:	defff804 	addi	sp,sp,-32
10000750:	dfc00715 	stw	ra,28(sp)
10000754:	df000615 	stw	fp,24(sp)
10000758:	df000604 	addi	fp,sp,24
1000075c:	e13ffc15 	stw	r4,-16(fp)
10000760:	e17ffd15 	stw	r5,-12(fp)
10000764:	e1bffe15 	stw	r6,-8(fp)
10000768:	e1ffff15 	stw	r7,-4(fp)
    // enemy->realx = x;
    // enemy->realy = y;  
    int distx=0;
1000076c:	e03ffa15 	stw	zero,-24(fp)
    int disty=0;
10000770:	e03ffb15 	stw	zero,-20(fp)
    //enemy-> show= 1;
    if(enemy->health==0){
10000774:	e0bffc17 	ldw	r2,-16(fp)
10000778:	10800317 	ldw	r2,12(r2)
1000077c:	10002e1e 	bne	r2,zero,10000838 <set_the_enemy_lightning+0xec>
        // draw the damage pic 
        if (kirby-> x >=  enemy->realx ){
10000780:	e0bfff17 	ldw	r2,-4(fp)
10000784:	10c00017 	ldw	r3,0(r2)
10000788:	e0bffc17 	ldw	r2,-16(fp)
1000078c:	10800017 	ldw	r2,0(r2)
10000790:	18800416 	blt	r3,r2,100007a4 <set_the_enemy_lightning+0x58>
            enemy->is_right =1;
10000794:	e0bffc17 	ldw	r2,-16(fp)
10000798:	00c00044 	movi	r3,1
1000079c:	10c00215 	stw	r3,8(r2)
100007a0:	00000206 	br	100007ac <set_the_enemy_lightning+0x60>
        }else{
            enemy->is_right =0;
100007a4:	e0bffc17 	ldw	r2,-16(fp)
100007a8:	10000215 	stw	zero,8(r2)
        }
        if((enemy->frame< 12)&&(enemy->tpe==0)){
100007ac:	e0bffc17 	ldw	r2,-16(fp)
100007b0:	10800517 	ldw	r2,20(r2)
100007b4:	10800308 	cmpgei	r2,r2,12
100007b8:	1000081e 	bne	r2,zero,100007dc <set_the_enemy_lightning+0x90>
100007bc:	e0bffc17 	ldw	r2,-16(fp)
100007c0:	10800617 	ldw	r2,24(r2)
100007c4:	1000051e 	bne	r2,zero,100007dc <set_the_enemy_lightning+0x90>
            enemy->frame=12;
100007c8:	e0bffc17 	ldw	r2,-16(fp)
100007cc:	00c00304 	movi	r3,12
100007d0:	10c00515 	stw	r3,20(r2)
            enemy->action=0;
100007d4:	e0bffc17 	ldw	r2,-16(fp)
100007d8:	10000415 	stw	zero,16(r2)
        }

        if(enemy->framecount<4){
100007dc:	e0bffc17 	ldw	r2,-16(fp)
100007e0:	10800a17 	ldw	r2,40(r2)
100007e4:	10800108 	cmpgei	r2,r2,4
100007e8:	1000101e 	bne	r2,zero,1000082c <set_the_enemy_lightning+0xe0>
           enemy->framecount+=1; 
100007ec:	e0bffc17 	ldw	r2,-16(fp)
100007f0:	10800a17 	ldw	r2,40(r2)
100007f4:	10c00044 	addi	r3,r2,1
100007f8:	e0bffc17 	ldw	r2,-16(fp)
100007fc:	10c00a15 	stw	r3,40(r2)
           upload_enemy_Info(enemy,kirby);
10000800:	e17fff17 	ldw	r5,-4(fp)
10000804:	e13ffc17 	ldw	r4,-16(fp)
10000808:	0000a580 	call	10000a58 <upload_enemy_Info>
           frame_Time(KIRBY_FRAME_STEP/2);
1000080c:	01003e84 	movi	r4,250
10000810:	00036940 	call	10003694 <frame_Time>
           enemy->frame+=1;
10000814:	e0bffc17 	ldw	r2,-16(fp)
10000818:	10800517 	ldw	r2,20(r2)
1000081c:	10c00044 	addi	r3,r2,1
10000820:	e0bffc17 	ldw	r2,-16(fp)
10000824:	10c00515 	stw	r3,20(r2)
 

    }
                                                                                                                                                                                                                                                                                                                    

}
10000828:	00008506 	br	10000a40 <set_the_enemy_lightning+0x2f4>
           enemy->framecount+=1; 
           upload_enemy_Info(enemy,kirby);
           frame_Time(KIRBY_FRAME_STEP/2);
           enemy->frame+=1;
        }else{
             upload_enemy_Info_notshow(enemy);
1000082c:	e13ffc17 	ldw	r4,-16(fp)
10000830:	0000c5c0 	call	10000c5c <upload_enemy_Info_notshow>
 

    }
                                                                                                                                                                                                                                                                                                                    

}
10000834:	00008206 	br	10000a40 <set_the_enemy_lightning+0x2f4>
        }


    }else
    {   
        enemy->realx = x;
10000838:	e0bffc17 	ldw	r2,-16(fp)
1000083c:	e0fffd17 	ldw	r3,-12(fp)
10000840:	10c00015 	stw	r3,0(r2)
        enemy->realy = y;  
10000844:	e0bffc17 	ldw	r2,-16(fp)
10000848:	e0fffe17 	ldw	r3,-8(fp)
1000084c:	10c00115 	stw	r3,4(r2)
    
    	if (enemy->framechange==1){
10000850:	e0bffc17 	ldw	r2,-16(fp)
10000854:	10800b17 	ldw	r2,44(r2)
10000858:	10800058 	cmpnei	r2,r2,1
1000085c:	1000041e 	bne	r2,zero,10000870 <set_the_enemy_lightning+0x124>
    		enemy->frame=0;
10000860:	e0bffc17 	ldw	r2,-16(fp)
10000864:	10000515 	stw	zero,20(r2)
    		enemy->framechange=0;
10000868:	e0bffc17 	ldw	r2,-16(fp)
1000086c:	10000b15 	stw	zero,44(r2)
    	}
    	distx =abs(kirby->x - enemy->realx);
10000870:	e0bfff17 	ldw	r2,-4(fp)
10000874:	10c00017 	ldw	r3,0(r2)
10000878:	e0bffc17 	ldw	r2,-16(fp)
1000087c:	10800017 	ldw	r2,0(r2)
10000880:	1885c83a 	sub	r2,r3,r2
10000884:	1000010e 	bge	r2,zero,1000088c <set_the_enemy_lightning+0x140>
10000888:	0085c83a 	sub	r2,zero,r2
1000088c:	e0bffa15 	stw	r2,-24(fp)
    	disty =abs(kirby->y-enemy->realy);
10000890:	e0bfff17 	ldw	r2,-4(fp)
10000894:	10c00117 	ldw	r3,4(r2)
10000898:	e0bffc17 	ldw	r2,-16(fp)
1000089c:	10800117 	ldw	r2,4(r2)
100008a0:	1885c83a 	sub	r2,r3,r2
100008a4:	1000010e 	bge	r2,zero,100008ac <set_the_enemy_lightning+0x160>
100008a8:	0085c83a 	sub	r2,zero,r2
100008ac:	e0bffb15 	stw	r2,-20(fp)
    	if((distx==60||distx==40||distx==20)&&(disty<50)){
100008b0:	e0bffa17 	ldw	r2,-24(fp)
100008b4:	10800f20 	cmpeqi	r2,r2,60
100008b8:	1000061e 	bne	r2,zero,100008d4 <set_the_enemy_lightning+0x188>
100008bc:	e0bffa17 	ldw	r2,-24(fp)
100008c0:	10800a20 	cmpeqi	r2,r2,40
100008c4:	1000031e 	bne	r2,zero,100008d4 <set_the_enemy_lightning+0x188>
100008c8:	e0bffa17 	ldw	r2,-24(fp)
100008cc:	10800518 	cmpnei	r2,r2,20
100008d0:	1000061e 	bne	r2,zero,100008ec <set_the_enemy_lightning+0x1a0>
100008d4:	e0bffb17 	ldw	r2,-20(fp)
100008d8:	10800c88 	cmpgei	r2,r2,50
100008dc:	1000031e 	bne	r2,zero,100008ec <set_the_enemy_lightning+0x1a0>
    		enemy->framechange=1;
100008e0:	e0bffc17 	ldw	r2,-16(fp)
100008e4:	00c00044 	movi	r3,1
100008e8:	10c00b15 	stw	r3,44(r2)
    	}
    	if(distx>60||disty>50){
100008ec:	e0bffa17 	ldw	r2,-24(fp)
100008f0:	10800f48 	cmpgei	r2,r2,61
100008f4:	1000031e 	bne	r2,zero,10000904 <set_the_enemy_lightning+0x1b8>
100008f8:	e0bffb17 	ldw	r2,-20(fp)
100008fc:	10800cd0 	cmplti	r2,r2,51
10000900:	1000111e 	bne	r2,zero,10000948 <set_the_enemy_lightning+0x1fc>
    		enemy->action=0;
10000904:	e0bffc17 	ldw	r2,-16(fp)
10000908:	10000415 	stw	zero,16(r2)
    		enemy->frame = (enemy->frame  + 1) % LEFT_FRAME_NUM;
1000090c:	e0bffc17 	ldw	r2,-16(fp)
10000910:	10800517 	ldw	r2,20(r2)
10000914:	10c00044 	addi	r3,r2,1
10000918:	00a00034 	movhi	r2,32768
1000091c:	108001c4 	addi	r2,r2,7
10000920:	1884703a 	and	r2,r3,r2
10000924:	1000040e 	bge	r2,zero,10000938 <set_the_enemy_lightning+0x1ec>
10000928:	10bfffc4 	addi	r2,r2,-1
1000092c:	00fffe04 	movi	r3,-8
10000930:	10c4b03a 	or	r2,r2,r3
10000934:	10800044 	addi	r2,r2,1
10000938:	1007883a 	mov	r3,r2
1000093c:	e0bffc17 	ldw	r2,-16(fp)
10000940:	10c00515 	stw	r3,20(r2)
10000944:	00003206 	br	10000a10 <set_the_enemy_lightning+0x2c4>
    	}else if (distx <= 60 && distx >=30 && disty<50 ){
10000948:	e0bffa17 	ldw	r2,-24(fp)
1000094c:	10800f48 	cmpgei	r2,r2,61
10000950:	1000131e 	bne	r2,zero,100009a0 <set_the_enemy_lightning+0x254>
10000954:	e0bffa17 	ldw	r2,-24(fp)
10000958:	10800790 	cmplti	r2,r2,30
1000095c:	1000101e 	bne	r2,zero,100009a0 <set_the_enemy_lightning+0x254>
10000960:	e0bffb17 	ldw	r2,-20(fp)
10000964:	10800c88 	cmpgei	r2,r2,50
10000968:	10000d1e 	bne	r2,zero,100009a0 <set_the_enemy_lightning+0x254>
    		enemy->action=1;
1000096c:	e0bffc17 	ldw	r2,-16(fp)
10000970:	00c00044 	movi	r3,1
10000974:	10c00415 	stw	r3,16(r2)
    		enemy->frame = (enemy->frame  + 1) % 5;
10000978:	e0bffc17 	ldw	r2,-16(fp)
1000097c:	10800517 	ldw	r2,20(r2)
10000980:	10800044 	addi	r2,r2,1
10000984:	01400144 	movi	r5,5
10000988:	1009883a 	mov	r4,r2
1000098c:	00069a80 	call	100069a8 <__modsi3>
10000990:	1007883a 	mov	r3,r2
10000994:	e0bffc17 	ldw	r2,-16(fp)
10000998:	10c00515 	stw	r3,20(r2)
1000099c:	00001c06 	br	10000a10 <set_the_enemy_lightning+0x2c4>

    	}else if(distx< 30&&disty<50){
100009a0:	e0bffa17 	ldw	r2,-24(fp)
100009a4:	10800788 	cmpgei	r2,r2,30
100009a8:	1000191e 	bne	r2,zero,10000a10 <set_the_enemy_lightning+0x2c4>
100009ac:	e0bffb17 	ldw	r2,-20(fp)
100009b0:	10800c88 	cmpgei	r2,r2,50
100009b4:	1000161e 	bne	r2,zero,10000a10 <set_the_enemy_lightning+0x2c4>
    		enemy->action=2;
100009b8:	e0bffc17 	ldw	r2,-16(fp)
100009bc:	00c00084 	movi	r3,2
100009c0:	10c00415 	stw	r3,16(r2)
    		enemy->frame = (enemy->frame  + 1) % 4;
100009c4:	e0bffc17 	ldw	r2,-16(fp)
100009c8:	10800517 	ldw	r2,20(r2)
100009cc:	10c00044 	addi	r3,r2,1
100009d0:	00a00034 	movhi	r2,32768
100009d4:	108000c4 	addi	r2,r2,3
100009d8:	1884703a 	and	r2,r3,r2
100009dc:	1000040e 	bge	r2,zero,100009f0 <set_the_enemy_lightning+0x2a4>
100009e0:	10bfffc4 	addi	r2,r2,-1
100009e4:	00ffff04 	movi	r3,-4
100009e8:	10c4b03a 	or	r2,r2,r3
100009ec:	10800044 	addi	r2,r2,1
100009f0:	1007883a 	mov	r3,r2
100009f4:	e0bffc17 	ldw	r2,-16(fp)
100009f8:	10c00515 	stw	r3,20(r2)
    		enemy->realy-=12;
100009fc:	e0bffc17 	ldw	r2,-16(fp)
10000a00:	10800117 	ldw	r2,4(r2)
10000a04:	10fffd04 	addi	r3,r2,-12
10000a08:	e0bffc17 	ldw	r2,-16(fp)
10000a0c:	10c00115 	stw	r3,4(r2)

    	}

    	upload_enemy_Info(enemy,kirby);
10000a10:	e17fff17 	ldw	r5,-4(fp)
10000a14:	e13ffc17 	ldw	r4,-16(fp)
10000a18:	0000a580 	call	10000a58 <upload_enemy_Info>
        frame_Time(KIRBY_FRAME_STEP/2);
10000a1c:	01003e84 	movi	r4,250
10000a20:	00036940 	call	10003694 <frame_Time>
     	if(enemy->action!=2){
10000a24:	e0bffc17 	ldw	r2,-16(fp)
10000a28:	10800417 	ldw	r2,16(r2)
10000a2c:	108000a0 	cmpeqi	r2,r2,2
10000a30:	1000031e 	bne	r2,zero,10000a40 <set_the_enemy_lightning+0x2f4>
        	enemy->realy=y;
10000a34:	e0bffc17 	ldw	r2,-16(fp)
10000a38:	e0fffe17 	ldw	r3,-8(fp)
10000a3c:	10c00115 	stw	r3,4(r2)
 

    }
                                                                                                                                                                                                                                                                                                                    

}
10000a40:	0001883a 	nop
10000a44:	e037883a 	mov	sp,fp
10000a48:	dfc00117 	ldw	ra,4(sp)
10000a4c:	df000017 	ldw	fp,0(sp)
10000a50:	dec00204 	addi	sp,sp,8
10000a54:	f800283a 	ret

10000a58 <upload_enemy_Info>:
void upload_enemy_Info(Enemy * enemy,Kirby * kirby){
10000a58:	defff204 	addi	sp,sp,-56
10000a5c:	dfc00d15 	stw	ra,52(sp)
10000a60:	df000c15 	stw	fp,48(sp)
10000a64:	df000c04 	addi	fp,sp,48
10000a68:	e13ffe15 	stw	r4,-8(fp)
10000a6c:	e17fff15 	stw	r5,-4(fp)

    int Enemy_Pos_X = enemy->realx;
10000a70:	e0bffe17 	ldw	r2,-8(fp)
10000a74:	10800017 	ldw	r2,0(r2)
10000a78:	e0bff615 	stw	r2,-40(fp)
    int Enemy_Pos_Y = enemy->realy;
10000a7c:	e0bffe17 	ldw	r2,-8(fp)
10000a80:	10800117 	ldw	r2,4(r2)
10000a84:	e0bff715 	stw	r2,-36(fp)
    int Enemy_Image_X = enemy->frame;
10000a88:	e0bffe17 	ldw	r2,-8(fp)
10000a8c:	10800517 	ldw	r2,20(r2)
10000a90:	e0bff815 	stw	r2,-32(fp)
    int Enemy_Image_Y = enemy->action;
10000a94:	e0bffe17 	ldw	r2,-8(fp)
10000a98:	10800417 	ldw	r2,16(r2)
10000a9c:	e0bff915 	stw	r2,-28(fp)
    int Enemy_Image_Width = 0;
10000aa0:	e03ff415 	stw	zero,-48(fp)
    int Enemy_Image_Height = 0;
10000aa4:	e03ff515 	stw	zero,-44(fp)
    int Enemy_Screen_X = 0;
10000aa8:	e03ffa15 	stw	zero,-24(fp)
    int Enemy_Screen_Y = 0;
10000aac:	e03ffb15 	stw	zero,-20(fp)
    int kirby_Botton_X =0;
10000ab0:	e03ffc15 	stw	zero,-16(fp)
    int Kirby_Screen_X = 0;
10000ab4:	e03ffd15 	stw	zero,-12(fp)
    //enemy->show=1;
    // Decide enemy's image width and height
    if (enemy->tpe == 3) {
10000ab8:	e0bffe17 	ldw	r2,-8(fp)
10000abc:	10800617 	ldw	r2,24(r2)
10000ac0:	108000d8 	cmpnei	r2,r2,3
10000ac4:	1000051e 	bne	r2,zero,10000adc <upload_enemy_Info+0x84>
        Enemy_Image_Width = 28;
10000ac8:	00800704 	movi	r2,28
10000acc:	e0bff415 	stw	r2,-48(fp)
        Enemy_Image_Height = 28;
10000ad0:	00800704 	movi	r2,28
10000ad4:	e0bff515 	stw	r2,-44(fp)
10000ad8:	00002606 	br	10000b74 <upload_enemy_Info+0x11c>
    } else if ((enemy->tpe == 1) || (enemy->tpe == 2)) {
10000adc:	e0bffe17 	ldw	r2,-8(fp)
10000ae0:	10800617 	ldw	r2,24(r2)
10000ae4:	10800060 	cmpeqi	r2,r2,1
10000ae8:	1000041e 	bne	r2,zero,10000afc <upload_enemy_Info+0xa4>
10000aec:	e0bffe17 	ldw	r2,-8(fp)
10000af0:	10800617 	ldw	r2,24(r2)
10000af4:	10800098 	cmpnei	r2,r2,2
10000af8:	1000051e 	bne	r2,zero,10000b10 <upload_enemy_Info+0xb8>
        Enemy_Image_Width = 25;
10000afc:	00800644 	movi	r2,25
10000b00:	e0bff415 	stw	r2,-48(fp)
        Enemy_Image_Height = 25;
10000b04:	00800644 	movi	r2,25
10000b08:	e0bff515 	stw	r2,-44(fp)
10000b0c:	00001906 	br	10000b74 <upload_enemy_Info+0x11c>
    } else {
    	if (enemy->action==0){
10000b10:	e0bffe17 	ldw	r2,-8(fp)
10000b14:	10800417 	ldw	r2,16(r2)
10000b18:	1000051e 	bne	r2,zero,10000b30 <upload_enemy_Info+0xd8>
			Enemy_Image_Width = 25;
10000b1c:	00800644 	movi	r2,25
10000b20:	e0bff415 	stw	r2,-48(fp)
			Enemy_Image_Height = 25;
10000b24:	00800644 	movi	r2,25
10000b28:	e0bff515 	stw	r2,-44(fp)
10000b2c:	00001106 	br	10000b74 <upload_enemy_Info+0x11c>
    	}else if(enemy->action==1){
10000b30:	e0bffe17 	ldw	r2,-8(fp)
10000b34:	10800417 	ldw	r2,16(r2)
10000b38:	10800058 	cmpnei	r2,r2,1
10000b3c:	1000051e 	bne	r2,zero,10000b54 <upload_enemy_Info+0xfc>
    		Enemy_Image_Width = 50;
10000b40:	00800c84 	movi	r2,50
10000b44:	e0bff415 	stw	r2,-48(fp)
    		Enemy_Image_Height = 25;
10000b48:	00800644 	movi	r2,25
10000b4c:	e0bff515 	stw	r2,-44(fp)
10000b50:	00000806 	br	10000b74 <upload_enemy_Info+0x11c>
    	}else if(enemy->action==2){
10000b54:	e0bffe17 	ldw	r2,-8(fp)
10000b58:	10800417 	ldw	r2,16(r2)
10000b5c:	10800098 	cmpnei	r2,r2,2
10000b60:	1000041e 	bne	r2,zero,10000b74 <upload_enemy_Info+0x11c>
    		Enemy_Image_Width = 50;
10000b64:	00800c84 	movi	r2,50
10000b68:	e0bff415 	stw	r2,-48(fp)
    		Enemy_Image_Height = 50;
10000b6c:	00800c84 	movi	r2,50
10000b70:	e0bff515 	stw	r2,-44(fp)
    	}
    }
    kirby_Botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff; // Center botton
10000b74:	e13fff17 	ldw	r4,-4(fp)
10000b78:	00037a40 	call	100037a4 <get_Kirby_Botton_Pos>
10000b7c:	1004d43a 	srli	r2,r2,16
10000b80:	e0bffc15 	stw	r2,-16(fp)
    Kirby_Screen_X = kirby_Screen_Center_X(kirby_Botton_X);
10000b84:	e13ffc17 	ldw	r4,-16(fp)
10000b88:	0003d240 	call	10003d24 <kirby_Screen_Center_X>
10000b8c:	e0bffd15 	stw	r2,-12(fp)

//    if(((kirby->x-enemy->realx)< 234)||((enemy->realx-kirby->x)< 234)){
	Enemy_Screen_X=enemy->realx-kirby->x+Kirby_Screen_X+203;
10000b90:	e0bffe17 	ldw	r2,-8(fp)
10000b94:	10c00017 	ldw	r3,0(r2)
10000b98:	e0bfff17 	ldw	r2,-4(fp)
10000b9c:	10800017 	ldw	r2,0(r2)
10000ba0:	1887c83a 	sub	r3,r3,r2
10000ba4:	e0bffd17 	ldw	r2,-12(fp)
10000ba8:	1885883a 	add	r2,r3,r2
10000bac:	108032c4 	addi	r2,r2,203
10000bb0:	e0bffa15 	stw	r2,-24(fp)
	Enemy_Screen_Y=enemy->realy+152;
10000bb4:	e0bffe17 	ldw	r2,-8(fp)
10000bb8:	10800117 	ldw	r2,4(r2)
10000bbc:	10802604 	addi	r2,r2,152
10000bc0:	e0bffb15 	stw	r2,-20(fp)
//    }else{
//        Enemy_Screen_X = 0;
//        Enemy_Screen_Y = 0;
//    }
    // Upload to enemy's registers
    ADDRESS_PTR[4+2*enemy->tpe]=(Enemy_Image_X << 28) | (Enemy_Image_Y << 24) | (Enemy_Image_Width << 16) | (Enemy_Image_Height << 8)|(enemy->is_right);
10000bc4:	d09b2117 	ldw	r2,27780(gp)
10000bc8:	e0fffe17 	ldw	r3,-8(fp)
10000bcc:	18c00617 	ldw	r3,24(r3)
10000bd0:	18c00084 	addi	r3,r3,2
10000bd4:	180690fa 	slli	r3,r3,3
10000bd8:	10c5883a 	add	r2,r2,r3
10000bdc:	e0fff817 	ldw	r3,-32(fp)
10000be0:	1808973a 	slli	r4,r3,28
10000be4:	e0fff917 	ldw	r3,-28(fp)
10000be8:	1806963a 	slli	r3,r3,24
10000bec:	20c8b03a 	or	r4,r4,r3
10000bf0:	e0fff417 	ldw	r3,-48(fp)
10000bf4:	1806943a 	slli	r3,r3,16
10000bf8:	20c8b03a 	or	r4,r4,r3
10000bfc:	e0fff517 	ldw	r3,-44(fp)
10000c00:	1806923a 	slli	r3,r3,8
10000c04:	20c8b03a 	or	r4,r4,r3
10000c08:	e0fffe17 	ldw	r3,-8(fp)
10000c0c:	18c00217 	ldw	r3,8(r3)
10000c10:	20c6b03a 	or	r3,r4,r3
10000c14:	10c00015 	stw	r3,0(r2)
    //printf("the register is %x",ADDRESS_PTR[4+2*enemy->tpe]);
    ADDRESS_PTR[5+2*enemy->tpe]=(Enemy_Screen_X << 16)|Enemy_Screen_Y;
10000c18:	d09b2117 	ldw	r2,27780(gp)
10000c1c:	e0fffe17 	ldw	r3,-8(fp)
10000c20:	18c00617 	ldw	r3,24(r3)
10000c24:	180690fa 	slli	r3,r3,3
10000c28:	18c00504 	addi	r3,r3,20
10000c2c:	10c5883a 	add	r2,r2,r3
10000c30:	e0fffa17 	ldw	r3,-24(fp)
10000c34:	1808943a 	slli	r4,r3,16
10000c38:	e0fffb17 	ldw	r3,-20(fp)
10000c3c:	20c6b03a 	or	r3,r4,r3
10000c40:	10c00015 	stw	r3,0(r2)
}
10000c44:	0001883a 	nop
10000c48:	e037883a 	mov	sp,fp
10000c4c:	dfc00117 	ldw	ra,4(sp)
10000c50:	df000017 	ldw	fp,0(sp)
10000c54:	dec00204 	addi	sp,sp,8
10000c58:	f800283a 	ret

10000c5c <upload_enemy_Info_notshow>:

void upload_enemy_Info_notshow(Enemy * enemy){
10000c5c:	defff804 	addi	sp,sp,-32
10000c60:	df000715 	stw	fp,28(sp)
10000c64:	df000704 	addi	fp,sp,28
10000c68:	e13fff15 	stw	r4,-4(fp)
    enemy->realx = 0;
10000c6c:	e0bfff17 	ldw	r2,-4(fp)
10000c70:	10000015 	stw	zero,0(r2)
    enemy->realy = 176;
10000c74:	e0bfff17 	ldw	r2,-4(fp)
10000c78:	00c02c04 	movi	r3,176
10000c7c:	10c00115 	stw	r3,4(r2)
    int Enemy_Image_X = enemy->frame;
10000c80:	e0bfff17 	ldw	r2,-4(fp)
10000c84:	10800517 	ldw	r2,20(r2)
10000c88:	e0bff915 	stw	r2,-28(fp)
    int Enemy_Image_Y = enemy->action;
10000c8c:	e0bfff17 	ldw	r2,-4(fp)
10000c90:	10800417 	ldw	r2,16(r2)
10000c94:	e0bffa15 	stw	r2,-24(fp)
    int Enemy_Image_Width = 0;
10000c98:	e03ffb15 	stw	zero,-20(fp)
    int Enemy_Image_Height = 0;
10000c9c:	e03ffc15 	stw	zero,-16(fp)
    int Enemy_Screen_X = 0;
10000ca0:	e03ffd15 	stw	zero,-12(fp)
    int Enemy_Screen_Y = 0;
10000ca4:	e03ffe15 	stw	zero,-8(fp)

	Enemy_Screen_X=0;
10000ca8:	e03ffd15 	stw	zero,-12(fp)
	Enemy_Screen_Y=0;
10000cac:	e03ffe15 	stw	zero,-8(fp)

    // Upload to enemy's registers
    ADDRESS_PTR[4+2*enemy->tpe]=(Enemy_Image_X << 28) | (Enemy_Image_Y << 24) | (Enemy_Image_Width << 16) | (Enemy_Image_Height << 8)|(enemy->is_right);
10000cb0:	d09b2117 	ldw	r2,27780(gp)
10000cb4:	e0ffff17 	ldw	r3,-4(fp)
10000cb8:	18c00617 	ldw	r3,24(r3)
10000cbc:	18c00084 	addi	r3,r3,2
10000cc0:	180690fa 	slli	r3,r3,3
10000cc4:	10c5883a 	add	r2,r2,r3
10000cc8:	e0fff917 	ldw	r3,-28(fp)
10000ccc:	1808973a 	slli	r4,r3,28
10000cd0:	e0fffa17 	ldw	r3,-24(fp)
10000cd4:	1806963a 	slli	r3,r3,24
10000cd8:	20c8b03a 	or	r4,r4,r3
10000cdc:	e0fffb17 	ldw	r3,-20(fp)
10000ce0:	1806943a 	slli	r3,r3,16
10000ce4:	20c8b03a 	or	r4,r4,r3
10000ce8:	e0fffc17 	ldw	r3,-16(fp)
10000cec:	1806923a 	slli	r3,r3,8
10000cf0:	20c8b03a 	or	r4,r4,r3
10000cf4:	e0ffff17 	ldw	r3,-4(fp)
10000cf8:	18c00217 	ldw	r3,8(r3)
10000cfc:	20c6b03a 	or	r3,r4,r3
10000d00:	10c00015 	stw	r3,0(r2)
    //printf("the register is %x",ADDRESS_PTR[4+2*enemy->tpe]);
    ADDRESS_PTR[5+2*enemy->tpe]=(Enemy_Screen_X << 16)|Enemy_Screen_Y;
10000d04:	d09b2117 	ldw	r2,27780(gp)
10000d08:	e0ffff17 	ldw	r3,-4(fp)
10000d0c:	18c00617 	ldw	r3,24(r3)
10000d10:	180690fa 	slli	r3,r3,3
10000d14:	18c00504 	addi	r3,r3,20
10000d18:	10c5883a 	add	r2,r2,r3
10000d1c:	e0fffd17 	ldw	r3,-12(fp)
10000d20:	1808943a 	slli	r4,r3,16
10000d24:	e0fffe17 	ldw	r3,-8(fp)
10000d28:	20c6b03a 	or	r3,r4,r3
10000d2c:	10c00015 	stw	r3,0(r2)
}
10000d30:	0001883a 	nop
10000d34:	e037883a 	mov	sp,fp
10000d38:	df000017 	ldw	fp,0(sp)
10000d3c:	dec00104 	addi	sp,sp,4
10000d40:	f800283a 	ret

10000d44 <get_Enemy_Botton_Pos>:

/* realX and realY are top center of enemies */

int get_Enemy_Botton_Pos (Enemy * enemy) {
10000d44:	defffc04 	addi	sp,sp,-16
10000d48:	df000315 	stw	fp,12(sp)
10000d4c:	df000304 	addi	fp,sp,12
10000d50:	e13fff15 	stw	r4,-4(fp)
    int enemy_ceil_X = 0;
10000d54:	e03ffd15 	stw	zero,-12(fp)
    int enemy_ceil_Y = 0;
10000d58:	e03ffe15 	stw	zero,-8(fp)

    switch (enemy->action) {
10000d5c:	e0bfff17 	ldw	r2,-4(fp)
10000d60:	10800417 	ldw	r2,16(r2)
10000d64:	10c001e8 	cmpgeui	r3,r2,7
10000d68:	1800301e 	bne	r3,zero,10000e2c <get_Enemy_Botton_Pos+0xe8>
10000d6c:	100690ba 	slli	r3,r2,2
10000d70:	00840034 	movhi	r2,4096
10000d74:	10836104 	addi	r2,r2,3460
10000d78:	1885883a 	add	r2,r3,r2
10000d7c:	10800017 	ldw	r2,0(r2)
10000d80:	1000683a 	jmp	r2
10000d84:	10000da0 	cmpeqi	zero,r2,54
10000d88:	10000dc4 	addi	zero,r2,55
10000d8c:	10000de8 	cmpgeui	zero,r2,55
10000d90:	10000e2c 	andhi	zero,r2,56
10000d94:	10000da0 	cmpeqi	zero,r2,54
10000d98:	10000da0 	cmpeqi	zero,r2,54
10000d9c:	10000e0c 	andi	zero,r2,56
    case 0:
    case 4:
    case 5:
        enemy_ceil_X = enemy->realx + 14;
10000da0:	e0bfff17 	ldw	r2,-4(fp)
10000da4:	10800017 	ldw	r2,0(r2)
10000da8:	10800384 	addi	r2,r2,14
10000dac:	e0bffd15 	stw	r2,-12(fp)
        enemy_ceil_Y = enemy->realy + 21;
10000db0:	e0bfff17 	ldw	r2,-4(fp)
10000db4:	10800117 	ldw	r2,4(r2)
10000db8:	10800544 	addi	r2,r2,21
10000dbc:	e0bffe15 	stw	r2,-8(fp)
        break;
10000dc0:	00001b06 	br	10000e30 <get_Enemy_Botton_Pos+0xec>
    case 1:
        enemy_ceil_X = enemy->realx + 14;
10000dc4:	e0bfff17 	ldw	r2,-4(fp)
10000dc8:	10800017 	ldw	r2,0(r2)
10000dcc:	10800384 	addi	r2,r2,14
10000dd0:	e0bffd15 	stw	r2,-12(fp)
        enemy_ceil_Y = enemy->realy + 21;
10000dd4:	e0bfff17 	ldw	r2,-4(fp)
10000dd8:	10800117 	ldw	r2,4(r2)
10000ddc:	10800544 	addi	r2,r2,21
10000de0:	e0bffe15 	stw	r2,-8(fp)
        break;
10000de4:	00001206 	br	10000e30 <get_Enemy_Botton_Pos+0xec>
    case 2:
        enemy_ceil_X = enemy->realx + 14;
10000de8:	e0bfff17 	ldw	r2,-4(fp)
10000dec:	10800017 	ldw	r2,0(r2)
10000df0:	10800384 	addi	r2,r2,14
10000df4:	e0bffd15 	stw	r2,-12(fp)
        enemy_ceil_Y = enemy->realy + 46;
10000df8:	e0bfff17 	ldw	r2,-4(fp)
10000dfc:	10800117 	ldw	r2,4(r2)
10000e00:	10800b84 	addi	r2,r2,46
10000e04:	e0bffe15 	stw	r2,-8(fp)
        break;
10000e08:	00000906 	br	10000e30 <get_Enemy_Botton_Pos+0xec>
    case 6:
        enemy_ceil_X = enemy->realx + 14;
10000e0c:	e0bfff17 	ldw	r2,-4(fp)
10000e10:	10800017 	ldw	r2,0(r2)
10000e14:	10800384 	addi	r2,r2,14
10000e18:	e0bffd15 	stw	r2,-12(fp)
        enemy_ceil_Y = enemy->realy + 26;
10000e1c:	e0bfff17 	ldw	r2,-4(fp)
10000e20:	10800117 	ldw	r2,4(r2)
10000e24:	10800684 	addi	r2,r2,26
10000e28:	e0bffe15 	stw	r2,-8(fp)
    default:
        break;
10000e2c:	0001883a 	nop
    }
    return ((enemy_ceil_X << 16) | enemy_ceil_Y);
10000e30:	e0bffd17 	ldw	r2,-12(fp)
10000e34:	1006943a 	slli	r3,r2,16
10000e38:	e0bffe17 	ldw	r2,-8(fp)
10000e3c:	1884b03a 	or	r2,r3,r2
}
10000e40:	e037883a 	mov	sp,fp
10000e44:	df000017 	ldw	fp,0(sp)
10000e48:	dec00104 	addi	sp,sp,4
10000e4c:	f800283a 	ret

10000e50 <get_Enemy_Ceil_Pos>:

int get_Enemy_Ceil_Pos (Enemy * enemy) {
10000e50:	defffc04 	addi	sp,sp,-16
10000e54:	df000315 	stw	fp,12(sp)
10000e58:	df000304 	addi	fp,sp,12
10000e5c:	e13fff15 	stw	r4,-4(fp)
    int enemy_ceil_X = 0;
10000e60:	e03ffd15 	stw	zero,-12(fp)
    int enemy_ceil_Y = 0;
10000e64:	e03ffe15 	stw	zero,-8(fp)

    switch (enemy->action) {
10000e68:	e0bfff17 	ldw	r2,-4(fp)
10000e6c:	10800417 	ldw	r2,16(r2)
10000e70:	10c001e8 	cmpgeui	r3,r2,7
10000e74:	1800301e 	bne	r3,zero,10000f38 <get_Enemy_Ceil_Pos+0xe8>
10000e78:	100690ba 	slli	r3,r2,2
10000e7c:	00840034 	movhi	r2,4096
10000e80:	1083a404 	addi	r2,r2,3728
10000e84:	1885883a 	add	r2,r3,r2
10000e88:	10800017 	ldw	r2,0(r2)
10000e8c:	1000683a 	jmp	r2
10000e90:	10000eac 	andhi	zero,r2,58
10000e94:	10000ed0 	cmplti	zero,r2,59
10000e98:	10000ef4 	orhi	zero,r2,59
10000e9c:	10000f38 	rdprs	zero,r2,60
10000ea0:	10000eac 	andhi	zero,r2,58
10000ea4:	10000eac 	andhi	zero,r2,58
10000ea8:	10000f18 	cmpnei	zero,r2,60
    case 0:
    case 4:
    case 5:
        enemy_ceil_X = enemy->realx + 14;
10000eac:	e0bfff17 	ldw	r2,-4(fp)
10000eb0:	10800017 	ldw	r2,0(r2)
10000eb4:	10800384 	addi	r2,r2,14
10000eb8:	e0bffd15 	stw	r2,-12(fp)
        enemy_ceil_Y = enemy->realy + 4;
10000ebc:	e0bfff17 	ldw	r2,-4(fp)
10000ec0:	10800117 	ldw	r2,4(r2)
10000ec4:	10800104 	addi	r2,r2,4
10000ec8:	e0bffe15 	stw	r2,-8(fp)
        break;
10000ecc:	00001b06 	br	10000f3c <get_Enemy_Ceil_Pos+0xec>
    case 1:
        enemy_ceil_X = enemy->realx + 14;
10000ed0:	e0bfff17 	ldw	r2,-4(fp)
10000ed4:	10800017 	ldw	r2,0(r2)
10000ed8:	10800384 	addi	r2,r2,14
10000edc:	e0bffd15 	stw	r2,-12(fp)
        enemy_ceil_Y = enemy->realy + 4;
10000ee0:	e0bfff17 	ldw	r2,-4(fp)
10000ee4:	10800117 	ldw	r2,4(r2)
10000ee8:	10800104 	addi	r2,r2,4
10000eec:	e0bffe15 	stw	r2,-8(fp)
        break;
10000ef0:	00001206 	br	10000f3c <get_Enemy_Ceil_Pos+0xec>
    case 2:
        enemy_ceil_X = enemy->realx + 14;
10000ef4:	e0bfff17 	ldw	r2,-4(fp)
10000ef8:	10800017 	ldw	r2,0(r2)
10000efc:	10800384 	addi	r2,r2,14
10000f00:	e0bffd15 	stw	r2,-12(fp)
        enemy_ceil_Y = enemy->realy + 4;
10000f04:	e0bfff17 	ldw	r2,-4(fp)
10000f08:	10800117 	ldw	r2,4(r2)
10000f0c:	10800104 	addi	r2,r2,4
10000f10:	e0bffe15 	stw	r2,-8(fp)
        break;
10000f14:	00000906 	br	10000f3c <get_Enemy_Ceil_Pos+0xec>
    case 6:
        enemy_ceil_X = enemy->realx + 14;
10000f18:	e0bfff17 	ldw	r2,-4(fp)
10000f1c:	10800017 	ldw	r2,0(r2)
10000f20:	10800384 	addi	r2,r2,14
10000f24:	e0bffd15 	stw	r2,-12(fp)
        enemy_ceil_Y = enemy->realy + 3;
10000f28:	e0bfff17 	ldw	r2,-4(fp)
10000f2c:	10800117 	ldw	r2,4(r2)
10000f30:	108000c4 	addi	r2,r2,3
10000f34:	e0bffe15 	stw	r2,-8(fp)
    default:
        break;
10000f38:	0001883a 	nop
    }
    return ((enemy_ceil_X << 16) | enemy_ceil_Y);
10000f3c:	e0bffd17 	ldw	r2,-12(fp)
10000f40:	1006943a 	slli	r3,r2,16
10000f44:	e0bffe17 	ldw	r2,-8(fp)
10000f48:	1884b03a 	or	r2,r3,r2
}
10000f4c:	e037883a 	mov	sp,fp
10000f50:	df000017 	ldw	fp,0(sp)
10000f54:	dec00104 	addi	sp,sp,4
10000f58:	f800283a 	ret

10000f5c <get_Enemy_Left_Pos>:

int get_Enemy_Left_Pos (Enemy * enemy) {
10000f5c:	defffc04 	addi	sp,sp,-16
10000f60:	df000315 	stw	fp,12(sp)
10000f64:	df000304 	addi	fp,sp,12
10000f68:	e13fff15 	stw	r4,-4(fp)
    int enemy_left_X = 0;
10000f6c:	e03ffd15 	stw	zero,-12(fp)
    int enemy_left_Y = 0;
10000f70:	e03ffe15 	stw	zero,-8(fp)

    switch (enemy->action) {
10000f74:	e0bfff17 	ldw	r2,-4(fp)
10000f78:	10800417 	ldw	r2,16(r2)
10000f7c:	10c001e8 	cmpgeui	r3,r2,7
10000f80:	18002f1e 	bne	r3,zero,10001040 <get_Enemy_Left_Pos+0xe4>
10000f84:	100690ba 	slli	r3,r2,2
10000f88:	00840034 	movhi	r2,4096
10000f8c:	1083e704 	addi	r2,r2,3996
10000f90:	1885883a 	add	r2,r3,r2
10000f94:	10800017 	ldw	r2,0(r2)
10000f98:	1000683a 	jmp	r2
10000f9c:	10000fb8 	rdprs	zero,r2,62
10000fa0:	10000fdc 	xori	zero,r2,63
10000fa4:	10001000 	call	11000100 <__alt_heap_start+0xfcbb2c>
10000fa8:	10001040 	call	11000104 <__alt_heap_start+0xfcbb30>
10000fac:	10000fb8 	rdprs	zero,r2,62
10000fb0:	10000fb8 	rdprs	zero,r2,62
10000fb4:	10001024 	muli	zero,r2,64
    case 0:
    case 4:
    case 5:
        enemy_left_X = enemy->realx + 4;
10000fb8:	e0bfff17 	ldw	r2,-4(fp)
10000fbc:	10800017 	ldw	r2,0(r2)
10000fc0:	10800104 	addi	r2,r2,4
10000fc4:	e0bffd15 	stw	r2,-12(fp)
        enemy_left_Y = enemy->realy + 13;
10000fc8:	e0bfff17 	ldw	r2,-4(fp)
10000fcc:	10800117 	ldw	r2,4(r2)
10000fd0:	10800344 	addi	r2,r2,13
10000fd4:	e0bffe15 	stw	r2,-8(fp)
        break;
10000fd8:	00001a06 	br	10001044 <get_Enemy_Left_Pos+0xe8>
    case 1:
        enemy_left_X = enemy->realx + 4;
10000fdc:	e0bfff17 	ldw	r2,-4(fp)
10000fe0:	10800017 	ldw	r2,0(r2)
10000fe4:	10800104 	addi	r2,r2,4
10000fe8:	e0bffd15 	stw	r2,-12(fp)
        enemy_left_Y = enemy->realy + 13;
10000fec:	e0bfff17 	ldw	r2,-4(fp)
10000ff0:	10800117 	ldw	r2,4(r2)
10000ff4:	10800344 	addi	r2,r2,13
10000ff8:	e0bffe15 	stw	r2,-8(fp)
        break;
10000ffc:	00001106 	br	10001044 <get_Enemy_Left_Pos+0xe8>
    case 2:
        enemy_left_X = enemy->realx - 7;
10001000:	e0bfff17 	ldw	r2,-4(fp)
10001004:	10800017 	ldw	r2,0(r2)
10001008:	10bffe44 	addi	r2,r2,-7
1000100c:	e0bffd15 	stw	r2,-12(fp)
        enemy_left_Y = enemy->realy + 25;
10001010:	e0bfff17 	ldw	r2,-4(fp)
10001014:	10800117 	ldw	r2,4(r2)
10001018:	10800644 	addi	r2,r2,25
1000101c:	e0bffe15 	stw	r2,-8(fp)
        break;
10001020:	00000806 	br	10001044 <get_Enemy_Left_Pos+0xe8>
    case 6:
        enemy_left_X = enemy->realx - 0;
10001024:	e0bfff17 	ldw	r2,-4(fp)
10001028:	10800017 	ldw	r2,0(r2)
1000102c:	e0bffd15 	stw	r2,-12(fp)
        enemy_left_Y = enemy->realy + 14;
10001030:	e0bfff17 	ldw	r2,-4(fp)
10001034:	10800117 	ldw	r2,4(r2)
10001038:	10800384 	addi	r2,r2,14
1000103c:	e0bffe15 	stw	r2,-8(fp)
    default:
        break;
10001040:	0001883a 	nop
    }
    return ((enemy_left_X << 16) | enemy_left_Y);
10001044:	e0bffd17 	ldw	r2,-12(fp)
10001048:	1006943a 	slli	r3,r2,16
1000104c:	e0bffe17 	ldw	r2,-8(fp)
10001050:	1884b03a 	or	r2,r3,r2
}
10001054:	e037883a 	mov	sp,fp
10001058:	df000017 	ldw	fp,0(sp)
1000105c:	dec00104 	addi	sp,sp,4
10001060:	f800283a 	ret

10001064 <get_Enemy_Right_Pos>:

int get_Enemy_Right_Pos (Enemy * enemy) {
10001064:	defffc04 	addi	sp,sp,-16
10001068:	df000315 	stw	fp,12(sp)
1000106c:	df000304 	addi	fp,sp,12
10001070:	e13fff15 	stw	r4,-4(fp)
    int enemy_right_X = 0;
10001074:	e03ffd15 	stw	zero,-12(fp)
    int enemy_right_Y = 0;
10001078:	e03ffe15 	stw	zero,-8(fp)

    switch (enemy->action) {
1000107c:	e0bfff17 	ldw	r2,-4(fp)
10001080:	10800417 	ldw	r2,16(r2)
10001084:	10c001e8 	cmpgeui	r3,r2,7
10001088:	1800301e 	bne	r3,zero,1000114c <get_Enemy_Right_Pos+0xe8>
1000108c:	100690ba 	slli	r3,r2,2
10001090:	00840034 	movhi	r2,4096
10001094:	10842904 	addi	r2,r2,4260
10001098:	1885883a 	add	r2,r3,r2
1000109c:	10800017 	ldw	r2,0(r2)
100010a0:	1000683a 	jmp	r2
100010a4:	100010c0 	call	1100010c <__alt_heap_start+0xfcbb38>
100010a8:	100010e4 	muli	zero,r2,67
100010ac:	10001108 	cmpgei	zero,r2,68
100010b0:	1000114c 	andi	zero,r2,69
100010b4:	100010c0 	call	1100010c <__alt_heap_start+0xfcbb38>
100010b8:	100010c0 	call	1100010c <__alt_heap_start+0xfcbb38>
100010bc:	1000112c 	andhi	zero,r2,68
    case 0:
    case 4:
    case 5:
        enemy_right_X = enemy->realx + 24;
100010c0:	e0bfff17 	ldw	r2,-4(fp)
100010c4:	10800017 	ldw	r2,0(r2)
100010c8:	10800604 	addi	r2,r2,24
100010cc:	e0bffd15 	stw	r2,-12(fp)
        enemy_right_Y = enemy->realy + 13;
100010d0:	e0bfff17 	ldw	r2,-4(fp)
100010d4:	10800117 	ldw	r2,4(r2)
100010d8:	10800344 	addi	r2,r2,13
100010dc:	e0bffe15 	stw	r2,-8(fp)
        break;
100010e0:	00001b06 	br	10001150 <get_Enemy_Right_Pos+0xec>

    case 1:
        enemy_right_X = enemy->realx + 24;
100010e4:	e0bfff17 	ldw	r2,-4(fp)
100010e8:	10800017 	ldw	r2,0(r2)
100010ec:	10800604 	addi	r2,r2,24
100010f0:	e0bffd15 	stw	r2,-12(fp)
        enemy_right_Y = enemy->realy + 13;
100010f4:	e0bfff17 	ldw	r2,-4(fp)
100010f8:	10800117 	ldw	r2,4(r2)
100010fc:	10800344 	addi	r2,r2,13
10001100:	e0bffe15 	stw	r2,-8(fp)
        break;
10001104:	00001206 	br	10001150 <get_Enemy_Right_Pos+0xec>
    case 2:
        enemy_right_X = enemy->realx + 35;
10001108:	e0bfff17 	ldw	r2,-4(fp)
1000110c:	10800017 	ldw	r2,0(r2)
10001110:	108008c4 	addi	r2,r2,35
10001114:	e0bffd15 	stw	r2,-12(fp)
        enemy_right_Y = enemy->realy + 25;
10001118:	e0bfff17 	ldw	r2,-4(fp)
1000111c:	10800117 	ldw	r2,4(r2)
10001120:	10800644 	addi	r2,r2,25
10001124:	e0bffe15 	stw	r2,-8(fp)
        break;
10001128:	00000906 	br	10001150 <get_Enemy_Right_Pos+0xec>
    case 6:
        enemy_right_X = enemy->realx + 28;
1000112c:	e0bfff17 	ldw	r2,-4(fp)
10001130:	10800017 	ldw	r2,0(r2)
10001134:	10800704 	addi	r2,r2,28
10001138:	e0bffd15 	stw	r2,-12(fp)
        enemy_right_Y = enemy->realy + 14;
1000113c:	e0bfff17 	ldw	r2,-4(fp)
10001140:	10800117 	ldw	r2,4(r2)
10001144:	10800384 	addi	r2,r2,14
10001148:	e0bffe15 	stw	r2,-8(fp)
    default:
        break;
1000114c:	0001883a 	nop
    }
    return ((enemy_right_X << 16) | enemy_right_Y);
10001150:	e0bffd17 	ldw	r2,-12(fp)
10001154:	1006943a 	slli	r3,r2,16
10001158:	e0bffe17 	ldw	r2,-8(fp)
1000115c:	1884b03a 	or	r2,r3,r2
}
10001160:	e037883a 	mov	sp,fp
10001164:	df000017 	ldw	fp,0(sp)
10001168:	dec00104 	addi	sp,sp,4
1000116c:	f800283a 	ret

10001170 <GameStart>:
#include "enemy.h"
#include "usb_main.h"

#include <stdio.h>

void GameStart() {
10001170:	defff504 	addi	sp,sp,-44
10001174:	dfc00a15 	stw	ra,40(sp)
10001178:	df000915 	stw	fp,36(sp)
1000117c:	df000904 	addi	fp,sp,36
    Enemy * lemon;
    Enemy * fire;
    Enemy * monkey;
    Enemy * lightning;

    int end = 0;
10001180:	e03ff815 	stw	zero,-32(fp)
    int keycode = 0;
10001184:	e03ff915 	stw	zero,-28(fp)
    int pre_keycode = 0;
10001188:	e03ffa15 	stw	zero,-24(fp)

    // Start of the game loop
    START:
    end = 0;
1000118c:	e03ff815 	stw	zero,-32(fp)
    keycode = 0;
10001190:	e03ff915 	stw	zero,-28(fp)
    pre_keycode = 0;
10001194:	e03ffa15 	stw	zero,-24(fp)

    initial_Registers();
10001198:	00014500 	call	10001450 <initial_Registers>
    initial_Star(star);
1000119c:	e13ffb17 	ldw	r4,-20(fp)
100011a0:	00044a80 	call	100044a8 <initial_Star>
    initial_Kirby(kirby);
100011a4:	e13ffc17 	ldw	r4,-16(fp)
100011a8:	00016e40 	call	100016e4 <initial_Kirby>

    initial_enemy(lemon,3);
100011ac:	014000c4 	movi	r5,3
100011b0:	e13ffd17 	ldw	r4,-12(fp)
100011b4:	000046c0 	call	1000046c <initial_enemy>
    initial_enemy(fire,1);
100011b8:	01400044 	movi	r5,1
100011bc:	e13ffe17 	ldw	r4,-8(fp)
100011c0:	000046c0 	call	1000046c <initial_enemy>
    // initial_enemy(monkey,2);
    initial_enemy(lightning,0);
100011c4:	000b883a 	mov	r5,zero
100011c8:	e13fff17 	ldw	r4,-4(fp)
100011cc:	000046c0 	call	1000046c <initial_enemy>

    usb_initialize();
100011d0:	0005b440 	call	10005b44 <usb_initialize>
    // printf("What's wrong with USB?");

    while (get_keycode_value() != 0x0028) {
100011d4:	00000206 	br	100011e0 <GameStart+0x70>
        draw_Start_Image(kirby);
100011d8:	e13ffc17 	ldw	r4,-16(fp)
100011dc:	000152c0 	call	1000152c <draw_Start_Image>
    initial_enemy(lightning,0);

    usb_initialize();
    // printf("What's wrong with USB?");

    while (get_keycode_value() != 0x0028) {
100011e0:	000663c0 	call	1000663c <get_keycode_value>
100011e4:	10800a18 	cmpnei	r2,r2,40
100011e8:	103ffb1e 	bne	r2,zero,100011d8 <__alt_data_end+0xf80011d8>
        draw_Start_Image(kirby);
    }

    REG_15_GAME_CONTROL = 0x0000000e;
100011ec:	d09b2217 	ldw	r2,27784(gp)
100011f0:	10800f04 	addi	r2,r2,60
100011f4:	00c00384 	movi	r3,14
100011f8:	10c00015 	stw	r3,0(r2)

    while (!end)
100011fc:	00008406 	br	10001410 <GameStart+0x2a0>
    {
        pre_keycode = keycode;
10001200:	e0bff917 	ldw	r2,-28(fp)
10001204:	e0bffa15 	stw	r2,-24(fp)
        keycode = get_keycode_value();
10001208:	000663c0 	call	1000663c <get_keycode_value>
1000120c:	e0bff915 	stw	r2,-28(fp)

        // Renew enemies
        if (kirby->x >= (150 + lemon->dist + SCREEN_WIDTH/2))
10001210:	e0bffc17 	ldw	r2,-16(fp)
10001214:	10c00017 	ldw	r3,0(r2)
10001218:	e0bffd17 	ldw	r2,-12(fp)
1000121c:	10800917 	ldw	r2,36(r2)
10001220:	108042c4 	addi	r2,r2,267
10001224:	18800316 	blt	r3,r2,10001234 <GameStart+0xc4>
            initial_enemy(lemon, 3);
10001228:	014000c4 	movi	r5,3
1000122c:	e13ffd17 	ldw	r4,-12(fp)
10001230:	000046c0 	call	1000046c <initial_enemy>
        // if ((kirby->x >= (320 + monkey->dist + SCREEN_WIDTH/2)) || (kirby->x <= (320 - SCREEN_WIDTH/2)))
        //     initial_enemy(monkey, 2);
        if ((kirby->x >= (540 + fire->dist + SCREEN_WIDTH/2)) || (kirby->x <= (540 - SCREEN_WIDTH/2)))
10001234:	e0bffc17 	ldw	r2,-16(fp)
10001238:	10c00017 	ldw	r3,0(r2)
1000123c:	e0bffe17 	ldw	r2,-8(fp)
10001240:	10800917 	ldw	r2,36(r2)
10001244:	1080a444 	addi	r2,r2,657
10001248:	1880040e 	bge	r3,r2,1000125c <GameStart+0xec>
1000124c:	e0bffc17 	ldw	r2,-16(fp)
10001250:	10800017 	ldw	r2,0(r2)
10001254:	10806a08 	cmpgei	r2,r2,424
10001258:	1000031e 	bne	r2,zero,10001268 <GameStart+0xf8>
            initial_enemy(fire, 1);
1000125c:	01400044 	movi	r5,1
10001260:	e13ffe17 	ldw	r4,-8(fp)
10001264:	000046c0 	call	1000046c <initial_enemy>
        if ((kirby->x >= (700 + lightning->dist + SCREEN_WIDTH/2)) || (kirby->x <= (700 - SCREEN_WIDTH/2)))
10001268:	e0bffc17 	ldw	r2,-16(fp)
1000126c:	10c00017 	ldw	r3,0(r2)
10001270:	e0bfff17 	ldw	r2,-4(fp)
10001274:	10800917 	ldw	r2,36(r2)
10001278:	1080cc44 	addi	r2,r2,817
1000127c:	1880040e 	bge	r3,r2,10001290 <GameStart+0x120>
10001280:	e0bffc17 	ldw	r2,-16(fp)
10001284:	10800017 	ldw	r2,0(r2)
10001288:	10809208 	cmpgei	r2,r2,584
1000128c:	1000031e 	bne	r2,zero,1000129c <GameStart+0x12c>
            initial_enemy(lightning,0);
10001290:	000b883a 	mov	r5,zero
10001294:	e13fff17 	ldw	r4,-4(fp)
10001298:	000046c0 	call	1000046c <initial_enemy>
        
        
        AI_enemy(lemon, kirby, 150, 30);
1000129c:	01c00784 	movi	r7,30
100012a0:	01802584 	movi	r6,150
100012a4:	e17ffc17 	ldw	r5,-16(fp)
100012a8:	e13ffd17 	ldw	r4,-12(fp)
100012ac:	000026c0 	call	1000026c <AI_enemy>
        // AI_enemy(monkey, kirby, 320, 95);
        AI_enemy(fire, kirby, 540, 64);
100012b0:	01c01004 	movi	r7,64
100012b4:	01808704 	movi	r6,540
100012b8:	e17ffc17 	ldw	r5,-16(fp)
100012bc:	e13ffe17 	ldw	r4,-8(fp)
100012c0:	000026c0 	call	1000026c <AI_enemy>
        AI_enemy(lightning, kirby, 700, 113);
100012c4:	01c01c44 	movi	r7,113
100012c8:	0180af04 	movi	r6,700
100012cc:	e17ffc17 	ldw	r5,-16(fp)
100012d0:	e13fff17 	ldw	r4,-4(fp)
100012d4:	000026c0 	call	1000026c <AI_enemy>
        //     updateKirby(kirby, star, monkey, keycode, pre_keycode);
        //     upload_Kirby_Info(kirby);
        //     if (star->appear == 1)
        // 	    spit_Star(kirby, star, monkey);
        // } else 
        if ((sqr_Dis_Kirby_Enemy(kirby, lemon) <= ENEMY_DETECT_DIS_SQRT * ENEMY_DETECT_DIS_SQRT) && (lemon->health != 0)) {
100012d8:	e17ffd17 	ldw	r5,-12(fp)
100012dc:	e13ffc17 	ldw	r4,-16(fp)
100012e0:	0003ff40 	call	10003ff4 <sqr_Dis_Kirby_Enemy>
100012e4:	1095f948 	cmpgei	r2,r2,22501
100012e8:	1000151e 	bne	r2,zero,10001340 <GameStart+0x1d0>
100012ec:	e0bffd17 	ldw	r2,-12(fp)
100012f0:	10800317 	ldw	r2,12(r2)
100012f4:	10001226 	beq	r2,zero,10001340 <GameStart+0x1d0>
            updateKirby(kirby, star, lemon, keycode, pre_keycode);
100012f8:	e0bffa17 	ldw	r2,-24(fp)
100012fc:	d8800015 	stw	r2,0(sp)
10001300:	e1fff917 	ldw	r7,-28(fp)
10001304:	e1bffd17 	ldw	r6,-12(fp)
10001308:	e17ffb17 	ldw	r5,-20(fp)
1000130c:	e13ffc17 	ldw	r4,-16(fp)
10001310:	00019e40 	call	100019e4 <updateKirby>
            upload_Kirby_Info(kirby);
10001314:	e13ffc17 	ldw	r4,-16(fp)
10001318:	000179c0 	call	1000179c <upload_Kirby_Info>
            if (star->appear == 1)
1000131c:	e0bffb17 	ldw	r2,-20(fp)
10001320:	10800417 	ldw	r2,16(r2)
10001324:	10800058 	cmpnei	r2,r2,1
10001328:	1000301e 	bne	r2,zero,100013ec <GameStart+0x27c>
        	    spit_Star(kirby, star, lemon);
1000132c:	e1bffd17 	ldw	r6,-12(fp)
10001330:	e17ffb17 	ldw	r5,-20(fp)
10001334:	e13ffc17 	ldw	r4,-16(fp)
10001338:	00044fc0 	call	100044fc <spit_Star>
        // 	    spit_Star(kirby, star, monkey);
        // } else 
        if ((sqr_Dis_Kirby_Enemy(kirby, lemon) <= ENEMY_DETECT_DIS_SQRT * ENEMY_DETECT_DIS_SQRT) && (lemon->health != 0)) {
            updateKirby(kirby, star, lemon, keycode, pre_keycode);
            upload_Kirby_Info(kirby);
            if (star->appear == 1)
1000133c:	00002b06 	br	100013ec <GameStart+0x27c>
        	    spit_Star(kirby, star, lemon);
        } else if ((sqr_Dis_Kirby_Enemy(kirby, fire) <= ENEMY_DETECT_DIS_SQRT * ENEMY_DETECT_DIS_SQRT) && (fire->health != 0)) {
10001340:	e17ffe17 	ldw	r5,-8(fp)
10001344:	e13ffc17 	ldw	r4,-16(fp)
10001348:	0003ff40 	call	10003ff4 <sqr_Dis_Kirby_Enemy>
1000134c:	1095f948 	cmpgei	r2,r2,22501
10001350:	1000151e 	bne	r2,zero,100013a8 <GameStart+0x238>
10001354:	e0bffe17 	ldw	r2,-8(fp)
10001358:	10800317 	ldw	r2,12(r2)
1000135c:	10001226 	beq	r2,zero,100013a8 <GameStart+0x238>
            updateKirby(kirby, star, fire, keycode, pre_keycode);
10001360:	e0bffa17 	ldw	r2,-24(fp)
10001364:	d8800015 	stw	r2,0(sp)
10001368:	e1fff917 	ldw	r7,-28(fp)
1000136c:	e1bffe17 	ldw	r6,-8(fp)
10001370:	e17ffb17 	ldw	r5,-20(fp)
10001374:	e13ffc17 	ldw	r4,-16(fp)
10001378:	00019e40 	call	100019e4 <updateKirby>
            upload_Kirby_Info(kirby);
1000137c:	e13ffc17 	ldw	r4,-16(fp)
10001380:	000179c0 	call	1000179c <upload_Kirby_Info>
            if (star->appear == 1)
10001384:	e0bffb17 	ldw	r2,-20(fp)
10001388:	10800417 	ldw	r2,16(r2)
1000138c:	10800058 	cmpnei	r2,r2,1
10001390:	1000161e 	bne	r2,zero,100013ec <GameStart+0x27c>
        	    spit_Star(kirby, star, fire);
10001394:	e1bffe17 	ldw	r6,-8(fp)
10001398:	e17ffb17 	ldw	r5,-20(fp)
1000139c:	e13ffc17 	ldw	r4,-16(fp)
100013a0:	00044fc0 	call	100044fc <spit_Star>
            if (star->appear == 1)
        	    spit_Star(kirby, star, lemon);
        } else if ((sqr_Dis_Kirby_Enemy(kirby, fire) <= ENEMY_DETECT_DIS_SQRT * ENEMY_DETECT_DIS_SQRT) && (fire->health != 0)) {
            updateKirby(kirby, star, fire, keycode, pre_keycode);
            upload_Kirby_Info(kirby);
            if (star->appear == 1)
100013a4:	00001106 	br	100013ec <GameStart+0x27c>
        	    spit_Star(kirby, star, fire);
        } else {
            updateKirby(kirby, star, lightning, keycode, pre_keycode);
100013a8:	e0bffa17 	ldw	r2,-24(fp)
100013ac:	d8800015 	stw	r2,0(sp)
100013b0:	e1fff917 	ldw	r7,-28(fp)
100013b4:	e1bfff17 	ldw	r6,-4(fp)
100013b8:	e17ffb17 	ldw	r5,-20(fp)
100013bc:	e13ffc17 	ldw	r4,-16(fp)
100013c0:	00019e40 	call	100019e4 <updateKirby>
            upload_Kirby_Info(kirby);
100013c4:	e13ffc17 	ldw	r4,-16(fp)
100013c8:	000179c0 	call	1000179c <upload_Kirby_Info>
            if (star->appear == 1)
100013cc:	e0bffb17 	ldw	r2,-20(fp)
100013d0:	10800417 	ldw	r2,16(r2)
100013d4:	10800058 	cmpnei	r2,r2,1
100013d8:	1000041e 	bne	r2,zero,100013ec <GameStart+0x27c>
        	    spit_Star(kirby, star, lightning);
100013dc:	e1bfff17 	ldw	r6,-4(fp)
100013e0:	e17ffb17 	ldw	r5,-20(fp)
100013e4:	e13ffc17 	ldw	r4,-16(fp)
100013e8:	00044fc0 	call	100044fc <spit_Star>
        }

        if ((kirby->health == 0) || (kirby->entered_door == 1))
100013ec:	e0bffc17 	ldw	r2,-16(fp)
100013f0:	10800517 	ldw	r2,20(r2)
100013f4:	10000426 	beq	r2,zero,10001408 <GameStart+0x298>
100013f8:	e0bffc17 	ldw	r2,-16(fp)
100013fc:	10801017 	ldw	r2,64(r2)
10001400:	10800058 	cmpnei	r2,r2,1
10001404:	1000021e 	bne	r2,zero,10001410 <GameStart+0x2a0>
            end = 1;
10001408:	00800044 	movi	r2,1
1000140c:	e0bff815 	stw	r2,-32(fp)
        draw_Start_Image(kirby);
    }

    REG_15_GAME_CONTROL = 0x0000000e;

    while (!end)
10001410:	e0bff817 	ldw	r2,-32(fp)
10001414:	103f7a26 	beq	r2,zero,10001200 <__alt_data_end+0xf8001200>

        if ((kirby->health == 0) || (kirby->entered_door == 1))
            end = 1;
    }

    goto START;
10001418:	003f5c06 	br	1000118c <__alt_data_end+0xf800118c>

1000141c <initial_Game_State>:
}


void initial_Game_State (Game * game_state) {
1000141c:	defffe04 	addi	sp,sp,-8
10001420:	df000115 	stw	fp,4(sp)
10001424:	df000104 	addi	fp,sp,4
10001428:	e13fff15 	stw	r4,-4(fp)
    game_state->start = 0;
1000142c:	e0bfff17 	ldw	r2,-4(fp)
10001430:	10000015 	stw	zero,0(r2)
    game_state->end = 0;
10001434:	e0bfff17 	ldw	r2,-4(fp)
10001438:	10000115 	stw	zero,4(r2)
}
1000143c:	0001883a 	nop
10001440:	e037883a 	mov	sp,fp
10001444:	df000017 	ldw	fp,0(sp)
10001448:	dec00104 	addi	sp,sp,4
1000144c:	f800283a 	ret

10001450 <initial_Registers>:


void initial_Registers() {
10001450:	deffff04 	addi	sp,sp,-4
10001454:	df000015 	stw	fp,0(sp)
10001458:	d839883a 	mov	fp,sp
    REG_0_MAP_INFO      = 0;
1000145c:	d09b2217 	ldw	r2,27784(gp)
10001460:	10000015 	stw	zero,0(r2)
    REG_1_KIRBY_IMAGE   = 0;
10001464:	d09b2217 	ldw	r2,27784(gp)
10001468:	10800104 	addi	r2,r2,4
1000146c:	10000015 	stw	zero,0(r2)
    REG_2_KIRBY_MAP_POS = 0;
10001470:	d09b2217 	ldw	r2,27784(gp)
10001474:	10800204 	addi	r2,r2,8
10001478:	10000015 	stw	zero,0(r2)
    REG_3_STAR          = 0;
1000147c:	d09b2217 	ldw	r2,27784(gp)
10001480:	10800304 	addi	r2,r2,12
10001484:	10000015 	stw	zero,0(r2)
    REG_4_              = 0;
10001488:	d09b2217 	ldw	r2,27784(gp)
1000148c:	10800404 	addi	r2,r2,16
10001490:	10000015 	stw	zero,0(r2)
    REG_5_              = 0;
10001494:	d09b2217 	ldw	r2,27784(gp)
10001498:	10800504 	addi	r2,r2,20
1000149c:	10000015 	stw	zero,0(r2)
    REG_6_              = 0;
100014a0:	d09b2217 	ldw	r2,27784(gp)
100014a4:	10800604 	addi	r2,r2,24
100014a8:	10000015 	stw	zero,0(r2)
    REG_7_              = 0;
100014ac:	d09b2217 	ldw	r2,27784(gp)
100014b0:	10800704 	addi	r2,r2,28
100014b4:	10000015 	stw	zero,0(r2)
    REG_8_              = 0;
100014b8:	d09b2217 	ldw	r2,27784(gp)
100014bc:	10800804 	addi	r2,r2,32
100014c0:	10000015 	stw	zero,0(r2)
    REG_9_              = 0;
100014c4:	d09b2217 	ldw	r2,27784(gp)
100014c8:	10800904 	addi	r2,r2,36
100014cc:	10000015 	stw	zero,0(r2)
    REG_10_             = 0;
100014d0:	d09b2217 	ldw	r2,27784(gp)
100014d4:	10800a04 	addi	r2,r2,40
100014d8:	10000015 	stw	zero,0(r2)
    REG_11_             = 0;
100014dc:	d09b2217 	ldw	r2,27784(gp)
100014e0:	10800b04 	addi	r2,r2,44
100014e4:	10000015 	stw	zero,0(r2)
    REG_12_             = 0;
100014e8:	d09b2217 	ldw	r2,27784(gp)
100014ec:	10800c04 	addi	r2,r2,48
100014f0:	10000015 	stw	zero,0(r2)
    REG_13_             = 0;
100014f4:	d09b2217 	ldw	r2,27784(gp)
100014f8:	10800d04 	addi	r2,r2,52
100014fc:	10000015 	stw	zero,0(r2)
    REG_14_             = 0;
10001500:	d09b2217 	ldw	r2,27784(gp)
10001504:	10800e04 	addi	r2,r2,56
10001508:	10000015 	stw	zero,0(r2)
    REG_15_GAME_CONTROL = 0;
1000150c:	d09b2217 	ldw	r2,27784(gp)
10001510:	10800f04 	addi	r2,r2,60
10001514:	10000015 	stw	zero,0(r2)
}
10001518:	0001883a 	nop
1000151c:	e037883a 	mov	sp,fp
10001520:	df000017 	ldw	fp,0(sp)
10001524:	dec00104 	addi	sp,sp,4
10001528:	f800283a 	ret

1000152c <draw_Start_Image>:


void draw_Start_Image(Kirby * kirby) {
1000152c:	defffd04 	addi	sp,sp,-12
10001530:	dfc00215 	stw	ra,8(sp)
10001534:	df000115 	stw	fp,4(sp)
10001538:	df000104 	addi	fp,sp,4
1000153c:	e13fff15 	stw	r4,-4(fp)
    REG_15_GAME_CONTROL = 0x00000000;
10001540:	d09b2217 	ldw	r2,27784(gp)
10001544:	10800f04 	addi	r2,r2,60
10001548:	10000015 	stw	zero,0(r2)
    upload_Kirby_Info(kirby);
1000154c:	e13fff17 	ldw	r4,-4(fp)
10001550:	000179c0 	call	1000179c <upload_Kirby_Info>
}
10001554:	0001883a 	nop
10001558:	e037883a 	mov	sp,fp
1000155c:	dfc00117 	ldw	ra,4(sp)
10001560:	df000017 	ldw	fp,0(sp)
10001564:	dec00204 	addi	sp,sp,8
10001568:	f800283a 	ret

1000156c <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
1000156c:	deffff04 	addi	sp,sp,-4
10001570:	df000015 	stw	fp,0(sp)
10001574:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
10001578:	00801c04 	movi	r2,112
1000157c:	00c00044 	movi	r3,1
10001580:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10001584:	00802004 	movi	r2,128
10001588:	00c00044 	movi	r3,1
1000158c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10001590:	00802804 	movi	r2,160
10001594:	00c00044 	movi	r3,1
10001598:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
1000159c:	00802404 	movi	r2,144
100015a0:	00c00044 	movi	r3,1
100015a4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
100015a8:	00803004 	movi	r2,192
100015ac:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
100015b0:	00802c04 	movi	r2,176
100015b4:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
100015b8:	00802004 	movi	r2,128
100015bc:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
100015c0:	00801c04 	movi	r2,112
100015c4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
100015c8:	00801c04 	movi	r2,112
100015cc:	00c00044 	movi	r3,1
100015d0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100015d4:	00802004 	movi	r2,128
100015d8:	00c00044 	movi	r3,1
100015dc:	10c00005 	stb	r3,0(r2)
}
100015e0:	0001883a 	nop
100015e4:	e037883a 	mov	sp,fp
100015e8:	df000017 	ldw	fp,0(sp)
100015ec:	dec00104 	addi	sp,sp,4
100015f0:	f800283a 	ret

100015f4 <IO_write>:


void IO_write(alt_u8 Address, alt_u16 Data)
{
100015f4:	defffd04 	addi	sp,sp,-12
100015f8:	df000215 	stw	fp,8(sp)
100015fc:	df000204 	addi	fp,sp,8
10001600:	2007883a 	mov	r3,r4
10001604:	2805883a 	mov	r2,r5
10001608:	e0fffe05 	stb	r3,-8(fp)
1000160c:	e0bfff0d 	sth	r2,-4(fp)
	//*otg_hpi_data = Data;


	//*otg_hpi_w = 1;
	// Disable read, enable CS and write, prepare address and data to be written
	*otg_hpi_r = 1;
10001610:	00802804 	movi	r2,160
10001614:	00c00044 	movi	r3,1
10001618:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = Address;
1000161c:	00803004 	movi	r2,192
10001620:	e0fffe03 	ldbu	r3,-8(fp)
10001624:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
10001628:	00802c04 	movi	r2,176
1000162c:	e0ffff0b 	ldhu	r3,-4(fp)
10001630:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10001634:	00802004 	movi	r2,128
10001638:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
1000163c:	00802404 	movi	r2,144
10001640:	10000005 	stb	zero,0(r2)

	// Disable write and CS
	*otg_hpi_w = 1;
10001644:	00802404 	movi	r2,144
10001648:	00c00044 	movi	r3,1
1000164c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10001650:	00802004 	movi	r2,128
10001654:	00c00044 	movi	r3,1
10001658:	10c00005 	stb	r3,0(r2)
}
1000165c:	0001883a 	nop
10001660:	e037883a 	mov	sp,fp
10001664:	df000017 	ldw	fp,0(sp)
10001668:	dec00104 	addi	sp,sp,4
1000166c:	f800283a 	ret

10001670 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
10001670:	defffd04 	addi	sp,sp,-12
10001674:	df000215 	stw	fp,8(sp)
10001678:	df000204 	addi	fp,sp,8
1000167c:	2005883a 	mov	r2,r4
10001680:	e0bfff05 	stb	r2,-4(fp)
	//*otg_hpi_address = Address;
	//*otg_hpi_r = 0;
	//*otg_hpi_data = Data;
	//*otg_hpi_r = 1;
	// Enable select chip and read, disable write, prepare address
	*otg_hpi_w = 1;
10001684:	00802404 	movi	r2,144
10001688:	00c00044 	movi	r3,1
1000168c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = Address;
10001690:	00803004 	movi	r2,192
10001694:	e0ffff03 	ldbu	r3,-4(fp)
10001698:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
1000169c:	00802004 	movi	r2,128
100016a0:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
100016a4:	00802804 	movi	r2,160
100016a8:	10000005 	stb	zero,0(r2)

	// Read data to temporary variable
	temp = *otg_hpi_data;
100016ac:	00802c04 	movi	r2,176
100016b0:	10800017 	ldw	r2,0(r2)
100016b4:	e0bffe0d 	sth	r2,-8(fp)

	// Disable CS and read
	*otg_hpi_cs = 1;
100016b8:	00802004 	movi	r2,128
100016bc:	00c00044 	movi	r3,1
100016c0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
100016c4:	00802804 	movi	r2,160
100016c8:	00c00044 	movi	r3,1
100016cc:	10c00005 	stb	r3,0(r2)

	//printf("%x\n",temp);
	return temp;
100016d0:	e0bffe0b 	ldhu	r2,-8(fp)
}
100016d4:	e037883a 	mov	sp,fp
100016d8:	df000017 	ldw	fp,0(sp)
100016dc:	dec00104 	addi	sp,sp,4
100016e0:	f800283a 	ret

100016e4 <initial_Kirby>:
#include "usb_main.h"
#include "star.h"

// #define TEST_EDGE

void initial_Kirby(Kirby * kirby){
100016e4:	defffe04 	addi	sp,sp,-8
100016e8:	df000115 	stw	fp,4(sp)
100016ec:	df000104 	addi	fp,sp,4
100016f0:	e13fff15 	stw	r4,-4(fp)
    kirby->x = KIRBY_START_X;
100016f4:	e0bfff17 	ldw	r2,-4(fp)
100016f8:	00c00144 	movi	r3,5
100016fc:	10c00015 	stw	r3,0(r2)
    kirby->y = KIRBY_START_Y;
10001700:	e0bfff17 	ldw	r2,-4(fp)
10001704:	00c018c4 	movi	r3,99
10001708:	10c00115 	stw	r3,4(r2)
    kirby->map = 0;
1000170c:	e0bfff17 	ldw	r2,-4(fp)
10001710:	10000215 	stw	zero,8(r2)
    kirby->image = 0;
10001714:	e0bfff17 	ldw	r2,-4(fp)
10001718:	10000315 	stw	zero,12(r2)
    kirby->is_left = 0;
1000171c:	e0bfff17 	ldw	r2,-4(fp)
10001720:	10000415 	stw	zero,16(r2)
    kirby->health = 6;
10001724:	e0bfff17 	ldw	r2,-4(fp)
10001728:	00c00184 	movi	r3,6
1000172c:	10c00515 	stw	r3,20(r2)
    kirby->action = 0;
10001730:	e0bfff17 	ldw	r2,-4(fp)
10001734:	10000615 	stw	zero,24(r2)
    kirby->frame = 0;
10001738:	e0bfff17 	ldw	r2,-4(fp)
1000173c:	10000715 	stw	zero,28(r2)
    kirby->in_slope = 0;
10001740:	e0bfff17 	ldw	r2,-4(fp)
10001744:	10000815 	stw	zero,32(r2)
    kirby->in_air = 0;
10001748:	e0bfff17 	ldw	r2,-4(fp)
1000174c:	10000915 	stw	zero,36(r2)
    kirby->is_inhaled = 0;
10001750:	e0bfff17 	ldw	r2,-4(fp)
10001754:	10000a15 	stw	zero,40(r2)
    kirby->damaging = 0;
10001758:	e0bfff17 	ldw	r2,-4(fp)
1000175c:	10000b15 	stw	zero,44(r2)
    kirby->inhaling = 0;
10001760:	e0bfff17 	ldw	r2,-4(fp)
10001764:	10000c15 	stw	zero,48(r2)
    kirby->spitting = 0;
10001768:	e0bfff17 	ldw	r2,-4(fp)
1000176c:	10000d15 	stw	zero,52(r2)
    kirby->kicking = 0;
10001770:	e0bfff17 	ldw	r2,-4(fp)
10001774:	10000e15 	stw	zero,56(r2)
    kirby->gulping = 0;
10001778:	e0bfff17 	ldw	r2,-4(fp)
1000177c:	10000f15 	stw	zero,60(r2)
    kirby->entered_door = 0;
10001780:	e0bfff17 	ldw	r2,-4(fp)
10001784:	10001015 	stw	zero,64(r2)
}
10001788:	0001883a 	nop
1000178c:	e037883a 	mov	sp,fp
10001790:	df000017 	ldw	fp,0(sp)
10001794:	dec00104 	addi	sp,sp,4
10001798:	f800283a 	ret

1000179c <upload_Kirby_Info>:

void upload_Kirby_Info(Kirby * kirby) {
1000179c:	defff504 	addi	sp,sp,-44
100017a0:	dfc00a15 	stw	ra,40(sp)
100017a4:	df000915 	stw	fp,36(sp)
100017a8:	df000904 	addi	fp,sp,36
100017ac:	e13fff15 	stw	r4,-4(fp)
//    int Kirby_Pos_X = kirby->x;
//    int Kirby_Pos_Y = kirby->y;
    int Kirby_Image_X = kirby->frame;
100017b0:	e0bfff17 	ldw	r2,-4(fp)
100017b4:	10800717 	ldw	r2,28(r2)
100017b8:	e0bffa15 	stw	r2,-24(fp)
    int Kirby_Image_Y = kirby->action;
100017bc:	e0bfff17 	ldw	r2,-4(fp)
100017c0:	10800617 	ldw	r2,24(r2)
100017c4:	e0bffb15 	stw	r2,-20(fp)
    int Kirby_Image_Width = 0;
100017c8:	e03ff715 	stw	zero,-36(fp)
    int Kirby_Image_Height = 0;
100017cc:	e03ff815 	stw	zero,-32(fp)
    int Kirby_Screen_X = 0;
100017d0:	e03ffc15 	stw	zero,-16(fp)
    int Kirby_Screen_Y = kirby->y;
100017d4:	e0bfff17 	ldw	r2,-4(fp)
100017d8:	10800117 	ldw	r2,4(r2)
100017dc:	e0bff915 	stw	r2,-28(fp)
//    int Map_Width = map_Width(kirby->map);
    int kirby_Botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff; // Center botton
100017e0:	e13fff17 	ldw	r4,-4(fp)
100017e4:	00037a40 	call	100037a4 <get_Kirby_Botton_Pos>
100017e8:	1004d43a 	srli	r2,r2,16
100017ec:	e0bffd15 	stw	r2,-12(fp)
    int kirby_Botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff; // Center botton
100017f0:	e13fff17 	ldw	r4,-4(fp)
100017f4:	00037a40 	call	100037a4 <get_Kirby_Botton_Pos>
100017f8:	10bfffcc 	andi	r2,r2,65535
100017fc:	e0bffe15 	stw	r2,-8(fp)

    // Decide kirby's image width and height
    if (kirby->is_inhaled == 1) {
10001800:	e0bfff17 	ldw	r2,-4(fp)
10001804:	10800a17 	ldw	r2,40(r2)
10001808:	10800058 	cmpnei	r2,r2,1
1000180c:	1000051e 	bne	r2,zero,10001824 <upload_Kirby_Info+0x88>
        Kirby_Image_Width = 30;
10001810:	00800784 	movi	r2,30
10001814:	e0bff715 	stw	r2,-36(fp)
        Kirby_Image_Height = 30;
10001818:	00800784 	movi	r2,30
1000181c:	e0bff815 	stw	r2,-32(fp)
10001820:	00000406 	br	10001834 <upload_Kirby_Info+0x98>
    } else {
        Kirby_Image_Width = 28;
10001824:	00800704 	movi	r2,28
10001828:	e0bff715 	stw	r2,-36(fp)
        Kirby_Image_Height = 28;
1000182c:	00800704 	movi	r2,28
10001830:	e0bff815 	stw	r2,-32(fp)
    }
    if ((kirby->is_inhaled == 1) && (kirby->spitting != 0)) {
10001834:	e0bfff17 	ldw	r2,-4(fp)
10001838:	10800a17 	ldw	r2,40(r2)
1000183c:	10800058 	cmpnei	r2,r2,1
10001840:	1000071e 	bne	r2,zero,10001860 <upload_Kirby_Info+0xc4>
10001844:	e0bfff17 	ldw	r2,-4(fp)
10001848:	10800d17 	ldw	r2,52(r2)
1000184c:	10000426 	beq	r2,zero,10001860 <upload_Kirby_Info+0xc4>
        Kirby_Image_Width = 60;
10001850:	00800f04 	movi	r2,60
10001854:	e0bff715 	stw	r2,-36(fp)
        Kirby_Image_Height = 30;
10001858:	00800784 	movi	r2,30
1000185c:	e0bff815 	stw	r2,-32(fp)
    }
    if (kirby->inhaling != 0) {
10001860:	e0bfff17 	ldw	r2,-4(fp)
10001864:	10800c17 	ldw	r2,48(r2)
10001868:	10000426 	beq	r2,zero,1000187c <upload_Kirby_Info+0xe0>
        Kirby_Image_Width = 60;
1000186c:	00800f04 	movi	r2,60
10001870:	e0bff715 	stw	r2,-36(fp)
        Kirby_Image_Height = 30;
10001874:	00800784 	movi	r2,30
10001878:	e0bff815 	stw	r2,-32(fp)
    }
    if (kirby->damaging != 0) {
1000187c:	e0bfff17 	ldw	r2,-4(fp)
10001880:	10800b17 	ldw	r2,44(r2)
10001884:	10000726 	beq	r2,zero,100018a4 <upload_Kirby_Info+0x108>
        Kirby_Image_Width = 35;
10001888:	008008c4 	movi	r2,35
1000188c:	e0bff715 	stw	r2,-36(fp)
        Kirby_Image_Height = 35;
10001890:	008008c4 	movi	r2,35
10001894:	e0bff815 	stw	r2,-32(fp)
        Kirby_Screen_Y -= 10;
10001898:	e0bff917 	ldw	r2,-28(fp)
1000189c:	10bffd84 	addi	r2,r2,-10
100018a0:	e0bff915 	stw	r2,-28(fp)
    }
    

    // Decide the position X of kirby in screen
    Kirby_Screen_X = kirby_Screen_Center_X(kirby_Botton_X);
100018a4:	e13ffd17 	ldw	r4,-12(fp)
100018a8:	0003d240 	call	10003d24 <kirby_Screen_Center_X>
100018ac:	e0bffc15 	stw	r2,-16(fp)

    if ((kirby->image == 1) && (kirby->action == 3) && (kirby->frame <= 1))
100018b0:	e0bfff17 	ldw	r2,-4(fp)
100018b4:	10800317 	ldw	r2,12(r2)
100018b8:	10800058 	cmpnei	r2,r2,1
100018bc:	10000b1e 	bne	r2,zero,100018ec <upload_Kirby_Info+0x150>
100018c0:	e0bfff17 	ldw	r2,-4(fp)
100018c4:	10800617 	ldw	r2,24(r2)
100018c8:	108000d8 	cmpnei	r2,r2,3
100018cc:	1000071e 	bne	r2,zero,100018ec <upload_Kirby_Info+0x150>
100018d0:	e0bfff17 	ldw	r2,-4(fp)
100018d4:	10800717 	ldw	r2,28(r2)
100018d8:	10800088 	cmpgei	r2,r2,2
100018dc:	1000031e 	bne	r2,zero,100018ec <upload_Kirby_Info+0x150>
        Kirby_Screen_Y -= 4; // Slight adjustment
100018e0:	e0bff917 	ldw	r2,-28(fp)
100018e4:	10bfff04 	addi	r2,r2,-4
100018e8:	e0bff915 	stw	r2,-28(fp)

    
    

    // Upload to kirby's registers
    REG_0_MAP_INFO = (REG_0_MAP_INFO & 0x0000fff0) | (Kirby_Screen_X << 24) | (Kirby_Screen_Y << 16) | (kirby->image << 2) | kirby->map;
100018ec:	d0db2317 	ldw	r3,27788(gp)
100018f0:	d09b2317 	ldw	r2,27788(gp)
100018f4:	10800017 	ldw	r2,0(r2)
100018f8:	10bffc0c 	andi	r2,r2,65520
100018fc:	e13ffc17 	ldw	r4,-16(fp)
10001900:	2008963a 	slli	r4,r4,24
10001904:	1104b03a 	or	r2,r2,r4
10001908:	e13ff917 	ldw	r4,-28(fp)
1000190c:	2008943a 	slli	r4,r4,16
10001910:	1108b03a 	or	r4,r2,r4
10001914:	e0bfff17 	ldw	r2,-4(fp)
10001918:	10800317 	ldw	r2,12(r2)
1000191c:	1085883a 	add	r2,r2,r2
10001920:	1085883a 	add	r2,r2,r2
10001924:	2084b03a 	or	r2,r4,r2
10001928:	e13fff17 	ldw	r4,-4(fp)
1000192c:	21000217 	ldw	r4,8(r4)
10001930:	1104b03a 	or	r2,r2,r4
10001934:	18800015 	stw	r2,0(r3)
    REG_1_KIRBY_IMAGE = (Kirby_Image_X << 24) | (Kirby_Image_Y << 16) | (Kirby_Image_Width << 8) | (Kirby_Image_Height << 1) | (kirby->is_left & 0x00000001);
10001938:	d09b2317 	ldw	r2,27788(gp)
1000193c:	10c00104 	addi	r3,r2,4
10001940:	e0bffa17 	ldw	r2,-24(fp)
10001944:	1008963a 	slli	r4,r2,24
10001948:	e0bffb17 	ldw	r2,-20(fp)
1000194c:	1004943a 	slli	r2,r2,16
10001950:	2088b03a 	or	r4,r4,r2
10001954:	e0bff717 	ldw	r2,-36(fp)
10001958:	1004923a 	slli	r2,r2,8
1000195c:	2088b03a 	or	r4,r4,r2
10001960:	e0bff817 	ldw	r2,-32(fp)
10001964:	1085883a 	add	r2,r2,r2
10001968:	2088b03a 	or	r4,r4,r2
1000196c:	e0bfff17 	ldw	r2,-4(fp)
10001970:	10800417 	ldw	r2,16(r2)
10001974:	1080004c 	andi	r2,r2,1
10001978:	2084b03a 	or	r2,r4,r2
1000197c:	18800015 	stw	r2,0(r3)
    REG_2_KIRBY_MAP_POS = (kirby_Botton_X << 16) | (kirby_Botton_Y);
10001980:	d09b2317 	ldw	r2,27788(gp)
10001984:	10800204 	addi	r2,r2,8
10001988:	e0fffd17 	ldw	r3,-12(fp)
1000198c:	1808943a 	slli	r4,r3,16
10001990:	e0fffe17 	ldw	r3,-8(fp)
10001994:	20c6b03a 	or	r3,r4,r3
10001998:	10c00015 	stw	r3,0(r2)
    REG_15_GAME_CONTROL = (REG_15_GAME_CONTROL & 0xfffffff8) | (kirby->health & 0x00000007);
1000199c:	d09b2317 	ldw	r2,27788(gp)
100019a0:	10800f04 	addi	r2,r2,60
100019a4:	d0db2317 	ldw	r3,27788(gp)
100019a8:	18c00f04 	addi	r3,r3,60
100019ac:	19000017 	ldw	r4,0(r3)
100019b0:	00fffe04 	movi	r3,-8
100019b4:	20c8703a 	and	r4,r4,r3
100019b8:	e0ffff17 	ldw	r3,-4(fp)
100019bc:	18c00517 	ldw	r3,20(r3)
100019c0:	18c001cc 	andi	r3,r3,7
100019c4:	20c6b03a 	or	r3,r4,r3
100019c8:	10c00015 	stw	r3,0(r2)
    printf("REG_0_MAP_INFO: %08x\n", REG_0_MAP_INFO);
    printf("REG_1_KIRBY_IMAGE: %08x\n", REG_1_KIRBY_IMAGE);
    printf("REG_2_KIRBY_MAP_POS: %08x\n", REG_2_KIRBY_MAP_POS);
    printf("\n/******************* end ****************/\n");
    #endif
}
100019cc:	0001883a 	nop
100019d0:	e037883a 	mov	sp,fp
100019d4:	dfc00117 	ldw	ra,4(sp)
100019d8:	df000017 	ldw	fp,0(sp)
100019dc:	dec00204 	addi	sp,sp,8
100019e0:	f800283a 	ret

100019e4 <updateKirby>:

void updateKirby(Kirby * kirby, Star * star, Enemy * enemy, int keycode, int pre_keycode){
100019e4:	defff804 	addi	sp,sp,-32
100019e8:	dfc00715 	stw	ra,28(sp)
100019ec:	df000615 	stw	fp,24(sp)
100019f0:	dc000515 	stw	r16,20(sp)
100019f4:	df000604 	addi	fp,sp,24
100019f8:	e13ffb15 	stw	r4,-20(fp)
100019fc:	e17ffc15 	stw	r5,-16(fp)
10001a00:	e1bffd15 	stw	r6,-12(fp)
10001a04:	e1fffe15 	stw	r7,-8(fp)
    int map_width = map_Width(kirby->map);
10001a08:	e0bffb17 	ldw	r2,-20(fp)
10001a0c:	10800217 	ldw	r2,8(r2)
10001a10:	1009883a 	mov	r4,r2
10001a14:	00036d80 	call	100036d8 <map_Width>
10001a18:	e0bffa15 	stw	r2,-24(fp)

    // Enforce spitting
    if (kirby->spitting > 0) {
10001a1c:	e0bffb17 	ldw	r2,-20(fp)
10001a20:	10800d17 	ldw	r2,52(r2)
10001a24:	00802d0e 	bge	zero,r2,10001adc <updateKirby+0xf8>
        kirby->spitting += 1;
10001a28:	e0bffb17 	ldw	r2,-20(fp)
10001a2c:	10800d17 	ldw	r2,52(r2)
10001a30:	10c00044 	addi	r3,r2,1
10001a34:	e0bffb17 	ldw	r2,-20(fp)
10001a38:	10c00d15 	stw	r3,52(r2)
        kirby->image = 1;
10001a3c:	e0bffb17 	ldw	r2,-20(fp)
10001a40:	00c00044 	movi	r3,1
10001a44:	10c00315 	stw	r3,12(r2)
        kirby->action = 4;
10001a48:	e0bffb17 	ldw	r2,-20(fp)
10001a4c:	00c00104 	movi	r3,4
10001a50:	10c00615 	stw	r3,24(r2)
        kirby->frame += 1;
10001a54:	e0bffb17 	ldw	r2,-20(fp)
10001a58:	10800717 	ldw	r2,28(r2)
10001a5c:	10c00044 	addi	r3,r2,1
10001a60:	e0bffb17 	ldw	r2,-20(fp)
10001a64:	10c00715 	stw	r3,28(r2)
        // printf("\n Spitting, ignore keyboard control \n");
        spit_Star(kirby, star, enemy); // spit star in specific frame
10001a68:	e1bffd17 	ldw	r6,-12(fp)
10001a6c:	e17ffc17 	ldw	r5,-16(fp)
10001a70:	e13ffb17 	ldw	r4,-20(fp)
10001a74:	00044fc0 	call	100044fc <spit_Star>
        if (kirby->spitting == 8) {
10001a78:	e0bffb17 	ldw	r2,-20(fp)
10001a7c:	10800d17 	ldw	r2,52(r2)
10001a80:	10800218 	cmpnei	r2,r2,8
10001a84:	1000121e 	bne	r2,zero,10001ad0 <updateKirby+0xec>
            kirby->spitting = 0;
10001a88:	e0bffb17 	ldw	r2,-20(fp)
10001a8c:	10000d15 	stw	zero,52(r2)
            kirby->is_inhaled = 0;
10001a90:	e0bffb17 	ldw	r2,-20(fp)
10001a94:	10000a15 	stw	zero,40(r2)
            kirby->image = 0;
10001a98:	e0bffb17 	ldw	r2,-20(fp)
10001a9c:	10000315 	stw	zero,12(r2)
            kirby->action = 0;
10001aa0:	e0bffb17 	ldw	r2,-20(fp)
10001aa4:	10000615 	stw	zero,24(r2)
            if (kirby->in_air == 1)
10001aa8:	e0bffb17 	ldw	r2,-20(fp)
10001aac:	10800917 	ldw	r2,36(r2)
10001ab0:	10800058 	cmpnei	r2,r2,1
10001ab4:	1000041e 	bne	r2,zero,10001ac8 <updateKirby+0xe4>
                kirby->frame = 10;
10001ab8:	e0bffb17 	ldw	r2,-20(fp)
10001abc:	00c00284 	movi	r3,10
10001ac0:	10c00715 	stw	r3,28(r2)
10001ac4:	00000206 	br	10001ad0 <updateKirby+0xec>
            else
                kirby->frame = 0;
10001ac8:	e0bffb17 	ldw	r2,-20(fp)
10001acc:	10000715 	stw	zero,28(r2)
        }
        frame_Time(KIRBY_FRAME_TIME_INHALE * 2);
10001ad0:	0109c404 	movi	r4,10000
10001ad4:	00036940 	call	10003694 <frame_Time>
10001ad8:	00059106 	br	10003120 <updateKirby+0x173c>
    }
    
    // Enforce inhaling
    else if (kirby->inhaling >= 2) {
10001adc:	e0bffb17 	ldw	r2,-20(fp)
10001ae0:	10800c17 	ldw	r2,48(r2)
10001ae4:	10800090 	cmplti	r2,r2,2
10001ae8:	10002b1e 	bne	r2,zero,10001b98 <updateKirby+0x1b4>
        kirby->inhaling += 1;
10001aec:	e0bffb17 	ldw	r2,-20(fp)
10001af0:	10800c17 	ldw	r2,48(r2)
10001af4:	10c00044 	addi	r3,r2,1
10001af8:	e0bffb17 	ldw	r2,-20(fp)
10001afc:	10c00c15 	stw	r3,48(r2)
        kirby->image = 1;
10001b00:	e0bffb17 	ldw	r2,-20(fp)
10001b04:	00c00044 	movi	r3,1
10001b08:	10c00315 	stw	r3,12(r2)
        kirby->action = 3;
10001b0c:	e0bffb17 	ldw	r2,-20(fp)
10001b10:	00c000c4 	movi	r3,3
10001b14:	10c00615 	stw	r3,24(r2)
        kirby->frame += 1;
10001b18:	e0bffb17 	ldw	r2,-20(fp)
10001b1c:	10800717 	ldw	r2,28(r2)
10001b20:	10c00044 	addi	r3,r2,1
10001b24:	e0bffb17 	ldw	r2,-20(fp)
10001b28:	10c00715 	stw	r3,28(r2)
        if (kirby->inhaling == 7) {
10001b2c:	e0bffb17 	ldw	r2,-20(fp)
10001b30:	10800c17 	ldw	r2,48(r2)
10001b34:	108001d8 	cmpnei	r2,r2,7
10001b38:	1000141e 	bne	r2,zero,10001b8c <updateKirby+0x1a8>
            kirby->inhaling = 0;
10001b3c:	e0bffb17 	ldw	r2,-20(fp)
10001b40:	10000c15 	stw	zero,48(r2)
            kirby->is_inhaled = 1;
10001b44:	e0bffb17 	ldw	r2,-20(fp)
10001b48:	00c00044 	movi	r3,1
10001b4c:	10c00a15 	stw	r3,40(r2)
            if (kirby->in_air == 1) {
10001b50:	e0bffb17 	ldw	r2,-20(fp)
10001b54:	10800917 	ldw	r2,36(r2)
10001b58:	10800058 	cmpnei	r2,r2,1
10001b5c:	1000071e 	bne	r2,zero,10001b7c <updateKirby+0x198>
                kirby->action = 2;
10001b60:	e0bffb17 	ldw	r2,-20(fp)
10001b64:	00c00084 	movi	r3,2
10001b68:	10c00615 	stw	r3,24(r2)
                kirby->frame = 13;
10001b6c:	e0bffb17 	ldw	r2,-20(fp)
10001b70:	00c00344 	movi	r3,13
10001b74:	10c00715 	stw	r3,28(r2)
10001b78:	00000406 	br	10001b8c <updateKirby+0x1a8>
            } else {
                kirby->action = 0;
10001b7c:	e0bffb17 	ldw	r2,-20(fp)
10001b80:	10000615 	stw	zero,24(r2)
                kirby->frame = 0;
10001b84:	e0bffb17 	ldw	r2,-20(fp)
10001b88:	10000715 	stw	zero,28(r2)
            }
        }
        frame_Time(KIRBY_FRAME_TIME_INHALE * 3);
10001b8c:	010ea604 	movi	r4,15000
10001b90:	00036940 	call	10003694 <frame_Time>
10001b94:	00056206 	br	10003120 <updateKirby+0x173c>
    }

    // Gulping
    else if (kirby->gulping >= 1) {
10001b98:	e0bffb17 	ldw	r2,-20(fp)
10001b9c:	10800f17 	ldw	r2,60(r2)
10001ba0:	0080210e 	bge	zero,r2,10001c28 <updateKirby+0x244>
        kirby->gulping += 1;
10001ba4:	e0bffb17 	ldw	r2,-20(fp)
10001ba8:	10800f17 	ldw	r2,60(r2)
10001bac:	10c00044 	addi	r3,r2,1
10001bb0:	e0bffb17 	ldw	r2,-20(fp)
10001bb4:	10c00f15 	stw	r3,60(r2)
        kirby->image = 1;
10001bb8:	e0bffb17 	ldw	r2,-20(fp)
10001bbc:	00c00044 	movi	r3,1
10001bc0:	10c00315 	stw	r3,12(r2)
        kirby->action = 2;
10001bc4:	e0bffb17 	ldw	r2,-20(fp)
10001bc8:	00c00084 	movi	r3,2
10001bcc:	10c00615 	stw	r3,24(r2)
        kirby->frame += 1;
10001bd0:	e0bffb17 	ldw	r2,-20(fp)
10001bd4:	10800717 	ldw	r2,28(r2)
10001bd8:	10c00044 	addi	r3,r2,1
10001bdc:	e0bffb17 	ldw	r2,-20(fp)
10001be0:	10c00715 	stw	r3,28(r2)
        if (kirby->gulping == 7) {
10001be4:	e0bffb17 	ldw	r2,-20(fp)
10001be8:	10800f17 	ldw	r2,60(r2)
10001bec:	108001d8 	cmpnei	r2,r2,7
10001bf0:	10000a1e 	bne	r2,zero,10001c1c <updateKirby+0x238>
            kirby->gulping = 0;
10001bf4:	e0bffb17 	ldw	r2,-20(fp)
10001bf8:	10000f15 	stw	zero,60(r2)
            kirby->is_inhaled = 0;
10001bfc:	e0bffb17 	ldw	r2,-20(fp)
10001c00:	10000a15 	stw	zero,40(r2)
            kirby->image = 0;
10001c04:	e0bffb17 	ldw	r2,-20(fp)
10001c08:	10000315 	stw	zero,12(r2)
            kirby->action = 0;
10001c0c:	e0bffb17 	ldw	r2,-20(fp)
10001c10:	10000615 	stw	zero,24(r2)
            kirby->frame = 0;
10001c14:	e0bffb17 	ldw	r2,-20(fp)
10001c18:	10000715 	stw	zero,28(r2)
        }
        frame_Time(KIRBY_FRAME_TIME_INHALE);
10001c1c:	0104e204 	movi	r4,5000
10001c20:	00036940 	call	10003694 <frame_Time>
10001c24:	00053e06 	br	10003120 <updateKirby+0x173c>
    }
    
    // Damage control
    else if (kirby->damaging >= 1) {
10001c28:	e0bffb17 	ldw	r2,-20(fp)
10001c2c:	10800b17 	ldw	r2,44(r2)
10001c30:	00803e0e 	bge	zero,r2,10001d2c <updateKirby+0x348>
        kirby->damaging += 1;
10001c34:	e0bffb17 	ldw	r2,-20(fp)
10001c38:	10800b17 	ldw	r2,44(r2)
10001c3c:	10c00044 	addi	r3,r2,1
10001c40:	e0bffb17 	ldw	r2,-20(fp)
10001c44:	10c00b15 	stw	r3,44(r2)
        if (kirby->is_left == 0)
10001c48:	e0bffb17 	ldw	r2,-20(fp)
10001c4c:	10800417 	ldw	r2,16(r2)
10001c50:	1000061e 	bne	r2,zero,10001c6c <updateKirby+0x288>
            kirby->x -= KIRBY_STEP_X;
10001c54:	e0bffb17 	ldw	r2,-20(fp)
10001c58:	10800017 	ldw	r2,0(r2)
10001c5c:	10ffff44 	addi	r3,r2,-3
10001c60:	e0bffb17 	ldw	r2,-20(fp)
10001c64:	10c00015 	stw	r3,0(r2)
10001c68:	00000506 	br	10001c80 <updateKirby+0x29c>
        else
            kirby->x += KIRBY_STEP_X;
10001c6c:	e0bffb17 	ldw	r2,-20(fp)
10001c70:	10800017 	ldw	r2,0(r2)
10001c74:	10c000c4 	addi	r3,r2,3
10001c78:	e0bffb17 	ldw	r2,-20(fp)
10001c7c:	10c00015 	stw	r3,0(r2)
        if (will_Touch_Ground(kirby, kirby->map) == 0)
10001c80:	e0bffb17 	ldw	r2,-20(fp)
10001c84:	10800217 	ldw	r2,8(r2)
10001c88:	100b883a 	mov	r5,r2
10001c8c:	e13ffb17 	ldw	r4,-20(fp)
10001c90:	000372c0 	call	1000372c <will_Touch_Ground>
10001c94:	1000031e 	bne	r2,zero,10001ca4 <updateKirby+0x2c0>
            kirby->in_air = 1;
10001c98:	e0bffb17 	ldw	r2,-20(fp)
10001c9c:	00c00044 	movi	r3,1
10001ca0:	10c00915 	stw	r3,36(r2)
        kirby->image = 2;
10001ca4:	e0bffb17 	ldw	r2,-20(fp)
10001ca8:	00c00084 	movi	r3,2
10001cac:	10c00315 	stw	r3,12(r2)
        // kirby->action = kirby_Damage_Action(enemy); //Keep action unchanged
        kirby->frame += 1;
10001cb0:	e0bffb17 	ldw	r2,-20(fp)
10001cb4:	10800717 	ldw	r2,28(r2)
10001cb8:	10c00044 	addi	r3,r2,1
10001cbc:	e0bffb17 	ldw	r2,-20(fp)
10001cc0:	10c00715 	stw	r3,28(r2)
        if (kirby->damaging == damage_Frame_Number(enemy)) {
10001cc4:	e0bffb17 	ldw	r2,-20(fp)
10001cc8:	14000b17 	ldw	r16,44(r2)
10001ccc:	e13ffd17 	ldw	r4,-12(fp)
10001cd0:	0003ed00 	call	10003ed0 <damage_Frame_Number>
10001cd4:	8080121e 	bne	r16,r2,10001d20 <updateKirby+0x33c>
            // printf("\n############### kirby damaging images over #################\n");
            kirby->damaging = 0;
10001cd8:	e0bffb17 	ldw	r2,-20(fp)
10001cdc:	10000b15 	stw	zero,44(r2)
            kirby->is_inhaled = 0;
10001ce0:	e0bffb17 	ldw	r2,-20(fp)
10001ce4:	10000a15 	stw	zero,40(r2)
            kirby->image = 0;
10001ce8:	e0bffb17 	ldw	r2,-20(fp)
10001cec:	10000315 	stw	zero,12(r2)
            kirby->action = 0;
10001cf0:	e0bffb17 	ldw	r2,-20(fp)
10001cf4:	10000615 	stw	zero,24(r2)
            if (kirby->in_air == 1)
10001cf8:	e0bffb17 	ldw	r2,-20(fp)
10001cfc:	10800917 	ldw	r2,36(r2)
10001d00:	10800058 	cmpnei	r2,r2,1
10001d04:	1000041e 	bne	r2,zero,10001d18 <updateKirby+0x334>
                kirby->frame = 10;
10001d08:	e0bffb17 	ldw	r2,-20(fp)
10001d0c:	00c00284 	movi	r3,10
10001d10:	10c00715 	stw	r3,28(r2)
10001d14:	00000206 	br	10001d20 <updateKirby+0x33c>
            else
                kirby->frame = 0;
10001d18:	e0bffb17 	ldw	r2,-20(fp)
10001d1c:	10000715 	stw	zero,28(r2)
        }
        frame_Time(KIRBY_FRAME_TIME_DAMAGE);
10001d20:	01027104 	movi	r4,2500
10001d24:	00036940 	call	10003694 <frame_Time>
10001d28:	0004fd06 	br	10003120 <updateKirby+0x173c>
    }

    // Kicking ass
    else if (kirby->kicking >= 1) {
10001d2c:	e0bffb17 	ldw	r2,-20(fp)
10001d30:	10800e17 	ldw	r2,56(r2)
10001d34:	0080750e 	bge	zero,r2,10001f0c <updateKirby+0x528>
        if ((kirby->kicking <= 8) && (kirby->kicking >= 1)) {
10001d38:	e0bffb17 	ldw	r2,-20(fp)
10001d3c:	10800e17 	ldw	r2,56(r2)
10001d40:	10800248 	cmpgei	r2,r2,9
10001d44:	1000231e 	bne	r2,zero,10001dd4 <updateKirby+0x3f0>
10001d48:	e0bffb17 	ldw	r2,-20(fp)
10001d4c:	10800e17 	ldw	r2,56(r2)
10001d50:	0080200e 	bge	zero,r2,10001dd4 <updateKirby+0x3f0>
            kirby->frame = 6;
10001d54:	e0bffb17 	ldw	r2,-20(fp)
10001d58:	00c00184 	movi	r3,6
10001d5c:	10c00715 	stw	r3,28(r2)
            if (kirby->is_left == 0)
10001d60:	e0bffb17 	ldw	r2,-20(fp)
10001d64:	10800417 	ldw	r2,16(r2)
10001d68:	1000061e 	bne	r2,zero,10001d84 <updateKirby+0x3a0>
                kirby->x += KIRBY_KICK_X;
10001d6c:	e0bffb17 	ldw	r2,-20(fp)
10001d70:	10800017 	ldw	r2,0(r2)
10001d74:	10c000c4 	addi	r3,r2,3
10001d78:	e0bffb17 	ldw	r2,-20(fp)
10001d7c:	10c00015 	stw	r3,0(r2)
10001d80:	00000506 	br	10001d98 <updateKirby+0x3b4>
            else
                kirby->x -= KIRBY_KICK_X;
10001d84:	e0bffb17 	ldw	r2,-20(fp)
10001d88:	10800017 	ldw	r2,0(r2)
10001d8c:	10ffff44 	addi	r3,r2,-3
10001d90:	e0bffb17 	ldw	r2,-20(fp)
10001d94:	10c00015 	stw	r3,0(r2)
            if (will_Touch_Ground(kirby, kirby->map) == 0)
10001d98:	e0bffb17 	ldw	r2,-20(fp)
10001d9c:	10800217 	ldw	r2,8(r2)
10001da0:	100b883a 	mov	r5,r2
10001da4:	e13ffb17 	ldw	r4,-20(fp)
10001da8:	000372c0 	call	1000372c <will_Touch_Ground>
10001dac:	1000031e 	bne	r2,zero,10001dbc <updateKirby+0x3d8>
                kirby->in_air = 1;
10001db0:	e0bffb17 	ldw	r2,-20(fp)
10001db4:	00c00044 	movi	r3,1
10001db8:	10c00915 	stw	r3,36(r2)
            kirby->kicking += 1;
10001dbc:	e0bffb17 	ldw	r2,-20(fp)
10001dc0:	10800e17 	ldw	r2,56(r2)
10001dc4:	10c00044 	addi	r3,r2,1
10001dc8:	e0bffb17 	ldw	r2,-20(fp)
10001dcc:	10c00e15 	stw	r3,56(r2)
10001dd0:	00003406 	br	10001ea4 <updateKirby+0x4c0>
        } else if ((kirby->kicking <= 14) && (kirby->kicking >= 9)) {
10001dd4:	e0bffb17 	ldw	r2,-20(fp)
10001dd8:	10800e17 	ldw	r2,56(r2)
10001ddc:	108003c8 	cmpgei	r2,r2,15
10001de0:	1000241e 	bne	r2,zero,10001e74 <updateKirby+0x490>
10001de4:	e0bffb17 	ldw	r2,-20(fp)
10001de8:	10800e17 	ldw	r2,56(r2)
10001dec:	10800250 	cmplti	r2,r2,9
10001df0:	1000201e 	bne	r2,zero,10001e74 <updateKirby+0x490>
            kirby->frame = 7;
10001df4:	e0bffb17 	ldw	r2,-20(fp)
10001df8:	00c001c4 	movi	r3,7
10001dfc:	10c00715 	stw	r3,28(r2)
            if (kirby->is_left == 0)
10001e00:	e0bffb17 	ldw	r2,-20(fp)
10001e04:	10800417 	ldw	r2,16(r2)
10001e08:	1000061e 	bne	r2,zero,10001e24 <updateKirby+0x440>
                kirby->x += KIRBY_KICK_X;
10001e0c:	e0bffb17 	ldw	r2,-20(fp)
10001e10:	10800017 	ldw	r2,0(r2)
10001e14:	10c000c4 	addi	r3,r2,3
10001e18:	e0bffb17 	ldw	r2,-20(fp)
10001e1c:	10c00015 	stw	r3,0(r2)
10001e20:	00000506 	br	10001e38 <updateKirby+0x454>
            else
                kirby->x -= KIRBY_KICK_X;
10001e24:	e0bffb17 	ldw	r2,-20(fp)
10001e28:	10800017 	ldw	r2,0(r2)
10001e2c:	10ffff44 	addi	r3,r2,-3
10001e30:	e0bffb17 	ldw	r2,-20(fp)
10001e34:	10c00015 	stw	r3,0(r2)
            if (will_Touch_Ground(kirby, kirby->map) == 0)
10001e38:	e0bffb17 	ldw	r2,-20(fp)
10001e3c:	10800217 	ldw	r2,8(r2)
10001e40:	100b883a 	mov	r5,r2
10001e44:	e13ffb17 	ldw	r4,-20(fp)
10001e48:	000372c0 	call	1000372c <will_Touch_Ground>
10001e4c:	1000031e 	bne	r2,zero,10001e5c <updateKirby+0x478>
                kirby->in_air = 1;
10001e50:	e0bffb17 	ldw	r2,-20(fp)
10001e54:	00c00044 	movi	r3,1
10001e58:	10c00915 	stw	r3,36(r2)
            kirby->kicking += 1;
10001e5c:	e0bffb17 	ldw	r2,-20(fp)
10001e60:	10800e17 	ldw	r2,56(r2)
10001e64:	10c00044 	addi	r3,r2,1
10001e68:	e0bffb17 	ldw	r2,-20(fp)
10001e6c:	10c00e15 	stw	r3,56(r2)
10001e70:	00000c06 	br	10001ea4 <updateKirby+0x4c0>
        } else if (kirby->kicking == 15) {
10001e74:	e0bffb17 	ldw	r2,-20(fp)
10001e78:	10800e17 	ldw	r2,56(r2)
10001e7c:	108003d8 	cmpnei	r2,r2,15
10001e80:	1000081e 	bne	r2,zero,10001ea4 <updateKirby+0x4c0>
            kirby->kicking = 0;
10001e84:	e0bffb17 	ldw	r2,-20(fp)
10001e88:	10000e15 	stw	zero,56(r2)
            kirby->is_inhaled = 0;
10001e8c:	e0bffb17 	ldw	r2,-20(fp)
10001e90:	10000a15 	stw	zero,40(r2)
            kirby->image = 0;
10001e94:	e0bffb17 	ldw	r2,-20(fp)
10001e98:	10000315 	stw	zero,12(r2)
            kirby->action = 0;
10001e9c:	e0bffb17 	ldw	r2,-20(fp)
10001ea0:	10000615 	stw	zero,24(r2)
        }

        if (kirby->in_air == 1) {
10001ea4:	e0bffb17 	ldw	r2,-20(fp)
10001ea8:	10800917 	ldw	r2,36(r2)
10001eac:	10800058 	cmpnei	r2,r2,1
10001eb0:	10000a1e 	bne	r2,zero,10001edc <updateKirby+0x4f8>
            kirby->kicking = 0;
10001eb4:	e0bffb17 	ldw	r2,-20(fp)
10001eb8:	10000e15 	stw	zero,56(r2)
            kirby->image = 0;
10001ebc:	e0bffb17 	ldw	r2,-20(fp)
10001ec0:	10000315 	stw	zero,12(r2)
            kirby->action = 0;
10001ec4:	e0bffb17 	ldw	r2,-20(fp)
10001ec8:	10000615 	stw	zero,24(r2)
            kirby->frame = 10;
10001ecc:	e0bffb17 	ldw	r2,-20(fp)
10001ed0:	00c00284 	movi	r3,10
10001ed4:	10c00715 	stw	r3,28(r2)
10001ed8:	00000906 	br	10001f00 <updateKirby+0x51c>
        }
        // Kill enemy
        else if (sqr_Dis_Kirby_Enemy(kirby, enemy) <= (KIRBY_DAMAGE_DIS_SQRT * KIRBY_DAMAGE_DIS_SQRT)) {
10001edc:	e17ffd17 	ldw	r5,-12(fp)
10001ee0:	e13ffb17 	ldw	r4,-20(fp)
10001ee4:	0003ff40 	call	10003ff4 <sqr_Dis_Kirby_Enemy>
10001ee8:	10806448 	cmpgei	r2,r2,401
10001eec:	1000041e 	bne	r2,zero,10001f00 <updateKirby+0x51c>
            enemy->health = 0;
10001ef0:	e0bffd17 	ldw	r2,-12(fp)
10001ef4:	10000315 	stw	zero,12(r2)
            kirby->kicking = 0;
10001ef8:	e0bffb17 	ldw	r2,-20(fp)
10001efc:	10000e15 	stw	zero,56(r2)
        }
        frame_Time(KIRBY_FRAME_TIME_KICK);
10001f00:	0100e104 	movi	r4,900
10001f04:	00036940 	call	10003694 <frame_Time>
10001f08:	00048506 	br	10003120 <updateKirby+0x173c>
    }

    // Key detection
    else {
        kirby->inhaling = 0;
10001f0c:	e0bffb17 	ldw	r2,-20(fp)
10001f10:	10000c15 	stw	zero,48(r2)
        switch ((keycode & 0x0000ffff)) {
10001f14:	e0bffe17 	ldw	r2,-8(fp)
10001f18:	10bfffcc 	andi	r2,r2,65535
10001f1c:	10c106a0 	cmpeqi	r3,r2,1050
10001f20:	1802411e 	bne	r3,zero,10002828 <updateKirby+0xe44>
10001f24:	10c106c8 	cmpgei	r3,r2,1051
10001f28:	18001b1e 	bne	r3,zero,10001f98 <updateKirby+0x5b4>
10001f2c:	10c003e0 	cmpeqi	r3,r2,15
10001f30:	1804741e 	bne	r3,zero,10003104 <updateKirby+0x1720>
10001f34:	10c00408 	cmpgei	r3,r2,16
10001f38:	18000b1e 	bne	r3,zero,10001f68 <updateKirby+0x584>
10001f3c:	10c00120 	cmpeqi	r3,r2,4
10001f40:	1800d21e 	bne	r3,zero,1000228c <updateKirby+0x8a8>
10001f44:	10c00148 	cmpgei	r3,r2,5
10001f48:	1800021e 	bne	r3,zero,10001f54 <updateKirby+0x570>
10001f4c:	10002e26 	beq	r2,zero,10002008 <updateKirby+0x624>
10001f50:	0003cb06 	br	10002e80 <updateKirby+0x149c>
10001f54:	10c001e0 	cmpeqi	r3,r2,7
10001f58:	1801801e 	bne	r3,zero,1000255c <updateKirby+0xb78>
10001f5c:	108003a0 	cmpeqi	r2,r2,14
10001f60:	10034f1e 	bne	r2,zero,10002ca0 <updateKirby+0x12bc>
10001f64:	0003c606 	br	10002e80 <updateKirby+0x149c>
10001f68:	10c006a0 	cmpeqi	r3,r2,26
10001f6c:	1803211e 	bne	r3,zero,10002bf4 <updateKirby+0x1210>
10001f70:	10c006c8 	cmpgei	r3,r2,27
10001f74:	1800031e 	bne	r3,zero,10001f84 <updateKirby+0x5a0>
10001f78:	108005a0 	cmpeqi	r2,r2,22
10001f7c:	1002811e 	bne	r2,zero,10002984 <updateKirby+0xfa0>
10001f80:	0003bf06 	br	10002e80 <updateKirby+0x149c>
10001f84:	10c10020 	cmpeqi	r3,r2,1024
10001f88:	1800c01e 	bne	r3,zero,1000228c <updateKirby+0x8a8>
10001f8c:	108105a0 	cmpeqi	r2,r2,1046
10001f90:	1000be1e 	bne	r2,zero,1000228c <updateKirby+0x8a8>
10001f94:	0003ba06 	br	10002e80 <updateKirby+0x149c>
10001f98:	10c58120 	cmpeqi	r3,r2,5636
10001f9c:	1800bb1e 	bne	r3,zero,1000228c <updateKirby+0x8a8>
10001fa0:	10c58148 	cmpgei	r3,r2,5637
10001fa4:	18000c1e 	bne	r3,zero,10001fd8 <updateKirby+0x5f4>
10001fa8:	10c1c5a0 	cmpeqi	r3,r2,1814
10001fac:	18016b1e 	bne	r3,zero,1000255c <updateKirby+0xb78>
10001fb0:	10c1c5c8 	cmpgei	r3,r2,1815
10001fb4:	1800031e 	bne	r3,zero,10001fc4 <updateKirby+0x5e0>
10001fb8:	1081c020 	cmpeqi	r2,r2,1792
10001fbc:	1001671e 	bne	r2,zero,1000255c <updateKirby+0xb78>
10001fc0:	0003af06 	br	10002e80 <updateKirby+0x149c>
10001fc4:	10c1c6a0 	cmpeqi	r3,r2,1818
10001fc8:	1802431e 	bne	r3,zero,100028d8 <updateKirby+0xef4>
10001fcc:	1083c5a0 	cmpeqi	r2,r2,3862
10001fd0:	1003771e 	bne	r2,zero,10002db0 <updateKirby+0x13cc>
10001fd4:	0003aa06 	br	10002e80 <updateKirby+0x149c>
10001fd8:	10c583e0 	cmpeqi	r3,r2,5647
10001fdc:	1803741e 	bne	r3,zero,10002db0 <updateKirby+0x13cc>
10001fe0:	10c58408 	cmpgei	r3,r2,5648
10001fe4:	1800031e 	bne	r3,zero,10001ff4 <updateKirby+0x610>
10001fe8:	108581e0 	cmpeqi	r2,r2,5639
10001fec:	10015b1e 	bne	r2,zero,1000255c <updateKirby+0xb78>
10001ff0:	0003a306 	br	10002e80 <updateKirby+0x149c>
10001ff4:	10c68120 	cmpeqi	r3,r2,6660
10001ff8:	18020b1e 	bne	r3,zero,10002828 <updateKirby+0xe44>
10001ffc:	108681e0 	cmpeqi	r2,r2,6663
10002000:	1002351e 	bne	r2,zero,100028d8 <updateKirby+0xef4>
10002004:	00039e06 	br	10002e80 <updateKirby+0x149c>
        case 0x0000: { // "" Stand
            if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
10002008:	e0bffb17 	ldw	r2,-20(fp)
1000200c:	10800917 	ldw	r2,36(r2)
10002010:	1000261e 	bne	r2,zero,100020ac <updateKirby+0x6c8>
10002014:	e0bffb17 	ldw	r2,-20(fp)
10002018:	10800a17 	ldw	r2,40(r2)
1000201c:	1000231e 	bne	r2,zero,100020ac <updateKirby+0x6c8>
                kirby->image = 0;
10002020:	e0bffb17 	ldw	r2,-20(fp)
10002024:	10000315 	stw	zero,12(r2)
                kirby->action = 0;
10002028:	e0bffb17 	ldw	r2,-20(fp)
1000202c:	10000615 	stw	zero,24(r2)
                if (pre_keycode == keycode) {
10002030:	e0c00217 	ldw	r3,8(fp)
10002034:	e0bffe17 	ldw	r2,-8(fp)
10002038:	1880131e 	bne	r3,r2,10002088 <updateKirby+0x6a4>
                    kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
1000203c:	e0bffb17 	ldw	r2,-20(fp)
10002040:	10800717 	ldw	r2,28(r2)
10002044:	10c00044 	addi	r3,r2,1
10002048:	00a00034 	movhi	r2,32768
1000204c:	10800044 	addi	r2,r2,1
10002050:	1884703a 	and	r2,r3,r2
10002054:	1000040e 	bge	r2,zero,10002068 <updateKirby+0x684>
10002058:	10bfffc4 	addi	r2,r2,-1
1000205c:	00ffff84 	movi	r3,-2
10002060:	10c4b03a 	or	r2,r2,r3
10002064:	10800044 	addi	r2,r2,1
10002068:	1007883a 	mov	r3,r2
1000206c:	e0bffb17 	ldw	r2,-20(fp)
10002070:	10800817 	ldw	r2,32(r2)
10002074:	1085883a 	add	r2,r2,r2
10002078:	1887883a 	add	r3,r3,r2
1000207c:	e0bffb17 	ldw	r2,-20(fp)
10002080:	10c00715 	stw	r3,28(r2)
10002084:	00000606 	br	100020a0 <updateKirby+0x6bc>
                } else {
                    kirby->frame = 0 + 2 * kirby->in_slope;
10002088:	e0bffb17 	ldw	r2,-20(fp)
1000208c:	10800817 	ldw	r2,32(r2)
10002090:	1085883a 	add	r2,r2,r2
10002094:	1007883a 	mov	r3,r2
10002098:	e0bffb17 	ldw	r2,-20(fp)
1000209c:	10c00715 	stw	r3,28(r2)
                }
                frame_Time(KIRBY_FRAME_TIME_BLINK);
100020a0:	01017704 	movi	r4,1500
100020a4:	00036940 	call	10003694 <frame_Time>
100020a8:	00007706 	br	10002288 <updateKirby+0x8a4>
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
100020ac:	e0bffb17 	ldw	r2,-20(fp)
100020b0:	10800917 	ldw	r2,36(r2)
100020b4:	1000281e 	bne	r2,zero,10002158 <updateKirby+0x774>
100020b8:	e0bffb17 	ldw	r2,-20(fp)
100020bc:	10800a17 	ldw	r2,40(r2)
100020c0:	10800058 	cmpnei	r2,r2,1
100020c4:	1000241e 	bne	r2,zero,10002158 <updateKirby+0x774>
                kirby->image = 1;
100020c8:	e0bffb17 	ldw	r2,-20(fp)
100020cc:	00c00044 	movi	r3,1
100020d0:	10c00315 	stw	r3,12(r2)
                kirby->action = 0;
100020d4:	e0bffb17 	ldw	r2,-20(fp)
100020d8:	10000615 	stw	zero,24(r2)
                if (pre_keycode == keycode) {
100020dc:	e0c00217 	ldw	r3,8(fp)
100020e0:	e0bffe17 	ldw	r2,-8(fp)
100020e4:	1880131e 	bne	r3,r2,10002134 <updateKirby+0x750>
                    kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
100020e8:	e0bffb17 	ldw	r2,-20(fp)
100020ec:	10800717 	ldw	r2,28(r2)
100020f0:	10c00044 	addi	r3,r2,1
100020f4:	00a00034 	movhi	r2,32768
100020f8:	10800044 	addi	r2,r2,1
100020fc:	1884703a 	and	r2,r3,r2
10002100:	1000040e 	bge	r2,zero,10002114 <updateKirby+0x730>
10002104:	10bfffc4 	addi	r2,r2,-1
10002108:	00ffff84 	movi	r3,-2
1000210c:	10c4b03a 	or	r2,r2,r3
10002110:	10800044 	addi	r2,r2,1
10002114:	1007883a 	mov	r3,r2
10002118:	e0bffb17 	ldw	r2,-20(fp)
1000211c:	10800817 	ldw	r2,32(r2)
10002120:	1085883a 	add	r2,r2,r2
10002124:	1887883a 	add	r3,r3,r2
10002128:	e0bffb17 	ldw	r2,-20(fp)
1000212c:	10c00715 	stw	r3,28(r2)
10002130:	00000606 	br	1000214c <updateKirby+0x768>
                } else {
                    kirby->frame = 0 + 2 * kirby->in_slope;
10002134:	e0bffb17 	ldw	r2,-20(fp)
10002138:	10800817 	ldw	r2,32(r2)
1000213c:	1085883a 	add	r2,r2,r2
10002140:	1007883a 	mov	r3,r2
10002144:	e0bffb17 	ldw	r2,-20(fp)
10002148:	10c00715 	stw	r3,28(r2)
                }
                frame_Time(KIRBY_FRAME_TIME_BLINK);
1000214c:	01017704 	movi	r4,1500
10002150:	00036940 	call	10003694 <frame_Time>
10002154:	00004c06 	br	10002288 <updateKirby+0x8a4>
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
10002158:	e0bffb17 	ldw	r2,-20(fp)
1000215c:	10800917 	ldw	r2,36(r2)
10002160:	10800058 	cmpnei	r2,r2,1
10002164:	10001f1e 	bne	r2,zero,100021e4 <updateKirby+0x800>
10002168:	e0bffb17 	ldw	r2,-20(fp)
1000216c:	10800a17 	ldw	r2,40(r2)
10002170:	10001c1e 	bne	r2,zero,100021e4 <updateKirby+0x800>
                if (will_Touch_Ground(kirby, kirby->map)) {
10002174:	e0bffb17 	ldw	r2,-20(fp)
10002178:	10800217 	ldw	r2,8(r2)
1000217c:	100b883a 	mov	r5,r2
10002180:	e13ffb17 	ldw	r4,-20(fp)
10002184:	000372c0 	call	1000372c <will_Touch_Ground>
10002188:	10000726 	beq	r2,zero,100021a8 <updateKirby+0x7c4>
                    kirby->image = 0;
1000218c:	e0bffb17 	ldw	r2,-20(fp)
10002190:	10000315 	stw	zero,12(r2)
                    kirby->action = 0;
10002194:	e0bffb17 	ldw	r2,-20(fp)
10002198:	10000615 	stw	zero,24(r2)
                    kirby->in_air = 0;
1000219c:	e0bffb17 	ldw	r2,-20(fp)
100021a0:	10000915 	stw	zero,36(r2)
                } else {
                    kirby->frame = 0 + 2 * kirby->in_slope;
                }
                frame_Time(KIRBY_FRAME_TIME_BLINK);
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
100021a4:	00003806 	br	10002288 <updateKirby+0x8a4>
                    kirby->image = 0;
                    kirby->action = 0;
                    kirby->in_air = 0;
                } else {
                    kirby->image = 0;
100021a8:	e0bffb17 	ldw	r2,-20(fp)
100021ac:	10000315 	stw	zero,12(r2)
                    kirby->action = 0;
100021b0:	e0bffb17 	ldw	r2,-20(fp)
100021b4:	10000615 	stw	zero,24(r2)
                    kirby->frame = 10;
100021b8:	e0bffb17 	ldw	r2,-20(fp)
100021bc:	00c00284 	movi	r3,10
100021c0:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
100021c4:	e0bffb17 	ldw	r2,-20(fp)
100021c8:	10800117 	ldw	r2,4(r2)
100021cc:	10c000c4 	addi	r3,r2,3
100021d0:	e0bffb17 	ldw	r2,-20(fp)
100021d4:	10c00115 	stw	r3,4(r2)
                    frame_Time(KIRBY_FRAME_TIME_WALK);
100021d8:	01017704 	movi	r4,1500
100021dc:	00036940 	call	10003694 <frame_Time>
                } else {
                    kirby->frame = 0 + 2 * kirby->in_slope;
                }
                frame_Time(KIRBY_FRAME_TIME_BLINK);
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
100021e0:	00002906 	br	10002288 <updateKirby+0x8a4>
                    kirby->action = 0;
                    kirby->frame = 10;
                    kirby->y += KIRBY_STEP_Y;
                    frame_Time(KIRBY_FRAME_TIME_WALK);
                }
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 1)) {
100021e4:	e0bffb17 	ldw	r2,-20(fp)
100021e8:	10800917 	ldw	r2,36(r2)
100021ec:	10800058 	cmpnei	r2,r2,1
100021f0:	1003c61e 	bne	r2,zero,1000310c <updateKirby+0x1728>
100021f4:	e0bffb17 	ldw	r2,-20(fp)
100021f8:	10800a17 	ldw	r2,40(r2)
100021fc:	10800058 	cmpnei	r2,r2,1
10002200:	1003c21e 	bne	r2,zero,1000310c <updateKirby+0x1728>
                if (will_Touch_Ground(kirby, kirby->map)) {
10002204:	e0bffb17 	ldw	r2,-20(fp)
10002208:	10800217 	ldw	r2,8(r2)
1000220c:	100b883a 	mov	r5,r2
10002210:	e13ffb17 	ldw	r4,-20(fp)
10002214:	000372c0 	call	1000372c <will_Touch_Ground>
10002218:	10000a26 	beq	r2,zero,10002244 <updateKirby+0x860>
                    kirby->image = 1;
1000221c:	e0bffb17 	ldw	r2,-20(fp)
10002220:	00c00044 	movi	r3,1
10002224:	10c00315 	stw	r3,12(r2)
                    kirby->action = 0;
10002228:	e0bffb17 	ldw	r2,-20(fp)
1000222c:	10000615 	stw	zero,24(r2)
                    kirby->in_air = 0;
10002230:	e0bffb17 	ldw	r2,-20(fp)
10002234:	10000915 	stw	zero,36(r2)
                    kirby->frame = 0;
10002238:	e0bffb17 	ldw	r2,-20(fp)
1000223c:	10000715 	stw	zero,28(r2)
                    kirby->frame = 13;
                    kirby->y += KIRBY_STEP_Y;
                    frame_Time(KIRBY_FRAME_TIME_WALK);
                }
            }
            break;
10002240:	0003b206 	br	1000310c <updateKirby+0x1728>
                    kirby->image = 1;
                    kirby->action = 0;
                    kirby->in_air = 0;
                    kirby->frame = 0;
                } else {
                    kirby->image = 1;
10002244:	e0bffb17 	ldw	r2,-20(fp)
10002248:	00c00044 	movi	r3,1
1000224c:	10c00315 	stw	r3,12(r2)
                    kirby->action = 2;
10002250:	e0bffb17 	ldw	r2,-20(fp)
10002254:	00c00084 	movi	r3,2
10002258:	10c00615 	stw	r3,24(r2)
                    kirby->frame = 13;
1000225c:	e0bffb17 	ldw	r2,-20(fp)
10002260:	00c00344 	movi	r3,13
10002264:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
10002268:	e0bffb17 	ldw	r2,-20(fp)
1000226c:	10800117 	ldw	r2,4(r2)
10002270:	10c000c4 	addi	r3,r2,3
10002274:	e0bffb17 	ldw	r2,-20(fp)
10002278:	10c00115 	stw	r3,4(r2)
                    frame_Time(KIRBY_FRAME_TIME_WALK);
1000227c:	01017704 	movi	r4,1500
10002280:	00036940 	call	10003694 <frame_Time>
                }
            }
            break;
10002284:	0003a106 	br	1000310c <updateKirby+0x1728>
10002288:	0003a006 	br	1000310c <updateKirby+0x1728>

        case 0x0416:   //"a" & "s"
        case 0x1604:
        case 0x0400:
        case 0x0004: { //"a" left move
            kirby->x -= KIRBY_STEP_X;
1000228c:	e0bffb17 	ldw	r2,-20(fp)
10002290:	10800017 	ldw	r2,0(r2)
10002294:	10ffff44 	addi	r3,r2,-3
10002298:	e0bffb17 	ldw	r2,-20(fp)
1000229c:	10c00015 	stw	r3,0(r2)
            kirby->is_left = 1;
100022a0:	e0bffb17 	ldw	r2,-20(fp)
100022a4:	00c00044 	movi	r3,1
100022a8:	10c00415 	stw	r3,16(r2)

            // Kirby may walk to air
            if (will_Touch_Ground(kirby, kirby->map) == 0)
100022ac:	e0bffb17 	ldw	r2,-20(fp)
100022b0:	10800217 	ldw	r2,8(r2)
100022b4:	100b883a 	mov	r5,r2
100022b8:	e13ffb17 	ldw	r4,-20(fp)
100022bc:	000372c0 	call	1000372c <will_Touch_Ground>
100022c0:	1000031e 	bne	r2,zero,100022d0 <updateKirby+0x8ec>
                kirby->in_air = 1;
100022c4:	e0bffb17 	ldw	r2,-20(fp)
100022c8:	00c00044 	movi	r3,1
100022cc:	10c00915 	stw	r3,36(r2)

            // state update
            if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
100022d0:	e0bffb17 	ldw	r2,-20(fp)
100022d4:	10800917 	ldw	r2,36(r2)
100022d8:	1000181e 	bne	r2,zero,1000233c <updateKirby+0x958>
100022dc:	e0bffb17 	ldw	r2,-20(fp)
100022e0:	10800a17 	ldw	r2,40(r2)
100022e4:	1000151e 	bne	r2,zero,1000233c <updateKirby+0x958>
                kirby->image = 0;
100022e8:	e0bffb17 	ldw	r2,-20(fp)
100022ec:	10000315 	stw	zero,12(r2)
                kirby->action = 1;
100022f0:	e0bffb17 	ldw	r2,-20(fp)
100022f4:	00c00044 	movi	r3,1
100022f8:	10c00615 	stw	r3,24(r2)
                if (pre_keycode == keycode)
100022fc:	e0c00217 	ldw	r3,8(fp)
10002300:	e0bffe17 	ldw	r2,-8(fp)
10002304:	18800a1e 	bne	r3,r2,10002330 <updateKirby+0x94c>
                    kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
10002308:	e0bffb17 	ldw	r2,-20(fp)
1000230c:	10800717 	ldw	r2,28(r2)
10002310:	10800044 	addi	r2,r2,1
10002314:	01400284 	movi	r5,10
10002318:	1009883a 	mov	r4,r2
1000231c:	00069a80 	call	100069a8 <__modsi3>
10002320:	1007883a 	mov	r3,r2
10002324:	e0bffb17 	ldw	r2,-20(fp)
10002328:	10c00715 	stw	r3,28(r2)

            // state update
            if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
                kirby->image = 0;
                kirby->action = 1;
                if (pre_keycode == keycode)
1000232c:	00008806 	br	10002550 <updateKirby+0xb6c>
                    kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
                else
                    kirby->frame = 0;
10002330:	e0bffb17 	ldw	r2,-20(fp)
10002334:	10000715 	stw	zero,28(r2)

            // state update
            if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
                kirby->image = 0;
                kirby->action = 1;
                if (pre_keycode == keycode)
10002338:	00008506 	br	10002550 <updateKirby+0xb6c>
                    kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
                else
                    kirby->frame = 0;
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
1000233c:	e0bffb17 	ldw	r2,-20(fp)
10002340:	10800917 	ldw	r2,36(r2)
10002344:	10001e1e 	bne	r2,zero,100023c0 <updateKirby+0x9dc>
10002348:	e0bffb17 	ldw	r2,-20(fp)
1000234c:	10800a17 	ldw	r2,40(r2)
10002350:	10800058 	cmpnei	r2,r2,1
10002354:	10001a1e 	bne	r2,zero,100023c0 <updateKirby+0x9dc>
                kirby->image = 1;
10002358:	e0bffb17 	ldw	r2,-20(fp)
1000235c:	00c00044 	movi	r3,1
10002360:	10c00315 	stw	r3,12(r2)
                kirby->action = 1;
10002364:	e0bffb17 	ldw	r2,-20(fp)
10002368:	00c00044 	movi	r3,1
1000236c:	10c00615 	stw	r3,24(r2)
                if (pre_keycode == keycode)
10002370:	e0c00217 	ldw	r3,8(fp)
10002374:	e0bffe17 	ldw	r2,-8(fp)
10002378:	18800a1e 	bne	r3,r2,100023a4 <updateKirby+0x9c0>
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
1000237c:	e0bffb17 	ldw	r2,-20(fp)
10002380:	10800717 	ldw	r2,28(r2)
10002384:	10800044 	addi	r2,r2,1
10002388:	01400344 	movi	r5,13
1000238c:	1009883a 	mov	r4,r2
10002390:	00069a80 	call	100069a8 <__modsi3>
10002394:	1007883a 	mov	r3,r2
10002398:	e0bffb17 	ldw	r2,-20(fp)
1000239c:	10c00715 	stw	r3,28(r2)
                else
                    kirby->frame = 0;
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
                kirby->image = 1;
                kirby->action = 1;
                if (pre_keycode == keycode)
100023a0:	00006b06 	br	10002550 <updateKirby+0xb6c>
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope; 
100023a4:	e0bffb17 	ldw	r2,-20(fp)
100023a8:	10800817 	ldw	r2,32(r2)
100023ac:	1085883a 	add	r2,r2,r2
100023b0:	1007883a 	mov	r3,r2
100023b4:	e0bffb17 	ldw	r2,-20(fp)
100023b8:	10c00715 	stw	r3,28(r2)
                else
                    kirby->frame = 0;
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
                kirby->image = 1;
                kirby->action = 1;
                if (pre_keycode == keycode)
100023bc:	00006406 	br	10002550 <updateKirby+0xb6c>
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope; 
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
100023c0:	e0bffb17 	ldw	r2,-20(fp)
100023c4:	10800917 	ldw	r2,36(r2)
100023c8:	10800058 	cmpnei	r2,r2,1
100023cc:	10002c1e 	bne	r2,zero,10002480 <updateKirby+0xa9c>
100023d0:	e0bffb17 	ldw	r2,-20(fp)
100023d4:	10800a17 	ldw	r2,40(r2)
100023d8:	1000291e 	bne	r2,zero,10002480 <updateKirby+0xa9c>
                if (will_Touch_Ground(kirby, kirby->map)) {
100023dc:	e0bffb17 	ldw	r2,-20(fp)
100023e0:	10800217 	ldw	r2,8(r2)
100023e4:	100b883a 	mov	r5,r2
100023e8:	e13ffb17 	ldw	r4,-20(fp)
100023ec:	000372c0 	call	1000372c <will_Touch_Ground>
100023f0:	10001626 	beq	r2,zero,1000244c <updateKirby+0xa68>
                    kirby->image = 0;
100023f4:	e0bffb17 	ldw	r2,-20(fp)
100023f8:	10000315 	stw	zero,12(r2)
                    kirby->action = 1;
100023fc:	e0bffb17 	ldw	r2,-20(fp)
10002400:	00c00044 	movi	r3,1
10002404:	10c00615 	stw	r3,24(r2)
                    kirby->in_air = 0;
10002408:	e0bffb17 	ldw	r2,-20(fp)
1000240c:	10000915 	stw	zero,36(r2)
                    kirby->frame = 0;
10002410:	e0bffb17 	ldw	r2,-20(fp)
10002414:	10000715 	stw	zero,28(r2)
                    if (pre_keycode == keycode)
10002418:	e0c00217 	ldw	r3,8(fp)
1000241c:	e0bffe17 	ldw	r2,-8(fp)
10002420:	18804a1e 	bne	r3,r2,1000254c <updateKirby+0xb68>
                        kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
10002424:	e0bffb17 	ldw	r2,-20(fp)
10002428:	10800717 	ldw	r2,28(r2)
1000242c:	10800044 	addi	r2,r2,1
10002430:	01400284 	movi	r5,10
10002434:	1009883a 	mov	r4,r2
10002438:	00069a80 	call	100069a8 <__modsi3>
1000243c:	1007883a 	mov	r3,r2
10002440:	e0bffb17 	ldw	r2,-20(fp)
10002444:	10c00715 	stw	r3,28(r2)
                if (pre_keycode == keycode)
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope; 
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
10002448:	00004006 	br	1000254c <updateKirby+0xb68>
                    kirby->in_air = 0;
                    kirby->frame = 0;
                    if (pre_keycode == keycode)
                        kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
                } else {
                    kirby->image = 0;
1000244c:	e0bffb17 	ldw	r2,-20(fp)
10002450:	10000315 	stw	zero,12(r2)
                    kirby->action = 0;
10002454:	e0bffb17 	ldw	r2,-20(fp)
10002458:	10000615 	stw	zero,24(r2)
                    kirby->frame = 10;
1000245c:	e0bffb17 	ldw	r2,-20(fp)
10002460:	00c00284 	movi	r3,10
10002464:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
10002468:	e0bffb17 	ldw	r2,-20(fp)
1000246c:	10800117 	ldw	r2,4(r2)
10002470:	10c000c4 	addi	r3,r2,3
10002474:	e0bffb17 	ldw	r2,-20(fp)
10002478:	10c00115 	stw	r3,4(r2)
                if (pre_keycode == keycode)
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope; 
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
1000247c:	00003306 	br	1000254c <updateKirby+0xb68>
                    kirby->image = 0;
                    kirby->action = 0;
                    kirby->frame = 10;
                    kirby->y += KIRBY_STEP_Y;
                }
            } else if  ((kirby->in_air == 1) && (kirby->is_inhaled == 1)) {
10002480:	e0bffb17 	ldw	r2,-20(fp)
10002484:	10800917 	ldw	r2,36(r2)
10002488:	10800058 	cmpnei	r2,r2,1
1000248c:	1000301e 	bne	r2,zero,10002550 <updateKirby+0xb6c>
10002490:	e0bffb17 	ldw	r2,-20(fp)
10002494:	10800a17 	ldw	r2,40(r2)
10002498:	10800058 	cmpnei	r2,r2,1
1000249c:	10002c1e 	bne	r2,zero,10002550 <updateKirby+0xb6c>
                if (will_Touch_Ground(kirby, kirby->map)) {
100024a0:	e0bffb17 	ldw	r2,-20(fp)
100024a4:	10800217 	ldw	r2,8(r2)
100024a8:	100b883a 	mov	r5,r2
100024ac:	e13ffb17 	ldw	r4,-20(fp)
100024b0:	000372c0 	call	1000372c <will_Touch_Ground>
100024b4:	10001626 	beq	r2,zero,10002510 <updateKirby+0xb2c>
                    kirby->image = 1;
100024b8:	e0bffb17 	ldw	r2,-20(fp)
100024bc:	00c00044 	movi	r3,1
100024c0:	10c00315 	stw	r3,12(r2)
                    kirby->action = 0;
100024c4:	e0bffb17 	ldw	r2,-20(fp)
100024c8:	10000615 	stw	zero,24(r2)
                    kirby->in_air = 0;
100024cc:	e0bffb17 	ldw	r2,-20(fp)
100024d0:	10000915 	stw	zero,36(r2)
                    kirby->frame = 0;
100024d4:	e0bffb17 	ldw	r2,-20(fp)
100024d8:	10000715 	stw	zero,28(r2)
                    if (pre_keycode == keycode)
100024dc:	e0c00217 	ldw	r3,8(fp)
100024e0:	e0bffe17 	ldw	r2,-8(fp)
100024e4:	18801a1e 	bne	r3,r2,10002550 <updateKirby+0xb6c>
                        kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
100024e8:	e0bffb17 	ldw	r2,-20(fp)
100024ec:	10800717 	ldw	r2,28(r2)
100024f0:	10800044 	addi	r2,r2,1
100024f4:	01400344 	movi	r5,13
100024f8:	1009883a 	mov	r4,r2
100024fc:	00069a80 	call	100069a8 <__modsi3>
10002500:	1007883a 	mov	r3,r2
10002504:	e0bffb17 	ldw	r2,-20(fp)
10002508:	10c00715 	stw	r3,28(r2)
1000250c:	00001006 	br	10002550 <updateKirby+0xb6c>
                } else {
                    kirby->image = 1;
10002510:	e0bffb17 	ldw	r2,-20(fp)
10002514:	00c00044 	movi	r3,1
10002518:	10c00315 	stw	r3,12(r2)
                    kirby->action = 2;
1000251c:	e0bffb17 	ldw	r2,-20(fp)
10002520:	00c00084 	movi	r3,2
10002524:	10c00615 	stw	r3,24(r2)
                    kirby->frame = 13;
10002528:	e0bffb17 	ldw	r2,-20(fp)
1000252c:	00c00344 	movi	r3,13
10002530:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
10002534:	e0bffb17 	ldw	r2,-20(fp)
10002538:	10800117 	ldw	r2,4(r2)
1000253c:	10c000c4 	addi	r3,r2,3
10002540:	e0bffb17 	ldw	r2,-20(fp)
10002544:	10c00115 	stw	r3,4(r2)
10002548:	00000106 	br	10002550 <updateKirby+0xb6c>
                if (pre_keycode == keycode)
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope; 
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
1000254c:	0001883a 	nop
                    kirby->action = 2;
                    kirby->frame = 13;
                    kirby->y += KIRBY_STEP_Y;
                }
            }
            frame_Time(KIRBY_FRAME_TIME_WALK);
10002550:	01017704 	movi	r4,1500
10002554:	00036940 	call	10003694 <frame_Time>
            break;
10002558:	0002f106 	br	10003120 <updateKirby+0x173c>

        case 0x0716:   //"d" & "s"
        case 0x1607:
        case 0x0700:
        case 0x0007: { //"d" right move
            kirby->x += KIRBY_STEP_X;
1000255c:	e0bffb17 	ldw	r2,-20(fp)
10002560:	10800017 	ldw	r2,0(r2)
10002564:	10c000c4 	addi	r3,r2,3
10002568:	e0bffb17 	ldw	r2,-20(fp)
1000256c:	10c00015 	stw	r3,0(r2)
            kirby->is_left = 0;
10002570:	e0bffb17 	ldw	r2,-20(fp)
10002574:	10000415 	stw	zero,16(r2)

            // Kirby may walk to air
            if (will_Touch_Ground(kirby, kirby->map) == 0)
10002578:	e0bffb17 	ldw	r2,-20(fp)
1000257c:	10800217 	ldw	r2,8(r2)
10002580:	100b883a 	mov	r5,r2
10002584:	e13ffb17 	ldw	r4,-20(fp)
10002588:	000372c0 	call	1000372c <will_Touch_Ground>
1000258c:	1000031e 	bne	r2,zero,1000259c <updateKirby+0xbb8>
                kirby->in_air = 1;
10002590:	e0bffb17 	ldw	r2,-20(fp)
10002594:	00c00044 	movi	r3,1
10002598:	10c00915 	stw	r3,36(r2)

            // state update
            if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
1000259c:	e0bffb17 	ldw	r2,-20(fp)
100025a0:	10800917 	ldw	r2,36(r2)
100025a4:	1000181e 	bne	r2,zero,10002608 <updateKirby+0xc24>
100025a8:	e0bffb17 	ldw	r2,-20(fp)
100025ac:	10800a17 	ldw	r2,40(r2)
100025b0:	1000151e 	bne	r2,zero,10002608 <updateKirby+0xc24>
                kirby->image = 0;
100025b4:	e0bffb17 	ldw	r2,-20(fp)
100025b8:	10000315 	stw	zero,12(r2)
                kirby->action = 1;
100025bc:	e0bffb17 	ldw	r2,-20(fp)
100025c0:	00c00044 	movi	r3,1
100025c4:	10c00615 	stw	r3,24(r2)
                if (pre_keycode == keycode)
100025c8:	e0c00217 	ldw	r3,8(fp)
100025cc:	e0bffe17 	ldw	r2,-8(fp)
100025d0:	18800a1e 	bne	r3,r2,100025fc <updateKirby+0xc18>
                    kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
100025d4:	e0bffb17 	ldw	r2,-20(fp)
100025d8:	10800717 	ldw	r2,28(r2)
100025dc:	10800044 	addi	r2,r2,1
100025e0:	01400284 	movi	r5,10
100025e4:	1009883a 	mov	r4,r2
100025e8:	00069a80 	call	100069a8 <__modsi3>
100025ec:	1007883a 	mov	r3,r2
100025f0:	e0bffb17 	ldw	r2,-20(fp)
100025f4:	10c00715 	stw	r3,28(r2)

            // state update
            if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
                kirby->image = 0;
                kirby->action = 1;
                if (pre_keycode == keycode)
100025f8:	00008806 	br	1000281c <updateKirby+0xe38>
                    kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
                else
                    kirby->frame = 0;
100025fc:	e0bffb17 	ldw	r2,-20(fp)
10002600:	10000715 	stw	zero,28(r2)

            // state update
            if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
                kirby->image = 0;
                kirby->action = 1;
                if (pre_keycode == keycode)
10002604:	00008506 	br	1000281c <updateKirby+0xe38>
                    kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
                else
                    kirby->frame = 0;
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
10002608:	e0bffb17 	ldw	r2,-20(fp)
1000260c:	10800917 	ldw	r2,36(r2)
10002610:	10001e1e 	bne	r2,zero,1000268c <updateKirby+0xca8>
10002614:	e0bffb17 	ldw	r2,-20(fp)
10002618:	10800a17 	ldw	r2,40(r2)
1000261c:	10800058 	cmpnei	r2,r2,1
10002620:	10001a1e 	bne	r2,zero,1000268c <updateKirby+0xca8>
                kirby->image = 1;
10002624:	e0bffb17 	ldw	r2,-20(fp)
10002628:	00c00044 	movi	r3,1
1000262c:	10c00315 	stw	r3,12(r2)
                kirby->action = 1;
10002630:	e0bffb17 	ldw	r2,-20(fp)
10002634:	00c00044 	movi	r3,1
10002638:	10c00615 	stw	r3,24(r2)
                if (pre_keycode == keycode)
1000263c:	e0c00217 	ldw	r3,8(fp)
10002640:	e0bffe17 	ldw	r2,-8(fp)
10002644:	18800a1e 	bne	r3,r2,10002670 <updateKirby+0xc8c>
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
10002648:	e0bffb17 	ldw	r2,-20(fp)
1000264c:	10800717 	ldw	r2,28(r2)
10002650:	10800044 	addi	r2,r2,1
10002654:	01400344 	movi	r5,13
10002658:	1009883a 	mov	r4,r2
1000265c:	00069a80 	call	100069a8 <__modsi3>
10002660:	1007883a 	mov	r3,r2
10002664:	e0bffb17 	ldw	r2,-20(fp)
10002668:	10c00715 	stw	r3,28(r2)
                else
                    kirby->frame = 0;
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
                kirby->image = 1;
                kirby->action = 1;
                if (pre_keycode == keycode)
1000266c:	00006b06 	br	1000281c <updateKirby+0xe38>
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope;
10002670:	e0bffb17 	ldw	r2,-20(fp)
10002674:	10800817 	ldw	r2,32(r2)
10002678:	1085883a 	add	r2,r2,r2
1000267c:	1007883a 	mov	r3,r2
10002680:	e0bffb17 	ldw	r2,-20(fp)
10002684:	10c00715 	stw	r3,28(r2)
                else
                    kirby->frame = 0;
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
                kirby->image = 1;
                kirby->action = 1;
                if (pre_keycode == keycode)
10002688:	00006406 	br	1000281c <updateKirby+0xe38>
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope;
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
1000268c:	e0bffb17 	ldw	r2,-20(fp)
10002690:	10800917 	ldw	r2,36(r2)
10002694:	10800058 	cmpnei	r2,r2,1
10002698:	10002c1e 	bne	r2,zero,1000274c <updateKirby+0xd68>
1000269c:	e0bffb17 	ldw	r2,-20(fp)
100026a0:	10800a17 	ldw	r2,40(r2)
100026a4:	1000291e 	bne	r2,zero,1000274c <updateKirby+0xd68>
                if (will_Touch_Ground(kirby, kirby->map)) {
100026a8:	e0bffb17 	ldw	r2,-20(fp)
100026ac:	10800217 	ldw	r2,8(r2)
100026b0:	100b883a 	mov	r5,r2
100026b4:	e13ffb17 	ldw	r4,-20(fp)
100026b8:	000372c0 	call	1000372c <will_Touch_Ground>
100026bc:	10001626 	beq	r2,zero,10002718 <updateKirby+0xd34>
                    kirby->image = 0;
100026c0:	e0bffb17 	ldw	r2,-20(fp)
100026c4:	10000315 	stw	zero,12(r2)
                    kirby->action = 1;
100026c8:	e0bffb17 	ldw	r2,-20(fp)
100026cc:	00c00044 	movi	r3,1
100026d0:	10c00615 	stw	r3,24(r2)
                    kirby->in_air = 0;
100026d4:	e0bffb17 	ldw	r2,-20(fp)
100026d8:	10000915 	stw	zero,36(r2)
                    kirby->frame = 0;
100026dc:	e0bffb17 	ldw	r2,-20(fp)
100026e0:	10000715 	stw	zero,28(r2)
                    if (pre_keycode == keycode)
100026e4:	e0c00217 	ldw	r3,8(fp)
100026e8:	e0bffe17 	ldw	r2,-8(fp)
100026ec:	18804a1e 	bne	r3,r2,10002818 <updateKirby+0xe34>
                        kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
100026f0:	e0bffb17 	ldw	r2,-20(fp)
100026f4:	10800717 	ldw	r2,28(r2)
100026f8:	10800044 	addi	r2,r2,1
100026fc:	01400284 	movi	r5,10
10002700:	1009883a 	mov	r4,r2
10002704:	00069a80 	call	100069a8 <__modsi3>
10002708:	1007883a 	mov	r3,r2
1000270c:	e0bffb17 	ldw	r2,-20(fp)
10002710:	10c00715 	stw	r3,28(r2)
                if (pre_keycode == keycode)
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope;
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
10002714:	00004006 	br	10002818 <updateKirby+0xe34>
                    kirby->in_air = 0;
                    kirby->frame = 0;
                    if (pre_keycode == keycode)
                        kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
                } else {
                    kirby->image = 0;
10002718:	e0bffb17 	ldw	r2,-20(fp)
1000271c:	10000315 	stw	zero,12(r2)
                    kirby->action = 0;
10002720:	e0bffb17 	ldw	r2,-20(fp)
10002724:	10000615 	stw	zero,24(r2)
                    kirby->frame = 10;
10002728:	e0bffb17 	ldw	r2,-20(fp)
1000272c:	00c00284 	movi	r3,10
10002730:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
10002734:	e0bffb17 	ldw	r2,-20(fp)
10002738:	10800117 	ldw	r2,4(r2)
1000273c:	10c000c4 	addi	r3,r2,3
10002740:	e0bffb17 	ldw	r2,-20(fp)
10002744:	10c00115 	stw	r3,4(r2)
                if (pre_keycode == keycode)
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope;
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
10002748:	00003306 	br	10002818 <updateKirby+0xe34>
                    kirby->image = 0;
                    kirby->action = 0;
                    kirby->frame = 10;
                    kirby->y += KIRBY_STEP_Y;
                }
            } else if  ((kirby->in_air == 1) && (kirby->is_inhaled == 1)) {
1000274c:	e0bffb17 	ldw	r2,-20(fp)
10002750:	10800917 	ldw	r2,36(r2)
10002754:	10800058 	cmpnei	r2,r2,1
10002758:	1000301e 	bne	r2,zero,1000281c <updateKirby+0xe38>
1000275c:	e0bffb17 	ldw	r2,-20(fp)
10002760:	10800a17 	ldw	r2,40(r2)
10002764:	10800058 	cmpnei	r2,r2,1
10002768:	10002c1e 	bne	r2,zero,1000281c <updateKirby+0xe38>
                if (will_Touch_Ground(kirby, kirby->map)) {
1000276c:	e0bffb17 	ldw	r2,-20(fp)
10002770:	10800217 	ldw	r2,8(r2)
10002774:	100b883a 	mov	r5,r2
10002778:	e13ffb17 	ldw	r4,-20(fp)
1000277c:	000372c0 	call	1000372c <will_Touch_Ground>
10002780:	10001626 	beq	r2,zero,100027dc <updateKirby+0xdf8>
                    kirby->image = 1;
10002784:	e0bffb17 	ldw	r2,-20(fp)
10002788:	00c00044 	movi	r3,1
1000278c:	10c00315 	stw	r3,12(r2)
                    kirby->action = 0;
10002790:	e0bffb17 	ldw	r2,-20(fp)
10002794:	10000615 	stw	zero,24(r2)
                    kirby->in_air = 0;
10002798:	e0bffb17 	ldw	r2,-20(fp)
1000279c:	10000915 	stw	zero,36(r2)
                    kirby->frame = 0;
100027a0:	e0bffb17 	ldw	r2,-20(fp)
100027a4:	10000715 	stw	zero,28(r2)
                    if (pre_keycode == keycode)
100027a8:	e0c00217 	ldw	r3,8(fp)
100027ac:	e0bffe17 	ldw	r2,-8(fp)
100027b0:	18801a1e 	bne	r3,r2,1000281c <updateKirby+0xe38>
                        kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
100027b4:	e0bffb17 	ldw	r2,-20(fp)
100027b8:	10800717 	ldw	r2,28(r2)
100027bc:	10800044 	addi	r2,r2,1
100027c0:	01400344 	movi	r5,13
100027c4:	1009883a 	mov	r4,r2
100027c8:	00069a80 	call	100069a8 <__modsi3>
100027cc:	1007883a 	mov	r3,r2
100027d0:	e0bffb17 	ldw	r2,-20(fp)
100027d4:	10c00715 	stw	r3,28(r2)
100027d8:	00001006 	br	1000281c <updateKirby+0xe38>
                } else {
                    kirby->image = 1;
100027dc:	e0bffb17 	ldw	r2,-20(fp)
100027e0:	00c00044 	movi	r3,1
100027e4:	10c00315 	stw	r3,12(r2)
                    kirby->action = 2;
100027e8:	e0bffb17 	ldw	r2,-20(fp)
100027ec:	00c00084 	movi	r3,2
100027f0:	10c00615 	stw	r3,24(r2)
                    kirby->frame = 13;
100027f4:	e0bffb17 	ldw	r2,-20(fp)
100027f8:	00c00344 	movi	r3,13
100027fc:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
10002800:	e0bffb17 	ldw	r2,-20(fp)
10002804:	10800117 	ldw	r2,4(r2)
10002808:	10c000c4 	addi	r3,r2,3
1000280c:	e0bffb17 	ldw	r2,-20(fp)
10002810:	10c00115 	stw	r3,4(r2)
10002814:	00000106 	br	1000281c <updateKirby+0xe38>
                if (pre_keycode == keycode)
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope;
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
10002818:	0001883a 	nop
                    kirby->action = 2;
                    kirby->frame = 13;
                    kirby->y += KIRBY_STEP_Y;
                }
            }
            frame_Time(KIRBY_FRAME_TIME_WALK);
1000281c:	01017704 	movi	r4,1500
10002820:	00036940 	call	10003694 <frame_Time>
            break;
10002824:	00023e06 	br	10003120 <updateKirby+0x173c>
        }

        case 0x041a:   // "a" & "w"
        case 0x1a04: { // "w" & "a"
            kirby->is_left = 1;
10002828:	e0bffb17 	ldw	r2,-20(fp)
1000282c:	00c00044 	movi	r3,1
10002830:	10c00415 	stw	r3,16(r2)
            kirby->in_air = 1;
10002834:	e0bffb17 	ldw	r2,-20(fp)
10002838:	00c00044 	movi	r3,1
1000283c:	10c00915 	stw	r3,36(r2)
            kirby->is_inhaled = 1;
10002840:	e0bffb17 	ldw	r2,-20(fp)
10002844:	00c00044 	movi	r3,1
10002848:	10c00a15 	stw	r3,40(r2)
            kirby->image = 1;
1000284c:	e0bffb17 	ldw	r2,-20(fp)
10002850:	00c00044 	movi	r3,1
10002854:	10c00315 	stw	r3,12(r2)
            kirby->action = 2;
10002858:	e0bffb17 	ldw	r2,-20(fp)
1000285c:	00c00084 	movi	r3,2
10002860:	10c00615 	stw	r3,24(r2)
            if (pre_keycode == keycode)
10002864:	e0c00217 	ldw	r3,8(fp)
10002868:	e0bffe17 	ldw	r2,-8(fp)
1000286c:	18800a1e 	bne	r3,r2,10002898 <updateKirby+0xeb4>
                kirby->frame = 7 + ((kirby->frame - 7) + 1) % KIRBY_INHALED_FLY_FN;
10002870:	e0bffb17 	ldw	r2,-20(fp)
10002874:	10800717 	ldw	r2,28(r2)
10002878:	10bffe84 	addi	r2,r2,-6
1000287c:	01400184 	movi	r5,6
10002880:	1009883a 	mov	r4,r2
10002884:	00069a80 	call	100069a8 <__modsi3>
10002888:	10c001c4 	addi	r3,r2,7
1000288c:	e0bffb17 	ldw	r2,-20(fp)
10002890:	10c00715 	stw	r3,28(r2)
10002894:	00000306 	br	100028a4 <updateKirby+0xec0>
            else
                kirby->frame = 7;
10002898:	e0bffb17 	ldw	r2,-20(fp)
1000289c:	00c001c4 	movi	r3,7
100028a0:	10c00715 	stw	r3,28(r2)
            // TO DO: Maybe need to check whether tough the up walls
            kirby->y -= KIRBY_STEP_Y;
100028a4:	e0bffb17 	ldw	r2,-20(fp)
100028a8:	10800117 	ldw	r2,4(r2)
100028ac:	10ffff44 	addi	r3,r2,-3
100028b0:	e0bffb17 	ldw	r2,-20(fp)
100028b4:	10c00115 	stw	r3,4(r2)
            kirby->x -= KIRBY_STEP_X;
100028b8:	e0bffb17 	ldw	r2,-20(fp)
100028bc:	10800017 	ldw	r2,0(r2)
100028c0:	10ffff44 	addi	r3,r2,-3
100028c4:	e0bffb17 	ldw	r2,-20(fp)
100028c8:	10c00015 	stw	r3,0(r2)
            frame_Time(KIRBY_FRAME_TIME_WALK);
100028cc:	01017704 	movi	r4,1500
100028d0:	00036940 	call	10003694 <frame_Time>
            break;
100028d4:	00021206 	br	10003120 <updateKirby+0x173c>
        }

        case 0x071a:   // "d" & "w"
        case 0x1a07:{  // "w" & "d"
            kirby->is_left = 0;
100028d8:	e0bffb17 	ldw	r2,-20(fp)
100028dc:	10000415 	stw	zero,16(r2)
            kirby->in_air = 1;
100028e0:	e0bffb17 	ldw	r2,-20(fp)
100028e4:	00c00044 	movi	r3,1
100028e8:	10c00915 	stw	r3,36(r2)
            kirby->is_inhaled = 1;
100028ec:	e0bffb17 	ldw	r2,-20(fp)
100028f0:	00c00044 	movi	r3,1
100028f4:	10c00a15 	stw	r3,40(r2)
            kirby->image = 1;
100028f8:	e0bffb17 	ldw	r2,-20(fp)
100028fc:	00c00044 	movi	r3,1
10002900:	10c00315 	stw	r3,12(r2)
            kirby->action = 2;
10002904:	e0bffb17 	ldw	r2,-20(fp)
10002908:	00c00084 	movi	r3,2
1000290c:	10c00615 	stw	r3,24(r2)
            if (pre_keycode == keycode)
10002910:	e0c00217 	ldw	r3,8(fp)
10002914:	e0bffe17 	ldw	r2,-8(fp)
10002918:	18800a1e 	bne	r3,r2,10002944 <updateKirby+0xf60>
                kirby->frame = 7 + ((kirby->frame - 7) + 1) % KIRBY_INHALED_FLY_FN;
1000291c:	e0bffb17 	ldw	r2,-20(fp)
10002920:	10800717 	ldw	r2,28(r2)
10002924:	10bffe84 	addi	r2,r2,-6
10002928:	01400184 	movi	r5,6
1000292c:	1009883a 	mov	r4,r2
10002930:	00069a80 	call	100069a8 <__modsi3>
10002934:	10c001c4 	addi	r3,r2,7
10002938:	e0bffb17 	ldw	r2,-20(fp)
1000293c:	10c00715 	stw	r3,28(r2)
10002940:	00000306 	br	10002950 <updateKirby+0xf6c>
            else
                kirby->frame = 7;
10002944:	e0bffb17 	ldw	r2,-20(fp)
10002948:	00c001c4 	movi	r3,7
1000294c:	10c00715 	stw	r3,28(r2)
            // TO DO: Maybe need to check whether tough the up walls
            kirby->y -= KIRBY_STEP_Y;
10002950:	e0bffb17 	ldw	r2,-20(fp)
10002954:	10800117 	ldw	r2,4(r2)
10002958:	10ffff44 	addi	r3,r2,-3
1000295c:	e0bffb17 	ldw	r2,-20(fp)
10002960:	10c00115 	stw	r3,4(r2)
            kirby->x += KIRBY_STEP_X;
10002964:	e0bffb17 	ldw	r2,-20(fp)
10002968:	10800017 	ldw	r2,0(r2)
1000296c:	10c000c4 	addi	r3,r2,3
10002970:	e0bffb17 	ldw	r2,-20(fp)
10002974:	10c00015 	stw	r3,0(r2)
            frame_Time(KIRBY_FRAME_TIME_WALK);
10002978:	01017704 	movi	r4,1500
1000297c:	00036940 	call	10003694 <frame_Time>
            break;
10002980:	0001e706 	br	10003120 <updateKirby+0x173c>
        }
        
        case 0x0016: { //"s" squat
            if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
10002984:	e0bffb17 	ldw	r2,-20(fp)
10002988:	10800917 	ldw	r2,36(r2)
1000298c:	1000231e 	bne	r2,zero,10002a1c <updateKirby+0x1038>
10002990:	e0bffb17 	ldw	r2,-20(fp)
10002994:	10800a17 	ldw	r2,40(r2)
10002998:	1000201e 	bne	r2,zero,10002a1c <updateKirby+0x1038>
                kirby->image = 0;
1000299c:	e0bffb17 	ldw	r2,-20(fp)
100029a0:	10000315 	stw	zero,12(r2)
                kirby->action = 2;
100029a4:	e0bffb17 	ldw	r2,-20(fp)
100029a8:	00c00084 	movi	r3,2
100029ac:	10c00615 	stw	r3,24(r2)
                if (pre_keycode == keycode)
100029b0:	e0c00217 	ldw	r3,8(fp)
100029b4:	e0bffe17 	ldw	r2,-8(fp)
100029b8:	1880131e 	bne	r3,r2,10002a08 <updateKirby+0x1024>
                    kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
100029bc:	e0bffb17 	ldw	r2,-20(fp)
100029c0:	10800717 	ldw	r2,28(r2)
100029c4:	10c00044 	addi	r3,r2,1
100029c8:	00a00034 	movhi	r2,32768
100029cc:	10800044 	addi	r2,r2,1
100029d0:	1884703a 	and	r2,r3,r2
100029d4:	1000040e 	bge	r2,zero,100029e8 <updateKirby+0x1004>
100029d8:	10bfffc4 	addi	r2,r2,-1
100029dc:	00ffff84 	movi	r3,-2
100029e0:	10c4b03a 	or	r2,r2,r3
100029e4:	10800044 	addi	r2,r2,1
100029e8:	1007883a 	mov	r3,r2
100029ec:	e0bffb17 	ldw	r2,-20(fp)
100029f0:	10800817 	ldw	r2,32(r2)
100029f4:	1085883a 	add	r2,r2,r2
100029f8:	1887883a 	add	r3,r3,r2
100029fc:	e0bffb17 	ldw	r2,-20(fp)
10002a00:	10c00715 	stw	r3,28(r2)
10002a04:	00000206 	br	10002a10 <updateKirby+0x102c>
                else
                    kirby->frame = 0;
10002a08:	e0bffb17 	ldw	r2,-20(fp)
10002a0c:	10000715 	stw	zero,28(r2)
                frame_Time(KIRBY_FRAME_TIME_BLINK);
10002a10:	01017704 	movi	r4,1500
10002a14:	00036940 	call	10003694 <frame_Time>
10002a18:	00007506 	br	10002bf0 <updateKirby+0x120c>
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) { // Gulp
10002a1c:	e0bffb17 	ldw	r2,-20(fp)
10002a20:	10800917 	ldw	r2,36(r2)
10002a24:	1000101e 	bne	r2,zero,10002a68 <updateKirby+0x1084>
10002a28:	e0bffb17 	ldw	r2,-20(fp)
10002a2c:	10800a17 	ldw	r2,40(r2)
10002a30:	10800058 	cmpnei	r2,r2,1
10002a34:	10000c1e 	bne	r2,zero,10002a68 <updateKirby+0x1084>
                kirby->gulping = 1;
10002a38:	e0bffb17 	ldw	r2,-20(fp)
10002a3c:	00c00044 	movi	r3,1
10002a40:	10c00f15 	stw	r3,60(r2)
                kirby->image = 1;
10002a44:	e0bffb17 	ldw	r2,-20(fp)
10002a48:	00c00044 	movi	r3,1
10002a4c:	10c00315 	stw	r3,12(r2)
                kirby->action = 2;
10002a50:	e0bffb17 	ldw	r2,-20(fp)
10002a54:	00c00084 	movi	r3,2
10002a58:	10c00615 	stw	r3,24(r2)
                kirby->frame = 0;
10002a5c:	e0bffb17 	ldw	r2,-20(fp)
10002a60:	10000715 	stw	zero,28(r2)
10002a64:	00006206 	br	10002bf0 <updateKirby+0x120c>
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
10002a68:	e0bffb17 	ldw	r2,-20(fp)
10002a6c:	10800917 	ldw	r2,36(r2)
10002a70:	10800058 	cmpnei	r2,r2,1
10002a74:	10002d1e 	bne	r2,zero,10002b2c <updateKirby+0x1148>
10002a78:	e0bffb17 	ldw	r2,-20(fp)
10002a7c:	10800a17 	ldw	r2,40(r2)
10002a80:	10002a1e 	bne	r2,zero,10002b2c <updateKirby+0x1148>
                if (will_Touch_Ground(kirby, kirby->map) == 1) {
10002a84:	e0bffb17 	ldw	r2,-20(fp)
10002a88:	10800217 	ldw	r2,8(r2)
10002a8c:	100b883a 	mov	r5,r2
10002a90:	e13ffb17 	ldw	r4,-20(fp)
10002a94:	000372c0 	call	1000372c <will_Touch_Ground>
10002a98:	10800058 	cmpnei	r2,r2,1
10002a9c:	1000141e 	bne	r2,zero,10002af0 <updateKirby+0x110c>
                    kirby->in_air = 0;
10002aa0:	e0bffb17 	ldw	r2,-20(fp)
10002aa4:	10000915 	stw	zero,36(r2)
                    force_It_On_Ground(kirby, kirby->map); // It will go to the ground
10002aa8:	e0bffb17 	ldw	r2,-20(fp)
10002aac:	10800217 	ldw	r2,8(r2)
10002ab0:	100b883a 	mov	r5,r2
10002ab4:	e13ffb17 	ldw	r4,-20(fp)
10002ab8:	000327c0 	call	1000327c <force_It_On_Ground>
                    kirby->image = 0;
10002abc:	e0bffb17 	ldw	r2,-20(fp)
10002ac0:	10000315 	stw	zero,12(r2)
                    kirby->action = 0;
10002ac4:	e0bffb17 	ldw	r2,-20(fp)
10002ac8:	10000615 	stw	zero,24(r2)
                    kirby->frame = 0 + 2 * kirby->in_slope;
10002acc:	e0bffb17 	ldw	r2,-20(fp)
10002ad0:	10800817 	ldw	r2,32(r2)
10002ad4:	1085883a 	add	r2,r2,r2
10002ad8:	1007883a 	mov	r3,r2
10002adc:	e0bffb17 	ldw	r2,-20(fp)
10002ae0:	10c00715 	stw	r3,28(r2)
                    frame_Time(KIRBY_FRAME_TIME_BLINK);
10002ae4:	01017704 	movi	r4,1500
10002ae8:	00036940 	call	10003694 <frame_Time>
                kirby->gulping = 1;
                kirby->image = 1;
                kirby->action = 2;
                kirby->frame = 0;
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map) == 1) {
10002aec:	00004006 	br	10002bf0 <updateKirby+0x120c>
                    kirby->image = 0;
                    kirby->action = 0;
                    kirby->frame = 0 + 2 * kirby->in_slope;
                    frame_Time(KIRBY_FRAME_TIME_BLINK);
                } else {  // Slowly Drop downwards
                    kirby->image = 0;
10002af0:	e0bffb17 	ldw	r2,-20(fp)
10002af4:	10000315 	stw	zero,12(r2)
                    kirby->action = 0;
10002af8:	e0bffb17 	ldw	r2,-20(fp)
10002afc:	10000615 	stw	zero,24(r2)
                    kirby->frame = 10;
10002b00:	e0bffb17 	ldw	r2,-20(fp)
10002b04:	00c00284 	movi	r3,10
10002b08:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
10002b0c:	e0bffb17 	ldw	r2,-20(fp)
10002b10:	10800117 	ldw	r2,4(r2)
10002b14:	10c000c4 	addi	r3,r2,3
10002b18:	e0bffb17 	ldw	r2,-20(fp)
10002b1c:	10c00115 	stw	r3,4(r2)
                    frame_Time(KIRBY_FRAME_TIME_WALK);
10002b20:	01017704 	movi	r4,1500
10002b24:	00036940 	call	10003694 <frame_Time>
                kirby->gulping = 1;
                kirby->image = 1;
                kirby->action = 2;
                kirby->frame = 0;
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map) == 1) {
10002b28:	00003106 	br	10002bf0 <updateKirby+0x120c>
                    kirby->action = 0;
                    kirby->frame = 10;
                    kirby->y += KIRBY_STEP_Y;
                    frame_Time(KIRBY_FRAME_TIME_WALK);
                }
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 1)) {
10002b2c:	e0bffb17 	ldw	r2,-20(fp)
10002b30:	10800917 	ldw	r2,36(r2)
10002b34:	10800058 	cmpnei	r2,r2,1
10002b38:	1001761e 	bne	r2,zero,10003114 <updateKirby+0x1730>
10002b3c:	e0bffb17 	ldw	r2,-20(fp)
10002b40:	10800a17 	ldw	r2,40(r2)
10002b44:	10800058 	cmpnei	r2,r2,1
10002b48:	1001721e 	bne	r2,zero,10003114 <updateKirby+0x1730>
                if (will_Touch_Ground(kirby, kirby->map) == 1) {
10002b4c:	e0bffb17 	ldw	r2,-20(fp)
10002b50:	10800217 	ldw	r2,8(r2)
10002b54:	100b883a 	mov	r5,r2
10002b58:	e13ffb17 	ldw	r4,-20(fp)
10002b5c:	000372c0 	call	1000372c <will_Touch_Ground>
10002b60:	10800058 	cmpnei	r2,r2,1
10002b64:	1000111e 	bne	r2,zero,10002bac <updateKirby+0x11c8>
                    kirby->in_air = 0;
10002b68:	e0bffb17 	ldw	r2,-20(fp)
10002b6c:	10000915 	stw	zero,36(r2)
                    force_It_On_Ground(kirby, kirby->map); // It will go to the ground
10002b70:	e0bffb17 	ldw	r2,-20(fp)
10002b74:	10800217 	ldw	r2,8(r2)
10002b78:	100b883a 	mov	r5,r2
10002b7c:	e13ffb17 	ldw	r4,-20(fp)
10002b80:	000327c0 	call	1000327c <force_It_On_Ground>
                    kirby->image = 1;
10002b84:	e0bffb17 	ldw	r2,-20(fp)
10002b88:	00c00044 	movi	r3,1
10002b8c:	10c00315 	stw	r3,12(r2)
                    kirby->action = 0;
10002b90:	e0bffb17 	ldw	r2,-20(fp)
10002b94:	10000615 	stw	zero,24(r2)
                    kirby->frame = 0;
10002b98:	e0bffb17 	ldw	r2,-20(fp)
10002b9c:	10000715 	stw	zero,28(r2)
                    frame_Time(KIRBY_FRAME_TIME_BLINK);
10002ba0:	01017704 	movi	r4,1500
10002ba4:	00036940 	call	10003694 <frame_Time>
                    kirby->frame = 13;
                    kirby->y += KIRBY_STEP_Y;
                    frame_Time(KIRBY_FRAME_TIME_WALK);
                }
            }
            break;
10002ba8:	00015a06 	br	10003114 <updateKirby+0x1730>
                    kirby->image = 1;
                    kirby->action = 0;
                    kirby->frame = 0;
                    frame_Time(KIRBY_FRAME_TIME_BLINK);
                } else {  // Slowly Drop downwards
                    kirby->image = 1;
10002bac:	e0bffb17 	ldw	r2,-20(fp)
10002bb0:	00c00044 	movi	r3,1
10002bb4:	10c00315 	stw	r3,12(r2)
                    kirby->action = 2;
10002bb8:	e0bffb17 	ldw	r2,-20(fp)
10002bbc:	00c00084 	movi	r3,2
10002bc0:	10c00615 	stw	r3,24(r2)
                    kirby->frame = 13;
10002bc4:	e0bffb17 	ldw	r2,-20(fp)
10002bc8:	00c00344 	movi	r3,13
10002bcc:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
10002bd0:	e0bffb17 	ldw	r2,-20(fp)
10002bd4:	10800117 	ldw	r2,4(r2)
10002bd8:	10c000c4 	addi	r3,r2,3
10002bdc:	e0bffb17 	ldw	r2,-20(fp)
10002be0:	10c00115 	stw	r3,4(r2)
                    frame_Time(KIRBY_FRAME_TIME_WALK);
10002be4:	01017704 	movi	r4,1500
10002be8:	00036940 	call	10003694 <frame_Time>
                }
            }
            break;
10002bec:	00014906 	br	10003114 <updateKirby+0x1730>
10002bf0:	00014806 	br	10003114 <updateKirby+0x1730>
        }

        case 0x001a: { //"w" jump
            if (sqr_Dis_Kirby_Door(kirby) <= (DOOR_TOLERANCE * DOOR_TOLERANCE))
10002bf4:	e13ffb17 	ldw	r4,-20(fp)
10002bf8:	00040b00 	call	100040b0 <sqr_Dis_Kirby_Door>
10002bfc:	10800948 	cmpgei	r2,r2,37
10002c00:	1000031e 	bne	r2,zero,10002c10 <updateKirby+0x122c>
            {
                kirby->entered_door = 1;
10002c04:	e0bffb17 	ldw	r2,-20(fp)
10002c08:	00c00044 	movi	r3,1
10002c0c:	10c01015 	stw	r3,64(r2)
            }
            kirby->in_air = 1;
10002c10:	e0bffb17 	ldw	r2,-20(fp)
10002c14:	00c00044 	movi	r3,1
10002c18:	10c00915 	stw	r3,36(r2)
            kirby->is_inhaled = 1;
10002c1c:	e0bffb17 	ldw	r2,-20(fp)
10002c20:	00c00044 	movi	r3,1
10002c24:	10c00a15 	stw	r3,40(r2)
            kirby->image = 1;
10002c28:	e0bffb17 	ldw	r2,-20(fp)
10002c2c:	00c00044 	movi	r3,1
10002c30:	10c00315 	stw	r3,12(r2)
            kirby->action = 2;
10002c34:	e0bffb17 	ldw	r2,-20(fp)
10002c38:	00c00084 	movi	r3,2
10002c3c:	10c00615 	stw	r3,24(r2)
            if (pre_keycode == keycode) {
10002c40:	e0c00217 	ldw	r3,8(fp)
10002c44:	e0bffe17 	ldw	r2,-8(fp)
10002c48:	18800a1e 	bne	r3,r2,10002c74 <updateKirby+0x1290>
                kirby->frame = 7 + ((kirby->frame - 7) + 1) % KIRBY_INHALED_FLY_FN;
10002c4c:	e0bffb17 	ldw	r2,-20(fp)
10002c50:	10800717 	ldw	r2,28(r2)
10002c54:	10bffe84 	addi	r2,r2,-6
10002c58:	01400184 	movi	r5,6
10002c5c:	1009883a 	mov	r4,r2
10002c60:	00069a80 	call	100069a8 <__modsi3>
10002c64:	10c001c4 	addi	r3,r2,7
10002c68:	e0bffb17 	ldw	r2,-20(fp)
10002c6c:	10c00715 	stw	r3,28(r2)
10002c70:	00000306 	br	10002c80 <updateKirby+0x129c>
            } else {
                kirby->frame = 7;
10002c74:	e0bffb17 	ldw	r2,-20(fp)
10002c78:	00c001c4 	movi	r3,7
10002c7c:	10c00715 	stw	r3,28(r2)
            }
            // TO DO: Maybe need to check whether tough the up walls
            kirby->y -= KIRBY_STEP_Y; // fly upwards
10002c80:	e0bffb17 	ldw	r2,-20(fp)
10002c84:	10800117 	ldw	r2,4(r2)
10002c88:	10ffff44 	addi	r3,r2,-3
10002c8c:	e0bffb17 	ldw	r2,-20(fp)
10002c90:	10c00115 	stw	r3,4(r2)
            frame_Time(KIRBY_FRAME_TIME_WALK);
10002c94:	01017704 	movi	r4,1500
10002c98:	00036940 	call	10003694 <frame_Time>
            break;
10002c9c:	00012006 	br	10003120 <updateKirby+0x173c>
        }

        case 0x000e: { //"k" Fake B button
            if (kirby->is_inhaled == 0) { // Inhale
10002ca0:	e0bffb17 	ldw	r2,-20(fp)
10002ca4:	10800a17 	ldw	r2,40(r2)
10002ca8:	1000331e 	bne	r2,zero,10002d78 <updateKirby+0x1394>
                kirby->inhaling = 1;
10002cac:	e0bffb17 	ldw	r2,-20(fp)
10002cb0:	00c00044 	movi	r3,1
10002cb4:	10c00c15 	stw	r3,48(r2)
                kirby->image = 1;
10002cb8:	e0bffb17 	ldw	r2,-20(fp)
10002cbc:	00c00044 	movi	r3,1
10002cc0:	10c00315 	stw	r3,12(r2)
                kirby->action = 3;
10002cc4:	e0bffb17 	ldw	r2,-20(fp)
10002cc8:	00c000c4 	movi	r3,3
10002ccc:	10c00615 	stw	r3,24(r2)
                if (enemy_Should_Be_Inhaled(kirby, enemy) == 0) {// Not get enemy signal
10002cd0:	e17ffd17 	ldw	r5,-12(fp)
10002cd4:	e13ffb17 	ldw	r4,-20(fp)
10002cd8:	0003f080 	call	10003f08 <enemy_Should_Be_Inhaled>
10002cdc:	1000171e 	bne	r2,zero,10002d3c <updateKirby+0x1358>
                    if (keycode == pre_keycode)
10002ce0:	e0fffe17 	ldw	r3,-8(fp)
10002ce4:	e0800217 	ldw	r2,8(fp)
10002ce8:	18800f1e 	bne	r3,r2,10002d28 <updateKirby+0x1344>
                        kirby->frame = (kirby->frame + 1) % 2;
10002cec:	e0bffb17 	ldw	r2,-20(fp)
10002cf0:	10800717 	ldw	r2,28(r2)
10002cf4:	10c00044 	addi	r3,r2,1
10002cf8:	00a00034 	movhi	r2,32768
10002cfc:	10800044 	addi	r2,r2,1
10002d00:	1884703a 	and	r2,r3,r2
10002d04:	1000040e 	bge	r2,zero,10002d18 <updateKirby+0x1334>
10002d08:	10bfffc4 	addi	r2,r2,-1
10002d0c:	00ffff84 	movi	r3,-2
10002d10:	10c4b03a 	or	r2,r2,r3
10002d14:	10800044 	addi	r2,r2,1
10002d18:	1007883a 	mov	r3,r2
10002d1c:	e0bffb17 	ldw	r2,-20(fp)
10002d20:	10c00715 	stw	r3,28(r2)
10002d24:	00000206 	br	10002d30 <updateKirby+0x134c>
                    else
                        kirby->frame = 0;
10002d28:	e0bffb17 	ldw	r2,-20(fp)
10002d2c:	10000715 	stw	zero,28(r2)
                    frame_Time(KIRBY_FRAME_TIME_INHALE * 2);
10002d30:	0109c404 	movi	r4,10000
10002d34:	00036940 	call	10003694 <frame_Time>
10002d38:	00001a06 	br	10002da4 <updateKirby+0x13c0>
                } else { // TO DO: Get enemy signal, need test and add signal
                    // printf("\n################## Inhale Enemies ################\n");
                    kirby->inhaling = 2;
10002d3c:	e0bffb17 	ldw	r2,-20(fp)
10002d40:	00c00084 	movi	r3,2
10002d44:	10c00c15 	stw	r3,48(r2)
                    kirby->image = 1;
10002d48:	e0bffb17 	ldw	r2,-20(fp)
10002d4c:	00c00044 	movi	r3,1
10002d50:	10c00315 	stw	r3,12(r2)
                    kirby->action = 3;
10002d54:	e0bffb17 	ldw	r2,-20(fp)
10002d58:	00c000c4 	movi	r3,3
10002d5c:	10c00615 	stw	r3,24(r2)
                    kirby->frame = 2;
10002d60:	e0bffb17 	ldw	r2,-20(fp)
10002d64:	00c00084 	movi	r3,2
10002d68:	10c00715 	stw	r3,28(r2)
                    // TO DO: The way enemies is dead when inhaled by kirby
                    enemy->health = 0;  // Enemy is dead
10002d6c:	e0bffd17 	ldw	r2,-12(fp)
10002d70:	10000315 	stw	zero,12(r2)
10002d74:	00000b06 	br	10002da4 <updateKirby+0x13c0>
                    // enemy->realx = 0;
                    // enemy->realy = 0;
                }
            } else { // Spitting
                kirby->spitting = 1;
10002d78:	e0bffb17 	ldw	r2,-20(fp)
10002d7c:	00c00044 	movi	r3,1
10002d80:	10c00d15 	stw	r3,52(r2)
                kirby->image = 1;
10002d84:	e0bffb17 	ldw	r2,-20(fp)
10002d88:	00c00044 	movi	r3,1
10002d8c:	10c00315 	stw	r3,12(r2)
                kirby->action = 4;
10002d90:	e0bffb17 	ldw	r2,-20(fp)
10002d94:	00c00104 	movi	r3,4
10002d98:	10c00615 	stw	r3,24(r2)
                kirby->frame = 0;
10002d9c:	e0bffb17 	ldw	r2,-20(fp)
10002da0:	10000715 	stw	zero,28(r2)
            }
            frame_Time(KIRBY_FRAME_TIME_GULP);
10002da4:	0103e804 	movi	r4,4000
10002da8:	00036940 	call	10003694 <frame_Time>
            break;
10002dac:	0000dc06 	br	10003120 <updateKirby+0x173c>
            break;
        }

        case 0x160f:
        case 0x0f16: { //"l" & "s"
            if (kirby->is_inhaled == 0) {
10002db0:	e0bffb17 	ldw	r2,-20(fp)
10002db4:	10800a17 	ldw	r2,40(r2)
10002db8:	10002a1e 	bne	r2,zero,10002e64 <updateKirby+0x1480>
                kirby->kicking = 1;
10002dbc:	e0bffb17 	ldw	r2,-20(fp)
10002dc0:	00c00044 	movi	r3,1
10002dc4:	10c00e15 	stw	r3,56(r2)
                kirby->image = 0;
10002dc8:	e0bffb17 	ldw	r2,-20(fp)
10002dcc:	10000315 	stw	zero,12(r2)
                kirby->action = 2;
10002dd0:	e0bffb17 	ldw	r2,-20(fp)
10002dd4:	00c00084 	movi	r3,2
10002dd8:	10c00615 	stw	r3,24(r2)
                kirby->frame = 6;
10002ddc:	e0bffb17 	ldw	r2,-20(fp)
10002de0:	00c00184 	movi	r3,6
10002de4:	10c00715 	stw	r3,28(r2)
            }
            while ((get_keycode_value() == 0x160f) || (get_keycode_value() == 0x0f16)) {
10002de8:	00001e06 	br	10002e64 <updateKirby+0x1480>
                kirby->image = 0;
10002dec:	e0bffb17 	ldw	r2,-20(fp)
10002df0:	10000315 	stw	zero,12(r2)
                kirby->action = 2;
10002df4:	e0bffb17 	ldw	r2,-20(fp)
10002df8:	00c00084 	movi	r3,2
10002dfc:	10c00615 	stw	r3,24(r2)
                kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
10002e00:	e0bffb17 	ldw	r2,-20(fp)
10002e04:	10800717 	ldw	r2,28(r2)
10002e08:	10c00044 	addi	r3,r2,1
10002e0c:	00a00034 	movhi	r2,32768
10002e10:	10800044 	addi	r2,r2,1
10002e14:	1884703a 	and	r2,r3,r2
10002e18:	1000040e 	bge	r2,zero,10002e2c <updateKirby+0x1448>
10002e1c:	10bfffc4 	addi	r2,r2,-1
10002e20:	00ffff84 	movi	r3,-2
10002e24:	10c4b03a 	or	r2,r2,r3
10002e28:	10800044 	addi	r2,r2,1
10002e2c:	1007883a 	mov	r3,r2
10002e30:	e0bffb17 	ldw	r2,-20(fp)
10002e34:	10800817 	ldw	r2,32(r2)
10002e38:	1085883a 	add	r2,r2,r2
10002e3c:	1887883a 	add	r3,r3,r2
10002e40:	e0bffb17 	ldw	r2,-20(fp)
10002e44:	10c00715 	stw	r3,28(r2)
                upload_Kirby_Info(kirby);
10002e48:	e13ffb17 	ldw	r4,-20(fp)
10002e4c:	000179c0 	call	1000179c <upload_Kirby_Info>
                force_It_On_Ground(kirby, kirby->map);
10002e50:	e0bffb17 	ldw	r2,-20(fp)
10002e54:	10800217 	ldw	r2,8(r2)
10002e58:	100b883a 	mov	r5,r2
10002e5c:	e13ffb17 	ldw	r4,-20(fp)
10002e60:	000327c0 	call	1000327c <force_It_On_Ground>
                kirby->kicking = 1;
                kirby->image = 0;
                kirby->action = 2;
                kirby->frame = 6;
            }
            while ((get_keycode_value() == 0x160f) || (get_keycode_value() == 0x0f16)) {
10002e64:	000663c0 	call	1000663c <get_keycode_value>
10002e68:	108583e0 	cmpeqi	r2,r2,5647
10002e6c:	103fdf1e 	bne	r2,zero,10002dec <__alt_data_end+0xf8002dec>
10002e70:	000663c0 	call	1000663c <get_keycode_value>
10002e74:	1083c5a0 	cmpeqi	r2,r2,3862
10002e78:	103fdc1e 	bne	r2,zero,10002dec <__alt_data_end+0xf8002dec>
                kirby->action = 2;
                kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
                upload_Kirby_Info(kirby);
                force_It_On_Ground(kirby, kirby->map);
            }
            break;
10002e7c:	0000a806 	br	10003120 <updateKirby+0x173c>
            frame_Time(KIRBY_FRAME_STOP);
            break;
        #endif

        default: { // "" Stand
            if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
10002e80:	e0bffb17 	ldw	r2,-20(fp)
10002e84:	10800917 	ldw	r2,36(r2)
10002e88:	1000261e 	bne	r2,zero,10002f24 <updateKirby+0x1540>
10002e8c:	e0bffb17 	ldw	r2,-20(fp)
10002e90:	10800a17 	ldw	r2,40(r2)
10002e94:	1000231e 	bne	r2,zero,10002f24 <updateKirby+0x1540>
                kirby->image = 0;
10002e98:	e0bffb17 	ldw	r2,-20(fp)
10002e9c:	10000315 	stw	zero,12(r2)
                kirby->action = 0;
10002ea0:	e0bffb17 	ldw	r2,-20(fp)
10002ea4:	10000615 	stw	zero,24(r2)
                if (pre_keycode == keycode) {
10002ea8:	e0c00217 	ldw	r3,8(fp)
10002eac:	e0bffe17 	ldw	r2,-8(fp)
10002eb0:	1880131e 	bne	r3,r2,10002f00 <updateKirby+0x151c>
                    kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
10002eb4:	e0bffb17 	ldw	r2,-20(fp)
10002eb8:	10800717 	ldw	r2,28(r2)
10002ebc:	10c00044 	addi	r3,r2,1
10002ec0:	00a00034 	movhi	r2,32768
10002ec4:	10800044 	addi	r2,r2,1
10002ec8:	1884703a 	and	r2,r3,r2
10002ecc:	1000040e 	bge	r2,zero,10002ee0 <updateKirby+0x14fc>
10002ed0:	10bfffc4 	addi	r2,r2,-1
10002ed4:	00ffff84 	movi	r3,-2
10002ed8:	10c4b03a 	or	r2,r2,r3
10002edc:	10800044 	addi	r2,r2,1
10002ee0:	1007883a 	mov	r3,r2
10002ee4:	e0bffb17 	ldw	r2,-20(fp)
10002ee8:	10800817 	ldw	r2,32(r2)
10002eec:	1085883a 	add	r2,r2,r2
10002ef0:	1887883a 	add	r3,r3,r2
10002ef4:	e0bffb17 	ldw	r2,-20(fp)
10002ef8:	10c00715 	stw	r3,28(r2)
10002efc:	00000606 	br	10002f18 <updateKirby+0x1534>
                } else {
                    kirby->frame = 0 + 2 * kirby->in_slope;
10002f00:	e0bffb17 	ldw	r2,-20(fp)
10002f04:	10800817 	ldw	r2,32(r2)
10002f08:	1085883a 	add	r2,r2,r2
10002f0c:	1007883a 	mov	r3,r2
10002f10:	e0bffb17 	ldw	r2,-20(fp)
10002f14:	10c00715 	stw	r3,28(r2)
                }
                frame_Time(KIRBY_FRAME_TIME_BLINK);
10002f18:	01017704 	movi	r4,1500
10002f1c:	00036940 	call	10003694 <frame_Time>
10002f20:	00007706 	br	10003100 <updateKirby+0x171c>
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
10002f24:	e0bffb17 	ldw	r2,-20(fp)
10002f28:	10800917 	ldw	r2,36(r2)
10002f2c:	1000281e 	bne	r2,zero,10002fd0 <updateKirby+0x15ec>
10002f30:	e0bffb17 	ldw	r2,-20(fp)
10002f34:	10800a17 	ldw	r2,40(r2)
10002f38:	10800058 	cmpnei	r2,r2,1
10002f3c:	1000241e 	bne	r2,zero,10002fd0 <updateKirby+0x15ec>
                kirby->image = 1;
10002f40:	e0bffb17 	ldw	r2,-20(fp)
10002f44:	00c00044 	movi	r3,1
10002f48:	10c00315 	stw	r3,12(r2)
                kirby->action = 0;
10002f4c:	e0bffb17 	ldw	r2,-20(fp)
10002f50:	10000615 	stw	zero,24(r2)
                if (pre_keycode == keycode) {
10002f54:	e0c00217 	ldw	r3,8(fp)
10002f58:	e0bffe17 	ldw	r2,-8(fp)
10002f5c:	1880131e 	bne	r3,r2,10002fac <updateKirby+0x15c8>
                    kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
10002f60:	e0bffb17 	ldw	r2,-20(fp)
10002f64:	10800717 	ldw	r2,28(r2)
10002f68:	10c00044 	addi	r3,r2,1
10002f6c:	00a00034 	movhi	r2,32768
10002f70:	10800044 	addi	r2,r2,1
10002f74:	1884703a 	and	r2,r3,r2
10002f78:	1000040e 	bge	r2,zero,10002f8c <updateKirby+0x15a8>
10002f7c:	10bfffc4 	addi	r2,r2,-1
10002f80:	00ffff84 	movi	r3,-2
10002f84:	10c4b03a 	or	r2,r2,r3
10002f88:	10800044 	addi	r2,r2,1
10002f8c:	1007883a 	mov	r3,r2
10002f90:	e0bffb17 	ldw	r2,-20(fp)
10002f94:	10800817 	ldw	r2,32(r2)
10002f98:	1085883a 	add	r2,r2,r2
10002f9c:	1887883a 	add	r3,r3,r2
10002fa0:	e0bffb17 	ldw	r2,-20(fp)
10002fa4:	10c00715 	stw	r3,28(r2)
10002fa8:	00000606 	br	10002fc4 <updateKirby+0x15e0>
                } else {
                    kirby->frame = 0 + 2 * kirby->in_slope;
10002fac:	e0bffb17 	ldw	r2,-20(fp)
10002fb0:	10800817 	ldw	r2,32(r2)
10002fb4:	1085883a 	add	r2,r2,r2
10002fb8:	1007883a 	mov	r3,r2
10002fbc:	e0bffb17 	ldw	r2,-20(fp)
10002fc0:	10c00715 	stw	r3,28(r2)
                }
                frame_Time(KIRBY_FRAME_TIME_BLINK);
10002fc4:	01017704 	movi	r4,1500
10002fc8:	00036940 	call	10003694 <frame_Time>
10002fcc:	00004c06 	br	10003100 <updateKirby+0x171c>
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
10002fd0:	e0bffb17 	ldw	r2,-20(fp)
10002fd4:	10800917 	ldw	r2,36(r2)
10002fd8:	10800058 	cmpnei	r2,r2,1
10002fdc:	10001f1e 	bne	r2,zero,1000305c <updateKirby+0x1678>
10002fe0:	e0bffb17 	ldw	r2,-20(fp)
10002fe4:	10800a17 	ldw	r2,40(r2)
10002fe8:	10001c1e 	bne	r2,zero,1000305c <updateKirby+0x1678>
                if (will_Touch_Ground(kirby, kirby->map)) {
10002fec:	e0bffb17 	ldw	r2,-20(fp)
10002ff0:	10800217 	ldw	r2,8(r2)
10002ff4:	100b883a 	mov	r5,r2
10002ff8:	e13ffb17 	ldw	r4,-20(fp)
10002ffc:	000372c0 	call	1000372c <will_Touch_Ground>
10003000:	10000726 	beq	r2,zero,10003020 <updateKirby+0x163c>
                    kirby->image = 0;
10003004:	e0bffb17 	ldw	r2,-20(fp)
10003008:	10000315 	stw	zero,12(r2)
                    kirby->action = 0;
1000300c:	e0bffb17 	ldw	r2,-20(fp)
10003010:	10000615 	stw	zero,24(r2)
                    kirby->in_air = 0;
10003014:	e0bffb17 	ldw	r2,-20(fp)
10003018:	10000915 	stw	zero,36(r2)
                } else {
                    kirby->frame = 0 + 2 * kirby->in_slope;
                }
                frame_Time(KIRBY_FRAME_TIME_BLINK);
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
1000301c:	00003806 	br	10003100 <updateKirby+0x171c>
                    kirby->image = 0;
                    kirby->action = 0;
                    kirby->in_air = 0;
                } else {
                    kirby->image = 0;
10003020:	e0bffb17 	ldw	r2,-20(fp)
10003024:	10000315 	stw	zero,12(r2)
                    kirby->action = 0;
10003028:	e0bffb17 	ldw	r2,-20(fp)
1000302c:	10000615 	stw	zero,24(r2)
                    kirby->frame = 10;
10003030:	e0bffb17 	ldw	r2,-20(fp)
10003034:	00c00284 	movi	r3,10
10003038:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
1000303c:	e0bffb17 	ldw	r2,-20(fp)
10003040:	10800117 	ldw	r2,4(r2)
10003044:	10c000c4 	addi	r3,r2,3
10003048:	e0bffb17 	ldw	r2,-20(fp)
1000304c:	10c00115 	stw	r3,4(r2)
                    frame_Time(KIRBY_FRAME_TIME_WALK);
10003050:	01017704 	movi	r4,1500
10003054:	00036940 	call	10003694 <frame_Time>
                } else {
                    kirby->frame = 0 + 2 * kirby->in_slope;
                }
                frame_Time(KIRBY_FRAME_TIME_BLINK);
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
10003058:	00002906 	br	10003100 <updateKirby+0x171c>
                    kirby->action = 0;
                    kirby->frame = 10;
                    kirby->y += KIRBY_STEP_Y;
                    frame_Time(KIRBY_FRAME_TIME_WALK);
                }
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 1)) {
1000305c:	e0bffb17 	ldw	r2,-20(fp)
10003060:	10800917 	ldw	r2,36(r2)
10003064:	10800058 	cmpnei	r2,r2,1
10003068:	10002c1e 	bne	r2,zero,1000311c <updateKirby+0x1738>
1000306c:	e0bffb17 	ldw	r2,-20(fp)
10003070:	10800a17 	ldw	r2,40(r2)
10003074:	10800058 	cmpnei	r2,r2,1
10003078:	1000281e 	bne	r2,zero,1000311c <updateKirby+0x1738>
                if (will_Touch_Ground(kirby, kirby->map)) {
1000307c:	e0bffb17 	ldw	r2,-20(fp)
10003080:	10800217 	ldw	r2,8(r2)
10003084:	100b883a 	mov	r5,r2
10003088:	e13ffb17 	ldw	r4,-20(fp)
1000308c:	000372c0 	call	1000372c <will_Touch_Ground>
10003090:	10000a26 	beq	r2,zero,100030bc <updateKirby+0x16d8>
                    kirby->image = 1;
10003094:	e0bffb17 	ldw	r2,-20(fp)
10003098:	00c00044 	movi	r3,1
1000309c:	10c00315 	stw	r3,12(r2)
                    kirby->action = 0;
100030a0:	e0bffb17 	ldw	r2,-20(fp)
100030a4:	10000615 	stw	zero,24(r2)
                    kirby->in_air = 0;
100030a8:	e0bffb17 	ldw	r2,-20(fp)
100030ac:	10000915 	stw	zero,36(r2)
                    kirby->frame = 0;
100030b0:	e0bffb17 	ldw	r2,-20(fp)
100030b4:	10000715 	stw	zero,28(r2)
                    kirby->frame = 13;
                    kirby->y += KIRBY_STEP_Y;
                    frame_Time(KIRBY_FRAME_TIME_WALK);
                }
            }
            break;
100030b8:	00001806 	br	1000311c <updateKirby+0x1738>
                    kirby->image = 1;
                    kirby->action = 0;
                    kirby->in_air = 0;
                    kirby->frame = 0;
                } else {
                    kirby->image = 1;
100030bc:	e0bffb17 	ldw	r2,-20(fp)
100030c0:	00c00044 	movi	r3,1
100030c4:	10c00315 	stw	r3,12(r2)
                    kirby->action = 2;
100030c8:	e0bffb17 	ldw	r2,-20(fp)
100030cc:	00c00084 	movi	r3,2
100030d0:	10c00615 	stw	r3,24(r2)
                    kirby->frame = 13;
100030d4:	e0bffb17 	ldw	r2,-20(fp)
100030d8:	00c00344 	movi	r3,13
100030dc:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
100030e0:	e0bffb17 	ldw	r2,-20(fp)
100030e4:	10800117 	ldw	r2,4(r2)
100030e8:	10c000c4 	addi	r3,r2,3
100030ec:	e0bffb17 	ldw	r2,-20(fp)
100030f0:	10c00115 	stw	r3,4(r2)
                    frame_Time(KIRBY_FRAME_TIME_WALK);
100030f4:	01017704 	movi	r4,1500
100030f8:	00036940 	call	10003694 <frame_Time>
                }
            }
            break;
100030fc:	00000706 	br	1000311c <updateKirby+0x1738>
10003100:	00000606 	br	1000311c <updateKirby+0x1738>
            break;
        }

        case 0x000f: { //"l" Fake A button
                // Jump
            break;
10003104:	0001883a 	nop
10003108:	00000506 	br	10003120 <updateKirby+0x173c>
                    kirby->frame = 13;
                    kirby->y += KIRBY_STEP_Y;
                    frame_Time(KIRBY_FRAME_TIME_WALK);
                }
            }
            break;
1000310c:	0001883a 	nop
10003110:	00000306 	br	10003120 <updateKirby+0x173c>
                    kirby->frame = 13;
                    kirby->y += KIRBY_STEP_Y;
                    frame_Time(KIRBY_FRAME_TIME_WALK);
                }
            }
            break;
10003114:	0001883a 	nop
10003118:	00000106 	br	10003120 <updateKirby+0x173c>
                    kirby->frame = 13;
                    kirby->y += KIRBY_STEP_Y;
                    frame_Time(KIRBY_FRAME_TIME_WALK);
                }
            }
            break;
1000311c:	0001883a 	nop
        }
        }
    }
    
    /* Damage control */
    if (kirby_Is_Damaged(kirby, enemy) && (kirby->damaging == 0)) {
10003120:	e17ffd17 	ldw	r5,-12(fp)
10003124:	e13ffb17 	ldw	r4,-20(fp)
10003128:	0003d800 	call	10003d80 <kirby_Is_Damaged>
1000312c:	10001926 	beq	r2,zero,10003194 <updateKirby+0x17b0>
10003130:	e0bffb17 	ldw	r2,-20(fp)
10003134:	10800b17 	ldw	r2,44(r2)
10003138:	1000161e 	bne	r2,zero,10003194 <updateKirby+0x17b0>
        kirby->health -= 1;
1000313c:	e0bffb17 	ldw	r2,-20(fp)
10003140:	10800517 	ldw	r2,20(r2)
10003144:	10ffffc4 	addi	r3,r2,-1
10003148:	e0bffb17 	ldw	r2,-20(fp)
1000314c:	10c00515 	stw	r3,20(r2)
        kirby->spitting = 0;
10003150:	e0bffb17 	ldw	r2,-20(fp)
10003154:	10000d15 	stw	zero,52(r2)
        kirby->inhaling = 0;
10003158:	e0bffb17 	ldw	r2,-20(fp)
1000315c:	10000c15 	stw	zero,48(r2)
        kirby->damaging = 1;
10003160:	e0bffb17 	ldw	r2,-20(fp)
10003164:	00c00044 	movi	r3,1
10003168:	10c00b15 	stw	r3,44(r2)
        kirby->image = 2;
1000316c:	e0bffb17 	ldw	r2,-20(fp)
10003170:	00c00084 	movi	r3,2
10003174:	10c00315 	stw	r3,12(r2)
        kirby->action = kirby_Damage_Action(enemy);
10003178:	e13ffd17 	ldw	r4,-12(fp)
1000317c:	0003e480 	call	10003e48 <kirby_Damage_Action>
10003180:	1007883a 	mov	r3,r2
10003184:	e0bffb17 	ldw	r2,-20(fp)
10003188:	10c00615 	stw	r3,24(r2)
        kirby->frame = 0;
1000318c:	e0bffb17 	ldw	r2,-20(fp)
10003190:	10000715 	stw	zero,28(r2)
    }

    /* Position adjustment */
    // 1-Make sure Kirby not extending the map edges
    if (kirby->x <= 0) {
10003194:	e0bffb17 	ldw	r2,-20(fp)
10003198:	10800017 	ldw	r2,0(r2)
1000319c:	00800316 	blt	zero,r2,100031ac <updateKirby+0x17c8>
        kirby->x = 0;
100031a0:	e0bffb17 	ldw	r2,-20(fp)
100031a4:	10000015 	stw	zero,0(r2)
100031a8:	00000706 	br	100031c8 <updateKirby+0x17e4>
    } else if (kirby->x >= map_width) {
100031ac:	e0bffb17 	ldw	r2,-20(fp)
100031b0:	10c00017 	ldw	r3,0(r2)
100031b4:	e0bffa17 	ldw	r2,-24(fp)
100031b8:	18800316 	blt	r3,r2,100031c8 <updateKirby+0x17e4>
        kirby->x = map_width;
100031bc:	e0bffb17 	ldw	r2,-20(fp)
100031c0:	e0fffa17 	ldw	r3,-24(fp)
100031c4:	10c00015 	stw	r3,0(r2)
    }
    if (kirby->y <= 0) {
100031c8:	e0bffb17 	ldw	r2,-20(fp)
100031cc:	10800117 	ldw	r2,4(r2)
100031d0:	00800316 	blt	zero,r2,100031e0 <updateKirby+0x17fc>
        kirby->y = 0;
100031d4:	e0bffb17 	ldw	r2,-20(fp)
100031d8:	10000115 	stw	zero,4(r2)
100031dc:	00000706 	br	100031fc <updateKirby+0x1818>
    } else if (kirby->y >= MAP_HEIGHT) {
100031e0:	e0bffb17 	ldw	r2,-20(fp)
100031e4:	10800117 	ldw	r2,4(r2)
100031e8:	10802c10 	cmplti	r2,r2,176
100031ec:	1000031e 	bne	r2,zero,100031fc <updateKirby+0x1818>
        kirby->y = MAP_HEIGHT;
100031f0:	e0bffb17 	ldw	r2,-20(fp)
100031f4:	00c02c04 	movi	r3,176
100031f8:	10c00115 	stw	r3,4(r2)
    }
    
    // 2-Floor detection for kirby on the ground
    if (kirby->in_air == 0)
100031fc:	e0bffb17 	ldw	r2,-20(fp)
10003200:	10800917 	ldw	r2,36(r2)
10003204:	1000051e 	bne	r2,zero,1000321c <updateKirby+0x1838>
        force_It_On_Ground(kirby, kirby->map);
10003208:	e0bffb17 	ldw	r2,-20(fp)
1000320c:	10800217 	ldw	r2,8(r2)
10003210:	100b883a 	mov	r5,r2
10003214:	e13ffb17 	ldw	r4,-20(fp)
10003218:	000327c0 	call	1000327c <force_It_On_Ground>

    // 3-Make sure Kirby do not go inside white area
    // if (kirby->damaging == 0)
    force_It_Inside_Map(kirby, kirby->map);
1000321c:	e0bffb17 	ldw	r2,-20(fp)
10003220:	10800217 	ldw	r2,8(r2)
10003224:	100b883a 	mov	r5,r2
10003228:	e13ffb17 	ldw	r4,-20(fp)
1000322c:	00033240 	call	10003324 <force_It_Inside_Map>

    if (kirby->health == 0)
10003230:	e0bffb17 	ldw	r2,-20(fp)
10003234:	10800517 	ldw	r2,20(r2)
10003238:	1000031e 	bne	r2,zero,10003248 <updateKirby+0x1864>
        game_Over_Anime(kirby);
1000323c:	e13ffb17 	ldw	r4,-20(fp)
10003240:	00041580 	call	10004158 <game_Over_Anime>
    else if (kirby->entered_door == 1)
        win_Anime(kirby);

}
10003244:	00000606 	br	10003260 <updateKirby+0x187c>
    // if (kirby->damaging == 0)
    force_It_Inside_Map(kirby, kirby->map);

    if (kirby->health == 0)
        game_Over_Anime(kirby);
    else if (kirby->entered_door == 1)
10003248:	e0bffb17 	ldw	r2,-20(fp)
1000324c:	10801017 	ldw	r2,64(r2)
10003250:	10800058 	cmpnei	r2,r2,1
10003254:	1000021e 	bne	r2,zero,10003260 <updateKirby+0x187c>
        win_Anime(kirby);
10003258:	e13ffb17 	ldw	r4,-20(fp)
1000325c:	00042e00 	call	100042e0 <win_Anime>

}
10003260:	0001883a 	nop
10003264:	e6ffff04 	addi	sp,fp,-4
10003268:	dfc00217 	ldw	ra,8(sp)
1000326c:	df000117 	ldw	fp,4(sp)
10003270:	dc000017 	ldw	r16,0(sp)
10003274:	dec00304 	addi	sp,sp,12
10003278:	f800283a 	ret

1000327c <force_It_On_Ground>:

void force_It_On_Ground(Kirby * kirby, int map_idx) {
1000327c:	defff904 	addi	sp,sp,-28
10003280:	dfc00615 	stw	ra,24(sp)
10003284:	df000515 	stw	fp,20(sp)
10003288:	df000504 	addi	fp,sp,20
1000328c:	e13ffe15 	stw	r4,-8(fp)
10003290:	e17fff15 	stw	r5,-4(fp)
    int kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
10003294:	e13ffe17 	ldw	r4,-8(fp)
10003298:	00037a40 	call	100037a4 <get_Kirby_Botton_Pos>
1000329c:	1004d43a 	srli	r2,r2,16
100032a0:	e0bffb15 	stw	r2,-20(fp)
    int kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
100032a4:	e13ffe17 	ldw	r4,-8(fp)
100032a8:	00037a40 	call	100037a4 <get_Kirby_Botton_Pos>
100032ac:	10bfffcc 	andi	r2,r2,65535
100032b0:	e0bffc15 	stw	r2,-16(fp)
    // int kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
    // int kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;

    // Cling to the ground
    while (get_Wall_Info(kirby_botton_X, kirby_botton_Y + 1, map_idx) == AREA_CAN_GO) {
100032b4:	00000e06 	br	100032f0 <force_It_On_Ground+0x74>
        int dropping_keycode = 0;
100032b8:	e03ffd15 	stw	zero,-12(fp)
        kirby->y += 1;
100032bc:	e0bffe17 	ldw	r2,-8(fp)
100032c0:	10800117 	ldw	r2,4(r2)
100032c4:	10c00044 	addi	r3,r2,1
100032c8:	e0bffe17 	ldw	r2,-8(fp)
100032cc:	10c00115 	stw	r3,4(r2)
        
        // Update values
        kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
100032d0:	e13ffe17 	ldw	r4,-8(fp)
100032d4:	00037a40 	call	100037a4 <get_Kirby_Botton_Pos>
100032d8:	1004d43a 	srli	r2,r2,16
100032dc:	e0bffb15 	stw	r2,-20(fp)
        kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
100032e0:	e13ffe17 	ldw	r4,-8(fp)
100032e4:	00037a40 	call	100037a4 <get_Kirby_Botton_Pos>
100032e8:	10bfffcc 	andi	r2,r2,65535
100032ec:	e0bffc15 	stw	r2,-16(fp)
    int kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
    // int kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
    // int kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;

    // Cling to the ground
    while (get_Wall_Info(kirby_botton_X, kirby_botton_Y + 1, map_idx) == AREA_CAN_GO) {
100032f0:	e0bffc17 	ldw	r2,-16(fp)
100032f4:	10800044 	addi	r2,r2,1
100032f8:	e1bfff17 	ldw	r6,-4(fp)
100032fc:	100b883a 	mov	r5,r2
10003300:	e13ffb17 	ldw	r4,-20(fp)
10003304:	0003bb40 	call	10003bb4 <get_Wall_Info>
10003308:	103feb26 	beq	r2,zero,100032b8 <__alt_data_end+0xf80032b8>
        
        // Update values
        kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
    }
}
1000330c:	0001883a 	nop
10003310:	e037883a 	mov	sp,fp
10003314:	dfc00117 	ldw	ra,4(sp)
10003318:	df000017 	ldw	fp,0(sp)
1000331c:	dec00204 	addi	sp,sp,8
10003320:	f800283a 	ret

10003324 <force_It_Inside_Map>:

void force_It_Inside_Map(Kirby * kirby, int map_idx) {
10003324:	defff404 	addi	sp,sp,-48
10003328:	dfc00b15 	stw	ra,44(sp)
1000332c:	df000a15 	stw	fp,40(sp)
10003330:	df000a04 	addi	fp,sp,40
10003334:	e13ffe15 	stw	r4,-8(fp)
10003338:	e17fff15 	stw	r5,-4(fp)
    int kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
1000333c:	e13ffe17 	ldw	r4,-8(fp)
10003340:	00037a40 	call	100037a4 <get_Kirby_Botton_Pos>
10003344:	1004d43a 	srli	r2,r2,16
10003348:	e0bff615 	stw	r2,-40(fp)
    int kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
1000334c:	e13ffe17 	ldw	r4,-8(fp)
10003350:	00037a40 	call	100037a4 <get_Kirby_Botton_Pos>
10003354:	10bfffcc 	andi	r2,r2,65535
10003358:	e0bff715 	stw	r2,-36(fp)
    int kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
1000335c:	e13ffe17 	ldw	r4,-8(fp)
10003360:	00038a80 	call	100038a8 <get_Kirby_Ceil_Pos>
10003364:	1004d43a 	srli	r2,r2,16
10003368:	e0bff815 	stw	r2,-32(fp)
    int kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;
1000336c:	e13ffe17 	ldw	r4,-8(fp)
10003370:	00038a80 	call	100038a8 <get_Kirby_Ceil_Pos>
10003374:	10bfffcc 	andi	r2,r2,65535
10003378:	e0bff915 	stw	r2,-28(fp)
    int kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
1000337c:	e13ffe17 	ldw	r4,-8(fp)
10003380:	00039ac0 	call	100039ac <get_Kirby_Left_Pos>
10003384:	1004d43a 	srli	r2,r2,16
10003388:	e0bffa15 	stw	r2,-24(fp)
    int kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
1000338c:	e13ffe17 	ldw	r4,-8(fp)
10003390:	00039ac0 	call	100039ac <get_Kirby_Left_Pos>
10003394:	10bfffcc 	andi	r2,r2,65535
10003398:	e0bffb15 	stw	r2,-20(fp)
    int kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
1000339c:	e13ffe17 	ldw	r4,-8(fp)
100033a0:	0003ab00 	call	10003ab0 <get_Kirby_Right_Pos>
100033a4:	1004d43a 	srli	r2,r2,16
100033a8:	e0bffc15 	stw	r2,-16(fp)
    int kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
100033ac:	e13ffe17 	ldw	r4,-8(fp)
100033b0:	0003ab00 	call	10003ab0 <get_Kirby_Right_Pos>
100033b4:	10bfffcc 	andi	r2,r2,65535
100033b8:	e0bffd15 	stw	r2,-12(fp)

    while (get_Wall_Info(kirby_botton_X, kirby_botton_Y, map_idx) == AREA_CANNOT_GO)
100033bc:	00002506 	br	10003454 <force_It_Inside_Map+0x130>
    {
        kirby->y -= 1;
100033c0:	e0bffe17 	ldw	r2,-8(fp)
100033c4:	10800117 	ldw	r2,4(r2)
100033c8:	10ffffc4 	addi	r3,r2,-1
100033cc:	e0bffe17 	ldw	r2,-8(fp)
100033d0:	10c00115 	stw	r3,4(r2)
        kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
100033d4:	e13ffe17 	ldw	r4,-8(fp)
100033d8:	00037a40 	call	100037a4 <get_Kirby_Botton_Pos>
100033dc:	1004d43a 	srli	r2,r2,16
100033e0:	e0bff615 	stw	r2,-40(fp)
        kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
100033e4:	e13ffe17 	ldw	r4,-8(fp)
100033e8:	00037a40 	call	100037a4 <get_Kirby_Botton_Pos>
100033ec:	10bfffcc 	andi	r2,r2,65535
100033f0:	e0bff715 	stw	r2,-36(fp)
        kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
100033f4:	e13ffe17 	ldw	r4,-8(fp)
100033f8:	00038a80 	call	100038a8 <get_Kirby_Ceil_Pos>
100033fc:	1004d43a 	srli	r2,r2,16
10003400:	e0bff815 	stw	r2,-32(fp)
        kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;
10003404:	e13ffe17 	ldw	r4,-8(fp)
10003408:	00038a80 	call	100038a8 <get_Kirby_Ceil_Pos>
1000340c:	10bfffcc 	andi	r2,r2,65535
10003410:	e0bff915 	stw	r2,-28(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
10003414:	e13ffe17 	ldw	r4,-8(fp)
10003418:	00039ac0 	call	100039ac <get_Kirby_Left_Pos>
1000341c:	1004d43a 	srli	r2,r2,16
10003420:	e0bffa15 	stw	r2,-24(fp)
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
10003424:	e13ffe17 	ldw	r4,-8(fp)
10003428:	00039ac0 	call	100039ac <get_Kirby_Left_Pos>
1000342c:	10bfffcc 	andi	r2,r2,65535
10003430:	e0bffb15 	stw	r2,-20(fp)
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
10003434:	e13ffe17 	ldw	r4,-8(fp)
10003438:	0003ab00 	call	10003ab0 <get_Kirby_Right_Pos>
1000343c:	1004d43a 	srli	r2,r2,16
10003440:	e0bffc15 	stw	r2,-16(fp)
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
10003444:	e13ffe17 	ldw	r4,-8(fp)
10003448:	0003ab00 	call	10003ab0 <get_Kirby_Right_Pos>
1000344c:	10bfffcc 	andi	r2,r2,65535
10003450:	e0bffd15 	stw	r2,-12(fp)
    int kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
    int kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
    int kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
    int kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;

    while (get_Wall_Info(kirby_botton_X, kirby_botton_Y, map_idx) == AREA_CANNOT_GO)
10003454:	e1bfff17 	ldw	r6,-4(fp)
10003458:	e17ff717 	ldw	r5,-36(fp)
1000345c:	e13ff617 	ldw	r4,-40(fp)
10003460:	0003bb40 	call	10003bb4 <get_Wall_Info>
10003464:	10800060 	cmpeqi	r2,r2,1
10003468:	103fd51e 	bne	r2,zero,100033c0 <__alt_data_end+0xf80033c0>
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
    while (get_Wall_Info(kirby_left_X, kirby_left_Y, map_idx) == AREA_CANNOT_GO)
1000346c:	00002506 	br	10003504 <force_It_Inside_Map+0x1e0>
    {
        kirby->x += 1;
10003470:	e0bffe17 	ldw	r2,-8(fp)
10003474:	10800017 	ldw	r2,0(r2)
10003478:	10c00044 	addi	r3,r2,1
1000347c:	e0bffe17 	ldw	r2,-8(fp)
10003480:	10c00015 	stw	r3,0(r2)
        kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
10003484:	e13ffe17 	ldw	r4,-8(fp)
10003488:	00037a40 	call	100037a4 <get_Kirby_Botton_Pos>
1000348c:	1004d43a 	srli	r2,r2,16
10003490:	e0bff615 	stw	r2,-40(fp)
        kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
10003494:	e13ffe17 	ldw	r4,-8(fp)
10003498:	00037a40 	call	100037a4 <get_Kirby_Botton_Pos>
1000349c:	10bfffcc 	andi	r2,r2,65535
100034a0:	e0bff715 	stw	r2,-36(fp)
        kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
100034a4:	e13ffe17 	ldw	r4,-8(fp)
100034a8:	00038a80 	call	100038a8 <get_Kirby_Ceil_Pos>
100034ac:	1004d43a 	srli	r2,r2,16
100034b0:	e0bff815 	stw	r2,-32(fp)
        kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;
100034b4:	e13ffe17 	ldw	r4,-8(fp)
100034b8:	00038a80 	call	100038a8 <get_Kirby_Ceil_Pos>
100034bc:	10bfffcc 	andi	r2,r2,65535
100034c0:	e0bff915 	stw	r2,-28(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
100034c4:	e13ffe17 	ldw	r4,-8(fp)
100034c8:	00039ac0 	call	100039ac <get_Kirby_Left_Pos>
100034cc:	1004d43a 	srli	r2,r2,16
100034d0:	e0bffa15 	stw	r2,-24(fp)
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
100034d4:	e13ffe17 	ldw	r4,-8(fp)
100034d8:	00039ac0 	call	100039ac <get_Kirby_Left_Pos>
100034dc:	10bfffcc 	andi	r2,r2,65535
100034e0:	e0bffb15 	stw	r2,-20(fp)
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
100034e4:	e13ffe17 	ldw	r4,-8(fp)
100034e8:	0003ab00 	call	10003ab0 <get_Kirby_Right_Pos>
100034ec:	1004d43a 	srli	r2,r2,16
100034f0:	e0bffc15 	stw	r2,-16(fp)
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
100034f4:	e13ffe17 	ldw	r4,-8(fp)
100034f8:	0003ab00 	call	10003ab0 <get_Kirby_Right_Pos>
100034fc:	10bfffcc 	andi	r2,r2,65535
10003500:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
    while (get_Wall_Info(kirby_left_X, kirby_left_Y, map_idx) == AREA_CANNOT_GO)
10003504:	e1bfff17 	ldw	r6,-4(fp)
10003508:	e17ffb17 	ldw	r5,-20(fp)
1000350c:	e13ffa17 	ldw	r4,-24(fp)
10003510:	0003bb40 	call	10003bb4 <get_Wall_Info>
10003514:	10800060 	cmpeqi	r2,r2,1
10003518:	103fd51e 	bne	r2,zero,10003470 <__alt_data_end+0xf8003470>
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
    while (get_Wall_Info(kirby_ceil_X, kirby_ceil_Y, map_idx) == AREA_CANNOT_GO)
1000351c:	00002506 	br	100035b4 <force_It_Inside_Map+0x290>
    {
        kirby->y += 1;
10003520:	e0bffe17 	ldw	r2,-8(fp)
10003524:	10800117 	ldw	r2,4(r2)
10003528:	10c00044 	addi	r3,r2,1
1000352c:	e0bffe17 	ldw	r2,-8(fp)
10003530:	10c00115 	stw	r3,4(r2)
        kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
10003534:	e13ffe17 	ldw	r4,-8(fp)
10003538:	00037a40 	call	100037a4 <get_Kirby_Botton_Pos>
1000353c:	1004d43a 	srli	r2,r2,16
10003540:	e0bff615 	stw	r2,-40(fp)
        kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
10003544:	e13ffe17 	ldw	r4,-8(fp)
10003548:	00037a40 	call	100037a4 <get_Kirby_Botton_Pos>
1000354c:	10bfffcc 	andi	r2,r2,65535
10003550:	e0bff715 	stw	r2,-36(fp)
        kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
10003554:	e13ffe17 	ldw	r4,-8(fp)
10003558:	00038a80 	call	100038a8 <get_Kirby_Ceil_Pos>
1000355c:	1004d43a 	srli	r2,r2,16
10003560:	e0bff815 	stw	r2,-32(fp)
        kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;
10003564:	e13ffe17 	ldw	r4,-8(fp)
10003568:	00038a80 	call	100038a8 <get_Kirby_Ceil_Pos>
1000356c:	10bfffcc 	andi	r2,r2,65535
10003570:	e0bff915 	stw	r2,-28(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
10003574:	e13ffe17 	ldw	r4,-8(fp)
10003578:	00039ac0 	call	100039ac <get_Kirby_Left_Pos>
1000357c:	1004d43a 	srli	r2,r2,16
10003580:	e0bffa15 	stw	r2,-24(fp)
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
10003584:	e13ffe17 	ldw	r4,-8(fp)
10003588:	00039ac0 	call	100039ac <get_Kirby_Left_Pos>
1000358c:	10bfffcc 	andi	r2,r2,65535
10003590:	e0bffb15 	stw	r2,-20(fp)
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
10003594:	e13ffe17 	ldw	r4,-8(fp)
10003598:	0003ab00 	call	10003ab0 <get_Kirby_Right_Pos>
1000359c:	1004d43a 	srli	r2,r2,16
100035a0:	e0bffc15 	stw	r2,-16(fp)
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
100035a4:	e13ffe17 	ldw	r4,-8(fp)
100035a8:	0003ab00 	call	10003ab0 <get_Kirby_Right_Pos>
100035ac:	10bfffcc 	andi	r2,r2,65535
100035b0:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
    while (get_Wall_Info(kirby_ceil_X, kirby_ceil_Y, map_idx) == AREA_CANNOT_GO)
100035b4:	e1bfff17 	ldw	r6,-4(fp)
100035b8:	e17ff917 	ldw	r5,-28(fp)
100035bc:	e13ff817 	ldw	r4,-32(fp)
100035c0:	0003bb40 	call	10003bb4 <get_Wall_Info>
100035c4:	10800060 	cmpeqi	r2,r2,1
100035c8:	103fd51e 	bne	r2,zero,10003520 <__alt_data_end+0xf8003520>
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
    while (get_Wall_Info(kirby_right_X, kirby_right_Y, map_idx) == AREA_CANNOT_GO)
100035cc:	00002506 	br	10003664 <force_It_Inside_Map+0x340>
    {
        kirby->x -= 1;
100035d0:	e0bffe17 	ldw	r2,-8(fp)
100035d4:	10800017 	ldw	r2,0(r2)
100035d8:	10ffffc4 	addi	r3,r2,-1
100035dc:	e0bffe17 	ldw	r2,-8(fp)
100035e0:	10c00015 	stw	r3,0(r2)
        kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
100035e4:	e13ffe17 	ldw	r4,-8(fp)
100035e8:	00037a40 	call	100037a4 <get_Kirby_Botton_Pos>
100035ec:	1004d43a 	srli	r2,r2,16
100035f0:	e0bff615 	stw	r2,-40(fp)
        kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
100035f4:	e13ffe17 	ldw	r4,-8(fp)
100035f8:	00037a40 	call	100037a4 <get_Kirby_Botton_Pos>
100035fc:	10bfffcc 	andi	r2,r2,65535
10003600:	e0bff715 	stw	r2,-36(fp)
        kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
10003604:	e13ffe17 	ldw	r4,-8(fp)
10003608:	00038a80 	call	100038a8 <get_Kirby_Ceil_Pos>
1000360c:	1004d43a 	srli	r2,r2,16
10003610:	e0bff815 	stw	r2,-32(fp)
        kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;
10003614:	e13ffe17 	ldw	r4,-8(fp)
10003618:	00038a80 	call	100038a8 <get_Kirby_Ceil_Pos>
1000361c:	10bfffcc 	andi	r2,r2,65535
10003620:	e0bff915 	stw	r2,-28(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
10003624:	e13ffe17 	ldw	r4,-8(fp)
10003628:	00039ac0 	call	100039ac <get_Kirby_Left_Pos>
1000362c:	1004d43a 	srli	r2,r2,16
10003630:	e0bffa15 	stw	r2,-24(fp)
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
10003634:	e13ffe17 	ldw	r4,-8(fp)
10003638:	00039ac0 	call	100039ac <get_Kirby_Left_Pos>
1000363c:	10bfffcc 	andi	r2,r2,65535
10003640:	e0bffb15 	stw	r2,-20(fp)
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
10003644:	e13ffe17 	ldw	r4,-8(fp)
10003648:	0003ab00 	call	10003ab0 <get_Kirby_Right_Pos>
1000364c:	1004d43a 	srli	r2,r2,16
10003650:	e0bffc15 	stw	r2,-16(fp)
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
10003654:	e13ffe17 	ldw	r4,-8(fp)
10003658:	0003ab00 	call	10003ab0 <get_Kirby_Right_Pos>
1000365c:	10bfffcc 	andi	r2,r2,65535
10003660:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
    while (get_Wall_Info(kirby_right_X, kirby_right_Y, map_idx) == AREA_CANNOT_GO)
10003664:	e1bfff17 	ldw	r6,-4(fp)
10003668:	e17ffd17 	ldw	r5,-12(fp)
1000366c:	e13ffc17 	ldw	r4,-16(fp)
10003670:	0003bb40 	call	10003bb4 <get_Wall_Info>
10003674:	10800060 	cmpeqi	r2,r2,1
10003678:	103fd51e 	bne	r2,zero,100035d0 <__alt_data_end+0xf80035d0>
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
}
1000367c:	0001883a 	nop
10003680:	e037883a 	mov	sp,fp
10003684:	dfc00117 	ldw	ra,4(sp)
10003688:	df000017 	ldw	fp,0(sp)
1000368c:	dec00204 	addi	sp,sp,8
10003690:	f800283a 	ret

10003694 <frame_Time>:

void frame_Time(int t) {
10003694:	defffd04 	addi	sp,sp,-12
10003698:	df000215 	stw	fp,8(sp)
1000369c:	df000204 	addi	fp,sp,8
100036a0:	e13fff15 	stw	r4,-4(fp)
    int i;
    for (i = 0; i < t; i++) {
100036a4:	e03ffe15 	stw	zero,-8(fp)
100036a8:	00000306 	br	100036b8 <frame_Time+0x24>
100036ac:	e0bffe17 	ldw	r2,-8(fp)
100036b0:	10800044 	addi	r2,r2,1
100036b4:	e0bffe15 	stw	r2,-8(fp)
100036b8:	e0fffe17 	ldw	r3,-8(fp)
100036bc:	e0bfff17 	ldw	r2,-4(fp)
100036c0:	18bffa16 	blt	r3,r2,100036ac <__alt_data_end+0xf80036ac>
        /* wait unitl the frame is over */
    }
}
100036c4:	0001883a 	nop
100036c8:	e037883a 	mov	sp,fp
100036cc:	df000017 	ldw	fp,0(sp)
100036d0:	dec00104 	addi	sp,sp,4
100036d4:	f800283a 	ret

100036d8 <map_Width>:

int map_Width(int i) {
100036d8:	defffe04 	addi	sp,sp,-8
100036dc:	df000115 	stw	fp,4(sp)
100036e0:	df000104 	addi	fp,sp,4
100036e4:	e13fff15 	stw	r4,-4(fp)
    switch (i) {
100036e8:	e0bfff17 	ldw	r2,-4(fp)
100036ec:	10c00060 	cmpeqi	r3,r2,1
100036f0:	1800051e 	bne	r3,zero,10003708 <map_Width+0x30>
100036f4:	10c000a0 	cmpeqi	r3,r2,2
100036f8:	1800051e 	bne	r3,zero,10003710 <map_Width+0x38>
100036fc:	1000061e 	bne	r2,zero,10003718 <map_Width+0x40>
    case 0:
        return MAP_0_WIDTH;
10003700:	00812fc4 	movi	r2,1215
10003704:	00000506 	br	1000371c <map_Width+0x44>
        break;
    case 1:
        return MAP_1_WIDTH;
10003708:	0080f404 	movi	r2,976
1000370c:	00000306 	br	1000371c <map_Width+0x44>
        break;
     case 2:
         return MAP_2_WIDTH;
10003710:	00813044 	movi	r2,1217
10003714:	00000106 	br	1000371c <map_Width+0x44>
         break;
    default:
        return MAP_0_WIDTH;
10003718:	00812fc4 	movi	r2,1215
        break;
    }
}
1000371c:	e037883a 	mov	sp,fp
10003720:	df000017 	ldw	fp,0(sp)
10003724:	dec00104 	addi	sp,sp,4
10003728:	f800283a 	ret

1000372c <will_Touch_Ground>:

int will_Touch_Ground(Kirby * kirby, int map_idx) {
1000372c:	defffa04 	addi	sp,sp,-24
10003730:	dfc00515 	stw	ra,20(sp)
10003734:	df000415 	stw	fp,16(sp)
10003738:	df000404 	addi	fp,sp,16
1000373c:	e13ffe15 	stw	r4,-8(fp)
10003740:	e17fff15 	stw	r5,-4(fp)
    int kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
10003744:	e13ffe17 	ldw	r4,-8(fp)
10003748:	00037a40 	call	100037a4 <get_Kirby_Botton_Pos>
1000374c:	1004d43a 	srli	r2,r2,16
10003750:	e0bffc15 	stw	r2,-16(fp)
    int kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
10003754:	e13ffe17 	ldw	r4,-8(fp)
10003758:	00037a40 	call	100037a4 <get_Kirby_Botton_Pos>
1000375c:	10bfffcc 	andi	r2,r2,65535
10003760:	e0bffd15 	stw	r2,-12(fp)

    if (get_Wall_Info(kirby_botton_X, kirby_botton_Y + 1, map_idx) == AREA_CANNOT_GO) {
10003764:	e0bffd17 	ldw	r2,-12(fp)
10003768:	10800044 	addi	r2,r2,1
1000376c:	e1bfff17 	ldw	r6,-4(fp)
10003770:	100b883a 	mov	r5,r2
10003774:	e13ffc17 	ldw	r4,-16(fp)
10003778:	0003bb40 	call	10003bb4 <get_Wall_Info>
1000377c:	10800058 	cmpnei	r2,r2,1
10003780:	1000021e 	bne	r2,zero,1000378c <will_Touch_Ground+0x60>
        return 1;
10003784:	00800044 	movi	r2,1
10003788:	00000106 	br	10003790 <will_Touch_Ground+0x64>
    } else {
        return 0;
1000378c:	0005883a 	mov	r2,zero
    }
}
10003790:	e037883a 	mov	sp,fp
10003794:	dfc00117 	ldw	ra,4(sp)
10003798:	df000017 	ldw	fp,0(sp)
1000379c:	dec00204 	addi	sp,sp,8
100037a0:	f800283a 	ret

100037a4 <get_Kirby_Botton_Pos>:

int get_Kirby_Botton_Pos(Kirby * kirby) {
100037a4:	defffc04 	addi	sp,sp,-16
100037a8:	df000315 	stw	fp,12(sp)
100037ac:	df000304 	addi	fp,sp,12
100037b0:	e13fff15 	stw	r4,-4(fp)
    int kirby_botton_X = 0;
100037b4:	e03ffd15 	stw	zero,-12(fp)
    int kirby_botton_Y = 0;
100037b8:	e03ffe15 	stw	zero,-8(fp)

    if (kirby->is_inhaled == 1) {
100037bc:	e0bfff17 	ldw	r2,-4(fp)
100037c0:	10800a17 	ldw	r2,40(r2)
100037c4:	10800058 	cmpnei	r2,r2,1
100037c8:	1000091e 	bne	r2,zero,100037f0 <get_Kirby_Botton_Pos+0x4c>
        kirby_botton_X = kirby->x + 16;
100037cc:	e0bfff17 	ldw	r2,-4(fp)
100037d0:	10800017 	ldw	r2,0(r2)
100037d4:	10800404 	addi	r2,r2,16
100037d8:	e0bffd15 	stw	r2,-12(fp)
        kirby_botton_Y = kirby->y + 25;
100037dc:	e0bfff17 	ldw	r2,-4(fp)
100037e0:	10800117 	ldw	r2,4(r2)
100037e4:	10800644 	addi	r2,r2,25
100037e8:	e0bffe15 	stw	r2,-8(fp)
100037ec:	00002606 	br	10003888 <get_Kirby_Botton_Pos+0xe4>
    } else if ((kirby->inhaling > 1) || (kirby->spitting == 1)) {
100037f0:	e0bfff17 	ldw	r2,-4(fp)
100037f4:	10800c17 	ldw	r2,48(r2)
100037f8:	10800088 	cmpgei	r2,r2,2
100037fc:	1000041e 	bne	r2,zero,10003810 <get_Kirby_Botton_Pos+0x6c>
10003800:	e0bfff17 	ldw	r2,-4(fp)
10003804:	10800d17 	ldw	r2,52(r2)
10003808:	10800058 	cmpnei	r2,r2,1
1000380c:	1000091e 	bne	r2,zero,10003834 <get_Kirby_Botton_Pos+0x90>
        kirby_botton_X = kirby->x + 30;
10003810:	e0bfff17 	ldw	r2,-4(fp)
10003814:	10800017 	ldw	r2,0(r2)
10003818:	10800784 	addi	r2,r2,30
1000381c:	e0bffd15 	stw	r2,-12(fp)
        kirby_botton_Y = kirby->y + 25;
10003820:	e0bfff17 	ldw	r2,-4(fp)
10003824:	10800117 	ldw	r2,4(r2)
10003828:	10800644 	addi	r2,r2,25
1000382c:	e0bffe15 	stw	r2,-8(fp)
10003830:	00001506 	br	10003888 <get_Kirby_Botton_Pos+0xe4>
    } else if (kirby->damaging == 1) {
10003834:	e0bfff17 	ldw	r2,-4(fp)
10003838:	10800b17 	ldw	r2,44(r2)
1000383c:	10800058 	cmpnei	r2,r2,1
10003840:	1000091e 	bne	r2,zero,10003868 <get_Kirby_Botton_Pos+0xc4>
        kirby_botton_X = kirby->x + 17;
10003844:	e0bfff17 	ldw	r2,-4(fp)
10003848:	10800017 	ldw	r2,0(r2)
1000384c:	10800444 	addi	r2,r2,17
10003850:	e0bffd15 	stw	r2,-12(fp)
        kirby_botton_Y = kirby->y + 33;
10003854:	e0bfff17 	ldw	r2,-4(fp)
10003858:	10800117 	ldw	r2,4(r2)
1000385c:	10800844 	addi	r2,r2,33
10003860:	e0bffe15 	stw	r2,-8(fp)
10003864:	00000806 	br	10003888 <get_Kirby_Botton_Pos+0xe4>
    } else {
        kirby_botton_X = kirby->x + 14;
10003868:	e0bfff17 	ldw	r2,-4(fp)
1000386c:	10800017 	ldw	r2,0(r2)
10003870:	10800384 	addi	r2,r2,14
10003874:	e0bffd15 	stw	r2,-12(fp)
        kirby_botton_Y = kirby->y + 20;
10003878:	e0bfff17 	ldw	r2,-4(fp)
1000387c:	10800117 	ldw	r2,4(r2)
10003880:	10800504 	addi	r2,r2,20
10003884:	e0bffe15 	stw	r2,-8(fp)
    }
    return ((kirby_botton_X << 16) | kirby_botton_Y);
10003888:	e0bffd17 	ldw	r2,-12(fp)
1000388c:	1006943a 	slli	r3,r2,16
10003890:	e0bffe17 	ldw	r2,-8(fp)
10003894:	1884b03a 	or	r2,r3,r2
}
10003898:	e037883a 	mov	sp,fp
1000389c:	df000017 	ldw	fp,0(sp)
100038a0:	dec00104 	addi	sp,sp,4
100038a4:	f800283a 	ret

100038a8 <get_Kirby_Ceil_Pos>:

int get_Kirby_Ceil_Pos(Kirby * kirby) {
100038a8:	defffc04 	addi	sp,sp,-16
100038ac:	df000315 	stw	fp,12(sp)
100038b0:	df000304 	addi	fp,sp,12
100038b4:	e13fff15 	stw	r4,-4(fp)
    int kirby_ceil_X = 0;
100038b8:	e03ffd15 	stw	zero,-12(fp)
    int kirby_ceil_Y = 0;
100038bc:	e03ffe15 	stw	zero,-8(fp)

    if (kirby->is_inhaled == 1) {
100038c0:	e0bfff17 	ldw	r2,-4(fp)
100038c4:	10800a17 	ldw	r2,40(r2)
100038c8:	10800058 	cmpnei	r2,r2,1
100038cc:	1000091e 	bne	r2,zero,100038f4 <get_Kirby_Ceil_Pos+0x4c>
        kirby_ceil_X = kirby->x + 16;
100038d0:	e0bfff17 	ldw	r2,-4(fp)
100038d4:	10800017 	ldw	r2,0(r2)
100038d8:	10800404 	addi	r2,r2,16
100038dc:	e0bffd15 	stw	r2,-12(fp)
        kirby_ceil_Y = kirby->y + 5;
100038e0:	e0bfff17 	ldw	r2,-4(fp)
100038e4:	10800117 	ldw	r2,4(r2)
100038e8:	10800144 	addi	r2,r2,5
100038ec:	e0bffe15 	stw	r2,-8(fp)
100038f0:	00002606 	br	1000398c <get_Kirby_Ceil_Pos+0xe4>
    } else if ((kirby->inhaling == 1) || (kirby->spitting == 1)) {
100038f4:	e0bfff17 	ldw	r2,-4(fp)
100038f8:	10800c17 	ldw	r2,48(r2)
100038fc:	10800060 	cmpeqi	r2,r2,1
10003900:	1000041e 	bne	r2,zero,10003914 <get_Kirby_Ceil_Pos+0x6c>
10003904:	e0bfff17 	ldw	r2,-4(fp)
10003908:	10800d17 	ldw	r2,52(r2)
1000390c:	10800058 	cmpnei	r2,r2,1
10003910:	1000091e 	bne	r2,zero,10003938 <get_Kirby_Ceil_Pos+0x90>
        kirby_ceil_X = kirby->x + 30;
10003914:	e0bfff17 	ldw	r2,-4(fp)
10003918:	10800017 	ldw	r2,0(r2)
1000391c:	10800784 	addi	r2,r2,30
10003920:	e0bffd15 	stw	r2,-12(fp)
        kirby_ceil_Y = kirby->y + 5;
10003924:	e0bfff17 	ldw	r2,-4(fp)
10003928:	10800117 	ldw	r2,4(r2)
1000392c:	10800144 	addi	r2,r2,5
10003930:	e0bffe15 	stw	r2,-8(fp)
10003934:	00001506 	br	1000398c <get_Kirby_Ceil_Pos+0xe4>
    } else if (kirby->damaging == 1) {
10003938:	e0bfff17 	ldw	r2,-4(fp)
1000393c:	10800b17 	ldw	r2,44(r2)
10003940:	10800058 	cmpnei	r2,r2,1
10003944:	1000091e 	bne	r2,zero,1000396c <get_Kirby_Ceil_Pos+0xc4>
        kirby_ceil_X = kirby->x + 17;
10003948:	e0bfff17 	ldw	r2,-4(fp)
1000394c:	10800017 	ldw	r2,0(r2)
10003950:	10800444 	addi	r2,r2,17
10003954:	e0bffd15 	stw	r2,-12(fp)
        kirby_ceil_Y = kirby->y + 7;   //// Not an accurate value!!! ////
10003958:	e0bfff17 	ldw	r2,-4(fp)
1000395c:	10800117 	ldw	r2,4(r2)
10003960:	108001c4 	addi	r2,r2,7
10003964:	e0bffe15 	stw	r2,-8(fp)
10003968:	00000806 	br	1000398c <get_Kirby_Ceil_Pos+0xe4>
    } else {
        kirby_ceil_X = kirby->x + 14;
1000396c:	e0bfff17 	ldw	r2,-4(fp)
10003970:	10800017 	ldw	r2,0(r2)
10003974:	10800384 	addi	r2,r2,14
10003978:	e0bffd15 	stw	r2,-12(fp)
        kirby_ceil_Y = kirby->y + 4;
1000397c:	e0bfff17 	ldw	r2,-4(fp)
10003980:	10800117 	ldw	r2,4(r2)
10003984:	10800104 	addi	r2,r2,4
10003988:	e0bffe15 	stw	r2,-8(fp)
    }
    return ((kirby_ceil_X << 16) | kirby_ceil_Y);
1000398c:	e0bffd17 	ldw	r2,-12(fp)
10003990:	1006943a 	slli	r3,r2,16
10003994:	e0bffe17 	ldw	r2,-8(fp)
10003998:	1884b03a 	or	r2,r3,r2
}
1000399c:	e037883a 	mov	sp,fp
100039a0:	df000017 	ldw	fp,0(sp)
100039a4:	dec00104 	addi	sp,sp,4
100039a8:	f800283a 	ret

100039ac <get_Kirby_Left_Pos>:

int get_Kirby_Left_Pos(Kirby * kirby) {
100039ac:	defffc04 	addi	sp,sp,-16
100039b0:	df000315 	stw	fp,12(sp)
100039b4:	df000304 	addi	fp,sp,12
100039b8:	e13fff15 	stw	r4,-4(fp)
    int kirby_left_X = 0;
100039bc:	e03ffd15 	stw	zero,-12(fp)
    int kirby_left_Y = 0;
100039c0:	e03ffe15 	stw	zero,-8(fp)

    if (kirby->is_inhaled == 1) {
100039c4:	e0bfff17 	ldw	r2,-4(fp)
100039c8:	10800a17 	ldw	r2,40(r2)
100039cc:	10800058 	cmpnei	r2,r2,1
100039d0:	1000091e 	bne	r2,zero,100039f8 <get_Kirby_Left_Pos+0x4c>
        kirby_left_X = kirby->x + 5;
100039d4:	e0bfff17 	ldw	r2,-4(fp)
100039d8:	10800017 	ldw	r2,0(r2)
100039dc:	10800144 	addi	r2,r2,5
100039e0:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_Y = kirby->y + 15;
100039e4:	e0bfff17 	ldw	r2,-4(fp)
100039e8:	10800117 	ldw	r2,4(r2)
100039ec:	108003c4 	addi	r2,r2,15
100039f0:	e0bffe15 	stw	r2,-8(fp)
100039f4:	00002606 	br	10003a90 <get_Kirby_Left_Pos+0xe4>
    } else if ((kirby->inhaling == 1) || (kirby->spitting == 1)) {
100039f8:	e0bfff17 	ldw	r2,-4(fp)
100039fc:	10800c17 	ldw	r2,48(r2)
10003a00:	10800060 	cmpeqi	r2,r2,1
10003a04:	1000041e 	bne	r2,zero,10003a18 <get_Kirby_Left_Pos+0x6c>
10003a08:	e0bfff17 	ldw	r2,-4(fp)
10003a0c:	10800d17 	ldw	r2,52(r2)
10003a10:	10800058 	cmpnei	r2,r2,1
10003a14:	1000091e 	bne	r2,zero,10003a3c <get_Kirby_Left_Pos+0x90>
        kirby_left_X = kirby->x + 21;
10003a18:	e0bfff17 	ldw	r2,-4(fp)
10003a1c:	10800017 	ldw	r2,0(r2)
10003a20:	10800544 	addi	r2,r2,21
10003a24:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_Y = kirby->y + 15;
10003a28:	e0bfff17 	ldw	r2,-4(fp)
10003a2c:	10800117 	ldw	r2,4(r2)
10003a30:	108003c4 	addi	r2,r2,15
10003a34:	e0bffe15 	stw	r2,-8(fp)
10003a38:	00001506 	br	10003a90 <get_Kirby_Left_Pos+0xe4>
    } else if (kirby->damaging == 1) {
10003a3c:	e0bfff17 	ldw	r2,-4(fp)
10003a40:	10800b17 	ldw	r2,44(r2)
10003a44:	10800058 	cmpnei	r2,r2,1
10003a48:	1000091e 	bne	r2,zero,10003a70 <get_Kirby_Left_Pos+0xc4>
        kirby_left_X = kirby->x + 6;
10003a4c:	e0bfff17 	ldw	r2,-4(fp)
10003a50:	10800017 	ldw	r2,0(r2)
10003a54:	10800184 	addi	r2,r2,6
10003a58:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_Y = kirby->y + 18;   //// Not an accurate value!!! ////
10003a5c:	e0bfff17 	ldw	r2,-4(fp)
10003a60:	10800117 	ldw	r2,4(r2)
10003a64:	10800484 	addi	r2,r2,18
10003a68:	e0bffe15 	stw	r2,-8(fp)
10003a6c:	00000806 	br	10003a90 <get_Kirby_Left_Pos+0xe4>
    } else {
        kirby_left_X = kirby->x + 8;    //// Not an accurate value!!! //// 8
10003a70:	e0bfff17 	ldw	r2,-4(fp)
10003a74:	10800017 	ldw	r2,0(r2)
10003a78:	10800204 	addi	r2,r2,8
10003a7c:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_Y = kirby->y + 14;   //// Not an accurate value!!! ////
10003a80:	e0bfff17 	ldw	r2,-4(fp)
10003a84:	10800117 	ldw	r2,4(r2)
10003a88:	10800384 	addi	r2,r2,14
10003a8c:	e0bffe15 	stw	r2,-8(fp)
    }
    return ((kirby_left_X << 16) | kirby_left_Y);
10003a90:	e0bffd17 	ldw	r2,-12(fp)
10003a94:	1006943a 	slli	r3,r2,16
10003a98:	e0bffe17 	ldw	r2,-8(fp)
10003a9c:	1884b03a 	or	r2,r3,r2
}
10003aa0:	e037883a 	mov	sp,fp
10003aa4:	df000017 	ldw	fp,0(sp)
10003aa8:	dec00104 	addi	sp,sp,4
10003aac:	f800283a 	ret

10003ab0 <get_Kirby_Right_Pos>:

int get_Kirby_Right_Pos(Kirby * kirby) {
10003ab0:	defffc04 	addi	sp,sp,-16
10003ab4:	df000315 	stw	fp,12(sp)
10003ab8:	df000304 	addi	fp,sp,12
10003abc:	e13fff15 	stw	r4,-4(fp)
    int kirby_right_X = 0;
10003ac0:	e03ffd15 	stw	zero,-12(fp)
    int kirby_right_Y = 0;
10003ac4:	e03ffe15 	stw	zero,-8(fp)

    if (kirby->is_inhaled == 1) {
10003ac8:	e0bfff17 	ldw	r2,-4(fp)
10003acc:	10800a17 	ldw	r2,40(r2)
10003ad0:	10800058 	cmpnei	r2,r2,1
10003ad4:	1000091e 	bne	r2,zero,10003afc <get_Kirby_Right_Pos+0x4c>
        kirby_right_X = kirby->x + 26;
10003ad8:	e0bfff17 	ldw	r2,-4(fp)
10003adc:	10800017 	ldw	r2,0(r2)
10003ae0:	10800684 	addi	r2,r2,26
10003ae4:	e0bffd15 	stw	r2,-12(fp)
        kirby_right_Y = kirby->y + 15;
10003ae8:	e0bfff17 	ldw	r2,-4(fp)
10003aec:	10800117 	ldw	r2,4(r2)
10003af0:	108003c4 	addi	r2,r2,15
10003af4:	e0bffe15 	stw	r2,-8(fp)
10003af8:	00002606 	br	10003b94 <get_Kirby_Right_Pos+0xe4>
    } else if ((kirby->inhaling == 1) || (kirby->spitting == 1)) {
10003afc:	e0bfff17 	ldw	r2,-4(fp)
10003b00:	10800c17 	ldw	r2,48(r2)
10003b04:	10800060 	cmpeqi	r2,r2,1
10003b08:	1000041e 	bne	r2,zero,10003b1c <get_Kirby_Right_Pos+0x6c>
10003b0c:	e0bfff17 	ldw	r2,-4(fp)
10003b10:	10800d17 	ldw	r2,52(r2)
10003b14:	10800058 	cmpnei	r2,r2,1
10003b18:	1000091e 	bne	r2,zero,10003b40 <get_Kirby_Right_Pos+0x90>
        kirby_right_X = kirby->x + 41;
10003b1c:	e0bfff17 	ldw	r2,-4(fp)
10003b20:	10800017 	ldw	r2,0(r2)
10003b24:	10800a44 	addi	r2,r2,41
10003b28:	e0bffd15 	stw	r2,-12(fp)
        kirby_right_Y = kirby->y + 15;
10003b2c:	e0bfff17 	ldw	r2,-4(fp)
10003b30:	10800117 	ldw	r2,4(r2)
10003b34:	108003c4 	addi	r2,r2,15
10003b38:	e0bffe15 	stw	r2,-8(fp)
10003b3c:	00001506 	br	10003b94 <get_Kirby_Right_Pos+0xe4>
    } else if (kirby->damaging == 1) {
10003b40:	e0bfff17 	ldw	r2,-4(fp)
10003b44:	10800b17 	ldw	r2,44(r2)
10003b48:	10800058 	cmpnei	r2,r2,1
10003b4c:	1000091e 	bne	r2,zero,10003b74 <get_Kirby_Right_Pos+0xc4>
        kirby_right_X = kirby->x + 29;   //// Not an accurate value!!! ////
10003b50:	e0bfff17 	ldw	r2,-4(fp)
10003b54:	10800017 	ldw	r2,0(r2)
10003b58:	10800744 	addi	r2,r2,29
10003b5c:	e0bffd15 	stw	r2,-12(fp)
        kirby_right_Y = kirby->y + 18;   //// Not an accurate value!!! ////
10003b60:	e0bfff17 	ldw	r2,-4(fp)
10003b64:	10800117 	ldw	r2,4(r2)
10003b68:	10800484 	addi	r2,r2,18
10003b6c:	e0bffe15 	stw	r2,-8(fp)
10003b70:	00000806 	br	10003b94 <get_Kirby_Right_Pos+0xe4>
    } else {
        kirby_right_X = kirby->x + 24;    //// Not an accurate value!!! ////
10003b74:	e0bfff17 	ldw	r2,-4(fp)
10003b78:	10800017 	ldw	r2,0(r2)
10003b7c:	10800604 	addi	r2,r2,24
10003b80:	e0bffd15 	stw	r2,-12(fp)
        kirby_right_Y = kirby->y + 14;   //// Not an accurate value!!! ////
10003b84:	e0bfff17 	ldw	r2,-4(fp)
10003b88:	10800117 	ldw	r2,4(r2)
10003b8c:	10800384 	addi	r2,r2,14
10003b90:	e0bffe15 	stw	r2,-8(fp)
    }
    return ((kirby_right_X << 16) | kirby_right_Y);
10003b94:	e0bffd17 	ldw	r2,-12(fp)
10003b98:	1006943a 	slli	r3,r2,16
10003b9c:	e0bffe17 	ldw	r2,-8(fp)
10003ba0:	1884b03a 	or	r2,r3,r2
}
10003ba4:	e037883a 	mov	sp,fp
10003ba8:	df000017 	ldw	fp,0(sp)
10003bac:	dec00104 	addi	sp,sp,4
10003bb0:	f800283a 	ret

10003bb4 <get_Wall_Info>:

int get_Wall_Info(int x, int y, int map_idx) {
10003bb4:	defff904 	addi	sp,sp,-28
10003bb8:	dfc00615 	stw	ra,24(sp)
10003bbc:	df000515 	stw	fp,20(sp)
10003bc0:	df000504 	addi	fp,sp,20
10003bc4:	e13ffd15 	stw	r4,-12(fp)
10003bc8:	e17ffe15 	stw	r5,-8(fp)
10003bcc:	e1bfff15 	stw	r6,-4(fp)
    int idx, res = 0;
10003bd0:	e03ffb15 	stw	zero,-20(fp)
    idx = (map_Width(map_idx) * y + x) / 32;
10003bd4:	e13fff17 	ldw	r4,-4(fp)
10003bd8:	00036d80 	call	100036d8 <map_Width>
10003bdc:	e17ffe17 	ldw	r5,-8(fp)
10003be0:	1009883a 	mov	r4,r2
10003be4:	0006ad80 	call	10006ad8 <__mulsi3>
10003be8:	1007883a 	mov	r3,r2
10003bec:	e0bffd17 	ldw	r2,-12(fp)
10003bf0:	1885883a 	add	r2,r3,r2
10003bf4:	1000010e 	bge	r2,zero,10003bfc <get_Wall_Info+0x48>
10003bf8:	108007c4 	addi	r2,r2,31
10003bfc:	1005d17a 	srai	r2,r2,5
10003c00:	e0bffc15 	stw	r2,-16(fp)
    res = (map_Width(map_idx) * y + x) % 32;
10003c04:	e13fff17 	ldw	r4,-4(fp)
10003c08:	00036d80 	call	100036d8 <map_Width>
10003c0c:	e17ffe17 	ldw	r5,-8(fp)
10003c10:	1009883a 	mov	r4,r2
10003c14:	0006ad80 	call	10006ad8 <__mulsi3>
10003c18:	1007883a 	mov	r3,r2
10003c1c:	e0bffd17 	ldw	r2,-12(fp)
10003c20:	1887883a 	add	r3,r3,r2
10003c24:	00a00034 	movhi	r2,32768
10003c28:	108007c4 	addi	r2,r2,31
10003c2c:	1884703a 	and	r2,r3,r2
10003c30:	1000040e 	bge	r2,zero,10003c44 <get_Wall_Info+0x90>
10003c34:	10bfffc4 	addi	r2,r2,-1
10003c38:	00fff804 	movi	r3,-32
10003c3c:	10c4b03a 	or	r2,r2,r3
10003c40:	10800044 	addi	r2,r2,1
10003c44:	e0bffb15 	stw	r2,-20(fp)
    if (map_idx == 0) {
10003c48:	e0bfff17 	ldw	r2,-4(fp)
10003c4c:	10000d1e 	bne	r2,zero,10003c84 <get_Wall_Info+0xd0>
        return ((Wall1[idx] >> (31 - res)) & 0x00000001);
10003c50:	008400b4 	movhi	r2,4098
10003c54:	10b52c04 	addi	r2,r2,-11088
10003c58:	e0fffc17 	ldw	r3,-16(fp)
10003c5c:	18c7883a 	add	r3,r3,r3
10003c60:	18c7883a 	add	r3,r3,r3
10003c64:	10c5883a 	add	r2,r2,r3
10003c68:	10c00017 	ldw	r3,0(r2)
10003c6c:	010007c4 	movi	r4,31
10003c70:	e0bffb17 	ldw	r2,-20(fp)
10003c74:	2085c83a 	sub	r2,r4,r2
10003c78:	1885d83a 	sra	r2,r3,r2
10003c7c:	1080004c 	andi	r2,r2,1
10003c80:	00000c06 	br	10003cb4 <get_Wall_Info+0x100>
//    } else if (map_idx == 1) {
//        return ((Wall2[idx] >> (31 - res)) & 0x00000001);
    } else {
        return ((Wall1[idx] >> (31 - res)) & 0x00000001);
10003c84:	008400b4 	movhi	r2,4098
10003c88:	10b52c04 	addi	r2,r2,-11088
10003c8c:	e0fffc17 	ldw	r3,-16(fp)
10003c90:	18c7883a 	add	r3,r3,r3
10003c94:	18c7883a 	add	r3,r3,r3
10003c98:	10c5883a 	add	r2,r2,r3
10003c9c:	10c00017 	ldw	r3,0(r2)
10003ca0:	010007c4 	movi	r4,31
10003ca4:	e0bffb17 	ldw	r2,-20(fp)
10003ca8:	2085c83a 	sub	r2,r4,r2
10003cac:	1885d83a 	sra	r2,r3,r2
10003cb0:	1080004c 	andi	r2,r2,1
        // printf("Error: Map index out of tolerrance!");
    }
    return 1;
}
10003cb4:	e037883a 	mov	sp,fp
10003cb8:	dfc00117 	ldw	ra,4(sp)
10003cbc:	df000017 	ldw	fp,0(sp)
10003cc0:	dec00204 	addi	sp,sp,8
10003cc4:	f800283a 	ret

10003cc8 <kirby_Return_Normal>:

void kirby_Return_Normal(Kirby * kirby) {
10003cc8:	defffd04 	addi	sp,sp,-12
10003ccc:	dfc00215 	stw	ra,8(sp)
10003cd0:	df000115 	stw	fp,4(sp)
10003cd4:	df000104 	addi	fp,sp,4
10003cd8:	e13fff15 	stw	r4,-4(fp)
    kirby->is_inhaled = 0;
10003cdc:	e0bfff17 	ldw	r2,-4(fp)
10003ce0:	10000a15 	stw	zero,40(r2)
    kirby->in_air = 0;
10003ce4:	e0bfff17 	ldw	r2,-4(fp)
10003ce8:	10000915 	stw	zero,36(r2)
    kirby->image = 0;
10003cec:	e0bfff17 	ldw	r2,-4(fp)
10003cf0:	10000315 	stw	zero,12(r2)
    kirby->action = 0;
10003cf4:	e0bfff17 	ldw	r2,-4(fp)
10003cf8:	10000615 	stw	zero,24(r2)
    kirby->frame = 0;
10003cfc:	e0bfff17 	ldw	r2,-4(fp)
10003d00:	10000715 	stw	zero,28(r2)
    upload_Kirby_Info(kirby);
10003d04:	e13fff17 	ldw	r4,-4(fp)
10003d08:	000179c0 	call	1000179c <upload_Kirby_Info>
}
10003d0c:	0001883a 	nop
10003d10:	e037883a 	mov	sp,fp
10003d14:	dfc00117 	ldw	ra,4(sp)
10003d18:	df000017 	ldw	fp,0(sp)
10003d1c:	dec00204 	addi	sp,sp,8
10003d20:	f800283a 	ret

10003d24 <kirby_Screen_Center_X>:

int kirby_Screen_Center_X(int x) {
10003d24:	defffe04 	addi	sp,sp,-8
10003d28:	df000115 	stw	fp,4(sp)
10003d2c:	df000104 	addi	fp,sp,4
10003d30:	e13fff15 	stw	r4,-4(fp)
    if (x <= (SCREEN_WIDTH/2)) {
10003d34:	e0bfff17 	ldw	r2,-4(fp)
10003d38:	10801d88 	cmpgei	r2,r2,118
10003d3c:	1000021e 	bne	r2,zero,10003d48 <kirby_Screen_Center_X+0x24>
        return x;
10003d40:	e0bfff17 	ldw	r2,-4(fp)
10003d44:	00000a06 	br	10003d70 <kirby_Screen_Center_X+0x4c>
    } else if ((x > (SCREEN_WIDTH/2)) && (x < (MAP_0_WIDTH - SCREEN_WIDTH/2))) {
10003d48:	e0bfff17 	ldw	r2,-4(fp)
10003d4c:	10801d90 	cmplti	r2,r2,118
10003d50:	1000051e 	bne	r2,zero,10003d68 <kirby_Screen_Center_X+0x44>
10003d54:	e0bfff17 	ldw	r2,-4(fp)
10003d58:	10811288 	cmpgei	r2,r2,1098
10003d5c:	1000021e 	bne	r2,zero,10003d68 <kirby_Screen_Center_X+0x44>
        return (SCREEN_WIDTH/2);
10003d60:	00801d44 	movi	r2,117
10003d64:	00000206 	br	10003d70 <kirby_Screen_Center_X+0x4c>
    } else {
        return (x - MAP_0_WIDTH + SCREEN_WIDTH);
10003d68:	e0bfff17 	ldw	r2,-4(fp)
10003d6c:	10bf0ac4 	addi	r2,r2,-981
    }
}
10003d70:	e037883a 	mov	sp,fp
10003d74:	df000017 	ldw	fp,0(sp)
10003d78:	dec00104 	addi	sp,sp,4
10003d7c:	f800283a 	ret

10003d80 <kirby_Is_Damaged>:

int kirby_Is_Damaged (Kirby * kirby, Enemy * enemy) {
10003d80:	defff604 	addi	sp,sp,-40
10003d84:	dfc00915 	stw	ra,36(sp)
10003d88:	df000815 	stw	fp,32(sp)
10003d8c:	dc000715 	stw	r16,28(sp)
10003d90:	df000804 	addi	fp,sp,32
10003d94:	e13ffd15 	stw	r4,-12(fp)
10003d98:	e17ffe15 	stw	r5,-8(fp)
    int kirby_Center_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
10003d9c:	e13ffd17 	ldw	r4,-12(fp)
10003da0:	00037a40 	call	100037a4 <get_Kirby_Botton_Pos>
10003da4:	1004d43a 	srli	r2,r2,16
10003da8:	e0bff915 	stw	r2,-28(fp)
    int kirby_Center_Y = (get_Kirby_Left_Pos(kirby) & 0x0000ffff);
10003dac:	e13ffd17 	ldw	r4,-12(fp)
10003db0:	00039ac0 	call	100039ac <get_Kirby_Left_Pos>
10003db4:	10bfffcc 	andi	r2,r2,65535
10003db8:	e0bffa15 	stw	r2,-24(fp)
    int enemy_Center_X = (get_Enemy_Botton_Pos(enemy) >> 16) & 0x0000ffff;
10003dbc:	e13ffe17 	ldw	r4,-8(fp)
10003dc0:	0000d440 	call	10000d44 <get_Enemy_Botton_Pos>
10003dc4:	1004d43a 	srli	r2,r2,16
10003dc8:	e0bffb15 	stw	r2,-20(fp)
    int enemy_Center_Y = (get_Enemy_Left_Pos(enemy) & 0x0000ffff);
10003dcc:	e13ffe17 	ldw	r4,-8(fp)
10003dd0:	0000f5c0 	call	10000f5c <get_Enemy_Left_Pos>
10003dd4:	10bfffcc 	andi	r2,r2,65535
10003dd8:	e0bffc15 	stw	r2,-16(fp)
    int damage_dis_sqr = 0;
10003ddc:	e03ff815 	stw	zero,-32(fp)
    if (enemy->action == 2)
10003de0:	e0bffe17 	ldw	r2,-8(fp)
10003de4:	10800417 	ldw	r2,16(r2)
10003de8:	10800098 	cmpnei	r2,r2,2
10003dec:	1000031e 	bne	r2,zero,10003dfc <kirby_Is_Damaged+0x7c>
        damage_dis_sqr = KIRBY_DAMEGE_DIS_SQRTL;
10003df0:	00800804 	movi	r2,32
10003df4:	e0bff815 	stw	r2,-32(fp)
10003df8:	00000206 	br	10003e04 <kirby_Is_Damaged+0x84>
    else
        damage_dis_sqr = KIRBY_DAMAGE_DIS_SQRT;
10003dfc:	00800504 	movi	r2,20
10003e00:	e0bff815 	stw	r2,-32(fp)

    if (sqr_Dis_Kirby_Enemy(kirby, enemy) <= (damage_dis_sqr * damage_dis_sqr))
10003e04:	e17ffe17 	ldw	r5,-8(fp)
10003e08:	e13ffd17 	ldw	r4,-12(fp)
10003e0c:	0003ff40 	call	10003ff4 <sqr_Dis_Kirby_Enemy>
10003e10:	1021883a 	mov	r16,r2
10003e14:	e17ff817 	ldw	r5,-32(fp)
10003e18:	e13ff817 	ldw	r4,-32(fp)
10003e1c:	0006ad80 	call	10006ad8 <__mulsi3>
10003e20:	14000216 	blt	r2,r16,10003e2c <kirby_Is_Damaged+0xac>
        return 1;
10003e24:	00800044 	movi	r2,1
10003e28:	00000106 	br	10003e30 <kirby_Is_Damaged+0xb0>
    return 0;
10003e2c:	0005883a 	mov	r2,zero
}
10003e30:	e6ffff04 	addi	sp,fp,-4
10003e34:	dfc00217 	ldw	ra,8(sp)
10003e38:	df000117 	ldw	fp,4(sp)
10003e3c:	dc000017 	ldw	r16,0(sp)
10003e40:	dec00304 	addi	sp,sp,12
10003e44:	f800283a 	ret

10003e48 <kirby_Damage_Action>:

int kirby_Damage_Action(Enemy * enemy) {
10003e48:	defffd04 	addi	sp,sp,-12
10003e4c:	dfc00215 	stw	ra,8(sp)
10003e50:	df000115 	stw	fp,4(sp)
10003e54:	df000104 	addi	fp,sp,4
10003e58:	e13fff15 	stw	r4,-4(fp)
    if (enemy->tpe == 0)
10003e5c:	e0bfff17 	ldw	r2,-4(fp)
10003e60:	10800617 	ldw	r2,24(r2)
10003e64:	1000021e 	bne	r2,zero,10003e70 <kirby_Damage_Action+0x28>
        return 1;
10003e68:	00800044 	movi	r2,1
10003e6c:	00001306 	br	10003ebc <kirby_Damage_Action+0x74>
    if (enemy->tpe == 1)
10003e70:	e0bfff17 	ldw	r2,-4(fp)
10003e74:	10800617 	ldw	r2,24(r2)
10003e78:	10800058 	cmpnei	r2,r2,1
10003e7c:	1000021e 	bne	r2,zero,10003e88 <kirby_Damage_Action+0x40>
        return 2;
10003e80:	00800084 	movi	r2,2
10003e84:	00000d06 	br	10003ebc <kirby_Damage_Action+0x74>
    if ((enemy->tpe == 2) || (enemy->tpe == 3))
10003e88:	e0bfff17 	ldw	r2,-4(fp)
10003e8c:	10800617 	ldw	r2,24(r2)
10003e90:	108000a0 	cmpeqi	r2,r2,2
10003e94:	1000041e 	bne	r2,zero,10003ea8 <kirby_Damage_Action+0x60>
10003e98:	e0bfff17 	ldw	r2,-4(fp)
10003e9c:	10800617 	ldw	r2,24(r2)
10003ea0:	108000d8 	cmpnei	r2,r2,3
10003ea4:	1000021e 	bne	r2,zero,10003eb0 <kirby_Damage_Action+0x68>
        return 0;
10003ea8:	0005883a 	mov	r2,zero
10003eac:	00000306 	br	10003ebc <kirby_Damage_Action+0x74>
    printf("\nERROR: Something wrong with kirby's damage action decision!\n");
10003eb0:	01040074 	movhi	r4,4097
10003eb4:	21182104 	addi	r4,r4,24708
10003eb8:	0006c2c0 	call	10006c2c <puts>
}
10003ebc:	e037883a 	mov	sp,fp
10003ec0:	dfc00117 	ldw	ra,4(sp)
10003ec4:	df000017 	ldw	fp,0(sp)
10003ec8:	dec00204 	addi	sp,sp,8
10003ecc:	f800283a 	ret

10003ed0 <damage_Frame_Number>:

int damage_Frame_Number(Enemy * enemy) {
10003ed0:	defffe04 	addi	sp,sp,-8
10003ed4:	df000115 	stw	fp,4(sp)
10003ed8:	df000104 	addi	fp,sp,4
10003edc:	e13fff15 	stw	r4,-4(fp)
    if (enemy->tpe == 0)
10003ee0:	e0bfff17 	ldw	r2,-4(fp)
10003ee4:	10800617 	ldw	r2,24(r2)
10003ee8:	1000021e 	bne	r2,zero,10003ef4 <damage_Frame_Number+0x24>
        return 13;
10003eec:	00800344 	movi	r2,13
10003ef0:	00000106 	br	10003ef8 <damage_Frame_Number+0x28>
    else
        return 9;
10003ef4:	00800244 	movi	r2,9
}
10003ef8:	e037883a 	mov	sp,fp
10003efc:	df000017 	ldw	fp,0(sp)
10003f00:	dec00104 	addi	sp,sp,4
10003f04:	f800283a 	ret

10003f08 <enemy_Should_Be_Inhaled>:

int enemy_Should_Be_Inhaled(Kirby * kirby, Enemy * enemy) {
10003f08:	defff704 	addi	sp,sp,-36
10003f0c:	dfc00815 	stw	ra,32(sp)
10003f10:	df000715 	stw	fp,28(sp)
10003f14:	dc000615 	stw	r16,24(sp)
10003f18:	df000704 	addi	fp,sp,28
10003f1c:	e13ffd15 	stw	r4,-12(fp)
10003f20:	e17ffe15 	stw	r5,-8(fp)
    int kirby_Center_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
10003f24:	e13ffd17 	ldw	r4,-12(fp)
10003f28:	00037a40 	call	100037a4 <get_Kirby_Botton_Pos>
10003f2c:	1004d43a 	srli	r2,r2,16
10003f30:	e0bff915 	stw	r2,-28(fp)
    int kirby_Center_Y = (get_Kirby_Left_Pos(kirby) & 0x0000ffff);
10003f34:	e13ffd17 	ldw	r4,-12(fp)
10003f38:	00039ac0 	call	100039ac <get_Kirby_Left_Pos>
10003f3c:	10bfffcc 	andi	r2,r2,65535
10003f40:	e0bffa15 	stw	r2,-24(fp)
    int enemy_Center_X = (get_Enemy_Botton_Pos(enemy) >> 16) & 0x0000ffff;
10003f44:	e13ffe17 	ldw	r4,-8(fp)
10003f48:	0000d440 	call	10000d44 <get_Enemy_Botton_Pos>
10003f4c:	1004d43a 	srli	r2,r2,16
10003f50:	e0bffb15 	stw	r2,-20(fp)
    int enemy_Center_Y = (get_Enemy_Left_Pos(enemy) & 0x0000ffff);
10003f54:	e13ffe17 	ldw	r4,-8(fp)
10003f58:	0000f5c0 	call	10000f5c <get_Enemy_Left_Pos>
10003f5c:	10bfffcc 	andi	r2,r2,65535
10003f60:	e0bffc15 	stw	r2,-16(fp)

    printf("\n############## Distance is: %d #############\n", ((kirby_Center_X - enemy_Center_X) * (kirby_Center_X - enemy_Center_X) + (kirby_Center_Y - enemy_Center_Y) * (kirby_Center_Y - enemy_Center_Y)));
10003f64:	e0fff917 	ldw	r3,-28(fp)
10003f68:	e0bffb17 	ldw	r2,-20(fp)
10003f6c:	1889c83a 	sub	r4,r3,r2
10003f70:	e0fff917 	ldw	r3,-28(fp)
10003f74:	e0bffb17 	ldw	r2,-20(fp)
10003f78:	1885c83a 	sub	r2,r3,r2
10003f7c:	100b883a 	mov	r5,r2
10003f80:	0006ad80 	call	10006ad8 <__mulsi3>
10003f84:	1021883a 	mov	r16,r2
10003f88:	e0fffa17 	ldw	r3,-24(fp)
10003f8c:	e0bffc17 	ldw	r2,-16(fp)
10003f90:	1889c83a 	sub	r4,r3,r2
10003f94:	e0fffa17 	ldw	r3,-24(fp)
10003f98:	e0bffc17 	ldw	r2,-16(fp)
10003f9c:	1885c83a 	sub	r2,r3,r2
10003fa0:	100b883a 	mov	r5,r2
10003fa4:	0006ad80 	call	10006ad8 <__mulsi3>
10003fa8:	8085883a 	add	r2,r16,r2
10003fac:	100b883a 	mov	r5,r2
10003fb0:	01040074 	movhi	r4,4097
10003fb4:	21183104 	addi	r4,r4,24772
10003fb8:	0006b300 	call	10006b30 <printf>
    if (sqr_Dis_Kirby_Enemy(kirby, enemy) <= (KIRBY_INHALE_DIS_SQRT * KIRBY_INHALE_DIS_SQRT))
10003fbc:	e17ffe17 	ldw	r5,-8(fp)
10003fc0:	e13ffd17 	ldw	r4,-12(fp)
10003fc4:	0003ff40 	call	10003ff4 <sqr_Dis_Kirby_Enemy>
10003fc8:	1081e448 	cmpgei	r2,r2,1937
10003fcc:	1000021e 	bne	r2,zero,10003fd8 <enemy_Should_Be_Inhaled+0xd0>
        return 1;
10003fd0:	00800044 	movi	r2,1
10003fd4:	00000106 	br	10003fdc <enemy_Should_Be_Inhaled+0xd4>
    return 0;
10003fd8:	0005883a 	mov	r2,zero
}
10003fdc:	e6ffff04 	addi	sp,fp,-4
10003fe0:	dfc00217 	ldw	ra,8(sp)
10003fe4:	df000117 	ldw	fp,4(sp)
10003fe8:	dc000017 	ldw	r16,0(sp)
10003fec:	dec00304 	addi	sp,sp,12
10003ff0:	f800283a 	ret

10003ff4 <sqr_Dis_Kirby_Enemy>:

int sqr_Dis_Kirby_Enemy(Kirby * kirby, Enemy * enemy) {
10003ff4:	defff704 	addi	sp,sp,-36
10003ff8:	dfc00815 	stw	ra,32(sp)
10003ffc:	df000715 	stw	fp,28(sp)
10004000:	dc000615 	stw	r16,24(sp)
10004004:	df000704 	addi	fp,sp,28
10004008:	e13ffd15 	stw	r4,-12(fp)
1000400c:	e17ffe15 	stw	r5,-8(fp)
    int kirby_Center_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
10004010:	e13ffd17 	ldw	r4,-12(fp)
10004014:	00037a40 	call	100037a4 <get_Kirby_Botton_Pos>
10004018:	1004d43a 	srli	r2,r2,16
1000401c:	e0bff915 	stw	r2,-28(fp)
    int kirby_Center_Y = (get_Kirby_Left_Pos(kirby) & 0x0000ffff);
10004020:	e13ffd17 	ldw	r4,-12(fp)
10004024:	00039ac0 	call	100039ac <get_Kirby_Left_Pos>
10004028:	10bfffcc 	andi	r2,r2,65535
1000402c:	e0bffa15 	stw	r2,-24(fp)
    int enemy_Center_X = (get_Enemy_Botton_Pos(enemy) >> 16) & 0x0000ffff;
10004030:	e13ffe17 	ldw	r4,-8(fp)
10004034:	0000d440 	call	10000d44 <get_Enemy_Botton_Pos>
10004038:	1004d43a 	srli	r2,r2,16
1000403c:	e0bffb15 	stw	r2,-20(fp)
    int enemy_Center_Y = (get_Enemy_Left_Pos(enemy) & 0x0000ffff);
10004040:	e13ffe17 	ldw	r4,-8(fp)
10004044:	0000f5c0 	call	10000f5c <get_Enemy_Left_Pos>
10004048:	10bfffcc 	andi	r2,r2,65535
1000404c:	e0bffc15 	stw	r2,-16(fp)

    return ((kirby_Center_X - enemy_Center_X) * (kirby_Center_X - enemy_Center_X) + (kirby_Center_Y - enemy_Center_Y) * (kirby_Center_Y - enemy_Center_Y));
10004050:	e0fff917 	ldw	r3,-28(fp)
10004054:	e0bffb17 	ldw	r2,-20(fp)
10004058:	1889c83a 	sub	r4,r3,r2
1000405c:	e0fff917 	ldw	r3,-28(fp)
10004060:	e0bffb17 	ldw	r2,-20(fp)
10004064:	1885c83a 	sub	r2,r3,r2
10004068:	100b883a 	mov	r5,r2
1000406c:	0006ad80 	call	10006ad8 <__mulsi3>
10004070:	1021883a 	mov	r16,r2
10004074:	e0fffa17 	ldw	r3,-24(fp)
10004078:	e0bffc17 	ldw	r2,-16(fp)
1000407c:	1889c83a 	sub	r4,r3,r2
10004080:	e0fffa17 	ldw	r3,-24(fp)
10004084:	e0bffc17 	ldw	r2,-16(fp)
10004088:	1885c83a 	sub	r2,r3,r2
1000408c:	100b883a 	mov	r5,r2
10004090:	0006ad80 	call	10006ad8 <__mulsi3>
10004094:	8085883a 	add	r2,r16,r2
}
10004098:	e6ffff04 	addi	sp,fp,-4
1000409c:	dfc00217 	ldw	ra,8(sp)
100040a0:	df000117 	ldw	fp,4(sp)
100040a4:	dc000017 	ldw	r16,0(sp)
100040a8:	dec00304 	addi	sp,sp,12
100040ac:	f800283a 	ret

100040b0 <sqr_Dis_Kirby_Door>:

int sqr_Dis_Kirby_Door(Kirby * kirby) {
100040b0:	defff804 	addi	sp,sp,-32
100040b4:	dfc00715 	stw	ra,28(sp)
100040b8:	df000615 	stw	fp,24(sp)
100040bc:	dc000515 	stw	r16,20(sp)
100040c0:	df000604 	addi	fp,sp,24
100040c4:	e13ffe15 	stw	r4,-8(fp)
    int kirby_Center_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
100040c8:	e13ffe17 	ldw	r4,-8(fp)
100040cc:	00037a40 	call	100037a4 <get_Kirby_Botton_Pos>
100040d0:	1004d43a 	srli	r2,r2,16
100040d4:	e0bffa15 	stw	r2,-24(fp)
    int kirby_Center_Y = (get_Kirby_Left_Pos(kirby) & 0x0000ffff);
100040d8:	e13ffe17 	ldw	r4,-8(fp)
100040dc:	00039ac0 	call	100039ac <get_Kirby_Left_Pos>
100040e0:	10bfffcc 	andi	r2,r2,65535
100040e4:	e0bffb15 	stw	r2,-20(fp)
    int door_Center_X = DOOR_CENTER_X;
100040e8:	00811184 	movi	r2,1094
100040ec:	e0bffc15 	stw	r2,-16(fp)
    int door_Center_Y = DOOR_CENTER_Y;
100040f0:	00801544 	movi	r2,85
100040f4:	e0bffd15 	stw	r2,-12(fp)

    return ((kirby_Center_X - door_Center_X) * (kirby_Center_X - door_Center_X) + (kirby_Center_Y - door_Center_Y) * (kirby_Center_Y - door_Center_Y));
100040f8:	e0fffa17 	ldw	r3,-24(fp)
100040fc:	e0bffc17 	ldw	r2,-16(fp)
10004100:	1889c83a 	sub	r4,r3,r2
10004104:	e0fffa17 	ldw	r3,-24(fp)
10004108:	e0bffc17 	ldw	r2,-16(fp)
1000410c:	1885c83a 	sub	r2,r3,r2
10004110:	100b883a 	mov	r5,r2
10004114:	0006ad80 	call	10006ad8 <__mulsi3>
10004118:	1021883a 	mov	r16,r2
1000411c:	e0fffb17 	ldw	r3,-20(fp)
10004120:	e0bffd17 	ldw	r2,-12(fp)
10004124:	1889c83a 	sub	r4,r3,r2
10004128:	e0fffb17 	ldw	r3,-20(fp)
1000412c:	e0bffd17 	ldw	r2,-12(fp)
10004130:	1885c83a 	sub	r2,r3,r2
10004134:	100b883a 	mov	r5,r2
10004138:	0006ad80 	call	10006ad8 <__mulsi3>
1000413c:	8085883a 	add	r2,r16,r2
}
10004140:	e6ffff04 	addi	sp,fp,-4
10004144:	dfc00217 	ldw	ra,8(sp)
10004148:	df000117 	ldw	fp,4(sp)
1000414c:	dc000017 	ldw	r16,0(sp)
10004150:	dec00304 	addi	sp,sp,12
10004154:	f800283a 	ret

10004158 <game_Over_Anime>:

void game_Over_Anime(Kirby * kirby) {
10004158:	defffc04 	addi	sp,sp,-16
1000415c:	dfc00315 	stw	ra,12(sp)
10004160:	df000215 	stw	fp,8(sp)
10004164:	df000204 	addi	fp,sp,8
10004168:	e13fff15 	stw	r4,-4(fp)
    int i = 0;
1000416c:	e03ffe15 	stw	zero,-8(fp)
    kirby->damaging = 1;
10004170:	e0bfff17 	ldw	r2,-4(fp)
10004174:	00c00044 	movi	r3,1
10004178:	10c00b15 	stw	r3,44(r2)
    kirby->image = 2;
1000417c:	e0bfff17 	ldw	r2,-4(fp)
10004180:	00c00084 	movi	r3,2
10004184:	10c00315 	stw	r3,12(r2)
    kirby->action = 0;
10004188:	e0bfff17 	ldw	r2,-4(fp)
1000418c:	10000615 	stw	zero,24(r2)
    kirby->frame = 0;
10004190:	e0bfff17 	ldw	r2,-4(fp)
10004194:	10000715 	stw	zero,28(r2)
    upload_Kirby_Info(kirby);
10004198:	e13fff17 	ldw	r4,-4(fp)
1000419c:	000179c0 	call	1000179c <upload_Kirby_Info>
    frame_Time(GAME_OVER_FRAME_TIME);
100041a0:	012bf214 	movui	r4,45000
100041a4:	00036940 	call	10003694 <frame_Time>
    if (kirby->is_left == 0) {
100041a8:	e0bfff17 	ldw	r2,-4(fp)
100041ac:	10800417 	ldw	r2,16(r2)
100041b0:	1000231e 	bne	r2,zero,10004240 <game_Over_Anime+0xe8>
        for (i = 0; i < 14; i++) {
100041b4:	e03ffe15 	stw	zero,-8(fp)
100041b8:	00001d06 	br	10004230 <game_Over_Anime+0xd8>
            kirby->frame = (kirby->frame + 1) % 8;
100041bc:	e0bfff17 	ldw	r2,-4(fp)
100041c0:	10800717 	ldw	r2,28(r2)
100041c4:	10c00044 	addi	r3,r2,1
100041c8:	00a00034 	movhi	r2,32768
100041cc:	108001c4 	addi	r2,r2,7
100041d0:	1884703a 	and	r2,r3,r2
100041d4:	1000040e 	bge	r2,zero,100041e8 <game_Over_Anime+0x90>
100041d8:	10bfffc4 	addi	r2,r2,-1
100041dc:	00fffe04 	movi	r3,-8
100041e0:	10c4b03a 	or	r2,r2,r3
100041e4:	10800044 	addi	r2,r2,1
100041e8:	1007883a 	mov	r3,r2
100041ec:	e0bfff17 	ldw	r2,-4(fp)
100041f0:	10c00715 	stw	r3,28(r2)
            kirby->x -= KIRBY_STEP_X;
100041f4:	e0bfff17 	ldw	r2,-4(fp)
100041f8:	10800017 	ldw	r2,0(r2)
100041fc:	10ffff44 	addi	r3,r2,-3
10004200:	e0bfff17 	ldw	r2,-4(fp)
10004204:	10c00015 	stw	r3,0(r2)
            upload_Kirby_Info(kirby);
10004208:	e13fff17 	ldw	r4,-4(fp)
1000420c:	000179c0 	call	1000179c <upload_Kirby_Info>
            frame_Time(DIE_INCREASE_TIME_BASE * i);
10004210:	0149c404 	movi	r5,10000
10004214:	e13ffe17 	ldw	r4,-8(fp)
10004218:	0006ad80 	call	10006ad8 <__mulsi3>
1000421c:	1009883a 	mov	r4,r2
10004220:	00036940 	call	10003694 <frame_Time>
    kirby->action = 0;
    kirby->frame = 0;
    upload_Kirby_Info(kirby);
    frame_Time(GAME_OVER_FRAME_TIME);
    if (kirby->is_left == 0) {
        for (i = 0; i < 14; i++) {
10004224:	e0bffe17 	ldw	r2,-8(fp)
10004228:	10800044 	addi	r2,r2,1
1000422c:	e0bffe15 	stw	r2,-8(fp)
10004230:	e0bffe17 	ldw	r2,-8(fp)
10004234:	10800390 	cmplti	r2,r2,14
10004238:	103fe01e 	bne	r2,zero,100041bc <__alt_data_end+0xf80041bc>
            kirby->x += KIRBY_STEP_X;
            upload_Kirby_Info(kirby);
            frame_Time(DIE_INCREASE_TIME_BASE * i);
        }
    }
}
1000423c:	00002206 	br	100042c8 <game_Over_Anime+0x170>
            kirby->x -= KIRBY_STEP_X;
            upload_Kirby_Info(kirby);
            frame_Time(DIE_INCREASE_TIME_BASE * i);
        }
    } else {
        for (i = 0; i < 14; i++) {
10004240:	e03ffe15 	stw	zero,-8(fp)
10004244:	00001d06 	br	100042bc <game_Over_Anime+0x164>
            kirby->frame = (kirby->frame + 1) % 8;
10004248:	e0bfff17 	ldw	r2,-4(fp)
1000424c:	10800717 	ldw	r2,28(r2)
10004250:	10c00044 	addi	r3,r2,1
10004254:	00a00034 	movhi	r2,32768
10004258:	108001c4 	addi	r2,r2,7
1000425c:	1884703a 	and	r2,r3,r2
10004260:	1000040e 	bge	r2,zero,10004274 <game_Over_Anime+0x11c>
10004264:	10bfffc4 	addi	r2,r2,-1
10004268:	00fffe04 	movi	r3,-8
1000426c:	10c4b03a 	or	r2,r2,r3
10004270:	10800044 	addi	r2,r2,1
10004274:	1007883a 	mov	r3,r2
10004278:	e0bfff17 	ldw	r2,-4(fp)
1000427c:	10c00715 	stw	r3,28(r2)
            kirby->x += KIRBY_STEP_X;
10004280:	e0bfff17 	ldw	r2,-4(fp)
10004284:	10800017 	ldw	r2,0(r2)
10004288:	10c000c4 	addi	r3,r2,3
1000428c:	e0bfff17 	ldw	r2,-4(fp)
10004290:	10c00015 	stw	r3,0(r2)
            upload_Kirby_Info(kirby);
10004294:	e13fff17 	ldw	r4,-4(fp)
10004298:	000179c0 	call	1000179c <upload_Kirby_Info>
            frame_Time(DIE_INCREASE_TIME_BASE * i);
1000429c:	0149c404 	movi	r5,10000
100042a0:	e13ffe17 	ldw	r4,-8(fp)
100042a4:	0006ad80 	call	10006ad8 <__mulsi3>
100042a8:	1009883a 	mov	r4,r2
100042ac:	00036940 	call	10003694 <frame_Time>
            kirby->x -= KIRBY_STEP_X;
            upload_Kirby_Info(kirby);
            frame_Time(DIE_INCREASE_TIME_BASE * i);
        }
    } else {
        for (i = 0; i < 14; i++) {
100042b0:	e0bffe17 	ldw	r2,-8(fp)
100042b4:	10800044 	addi	r2,r2,1
100042b8:	e0bffe15 	stw	r2,-8(fp)
100042bc:	e0bffe17 	ldw	r2,-8(fp)
100042c0:	10800390 	cmplti	r2,r2,14
100042c4:	103fe01e 	bne	r2,zero,10004248 <__alt_data_end+0xf8004248>
            kirby->x += KIRBY_STEP_X;
            upload_Kirby_Info(kirby);
            frame_Time(DIE_INCREASE_TIME_BASE * i);
        }
    }
}
100042c8:	0001883a 	nop
100042cc:	e037883a 	mov	sp,fp
100042d0:	dfc00117 	ldw	ra,4(sp)
100042d4:	df000017 	ldw	fp,0(sp)
100042d8:	dec00204 	addi	sp,sp,8
100042dc:	f800283a 	ret

100042e0 <win_Anime>:

void win_Anime(Kirby * kirby) {
100042e0:	defff504 	addi	sp,sp,-44
100042e4:	dfc00a15 	stw	ra,40(sp)
100042e8:	df000915 	stw	fp,36(sp)
100042ec:	df000904 	addi	fp,sp,36
100042f0:	e13fff15 	stw	r4,-4(fp)
    int i = 0;
100042f4:	e03ff715 	stw	zero,-36(fp)
    int y_list[7] = {5,3,3,2,2,1,1};
100042f8:	00800144 	movi	r2,5
100042fc:	e0bff815 	stw	r2,-32(fp)
10004300:	008000c4 	movi	r2,3
10004304:	e0bff915 	stw	r2,-28(fp)
10004308:	008000c4 	movi	r2,3
1000430c:	e0bffa15 	stw	r2,-24(fp)
10004310:	00800084 	movi	r2,2
10004314:	e0bffb15 	stw	r2,-20(fp)
10004318:	00800084 	movi	r2,2
1000431c:	e0bffc15 	stw	r2,-16(fp)
10004320:	00800044 	movi	r2,1
10004324:	e0bffd15 	stw	r2,-12(fp)
10004328:	00800044 	movi	r2,1
1000432c:	e0bffe15 	stw	r2,-8(fp)

    kirby->inhaling = 0;
10004330:	e0bfff17 	ldw	r2,-4(fp)
10004334:	10000c15 	stw	zero,48(r2)
    kirby->damaging = 0;
10004338:	e0bfff17 	ldw	r2,-4(fp)
1000433c:	10000b15 	stw	zero,44(r2)
    kirby->gulping = 0;
10004340:	e0bfff17 	ldw	r2,-4(fp)
10004344:	10000f15 	stw	zero,60(r2)
    kirby->kicking = 0;
10004348:	e0bfff17 	ldw	r2,-4(fp)
1000434c:	10000e15 	stw	zero,56(r2)
    kirby->spitting = 0;
10004350:	e0bfff17 	ldw	r2,-4(fp)
10004354:	10000d15 	stw	zero,52(r2)
    kirby->is_inhaled = 0;
10004358:	e0bfff17 	ldw	r2,-4(fp)
1000435c:	10000a15 	stw	zero,40(r2)
    kirby->in_air = 0;
10004360:	e0bfff17 	ldw	r2,-4(fp)
10004364:	10000915 	stw	zero,36(r2)

    // Enter Door
    kirby->image = 0;
10004368:	e0bfff17 	ldw	r2,-4(fp)
1000436c:	10000315 	stw	zero,12(r2)
    kirby->action = 0;
10004370:	e0bfff17 	ldw	r2,-4(fp)
10004374:	10000615 	stw	zero,24(r2)
    kirby->frame = 5;
10004378:	e0bfff17 	ldw	r2,-4(fp)
1000437c:	00c00144 	movi	r3,5
10004380:	10c00715 	stw	r3,28(r2)
    kirby->x = DOOR_CENTER_X - 14;
10004384:	e0bfff17 	ldw	r2,-4(fp)
10004388:	00c10e04 	movi	r3,1080
1000438c:	10c00015 	stw	r3,0(r2)
    kirby->y = DOOR_CENTER_Y - 5;
10004390:	e0bfff17 	ldw	r2,-4(fp)
10004394:	00c01404 	movi	r3,80
10004398:	10c00115 	stw	r3,4(r2)
    for (i = 0; i < 4; i++) {
1000439c:	e03ff715 	stw	zero,-36(fp)
100043a0:	00000c06 	br	100043d4 <win_Anime+0xf4>
        kirby->frame += 1;
100043a4:	e0bfff17 	ldw	r2,-4(fp)
100043a8:	10800717 	ldw	r2,28(r2)
100043ac:	10c00044 	addi	r3,r2,1
100043b0:	e0bfff17 	ldw	r2,-4(fp)
100043b4:	10c00715 	stw	r3,28(r2)
        upload_Kirby_Info(kirby);
100043b8:	e13fff17 	ldw	r4,-4(fp)
100043bc:	000179c0 	call	1000179c <upload_Kirby_Info>
        frame_Time(GAME_OVER_FRAME_TIME);
100043c0:	012bf214 	movui	r4,45000
100043c4:	00036940 	call	10003694 <frame_Time>
    kirby->image = 0;
    kirby->action = 0;
    kirby->frame = 5;
    kirby->x = DOOR_CENTER_X - 14;
    kirby->y = DOOR_CENTER_Y - 5;
    for (i = 0; i < 4; i++) {
100043c8:	e0bff717 	ldw	r2,-36(fp)
100043cc:	10800044 	addi	r2,r2,1
100043d0:	e0bff715 	stw	r2,-36(fp)
100043d4:	e0bff717 	ldw	r2,-36(fp)
100043d8:	10800110 	cmplti	r2,r2,4
100043dc:	103ff11e 	bne	r2,zero,100043a4 <__alt_data_end+0xf80043a4>
        kirby->frame += 1;
        upload_Kirby_Info(kirby);
        frame_Time(GAME_OVER_FRAME_TIME);
    }
    // Jump
    kirby->action = 1;
100043e0:	e0bfff17 	ldw	r2,-4(fp)
100043e4:	00c00044 	movi	r3,1
100043e8:	10c00615 	stw	r3,24(r2)
    kirby->frame = 10;
100043ec:	e0bfff17 	ldw	r2,-4(fp)
100043f0:	00c00284 	movi	r3,10
100043f4:	10c00715 	stw	r3,28(r2)
    for (i = 0; i < 7; i++) {
100043f8:	e03ff715 	stw	zero,-36(fp)
100043fc:	00001306 	br	1000444c <win_Anime+0x16c>
        kirby->y -= y_list[i];
10004400:	e0bfff17 	ldw	r2,-4(fp)
10004404:	10c00117 	ldw	r3,4(r2)
10004408:	e0bff717 	ldw	r2,-36(fp)
1000440c:	1085883a 	add	r2,r2,r2
10004410:	1085883a 	add	r2,r2,r2
10004414:	e13ff704 	addi	r4,fp,-36
10004418:	2085883a 	add	r2,r4,r2
1000441c:	10800104 	addi	r2,r2,4
10004420:	10800017 	ldw	r2,0(r2)
10004424:	1887c83a 	sub	r3,r3,r2
10004428:	e0bfff17 	ldw	r2,-4(fp)
1000442c:	10c00115 	stw	r3,4(r2)
        upload_Kirby_Info(kirby);
10004430:	e13fff17 	ldw	r4,-4(fp)
10004434:	000179c0 	call	1000179c <upload_Kirby_Info>
        frame_Time(GAME_OVER_FRAME_TIME);
10004438:	012bf214 	movui	r4,45000
1000443c:	00036940 	call	10003694 <frame_Time>
        frame_Time(GAME_OVER_FRAME_TIME);
    }
    // Jump
    kirby->action = 1;
    kirby->frame = 10;
    for (i = 0; i < 7; i++) {
10004440:	e0bff717 	ldw	r2,-36(fp)
10004444:	10800044 	addi	r2,r2,1
10004448:	e0bff715 	stw	r2,-36(fp)
1000444c:	e0bff717 	ldw	r2,-36(fp)
10004450:	108001d0 	cmplti	r2,r2,7
10004454:	103fea1e 	bne	r2,zero,10004400 <__alt_data_end+0xf8004400>
        kirby->y -= y_list[i];
        upload_Kirby_Info(kirby);
        frame_Time(GAME_OVER_FRAME_TIME);
    }
}
10004458:	0001883a 	nop
1000445c:	e037883a 	mov	sp,fp
10004460:	dfc00117 	ldw	ra,4(sp)
10004464:	df000017 	ldw	fp,0(sp)
10004468:	dec00204 	addi	sp,sp,8
1000446c:	f800283a 	ret

10004470 <main>:
#include "test.h"
#include "usb_main.h"
#include "parameter.h"
#include "game_logic.h"

int main(void) {
10004470:	defffe04 	addi	sp,sp,-8
10004474:	dfc00115 	stw	ra,4(sp)
10004478:	df000015 	stw	fp,0(sp)
1000447c:	d839883a 	mov	fp,sp
    // Game * game_state;
    // initial_Game_State(game_state);
    GameStart();
10004480:	00011700 	call	10001170 <GameStart>

    printf("Interrupt takes place!");
10004484:	01040074 	movhi	r4,4097
10004488:	21183d04 	addi	r4,r4,24820
1000448c:	0006b300 	call	10006b30 <printf>
    return 0;
10004490:	0005883a 	mov	r2,zero
}
10004494:	e037883a 	mov	sp,fp
10004498:	dfc00117 	ldw	ra,4(sp)
1000449c:	df000017 	ldw	fp,0(sp)
100044a0:	dec00204 	addi	sp,sp,8
100044a4:	f800283a 	ret

100044a8 <initial_Star>:
#include "star.h"
#include "parameter.h"
#include "enemy.h"


void initial_Star(Star * star) {
100044a8:	defffe04 	addi	sp,sp,-8
100044ac:	df000115 	stw	fp,4(sp)
100044b0:	df000104 	addi	fp,sp,4
100044b4:	e13fff15 	stw	r4,-4(fp)
    star->x = 0;
100044b8:	e0bfff17 	ldw	r2,-4(fp)
100044bc:	10000015 	stw	zero,0(r2)
    star->y = 0;
100044c0:	e0bfff17 	ldw	r2,-4(fp)
100044c4:	10000115 	stw	zero,4(r2)
    star->map_x = 0;
100044c8:	e0bfff17 	ldw	r2,-4(fp)
100044cc:	10000215 	stw	zero,8(r2)
    star->idx = 0;
100044d0:	e0bfff17 	ldw	r2,-4(fp)
100044d4:	10000315 	stw	zero,12(r2)
    star->appear = 0;
100044d8:	e0bfff17 	ldw	r2,-4(fp)
100044dc:	10000415 	stw	zero,16(r2)
    star->is_left = 0;
100044e0:	e0bfff17 	ldw	r2,-4(fp)
100044e4:	10000515 	stw	zero,20(r2)
}
100044e8:	0001883a 	nop
100044ec:	e037883a 	mov	sp,fp
100044f0:	df000017 	ldw	fp,0(sp)
100044f4:	dec00104 	addi	sp,sp,4
100044f8:	f800283a 	ret

100044fc <spit_Star>:

void spit_Star(Kirby * kirby, Star * star, Enemy * enemy) {
100044fc:	defffb04 	addi	sp,sp,-20
10004500:	dfc00415 	stw	ra,16(sp)
10004504:	df000315 	stw	fp,12(sp)
10004508:	df000304 	addi	fp,sp,12
1000450c:	e13ffd15 	stw	r4,-12(fp)
10004510:	e17ffe15 	stw	r5,-8(fp)
10004514:	e1bfff15 	stw	r6,-4(fp)
    update_Star(kirby, star, enemy);
10004518:	e1bfff17 	ldw	r6,-4(fp)
1000451c:	e17ffe17 	ldw	r5,-8(fp)
10004520:	e13ffd17 	ldw	r4,-12(fp)
10004524:	00045cc0 	call	100045cc <update_Star>
    upload_Star_Info(star);
10004528:	e13ffe17 	ldw	r4,-8(fp)
1000452c:	00045500 	call	10004550 <upload_Star_Info>
    frame_Time(STAR_FRAME_TIME);
10004530:	01036b04 	movi	r4,3500
10004534:	00036940 	call	10003694 <frame_Time>
}
10004538:	0001883a 	nop
1000453c:	e037883a 	mov	sp,fp
10004540:	dfc00117 	ldw	ra,4(sp)
10004544:	df000017 	ldw	fp,0(sp)
10004548:	dec00204 	addi	sp,sp,8
1000454c:	f800283a 	ret

10004550 <upload_Star_Info>:

void upload_Star_Info(Star * star) {
10004550:	defffe04 	addi	sp,sp,-8
10004554:	df000115 	stw	fp,4(sp)
10004558:	df000104 	addi	fp,sp,4
1000455c:	e13fff15 	stw	r4,-4(fp)
//    printf("\n**************** Spit Star - Load Registers ****************\n");
    REG_3_STAR = (star->x << 24) | (star->y << 16) | (star->idx << 14) | (star->is_left << 13) | (star->appear << 12);
10004560:	d09b2517 	ldw	r2,27796(gp)
10004564:	10800304 	addi	r2,r2,12
10004568:	e0ffff17 	ldw	r3,-4(fp)
1000456c:	18c00017 	ldw	r3,0(r3)
10004570:	1808963a 	slli	r4,r3,24
10004574:	e0ffff17 	ldw	r3,-4(fp)
10004578:	18c00117 	ldw	r3,4(r3)
1000457c:	1806943a 	slli	r3,r3,16
10004580:	20c8b03a 	or	r4,r4,r3
10004584:	e0ffff17 	ldw	r3,-4(fp)
10004588:	18c00317 	ldw	r3,12(r3)
1000458c:	180693ba 	slli	r3,r3,14
10004590:	20c8b03a 	or	r4,r4,r3
10004594:	e0ffff17 	ldw	r3,-4(fp)
10004598:	18c00517 	ldw	r3,20(r3)
1000459c:	1806937a 	slli	r3,r3,13
100045a0:	20c8b03a 	or	r4,r4,r3
100045a4:	e0ffff17 	ldw	r3,-4(fp)
100045a8:	18c00417 	ldw	r3,16(r3)
100045ac:	1806933a 	slli	r3,r3,12
100045b0:	20c6b03a 	or	r3,r4,r3
100045b4:	10c00015 	stw	r3,0(r2)
}
100045b8:	0001883a 	nop
100045bc:	e037883a 	mov	sp,fp
100045c0:	df000017 	ldw	fp,0(sp)
100045c4:	dec00104 	addi	sp,sp,4
100045c8:	f800283a 	ret

100045cc <update_Star>:

void update_Star(Kirby * kirby, Star * star, Enemy * enemy) {
100045cc:	defffb04 	addi	sp,sp,-20
100045d0:	dfc00415 	stw	ra,16(sp)
100045d4:	df000315 	stw	fp,12(sp)
100045d8:	df000304 	addi	fp,sp,12
100045dc:	e13ffd15 	stw	r4,-12(fp)
100045e0:	e17ffe15 	stw	r5,-8(fp)
100045e4:	e1bfff15 	stw	r6,-4(fp)
    if ((kirby->image == 1) && (kirby->action == 4) && (kirby->frame == 2)) {
100045e8:	e0bffd17 	ldw	r2,-12(fp)
100045ec:	10800317 	ldw	r2,12(r2)
100045f0:	10800058 	cmpnei	r2,r2,1
100045f4:	1000331e 	bne	r2,zero,100046c4 <update_Star+0xf8>
100045f8:	e0bffd17 	ldw	r2,-12(fp)
100045fc:	10800617 	ldw	r2,24(r2)
10004600:	10800118 	cmpnei	r2,r2,4
10004604:	10002f1e 	bne	r2,zero,100046c4 <update_Star+0xf8>
10004608:	e0bffd17 	ldw	r2,-12(fp)
1000460c:	10800717 	ldw	r2,28(r2)
10004610:	10800098 	cmpnei	r2,r2,2
10004614:	10002b1e 	bne	r2,zero,100046c4 <update_Star+0xf8>
        // spit star
        star->appear = 1;
10004618:	e0bffe17 	ldw	r2,-8(fp)
1000461c:	00c00044 	movi	r3,1
10004620:	10c00415 	stw	r3,16(r2)
        star->idx = 0;
10004624:	e0bffe17 	ldw	r2,-8(fp)
10004628:	10000315 	stw	zero,12(r2)
        star->is_left = kirby->is_left;
1000462c:	e0bffd17 	ldw	r2,-12(fp)
10004630:	10c00417 	ldw	r3,16(r2)
10004634:	e0bffe17 	ldw	r2,-8(fp)
10004638:	10c00515 	stw	r3,20(r2)
        if (star->is_left == 0) { // Right
1000463c:	e0bffe17 	ldw	r2,-8(fp)
10004640:	10800517 	ldw	r2,20(r2)
10004644:	10000d1e 	bne	r2,zero,1000467c <update_Star+0xb0>
            star->x = kirby_Screen_Center_X(kirby->x) + 31;
10004648:	e0bffd17 	ldw	r2,-12(fp)
1000464c:	10800017 	ldw	r2,0(r2)
10004650:	1009883a 	mov	r4,r2
10004654:	0003d240 	call	10003d24 <kirby_Screen_Center_X>
10004658:	10c007c4 	addi	r3,r2,31
1000465c:	e0bffe17 	ldw	r2,-8(fp)
10004660:	10c00015 	stw	r3,0(r2)
            star->map_x = kirby->x + 31;
10004664:	e0bffd17 	ldw	r2,-12(fp)
10004668:	10800017 	ldw	r2,0(r2)
1000466c:	10c007c4 	addi	r3,r2,31
10004670:	e0bffe17 	ldw	r2,-8(fp)
10004674:	10c00215 	stw	r3,8(r2)
10004678:	00000c06 	br	100046ac <update_Star+0xe0>
        } else { // Left
            star->x = kirby_Screen_Center_X(kirby->x) - 31;
1000467c:	e0bffd17 	ldw	r2,-12(fp)
10004680:	10800017 	ldw	r2,0(r2)
10004684:	1009883a 	mov	r4,r2
10004688:	0003d240 	call	10003d24 <kirby_Screen_Center_X>
1000468c:	10fff844 	addi	r3,r2,-31
10004690:	e0bffe17 	ldw	r2,-8(fp)
10004694:	10c00015 	stw	r3,0(r2)
            star->map_x = kirby->x - 31;
10004698:	e0bffd17 	ldw	r2,-12(fp)
1000469c:	10800017 	ldw	r2,0(r2)
100046a0:	10fff844 	addi	r3,r2,-31
100046a4:	e0bffe17 	ldw	r2,-8(fp)
100046a8:	10c00215 	stw	r3,8(r2)
        }
        star->y = kirby->y + 3;
100046ac:	e0bffd17 	ldw	r2,-12(fp)
100046b0:	10800117 	ldw	r2,4(r2)
100046b4:	10c000c4 	addi	r3,r2,3
100046b8:	e0bffe17 	ldw	r2,-8(fp)
100046bc:	10c00115 	stw	r3,4(r2)
        return;
100046c0:	00005a06 	br	1000482c <update_Star+0x260>
    }

    if (star->appear == 1) {
100046c4:	e0bffe17 	ldw	r2,-8(fp)
100046c8:	10800417 	ldw	r2,16(r2)
100046cc:	10800058 	cmpnei	r2,r2,1
100046d0:	1000561e 	bne	r2,zero,1000482c <update_Star+0x260>
        star->idx = (star->idx + 1) % 4; // 4 frames for 1 star-cycle
100046d4:	e0bffe17 	ldw	r2,-8(fp)
100046d8:	10800317 	ldw	r2,12(r2)
100046dc:	10c00044 	addi	r3,r2,1
100046e0:	00a00034 	movhi	r2,32768
100046e4:	108000c4 	addi	r2,r2,3
100046e8:	1884703a 	and	r2,r3,r2
100046ec:	1000040e 	bge	r2,zero,10004700 <update_Star+0x134>
100046f0:	10bfffc4 	addi	r2,r2,-1
100046f4:	00ffff04 	movi	r3,-4
100046f8:	10c4b03a 	or	r2,r2,r3
100046fc:	10800044 	addi	r2,r2,1
10004700:	1007883a 	mov	r3,r2
10004704:	e0bffe17 	ldw	r2,-8(fp)
10004708:	10c00315 	stw	r3,12(r2)

        // 1 - Edge detection: L/R
        if (star->is_left == 0) {
1000470c:	e0bffe17 	ldw	r2,-8(fp)
10004710:	10800517 	ldw	r2,20(r2)
10004714:	10001e1e 	bne	r2,zero,10004790 <update_Star+0x1c4>
            star->x += STAR_STEP_X;
10004718:	e0bffe17 	ldw	r2,-8(fp)
1000471c:	10800017 	ldw	r2,0(r2)
10004720:	10c00104 	addi	r3,r2,4
10004724:	e0bffe17 	ldw	r2,-8(fp)
10004728:	10c00015 	stw	r3,0(r2)
            star->map_x += STAR_STEP_X;
1000472c:	e0bffe17 	ldw	r2,-8(fp)
10004730:	10800217 	ldw	r2,8(r2)
10004734:	10c00104 	addi	r3,r2,4
10004738:	e0bffe17 	ldw	r2,-8(fp)
1000473c:	10c00215 	stw	r3,8(r2)

            // If meet edges of map or screen
            if ((get_Wall_Info(star->map_x + 22, star->y + 7, 0) == 1) || ((star->x + 22) > 260)) {
10004740:	e0bffe17 	ldw	r2,-8(fp)
10004744:	10800217 	ldw	r2,8(r2)
10004748:	10c00584 	addi	r3,r2,22
1000474c:	e0bffe17 	ldw	r2,-8(fp)
10004750:	10800117 	ldw	r2,4(r2)
10004754:	108001c4 	addi	r2,r2,7
10004758:	000d883a 	mov	r6,zero
1000475c:	100b883a 	mov	r5,r2
10004760:	1809883a 	mov	r4,r3
10004764:	0003bb40 	call	10003bb4 <get_Wall_Info>
10004768:	10800060 	cmpeqi	r2,r2,1
1000476c:	1000051e 	bne	r2,zero,10004784 <update_Star+0x1b8>
10004770:	e0bffe17 	ldw	r2,-8(fp)
10004774:	10800017 	ldw	r2,0(r2)
10004778:	10800584 	addi	r2,r2,22
1000477c:	10804150 	cmplti	r2,r2,261
10004780:	1000201e 	bne	r2,zero,10004804 <update_Star+0x238>
                star->appear = 0;
10004784:	e0bffe17 	ldw	r2,-8(fp)
10004788:	10000415 	stw	zero,16(r2)
                return;
1000478c:	00002706 	br	1000482c <update_Star+0x260>
            }
        }
        else {
            star->x -= STAR_STEP_X;
10004790:	e0bffe17 	ldw	r2,-8(fp)
10004794:	10800017 	ldw	r2,0(r2)
10004798:	10ffff04 	addi	r3,r2,-4
1000479c:	e0bffe17 	ldw	r2,-8(fp)
100047a0:	10c00015 	stw	r3,0(r2)
            star->map_x -= STAR_STEP_X;
100047a4:	e0bffe17 	ldw	r2,-8(fp)
100047a8:	10800217 	ldw	r2,8(r2)
100047ac:	10ffff04 	addi	r3,r2,-4
100047b0:	e0bffe17 	ldw	r2,-8(fp)
100047b4:	10c00215 	stw	r3,8(r2)

            // If meet edges of map or screen
            if ((get_Wall_Info(star->map_x + 1, star->y + 7, 0) == 1) || ((star->x + 1) <= 0)) {
100047b8:	e0bffe17 	ldw	r2,-8(fp)
100047bc:	10800217 	ldw	r2,8(r2)
100047c0:	10c00044 	addi	r3,r2,1
100047c4:	e0bffe17 	ldw	r2,-8(fp)
100047c8:	10800117 	ldw	r2,4(r2)
100047cc:	108001c4 	addi	r2,r2,7
100047d0:	000d883a 	mov	r6,zero
100047d4:	100b883a 	mov	r5,r2
100047d8:	1809883a 	mov	r4,r3
100047dc:	0003bb40 	call	10003bb4 <get_Wall_Info>
100047e0:	10800060 	cmpeqi	r2,r2,1
100047e4:	1000041e 	bne	r2,zero,100047f8 <update_Star+0x22c>
100047e8:	e0bffe17 	ldw	r2,-8(fp)
100047ec:	10800017 	ldw	r2,0(r2)
100047f0:	10800044 	addi	r2,r2,1
100047f4:	00800316 	blt	zero,r2,10004804 <update_Star+0x238>
                star->appear = 0;
100047f8:	e0bffe17 	ldw	r2,-8(fp)
100047fc:	10000415 	stw	zero,16(r2)
                return;
10004800:	00000a06 	br	1000482c <update_Star+0x260>
            }
        }
        
        // 2 - Enemy detection
        if (star_Meet_Enemy(star, enemy)) {  // TO DO: Need a signal here
10004804:	e17fff17 	ldw	r5,-4(fp)
10004808:	e13ffe17 	ldw	r4,-8(fp)
1000480c:	00048400 	call	10004840 <star_Meet_Enemy>
10004810:	10000526 	beq	r2,zero,10004828 <update_Star+0x25c>
            // TO DO: Enemy get a signal - Damaged
            star->appear = 0;
10004814:	e0bffe17 	ldw	r2,-8(fp)
10004818:	10000415 	stw	zero,16(r2)
            enemy->health = 0;
1000481c:	e0bfff17 	ldw	r2,-4(fp)
10004820:	10000315 	stw	zero,12(r2)
            return;
10004824:	00000106 	br	1000482c <update_Star+0x260>
        }
        return;
10004828:	0001883a 	nop
    }
}
1000482c:	e037883a 	mov	sp,fp
10004830:	dfc00117 	ldw	ra,4(sp)
10004834:	df000017 	ldw	fp,0(sp)
10004838:	dec00204 	addi	sp,sp,8
1000483c:	f800283a 	ret

10004840 <star_Meet_Enemy>:

int star_Meet_Enemy(Star * star, Enemy * enemy) {
10004840:	defff704 	addi	sp,sp,-36
10004844:	dfc00815 	stw	ra,32(sp)
10004848:	df000715 	stw	fp,28(sp)
1000484c:	dc000615 	stw	r16,24(sp)
10004850:	df000704 	addi	fp,sp,28
10004854:	e13ffd15 	stw	r4,-12(fp)
10004858:	e17ffe15 	stw	r5,-8(fp)
    int star_Center_X = star->map_x + 12;
1000485c:	e0bffd17 	ldw	r2,-12(fp)
10004860:	10800217 	ldw	r2,8(r2)
10004864:	10800304 	addi	r2,r2,12
10004868:	e0bff915 	stw	r2,-28(fp)
    int star_Center_Y = star->y + 12;
1000486c:	e0bffd17 	ldw	r2,-12(fp)
10004870:	10800117 	ldw	r2,4(r2)
10004874:	10800304 	addi	r2,r2,12
10004878:	e0bffa15 	stw	r2,-24(fp)
    int enemy_Center_X = (get_Enemy_Botton_Pos(enemy) >> 16) & 0x0000ffff;
1000487c:	e13ffe17 	ldw	r4,-8(fp)
10004880:	0000d440 	call	10000d44 <get_Enemy_Botton_Pos>
10004884:	1004d43a 	srli	r2,r2,16
10004888:	e0bffb15 	stw	r2,-20(fp)
    int enemy_Center_Y = (get_Enemy_Left_Pos(enemy) & 0x0000ffff);
1000488c:	e13ffe17 	ldw	r4,-8(fp)
10004890:	0000f5c0 	call	10000f5c <get_Enemy_Left_Pos>
10004894:	10bfffcc 	andi	r2,r2,65535
10004898:	e0bffc15 	stw	r2,-16(fp)

    if (((star_Center_X - enemy_Center_X) * (star_Center_X - enemy_Center_X)) + ((star_Center_Y - enemy_Center_Y) * (star_Center_Y - enemy_Center_Y)) <= (STAR_DAMAGE_DIS_SQRT * STAR_DAMAGE_DIS_SQRT))
1000489c:	e0fff917 	ldw	r3,-28(fp)
100048a0:	e0bffb17 	ldw	r2,-20(fp)
100048a4:	1889c83a 	sub	r4,r3,r2
100048a8:	e0fff917 	ldw	r3,-28(fp)
100048ac:	e0bffb17 	ldw	r2,-20(fp)
100048b0:	1885c83a 	sub	r2,r3,r2
100048b4:	100b883a 	mov	r5,r2
100048b8:	0006ad80 	call	10006ad8 <__mulsi3>
100048bc:	1021883a 	mov	r16,r2
100048c0:	e0fffa17 	ldw	r3,-24(fp)
100048c4:	e0bffc17 	ldw	r2,-16(fp)
100048c8:	1889c83a 	sub	r4,r3,r2
100048cc:	e0fffa17 	ldw	r3,-24(fp)
100048d0:	e0bffc17 	ldw	r2,-16(fp)
100048d4:	1885c83a 	sub	r2,r3,r2
100048d8:	100b883a 	mov	r5,r2
100048dc:	0006ad80 	call	10006ad8 <__mulsi3>
100048e0:	8085883a 	add	r2,r16,r2
100048e4:	10806e88 	cmpgei	r2,r2,442
100048e8:	1000021e 	bne	r2,zero,100048f4 <star_Meet_Enemy+0xb4>
        return 1;
100048ec:	00800044 	movi	r2,1
100048f0:	00000106 	br	100048f8 <star_Meet_Enemy+0xb8>
    return 0;
100048f4:	0005883a 	mov	r2,zero
}
100048f8:	e6ffff04 	addi	sp,fp,-4
100048fc:	dfc00217 	ldw	ra,8(sp)
10004900:	df000117 	ldw	fp,4(sp)
10004904:	dc000017 	ldw	r16,0(sp)
10004908:	dec00304 	addi	sp,sp,12
1000490c:	f800283a 	ret

10004910 <test_keyboard>:
#include "parameter.h"




void test_keyboard(int keycode) {
10004910:	defffd04 	addi	sp,sp,-12
10004914:	dfc00215 	stw	ra,8(sp)
10004918:	df000115 	stw	fp,4(sp)
1000491c:	df000104 	addi	fp,sp,4
10004920:	e13fff15 	stw	r4,-4(fp)

    printf("########Test KeyBoard########");
10004924:	01040074 	movhi	r4,4097
10004928:	21184304 	addi	r4,r4,24844
1000492c:	0006b300 	call	10006b30 <printf>
    switch (keycode){
10004930:	e0bfff17 	ldw	r2,-4(fp)
10004934:	10c001e0 	cmpeqi	r3,r2,7
10004938:	1800151e 	bne	r3,zero,10004990 <test_keyboard+0x80>
1000493c:	10c00208 	cmpgei	r3,r2,8
10004940:	1800031e 	bne	r3,zero,10004950 <test_keyboard+0x40>
10004944:	10800120 	cmpeqi	r2,r2,4
10004948:	10000d1e 	bne	r2,zero,10004980 <test_keyboard+0x70>
1000494c:	00001406 	br	100049a0 <test_keyboard+0x90>
10004950:	10c005a0 	cmpeqi	r3,r2,22
10004954:	1800061e 	bne	r3,zero,10004970 <test_keyboard+0x60>
10004958:	108006a0 	cmpeqi	r2,r2,26
1000495c:	10001026 	beq	r2,zero,100049a0 <test_keyboard+0x90>
        case 0x001a:  // h1A, "w"
            REG_0_MAP_INFO = 1 << 16;
10004960:	d09b2617 	ldw	r2,27800(gp)
10004964:	00c00074 	movhi	r3,1
10004968:	10c00015 	stw	r3,0(r2)
            break;
1000496c:	00000f06 	br	100049ac <test_keyboard+0x9c>
        case 0x0016:  // h16, "s"
            REG_0_MAP_INFO = 2 << 16;
10004970:	d09b2617 	ldw	r2,27800(gp)
10004974:	00c000b4 	movhi	r3,2
10004978:	10c00015 	stw	r3,0(r2)
            break;
1000497c:	00000b06 	br	100049ac <test_keyboard+0x9c>
        case 0x0004:   // h04, "a"
            REG_0_MAP_INFO = 1 << 16;
10004980:	d09b2617 	ldw	r2,27800(gp)
10004984:	00c00074 	movhi	r3,1
10004988:	10c00015 	stw	r3,0(r2)
            break;
1000498c:	00000706 	br	100049ac <test_keyboard+0x9c>
        case 0x0007:   // h07, "d"
            REG_0_MAP_INFO = 2 << 16;
10004990:	d09b2617 	ldw	r2,27800(gp)
10004994:	00c000b4 	movhi	r3,2
10004998:	10c00015 	stw	r3,0(r2)
            break;
1000499c:	00000306 	br	100049ac <test_keyboard+0x9c>
        default:
            REG_0_MAP_INFO = 0 << 16;
100049a0:	d09b2617 	ldw	r2,27800(gp)
100049a4:	10000015 	stw	zero,0(r2)
            break;
100049a8:	0001883a 	nop
    }
    printf("######### End Test ##########");
100049ac:	01040074 	movhi	r4,4097
100049b0:	21184b04 	addi	r4,r4,24876
100049b4:	0006b300 	call	10006b30 <printf>
}
100049b8:	0001883a 	nop
100049bc:	e037883a 	mov	sp,fp
100049c0:	dfc00117 	ldw	ra,4(sp)
100049c4:	df000017 	ldw	fp,0(sp)
100049c8:	dec00204 	addi	sp,sp,8
100049cc:	f800283a 	ret

100049d0 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
100049d0:	defffc04 	addi	sp,sp,-16
100049d4:	dfc00315 	stw	ra,12(sp)
100049d8:	df000215 	stw	fp,8(sp)
100049dc:	df000204 	addi	fp,sp,8
100049e0:	2007883a 	mov	r3,r4
100049e4:	2805883a 	mov	r2,r5
100049e8:	e0fffe0d 	sth	r3,-8(fp)
100049ec:	e0bfff0d 	sth	r2,-4(fp)
	//write address of registers to HDI
	IO_write(HPI_ADDR, Address);
100049f0:	e0bffe0b 	ldhu	r2,-8(fp)
100049f4:	100b883a 	mov	r5,r2
100049f8:	01000084 	movi	r4,2
100049fc:	00015f40 	call	100015f4 <IO_write>

	//write data to address in HDI
	IO_write(HPI_DATA, Data);
10004a00:	e0bfff0b 	ldhu	r2,-4(fp)
10004a04:	100b883a 	mov	r5,r2
10004a08:	0009883a 	mov	r4,zero
10004a0c:	00015f40 	call	100015f4 <IO_write>
}
10004a10:	0001883a 	nop
10004a14:	e037883a 	mov	sp,fp
10004a18:	dfc00117 	ldw	ra,4(sp)
10004a1c:	df000017 	ldw	fp,0(sp)
10004a20:	dec00204 	addi	sp,sp,8
10004a24:	f800283a 	ret

10004a28 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10004a28:	defffd04 	addi	sp,sp,-12
10004a2c:	dfc00215 	stw	ra,8(sp)
10004a30:	df000115 	stw	fp,4(sp)
10004a34:	df000104 	addi	fp,sp,4
10004a38:	2005883a 	mov	r2,r4
10004a3c:	e0bfff0d 	sth	r2,-4(fp)
	//write address of registers to HDI
	IO_write(HPI_ADDR, Address);
10004a40:	e0bfff0b 	ldhu	r2,-4(fp)
10004a44:	100b883a 	mov	r5,r2
10004a48:	01000084 	movi	r4,2
10004a4c:	00015f40 	call	100015f4 <IO_write>

	//read the data stored in HPI address and return the value
	return IO_read(HPI_DATA);
10004a50:	0009883a 	mov	r4,zero
10004a54:	00016700 	call	10001670 <IO_read>
}
10004a58:	e037883a 	mov	sp,fp
10004a5c:	dfc00117 	ldw	ra,4(sp)
10004a60:	df000017 	ldw	fp,0(sp)
10004a64:	dec00204 	addi	sp,sp,8
10004a68:	f800283a 	ret

10004a6c <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10004a6c:	defffe04 	addi	sp,sp,-8
10004a70:	dfc00115 	stw	ra,4(sp)
10004a74:	df000015 	stw	fp,0(sp)
10004a78:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
10004a7c:	017e9414 	movui	r5,64080
10004a80:	01000044 	movi	r4,1
10004a84:	00015f40 	call	100015f4 <IO_write>
	usleep(100000);
10004a88:	010000b4 	movhi	r4,2
10004a8c:	2121a804 	addi	r4,r4,-31072
10004a90:	00140bc0 	call	100140bc <usleep>
	printf("[USB INIT]:reset finished!\n");
10004a94:	01040074 	movhi	r4,4097
10004a98:	21185304 	addi	r4,r4,24908
10004a9c:	0006c2c0 	call	10006c2c <puts>

	usleep(500000);
10004aa0:	01000234 	movhi	r4,8
10004aa4:	21284804 	addi	r4,r4,-24288
10004aa8:	00140bc0 	call	100140bc <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
10004aac:	01040074 	movhi	r4,4097
10004ab0:	21185a04 	addi	r4,r4,24936
10004ab4:	0006c2c0 	call	10006c2c <puts>
	IO_read(HPI_MAILBOX);
10004ab8:	01000044 	movi	r4,1
10004abc:	00016700 	call	10001670 <IO_read>
	IO_read(HPI_STATUS);
10004ac0:	010000c4 	movi	r4,3
10004ac4:	00016700 	call	10001670 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10004ac8:	01005104 	movi	r4,324
10004acc:	0004a280 	call	10004a28 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10004ad0:	000b883a 	mov	r5,zero
10004ad4:	01005104 	movi	r4,324
10004ad8:	00049d00 	call	100049d0 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
10004adc:	01005204 	movi	r4,328
10004ae0:	0004a280 	call	10004a28 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10004ae4:	000b883a 	mov	r5,zero
10004ae8:	01005204 	movi	r4,328
10004aec:	00049d00 	call	100049d0 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10004af0:	017fffd4 	movui	r5,65535
10004af4:	01302414 	movui	r4,49296
10004af8:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
10004afc:	017fffd4 	movui	r5,65535
10004b00:	01302c14 	movui	r4,49328
10004b04:	00049d00 	call	100049d0 <UsbWrite>
}
10004b08:	0001883a 	nop
10004b0c:	e037883a 	mov	sp,fp
10004b10:	dfc00117 	ldw	ra,4(sp)
10004b14:	df000017 	ldw	fp,0(sp)
10004b18:	dec00204 	addi	sp,sp,8
10004b1c:	f800283a 	ret

10004b20 <UsbSetAddress>:


void UsbSetAddress()
{
10004b20:	defffe04 	addi	sp,sp,-8
10004b24:	dfc00115 	stw	ra,4(sp)
10004b28:	df000015 	stw	fp,0(sp)
10004b2c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10004b30:	01414004 	movi	r5,1280
10004b34:	01000084 	movi	r4,2
10004b38:	00015f40 	call	100015f4 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
10004b3c:	01414304 	movi	r5,1292
10004b40:	0009883a 	mov	r4,zero
10004b44:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10004b48:	01400204 	movi	r5,8
10004b4c:	0009883a 	mov	r4,zero
10004b50:	00015f40 	call	100015f4 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
10004b54:	01403404 	movi	r5,208
10004b58:	0009883a 	mov	r4,zero
10004b5c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10004b60:	01400044 	movi	r5,1
10004b64:	0009883a 	mov	r4,zero
10004b68:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10004b6c:	014004c4 	movi	r5,19
10004b70:	0009883a 	mov	r4,zero
10004b74:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10004b78:	01414504 	movi	r5,1300
10004b7c:	0009883a 	mov	r4,zero
10004b80:	00015f40 	call	100015f4 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
10004b84:	01414004 	movi	r5,1280
10004b88:	0009883a 	mov	r4,zero
10004b8c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0002);
10004b90:	01400084 	movi	r5,2
10004b94:	0009883a 	mov	r4,zero
10004b98:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10004b9c:	000b883a 	mov	r5,zero
10004ba0:	0009883a 	mov	r4,zero
10004ba4:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10004ba8:	000b883a 	mov	r5,zero
10004bac:	0009883a 	mov	r4,zero
10004bb0:	00015f40 	call	100015f4 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10004bb4:	000b883a 	mov	r5,zero
10004bb8:	0009883a 	mov	r4,zero
10004bbc:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//
10004bc0:	000b883a 	mov	r5,zero
10004bc4:	0009883a 	mov	r4,zero
10004bc8:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0090);//
10004bcc:	01402404 	movi	r5,144
10004bd0:	0009883a 	mov	r4,zero
10004bd4:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
10004bd8:	01401044 	movi	r5,65
10004bdc:	0009883a 	mov	r4,zero
10004be0:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10004be4:	014004c4 	movi	r5,19
10004be8:	0009883a 	mov	r4,zero
10004bec:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10004bf0:	000b883a 	mov	r5,zero
10004bf4:	0009883a 	mov	r4,zero
10004bf8:	00015f40 	call	100015f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10004bfc:	01414004 	movi	r5,1280
10004c00:	01006c04 	movi	r4,432
10004c04:	00049d00 	call	100049d0 <UsbWrite>
}
10004c08:	0001883a 	nop
10004c0c:	e037883a 	mov	sp,fp
10004c10:	dfc00117 	ldw	ra,4(sp)
10004c14:	df000017 	ldw	fp,0(sp)
10004c18:	dec00204 	addi	sp,sp,8
10004c1c:	f800283a 	ret

10004c20 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
10004c20:	defffe04 	addi	sp,sp,-8
10004c24:	dfc00115 	stw	ra,4(sp)
10004c28:	df000015 	stw	fp,0(sp)
10004c2c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10004c30:	01414004 	movi	r5,1280
10004c34:	01000084 	movi	r4,2
10004c38:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10004c3c:	01414304 	movi	r5,1292
10004c40:	0009883a 	mov	r4,zero
10004c44:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10004c48:	01400204 	movi	r5,8
10004c4c:	0009883a 	mov	r4,zero
10004c50:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10004c54:	0140b404 	movi	r5,720
10004c58:	0009883a 	mov	r4,zero
10004c5c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10004c60:	01400044 	movi	r5,1
10004c64:	0009883a 	mov	r4,zero
10004c68:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10004c6c:	014004c4 	movi	r5,19
10004c70:	0009883a 	mov	r4,zero
10004c74:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10004c78:	01414504 	movi	r5,1300
10004c7c:	0009883a 	mov	r4,zero
10004c80:	00015f40 	call	100015f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10004c84:	0141a004 	movi	r5,1664
10004c88:	0009883a 	mov	r4,zero
10004c8c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
10004c90:	01404004 	movi	r5,256
10004c94:	0009883a 	mov	r4,zero
10004c98:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10004c9c:	000b883a 	mov	r5,zero
10004ca0:	0009883a 	mov	r4,zero
10004ca4:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
10004ca8:	01400204 	movi	r5,8
10004cac:	0009883a 	mov	r4,zero
10004cb0:	00015f40 	call	100015f4 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
10004cb4:	01414b04 	movi	r5,1324
10004cb8:	0009883a 	mov	r4,zero
10004cbc:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//
10004cc0:	01400204 	movi	r5,8
10004cc4:	0009883a 	mov	r4,zero
10004cc8:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//
10004ccc:	0140a404 	movi	r5,656
10004cd0:	0009883a 	mov	r4,zero
10004cd4:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
10004cd8:	01401044 	movi	r5,65
10004cdc:	0009883a 	mov	r4,zero
10004ce0:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10004ce4:	014004c4 	movi	r5,19
10004ce8:	0009883a 	mov	r4,zero
10004cec:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0520);
10004cf0:	01414804 	movi	r5,1312
10004cf4:	0009883a 	mov	r4,zero
10004cf8:	00015f40 	call	100015f4 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
10004cfc:	000b883a 	mov	r5,zero
10004d00:	0009883a 	mov	r4,zero
10004d04:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10004d08:	000b883a 	mov	r5,zero
10004d0c:	0009883a 	mov	r4,zero
10004d10:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
10004d14:	01408404 	movi	r5,528
10004d18:	0009883a 	mov	r4,zero
10004d1c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
10004d20:	01401044 	movi	r5,65
10004d24:	0009883a 	mov	r4,zero
10004d28:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10004d2c:	014004c4 	movi	r5,19
10004d30:	0009883a 	mov	r4,zero
10004d34:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10004d38:	000b883a 	mov	r5,zero
10004d3c:	0009883a 	mov	r4,zero
10004d40:	00015f40 	call	100015f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10004d44:	01414004 	movi	r5,1280
10004d48:	01006c04 	movi	r4,432
10004d4c:	00049d00 	call	100049d0 <UsbWrite>
}
10004d50:	0001883a 	nop
10004d54:	e037883a 	mov	sp,fp
10004d58:	dfc00117 	ldw	ra,4(sp)
10004d5c:	df000017 	ldw	fp,0(sp)
10004d60:	dec00204 	addi	sp,sp,8
10004d64:	f800283a 	ret

10004d68 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
10004d68:	defffe04 	addi	sp,sp,-8
10004d6c:	dfc00115 	stw	ra,4(sp)
10004d70:	df000015 	stw	fp,0(sp)
10004d74:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10004d78:	01414004 	movi	r5,1280
10004d7c:	01000084 	movi	r4,2
10004d80:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10004d84:	01414304 	movi	r5,1292
10004d88:	0009883a 	mov	r4,zero
10004d8c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10004d90:	01400204 	movi	r5,8
10004d94:	0009883a 	mov	r4,zero
10004d98:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10004d9c:	0140b404 	movi	r5,720
10004da0:	0009883a 	mov	r4,zero
10004da4:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10004da8:	01400044 	movi	r5,1
10004dac:	0009883a 	mov	r4,zero
10004db0:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10004db4:	014004c4 	movi	r5,19
10004db8:	0009883a 	mov	r4,zero
10004dbc:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10004dc0:	01414504 	movi	r5,1300
10004dc4:	0009883a 	mov	r4,zero
10004dc8:	00015f40 	call	100015f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10004dcc:	0141a004 	movi	r5,1664
10004dd0:	0009883a 	mov	r4,zero
10004dd4:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
10004dd8:	01404004 	movi	r5,256
10004ddc:	0009883a 	mov	r4,zero
10004de0:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10004de4:	000b883a 	mov	r5,zero
10004de8:	0009883a 	mov	r4,zero
10004dec:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
10004df0:	01400484 	movi	r5,18
10004df4:	0009883a 	mov	r4,zero
10004df8:	00015f40 	call	100015f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10004dfc:	01415104 	movi	r5,1348
10004e00:	0009883a 	mov	r4,zero
10004e04:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10004e08:	01400204 	movi	r5,8
10004e0c:	0009883a 	mov	r4,zero
10004e10:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10004e14:	0140a404 	movi	r5,656
10004e18:	0009883a 	mov	r4,zero
10004e1c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10004e20:	01401044 	movi	r5,65
10004e24:	0009883a 	mov	r4,zero
10004e28:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10004e2c:	014004c4 	movi	r5,19
10004e30:	0009883a 	mov	r4,zero
10004e34:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10004e38:	01414804 	movi	r5,1312
10004e3c:	0009883a 	mov	r4,zero
10004e40:	00015f40 	call	100015f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10004e44:	01415304 	movi	r5,1356
10004e48:	0009883a 	mov	r4,zero
10004e4c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10004e50:	01400204 	movi	r5,8
10004e54:	0009883a 	mov	r4,zero
10004e58:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10004e5c:	0140a404 	movi	r5,656
10004e60:	0009883a 	mov	r4,zero
10004e64:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
10004e68:	01400044 	movi	r5,1
10004e6c:	0009883a 	mov	r4,zero
10004e70:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10004e74:	014004c4 	movi	r5,19
10004e78:	0009883a 	mov	r4,zero
10004e7c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10004e80:	01414b04 	movi	r5,1324
10004e84:	0009883a 	mov	r4,zero
10004e88:	00015f40 	call	100015f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
10004e8c:	01415504 	movi	r5,1364
10004e90:	0009883a 	mov	r4,zero
10004e94:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
10004e98:	01400084 	movi	r5,2
10004e9c:	0009883a 	mov	r4,zero
10004ea0:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10004ea4:	0140a404 	movi	r5,656
10004ea8:	0009883a 	mov	r4,zero
10004eac:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10004eb0:	01401044 	movi	r5,65
10004eb4:	0009883a 	mov	r4,zero
10004eb8:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10004ebc:	014004c4 	movi	r5,19
10004ec0:	0009883a 	mov	r4,zero
10004ec4:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10004ec8:	01414e04 	movi	r5,1336
10004ecc:	0009883a 	mov	r4,zero
10004ed0:	00015f40 	call	100015f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10004ed4:	000b883a 	mov	r5,zero
10004ed8:	0009883a 	mov	r4,zero
10004edc:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10004ee0:	000b883a 	mov	r5,zero
10004ee4:	0009883a 	mov	r4,zero
10004ee8:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10004eec:	01408404 	movi	r5,528
10004ef0:	0009883a 	mov	r4,zero
10004ef4:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
10004ef8:	01401044 	movi	r5,65
10004efc:	0009883a 	mov	r4,zero
10004f00:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10004f04:	014004c4 	movi	r5,19
10004f08:	0009883a 	mov	r4,zero
10004f0c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10004f10:	000b883a 	mov	r5,zero
10004f14:	0009883a 	mov	r4,zero
10004f18:	00015f40 	call	100015f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10004f1c:	01414004 	movi	r5,1280
10004f20:	01006c04 	movi	r4,432
10004f24:	00049d00 	call	100049d0 <UsbWrite>
}
10004f28:	0001883a 	nop
10004f2c:	e037883a 	mov	sp,fp
10004f30:	dfc00117 	ldw	ra,4(sp)
10004f34:	df000017 	ldw	fp,0(sp)
10004f38:	dec00204 	addi	sp,sp,8
10004f3c:	f800283a 	ret

10004f40 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
10004f40:	defffe04 	addi	sp,sp,-8
10004f44:	dfc00115 	stw	ra,4(sp)
10004f48:	df000015 	stw	fp,0(sp)
10004f4c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10004f50:	01414004 	movi	r5,1280
10004f54:	01000084 	movi	r4,2
10004f58:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10004f5c:	01414304 	movi	r5,1292
10004f60:	0009883a 	mov	r4,zero
10004f64:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10004f68:	01400204 	movi	r5,8
10004f6c:	0009883a 	mov	r4,zero
10004f70:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10004f74:	0140b404 	movi	r5,720
10004f78:	0009883a 	mov	r4,zero
10004f7c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10004f80:	01400044 	movi	r5,1
10004f84:	0009883a 	mov	r4,zero
10004f88:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10004f8c:	014004c4 	movi	r5,19
10004f90:	0009883a 	mov	r4,zero
10004f94:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10004f98:	01414504 	movi	r5,1300
10004f9c:	0009883a 	mov	r4,zero
10004fa0:	00015f40 	call	100015f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10004fa4:	0141a004 	movi	r5,1664
10004fa8:	0009883a 	mov	r4,zero
10004fac:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10004fb0:	01408004 	movi	r5,512
10004fb4:	0009883a 	mov	r4,zero
10004fb8:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10004fbc:	000b883a 	mov	r5,zero
10004fc0:	0009883a 	mov	r4,zero
10004fc4:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10004fc8:	01400244 	movi	r5,9
10004fcc:	0009883a 	mov	r4,zero
10004fd0:	00015f40 	call	100015f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10004fd4:	01415104 	movi	r5,1348
10004fd8:	0009883a 	mov	r4,zero
10004fdc:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10004fe0:	01400204 	movi	r5,8
10004fe4:	0009883a 	mov	r4,zero
10004fe8:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10004fec:	0140a404 	movi	r5,656
10004ff0:	0009883a 	mov	r4,zero
10004ff4:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10004ff8:	01401044 	movi	r5,65
10004ffc:	0009883a 	mov	r4,zero
10005000:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10005004:	014004c4 	movi	r5,19
10005008:	0009883a 	mov	r4,zero
1000500c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10005010:	01414804 	movi	r5,1312
10005014:	0009883a 	mov	r4,zero
10005018:	00015f40 	call	100015f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
1000501c:	01415304 	movi	r5,1356
10005020:	0009883a 	mov	r4,zero
10005024:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
10005028:	01400044 	movi	r5,1
1000502c:	0009883a 	mov	r4,zero
10005030:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10005034:	0140a404 	movi	r5,656
10005038:	0009883a 	mov	r4,zero
1000503c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10005040:	01400044 	movi	r5,1
10005044:	0009883a 	mov	r4,zero
10005048:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
1000504c:	014004c4 	movi	r5,19
10005050:	0009883a 	mov	r4,zero
10005054:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10005058:	01414b04 	movi	r5,1324
1000505c:	0009883a 	mov	r4,zero
10005060:	00015f40 	call	100015f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10005064:	000b883a 	mov	r5,zero
10005068:	0009883a 	mov	r4,zero
1000506c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10005070:	000b883a 	mov	r5,zero
10005074:	0009883a 	mov	r4,zero
10005078:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
1000507c:	01408404 	movi	r5,528
10005080:	0009883a 	mov	r4,zero
10005084:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10005088:	01401044 	movi	r5,65
1000508c:	0009883a 	mov	r4,zero
10005090:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10005094:	014004c4 	movi	r5,19
10005098:	0009883a 	mov	r4,zero
1000509c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
100050a0:	000b883a 	mov	r5,zero
100050a4:	0009883a 	mov	r4,zero
100050a8:	00015f40 	call	100015f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100050ac:	01414004 	movi	r5,1280
100050b0:	01006c04 	movi	r4,432
100050b4:	00049d00 	call	100049d0 <UsbWrite>
}
100050b8:	0001883a 	nop
100050bc:	e037883a 	mov	sp,fp
100050c0:	dfc00117 	ldw	ra,4(sp)
100050c4:	df000017 	ldw	fp,0(sp)
100050c8:	dec00204 	addi	sp,sp,8
100050cc:	f800283a 	ret

100050d0 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
100050d0:	defffe04 	addi	sp,sp,-8
100050d4:	dfc00115 	stw	ra,4(sp)
100050d8:	df000015 	stw	fp,0(sp)
100050dc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100050e0:	01414004 	movi	r5,1280
100050e4:	01000084 	movi	r4,2
100050e8:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
100050ec:	01414304 	movi	r5,1292
100050f0:	0009883a 	mov	r4,zero
100050f4:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100050f8:	01400204 	movi	r5,8
100050fc:	0009883a 	mov	r4,zero
10005100:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10005104:	0140b404 	movi	r5,720
10005108:	0009883a 	mov	r4,zero
1000510c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10005110:	01400044 	movi	r5,1
10005114:	0009883a 	mov	r4,zero
10005118:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000511c:	014004c4 	movi	r5,19
10005120:	0009883a 	mov	r4,zero
10005124:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10005128:	01414504 	movi	r5,1300
1000512c:	0009883a 	mov	r4,zero
10005130:	00015f40 	call	100015f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10005134:	0141a004 	movi	r5,1664
10005138:	0009883a 	mov	r4,zero
1000513c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10005140:	01408004 	movi	r5,512
10005144:	0009883a 	mov	r4,zero
10005148:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
1000514c:	000b883a 	mov	r5,zero
10005150:	0009883a 	mov	r4,zero
10005154:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
10005158:	01403fc4 	movi	r5,255
1000515c:	0009883a 	mov	r4,zero
10005160:	00015f40 	call	100015f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
10005164:	01415704 	movi	r5,1372
10005168:	0009883a 	mov	r4,zero
1000516c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10005170:	01400204 	movi	r5,8
10005174:	0009883a 	mov	r4,zero
10005178:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
1000517c:	0140a404 	movi	r5,656
10005180:	0009883a 	mov	r4,zero
10005184:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10005188:	01401044 	movi	r5,65
1000518c:	0009883a 	mov	r4,zero
10005190:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10005194:	014004c4 	movi	r5,19
10005198:	0009883a 	mov	r4,zero
1000519c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100051a0:	01414804 	movi	r5,1312
100051a4:	0009883a 	mov	r4,zero
100051a8:	00015f40 	call	100015f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
100051ac:	01415904 	movi	r5,1380
100051b0:	0009883a 	mov	r4,zero
100051b4:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100051b8:	01400204 	movi	r5,8
100051bc:	0009883a 	mov	r4,zero
100051c0:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100051c4:	0140a404 	movi	r5,656
100051c8:	0009883a 	mov	r4,zero
100051cc:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100051d0:	01400044 	movi	r5,1
100051d4:	0009883a 	mov	r4,zero
100051d8:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100051dc:	014004c4 	movi	r5,19
100051e0:	0009883a 	mov	r4,zero
100051e4:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100051e8:	01414b04 	movi	r5,1324
100051ec:	0009883a 	mov	r4,zero
100051f0:	00015f40 	call	100015f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
100051f4:	01415b04 	movi	r5,1388
100051f8:	0009883a 	mov	r4,zero
100051fc:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10005200:	01400204 	movi	r5,8
10005204:	0009883a 	mov	r4,zero
10005208:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
1000520c:	0140a404 	movi	r5,656
10005210:	0009883a 	mov	r4,zero
10005214:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10005218:	01401044 	movi	r5,65
1000521c:	0009883a 	mov	r4,zero
10005220:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10005224:	014004c4 	movi	r5,19
10005228:	0009883a 	mov	r4,zero
1000522c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10005230:	01414e04 	movi	r5,1336
10005234:	0009883a 	mov	r4,zero
10005238:	00015f40 	call	100015f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
1000523c:	01415d04 	movi	r5,1396
10005240:	0009883a 	mov	r4,zero
10005244:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10005248:	01400204 	movi	r5,8
1000524c:	0009883a 	mov	r4,zero
10005250:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10005254:	0140a404 	movi	r5,656
10005258:	0009883a 	mov	r4,zero
1000525c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10005260:	01400044 	movi	r5,1
10005264:	0009883a 	mov	r4,zero
10005268:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
1000526c:	014004c4 	movi	r5,19
10005270:	0009883a 	mov	r4,zero
10005274:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10005278:	01415104 	movi	r5,1348
1000527c:	0009883a 	mov	r4,zero
10005280:	00015f40 	call	100015f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10005284:	01415f04 	movi	r5,1404
10005288:	0009883a 	mov	r4,zero
1000528c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
10005290:	01400084 	movi	r5,2
10005294:	0009883a 	mov	r4,zero
10005298:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
1000529c:	0140a404 	movi	r5,656
100052a0:	0009883a 	mov	r4,zero
100052a4:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
100052a8:	01401044 	movi	r5,65
100052ac:	0009883a 	mov	r4,zero
100052b0:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100052b4:	014004c4 	movi	r5,19
100052b8:	0009883a 	mov	r4,zero
100052bc:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
100052c0:	01415404 	movi	r5,1360
100052c4:	0009883a 	mov	r4,zero
100052c8:	00015f40 	call	100015f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
100052cc:	000b883a 	mov	r5,zero
100052d0:	0009883a 	mov	r4,zero
100052d4:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
100052d8:	000b883a 	mov	r5,zero
100052dc:	0009883a 	mov	r4,zero
100052e0:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
100052e4:	01408404 	movi	r5,528
100052e8:	0009883a 	mov	r4,zero
100052ec:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
100052f0:	01401044 	movi	r5,65
100052f4:	0009883a 	mov	r4,zero
100052f8:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100052fc:	014004c4 	movi	r5,19
10005300:	0009883a 	mov	r4,zero
10005304:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10005308:	000b883a 	mov	r5,zero
1000530c:	0009883a 	mov	r4,zero
10005310:	00015f40 	call	100015f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10005314:	01414004 	movi	r5,1280
10005318:	01006c04 	movi	r4,432
1000531c:	00049d00 	call	100049d0 <UsbWrite>
}
10005320:	0001883a 	nop
10005324:	e037883a 	mov	sp,fp
10005328:	dfc00117 	ldw	ra,4(sp)
1000532c:	df000017 	ldw	fp,0(sp)
10005330:	dec00204 	addi	sp,sp,8
10005334:	f800283a 	ret

10005338 <UsbSetConfig>:

void UsbSetConfig()
{
10005338:	defffe04 	addi	sp,sp,-8
1000533c:	dfc00115 	stw	ra,4(sp)
10005340:	df000015 	stw	fp,0(sp)
10005344:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10005348:	01414004 	movi	r5,1280
1000534c:	01000084 	movi	r4,2
10005350:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10005354:	01414304 	movi	r5,1292
10005358:	0009883a 	mov	r4,zero
1000535c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10005360:	01400204 	movi	r5,8
10005364:	0009883a 	mov	r4,zero
10005368:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
1000536c:	0140b404 	movi	r5,720
10005370:	0009883a 	mov	r4,zero
10005374:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10005378:	01400044 	movi	r5,1
1000537c:	0009883a 	mov	r4,zero
10005380:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10005384:	014004c4 	movi	r5,19
10005388:	0009883a 	mov	r4,zero
1000538c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10005390:	01414504 	movi	r5,1300
10005394:	0009883a 	mov	r4,zero
10005398:	00015f40 	call	100015f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
1000539c:	01424004 	movi	r5,2304
100053a0:	0009883a 	mov	r4,zero
100053a4:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
100053a8:	01400044 	movi	r5,1
100053ac:	0009883a 	mov	r4,zero
100053b0:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
100053b4:	000b883a 	mov	r5,zero
100053b8:	0009883a 	mov	r4,zero
100053bc:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
100053c0:	000b883a 	mov	r5,zero
100053c4:	0009883a 	mov	r4,zero
100053c8:	00015f40 	call	100015f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
100053cc:	000b883a 	mov	r5,zero
100053d0:	0009883a 	mov	r4,zero
100053d4:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
100053d8:	000b883a 	mov	r5,zero
100053dc:	0009883a 	mov	r4,zero
100053e0:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
100053e4:	0140a404 	movi	r5,656
100053e8:	0009883a 	mov	r4,zero
100053ec:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
100053f0:	01401044 	movi	r5,65
100053f4:	0009883a 	mov	r4,zero
100053f8:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100053fc:	014004c4 	movi	r5,19
10005400:	0009883a 	mov	r4,zero
10005404:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10005408:	000b883a 	mov	r5,zero
1000540c:	0009883a 	mov	r4,zero
10005410:	00015f40 	call	100015f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10005414:	01414004 	movi	r5,1280
10005418:	01006c04 	movi	r4,432
1000541c:	00049d00 	call	100049d0 <UsbWrite>

}
10005420:	0001883a 	nop
10005424:	e037883a 	mov	sp,fp
10005428:	dfc00117 	ldw	ra,4(sp)
1000542c:	df000017 	ldw	fp,0(sp)
10005430:	dec00204 	addi	sp,sp,8
10005434:	f800283a 	ret

10005438 <UsbClassRequest>:

void UsbClassRequest()
{
10005438:	defffe04 	addi	sp,sp,-8
1000543c:	dfc00115 	stw	ra,4(sp)
10005440:	df000015 	stw	fp,0(sp)
10005444:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10005448:	01414004 	movi	r5,1280
1000544c:	01000084 	movi	r4,2
10005450:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10005454:	01414304 	movi	r5,1292
10005458:	0009883a 	mov	r4,zero
1000545c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10005460:	01400204 	movi	r5,8
10005464:	0009883a 	mov	r4,zero
10005468:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
1000546c:	0140b404 	movi	r5,720
10005470:	0009883a 	mov	r4,zero
10005474:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10005478:	01400044 	movi	r5,1
1000547c:	0009883a 	mov	r4,zero
10005480:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10005484:	014004c4 	movi	r5,19
10005488:	0009883a 	mov	r4,zero
1000548c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10005490:	01414504 	movi	r5,1300
10005494:	0009883a 	mov	r4,zero
10005498:	00015f40 	call	100015f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
1000549c:	01428844 	movi	r5,2593
100054a0:	0009883a 	mov	r4,zero
100054a4:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
100054a8:	000b883a 	mov	r5,zero
100054ac:	0009883a 	mov	r4,zero
100054b0:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
100054b4:	000b883a 	mov	r5,zero
100054b8:	0009883a 	mov	r4,zero
100054bc:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
100054c0:	000b883a 	mov	r5,zero
100054c4:	0009883a 	mov	r4,zero
100054c8:	00015f40 	call	100015f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
100054cc:	000b883a 	mov	r5,zero
100054d0:	0009883a 	mov	r4,zero
100054d4:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
100054d8:	000b883a 	mov	r5,zero
100054dc:	0009883a 	mov	r4,zero
100054e0:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
100054e4:	0140a404 	movi	r5,656
100054e8:	0009883a 	mov	r4,zero
100054ec:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
100054f0:	01401044 	movi	r5,65
100054f4:	0009883a 	mov	r4,zero
100054f8:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100054fc:	014004c4 	movi	r5,19
10005500:	0009883a 	mov	r4,zero
10005504:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10005508:	000b883a 	mov	r5,zero
1000550c:	0009883a 	mov	r4,zero
10005510:	00015f40 	call	100015f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10005514:	01414004 	movi	r5,1280
10005518:	01006c04 	movi	r4,432
1000551c:	00049d00 	call	100049d0 <UsbWrite>
}
10005520:	0001883a 	nop
10005524:	e037883a 	mov	sp,fp
10005528:	dfc00117 	ldw	ra,4(sp)
1000552c:	df000017 	ldw	fp,0(sp)
10005530:	dec00204 	addi	sp,sp,8
10005534:	f800283a 	ret

10005538 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10005538:	defffe04 	addi	sp,sp,-8
1000553c:	dfc00115 	stw	ra,4(sp)
10005540:	df000015 	stw	fp,0(sp)
10005544:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10005548:	01414004 	movi	r5,1280
1000554c:	01000084 	movi	r4,2
10005550:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10005554:	01414304 	movi	r5,1292
10005558:	0009883a 	mov	r4,zero
1000555c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10005560:	01400204 	movi	r5,8
10005564:	0009883a 	mov	r4,zero
10005568:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
1000556c:	0140b404 	movi	r5,720
10005570:	0009883a 	mov	r4,zero
10005574:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10005578:	01400044 	movi	r5,1
1000557c:	0009883a 	mov	r4,zero
10005580:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10005584:	014004c4 	movi	r5,19
10005588:	0009883a 	mov	r4,zero
1000558c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10005590:	01414504 	movi	r5,1300
10005594:	0009883a 	mov	r4,zero
10005598:	00015f40 	call	100015f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
1000559c:	0141a044 	movi	r5,1665
100055a0:	0009883a 	mov	r4,zero
100055a4:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
100055a8:	01484004 	movi	r5,8448
100055ac:	0009883a 	mov	r4,zero
100055b0:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100055b4:	000b883a 	mov	r5,zero
100055b8:	0009883a 	mov	r4,zero
100055bc:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
100055c0:	01401ec4 	movi	r5,123
100055c4:	0009883a 	mov	r4,zero
100055c8:	00015f40 	call	100015f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
100055cc:	01415104 	movi	r5,1348
100055d0:	0009883a 	mov	r4,zero
100055d4:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100055d8:	01400204 	movi	r5,8
100055dc:	0009883a 	mov	r4,zero
100055e0:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100055e4:	0140a404 	movi	r5,656
100055e8:	0009883a 	mov	r4,zero
100055ec:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100055f0:	01401044 	movi	r5,65
100055f4:	0009883a 	mov	r4,zero
100055f8:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100055fc:	014004c4 	movi	r5,19
10005600:	0009883a 	mov	r4,zero
10005604:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10005608:	01414804 	movi	r5,1312
1000560c:	0009883a 	mov	r4,zero
10005610:	00015f40 	call	100015f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10005614:	000b883a 	mov	r5,zero
10005618:	0009883a 	mov	r4,zero
1000561c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10005620:	000b883a 	mov	r5,zero
10005624:	0009883a 	mov	r4,zero
10005628:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
1000562c:	01408404 	movi	r5,528
10005630:	0009883a 	mov	r4,zero
10005634:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10005638:	01401044 	movi	r5,65
1000563c:	0009883a 	mov	r4,zero
10005640:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10005644:	014004c4 	movi	r5,19
10005648:	0009883a 	mov	r4,zero
1000564c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10005650:	000b883a 	mov	r5,zero
10005654:	0009883a 	mov	r4,zero
10005658:	00015f40 	call	100015f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000565c:	01414004 	movi	r5,1280
10005660:	01006c04 	movi	r4,432
10005664:	00049d00 	call	100049d0 <UsbWrite>

}
10005668:	0001883a 	nop
1000566c:	e037883a 	mov	sp,fp
10005670:	dfc00117 	ldw	ra,4(sp)
10005674:	df000017 	ldw	fp,0(sp)
10005678:	dec00204 	addi	sp,sp,8
1000567c:	f800283a 	ret

10005680 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10005680:	defffe04 	addi	sp,sp,-8
10005684:	dfc00115 	stw	ra,4(sp)
10005688:	df000015 	stw	fp,0(sp)
1000568c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10005690:	01414004 	movi	r5,1280
10005694:	01000084 	movi	r4,2
10005698:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
1000569c:	01414304 	movi	r5,1292
100056a0:	0009883a 	mov	r4,zero
100056a4:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100056a8:	01400204 	movi	r5,8
100056ac:	0009883a 	mov	r4,zero
100056b0:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100056b4:	0140b404 	movi	r5,720
100056b8:	0009883a 	mov	r4,zero
100056bc:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
100056c0:	01400044 	movi	r5,1
100056c4:	0009883a 	mov	r4,zero
100056c8:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100056cc:	014004c4 	movi	r5,19
100056d0:	0009883a 	mov	r4,zero
100056d4:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
100056d8:	01414504 	movi	r5,1300
100056dc:	0009883a 	mov	r4,zero
100056e0:	00015f40 	call	100015f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
100056e4:	0141a044 	movi	r5,1665
100056e8:	0009883a 	mov	r4,zero
100056ec:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
100056f0:	01488004 	movi	r5,8704
100056f4:	0009883a 	mov	r4,zero
100056f8:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100056fc:	000b883a 	mov	r5,zero
10005700:	0009883a 	mov	r4,zero
10005704:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10005708:	01401ec4 	movi	r5,123
1000570c:	0009883a 	mov	r4,zero
10005710:	00015f40 	call	100015f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10005714:	01416004 	movi	r5,1408
10005718:	0009883a 	mov	r4,zero
1000571c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10005720:	01400204 	movi	r5,8
10005724:	0009883a 	mov	r4,zero
10005728:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
1000572c:	0140a404 	movi	r5,656
10005730:	0009883a 	mov	r4,zero
10005734:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10005738:	01401044 	movi	r5,65
1000573c:	0009883a 	mov	r4,zero
10005740:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10005744:	014004c4 	movi	r5,19
10005748:	0009883a 	mov	r4,zero
1000574c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10005750:	01414804 	movi	r5,1312
10005754:	0009883a 	mov	r4,zero
10005758:	00015f40 	call	100015f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
1000575c:	01416204 	movi	r5,1416
10005760:	0009883a 	mov	r4,zero
10005764:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10005768:	01400204 	movi	r5,8
1000576c:	0009883a 	mov	r4,zero
10005770:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10005774:	0140a404 	movi	r5,656
10005778:	0009883a 	mov	r4,zero
1000577c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10005780:	01400044 	movi	r5,1
10005784:	0009883a 	mov	r4,zero
10005788:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
1000578c:	014004c4 	movi	r5,19
10005790:	0009883a 	mov	r4,zero
10005794:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10005798:	01414b04 	movi	r5,1324
1000579c:	0009883a 	mov	r4,zero
100057a0:	00015f40 	call	100015f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
100057a4:	01416404 	movi	r5,1424
100057a8:	0009883a 	mov	r4,zero
100057ac:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
100057b0:	01400204 	movi	r5,8
100057b4:	0009883a 	mov	r4,zero
100057b8:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100057bc:	0140a404 	movi	r5,656
100057c0:	0009883a 	mov	r4,zero
100057c4:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100057c8:	01401044 	movi	r5,65
100057cc:	0009883a 	mov	r4,zero
100057d0:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100057d4:	014004c4 	movi	r5,19
100057d8:	0009883a 	mov	r4,zero
100057dc:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
100057e0:	01414e04 	movi	r5,1336
100057e4:	0009883a 	mov	r4,zero
100057e8:	00015f40 	call	100015f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
100057ec:	01416604 	movi	r5,1432
100057f0:	0009883a 	mov	r4,zero
100057f4:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
100057f8:	01400204 	movi	r5,8
100057fc:	0009883a 	mov	r4,zero
10005800:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10005804:	0140a404 	movi	r5,656
10005808:	0009883a 	mov	r4,zero
1000580c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10005810:	01400044 	movi	r5,1
10005814:	0009883a 	mov	r4,zero
10005818:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
1000581c:	014004c4 	movi	r5,19
10005820:	0009883a 	mov	r4,zero
10005824:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10005828:	01415104 	movi	r5,1348
1000582c:	0009883a 	mov	r4,zero
10005830:	00015f40 	call	100015f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10005834:	01416804 	movi	r5,1440
10005838:	0009883a 	mov	r4,zero
1000583c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10005840:	01400204 	movi	r5,8
10005844:	0009883a 	mov	r4,zero
10005848:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
1000584c:	0140a404 	movi	r5,656
10005850:	0009883a 	mov	r4,zero
10005854:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10005858:	01401044 	movi	r5,65
1000585c:	0009883a 	mov	r4,zero
10005860:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10005864:	014004c4 	movi	r5,19
10005868:	0009883a 	mov	r4,zero
1000586c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10005870:	01415404 	movi	r5,1360
10005874:	0009883a 	mov	r4,zero
10005878:	00015f40 	call	100015f4 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
1000587c:	01416a04 	movi	r5,1448
10005880:	0009883a 	mov	r4,zero
10005884:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10005888:	01400204 	movi	r5,8
1000588c:	0009883a 	mov	r4,zero
10005890:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10005894:	0140a404 	movi	r5,656
10005898:	0009883a 	mov	r4,zero
1000589c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100058a0:	01400044 	movi	r5,1
100058a4:	0009883a 	mov	r4,zero
100058a8:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100058ac:	014004c4 	movi	r5,19
100058b0:	0009883a 	mov	r4,zero
100058b4:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
100058b8:	01415704 	movi	r5,1372
100058bc:	0009883a 	mov	r4,zero
100058c0:	00015f40 	call	100015f4 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
100058c4:	01416c04 	movi	r5,1456
100058c8:	0009883a 	mov	r4,zero
100058cc:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
100058d0:	01400204 	movi	r5,8
100058d4:	0009883a 	mov	r4,zero
100058d8:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
100058dc:	0140a404 	movi	r5,656
100058e0:	0009883a 	mov	r4,zero
100058e4:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
100058e8:	01401044 	movi	r5,65
100058ec:	0009883a 	mov	r4,zero
100058f0:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100058f4:	014004c4 	movi	r5,19
100058f8:	0009883a 	mov	r4,zero
100058fc:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10005900:	01415a04 	movi	r5,1384
10005904:	0009883a 	mov	r4,zero
10005908:	00015f40 	call	100015f4 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
1000590c:	01416e04 	movi	r5,1464
10005910:	0009883a 	mov	r4,zero
10005914:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10005918:	014000c4 	movi	r5,3
1000591c:	0009883a 	mov	r4,zero
10005920:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10005924:	0140a404 	movi	r5,656
10005928:	0009883a 	mov	r4,zero
1000592c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10005930:	01400044 	movi	r5,1
10005934:	0009883a 	mov	r4,zero
10005938:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
1000593c:	014004c4 	movi	r5,19
10005940:	0009883a 	mov	r4,zero
10005944:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10005948:	01415d04 	movi	r5,1396
1000594c:	0009883a 	mov	r4,zero
10005950:	00015f40 	call	100015f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10005954:	000b883a 	mov	r5,zero
10005958:	0009883a 	mov	r4,zero
1000595c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10005960:	000b883a 	mov	r5,zero
10005964:	0009883a 	mov	r4,zero
10005968:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
1000596c:	01408404 	movi	r5,528
10005970:	0009883a 	mov	r4,zero
10005974:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10005978:	01401044 	movi	r5,65
1000597c:	0009883a 	mov	r4,zero
10005980:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10005984:	014004c4 	movi	r5,19
10005988:	0009883a 	mov	r4,zero
1000598c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10005990:	000b883a 	mov	r5,zero
10005994:	0009883a 	mov	r4,zero
10005998:	00015f40 	call	100015f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000599c:	01414004 	movi	r5,1280
100059a0:	01006c04 	movi	r4,432
100059a4:	00049d00 	call	100049d0 <UsbWrite>

}
100059a8:	0001883a 	nop
100059ac:	e037883a 	mov	sp,fp
100059b0:	dfc00117 	ldw	ra,4(sp)
100059b4:	df000017 	ldw	fp,0(sp)
100059b8:	dec00204 	addi	sp,sp,8
100059bc:	f800283a 	ret

100059c0 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
100059c0:	defffd04 	addi	sp,sp,-12
100059c4:	dfc00215 	stw	ra,8(sp)
100059c8:	df000115 	stw	fp,4(sp)
100059cc:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
100059d0:	01005104 	movi	r4,324
100059d4:	0004a280 	call	10004a28 <UsbRead>
100059d8:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
100059dc:	000b883a 	mov	r5,zero
100059e0:	01005104 	movi	r4,324
100059e4:	00049d00 	call	100049d0 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
100059e8:	00000d06 	br	10005a20 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
100059ec:	e0bfff0b 	ldhu	r2,-4(fp)
100059f0:	10000526 	beq	r2,zero,10005a08 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
100059f4:	e0bfff0b 	ldhu	r2,-4(fp)
100059f8:	100b883a 	mov	r5,r2
100059fc:	01040074 	movhi	r4,4097
10005a00:	21186304 	addi	r4,r4,24972
10005a04:	0006b300 	call	10006b30 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10005a08:	01005104 	movi	r4,324
10005a0c:	0004a280 	call	10004a28 <UsbRead>
10005a10:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10005a14:	000b883a 	mov	r5,zero
10005a18:	01005104 	movi	r4,324
10005a1c:	00049d00 	call	100049d0 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10005a20:	e0bfff0b 	ldhu	r2,-4(fp)
10005a24:	10840018 	cmpnei	r2,r2,4096
10005a28:	103ff01e 	bne	r2,zero,100059ec <__alt_data_end+0xf80059ec>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
10005a2c:	e0bfff0b 	ldhu	r2,-4(fp)
}
10005a30:	e037883a 	mov	sp,fp
10005a34:	dfc00117 	ldw	ra,4(sp)
10005a38:	df000017 	ldw	fp,0(sp)
10005a3c:	dec00204 	addi	sp,sp,8
10005a40:	f800283a 	ret

10005a44 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10005a44:	defffd04 	addi	sp,sp,-12
10005a48:	dfc00215 	stw	ra,8(sp)
10005a4c:	df000115 	stw	fp,4(sp)
10005a50:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10005a54:	010000c4 	movi	r4,3
10005a58:	00016700 	call	10001670 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
10005a5c:	01005104 	movi	r4,324
10005a60:	0004a280 	call	10004a28 <UsbRead>
10005a64:	10bfffcc 	andi	r2,r2,65535
10005a68:	10840018 	cmpnei	r2,r2,4096
10005a6c:	1000091e 	bne	r2,zero,10005a94 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10005a70:	000b883a 	mov	r5,zero
10005a74:	01005104 	movi	r4,324
10005a78:	00049d00 	call	100049d0 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005a7c:	0001883a 	nop
10005a80:	010000c4 	movi	r4,3
10005a84:	00016700 	call	10001670 <IO_read>
10005a88:	10bfffcc 	andi	r2,r2,65535
10005a8c:	1080040c 	andi	r2,r2,16
10005a90:	103ffb26 	beq	r2,zero,10005a80 <__alt_data_end+0xf8005a80>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10005a94:	01414204 	movi	r5,1288
10005a98:	01000084 	movi	r4,2
10005a9c:	00015f40 	call	100015f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10005aa0:	0009883a 	mov	r4,zero
10005aa4:	00016700 	call	10001670 <IO_read>
10005aa8:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
10005aac:	e0bfff0b 	ldhu	r2,-4(fp)
}
10005ab0:	e037883a 	mov	sp,fp
10005ab4:	dfc00117 	ldw	ra,4(sp)
10005ab8:	df000017 	ldw	fp,0(sp)
10005abc:	dec00204 	addi	sp,sp,8
10005ac0:	f800283a 	ret

10005ac4 <UsbPrintMem>:


void UsbPrintMem()
{
10005ac4:	defffc04 	addi	sp,sp,-16
10005ac8:	dfc00315 	stw	ra,12(sp)
10005acc:	df000215 	stw	fp,8(sp)
10005ad0:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10005ad4:	01414004 	movi	r5,1280
10005ad8:	01000084 	movi	r4,2
10005adc:	00015f40 	call	100015f4 <IO_write>
	for (i = 0; i <= 200; i += 2)
10005ae0:	e03ffe15 	stw	zero,-8(fp)
10005ae4:	00000e06 	br	10005b20 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
10005ae8:	0009883a 	mov	r4,zero
10005aec:	00016700 	call	10001670 <IO_read>
10005af0:	10bfffcc 	andi	r2,r2,65535
10005af4:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
10005af8:	e0bffe17 	ldw	r2,-8(fp)
10005afc:	10814004 	addi	r2,r2,1280
10005b00:	e1bfff17 	ldw	r6,-4(fp)
10005b04:	100b883a 	mov	r5,r2
10005b08:	01040074 	movhi	r4,4097
10005b0c:	21186b04 	addi	r4,r4,25004
10005b10:	0006b300 	call	10006b30 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
10005b14:	e0bffe17 	ldw	r2,-8(fp)
10005b18:	10800084 	addi	r2,r2,2
10005b1c:	e0bffe15 	stw	r2,-8(fp)
10005b20:	e0bffe17 	ldw	r2,-8(fp)
10005b24:	10803250 	cmplti	r2,r2,201
10005b28:	103fef1e 	bne	r2,zero,10005ae8 <__alt_data_end+0xf8005ae8>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
10005b2c:	0001883a 	nop
10005b30:	e037883a 	mov	sp,fp
10005b34:	dfc00117 	ldw	ra,4(sp)
10005b38:	df000017 	ldw	fp,0(sp)
10005b3c:	dec00204 	addi	sp,sp,8
10005b40:	f800283a 	ret

10005b44 <usb_initialize>:
static alt_u8  hot_plug_count;
static alt_u16 code;


void usb_initialize()
{
10005b44:	defffe04 	addi	sp,sp,-8
10005b48:	dfc00115 	stw	ra,4(sp)
10005b4c:	df000015 	stw	fp,0(sp)
10005b50:	d839883a 	mov	fp,sp
	IO_init();
10005b54:	000156c0 	call	1000156c <IO_init>
	// alt_u8 toggle = 0;
	// alt_u8 data_size;
	// alt_u8 hot_plug_count;
	// alt_u16 code;

	printf("USB keyboard setup...\n\n");
10005b58:	01040074 	movhi	r4,4097
10005b5c:	21187004 	addi	r4,r4,25024
10005b60:	0006c2c0 	call	10006c2c <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
10005b64:	0004a6c0 	call	10004a6c <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10005b68:	000b883a 	mov	r5,zero
10005b6c:	01005104 	movi	r4,324
10005b70:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10005b74:	017fffd4 	movui	r5,65535
10005b78:	01302414 	movui	r4,49296
10005b7c:	00049d00 	call	100049d0 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10005b80:	01409604 	movi	r5,600
10005b84:	01006d04 	movi	r4,436
10005b88:	00049d00 	call	100049d0 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10005b8c:	00811004 	movi	r2,1088
10005b90:	d09b278d 	sth	r2,27806(gp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10005b94:	d09b278b 	ldhu	r2,27806(gp)
10005b98:	10bfffcc 	andi	r2,r2,65535
10005b9c:	100b883a 	mov	r5,r2
10005ba0:	01005084 	movi	r4,322
10005ba4:	00049d00 	call	100049d0 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
10005ba8:	00808404 	movi	r2,528
10005bac:	d09b270d 	sth	r2,27804(gp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
10005bb0:	d09b270b 	ldhu	r2,27804(gp)
10005bb4:	10bfffcc 	andi	r2,r2,65535
10005bb8:	100b883a 	mov	r5,r2
10005bbc:	01302314 	movui	r4,49292
10005bc0:	00049d00 	call	100049d0 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
10005bc4:	000b883a 	mov	r5,zero
10005bc8:	01007104 	movi	r4,452
10005bcc:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10005bd0:	000b883a 	mov	r5,zero
10005bd4:	01007184 	movi	r4,454
10005bd8:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10005bdc:	000b883a 	mov	r5,zero
10005be0:	01007204 	movi	r4,456
10005be4:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10005be8:	000b883a 	mov	r5,zero
10005bec:	01007284 	movi	r4,458
10005bf0:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10005bf4:	000b883a 	mov	r5,zero
10005bf8:	01007304 	movi	r4,460
10005bfc:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10005c00:	000b883a 	mov	r5,zero
10005c04:	01007384 	movi	r4,462
10005c08:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10005c0c:	000b883a 	mov	r5,zero
10005c10:	01007404 	movi	r4,464
10005c14:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10005c18:	000b883a 	mov	r5,zero
10005c1c:	01007484 	movi	r4,466
10005c20:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10005c24:	000b883a 	mov	r5,zero
10005c28:	01007504 	movi	r4,468
10005c2c:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10005c30:	000b883a 	mov	r5,zero
10005c34:	01007584 	movi	r4,470
10005c38:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10005c3c:	000b883a 	mov	r5,zero
10005c40:	01007604 	movi	r4,472
10005c44:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10005c48:	000b883a 	mov	r5,zero
10005c4c:	01007684 	movi	r4,474
10005c50:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10005c54:	000b883a 	mov	r5,zero
10005c58:	01007704 	movi	r4,476
10005c5c:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10005c60:	000b883a 	mov	r5,zero
10005c64:	01007784 	movi	r4,478
10005c68:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
10005c6c:	01401c84 	movi	r5,114
10005c70:	01007084 	movi	r4,450
10005c74:	00049d00 	call	100049d0 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10005c78:	01738054 	movui	r5,52737
10005c7c:	01000044 	movi	r4,1
10005c80:	00015f40 	call	100015f4 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10005c84:	0001883a 	nop
10005c88:	010000c4 	movi	r4,3
10005c8c:	00016700 	call	10001670 <IO_read>
10005c90:	10bfffcc 	andi	r2,r2,65535
10005c94:	103ffc26 	beq	r2,zero,10005c88 <__alt_data_end+0xf8005c88>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10005c98:	00000806 	br	10005cbc <usb_initialize+0x178>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10005c9c:	01000044 	movi	r4,1
10005ca0:	00016700 	call	10001670 <IO_read>
10005ca4:	10bfffcc 	andi	r2,r2,65535
10005ca8:	100b883a 	mov	r5,r2
10005cac:	01040074 	movhi	r4,4097
10005cb0:	21187604 	addi	r4,r4,25048
10005cb4:	0006b300 	call	10006b30 <printf>
		goto USB_HOT_PLUG;
10005cb8:	003faa06 	br	10005b64 <__alt_data_end+0xf8005b64>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10005cbc:	01000044 	movi	r4,1
10005cc0:	00016700 	call	10001670 <IO_read>
10005cc4:	10bfffcc 	andi	r2,r2,65535
10005cc8:	1083fb58 	cmpnei	r2,r2,4077
10005ccc:	103ff31e 	bne	r2,zero,10005c9c <__alt_data_end+0xf8005c9c>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
10005cd0:	01040074 	movhi	r4,4097
10005cd4:	21187f04 	addi	r4,r4,25084
10005cd8:	0006b300 	call	10006b30 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
10005cdc:	01401d04 	movi	r5,116
10005ce0:	01007084 	movi	r4,450
10005ce4:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
10005ce8:	01400f04 	movi	r5,60
10005cec:	01007104 	movi	r4,452
10005cf0:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10005cf4:	000b883a 	mov	r5,zero
10005cf8:	01007184 	movi	r4,454
10005cfc:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10005d00:	000b883a 	mov	r5,zero
10005d04:	01007204 	movi	r4,456
10005d08:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10005d0c:	000b883a 	mov	r5,zero
10005d10:	01007284 	movi	r4,458
10005d14:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10005d18:	000b883a 	mov	r5,zero
10005d1c:	01007304 	movi	r4,460
10005d20:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10005d24:	000b883a 	mov	r5,zero
10005d28:	01007384 	movi	r4,462
10005d2c:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10005d30:	000b883a 	mov	r5,zero
10005d34:	01007404 	movi	r4,464
10005d38:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10005d3c:	000b883a 	mov	r5,zero
10005d40:	01007484 	movi	r4,466
10005d44:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10005d48:	000b883a 	mov	r5,zero
10005d4c:	01007504 	movi	r4,468
10005d50:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10005d54:	000b883a 	mov	r5,zero
10005d58:	01007584 	movi	r4,470
10005d5c:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10005d60:	000b883a 	mov	r5,zero
10005d64:	01007604 	movi	r4,472
10005d68:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10005d6c:	000b883a 	mov	r5,zero
10005d70:	01007684 	movi	r4,474
10005d74:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10005d78:	000b883a 	mov	r5,zero
10005d7c:	01007704 	movi	r4,476
10005d80:	00049d00 	call	100049d0 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10005d84:	000b883a 	mov	r5,zero
10005d88:	01007784 	movi	r4,478
10005d8c:	00049d00 	call	100049d0 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10005d90:	01738054 	movui	r5,52737
10005d94:	01000044 	movi	r4,1
10005d98:	00015f40 	call	100015f4 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10005d9c:	0001883a 	nop
10005da0:	01000044 	movi	r4,1
10005da4:	00016700 	call	10001670 <IO_read>
10005da8:	10bfffcc 	andi	r2,r2,65535
10005dac:	1083fb58 	cmpnei	r2,r2,4077
10005db0:	10000826 	beq	r2,zero,10005dd4 <usb_initialize+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10005db4:	01000044 	movi	r4,1
10005db8:	00016700 	call	10001670 <IO_read>
10005dbc:	10bfffcc 	andi	r2,r2,65535
10005dc0:	100b883a 	mov	r5,r2
10005dc4:	01040074 	movhi	r4,4097
10005dc8:	21187604 	addi	r4,r4,25048
10005dcc:	0006b300 	call	10006b30 <printf>
		goto USB_HOT_PLUG;
10005dd0:	003f6406 	br	10005b64 <__alt_data_end+0xf8005b64>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
10005dd4:	00b02284 	movi	r2,-16246
10005dd8:	d09b280d 	sth	r2,27808(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
10005ddc:	008c0004 	movi	r2,12288
10005de0:	d09b288d 	sth	r2,27810(gp)
	fs_device = A_DP_STAT;
10005de4:	00880004 	movi	r2,8192
10005de8:	d09b290d 	sth	r2,27812(gp)
	usb_ctl_val = UsbRead(ctl_reg);
10005dec:	d09b280b 	ldhu	r2,27808(gp)
10005df0:	10bfffcc 	andi	r2,r2,65535
10005df4:	1009883a 	mov	r4,r2
10005df8:	0004a280 	call	10004a28 <UsbRead>
10005dfc:	d09b278d 	sth	r2,27806(gp)

	if (!(usb_ctl_val & no_device))
10005e00:	d0db278b 	ldhu	r3,27806(gp)
10005e04:	d09b288b 	ldhu	r2,27810(gp)
10005e08:	1884703a 	and	r2,r3,r2
10005e0c:	10bfffcc 	andi	r2,r2,65535
10005e10:	1000361e 	bne	r2,zero,10005eec <usb_initialize+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10005e14:	d01b2a05 	stb	zero,27816(gp)
10005e18:	00000f06 	br	10005e58 <usb_initialize+0x314>
		{
			usleep(5*1000);
10005e1c:	0104e204 	movi	r4,5000
10005e20:	00140bc0 	call	100140bc <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10005e24:	d09b280b 	ldhu	r2,27808(gp)
10005e28:	10bfffcc 	andi	r2,r2,65535
10005e2c:	1009883a 	mov	r4,r2
10005e30:	0004a280 	call	10004a28 <UsbRead>
10005e34:	d09b278d 	sth	r2,27806(gp)
			if(usb_ctl_val & no_device) break;
10005e38:	d0db278b 	ldhu	r3,27806(gp)
10005e3c:	d09b288b 	ldhu	r2,27810(gp)
10005e40:	1884703a 	and	r2,r3,r2
10005e44:	10bfffcc 	andi	r2,r2,65535
10005e48:	1000081e 	bne	r2,zero,10005e6c <usb_initialize+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10005e4c:	d09b2a03 	ldbu	r2,27816(gp)
10005e50:	10800044 	addi	r2,r2,1
10005e54:	d09b2a05 	stb	r2,27816(gp)
10005e58:	d09b2a03 	ldbu	r2,27816(gp)
10005e5c:	10803fcc 	andi	r2,r2,255
10005e60:	10800170 	cmpltui	r2,r2,5
10005e64:	103fed1e 	bne	r2,zero,10005e1c <__alt_data_end+0xf8005e1c>
10005e68:	00000106 	br	10005e70 <usb_initialize+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
10005e6c:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
10005e70:	d0db278b 	ldhu	r3,27806(gp)
10005e74:	d09b288b 	ldhu	r2,27810(gp)
10005e78:	1884703a 	and	r2,r3,r2
10005e7c:	10bfffcc 	andi	r2,r2,65535
10005e80:	1000261e 	bne	r2,zero,10005f1c <usb_initialize+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
10005e84:	01040074 	movhi	r4,4097
10005e88:	21188304 	addi	r4,r4,25100
10005e8c:	0006c2c0 	call	10006c2c <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10005e90:	01040074 	movhi	r4,4097
10005e94:	21188d04 	addi	r4,r4,25140
10005e98:	0006c2c0 	call	10006c2c <puts>
			while (!(usb_ctl_val & no_device))
10005e9c:	00000d06 	br	10005ed4 <usb_initialize+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10005ea0:	d09b280b 	ldhu	r2,27808(gp)
10005ea4:	10bfffcc 	andi	r2,r2,65535
10005ea8:	1009883a 	mov	r4,r2
10005eac:	0004a280 	call	10004a28 <UsbRead>
10005eb0:	d09b278d 	sth	r2,27806(gp)
				if(usb_ctl_val & no_device)
10005eb4:	d0db278b 	ldhu	r3,27806(gp)
10005eb8:	d09b288b 	ldhu	r2,27810(gp)
10005ebc:	1884703a 	and	r2,r3,r2
10005ec0:	10bfffcc 	andi	r2,r2,65535
10005ec4:	10000126 	beq	r2,zero,10005ecc <usb_initialize+0x388>
					goto USB_HOT_PLUG;
10005ec8:	003f2606 	br	10005b64 <__alt_data_end+0xf8005b64>

				usleep(2000);
10005ecc:	0101f404 	movi	r4,2000
10005ed0:	00140bc0 	call	100140bc <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
10005ed4:	d0db278b 	ldhu	r3,27806(gp)
10005ed8:	d09b288b 	ldhu	r2,27810(gp)
10005edc:	1884703a 	and	r2,r3,r2
10005ee0:	10bfffcc 	andi	r2,r2,65535
10005ee4:	103fee26 	beq	r2,zero,10005ea0 <__alt_data_end+0xf8005ea0>
10005ee8:	00000c06 	br	10005f1c <usb_initialize+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
10005eec:	d0db278b 	ldhu	r3,27806(gp)
10005ef0:	d09b290b 	ldhu	r2,27812(gp)
10005ef4:	1884703a 	and	r2,r3,r2
10005ef8:	10bfffcc 	andi	r2,r2,65535
10005efc:	10000426 	beq	r2,zero,10005f10 <usb_initialize+0x3cc>
		{
			printf("[INFO]: full speed device\n");
10005f00:	01040074 	movhi	r4,4097
10005f04:	21189904 	addi	r4,r4,25188
10005f08:	0006c2c0 	call	10006c2c <puts>
10005f0c:	00000306 	br	10005f1c <usb_initialize+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
10005f10:	01040074 	movhi	r4,4097
10005f14:	2118a004 	addi	r4,r4,25216
10005f18:	0006c2c0 	call	10006c2c <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
10005f1c:	0004b200 	call	10004b20 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005f20:	00000306 	br	10005f30 <usb_initialize+0x3ec>
	{
		UsbSetAddress();
10005f24:	0004b200 	call	10004b20 <UsbSetAddress>
		usleep(10*1000);
10005f28:	0109c404 	movi	r4,10000
10005f2c:	00140bc0 	call	100140bc <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005f30:	010000c4 	movi	r4,3
10005f34:	00016700 	call	10001670 <IO_read>
10005f38:	10bfffcc 	andi	r2,r2,65535
10005f3c:	1080040c 	andi	r2,r2,16
10005f40:	103ff826 	beq	r2,zero,10005f24 <__alt_data_end+0xf8005f24>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10005f44:	00059c00 	call	100059c0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
10005f48:	01414184 	movi	r5,1286
10005f4c:	01000084 	movi	r4,2
10005f50:	00015f40 	call	100015f4 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
10005f54:	0009883a 	mov	r4,zero
10005f58:	00016700 	call	10001670 <IO_read>
10005f5c:	10bfffcc 	andi	r2,r2,65535
10005f60:	100b883a 	mov	r5,r2
10005f64:	01040074 	movhi	r4,4097
10005f68:	2118a704 	addi	r4,r4,25244
10005f6c:	0006b300 	call	10006b30 <printf>

	IO_write(HPI_ADDR,0x0508); // n
10005f70:	01414204 	movi	r5,1288
10005f74:	01000084 	movi	r4,2
10005f78:	00015f40 	call	100015f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10005f7c:	0009883a 	mov	r4,zero
10005f80:	00016700 	call	10001670 <IO_read>
10005f84:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
10005f88:	d09b278b 	ldhu	r2,27806(gp)
10005f8c:	10bfffcc 	andi	r2,r2,65535
10005f90:	100b883a 	mov	r5,r2
10005f94:	01040074 	movhi	r4,4097
10005f98:	2118b204 	addi	r4,r4,25288
10005f9c:	0006b300 	call	10006b30 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
10005fa0:	0001883a 	nop
10005fa4:	d09b278b 	ldhu	r2,27806(gp)
10005fa8:	10bfffcc 	andi	r2,r2,65535
10005fac:	108000d8 	cmpnei	r2,r2,3
10005fb0:	10000326 	beq	r2,zero,10005fc0 <usb_initialize+0x47c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10005fb4:	0005a440 	call	10005a44 <UsbGetRetryCnt>
10005fb8:	d09b278d 	sth	r2,27806(gp)

		goto USB_HOT_PLUG;
10005fbc:	003ee906 	br	10005b64 <__alt_data_end+0xf8005b64>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
10005fc0:	01040074 	movhi	r4,4097
10005fc4:	2118be04 	addi	r4,r4,25336
10005fc8:	0006c2c0 	call	10006c2c <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
10005fcc:	0004c200 	call	10004c20 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005fd0:	00000306 	br	10005fe0 <usb_initialize+0x49c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
10005fd4:	0004c200 	call	10004c20 <UsbGetDeviceDesc1>
		usleep(10*1000);
10005fd8:	0109c404 	movi	r4,10000
10005fdc:	00140bc0 	call	100140bc <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005fe0:	010000c4 	movi	r4,3
10005fe4:	00016700 	call	10001670 <IO_read>
10005fe8:	10bfffcc 	andi	r2,r2,65535
10005fec:	1080040c 	andi	r2,r2,16
10005ff0:	103ff826 	beq	r2,zero,10005fd4 <__alt_data_end+0xf8005fd4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10005ff4:	00059c00 	call	100059c0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10005ff8:	01414184 	movi	r5,1286
10005ffc:	01000084 	movi	r4,2
10006000:	00015f40 	call	100015f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10006004:	0009883a 	mov	r4,zero
10006008:	00016700 	call	10001670 <IO_read>
1000600c:	10bfffcc 	andi	r2,r2,65535
10006010:	100b883a 	mov	r5,r2
10006014:	01040074 	movhi	r4,4097
10006018:	2118cd04 	addi	r4,r4,25396
1000601c:	0006b300 	call	10006b30 <printf>

	IO_write(HPI_ADDR,0x0508);
10006020:	01414204 	movi	r5,1288
10006024:	01000084 	movi	r4,2
10006028:	00015f40 	call	100015f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
1000602c:	0009883a 	mov	r4,zero
10006030:	00016700 	call	10001670 <IO_read>
10006034:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10006038:	d09b278b 	ldhu	r2,27806(gp)
1000603c:	10bfffcc 	andi	r2,r2,65535
10006040:	100b883a 	mov	r5,r2
10006044:	01040074 	movhi	r4,4097
10006048:	2118d804 	addi	r4,r4,25440
1000604c:	0006b300 	call	10006b30 <printf>
	while (usb_ctl_val != 0x03)
10006050:	00000206 	br	1000605c <usb_initialize+0x518>
	{
		usb_ctl_val = UsbGetRetryCnt();
10006054:	0005a440 	call	10005a44 <UsbGetRetryCnt>
10006058:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
1000605c:	d09b278b 	ldhu	r2,27806(gp)
10006060:	10bfffcc 	andi	r2,r2,65535
10006064:	108000d8 	cmpnei	r2,r2,3
10006068:	103ffa1e 	bne	r2,zero,10006054 <__alt_data_end+0xf8006054>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
1000606c:	01040074 	movhi	r4,4097
10006070:	2118e404 	addi	r4,r4,25488
10006074:	0006c2c0 	call	10006c2c <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
10006078:	0004d680 	call	10004d68 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000607c:	00000306 	br	1000608c <usb_initialize+0x548>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
10006080:	0004d680 	call	10004d68 <UsbGetDeviceDesc2>
		usleep(10*1000);
10006084:	0109c404 	movi	r4,10000
10006088:	00140bc0 	call	100140bc <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000608c:	010000c4 	movi	r4,3
10006090:	00016700 	call	10001670 <IO_read>
10006094:	10bfffcc 	andi	r2,r2,65535
10006098:	1080040c 	andi	r2,r2,16
1000609c:	103ff826 	beq	r2,zero,10006080 <__alt_data_end+0xf8006080>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100060a0:	00059c00 	call	100059c0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100060a4:	01414184 	movi	r5,1286
100060a8:	01000084 	movi	r4,2
100060ac:	00015f40 	call	100015f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
100060b0:	0009883a 	mov	r4,zero
100060b4:	00016700 	call	10001670 <IO_read>
100060b8:	10bfffcc 	andi	r2,r2,65535
100060bc:	100b883a 	mov	r5,r2
100060c0:	01040074 	movhi	r4,4097
100060c4:	2118cd04 	addi	r4,r4,25396
100060c8:	0006b300 	call	10006b30 <printf>

	IO_write(HPI_ADDR,0x0508);
100060cc:	01414204 	movi	r5,1288
100060d0:	01000084 	movi	r4,2
100060d4:	00015f40 	call	100015f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100060d8:	0009883a 	mov	r4,zero
100060dc:	00016700 	call	10001670 <IO_read>
100060e0:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100060e4:	d09b278b 	ldhu	r2,27806(gp)
100060e8:	10bfffcc 	andi	r2,r2,65535
100060ec:	100b883a 	mov	r5,r2
100060f0:	01040074 	movhi	r4,4097
100060f4:	2118d804 	addi	r4,r4,25440
100060f8:	0006b300 	call	10006b30 <printf>
	while (usb_ctl_val != 0x03)
100060fc:	00000206 	br	10006108 <usb_initialize+0x5c4>
	{
		usb_ctl_val = UsbGetRetryCnt();
10006100:	0005a440 	call	10005a44 <UsbGetRetryCnt>
10006104:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10006108:	d09b278b 	ldhu	r2,27806(gp)
1000610c:	10bfffcc 	andi	r2,r2,65535
10006110:	108000d8 	cmpnei	r2,r2,3
10006114:	103ffa1e 	bne	r2,zero,10006100 <__alt_data_end+0xf8006100>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
10006118:	01040074 	movhi	r4,4097
1000611c:	2118f804 	addi	r4,r4,25568
10006120:	0006c2c0 	call	10006c2c <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
10006124:	0004f400 	call	10004f40 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006128:	00000306 	br	10006138 <usb_initialize+0x5f4>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
1000612c:	0004f400 	call	10004f40 <UsbGetConfigDesc1>
		usleep(10*1000);
10006130:	0109c404 	movi	r4,10000
10006134:	00140bc0 	call	100140bc <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006138:	010000c4 	movi	r4,3
1000613c:	00016700 	call	10001670 <IO_read>
10006140:	10bfffcc 	andi	r2,r2,65535
10006144:	1080040c 	andi	r2,r2,16
10006148:	103ff826 	beq	r2,zero,1000612c <__alt_data_end+0xf800612c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000614c:	00059c00 	call	100059c0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10006150:	01414184 	movi	r5,1286
10006154:	01000084 	movi	r4,2
10006158:	00015f40 	call	100015f4 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000615c:	0009883a 	mov	r4,zero
10006160:	00016700 	call	10001670 <IO_read>
10006164:	10bfffcc 	andi	r2,r2,65535
10006168:	100b883a 	mov	r5,r2
1000616c:	01040074 	movhi	r4,4097
10006170:	21190a04 	addi	r4,r4,25640
10006174:	0006b300 	call	10006b30 <printf>

	IO_write(HPI_ADDR,0x0508);
10006178:	01414204 	movi	r5,1288
1000617c:	01000084 	movi	r4,2
10006180:	00015f40 	call	100015f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10006184:	0009883a 	mov	r4,zero
10006188:	00016700 	call	10001670 <IO_read>
1000618c:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
10006190:	d09b278b 	ldhu	r2,27806(gp)
10006194:	10bfffcc 	andi	r2,r2,65535
10006198:	100b883a 	mov	r5,r2
1000619c:	01040074 	movhi	r4,4097
100061a0:	21191504 	addi	r4,r4,25684
100061a4:	0006b300 	call	10006b30 <printf>
	while (usb_ctl_val != 0x03)
100061a8:	00000206 	br	100061b4 <usb_initialize+0x670>
	{
		usb_ctl_val = UsbGetRetryCnt();
100061ac:	0005a440 	call	10005a44 <UsbGetRetryCnt>
100061b0:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100061b4:	d09b278b 	ldhu	r2,27806(gp)
100061b8:	10bfffcc 	andi	r2,r2,65535
100061bc:	108000d8 	cmpnei	r2,r2,3
100061c0:	103ffa1e 	bne	r2,zero,100061ac <__alt_data_end+0xf80061ac>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
100061c4:	01040074 	movhi	r4,4097
100061c8:	21192104 	addi	r4,r4,25732
100061cc:	0006c2c0 	call	10006c2c <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
100061d0:	00050d00 	call	100050d0 <UsbGetConfigDesc2>

	usleep(100*1000);
100061d4:	010000b4 	movhi	r4,2
100061d8:	2121a804 	addi	r4,r4,-31072
100061dc:	00140bc0 	call	100140bc <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100061e0:	00000306 	br	100061f0 <usb_initialize+0x6ac>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
100061e4:	00050d00 	call	100050d0 <UsbGetConfigDesc2>
		usleep(10*1000);
100061e8:	0109c404 	movi	r4,10000
100061ec:	00140bc0 	call	100140bc <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100061f0:	010000c4 	movi	r4,3
100061f4:	00016700 	call	10001670 <IO_read>
100061f8:	10bfffcc 	andi	r2,r2,65535
100061fc:	1080040c 	andi	r2,r2,16
10006200:	103ff826 	beq	r2,zero,100061e4 <__alt_data_end+0xf80061e4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10006204:	00059c00 	call	100059c0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10006208:	01414184 	movi	r5,1286
1000620c:	01000084 	movi	r4,2
10006210:	00015f40 	call	100015f4 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
10006214:	0009883a 	mov	r4,zero
10006218:	00016700 	call	10001670 <IO_read>
1000621c:	10bfffcc 	andi	r2,r2,65535
10006220:	100b883a 	mov	r5,r2
10006224:	01040074 	movhi	r4,4097
10006228:	21193404 	addi	r4,r4,25808
1000622c:	0006b300 	call	10006b30 <printf>

	IO_write(HPI_ADDR,0x0508);
10006230:	01414204 	movi	r5,1288
10006234:	01000084 	movi	r4,2
10006238:	00015f40 	call	100015f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
1000623c:	0009883a 	mov	r4,zero
10006240:	00016700 	call	10001670 <IO_read>
10006244:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10006248:	d09b278b 	ldhu	r2,27806(gp)
1000624c:	10bfffcc 	andi	r2,r2,65535
10006250:	100b883a 	mov	r5,r2
10006254:	01040074 	movhi	r4,4097
10006258:	21193f04 	addi	r4,r4,25852
1000625c:	0006b300 	call	10006b30 <printf>
	while (usb_ctl_val != 0x03)
10006260:	00000206 	br	1000626c <usb_initialize+0x728>
	{
		usb_ctl_val = UsbGetRetryCnt();
10006264:	0005a440 	call	10005a44 <UsbGetRetryCnt>
10006268:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
1000626c:	d09b278b 	ldhu	r2,27806(gp)
10006270:	10bfffcc 	andi	r2,r2,65535
10006274:	108000d8 	cmpnei	r2,r2,3
10006278:	103ffa1e 	bne	r2,zero,10006264 <__alt_data_end+0xf8006264>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
1000627c:	01040074 	movhi	r4,4097
10006280:	21194b04 	addi	r4,r4,25900
10006284:	0006c2c0 	call	10006c2c <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10006288:	01415b04 	movi	r5,1388
1000628c:	01000084 	movi	r4,2
10006290:	00015f40 	call	100015f4 <IO_write>
	code = IO_read(HPI_DATA);
10006294:	0009883a 	mov	r4,zero
10006298:	00016700 	call	10001670 <IO_read>
1000629c:	d09b2a8d 	sth	r2,27818(gp)
	code = code & 0x003;
100062a0:	d09b2a8b 	ldhu	r2,27818(gp)
100062a4:	108000cc 	andi	r2,r2,3
100062a8:	d09b2a8d 	sth	r2,27818(gp)
	printf("\ncode = %x\n", code);
100062ac:	d09b2a8b 	ldhu	r2,27818(gp)
100062b0:	10bfffcc 	andi	r2,r2,65535
100062b4:	100b883a 	mov	r5,r2
100062b8:	01040074 	movhi	r4,4097
100062bc:	21195e04 	addi	r4,r4,25976
100062c0:	0006b300 	call	10006b30 <printf>

	if (code == 0x01)
100062c4:	d09b2a8b 	ldhu	r2,27818(gp)
100062c8:	10bfffcc 	andi	r2,r2,65535
100062cc:	10800058 	cmpnei	r2,r2,1
100062d0:	1000041e 	bne	r2,zero,100062e4 <usb_initialize+0x7a0>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
100062d4:	01040074 	movhi	r4,4097
100062d8:	21196104 	addi	r4,r4,25988
100062dc:	0006c2c0 	call	10006c2c <puts>
100062e0:	00000306 	br	100062f0 <usb_initialize+0x7ac>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
100062e4:	01040074 	movhi	r4,4097
100062e8:	21197004 	addi	r4,r4,26048
100062ec:	0006c2c0 	call	10006c2c <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
100062f0:	01415d84 	movi	r5,1398
100062f4:	01000084 	movi	r4,2
100062f8:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x073F);
100062fc:	0141cfc4 	movi	r5,1855
10006300:	0009883a 	mov	r4,zero
10006304:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x8105);
10006308:	01604154 	movui	r5,33029
1000630c:	0009883a 	mov	r4,zero
10006310:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0003);
10006314:	014000c4 	movi	r5,3
10006318:	0009883a 	mov	r4,zero
1000631c:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
10006320:	01400204 	movi	r5,8
10006324:	0009883a 	mov	r4,zero
10006328:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
1000632c:	016b0294 	movui	r5,44042
10006330:	0009883a 	mov	r4,zero
10006334:	00015f40 	call	100015f4 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10006338:	01415d84 	movi	r5,1398
1000633c:	01006c04 	movi	r4,432
10006340:	00049d00 	call	100049d0 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10006344:	01415f04 	movi	r5,1404
10006348:	01000084 	movi	r4,2
1000634c:	00015f40 	call	100015f4 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10006350:	0009883a 	mov	r4,zero
10006354:	00016700 	call	10001670 <IO_read>
10006358:	d09b29c5 	stb	r2,27815(gp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
1000635c:	d09b29c3 	ldbu	r2,27815(gp)
10006360:	10803fcc 	andi	r2,r2,255
10006364:	100b883a 	mov	r5,r2
10006368:	01040074 	movhi	r4,4097
1000636c:	21197904 	addi	r4,r4,26084
10006370:	0006b300 	call	10006b30 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10006374:	00053380 	call	10005338 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006378:	00000306 	br	10006388 <usb_initialize+0x844>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
1000637c:	00053380 	call	10005338 <UsbSetConfig>
		usleep(10*1000);
10006380:	0109c404 	movi	r4,10000
10006384:	00140bc0 	call	100140bc <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006388:	010000c4 	movi	r4,3
1000638c:	00016700 	call	10001670 <IO_read>
10006390:	10bfffcc 	andi	r2,r2,65535
10006394:	1080040c 	andi	r2,r2,16
10006398:	103ff826 	beq	r2,zero,1000637c <__alt_data_end+0xf800637c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000639c:	00059c00 	call	100059c0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100063a0:	01414184 	movi	r5,1286
100063a4:	01000084 	movi	r4,2
100063a8:	00015f40 	call	100015f4 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
100063ac:	0009883a 	mov	r4,zero
100063b0:	00016700 	call	10001670 <IO_read>
100063b4:	10bfffcc 	andi	r2,r2,65535
100063b8:	100b883a 	mov	r5,r2
100063bc:	01040074 	movhi	r4,4097
100063c0:	21198304 	addi	r4,r4,26124
100063c4:	0006b300 	call	10006b30 <printf>

	IO_write(HPI_ADDR,0x0508);
100063c8:	01414204 	movi	r5,1288
100063cc:	01000084 	movi	r4,2
100063d0:	00015f40 	call	100015f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100063d4:	0009883a 	mov	r4,zero
100063d8:	00016700 	call	10001670 <IO_read>
100063dc:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
100063e0:	d09b278b 	ldhu	r2,27806(gp)
100063e4:	10bfffcc 	andi	r2,r2,65535
100063e8:	100b883a 	mov	r5,r2
100063ec:	01040074 	movhi	r4,4097
100063f0:	21198e04 	addi	r4,r4,26168
100063f4:	0006b300 	call	10006b30 <printf>
	while (usb_ctl_val != 0x03)
100063f8:	00000206 	br	10006404 <usb_initialize+0x8c0>
	{
		usb_ctl_val = UsbGetRetryCnt();
100063fc:	0005a440 	call	10005a44 <UsbGetRetryCnt>
10006400:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10006404:	d09b278b 	ldhu	r2,27806(gp)
10006408:	10bfffcc 	andi	r2,r2,65535
1000640c:	108000d8 	cmpnei	r2,r2,3
10006410:	103ffa1e 	bne	r2,zero,100063fc <__alt_data_end+0xf80063fc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10006414:	01040074 	movhi	r4,4097
10006418:	21199a04 	addi	r4,r4,26216
1000641c:	0006c2c0 	call	10006c2c <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10006420:	00054380 	call	10005438 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006424:	00000306 	br	10006434 <usb_initialize+0x8f0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10006428:	00054380 	call	10005438 <UsbClassRequest>
		usleep(10*1000);
1000642c:	0109c404 	movi	r4,10000
10006430:	00140bc0 	call	100140bc <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006434:	010000c4 	movi	r4,3
10006438:	00016700 	call	10001670 <IO_read>
1000643c:	10bfffcc 	andi	r2,r2,65535
10006440:	1080040c 	andi	r2,r2,16
10006444:	103ff826 	beq	r2,zero,10006428 <__alt_data_end+0xf8006428>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10006448:	00059c00 	call	100059c0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
1000644c:	01414184 	movi	r5,1286
10006450:	01000084 	movi	r4,2
10006454:	00015f40 	call	100015f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10006458:	0009883a 	mov	r4,zero
1000645c:	00016700 	call	10001670 <IO_read>
10006460:	10bfffcc 	andi	r2,r2,65535
10006464:	100b883a 	mov	r5,r2
10006468:	01040074 	movhi	r4,4097
1000646c:	2119ac04 	addi	r4,r4,26288
10006470:	0006b300 	call	10006b30 <printf>

	IO_write(HPI_ADDR,0x0508);
10006474:	01414204 	movi	r5,1288
10006478:	01000084 	movi	r4,2
1000647c:	00015f40 	call	100015f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10006480:	0009883a 	mov	r4,zero
10006484:	00016700 	call	10001670 <IO_read>
10006488:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
1000648c:	d09b278b 	ldhu	r2,27806(gp)
10006490:	10bfffcc 	andi	r2,r2,65535
10006494:	100b883a 	mov	r5,r2
10006498:	01040074 	movhi	r4,4097
1000649c:	2119b704 	addi	r4,r4,26332
100064a0:	0006b300 	call	10006b30 <printf>
	while (usb_ctl_val != 0x03)
100064a4:	00000206 	br	100064b0 <usb_initialize+0x96c>
	{
		usb_ctl_val = UsbGetRetryCnt();
100064a8:	0005a440 	call	10005a44 <UsbGetRetryCnt>
100064ac:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100064b0:	d09b278b 	ldhu	r2,27806(gp)
100064b4:	10bfffcc 	andi	r2,r2,65535
100064b8:	108000d8 	cmpnei	r2,r2,3
100064bc:	103ffa1e 	bne	r2,zero,100064a8 <__alt_data_end+0xf80064a8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
100064c0:	01040074 	movhi	r4,4097
100064c4:	2119c304 	addi	r4,r4,26380
100064c8:	0006c2c0 	call	10006c2c <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
100064cc:	00055380 	call	10005538 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100064d0:	00000306 	br	100064e0 <usb_initialize+0x99c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
100064d4:	00055380 	call	10005538 <UsbGetHidDesc>
		usleep(10*1000);
100064d8:	0109c404 	movi	r4,10000
100064dc:	00140bc0 	call	100140bc <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100064e0:	010000c4 	movi	r4,3
100064e4:	00016700 	call	10001670 <IO_read>
100064e8:	10bfffcc 	andi	r2,r2,65535
100064ec:	1080040c 	andi	r2,r2,16
100064f0:	103ff826 	beq	r2,zero,100064d4 <__alt_data_end+0xf80064d4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100064f4:	00059c00 	call	100059c0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100064f8:	01414184 	movi	r5,1286
100064fc:	01000084 	movi	r4,2
10006500:	00015f40 	call	100015f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10006504:	0009883a 	mov	r4,zero
10006508:	00016700 	call	10001670 <IO_read>
1000650c:	10bfffcc 	andi	r2,r2,65535
10006510:	100b883a 	mov	r5,r2
10006514:	01040074 	movhi	r4,4097
10006518:	2119ac04 	addi	r4,r4,26288
1000651c:	0006b300 	call	10006b30 <printf>

	IO_write(HPI_ADDR,0x0508);
10006520:	01414204 	movi	r5,1288
10006524:	01000084 	movi	r4,2
10006528:	00015f40 	call	100015f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
1000652c:	0009883a 	mov	r4,zero
10006530:	00016700 	call	10001670 <IO_read>
10006534:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10006538:	d09b278b 	ldhu	r2,27806(gp)
1000653c:	10bfffcc 	andi	r2,r2,65535
10006540:	100b883a 	mov	r5,r2
10006544:	01040074 	movhi	r4,4097
10006548:	2119b704 	addi	r4,r4,26332
1000654c:	0006b300 	call	10006b30 <printf>
	while (usb_ctl_val != 0x03)
10006550:	00000206 	br	1000655c <usb_initialize+0xa18>
	{
		usb_ctl_val = UsbGetRetryCnt();
10006554:	0005a440 	call	10005a44 <UsbGetRetryCnt>
10006558:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
1000655c:	d09b278b 	ldhu	r2,27806(gp)
10006560:	10bfffcc 	andi	r2,r2,65535
10006564:	108000d8 	cmpnei	r2,r2,3
10006568:	103ffa1e 	bne	r2,zero,10006554 <__alt_data_end+0xf8006554>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
1000656c:	01040074 	movhi	r4,4097
10006570:	2119d504 	addi	r4,r4,26452
10006574:	0006c2c0 	call	10006c2c <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10006578:	00056800 	call	10005680 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000657c:	00000306 	br	1000658c <usb_initialize+0xa48>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10006580:	00056800 	call	10005680 <UsbGetReportDesc>
		usleep(10*1000);
10006584:	0109c404 	movi	r4,10000
10006588:	00140bc0 	call	100140bc <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000658c:	010000c4 	movi	r4,3
10006590:	00016700 	call	10001670 <IO_read>
10006594:	10bfffcc 	andi	r2,r2,65535
10006598:	1080040c 	andi	r2,r2,16
1000659c:	103ff826 	beq	r2,zero,10006580 <__alt_data_end+0xf8006580>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100065a0:	00059c00 	call	100059c0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100065a4:	01414184 	movi	r5,1286
100065a8:	01000084 	movi	r4,2
100065ac:	00015f40 	call	100015f4 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
100065b0:	0009883a 	mov	r4,zero
100065b4:	00016700 	call	10001670 <IO_read>
100065b8:	10bfffcc 	andi	r2,r2,65535
100065bc:	100b883a 	mov	r5,r2
100065c0:	01040074 	movhi	r4,4097
100065c4:	2119e904 	addi	r4,r4,26532
100065c8:	0006b300 	call	10006b30 <printf>

	IO_write(HPI_ADDR,0x0508);
100065cc:	01414204 	movi	r5,1288
100065d0:	01000084 	movi	r4,2
100065d4:	00015f40 	call	100015f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100065d8:	0009883a 	mov	r4,zero
100065dc:	00016700 	call	10001670 <IO_read>
100065e0:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
100065e4:	d09b278b 	ldhu	r2,27806(gp)
100065e8:	10bfffcc 	andi	r2,r2,65535
100065ec:	100b883a 	mov	r5,r2
100065f0:	01040074 	movhi	r4,4097
100065f4:	2119f504 	addi	r4,r4,26580
100065f8:	0006b300 	call	10006b30 <printf>
	while (usb_ctl_val != 0x03)
100065fc:	00000206 	br	10006608 <usb_initialize+0xac4>
	{
		usb_ctl_val = UsbGetRetryCnt();
10006600:	0005a440 	call	10005a44 <UsbGetRetryCnt>
10006604:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10006608:	d09b278b 	ldhu	r2,27806(gp)
1000660c:	10bfffcc 	andi	r2,r2,65535
10006610:	108000d8 	cmpnei	r2,r2,3
10006614:	103ffa1e 	bne	r2,zero,10006600 <__alt_data_end+0xf8006600>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10006618:	01040074 	movhi	r4,4097
1000661c:	211a0104 	addi	r4,r4,26628
10006620:	0006c2c0 	call	10006c2c <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	// usleep(10000);
}
10006624:	0001883a 	nop
10006628:	e037883a 	mov	sp,fp
1000662c:	dfc00117 	ldw	ra,4(sp)
10006630:	df000017 	ldw	fp,0(sp)
10006634:	dec00204 	addi	sp,sp,8
10006638:	f800283a 	ret

1000663c <get_keycode_value>:


// Should be place in a while loop to keep fetching keycodes
int get_keycode_value() 
{
1000663c:	defffd04 	addi	sp,sp,-12
10006640:	dfc00215 	stw	ra,8(sp)
10006644:	df000115 	stw	fp,4(sp)
10006648:	df000104 	addi	fp,sp,4
	// int keycode0 = 0;
	// int keycode1 = 0;
	int keycode = 0;
1000664c:	e03fff15 	stw	zero,-4(fp)

	toggle++;
10006650:	d09b2983 	ldbu	r2,27814(gp)
10006654:	10800044 	addi	r2,r2,1
10006658:	d09b2985 	stb	r2,27814(gp)
	IO_write(HPI_ADDR,0x0500); //the start address
1000665c:	01414004 	movi	r5,1280
10006660:	01000084 	movi	r4,2
10006664:	00015f40 	call	100015f4 <IO_write>
	//data phase IN-1
	IO_write(HPI_DATA,0x051c); //500
10006668:	01414704 	movi	r5,1308
1000666c:	0009883a 	mov	r4,zero
10006670:	00015f40 	call	100015f4 <IO_write>

	IO_write(HPI_DATA,0x000f & data_size);//2 data length
10006674:	d09b29c3 	ldbu	r2,27815(gp)
10006678:	10803fcc 	andi	r2,r2,255
1000667c:	108003cc 	andi	r2,r2,15
10006680:	100b883a 	mov	r5,r2
10006684:	0009883a 	mov	r4,zero
10006688:	00015f40 	call	100015f4 <IO_write>

	IO_write(HPI_DATA,0x0291);//4 //endpoint 1
1000668c:	0140a444 	movi	r5,657
10006690:	0009883a 	mov	r4,zero
10006694:	00015f40 	call	100015f4 <IO_write>
	if(toggle%2)
10006698:	d09b2983 	ldbu	r2,27814(gp)
1000669c:	1080004c 	andi	r2,r2,1
100066a0:	10803fcc 	andi	r2,r2,255
100066a4:	10000426 	beq	r2,zero,100066b8 <get_keycode_value+0x7c>
	{
		IO_write(HPI_DATA,0x0001);//6 //data 1
100066a8:	01400044 	movi	r5,1
100066ac:	0009883a 	mov	r4,zero
100066b0:	00015f40 	call	100015f4 <IO_write>
100066b4:	00000306 	br	100066c4 <get_keycode_value+0x88>
	}
	else
	{
		IO_write(HPI_DATA,0x0041);//6 //data 1
100066b8:	01401044 	movi	r5,65
100066bc:	0009883a 	mov	r4,zero
100066c0:	00015f40 	call	100015f4 <IO_write>
	}
	IO_write(HPI_DATA,0x0013);//8
100066c4:	014004c4 	movi	r5,19
100066c8:	0009883a 	mov	r4,zero
100066cc:	00015f40 	call	100015f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
100066d0:	000b883a 	mov	r5,zero
100066d4:	0009883a 	mov	r4,zero
100066d8:	00015f40 	call	100015f4 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100066dc:	01414004 	movi	r5,1280
100066e0:	01006c04 	movi	r4,432
100066e4:	00049d00 	call	100049d0 <UsbWrite>
	
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100066e8:	00002506 	br	10006780 <get_keycode_value+0x144>
	{
		IO_write(HPI_ADDR,0x0500); //the start address
100066ec:	01414004 	movi	r5,1280
100066f0:	01000084 	movi	r4,2
100066f4:	00015f40 	call	100015f4 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
100066f8:	01414704 	movi	r5,1308
100066fc:	0009883a 	mov	r4,zero
10006700:	00015f40 	call	100015f4 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10006704:	d09b29c3 	ldbu	r2,27815(gp)
10006708:	10803fcc 	andi	r2,r2,255
1000670c:	108003cc 	andi	r2,r2,15
10006710:	100b883a 	mov	r5,r2
10006714:	0009883a 	mov	r4,zero
10006718:	00015f40 	call	100015f4 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
1000671c:	0140a444 	movi	r5,657
10006720:	0009883a 	mov	r4,zero
10006724:	00015f40 	call	100015f4 <IO_write>
		if(toggle%2)
10006728:	d09b2983 	ldbu	r2,27814(gp)
1000672c:	1080004c 	andi	r2,r2,1
10006730:	10803fcc 	andi	r2,r2,255
10006734:	10000426 	beq	r2,zero,10006748 <get_keycode_value+0x10c>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10006738:	01400044 	movi	r5,1
1000673c:	0009883a 	mov	r4,zero
10006740:	00015f40 	call	100015f4 <IO_write>
10006744:	00000306 	br	10006754 <get_keycode_value+0x118>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10006748:	01401044 	movi	r5,65
1000674c:	0009883a 	mov	r4,zero
10006750:	00015f40 	call	100015f4 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10006754:	014004c4 	movi	r5,19
10006758:	0009883a 	mov	r4,zero
1000675c:	00015f40 	call	100015f4 <IO_write>
		IO_write(HPI_DATA,0x0000);//
10006760:	000b883a 	mov	r5,zero
10006764:	0009883a 	mov	r4,zero
10006768:	00015f40 	call	100015f4 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000676c:	01414004 	movi	r5,1280
10006770:	01006c04 	movi	r4,432
10006774:	00049d00 	call	100049d0 <UsbWrite>
		usleep(10*1000);
10006778:	0109c404 	movi	r4,10000
1000677c:	00140bc0 	call	100140bc <usleep>
	}
	IO_write(HPI_DATA,0x0013);//8
	IO_write(HPI_DATA,0x0000);//a
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
	
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006780:	010000c4 	movi	r4,3
10006784:	00016700 	call	10001670 <IO_read>
10006788:	10bfffcc 	andi	r2,r2,65535
1000678c:	1080040c 	andi	r2,r2,16
10006790:	103fd626 	beq	r2,zero,100066ec <__alt_data_end+0xf80066ec>
		IO_write(HPI_DATA,0x0000);//
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		usleep(10*1000);
	}//end while

	usb_ctl_val = UsbWaitTDListDone();
10006794:	00059c00 	call	100059c0 <UsbWaitTDListDone>
10006798:	d09b278d 	sth	r2,27806(gp)
	/* Four key support */
	// keycode0 = UsbRead(0x051e);
	// keycode1 = UsbRead(0x0520);
	// keycode = keycode0 + (keycode1 << 8);
	/********************/
	keycode = UsbRead(0x051e);
1000679c:	01014784 	movi	r4,1310
100067a0:	0004a280 	call	10004a28 <UsbRead>
100067a4:	10bfffcc 	andi	r2,r2,65535
100067a8:	e0bfff15 	stw	r2,-4(fp)
	printf("\nfirst two keycode values are %04x\n",keycode);
100067ac:	e17fff17 	ldw	r5,-4(fp)
100067b0:	01040074 	movhi	r4,4097
100067b4:	211a1504 	addi	r4,r4,26708
100067b8:	0006b300 	call	10006b30 <printf>
	// We only need the first keycode, which is at the lower byte of keycode.
	// Send the keycode to hardware via PIO.
	*keycode_base = keycode & 0xff;
100067bc:	00803404 	movi	r2,208
100067c0:	e0ffff17 	ldw	r3,-4(fp)
100067c4:	10c00005 	stb	r3,0(r2)

	usleep(200);//usleep(5000);
100067c8:	01003204 	movi	r4,200
100067cc:	00140bc0 	call	100140bc <usleep>
	usb_ctl_val = UsbRead(ctl_reg);
100067d0:	d09b280b 	ldhu	r2,27808(gp)
100067d4:	10bfffcc 	andi	r2,r2,65535
100067d8:	1009883a 	mov	r4,r2
100067dc:	0004a280 	call	10004a28 <UsbRead>
100067e0:	d09b278d 	sth	r2,27806(gp)

	if(!(usb_ctl_val & no_device))
100067e4:	d0db278b 	ldhu	r3,27806(gp)
100067e8:	d09b288b 	ldhu	r2,27810(gp)
100067ec:	1884703a 	and	r2,r3,r2
100067f0:	10bfffcc 	andi	r2,r2,65535
100067f4:	1000401e 	bne	r2,zero,100068f8 <get_keycode_value+0x2bc>
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
100067f8:	d01b2a05 	stb	zero,27816(gp)
100067fc:	00000f06 	br	1000683c <get_keycode_value+0x200>
		{
			usleep(5*1000);
10006800:	0104e204 	movi	r4,5000
10006804:	00140bc0 	call	100140bc <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10006808:	d09b280b 	ldhu	r2,27808(gp)
1000680c:	10bfffcc 	andi	r2,r2,65535
10006810:	1009883a 	mov	r4,r2
10006814:	0004a280 	call	10004a28 <UsbRead>
10006818:	d09b278d 	sth	r2,27806(gp)
			if(usb_ctl_val & no_device) break;
1000681c:	d0db278b 	ldhu	r3,27806(gp)
10006820:	d09b288b 	ldhu	r2,27810(gp)
10006824:	1884703a 	and	r2,r3,r2
10006828:	10bfffcc 	andi	r2,r2,65535
1000682c:	1000081e 	bne	r2,zero,10006850 <get_keycode_value+0x214>
	usb_ctl_val = UsbRead(ctl_reg);

	if(!(usb_ctl_val & no_device))
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10006830:	d09b2a03 	ldbu	r2,27816(gp)
10006834:	10800044 	addi	r2,r2,1
10006838:	d09b2a05 	stb	r2,27816(gp)
1000683c:	d09b2a03 	ldbu	r2,27816(gp)
10006840:	10803fcc 	andi	r2,r2,255
10006844:	108001f0 	cmpltui	r2,r2,7
10006848:	103fed1e 	bne	r2,zero,10006800 <__alt_data_end+0xf8006800>
1000684c:	00000106 	br	10006854 <get_keycode_value+0x218>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
10006850:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
10006854:	d0db278b 	ldhu	r3,27806(gp)
10006858:	d09b288b 	ldhu	r2,27810(gp)
1000685c:	1884703a 	and	r2,r3,r2
10006860:	10bfffcc 	andi	r2,r2,65535
10006864:	1000241e 	bne	r2,zero,100068f8 <get_keycode_value+0x2bc>
		{
			printf("\n[INFO]: the keyboard has been removed!!! \n");
10006868:	01040074 	movhi	r4,4097
1000686c:	211a1e04 	addi	r4,r4,26744
10006870:	0006c2c0 	call	10006c2c <puts>
			printf("[INFO]: please insert again!!! \n");
10006874:	01040074 	movhi	r4,4097
10006878:	211a2904 	addi	r4,r4,26788
1000687c:	0006c2c0 	call	10006c2c <puts>
		}
	}

	while (!(usb_ctl_val & no_device))
10006880:	00001d06 	br	100068f8 <get_keycode_value+0x2bc>
	{

		usb_ctl_val = UsbRead(ctl_reg);
10006884:	d09b280b 	ldhu	r2,27808(gp)
10006888:	10bfffcc 	andi	r2,r2,65535
1000688c:	1009883a 	mov	r4,r2
10006890:	0004a280 	call	10004a28 <UsbRead>
10006894:	d09b278d 	sth	r2,27806(gp)
		usleep(5*1000);
10006898:	0104e204 	movi	r4,5000
1000689c:	00140bc0 	call	100140bc <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
100068a0:	d09b280b 	ldhu	r2,27808(gp)
100068a4:	10bfffcc 	andi	r2,r2,65535
100068a8:	1009883a 	mov	r4,r2
100068ac:	0004a280 	call	10004a28 <UsbRead>
100068b0:	d09b278d 	sth	r2,27806(gp)
		usleep(5*1000);
100068b4:	0104e204 	movi	r4,5000
100068b8:	00140bc0 	call	100140bc <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
100068bc:	d09b280b 	ldhu	r2,27808(gp)
100068c0:	10bfffcc 	andi	r2,r2,65535
100068c4:	1009883a 	mov	r4,r2
100068c8:	0004a280 	call	10004a28 <UsbRead>
100068cc:	d09b278d 	sth	r2,27806(gp)
		usleep(5*1000);
100068d0:	0104e204 	movi	r4,5000
100068d4:	00140bc0 	call	100140bc <usleep>

		if(usb_ctl_val & no_device)
100068d8:	d0db278b 	ldhu	r3,27806(gp)
100068dc:	d09b288b 	ldhu	r2,27810(gp)
100068e0:	1884703a 	and	r2,r3,r2
100068e4:	10bfffcc 	andi	r2,r2,65535
100068e8:	10000126 	beq	r2,zero,100068f0 <get_keycode_value+0x2b4>
			usb_initialize();
100068ec:	0005b440 	call	10005b44 <usb_initialize>

		usleep(200);
100068f0:	01003204 	movi	r4,200
100068f4:	00140bc0 	call	100140bc <usleep>
			printf("\n[INFO]: the keyboard has been removed!!! \n");
			printf("[INFO]: please insert again!!! \n");
		}
	}

	while (!(usb_ctl_val & no_device))
100068f8:	d0db278b 	ldhu	r3,27806(gp)
100068fc:	d09b288b 	ldhu	r2,27810(gp)
10006900:	1884703a 	and	r2,r3,r2
10006904:	10bfffcc 	andi	r2,r2,65535
10006908:	103fde26 	beq	r2,zero,10006884 <__alt_data_end+0xf8006884>
		if(usb_ctl_val & no_device)
			usb_initialize();

		usleep(200);
	}
	return keycode;
1000690c:	e0bfff17 	ldw	r2,-4(fp)
}
10006910:	e037883a 	mov	sp,fp
10006914:	dfc00117 	ldw	ra,4(sp)
10006918:	df000017 	ldw	fp,0(sp)
1000691c:	dec00204 	addi	sp,sp,8
10006920:	f800283a 	ret

10006924 <__divsi3>:
10006924:	20001b16 	blt	r4,zero,10006994 <__divsi3+0x70>
10006928:	000f883a 	mov	r7,zero
1000692c:	28001616 	blt	r5,zero,10006988 <__divsi3+0x64>
10006930:	200d883a 	mov	r6,r4
10006934:	29001a2e 	bgeu	r5,r4,100069a0 <__divsi3+0x7c>
10006938:	00800804 	movi	r2,32
1000693c:	00c00044 	movi	r3,1
10006940:	00000106 	br	10006948 <__divsi3+0x24>
10006944:	10000d26 	beq	r2,zero,1000697c <__divsi3+0x58>
10006948:	294b883a 	add	r5,r5,r5
1000694c:	10bfffc4 	addi	r2,r2,-1
10006950:	18c7883a 	add	r3,r3,r3
10006954:	293ffb36 	bltu	r5,r4,10006944 <__alt_data_end+0xf8006944>
10006958:	0005883a 	mov	r2,zero
1000695c:	18000726 	beq	r3,zero,1000697c <__divsi3+0x58>
10006960:	0005883a 	mov	r2,zero
10006964:	31400236 	bltu	r6,r5,10006970 <__divsi3+0x4c>
10006968:	314dc83a 	sub	r6,r6,r5
1000696c:	10c4b03a 	or	r2,r2,r3
10006970:	1806d07a 	srli	r3,r3,1
10006974:	280ad07a 	srli	r5,r5,1
10006978:	183ffa1e 	bne	r3,zero,10006964 <__alt_data_end+0xf8006964>
1000697c:	38000126 	beq	r7,zero,10006984 <__divsi3+0x60>
10006980:	0085c83a 	sub	r2,zero,r2
10006984:	f800283a 	ret
10006988:	014bc83a 	sub	r5,zero,r5
1000698c:	39c0005c 	xori	r7,r7,1
10006990:	003fe706 	br	10006930 <__alt_data_end+0xf8006930>
10006994:	0109c83a 	sub	r4,zero,r4
10006998:	01c00044 	movi	r7,1
1000699c:	003fe306 	br	1000692c <__alt_data_end+0xf800692c>
100069a0:	00c00044 	movi	r3,1
100069a4:	003fee06 	br	10006960 <__alt_data_end+0xf8006960>

100069a8 <__modsi3>:
100069a8:	20001716 	blt	r4,zero,10006a08 <__modsi3+0x60>
100069ac:	000f883a 	mov	r7,zero
100069b0:	2005883a 	mov	r2,r4
100069b4:	28001216 	blt	r5,zero,10006a00 <__modsi3+0x58>
100069b8:	2900162e 	bgeu	r5,r4,10006a14 <__modsi3+0x6c>
100069bc:	01800804 	movi	r6,32
100069c0:	00c00044 	movi	r3,1
100069c4:	00000106 	br	100069cc <__modsi3+0x24>
100069c8:	30000a26 	beq	r6,zero,100069f4 <__modsi3+0x4c>
100069cc:	294b883a 	add	r5,r5,r5
100069d0:	31bfffc4 	addi	r6,r6,-1
100069d4:	18c7883a 	add	r3,r3,r3
100069d8:	293ffb36 	bltu	r5,r4,100069c8 <__alt_data_end+0xf80069c8>
100069dc:	18000526 	beq	r3,zero,100069f4 <__modsi3+0x4c>
100069e0:	1806d07a 	srli	r3,r3,1
100069e4:	11400136 	bltu	r2,r5,100069ec <__modsi3+0x44>
100069e8:	1145c83a 	sub	r2,r2,r5
100069ec:	280ad07a 	srli	r5,r5,1
100069f0:	183ffb1e 	bne	r3,zero,100069e0 <__alt_data_end+0xf80069e0>
100069f4:	38000126 	beq	r7,zero,100069fc <__modsi3+0x54>
100069f8:	0085c83a 	sub	r2,zero,r2
100069fc:	f800283a 	ret
10006a00:	014bc83a 	sub	r5,zero,r5
10006a04:	003fec06 	br	100069b8 <__alt_data_end+0xf80069b8>
10006a08:	0109c83a 	sub	r4,zero,r4
10006a0c:	01c00044 	movi	r7,1
10006a10:	003fe706 	br	100069b0 <__alt_data_end+0xf80069b0>
10006a14:	00c00044 	movi	r3,1
10006a18:	003ff106 	br	100069e0 <__alt_data_end+0xf80069e0>

10006a1c <__udivsi3>:
10006a1c:	200d883a 	mov	r6,r4
10006a20:	2900152e 	bgeu	r5,r4,10006a78 <__udivsi3+0x5c>
10006a24:	28001416 	blt	r5,zero,10006a78 <__udivsi3+0x5c>
10006a28:	00800804 	movi	r2,32
10006a2c:	00c00044 	movi	r3,1
10006a30:	00000206 	br	10006a3c <__udivsi3+0x20>
10006a34:	10000e26 	beq	r2,zero,10006a70 <__udivsi3+0x54>
10006a38:	28000516 	blt	r5,zero,10006a50 <__udivsi3+0x34>
10006a3c:	294b883a 	add	r5,r5,r5
10006a40:	10bfffc4 	addi	r2,r2,-1
10006a44:	18c7883a 	add	r3,r3,r3
10006a48:	293ffa36 	bltu	r5,r4,10006a34 <__alt_data_end+0xf8006a34>
10006a4c:	18000826 	beq	r3,zero,10006a70 <__udivsi3+0x54>
10006a50:	0005883a 	mov	r2,zero
10006a54:	31400236 	bltu	r6,r5,10006a60 <__udivsi3+0x44>
10006a58:	314dc83a 	sub	r6,r6,r5
10006a5c:	10c4b03a 	or	r2,r2,r3
10006a60:	1806d07a 	srli	r3,r3,1
10006a64:	280ad07a 	srli	r5,r5,1
10006a68:	183ffa1e 	bne	r3,zero,10006a54 <__alt_data_end+0xf8006a54>
10006a6c:	f800283a 	ret
10006a70:	0005883a 	mov	r2,zero
10006a74:	f800283a 	ret
10006a78:	00c00044 	movi	r3,1
10006a7c:	003ff406 	br	10006a50 <__alt_data_end+0xf8006a50>

10006a80 <__umodsi3>:
10006a80:	2005883a 	mov	r2,r4
10006a84:	2900122e 	bgeu	r5,r4,10006ad0 <__umodsi3+0x50>
10006a88:	28001116 	blt	r5,zero,10006ad0 <__umodsi3+0x50>
10006a8c:	01800804 	movi	r6,32
10006a90:	00c00044 	movi	r3,1
10006a94:	00000206 	br	10006aa0 <__umodsi3+0x20>
10006a98:	30000c26 	beq	r6,zero,10006acc <__umodsi3+0x4c>
10006a9c:	28000516 	blt	r5,zero,10006ab4 <__umodsi3+0x34>
10006aa0:	294b883a 	add	r5,r5,r5
10006aa4:	31bfffc4 	addi	r6,r6,-1
10006aa8:	18c7883a 	add	r3,r3,r3
10006aac:	293ffa36 	bltu	r5,r4,10006a98 <__alt_data_end+0xf8006a98>
10006ab0:	18000626 	beq	r3,zero,10006acc <__umodsi3+0x4c>
10006ab4:	1806d07a 	srli	r3,r3,1
10006ab8:	11400136 	bltu	r2,r5,10006ac0 <__umodsi3+0x40>
10006abc:	1145c83a 	sub	r2,r2,r5
10006ac0:	280ad07a 	srli	r5,r5,1
10006ac4:	183ffb1e 	bne	r3,zero,10006ab4 <__alt_data_end+0xf8006ab4>
10006ac8:	f800283a 	ret
10006acc:	f800283a 	ret
10006ad0:	00c00044 	movi	r3,1
10006ad4:	003ff706 	br	10006ab4 <__alt_data_end+0xf8006ab4>

10006ad8 <__mulsi3>:
10006ad8:	0005883a 	mov	r2,zero
10006adc:	20000726 	beq	r4,zero,10006afc <__mulsi3+0x24>
10006ae0:	20c0004c 	andi	r3,r4,1
10006ae4:	2008d07a 	srli	r4,r4,1
10006ae8:	18000126 	beq	r3,zero,10006af0 <__mulsi3+0x18>
10006aec:	1145883a 	add	r2,r2,r5
10006af0:	294b883a 	add	r5,r5,r5
10006af4:	203ffa1e 	bne	r4,zero,10006ae0 <__alt_data_end+0xf8006ae0>
10006af8:	f800283a 	ret
10006afc:	f800283a 	ret

10006b00 <_printf_r>:
10006b00:	defffd04 	addi	sp,sp,-12
10006b04:	2805883a 	mov	r2,r5
10006b08:	dfc00015 	stw	ra,0(sp)
10006b0c:	d9800115 	stw	r6,4(sp)
10006b10:	d9c00215 	stw	r7,8(sp)
10006b14:	21400217 	ldw	r5,8(r4)
10006b18:	d9c00104 	addi	r7,sp,4
10006b1c:	100d883a 	mov	r6,r2
10006b20:	0006cd80 	call	10006cd8 <___vfprintf_internal_r>
10006b24:	dfc00017 	ldw	ra,0(sp)
10006b28:	dec00304 	addi	sp,sp,12
10006b2c:	f800283a 	ret

10006b30 <printf>:
10006b30:	defffc04 	addi	sp,sp,-16
10006b34:	dfc00015 	stw	ra,0(sp)
10006b38:	d9400115 	stw	r5,4(sp)
10006b3c:	d9800215 	stw	r6,8(sp)
10006b40:	d9c00315 	stw	r7,12(sp)
10006b44:	008400b4 	movhi	r2,4098
10006b48:	1095f304 	addi	r2,r2,22476
10006b4c:	10800017 	ldw	r2,0(r2)
10006b50:	200b883a 	mov	r5,r4
10006b54:	d9800104 	addi	r6,sp,4
10006b58:	11000217 	ldw	r4,8(r2)
10006b5c:	0008fb40 	call	10008fb4 <__vfprintf_internal>
10006b60:	dfc00017 	ldw	ra,0(sp)
10006b64:	dec00404 	addi	sp,sp,16
10006b68:	f800283a 	ret

10006b6c <_puts_r>:
10006b6c:	defff604 	addi	sp,sp,-40
10006b70:	dc000715 	stw	r16,28(sp)
10006b74:	2021883a 	mov	r16,r4
10006b78:	2809883a 	mov	r4,r5
10006b7c:	dc400815 	stw	r17,32(sp)
10006b80:	dfc00915 	stw	ra,36(sp)
10006b84:	2823883a 	mov	r17,r5
10006b88:	0006c400 	call	10006c40 <strlen>
10006b8c:	10c00044 	addi	r3,r2,1
10006b90:	d8800115 	stw	r2,4(sp)
10006b94:	00840074 	movhi	r2,4097
10006b98:	109a3104 	addi	r2,r2,26820
10006b9c:	d8800215 	stw	r2,8(sp)
10006ba0:	00800044 	movi	r2,1
10006ba4:	d8800315 	stw	r2,12(sp)
10006ba8:	00800084 	movi	r2,2
10006bac:	dc400015 	stw	r17,0(sp)
10006bb0:	d8c00615 	stw	r3,24(sp)
10006bb4:	dec00415 	stw	sp,16(sp)
10006bb8:	d8800515 	stw	r2,20(sp)
10006bbc:	80000226 	beq	r16,zero,10006bc8 <_puts_r+0x5c>
10006bc0:	80800e17 	ldw	r2,56(r16)
10006bc4:	10001426 	beq	r2,zero,10006c18 <_puts_r+0xac>
10006bc8:	81400217 	ldw	r5,8(r16)
10006bcc:	2880030b 	ldhu	r2,12(r5)
10006bd0:	10c8000c 	andi	r3,r2,8192
10006bd4:	1800061e 	bne	r3,zero,10006bf0 <_puts_r+0x84>
10006bd8:	29001917 	ldw	r4,100(r5)
10006bdc:	00f7ffc4 	movi	r3,-8193
10006be0:	10880014 	ori	r2,r2,8192
10006be4:	20c6703a 	and	r3,r4,r3
10006be8:	2880030d 	sth	r2,12(r5)
10006bec:	28c01915 	stw	r3,100(r5)
10006bf0:	d9800404 	addi	r6,sp,16
10006bf4:	8009883a 	mov	r4,r16
10006bf8:	000b51c0 	call	1000b51c <__sfvwrite_r>
10006bfc:	1000091e 	bne	r2,zero,10006c24 <_puts_r+0xb8>
10006c00:	00800284 	movi	r2,10
10006c04:	dfc00917 	ldw	ra,36(sp)
10006c08:	dc400817 	ldw	r17,32(sp)
10006c0c:	dc000717 	ldw	r16,28(sp)
10006c10:	dec00a04 	addi	sp,sp,40
10006c14:	f800283a 	ret
10006c18:	8009883a 	mov	r4,r16
10006c1c:	000b0980 	call	1000b098 <__sinit>
10006c20:	003fe906 	br	10006bc8 <__alt_data_end+0xf8006bc8>
10006c24:	00bfffc4 	movi	r2,-1
10006c28:	003ff606 	br	10006c04 <__alt_data_end+0xf8006c04>

10006c2c <puts>:
10006c2c:	008400b4 	movhi	r2,4098
10006c30:	1095f304 	addi	r2,r2,22476
10006c34:	200b883a 	mov	r5,r4
10006c38:	11000017 	ldw	r4,0(r2)
10006c3c:	0006b6c1 	jmpi	10006b6c <_puts_r>

10006c40 <strlen>:
10006c40:	208000cc 	andi	r2,r4,3
10006c44:	10002026 	beq	r2,zero,10006cc8 <strlen+0x88>
10006c48:	20800007 	ldb	r2,0(r4)
10006c4c:	10002026 	beq	r2,zero,10006cd0 <strlen+0x90>
10006c50:	2005883a 	mov	r2,r4
10006c54:	00000206 	br	10006c60 <strlen+0x20>
10006c58:	10c00007 	ldb	r3,0(r2)
10006c5c:	18001826 	beq	r3,zero,10006cc0 <strlen+0x80>
10006c60:	10800044 	addi	r2,r2,1
10006c64:	10c000cc 	andi	r3,r2,3
10006c68:	183ffb1e 	bne	r3,zero,10006c58 <__alt_data_end+0xf8006c58>
10006c6c:	10c00017 	ldw	r3,0(r2)
10006c70:	01ffbff4 	movhi	r7,65279
10006c74:	39ffbfc4 	addi	r7,r7,-257
10006c78:	00ca303a 	nor	r5,zero,r3
10006c7c:	01a02074 	movhi	r6,32897
10006c80:	19c7883a 	add	r3,r3,r7
10006c84:	31a02004 	addi	r6,r6,-32640
10006c88:	1946703a 	and	r3,r3,r5
10006c8c:	1986703a 	and	r3,r3,r6
10006c90:	1800091e 	bne	r3,zero,10006cb8 <strlen+0x78>
10006c94:	10800104 	addi	r2,r2,4
10006c98:	10c00017 	ldw	r3,0(r2)
10006c9c:	19cb883a 	add	r5,r3,r7
10006ca0:	00c6303a 	nor	r3,zero,r3
10006ca4:	28c6703a 	and	r3,r5,r3
10006ca8:	1986703a 	and	r3,r3,r6
10006cac:	183ff926 	beq	r3,zero,10006c94 <__alt_data_end+0xf8006c94>
10006cb0:	00000106 	br	10006cb8 <strlen+0x78>
10006cb4:	10800044 	addi	r2,r2,1
10006cb8:	10c00007 	ldb	r3,0(r2)
10006cbc:	183ffd1e 	bne	r3,zero,10006cb4 <__alt_data_end+0xf8006cb4>
10006cc0:	1105c83a 	sub	r2,r2,r4
10006cc4:	f800283a 	ret
10006cc8:	2005883a 	mov	r2,r4
10006ccc:	003fe706 	br	10006c6c <__alt_data_end+0xf8006c6c>
10006cd0:	0005883a 	mov	r2,zero
10006cd4:	f800283a 	ret

10006cd8 <___vfprintf_internal_r>:
10006cd8:	deffb804 	addi	sp,sp,-288
10006cdc:	dfc04715 	stw	ra,284(sp)
10006ce0:	ddc04515 	stw	r23,276(sp)
10006ce4:	dd404315 	stw	r21,268(sp)
10006ce8:	d9002d15 	stw	r4,180(sp)
10006cec:	282f883a 	mov	r23,r5
10006cf0:	302b883a 	mov	r21,r6
10006cf4:	d9c02e15 	stw	r7,184(sp)
10006cf8:	df004615 	stw	fp,280(sp)
10006cfc:	dd804415 	stw	r22,272(sp)
10006d00:	dd004215 	stw	r20,264(sp)
10006d04:	dcc04115 	stw	r19,260(sp)
10006d08:	dc804015 	stw	r18,256(sp)
10006d0c:	dc403f15 	stw	r17,252(sp)
10006d10:	dc003e15 	stw	r16,248(sp)
10006d14:	000bc180 	call	1000bc18 <_localeconv_r>
10006d18:	10800017 	ldw	r2,0(r2)
10006d1c:	1009883a 	mov	r4,r2
10006d20:	d8803415 	stw	r2,208(sp)
10006d24:	0006c400 	call	10006c40 <strlen>
10006d28:	d8803715 	stw	r2,220(sp)
10006d2c:	d8802d17 	ldw	r2,180(sp)
10006d30:	10000226 	beq	r2,zero,10006d3c <___vfprintf_internal_r+0x64>
10006d34:	10800e17 	ldw	r2,56(r2)
10006d38:	1000fb26 	beq	r2,zero,10007128 <___vfprintf_internal_r+0x450>
10006d3c:	b880030b 	ldhu	r2,12(r23)
10006d40:	10c8000c 	andi	r3,r2,8192
10006d44:	1800061e 	bne	r3,zero,10006d60 <___vfprintf_internal_r+0x88>
10006d48:	b9001917 	ldw	r4,100(r23)
10006d4c:	00f7ffc4 	movi	r3,-8193
10006d50:	10880014 	ori	r2,r2,8192
10006d54:	20c6703a 	and	r3,r4,r3
10006d58:	b880030d 	sth	r2,12(r23)
10006d5c:	b8c01915 	stw	r3,100(r23)
10006d60:	10c0020c 	andi	r3,r2,8
10006d64:	1800c326 	beq	r3,zero,10007074 <___vfprintf_internal_r+0x39c>
10006d68:	b8c00417 	ldw	r3,16(r23)
10006d6c:	1800c126 	beq	r3,zero,10007074 <___vfprintf_internal_r+0x39c>
10006d70:	1080068c 	andi	r2,r2,26
10006d74:	00c00284 	movi	r3,10
10006d78:	10c0c626 	beq	r2,r3,10007094 <___vfprintf_internal_r+0x3bc>
10006d7c:	d8c00404 	addi	r3,sp,16
10006d80:	05040074 	movhi	r20,4097
10006d84:	d9001e04 	addi	r4,sp,120
10006d88:	a51a4284 	addi	r20,r20,26890
10006d8c:	d8c01e15 	stw	r3,120(sp)
10006d90:	d8002015 	stw	zero,128(sp)
10006d94:	d8001f15 	stw	zero,124(sp)
10006d98:	d8003315 	stw	zero,204(sp)
10006d9c:	d8003615 	stw	zero,216(sp)
10006da0:	d8003815 	stw	zero,224(sp)
10006da4:	1811883a 	mov	r8,r3
10006da8:	d8003915 	stw	zero,228(sp)
10006dac:	d8003a15 	stw	zero,232(sp)
10006db0:	d8002f15 	stw	zero,188(sp)
10006db4:	d9002815 	stw	r4,160(sp)
10006db8:	a8800007 	ldb	r2,0(r21)
10006dbc:	10028b26 	beq	r2,zero,100077ec <___vfprintf_internal_r+0xb14>
10006dc0:	00c00944 	movi	r3,37
10006dc4:	a823883a 	mov	r17,r21
10006dc8:	10c0021e 	bne	r2,r3,10006dd4 <___vfprintf_internal_r+0xfc>
10006dcc:	00001406 	br	10006e20 <___vfprintf_internal_r+0x148>
10006dd0:	10c00326 	beq	r2,r3,10006de0 <___vfprintf_internal_r+0x108>
10006dd4:	8c400044 	addi	r17,r17,1
10006dd8:	88800007 	ldb	r2,0(r17)
10006ddc:	103ffc1e 	bne	r2,zero,10006dd0 <__alt_data_end+0xf8006dd0>
10006de0:	8d61c83a 	sub	r16,r17,r21
10006de4:	80000e26 	beq	r16,zero,10006e20 <___vfprintf_internal_r+0x148>
10006de8:	d8c02017 	ldw	r3,128(sp)
10006dec:	d8801f17 	ldw	r2,124(sp)
10006df0:	45400015 	stw	r21,0(r8)
10006df4:	1c07883a 	add	r3,r3,r16
10006df8:	10800044 	addi	r2,r2,1
10006dfc:	d8c02015 	stw	r3,128(sp)
10006e00:	44000115 	stw	r16,4(r8)
10006e04:	d8801f15 	stw	r2,124(sp)
10006e08:	00c001c4 	movi	r3,7
10006e0c:	1880a916 	blt	r3,r2,100070b4 <___vfprintf_internal_r+0x3dc>
10006e10:	42000204 	addi	r8,r8,8
10006e14:	d9402f17 	ldw	r5,188(sp)
10006e18:	2c0b883a 	add	r5,r5,r16
10006e1c:	d9402f15 	stw	r5,188(sp)
10006e20:	88800007 	ldb	r2,0(r17)
10006e24:	1000aa26 	beq	r2,zero,100070d0 <___vfprintf_internal_r+0x3f8>
10006e28:	8d400044 	addi	r21,r17,1
10006e2c:	8c400047 	ldb	r17,1(r17)
10006e30:	0021883a 	mov	r16,zero
10006e34:	00bfffc4 	movi	r2,-1
10006e38:	0025883a 	mov	r18,zero
10006e3c:	dc002905 	stb	r16,164(sp)
10006e40:	d8002785 	stb	zero,158(sp)
10006e44:	d8002b05 	stb	zero,172(sp)
10006e48:	d8802a15 	stw	r2,168(sp)
10006e4c:	d8003115 	stw	zero,196(sp)
10006e50:	04c01604 	movi	r19,88
10006e54:	05800244 	movi	r22,9
10006e58:	9021883a 	mov	r16,r18
10006e5c:	4039883a 	mov	fp,r8
10006e60:	ad400044 	addi	r21,r21,1
10006e64:	88bff804 	addi	r2,r17,-32
10006e68:	98833236 	bltu	r19,r2,10007b34 <___vfprintf_internal_r+0xe5c>
10006e6c:	100490ba 	slli	r2,r2,2
10006e70:	00c40034 	movhi	r3,4096
10006e74:	18dba104 	addi	r3,r3,28292
10006e78:	10c5883a 	add	r2,r2,r3
10006e7c:	10800017 	ldw	r2,0(r2)
10006e80:	1000683a 	jmp	r2
10006e84:	10007a2c 	andhi	zero,r2,488
10006e88:	10007b34 	orhi	zero,r2,492
10006e8c:	10007b34 	orhi	zero,r2,492
10006e90:	10007a4c 	andi	zero,r2,489
10006e94:	10007b34 	orhi	zero,r2,492
10006e98:	10007b34 	orhi	zero,r2,492
10006e9c:	10007b34 	orhi	zero,r2,492
10006ea0:	10007b34 	orhi	zero,r2,492
10006ea4:	10007b34 	orhi	zero,r2,492
10006ea8:	10007b34 	orhi	zero,r2,492
10006eac:	10007134 	orhi	zero,r2,452
10006eb0:	1000793c 	xorhi	zero,r2,484
10006eb4:	10007b34 	orhi	zero,r2,492
10006eb8:	10006ff8 	rdprs	zero,r2,447
10006ebc:	10007158 	cmpnei	zero,r2,453
10006ec0:	10007b34 	orhi	zero,r2,492
10006ec4:	100071a8 	cmpgeui	zero,r2,454
10006ec8:	100071b4 	orhi	zero,r2,454
10006ecc:	100071b4 	orhi	zero,r2,454
10006ed0:	100071b4 	orhi	zero,r2,454
10006ed4:	100071b4 	orhi	zero,r2,454
10006ed8:	100071b4 	orhi	zero,r2,454
10006edc:	100071b4 	orhi	zero,r2,454
10006ee0:	100071b4 	orhi	zero,r2,454
10006ee4:	100071b4 	orhi	zero,r2,454
10006ee8:	100071b4 	orhi	zero,r2,454
10006eec:	10007b34 	orhi	zero,r2,492
10006ef0:	10007b34 	orhi	zero,r2,492
10006ef4:	10007b34 	orhi	zero,r2,492
10006ef8:	10007b34 	orhi	zero,r2,492
10006efc:	10007b34 	orhi	zero,r2,492
10006f00:	10007b34 	orhi	zero,r2,492
10006f04:	10007b34 	orhi	zero,r2,492
10006f08:	10007b34 	orhi	zero,r2,492
10006f0c:	10007b34 	orhi	zero,r2,492
10006f10:	10007b34 	orhi	zero,r2,492
10006f14:	100071f0 	cmpltui	zero,r2,455
10006f18:	100072b8 	rdprs	zero,r2,458
10006f1c:	10007b34 	orhi	zero,r2,492
10006f20:	100072b8 	rdprs	zero,r2,458
10006f24:	10007b34 	orhi	zero,r2,492
10006f28:	10007b34 	orhi	zero,r2,492
10006f2c:	10007b34 	orhi	zero,r2,492
10006f30:	10007b34 	orhi	zero,r2,492
10006f34:	10007364 	muli	zero,r2,461
10006f38:	10007b34 	orhi	zero,r2,492
10006f3c:	10007b34 	orhi	zero,r2,492
10006f40:	10007370 	cmpltui	zero,r2,461
10006f44:	10007b34 	orhi	zero,r2,492
10006f48:	10007b34 	orhi	zero,r2,492
10006f4c:	10007b34 	orhi	zero,r2,492
10006f50:	10007b34 	orhi	zero,r2,492
10006f54:	10007b34 	orhi	zero,r2,492
10006f58:	100077f4 	orhi	zero,r2,479
10006f5c:	10007b34 	orhi	zero,r2,492
10006f60:	10007b34 	orhi	zero,r2,492
10006f64:	10007860 	cmpeqi	zero,r2,481
10006f68:	10007b34 	orhi	zero,r2,492
10006f6c:	10007b34 	orhi	zero,r2,492
10006f70:	10007b34 	orhi	zero,r2,492
10006f74:	10007b34 	orhi	zero,r2,492
10006f78:	10007b34 	orhi	zero,r2,492
10006f7c:	10007b34 	orhi	zero,r2,492
10006f80:	10007b34 	orhi	zero,r2,492
10006f84:	10007b34 	orhi	zero,r2,492
10006f88:	10007b34 	orhi	zero,r2,492
10006f8c:	10007b34 	orhi	zero,r2,492
10006f90:	10007ad8 	cmpnei	zero,r2,491
10006f94:	10007a58 	cmpnei	zero,r2,489
10006f98:	100072b8 	rdprs	zero,r2,458
10006f9c:	100072b8 	rdprs	zero,r2,458
10006fa0:	100072b8 	rdprs	zero,r2,458
10006fa4:	10007a78 	rdprs	zero,r2,489
10006fa8:	10007a58 	cmpnei	zero,r2,489
10006fac:	10007b34 	orhi	zero,r2,492
10006fb0:	10007b34 	orhi	zero,r2,492
10006fb4:	10007a84 	addi	zero,r2,490
10006fb8:	10007b34 	orhi	zero,r2,492
10006fbc:	10007a98 	cmpnei	zero,r2,490
10006fc0:	1000791c 	xori	zero,r2,484
10006fc4:	10007004 	addi	zero,r2,448
10006fc8:	10007954 	ori	zero,r2,485
10006fcc:	10007b34 	orhi	zero,r2,492
10006fd0:	10007960 	cmpeqi	zero,r2,485
10006fd4:	10007b34 	orhi	zero,r2,492
10006fd8:	100079c4 	addi	zero,r2,487
10006fdc:	10007b34 	orhi	zero,r2,492
10006fe0:	10007b34 	orhi	zero,r2,492
10006fe4:	100079e4 	muli	zero,r2,487
10006fe8:	d8c03117 	ldw	r3,196(sp)
10006fec:	d8802e15 	stw	r2,184(sp)
10006ff0:	00c7c83a 	sub	r3,zero,r3
10006ff4:	d8c03115 	stw	r3,196(sp)
10006ff8:	84000114 	ori	r16,r16,4
10006ffc:	ac400007 	ldb	r17,0(r21)
10007000:	003f9706 	br	10006e60 <__alt_data_end+0xf8006e60>
10007004:	00800c04 	movi	r2,48
10007008:	d8802705 	stb	r2,156(sp)
1000700c:	00801e04 	movi	r2,120
10007010:	d8802745 	stb	r2,157(sp)
10007014:	d9002a17 	ldw	r4,168(sp)
10007018:	d8802e17 	ldw	r2,184(sp)
1000701c:	d8002785 	stb	zero,158(sp)
10007020:	e011883a 	mov	r8,fp
10007024:	10c00104 	addi	r3,r2,4
10007028:	14c00017 	ldw	r19,0(r2)
1000702c:	002d883a 	mov	r22,zero
10007030:	80800094 	ori	r2,r16,2
10007034:	2002ca16 	blt	r4,zero,10007b60 <___vfprintf_internal_r+0xe88>
10007038:	00bfdfc4 	movi	r2,-129
1000703c:	80a4703a 	and	r18,r16,r2
10007040:	d8c02e15 	stw	r3,184(sp)
10007044:	94800094 	ori	r18,r18,2
10007048:	9802b41e 	bne	r19,zero,10007b1c <___vfprintf_internal_r+0xe44>
1000704c:	01440074 	movhi	r5,4097
10007050:	295a3b04 	addi	r5,r5,26860
10007054:	d9403915 	stw	r5,228(sp)
10007058:	04401e04 	movi	r17,120
1000705c:	d8802a17 	ldw	r2,168(sp)
10007060:	0039883a 	mov	fp,zero
10007064:	1001fa26 	beq	r2,zero,10007850 <___vfprintf_internal_r+0xb78>
10007068:	0027883a 	mov	r19,zero
1000706c:	002d883a 	mov	r22,zero
10007070:	00021906 	br	100078d8 <___vfprintf_internal_r+0xc00>
10007074:	d9002d17 	ldw	r4,180(sp)
10007078:	b80b883a 	mov	r5,r23
1000707c:	000908c0 	call	1000908c <__swsetup_r>
10007080:	1005dc1e 	bne	r2,zero,100087f4 <___vfprintf_internal_r+0x1b1c>
10007084:	b880030b 	ldhu	r2,12(r23)
10007088:	00c00284 	movi	r3,10
1000708c:	1080068c 	andi	r2,r2,26
10007090:	10ff3a1e 	bne	r2,r3,10006d7c <__alt_data_end+0xf8006d7c>
10007094:	b880038f 	ldh	r2,14(r23)
10007098:	103f3816 	blt	r2,zero,10006d7c <__alt_data_end+0xf8006d7c>
1000709c:	d9c02e17 	ldw	r7,184(sp)
100070a0:	d9002d17 	ldw	r4,180(sp)
100070a4:	a80d883a 	mov	r6,r21
100070a8:	b80b883a 	mov	r5,r23
100070ac:	0008fd00 	call	10008fd0 <__sbprintf>
100070b0:	00001106 	br	100070f8 <___vfprintf_internal_r+0x420>
100070b4:	d9002d17 	ldw	r4,180(sp)
100070b8:	d9801e04 	addi	r6,sp,120
100070bc:	b80b883a 	mov	r5,r23
100070c0:	000e4b80 	call	1000e4b8 <__sprint_r>
100070c4:	1000081e 	bne	r2,zero,100070e8 <___vfprintf_internal_r+0x410>
100070c8:	da000404 	addi	r8,sp,16
100070cc:	003f5106 	br	10006e14 <__alt_data_end+0xf8006e14>
100070d0:	d8802017 	ldw	r2,128(sp)
100070d4:	10000426 	beq	r2,zero,100070e8 <___vfprintf_internal_r+0x410>
100070d8:	d9002d17 	ldw	r4,180(sp)
100070dc:	d9801e04 	addi	r6,sp,120
100070e0:	b80b883a 	mov	r5,r23
100070e4:	000e4b80 	call	1000e4b8 <__sprint_r>
100070e8:	b880030b 	ldhu	r2,12(r23)
100070ec:	1080100c 	andi	r2,r2,64
100070f0:	1005c01e 	bne	r2,zero,100087f4 <___vfprintf_internal_r+0x1b1c>
100070f4:	d8802f17 	ldw	r2,188(sp)
100070f8:	dfc04717 	ldw	ra,284(sp)
100070fc:	df004617 	ldw	fp,280(sp)
10007100:	ddc04517 	ldw	r23,276(sp)
10007104:	dd804417 	ldw	r22,272(sp)
10007108:	dd404317 	ldw	r21,268(sp)
1000710c:	dd004217 	ldw	r20,264(sp)
10007110:	dcc04117 	ldw	r19,260(sp)
10007114:	dc804017 	ldw	r18,256(sp)
10007118:	dc403f17 	ldw	r17,252(sp)
1000711c:	dc003e17 	ldw	r16,248(sp)
10007120:	dec04804 	addi	sp,sp,288
10007124:	f800283a 	ret
10007128:	d9002d17 	ldw	r4,180(sp)
1000712c:	000b0980 	call	1000b098 <__sinit>
10007130:	003f0206 	br	10006d3c <__alt_data_end+0xf8006d3c>
10007134:	d9002e17 	ldw	r4,184(sp)
10007138:	d9402e17 	ldw	r5,184(sp)
1000713c:	21000017 	ldw	r4,0(r4)
10007140:	28800104 	addi	r2,r5,4
10007144:	d9003115 	stw	r4,196(sp)
10007148:	203fa716 	blt	r4,zero,10006fe8 <__alt_data_end+0xf8006fe8>
1000714c:	d8802e15 	stw	r2,184(sp)
10007150:	ac400007 	ldb	r17,0(r21)
10007154:	003f4206 	br	10006e60 <__alt_data_end+0xf8006e60>
10007158:	ac400007 	ldb	r17,0(r21)
1000715c:	01000a84 	movi	r4,42
10007160:	a8c00044 	addi	r3,r21,1
10007164:	89075826 	beq	r17,r4,10008ec8 <___vfprintf_internal_r+0x21f0>
10007168:	8cbff404 	addi	r18,r17,-48
1000716c:	b486ae36 	bltu	r22,r18,10008c28 <___vfprintf_internal_r+0x1f50>
10007170:	0009883a 	mov	r4,zero
10007174:	1823883a 	mov	r17,r3
10007178:	01400284 	movi	r5,10
1000717c:	0006ad80 	call	10006ad8 <__mulsi3>
10007180:	88c00007 	ldb	r3,0(r17)
10007184:	1489883a 	add	r4,r2,r18
10007188:	8d400044 	addi	r21,r17,1
1000718c:	1cbff404 	addi	r18,r3,-48
10007190:	a823883a 	mov	r17,r21
10007194:	b4bff82e 	bgeu	r22,r18,10007178 <__alt_data_end+0xf8007178>
10007198:	1823883a 	mov	r17,r3
1000719c:	2005f616 	blt	r4,zero,10008978 <___vfprintf_internal_r+0x1ca0>
100071a0:	d9002a15 	stw	r4,168(sp)
100071a4:	003f2f06 	br	10006e64 <__alt_data_end+0xf8006e64>
100071a8:	84002014 	ori	r16,r16,128
100071ac:	ac400007 	ldb	r17,0(r21)
100071b0:	003f2b06 	br	10006e60 <__alt_data_end+0xf8006e60>
100071b4:	8cbff404 	addi	r18,r17,-48
100071b8:	d8003115 	stw	zero,196(sp)
100071bc:	0009883a 	mov	r4,zero
100071c0:	a823883a 	mov	r17,r21
100071c4:	01400284 	movi	r5,10
100071c8:	0006ad80 	call	10006ad8 <__mulsi3>
100071cc:	88c00007 	ldb	r3,0(r17)
100071d0:	9089883a 	add	r4,r18,r2
100071d4:	ad400044 	addi	r21,r21,1
100071d8:	1cbff404 	addi	r18,r3,-48
100071dc:	a823883a 	mov	r17,r21
100071e0:	b4bff82e 	bgeu	r22,r18,100071c4 <__alt_data_end+0xf80071c4>
100071e4:	1823883a 	mov	r17,r3
100071e8:	d9003115 	stw	r4,196(sp)
100071ec:	003f1d06 	br	10006e64 <__alt_data_end+0xf8006e64>
100071f0:	8025883a 	mov	r18,r16
100071f4:	dc002903 	ldbu	r16,164(sp)
100071f8:	e011883a 	mov	r8,fp
100071fc:	84003fcc 	andi	r16,r16,255
10007200:	8007531e 	bne	r16,zero,10008f50 <___vfprintf_internal_r+0x2278>
10007204:	94800414 	ori	r18,r18,16
10007208:	9080080c 	andi	r2,r18,32
1000720c:	1003a326 	beq	r2,zero,1000809c <___vfprintf_internal_r+0x13c4>
10007210:	d9002e17 	ldw	r4,184(sp)
10007214:	20800117 	ldw	r2,4(r4)
10007218:	24c00017 	ldw	r19,0(r4)
1000721c:	21000204 	addi	r4,r4,8
10007220:	d9002e15 	stw	r4,184(sp)
10007224:	102d883a 	mov	r22,r2
10007228:	10047316 	blt	r2,zero,100083f8 <___vfprintf_internal_r+0x1720>
1000722c:	d9002a17 	ldw	r4,168(sp)
10007230:	df002783 	ldbu	fp,158(sp)
10007234:	2003e416 	blt	r4,zero,100081c8 <___vfprintf_internal_r+0x14f0>
10007238:	00ffdfc4 	movi	r3,-129
1000723c:	9d84b03a 	or	r2,r19,r22
10007240:	90e4703a 	and	r18,r18,r3
10007244:	10018026 	beq	r2,zero,10007848 <___vfprintf_internal_r+0xb70>
10007248:	b003ab26 	beq	r22,zero,100080f8 <___vfprintf_internal_r+0x1420>
1000724c:	dc402915 	stw	r17,164(sp)
10007250:	dc001e04 	addi	r16,sp,120
10007254:	b023883a 	mov	r17,r22
10007258:	402d883a 	mov	r22,r8
1000725c:	9809883a 	mov	r4,r19
10007260:	880b883a 	mov	r5,r17
10007264:	01800284 	movi	r6,10
10007268:	000f883a 	mov	r7,zero
1000726c:	00109fc0 	call	100109fc <__umoddi3>
10007270:	10800c04 	addi	r2,r2,48
10007274:	843fffc4 	addi	r16,r16,-1
10007278:	9809883a 	mov	r4,r19
1000727c:	880b883a 	mov	r5,r17
10007280:	80800005 	stb	r2,0(r16)
10007284:	01800284 	movi	r6,10
10007288:	000f883a 	mov	r7,zero
1000728c:	00104000 	call	10010400 <__udivdi3>
10007290:	1027883a 	mov	r19,r2
10007294:	10c4b03a 	or	r2,r2,r3
10007298:	1823883a 	mov	r17,r3
1000729c:	103fef1e 	bne	r2,zero,1000725c <__alt_data_end+0xf800725c>
100072a0:	d8c02817 	ldw	r3,160(sp)
100072a4:	dc402917 	ldw	r17,164(sp)
100072a8:	b011883a 	mov	r8,r22
100072ac:	1c07c83a 	sub	r3,r3,r16
100072b0:	d8c02b15 	stw	r3,172(sp)
100072b4:	00005f06 	br	10007434 <___vfprintf_internal_r+0x75c>
100072b8:	8025883a 	mov	r18,r16
100072bc:	dc002903 	ldbu	r16,164(sp)
100072c0:	e011883a 	mov	r8,fp
100072c4:	84003fcc 	andi	r16,r16,255
100072c8:	80071e1e 	bne	r16,zero,10008f44 <___vfprintf_internal_r+0x226c>
100072cc:	9080020c 	andi	r2,r18,8
100072d0:	1004af26 	beq	r2,zero,10008590 <___vfprintf_internal_r+0x18b8>
100072d4:	d9002e17 	ldw	r4,184(sp)
100072d8:	d9402e17 	ldw	r5,184(sp)
100072dc:	d8802e17 	ldw	r2,184(sp)
100072e0:	21000017 	ldw	r4,0(r4)
100072e4:	29400117 	ldw	r5,4(r5)
100072e8:	10800204 	addi	r2,r2,8
100072ec:	d9003615 	stw	r4,216(sp)
100072f0:	d9403815 	stw	r5,224(sp)
100072f4:	d8802e15 	stw	r2,184(sp)
100072f8:	d9003617 	ldw	r4,216(sp)
100072fc:	d9403817 	ldw	r5,224(sp)
10007300:	da003d15 	stw	r8,244(sp)
10007304:	04000044 	movi	r16,1
10007308:	000e0dc0 	call	1000e0dc <__fpclassifyd>
1000730c:	da003d17 	ldw	r8,244(sp)
10007310:	1404441e 	bne	r2,r16,10008424 <___vfprintf_internal_r+0x174c>
10007314:	d9003617 	ldw	r4,216(sp)
10007318:	d9403817 	ldw	r5,224(sp)
1000731c:	000d883a 	mov	r6,zero
10007320:	000f883a 	mov	r7,zero
10007324:	00123a00 	call	100123a0 <__ledf2>
10007328:	da003d17 	ldw	r8,244(sp)
1000732c:	1005e316 	blt	r2,zero,10008abc <___vfprintf_internal_r+0x1de4>
10007330:	df002783 	ldbu	fp,158(sp)
10007334:	008011c4 	movi	r2,71
10007338:	1445580e 	bge	r2,r17,1000889c <___vfprintf_internal_r+0x1bc4>
1000733c:	04040074 	movhi	r16,4097
10007340:	841a3304 	addi	r16,r16,26828
10007344:	00c000c4 	movi	r3,3
10007348:	00bfdfc4 	movi	r2,-129
1000734c:	d8c02915 	stw	r3,164(sp)
10007350:	90a4703a 	and	r18,r18,r2
10007354:	d8c02b15 	stw	r3,172(sp)
10007358:	d8002a15 	stw	zero,168(sp)
1000735c:	d8003215 	stw	zero,200(sp)
10007360:	00003a06 	br	1000744c <___vfprintf_internal_r+0x774>
10007364:	84000214 	ori	r16,r16,8
10007368:	ac400007 	ldb	r17,0(r21)
1000736c:	003ebc06 	br	10006e60 <__alt_data_end+0xf8006e60>
10007370:	8025883a 	mov	r18,r16
10007374:	dc002903 	ldbu	r16,164(sp)
10007378:	e011883a 	mov	r8,fp
1000737c:	84003fcc 	andi	r16,r16,255
10007380:	8007001e 	bne	r16,zero,10008f84 <___vfprintf_internal_r+0x22ac>
10007384:	94800414 	ori	r18,r18,16
10007388:	9080080c 	andi	r2,r18,32
1000738c:	1002fa26 	beq	r2,zero,10007f78 <___vfprintf_internal_r+0x12a0>
10007390:	d9002e17 	ldw	r4,184(sp)
10007394:	d9402a17 	ldw	r5,168(sp)
10007398:	d8002785 	stb	zero,158(sp)
1000739c:	20800204 	addi	r2,r4,8
100073a0:	24c00017 	ldw	r19,0(r4)
100073a4:	25800117 	ldw	r22,4(r4)
100073a8:	2804b116 	blt	r5,zero,10008670 <___vfprintf_internal_r+0x1998>
100073ac:	013fdfc4 	movi	r4,-129
100073b0:	9d86b03a 	or	r3,r19,r22
100073b4:	d8802e15 	stw	r2,184(sp)
100073b8:	9124703a 	and	r18,r18,r4
100073bc:	1802fb1e 	bne	r3,zero,10007fac <___vfprintf_internal_r+0x12d4>
100073c0:	d8c02a17 	ldw	r3,168(sp)
100073c4:	0039883a 	mov	fp,zero
100073c8:	1805e526 	beq	r3,zero,10008b60 <___vfprintf_internal_r+0x1e88>
100073cc:	0027883a 	mov	r19,zero
100073d0:	002d883a 	mov	r22,zero
100073d4:	dc001e04 	addi	r16,sp,120
100073d8:	9806d0fa 	srli	r3,r19,3
100073dc:	b008977a 	slli	r4,r22,29
100073e0:	b02cd0fa 	srli	r22,r22,3
100073e4:	9cc001cc 	andi	r19,r19,7
100073e8:	98800c04 	addi	r2,r19,48
100073ec:	843fffc4 	addi	r16,r16,-1
100073f0:	20e6b03a 	or	r19,r4,r3
100073f4:	80800005 	stb	r2,0(r16)
100073f8:	9d86b03a 	or	r3,r19,r22
100073fc:	183ff61e 	bne	r3,zero,100073d8 <__alt_data_end+0xf80073d8>
10007400:	90c0004c 	andi	r3,r18,1
10007404:	18014126 	beq	r3,zero,1000790c <___vfprintf_internal_r+0xc34>
10007408:	10803fcc 	andi	r2,r2,255
1000740c:	1080201c 	xori	r2,r2,128
10007410:	10bfe004 	addi	r2,r2,-128
10007414:	00c00c04 	movi	r3,48
10007418:	10c13c26 	beq	r2,r3,1000790c <___vfprintf_internal_r+0xc34>
1000741c:	80ffffc5 	stb	r3,-1(r16)
10007420:	d8c02817 	ldw	r3,160(sp)
10007424:	80bfffc4 	addi	r2,r16,-1
10007428:	1021883a 	mov	r16,r2
1000742c:	1887c83a 	sub	r3,r3,r2
10007430:	d8c02b15 	stw	r3,172(sp)
10007434:	d8802b17 	ldw	r2,172(sp)
10007438:	d9002a17 	ldw	r4,168(sp)
1000743c:	1100010e 	bge	r2,r4,10007444 <___vfprintf_internal_r+0x76c>
10007440:	2005883a 	mov	r2,r4
10007444:	d8802915 	stw	r2,164(sp)
10007448:	d8003215 	stw	zero,200(sp)
1000744c:	e7003fcc 	andi	fp,fp,255
10007450:	e700201c 	xori	fp,fp,128
10007454:	e73fe004 	addi	fp,fp,-128
10007458:	e0000326 	beq	fp,zero,10007468 <___vfprintf_internal_r+0x790>
1000745c:	d8c02917 	ldw	r3,164(sp)
10007460:	18c00044 	addi	r3,r3,1
10007464:	d8c02915 	stw	r3,164(sp)
10007468:	90c0008c 	andi	r3,r18,2
1000746c:	d8c02c15 	stw	r3,176(sp)
10007470:	18000326 	beq	r3,zero,10007480 <___vfprintf_internal_r+0x7a8>
10007474:	d8c02917 	ldw	r3,164(sp)
10007478:	18c00084 	addi	r3,r3,2
1000747c:	d8c02915 	stw	r3,164(sp)
10007480:	90c0210c 	andi	r3,r18,132
10007484:	d8c03015 	stw	r3,192(sp)
10007488:	1801c51e 	bne	r3,zero,10007ba0 <___vfprintf_internal_r+0xec8>
1000748c:	d9003117 	ldw	r4,196(sp)
10007490:	d8c02917 	ldw	r3,164(sp)
10007494:	20e7c83a 	sub	r19,r4,r3
10007498:	04c1c10e 	bge	zero,r19,10007ba0 <___vfprintf_internal_r+0xec8>
1000749c:	02400404 	movi	r9,16
100074a0:	d8c02017 	ldw	r3,128(sp)
100074a4:	d8801f17 	ldw	r2,124(sp)
100074a8:	4cc52f0e 	bge	r9,r19,10008968 <___vfprintf_internal_r+0x1c90>
100074ac:	01440074 	movhi	r5,4097
100074b0:	295a4684 	addi	r5,r5,26906
100074b4:	dc403b15 	stw	r17,236(sp)
100074b8:	d9403515 	stw	r5,212(sp)
100074bc:	9823883a 	mov	r17,r19
100074c0:	482d883a 	mov	r22,r9
100074c4:	9027883a 	mov	r19,r18
100074c8:	070001c4 	movi	fp,7
100074cc:	8025883a 	mov	r18,r16
100074d0:	dc002d17 	ldw	r16,180(sp)
100074d4:	00000306 	br	100074e4 <___vfprintf_internal_r+0x80c>
100074d8:	8c7ffc04 	addi	r17,r17,-16
100074dc:	42000204 	addi	r8,r8,8
100074e0:	b440130e 	bge	r22,r17,10007530 <___vfprintf_internal_r+0x858>
100074e4:	01040074 	movhi	r4,4097
100074e8:	18c00404 	addi	r3,r3,16
100074ec:	10800044 	addi	r2,r2,1
100074f0:	211a4684 	addi	r4,r4,26906
100074f4:	41000015 	stw	r4,0(r8)
100074f8:	45800115 	stw	r22,4(r8)
100074fc:	d8c02015 	stw	r3,128(sp)
10007500:	d8801f15 	stw	r2,124(sp)
10007504:	e0bff40e 	bge	fp,r2,100074d8 <__alt_data_end+0xf80074d8>
10007508:	d9801e04 	addi	r6,sp,120
1000750c:	b80b883a 	mov	r5,r23
10007510:	8009883a 	mov	r4,r16
10007514:	000e4b80 	call	1000e4b8 <__sprint_r>
10007518:	103ef31e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
1000751c:	8c7ffc04 	addi	r17,r17,-16
10007520:	d8c02017 	ldw	r3,128(sp)
10007524:	d8801f17 	ldw	r2,124(sp)
10007528:	da000404 	addi	r8,sp,16
1000752c:	b47fed16 	blt	r22,r17,100074e4 <__alt_data_end+0xf80074e4>
10007530:	9021883a 	mov	r16,r18
10007534:	9825883a 	mov	r18,r19
10007538:	8827883a 	mov	r19,r17
1000753c:	dc403b17 	ldw	r17,236(sp)
10007540:	d9403517 	ldw	r5,212(sp)
10007544:	98c7883a 	add	r3,r19,r3
10007548:	10800044 	addi	r2,r2,1
1000754c:	41400015 	stw	r5,0(r8)
10007550:	44c00115 	stw	r19,4(r8)
10007554:	d8c02015 	stw	r3,128(sp)
10007558:	d8801f15 	stw	r2,124(sp)
1000755c:	010001c4 	movi	r4,7
10007560:	2082c516 	blt	r4,r2,10008078 <___vfprintf_internal_r+0x13a0>
10007564:	df002787 	ldb	fp,158(sp)
10007568:	42000204 	addi	r8,r8,8
1000756c:	e0000c26 	beq	fp,zero,100075a0 <___vfprintf_internal_r+0x8c8>
10007570:	d8801f17 	ldw	r2,124(sp)
10007574:	d9002784 	addi	r4,sp,158
10007578:	18c00044 	addi	r3,r3,1
1000757c:	10800044 	addi	r2,r2,1
10007580:	41000015 	stw	r4,0(r8)
10007584:	01000044 	movi	r4,1
10007588:	41000115 	stw	r4,4(r8)
1000758c:	d8c02015 	stw	r3,128(sp)
10007590:	d8801f15 	stw	r2,124(sp)
10007594:	010001c4 	movi	r4,7
10007598:	20825e16 	blt	r4,r2,10007f14 <___vfprintf_internal_r+0x123c>
1000759c:	42000204 	addi	r8,r8,8
100075a0:	d8802c17 	ldw	r2,176(sp)
100075a4:	10000c26 	beq	r2,zero,100075d8 <___vfprintf_internal_r+0x900>
100075a8:	d8801f17 	ldw	r2,124(sp)
100075ac:	d9002704 	addi	r4,sp,156
100075b0:	18c00084 	addi	r3,r3,2
100075b4:	10800044 	addi	r2,r2,1
100075b8:	41000015 	stw	r4,0(r8)
100075bc:	01000084 	movi	r4,2
100075c0:	41000115 	stw	r4,4(r8)
100075c4:	d8c02015 	stw	r3,128(sp)
100075c8:	d8801f15 	stw	r2,124(sp)
100075cc:	010001c4 	movi	r4,7
100075d0:	20825816 	blt	r4,r2,10007f34 <___vfprintf_internal_r+0x125c>
100075d4:	42000204 	addi	r8,r8,8
100075d8:	d9003017 	ldw	r4,192(sp)
100075dc:	00802004 	movi	r2,128
100075e0:	2081bb26 	beq	r4,r2,10007cd0 <___vfprintf_internal_r+0xff8>
100075e4:	d9402a17 	ldw	r5,168(sp)
100075e8:	d8802b17 	ldw	r2,172(sp)
100075ec:	28adc83a 	sub	r22,r5,r2
100075f0:	0580310e 	bge	zero,r22,100076b8 <___vfprintf_internal_r+0x9e0>
100075f4:	07000404 	movi	fp,16
100075f8:	d8801f17 	ldw	r2,124(sp)
100075fc:	e584360e 	bge	fp,r22,100086d8 <___vfprintf_internal_r+0x1a00>
10007600:	01440074 	movhi	r5,4097
10007604:	295a4284 	addi	r5,r5,26890
10007608:	dc402a15 	stw	r17,168(sp)
1000760c:	d9402c15 	stw	r5,176(sp)
10007610:	b023883a 	mov	r17,r22
10007614:	04c001c4 	movi	r19,7
10007618:	a82d883a 	mov	r22,r21
1000761c:	902b883a 	mov	r21,r18
10007620:	8025883a 	mov	r18,r16
10007624:	dc002d17 	ldw	r16,180(sp)
10007628:	00000306 	br	10007638 <___vfprintf_internal_r+0x960>
1000762c:	8c7ffc04 	addi	r17,r17,-16
10007630:	42000204 	addi	r8,r8,8
10007634:	e440110e 	bge	fp,r17,1000767c <___vfprintf_internal_r+0x9a4>
10007638:	18c00404 	addi	r3,r3,16
1000763c:	10800044 	addi	r2,r2,1
10007640:	45000015 	stw	r20,0(r8)
10007644:	47000115 	stw	fp,4(r8)
10007648:	d8c02015 	stw	r3,128(sp)
1000764c:	d8801f15 	stw	r2,124(sp)
10007650:	98bff60e 	bge	r19,r2,1000762c <__alt_data_end+0xf800762c>
10007654:	d9801e04 	addi	r6,sp,120
10007658:	b80b883a 	mov	r5,r23
1000765c:	8009883a 	mov	r4,r16
10007660:	000e4b80 	call	1000e4b8 <__sprint_r>
10007664:	103ea01e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
10007668:	8c7ffc04 	addi	r17,r17,-16
1000766c:	d8c02017 	ldw	r3,128(sp)
10007670:	d8801f17 	ldw	r2,124(sp)
10007674:	da000404 	addi	r8,sp,16
10007678:	e47fef16 	blt	fp,r17,10007638 <__alt_data_end+0xf8007638>
1000767c:	9021883a 	mov	r16,r18
10007680:	a825883a 	mov	r18,r21
10007684:	b02b883a 	mov	r21,r22
10007688:	882d883a 	mov	r22,r17
1000768c:	dc402a17 	ldw	r17,168(sp)
10007690:	d9002c17 	ldw	r4,176(sp)
10007694:	1d87883a 	add	r3,r3,r22
10007698:	10800044 	addi	r2,r2,1
1000769c:	41000015 	stw	r4,0(r8)
100076a0:	45800115 	stw	r22,4(r8)
100076a4:	d8c02015 	stw	r3,128(sp)
100076a8:	d8801f15 	stw	r2,124(sp)
100076ac:	010001c4 	movi	r4,7
100076b0:	20821016 	blt	r4,r2,10007ef4 <___vfprintf_internal_r+0x121c>
100076b4:	42000204 	addi	r8,r8,8
100076b8:	9080400c 	andi	r2,r18,256
100076bc:	10013a1e 	bne	r2,zero,10007ba8 <___vfprintf_internal_r+0xed0>
100076c0:	d9402b17 	ldw	r5,172(sp)
100076c4:	d8801f17 	ldw	r2,124(sp)
100076c8:	44000015 	stw	r16,0(r8)
100076cc:	1947883a 	add	r3,r3,r5
100076d0:	10800044 	addi	r2,r2,1
100076d4:	41400115 	stw	r5,4(r8)
100076d8:	d8c02015 	stw	r3,128(sp)
100076dc:	d8801f15 	stw	r2,124(sp)
100076e0:	010001c4 	movi	r4,7
100076e4:	2081f516 	blt	r4,r2,10007ebc <___vfprintf_internal_r+0x11e4>
100076e8:	42000204 	addi	r8,r8,8
100076ec:	9480010c 	andi	r18,r18,4
100076f0:	90003226 	beq	r18,zero,100077bc <___vfprintf_internal_r+0xae4>
100076f4:	d9403117 	ldw	r5,196(sp)
100076f8:	d8802917 	ldw	r2,164(sp)
100076fc:	28a1c83a 	sub	r16,r5,r2
10007700:	04002e0e 	bge	zero,r16,100077bc <___vfprintf_internal_r+0xae4>
10007704:	04400404 	movi	r17,16
10007708:	d8801f17 	ldw	r2,124(sp)
1000770c:	8c04c40e 	bge	r17,r16,10008a20 <___vfprintf_internal_r+0x1d48>
10007710:	01440074 	movhi	r5,4097
10007714:	295a4684 	addi	r5,r5,26906
10007718:	d9403515 	stw	r5,212(sp)
1000771c:	048001c4 	movi	r18,7
10007720:	dcc02d17 	ldw	r19,180(sp)
10007724:	00000306 	br	10007734 <___vfprintf_internal_r+0xa5c>
10007728:	843ffc04 	addi	r16,r16,-16
1000772c:	42000204 	addi	r8,r8,8
10007730:	8c00130e 	bge	r17,r16,10007780 <___vfprintf_internal_r+0xaa8>
10007734:	01040074 	movhi	r4,4097
10007738:	18c00404 	addi	r3,r3,16
1000773c:	10800044 	addi	r2,r2,1
10007740:	211a4684 	addi	r4,r4,26906
10007744:	41000015 	stw	r4,0(r8)
10007748:	44400115 	stw	r17,4(r8)
1000774c:	d8c02015 	stw	r3,128(sp)
10007750:	d8801f15 	stw	r2,124(sp)
10007754:	90bff40e 	bge	r18,r2,10007728 <__alt_data_end+0xf8007728>
10007758:	d9801e04 	addi	r6,sp,120
1000775c:	b80b883a 	mov	r5,r23
10007760:	9809883a 	mov	r4,r19
10007764:	000e4b80 	call	1000e4b8 <__sprint_r>
10007768:	103e5f1e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
1000776c:	843ffc04 	addi	r16,r16,-16
10007770:	d8c02017 	ldw	r3,128(sp)
10007774:	d8801f17 	ldw	r2,124(sp)
10007778:	da000404 	addi	r8,sp,16
1000777c:	8c3fed16 	blt	r17,r16,10007734 <__alt_data_end+0xf8007734>
10007780:	d9403517 	ldw	r5,212(sp)
10007784:	1c07883a 	add	r3,r3,r16
10007788:	10800044 	addi	r2,r2,1
1000778c:	41400015 	stw	r5,0(r8)
10007790:	44000115 	stw	r16,4(r8)
10007794:	d8c02015 	stw	r3,128(sp)
10007798:	d8801f15 	stw	r2,124(sp)
1000779c:	010001c4 	movi	r4,7
100077a0:	2080060e 	bge	r4,r2,100077bc <___vfprintf_internal_r+0xae4>
100077a4:	d9002d17 	ldw	r4,180(sp)
100077a8:	d9801e04 	addi	r6,sp,120
100077ac:	b80b883a 	mov	r5,r23
100077b0:	000e4b80 	call	1000e4b8 <__sprint_r>
100077b4:	103e4c1e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
100077b8:	d8c02017 	ldw	r3,128(sp)
100077bc:	d8803117 	ldw	r2,196(sp)
100077c0:	d9002917 	ldw	r4,164(sp)
100077c4:	1100010e 	bge	r2,r4,100077cc <___vfprintf_internal_r+0xaf4>
100077c8:	2005883a 	mov	r2,r4
100077cc:	d9402f17 	ldw	r5,188(sp)
100077d0:	288b883a 	add	r5,r5,r2
100077d4:	d9402f15 	stw	r5,188(sp)
100077d8:	1801c01e 	bne	r3,zero,10007edc <___vfprintf_internal_r+0x1204>
100077dc:	a8800007 	ldb	r2,0(r21)
100077e0:	d8001f15 	stw	zero,124(sp)
100077e4:	da000404 	addi	r8,sp,16
100077e8:	103d751e 	bne	r2,zero,10006dc0 <__alt_data_end+0xf8006dc0>
100077ec:	a823883a 	mov	r17,r21
100077f0:	003d8b06 	br	10006e20 <__alt_data_end+0xf8006e20>
100077f4:	8025883a 	mov	r18,r16
100077f8:	dc002903 	ldbu	r16,164(sp)
100077fc:	e011883a 	mov	r8,fp
10007800:	84003fcc 	andi	r16,r16,255
10007804:	8005e51e 	bne	r16,zero,10008f9c <___vfprintf_internal_r+0x22c4>
10007808:	94800414 	ori	r18,r18,16
1000780c:	9080080c 	andi	r2,r18,32
10007810:	10022b26 	beq	r2,zero,100080c0 <___vfprintf_internal_r+0x13e8>
10007814:	d9002e17 	ldw	r4,184(sp)
10007818:	d9402a17 	ldw	r5,168(sp)
1000781c:	d8002785 	stb	zero,158(sp)
10007820:	20c00204 	addi	r3,r4,8
10007824:	24c00017 	ldw	r19,0(r4)
10007828:	25800117 	ldw	r22,4(r4)
1000782c:	28042e16 	blt	r5,zero,100088e8 <___vfprintf_internal_r+0x1c10>
10007830:	013fdfc4 	movi	r4,-129
10007834:	9d84b03a 	or	r2,r19,r22
10007838:	d8c02e15 	stw	r3,184(sp)
1000783c:	9124703a 	and	r18,r18,r4
10007840:	0039883a 	mov	fp,zero
10007844:	103e801e 	bne	r2,zero,10007248 <__alt_data_end+0xf8007248>
10007848:	d9002a17 	ldw	r4,168(sp)
1000784c:	2002e01e 	bne	r4,zero,100083d0 <___vfprintf_internal_r+0x16f8>
10007850:	d8002a15 	stw	zero,168(sp)
10007854:	d8002b15 	stw	zero,172(sp)
10007858:	dc001e04 	addi	r16,sp,120
1000785c:	003ef506 	br	10007434 <__alt_data_end+0xf8007434>
10007860:	8025883a 	mov	r18,r16
10007864:	dc002903 	ldbu	r16,164(sp)
10007868:	e011883a 	mov	r8,fp
1000786c:	84003fcc 	andi	r16,r16,255
10007870:	8005ba1e 	bne	r16,zero,10008f5c <___vfprintf_internal_r+0x2284>
10007874:	01040074 	movhi	r4,4097
10007878:	211a3604 	addi	r4,r4,26840
1000787c:	d9003915 	stw	r4,228(sp)
10007880:	9080080c 	andi	r2,r18,32
10007884:	10006126 	beq	r2,zero,10007a0c <___vfprintf_internal_r+0xd34>
10007888:	d9402e17 	ldw	r5,184(sp)
1000788c:	2cc00017 	ldw	r19,0(r5)
10007890:	2d800117 	ldw	r22,4(r5)
10007894:	29400204 	addi	r5,r5,8
10007898:	d9402e15 	stw	r5,184(sp)
1000789c:	9080004c 	andi	r2,r18,1
100078a0:	1001ac26 	beq	r2,zero,10007f54 <___vfprintf_internal_r+0x127c>
100078a4:	9d84b03a 	or	r2,r19,r22
100078a8:	10038526 	beq	r2,zero,100086c0 <___vfprintf_internal_r+0x19e8>
100078ac:	d8c02a17 	ldw	r3,168(sp)
100078b0:	00800c04 	movi	r2,48
100078b4:	d8802705 	stb	r2,156(sp)
100078b8:	dc402745 	stb	r17,157(sp)
100078bc:	d8002785 	stb	zero,158(sp)
100078c0:	90800094 	ori	r2,r18,2
100078c4:	18047916 	blt	r3,zero,10008aac <___vfprintf_internal_r+0x1dd4>
100078c8:	00bfdfc4 	movi	r2,-129
100078cc:	90a4703a 	and	r18,r18,r2
100078d0:	94800094 	ori	r18,r18,2
100078d4:	0039883a 	mov	fp,zero
100078d8:	d9003917 	ldw	r4,228(sp)
100078dc:	dc001e04 	addi	r16,sp,120
100078e0:	988003cc 	andi	r2,r19,15
100078e4:	b006973a 	slli	r3,r22,28
100078e8:	2085883a 	add	r2,r4,r2
100078ec:	9826d13a 	srli	r19,r19,4
100078f0:	10800003 	ldbu	r2,0(r2)
100078f4:	b02cd13a 	srli	r22,r22,4
100078f8:	843fffc4 	addi	r16,r16,-1
100078fc:	1ce6b03a 	or	r19,r3,r19
10007900:	80800005 	stb	r2,0(r16)
10007904:	9d84b03a 	or	r2,r19,r22
10007908:	103ff51e 	bne	r2,zero,100078e0 <__alt_data_end+0xf80078e0>
1000790c:	d8c02817 	ldw	r3,160(sp)
10007910:	1c07c83a 	sub	r3,r3,r16
10007914:	d8c02b15 	stw	r3,172(sp)
10007918:	003ec606 	br	10007434 <__alt_data_end+0xf8007434>
1000791c:	8025883a 	mov	r18,r16
10007920:	dc002903 	ldbu	r16,164(sp)
10007924:	e011883a 	mov	r8,fp
10007928:	84003fcc 	andi	r16,r16,255
1000792c:	803e9626 	beq	r16,zero,10007388 <__alt_data_end+0xf8007388>
10007930:	d8c02b03 	ldbu	r3,172(sp)
10007934:	d8c02785 	stb	r3,158(sp)
10007938:	003e9306 	br	10007388 <__alt_data_end+0xf8007388>
1000793c:	00c00044 	movi	r3,1
10007940:	d8c02905 	stb	r3,164(sp)
10007944:	00c00ac4 	movi	r3,43
10007948:	d8c02b05 	stb	r3,172(sp)
1000794c:	ac400007 	ldb	r17,0(r21)
10007950:	003d4306 	br	10006e60 <__alt_data_end+0xf8006e60>
10007954:	84000814 	ori	r16,r16,32
10007958:	ac400007 	ldb	r17,0(r21)
1000795c:	003d4006 	br	10006e60 <__alt_data_end+0xf8006e60>
10007960:	d8802e17 	ldw	r2,184(sp)
10007964:	8025883a 	mov	r18,r16
10007968:	d8002785 	stb	zero,158(sp)
1000796c:	14000017 	ldw	r16,0(r2)
10007970:	e011883a 	mov	r8,fp
10007974:	14c00104 	addi	r19,r2,4
10007978:	80042d26 	beq	r16,zero,10008a30 <___vfprintf_internal_r+0x1d58>
1000797c:	d8c02a17 	ldw	r3,168(sp)
10007980:	1803e416 	blt	r3,zero,10008914 <___vfprintf_internal_r+0x1c3c>
10007984:	180d883a 	mov	r6,r3
10007988:	000b883a 	mov	r5,zero
1000798c:	8009883a 	mov	r4,r16
10007990:	df003d15 	stw	fp,244(sp)
10007994:	000c6100 	call	1000c610 <memchr>
10007998:	da003d17 	ldw	r8,244(sp)
1000799c:	10046826 	beq	r2,zero,10008b40 <___vfprintf_internal_r+0x1e68>
100079a0:	1405c83a 	sub	r2,r2,r16
100079a4:	d8802b15 	stw	r2,172(sp)
100079a8:	1003e016 	blt	r2,zero,1000892c <___vfprintf_internal_r+0x1c54>
100079ac:	df002783 	ldbu	fp,158(sp)
100079b0:	d8802915 	stw	r2,164(sp)
100079b4:	dcc02e15 	stw	r19,184(sp)
100079b8:	d8002a15 	stw	zero,168(sp)
100079bc:	d8003215 	stw	zero,200(sp)
100079c0:	003ea206 	br	1000744c <__alt_data_end+0xf800744c>
100079c4:	8025883a 	mov	r18,r16
100079c8:	dc002903 	ldbu	r16,164(sp)
100079cc:	e011883a 	mov	r8,fp
100079d0:	84003fcc 	andi	r16,r16,255
100079d4:	803f8d26 	beq	r16,zero,1000780c <__alt_data_end+0xf800780c>
100079d8:	d8c02b03 	ldbu	r3,172(sp)
100079dc:	d8c02785 	stb	r3,158(sp)
100079e0:	003f8a06 	br	1000780c <__alt_data_end+0xf800780c>
100079e4:	8025883a 	mov	r18,r16
100079e8:	dc002903 	ldbu	r16,164(sp)
100079ec:	e011883a 	mov	r8,fp
100079f0:	84003fcc 	andi	r16,r16,255
100079f4:	8005661e 	bne	r16,zero,10008f90 <___vfprintf_internal_r+0x22b8>
100079f8:	01040074 	movhi	r4,4097
100079fc:	211a3b04 	addi	r4,r4,26860
10007a00:	d9003915 	stw	r4,228(sp)
10007a04:	9080080c 	andi	r2,r18,32
10007a08:	103f9f1e 	bne	r2,zero,10007888 <__alt_data_end+0xf8007888>
10007a0c:	9080040c 	andi	r2,r18,16
10007a10:	1002eb26 	beq	r2,zero,100085c0 <___vfprintf_internal_r+0x18e8>
10007a14:	d8802e17 	ldw	r2,184(sp)
10007a18:	002d883a 	mov	r22,zero
10007a1c:	14c00017 	ldw	r19,0(r2)
10007a20:	10800104 	addi	r2,r2,4
10007a24:	d8802e15 	stw	r2,184(sp)
10007a28:	003f9c06 	br	1000789c <__alt_data_end+0xf800789c>
10007a2c:	d8802b07 	ldb	r2,172(sp)
10007a30:	1002e11e 	bne	r2,zero,100085b8 <___vfprintf_internal_r+0x18e0>
10007a34:	00c00044 	movi	r3,1
10007a38:	d8c02905 	stb	r3,164(sp)
10007a3c:	00c00804 	movi	r3,32
10007a40:	d8c02b05 	stb	r3,172(sp)
10007a44:	ac400007 	ldb	r17,0(r21)
10007a48:	003d0506 	br	10006e60 <__alt_data_end+0xf8006e60>
10007a4c:	84000054 	ori	r16,r16,1
10007a50:	ac400007 	ldb	r17,0(r21)
10007a54:	003d0206 	br	10006e60 <__alt_data_end+0xf8006e60>
10007a58:	8025883a 	mov	r18,r16
10007a5c:	dc002903 	ldbu	r16,164(sp)
10007a60:	e011883a 	mov	r8,fp
10007a64:	84003fcc 	andi	r16,r16,255
10007a68:	803de726 	beq	r16,zero,10007208 <__alt_data_end+0xf8007208>
10007a6c:	d8c02b03 	ldbu	r3,172(sp)
10007a70:	d8c02785 	stb	r3,158(sp)
10007a74:	003de406 	br	10007208 <__alt_data_end+0xf8007208>
10007a78:	84001014 	ori	r16,r16,64
10007a7c:	ac400007 	ldb	r17,0(r21)
10007a80:	003cf706 	br	10006e60 <__alt_data_end+0xf8006e60>
10007a84:	ac400007 	ldb	r17,0(r21)
10007a88:	00801b04 	movi	r2,108
10007a8c:	88838f26 	beq	r17,r2,100088cc <___vfprintf_internal_r+0x1bf4>
10007a90:	84000414 	ori	r16,r16,16
10007a94:	003cf206 	br	10006e60 <__alt_data_end+0xf8006e60>
10007a98:	8025883a 	mov	r18,r16
10007a9c:	dc002903 	ldbu	r16,164(sp)
10007aa0:	e011883a 	mov	r8,fp
10007aa4:	84003fcc 	andi	r16,r16,255
10007aa8:	80053f1e 	bne	r16,zero,10008fa8 <___vfprintf_internal_r+0x22d0>
10007aac:	9080080c 	andi	r2,r18,32
10007ab0:	1002d226 	beq	r2,zero,100085fc <___vfprintf_internal_r+0x1924>
10007ab4:	d9002e17 	ldw	r4,184(sp)
10007ab8:	d9402f17 	ldw	r5,188(sp)
10007abc:	20800017 	ldw	r2,0(r4)
10007ac0:	2807d7fa 	srai	r3,r5,31
10007ac4:	21000104 	addi	r4,r4,4
10007ac8:	d9002e15 	stw	r4,184(sp)
10007acc:	11400015 	stw	r5,0(r2)
10007ad0:	10c00115 	stw	r3,4(r2)
10007ad4:	003cb806 	br	10006db8 <__alt_data_end+0xf8006db8>
10007ad8:	d8c02e17 	ldw	r3,184(sp)
10007adc:	d9002e17 	ldw	r4,184(sp)
10007ae0:	8025883a 	mov	r18,r16
10007ae4:	18800017 	ldw	r2,0(r3)
10007ae8:	21000104 	addi	r4,r4,4
10007aec:	00c00044 	movi	r3,1
10007af0:	e011883a 	mov	r8,fp
10007af4:	d8c02915 	stw	r3,164(sp)
10007af8:	d8002785 	stb	zero,158(sp)
10007afc:	d8801405 	stb	r2,80(sp)
10007b00:	d9002e15 	stw	r4,184(sp)
10007b04:	d8c02b15 	stw	r3,172(sp)
10007b08:	d8002a15 	stw	zero,168(sp)
10007b0c:	d8003215 	stw	zero,200(sp)
10007b10:	dc001404 	addi	r16,sp,80
10007b14:	0039883a 	mov	fp,zero
10007b18:	003e5306 	br	10007468 <__alt_data_end+0xf8007468>
10007b1c:	01040074 	movhi	r4,4097
10007b20:	211a3b04 	addi	r4,r4,26860
10007b24:	0039883a 	mov	fp,zero
10007b28:	d9003915 	stw	r4,228(sp)
10007b2c:	04401e04 	movi	r17,120
10007b30:	003f6906 	br	100078d8 <__alt_data_end+0xf80078d8>
10007b34:	8025883a 	mov	r18,r16
10007b38:	dc002903 	ldbu	r16,164(sp)
10007b3c:	e011883a 	mov	r8,fp
10007b40:	84003fcc 	andi	r16,r16,255
10007b44:	8005081e 	bne	r16,zero,10008f68 <___vfprintf_internal_r+0x2290>
10007b48:	883d6126 	beq	r17,zero,100070d0 <__alt_data_end+0xf80070d0>
10007b4c:	00c00044 	movi	r3,1
10007b50:	d8c02915 	stw	r3,164(sp)
10007b54:	dc401405 	stb	r17,80(sp)
10007b58:	d8002785 	stb	zero,158(sp)
10007b5c:	003fe906 	br	10007b04 <__alt_data_end+0xf8007b04>
10007b60:	01440074 	movhi	r5,4097
10007b64:	295a3b04 	addi	r5,r5,26860
10007b68:	d9403915 	stw	r5,228(sp)
10007b6c:	d8c02e15 	stw	r3,184(sp)
10007b70:	1025883a 	mov	r18,r2
10007b74:	04401e04 	movi	r17,120
10007b78:	9d84b03a 	or	r2,r19,r22
10007b7c:	1000fc1e 	bne	r2,zero,10007f70 <___vfprintf_internal_r+0x1298>
10007b80:	0039883a 	mov	fp,zero
10007b84:	00800084 	movi	r2,2
10007b88:	10803fcc 	andi	r2,r2,255
10007b8c:	00c00044 	movi	r3,1
10007b90:	10c20f26 	beq	r2,r3,100083d0 <___vfprintf_internal_r+0x16f8>
10007b94:	00c00084 	movi	r3,2
10007b98:	10fd3326 	beq	r2,r3,10007068 <__alt_data_end+0xf8007068>
10007b9c:	003e0b06 	br	100073cc <__alt_data_end+0xf80073cc>
10007ba0:	d8c02017 	ldw	r3,128(sp)
10007ba4:	003e7106 	br	1000756c <__alt_data_end+0xf800756c>
10007ba8:	00801944 	movi	r2,101
10007bac:	14407e0e 	bge	r2,r17,10007da8 <___vfprintf_internal_r+0x10d0>
10007bb0:	d9003617 	ldw	r4,216(sp)
10007bb4:	d9403817 	ldw	r5,224(sp)
10007bb8:	000d883a 	mov	r6,zero
10007bbc:	000f883a 	mov	r7,zero
10007bc0:	d8c03c15 	stw	r3,240(sp)
10007bc4:	da003d15 	stw	r8,244(sp)
10007bc8:	001223c0 	call	1001223c <__eqdf2>
10007bcc:	d8c03c17 	ldw	r3,240(sp)
10007bd0:	da003d17 	ldw	r8,244(sp)
10007bd4:	1000f71e 	bne	r2,zero,10007fb4 <___vfprintf_internal_r+0x12dc>
10007bd8:	d8801f17 	ldw	r2,124(sp)
10007bdc:	01040074 	movhi	r4,4097
10007be0:	211a4204 	addi	r4,r4,26888
10007be4:	18c00044 	addi	r3,r3,1
10007be8:	10800044 	addi	r2,r2,1
10007bec:	41000015 	stw	r4,0(r8)
10007bf0:	01000044 	movi	r4,1
10007bf4:	41000115 	stw	r4,4(r8)
10007bf8:	d8c02015 	stw	r3,128(sp)
10007bfc:	d8801f15 	stw	r2,124(sp)
10007c00:	010001c4 	movi	r4,7
10007c04:	2082b816 	blt	r4,r2,100086e8 <___vfprintf_internal_r+0x1a10>
10007c08:	42000204 	addi	r8,r8,8
10007c0c:	d8802617 	ldw	r2,152(sp)
10007c10:	d9403317 	ldw	r5,204(sp)
10007c14:	11400216 	blt	r2,r5,10007c20 <___vfprintf_internal_r+0xf48>
10007c18:	9080004c 	andi	r2,r18,1
10007c1c:	103eb326 	beq	r2,zero,100076ec <__alt_data_end+0xf80076ec>
10007c20:	d8803717 	ldw	r2,220(sp)
10007c24:	d9003417 	ldw	r4,208(sp)
10007c28:	d9403717 	ldw	r5,220(sp)
10007c2c:	1887883a 	add	r3,r3,r2
10007c30:	d8801f17 	ldw	r2,124(sp)
10007c34:	41000015 	stw	r4,0(r8)
10007c38:	41400115 	stw	r5,4(r8)
10007c3c:	10800044 	addi	r2,r2,1
10007c40:	d8c02015 	stw	r3,128(sp)
10007c44:	d8801f15 	stw	r2,124(sp)
10007c48:	010001c4 	movi	r4,7
10007c4c:	20832916 	blt	r4,r2,100088f4 <___vfprintf_internal_r+0x1c1c>
10007c50:	42000204 	addi	r8,r8,8
10007c54:	d8803317 	ldw	r2,204(sp)
10007c58:	143fffc4 	addi	r16,r2,-1
10007c5c:	043ea30e 	bge	zero,r16,100076ec <__alt_data_end+0xf80076ec>
10007c60:	04400404 	movi	r17,16
10007c64:	d8801f17 	ldw	r2,124(sp)
10007c68:	8c00880e 	bge	r17,r16,10007e8c <___vfprintf_internal_r+0x11b4>
10007c6c:	01440074 	movhi	r5,4097
10007c70:	295a4284 	addi	r5,r5,26890
10007c74:	d9402c15 	stw	r5,176(sp)
10007c78:	058001c4 	movi	r22,7
10007c7c:	dcc02d17 	ldw	r19,180(sp)
10007c80:	00000306 	br	10007c90 <___vfprintf_internal_r+0xfb8>
10007c84:	42000204 	addi	r8,r8,8
10007c88:	843ffc04 	addi	r16,r16,-16
10007c8c:	8c00820e 	bge	r17,r16,10007e98 <___vfprintf_internal_r+0x11c0>
10007c90:	18c00404 	addi	r3,r3,16
10007c94:	10800044 	addi	r2,r2,1
10007c98:	45000015 	stw	r20,0(r8)
10007c9c:	44400115 	stw	r17,4(r8)
10007ca0:	d8c02015 	stw	r3,128(sp)
10007ca4:	d8801f15 	stw	r2,124(sp)
10007ca8:	b0bff60e 	bge	r22,r2,10007c84 <__alt_data_end+0xf8007c84>
10007cac:	d9801e04 	addi	r6,sp,120
10007cb0:	b80b883a 	mov	r5,r23
10007cb4:	9809883a 	mov	r4,r19
10007cb8:	000e4b80 	call	1000e4b8 <__sprint_r>
10007cbc:	103d0a1e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
10007cc0:	d8c02017 	ldw	r3,128(sp)
10007cc4:	d8801f17 	ldw	r2,124(sp)
10007cc8:	da000404 	addi	r8,sp,16
10007ccc:	003fee06 	br	10007c88 <__alt_data_end+0xf8007c88>
10007cd0:	d9403117 	ldw	r5,196(sp)
10007cd4:	d8802917 	ldw	r2,164(sp)
10007cd8:	28adc83a 	sub	r22,r5,r2
10007cdc:	05be410e 	bge	zero,r22,100075e4 <__alt_data_end+0xf80075e4>
10007ce0:	07000404 	movi	fp,16
10007ce4:	d8801f17 	ldw	r2,124(sp)
10007ce8:	e5838f0e 	bge	fp,r22,10008b28 <___vfprintf_internal_r+0x1e50>
10007cec:	01440074 	movhi	r5,4097
10007cf0:	295a4284 	addi	r5,r5,26890
10007cf4:	dc403015 	stw	r17,192(sp)
10007cf8:	d9402c15 	stw	r5,176(sp)
10007cfc:	b023883a 	mov	r17,r22
10007d00:	04c001c4 	movi	r19,7
10007d04:	a82d883a 	mov	r22,r21
10007d08:	902b883a 	mov	r21,r18
10007d0c:	8025883a 	mov	r18,r16
10007d10:	dc002d17 	ldw	r16,180(sp)
10007d14:	00000306 	br	10007d24 <___vfprintf_internal_r+0x104c>
10007d18:	8c7ffc04 	addi	r17,r17,-16
10007d1c:	42000204 	addi	r8,r8,8
10007d20:	e440110e 	bge	fp,r17,10007d68 <___vfprintf_internal_r+0x1090>
10007d24:	18c00404 	addi	r3,r3,16
10007d28:	10800044 	addi	r2,r2,1
10007d2c:	45000015 	stw	r20,0(r8)
10007d30:	47000115 	stw	fp,4(r8)
10007d34:	d8c02015 	stw	r3,128(sp)
10007d38:	d8801f15 	stw	r2,124(sp)
10007d3c:	98bff60e 	bge	r19,r2,10007d18 <__alt_data_end+0xf8007d18>
10007d40:	d9801e04 	addi	r6,sp,120
10007d44:	b80b883a 	mov	r5,r23
10007d48:	8009883a 	mov	r4,r16
10007d4c:	000e4b80 	call	1000e4b8 <__sprint_r>
10007d50:	103ce51e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
10007d54:	8c7ffc04 	addi	r17,r17,-16
10007d58:	d8c02017 	ldw	r3,128(sp)
10007d5c:	d8801f17 	ldw	r2,124(sp)
10007d60:	da000404 	addi	r8,sp,16
10007d64:	e47fef16 	blt	fp,r17,10007d24 <__alt_data_end+0xf8007d24>
10007d68:	9021883a 	mov	r16,r18
10007d6c:	a825883a 	mov	r18,r21
10007d70:	b02b883a 	mov	r21,r22
10007d74:	882d883a 	mov	r22,r17
10007d78:	dc403017 	ldw	r17,192(sp)
10007d7c:	d9002c17 	ldw	r4,176(sp)
10007d80:	1d87883a 	add	r3,r3,r22
10007d84:	10800044 	addi	r2,r2,1
10007d88:	41000015 	stw	r4,0(r8)
10007d8c:	45800115 	stw	r22,4(r8)
10007d90:	d8c02015 	stw	r3,128(sp)
10007d94:	d8801f15 	stw	r2,124(sp)
10007d98:	010001c4 	movi	r4,7
10007d9c:	20818e16 	blt	r4,r2,100083d8 <___vfprintf_internal_r+0x1700>
10007da0:	42000204 	addi	r8,r8,8
10007da4:	003e0f06 	br	100075e4 <__alt_data_end+0xf80075e4>
10007da8:	d9403317 	ldw	r5,204(sp)
10007dac:	00800044 	movi	r2,1
10007db0:	18c00044 	addi	r3,r3,1
10007db4:	1141530e 	bge	r2,r5,10008304 <___vfprintf_internal_r+0x162c>
10007db8:	dc401f17 	ldw	r17,124(sp)
10007dbc:	00800044 	movi	r2,1
10007dc0:	40800115 	stw	r2,4(r8)
10007dc4:	8c400044 	addi	r17,r17,1
10007dc8:	44000015 	stw	r16,0(r8)
10007dcc:	d8c02015 	stw	r3,128(sp)
10007dd0:	dc401f15 	stw	r17,124(sp)
10007dd4:	008001c4 	movi	r2,7
10007dd8:	14416b16 	blt	r2,r17,10008388 <___vfprintf_internal_r+0x16b0>
10007ddc:	42000204 	addi	r8,r8,8
10007de0:	d8803717 	ldw	r2,220(sp)
10007de4:	d9003417 	ldw	r4,208(sp)
10007de8:	8c400044 	addi	r17,r17,1
10007dec:	10c7883a 	add	r3,r2,r3
10007df0:	40800115 	stw	r2,4(r8)
10007df4:	41000015 	stw	r4,0(r8)
10007df8:	d8c02015 	stw	r3,128(sp)
10007dfc:	dc401f15 	stw	r17,124(sp)
10007e00:	008001c4 	movi	r2,7
10007e04:	14416916 	blt	r2,r17,100083ac <___vfprintf_internal_r+0x16d4>
10007e08:	45800204 	addi	r22,r8,8
10007e0c:	d9003617 	ldw	r4,216(sp)
10007e10:	d9403817 	ldw	r5,224(sp)
10007e14:	000d883a 	mov	r6,zero
10007e18:	000f883a 	mov	r7,zero
10007e1c:	d8c03c15 	stw	r3,240(sp)
10007e20:	001223c0 	call	1001223c <__eqdf2>
10007e24:	d8c03c17 	ldw	r3,240(sp)
10007e28:	1000bc26 	beq	r2,zero,1000811c <___vfprintf_internal_r+0x1444>
10007e2c:	d9403317 	ldw	r5,204(sp)
10007e30:	84000044 	addi	r16,r16,1
10007e34:	8c400044 	addi	r17,r17,1
10007e38:	28bfffc4 	addi	r2,r5,-1
10007e3c:	1887883a 	add	r3,r3,r2
10007e40:	b0800115 	stw	r2,4(r22)
10007e44:	b4000015 	stw	r16,0(r22)
10007e48:	d8c02015 	stw	r3,128(sp)
10007e4c:	dc401f15 	stw	r17,124(sp)
10007e50:	008001c4 	movi	r2,7
10007e54:	14414316 	blt	r2,r17,10008364 <___vfprintf_internal_r+0x168c>
10007e58:	b5800204 	addi	r22,r22,8
10007e5c:	d9003a17 	ldw	r4,232(sp)
10007e60:	df0022c4 	addi	fp,sp,139
10007e64:	8c400044 	addi	r17,r17,1
10007e68:	20c7883a 	add	r3,r4,r3
10007e6c:	b7000015 	stw	fp,0(r22)
10007e70:	b1000115 	stw	r4,4(r22)
10007e74:	d8c02015 	stw	r3,128(sp)
10007e78:	dc401f15 	stw	r17,124(sp)
10007e7c:	008001c4 	movi	r2,7
10007e80:	14400e16 	blt	r2,r17,10007ebc <___vfprintf_internal_r+0x11e4>
10007e84:	b2000204 	addi	r8,r22,8
10007e88:	003e1806 	br	100076ec <__alt_data_end+0xf80076ec>
10007e8c:	01040074 	movhi	r4,4097
10007e90:	211a4284 	addi	r4,r4,26890
10007e94:	d9002c15 	stw	r4,176(sp)
10007e98:	d9002c17 	ldw	r4,176(sp)
10007e9c:	1c07883a 	add	r3,r3,r16
10007ea0:	44000115 	stw	r16,4(r8)
10007ea4:	41000015 	stw	r4,0(r8)
10007ea8:	10800044 	addi	r2,r2,1
10007eac:	d8c02015 	stw	r3,128(sp)
10007eb0:	d8801f15 	stw	r2,124(sp)
10007eb4:	010001c4 	movi	r4,7
10007eb8:	20be0b0e 	bge	r4,r2,100076e8 <__alt_data_end+0xf80076e8>
10007ebc:	d9002d17 	ldw	r4,180(sp)
10007ec0:	d9801e04 	addi	r6,sp,120
10007ec4:	b80b883a 	mov	r5,r23
10007ec8:	000e4b80 	call	1000e4b8 <__sprint_r>
10007ecc:	103c861e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
10007ed0:	d8c02017 	ldw	r3,128(sp)
10007ed4:	da000404 	addi	r8,sp,16
10007ed8:	003e0406 	br	100076ec <__alt_data_end+0xf80076ec>
10007edc:	d9002d17 	ldw	r4,180(sp)
10007ee0:	d9801e04 	addi	r6,sp,120
10007ee4:	b80b883a 	mov	r5,r23
10007ee8:	000e4b80 	call	1000e4b8 <__sprint_r>
10007eec:	103e3b26 	beq	r2,zero,100077dc <__alt_data_end+0xf80077dc>
10007ef0:	003c7d06 	br	100070e8 <__alt_data_end+0xf80070e8>
10007ef4:	d9002d17 	ldw	r4,180(sp)
10007ef8:	d9801e04 	addi	r6,sp,120
10007efc:	b80b883a 	mov	r5,r23
10007f00:	000e4b80 	call	1000e4b8 <__sprint_r>
10007f04:	103c781e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
10007f08:	d8c02017 	ldw	r3,128(sp)
10007f0c:	da000404 	addi	r8,sp,16
10007f10:	003de906 	br	100076b8 <__alt_data_end+0xf80076b8>
10007f14:	d9002d17 	ldw	r4,180(sp)
10007f18:	d9801e04 	addi	r6,sp,120
10007f1c:	b80b883a 	mov	r5,r23
10007f20:	000e4b80 	call	1000e4b8 <__sprint_r>
10007f24:	103c701e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
10007f28:	d8c02017 	ldw	r3,128(sp)
10007f2c:	da000404 	addi	r8,sp,16
10007f30:	003d9b06 	br	100075a0 <__alt_data_end+0xf80075a0>
10007f34:	d9002d17 	ldw	r4,180(sp)
10007f38:	d9801e04 	addi	r6,sp,120
10007f3c:	b80b883a 	mov	r5,r23
10007f40:	000e4b80 	call	1000e4b8 <__sprint_r>
10007f44:	103c681e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
10007f48:	d8c02017 	ldw	r3,128(sp)
10007f4c:	da000404 	addi	r8,sp,16
10007f50:	003da106 	br	100075d8 <__alt_data_end+0xf80075d8>
10007f54:	d9402a17 	ldw	r5,168(sp)
10007f58:	d8002785 	stb	zero,158(sp)
10007f5c:	283f0616 	blt	r5,zero,10007b78 <__alt_data_end+0xf8007b78>
10007f60:	00ffdfc4 	movi	r3,-129
10007f64:	9d84b03a 	or	r2,r19,r22
10007f68:	90e4703a 	and	r18,r18,r3
10007f6c:	103c3b26 	beq	r2,zero,1000705c <__alt_data_end+0xf800705c>
10007f70:	0039883a 	mov	fp,zero
10007f74:	003e5806 	br	100078d8 <__alt_data_end+0xf80078d8>
10007f78:	9080040c 	andi	r2,r18,16
10007f7c:	1001b326 	beq	r2,zero,1000864c <___vfprintf_internal_r+0x1974>
10007f80:	d8c02e17 	ldw	r3,184(sp)
10007f84:	d9002a17 	ldw	r4,168(sp)
10007f88:	d8002785 	stb	zero,158(sp)
10007f8c:	18800104 	addi	r2,r3,4
10007f90:	1cc00017 	ldw	r19,0(r3)
10007f94:	002d883a 	mov	r22,zero
10007f98:	2001b516 	blt	r4,zero,10008670 <___vfprintf_internal_r+0x1998>
10007f9c:	00ffdfc4 	movi	r3,-129
10007fa0:	d8802e15 	stw	r2,184(sp)
10007fa4:	90e4703a 	and	r18,r18,r3
10007fa8:	983d0526 	beq	r19,zero,100073c0 <__alt_data_end+0xf80073c0>
10007fac:	0039883a 	mov	fp,zero
10007fb0:	003d0806 	br	100073d4 <__alt_data_end+0xf80073d4>
10007fb4:	dc402617 	ldw	r17,152(sp)
10007fb8:	0441d30e 	bge	zero,r17,10008708 <___vfprintf_internal_r+0x1a30>
10007fbc:	dc403217 	ldw	r17,200(sp)
10007fc0:	d8803317 	ldw	r2,204(sp)
10007fc4:	1440010e 	bge	r2,r17,10007fcc <___vfprintf_internal_r+0x12f4>
10007fc8:	1023883a 	mov	r17,r2
10007fcc:	04400a0e 	bge	zero,r17,10007ff8 <___vfprintf_internal_r+0x1320>
10007fd0:	d8801f17 	ldw	r2,124(sp)
10007fd4:	1c47883a 	add	r3,r3,r17
10007fd8:	44000015 	stw	r16,0(r8)
10007fdc:	10800044 	addi	r2,r2,1
10007fe0:	44400115 	stw	r17,4(r8)
10007fe4:	d8c02015 	stw	r3,128(sp)
10007fe8:	d8801f15 	stw	r2,124(sp)
10007fec:	010001c4 	movi	r4,7
10007ff0:	20826516 	blt	r4,r2,10008988 <___vfprintf_internal_r+0x1cb0>
10007ff4:	42000204 	addi	r8,r8,8
10007ff8:	88026116 	blt	r17,zero,10008980 <___vfprintf_internal_r+0x1ca8>
10007ffc:	d9003217 	ldw	r4,200(sp)
10008000:	2463c83a 	sub	r17,r4,r17
10008004:	04407b0e 	bge	zero,r17,100081f4 <___vfprintf_internal_r+0x151c>
10008008:	05800404 	movi	r22,16
1000800c:	d8801f17 	ldw	r2,124(sp)
10008010:	b4419d0e 	bge	r22,r17,10008688 <___vfprintf_internal_r+0x19b0>
10008014:	01040074 	movhi	r4,4097
10008018:	211a4284 	addi	r4,r4,26890
1000801c:	d9002c15 	stw	r4,176(sp)
10008020:	070001c4 	movi	fp,7
10008024:	dcc02d17 	ldw	r19,180(sp)
10008028:	00000306 	br	10008038 <___vfprintf_internal_r+0x1360>
1000802c:	42000204 	addi	r8,r8,8
10008030:	8c7ffc04 	addi	r17,r17,-16
10008034:	b441970e 	bge	r22,r17,10008694 <___vfprintf_internal_r+0x19bc>
10008038:	18c00404 	addi	r3,r3,16
1000803c:	10800044 	addi	r2,r2,1
10008040:	45000015 	stw	r20,0(r8)
10008044:	45800115 	stw	r22,4(r8)
10008048:	d8c02015 	stw	r3,128(sp)
1000804c:	d8801f15 	stw	r2,124(sp)
10008050:	e0bff60e 	bge	fp,r2,1000802c <__alt_data_end+0xf800802c>
10008054:	d9801e04 	addi	r6,sp,120
10008058:	b80b883a 	mov	r5,r23
1000805c:	9809883a 	mov	r4,r19
10008060:	000e4b80 	call	1000e4b8 <__sprint_r>
10008064:	103c201e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
10008068:	d8c02017 	ldw	r3,128(sp)
1000806c:	d8801f17 	ldw	r2,124(sp)
10008070:	da000404 	addi	r8,sp,16
10008074:	003fee06 	br	10008030 <__alt_data_end+0xf8008030>
10008078:	d9002d17 	ldw	r4,180(sp)
1000807c:	d9801e04 	addi	r6,sp,120
10008080:	b80b883a 	mov	r5,r23
10008084:	000e4b80 	call	1000e4b8 <__sprint_r>
10008088:	103c171e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
1000808c:	d8c02017 	ldw	r3,128(sp)
10008090:	df002787 	ldb	fp,158(sp)
10008094:	da000404 	addi	r8,sp,16
10008098:	003d3406 	br	1000756c <__alt_data_end+0xf800756c>
1000809c:	9080040c 	andi	r2,r18,16
100080a0:	10016126 	beq	r2,zero,10008628 <___vfprintf_internal_r+0x1950>
100080a4:	d9402e17 	ldw	r5,184(sp)
100080a8:	2cc00017 	ldw	r19,0(r5)
100080ac:	29400104 	addi	r5,r5,4
100080b0:	d9402e15 	stw	r5,184(sp)
100080b4:	982dd7fa 	srai	r22,r19,31
100080b8:	b005883a 	mov	r2,r22
100080bc:	003c5a06 	br	10007228 <__alt_data_end+0xf8007228>
100080c0:	9080040c 	andi	r2,r18,16
100080c4:	10003526 	beq	r2,zero,1000819c <___vfprintf_internal_r+0x14c4>
100080c8:	d8c02e17 	ldw	r3,184(sp)
100080cc:	d9002a17 	ldw	r4,168(sp)
100080d0:	d8002785 	stb	zero,158(sp)
100080d4:	18800104 	addi	r2,r3,4
100080d8:	1cc00017 	ldw	r19,0(r3)
100080dc:	002d883a 	mov	r22,zero
100080e0:	20003716 	blt	r4,zero,100081c0 <___vfprintf_internal_r+0x14e8>
100080e4:	00ffdfc4 	movi	r3,-129
100080e8:	d8802e15 	stw	r2,184(sp)
100080ec:	90e4703a 	and	r18,r18,r3
100080f0:	0039883a 	mov	fp,zero
100080f4:	983dd426 	beq	r19,zero,10007848 <__alt_data_end+0xf8007848>
100080f8:	00800244 	movi	r2,9
100080fc:	14fc5336 	bltu	r2,r19,1000724c <__alt_data_end+0xf800724c>
10008100:	d8c02817 	ldw	r3,160(sp)
10008104:	dc001dc4 	addi	r16,sp,119
10008108:	9cc00c04 	addi	r19,r19,48
1000810c:	1c07c83a 	sub	r3,r3,r16
10008110:	dcc01dc5 	stb	r19,119(sp)
10008114:	d8c02b15 	stw	r3,172(sp)
10008118:	003cc606 	br	10007434 <__alt_data_end+0xf8007434>
1000811c:	d8803317 	ldw	r2,204(sp)
10008120:	143fffc4 	addi	r16,r2,-1
10008124:	043f4d0e 	bge	zero,r16,10007e5c <__alt_data_end+0xf8007e5c>
10008128:	07000404 	movi	fp,16
1000812c:	e400810e 	bge	fp,r16,10008334 <___vfprintf_internal_r+0x165c>
10008130:	01440074 	movhi	r5,4097
10008134:	295a4284 	addi	r5,r5,26890
10008138:	d9402c15 	stw	r5,176(sp)
1000813c:	01c001c4 	movi	r7,7
10008140:	dcc02d17 	ldw	r19,180(sp)
10008144:	00000306 	br	10008154 <___vfprintf_internal_r+0x147c>
10008148:	b5800204 	addi	r22,r22,8
1000814c:	843ffc04 	addi	r16,r16,-16
10008150:	e4007b0e 	bge	fp,r16,10008340 <___vfprintf_internal_r+0x1668>
10008154:	18c00404 	addi	r3,r3,16
10008158:	8c400044 	addi	r17,r17,1
1000815c:	b5000015 	stw	r20,0(r22)
10008160:	b7000115 	stw	fp,4(r22)
10008164:	d8c02015 	stw	r3,128(sp)
10008168:	dc401f15 	stw	r17,124(sp)
1000816c:	3c7ff60e 	bge	r7,r17,10008148 <__alt_data_end+0xf8008148>
10008170:	d9801e04 	addi	r6,sp,120
10008174:	b80b883a 	mov	r5,r23
10008178:	9809883a 	mov	r4,r19
1000817c:	d9c03c15 	stw	r7,240(sp)
10008180:	000e4b80 	call	1000e4b8 <__sprint_r>
10008184:	d9c03c17 	ldw	r7,240(sp)
10008188:	103bd71e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
1000818c:	d8c02017 	ldw	r3,128(sp)
10008190:	dc401f17 	ldw	r17,124(sp)
10008194:	dd800404 	addi	r22,sp,16
10008198:	003fec06 	br	1000814c <__alt_data_end+0xf800814c>
1000819c:	9080100c 	andi	r2,r18,64
100081a0:	d8002785 	stb	zero,158(sp)
100081a4:	10010e26 	beq	r2,zero,100085e0 <___vfprintf_internal_r+0x1908>
100081a8:	d9402e17 	ldw	r5,184(sp)
100081ac:	d8c02a17 	ldw	r3,168(sp)
100081b0:	002d883a 	mov	r22,zero
100081b4:	28800104 	addi	r2,r5,4
100081b8:	2cc0000b 	ldhu	r19,0(r5)
100081bc:	183fc90e 	bge	r3,zero,100080e4 <__alt_data_end+0xf80080e4>
100081c0:	d8802e15 	stw	r2,184(sp)
100081c4:	0039883a 	mov	fp,zero
100081c8:	9d84b03a 	or	r2,r19,r22
100081cc:	103c1e1e 	bne	r2,zero,10007248 <__alt_data_end+0xf8007248>
100081d0:	00800044 	movi	r2,1
100081d4:	003e6c06 	br	10007b88 <__alt_data_end+0xf8007b88>
100081d8:	d9002d17 	ldw	r4,180(sp)
100081dc:	d9801e04 	addi	r6,sp,120
100081e0:	b80b883a 	mov	r5,r23
100081e4:	000e4b80 	call	1000e4b8 <__sprint_r>
100081e8:	103bbf1e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
100081ec:	d8c02017 	ldw	r3,128(sp)
100081f0:	da000404 	addi	r8,sp,16
100081f4:	d9003217 	ldw	r4,200(sp)
100081f8:	d8802617 	ldw	r2,152(sp)
100081fc:	d9403317 	ldw	r5,204(sp)
10008200:	8123883a 	add	r17,r16,r4
10008204:	11400216 	blt	r2,r5,10008210 <___vfprintf_internal_r+0x1538>
10008208:	9100004c 	andi	r4,r18,1
1000820c:	20000d26 	beq	r4,zero,10008244 <___vfprintf_internal_r+0x156c>
10008210:	d9003717 	ldw	r4,220(sp)
10008214:	d9403417 	ldw	r5,208(sp)
10008218:	1907883a 	add	r3,r3,r4
1000821c:	d9001f17 	ldw	r4,124(sp)
10008220:	41400015 	stw	r5,0(r8)
10008224:	d9403717 	ldw	r5,220(sp)
10008228:	21000044 	addi	r4,r4,1
1000822c:	d8c02015 	stw	r3,128(sp)
10008230:	41400115 	stw	r5,4(r8)
10008234:	d9001f15 	stw	r4,124(sp)
10008238:	014001c4 	movi	r5,7
1000823c:	2901e816 	blt	r5,r4,100089e0 <___vfprintf_internal_r+0x1d08>
10008240:	42000204 	addi	r8,r8,8
10008244:	d9003317 	ldw	r4,204(sp)
10008248:	8121883a 	add	r16,r16,r4
1000824c:	2085c83a 	sub	r2,r4,r2
10008250:	8461c83a 	sub	r16,r16,r17
10008254:	1400010e 	bge	r2,r16,1000825c <___vfprintf_internal_r+0x1584>
10008258:	1021883a 	mov	r16,r2
1000825c:	04000a0e 	bge	zero,r16,10008288 <___vfprintf_internal_r+0x15b0>
10008260:	d9001f17 	ldw	r4,124(sp)
10008264:	1c07883a 	add	r3,r3,r16
10008268:	44400015 	stw	r17,0(r8)
1000826c:	21000044 	addi	r4,r4,1
10008270:	44000115 	stw	r16,4(r8)
10008274:	d8c02015 	stw	r3,128(sp)
10008278:	d9001f15 	stw	r4,124(sp)
1000827c:	014001c4 	movi	r5,7
10008280:	2901fb16 	blt	r5,r4,10008a70 <___vfprintf_internal_r+0x1d98>
10008284:	42000204 	addi	r8,r8,8
10008288:	8001f716 	blt	r16,zero,10008a68 <___vfprintf_internal_r+0x1d90>
1000828c:	1421c83a 	sub	r16,r2,r16
10008290:	043d160e 	bge	zero,r16,100076ec <__alt_data_end+0xf80076ec>
10008294:	04400404 	movi	r17,16
10008298:	d8801f17 	ldw	r2,124(sp)
1000829c:	8c3efb0e 	bge	r17,r16,10007e8c <__alt_data_end+0xf8007e8c>
100082a0:	01440074 	movhi	r5,4097
100082a4:	295a4284 	addi	r5,r5,26890
100082a8:	d9402c15 	stw	r5,176(sp)
100082ac:	058001c4 	movi	r22,7
100082b0:	dcc02d17 	ldw	r19,180(sp)
100082b4:	00000306 	br	100082c4 <___vfprintf_internal_r+0x15ec>
100082b8:	42000204 	addi	r8,r8,8
100082bc:	843ffc04 	addi	r16,r16,-16
100082c0:	8c3ef50e 	bge	r17,r16,10007e98 <__alt_data_end+0xf8007e98>
100082c4:	18c00404 	addi	r3,r3,16
100082c8:	10800044 	addi	r2,r2,1
100082cc:	45000015 	stw	r20,0(r8)
100082d0:	44400115 	stw	r17,4(r8)
100082d4:	d8c02015 	stw	r3,128(sp)
100082d8:	d8801f15 	stw	r2,124(sp)
100082dc:	b0bff60e 	bge	r22,r2,100082b8 <__alt_data_end+0xf80082b8>
100082e0:	d9801e04 	addi	r6,sp,120
100082e4:	b80b883a 	mov	r5,r23
100082e8:	9809883a 	mov	r4,r19
100082ec:	000e4b80 	call	1000e4b8 <__sprint_r>
100082f0:	103b7d1e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
100082f4:	d8c02017 	ldw	r3,128(sp)
100082f8:	d8801f17 	ldw	r2,124(sp)
100082fc:	da000404 	addi	r8,sp,16
10008300:	003fee06 	br	100082bc <__alt_data_end+0xf80082bc>
10008304:	9088703a 	and	r4,r18,r2
10008308:	203eab1e 	bne	r4,zero,10007db8 <__alt_data_end+0xf8007db8>
1000830c:	dc401f17 	ldw	r17,124(sp)
10008310:	40800115 	stw	r2,4(r8)
10008314:	44000015 	stw	r16,0(r8)
10008318:	8c400044 	addi	r17,r17,1
1000831c:	d8c02015 	stw	r3,128(sp)
10008320:	dc401f15 	stw	r17,124(sp)
10008324:	008001c4 	movi	r2,7
10008328:	14400e16 	blt	r2,r17,10008364 <___vfprintf_internal_r+0x168c>
1000832c:	45800204 	addi	r22,r8,8
10008330:	003eca06 	br	10007e5c <__alt_data_end+0xf8007e5c>
10008334:	01040074 	movhi	r4,4097
10008338:	211a4284 	addi	r4,r4,26890
1000833c:	d9002c15 	stw	r4,176(sp)
10008340:	d8802c17 	ldw	r2,176(sp)
10008344:	1c07883a 	add	r3,r3,r16
10008348:	8c400044 	addi	r17,r17,1
1000834c:	b0800015 	stw	r2,0(r22)
10008350:	b4000115 	stw	r16,4(r22)
10008354:	d8c02015 	stw	r3,128(sp)
10008358:	dc401f15 	stw	r17,124(sp)
1000835c:	008001c4 	movi	r2,7
10008360:	147ebd0e 	bge	r2,r17,10007e58 <__alt_data_end+0xf8007e58>
10008364:	d9002d17 	ldw	r4,180(sp)
10008368:	d9801e04 	addi	r6,sp,120
1000836c:	b80b883a 	mov	r5,r23
10008370:	000e4b80 	call	1000e4b8 <__sprint_r>
10008374:	103b5c1e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
10008378:	d8c02017 	ldw	r3,128(sp)
1000837c:	dc401f17 	ldw	r17,124(sp)
10008380:	dd800404 	addi	r22,sp,16
10008384:	003eb506 	br	10007e5c <__alt_data_end+0xf8007e5c>
10008388:	d9002d17 	ldw	r4,180(sp)
1000838c:	d9801e04 	addi	r6,sp,120
10008390:	b80b883a 	mov	r5,r23
10008394:	000e4b80 	call	1000e4b8 <__sprint_r>
10008398:	103b531e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
1000839c:	d8c02017 	ldw	r3,128(sp)
100083a0:	dc401f17 	ldw	r17,124(sp)
100083a4:	da000404 	addi	r8,sp,16
100083a8:	003e8d06 	br	10007de0 <__alt_data_end+0xf8007de0>
100083ac:	d9002d17 	ldw	r4,180(sp)
100083b0:	d9801e04 	addi	r6,sp,120
100083b4:	b80b883a 	mov	r5,r23
100083b8:	000e4b80 	call	1000e4b8 <__sprint_r>
100083bc:	103b4a1e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
100083c0:	d8c02017 	ldw	r3,128(sp)
100083c4:	dc401f17 	ldw	r17,124(sp)
100083c8:	dd800404 	addi	r22,sp,16
100083cc:	003e8f06 	br	10007e0c <__alt_data_end+0xf8007e0c>
100083d0:	0027883a 	mov	r19,zero
100083d4:	003f4a06 	br	10008100 <__alt_data_end+0xf8008100>
100083d8:	d9002d17 	ldw	r4,180(sp)
100083dc:	d9801e04 	addi	r6,sp,120
100083e0:	b80b883a 	mov	r5,r23
100083e4:	000e4b80 	call	1000e4b8 <__sprint_r>
100083e8:	103b3f1e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
100083ec:	d8c02017 	ldw	r3,128(sp)
100083f0:	da000404 	addi	r8,sp,16
100083f4:	003c7b06 	br	100075e4 <__alt_data_end+0xf80075e4>
100083f8:	d9402a17 	ldw	r5,168(sp)
100083fc:	04e7c83a 	sub	r19,zero,r19
10008400:	07000b44 	movi	fp,45
10008404:	9804c03a 	cmpne	r2,r19,zero
10008408:	05adc83a 	sub	r22,zero,r22
1000840c:	df002785 	stb	fp,158(sp)
10008410:	b0adc83a 	sub	r22,r22,r2
10008414:	28017b16 	blt	r5,zero,10008a04 <___vfprintf_internal_r+0x1d2c>
10008418:	00bfdfc4 	movi	r2,-129
1000841c:	90a4703a 	and	r18,r18,r2
10008420:	003b8906 	br	10007248 <__alt_data_end+0xf8007248>
10008424:	d9003617 	ldw	r4,216(sp)
10008428:	d9403817 	ldw	r5,224(sp)
1000842c:	da003d15 	stw	r8,244(sp)
10008430:	000e0dc0 	call	1000e0dc <__fpclassifyd>
10008434:	da003d17 	ldw	r8,244(sp)
10008438:	1000f026 	beq	r2,zero,100087fc <___vfprintf_internal_r+0x1b24>
1000843c:	d9002a17 	ldw	r4,168(sp)
10008440:	05bff7c4 	movi	r22,-33
10008444:	00bfffc4 	movi	r2,-1
10008448:	8dac703a 	and	r22,r17,r22
1000844c:	20820026 	beq	r4,r2,10008c50 <___vfprintf_internal_r+0x1f78>
10008450:	008011c4 	movi	r2,71
10008454:	b081f726 	beq	r22,r2,10008c34 <___vfprintf_internal_r+0x1f5c>
10008458:	d9003817 	ldw	r4,224(sp)
1000845c:	90c04014 	ori	r3,r18,256
10008460:	d8c02c15 	stw	r3,176(sp)
10008464:	20021516 	blt	r4,zero,10008cbc <___vfprintf_internal_r+0x1fe4>
10008468:	dcc03817 	ldw	r19,224(sp)
1000846c:	d8002905 	stb	zero,164(sp)
10008470:	00801984 	movi	r2,102
10008474:	8881f926 	beq	r17,r2,10008c5c <___vfprintf_internal_r+0x1f84>
10008478:	00801184 	movi	r2,70
1000847c:	88821c26 	beq	r17,r2,10008cf0 <___vfprintf_internal_r+0x2018>
10008480:	00801144 	movi	r2,69
10008484:	b081ef26 	beq	r22,r2,10008c44 <___vfprintf_internal_r+0x1f6c>
10008488:	d8c02a17 	ldw	r3,168(sp)
1000848c:	d8802104 	addi	r2,sp,132
10008490:	d8800315 	stw	r2,12(sp)
10008494:	d9403617 	ldw	r5,216(sp)
10008498:	d8802504 	addi	r2,sp,148
1000849c:	d9002d17 	ldw	r4,180(sp)
100084a0:	d8800215 	stw	r2,8(sp)
100084a4:	d8802604 	addi	r2,sp,152
100084a8:	d8c00015 	stw	r3,0(sp)
100084ac:	d8800115 	stw	r2,4(sp)
100084b0:	01c00084 	movi	r7,2
100084b4:	980d883a 	mov	r6,r19
100084b8:	d8c03c15 	stw	r3,240(sp)
100084bc:	da003d15 	stw	r8,244(sp)
100084c0:	00094080 	call	10009408 <_dtoa_r>
100084c4:	1021883a 	mov	r16,r2
100084c8:	008019c4 	movi	r2,103
100084cc:	d8c03c17 	ldw	r3,240(sp)
100084d0:	da003d17 	ldw	r8,244(sp)
100084d4:	88817126 	beq	r17,r2,10008a9c <___vfprintf_internal_r+0x1dc4>
100084d8:	008011c4 	movi	r2,71
100084dc:	88829126 	beq	r17,r2,10008f24 <___vfprintf_internal_r+0x224c>
100084e0:	80f9883a 	add	fp,r16,r3
100084e4:	d9003617 	ldw	r4,216(sp)
100084e8:	000d883a 	mov	r6,zero
100084ec:	000f883a 	mov	r7,zero
100084f0:	980b883a 	mov	r5,r19
100084f4:	da003d15 	stw	r8,244(sp)
100084f8:	001223c0 	call	1001223c <__eqdf2>
100084fc:	da003d17 	ldw	r8,244(sp)
10008500:	10018d26 	beq	r2,zero,10008b38 <___vfprintf_internal_r+0x1e60>
10008504:	d8802117 	ldw	r2,132(sp)
10008508:	1700062e 	bgeu	r2,fp,10008524 <___vfprintf_internal_r+0x184c>
1000850c:	01000c04 	movi	r4,48
10008510:	10c00044 	addi	r3,r2,1
10008514:	d8c02115 	stw	r3,132(sp)
10008518:	11000005 	stb	r4,0(r2)
1000851c:	d8802117 	ldw	r2,132(sp)
10008520:	173ffb36 	bltu	r2,fp,10008510 <__alt_data_end+0xf8008510>
10008524:	1405c83a 	sub	r2,r2,r16
10008528:	d8803315 	stw	r2,204(sp)
1000852c:	008011c4 	movi	r2,71
10008530:	b0817626 	beq	r22,r2,10008b0c <___vfprintf_internal_r+0x1e34>
10008534:	00801944 	movi	r2,101
10008538:	1442800e 	bge	r2,r17,10008f3c <___vfprintf_internal_r+0x2264>
1000853c:	d8c02617 	ldw	r3,152(sp)
10008540:	00801984 	movi	r2,102
10008544:	d8c03215 	stw	r3,200(sp)
10008548:	8881fe26 	beq	r17,r2,10008d44 <___vfprintf_internal_r+0x206c>
1000854c:	d8c03217 	ldw	r3,200(sp)
10008550:	d9003317 	ldw	r4,204(sp)
10008554:	1901dd16 	blt	r3,r4,10008ccc <___vfprintf_internal_r+0x1ff4>
10008558:	9480004c 	andi	r18,r18,1
1000855c:	90022b1e 	bne	r18,zero,10008e0c <___vfprintf_internal_r+0x2134>
10008560:	1805883a 	mov	r2,r3
10008564:	18028316 	blt	r3,zero,10008f74 <___vfprintf_internal_r+0x229c>
10008568:	d8c03217 	ldw	r3,200(sp)
1000856c:	044019c4 	movi	r17,103
10008570:	d8c02b15 	stw	r3,172(sp)
10008574:	df002907 	ldb	fp,164(sp)
10008578:	e001531e 	bne	fp,zero,10008ac8 <___vfprintf_internal_r+0x1df0>
1000857c:	df002783 	ldbu	fp,158(sp)
10008580:	d8802915 	stw	r2,164(sp)
10008584:	dc802c17 	ldw	r18,176(sp)
10008588:	d8002a15 	stw	zero,168(sp)
1000858c:	003baf06 	br	1000744c <__alt_data_end+0xf800744c>
10008590:	d8c02e17 	ldw	r3,184(sp)
10008594:	d9002e17 	ldw	r4,184(sp)
10008598:	d9402e17 	ldw	r5,184(sp)
1000859c:	18c00017 	ldw	r3,0(r3)
100085a0:	21000117 	ldw	r4,4(r4)
100085a4:	29400204 	addi	r5,r5,8
100085a8:	d8c03615 	stw	r3,216(sp)
100085ac:	d9003815 	stw	r4,224(sp)
100085b0:	d9402e15 	stw	r5,184(sp)
100085b4:	003b5006 	br	100072f8 <__alt_data_end+0xf80072f8>
100085b8:	ac400007 	ldb	r17,0(r21)
100085bc:	003a2806 	br	10006e60 <__alt_data_end+0xf8006e60>
100085c0:	9080100c 	andi	r2,r18,64
100085c4:	1000a826 	beq	r2,zero,10008868 <___vfprintf_internal_r+0x1b90>
100085c8:	d8c02e17 	ldw	r3,184(sp)
100085cc:	002d883a 	mov	r22,zero
100085d0:	1cc0000b 	ldhu	r19,0(r3)
100085d4:	18c00104 	addi	r3,r3,4
100085d8:	d8c02e15 	stw	r3,184(sp)
100085dc:	003caf06 	br	1000789c <__alt_data_end+0xf800789c>
100085e0:	d9002e17 	ldw	r4,184(sp)
100085e4:	d9402a17 	ldw	r5,168(sp)
100085e8:	002d883a 	mov	r22,zero
100085ec:	20800104 	addi	r2,r4,4
100085f0:	24c00017 	ldw	r19,0(r4)
100085f4:	283ebb0e 	bge	r5,zero,100080e4 <__alt_data_end+0xf80080e4>
100085f8:	003ef106 	br	100081c0 <__alt_data_end+0xf80081c0>
100085fc:	9080040c 	andi	r2,r18,16
10008600:	1000921e 	bne	r2,zero,1000884c <___vfprintf_internal_r+0x1b74>
10008604:	9480100c 	andi	r18,r18,64
10008608:	90013926 	beq	r18,zero,10008af0 <___vfprintf_internal_r+0x1e18>
1000860c:	d9402e17 	ldw	r5,184(sp)
10008610:	d8c02f17 	ldw	r3,188(sp)
10008614:	28800017 	ldw	r2,0(r5)
10008618:	29400104 	addi	r5,r5,4
1000861c:	d9402e15 	stw	r5,184(sp)
10008620:	10c0000d 	sth	r3,0(r2)
10008624:	0039e406 	br	10006db8 <__alt_data_end+0xf8006db8>
10008628:	9080100c 	andi	r2,r18,64
1000862c:	10008026 	beq	r2,zero,10008830 <___vfprintf_internal_r+0x1b58>
10008630:	d8802e17 	ldw	r2,184(sp)
10008634:	14c0000f 	ldh	r19,0(r2)
10008638:	10800104 	addi	r2,r2,4
1000863c:	d8802e15 	stw	r2,184(sp)
10008640:	982dd7fa 	srai	r22,r19,31
10008644:	b005883a 	mov	r2,r22
10008648:	003af706 	br	10007228 <__alt_data_end+0xf8007228>
1000864c:	9080100c 	andi	r2,r18,64
10008650:	d8002785 	stb	zero,158(sp)
10008654:	10008a1e 	bne	r2,zero,10008880 <___vfprintf_internal_r+0x1ba8>
10008658:	d9002e17 	ldw	r4,184(sp)
1000865c:	d9402a17 	ldw	r5,168(sp)
10008660:	002d883a 	mov	r22,zero
10008664:	20800104 	addi	r2,r4,4
10008668:	24c00017 	ldw	r19,0(r4)
1000866c:	283e4b0e 	bge	r5,zero,10007f9c <__alt_data_end+0xf8007f9c>
10008670:	9d86b03a 	or	r3,r19,r22
10008674:	d8802e15 	stw	r2,184(sp)
10008678:	183e4c1e 	bne	r3,zero,10007fac <__alt_data_end+0xf8007fac>
1000867c:	0039883a 	mov	fp,zero
10008680:	0005883a 	mov	r2,zero
10008684:	003d4006 	br	10007b88 <__alt_data_end+0xf8007b88>
10008688:	01440074 	movhi	r5,4097
1000868c:	295a4284 	addi	r5,r5,26890
10008690:	d9402c15 	stw	r5,176(sp)
10008694:	d9402c17 	ldw	r5,176(sp)
10008698:	1c47883a 	add	r3,r3,r17
1000869c:	10800044 	addi	r2,r2,1
100086a0:	41400015 	stw	r5,0(r8)
100086a4:	44400115 	stw	r17,4(r8)
100086a8:	d8c02015 	stw	r3,128(sp)
100086ac:	d8801f15 	stw	r2,124(sp)
100086b0:	010001c4 	movi	r4,7
100086b4:	20bec816 	blt	r4,r2,100081d8 <__alt_data_end+0xf80081d8>
100086b8:	42000204 	addi	r8,r8,8
100086bc:	003ecd06 	br	100081f4 <__alt_data_end+0xf80081f4>
100086c0:	d9002a17 	ldw	r4,168(sp)
100086c4:	d8002785 	stb	zero,158(sp)
100086c8:	203d2d16 	blt	r4,zero,10007b80 <__alt_data_end+0xf8007b80>
100086cc:	00bfdfc4 	movi	r2,-129
100086d0:	90a4703a 	and	r18,r18,r2
100086d4:	003a6106 	br	1000705c <__alt_data_end+0xf800705c>
100086d8:	01040074 	movhi	r4,4097
100086dc:	211a4284 	addi	r4,r4,26890
100086e0:	d9002c15 	stw	r4,176(sp)
100086e4:	003bea06 	br	10007690 <__alt_data_end+0xf8007690>
100086e8:	d9002d17 	ldw	r4,180(sp)
100086ec:	d9801e04 	addi	r6,sp,120
100086f0:	b80b883a 	mov	r5,r23
100086f4:	000e4b80 	call	1000e4b8 <__sprint_r>
100086f8:	103a7b1e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
100086fc:	d8c02017 	ldw	r3,128(sp)
10008700:	da000404 	addi	r8,sp,16
10008704:	003d4106 	br	10007c0c <__alt_data_end+0xf8007c0c>
10008708:	d8801f17 	ldw	r2,124(sp)
1000870c:	01440074 	movhi	r5,4097
10008710:	01000044 	movi	r4,1
10008714:	18c00044 	addi	r3,r3,1
10008718:	10800044 	addi	r2,r2,1
1000871c:	295a4204 	addi	r5,r5,26888
10008720:	41000115 	stw	r4,4(r8)
10008724:	41400015 	stw	r5,0(r8)
10008728:	d8c02015 	stw	r3,128(sp)
1000872c:	d8801f15 	stw	r2,124(sp)
10008730:	010001c4 	movi	r4,7
10008734:	20805c16 	blt	r4,r2,100088a8 <___vfprintf_internal_r+0x1bd0>
10008738:	42000204 	addi	r8,r8,8
1000873c:	8800041e 	bne	r17,zero,10008750 <___vfprintf_internal_r+0x1a78>
10008740:	d8803317 	ldw	r2,204(sp)
10008744:	1000021e 	bne	r2,zero,10008750 <___vfprintf_internal_r+0x1a78>
10008748:	9080004c 	andi	r2,r18,1
1000874c:	103be726 	beq	r2,zero,100076ec <__alt_data_end+0xf80076ec>
10008750:	d9003717 	ldw	r4,220(sp)
10008754:	d8801f17 	ldw	r2,124(sp)
10008758:	d9403417 	ldw	r5,208(sp)
1000875c:	20c7883a 	add	r3,r4,r3
10008760:	10800044 	addi	r2,r2,1
10008764:	41000115 	stw	r4,4(r8)
10008768:	41400015 	stw	r5,0(r8)
1000876c:	d8c02015 	stw	r3,128(sp)
10008770:	d8801f15 	stw	r2,124(sp)
10008774:	010001c4 	movi	r4,7
10008778:	20812116 	blt	r4,r2,10008c00 <___vfprintf_internal_r+0x1f28>
1000877c:	42000204 	addi	r8,r8,8
10008780:	0463c83a 	sub	r17,zero,r17
10008784:	0440730e 	bge	zero,r17,10008954 <___vfprintf_internal_r+0x1c7c>
10008788:	05800404 	movi	r22,16
1000878c:	b440860e 	bge	r22,r17,100089a8 <___vfprintf_internal_r+0x1cd0>
10008790:	01440074 	movhi	r5,4097
10008794:	295a4284 	addi	r5,r5,26890
10008798:	d9402c15 	stw	r5,176(sp)
1000879c:	070001c4 	movi	fp,7
100087a0:	dcc02d17 	ldw	r19,180(sp)
100087a4:	00000306 	br	100087b4 <___vfprintf_internal_r+0x1adc>
100087a8:	42000204 	addi	r8,r8,8
100087ac:	8c7ffc04 	addi	r17,r17,-16
100087b0:	b440800e 	bge	r22,r17,100089b4 <___vfprintf_internal_r+0x1cdc>
100087b4:	18c00404 	addi	r3,r3,16
100087b8:	10800044 	addi	r2,r2,1
100087bc:	45000015 	stw	r20,0(r8)
100087c0:	45800115 	stw	r22,4(r8)
100087c4:	d8c02015 	stw	r3,128(sp)
100087c8:	d8801f15 	stw	r2,124(sp)
100087cc:	e0bff60e 	bge	fp,r2,100087a8 <__alt_data_end+0xf80087a8>
100087d0:	d9801e04 	addi	r6,sp,120
100087d4:	b80b883a 	mov	r5,r23
100087d8:	9809883a 	mov	r4,r19
100087dc:	000e4b80 	call	1000e4b8 <__sprint_r>
100087e0:	103a411e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
100087e4:	d8c02017 	ldw	r3,128(sp)
100087e8:	d8801f17 	ldw	r2,124(sp)
100087ec:	da000404 	addi	r8,sp,16
100087f0:	003fee06 	br	100087ac <__alt_data_end+0xf80087ac>
100087f4:	00bfffc4 	movi	r2,-1
100087f8:	003a3f06 	br	100070f8 <__alt_data_end+0xf80070f8>
100087fc:	008011c4 	movi	r2,71
10008800:	1440b816 	blt	r2,r17,10008ae4 <___vfprintf_internal_r+0x1e0c>
10008804:	04040074 	movhi	r16,4097
10008808:	841a3404 	addi	r16,r16,26832
1000880c:	00c000c4 	movi	r3,3
10008810:	00bfdfc4 	movi	r2,-129
10008814:	d8c02915 	stw	r3,164(sp)
10008818:	90a4703a 	and	r18,r18,r2
1000881c:	df002783 	ldbu	fp,158(sp)
10008820:	d8c02b15 	stw	r3,172(sp)
10008824:	d8002a15 	stw	zero,168(sp)
10008828:	d8003215 	stw	zero,200(sp)
1000882c:	003b0706 	br	1000744c <__alt_data_end+0xf800744c>
10008830:	d8c02e17 	ldw	r3,184(sp)
10008834:	1cc00017 	ldw	r19,0(r3)
10008838:	18c00104 	addi	r3,r3,4
1000883c:	d8c02e15 	stw	r3,184(sp)
10008840:	982dd7fa 	srai	r22,r19,31
10008844:	b005883a 	mov	r2,r22
10008848:	003a7706 	br	10007228 <__alt_data_end+0xf8007228>
1000884c:	d8c02e17 	ldw	r3,184(sp)
10008850:	d9002f17 	ldw	r4,188(sp)
10008854:	18800017 	ldw	r2,0(r3)
10008858:	18c00104 	addi	r3,r3,4
1000885c:	d8c02e15 	stw	r3,184(sp)
10008860:	11000015 	stw	r4,0(r2)
10008864:	00395406 	br	10006db8 <__alt_data_end+0xf8006db8>
10008868:	d9002e17 	ldw	r4,184(sp)
1000886c:	002d883a 	mov	r22,zero
10008870:	24c00017 	ldw	r19,0(r4)
10008874:	21000104 	addi	r4,r4,4
10008878:	d9002e15 	stw	r4,184(sp)
1000887c:	003c0706 	br	1000789c <__alt_data_end+0xf800789c>
10008880:	d9402e17 	ldw	r5,184(sp)
10008884:	d8c02a17 	ldw	r3,168(sp)
10008888:	002d883a 	mov	r22,zero
1000888c:	28800104 	addi	r2,r5,4
10008890:	2cc0000b 	ldhu	r19,0(r5)
10008894:	183dc10e 	bge	r3,zero,10007f9c <__alt_data_end+0xf8007f9c>
10008898:	003f7506 	br	10008670 <__alt_data_end+0xf8008670>
1000889c:	04040074 	movhi	r16,4097
100088a0:	841a3204 	addi	r16,r16,26824
100088a4:	003aa706 	br	10007344 <__alt_data_end+0xf8007344>
100088a8:	d9002d17 	ldw	r4,180(sp)
100088ac:	d9801e04 	addi	r6,sp,120
100088b0:	b80b883a 	mov	r5,r23
100088b4:	000e4b80 	call	1000e4b8 <__sprint_r>
100088b8:	103a0b1e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
100088bc:	dc402617 	ldw	r17,152(sp)
100088c0:	d8c02017 	ldw	r3,128(sp)
100088c4:	da000404 	addi	r8,sp,16
100088c8:	003f9c06 	br	1000873c <__alt_data_end+0xf800873c>
100088cc:	ac400043 	ldbu	r17,1(r21)
100088d0:	84000814 	ori	r16,r16,32
100088d4:	ad400044 	addi	r21,r21,1
100088d8:	8c403fcc 	andi	r17,r17,255
100088dc:	8c40201c 	xori	r17,r17,128
100088e0:	8c7fe004 	addi	r17,r17,-128
100088e4:	00395e06 	br	10006e60 <__alt_data_end+0xf8006e60>
100088e8:	d8c02e15 	stw	r3,184(sp)
100088ec:	0039883a 	mov	fp,zero
100088f0:	003e3506 	br	100081c8 <__alt_data_end+0xf80081c8>
100088f4:	d9002d17 	ldw	r4,180(sp)
100088f8:	d9801e04 	addi	r6,sp,120
100088fc:	b80b883a 	mov	r5,r23
10008900:	000e4b80 	call	1000e4b8 <__sprint_r>
10008904:	1039f81e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
10008908:	d8c02017 	ldw	r3,128(sp)
1000890c:	da000404 	addi	r8,sp,16
10008910:	003cd006 	br	10007c54 <__alt_data_end+0xf8007c54>
10008914:	8009883a 	mov	r4,r16
10008918:	df003d15 	stw	fp,244(sp)
1000891c:	0006c400 	call	10006c40 <strlen>
10008920:	d8802b15 	stw	r2,172(sp)
10008924:	da003d17 	ldw	r8,244(sp)
10008928:	103c200e 	bge	r2,zero,100079ac <__alt_data_end+0xf80079ac>
1000892c:	0005883a 	mov	r2,zero
10008930:	003c1e06 	br	100079ac <__alt_data_end+0xf80079ac>
10008934:	d9002d17 	ldw	r4,180(sp)
10008938:	d9801e04 	addi	r6,sp,120
1000893c:	b80b883a 	mov	r5,r23
10008940:	000e4b80 	call	1000e4b8 <__sprint_r>
10008944:	1039e81e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
10008948:	d8c02017 	ldw	r3,128(sp)
1000894c:	d8801f17 	ldw	r2,124(sp)
10008950:	da000404 	addi	r8,sp,16
10008954:	d9403317 	ldw	r5,204(sp)
10008958:	10800044 	addi	r2,r2,1
1000895c:	44000015 	stw	r16,0(r8)
10008960:	28c7883a 	add	r3,r5,r3
10008964:	003b5b06 	br	100076d4 <__alt_data_end+0xf80076d4>
10008968:	01040074 	movhi	r4,4097
1000896c:	211a4684 	addi	r4,r4,26906
10008970:	d9003515 	stw	r4,212(sp)
10008974:	003af206 	br	10007540 <__alt_data_end+0xf8007540>
10008978:	013fffc4 	movi	r4,-1
1000897c:	003a0806 	br	100071a0 <__alt_data_end+0xf80071a0>
10008980:	0023883a 	mov	r17,zero
10008984:	003d9d06 	br	10007ffc <__alt_data_end+0xf8007ffc>
10008988:	d9002d17 	ldw	r4,180(sp)
1000898c:	d9801e04 	addi	r6,sp,120
10008990:	b80b883a 	mov	r5,r23
10008994:	000e4b80 	call	1000e4b8 <__sprint_r>
10008998:	1039d31e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
1000899c:	d8c02017 	ldw	r3,128(sp)
100089a0:	da000404 	addi	r8,sp,16
100089a4:	003d9406 	br	10007ff8 <__alt_data_end+0xf8007ff8>
100089a8:	01040074 	movhi	r4,4097
100089ac:	211a4284 	addi	r4,r4,26890
100089b0:	d9002c15 	stw	r4,176(sp)
100089b4:	d9002c17 	ldw	r4,176(sp)
100089b8:	1c47883a 	add	r3,r3,r17
100089bc:	10800044 	addi	r2,r2,1
100089c0:	41000015 	stw	r4,0(r8)
100089c4:	44400115 	stw	r17,4(r8)
100089c8:	d8c02015 	stw	r3,128(sp)
100089cc:	d8801f15 	stw	r2,124(sp)
100089d0:	010001c4 	movi	r4,7
100089d4:	20bfd716 	blt	r4,r2,10008934 <__alt_data_end+0xf8008934>
100089d8:	42000204 	addi	r8,r8,8
100089dc:	003fdd06 	br	10008954 <__alt_data_end+0xf8008954>
100089e0:	d9002d17 	ldw	r4,180(sp)
100089e4:	d9801e04 	addi	r6,sp,120
100089e8:	b80b883a 	mov	r5,r23
100089ec:	000e4b80 	call	1000e4b8 <__sprint_r>
100089f0:	1039bd1e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
100089f4:	d8802617 	ldw	r2,152(sp)
100089f8:	d8c02017 	ldw	r3,128(sp)
100089fc:	da000404 	addi	r8,sp,16
10008a00:	003e1006 	br	10008244 <__alt_data_end+0xf8008244>
10008a04:	00800044 	movi	r2,1
10008a08:	10803fcc 	andi	r2,r2,255
10008a0c:	00c00044 	movi	r3,1
10008a10:	10fa0d26 	beq	r2,r3,10007248 <__alt_data_end+0xf8007248>
10008a14:	00c00084 	movi	r3,2
10008a18:	10fbaf26 	beq	r2,r3,100078d8 <__alt_data_end+0xf80078d8>
10008a1c:	003a6d06 	br	100073d4 <__alt_data_end+0xf80073d4>
10008a20:	01040074 	movhi	r4,4097
10008a24:	211a4684 	addi	r4,r4,26906
10008a28:	d9003515 	stw	r4,212(sp)
10008a2c:	003b5406 	br	10007780 <__alt_data_end+0xf8007780>
10008a30:	d8802a17 	ldw	r2,168(sp)
10008a34:	00c00184 	movi	r3,6
10008a38:	1880012e 	bgeu	r3,r2,10008a40 <___vfprintf_internal_r+0x1d68>
10008a3c:	1805883a 	mov	r2,r3
10008a40:	d8802b15 	stw	r2,172(sp)
10008a44:	1000ef16 	blt	r2,zero,10008e04 <___vfprintf_internal_r+0x212c>
10008a48:	04040074 	movhi	r16,4097
10008a4c:	d8802915 	stw	r2,164(sp)
10008a50:	dcc02e15 	stw	r19,184(sp)
10008a54:	d8002a15 	stw	zero,168(sp)
10008a58:	d8003215 	stw	zero,200(sp)
10008a5c:	841a4004 	addi	r16,r16,26880
10008a60:	0039883a 	mov	fp,zero
10008a64:	003a8006 	br	10007468 <__alt_data_end+0xf8007468>
10008a68:	0021883a 	mov	r16,zero
10008a6c:	003e0706 	br	1000828c <__alt_data_end+0xf800828c>
10008a70:	d9002d17 	ldw	r4,180(sp)
10008a74:	d9801e04 	addi	r6,sp,120
10008a78:	b80b883a 	mov	r5,r23
10008a7c:	000e4b80 	call	1000e4b8 <__sprint_r>
10008a80:	1039991e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
10008a84:	d8802617 	ldw	r2,152(sp)
10008a88:	d9403317 	ldw	r5,204(sp)
10008a8c:	d8c02017 	ldw	r3,128(sp)
10008a90:	da000404 	addi	r8,sp,16
10008a94:	2885c83a 	sub	r2,r5,r2
10008a98:	003dfb06 	br	10008288 <__alt_data_end+0xf8008288>
10008a9c:	9080004c 	andi	r2,r18,1
10008aa0:	103e8f1e 	bne	r2,zero,100084e0 <__alt_data_end+0xf80084e0>
10008aa4:	d8802117 	ldw	r2,132(sp)
10008aa8:	003e9e06 	br	10008524 <__alt_data_end+0xf8008524>
10008aac:	1025883a 	mov	r18,r2
10008ab0:	0039883a 	mov	fp,zero
10008ab4:	00800084 	movi	r2,2
10008ab8:	003fd306 	br	10008a08 <__alt_data_end+0xf8008a08>
10008abc:	07000b44 	movi	fp,45
10008ac0:	df002785 	stb	fp,158(sp)
10008ac4:	003a1b06 	br	10007334 <__alt_data_end+0xf8007334>
10008ac8:	00c00b44 	movi	r3,45
10008acc:	d8c02785 	stb	r3,158(sp)
10008ad0:	d8802915 	stw	r2,164(sp)
10008ad4:	dc802c17 	ldw	r18,176(sp)
10008ad8:	d8002a15 	stw	zero,168(sp)
10008adc:	07000b44 	movi	fp,45
10008ae0:	003a5e06 	br	1000745c <__alt_data_end+0xf800745c>
10008ae4:	04040074 	movhi	r16,4097
10008ae8:	841a3504 	addi	r16,r16,26836
10008aec:	003f4706 	br	1000880c <__alt_data_end+0xf800880c>
10008af0:	d9002e17 	ldw	r4,184(sp)
10008af4:	d9402f17 	ldw	r5,188(sp)
10008af8:	20800017 	ldw	r2,0(r4)
10008afc:	21000104 	addi	r4,r4,4
10008b00:	d9002e15 	stw	r4,184(sp)
10008b04:	11400015 	stw	r5,0(r2)
10008b08:	0038ab06 	br	10006db8 <__alt_data_end+0xf8006db8>
10008b0c:	dd802617 	ldw	r22,152(sp)
10008b10:	00bfff44 	movi	r2,-3
10008b14:	b0801c16 	blt	r22,r2,10008b88 <___vfprintf_internal_r+0x1eb0>
10008b18:	d9402a17 	ldw	r5,168(sp)
10008b1c:	2d801a16 	blt	r5,r22,10008b88 <___vfprintf_internal_r+0x1eb0>
10008b20:	dd803215 	stw	r22,200(sp)
10008b24:	003e8906 	br	1000854c <__alt_data_end+0xf800854c>
10008b28:	01040074 	movhi	r4,4097
10008b2c:	211a4284 	addi	r4,r4,26890
10008b30:	d9002c15 	stw	r4,176(sp)
10008b34:	003c9106 	br	10007d7c <__alt_data_end+0xf8007d7c>
10008b38:	e005883a 	mov	r2,fp
10008b3c:	003e7906 	br	10008524 <__alt_data_end+0xf8008524>
10008b40:	d9002a17 	ldw	r4,168(sp)
10008b44:	df002783 	ldbu	fp,158(sp)
10008b48:	dcc02e15 	stw	r19,184(sp)
10008b4c:	d9002915 	stw	r4,164(sp)
10008b50:	d9002b15 	stw	r4,172(sp)
10008b54:	d8002a15 	stw	zero,168(sp)
10008b58:	d8003215 	stw	zero,200(sp)
10008b5c:	003a3b06 	br	1000744c <__alt_data_end+0xf800744c>
10008b60:	9080004c 	andi	r2,r18,1
10008b64:	0039883a 	mov	fp,zero
10008b68:	10000426 	beq	r2,zero,10008b7c <___vfprintf_internal_r+0x1ea4>
10008b6c:	00800c04 	movi	r2,48
10008b70:	dc001dc4 	addi	r16,sp,119
10008b74:	d8801dc5 	stb	r2,119(sp)
10008b78:	003b6406 	br	1000790c <__alt_data_end+0xf800790c>
10008b7c:	d8002b15 	stw	zero,172(sp)
10008b80:	dc001e04 	addi	r16,sp,120
10008b84:	003a2b06 	br	10007434 <__alt_data_end+0xf8007434>
10008b88:	8c7fff84 	addi	r17,r17,-2
10008b8c:	b5bfffc4 	addi	r22,r22,-1
10008b90:	dd802615 	stw	r22,152(sp)
10008b94:	dc4022c5 	stb	r17,139(sp)
10008b98:	b000bf16 	blt	r22,zero,10008e98 <___vfprintf_internal_r+0x21c0>
10008b9c:	00800ac4 	movi	r2,43
10008ba0:	d8802305 	stb	r2,140(sp)
10008ba4:	00800244 	movi	r2,9
10008ba8:	15807016 	blt	r2,r22,10008d6c <___vfprintf_internal_r+0x2094>
10008bac:	00800c04 	movi	r2,48
10008bb0:	b5800c04 	addi	r22,r22,48
10008bb4:	d8802345 	stb	r2,141(sp)
10008bb8:	dd802385 	stb	r22,142(sp)
10008bbc:	d88023c4 	addi	r2,sp,143
10008bc0:	df0022c4 	addi	fp,sp,139
10008bc4:	d8c03317 	ldw	r3,204(sp)
10008bc8:	1739c83a 	sub	fp,r2,fp
10008bcc:	d9003317 	ldw	r4,204(sp)
10008bd0:	e0c7883a 	add	r3,fp,r3
10008bd4:	df003a15 	stw	fp,232(sp)
10008bd8:	d8c02b15 	stw	r3,172(sp)
10008bdc:	00800044 	movi	r2,1
10008be0:	1100b30e 	bge	r2,r4,10008eb0 <___vfprintf_internal_r+0x21d8>
10008be4:	d8c02b17 	ldw	r3,172(sp)
10008be8:	18c00044 	addi	r3,r3,1
10008bec:	d8c02b15 	stw	r3,172(sp)
10008bf0:	1805883a 	mov	r2,r3
10008bf4:	1800ac16 	blt	r3,zero,10008ea8 <___vfprintf_internal_r+0x21d0>
10008bf8:	d8003215 	stw	zero,200(sp)
10008bfc:	003e5d06 	br	10008574 <__alt_data_end+0xf8008574>
10008c00:	d9002d17 	ldw	r4,180(sp)
10008c04:	d9801e04 	addi	r6,sp,120
10008c08:	b80b883a 	mov	r5,r23
10008c0c:	000e4b80 	call	1000e4b8 <__sprint_r>
10008c10:	1039351e 	bne	r2,zero,100070e8 <__alt_data_end+0xf80070e8>
10008c14:	dc402617 	ldw	r17,152(sp)
10008c18:	d8c02017 	ldw	r3,128(sp)
10008c1c:	d8801f17 	ldw	r2,124(sp)
10008c20:	da000404 	addi	r8,sp,16
10008c24:	003ed606 	br	10008780 <__alt_data_end+0xf8008780>
10008c28:	182b883a 	mov	r21,r3
10008c2c:	d8002a15 	stw	zero,168(sp)
10008c30:	00388c06 	br	10006e64 <__alt_data_end+0xf8006e64>
10008c34:	d8802a17 	ldw	r2,168(sp)
10008c38:	103e071e 	bne	r2,zero,10008458 <__alt_data_end+0xf8008458>
10008c3c:	dc002a15 	stw	r16,168(sp)
10008c40:	003e0506 	br	10008458 <__alt_data_end+0xf8008458>
10008c44:	d9002a17 	ldw	r4,168(sp)
10008c48:	20c00044 	addi	r3,r4,1
10008c4c:	003e0f06 	br	1000848c <__alt_data_end+0xf800848c>
10008c50:	01400184 	movi	r5,6
10008c54:	d9402a15 	stw	r5,168(sp)
10008c58:	003dff06 	br	10008458 <__alt_data_end+0xf8008458>
10008c5c:	d8802104 	addi	r2,sp,132
10008c60:	d8800315 	stw	r2,12(sp)
10008c64:	d8802504 	addi	r2,sp,148
10008c68:	d8800215 	stw	r2,8(sp)
10008c6c:	d8802604 	addi	r2,sp,152
10008c70:	d8800115 	stw	r2,4(sp)
10008c74:	d8802a17 	ldw	r2,168(sp)
10008c78:	d9403617 	ldw	r5,216(sp)
10008c7c:	d9002d17 	ldw	r4,180(sp)
10008c80:	d8800015 	stw	r2,0(sp)
10008c84:	01c000c4 	movi	r7,3
10008c88:	980d883a 	mov	r6,r19
10008c8c:	da003d15 	stw	r8,244(sp)
10008c90:	00094080 	call	10009408 <_dtoa_r>
10008c94:	d8c02a17 	ldw	r3,168(sp)
10008c98:	da003d17 	ldw	r8,244(sp)
10008c9c:	1021883a 	mov	r16,r2
10008ca0:	10f9883a 	add	fp,r2,r3
10008ca4:	81000007 	ldb	r4,0(r16)
10008ca8:	00800c04 	movi	r2,48
10008cac:	20805e26 	beq	r4,r2,10008e28 <___vfprintf_internal_r+0x2150>
10008cb0:	d8c02617 	ldw	r3,152(sp)
10008cb4:	e0f9883a 	add	fp,fp,r3
10008cb8:	003e0a06 	br	100084e4 <__alt_data_end+0xf80084e4>
10008cbc:	00c00b44 	movi	r3,45
10008cc0:	24e0003c 	xorhi	r19,r4,32768
10008cc4:	d8c02905 	stb	r3,164(sp)
10008cc8:	003de906 	br	10008470 <__alt_data_end+0xf8008470>
10008ccc:	d8c03217 	ldw	r3,200(sp)
10008cd0:	00c07a0e 	bge	zero,r3,10008ebc <___vfprintf_internal_r+0x21e4>
10008cd4:	00800044 	movi	r2,1
10008cd8:	d9003317 	ldw	r4,204(sp)
10008cdc:	1105883a 	add	r2,r2,r4
10008ce0:	d8802b15 	stw	r2,172(sp)
10008ce4:	10004e16 	blt	r2,zero,10008e20 <___vfprintf_internal_r+0x2148>
10008ce8:	044019c4 	movi	r17,103
10008cec:	003e2106 	br	10008574 <__alt_data_end+0xf8008574>
10008cf0:	d9002a17 	ldw	r4,168(sp)
10008cf4:	d8802104 	addi	r2,sp,132
10008cf8:	d8800315 	stw	r2,12(sp)
10008cfc:	d9000015 	stw	r4,0(sp)
10008d00:	d8802504 	addi	r2,sp,148
10008d04:	d9403617 	ldw	r5,216(sp)
10008d08:	d9002d17 	ldw	r4,180(sp)
10008d0c:	d8800215 	stw	r2,8(sp)
10008d10:	d8802604 	addi	r2,sp,152
10008d14:	d8800115 	stw	r2,4(sp)
10008d18:	01c000c4 	movi	r7,3
10008d1c:	980d883a 	mov	r6,r19
10008d20:	da003d15 	stw	r8,244(sp)
10008d24:	00094080 	call	10009408 <_dtoa_r>
10008d28:	d8c02a17 	ldw	r3,168(sp)
10008d2c:	da003d17 	ldw	r8,244(sp)
10008d30:	1021883a 	mov	r16,r2
10008d34:	00801184 	movi	r2,70
10008d38:	80f9883a 	add	fp,r16,r3
10008d3c:	88bfd926 	beq	r17,r2,10008ca4 <__alt_data_end+0xf8008ca4>
10008d40:	003de806 	br	100084e4 <__alt_data_end+0xf80084e4>
10008d44:	d9002a17 	ldw	r4,168(sp)
10008d48:	00c04d0e 	bge	zero,r3,10008e80 <___vfprintf_internal_r+0x21a8>
10008d4c:	2000441e 	bne	r4,zero,10008e60 <___vfprintf_internal_r+0x2188>
10008d50:	9480004c 	andi	r18,r18,1
10008d54:	9000421e 	bne	r18,zero,10008e60 <___vfprintf_internal_r+0x2188>
10008d58:	1805883a 	mov	r2,r3
10008d5c:	18006f16 	blt	r3,zero,10008f1c <___vfprintf_internal_r+0x2244>
10008d60:	d8c03217 	ldw	r3,200(sp)
10008d64:	d8c02b15 	stw	r3,172(sp)
10008d68:	003e0206 	br	10008574 <__alt_data_end+0xf8008574>
10008d6c:	df0022c4 	addi	fp,sp,139
10008d70:	dc002a15 	stw	r16,168(sp)
10008d74:	4027883a 	mov	r19,r8
10008d78:	e021883a 	mov	r16,fp
10008d7c:	b009883a 	mov	r4,r22
10008d80:	01400284 	movi	r5,10
10008d84:	00069a80 	call	100069a8 <__modsi3>
10008d88:	10800c04 	addi	r2,r2,48
10008d8c:	843fffc4 	addi	r16,r16,-1
10008d90:	b009883a 	mov	r4,r22
10008d94:	01400284 	movi	r5,10
10008d98:	80800005 	stb	r2,0(r16)
10008d9c:	00069240 	call	10006924 <__divsi3>
10008da0:	102d883a 	mov	r22,r2
10008da4:	00800244 	movi	r2,9
10008da8:	15bff416 	blt	r2,r22,10008d7c <__alt_data_end+0xf8008d7c>
10008dac:	9811883a 	mov	r8,r19
10008db0:	b0800c04 	addi	r2,r22,48
10008db4:	8027883a 	mov	r19,r16
10008db8:	997fffc4 	addi	r5,r19,-1
10008dbc:	98bfffc5 	stb	r2,-1(r19)
10008dc0:	dc002a17 	ldw	r16,168(sp)
10008dc4:	2f006d2e 	bgeu	r5,fp,10008f7c <___vfprintf_internal_r+0x22a4>
10008dc8:	d9c02384 	addi	r7,sp,142
10008dcc:	3ccfc83a 	sub	r7,r7,r19
10008dd0:	d9002344 	addi	r4,sp,141
10008dd4:	e1cf883a 	add	r7,fp,r7
10008dd8:	00000106 	br	10008de0 <___vfprintf_internal_r+0x2108>
10008ddc:	28800003 	ldbu	r2,0(r5)
10008de0:	20800005 	stb	r2,0(r4)
10008de4:	21000044 	addi	r4,r4,1
10008de8:	29400044 	addi	r5,r5,1
10008dec:	393ffb1e 	bne	r7,r4,10008ddc <__alt_data_end+0xf8008ddc>
10008df0:	d8802304 	addi	r2,sp,140
10008df4:	14c5c83a 	sub	r2,r2,r19
10008df8:	d8c02344 	addi	r3,sp,141
10008dfc:	1885883a 	add	r2,r3,r2
10008e00:	003f7006 	br	10008bc4 <__alt_data_end+0xf8008bc4>
10008e04:	0005883a 	mov	r2,zero
10008e08:	003f0f06 	br	10008a48 <__alt_data_end+0xf8008a48>
10008e0c:	d8c03217 	ldw	r3,200(sp)
10008e10:	18c00044 	addi	r3,r3,1
10008e14:	d8c02b15 	stw	r3,172(sp)
10008e18:	1805883a 	mov	r2,r3
10008e1c:	183fb20e 	bge	r3,zero,10008ce8 <__alt_data_end+0xf8008ce8>
10008e20:	0005883a 	mov	r2,zero
10008e24:	003fb006 	br	10008ce8 <__alt_data_end+0xf8008ce8>
10008e28:	d9003617 	ldw	r4,216(sp)
10008e2c:	000d883a 	mov	r6,zero
10008e30:	000f883a 	mov	r7,zero
10008e34:	980b883a 	mov	r5,r19
10008e38:	d8c03c15 	stw	r3,240(sp)
10008e3c:	da003d15 	stw	r8,244(sp)
10008e40:	001223c0 	call	1001223c <__eqdf2>
10008e44:	d8c03c17 	ldw	r3,240(sp)
10008e48:	da003d17 	ldw	r8,244(sp)
10008e4c:	103f9826 	beq	r2,zero,10008cb0 <__alt_data_end+0xf8008cb0>
10008e50:	00800044 	movi	r2,1
10008e54:	10c7c83a 	sub	r3,r2,r3
10008e58:	d8c02615 	stw	r3,152(sp)
10008e5c:	003f9506 	br	10008cb4 <__alt_data_end+0xf8008cb4>
10008e60:	d9002a17 	ldw	r4,168(sp)
10008e64:	d8c03217 	ldw	r3,200(sp)
10008e68:	20800044 	addi	r2,r4,1
10008e6c:	1885883a 	add	r2,r3,r2
10008e70:	d8802b15 	stw	r2,172(sp)
10008e74:	103dbf0e 	bge	r2,zero,10008574 <__alt_data_end+0xf8008574>
10008e78:	0005883a 	mov	r2,zero
10008e7c:	003dbd06 	br	10008574 <__alt_data_end+0xf8008574>
10008e80:	2000201e 	bne	r4,zero,10008f04 <___vfprintf_internal_r+0x222c>
10008e84:	9480004c 	andi	r18,r18,1
10008e88:	90001e1e 	bne	r18,zero,10008f04 <___vfprintf_internal_r+0x222c>
10008e8c:	00800044 	movi	r2,1
10008e90:	d8802b15 	stw	r2,172(sp)
10008e94:	003db706 	br	10008574 <__alt_data_end+0xf8008574>
10008e98:	00800b44 	movi	r2,45
10008e9c:	05adc83a 	sub	r22,zero,r22
10008ea0:	d8802305 	stb	r2,140(sp)
10008ea4:	003f3f06 	br	10008ba4 <__alt_data_end+0xf8008ba4>
10008ea8:	0005883a 	mov	r2,zero
10008eac:	003f5206 	br	10008bf8 <__alt_data_end+0xf8008bf8>
10008eb0:	90a4703a 	and	r18,r18,r2
10008eb4:	903f4e26 	beq	r18,zero,10008bf0 <__alt_data_end+0xf8008bf0>
10008eb8:	003f4a06 	br	10008be4 <__alt_data_end+0xf8008be4>
10008ebc:	00800084 	movi	r2,2
10008ec0:	10c5c83a 	sub	r2,r2,r3
10008ec4:	003f8406 	br	10008cd8 <__alt_data_end+0xf8008cd8>
10008ec8:	d9402e17 	ldw	r5,184(sp)
10008ecc:	d9002e17 	ldw	r4,184(sp)
10008ed0:	ac400043 	ldbu	r17,1(r21)
10008ed4:	29400017 	ldw	r5,0(r5)
10008ed8:	20800104 	addi	r2,r4,4
10008edc:	d8802e15 	stw	r2,184(sp)
10008ee0:	d9402a15 	stw	r5,168(sp)
10008ee4:	182b883a 	mov	r21,r3
10008ee8:	283e7b0e 	bge	r5,zero,100088d8 <__alt_data_end+0xf80088d8>
10008eec:	8c403fcc 	andi	r17,r17,255
10008ef0:	017fffc4 	movi	r5,-1
10008ef4:	8c40201c 	xori	r17,r17,128
10008ef8:	d9402a15 	stw	r5,168(sp)
10008efc:	8c7fe004 	addi	r17,r17,-128
10008f00:	0037d706 	br	10006e60 <__alt_data_end+0xf8006e60>
10008f04:	d8c02a17 	ldw	r3,168(sp)
10008f08:	18c00084 	addi	r3,r3,2
10008f0c:	d8c02b15 	stw	r3,172(sp)
10008f10:	1805883a 	mov	r2,r3
10008f14:	183d970e 	bge	r3,zero,10008574 <__alt_data_end+0xf8008574>
10008f18:	003fd706 	br	10008e78 <__alt_data_end+0xf8008e78>
10008f1c:	0005883a 	mov	r2,zero
10008f20:	003f8f06 	br	10008d60 <__alt_data_end+0xf8008d60>
10008f24:	9080004c 	andi	r2,r18,1
10008f28:	103f821e 	bne	r2,zero,10008d34 <__alt_data_end+0xf8008d34>
10008f2c:	d8802117 	ldw	r2,132(sp)
10008f30:	1405c83a 	sub	r2,r2,r16
10008f34:	d8803315 	stw	r2,204(sp)
10008f38:	b47ef426 	beq	r22,r17,10008b0c <__alt_data_end+0xf8008b0c>
10008f3c:	dd802617 	ldw	r22,152(sp)
10008f40:	003f1206 	br	10008b8c <__alt_data_end+0xf8008b8c>
10008f44:	d8c02b03 	ldbu	r3,172(sp)
10008f48:	d8c02785 	stb	r3,158(sp)
10008f4c:	0038df06 	br	100072cc <__alt_data_end+0xf80072cc>
10008f50:	d8c02b03 	ldbu	r3,172(sp)
10008f54:	d8c02785 	stb	r3,158(sp)
10008f58:	0038aa06 	br	10007204 <__alt_data_end+0xf8007204>
10008f5c:	d8c02b03 	ldbu	r3,172(sp)
10008f60:	d8c02785 	stb	r3,158(sp)
10008f64:	003a4306 	br	10007874 <__alt_data_end+0xf8007874>
10008f68:	d8c02b03 	ldbu	r3,172(sp)
10008f6c:	d8c02785 	stb	r3,158(sp)
10008f70:	003af506 	br	10007b48 <__alt_data_end+0xf8007b48>
10008f74:	0005883a 	mov	r2,zero
10008f78:	003d7b06 	br	10008568 <__alt_data_end+0xf8008568>
10008f7c:	d8802344 	addi	r2,sp,141
10008f80:	003f1006 	br	10008bc4 <__alt_data_end+0xf8008bc4>
10008f84:	d8c02b03 	ldbu	r3,172(sp)
10008f88:	d8c02785 	stb	r3,158(sp)
10008f8c:	0038fd06 	br	10007384 <__alt_data_end+0xf8007384>
10008f90:	d8c02b03 	ldbu	r3,172(sp)
10008f94:	d8c02785 	stb	r3,158(sp)
10008f98:	003a9706 	br	100079f8 <__alt_data_end+0xf80079f8>
10008f9c:	d8c02b03 	ldbu	r3,172(sp)
10008fa0:	d8c02785 	stb	r3,158(sp)
10008fa4:	003a1806 	br	10007808 <__alt_data_end+0xf8007808>
10008fa8:	d8c02b03 	ldbu	r3,172(sp)
10008fac:	d8c02785 	stb	r3,158(sp)
10008fb0:	003abe06 	br	10007aac <__alt_data_end+0xf8007aac>

10008fb4 <__vfprintf_internal>:
10008fb4:	008400b4 	movhi	r2,4098
10008fb8:	1095f304 	addi	r2,r2,22476
10008fbc:	300f883a 	mov	r7,r6
10008fc0:	280d883a 	mov	r6,r5
10008fc4:	200b883a 	mov	r5,r4
10008fc8:	11000017 	ldw	r4,0(r2)
10008fcc:	0006cd81 	jmpi	10006cd8 <___vfprintf_internal_r>

10008fd0 <__sbprintf>:
10008fd0:	2880030b 	ldhu	r2,12(r5)
10008fd4:	2ac01917 	ldw	r11,100(r5)
10008fd8:	2a80038b 	ldhu	r10,14(r5)
10008fdc:	2a400717 	ldw	r9,28(r5)
10008fe0:	2a000917 	ldw	r8,36(r5)
10008fe4:	defee204 	addi	sp,sp,-1144
10008fe8:	00c10004 	movi	r3,1024
10008fec:	dc011a15 	stw	r16,1128(sp)
10008ff0:	10bfff4c 	andi	r2,r2,65533
10008ff4:	2821883a 	mov	r16,r5
10008ff8:	d8cb883a 	add	r5,sp,r3
10008ffc:	dc811c15 	stw	r18,1136(sp)
10009000:	dc411b15 	stw	r17,1132(sp)
10009004:	dfc11d15 	stw	ra,1140(sp)
10009008:	2025883a 	mov	r18,r4
1000900c:	d881030d 	sth	r2,1036(sp)
10009010:	dac11915 	stw	r11,1124(sp)
10009014:	da81038d 	sth	r10,1038(sp)
10009018:	da410715 	stw	r9,1052(sp)
1000901c:	da010915 	stw	r8,1060(sp)
10009020:	dec10015 	stw	sp,1024(sp)
10009024:	dec10415 	stw	sp,1040(sp)
10009028:	d8c10215 	stw	r3,1032(sp)
1000902c:	d8c10515 	stw	r3,1044(sp)
10009030:	d8010615 	stw	zero,1048(sp)
10009034:	0006cd80 	call	10006cd8 <___vfprintf_internal_r>
10009038:	1023883a 	mov	r17,r2
1000903c:	10000416 	blt	r2,zero,10009050 <__sbprintf+0x80>
10009040:	d9410004 	addi	r5,sp,1024
10009044:	9009883a 	mov	r4,r18
10009048:	000acac0 	call	1000acac <_fflush_r>
1000904c:	10000d1e 	bne	r2,zero,10009084 <__sbprintf+0xb4>
10009050:	d881030b 	ldhu	r2,1036(sp)
10009054:	1080100c 	andi	r2,r2,64
10009058:	10000326 	beq	r2,zero,10009068 <__sbprintf+0x98>
1000905c:	8080030b 	ldhu	r2,12(r16)
10009060:	10801014 	ori	r2,r2,64
10009064:	8080030d 	sth	r2,12(r16)
10009068:	8805883a 	mov	r2,r17
1000906c:	dfc11d17 	ldw	ra,1140(sp)
10009070:	dc811c17 	ldw	r18,1136(sp)
10009074:	dc411b17 	ldw	r17,1132(sp)
10009078:	dc011a17 	ldw	r16,1128(sp)
1000907c:	dec11e04 	addi	sp,sp,1144
10009080:	f800283a 	ret
10009084:	047fffc4 	movi	r17,-1
10009088:	003ff106 	br	10009050 <__alt_data_end+0xf8009050>

1000908c <__swsetup_r>:
1000908c:	008400b4 	movhi	r2,4098
10009090:	defffd04 	addi	sp,sp,-12
10009094:	1095f304 	addi	r2,r2,22476
10009098:	dc400115 	stw	r17,4(sp)
1000909c:	2023883a 	mov	r17,r4
100090a0:	11000017 	ldw	r4,0(r2)
100090a4:	dc000015 	stw	r16,0(sp)
100090a8:	dfc00215 	stw	ra,8(sp)
100090ac:	2821883a 	mov	r16,r5
100090b0:	20000226 	beq	r4,zero,100090bc <__swsetup_r+0x30>
100090b4:	20800e17 	ldw	r2,56(r4)
100090b8:	10003126 	beq	r2,zero,10009180 <__swsetup_r+0xf4>
100090bc:	8080030b 	ldhu	r2,12(r16)
100090c0:	10c0020c 	andi	r3,r2,8
100090c4:	1009883a 	mov	r4,r2
100090c8:	18000f26 	beq	r3,zero,10009108 <__swsetup_r+0x7c>
100090cc:	80c00417 	ldw	r3,16(r16)
100090d0:	18001526 	beq	r3,zero,10009128 <__swsetup_r+0x9c>
100090d4:	1100004c 	andi	r4,r2,1
100090d8:	20001c1e 	bne	r4,zero,1000914c <__swsetup_r+0xc0>
100090dc:	1080008c 	andi	r2,r2,2
100090e0:	1000291e 	bne	r2,zero,10009188 <__swsetup_r+0xfc>
100090e4:	80800517 	ldw	r2,20(r16)
100090e8:	80800215 	stw	r2,8(r16)
100090ec:	18001c26 	beq	r3,zero,10009160 <__swsetup_r+0xd4>
100090f0:	0005883a 	mov	r2,zero
100090f4:	dfc00217 	ldw	ra,8(sp)
100090f8:	dc400117 	ldw	r17,4(sp)
100090fc:	dc000017 	ldw	r16,0(sp)
10009100:	dec00304 	addi	sp,sp,12
10009104:	f800283a 	ret
10009108:	2080040c 	andi	r2,r4,16
1000910c:	10002e26 	beq	r2,zero,100091c8 <__swsetup_r+0x13c>
10009110:	2080010c 	andi	r2,r4,4
10009114:	10001e1e 	bne	r2,zero,10009190 <__swsetup_r+0x104>
10009118:	80c00417 	ldw	r3,16(r16)
1000911c:	20800214 	ori	r2,r4,8
10009120:	8080030d 	sth	r2,12(r16)
10009124:	183feb1e 	bne	r3,zero,100090d4 <__alt_data_end+0xf80090d4>
10009128:	1100a00c 	andi	r4,r2,640
1000912c:	01408004 	movi	r5,512
10009130:	217fe826 	beq	r4,r5,100090d4 <__alt_data_end+0xf80090d4>
10009134:	800b883a 	mov	r5,r16
10009138:	8809883a 	mov	r4,r17
1000913c:	000bc480 	call	1000bc48 <__smakebuf_r>
10009140:	8080030b 	ldhu	r2,12(r16)
10009144:	80c00417 	ldw	r3,16(r16)
10009148:	003fe206 	br	100090d4 <__alt_data_end+0xf80090d4>
1000914c:	80800517 	ldw	r2,20(r16)
10009150:	80000215 	stw	zero,8(r16)
10009154:	0085c83a 	sub	r2,zero,r2
10009158:	80800615 	stw	r2,24(r16)
1000915c:	183fe41e 	bne	r3,zero,100090f0 <__alt_data_end+0xf80090f0>
10009160:	80c0030b 	ldhu	r3,12(r16)
10009164:	0005883a 	mov	r2,zero
10009168:	1900200c 	andi	r4,r3,128
1000916c:	203fe126 	beq	r4,zero,100090f4 <__alt_data_end+0xf80090f4>
10009170:	18c01014 	ori	r3,r3,64
10009174:	80c0030d 	sth	r3,12(r16)
10009178:	00bfffc4 	movi	r2,-1
1000917c:	003fdd06 	br	100090f4 <__alt_data_end+0xf80090f4>
10009180:	000b0980 	call	1000b098 <__sinit>
10009184:	003fcd06 	br	100090bc <__alt_data_end+0xf80090bc>
10009188:	0005883a 	mov	r2,zero
1000918c:	003fd606 	br	100090e8 <__alt_data_end+0xf80090e8>
10009190:	81400c17 	ldw	r5,48(r16)
10009194:	28000626 	beq	r5,zero,100091b0 <__swsetup_r+0x124>
10009198:	80801004 	addi	r2,r16,64
1000919c:	28800326 	beq	r5,r2,100091ac <__swsetup_r+0x120>
100091a0:	8809883a 	mov	r4,r17
100091a4:	000b20c0 	call	1000b20c <_free_r>
100091a8:	8100030b 	ldhu	r4,12(r16)
100091ac:	80000c15 	stw	zero,48(r16)
100091b0:	80c00417 	ldw	r3,16(r16)
100091b4:	00bff6c4 	movi	r2,-37
100091b8:	1108703a 	and	r4,r2,r4
100091bc:	80000115 	stw	zero,4(r16)
100091c0:	80c00015 	stw	r3,0(r16)
100091c4:	003fd506 	br	1000911c <__alt_data_end+0xf800911c>
100091c8:	00800244 	movi	r2,9
100091cc:	88800015 	stw	r2,0(r17)
100091d0:	20801014 	ori	r2,r4,64
100091d4:	8080030d 	sth	r2,12(r16)
100091d8:	00bfffc4 	movi	r2,-1
100091dc:	003fc506 	br	100090f4 <__alt_data_end+0xf80090f4>

100091e0 <quorem>:
100091e0:	defff204 	addi	sp,sp,-56
100091e4:	ddc00b15 	stw	r23,44(sp)
100091e8:	20800417 	ldw	r2,16(r4)
100091ec:	2dc00417 	ldw	r23,16(r5)
100091f0:	dfc00d15 	stw	ra,52(sp)
100091f4:	df000c15 	stw	fp,48(sp)
100091f8:	dd800a15 	stw	r22,40(sp)
100091fc:	dd400915 	stw	r21,36(sp)
10009200:	dd000815 	stw	r20,32(sp)
10009204:	dcc00715 	stw	r19,28(sp)
10009208:	dc800615 	stw	r18,24(sp)
1000920c:	dc400515 	stw	r17,20(sp)
10009210:	dc000415 	stw	r16,16(sp)
10009214:	15c07a16 	blt	r2,r23,10009400 <quorem+0x220>
10009218:	bdffffc4 	addi	r23,r23,-1
1000921c:	bde9883a 	add	r20,r23,r23
10009220:	28c00504 	addi	r3,r5,20
10009224:	a529883a 	add	r20,r20,r20
10009228:	1d39883a 	add	fp,r3,r20
1000922c:	24c00504 	addi	r19,r4,20
10009230:	d9400215 	stw	r5,8(sp)
10009234:	9d29883a 	add	r20,r19,r20
10009238:	e1400017 	ldw	r5,0(fp)
1000923c:	d9000015 	stw	r4,0(sp)
10009240:	a1000017 	ldw	r4,0(r20)
10009244:	29400044 	addi	r5,r5,1
10009248:	d8c00115 	stw	r3,4(sp)
1000924c:	dd000315 	stw	r20,12(sp)
10009250:	0006a1c0 	call	10006a1c <__udivsi3>
10009254:	1025883a 	mov	r18,r2
10009258:	10003026 	beq	r2,zero,1000931c <quorem+0x13c>
1000925c:	dc400117 	ldw	r17,4(sp)
10009260:	9829883a 	mov	r20,r19
10009264:	002d883a 	mov	r22,zero
10009268:	0021883a 	mov	r16,zero
1000926c:	8d400017 	ldw	r21,0(r17)
10009270:	900b883a 	mov	r5,r18
10009274:	8c400104 	addi	r17,r17,4
10009278:	a93fffcc 	andi	r4,r21,65535
1000927c:	0006ad80 	call	10006ad8 <__mulsi3>
10009280:	a808d43a 	srli	r4,r21,16
10009284:	900b883a 	mov	r5,r18
10009288:	15ad883a 	add	r22,r2,r22
1000928c:	0006ad80 	call	10006ad8 <__mulsi3>
10009290:	a1000017 	ldw	r4,0(r20)
10009294:	b00cd43a 	srli	r6,r22,16
10009298:	b0ffffcc 	andi	r3,r22,65535
1000929c:	217fffcc 	andi	r5,r4,65535
100092a0:	2c21883a 	add	r16,r5,r16
100092a4:	80c7c83a 	sub	r3,r16,r3
100092a8:	2008d43a 	srli	r4,r4,16
100092ac:	1185883a 	add	r2,r2,r6
100092b0:	1821d43a 	srai	r16,r3,16
100092b4:	117fffcc 	andi	r5,r2,65535
100092b8:	2149c83a 	sub	r4,r4,r5
100092bc:	2421883a 	add	r16,r4,r16
100092c0:	8008943a 	slli	r4,r16,16
100092c4:	18ffffcc 	andi	r3,r3,65535
100092c8:	102cd43a 	srli	r22,r2,16
100092cc:	20c8b03a 	or	r4,r4,r3
100092d0:	a1000015 	stw	r4,0(r20)
100092d4:	8021d43a 	srai	r16,r16,16
100092d8:	a5000104 	addi	r20,r20,4
100092dc:	e47fe32e 	bgeu	fp,r17,1000926c <__alt_data_end+0xf800926c>
100092e0:	d8c00317 	ldw	r3,12(sp)
100092e4:	18800017 	ldw	r2,0(r3)
100092e8:	10000c1e 	bne	r2,zero,1000931c <quorem+0x13c>
100092ec:	18bfff04 	addi	r2,r3,-4
100092f0:	9880082e 	bgeu	r19,r2,10009314 <quorem+0x134>
100092f4:	18ffff17 	ldw	r3,-4(r3)
100092f8:	18000326 	beq	r3,zero,10009308 <quorem+0x128>
100092fc:	00000506 	br	10009314 <quorem+0x134>
10009300:	10c00017 	ldw	r3,0(r2)
10009304:	1800031e 	bne	r3,zero,10009314 <quorem+0x134>
10009308:	10bfff04 	addi	r2,r2,-4
1000930c:	bdffffc4 	addi	r23,r23,-1
10009310:	98bffb36 	bltu	r19,r2,10009300 <__alt_data_end+0xf8009300>
10009314:	d8c00017 	ldw	r3,0(sp)
10009318:	1dc00415 	stw	r23,16(r3)
1000931c:	d9400217 	ldw	r5,8(sp)
10009320:	d9000017 	ldw	r4,0(sp)
10009324:	000d4440 	call	1000d444 <__mcmp>
10009328:	10002816 	blt	r2,zero,100093cc <quorem+0x1ec>
1000932c:	dc400117 	ldw	r17,4(sp)
10009330:	94800044 	addi	r18,r18,1
10009334:	980d883a 	mov	r6,r19
10009338:	0007883a 	mov	r3,zero
1000933c:	31000017 	ldw	r4,0(r6)
10009340:	89400017 	ldw	r5,0(r17)
10009344:	31800104 	addi	r6,r6,4
10009348:	20bfffcc 	andi	r2,r4,65535
1000934c:	10c7883a 	add	r3,r2,r3
10009350:	28bfffcc 	andi	r2,r5,65535
10009354:	1885c83a 	sub	r2,r3,r2
10009358:	280ad43a 	srli	r5,r5,16
1000935c:	2008d43a 	srli	r4,r4,16
10009360:	1007d43a 	srai	r3,r2,16
10009364:	10bfffcc 	andi	r2,r2,65535
10009368:	2149c83a 	sub	r4,r4,r5
1000936c:	20c9883a 	add	r4,r4,r3
10009370:	200a943a 	slli	r5,r4,16
10009374:	8c400104 	addi	r17,r17,4
10009378:	2007d43a 	srai	r3,r4,16
1000937c:	2884b03a 	or	r2,r5,r2
10009380:	30bfff15 	stw	r2,-4(r6)
10009384:	e47fed2e 	bgeu	fp,r17,1000933c <__alt_data_end+0xf800933c>
10009388:	bdc5883a 	add	r2,r23,r23
1000938c:	1085883a 	add	r2,r2,r2
10009390:	9887883a 	add	r3,r19,r2
10009394:	18800017 	ldw	r2,0(r3)
10009398:	10000c1e 	bne	r2,zero,100093cc <quorem+0x1ec>
1000939c:	18bfff04 	addi	r2,r3,-4
100093a0:	9880082e 	bgeu	r19,r2,100093c4 <quorem+0x1e4>
100093a4:	18ffff17 	ldw	r3,-4(r3)
100093a8:	18000326 	beq	r3,zero,100093b8 <quorem+0x1d8>
100093ac:	00000506 	br	100093c4 <quorem+0x1e4>
100093b0:	10c00017 	ldw	r3,0(r2)
100093b4:	1800031e 	bne	r3,zero,100093c4 <quorem+0x1e4>
100093b8:	10bfff04 	addi	r2,r2,-4
100093bc:	bdffffc4 	addi	r23,r23,-1
100093c0:	98bffb36 	bltu	r19,r2,100093b0 <__alt_data_end+0xf80093b0>
100093c4:	d8c00017 	ldw	r3,0(sp)
100093c8:	1dc00415 	stw	r23,16(r3)
100093cc:	9005883a 	mov	r2,r18
100093d0:	dfc00d17 	ldw	ra,52(sp)
100093d4:	df000c17 	ldw	fp,48(sp)
100093d8:	ddc00b17 	ldw	r23,44(sp)
100093dc:	dd800a17 	ldw	r22,40(sp)
100093e0:	dd400917 	ldw	r21,36(sp)
100093e4:	dd000817 	ldw	r20,32(sp)
100093e8:	dcc00717 	ldw	r19,28(sp)
100093ec:	dc800617 	ldw	r18,24(sp)
100093f0:	dc400517 	ldw	r17,20(sp)
100093f4:	dc000417 	ldw	r16,16(sp)
100093f8:	dec00e04 	addi	sp,sp,56
100093fc:	f800283a 	ret
10009400:	0005883a 	mov	r2,zero
10009404:	003ff206 	br	100093d0 <__alt_data_end+0xf80093d0>

10009408 <_dtoa_r>:
10009408:	20801017 	ldw	r2,64(r4)
1000940c:	deffde04 	addi	sp,sp,-136
10009410:	df002015 	stw	fp,128(sp)
10009414:	dcc01b15 	stw	r19,108(sp)
10009418:	dc801a15 	stw	r18,104(sp)
1000941c:	dc401915 	stw	r17,100(sp)
10009420:	dc001815 	stw	r16,96(sp)
10009424:	dfc02115 	stw	ra,132(sp)
10009428:	ddc01f15 	stw	r23,124(sp)
1000942c:	dd801e15 	stw	r22,120(sp)
10009430:	dd401d15 	stw	r21,116(sp)
10009434:	dd001c15 	stw	r20,112(sp)
10009438:	d9c00315 	stw	r7,12(sp)
1000943c:	2039883a 	mov	fp,r4
10009440:	3023883a 	mov	r17,r6
10009444:	2825883a 	mov	r18,r5
10009448:	dc002417 	ldw	r16,144(sp)
1000944c:	3027883a 	mov	r19,r6
10009450:	10000826 	beq	r2,zero,10009474 <_dtoa_r+0x6c>
10009454:	21801117 	ldw	r6,68(r4)
10009458:	00c00044 	movi	r3,1
1000945c:	100b883a 	mov	r5,r2
10009460:	1986983a 	sll	r3,r3,r6
10009464:	11800115 	stw	r6,4(r2)
10009468:	10c00215 	stw	r3,8(r2)
1000946c:	000cb680 	call	1000cb68 <_Bfree>
10009470:	e0001015 	stw	zero,64(fp)
10009474:	88002e16 	blt	r17,zero,10009530 <_dtoa_r+0x128>
10009478:	80000015 	stw	zero,0(r16)
1000947c:	889ffc2c 	andhi	r2,r17,32752
10009480:	00dffc34 	movhi	r3,32752
10009484:	10c01c26 	beq	r2,r3,100094f8 <_dtoa_r+0xf0>
10009488:	000d883a 	mov	r6,zero
1000948c:	000f883a 	mov	r7,zero
10009490:	9009883a 	mov	r4,r18
10009494:	980b883a 	mov	r5,r19
10009498:	001223c0 	call	1001223c <__eqdf2>
1000949c:	10002b1e 	bne	r2,zero,1000954c <_dtoa_r+0x144>
100094a0:	d9c02317 	ldw	r7,140(sp)
100094a4:	00800044 	movi	r2,1
100094a8:	38800015 	stw	r2,0(r7)
100094ac:	d8802517 	ldw	r2,148(sp)
100094b0:	10019e26 	beq	r2,zero,10009b2c <_dtoa_r+0x724>
100094b4:	d8c02517 	ldw	r3,148(sp)
100094b8:	00840074 	movhi	r2,4097
100094bc:	109a4244 	addi	r2,r2,26889
100094c0:	18800015 	stw	r2,0(r3)
100094c4:	10bfffc4 	addi	r2,r2,-1
100094c8:	dfc02117 	ldw	ra,132(sp)
100094cc:	df002017 	ldw	fp,128(sp)
100094d0:	ddc01f17 	ldw	r23,124(sp)
100094d4:	dd801e17 	ldw	r22,120(sp)
100094d8:	dd401d17 	ldw	r21,116(sp)
100094dc:	dd001c17 	ldw	r20,112(sp)
100094e0:	dcc01b17 	ldw	r19,108(sp)
100094e4:	dc801a17 	ldw	r18,104(sp)
100094e8:	dc401917 	ldw	r17,100(sp)
100094ec:	dc001817 	ldw	r16,96(sp)
100094f0:	dec02204 	addi	sp,sp,136
100094f4:	f800283a 	ret
100094f8:	d8c02317 	ldw	r3,140(sp)
100094fc:	0089c3c4 	movi	r2,9999
10009500:	18800015 	stw	r2,0(r3)
10009504:	90017726 	beq	r18,zero,10009ae4 <_dtoa_r+0x6dc>
10009508:	00840074 	movhi	r2,4097
1000950c:	109a4e04 	addi	r2,r2,26936
10009510:	d9002517 	ldw	r4,148(sp)
10009514:	203fec26 	beq	r4,zero,100094c8 <__alt_data_end+0xf80094c8>
10009518:	10c000c7 	ldb	r3,3(r2)
1000951c:	1801781e 	bne	r3,zero,10009b00 <_dtoa_r+0x6f8>
10009520:	10c000c4 	addi	r3,r2,3
10009524:	d9802517 	ldw	r6,148(sp)
10009528:	30c00015 	stw	r3,0(r6)
1000952c:	003fe606 	br	100094c8 <__alt_data_end+0xf80094c8>
10009530:	04e00034 	movhi	r19,32768
10009534:	9cffffc4 	addi	r19,r19,-1
10009538:	00800044 	movi	r2,1
1000953c:	8ce6703a 	and	r19,r17,r19
10009540:	80800015 	stw	r2,0(r16)
10009544:	9823883a 	mov	r17,r19
10009548:	003fcc06 	br	1000947c <__alt_data_end+0xf800947c>
1000954c:	d8800204 	addi	r2,sp,8
10009550:	d8800015 	stw	r2,0(sp)
10009554:	d9c00104 	addi	r7,sp,4
10009558:	900b883a 	mov	r5,r18
1000955c:	980d883a 	mov	r6,r19
10009560:	e009883a 	mov	r4,fp
10009564:	8820d53a 	srli	r16,r17,20
10009568:	000d8100 	call	1000d810 <__d2b>
1000956c:	d8800915 	stw	r2,36(sp)
10009570:	8001651e 	bne	r16,zero,10009b08 <_dtoa_r+0x700>
10009574:	dd800217 	ldw	r22,8(sp)
10009578:	dc000117 	ldw	r16,4(sp)
1000957c:	00800804 	movi	r2,32
10009580:	b421883a 	add	r16,r22,r16
10009584:	80c10c84 	addi	r3,r16,1074
10009588:	10c2d10e 	bge	r2,r3,1000a0d0 <_dtoa_r+0xcc8>
1000958c:	00801004 	movi	r2,64
10009590:	81010484 	addi	r4,r16,1042
10009594:	10c7c83a 	sub	r3,r2,r3
10009598:	9108d83a 	srl	r4,r18,r4
1000959c:	88e2983a 	sll	r17,r17,r3
100095a0:	2448b03a 	or	r4,r4,r17
100095a4:	00137580 	call	10013758 <__floatunsidf>
100095a8:	017f8434 	movhi	r5,65040
100095ac:	01800044 	movi	r6,1
100095b0:	1009883a 	mov	r4,r2
100095b4:	194b883a 	add	r5,r3,r5
100095b8:	843fffc4 	addi	r16,r16,-1
100095bc:	d9801115 	stw	r6,68(sp)
100095c0:	000d883a 	mov	r6,zero
100095c4:	01cffe34 	movhi	r7,16376
100095c8:	0012d000 	call	10012d00 <__subdf3>
100095cc:	0198dbf4 	movhi	r6,25455
100095d0:	01cff4f4 	movhi	r7,16339
100095d4:	3190d844 	addi	r6,r6,17249
100095d8:	39e1e9c4 	addi	r7,r7,-30809
100095dc:	1009883a 	mov	r4,r2
100095e0:	180b883a 	mov	r5,r3
100095e4:	00124940 	call	10012494 <__muldf3>
100095e8:	01a2d874 	movhi	r6,35681
100095ec:	01cff1f4 	movhi	r7,16327
100095f0:	31b22cc4 	addi	r6,r6,-14157
100095f4:	39e28a04 	addi	r7,r7,-30168
100095f8:	180b883a 	mov	r5,r3
100095fc:	1009883a 	mov	r4,r2
10009600:	0010fc00 	call	10010fc0 <__adddf3>
10009604:	8009883a 	mov	r4,r16
10009608:	1029883a 	mov	r20,r2
1000960c:	1823883a 	mov	r17,r3
10009610:	001367c0 	call	1001367c <__floatsidf>
10009614:	019427f4 	movhi	r6,20639
10009618:	01cff4f4 	movhi	r7,16339
1000961c:	319e7ec4 	addi	r6,r6,31227
10009620:	39d104c4 	addi	r7,r7,17427
10009624:	1009883a 	mov	r4,r2
10009628:	180b883a 	mov	r5,r3
1000962c:	00124940 	call	10012494 <__muldf3>
10009630:	100d883a 	mov	r6,r2
10009634:	180f883a 	mov	r7,r3
10009638:	a009883a 	mov	r4,r20
1000963c:	880b883a 	mov	r5,r17
10009640:	0010fc00 	call	10010fc0 <__adddf3>
10009644:	1009883a 	mov	r4,r2
10009648:	180b883a 	mov	r5,r3
1000964c:	1029883a 	mov	r20,r2
10009650:	1823883a 	mov	r17,r3
10009654:	00135fc0 	call	100135fc <__fixdfsi>
10009658:	000d883a 	mov	r6,zero
1000965c:	000f883a 	mov	r7,zero
10009660:	a009883a 	mov	r4,r20
10009664:	880b883a 	mov	r5,r17
10009668:	d8800515 	stw	r2,20(sp)
1000966c:	00123a00 	call	100123a0 <__ledf2>
10009670:	10028716 	blt	r2,zero,1000a090 <_dtoa_r+0xc88>
10009674:	d8c00517 	ldw	r3,20(sp)
10009678:	00800584 	movi	r2,22
1000967c:	10c27536 	bltu	r2,r3,1000a054 <_dtoa_r+0xc4c>
10009680:	180490fa 	slli	r2,r3,3
10009684:	00c40074 	movhi	r3,4097
10009688:	18da6a04 	addi	r3,r3,27048
1000968c:	1885883a 	add	r2,r3,r2
10009690:	11000017 	ldw	r4,0(r2)
10009694:	11400117 	ldw	r5,4(r2)
10009698:	900d883a 	mov	r6,r18
1000969c:	980f883a 	mov	r7,r19
100096a0:	00122c40 	call	100122c4 <__gedf2>
100096a4:	00828d0e 	bge	zero,r2,1000a0dc <_dtoa_r+0xcd4>
100096a8:	d9000517 	ldw	r4,20(sp)
100096ac:	d8000e15 	stw	zero,56(sp)
100096b0:	213fffc4 	addi	r4,r4,-1
100096b4:	d9000515 	stw	r4,20(sp)
100096b8:	b42dc83a 	sub	r22,r22,r16
100096bc:	b5bfffc4 	addi	r22,r22,-1
100096c0:	b0026f16 	blt	r22,zero,1000a080 <_dtoa_r+0xc78>
100096c4:	d8000815 	stw	zero,32(sp)
100096c8:	d9c00517 	ldw	r7,20(sp)
100096cc:	38026416 	blt	r7,zero,1000a060 <_dtoa_r+0xc58>
100096d0:	b1ed883a 	add	r22,r22,r7
100096d4:	d9c00d15 	stw	r7,52(sp)
100096d8:	d8000a15 	stw	zero,40(sp)
100096dc:	d9800317 	ldw	r6,12(sp)
100096e0:	00800244 	movi	r2,9
100096e4:	11811436 	bltu	r2,r6,10009b38 <_dtoa_r+0x730>
100096e8:	00800144 	movi	r2,5
100096ec:	1184e10e 	bge	r2,r6,1000aa74 <_dtoa_r+0x166c>
100096f0:	31bfff04 	addi	r6,r6,-4
100096f4:	d9800315 	stw	r6,12(sp)
100096f8:	0023883a 	mov	r17,zero
100096fc:	d9800317 	ldw	r6,12(sp)
10009700:	008000c4 	movi	r2,3
10009704:	30836726 	beq	r6,r2,1000a4a4 <_dtoa_r+0x109c>
10009708:	1183410e 	bge	r2,r6,1000a410 <_dtoa_r+0x1008>
1000970c:	d9c00317 	ldw	r7,12(sp)
10009710:	00800104 	movi	r2,4
10009714:	38827c26 	beq	r7,r2,1000a108 <_dtoa_r+0xd00>
10009718:	00800144 	movi	r2,5
1000971c:	3884c41e 	bne	r7,r2,1000aa30 <_dtoa_r+0x1628>
10009720:	00800044 	movi	r2,1
10009724:	d8800b15 	stw	r2,44(sp)
10009728:	d8c00517 	ldw	r3,20(sp)
1000972c:	d9002217 	ldw	r4,136(sp)
10009730:	1907883a 	add	r3,r3,r4
10009734:	19800044 	addi	r6,r3,1
10009738:	d8c00c15 	stw	r3,48(sp)
1000973c:	d9800615 	stw	r6,24(sp)
10009740:	0183a40e 	bge	zero,r6,1000a5d4 <_dtoa_r+0x11cc>
10009744:	d9800617 	ldw	r6,24(sp)
10009748:	3021883a 	mov	r16,r6
1000974c:	e0001115 	stw	zero,68(fp)
10009750:	008005c4 	movi	r2,23
10009754:	1184c92e 	bgeu	r2,r6,1000aa7c <_dtoa_r+0x1674>
10009758:	00c00044 	movi	r3,1
1000975c:	00800104 	movi	r2,4
10009760:	1085883a 	add	r2,r2,r2
10009764:	11000504 	addi	r4,r2,20
10009768:	180b883a 	mov	r5,r3
1000976c:	18c00044 	addi	r3,r3,1
10009770:	313ffb2e 	bgeu	r6,r4,10009760 <__alt_data_end+0xf8009760>
10009774:	e1401115 	stw	r5,68(fp)
10009778:	e009883a 	mov	r4,fp
1000977c:	000cac00 	call	1000cac0 <_Balloc>
10009780:	d8800715 	stw	r2,28(sp)
10009784:	e0801015 	stw	r2,64(fp)
10009788:	00800384 	movi	r2,14
1000978c:	1400f736 	bltu	r2,r16,10009b6c <_dtoa_r+0x764>
10009790:	8800f626 	beq	r17,zero,10009b6c <_dtoa_r+0x764>
10009794:	d9c00517 	ldw	r7,20(sp)
10009798:	01c39a0e 	bge	zero,r7,1000a604 <_dtoa_r+0x11fc>
1000979c:	388003cc 	andi	r2,r7,15
100097a0:	100490fa 	slli	r2,r2,3
100097a4:	382bd13a 	srai	r21,r7,4
100097a8:	00c40074 	movhi	r3,4097
100097ac:	18da6a04 	addi	r3,r3,27048
100097b0:	1885883a 	add	r2,r3,r2
100097b4:	a8c0040c 	andi	r3,r21,16
100097b8:	12400017 	ldw	r9,0(r2)
100097bc:	12000117 	ldw	r8,4(r2)
100097c0:	18037926 	beq	r3,zero,1000a5a8 <_dtoa_r+0x11a0>
100097c4:	00840074 	movhi	r2,4097
100097c8:	109a6004 	addi	r2,r2,27008
100097cc:	11800817 	ldw	r6,32(r2)
100097d0:	11c00917 	ldw	r7,36(r2)
100097d4:	9009883a 	mov	r4,r18
100097d8:	980b883a 	mov	r5,r19
100097dc:	da001715 	stw	r8,92(sp)
100097e0:	da401615 	stw	r9,88(sp)
100097e4:	001186c0 	call	1001186c <__divdf3>
100097e8:	da001717 	ldw	r8,92(sp)
100097ec:	da401617 	ldw	r9,88(sp)
100097f0:	ad4003cc 	andi	r21,r21,15
100097f4:	040000c4 	movi	r16,3
100097f8:	1023883a 	mov	r17,r2
100097fc:	1829883a 	mov	r20,r3
10009800:	a8001126 	beq	r21,zero,10009848 <_dtoa_r+0x440>
10009804:	05c40074 	movhi	r23,4097
10009808:	bdda6004 	addi	r23,r23,27008
1000980c:	4805883a 	mov	r2,r9
10009810:	4007883a 	mov	r3,r8
10009814:	a980004c 	andi	r6,r21,1
10009818:	1009883a 	mov	r4,r2
1000981c:	a82bd07a 	srai	r21,r21,1
10009820:	180b883a 	mov	r5,r3
10009824:	30000426 	beq	r6,zero,10009838 <_dtoa_r+0x430>
10009828:	b9800017 	ldw	r6,0(r23)
1000982c:	b9c00117 	ldw	r7,4(r23)
10009830:	84000044 	addi	r16,r16,1
10009834:	00124940 	call	10012494 <__muldf3>
10009838:	bdc00204 	addi	r23,r23,8
1000983c:	a83ff51e 	bne	r21,zero,10009814 <__alt_data_end+0xf8009814>
10009840:	1013883a 	mov	r9,r2
10009844:	1811883a 	mov	r8,r3
10009848:	480d883a 	mov	r6,r9
1000984c:	400f883a 	mov	r7,r8
10009850:	8809883a 	mov	r4,r17
10009854:	a00b883a 	mov	r5,r20
10009858:	001186c0 	call	1001186c <__divdf3>
1000985c:	d8800f15 	stw	r2,60(sp)
10009860:	d8c01015 	stw	r3,64(sp)
10009864:	d8c00e17 	ldw	r3,56(sp)
10009868:	18000626 	beq	r3,zero,10009884 <_dtoa_r+0x47c>
1000986c:	d9000f17 	ldw	r4,60(sp)
10009870:	d9401017 	ldw	r5,64(sp)
10009874:	000d883a 	mov	r6,zero
10009878:	01cffc34 	movhi	r7,16368
1000987c:	00123a00 	call	100123a0 <__ledf2>
10009880:	10040b16 	blt	r2,zero,1000a8b0 <_dtoa_r+0x14a8>
10009884:	8009883a 	mov	r4,r16
10009888:	001367c0 	call	1001367c <__floatsidf>
1000988c:	d9800f17 	ldw	r6,60(sp)
10009890:	d9c01017 	ldw	r7,64(sp)
10009894:	1009883a 	mov	r4,r2
10009898:	180b883a 	mov	r5,r3
1000989c:	00124940 	call	10012494 <__muldf3>
100098a0:	000d883a 	mov	r6,zero
100098a4:	01d00734 	movhi	r7,16412
100098a8:	1009883a 	mov	r4,r2
100098ac:	180b883a 	mov	r5,r3
100098b0:	0010fc00 	call	10010fc0 <__adddf3>
100098b4:	1021883a 	mov	r16,r2
100098b8:	d8800617 	ldw	r2,24(sp)
100098bc:	047f3034 	movhi	r17,64704
100098c0:	1c63883a 	add	r17,r3,r17
100098c4:	10031826 	beq	r2,zero,1000a528 <_dtoa_r+0x1120>
100098c8:	d8c00517 	ldw	r3,20(sp)
100098cc:	db000617 	ldw	r12,24(sp)
100098d0:	d8c01315 	stw	r3,76(sp)
100098d4:	d9000b17 	ldw	r4,44(sp)
100098d8:	20038f26 	beq	r4,zero,1000a718 <_dtoa_r+0x1310>
100098dc:	60bfffc4 	addi	r2,r12,-1
100098e0:	100490fa 	slli	r2,r2,3
100098e4:	00c40074 	movhi	r3,4097
100098e8:	18da6a04 	addi	r3,r3,27048
100098ec:	1885883a 	add	r2,r3,r2
100098f0:	11800017 	ldw	r6,0(r2)
100098f4:	11c00117 	ldw	r7,4(r2)
100098f8:	d8800717 	ldw	r2,28(sp)
100098fc:	0009883a 	mov	r4,zero
10009900:	014ff834 	movhi	r5,16352
10009904:	db001615 	stw	r12,88(sp)
10009908:	15c00044 	addi	r23,r2,1
1000990c:	001186c0 	call	1001186c <__divdf3>
10009910:	800d883a 	mov	r6,r16
10009914:	880f883a 	mov	r7,r17
10009918:	1009883a 	mov	r4,r2
1000991c:	180b883a 	mov	r5,r3
10009920:	0012d000 	call	10012d00 <__subdf3>
10009924:	d9401017 	ldw	r5,64(sp)
10009928:	d9000f17 	ldw	r4,60(sp)
1000992c:	102b883a 	mov	r21,r2
10009930:	d8c01215 	stw	r3,72(sp)
10009934:	00135fc0 	call	100135fc <__fixdfsi>
10009938:	1009883a 	mov	r4,r2
1000993c:	1029883a 	mov	r20,r2
10009940:	001367c0 	call	1001367c <__floatsidf>
10009944:	d9000f17 	ldw	r4,60(sp)
10009948:	d9401017 	ldw	r5,64(sp)
1000994c:	100d883a 	mov	r6,r2
10009950:	180f883a 	mov	r7,r3
10009954:	0012d000 	call	10012d00 <__subdf3>
10009958:	1823883a 	mov	r17,r3
1000995c:	d8c00717 	ldw	r3,28(sp)
10009960:	d9401217 	ldw	r5,72(sp)
10009964:	a2000c04 	addi	r8,r20,48
10009968:	1021883a 	mov	r16,r2
1000996c:	1a000005 	stb	r8,0(r3)
10009970:	800d883a 	mov	r6,r16
10009974:	880f883a 	mov	r7,r17
10009978:	a809883a 	mov	r4,r21
1000997c:	4029883a 	mov	r20,r8
10009980:	00122c40 	call	100122c4 <__gedf2>
10009984:	00841d16 	blt	zero,r2,1000a9fc <_dtoa_r+0x15f4>
10009988:	800d883a 	mov	r6,r16
1000998c:	880f883a 	mov	r7,r17
10009990:	0009883a 	mov	r4,zero
10009994:	014ffc34 	movhi	r5,16368
10009998:	0012d000 	call	10012d00 <__subdf3>
1000999c:	d9401217 	ldw	r5,72(sp)
100099a0:	100d883a 	mov	r6,r2
100099a4:	180f883a 	mov	r7,r3
100099a8:	a809883a 	mov	r4,r21
100099ac:	00122c40 	call	100122c4 <__gedf2>
100099b0:	db001617 	ldw	r12,88(sp)
100099b4:	00840e16 	blt	zero,r2,1000a9f0 <_dtoa_r+0x15e8>
100099b8:	00800044 	movi	r2,1
100099bc:	13006b0e 	bge	r2,r12,10009b6c <_dtoa_r+0x764>
100099c0:	d9000717 	ldw	r4,28(sp)
100099c4:	dd800f15 	stw	r22,60(sp)
100099c8:	dcc01015 	stw	r19,64(sp)
100099cc:	2319883a 	add	r12,r4,r12
100099d0:	dcc01217 	ldw	r19,72(sp)
100099d4:	602d883a 	mov	r22,r12
100099d8:	dc801215 	stw	r18,72(sp)
100099dc:	b825883a 	mov	r18,r23
100099e0:	00000906 	br	10009a08 <_dtoa_r+0x600>
100099e4:	0012d000 	call	10012d00 <__subdf3>
100099e8:	a80d883a 	mov	r6,r21
100099ec:	980f883a 	mov	r7,r19
100099f0:	1009883a 	mov	r4,r2
100099f4:	180b883a 	mov	r5,r3
100099f8:	00123a00 	call	100123a0 <__ledf2>
100099fc:	1003e816 	blt	r2,zero,1000a9a0 <_dtoa_r+0x1598>
10009a00:	b825883a 	mov	r18,r23
10009a04:	bd83e926 	beq	r23,r22,1000a9ac <_dtoa_r+0x15a4>
10009a08:	a809883a 	mov	r4,r21
10009a0c:	980b883a 	mov	r5,r19
10009a10:	000d883a 	mov	r6,zero
10009a14:	01d00934 	movhi	r7,16420
10009a18:	00124940 	call	10012494 <__muldf3>
10009a1c:	000d883a 	mov	r6,zero
10009a20:	01d00934 	movhi	r7,16420
10009a24:	8009883a 	mov	r4,r16
10009a28:	880b883a 	mov	r5,r17
10009a2c:	102b883a 	mov	r21,r2
10009a30:	1827883a 	mov	r19,r3
10009a34:	00124940 	call	10012494 <__muldf3>
10009a38:	180b883a 	mov	r5,r3
10009a3c:	1009883a 	mov	r4,r2
10009a40:	1821883a 	mov	r16,r3
10009a44:	1023883a 	mov	r17,r2
10009a48:	00135fc0 	call	100135fc <__fixdfsi>
10009a4c:	1009883a 	mov	r4,r2
10009a50:	1029883a 	mov	r20,r2
10009a54:	001367c0 	call	1001367c <__floatsidf>
10009a58:	8809883a 	mov	r4,r17
10009a5c:	800b883a 	mov	r5,r16
10009a60:	100d883a 	mov	r6,r2
10009a64:	180f883a 	mov	r7,r3
10009a68:	0012d000 	call	10012d00 <__subdf3>
10009a6c:	a5000c04 	addi	r20,r20,48
10009a70:	a80d883a 	mov	r6,r21
10009a74:	980f883a 	mov	r7,r19
10009a78:	1009883a 	mov	r4,r2
10009a7c:	180b883a 	mov	r5,r3
10009a80:	95000005 	stb	r20,0(r18)
10009a84:	1021883a 	mov	r16,r2
10009a88:	1823883a 	mov	r17,r3
10009a8c:	00123a00 	call	100123a0 <__ledf2>
10009a90:	bdc00044 	addi	r23,r23,1
10009a94:	800d883a 	mov	r6,r16
10009a98:	880f883a 	mov	r7,r17
10009a9c:	0009883a 	mov	r4,zero
10009aa0:	014ffc34 	movhi	r5,16368
10009aa4:	103fcf0e 	bge	r2,zero,100099e4 <__alt_data_end+0xf80099e4>
10009aa8:	d8c01317 	ldw	r3,76(sp)
10009aac:	d8c00515 	stw	r3,20(sp)
10009ab0:	d9400917 	ldw	r5,36(sp)
10009ab4:	e009883a 	mov	r4,fp
10009ab8:	000cb680 	call	1000cb68 <_Bfree>
10009abc:	d9000517 	ldw	r4,20(sp)
10009ac0:	d9802317 	ldw	r6,140(sp)
10009ac4:	d9c02517 	ldw	r7,148(sp)
10009ac8:	b8000005 	stb	zero,0(r23)
10009acc:	20800044 	addi	r2,r4,1
10009ad0:	30800015 	stw	r2,0(r6)
10009ad4:	3802aa26 	beq	r7,zero,1000a580 <_dtoa_r+0x1178>
10009ad8:	3dc00015 	stw	r23,0(r7)
10009adc:	d8800717 	ldw	r2,28(sp)
10009ae0:	003e7906 	br	100094c8 <__alt_data_end+0xf80094c8>
10009ae4:	00800434 	movhi	r2,16
10009ae8:	10bfffc4 	addi	r2,r2,-1
10009aec:	88a2703a 	and	r17,r17,r2
10009af0:	883e851e 	bne	r17,zero,10009508 <__alt_data_end+0xf8009508>
10009af4:	00840074 	movhi	r2,4097
10009af8:	109a4b04 	addi	r2,r2,26924
10009afc:	003e8406 	br	10009510 <__alt_data_end+0xf8009510>
10009b00:	10c00204 	addi	r3,r2,8
10009b04:	003e8706 	br	10009524 <__alt_data_end+0xf8009524>
10009b08:	01400434 	movhi	r5,16
10009b0c:	297fffc4 	addi	r5,r5,-1
10009b10:	994a703a 	and	r5,r19,r5
10009b14:	9009883a 	mov	r4,r18
10009b18:	843f0044 	addi	r16,r16,-1023
10009b1c:	294ffc34 	orhi	r5,r5,16368
10009b20:	dd800217 	ldw	r22,8(sp)
10009b24:	d8001115 	stw	zero,68(sp)
10009b28:	003ea506 	br	100095c0 <__alt_data_end+0xf80095c0>
10009b2c:	00840074 	movhi	r2,4097
10009b30:	109a4204 	addi	r2,r2,26888
10009b34:	003e6406 	br	100094c8 <__alt_data_end+0xf80094c8>
10009b38:	e0001115 	stw	zero,68(fp)
10009b3c:	000b883a 	mov	r5,zero
10009b40:	e009883a 	mov	r4,fp
10009b44:	000cac00 	call	1000cac0 <_Balloc>
10009b48:	01bfffc4 	movi	r6,-1
10009b4c:	01c00044 	movi	r7,1
10009b50:	d8800715 	stw	r2,28(sp)
10009b54:	d9800c15 	stw	r6,48(sp)
10009b58:	e0801015 	stw	r2,64(fp)
10009b5c:	d8000315 	stw	zero,12(sp)
10009b60:	d9c00b15 	stw	r7,44(sp)
10009b64:	d9800615 	stw	r6,24(sp)
10009b68:	d8002215 	stw	zero,136(sp)
10009b6c:	d8800117 	ldw	r2,4(sp)
10009b70:	10008916 	blt	r2,zero,10009d98 <_dtoa_r+0x990>
10009b74:	d9000517 	ldw	r4,20(sp)
10009b78:	00c00384 	movi	r3,14
10009b7c:	19008616 	blt	r3,r4,10009d98 <_dtoa_r+0x990>
10009b80:	200490fa 	slli	r2,r4,3
10009b84:	00c40074 	movhi	r3,4097
10009b88:	d9802217 	ldw	r6,136(sp)
10009b8c:	18da6a04 	addi	r3,r3,27048
10009b90:	1885883a 	add	r2,r3,r2
10009b94:	14000017 	ldw	r16,0(r2)
10009b98:	14400117 	ldw	r17,4(r2)
10009b9c:	30016316 	blt	r6,zero,1000a12c <_dtoa_r+0xd24>
10009ba0:	800d883a 	mov	r6,r16
10009ba4:	880f883a 	mov	r7,r17
10009ba8:	9009883a 	mov	r4,r18
10009bac:	980b883a 	mov	r5,r19
10009bb0:	001186c0 	call	1001186c <__divdf3>
10009bb4:	180b883a 	mov	r5,r3
10009bb8:	1009883a 	mov	r4,r2
10009bbc:	00135fc0 	call	100135fc <__fixdfsi>
10009bc0:	1009883a 	mov	r4,r2
10009bc4:	102b883a 	mov	r21,r2
10009bc8:	001367c0 	call	1001367c <__floatsidf>
10009bcc:	800d883a 	mov	r6,r16
10009bd0:	880f883a 	mov	r7,r17
10009bd4:	1009883a 	mov	r4,r2
10009bd8:	180b883a 	mov	r5,r3
10009bdc:	00124940 	call	10012494 <__muldf3>
10009be0:	100d883a 	mov	r6,r2
10009be4:	180f883a 	mov	r7,r3
10009be8:	9009883a 	mov	r4,r18
10009bec:	980b883a 	mov	r5,r19
10009bf0:	0012d000 	call	10012d00 <__subdf3>
10009bf4:	d9c00717 	ldw	r7,28(sp)
10009bf8:	1009883a 	mov	r4,r2
10009bfc:	a8800c04 	addi	r2,r21,48
10009c00:	38800005 	stb	r2,0(r7)
10009c04:	3dc00044 	addi	r23,r7,1
10009c08:	d9c00617 	ldw	r7,24(sp)
10009c0c:	01800044 	movi	r6,1
10009c10:	180b883a 	mov	r5,r3
10009c14:	2005883a 	mov	r2,r4
10009c18:	39803826 	beq	r7,r6,10009cfc <_dtoa_r+0x8f4>
10009c1c:	000d883a 	mov	r6,zero
10009c20:	01d00934 	movhi	r7,16420
10009c24:	00124940 	call	10012494 <__muldf3>
10009c28:	000d883a 	mov	r6,zero
10009c2c:	000f883a 	mov	r7,zero
10009c30:	1009883a 	mov	r4,r2
10009c34:	180b883a 	mov	r5,r3
10009c38:	1025883a 	mov	r18,r2
10009c3c:	1827883a 	mov	r19,r3
10009c40:	001223c0 	call	1001223c <__eqdf2>
10009c44:	103f9a26 	beq	r2,zero,10009ab0 <__alt_data_end+0xf8009ab0>
10009c48:	d9c00617 	ldw	r7,24(sp)
10009c4c:	d8c00717 	ldw	r3,28(sp)
10009c50:	b829883a 	mov	r20,r23
10009c54:	38bfffc4 	addi	r2,r7,-1
10009c58:	18ad883a 	add	r22,r3,r2
10009c5c:	00000a06 	br	10009c88 <_dtoa_r+0x880>
10009c60:	00124940 	call	10012494 <__muldf3>
10009c64:	000d883a 	mov	r6,zero
10009c68:	000f883a 	mov	r7,zero
10009c6c:	1009883a 	mov	r4,r2
10009c70:	180b883a 	mov	r5,r3
10009c74:	1025883a 	mov	r18,r2
10009c78:	1827883a 	mov	r19,r3
10009c7c:	b829883a 	mov	r20,r23
10009c80:	001223c0 	call	1001223c <__eqdf2>
10009c84:	103f8a26 	beq	r2,zero,10009ab0 <__alt_data_end+0xf8009ab0>
10009c88:	800d883a 	mov	r6,r16
10009c8c:	880f883a 	mov	r7,r17
10009c90:	9009883a 	mov	r4,r18
10009c94:	980b883a 	mov	r5,r19
10009c98:	001186c0 	call	1001186c <__divdf3>
10009c9c:	180b883a 	mov	r5,r3
10009ca0:	1009883a 	mov	r4,r2
10009ca4:	00135fc0 	call	100135fc <__fixdfsi>
10009ca8:	1009883a 	mov	r4,r2
10009cac:	102b883a 	mov	r21,r2
10009cb0:	001367c0 	call	1001367c <__floatsidf>
10009cb4:	800d883a 	mov	r6,r16
10009cb8:	880f883a 	mov	r7,r17
10009cbc:	1009883a 	mov	r4,r2
10009cc0:	180b883a 	mov	r5,r3
10009cc4:	00124940 	call	10012494 <__muldf3>
10009cc8:	100d883a 	mov	r6,r2
10009ccc:	180f883a 	mov	r7,r3
10009cd0:	9009883a 	mov	r4,r18
10009cd4:	980b883a 	mov	r5,r19
10009cd8:	0012d000 	call	10012d00 <__subdf3>
10009cdc:	aa000c04 	addi	r8,r21,48
10009ce0:	a2000005 	stb	r8,0(r20)
10009ce4:	000d883a 	mov	r6,zero
10009ce8:	01d00934 	movhi	r7,16420
10009cec:	1009883a 	mov	r4,r2
10009cf0:	180b883a 	mov	r5,r3
10009cf4:	a5c00044 	addi	r23,r20,1
10009cf8:	b53fd91e 	bne	r22,r20,10009c60 <__alt_data_end+0xf8009c60>
10009cfc:	100d883a 	mov	r6,r2
10009d00:	180f883a 	mov	r7,r3
10009d04:	1009883a 	mov	r4,r2
10009d08:	180b883a 	mov	r5,r3
10009d0c:	0010fc00 	call	10010fc0 <__adddf3>
10009d10:	100d883a 	mov	r6,r2
10009d14:	180f883a 	mov	r7,r3
10009d18:	8009883a 	mov	r4,r16
10009d1c:	880b883a 	mov	r5,r17
10009d20:	1027883a 	mov	r19,r2
10009d24:	1825883a 	mov	r18,r3
10009d28:	00123a00 	call	100123a0 <__ledf2>
10009d2c:	10000816 	blt	r2,zero,10009d50 <_dtoa_r+0x948>
10009d30:	980d883a 	mov	r6,r19
10009d34:	900f883a 	mov	r7,r18
10009d38:	8009883a 	mov	r4,r16
10009d3c:	880b883a 	mov	r5,r17
10009d40:	001223c0 	call	1001223c <__eqdf2>
10009d44:	103f5a1e 	bne	r2,zero,10009ab0 <__alt_data_end+0xf8009ab0>
10009d48:	ad40004c 	andi	r21,r21,1
10009d4c:	a83f5826 	beq	r21,zero,10009ab0 <__alt_data_end+0xf8009ab0>
10009d50:	bd3fffc3 	ldbu	r20,-1(r23)
10009d54:	b8bfffc4 	addi	r2,r23,-1
10009d58:	1007883a 	mov	r3,r2
10009d5c:	01400e44 	movi	r5,57
10009d60:	d9800717 	ldw	r6,28(sp)
10009d64:	00000506 	br	10009d7c <_dtoa_r+0x974>
10009d68:	18ffffc4 	addi	r3,r3,-1
10009d6c:	11824726 	beq	r2,r6,1000a68c <_dtoa_r+0x1284>
10009d70:	1d000003 	ldbu	r20,0(r3)
10009d74:	102f883a 	mov	r23,r2
10009d78:	10bfffc4 	addi	r2,r2,-1
10009d7c:	a1003fcc 	andi	r4,r20,255
10009d80:	2100201c 	xori	r4,r4,128
10009d84:	213fe004 	addi	r4,r4,-128
10009d88:	217ff726 	beq	r4,r5,10009d68 <__alt_data_end+0xf8009d68>
10009d8c:	a2000044 	addi	r8,r20,1
10009d90:	12000005 	stb	r8,0(r2)
10009d94:	003f4606 	br	10009ab0 <__alt_data_end+0xf8009ab0>
10009d98:	d9000b17 	ldw	r4,44(sp)
10009d9c:	2000c826 	beq	r4,zero,1000a0c0 <_dtoa_r+0xcb8>
10009da0:	d9800317 	ldw	r6,12(sp)
10009da4:	00c00044 	movi	r3,1
10009da8:	1980f90e 	bge	r3,r6,1000a190 <_dtoa_r+0xd88>
10009dac:	d8800617 	ldw	r2,24(sp)
10009db0:	d8c00a17 	ldw	r3,40(sp)
10009db4:	157fffc4 	addi	r21,r2,-1
10009db8:	1d41f316 	blt	r3,r21,1000a588 <_dtoa_r+0x1180>
10009dbc:	1d6bc83a 	sub	r21,r3,r21
10009dc0:	d9c00617 	ldw	r7,24(sp)
10009dc4:	3802aa16 	blt	r7,zero,1000a870 <_dtoa_r+0x1468>
10009dc8:	dd000817 	ldw	r20,32(sp)
10009dcc:	d8800617 	ldw	r2,24(sp)
10009dd0:	d8c00817 	ldw	r3,32(sp)
10009dd4:	01400044 	movi	r5,1
10009dd8:	e009883a 	mov	r4,fp
10009ddc:	1887883a 	add	r3,r3,r2
10009de0:	d8c00815 	stw	r3,32(sp)
10009de4:	b0ad883a 	add	r22,r22,r2
10009de8:	000cef40 	call	1000cef4 <__i2b>
10009dec:	1023883a 	mov	r17,r2
10009df0:	a0000826 	beq	r20,zero,10009e14 <_dtoa_r+0xa0c>
10009df4:	0580070e 	bge	zero,r22,10009e14 <_dtoa_r+0xa0c>
10009df8:	a005883a 	mov	r2,r20
10009dfc:	b500b916 	blt	r22,r20,1000a0e4 <_dtoa_r+0xcdc>
10009e00:	d9000817 	ldw	r4,32(sp)
10009e04:	a0a9c83a 	sub	r20,r20,r2
10009e08:	b0adc83a 	sub	r22,r22,r2
10009e0c:	2089c83a 	sub	r4,r4,r2
10009e10:	d9000815 	stw	r4,32(sp)
10009e14:	d9800a17 	ldw	r6,40(sp)
10009e18:	0181810e 	bge	zero,r6,1000a420 <_dtoa_r+0x1018>
10009e1c:	d9c00b17 	ldw	r7,44(sp)
10009e20:	3800b326 	beq	r7,zero,1000a0f0 <_dtoa_r+0xce8>
10009e24:	a800b226 	beq	r21,zero,1000a0f0 <_dtoa_r+0xce8>
10009e28:	880b883a 	mov	r5,r17
10009e2c:	a80d883a 	mov	r6,r21
10009e30:	e009883a 	mov	r4,fp
10009e34:	000d1bc0 	call	1000d1bc <__pow5mult>
10009e38:	d9800917 	ldw	r6,36(sp)
10009e3c:	100b883a 	mov	r5,r2
10009e40:	e009883a 	mov	r4,fp
10009e44:	1023883a 	mov	r17,r2
10009e48:	000cf300 	call	1000cf30 <__multiply>
10009e4c:	1021883a 	mov	r16,r2
10009e50:	d8800a17 	ldw	r2,40(sp)
10009e54:	d9400917 	ldw	r5,36(sp)
10009e58:	e009883a 	mov	r4,fp
10009e5c:	1545c83a 	sub	r2,r2,r21
10009e60:	d8800a15 	stw	r2,40(sp)
10009e64:	000cb680 	call	1000cb68 <_Bfree>
10009e68:	d8c00a17 	ldw	r3,40(sp)
10009e6c:	18009f1e 	bne	r3,zero,1000a0ec <_dtoa_r+0xce4>
10009e70:	05c00044 	movi	r23,1
10009e74:	e009883a 	mov	r4,fp
10009e78:	b80b883a 	mov	r5,r23
10009e7c:	000cef40 	call	1000cef4 <__i2b>
10009e80:	d9000d17 	ldw	r4,52(sp)
10009e84:	102b883a 	mov	r21,r2
10009e88:	2000ce26 	beq	r4,zero,1000a1c4 <_dtoa_r+0xdbc>
10009e8c:	200d883a 	mov	r6,r4
10009e90:	100b883a 	mov	r5,r2
10009e94:	e009883a 	mov	r4,fp
10009e98:	000d1bc0 	call	1000d1bc <__pow5mult>
10009e9c:	d9800317 	ldw	r6,12(sp)
10009ea0:	102b883a 	mov	r21,r2
10009ea4:	b981810e 	bge	r23,r6,1000a4ac <_dtoa_r+0x10a4>
10009ea8:	0027883a 	mov	r19,zero
10009eac:	a8800417 	ldw	r2,16(r21)
10009eb0:	05c00804 	movi	r23,32
10009eb4:	10800104 	addi	r2,r2,4
10009eb8:	1085883a 	add	r2,r2,r2
10009ebc:	1085883a 	add	r2,r2,r2
10009ec0:	a885883a 	add	r2,r21,r2
10009ec4:	11000017 	ldw	r4,0(r2)
10009ec8:	000cddc0 	call	1000cddc <__hi0bits>
10009ecc:	b885c83a 	sub	r2,r23,r2
10009ed0:	1585883a 	add	r2,r2,r22
10009ed4:	108007cc 	andi	r2,r2,31
10009ed8:	1000b326 	beq	r2,zero,1000a1a8 <_dtoa_r+0xda0>
10009edc:	00c00804 	movi	r3,32
10009ee0:	1887c83a 	sub	r3,r3,r2
10009ee4:	01000104 	movi	r4,4
10009ee8:	20c2cd0e 	bge	r4,r3,1000aa20 <_dtoa_r+0x1618>
10009eec:	00c00704 	movi	r3,28
10009ef0:	1885c83a 	sub	r2,r3,r2
10009ef4:	d8c00817 	ldw	r3,32(sp)
10009ef8:	a0a9883a 	add	r20,r20,r2
10009efc:	b0ad883a 	add	r22,r22,r2
10009f00:	1887883a 	add	r3,r3,r2
10009f04:	d8c00815 	stw	r3,32(sp)
10009f08:	d9800817 	ldw	r6,32(sp)
10009f0c:	0180040e 	bge	zero,r6,10009f20 <_dtoa_r+0xb18>
10009f10:	800b883a 	mov	r5,r16
10009f14:	e009883a 	mov	r4,fp
10009f18:	000d2fc0 	call	1000d2fc <__lshift>
10009f1c:	1021883a 	mov	r16,r2
10009f20:	0580050e 	bge	zero,r22,10009f38 <_dtoa_r+0xb30>
10009f24:	a80b883a 	mov	r5,r21
10009f28:	b00d883a 	mov	r6,r22
10009f2c:	e009883a 	mov	r4,fp
10009f30:	000d2fc0 	call	1000d2fc <__lshift>
10009f34:	102b883a 	mov	r21,r2
10009f38:	d9c00e17 	ldw	r7,56(sp)
10009f3c:	3801211e 	bne	r7,zero,1000a3c4 <_dtoa_r+0xfbc>
10009f40:	d9800617 	ldw	r6,24(sp)
10009f44:	0181380e 	bge	zero,r6,1000a428 <_dtoa_r+0x1020>
10009f48:	d8c00b17 	ldw	r3,44(sp)
10009f4c:	1800ab1e 	bne	r3,zero,1000a1fc <_dtoa_r+0xdf4>
10009f50:	dc800717 	ldw	r18,28(sp)
10009f54:	dcc00617 	ldw	r19,24(sp)
10009f58:	9029883a 	mov	r20,r18
10009f5c:	00000206 	br	10009f68 <_dtoa_r+0xb60>
10009f60:	000cb900 	call	1000cb90 <__multadd>
10009f64:	1021883a 	mov	r16,r2
10009f68:	a80b883a 	mov	r5,r21
10009f6c:	8009883a 	mov	r4,r16
10009f70:	00091e00 	call	100091e0 <quorem>
10009f74:	10800c04 	addi	r2,r2,48
10009f78:	90800005 	stb	r2,0(r18)
10009f7c:	94800044 	addi	r18,r18,1
10009f80:	9507c83a 	sub	r3,r18,r20
10009f84:	000f883a 	mov	r7,zero
10009f88:	01800284 	movi	r6,10
10009f8c:	800b883a 	mov	r5,r16
10009f90:	e009883a 	mov	r4,fp
10009f94:	1cfff216 	blt	r3,r19,10009f60 <__alt_data_end+0xf8009f60>
10009f98:	1011883a 	mov	r8,r2
10009f9c:	d8800617 	ldw	r2,24(sp)
10009fa0:	0082370e 	bge	zero,r2,1000a880 <_dtoa_r+0x1478>
10009fa4:	d9000717 	ldw	r4,28(sp)
10009fa8:	0025883a 	mov	r18,zero
10009fac:	20af883a 	add	r23,r4,r2
10009fb0:	01800044 	movi	r6,1
10009fb4:	800b883a 	mov	r5,r16
10009fb8:	e009883a 	mov	r4,fp
10009fbc:	da001715 	stw	r8,92(sp)
10009fc0:	000d2fc0 	call	1000d2fc <__lshift>
10009fc4:	a80b883a 	mov	r5,r21
10009fc8:	1009883a 	mov	r4,r2
10009fcc:	d8800915 	stw	r2,36(sp)
10009fd0:	000d4440 	call	1000d444 <__mcmp>
10009fd4:	da001717 	ldw	r8,92(sp)
10009fd8:	0081800e 	bge	zero,r2,1000a5dc <_dtoa_r+0x11d4>
10009fdc:	b93fffc3 	ldbu	r4,-1(r23)
10009fe0:	b8bfffc4 	addi	r2,r23,-1
10009fe4:	1007883a 	mov	r3,r2
10009fe8:	01800e44 	movi	r6,57
10009fec:	d9c00717 	ldw	r7,28(sp)
10009ff0:	00000506 	br	1000a008 <_dtoa_r+0xc00>
10009ff4:	18ffffc4 	addi	r3,r3,-1
10009ff8:	11c12326 	beq	r2,r7,1000a488 <_dtoa_r+0x1080>
10009ffc:	19000003 	ldbu	r4,0(r3)
1000a000:	102f883a 	mov	r23,r2
1000a004:	10bfffc4 	addi	r2,r2,-1
1000a008:	21403fcc 	andi	r5,r4,255
1000a00c:	2940201c 	xori	r5,r5,128
1000a010:	297fe004 	addi	r5,r5,-128
1000a014:	29bff726 	beq	r5,r6,10009ff4 <__alt_data_end+0xf8009ff4>
1000a018:	21000044 	addi	r4,r4,1
1000a01c:	11000005 	stb	r4,0(r2)
1000a020:	a80b883a 	mov	r5,r21
1000a024:	e009883a 	mov	r4,fp
1000a028:	000cb680 	call	1000cb68 <_Bfree>
1000a02c:	883ea026 	beq	r17,zero,10009ab0 <__alt_data_end+0xf8009ab0>
1000a030:	90000426 	beq	r18,zero,1000a044 <_dtoa_r+0xc3c>
1000a034:	94400326 	beq	r18,r17,1000a044 <_dtoa_r+0xc3c>
1000a038:	900b883a 	mov	r5,r18
1000a03c:	e009883a 	mov	r4,fp
1000a040:	000cb680 	call	1000cb68 <_Bfree>
1000a044:	880b883a 	mov	r5,r17
1000a048:	e009883a 	mov	r4,fp
1000a04c:	000cb680 	call	1000cb68 <_Bfree>
1000a050:	003e9706 	br	10009ab0 <__alt_data_end+0xf8009ab0>
1000a054:	01800044 	movi	r6,1
1000a058:	d9800e15 	stw	r6,56(sp)
1000a05c:	003d9606 	br	100096b8 <__alt_data_end+0xf80096b8>
1000a060:	d8800817 	ldw	r2,32(sp)
1000a064:	d8c00517 	ldw	r3,20(sp)
1000a068:	d8000d15 	stw	zero,52(sp)
1000a06c:	10c5c83a 	sub	r2,r2,r3
1000a070:	00c9c83a 	sub	r4,zero,r3
1000a074:	d8800815 	stw	r2,32(sp)
1000a078:	d9000a15 	stw	r4,40(sp)
1000a07c:	003d9706 	br	100096dc <__alt_data_end+0xf80096dc>
1000a080:	05adc83a 	sub	r22,zero,r22
1000a084:	dd800815 	stw	r22,32(sp)
1000a088:	002d883a 	mov	r22,zero
1000a08c:	003d8e06 	br	100096c8 <__alt_data_end+0xf80096c8>
1000a090:	d9000517 	ldw	r4,20(sp)
1000a094:	001367c0 	call	1001367c <__floatsidf>
1000a098:	100d883a 	mov	r6,r2
1000a09c:	180f883a 	mov	r7,r3
1000a0a0:	a009883a 	mov	r4,r20
1000a0a4:	880b883a 	mov	r5,r17
1000a0a8:	001223c0 	call	1001223c <__eqdf2>
1000a0ac:	103d7126 	beq	r2,zero,10009674 <__alt_data_end+0xf8009674>
1000a0b0:	d9c00517 	ldw	r7,20(sp)
1000a0b4:	39ffffc4 	addi	r7,r7,-1
1000a0b8:	d9c00515 	stw	r7,20(sp)
1000a0bc:	003d6d06 	br	10009674 <__alt_data_end+0xf8009674>
1000a0c0:	dd400a17 	ldw	r21,40(sp)
1000a0c4:	dd000817 	ldw	r20,32(sp)
1000a0c8:	0023883a 	mov	r17,zero
1000a0cc:	003f4806 	br	10009df0 <__alt_data_end+0xf8009df0>
1000a0d0:	10e3c83a 	sub	r17,r2,r3
1000a0d4:	9448983a 	sll	r4,r18,r17
1000a0d8:	003d3206 	br	100095a4 <__alt_data_end+0xf80095a4>
1000a0dc:	d8000e15 	stw	zero,56(sp)
1000a0e0:	003d7506 	br	100096b8 <__alt_data_end+0xf80096b8>
1000a0e4:	b005883a 	mov	r2,r22
1000a0e8:	003f4506 	br	10009e00 <__alt_data_end+0xf8009e00>
1000a0ec:	dc000915 	stw	r16,36(sp)
1000a0f0:	d9800a17 	ldw	r6,40(sp)
1000a0f4:	d9400917 	ldw	r5,36(sp)
1000a0f8:	e009883a 	mov	r4,fp
1000a0fc:	000d1bc0 	call	1000d1bc <__pow5mult>
1000a100:	1021883a 	mov	r16,r2
1000a104:	003f5a06 	br	10009e70 <__alt_data_end+0xf8009e70>
1000a108:	01c00044 	movi	r7,1
1000a10c:	d9c00b15 	stw	r7,44(sp)
1000a110:	d8802217 	ldw	r2,136(sp)
1000a114:	0081280e 	bge	zero,r2,1000a5b8 <_dtoa_r+0x11b0>
1000a118:	100d883a 	mov	r6,r2
1000a11c:	1021883a 	mov	r16,r2
1000a120:	d8800c15 	stw	r2,48(sp)
1000a124:	d8800615 	stw	r2,24(sp)
1000a128:	003d8806 	br	1000974c <__alt_data_end+0xf800974c>
1000a12c:	d8800617 	ldw	r2,24(sp)
1000a130:	00be9b16 	blt	zero,r2,10009ba0 <__alt_data_end+0xf8009ba0>
1000a134:	10010f1e 	bne	r2,zero,1000a574 <_dtoa_r+0x116c>
1000a138:	880b883a 	mov	r5,r17
1000a13c:	000d883a 	mov	r6,zero
1000a140:	01d00534 	movhi	r7,16404
1000a144:	8009883a 	mov	r4,r16
1000a148:	00124940 	call	10012494 <__muldf3>
1000a14c:	900d883a 	mov	r6,r18
1000a150:	980f883a 	mov	r7,r19
1000a154:	1009883a 	mov	r4,r2
1000a158:	180b883a 	mov	r5,r3
1000a15c:	00122c40 	call	100122c4 <__gedf2>
1000a160:	002b883a 	mov	r21,zero
1000a164:	0023883a 	mov	r17,zero
1000a168:	1000bf16 	blt	r2,zero,1000a468 <_dtoa_r+0x1060>
1000a16c:	d9802217 	ldw	r6,136(sp)
1000a170:	ddc00717 	ldw	r23,28(sp)
1000a174:	018c303a 	nor	r6,zero,r6
1000a178:	d9800515 	stw	r6,20(sp)
1000a17c:	a80b883a 	mov	r5,r21
1000a180:	e009883a 	mov	r4,fp
1000a184:	000cb680 	call	1000cb68 <_Bfree>
1000a188:	883e4926 	beq	r17,zero,10009ab0 <__alt_data_end+0xf8009ab0>
1000a18c:	003fad06 	br	1000a044 <__alt_data_end+0xf800a044>
1000a190:	d9c01117 	ldw	r7,68(sp)
1000a194:	3801bc26 	beq	r7,zero,1000a888 <_dtoa_r+0x1480>
1000a198:	10810cc4 	addi	r2,r2,1075
1000a19c:	dd400a17 	ldw	r21,40(sp)
1000a1a0:	dd000817 	ldw	r20,32(sp)
1000a1a4:	003f0a06 	br	10009dd0 <__alt_data_end+0xf8009dd0>
1000a1a8:	00800704 	movi	r2,28
1000a1ac:	d9000817 	ldw	r4,32(sp)
1000a1b0:	a0a9883a 	add	r20,r20,r2
1000a1b4:	b0ad883a 	add	r22,r22,r2
1000a1b8:	2089883a 	add	r4,r4,r2
1000a1bc:	d9000815 	stw	r4,32(sp)
1000a1c0:	003f5106 	br	10009f08 <__alt_data_end+0xf8009f08>
1000a1c4:	d8c00317 	ldw	r3,12(sp)
1000a1c8:	b8c1fc0e 	bge	r23,r3,1000a9bc <_dtoa_r+0x15b4>
1000a1cc:	0027883a 	mov	r19,zero
1000a1d0:	b805883a 	mov	r2,r23
1000a1d4:	003f3e06 	br	10009ed0 <__alt_data_end+0xf8009ed0>
1000a1d8:	880b883a 	mov	r5,r17
1000a1dc:	e009883a 	mov	r4,fp
1000a1e0:	000f883a 	mov	r7,zero
1000a1e4:	01800284 	movi	r6,10
1000a1e8:	000cb900 	call	1000cb90 <__multadd>
1000a1ec:	d9000c17 	ldw	r4,48(sp)
1000a1f0:	1023883a 	mov	r17,r2
1000a1f4:	0102040e 	bge	zero,r4,1000aa08 <_dtoa_r+0x1600>
1000a1f8:	d9000615 	stw	r4,24(sp)
1000a1fc:	0500050e 	bge	zero,r20,1000a214 <_dtoa_r+0xe0c>
1000a200:	880b883a 	mov	r5,r17
1000a204:	a00d883a 	mov	r6,r20
1000a208:	e009883a 	mov	r4,fp
1000a20c:	000d2fc0 	call	1000d2fc <__lshift>
1000a210:	1023883a 	mov	r17,r2
1000a214:	9801241e 	bne	r19,zero,1000a6a8 <_dtoa_r+0x12a0>
1000a218:	8829883a 	mov	r20,r17
1000a21c:	d9000617 	ldw	r4,24(sp)
1000a220:	dcc00717 	ldw	r19,28(sp)
1000a224:	9480004c 	andi	r18,r18,1
1000a228:	20bfffc4 	addi	r2,r4,-1
1000a22c:	9885883a 	add	r2,r19,r2
1000a230:	d8800415 	stw	r2,16(sp)
1000a234:	dc800615 	stw	r18,24(sp)
1000a238:	a80b883a 	mov	r5,r21
1000a23c:	8009883a 	mov	r4,r16
1000a240:	00091e00 	call	100091e0 <quorem>
1000a244:	880b883a 	mov	r5,r17
1000a248:	8009883a 	mov	r4,r16
1000a24c:	102f883a 	mov	r23,r2
1000a250:	000d4440 	call	1000d444 <__mcmp>
1000a254:	a80b883a 	mov	r5,r21
1000a258:	a00d883a 	mov	r6,r20
1000a25c:	e009883a 	mov	r4,fp
1000a260:	102d883a 	mov	r22,r2
1000a264:	000d4a40 	call	1000d4a4 <__mdiff>
1000a268:	1007883a 	mov	r3,r2
1000a26c:	10800317 	ldw	r2,12(r2)
1000a270:	bc800c04 	addi	r18,r23,48
1000a274:	180b883a 	mov	r5,r3
1000a278:	10004e1e 	bne	r2,zero,1000a3b4 <_dtoa_r+0xfac>
1000a27c:	8009883a 	mov	r4,r16
1000a280:	d8c01615 	stw	r3,88(sp)
1000a284:	000d4440 	call	1000d444 <__mcmp>
1000a288:	d8c01617 	ldw	r3,88(sp)
1000a28c:	e009883a 	mov	r4,fp
1000a290:	d8801615 	stw	r2,88(sp)
1000a294:	180b883a 	mov	r5,r3
1000a298:	000cb680 	call	1000cb68 <_Bfree>
1000a29c:	d8801617 	ldw	r2,88(sp)
1000a2a0:	1000041e 	bne	r2,zero,1000a2b4 <_dtoa_r+0xeac>
1000a2a4:	d9800317 	ldw	r6,12(sp)
1000a2a8:	3000021e 	bne	r6,zero,1000a2b4 <_dtoa_r+0xeac>
1000a2ac:	d8c00617 	ldw	r3,24(sp)
1000a2b0:	18003726 	beq	r3,zero,1000a390 <_dtoa_r+0xf88>
1000a2b4:	b0002016 	blt	r22,zero,1000a338 <_dtoa_r+0xf30>
1000a2b8:	b000041e 	bne	r22,zero,1000a2cc <_dtoa_r+0xec4>
1000a2bc:	d9000317 	ldw	r4,12(sp)
1000a2c0:	2000021e 	bne	r4,zero,1000a2cc <_dtoa_r+0xec4>
1000a2c4:	d8c00617 	ldw	r3,24(sp)
1000a2c8:	18001b26 	beq	r3,zero,1000a338 <_dtoa_r+0xf30>
1000a2cc:	00810716 	blt	zero,r2,1000a6ec <_dtoa_r+0x12e4>
1000a2d0:	d8c00417 	ldw	r3,16(sp)
1000a2d4:	9d800044 	addi	r22,r19,1
1000a2d8:	9c800005 	stb	r18,0(r19)
1000a2dc:	b02f883a 	mov	r23,r22
1000a2e0:	98c10626 	beq	r19,r3,1000a6fc <_dtoa_r+0x12f4>
1000a2e4:	800b883a 	mov	r5,r16
1000a2e8:	000f883a 	mov	r7,zero
1000a2ec:	01800284 	movi	r6,10
1000a2f0:	e009883a 	mov	r4,fp
1000a2f4:	000cb900 	call	1000cb90 <__multadd>
1000a2f8:	1021883a 	mov	r16,r2
1000a2fc:	000f883a 	mov	r7,zero
1000a300:	01800284 	movi	r6,10
1000a304:	880b883a 	mov	r5,r17
1000a308:	e009883a 	mov	r4,fp
1000a30c:	8d002526 	beq	r17,r20,1000a3a4 <_dtoa_r+0xf9c>
1000a310:	000cb900 	call	1000cb90 <__multadd>
1000a314:	a00b883a 	mov	r5,r20
1000a318:	000f883a 	mov	r7,zero
1000a31c:	01800284 	movi	r6,10
1000a320:	e009883a 	mov	r4,fp
1000a324:	1023883a 	mov	r17,r2
1000a328:	000cb900 	call	1000cb90 <__multadd>
1000a32c:	1029883a 	mov	r20,r2
1000a330:	b027883a 	mov	r19,r22
1000a334:	003fc006 	br	1000a238 <__alt_data_end+0xf800a238>
1000a338:	9011883a 	mov	r8,r18
1000a33c:	00800e0e 	bge	zero,r2,1000a378 <_dtoa_r+0xf70>
1000a340:	800b883a 	mov	r5,r16
1000a344:	01800044 	movi	r6,1
1000a348:	e009883a 	mov	r4,fp
1000a34c:	da001715 	stw	r8,92(sp)
1000a350:	000d2fc0 	call	1000d2fc <__lshift>
1000a354:	a80b883a 	mov	r5,r21
1000a358:	1009883a 	mov	r4,r2
1000a35c:	1021883a 	mov	r16,r2
1000a360:	000d4440 	call	1000d444 <__mcmp>
1000a364:	da001717 	ldw	r8,92(sp)
1000a368:	0081960e 	bge	zero,r2,1000a9c4 <_dtoa_r+0x15bc>
1000a36c:	00800e44 	movi	r2,57
1000a370:	40817026 	beq	r8,r2,1000a934 <_dtoa_r+0x152c>
1000a374:	ba000c44 	addi	r8,r23,49
1000a378:	8825883a 	mov	r18,r17
1000a37c:	9dc00044 	addi	r23,r19,1
1000a380:	9a000005 	stb	r8,0(r19)
1000a384:	a023883a 	mov	r17,r20
1000a388:	dc000915 	stw	r16,36(sp)
1000a38c:	003f2406 	br	1000a020 <__alt_data_end+0xf800a020>
1000a390:	00800e44 	movi	r2,57
1000a394:	9011883a 	mov	r8,r18
1000a398:	90816626 	beq	r18,r2,1000a934 <_dtoa_r+0x152c>
1000a39c:	05bff516 	blt	zero,r22,1000a374 <__alt_data_end+0xf800a374>
1000a3a0:	003ff506 	br	1000a378 <__alt_data_end+0xf800a378>
1000a3a4:	000cb900 	call	1000cb90 <__multadd>
1000a3a8:	1023883a 	mov	r17,r2
1000a3ac:	1029883a 	mov	r20,r2
1000a3b0:	003fdf06 	br	1000a330 <__alt_data_end+0xf800a330>
1000a3b4:	e009883a 	mov	r4,fp
1000a3b8:	000cb680 	call	1000cb68 <_Bfree>
1000a3bc:	00800044 	movi	r2,1
1000a3c0:	003fbc06 	br	1000a2b4 <__alt_data_end+0xf800a2b4>
1000a3c4:	a80b883a 	mov	r5,r21
1000a3c8:	8009883a 	mov	r4,r16
1000a3cc:	000d4440 	call	1000d444 <__mcmp>
1000a3d0:	103edb0e 	bge	r2,zero,10009f40 <__alt_data_end+0xf8009f40>
1000a3d4:	800b883a 	mov	r5,r16
1000a3d8:	000f883a 	mov	r7,zero
1000a3dc:	01800284 	movi	r6,10
1000a3e0:	e009883a 	mov	r4,fp
1000a3e4:	000cb900 	call	1000cb90 <__multadd>
1000a3e8:	1021883a 	mov	r16,r2
1000a3ec:	d8800517 	ldw	r2,20(sp)
1000a3f0:	d8c00b17 	ldw	r3,44(sp)
1000a3f4:	10bfffc4 	addi	r2,r2,-1
1000a3f8:	d8800515 	stw	r2,20(sp)
1000a3fc:	183f761e 	bne	r3,zero,1000a1d8 <__alt_data_end+0xf800a1d8>
1000a400:	d9000c17 	ldw	r4,48(sp)
1000a404:	0101730e 	bge	zero,r4,1000a9d4 <_dtoa_r+0x15cc>
1000a408:	d9000615 	stw	r4,24(sp)
1000a40c:	003ed006 	br	10009f50 <__alt_data_end+0xf8009f50>
1000a410:	00800084 	movi	r2,2
1000a414:	3081861e 	bne	r6,r2,1000aa30 <_dtoa_r+0x1628>
1000a418:	d8000b15 	stw	zero,44(sp)
1000a41c:	003f3c06 	br	1000a110 <__alt_data_end+0xf800a110>
1000a420:	dc000917 	ldw	r16,36(sp)
1000a424:	003e9206 	br	10009e70 <__alt_data_end+0xf8009e70>
1000a428:	d9c00317 	ldw	r7,12(sp)
1000a42c:	00800084 	movi	r2,2
1000a430:	11fec50e 	bge	r2,r7,10009f48 <__alt_data_end+0xf8009f48>
1000a434:	d9000617 	ldw	r4,24(sp)
1000a438:	20013c1e 	bne	r4,zero,1000a92c <_dtoa_r+0x1524>
1000a43c:	a80b883a 	mov	r5,r21
1000a440:	000f883a 	mov	r7,zero
1000a444:	01800144 	movi	r6,5
1000a448:	e009883a 	mov	r4,fp
1000a44c:	000cb900 	call	1000cb90 <__multadd>
1000a450:	100b883a 	mov	r5,r2
1000a454:	8009883a 	mov	r4,r16
1000a458:	102b883a 	mov	r21,r2
1000a45c:	000d4440 	call	1000d444 <__mcmp>
1000a460:	dc000915 	stw	r16,36(sp)
1000a464:	00bf410e 	bge	zero,r2,1000a16c <__alt_data_end+0xf800a16c>
1000a468:	d9c00717 	ldw	r7,28(sp)
1000a46c:	00800c44 	movi	r2,49
1000a470:	38800005 	stb	r2,0(r7)
1000a474:	d8800517 	ldw	r2,20(sp)
1000a478:	3dc00044 	addi	r23,r7,1
1000a47c:	10800044 	addi	r2,r2,1
1000a480:	d8800515 	stw	r2,20(sp)
1000a484:	003f3d06 	br	1000a17c <__alt_data_end+0xf800a17c>
1000a488:	d9800517 	ldw	r6,20(sp)
1000a48c:	d9c00717 	ldw	r7,28(sp)
1000a490:	00800c44 	movi	r2,49
1000a494:	31800044 	addi	r6,r6,1
1000a498:	d9800515 	stw	r6,20(sp)
1000a49c:	38800005 	stb	r2,0(r7)
1000a4a0:	003edf06 	br	1000a020 <__alt_data_end+0xf800a020>
1000a4a4:	d8000b15 	stw	zero,44(sp)
1000a4a8:	003c9f06 	br	10009728 <__alt_data_end+0xf8009728>
1000a4ac:	903e7e1e 	bne	r18,zero,10009ea8 <__alt_data_end+0xf8009ea8>
1000a4b0:	00800434 	movhi	r2,16
1000a4b4:	10bfffc4 	addi	r2,r2,-1
1000a4b8:	9884703a 	and	r2,r19,r2
1000a4bc:	1000ea1e 	bne	r2,zero,1000a868 <_dtoa_r+0x1460>
1000a4c0:	9cdffc2c 	andhi	r19,r19,32752
1000a4c4:	9800e826 	beq	r19,zero,1000a868 <_dtoa_r+0x1460>
1000a4c8:	d9c00817 	ldw	r7,32(sp)
1000a4cc:	b5800044 	addi	r22,r22,1
1000a4d0:	04c00044 	movi	r19,1
1000a4d4:	39c00044 	addi	r7,r7,1
1000a4d8:	d9c00815 	stw	r7,32(sp)
1000a4dc:	d8800d17 	ldw	r2,52(sp)
1000a4e0:	103e721e 	bne	r2,zero,10009eac <__alt_data_end+0xf8009eac>
1000a4e4:	00800044 	movi	r2,1
1000a4e8:	003e7906 	br	10009ed0 <__alt_data_end+0xf8009ed0>
1000a4ec:	8009883a 	mov	r4,r16
1000a4f0:	001367c0 	call	1001367c <__floatsidf>
1000a4f4:	d9800f17 	ldw	r6,60(sp)
1000a4f8:	d9c01017 	ldw	r7,64(sp)
1000a4fc:	1009883a 	mov	r4,r2
1000a500:	180b883a 	mov	r5,r3
1000a504:	00124940 	call	10012494 <__muldf3>
1000a508:	000d883a 	mov	r6,zero
1000a50c:	01d00734 	movhi	r7,16412
1000a510:	1009883a 	mov	r4,r2
1000a514:	180b883a 	mov	r5,r3
1000a518:	0010fc00 	call	10010fc0 <__adddf3>
1000a51c:	047f3034 	movhi	r17,64704
1000a520:	1021883a 	mov	r16,r2
1000a524:	1c63883a 	add	r17,r3,r17
1000a528:	d9000f17 	ldw	r4,60(sp)
1000a52c:	d9401017 	ldw	r5,64(sp)
1000a530:	000d883a 	mov	r6,zero
1000a534:	01d00534 	movhi	r7,16404
1000a538:	0012d000 	call	10012d00 <__subdf3>
1000a53c:	800d883a 	mov	r6,r16
1000a540:	880f883a 	mov	r7,r17
1000a544:	1009883a 	mov	r4,r2
1000a548:	180b883a 	mov	r5,r3
1000a54c:	102b883a 	mov	r21,r2
1000a550:	1829883a 	mov	r20,r3
1000a554:	00122c40 	call	100122c4 <__gedf2>
1000a558:	00806c16 	blt	zero,r2,1000a70c <_dtoa_r+0x1304>
1000a55c:	89e0003c 	xorhi	r7,r17,32768
1000a560:	800d883a 	mov	r6,r16
1000a564:	a809883a 	mov	r4,r21
1000a568:	a00b883a 	mov	r5,r20
1000a56c:	00123a00 	call	100123a0 <__ledf2>
1000a570:	103d7e0e 	bge	r2,zero,10009b6c <__alt_data_end+0xf8009b6c>
1000a574:	002b883a 	mov	r21,zero
1000a578:	0023883a 	mov	r17,zero
1000a57c:	003efb06 	br	1000a16c <__alt_data_end+0xf800a16c>
1000a580:	d8800717 	ldw	r2,28(sp)
1000a584:	003bd006 	br	100094c8 <__alt_data_end+0xf80094c8>
1000a588:	d9000a17 	ldw	r4,40(sp)
1000a58c:	d9800d17 	ldw	r6,52(sp)
1000a590:	dd400a15 	stw	r21,40(sp)
1000a594:	a905c83a 	sub	r2,r21,r4
1000a598:	308d883a 	add	r6,r6,r2
1000a59c:	d9800d15 	stw	r6,52(sp)
1000a5a0:	002b883a 	mov	r21,zero
1000a5a4:	003e0606 	br	10009dc0 <__alt_data_end+0xf8009dc0>
1000a5a8:	9023883a 	mov	r17,r18
1000a5ac:	9829883a 	mov	r20,r19
1000a5b0:	04000084 	movi	r16,2
1000a5b4:	003c9206 	br	10009800 <__alt_data_end+0xf8009800>
1000a5b8:	04000044 	movi	r16,1
1000a5bc:	dc000c15 	stw	r16,48(sp)
1000a5c0:	dc000615 	stw	r16,24(sp)
1000a5c4:	dc002215 	stw	r16,136(sp)
1000a5c8:	e0001115 	stw	zero,68(fp)
1000a5cc:	000b883a 	mov	r5,zero
1000a5d0:	003c6906 	br	10009778 <__alt_data_end+0xf8009778>
1000a5d4:	3021883a 	mov	r16,r6
1000a5d8:	003ffb06 	br	1000a5c8 <__alt_data_end+0xf800a5c8>
1000a5dc:	1000021e 	bne	r2,zero,1000a5e8 <_dtoa_r+0x11e0>
1000a5e0:	4200004c 	andi	r8,r8,1
1000a5e4:	403e7d1e 	bne	r8,zero,10009fdc <__alt_data_end+0xf8009fdc>
1000a5e8:	01000c04 	movi	r4,48
1000a5ec:	00000106 	br	1000a5f4 <_dtoa_r+0x11ec>
1000a5f0:	102f883a 	mov	r23,r2
1000a5f4:	b8bfffc4 	addi	r2,r23,-1
1000a5f8:	10c00007 	ldb	r3,0(r2)
1000a5fc:	193ffc26 	beq	r3,r4,1000a5f0 <__alt_data_end+0xf800a5f0>
1000a600:	003e8706 	br	1000a020 <__alt_data_end+0xf800a020>
1000a604:	d8800517 	ldw	r2,20(sp)
1000a608:	00a3c83a 	sub	r17,zero,r2
1000a60c:	8800a426 	beq	r17,zero,1000a8a0 <_dtoa_r+0x1498>
1000a610:	888003cc 	andi	r2,r17,15
1000a614:	100490fa 	slli	r2,r2,3
1000a618:	00c40074 	movhi	r3,4097
1000a61c:	18da6a04 	addi	r3,r3,27048
1000a620:	1885883a 	add	r2,r3,r2
1000a624:	11800017 	ldw	r6,0(r2)
1000a628:	11c00117 	ldw	r7,4(r2)
1000a62c:	9009883a 	mov	r4,r18
1000a630:	980b883a 	mov	r5,r19
1000a634:	8823d13a 	srai	r17,r17,4
1000a638:	00124940 	call	10012494 <__muldf3>
1000a63c:	d8800f15 	stw	r2,60(sp)
1000a640:	d8c01015 	stw	r3,64(sp)
1000a644:	8800e826 	beq	r17,zero,1000a9e8 <_dtoa_r+0x15e0>
1000a648:	05040074 	movhi	r20,4097
1000a64c:	a51a6004 	addi	r20,r20,27008
1000a650:	04000084 	movi	r16,2
1000a654:	8980004c 	andi	r6,r17,1
1000a658:	1009883a 	mov	r4,r2
1000a65c:	8823d07a 	srai	r17,r17,1
1000a660:	180b883a 	mov	r5,r3
1000a664:	30000426 	beq	r6,zero,1000a678 <_dtoa_r+0x1270>
1000a668:	a1800017 	ldw	r6,0(r20)
1000a66c:	a1c00117 	ldw	r7,4(r20)
1000a670:	84000044 	addi	r16,r16,1
1000a674:	00124940 	call	10012494 <__muldf3>
1000a678:	a5000204 	addi	r20,r20,8
1000a67c:	883ff51e 	bne	r17,zero,1000a654 <__alt_data_end+0xf800a654>
1000a680:	d8800f15 	stw	r2,60(sp)
1000a684:	d8c01015 	stw	r3,64(sp)
1000a688:	003c7606 	br	10009864 <__alt_data_end+0xf8009864>
1000a68c:	00c00c04 	movi	r3,48
1000a690:	10c00005 	stb	r3,0(r2)
1000a694:	d8c00517 	ldw	r3,20(sp)
1000a698:	bd3fffc3 	ldbu	r20,-1(r23)
1000a69c:	18c00044 	addi	r3,r3,1
1000a6a0:	d8c00515 	stw	r3,20(sp)
1000a6a4:	003db906 	br	10009d8c <__alt_data_end+0xf8009d8c>
1000a6a8:	89400117 	ldw	r5,4(r17)
1000a6ac:	e009883a 	mov	r4,fp
1000a6b0:	000cac00 	call	1000cac0 <_Balloc>
1000a6b4:	89800417 	ldw	r6,16(r17)
1000a6b8:	89400304 	addi	r5,r17,12
1000a6bc:	11000304 	addi	r4,r2,12
1000a6c0:	31800084 	addi	r6,r6,2
1000a6c4:	318d883a 	add	r6,r6,r6
1000a6c8:	318d883a 	add	r6,r6,r6
1000a6cc:	1027883a 	mov	r19,r2
1000a6d0:	000c6f40 	call	1000c6f4 <memcpy>
1000a6d4:	01800044 	movi	r6,1
1000a6d8:	980b883a 	mov	r5,r19
1000a6dc:	e009883a 	mov	r4,fp
1000a6e0:	000d2fc0 	call	1000d2fc <__lshift>
1000a6e4:	1029883a 	mov	r20,r2
1000a6e8:	003ecc06 	br	1000a21c <__alt_data_end+0xf800a21c>
1000a6ec:	00800e44 	movi	r2,57
1000a6f0:	90809026 	beq	r18,r2,1000a934 <_dtoa_r+0x152c>
1000a6f4:	92000044 	addi	r8,r18,1
1000a6f8:	003f1f06 	br	1000a378 <__alt_data_end+0xf800a378>
1000a6fc:	9011883a 	mov	r8,r18
1000a700:	8825883a 	mov	r18,r17
1000a704:	a023883a 	mov	r17,r20
1000a708:	003e2906 	br	10009fb0 <__alt_data_end+0xf8009fb0>
1000a70c:	002b883a 	mov	r21,zero
1000a710:	0023883a 	mov	r17,zero
1000a714:	003f5406 	br	1000a468 <__alt_data_end+0xf800a468>
1000a718:	61bfffc4 	addi	r6,r12,-1
1000a71c:	300490fa 	slli	r2,r6,3
1000a720:	00c40074 	movhi	r3,4097
1000a724:	18da6a04 	addi	r3,r3,27048
1000a728:	1885883a 	add	r2,r3,r2
1000a72c:	11000017 	ldw	r4,0(r2)
1000a730:	11400117 	ldw	r5,4(r2)
1000a734:	d8800717 	ldw	r2,28(sp)
1000a738:	880f883a 	mov	r7,r17
1000a73c:	d9801215 	stw	r6,72(sp)
1000a740:	800d883a 	mov	r6,r16
1000a744:	db001615 	stw	r12,88(sp)
1000a748:	15c00044 	addi	r23,r2,1
1000a74c:	00124940 	call	10012494 <__muldf3>
1000a750:	d9401017 	ldw	r5,64(sp)
1000a754:	d9000f17 	ldw	r4,60(sp)
1000a758:	d8c01515 	stw	r3,84(sp)
1000a75c:	d8801415 	stw	r2,80(sp)
1000a760:	00135fc0 	call	100135fc <__fixdfsi>
1000a764:	1009883a 	mov	r4,r2
1000a768:	1021883a 	mov	r16,r2
1000a76c:	001367c0 	call	1001367c <__floatsidf>
1000a770:	d9000f17 	ldw	r4,60(sp)
1000a774:	d9401017 	ldw	r5,64(sp)
1000a778:	100d883a 	mov	r6,r2
1000a77c:	180f883a 	mov	r7,r3
1000a780:	0012d000 	call	10012d00 <__subdf3>
1000a784:	1829883a 	mov	r20,r3
1000a788:	d8c00717 	ldw	r3,28(sp)
1000a78c:	84000c04 	addi	r16,r16,48
1000a790:	1023883a 	mov	r17,r2
1000a794:	1c000005 	stb	r16,0(r3)
1000a798:	db001617 	ldw	r12,88(sp)
1000a79c:	00800044 	movi	r2,1
1000a7a0:	60802226 	beq	r12,r2,1000a82c <_dtoa_r+0x1424>
1000a7a4:	d9c00717 	ldw	r7,28(sp)
1000a7a8:	8805883a 	mov	r2,r17
1000a7ac:	b82b883a 	mov	r21,r23
1000a7b0:	3b19883a 	add	r12,r7,r12
1000a7b4:	6023883a 	mov	r17,r12
1000a7b8:	a007883a 	mov	r3,r20
1000a7bc:	dc800f15 	stw	r18,60(sp)
1000a7c0:	000d883a 	mov	r6,zero
1000a7c4:	01d00934 	movhi	r7,16420
1000a7c8:	1009883a 	mov	r4,r2
1000a7cc:	180b883a 	mov	r5,r3
1000a7d0:	00124940 	call	10012494 <__muldf3>
1000a7d4:	180b883a 	mov	r5,r3
1000a7d8:	1009883a 	mov	r4,r2
1000a7dc:	1829883a 	mov	r20,r3
1000a7e0:	1025883a 	mov	r18,r2
1000a7e4:	00135fc0 	call	100135fc <__fixdfsi>
1000a7e8:	1009883a 	mov	r4,r2
1000a7ec:	1021883a 	mov	r16,r2
1000a7f0:	001367c0 	call	1001367c <__floatsidf>
1000a7f4:	100d883a 	mov	r6,r2
1000a7f8:	180f883a 	mov	r7,r3
1000a7fc:	9009883a 	mov	r4,r18
1000a800:	a00b883a 	mov	r5,r20
1000a804:	84000c04 	addi	r16,r16,48
1000a808:	0012d000 	call	10012d00 <__subdf3>
1000a80c:	ad400044 	addi	r21,r21,1
1000a810:	ac3fffc5 	stb	r16,-1(r21)
1000a814:	ac7fea1e 	bne	r21,r17,1000a7c0 <__alt_data_end+0xf800a7c0>
1000a818:	1023883a 	mov	r17,r2
1000a81c:	d8801217 	ldw	r2,72(sp)
1000a820:	dc800f17 	ldw	r18,60(sp)
1000a824:	1829883a 	mov	r20,r3
1000a828:	b8af883a 	add	r23,r23,r2
1000a82c:	d9001417 	ldw	r4,80(sp)
1000a830:	d9401517 	ldw	r5,84(sp)
1000a834:	000d883a 	mov	r6,zero
1000a838:	01cff834 	movhi	r7,16352
1000a83c:	0010fc00 	call	10010fc0 <__adddf3>
1000a840:	880d883a 	mov	r6,r17
1000a844:	a00f883a 	mov	r7,r20
1000a848:	1009883a 	mov	r4,r2
1000a84c:	180b883a 	mov	r5,r3
1000a850:	00123a00 	call	100123a0 <__ledf2>
1000a854:	10003e0e 	bge	r2,zero,1000a950 <_dtoa_r+0x1548>
1000a858:	d9001317 	ldw	r4,76(sp)
1000a85c:	bd3fffc3 	ldbu	r20,-1(r23)
1000a860:	d9000515 	stw	r4,20(sp)
1000a864:	003d3b06 	br	10009d54 <__alt_data_end+0xf8009d54>
1000a868:	0027883a 	mov	r19,zero
1000a86c:	003f1b06 	br	1000a4dc <__alt_data_end+0xf800a4dc>
1000a870:	d8800817 	ldw	r2,32(sp)
1000a874:	11e9c83a 	sub	r20,r2,r7
1000a878:	0005883a 	mov	r2,zero
1000a87c:	003d5406 	br	10009dd0 <__alt_data_end+0xf8009dd0>
1000a880:	00800044 	movi	r2,1
1000a884:	003dc706 	br	10009fa4 <__alt_data_end+0xf8009fa4>
1000a888:	d8c00217 	ldw	r3,8(sp)
1000a88c:	00800d84 	movi	r2,54
1000a890:	dd400a17 	ldw	r21,40(sp)
1000a894:	10c5c83a 	sub	r2,r2,r3
1000a898:	dd000817 	ldw	r20,32(sp)
1000a89c:	003d4c06 	br	10009dd0 <__alt_data_end+0xf8009dd0>
1000a8a0:	dc800f15 	stw	r18,60(sp)
1000a8a4:	dcc01015 	stw	r19,64(sp)
1000a8a8:	04000084 	movi	r16,2
1000a8ac:	003bed06 	br	10009864 <__alt_data_end+0xf8009864>
1000a8b0:	d9000617 	ldw	r4,24(sp)
1000a8b4:	203f0d26 	beq	r4,zero,1000a4ec <__alt_data_end+0xf800a4ec>
1000a8b8:	d9800c17 	ldw	r6,48(sp)
1000a8bc:	01bcab0e 	bge	zero,r6,10009b6c <__alt_data_end+0xf8009b6c>
1000a8c0:	d9401017 	ldw	r5,64(sp)
1000a8c4:	d9000f17 	ldw	r4,60(sp)
1000a8c8:	000d883a 	mov	r6,zero
1000a8cc:	01d00934 	movhi	r7,16420
1000a8d0:	00124940 	call	10012494 <__muldf3>
1000a8d4:	81000044 	addi	r4,r16,1
1000a8d8:	d8800f15 	stw	r2,60(sp)
1000a8dc:	d8c01015 	stw	r3,64(sp)
1000a8e0:	001367c0 	call	1001367c <__floatsidf>
1000a8e4:	d9800f17 	ldw	r6,60(sp)
1000a8e8:	d9c01017 	ldw	r7,64(sp)
1000a8ec:	1009883a 	mov	r4,r2
1000a8f0:	180b883a 	mov	r5,r3
1000a8f4:	00124940 	call	10012494 <__muldf3>
1000a8f8:	01d00734 	movhi	r7,16412
1000a8fc:	000d883a 	mov	r6,zero
1000a900:	1009883a 	mov	r4,r2
1000a904:	180b883a 	mov	r5,r3
1000a908:	0010fc00 	call	10010fc0 <__adddf3>
1000a90c:	d9c00517 	ldw	r7,20(sp)
1000a910:	047f3034 	movhi	r17,64704
1000a914:	1021883a 	mov	r16,r2
1000a918:	39ffffc4 	addi	r7,r7,-1
1000a91c:	d9c01315 	stw	r7,76(sp)
1000a920:	1c63883a 	add	r17,r3,r17
1000a924:	db000c17 	ldw	r12,48(sp)
1000a928:	003bea06 	br	100098d4 <__alt_data_end+0xf80098d4>
1000a92c:	dc000915 	stw	r16,36(sp)
1000a930:	003e0e06 	br	1000a16c <__alt_data_end+0xf800a16c>
1000a934:	01000e44 	movi	r4,57
1000a938:	8825883a 	mov	r18,r17
1000a93c:	9dc00044 	addi	r23,r19,1
1000a940:	99000005 	stb	r4,0(r19)
1000a944:	a023883a 	mov	r17,r20
1000a948:	dc000915 	stw	r16,36(sp)
1000a94c:	003da406 	br	10009fe0 <__alt_data_end+0xf8009fe0>
1000a950:	d9801417 	ldw	r6,80(sp)
1000a954:	d9c01517 	ldw	r7,84(sp)
1000a958:	0009883a 	mov	r4,zero
1000a95c:	014ff834 	movhi	r5,16352
1000a960:	0012d000 	call	10012d00 <__subdf3>
1000a964:	880d883a 	mov	r6,r17
1000a968:	a00f883a 	mov	r7,r20
1000a96c:	1009883a 	mov	r4,r2
1000a970:	180b883a 	mov	r5,r3
1000a974:	00122c40 	call	100122c4 <__gedf2>
1000a978:	00bc7c0e 	bge	zero,r2,10009b6c <__alt_data_end+0xf8009b6c>
1000a97c:	01000c04 	movi	r4,48
1000a980:	00000106 	br	1000a988 <_dtoa_r+0x1580>
1000a984:	102f883a 	mov	r23,r2
1000a988:	b8bfffc4 	addi	r2,r23,-1
1000a98c:	10c00007 	ldb	r3,0(r2)
1000a990:	193ffc26 	beq	r3,r4,1000a984 <__alt_data_end+0xf800a984>
1000a994:	d9801317 	ldw	r6,76(sp)
1000a998:	d9800515 	stw	r6,20(sp)
1000a99c:	003c4406 	br	10009ab0 <__alt_data_end+0xf8009ab0>
1000a9a0:	d9801317 	ldw	r6,76(sp)
1000a9a4:	d9800515 	stw	r6,20(sp)
1000a9a8:	003cea06 	br	10009d54 <__alt_data_end+0xf8009d54>
1000a9ac:	dd800f17 	ldw	r22,60(sp)
1000a9b0:	dcc01017 	ldw	r19,64(sp)
1000a9b4:	dc801217 	ldw	r18,72(sp)
1000a9b8:	003c6c06 	br	10009b6c <__alt_data_end+0xf8009b6c>
1000a9bc:	903e031e 	bne	r18,zero,1000a1cc <__alt_data_end+0xf800a1cc>
1000a9c0:	003ebb06 	br	1000a4b0 <__alt_data_end+0xf800a4b0>
1000a9c4:	103e6c1e 	bne	r2,zero,1000a378 <__alt_data_end+0xf800a378>
1000a9c8:	4080004c 	andi	r2,r8,1
1000a9cc:	103e6a26 	beq	r2,zero,1000a378 <__alt_data_end+0xf800a378>
1000a9d0:	003e6606 	br	1000a36c <__alt_data_end+0xf800a36c>
1000a9d4:	d8c00317 	ldw	r3,12(sp)
1000a9d8:	00800084 	movi	r2,2
1000a9dc:	10c02916 	blt	r2,r3,1000aa84 <_dtoa_r+0x167c>
1000a9e0:	d9000c17 	ldw	r4,48(sp)
1000a9e4:	003e8806 	br	1000a408 <__alt_data_end+0xf800a408>
1000a9e8:	04000084 	movi	r16,2
1000a9ec:	003b9d06 	br	10009864 <__alt_data_end+0xf8009864>
1000a9f0:	d9001317 	ldw	r4,76(sp)
1000a9f4:	d9000515 	stw	r4,20(sp)
1000a9f8:	003cd606 	br	10009d54 <__alt_data_end+0xf8009d54>
1000a9fc:	d8801317 	ldw	r2,76(sp)
1000aa00:	d8800515 	stw	r2,20(sp)
1000aa04:	003c2a06 	br	10009ab0 <__alt_data_end+0xf8009ab0>
1000aa08:	d9800317 	ldw	r6,12(sp)
1000aa0c:	00800084 	movi	r2,2
1000aa10:	11801516 	blt	r2,r6,1000aa68 <_dtoa_r+0x1660>
1000aa14:	d9c00c17 	ldw	r7,48(sp)
1000aa18:	d9c00615 	stw	r7,24(sp)
1000aa1c:	003df706 	br	1000a1fc <__alt_data_end+0xf800a1fc>
1000aa20:	193d3926 	beq	r3,r4,10009f08 <__alt_data_end+0xf8009f08>
1000aa24:	00c00f04 	movi	r3,60
1000aa28:	1885c83a 	sub	r2,r3,r2
1000aa2c:	003ddf06 	br	1000a1ac <__alt_data_end+0xf800a1ac>
1000aa30:	e009883a 	mov	r4,fp
1000aa34:	e0001115 	stw	zero,68(fp)
1000aa38:	000b883a 	mov	r5,zero
1000aa3c:	000cac00 	call	1000cac0 <_Balloc>
1000aa40:	d8800715 	stw	r2,28(sp)
1000aa44:	d8c00717 	ldw	r3,28(sp)
1000aa48:	00bfffc4 	movi	r2,-1
1000aa4c:	01000044 	movi	r4,1
1000aa50:	d8800c15 	stw	r2,48(sp)
1000aa54:	e0c01015 	stw	r3,64(fp)
1000aa58:	d9000b15 	stw	r4,44(sp)
1000aa5c:	d8800615 	stw	r2,24(sp)
1000aa60:	d8002215 	stw	zero,136(sp)
1000aa64:	003c4106 	br	10009b6c <__alt_data_end+0xf8009b6c>
1000aa68:	d8c00c17 	ldw	r3,48(sp)
1000aa6c:	d8c00615 	stw	r3,24(sp)
1000aa70:	003e7006 	br	1000a434 <__alt_data_end+0xf800a434>
1000aa74:	04400044 	movi	r17,1
1000aa78:	003b2006 	br	100096fc <__alt_data_end+0xf80096fc>
1000aa7c:	000b883a 	mov	r5,zero
1000aa80:	003b3d06 	br	10009778 <__alt_data_end+0xf8009778>
1000aa84:	d8800c17 	ldw	r2,48(sp)
1000aa88:	d8800615 	stw	r2,24(sp)
1000aa8c:	003e6906 	br	1000a434 <__alt_data_end+0xf800a434>

1000aa90 <__sflush_r>:
1000aa90:	2880030b 	ldhu	r2,12(r5)
1000aa94:	defffb04 	addi	sp,sp,-20
1000aa98:	dcc00315 	stw	r19,12(sp)
1000aa9c:	dc400115 	stw	r17,4(sp)
1000aaa0:	dfc00415 	stw	ra,16(sp)
1000aaa4:	dc800215 	stw	r18,8(sp)
1000aaa8:	dc000015 	stw	r16,0(sp)
1000aaac:	10c0020c 	andi	r3,r2,8
1000aab0:	2823883a 	mov	r17,r5
1000aab4:	2027883a 	mov	r19,r4
1000aab8:	1800311e 	bne	r3,zero,1000ab80 <__sflush_r+0xf0>
1000aabc:	28c00117 	ldw	r3,4(r5)
1000aac0:	10820014 	ori	r2,r2,2048
1000aac4:	2880030d 	sth	r2,12(r5)
1000aac8:	00c04b0e 	bge	zero,r3,1000abf8 <__sflush_r+0x168>
1000aacc:	8a000a17 	ldw	r8,40(r17)
1000aad0:	40002326 	beq	r8,zero,1000ab60 <__sflush_r+0xd0>
1000aad4:	9c000017 	ldw	r16,0(r19)
1000aad8:	10c4000c 	andi	r3,r2,4096
1000aadc:	98000015 	stw	zero,0(r19)
1000aae0:	18004826 	beq	r3,zero,1000ac04 <__sflush_r+0x174>
1000aae4:	89801417 	ldw	r6,80(r17)
1000aae8:	10c0010c 	andi	r3,r2,4
1000aaec:	18000626 	beq	r3,zero,1000ab08 <__sflush_r+0x78>
1000aaf0:	88c00117 	ldw	r3,4(r17)
1000aaf4:	88800c17 	ldw	r2,48(r17)
1000aaf8:	30cdc83a 	sub	r6,r6,r3
1000aafc:	10000226 	beq	r2,zero,1000ab08 <__sflush_r+0x78>
1000ab00:	88800f17 	ldw	r2,60(r17)
1000ab04:	308dc83a 	sub	r6,r6,r2
1000ab08:	89400717 	ldw	r5,28(r17)
1000ab0c:	000f883a 	mov	r7,zero
1000ab10:	9809883a 	mov	r4,r19
1000ab14:	403ee83a 	callr	r8
1000ab18:	00ffffc4 	movi	r3,-1
1000ab1c:	10c04426 	beq	r2,r3,1000ac30 <__sflush_r+0x1a0>
1000ab20:	88c0030b 	ldhu	r3,12(r17)
1000ab24:	89000417 	ldw	r4,16(r17)
1000ab28:	88000115 	stw	zero,4(r17)
1000ab2c:	197dffcc 	andi	r5,r3,63487
1000ab30:	8940030d 	sth	r5,12(r17)
1000ab34:	89000015 	stw	r4,0(r17)
1000ab38:	18c4000c 	andi	r3,r3,4096
1000ab3c:	18002c1e 	bne	r3,zero,1000abf0 <__sflush_r+0x160>
1000ab40:	89400c17 	ldw	r5,48(r17)
1000ab44:	9c000015 	stw	r16,0(r19)
1000ab48:	28000526 	beq	r5,zero,1000ab60 <__sflush_r+0xd0>
1000ab4c:	88801004 	addi	r2,r17,64
1000ab50:	28800226 	beq	r5,r2,1000ab5c <__sflush_r+0xcc>
1000ab54:	9809883a 	mov	r4,r19
1000ab58:	000b20c0 	call	1000b20c <_free_r>
1000ab5c:	88000c15 	stw	zero,48(r17)
1000ab60:	0005883a 	mov	r2,zero
1000ab64:	dfc00417 	ldw	ra,16(sp)
1000ab68:	dcc00317 	ldw	r19,12(sp)
1000ab6c:	dc800217 	ldw	r18,8(sp)
1000ab70:	dc400117 	ldw	r17,4(sp)
1000ab74:	dc000017 	ldw	r16,0(sp)
1000ab78:	dec00504 	addi	sp,sp,20
1000ab7c:	f800283a 	ret
1000ab80:	2c800417 	ldw	r18,16(r5)
1000ab84:	903ff626 	beq	r18,zero,1000ab60 <__alt_data_end+0xf800ab60>
1000ab88:	2c000017 	ldw	r16,0(r5)
1000ab8c:	108000cc 	andi	r2,r2,3
1000ab90:	2c800015 	stw	r18,0(r5)
1000ab94:	84a1c83a 	sub	r16,r16,r18
1000ab98:	1000131e 	bne	r2,zero,1000abe8 <__sflush_r+0x158>
1000ab9c:	28800517 	ldw	r2,20(r5)
1000aba0:	88800215 	stw	r2,8(r17)
1000aba4:	04000316 	blt	zero,r16,1000abb4 <__sflush_r+0x124>
1000aba8:	003fed06 	br	1000ab60 <__alt_data_end+0xf800ab60>
1000abac:	90a5883a 	add	r18,r18,r2
1000abb0:	043feb0e 	bge	zero,r16,1000ab60 <__alt_data_end+0xf800ab60>
1000abb4:	88800917 	ldw	r2,36(r17)
1000abb8:	89400717 	ldw	r5,28(r17)
1000abbc:	800f883a 	mov	r7,r16
1000abc0:	900d883a 	mov	r6,r18
1000abc4:	9809883a 	mov	r4,r19
1000abc8:	103ee83a 	callr	r2
1000abcc:	80a1c83a 	sub	r16,r16,r2
1000abd0:	00bff616 	blt	zero,r2,1000abac <__alt_data_end+0xf800abac>
1000abd4:	88c0030b 	ldhu	r3,12(r17)
1000abd8:	00bfffc4 	movi	r2,-1
1000abdc:	18c01014 	ori	r3,r3,64
1000abe0:	88c0030d 	sth	r3,12(r17)
1000abe4:	003fdf06 	br	1000ab64 <__alt_data_end+0xf800ab64>
1000abe8:	0005883a 	mov	r2,zero
1000abec:	003fec06 	br	1000aba0 <__alt_data_end+0xf800aba0>
1000abf0:	88801415 	stw	r2,80(r17)
1000abf4:	003fd206 	br	1000ab40 <__alt_data_end+0xf800ab40>
1000abf8:	28c00f17 	ldw	r3,60(r5)
1000abfc:	00ffb316 	blt	zero,r3,1000aacc <__alt_data_end+0xf800aacc>
1000ac00:	003fd706 	br	1000ab60 <__alt_data_end+0xf800ab60>
1000ac04:	89400717 	ldw	r5,28(r17)
1000ac08:	000d883a 	mov	r6,zero
1000ac0c:	01c00044 	movi	r7,1
1000ac10:	9809883a 	mov	r4,r19
1000ac14:	403ee83a 	callr	r8
1000ac18:	100d883a 	mov	r6,r2
1000ac1c:	00bfffc4 	movi	r2,-1
1000ac20:	30801426 	beq	r6,r2,1000ac74 <__sflush_r+0x1e4>
1000ac24:	8880030b 	ldhu	r2,12(r17)
1000ac28:	8a000a17 	ldw	r8,40(r17)
1000ac2c:	003fae06 	br	1000aae8 <__alt_data_end+0xf800aae8>
1000ac30:	98c00017 	ldw	r3,0(r19)
1000ac34:	183fba26 	beq	r3,zero,1000ab20 <__alt_data_end+0xf800ab20>
1000ac38:	01000744 	movi	r4,29
1000ac3c:	19000626 	beq	r3,r4,1000ac58 <__sflush_r+0x1c8>
1000ac40:	01000584 	movi	r4,22
1000ac44:	19000426 	beq	r3,r4,1000ac58 <__sflush_r+0x1c8>
1000ac48:	88c0030b 	ldhu	r3,12(r17)
1000ac4c:	18c01014 	ori	r3,r3,64
1000ac50:	88c0030d 	sth	r3,12(r17)
1000ac54:	003fc306 	br	1000ab64 <__alt_data_end+0xf800ab64>
1000ac58:	8880030b 	ldhu	r2,12(r17)
1000ac5c:	88c00417 	ldw	r3,16(r17)
1000ac60:	88000115 	stw	zero,4(r17)
1000ac64:	10bdffcc 	andi	r2,r2,63487
1000ac68:	8880030d 	sth	r2,12(r17)
1000ac6c:	88c00015 	stw	r3,0(r17)
1000ac70:	003fb306 	br	1000ab40 <__alt_data_end+0xf800ab40>
1000ac74:	98800017 	ldw	r2,0(r19)
1000ac78:	103fea26 	beq	r2,zero,1000ac24 <__alt_data_end+0xf800ac24>
1000ac7c:	00c00744 	movi	r3,29
1000ac80:	10c00226 	beq	r2,r3,1000ac8c <__sflush_r+0x1fc>
1000ac84:	00c00584 	movi	r3,22
1000ac88:	10c0031e 	bne	r2,r3,1000ac98 <__sflush_r+0x208>
1000ac8c:	9c000015 	stw	r16,0(r19)
1000ac90:	0005883a 	mov	r2,zero
1000ac94:	003fb306 	br	1000ab64 <__alt_data_end+0xf800ab64>
1000ac98:	88c0030b 	ldhu	r3,12(r17)
1000ac9c:	3005883a 	mov	r2,r6
1000aca0:	18c01014 	ori	r3,r3,64
1000aca4:	88c0030d 	sth	r3,12(r17)
1000aca8:	003fae06 	br	1000ab64 <__alt_data_end+0xf800ab64>

1000acac <_fflush_r>:
1000acac:	defffd04 	addi	sp,sp,-12
1000acb0:	dc000115 	stw	r16,4(sp)
1000acb4:	dfc00215 	stw	ra,8(sp)
1000acb8:	2021883a 	mov	r16,r4
1000acbc:	20000226 	beq	r4,zero,1000acc8 <_fflush_r+0x1c>
1000acc0:	20800e17 	ldw	r2,56(r4)
1000acc4:	10000c26 	beq	r2,zero,1000acf8 <_fflush_r+0x4c>
1000acc8:	2880030f 	ldh	r2,12(r5)
1000accc:	1000051e 	bne	r2,zero,1000ace4 <_fflush_r+0x38>
1000acd0:	0005883a 	mov	r2,zero
1000acd4:	dfc00217 	ldw	ra,8(sp)
1000acd8:	dc000117 	ldw	r16,4(sp)
1000acdc:	dec00304 	addi	sp,sp,12
1000ace0:	f800283a 	ret
1000ace4:	8009883a 	mov	r4,r16
1000ace8:	dfc00217 	ldw	ra,8(sp)
1000acec:	dc000117 	ldw	r16,4(sp)
1000acf0:	dec00304 	addi	sp,sp,12
1000acf4:	000aa901 	jmpi	1000aa90 <__sflush_r>
1000acf8:	d9400015 	stw	r5,0(sp)
1000acfc:	000b0980 	call	1000b098 <__sinit>
1000ad00:	d9400017 	ldw	r5,0(sp)
1000ad04:	003ff006 	br	1000acc8 <__alt_data_end+0xf800acc8>

1000ad08 <fflush>:
1000ad08:	20000526 	beq	r4,zero,1000ad20 <fflush+0x18>
1000ad0c:	008400b4 	movhi	r2,4098
1000ad10:	1095f304 	addi	r2,r2,22476
1000ad14:	200b883a 	mov	r5,r4
1000ad18:	11000017 	ldw	r4,0(r2)
1000ad1c:	000acac1 	jmpi	1000acac <_fflush_r>
1000ad20:	008400b4 	movhi	r2,4098
1000ad24:	1095f204 	addi	r2,r2,22472
1000ad28:	11000017 	ldw	r4,0(r2)
1000ad2c:	01440074 	movhi	r5,4097
1000ad30:	296b2b04 	addi	r5,r5,-21332
1000ad34:	000baa81 	jmpi	1000baa8 <_fwalk_reent>

1000ad38 <__fp_unlock>:
1000ad38:	0005883a 	mov	r2,zero
1000ad3c:	f800283a 	ret

1000ad40 <_cleanup_r>:
1000ad40:	01440074 	movhi	r5,4097
1000ad44:	297f1104 	addi	r5,r5,-956
1000ad48:	000baa81 	jmpi	1000baa8 <_fwalk_reent>

1000ad4c <__sinit.part.1>:
1000ad4c:	defff704 	addi	sp,sp,-36
1000ad50:	00c40074 	movhi	r3,4097
1000ad54:	dfc00815 	stw	ra,32(sp)
1000ad58:	ddc00715 	stw	r23,28(sp)
1000ad5c:	dd800615 	stw	r22,24(sp)
1000ad60:	dd400515 	stw	r21,20(sp)
1000ad64:	dd000415 	stw	r20,16(sp)
1000ad68:	dcc00315 	stw	r19,12(sp)
1000ad6c:	dc800215 	stw	r18,8(sp)
1000ad70:	dc400115 	stw	r17,4(sp)
1000ad74:	dc000015 	stw	r16,0(sp)
1000ad78:	18eb5004 	addi	r3,r3,-21184
1000ad7c:	24000117 	ldw	r16,4(r4)
1000ad80:	20c00f15 	stw	r3,60(r4)
1000ad84:	2080bb04 	addi	r2,r4,748
1000ad88:	00c000c4 	movi	r3,3
1000ad8c:	20c0b915 	stw	r3,740(r4)
1000ad90:	2080ba15 	stw	r2,744(r4)
1000ad94:	2000b815 	stw	zero,736(r4)
1000ad98:	05c00204 	movi	r23,8
1000ad9c:	00800104 	movi	r2,4
1000ada0:	2025883a 	mov	r18,r4
1000ada4:	b80d883a 	mov	r6,r23
1000ada8:	81001704 	addi	r4,r16,92
1000adac:	000b883a 	mov	r5,zero
1000adb0:	80000015 	stw	zero,0(r16)
1000adb4:	80000115 	stw	zero,4(r16)
1000adb8:	80000215 	stw	zero,8(r16)
1000adbc:	8080030d 	sth	r2,12(r16)
1000adc0:	80001915 	stw	zero,100(r16)
1000adc4:	8000038d 	sth	zero,14(r16)
1000adc8:	80000415 	stw	zero,16(r16)
1000adcc:	80000515 	stw	zero,20(r16)
1000add0:	80000615 	stw	zero,24(r16)
1000add4:	000c9980 	call	1000c998 <memset>
1000add8:	05840074 	movhi	r22,4097
1000addc:	94400217 	ldw	r17,8(r18)
1000ade0:	05440074 	movhi	r21,4097
1000ade4:	05040074 	movhi	r20,4097
1000ade8:	04c40074 	movhi	r19,4097
1000adec:	b5b86904 	addi	r22,r22,-7772
1000adf0:	ad788004 	addi	r21,r21,-7680
1000adf4:	a5389f04 	addi	r20,r20,-7556
1000adf8:	9cf8b604 	addi	r19,r19,-7464
1000adfc:	85800815 	stw	r22,32(r16)
1000ae00:	85400915 	stw	r21,36(r16)
1000ae04:	85000a15 	stw	r20,40(r16)
1000ae08:	84c00b15 	stw	r19,44(r16)
1000ae0c:	84000715 	stw	r16,28(r16)
1000ae10:	00800284 	movi	r2,10
1000ae14:	8880030d 	sth	r2,12(r17)
1000ae18:	00800044 	movi	r2,1
1000ae1c:	b80d883a 	mov	r6,r23
1000ae20:	89001704 	addi	r4,r17,92
1000ae24:	000b883a 	mov	r5,zero
1000ae28:	88000015 	stw	zero,0(r17)
1000ae2c:	88000115 	stw	zero,4(r17)
1000ae30:	88000215 	stw	zero,8(r17)
1000ae34:	88001915 	stw	zero,100(r17)
1000ae38:	8880038d 	sth	r2,14(r17)
1000ae3c:	88000415 	stw	zero,16(r17)
1000ae40:	88000515 	stw	zero,20(r17)
1000ae44:	88000615 	stw	zero,24(r17)
1000ae48:	000c9980 	call	1000c998 <memset>
1000ae4c:	94000317 	ldw	r16,12(r18)
1000ae50:	00800484 	movi	r2,18
1000ae54:	8c400715 	stw	r17,28(r17)
1000ae58:	8d800815 	stw	r22,32(r17)
1000ae5c:	8d400915 	stw	r21,36(r17)
1000ae60:	8d000a15 	stw	r20,40(r17)
1000ae64:	8cc00b15 	stw	r19,44(r17)
1000ae68:	8080030d 	sth	r2,12(r16)
1000ae6c:	00800084 	movi	r2,2
1000ae70:	80000015 	stw	zero,0(r16)
1000ae74:	80000115 	stw	zero,4(r16)
1000ae78:	80000215 	stw	zero,8(r16)
1000ae7c:	80001915 	stw	zero,100(r16)
1000ae80:	8080038d 	sth	r2,14(r16)
1000ae84:	80000415 	stw	zero,16(r16)
1000ae88:	80000515 	stw	zero,20(r16)
1000ae8c:	80000615 	stw	zero,24(r16)
1000ae90:	b80d883a 	mov	r6,r23
1000ae94:	000b883a 	mov	r5,zero
1000ae98:	81001704 	addi	r4,r16,92
1000ae9c:	000c9980 	call	1000c998 <memset>
1000aea0:	00800044 	movi	r2,1
1000aea4:	84000715 	stw	r16,28(r16)
1000aea8:	85800815 	stw	r22,32(r16)
1000aeac:	85400915 	stw	r21,36(r16)
1000aeb0:	85000a15 	stw	r20,40(r16)
1000aeb4:	84c00b15 	stw	r19,44(r16)
1000aeb8:	90800e15 	stw	r2,56(r18)
1000aebc:	dfc00817 	ldw	ra,32(sp)
1000aec0:	ddc00717 	ldw	r23,28(sp)
1000aec4:	dd800617 	ldw	r22,24(sp)
1000aec8:	dd400517 	ldw	r21,20(sp)
1000aecc:	dd000417 	ldw	r20,16(sp)
1000aed0:	dcc00317 	ldw	r19,12(sp)
1000aed4:	dc800217 	ldw	r18,8(sp)
1000aed8:	dc400117 	ldw	r17,4(sp)
1000aedc:	dc000017 	ldw	r16,0(sp)
1000aee0:	dec00904 	addi	sp,sp,36
1000aee4:	f800283a 	ret

1000aee8 <__fp_lock>:
1000aee8:	0005883a 	mov	r2,zero
1000aeec:	f800283a 	ret

1000aef0 <__sfmoreglue>:
1000aef0:	defffc04 	addi	sp,sp,-16
1000aef4:	dc800215 	stw	r18,8(sp)
1000aef8:	2825883a 	mov	r18,r5
1000aefc:	dc000015 	stw	r16,0(sp)
1000af00:	01401a04 	movi	r5,104
1000af04:	2021883a 	mov	r16,r4
1000af08:	913fffc4 	addi	r4,r18,-1
1000af0c:	dfc00315 	stw	ra,12(sp)
1000af10:	dc400115 	stw	r17,4(sp)
1000af14:	0006ad80 	call	10006ad8 <__mulsi3>
1000af18:	8009883a 	mov	r4,r16
1000af1c:	11401d04 	addi	r5,r2,116
1000af20:	1023883a 	mov	r17,r2
1000af24:	000be040 	call	1000be04 <_malloc_r>
1000af28:	1021883a 	mov	r16,r2
1000af2c:	10000726 	beq	r2,zero,1000af4c <__sfmoreglue+0x5c>
1000af30:	11000304 	addi	r4,r2,12
1000af34:	10000015 	stw	zero,0(r2)
1000af38:	14800115 	stw	r18,4(r2)
1000af3c:	11000215 	stw	r4,8(r2)
1000af40:	89801a04 	addi	r6,r17,104
1000af44:	000b883a 	mov	r5,zero
1000af48:	000c9980 	call	1000c998 <memset>
1000af4c:	8005883a 	mov	r2,r16
1000af50:	dfc00317 	ldw	ra,12(sp)
1000af54:	dc800217 	ldw	r18,8(sp)
1000af58:	dc400117 	ldw	r17,4(sp)
1000af5c:	dc000017 	ldw	r16,0(sp)
1000af60:	dec00404 	addi	sp,sp,16
1000af64:	f800283a 	ret

1000af68 <__sfp>:
1000af68:	defffb04 	addi	sp,sp,-20
1000af6c:	dc000015 	stw	r16,0(sp)
1000af70:	040400b4 	movhi	r16,4098
1000af74:	8415f204 	addi	r16,r16,22472
1000af78:	dcc00315 	stw	r19,12(sp)
1000af7c:	2027883a 	mov	r19,r4
1000af80:	81000017 	ldw	r4,0(r16)
1000af84:	dfc00415 	stw	ra,16(sp)
1000af88:	dc800215 	stw	r18,8(sp)
1000af8c:	20800e17 	ldw	r2,56(r4)
1000af90:	dc400115 	stw	r17,4(sp)
1000af94:	1000021e 	bne	r2,zero,1000afa0 <__sfp+0x38>
1000af98:	000ad4c0 	call	1000ad4c <__sinit.part.1>
1000af9c:	81000017 	ldw	r4,0(r16)
1000afa0:	2480b804 	addi	r18,r4,736
1000afa4:	047fffc4 	movi	r17,-1
1000afa8:	91000117 	ldw	r4,4(r18)
1000afac:	94000217 	ldw	r16,8(r18)
1000afb0:	213fffc4 	addi	r4,r4,-1
1000afb4:	20000a16 	blt	r4,zero,1000afe0 <__sfp+0x78>
1000afb8:	8080030f 	ldh	r2,12(r16)
1000afbc:	10000c26 	beq	r2,zero,1000aff0 <__sfp+0x88>
1000afc0:	80c01d04 	addi	r3,r16,116
1000afc4:	00000206 	br	1000afd0 <__sfp+0x68>
1000afc8:	18bfe60f 	ldh	r2,-104(r3)
1000afcc:	10000826 	beq	r2,zero,1000aff0 <__sfp+0x88>
1000afd0:	213fffc4 	addi	r4,r4,-1
1000afd4:	1c3ffd04 	addi	r16,r3,-12
1000afd8:	18c01a04 	addi	r3,r3,104
1000afdc:	247ffa1e 	bne	r4,r17,1000afc8 <__alt_data_end+0xf800afc8>
1000afe0:	90800017 	ldw	r2,0(r18)
1000afe4:	10001d26 	beq	r2,zero,1000b05c <__sfp+0xf4>
1000afe8:	1025883a 	mov	r18,r2
1000afec:	003fee06 	br	1000afa8 <__alt_data_end+0xf800afa8>
1000aff0:	00bfffc4 	movi	r2,-1
1000aff4:	8080038d 	sth	r2,14(r16)
1000aff8:	00800044 	movi	r2,1
1000affc:	8080030d 	sth	r2,12(r16)
1000b000:	80001915 	stw	zero,100(r16)
1000b004:	80000015 	stw	zero,0(r16)
1000b008:	80000215 	stw	zero,8(r16)
1000b00c:	80000115 	stw	zero,4(r16)
1000b010:	80000415 	stw	zero,16(r16)
1000b014:	80000515 	stw	zero,20(r16)
1000b018:	80000615 	stw	zero,24(r16)
1000b01c:	01800204 	movi	r6,8
1000b020:	000b883a 	mov	r5,zero
1000b024:	81001704 	addi	r4,r16,92
1000b028:	000c9980 	call	1000c998 <memset>
1000b02c:	8005883a 	mov	r2,r16
1000b030:	80000c15 	stw	zero,48(r16)
1000b034:	80000d15 	stw	zero,52(r16)
1000b038:	80001115 	stw	zero,68(r16)
1000b03c:	80001215 	stw	zero,72(r16)
1000b040:	dfc00417 	ldw	ra,16(sp)
1000b044:	dcc00317 	ldw	r19,12(sp)
1000b048:	dc800217 	ldw	r18,8(sp)
1000b04c:	dc400117 	ldw	r17,4(sp)
1000b050:	dc000017 	ldw	r16,0(sp)
1000b054:	dec00504 	addi	sp,sp,20
1000b058:	f800283a 	ret
1000b05c:	01400104 	movi	r5,4
1000b060:	9809883a 	mov	r4,r19
1000b064:	000aef00 	call	1000aef0 <__sfmoreglue>
1000b068:	90800015 	stw	r2,0(r18)
1000b06c:	103fde1e 	bne	r2,zero,1000afe8 <__alt_data_end+0xf800afe8>
1000b070:	00800304 	movi	r2,12
1000b074:	98800015 	stw	r2,0(r19)
1000b078:	0005883a 	mov	r2,zero
1000b07c:	003ff006 	br	1000b040 <__alt_data_end+0xf800b040>

1000b080 <_cleanup>:
1000b080:	008400b4 	movhi	r2,4098
1000b084:	1095f204 	addi	r2,r2,22472
1000b088:	11000017 	ldw	r4,0(r2)
1000b08c:	01440074 	movhi	r5,4097
1000b090:	297f1104 	addi	r5,r5,-956
1000b094:	000baa81 	jmpi	1000baa8 <_fwalk_reent>

1000b098 <__sinit>:
1000b098:	20800e17 	ldw	r2,56(r4)
1000b09c:	10000126 	beq	r2,zero,1000b0a4 <__sinit+0xc>
1000b0a0:	f800283a 	ret
1000b0a4:	000ad4c1 	jmpi	1000ad4c <__sinit.part.1>

1000b0a8 <__sfp_lock_acquire>:
1000b0a8:	f800283a 	ret

1000b0ac <__sfp_lock_release>:
1000b0ac:	f800283a 	ret

1000b0b0 <__sinit_lock_acquire>:
1000b0b0:	f800283a 	ret

1000b0b4 <__sinit_lock_release>:
1000b0b4:	f800283a 	ret

1000b0b8 <__fp_lock_all>:
1000b0b8:	008400b4 	movhi	r2,4098
1000b0bc:	1095f304 	addi	r2,r2,22476
1000b0c0:	11000017 	ldw	r4,0(r2)
1000b0c4:	01440074 	movhi	r5,4097
1000b0c8:	296bba04 	addi	r5,r5,-20760
1000b0cc:	000b9e41 	jmpi	1000b9e4 <_fwalk>

1000b0d0 <__fp_unlock_all>:
1000b0d0:	008400b4 	movhi	r2,4098
1000b0d4:	1095f304 	addi	r2,r2,22476
1000b0d8:	11000017 	ldw	r4,0(r2)
1000b0dc:	01440074 	movhi	r5,4097
1000b0e0:	296b4e04 	addi	r5,r5,-21192
1000b0e4:	000b9e41 	jmpi	1000b9e4 <_fwalk>

1000b0e8 <_malloc_trim_r>:
1000b0e8:	defffb04 	addi	sp,sp,-20
1000b0ec:	dcc00315 	stw	r19,12(sp)
1000b0f0:	04c400b4 	movhi	r19,4098
1000b0f4:	dc800215 	stw	r18,8(sp)
1000b0f8:	dc400115 	stw	r17,4(sp)
1000b0fc:	dc000015 	stw	r16,0(sp)
1000b100:	dfc00415 	stw	ra,16(sp)
1000b104:	2821883a 	mov	r16,r5
1000b108:	9cd06e04 	addi	r19,r19,16824
1000b10c:	2025883a 	mov	r18,r4
1000b110:	0013e000 	call	10013e00 <__malloc_lock>
1000b114:	98800217 	ldw	r2,8(r19)
1000b118:	14400117 	ldw	r17,4(r2)
1000b11c:	00bfff04 	movi	r2,-4
1000b120:	88a2703a 	and	r17,r17,r2
1000b124:	8c21c83a 	sub	r16,r17,r16
1000b128:	8403fbc4 	addi	r16,r16,4079
1000b12c:	8020d33a 	srli	r16,r16,12
1000b130:	0083ffc4 	movi	r2,4095
1000b134:	843fffc4 	addi	r16,r16,-1
1000b138:	8020933a 	slli	r16,r16,12
1000b13c:	1400060e 	bge	r2,r16,1000b158 <_malloc_trim_r+0x70>
1000b140:	000b883a 	mov	r5,zero
1000b144:	9009883a 	mov	r4,r18
1000b148:	000e1500 	call	1000e150 <_sbrk_r>
1000b14c:	98c00217 	ldw	r3,8(r19)
1000b150:	1c47883a 	add	r3,r3,r17
1000b154:	10c00a26 	beq	r2,r3,1000b180 <_malloc_trim_r+0x98>
1000b158:	9009883a 	mov	r4,r18
1000b15c:	0013e240 	call	10013e24 <__malloc_unlock>
1000b160:	0005883a 	mov	r2,zero
1000b164:	dfc00417 	ldw	ra,16(sp)
1000b168:	dcc00317 	ldw	r19,12(sp)
1000b16c:	dc800217 	ldw	r18,8(sp)
1000b170:	dc400117 	ldw	r17,4(sp)
1000b174:	dc000017 	ldw	r16,0(sp)
1000b178:	dec00504 	addi	sp,sp,20
1000b17c:	f800283a 	ret
1000b180:	040bc83a 	sub	r5,zero,r16
1000b184:	9009883a 	mov	r4,r18
1000b188:	000e1500 	call	1000e150 <_sbrk_r>
1000b18c:	00ffffc4 	movi	r3,-1
1000b190:	10c00d26 	beq	r2,r3,1000b1c8 <_malloc_trim_r+0xe0>
1000b194:	00c400f4 	movhi	r3,4099
1000b198:	18d12b04 	addi	r3,r3,17580
1000b19c:	18800017 	ldw	r2,0(r3)
1000b1a0:	99000217 	ldw	r4,8(r19)
1000b1a4:	8c23c83a 	sub	r17,r17,r16
1000b1a8:	8c400054 	ori	r17,r17,1
1000b1ac:	1421c83a 	sub	r16,r2,r16
1000b1b0:	24400115 	stw	r17,4(r4)
1000b1b4:	9009883a 	mov	r4,r18
1000b1b8:	1c000015 	stw	r16,0(r3)
1000b1bc:	0013e240 	call	10013e24 <__malloc_unlock>
1000b1c0:	00800044 	movi	r2,1
1000b1c4:	003fe706 	br	1000b164 <__alt_data_end+0xf800b164>
1000b1c8:	000b883a 	mov	r5,zero
1000b1cc:	9009883a 	mov	r4,r18
1000b1d0:	000e1500 	call	1000e150 <_sbrk_r>
1000b1d4:	99000217 	ldw	r4,8(r19)
1000b1d8:	014003c4 	movi	r5,15
1000b1dc:	1107c83a 	sub	r3,r2,r4
1000b1e0:	28ffdd0e 	bge	r5,r3,1000b158 <__alt_data_end+0xf800b158>
1000b1e4:	014400b4 	movhi	r5,4098
1000b1e8:	2955f504 	addi	r5,r5,22484
1000b1ec:	29400017 	ldw	r5,0(r5)
1000b1f0:	18c00054 	ori	r3,r3,1
1000b1f4:	20c00115 	stw	r3,4(r4)
1000b1f8:	00c400f4 	movhi	r3,4099
1000b1fc:	1145c83a 	sub	r2,r2,r5
1000b200:	18d12b04 	addi	r3,r3,17580
1000b204:	18800015 	stw	r2,0(r3)
1000b208:	003fd306 	br	1000b158 <__alt_data_end+0xf800b158>

1000b20c <_free_r>:
1000b20c:	28004126 	beq	r5,zero,1000b314 <_free_r+0x108>
1000b210:	defffd04 	addi	sp,sp,-12
1000b214:	dc400115 	stw	r17,4(sp)
1000b218:	dc000015 	stw	r16,0(sp)
1000b21c:	2023883a 	mov	r17,r4
1000b220:	2821883a 	mov	r16,r5
1000b224:	dfc00215 	stw	ra,8(sp)
1000b228:	0013e000 	call	10013e00 <__malloc_lock>
1000b22c:	81ffff17 	ldw	r7,-4(r16)
1000b230:	00bfff84 	movi	r2,-2
1000b234:	010400b4 	movhi	r4,4098
1000b238:	81bffe04 	addi	r6,r16,-8
1000b23c:	3884703a 	and	r2,r7,r2
1000b240:	21106e04 	addi	r4,r4,16824
1000b244:	308b883a 	add	r5,r6,r2
1000b248:	2a400117 	ldw	r9,4(r5)
1000b24c:	22000217 	ldw	r8,8(r4)
1000b250:	00ffff04 	movi	r3,-4
1000b254:	48c6703a 	and	r3,r9,r3
1000b258:	2a005726 	beq	r5,r8,1000b3b8 <_free_r+0x1ac>
1000b25c:	28c00115 	stw	r3,4(r5)
1000b260:	39c0004c 	andi	r7,r7,1
1000b264:	3800091e 	bne	r7,zero,1000b28c <_free_r+0x80>
1000b268:	823ffe17 	ldw	r8,-8(r16)
1000b26c:	22400204 	addi	r9,r4,8
1000b270:	320dc83a 	sub	r6,r6,r8
1000b274:	31c00217 	ldw	r7,8(r6)
1000b278:	1205883a 	add	r2,r2,r8
1000b27c:	3a406526 	beq	r7,r9,1000b414 <_free_r+0x208>
1000b280:	32000317 	ldw	r8,12(r6)
1000b284:	3a000315 	stw	r8,12(r7)
1000b288:	41c00215 	stw	r7,8(r8)
1000b28c:	28cf883a 	add	r7,r5,r3
1000b290:	39c00117 	ldw	r7,4(r7)
1000b294:	39c0004c 	andi	r7,r7,1
1000b298:	38003a26 	beq	r7,zero,1000b384 <_free_r+0x178>
1000b29c:	10c00054 	ori	r3,r2,1
1000b2a0:	30c00115 	stw	r3,4(r6)
1000b2a4:	3087883a 	add	r3,r6,r2
1000b2a8:	18800015 	stw	r2,0(r3)
1000b2ac:	00c07fc4 	movi	r3,511
1000b2b0:	18801936 	bltu	r3,r2,1000b318 <_free_r+0x10c>
1000b2b4:	1004d0fa 	srli	r2,r2,3
1000b2b8:	01c00044 	movi	r7,1
1000b2bc:	21400117 	ldw	r5,4(r4)
1000b2c0:	10c00044 	addi	r3,r2,1
1000b2c4:	18c7883a 	add	r3,r3,r3
1000b2c8:	1005d0ba 	srai	r2,r2,2
1000b2cc:	18c7883a 	add	r3,r3,r3
1000b2d0:	18c7883a 	add	r3,r3,r3
1000b2d4:	1907883a 	add	r3,r3,r4
1000b2d8:	3884983a 	sll	r2,r7,r2
1000b2dc:	19c00017 	ldw	r7,0(r3)
1000b2e0:	1a3ffe04 	addi	r8,r3,-8
1000b2e4:	1144b03a 	or	r2,r2,r5
1000b2e8:	32000315 	stw	r8,12(r6)
1000b2ec:	31c00215 	stw	r7,8(r6)
1000b2f0:	20800115 	stw	r2,4(r4)
1000b2f4:	19800015 	stw	r6,0(r3)
1000b2f8:	39800315 	stw	r6,12(r7)
1000b2fc:	8809883a 	mov	r4,r17
1000b300:	dfc00217 	ldw	ra,8(sp)
1000b304:	dc400117 	ldw	r17,4(sp)
1000b308:	dc000017 	ldw	r16,0(sp)
1000b30c:	dec00304 	addi	sp,sp,12
1000b310:	0013e241 	jmpi	10013e24 <__malloc_unlock>
1000b314:	f800283a 	ret
1000b318:	100ad27a 	srli	r5,r2,9
1000b31c:	00c00104 	movi	r3,4
1000b320:	19404a36 	bltu	r3,r5,1000b44c <_free_r+0x240>
1000b324:	100ad1ba 	srli	r5,r2,6
1000b328:	28c00e44 	addi	r3,r5,57
1000b32c:	18c7883a 	add	r3,r3,r3
1000b330:	29400e04 	addi	r5,r5,56
1000b334:	18c7883a 	add	r3,r3,r3
1000b338:	18c7883a 	add	r3,r3,r3
1000b33c:	1909883a 	add	r4,r3,r4
1000b340:	20c00017 	ldw	r3,0(r4)
1000b344:	01c400b4 	movhi	r7,4098
1000b348:	213ffe04 	addi	r4,r4,-8
1000b34c:	39d06e04 	addi	r7,r7,16824
1000b350:	20c04426 	beq	r4,r3,1000b464 <_free_r+0x258>
1000b354:	01ffff04 	movi	r7,-4
1000b358:	19400117 	ldw	r5,4(r3)
1000b35c:	29ca703a 	and	r5,r5,r7
1000b360:	1140022e 	bgeu	r2,r5,1000b36c <_free_r+0x160>
1000b364:	18c00217 	ldw	r3,8(r3)
1000b368:	20fffb1e 	bne	r4,r3,1000b358 <__alt_data_end+0xf800b358>
1000b36c:	19000317 	ldw	r4,12(r3)
1000b370:	31000315 	stw	r4,12(r6)
1000b374:	30c00215 	stw	r3,8(r6)
1000b378:	21800215 	stw	r6,8(r4)
1000b37c:	19800315 	stw	r6,12(r3)
1000b380:	003fde06 	br	1000b2fc <__alt_data_end+0xf800b2fc>
1000b384:	29c00217 	ldw	r7,8(r5)
1000b388:	10c5883a 	add	r2,r2,r3
1000b38c:	00c400b4 	movhi	r3,4098
1000b390:	18d07004 	addi	r3,r3,16832
1000b394:	38c03b26 	beq	r7,r3,1000b484 <_free_r+0x278>
1000b398:	2a000317 	ldw	r8,12(r5)
1000b39c:	11400054 	ori	r5,r2,1
1000b3a0:	3087883a 	add	r3,r6,r2
1000b3a4:	3a000315 	stw	r8,12(r7)
1000b3a8:	41c00215 	stw	r7,8(r8)
1000b3ac:	31400115 	stw	r5,4(r6)
1000b3b0:	18800015 	stw	r2,0(r3)
1000b3b4:	003fbd06 	br	1000b2ac <__alt_data_end+0xf800b2ac>
1000b3b8:	39c0004c 	andi	r7,r7,1
1000b3bc:	10c5883a 	add	r2,r2,r3
1000b3c0:	3800071e 	bne	r7,zero,1000b3e0 <_free_r+0x1d4>
1000b3c4:	81fffe17 	ldw	r7,-8(r16)
1000b3c8:	31cdc83a 	sub	r6,r6,r7
1000b3cc:	30c00317 	ldw	r3,12(r6)
1000b3d0:	31400217 	ldw	r5,8(r6)
1000b3d4:	11c5883a 	add	r2,r2,r7
1000b3d8:	28c00315 	stw	r3,12(r5)
1000b3dc:	19400215 	stw	r5,8(r3)
1000b3e0:	10c00054 	ori	r3,r2,1
1000b3e4:	30c00115 	stw	r3,4(r6)
1000b3e8:	00c400b4 	movhi	r3,4098
1000b3ec:	18d5f604 	addi	r3,r3,22488
1000b3f0:	18c00017 	ldw	r3,0(r3)
1000b3f4:	21800215 	stw	r6,8(r4)
1000b3f8:	10ffc036 	bltu	r2,r3,1000b2fc <__alt_data_end+0xf800b2fc>
1000b3fc:	008400f4 	movhi	r2,4099
1000b400:	10912204 	addi	r2,r2,17544
1000b404:	11400017 	ldw	r5,0(r2)
1000b408:	8809883a 	mov	r4,r17
1000b40c:	000b0e80 	call	1000b0e8 <_malloc_trim_r>
1000b410:	003fba06 	br	1000b2fc <__alt_data_end+0xf800b2fc>
1000b414:	28c9883a 	add	r4,r5,r3
1000b418:	21000117 	ldw	r4,4(r4)
1000b41c:	2100004c 	andi	r4,r4,1
1000b420:	2000391e 	bne	r4,zero,1000b508 <_free_r+0x2fc>
1000b424:	29c00217 	ldw	r7,8(r5)
1000b428:	29000317 	ldw	r4,12(r5)
1000b42c:	1885883a 	add	r2,r3,r2
1000b430:	10c00054 	ori	r3,r2,1
1000b434:	39000315 	stw	r4,12(r7)
1000b438:	21c00215 	stw	r7,8(r4)
1000b43c:	30c00115 	stw	r3,4(r6)
1000b440:	308d883a 	add	r6,r6,r2
1000b444:	30800015 	stw	r2,0(r6)
1000b448:	003fac06 	br	1000b2fc <__alt_data_end+0xf800b2fc>
1000b44c:	00c00504 	movi	r3,20
1000b450:	19401536 	bltu	r3,r5,1000b4a8 <_free_r+0x29c>
1000b454:	28c01704 	addi	r3,r5,92
1000b458:	18c7883a 	add	r3,r3,r3
1000b45c:	294016c4 	addi	r5,r5,91
1000b460:	003fb406 	br	1000b334 <__alt_data_end+0xf800b334>
1000b464:	280bd0ba 	srai	r5,r5,2
1000b468:	00c00044 	movi	r3,1
1000b46c:	38800117 	ldw	r2,4(r7)
1000b470:	194a983a 	sll	r5,r3,r5
1000b474:	2007883a 	mov	r3,r4
1000b478:	2884b03a 	or	r2,r5,r2
1000b47c:	38800115 	stw	r2,4(r7)
1000b480:	003fbb06 	br	1000b370 <__alt_data_end+0xf800b370>
1000b484:	21800515 	stw	r6,20(r4)
1000b488:	21800415 	stw	r6,16(r4)
1000b48c:	10c00054 	ori	r3,r2,1
1000b490:	31c00315 	stw	r7,12(r6)
1000b494:	31c00215 	stw	r7,8(r6)
1000b498:	30c00115 	stw	r3,4(r6)
1000b49c:	308d883a 	add	r6,r6,r2
1000b4a0:	30800015 	stw	r2,0(r6)
1000b4a4:	003f9506 	br	1000b2fc <__alt_data_end+0xf800b2fc>
1000b4a8:	00c01504 	movi	r3,84
1000b4ac:	19400536 	bltu	r3,r5,1000b4c4 <_free_r+0x2b8>
1000b4b0:	100ad33a 	srli	r5,r2,12
1000b4b4:	28c01bc4 	addi	r3,r5,111
1000b4b8:	18c7883a 	add	r3,r3,r3
1000b4bc:	29401b84 	addi	r5,r5,110
1000b4c0:	003f9c06 	br	1000b334 <__alt_data_end+0xf800b334>
1000b4c4:	00c05504 	movi	r3,340
1000b4c8:	19400536 	bltu	r3,r5,1000b4e0 <_free_r+0x2d4>
1000b4cc:	100ad3fa 	srli	r5,r2,15
1000b4d0:	28c01e04 	addi	r3,r5,120
1000b4d4:	18c7883a 	add	r3,r3,r3
1000b4d8:	29401dc4 	addi	r5,r5,119
1000b4dc:	003f9506 	br	1000b334 <__alt_data_end+0xf800b334>
1000b4e0:	00c15504 	movi	r3,1364
1000b4e4:	19400536 	bltu	r3,r5,1000b4fc <_free_r+0x2f0>
1000b4e8:	100ad4ba 	srli	r5,r2,18
1000b4ec:	28c01f44 	addi	r3,r5,125
1000b4f0:	18c7883a 	add	r3,r3,r3
1000b4f4:	29401f04 	addi	r5,r5,124
1000b4f8:	003f8e06 	br	1000b334 <__alt_data_end+0xf800b334>
1000b4fc:	00c03f84 	movi	r3,254
1000b500:	01401f84 	movi	r5,126
1000b504:	003f8b06 	br	1000b334 <__alt_data_end+0xf800b334>
1000b508:	10c00054 	ori	r3,r2,1
1000b50c:	30c00115 	stw	r3,4(r6)
1000b510:	308d883a 	add	r6,r6,r2
1000b514:	30800015 	stw	r2,0(r6)
1000b518:	003f7806 	br	1000b2fc <__alt_data_end+0xf800b2fc>

1000b51c <__sfvwrite_r>:
1000b51c:	30800217 	ldw	r2,8(r6)
1000b520:	10006726 	beq	r2,zero,1000b6c0 <__sfvwrite_r+0x1a4>
1000b524:	28c0030b 	ldhu	r3,12(r5)
1000b528:	defff404 	addi	sp,sp,-48
1000b52c:	dd400715 	stw	r21,28(sp)
1000b530:	dd000615 	stw	r20,24(sp)
1000b534:	dc000215 	stw	r16,8(sp)
1000b538:	dfc00b15 	stw	ra,44(sp)
1000b53c:	df000a15 	stw	fp,40(sp)
1000b540:	ddc00915 	stw	r23,36(sp)
1000b544:	dd800815 	stw	r22,32(sp)
1000b548:	dcc00515 	stw	r19,20(sp)
1000b54c:	dc800415 	stw	r18,16(sp)
1000b550:	dc400315 	stw	r17,12(sp)
1000b554:	1880020c 	andi	r2,r3,8
1000b558:	2821883a 	mov	r16,r5
1000b55c:	202b883a 	mov	r21,r4
1000b560:	3029883a 	mov	r20,r6
1000b564:	10002726 	beq	r2,zero,1000b604 <__sfvwrite_r+0xe8>
1000b568:	28800417 	ldw	r2,16(r5)
1000b56c:	10002526 	beq	r2,zero,1000b604 <__sfvwrite_r+0xe8>
1000b570:	1880008c 	andi	r2,r3,2
1000b574:	a4400017 	ldw	r17,0(r20)
1000b578:	10002a26 	beq	r2,zero,1000b624 <__sfvwrite_r+0x108>
1000b57c:	05a00034 	movhi	r22,32768
1000b580:	0027883a 	mov	r19,zero
1000b584:	0025883a 	mov	r18,zero
1000b588:	b5bf0004 	addi	r22,r22,-1024
1000b58c:	980d883a 	mov	r6,r19
1000b590:	a809883a 	mov	r4,r21
1000b594:	90004626 	beq	r18,zero,1000b6b0 <__sfvwrite_r+0x194>
1000b598:	900f883a 	mov	r7,r18
1000b59c:	b480022e 	bgeu	r22,r18,1000b5a8 <__sfvwrite_r+0x8c>
1000b5a0:	01e00034 	movhi	r7,32768
1000b5a4:	39ff0004 	addi	r7,r7,-1024
1000b5a8:	80800917 	ldw	r2,36(r16)
1000b5ac:	81400717 	ldw	r5,28(r16)
1000b5b0:	103ee83a 	callr	r2
1000b5b4:	00805a0e 	bge	zero,r2,1000b720 <__sfvwrite_r+0x204>
1000b5b8:	a0c00217 	ldw	r3,8(r20)
1000b5bc:	98a7883a 	add	r19,r19,r2
1000b5c0:	90a5c83a 	sub	r18,r18,r2
1000b5c4:	1885c83a 	sub	r2,r3,r2
1000b5c8:	a0800215 	stw	r2,8(r20)
1000b5cc:	103fef1e 	bne	r2,zero,1000b58c <__alt_data_end+0xf800b58c>
1000b5d0:	0005883a 	mov	r2,zero
1000b5d4:	dfc00b17 	ldw	ra,44(sp)
1000b5d8:	df000a17 	ldw	fp,40(sp)
1000b5dc:	ddc00917 	ldw	r23,36(sp)
1000b5e0:	dd800817 	ldw	r22,32(sp)
1000b5e4:	dd400717 	ldw	r21,28(sp)
1000b5e8:	dd000617 	ldw	r20,24(sp)
1000b5ec:	dcc00517 	ldw	r19,20(sp)
1000b5f0:	dc800417 	ldw	r18,16(sp)
1000b5f4:	dc400317 	ldw	r17,12(sp)
1000b5f8:	dc000217 	ldw	r16,8(sp)
1000b5fc:	dec00c04 	addi	sp,sp,48
1000b600:	f800283a 	ret
1000b604:	800b883a 	mov	r5,r16
1000b608:	a809883a 	mov	r4,r21
1000b60c:	000908c0 	call	1000908c <__swsetup_r>
1000b610:	1000ee1e 	bne	r2,zero,1000b9cc <__sfvwrite_r+0x4b0>
1000b614:	80c0030b 	ldhu	r3,12(r16)
1000b618:	a4400017 	ldw	r17,0(r20)
1000b61c:	1880008c 	andi	r2,r3,2
1000b620:	103fd61e 	bne	r2,zero,1000b57c <__alt_data_end+0xf800b57c>
1000b624:	1880004c 	andi	r2,r3,1
1000b628:	1000421e 	bne	r2,zero,1000b734 <__sfvwrite_r+0x218>
1000b62c:	0039883a 	mov	fp,zero
1000b630:	0025883a 	mov	r18,zero
1000b634:	90001a26 	beq	r18,zero,1000b6a0 <__sfvwrite_r+0x184>
1000b638:	1880800c 	andi	r2,r3,512
1000b63c:	84c00217 	ldw	r19,8(r16)
1000b640:	10002126 	beq	r2,zero,1000b6c8 <__sfvwrite_r+0x1ac>
1000b644:	982f883a 	mov	r23,r19
1000b648:	94c09636 	bltu	r18,r19,1000b8a4 <__sfvwrite_r+0x388>
1000b64c:	1881200c 	andi	r2,r3,1152
1000b650:	1000a11e 	bne	r2,zero,1000b8d8 <__sfvwrite_r+0x3bc>
1000b654:	81000017 	ldw	r4,0(r16)
1000b658:	b80d883a 	mov	r6,r23
1000b65c:	e00b883a 	mov	r5,fp
1000b660:	000c83c0 	call	1000c83c <memmove>
1000b664:	80c00217 	ldw	r3,8(r16)
1000b668:	81000017 	ldw	r4,0(r16)
1000b66c:	9005883a 	mov	r2,r18
1000b670:	1ce7c83a 	sub	r19,r3,r19
1000b674:	25cf883a 	add	r7,r4,r23
1000b678:	84c00215 	stw	r19,8(r16)
1000b67c:	81c00015 	stw	r7,0(r16)
1000b680:	a0c00217 	ldw	r3,8(r20)
1000b684:	e0b9883a 	add	fp,fp,r2
1000b688:	90a5c83a 	sub	r18,r18,r2
1000b68c:	18a7c83a 	sub	r19,r3,r2
1000b690:	a4c00215 	stw	r19,8(r20)
1000b694:	983fce26 	beq	r19,zero,1000b5d0 <__alt_data_end+0xf800b5d0>
1000b698:	80c0030b 	ldhu	r3,12(r16)
1000b69c:	903fe61e 	bne	r18,zero,1000b638 <__alt_data_end+0xf800b638>
1000b6a0:	8f000017 	ldw	fp,0(r17)
1000b6a4:	8c800117 	ldw	r18,4(r17)
1000b6a8:	8c400204 	addi	r17,r17,8
1000b6ac:	003fe106 	br	1000b634 <__alt_data_end+0xf800b634>
1000b6b0:	8cc00017 	ldw	r19,0(r17)
1000b6b4:	8c800117 	ldw	r18,4(r17)
1000b6b8:	8c400204 	addi	r17,r17,8
1000b6bc:	003fb306 	br	1000b58c <__alt_data_end+0xf800b58c>
1000b6c0:	0005883a 	mov	r2,zero
1000b6c4:	f800283a 	ret
1000b6c8:	81000017 	ldw	r4,0(r16)
1000b6cc:	80800417 	ldw	r2,16(r16)
1000b6d0:	11005a36 	bltu	r2,r4,1000b83c <__sfvwrite_r+0x320>
1000b6d4:	85c00517 	ldw	r23,20(r16)
1000b6d8:	95c05836 	bltu	r18,r23,1000b83c <__sfvwrite_r+0x320>
1000b6dc:	00a00034 	movhi	r2,32768
1000b6e0:	10bfffc4 	addi	r2,r2,-1
1000b6e4:	9009883a 	mov	r4,r18
1000b6e8:	1480012e 	bgeu	r2,r18,1000b6f0 <__sfvwrite_r+0x1d4>
1000b6ec:	1009883a 	mov	r4,r2
1000b6f0:	b80b883a 	mov	r5,r23
1000b6f4:	00069240 	call	10006924 <__divsi3>
1000b6f8:	b80b883a 	mov	r5,r23
1000b6fc:	1009883a 	mov	r4,r2
1000b700:	0006ad80 	call	10006ad8 <__mulsi3>
1000b704:	81400717 	ldw	r5,28(r16)
1000b708:	80c00917 	ldw	r3,36(r16)
1000b70c:	100f883a 	mov	r7,r2
1000b710:	e00d883a 	mov	r6,fp
1000b714:	a809883a 	mov	r4,r21
1000b718:	183ee83a 	callr	r3
1000b71c:	00bfd816 	blt	zero,r2,1000b680 <__alt_data_end+0xf800b680>
1000b720:	8080030b 	ldhu	r2,12(r16)
1000b724:	10801014 	ori	r2,r2,64
1000b728:	8080030d 	sth	r2,12(r16)
1000b72c:	00bfffc4 	movi	r2,-1
1000b730:	003fa806 	br	1000b5d4 <__alt_data_end+0xf800b5d4>
1000b734:	0027883a 	mov	r19,zero
1000b738:	0011883a 	mov	r8,zero
1000b73c:	0039883a 	mov	fp,zero
1000b740:	0025883a 	mov	r18,zero
1000b744:	90001f26 	beq	r18,zero,1000b7c4 <__sfvwrite_r+0x2a8>
1000b748:	40005a26 	beq	r8,zero,1000b8b4 <__sfvwrite_r+0x398>
1000b74c:	982d883a 	mov	r22,r19
1000b750:	94c0012e 	bgeu	r18,r19,1000b758 <__sfvwrite_r+0x23c>
1000b754:	902d883a 	mov	r22,r18
1000b758:	81000017 	ldw	r4,0(r16)
1000b75c:	80800417 	ldw	r2,16(r16)
1000b760:	b02f883a 	mov	r23,r22
1000b764:	81c00517 	ldw	r7,20(r16)
1000b768:	1100032e 	bgeu	r2,r4,1000b778 <__sfvwrite_r+0x25c>
1000b76c:	80c00217 	ldw	r3,8(r16)
1000b770:	38c7883a 	add	r3,r7,r3
1000b774:	1d801816 	blt	r3,r22,1000b7d8 <__sfvwrite_r+0x2bc>
1000b778:	b1c03e16 	blt	r22,r7,1000b874 <__sfvwrite_r+0x358>
1000b77c:	80800917 	ldw	r2,36(r16)
1000b780:	81400717 	ldw	r5,28(r16)
1000b784:	e00d883a 	mov	r6,fp
1000b788:	da000115 	stw	r8,4(sp)
1000b78c:	a809883a 	mov	r4,r21
1000b790:	103ee83a 	callr	r2
1000b794:	102f883a 	mov	r23,r2
1000b798:	da000117 	ldw	r8,4(sp)
1000b79c:	00bfe00e 	bge	zero,r2,1000b720 <__alt_data_end+0xf800b720>
1000b7a0:	9de7c83a 	sub	r19,r19,r23
1000b7a4:	98001f26 	beq	r19,zero,1000b824 <__sfvwrite_r+0x308>
1000b7a8:	a0800217 	ldw	r2,8(r20)
1000b7ac:	e5f9883a 	add	fp,fp,r23
1000b7b0:	95e5c83a 	sub	r18,r18,r23
1000b7b4:	15efc83a 	sub	r23,r2,r23
1000b7b8:	a5c00215 	stw	r23,8(r20)
1000b7bc:	b83f8426 	beq	r23,zero,1000b5d0 <__alt_data_end+0xf800b5d0>
1000b7c0:	903fe11e 	bne	r18,zero,1000b748 <__alt_data_end+0xf800b748>
1000b7c4:	8f000017 	ldw	fp,0(r17)
1000b7c8:	8c800117 	ldw	r18,4(r17)
1000b7cc:	0011883a 	mov	r8,zero
1000b7d0:	8c400204 	addi	r17,r17,8
1000b7d4:	003fdb06 	br	1000b744 <__alt_data_end+0xf800b744>
1000b7d8:	180d883a 	mov	r6,r3
1000b7dc:	e00b883a 	mov	r5,fp
1000b7e0:	da000115 	stw	r8,4(sp)
1000b7e4:	d8c00015 	stw	r3,0(sp)
1000b7e8:	000c83c0 	call	1000c83c <memmove>
1000b7ec:	d8c00017 	ldw	r3,0(sp)
1000b7f0:	80800017 	ldw	r2,0(r16)
1000b7f4:	800b883a 	mov	r5,r16
1000b7f8:	a809883a 	mov	r4,r21
1000b7fc:	10c5883a 	add	r2,r2,r3
1000b800:	80800015 	stw	r2,0(r16)
1000b804:	d8c00015 	stw	r3,0(sp)
1000b808:	000acac0 	call	1000acac <_fflush_r>
1000b80c:	d8c00017 	ldw	r3,0(sp)
1000b810:	da000117 	ldw	r8,4(sp)
1000b814:	103fc21e 	bne	r2,zero,1000b720 <__alt_data_end+0xf800b720>
1000b818:	182f883a 	mov	r23,r3
1000b81c:	9de7c83a 	sub	r19,r19,r23
1000b820:	983fe11e 	bne	r19,zero,1000b7a8 <__alt_data_end+0xf800b7a8>
1000b824:	800b883a 	mov	r5,r16
1000b828:	a809883a 	mov	r4,r21
1000b82c:	000acac0 	call	1000acac <_fflush_r>
1000b830:	103fbb1e 	bne	r2,zero,1000b720 <__alt_data_end+0xf800b720>
1000b834:	0011883a 	mov	r8,zero
1000b838:	003fdb06 	br	1000b7a8 <__alt_data_end+0xf800b7a8>
1000b83c:	94c0012e 	bgeu	r18,r19,1000b844 <__sfvwrite_r+0x328>
1000b840:	9027883a 	mov	r19,r18
1000b844:	980d883a 	mov	r6,r19
1000b848:	e00b883a 	mov	r5,fp
1000b84c:	000c83c0 	call	1000c83c <memmove>
1000b850:	80800217 	ldw	r2,8(r16)
1000b854:	80c00017 	ldw	r3,0(r16)
1000b858:	14c5c83a 	sub	r2,r2,r19
1000b85c:	1cc7883a 	add	r3,r3,r19
1000b860:	80800215 	stw	r2,8(r16)
1000b864:	80c00015 	stw	r3,0(r16)
1000b868:	10004326 	beq	r2,zero,1000b978 <__sfvwrite_r+0x45c>
1000b86c:	9805883a 	mov	r2,r19
1000b870:	003f8306 	br	1000b680 <__alt_data_end+0xf800b680>
1000b874:	b00d883a 	mov	r6,r22
1000b878:	e00b883a 	mov	r5,fp
1000b87c:	da000115 	stw	r8,4(sp)
1000b880:	000c83c0 	call	1000c83c <memmove>
1000b884:	80800217 	ldw	r2,8(r16)
1000b888:	80c00017 	ldw	r3,0(r16)
1000b88c:	da000117 	ldw	r8,4(sp)
1000b890:	1585c83a 	sub	r2,r2,r22
1000b894:	1dad883a 	add	r22,r3,r22
1000b898:	80800215 	stw	r2,8(r16)
1000b89c:	85800015 	stw	r22,0(r16)
1000b8a0:	003fbf06 	br	1000b7a0 <__alt_data_end+0xf800b7a0>
1000b8a4:	81000017 	ldw	r4,0(r16)
1000b8a8:	9027883a 	mov	r19,r18
1000b8ac:	902f883a 	mov	r23,r18
1000b8b0:	003f6906 	br	1000b658 <__alt_data_end+0xf800b658>
1000b8b4:	900d883a 	mov	r6,r18
1000b8b8:	01400284 	movi	r5,10
1000b8bc:	e009883a 	mov	r4,fp
1000b8c0:	000c6100 	call	1000c610 <memchr>
1000b8c4:	10003e26 	beq	r2,zero,1000b9c0 <__sfvwrite_r+0x4a4>
1000b8c8:	10800044 	addi	r2,r2,1
1000b8cc:	1727c83a 	sub	r19,r2,fp
1000b8d0:	02000044 	movi	r8,1
1000b8d4:	003f9d06 	br	1000b74c <__alt_data_end+0xf800b74c>
1000b8d8:	80800517 	ldw	r2,20(r16)
1000b8dc:	81400417 	ldw	r5,16(r16)
1000b8e0:	81c00017 	ldw	r7,0(r16)
1000b8e4:	10a7883a 	add	r19,r2,r2
1000b8e8:	9885883a 	add	r2,r19,r2
1000b8ec:	1026d7fa 	srli	r19,r2,31
1000b8f0:	396dc83a 	sub	r22,r7,r5
1000b8f4:	b1000044 	addi	r4,r22,1
1000b8f8:	9885883a 	add	r2,r19,r2
1000b8fc:	1027d07a 	srai	r19,r2,1
1000b900:	2485883a 	add	r2,r4,r18
1000b904:	980d883a 	mov	r6,r19
1000b908:	9880022e 	bgeu	r19,r2,1000b914 <__sfvwrite_r+0x3f8>
1000b90c:	1027883a 	mov	r19,r2
1000b910:	100d883a 	mov	r6,r2
1000b914:	18c1000c 	andi	r3,r3,1024
1000b918:	18001c26 	beq	r3,zero,1000b98c <__sfvwrite_r+0x470>
1000b91c:	300b883a 	mov	r5,r6
1000b920:	a809883a 	mov	r4,r21
1000b924:	000be040 	call	1000be04 <_malloc_r>
1000b928:	102f883a 	mov	r23,r2
1000b92c:	10002926 	beq	r2,zero,1000b9d4 <__sfvwrite_r+0x4b8>
1000b930:	81400417 	ldw	r5,16(r16)
1000b934:	b00d883a 	mov	r6,r22
1000b938:	1009883a 	mov	r4,r2
1000b93c:	000c6f40 	call	1000c6f4 <memcpy>
1000b940:	8080030b 	ldhu	r2,12(r16)
1000b944:	00fedfc4 	movi	r3,-1153
1000b948:	10c4703a 	and	r2,r2,r3
1000b94c:	10802014 	ori	r2,r2,128
1000b950:	8080030d 	sth	r2,12(r16)
1000b954:	bd89883a 	add	r4,r23,r22
1000b958:	9d8fc83a 	sub	r7,r19,r22
1000b95c:	85c00415 	stw	r23,16(r16)
1000b960:	84c00515 	stw	r19,20(r16)
1000b964:	81000015 	stw	r4,0(r16)
1000b968:	9027883a 	mov	r19,r18
1000b96c:	81c00215 	stw	r7,8(r16)
1000b970:	902f883a 	mov	r23,r18
1000b974:	003f3806 	br	1000b658 <__alt_data_end+0xf800b658>
1000b978:	800b883a 	mov	r5,r16
1000b97c:	a809883a 	mov	r4,r21
1000b980:	000acac0 	call	1000acac <_fflush_r>
1000b984:	103fb926 	beq	r2,zero,1000b86c <__alt_data_end+0xf800b86c>
1000b988:	003f6506 	br	1000b720 <__alt_data_end+0xf800b720>
1000b98c:	a809883a 	mov	r4,r21
1000b990:	000db780 	call	1000db78 <_realloc_r>
1000b994:	102f883a 	mov	r23,r2
1000b998:	103fee1e 	bne	r2,zero,1000b954 <__alt_data_end+0xf800b954>
1000b99c:	81400417 	ldw	r5,16(r16)
1000b9a0:	a809883a 	mov	r4,r21
1000b9a4:	000b20c0 	call	1000b20c <_free_r>
1000b9a8:	8080030b 	ldhu	r2,12(r16)
1000b9ac:	00ffdfc4 	movi	r3,-129
1000b9b0:	1884703a 	and	r2,r3,r2
1000b9b4:	00c00304 	movi	r3,12
1000b9b8:	a8c00015 	stw	r3,0(r21)
1000b9bc:	003f5906 	br	1000b724 <__alt_data_end+0xf800b724>
1000b9c0:	94c00044 	addi	r19,r18,1
1000b9c4:	02000044 	movi	r8,1
1000b9c8:	003f6006 	br	1000b74c <__alt_data_end+0xf800b74c>
1000b9cc:	00bfffc4 	movi	r2,-1
1000b9d0:	003f0006 	br	1000b5d4 <__alt_data_end+0xf800b5d4>
1000b9d4:	00800304 	movi	r2,12
1000b9d8:	a8800015 	stw	r2,0(r21)
1000b9dc:	8080030b 	ldhu	r2,12(r16)
1000b9e0:	003f5006 	br	1000b724 <__alt_data_end+0xf800b724>

1000b9e4 <_fwalk>:
1000b9e4:	defff704 	addi	sp,sp,-36
1000b9e8:	dd000415 	stw	r20,16(sp)
1000b9ec:	dfc00815 	stw	ra,32(sp)
1000b9f0:	ddc00715 	stw	r23,28(sp)
1000b9f4:	dd800615 	stw	r22,24(sp)
1000b9f8:	dd400515 	stw	r21,20(sp)
1000b9fc:	dcc00315 	stw	r19,12(sp)
1000ba00:	dc800215 	stw	r18,8(sp)
1000ba04:	dc400115 	stw	r17,4(sp)
1000ba08:	dc000015 	stw	r16,0(sp)
1000ba0c:	2500b804 	addi	r20,r4,736
1000ba10:	a0002326 	beq	r20,zero,1000baa0 <_fwalk+0xbc>
1000ba14:	282b883a 	mov	r21,r5
1000ba18:	002f883a 	mov	r23,zero
1000ba1c:	05800044 	movi	r22,1
1000ba20:	04ffffc4 	movi	r19,-1
1000ba24:	a4400117 	ldw	r17,4(r20)
1000ba28:	a4800217 	ldw	r18,8(r20)
1000ba2c:	8c7fffc4 	addi	r17,r17,-1
1000ba30:	88000d16 	blt	r17,zero,1000ba68 <_fwalk+0x84>
1000ba34:	94000304 	addi	r16,r18,12
1000ba38:	94800384 	addi	r18,r18,14
1000ba3c:	8080000b 	ldhu	r2,0(r16)
1000ba40:	8c7fffc4 	addi	r17,r17,-1
1000ba44:	813ffd04 	addi	r4,r16,-12
1000ba48:	b080042e 	bgeu	r22,r2,1000ba5c <_fwalk+0x78>
1000ba4c:	9080000f 	ldh	r2,0(r18)
1000ba50:	14c00226 	beq	r2,r19,1000ba5c <_fwalk+0x78>
1000ba54:	a83ee83a 	callr	r21
1000ba58:	b8aeb03a 	or	r23,r23,r2
1000ba5c:	84001a04 	addi	r16,r16,104
1000ba60:	94801a04 	addi	r18,r18,104
1000ba64:	8cfff51e 	bne	r17,r19,1000ba3c <__alt_data_end+0xf800ba3c>
1000ba68:	a5000017 	ldw	r20,0(r20)
1000ba6c:	a03fed1e 	bne	r20,zero,1000ba24 <__alt_data_end+0xf800ba24>
1000ba70:	b805883a 	mov	r2,r23
1000ba74:	dfc00817 	ldw	ra,32(sp)
1000ba78:	ddc00717 	ldw	r23,28(sp)
1000ba7c:	dd800617 	ldw	r22,24(sp)
1000ba80:	dd400517 	ldw	r21,20(sp)
1000ba84:	dd000417 	ldw	r20,16(sp)
1000ba88:	dcc00317 	ldw	r19,12(sp)
1000ba8c:	dc800217 	ldw	r18,8(sp)
1000ba90:	dc400117 	ldw	r17,4(sp)
1000ba94:	dc000017 	ldw	r16,0(sp)
1000ba98:	dec00904 	addi	sp,sp,36
1000ba9c:	f800283a 	ret
1000baa0:	002f883a 	mov	r23,zero
1000baa4:	003ff206 	br	1000ba70 <__alt_data_end+0xf800ba70>

1000baa8 <_fwalk_reent>:
1000baa8:	defff704 	addi	sp,sp,-36
1000baac:	dd000415 	stw	r20,16(sp)
1000bab0:	dfc00815 	stw	ra,32(sp)
1000bab4:	ddc00715 	stw	r23,28(sp)
1000bab8:	dd800615 	stw	r22,24(sp)
1000babc:	dd400515 	stw	r21,20(sp)
1000bac0:	dcc00315 	stw	r19,12(sp)
1000bac4:	dc800215 	stw	r18,8(sp)
1000bac8:	dc400115 	stw	r17,4(sp)
1000bacc:	dc000015 	stw	r16,0(sp)
1000bad0:	2500b804 	addi	r20,r4,736
1000bad4:	a0002326 	beq	r20,zero,1000bb64 <_fwalk_reent+0xbc>
1000bad8:	282b883a 	mov	r21,r5
1000badc:	2027883a 	mov	r19,r4
1000bae0:	002f883a 	mov	r23,zero
1000bae4:	05800044 	movi	r22,1
1000bae8:	04bfffc4 	movi	r18,-1
1000baec:	a4400117 	ldw	r17,4(r20)
1000baf0:	a4000217 	ldw	r16,8(r20)
1000baf4:	8c7fffc4 	addi	r17,r17,-1
1000baf8:	88000c16 	blt	r17,zero,1000bb2c <_fwalk_reent+0x84>
1000bafc:	84000304 	addi	r16,r16,12
1000bb00:	8080000b 	ldhu	r2,0(r16)
1000bb04:	8c7fffc4 	addi	r17,r17,-1
1000bb08:	817ffd04 	addi	r5,r16,-12
1000bb0c:	b080052e 	bgeu	r22,r2,1000bb24 <_fwalk_reent+0x7c>
1000bb10:	8080008f 	ldh	r2,2(r16)
1000bb14:	9809883a 	mov	r4,r19
1000bb18:	14800226 	beq	r2,r18,1000bb24 <_fwalk_reent+0x7c>
1000bb1c:	a83ee83a 	callr	r21
1000bb20:	b8aeb03a 	or	r23,r23,r2
1000bb24:	84001a04 	addi	r16,r16,104
1000bb28:	8cbff51e 	bne	r17,r18,1000bb00 <__alt_data_end+0xf800bb00>
1000bb2c:	a5000017 	ldw	r20,0(r20)
1000bb30:	a03fee1e 	bne	r20,zero,1000baec <__alt_data_end+0xf800baec>
1000bb34:	b805883a 	mov	r2,r23
1000bb38:	dfc00817 	ldw	ra,32(sp)
1000bb3c:	ddc00717 	ldw	r23,28(sp)
1000bb40:	dd800617 	ldw	r22,24(sp)
1000bb44:	dd400517 	ldw	r21,20(sp)
1000bb48:	dd000417 	ldw	r20,16(sp)
1000bb4c:	dcc00317 	ldw	r19,12(sp)
1000bb50:	dc800217 	ldw	r18,8(sp)
1000bb54:	dc400117 	ldw	r17,4(sp)
1000bb58:	dc000017 	ldw	r16,0(sp)
1000bb5c:	dec00904 	addi	sp,sp,36
1000bb60:	f800283a 	ret
1000bb64:	002f883a 	mov	r23,zero
1000bb68:	003ff206 	br	1000bb34 <__alt_data_end+0xf800bb34>

1000bb6c <_setlocale_r>:
1000bb6c:	30001b26 	beq	r6,zero,1000bbdc <_setlocale_r+0x70>
1000bb70:	01440074 	movhi	r5,4097
1000bb74:	defffe04 	addi	sp,sp,-8
1000bb78:	295a5004 	addi	r5,r5,26944
1000bb7c:	3009883a 	mov	r4,r6
1000bb80:	dc000015 	stw	r16,0(sp)
1000bb84:	dfc00115 	stw	ra,4(sp)
1000bb88:	3021883a 	mov	r16,r6
1000bb8c:	000e2e00 	call	1000e2e0 <strcmp>
1000bb90:	1000061e 	bne	r2,zero,1000bbac <_setlocale_r+0x40>
1000bb94:	00840074 	movhi	r2,4097
1000bb98:	109a4f04 	addi	r2,r2,26940
1000bb9c:	dfc00117 	ldw	ra,4(sp)
1000bba0:	dc000017 	ldw	r16,0(sp)
1000bba4:	dec00204 	addi	sp,sp,8
1000bba8:	f800283a 	ret
1000bbac:	01440074 	movhi	r5,4097
1000bbb0:	295a4f04 	addi	r5,r5,26940
1000bbb4:	8009883a 	mov	r4,r16
1000bbb8:	000e2e00 	call	1000e2e0 <strcmp>
1000bbbc:	103ff526 	beq	r2,zero,1000bb94 <__alt_data_end+0xf800bb94>
1000bbc0:	01440074 	movhi	r5,4097
1000bbc4:	295a3a04 	addi	r5,r5,26856
1000bbc8:	8009883a 	mov	r4,r16
1000bbcc:	000e2e00 	call	1000e2e0 <strcmp>
1000bbd0:	103ff026 	beq	r2,zero,1000bb94 <__alt_data_end+0xf800bb94>
1000bbd4:	0005883a 	mov	r2,zero
1000bbd8:	003ff006 	br	1000bb9c <__alt_data_end+0xf800bb9c>
1000bbdc:	00840074 	movhi	r2,4097
1000bbe0:	109a4f04 	addi	r2,r2,26940
1000bbe4:	f800283a 	ret

1000bbe8 <__locale_charset>:
1000bbe8:	008400b4 	movhi	r2,4098
1000bbec:	10905804 	addi	r2,r2,16736
1000bbf0:	f800283a 	ret

1000bbf4 <__locale_mb_cur_max>:
1000bbf4:	008400b4 	movhi	r2,4098
1000bbf8:	1095f404 	addi	r2,r2,22480
1000bbfc:	10800017 	ldw	r2,0(r2)
1000bc00:	f800283a 	ret

1000bc04 <__locale_msgcharset>:
1000bc04:	008400b4 	movhi	r2,4098
1000bc08:	10905004 	addi	r2,r2,16704
1000bc0c:	f800283a 	ret

1000bc10 <__locale_cjk_lang>:
1000bc10:	0005883a 	mov	r2,zero
1000bc14:	f800283a 	ret

1000bc18 <_localeconv_r>:
1000bc18:	008400b4 	movhi	r2,4098
1000bc1c:	10906004 	addi	r2,r2,16768
1000bc20:	f800283a 	ret

1000bc24 <setlocale>:
1000bc24:	008400b4 	movhi	r2,4098
1000bc28:	1095f304 	addi	r2,r2,22476
1000bc2c:	280d883a 	mov	r6,r5
1000bc30:	200b883a 	mov	r5,r4
1000bc34:	11000017 	ldw	r4,0(r2)
1000bc38:	000bb6c1 	jmpi	1000bb6c <_setlocale_r>

1000bc3c <localeconv>:
1000bc3c:	008400b4 	movhi	r2,4098
1000bc40:	10906004 	addi	r2,r2,16768
1000bc44:	f800283a 	ret

1000bc48 <__smakebuf_r>:
1000bc48:	2880030b 	ldhu	r2,12(r5)
1000bc4c:	10c0008c 	andi	r3,r2,2
1000bc50:	1800411e 	bne	r3,zero,1000bd58 <__smakebuf_r+0x110>
1000bc54:	deffec04 	addi	sp,sp,-80
1000bc58:	dc000f15 	stw	r16,60(sp)
1000bc5c:	2821883a 	mov	r16,r5
1000bc60:	2940038f 	ldh	r5,14(r5)
1000bc64:	dc401015 	stw	r17,64(sp)
1000bc68:	dfc01315 	stw	ra,76(sp)
1000bc6c:	dcc01215 	stw	r19,72(sp)
1000bc70:	dc801115 	stw	r18,68(sp)
1000bc74:	2023883a 	mov	r17,r4
1000bc78:	28001c16 	blt	r5,zero,1000bcec <__smakebuf_r+0xa4>
1000bc7c:	d80d883a 	mov	r6,sp
1000bc80:	000ff500 	call	1000ff50 <_fstat_r>
1000bc84:	10001816 	blt	r2,zero,1000bce8 <__smakebuf_r+0xa0>
1000bc88:	d8800117 	ldw	r2,4(sp)
1000bc8c:	00e00014 	movui	r3,32768
1000bc90:	10bc000c 	andi	r2,r2,61440
1000bc94:	14c80020 	cmpeqi	r19,r2,8192
1000bc98:	10c03726 	beq	r2,r3,1000bd78 <__smakebuf_r+0x130>
1000bc9c:	80c0030b 	ldhu	r3,12(r16)
1000bca0:	18c20014 	ori	r3,r3,2048
1000bca4:	80c0030d 	sth	r3,12(r16)
1000bca8:	00c80004 	movi	r3,8192
1000bcac:	10c0521e 	bne	r2,r3,1000bdf8 <__smakebuf_r+0x1b0>
1000bcb0:	8140038f 	ldh	r5,14(r16)
1000bcb4:	8809883a 	mov	r4,r17
1000bcb8:	000ffac0 	call	1000ffac <_isatty_r>
1000bcbc:	10004c26 	beq	r2,zero,1000bdf0 <__smakebuf_r+0x1a8>
1000bcc0:	8080030b 	ldhu	r2,12(r16)
1000bcc4:	80c010c4 	addi	r3,r16,67
1000bcc8:	80c00015 	stw	r3,0(r16)
1000bccc:	10800054 	ori	r2,r2,1
1000bcd0:	8080030d 	sth	r2,12(r16)
1000bcd4:	00800044 	movi	r2,1
1000bcd8:	80c00415 	stw	r3,16(r16)
1000bcdc:	80800515 	stw	r2,20(r16)
1000bce0:	04810004 	movi	r18,1024
1000bce4:	00000706 	br	1000bd04 <__smakebuf_r+0xbc>
1000bce8:	8080030b 	ldhu	r2,12(r16)
1000bcec:	10c0200c 	andi	r3,r2,128
1000bcf0:	18001f1e 	bne	r3,zero,1000bd70 <__smakebuf_r+0x128>
1000bcf4:	04810004 	movi	r18,1024
1000bcf8:	10820014 	ori	r2,r2,2048
1000bcfc:	8080030d 	sth	r2,12(r16)
1000bd00:	0027883a 	mov	r19,zero
1000bd04:	900b883a 	mov	r5,r18
1000bd08:	8809883a 	mov	r4,r17
1000bd0c:	000be040 	call	1000be04 <_malloc_r>
1000bd10:	10002c26 	beq	r2,zero,1000bdc4 <__smakebuf_r+0x17c>
1000bd14:	80c0030b 	ldhu	r3,12(r16)
1000bd18:	01040074 	movhi	r4,4097
1000bd1c:	212b5004 	addi	r4,r4,-21184
1000bd20:	89000f15 	stw	r4,60(r17)
1000bd24:	18c02014 	ori	r3,r3,128
1000bd28:	80c0030d 	sth	r3,12(r16)
1000bd2c:	80800015 	stw	r2,0(r16)
1000bd30:	80800415 	stw	r2,16(r16)
1000bd34:	84800515 	stw	r18,20(r16)
1000bd38:	98001a1e 	bne	r19,zero,1000bda4 <__smakebuf_r+0x15c>
1000bd3c:	dfc01317 	ldw	ra,76(sp)
1000bd40:	dcc01217 	ldw	r19,72(sp)
1000bd44:	dc801117 	ldw	r18,68(sp)
1000bd48:	dc401017 	ldw	r17,64(sp)
1000bd4c:	dc000f17 	ldw	r16,60(sp)
1000bd50:	dec01404 	addi	sp,sp,80
1000bd54:	f800283a 	ret
1000bd58:	288010c4 	addi	r2,r5,67
1000bd5c:	28800015 	stw	r2,0(r5)
1000bd60:	28800415 	stw	r2,16(r5)
1000bd64:	00800044 	movi	r2,1
1000bd68:	28800515 	stw	r2,20(r5)
1000bd6c:	f800283a 	ret
1000bd70:	04801004 	movi	r18,64
1000bd74:	003fe006 	br	1000bcf8 <__alt_data_end+0xf800bcf8>
1000bd78:	81000a17 	ldw	r4,40(r16)
1000bd7c:	00c40074 	movhi	r3,4097
1000bd80:	18f89f04 	addi	r3,r3,-7556
1000bd84:	20ffc51e 	bne	r4,r3,1000bc9c <__alt_data_end+0xf800bc9c>
1000bd88:	8080030b 	ldhu	r2,12(r16)
1000bd8c:	04810004 	movi	r18,1024
1000bd90:	84801315 	stw	r18,76(r16)
1000bd94:	1484b03a 	or	r2,r2,r18
1000bd98:	8080030d 	sth	r2,12(r16)
1000bd9c:	0027883a 	mov	r19,zero
1000bda0:	003fd806 	br	1000bd04 <__alt_data_end+0xf800bd04>
1000bda4:	8140038f 	ldh	r5,14(r16)
1000bda8:	8809883a 	mov	r4,r17
1000bdac:	000ffac0 	call	1000ffac <_isatty_r>
1000bdb0:	103fe226 	beq	r2,zero,1000bd3c <__alt_data_end+0xf800bd3c>
1000bdb4:	8080030b 	ldhu	r2,12(r16)
1000bdb8:	10800054 	ori	r2,r2,1
1000bdbc:	8080030d 	sth	r2,12(r16)
1000bdc0:	003fde06 	br	1000bd3c <__alt_data_end+0xf800bd3c>
1000bdc4:	8080030b 	ldhu	r2,12(r16)
1000bdc8:	10c0800c 	andi	r3,r2,512
1000bdcc:	183fdb1e 	bne	r3,zero,1000bd3c <__alt_data_end+0xf800bd3c>
1000bdd0:	10800094 	ori	r2,r2,2
1000bdd4:	80c010c4 	addi	r3,r16,67
1000bdd8:	8080030d 	sth	r2,12(r16)
1000bddc:	00800044 	movi	r2,1
1000bde0:	80c00015 	stw	r3,0(r16)
1000bde4:	80c00415 	stw	r3,16(r16)
1000bde8:	80800515 	stw	r2,20(r16)
1000bdec:	003fd306 	br	1000bd3c <__alt_data_end+0xf800bd3c>
1000bdf0:	04810004 	movi	r18,1024
1000bdf4:	003fc306 	br	1000bd04 <__alt_data_end+0xf800bd04>
1000bdf8:	0027883a 	mov	r19,zero
1000bdfc:	04810004 	movi	r18,1024
1000be00:	003fc006 	br	1000bd04 <__alt_data_end+0xf800bd04>

1000be04 <_malloc_r>:
1000be04:	defff504 	addi	sp,sp,-44
1000be08:	dc800315 	stw	r18,12(sp)
1000be0c:	dfc00a15 	stw	ra,40(sp)
1000be10:	df000915 	stw	fp,36(sp)
1000be14:	ddc00815 	stw	r23,32(sp)
1000be18:	dd800715 	stw	r22,28(sp)
1000be1c:	dd400615 	stw	r21,24(sp)
1000be20:	dd000515 	stw	r20,20(sp)
1000be24:	dcc00415 	stw	r19,16(sp)
1000be28:	dc400215 	stw	r17,8(sp)
1000be2c:	dc000115 	stw	r16,4(sp)
1000be30:	288002c4 	addi	r2,r5,11
1000be34:	00c00584 	movi	r3,22
1000be38:	2025883a 	mov	r18,r4
1000be3c:	18807f2e 	bgeu	r3,r2,1000c03c <_malloc_r+0x238>
1000be40:	047ffe04 	movi	r17,-8
1000be44:	1462703a 	and	r17,r2,r17
1000be48:	8800a316 	blt	r17,zero,1000c0d8 <_malloc_r+0x2d4>
1000be4c:	8940a236 	bltu	r17,r5,1000c0d8 <_malloc_r+0x2d4>
1000be50:	0013e000 	call	10013e00 <__malloc_lock>
1000be54:	00807dc4 	movi	r2,503
1000be58:	1441e92e 	bgeu	r2,r17,1000c600 <_malloc_r+0x7fc>
1000be5c:	8804d27a 	srli	r2,r17,9
1000be60:	1000a126 	beq	r2,zero,1000c0e8 <_malloc_r+0x2e4>
1000be64:	00c00104 	movi	r3,4
1000be68:	18811e36 	bltu	r3,r2,1000c2e4 <_malloc_r+0x4e0>
1000be6c:	8804d1ba 	srli	r2,r17,6
1000be70:	12000e44 	addi	r8,r2,57
1000be74:	11c00e04 	addi	r7,r2,56
1000be78:	4209883a 	add	r4,r8,r8
1000be7c:	04c400b4 	movhi	r19,4098
1000be80:	2109883a 	add	r4,r4,r4
1000be84:	9cd06e04 	addi	r19,r19,16824
1000be88:	2109883a 	add	r4,r4,r4
1000be8c:	9909883a 	add	r4,r19,r4
1000be90:	24000117 	ldw	r16,4(r4)
1000be94:	213ffe04 	addi	r4,r4,-8
1000be98:	24009726 	beq	r4,r16,1000c0f8 <_malloc_r+0x2f4>
1000be9c:	80800117 	ldw	r2,4(r16)
1000bea0:	01bfff04 	movi	r6,-4
1000bea4:	014003c4 	movi	r5,15
1000bea8:	1184703a 	and	r2,r2,r6
1000beac:	1447c83a 	sub	r3,r2,r17
1000beb0:	28c00716 	blt	r5,r3,1000bed0 <_malloc_r+0xcc>
1000beb4:	1800920e 	bge	r3,zero,1000c100 <_malloc_r+0x2fc>
1000beb8:	84000317 	ldw	r16,12(r16)
1000bebc:	24008e26 	beq	r4,r16,1000c0f8 <_malloc_r+0x2f4>
1000bec0:	80800117 	ldw	r2,4(r16)
1000bec4:	1184703a 	and	r2,r2,r6
1000bec8:	1447c83a 	sub	r3,r2,r17
1000becc:	28fff90e 	bge	r5,r3,1000beb4 <__alt_data_end+0xf800beb4>
1000bed0:	3809883a 	mov	r4,r7
1000bed4:	018400b4 	movhi	r6,4098
1000bed8:	9c000417 	ldw	r16,16(r19)
1000bedc:	31906e04 	addi	r6,r6,16824
1000bee0:	32000204 	addi	r8,r6,8
1000bee4:	82013426 	beq	r16,r8,1000c3b8 <_malloc_r+0x5b4>
1000bee8:	80c00117 	ldw	r3,4(r16)
1000beec:	00bfff04 	movi	r2,-4
1000bef0:	188e703a 	and	r7,r3,r2
1000bef4:	3c45c83a 	sub	r2,r7,r17
1000bef8:	00c003c4 	movi	r3,15
1000befc:	18811f16 	blt	r3,r2,1000c37c <_malloc_r+0x578>
1000bf00:	32000515 	stw	r8,20(r6)
1000bf04:	32000415 	stw	r8,16(r6)
1000bf08:	10007f0e 	bge	r2,zero,1000c108 <_malloc_r+0x304>
1000bf0c:	00807fc4 	movi	r2,511
1000bf10:	11c0fd36 	bltu	r2,r7,1000c308 <_malloc_r+0x504>
1000bf14:	3806d0fa 	srli	r3,r7,3
1000bf18:	01c00044 	movi	r7,1
1000bf1c:	30800117 	ldw	r2,4(r6)
1000bf20:	19400044 	addi	r5,r3,1
1000bf24:	294b883a 	add	r5,r5,r5
1000bf28:	1807d0ba 	srai	r3,r3,2
1000bf2c:	294b883a 	add	r5,r5,r5
1000bf30:	294b883a 	add	r5,r5,r5
1000bf34:	298b883a 	add	r5,r5,r6
1000bf38:	38c6983a 	sll	r3,r7,r3
1000bf3c:	29c00017 	ldw	r7,0(r5)
1000bf40:	2a7ffe04 	addi	r9,r5,-8
1000bf44:	1886b03a 	or	r3,r3,r2
1000bf48:	82400315 	stw	r9,12(r16)
1000bf4c:	81c00215 	stw	r7,8(r16)
1000bf50:	30c00115 	stw	r3,4(r6)
1000bf54:	2c000015 	stw	r16,0(r5)
1000bf58:	3c000315 	stw	r16,12(r7)
1000bf5c:	2005d0ba 	srai	r2,r4,2
1000bf60:	01400044 	movi	r5,1
1000bf64:	288a983a 	sll	r5,r5,r2
1000bf68:	19406f36 	bltu	r3,r5,1000c128 <_malloc_r+0x324>
1000bf6c:	28c4703a 	and	r2,r5,r3
1000bf70:	10000a1e 	bne	r2,zero,1000bf9c <_malloc_r+0x198>
1000bf74:	00bfff04 	movi	r2,-4
1000bf78:	294b883a 	add	r5,r5,r5
1000bf7c:	2088703a 	and	r4,r4,r2
1000bf80:	28c4703a 	and	r2,r5,r3
1000bf84:	21000104 	addi	r4,r4,4
1000bf88:	1000041e 	bne	r2,zero,1000bf9c <_malloc_r+0x198>
1000bf8c:	294b883a 	add	r5,r5,r5
1000bf90:	28c4703a 	and	r2,r5,r3
1000bf94:	21000104 	addi	r4,r4,4
1000bf98:	103ffc26 	beq	r2,zero,1000bf8c <__alt_data_end+0xf800bf8c>
1000bf9c:	02bfff04 	movi	r10,-4
1000bfa0:	024003c4 	movi	r9,15
1000bfa4:	21800044 	addi	r6,r4,1
1000bfa8:	318d883a 	add	r6,r6,r6
1000bfac:	318d883a 	add	r6,r6,r6
1000bfb0:	318d883a 	add	r6,r6,r6
1000bfb4:	998d883a 	add	r6,r19,r6
1000bfb8:	333ffe04 	addi	r12,r6,-8
1000bfbc:	2017883a 	mov	r11,r4
1000bfc0:	31800104 	addi	r6,r6,4
1000bfc4:	34000017 	ldw	r16,0(r6)
1000bfc8:	31fffd04 	addi	r7,r6,-12
1000bfcc:	81c0041e 	bne	r16,r7,1000bfe0 <_malloc_r+0x1dc>
1000bfd0:	0000fb06 	br	1000c3c0 <_malloc_r+0x5bc>
1000bfd4:	1801030e 	bge	r3,zero,1000c3e4 <_malloc_r+0x5e0>
1000bfd8:	84000317 	ldw	r16,12(r16)
1000bfdc:	81c0f826 	beq	r16,r7,1000c3c0 <_malloc_r+0x5bc>
1000bfe0:	80800117 	ldw	r2,4(r16)
1000bfe4:	1284703a 	and	r2,r2,r10
1000bfe8:	1447c83a 	sub	r3,r2,r17
1000bfec:	48fff90e 	bge	r9,r3,1000bfd4 <__alt_data_end+0xf800bfd4>
1000bff0:	80800317 	ldw	r2,12(r16)
1000bff4:	81000217 	ldw	r4,8(r16)
1000bff8:	89400054 	ori	r5,r17,1
1000bffc:	81400115 	stw	r5,4(r16)
1000c000:	20800315 	stw	r2,12(r4)
1000c004:	11000215 	stw	r4,8(r2)
1000c008:	8463883a 	add	r17,r16,r17
1000c00c:	9c400515 	stw	r17,20(r19)
1000c010:	9c400415 	stw	r17,16(r19)
1000c014:	18800054 	ori	r2,r3,1
1000c018:	88800115 	stw	r2,4(r17)
1000c01c:	8a000315 	stw	r8,12(r17)
1000c020:	8a000215 	stw	r8,8(r17)
1000c024:	88e3883a 	add	r17,r17,r3
1000c028:	88c00015 	stw	r3,0(r17)
1000c02c:	9009883a 	mov	r4,r18
1000c030:	0013e240 	call	10013e24 <__malloc_unlock>
1000c034:	80800204 	addi	r2,r16,8
1000c038:	00001b06 	br	1000c0a8 <_malloc_r+0x2a4>
1000c03c:	04400404 	movi	r17,16
1000c040:	89402536 	bltu	r17,r5,1000c0d8 <_malloc_r+0x2d4>
1000c044:	0013e000 	call	10013e00 <__malloc_lock>
1000c048:	00800184 	movi	r2,6
1000c04c:	01000084 	movi	r4,2
1000c050:	04c400b4 	movhi	r19,4098
1000c054:	1085883a 	add	r2,r2,r2
1000c058:	9cd06e04 	addi	r19,r19,16824
1000c05c:	1085883a 	add	r2,r2,r2
1000c060:	9885883a 	add	r2,r19,r2
1000c064:	14000117 	ldw	r16,4(r2)
1000c068:	10fffe04 	addi	r3,r2,-8
1000c06c:	80c0d926 	beq	r16,r3,1000c3d4 <_malloc_r+0x5d0>
1000c070:	80c00117 	ldw	r3,4(r16)
1000c074:	81000317 	ldw	r4,12(r16)
1000c078:	00bfff04 	movi	r2,-4
1000c07c:	1884703a 	and	r2,r3,r2
1000c080:	81400217 	ldw	r5,8(r16)
1000c084:	8085883a 	add	r2,r16,r2
1000c088:	10c00117 	ldw	r3,4(r2)
1000c08c:	29000315 	stw	r4,12(r5)
1000c090:	21400215 	stw	r5,8(r4)
1000c094:	18c00054 	ori	r3,r3,1
1000c098:	10c00115 	stw	r3,4(r2)
1000c09c:	9009883a 	mov	r4,r18
1000c0a0:	0013e240 	call	10013e24 <__malloc_unlock>
1000c0a4:	80800204 	addi	r2,r16,8
1000c0a8:	dfc00a17 	ldw	ra,40(sp)
1000c0ac:	df000917 	ldw	fp,36(sp)
1000c0b0:	ddc00817 	ldw	r23,32(sp)
1000c0b4:	dd800717 	ldw	r22,28(sp)
1000c0b8:	dd400617 	ldw	r21,24(sp)
1000c0bc:	dd000517 	ldw	r20,20(sp)
1000c0c0:	dcc00417 	ldw	r19,16(sp)
1000c0c4:	dc800317 	ldw	r18,12(sp)
1000c0c8:	dc400217 	ldw	r17,8(sp)
1000c0cc:	dc000117 	ldw	r16,4(sp)
1000c0d0:	dec00b04 	addi	sp,sp,44
1000c0d4:	f800283a 	ret
1000c0d8:	00800304 	movi	r2,12
1000c0dc:	90800015 	stw	r2,0(r18)
1000c0e0:	0005883a 	mov	r2,zero
1000c0e4:	003ff006 	br	1000c0a8 <__alt_data_end+0xf800c0a8>
1000c0e8:	01002004 	movi	r4,128
1000c0ec:	02001004 	movi	r8,64
1000c0f0:	01c00fc4 	movi	r7,63
1000c0f4:	003f6106 	br	1000be7c <__alt_data_end+0xf800be7c>
1000c0f8:	4009883a 	mov	r4,r8
1000c0fc:	003f7506 	br	1000bed4 <__alt_data_end+0xf800bed4>
1000c100:	81000317 	ldw	r4,12(r16)
1000c104:	003fde06 	br	1000c080 <__alt_data_end+0xf800c080>
1000c108:	81c5883a 	add	r2,r16,r7
1000c10c:	11400117 	ldw	r5,4(r2)
1000c110:	9009883a 	mov	r4,r18
1000c114:	29400054 	ori	r5,r5,1
1000c118:	11400115 	stw	r5,4(r2)
1000c11c:	0013e240 	call	10013e24 <__malloc_unlock>
1000c120:	80800204 	addi	r2,r16,8
1000c124:	003fe006 	br	1000c0a8 <__alt_data_end+0xf800c0a8>
1000c128:	9c000217 	ldw	r16,8(r19)
1000c12c:	00bfff04 	movi	r2,-4
1000c130:	85800117 	ldw	r22,4(r16)
1000c134:	b0ac703a 	and	r22,r22,r2
1000c138:	b4400336 	bltu	r22,r17,1000c148 <_malloc_r+0x344>
1000c13c:	b445c83a 	sub	r2,r22,r17
1000c140:	00c003c4 	movi	r3,15
1000c144:	18805d16 	blt	r3,r2,1000c2bc <_malloc_r+0x4b8>
1000c148:	05c400b4 	movhi	r23,4098
1000c14c:	008400f4 	movhi	r2,4099
1000c150:	10912204 	addi	r2,r2,17544
1000c154:	bdd5f504 	addi	r23,r23,22484
1000c158:	15400017 	ldw	r21,0(r2)
1000c15c:	b8c00017 	ldw	r3,0(r23)
1000c160:	00bfffc4 	movi	r2,-1
1000c164:	858d883a 	add	r6,r16,r22
1000c168:	8d6b883a 	add	r21,r17,r21
1000c16c:	1880ea26 	beq	r3,r2,1000c518 <_malloc_r+0x714>
1000c170:	ad4403c4 	addi	r21,r21,4111
1000c174:	00bc0004 	movi	r2,-4096
1000c178:	a8aa703a 	and	r21,r21,r2
1000c17c:	a80b883a 	mov	r5,r21
1000c180:	9009883a 	mov	r4,r18
1000c184:	d9800015 	stw	r6,0(sp)
1000c188:	000e1500 	call	1000e150 <_sbrk_r>
1000c18c:	1029883a 	mov	r20,r2
1000c190:	00bfffc4 	movi	r2,-1
1000c194:	d9800017 	ldw	r6,0(sp)
1000c198:	a080e826 	beq	r20,r2,1000c53c <_malloc_r+0x738>
1000c19c:	a180a636 	bltu	r20,r6,1000c438 <_malloc_r+0x634>
1000c1a0:	070400f4 	movhi	fp,4099
1000c1a4:	e7112b04 	addi	fp,fp,17580
1000c1a8:	e0800017 	ldw	r2,0(fp)
1000c1ac:	a887883a 	add	r3,r21,r2
1000c1b0:	e0c00015 	stw	r3,0(fp)
1000c1b4:	3500e626 	beq	r6,r20,1000c550 <_malloc_r+0x74c>
1000c1b8:	b9000017 	ldw	r4,0(r23)
1000c1bc:	00bfffc4 	movi	r2,-1
1000c1c0:	2080ee26 	beq	r4,r2,1000c57c <_malloc_r+0x778>
1000c1c4:	a185c83a 	sub	r2,r20,r6
1000c1c8:	10c5883a 	add	r2,r2,r3
1000c1cc:	e0800015 	stw	r2,0(fp)
1000c1d0:	a0c001cc 	andi	r3,r20,7
1000c1d4:	1800bc26 	beq	r3,zero,1000c4c8 <_malloc_r+0x6c4>
1000c1d8:	a0e9c83a 	sub	r20,r20,r3
1000c1dc:	00840204 	movi	r2,4104
1000c1e0:	a5000204 	addi	r20,r20,8
1000c1e4:	10c7c83a 	sub	r3,r2,r3
1000c1e8:	a545883a 	add	r2,r20,r21
1000c1ec:	1083ffcc 	andi	r2,r2,4095
1000c1f0:	18abc83a 	sub	r21,r3,r2
1000c1f4:	a80b883a 	mov	r5,r21
1000c1f8:	9009883a 	mov	r4,r18
1000c1fc:	000e1500 	call	1000e150 <_sbrk_r>
1000c200:	00ffffc4 	movi	r3,-1
1000c204:	10c0e126 	beq	r2,r3,1000c58c <_malloc_r+0x788>
1000c208:	1505c83a 	sub	r2,r2,r20
1000c20c:	1545883a 	add	r2,r2,r21
1000c210:	10800054 	ori	r2,r2,1
1000c214:	e0c00017 	ldw	r3,0(fp)
1000c218:	9d000215 	stw	r20,8(r19)
1000c21c:	a0800115 	stw	r2,4(r20)
1000c220:	a8c7883a 	add	r3,r21,r3
1000c224:	e0c00015 	stw	r3,0(fp)
1000c228:	84c00e26 	beq	r16,r19,1000c264 <_malloc_r+0x460>
1000c22c:	018003c4 	movi	r6,15
1000c230:	3580a72e 	bgeu	r6,r22,1000c4d0 <_malloc_r+0x6cc>
1000c234:	81400117 	ldw	r5,4(r16)
1000c238:	013ffe04 	movi	r4,-8
1000c23c:	b0bffd04 	addi	r2,r22,-12
1000c240:	1104703a 	and	r2,r2,r4
1000c244:	2900004c 	andi	r4,r5,1
1000c248:	2088b03a 	or	r4,r4,r2
1000c24c:	81000115 	stw	r4,4(r16)
1000c250:	01400144 	movi	r5,5
1000c254:	8089883a 	add	r4,r16,r2
1000c258:	21400115 	stw	r5,4(r4)
1000c25c:	21400215 	stw	r5,8(r4)
1000c260:	3080cd36 	bltu	r6,r2,1000c598 <_malloc_r+0x794>
1000c264:	008400f4 	movhi	r2,4099
1000c268:	10912104 	addi	r2,r2,17540
1000c26c:	11000017 	ldw	r4,0(r2)
1000c270:	20c0012e 	bgeu	r4,r3,1000c278 <_malloc_r+0x474>
1000c274:	10c00015 	stw	r3,0(r2)
1000c278:	008400f4 	movhi	r2,4099
1000c27c:	10912004 	addi	r2,r2,17536
1000c280:	11000017 	ldw	r4,0(r2)
1000c284:	9c000217 	ldw	r16,8(r19)
1000c288:	20c0012e 	bgeu	r4,r3,1000c290 <_malloc_r+0x48c>
1000c28c:	10c00015 	stw	r3,0(r2)
1000c290:	80c00117 	ldw	r3,4(r16)
1000c294:	00bfff04 	movi	r2,-4
1000c298:	1886703a 	and	r3,r3,r2
1000c29c:	1c45c83a 	sub	r2,r3,r17
1000c2a0:	1c400236 	bltu	r3,r17,1000c2ac <_malloc_r+0x4a8>
1000c2a4:	00c003c4 	movi	r3,15
1000c2a8:	18800416 	blt	r3,r2,1000c2bc <_malloc_r+0x4b8>
1000c2ac:	9009883a 	mov	r4,r18
1000c2b0:	0013e240 	call	10013e24 <__malloc_unlock>
1000c2b4:	0005883a 	mov	r2,zero
1000c2b8:	003f7b06 	br	1000c0a8 <__alt_data_end+0xf800c0a8>
1000c2bc:	88c00054 	ori	r3,r17,1
1000c2c0:	80c00115 	stw	r3,4(r16)
1000c2c4:	8463883a 	add	r17,r16,r17
1000c2c8:	10800054 	ori	r2,r2,1
1000c2cc:	9c400215 	stw	r17,8(r19)
1000c2d0:	88800115 	stw	r2,4(r17)
1000c2d4:	9009883a 	mov	r4,r18
1000c2d8:	0013e240 	call	10013e24 <__malloc_unlock>
1000c2dc:	80800204 	addi	r2,r16,8
1000c2e0:	003f7106 	br	1000c0a8 <__alt_data_end+0xf800c0a8>
1000c2e4:	00c00504 	movi	r3,20
1000c2e8:	18804a2e 	bgeu	r3,r2,1000c414 <_malloc_r+0x610>
1000c2ec:	00c01504 	movi	r3,84
1000c2f0:	18806e36 	bltu	r3,r2,1000c4ac <_malloc_r+0x6a8>
1000c2f4:	8804d33a 	srli	r2,r17,12
1000c2f8:	12001bc4 	addi	r8,r2,111
1000c2fc:	11c01b84 	addi	r7,r2,110
1000c300:	4209883a 	add	r4,r8,r8
1000c304:	003edd06 	br	1000be7c <__alt_data_end+0xf800be7c>
1000c308:	3804d27a 	srli	r2,r7,9
1000c30c:	00c00104 	movi	r3,4
1000c310:	1880442e 	bgeu	r3,r2,1000c424 <_malloc_r+0x620>
1000c314:	00c00504 	movi	r3,20
1000c318:	18808136 	bltu	r3,r2,1000c520 <_malloc_r+0x71c>
1000c31c:	11401704 	addi	r5,r2,92
1000c320:	10c016c4 	addi	r3,r2,91
1000c324:	294b883a 	add	r5,r5,r5
1000c328:	294b883a 	add	r5,r5,r5
1000c32c:	294b883a 	add	r5,r5,r5
1000c330:	994b883a 	add	r5,r19,r5
1000c334:	28800017 	ldw	r2,0(r5)
1000c338:	018400b4 	movhi	r6,4098
1000c33c:	297ffe04 	addi	r5,r5,-8
1000c340:	31906e04 	addi	r6,r6,16824
1000c344:	28806526 	beq	r5,r2,1000c4dc <_malloc_r+0x6d8>
1000c348:	01bfff04 	movi	r6,-4
1000c34c:	10c00117 	ldw	r3,4(r2)
1000c350:	1986703a 	and	r3,r3,r6
1000c354:	38c0022e 	bgeu	r7,r3,1000c360 <_malloc_r+0x55c>
1000c358:	10800217 	ldw	r2,8(r2)
1000c35c:	28bffb1e 	bne	r5,r2,1000c34c <__alt_data_end+0xf800c34c>
1000c360:	11400317 	ldw	r5,12(r2)
1000c364:	98c00117 	ldw	r3,4(r19)
1000c368:	81400315 	stw	r5,12(r16)
1000c36c:	80800215 	stw	r2,8(r16)
1000c370:	2c000215 	stw	r16,8(r5)
1000c374:	14000315 	stw	r16,12(r2)
1000c378:	003ef806 	br	1000bf5c <__alt_data_end+0xf800bf5c>
1000c37c:	88c00054 	ori	r3,r17,1
1000c380:	80c00115 	stw	r3,4(r16)
1000c384:	8463883a 	add	r17,r16,r17
1000c388:	34400515 	stw	r17,20(r6)
1000c38c:	34400415 	stw	r17,16(r6)
1000c390:	10c00054 	ori	r3,r2,1
1000c394:	8a000315 	stw	r8,12(r17)
1000c398:	8a000215 	stw	r8,8(r17)
1000c39c:	88c00115 	stw	r3,4(r17)
1000c3a0:	88a3883a 	add	r17,r17,r2
1000c3a4:	88800015 	stw	r2,0(r17)
1000c3a8:	9009883a 	mov	r4,r18
1000c3ac:	0013e240 	call	10013e24 <__malloc_unlock>
1000c3b0:	80800204 	addi	r2,r16,8
1000c3b4:	003f3c06 	br	1000c0a8 <__alt_data_end+0xf800c0a8>
1000c3b8:	30c00117 	ldw	r3,4(r6)
1000c3bc:	003ee706 	br	1000bf5c <__alt_data_end+0xf800bf5c>
1000c3c0:	5ac00044 	addi	r11,r11,1
1000c3c4:	588000cc 	andi	r2,r11,3
1000c3c8:	31800204 	addi	r6,r6,8
1000c3cc:	103efd1e 	bne	r2,zero,1000bfc4 <__alt_data_end+0xf800bfc4>
1000c3d0:	00002406 	br	1000c464 <_malloc_r+0x660>
1000c3d4:	14000317 	ldw	r16,12(r2)
1000c3d8:	143f251e 	bne	r2,r16,1000c070 <__alt_data_end+0xf800c070>
1000c3dc:	21000084 	addi	r4,r4,2
1000c3e0:	003ebc06 	br	1000bed4 <__alt_data_end+0xf800bed4>
1000c3e4:	8085883a 	add	r2,r16,r2
1000c3e8:	10c00117 	ldw	r3,4(r2)
1000c3ec:	81000317 	ldw	r4,12(r16)
1000c3f0:	81400217 	ldw	r5,8(r16)
1000c3f4:	18c00054 	ori	r3,r3,1
1000c3f8:	10c00115 	stw	r3,4(r2)
1000c3fc:	29000315 	stw	r4,12(r5)
1000c400:	21400215 	stw	r5,8(r4)
1000c404:	9009883a 	mov	r4,r18
1000c408:	0013e240 	call	10013e24 <__malloc_unlock>
1000c40c:	80800204 	addi	r2,r16,8
1000c410:	003f2506 	br	1000c0a8 <__alt_data_end+0xf800c0a8>
1000c414:	12001704 	addi	r8,r2,92
1000c418:	11c016c4 	addi	r7,r2,91
1000c41c:	4209883a 	add	r4,r8,r8
1000c420:	003e9606 	br	1000be7c <__alt_data_end+0xf800be7c>
1000c424:	3804d1ba 	srli	r2,r7,6
1000c428:	11400e44 	addi	r5,r2,57
1000c42c:	10c00e04 	addi	r3,r2,56
1000c430:	294b883a 	add	r5,r5,r5
1000c434:	003fbc06 	br	1000c328 <__alt_data_end+0xf800c328>
1000c438:	84ff5926 	beq	r16,r19,1000c1a0 <__alt_data_end+0xf800c1a0>
1000c43c:	008400b4 	movhi	r2,4098
1000c440:	10906e04 	addi	r2,r2,16824
1000c444:	14000217 	ldw	r16,8(r2)
1000c448:	00bfff04 	movi	r2,-4
1000c44c:	80c00117 	ldw	r3,4(r16)
1000c450:	1886703a 	and	r3,r3,r2
1000c454:	003f9106 	br	1000c29c <__alt_data_end+0xf800c29c>
1000c458:	60800217 	ldw	r2,8(r12)
1000c45c:	213fffc4 	addi	r4,r4,-1
1000c460:	1300651e 	bne	r2,r12,1000c5f8 <_malloc_r+0x7f4>
1000c464:	208000cc 	andi	r2,r4,3
1000c468:	633ffe04 	addi	r12,r12,-8
1000c46c:	103ffa1e 	bne	r2,zero,1000c458 <__alt_data_end+0xf800c458>
1000c470:	98800117 	ldw	r2,4(r19)
1000c474:	0146303a 	nor	r3,zero,r5
1000c478:	1884703a 	and	r2,r3,r2
1000c47c:	98800115 	stw	r2,4(r19)
1000c480:	294b883a 	add	r5,r5,r5
1000c484:	117f2836 	bltu	r2,r5,1000c128 <__alt_data_end+0xf800c128>
1000c488:	283f2726 	beq	r5,zero,1000c128 <__alt_data_end+0xf800c128>
1000c48c:	2886703a 	and	r3,r5,r2
1000c490:	5809883a 	mov	r4,r11
1000c494:	183ec31e 	bne	r3,zero,1000bfa4 <__alt_data_end+0xf800bfa4>
1000c498:	294b883a 	add	r5,r5,r5
1000c49c:	2886703a 	and	r3,r5,r2
1000c4a0:	21000104 	addi	r4,r4,4
1000c4a4:	183ffc26 	beq	r3,zero,1000c498 <__alt_data_end+0xf800c498>
1000c4a8:	003ebe06 	br	1000bfa4 <__alt_data_end+0xf800bfa4>
1000c4ac:	00c05504 	movi	r3,340
1000c4b0:	18801236 	bltu	r3,r2,1000c4fc <_malloc_r+0x6f8>
1000c4b4:	8804d3fa 	srli	r2,r17,15
1000c4b8:	12001e04 	addi	r8,r2,120
1000c4bc:	11c01dc4 	addi	r7,r2,119
1000c4c0:	4209883a 	add	r4,r8,r8
1000c4c4:	003e6d06 	br	1000be7c <__alt_data_end+0xf800be7c>
1000c4c8:	00c40004 	movi	r3,4096
1000c4cc:	003f4606 	br	1000c1e8 <__alt_data_end+0xf800c1e8>
1000c4d0:	00800044 	movi	r2,1
1000c4d4:	a0800115 	stw	r2,4(r20)
1000c4d8:	003f7406 	br	1000c2ac <__alt_data_end+0xf800c2ac>
1000c4dc:	1805d0ba 	srai	r2,r3,2
1000c4e0:	01c00044 	movi	r7,1
1000c4e4:	30c00117 	ldw	r3,4(r6)
1000c4e8:	388e983a 	sll	r7,r7,r2
1000c4ec:	2805883a 	mov	r2,r5
1000c4f0:	38c6b03a 	or	r3,r7,r3
1000c4f4:	30c00115 	stw	r3,4(r6)
1000c4f8:	003f9b06 	br	1000c368 <__alt_data_end+0xf800c368>
1000c4fc:	00c15504 	movi	r3,1364
1000c500:	18801a36 	bltu	r3,r2,1000c56c <_malloc_r+0x768>
1000c504:	8804d4ba 	srli	r2,r17,18
1000c508:	12001f44 	addi	r8,r2,125
1000c50c:	11c01f04 	addi	r7,r2,124
1000c510:	4209883a 	add	r4,r8,r8
1000c514:	003e5906 	br	1000be7c <__alt_data_end+0xf800be7c>
1000c518:	ad400404 	addi	r21,r21,16
1000c51c:	003f1706 	br	1000c17c <__alt_data_end+0xf800c17c>
1000c520:	00c01504 	movi	r3,84
1000c524:	18802336 	bltu	r3,r2,1000c5b4 <_malloc_r+0x7b0>
1000c528:	3804d33a 	srli	r2,r7,12
1000c52c:	11401bc4 	addi	r5,r2,111
1000c530:	10c01b84 	addi	r3,r2,110
1000c534:	294b883a 	add	r5,r5,r5
1000c538:	003f7b06 	br	1000c328 <__alt_data_end+0xf800c328>
1000c53c:	9c000217 	ldw	r16,8(r19)
1000c540:	00bfff04 	movi	r2,-4
1000c544:	80c00117 	ldw	r3,4(r16)
1000c548:	1886703a 	and	r3,r3,r2
1000c54c:	003f5306 	br	1000c29c <__alt_data_end+0xf800c29c>
1000c550:	3083ffcc 	andi	r2,r6,4095
1000c554:	103f181e 	bne	r2,zero,1000c1b8 <__alt_data_end+0xf800c1b8>
1000c558:	99000217 	ldw	r4,8(r19)
1000c55c:	b545883a 	add	r2,r22,r21
1000c560:	10800054 	ori	r2,r2,1
1000c564:	20800115 	stw	r2,4(r4)
1000c568:	003f3e06 	br	1000c264 <__alt_data_end+0xf800c264>
1000c56c:	01003f84 	movi	r4,254
1000c570:	02001fc4 	movi	r8,127
1000c574:	01c01f84 	movi	r7,126
1000c578:	003e4006 	br	1000be7c <__alt_data_end+0xf800be7c>
1000c57c:	008400b4 	movhi	r2,4098
1000c580:	1095f504 	addi	r2,r2,22484
1000c584:	15000015 	stw	r20,0(r2)
1000c588:	003f1106 	br	1000c1d0 <__alt_data_end+0xf800c1d0>
1000c58c:	00800044 	movi	r2,1
1000c590:	002b883a 	mov	r21,zero
1000c594:	003f1f06 	br	1000c214 <__alt_data_end+0xf800c214>
1000c598:	81400204 	addi	r5,r16,8
1000c59c:	9009883a 	mov	r4,r18
1000c5a0:	000b20c0 	call	1000b20c <_free_r>
1000c5a4:	008400f4 	movhi	r2,4099
1000c5a8:	10912b04 	addi	r2,r2,17580
1000c5ac:	10c00017 	ldw	r3,0(r2)
1000c5b0:	003f2c06 	br	1000c264 <__alt_data_end+0xf800c264>
1000c5b4:	00c05504 	movi	r3,340
1000c5b8:	18800536 	bltu	r3,r2,1000c5d0 <_malloc_r+0x7cc>
1000c5bc:	3804d3fa 	srli	r2,r7,15
1000c5c0:	11401e04 	addi	r5,r2,120
1000c5c4:	10c01dc4 	addi	r3,r2,119
1000c5c8:	294b883a 	add	r5,r5,r5
1000c5cc:	003f5606 	br	1000c328 <__alt_data_end+0xf800c328>
1000c5d0:	00c15504 	movi	r3,1364
1000c5d4:	18800536 	bltu	r3,r2,1000c5ec <_malloc_r+0x7e8>
1000c5d8:	3804d4ba 	srli	r2,r7,18
1000c5dc:	11401f44 	addi	r5,r2,125
1000c5e0:	10c01f04 	addi	r3,r2,124
1000c5e4:	294b883a 	add	r5,r5,r5
1000c5e8:	003f4f06 	br	1000c328 <__alt_data_end+0xf800c328>
1000c5ec:	01403f84 	movi	r5,254
1000c5f0:	00c01f84 	movi	r3,126
1000c5f4:	003f4c06 	br	1000c328 <__alt_data_end+0xf800c328>
1000c5f8:	98800117 	ldw	r2,4(r19)
1000c5fc:	003fa006 	br	1000c480 <__alt_data_end+0xf800c480>
1000c600:	8808d0fa 	srli	r4,r17,3
1000c604:	20800044 	addi	r2,r4,1
1000c608:	1085883a 	add	r2,r2,r2
1000c60c:	003e9006 	br	1000c050 <__alt_data_end+0xf800c050>

1000c610 <memchr>:
1000c610:	208000cc 	andi	r2,r4,3
1000c614:	280f883a 	mov	r7,r5
1000c618:	10003426 	beq	r2,zero,1000c6ec <memchr+0xdc>
1000c61c:	30bfffc4 	addi	r2,r6,-1
1000c620:	30001a26 	beq	r6,zero,1000c68c <memchr+0x7c>
1000c624:	20c00003 	ldbu	r3,0(r4)
1000c628:	29803fcc 	andi	r6,r5,255
1000c62c:	30c0051e 	bne	r6,r3,1000c644 <memchr+0x34>
1000c630:	00001806 	br	1000c694 <memchr+0x84>
1000c634:	10001526 	beq	r2,zero,1000c68c <memchr+0x7c>
1000c638:	20c00003 	ldbu	r3,0(r4)
1000c63c:	10bfffc4 	addi	r2,r2,-1
1000c640:	30c01426 	beq	r6,r3,1000c694 <memchr+0x84>
1000c644:	21000044 	addi	r4,r4,1
1000c648:	20c000cc 	andi	r3,r4,3
1000c64c:	183ff91e 	bne	r3,zero,1000c634 <__alt_data_end+0xf800c634>
1000c650:	020000c4 	movi	r8,3
1000c654:	40801136 	bltu	r8,r2,1000c69c <memchr+0x8c>
1000c658:	10000c26 	beq	r2,zero,1000c68c <memchr+0x7c>
1000c65c:	20c00003 	ldbu	r3,0(r4)
1000c660:	29403fcc 	andi	r5,r5,255
1000c664:	28c00b26 	beq	r5,r3,1000c694 <memchr+0x84>
1000c668:	20c00044 	addi	r3,r4,1
1000c66c:	39803fcc 	andi	r6,r7,255
1000c670:	2089883a 	add	r4,r4,r2
1000c674:	00000306 	br	1000c684 <memchr+0x74>
1000c678:	18c00044 	addi	r3,r3,1
1000c67c:	197fffc3 	ldbu	r5,-1(r3)
1000c680:	31400526 	beq	r6,r5,1000c698 <memchr+0x88>
1000c684:	1805883a 	mov	r2,r3
1000c688:	20fffb1e 	bne	r4,r3,1000c678 <__alt_data_end+0xf800c678>
1000c68c:	0005883a 	mov	r2,zero
1000c690:	f800283a 	ret
1000c694:	2005883a 	mov	r2,r4
1000c698:	f800283a 	ret
1000c69c:	28c03fcc 	andi	r3,r5,255
1000c6a0:	1812923a 	slli	r9,r3,8
1000c6a4:	02ffbff4 	movhi	r11,65279
1000c6a8:	02a02074 	movhi	r10,32897
1000c6ac:	48d2b03a 	or	r9,r9,r3
1000c6b0:	4806943a 	slli	r3,r9,16
1000c6b4:	5affbfc4 	addi	r11,r11,-257
1000c6b8:	52a02004 	addi	r10,r10,-32640
1000c6bc:	48d2b03a 	or	r9,r9,r3
1000c6c0:	20c00017 	ldw	r3,0(r4)
1000c6c4:	48c6f03a 	xor	r3,r9,r3
1000c6c8:	1acd883a 	add	r6,r3,r11
1000c6cc:	00c6303a 	nor	r3,zero,r3
1000c6d0:	30c6703a 	and	r3,r6,r3
1000c6d4:	1a86703a 	and	r3,r3,r10
1000c6d8:	183fe01e 	bne	r3,zero,1000c65c <__alt_data_end+0xf800c65c>
1000c6dc:	10bfff04 	addi	r2,r2,-4
1000c6e0:	21000104 	addi	r4,r4,4
1000c6e4:	40bff636 	bltu	r8,r2,1000c6c0 <__alt_data_end+0xf800c6c0>
1000c6e8:	003fdb06 	br	1000c658 <__alt_data_end+0xf800c658>
1000c6ec:	3005883a 	mov	r2,r6
1000c6f0:	003fd706 	br	1000c650 <__alt_data_end+0xf800c650>

1000c6f4 <memcpy>:
1000c6f4:	defffd04 	addi	sp,sp,-12
1000c6f8:	dfc00215 	stw	ra,8(sp)
1000c6fc:	dc400115 	stw	r17,4(sp)
1000c700:	dc000015 	stw	r16,0(sp)
1000c704:	00c003c4 	movi	r3,15
1000c708:	2005883a 	mov	r2,r4
1000c70c:	1980452e 	bgeu	r3,r6,1000c824 <memcpy+0x130>
1000c710:	2906b03a 	or	r3,r5,r4
1000c714:	18c000cc 	andi	r3,r3,3
1000c718:	1800441e 	bne	r3,zero,1000c82c <memcpy+0x138>
1000c71c:	347ffc04 	addi	r17,r6,-16
1000c720:	8822d13a 	srli	r17,r17,4
1000c724:	28c00104 	addi	r3,r5,4
1000c728:	23400104 	addi	r13,r4,4
1000c72c:	8820913a 	slli	r16,r17,4
1000c730:	2b000204 	addi	r12,r5,8
1000c734:	22c00204 	addi	r11,r4,8
1000c738:	84000504 	addi	r16,r16,20
1000c73c:	2a800304 	addi	r10,r5,12
1000c740:	22400304 	addi	r9,r4,12
1000c744:	2c21883a 	add	r16,r5,r16
1000c748:	2811883a 	mov	r8,r5
1000c74c:	200f883a 	mov	r7,r4
1000c750:	41000017 	ldw	r4,0(r8)
1000c754:	1fc00017 	ldw	ra,0(r3)
1000c758:	63c00017 	ldw	r15,0(r12)
1000c75c:	39000015 	stw	r4,0(r7)
1000c760:	53800017 	ldw	r14,0(r10)
1000c764:	6fc00015 	stw	ra,0(r13)
1000c768:	5bc00015 	stw	r15,0(r11)
1000c76c:	4b800015 	stw	r14,0(r9)
1000c770:	18c00404 	addi	r3,r3,16
1000c774:	39c00404 	addi	r7,r7,16
1000c778:	42000404 	addi	r8,r8,16
1000c77c:	6b400404 	addi	r13,r13,16
1000c780:	63000404 	addi	r12,r12,16
1000c784:	5ac00404 	addi	r11,r11,16
1000c788:	52800404 	addi	r10,r10,16
1000c78c:	4a400404 	addi	r9,r9,16
1000c790:	1c3fef1e 	bne	r3,r16,1000c750 <__alt_data_end+0xf800c750>
1000c794:	89c00044 	addi	r7,r17,1
1000c798:	380e913a 	slli	r7,r7,4
1000c79c:	310003cc 	andi	r4,r6,15
1000c7a0:	02c000c4 	movi	r11,3
1000c7a4:	11c7883a 	add	r3,r2,r7
1000c7a8:	29cb883a 	add	r5,r5,r7
1000c7ac:	5900212e 	bgeu	r11,r4,1000c834 <memcpy+0x140>
1000c7b0:	1813883a 	mov	r9,r3
1000c7b4:	2811883a 	mov	r8,r5
1000c7b8:	200f883a 	mov	r7,r4
1000c7bc:	42800017 	ldw	r10,0(r8)
1000c7c0:	4a400104 	addi	r9,r9,4
1000c7c4:	39ffff04 	addi	r7,r7,-4
1000c7c8:	4abfff15 	stw	r10,-4(r9)
1000c7cc:	42000104 	addi	r8,r8,4
1000c7d0:	59fffa36 	bltu	r11,r7,1000c7bc <__alt_data_end+0xf800c7bc>
1000c7d4:	213fff04 	addi	r4,r4,-4
1000c7d8:	2008d0ba 	srli	r4,r4,2
1000c7dc:	318000cc 	andi	r6,r6,3
1000c7e0:	21000044 	addi	r4,r4,1
1000c7e4:	2109883a 	add	r4,r4,r4
1000c7e8:	2109883a 	add	r4,r4,r4
1000c7ec:	1907883a 	add	r3,r3,r4
1000c7f0:	290b883a 	add	r5,r5,r4
1000c7f4:	30000626 	beq	r6,zero,1000c810 <memcpy+0x11c>
1000c7f8:	198d883a 	add	r6,r3,r6
1000c7fc:	29c00003 	ldbu	r7,0(r5)
1000c800:	18c00044 	addi	r3,r3,1
1000c804:	29400044 	addi	r5,r5,1
1000c808:	19ffffc5 	stb	r7,-1(r3)
1000c80c:	19bffb1e 	bne	r3,r6,1000c7fc <__alt_data_end+0xf800c7fc>
1000c810:	dfc00217 	ldw	ra,8(sp)
1000c814:	dc400117 	ldw	r17,4(sp)
1000c818:	dc000017 	ldw	r16,0(sp)
1000c81c:	dec00304 	addi	sp,sp,12
1000c820:	f800283a 	ret
1000c824:	2007883a 	mov	r3,r4
1000c828:	003ff206 	br	1000c7f4 <__alt_data_end+0xf800c7f4>
1000c82c:	2007883a 	mov	r3,r4
1000c830:	003ff106 	br	1000c7f8 <__alt_data_end+0xf800c7f8>
1000c834:	200d883a 	mov	r6,r4
1000c838:	003fee06 	br	1000c7f4 <__alt_data_end+0xf800c7f4>

1000c83c <memmove>:
1000c83c:	2005883a 	mov	r2,r4
1000c840:	29000b2e 	bgeu	r5,r4,1000c870 <memmove+0x34>
1000c844:	298f883a 	add	r7,r5,r6
1000c848:	21c0092e 	bgeu	r4,r7,1000c870 <memmove+0x34>
1000c84c:	2187883a 	add	r3,r4,r6
1000c850:	198bc83a 	sub	r5,r3,r6
1000c854:	30004826 	beq	r6,zero,1000c978 <memmove+0x13c>
1000c858:	39ffffc4 	addi	r7,r7,-1
1000c85c:	39000003 	ldbu	r4,0(r7)
1000c860:	18ffffc4 	addi	r3,r3,-1
1000c864:	19000005 	stb	r4,0(r3)
1000c868:	28fffb1e 	bne	r5,r3,1000c858 <__alt_data_end+0xf800c858>
1000c86c:	f800283a 	ret
1000c870:	00c003c4 	movi	r3,15
1000c874:	1980412e 	bgeu	r3,r6,1000c97c <memmove+0x140>
1000c878:	2886b03a 	or	r3,r5,r2
1000c87c:	18c000cc 	andi	r3,r3,3
1000c880:	1800401e 	bne	r3,zero,1000c984 <memmove+0x148>
1000c884:	33fffc04 	addi	r15,r6,-16
1000c888:	781ed13a 	srli	r15,r15,4
1000c88c:	28c00104 	addi	r3,r5,4
1000c890:	13400104 	addi	r13,r2,4
1000c894:	781c913a 	slli	r14,r15,4
1000c898:	2b000204 	addi	r12,r5,8
1000c89c:	12c00204 	addi	r11,r2,8
1000c8a0:	73800504 	addi	r14,r14,20
1000c8a4:	2a800304 	addi	r10,r5,12
1000c8a8:	12400304 	addi	r9,r2,12
1000c8ac:	2b9d883a 	add	r14,r5,r14
1000c8b0:	2811883a 	mov	r8,r5
1000c8b4:	100f883a 	mov	r7,r2
1000c8b8:	41000017 	ldw	r4,0(r8)
1000c8bc:	39c00404 	addi	r7,r7,16
1000c8c0:	18c00404 	addi	r3,r3,16
1000c8c4:	393ffc15 	stw	r4,-16(r7)
1000c8c8:	193ffc17 	ldw	r4,-16(r3)
1000c8cc:	6b400404 	addi	r13,r13,16
1000c8d0:	5ac00404 	addi	r11,r11,16
1000c8d4:	693ffc15 	stw	r4,-16(r13)
1000c8d8:	61000017 	ldw	r4,0(r12)
1000c8dc:	4a400404 	addi	r9,r9,16
1000c8e0:	42000404 	addi	r8,r8,16
1000c8e4:	593ffc15 	stw	r4,-16(r11)
1000c8e8:	51000017 	ldw	r4,0(r10)
1000c8ec:	63000404 	addi	r12,r12,16
1000c8f0:	52800404 	addi	r10,r10,16
1000c8f4:	493ffc15 	stw	r4,-16(r9)
1000c8f8:	1bbfef1e 	bne	r3,r14,1000c8b8 <__alt_data_end+0xf800c8b8>
1000c8fc:	79000044 	addi	r4,r15,1
1000c900:	2008913a 	slli	r4,r4,4
1000c904:	328003cc 	andi	r10,r6,15
1000c908:	02c000c4 	movi	r11,3
1000c90c:	1107883a 	add	r3,r2,r4
1000c910:	290b883a 	add	r5,r5,r4
1000c914:	5a801e2e 	bgeu	r11,r10,1000c990 <memmove+0x154>
1000c918:	1813883a 	mov	r9,r3
1000c91c:	2811883a 	mov	r8,r5
1000c920:	500f883a 	mov	r7,r10
1000c924:	41000017 	ldw	r4,0(r8)
1000c928:	4a400104 	addi	r9,r9,4
1000c92c:	39ffff04 	addi	r7,r7,-4
1000c930:	493fff15 	stw	r4,-4(r9)
1000c934:	42000104 	addi	r8,r8,4
1000c938:	59fffa36 	bltu	r11,r7,1000c924 <__alt_data_end+0xf800c924>
1000c93c:	513fff04 	addi	r4,r10,-4
1000c940:	2008d0ba 	srli	r4,r4,2
1000c944:	318000cc 	andi	r6,r6,3
1000c948:	21000044 	addi	r4,r4,1
1000c94c:	2109883a 	add	r4,r4,r4
1000c950:	2109883a 	add	r4,r4,r4
1000c954:	1907883a 	add	r3,r3,r4
1000c958:	290b883a 	add	r5,r5,r4
1000c95c:	30000b26 	beq	r6,zero,1000c98c <memmove+0x150>
1000c960:	198d883a 	add	r6,r3,r6
1000c964:	29c00003 	ldbu	r7,0(r5)
1000c968:	18c00044 	addi	r3,r3,1
1000c96c:	29400044 	addi	r5,r5,1
1000c970:	19ffffc5 	stb	r7,-1(r3)
1000c974:	19bffb1e 	bne	r3,r6,1000c964 <__alt_data_end+0xf800c964>
1000c978:	f800283a 	ret
1000c97c:	1007883a 	mov	r3,r2
1000c980:	003ff606 	br	1000c95c <__alt_data_end+0xf800c95c>
1000c984:	1007883a 	mov	r3,r2
1000c988:	003ff506 	br	1000c960 <__alt_data_end+0xf800c960>
1000c98c:	f800283a 	ret
1000c990:	500d883a 	mov	r6,r10
1000c994:	003ff106 	br	1000c95c <__alt_data_end+0xf800c95c>

1000c998 <memset>:
1000c998:	20c000cc 	andi	r3,r4,3
1000c99c:	2005883a 	mov	r2,r4
1000c9a0:	18004426 	beq	r3,zero,1000cab4 <memset+0x11c>
1000c9a4:	31ffffc4 	addi	r7,r6,-1
1000c9a8:	30004026 	beq	r6,zero,1000caac <memset+0x114>
1000c9ac:	2813883a 	mov	r9,r5
1000c9b0:	200d883a 	mov	r6,r4
1000c9b4:	2007883a 	mov	r3,r4
1000c9b8:	00000406 	br	1000c9cc <memset+0x34>
1000c9bc:	3a3fffc4 	addi	r8,r7,-1
1000c9c0:	31800044 	addi	r6,r6,1
1000c9c4:	38003926 	beq	r7,zero,1000caac <memset+0x114>
1000c9c8:	400f883a 	mov	r7,r8
1000c9cc:	18c00044 	addi	r3,r3,1
1000c9d0:	32400005 	stb	r9,0(r6)
1000c9d4:	1a0000cc 	andi	r8,r3,3
1000c9d8:	403ff81e 	bne	r8,zero,1000c9bc <__alt_data_end+0xf800c9bc>
1000c9dc:	010000c4 	movi	r4,3
1000c9e0:	21c02d2e 	bgeu	r4,r7,1000ca98 <memset+0x100>
1000c9e4:	29003fcc 	andi	r4,r5,255
1000c9e8:	200c923a 	slli	r6,r4,8
1000c9ec:	3108b03a 	or	r4,r6,r4
1000c9f0:	200c943a 	slli	r6,r4,16
1000c9f4:	218cb03a 	or	r6,r4,r6
1000c9f8:	010003c4 	movi	r4,15
1000c9fc:	21c0182e 	bgeu	r4,r7,1000ca60 <memset+0xc8>
1000ca00:	3b3ffc04 	addi	r12,r7,-16
1000ca04:	6018d13a 	srli	r12,r12,4
1000ca08:	1a000104 	addi	r8,r3,4
1000ca0c:	1ac00204 	addi	r11,r3,8
1000ca10:	6008913a 	slli	r4,r12,4
1000ca14:	1a800304 	addi	r10,r3,12
1000ca18:	1813883a 	mov	r9,r3
1000ca1c:	21000504 	addi	r4,r4,20
1000ca20:	1909883a 	add	r4,r3,r4
1000ca24:	49800015 	stw	r6,0(r9)
1000ca28:	41800015 	stw	r6,0(r8)
1000ca2c:	59800015 	stw	r6,0(r11)
1000ca30:	51800015 	stw	r6,0(r10)
1000ca34:	42000404 	addi	r8,r8,16
1000ca38:	4a400404 	addi	r9,r9,16
1000ca3c:	5ac00404 	addi	r11,r11,16
1000ca40:	52800404 	addi	r10,r10,16
1000ca44:	413ff71e 	bne	r8,r4,1000ca24 <__alt_data_end+0xf800ca24>
1000ca48:	63000044 	addi	r12,r12,1
1000ca4c:	6018913a 	slli	r12,r12,4
1000ca50:	39c003cc 	andi	r7,r7,15
1000ca54:	010000c4 	movi	r4,3
1000ca58:	1b07883a 	add	r3,r3,r12
1000ca5c:	21c00e2e 	bgeu	r4,r7,1000ca98 <memset+0x100>
1000ca60:	1813883a 	mov	r9,r3
1000ca64:	3811883a 	mov	r8,r7
1000ca68:	010000c4 	movi	r4,3
1000ca6c:	49800015 	stw	r6,0(r9)
1000ca70:	423fff04 	addi	r8,r8,-4
1000ca74:	4a400104 	addi	r9,r9,4
1000ca78:	223ffc36 	bltu	r4,r8,1000ca6c <__alt_data_end+0xf800ca6c>
1000ca7c:	393fff04 	addi	r4,r7,-4
1000ca80:	2008d0ba 	srli	r4,r4,2
1000ca84:	39c000cc 	andi	r7,r7,3
1000ca88:	21000044 	addi	r4,r4,1
1000ca8c:	2109883a 	add	r4,r4,r4
1000ca90:	2109883a 	add	r4,r4,r4
1000ca94:	1907883a 	add	r3,r3,r4
1000ca98:	38000526 	beq	r7,zero,1000cab0 <memset+0x118>
1000ca9c:	19cf883a 	add	r7,r3,r7
1000caa0:	19400005 	stb	r5,0(r3)
1000caa4:	18c00044 	addi	r3,r3,1
1000caa8:	38fffd1e 	bne	r7,r3,1000caa0 <__alt_data_end+0xf800caa0>
1000caac:	f800283a 	ret
1000cab0:	f800283a 	ret
1000cab4:	2007883a 	mov	r3,r4
1000cab8:	300f883a 	mov	r7,r6
1000cabc:	003fc706 	br	1000c9dc <__alt_data_end+0xf800c9dc>

1000cac0 <_Balloc>:
1000cac0:	20801317 	ldw	r2,76(r4)
1000cac4:	defffc04 	addi	sp,sp,-16
1000cac8:	dc400115 	stw	r17,4(sp)
1000cacc:	dc000015 	stw	r16,0(sp)
1000cad0:	dfc00315 	stw	ra,12(sp)
1000cad4:	dc800215 	stw	r18,8(sp)
1000cad8:	2023883a 	mov	r17,r4
1000cadc:	2821883a 	mov	r16,r5
1000cae0:	10000f26 	beq	r2,zero,1000cb20 <_Balloc+0x60>
1000cae4:	8407883a 	add	r3,r16,r16
1000cae8:	18c7883a 	add	r3,r3,r3
1000caec:	10c7883a 	add	r3,r2,r3
1000caf0:	18800017 	ldw	r2,0(r3)
1000caf4:	10001126 	beq	r2,zero,1000cb3c <_Balloc+0x7c>
1000caf8:	11000017 	ldw	r4,0(r2)
1000cafc:	19000015 	stw	r4,0(r3)
1000cb00:	10000415 	stw	zero,16(r2)
1000cb04:	10000315 	stw	zero,12(r2)
1000cb08:	dfc00317 	ldw	ra,12(sp)
1000cb0c:	dc800217 	ldw	r18,8(sp)
1000cb10:	dc400117 	ldw	r17,4(sp)
1000cb14:	dc000017 	ldw	r16,0(sp)
1000cb18:	dec00404 	addi	sp,sp,16
1000cb1c:	f800283a 	ret
1000cb20:	01800844 	movi	r6,33
1000cb24:	01400104 	movi	r5,4
1000cb28:	000fb680 	call	1000fb68 <_calloc_r>
1000cb2c:	88801315 	stw	r2,76(r17)
1000cb30:	103fec1e 	bne	r2,zero,1000cae4 <__alt_data_end+0xf800cae4>
1000cb34:	0005883a 	mov	r2,zero
1000cb38:	003ff306 	br	1000cb08 <__alt_data_end+0xf800cb08>
1000cb3c:	01400044 	movi	r5,1
1000cb40:	2c24983a 	sll	r18,r5,r16
1000cb44:	8809883a 	mov	r4,r17
1000cb48:	91800144 	addi	r6,r18,5
1000cb4c:	318d883a 	add	r6,r6,r6
1000cb50:	318d883a 	add	r6,r6,r6
1000cb54:	000fb680 	call	1000fb68 <_calloc_r>
1000cb58:	103ff626 	beq	r2,zero,1000cb34 <__alt_data_end+0xf800cb34>
1000cb5c:	14000115 	stw	r16,4(r2)
1000cb60:	14800215 	stw	r18,8(r2)
1000cb64:	003fe606 	br	1000cb00 <__alt_data_end+0xf800cb00>

1000cb68 <_Bfree>:
1000cb68:	28000826 	beq	r5,zero,1000cb8c <_Bfree+0x24>
1000cb6c:	28c00117 	ldw	r3,4(r5)
1000cb70:	20801317 	ldw	r2,76(r4)
1000cb74:	18c7883a 	add	r3,r3,r3
1000cb78:	18c7883a 	add	r3,r3,r3
1000cb7c:	10c5883a 	add	r2,r2,r3
1000cb80:	10c00017 	ldw	r3,0(r2)
1000cb84:	28c00015 	stw	r3,0(r5)
1000cb88:	11400015 	stw	r5,0(r2)
1000cb8c:	f800283a 	ret

1000cb90 <__multadd>:
1000cb90:	defff704 	addi	sp,sp,-36
1000cb94:	dc800215 	stw	r18,8(sp)
1000cb98:	2c800417 	ldw	r18,16(r5)
1000cb9c:	dd800615 	stw	r22,24(sp)
1000cba0:	dd400515 	stw	r21,20(sp)
1000cba4:	dd000415 	stw	r20,16(sp)
1000cba8:	dcc00315 	stw	r19,12(sp)
1000cbac:	dc400115 	stw	r17,4(sp)
1000cbb0:	dc000015 	stw	r16,0(sp)
1000cbb4:	dfc00815 	stw	ra,32(sp)
1000cbb8:	ddc00715 	stw	r23,28(sp)
1000cbbc:	2827883a 	mov	r19,r5
1000cbc0:	2029883a 	mov	r20,r4
1000cbc4:	3023883a 	mov	r17,r6
1000cbc8:	3821883a 	mov	r16,r7
1000cbcc:	2d400504 	addi	r21,r5,20
1000cbd0:	002d883a 	mov	r22,zero
1000cbd4:	adc00017 	ldw	r23,0(r21)
1000cbd8:	880b883a 	mov	r5,r17
1000cbdc:	ad400104 	addi	r21,r21,4
1000cbe0:	b93fffcc 	andi	r4,r23,65535
1000cbe4:	0006ad80 	call	10006ad8 <__mulsi3>
1000cbe8:	b808d43a 	srli	r4,r23,16
1000cbec:	880b883a 	mov	r5,r17
1000cbf0:	1421883a 	add	r16,r2,r16
1000cbf4:	0006ad80 	call	10006ad8 <__mulsi3>
1000cbf8:	800ed43a 	srli	r7,r16,16
1000cbfc:	80ffffcc 	andi	r3,r16,65535
1000cc00:	b5800044 	addi	r22,r22,1
1000cc04:	11c5883a 	add	r2,r2,r7
1000cc08:	100e943a 	slli	r7,r2,16
1000cc0c:	1020d43a 	srli	r16,r2,16
1000cc10:	38c7883a 	add	r3,r7,r3
1000cc14:	a8ffff15 	stw	r3,-4(r21)
1000cc18:	b4bfee16 	blt	r22,r18,1000cbd4 <__alt_data_end+0xf800cbd4>
1000cc1c:	80000926 	beq	r16,zero,1000cc44 <__multadd+0xb4>
1000cc20:	98800217 	ldw	r2,8(r19)
1000cc24:	9080130e 	bge	r18,r2,1000cc74 <__multadd+0xe4>
1000cc28:	90800144 	addi	r2,r18,5
1000cc2c:	1085883a 	add	r2,r2,r2
1000cc30:	1085883a 	add	r2,r2,r2
1000cc34:	9885883a 	add	r2,r19,r2
1000cc38:	14000015 	stw	r16,0(r2)
1000cc3c:	94800044 	addi	r18,r18,1
1000cc40:	9c800415 	stw	r18,16(r19)
1000cc44:	9805883a 	mov	r2,r19
1000cc48:	dfc00817 	ldw	ra,32(sp)
1000cc4c:	ddc00717 	ldw	r23,28(sp)
1000cc50:	dd800617 	ldw	r22,24(sp)
1000cc54:	dd400517 	ldw	r21,20(sp)
1000cc58:	dd000417 	ldw	r20,16(sp)
1000cc5c:	dcc00317 	ldw	r19,12(sp)
1000cc60:	dc800217 	ldw	r18,8(sp)
1000cc64:	dc400117 	ldw	r17,4(sp)
1000cc68:	dc000017 	ldw	r16,0(sp)
1000cc6c:	dec00904 	addi	sp,sp,36
1000cc70:	f800283a 	ret
1000cc74:	99400117 	ldw	r5,4(r19)
1000cc78:	a009883a 	mov	r4,r20
1000cc7c:	29400044 	addi	r5,r5,1
1000cc80:	000cac00 	call	1000cac0 <_Balloc>
1000cc84:	99800417 	ldw	r6,16(r19)
1000cc88:	99400304 	addi	r5,r19,12
1000cc8c:	11000304 	addi	r4,r2,12
1000cc90:	31800084 	addi	r6,r6,2
1000cc94:	318d883a 	add	r6,r6,r6
1000cc98:	318d883a 	add	r6,r6,r6
1000cc9c:	1023883a 	mov	r17,r2
1000cca0:	000c6f40 	call	1000c6f4 <memcpy>
1000cca4:	98000a26 	beq	r19,zero,1000ccd0 <__multadd+0x140>
1000cca8:	98c00117 	ldw	r3,4(r19)
1000ccac:	a0801317 	ldw	r2,76(r20)
1000ccb0:	18c7883a 	add	r3,r3,r3
1000ccb4:	18c7883a 	add	r3,r3,r3
1000ccb8:	10c5883a 	add	r2,r2,r3
1000ccbc:	10c00017 	ldw	r3,0(r2)
1000ccc0:	98c00015 	stw	r3,0(r19)
1000ccc4:	14c00015 	stw	r19,0(r2)
1000ccc8:	8827883a 	mov	r19,r17
1000cccc:	003fd606 	br	1000cc28 <__alt_data_end+0xf800cc28>
1000ccd0:	8827883a 	mov	r19,r17
1000ccd4:	003fd406 	br	1000cc28 <__alt_data_end+0xf800cc28>

1000ccd8 <__s2b>:
1000ccd8:	defff904 	addi	sp,sp,-28
1000ccdc:	dc400115 	stw	r17,4(sp)
1000cce0:	dc000015 	stw	r16,0(sp)
1000cce4:	2023883a 	mov	r17,r4
1000cce8:	2821883a 	mov	r16,r5
1000ccec:	39000204 	addi	r4,r7,8
1000ccf0:	01400244 	movi	r5,9
1000ccf4:	dcc00315 	stw	r19,12(sp)
1000ccf8:	dc800215 	stw	r18,8(sp)
1000ccfc:	dfc00615 	stw	ra,24(sp)
1000cd00:	dd400515 	stw	r21,20(sp)
1000cd04:	dd000415 	stw	r20,16(sp)
1000cd08:	3825883a 	mov	r18,r7
1000cd0c:	3027883a 	mov	r19,r6
1000cd10:	00069240 	call	10006924 <__divsi3>
1000cd14:	00c00044 	movi	r3,1
1000cd18:	000b883a 	mov	r5,zero
1000cd1c:	1880030e 	bge	r3,r2,1000cd2c <__s2b+0x54>
1000cd20:	18c7883a 	add	r3,r3,r3
1000cd24:	29400044 	addi	r5,r5,1
1000cd28:	18bffd16 	blt	r3,r2,1000cd20 <__alt_data_end+0xf800cd20>
1000cd2c:	8809883a 	mov	r4,r17
1000cd30:	000cac00 	call	1000cac0 <_Balloc>
1000cd34:	d8c00717 	ldw	r3,28(sp)
1000cd38:	10c00515 	stw	r3,20(r2)
1000cd3c:	00c00044 	movi	r3,1
1000cd40:	10c00415 	stw	r3,16(r2)
1000cd44:	00c00244 	movi	r3,9
1000cd48:	1cc0210e 	bge	r3,r19,1000cdd0 <__s2b+0xf8>
1000cd4c:	80eb883a 	add	r21,r16,r3
1000cd50:	a829883a 	mov	r20,r21
1000cd54:	84e1883a 	add	r16,r16,r19
1000cd58:	a1c00007 	ldb	r7,0(r20)
1000cd5c:	01800284 	movi	r6,10
1000cd60:	a5000044 	addi	r20,r20,1
1000cd64:	100b883a 	mov	r5,r2
1000cd68:	39fff404 	addi	r7,r7,-48
1000cd6c:	8809883a 	mov	r4,r17
1000cd70:	000cb900 	call	1000cb90 <__multadd>
1000cd74:	a43ff81e 	bne	r20,r16,1000cd58 <__alt_data_end+0xf800cd58>
1000cd78:	ace1883a 	add	r16,r21,r19
1000cd7c:	843ffe04 	addi	r16,r16,-8
1000cd80:	9c800a0e 	bge	r19,r18,1000cdac <__s2b+0xd4>
1000cd84:	94e5c83a 	sub	r18,r18,r19
1000cd88:	84a5883a 	add	r18,r16,r18
1000cd8c:	81c00007 	ldb	r7,0(r16)
1000cd90:	01800284 	movi	r6,10
1000cd94:	84000044 	addi	r16,r16,1
1000cd98:	100b883a 	mov	r5,r2
1000cd9c:	39fff404 	addi	r7,r7,-48
1000cda0:	8809883a 	mov	r4,r17
1000cda4:	000cb900 	call	1000cb90 <__multadd>
1000cda8:	84bff81e 	bne	r16,r18,1000cd8c <__alt_data_end+0xf800cd8c>
1000cdac:	dfc00617 	ldw	ra,24(sp)
1000cdb0:	dd400517 	ldw	r21,20(sp)
1000cdb4:	dd000417 	ldw	r20,16(sp)
1000cdb8:	dcc00317 	ldw	r19,12(sp)
1000cdbc:	dc800217 	ldw	r18,8(sp)
1000cdc0:	dc400117 	ldw	r17,4(sp)
1000cdc4:	dc000017 	ldw	r16,0(sp)
1000cdc8:	dec00704 	addi	sp,sp,28
1000cdcc:	f800283a 	ret
1000cdd0:	84000284 	addi	r16,r16,10
1000cdd4:	1827883a 	mov	r19,r3
1000cdd8:	003fe906 	br	1000cd80 <__alt_data_end+0xf800cd80>

1000cddc <__hi0bits>:
1000cddc:	20bfffec 	andhi	r2,r4,65535
1000cde0:	1000141e 	bne	r2,zero,1000ce34 <__hi0bits+0x58>
1000cde4:	2008943a 	slli	r4,r4,16
1000cde8:	00800404 	movi	r2,16
1000cdec:	20ffc02c 	andhi	r3,r4,65280
1000cdf0:	1800021e 	bne	r3,zero,1000cdfc <__hi0bits+0x20>
1000cdf4:	2008923a 	slli	r4,r4,8
1000cdf8:	10800204 	addi	r2,r2,8
1000cdfc:	20fc002c 	andhi	r3,r4,61440
1000ce00:	1800021e 	bne	r3,zero,1000ce0c <__hi0bits+0x30>
1000ce04:	2008913a 	slli	r4,r4,4
1000ce08:	10800104 	addi	r2,r2,4
1000ce0c:	20f0002c 	andhi	r3,r4,49152
1000ce10:	1800031e 	bne	r3,zero,1000ce20 <__hi0bits+0x44>
1000ce14:	2109883a 	add	r4,r4,r4
1000ce18:	10800084 	addi	r2,r2,2
1000ce1c:	2109883a 	add	r4,r4,r4
1000ce20:	20000316 	blt	r4,zero,1000ce30 <__hi0bits+0x54>
1000ce24:	2110002c 	andhi	r4,r4,16384
1000ce28:	2000041e 	bne	r4,zero,1000ce3c <__hi0bits+0x60>
1000ce2c:	00800804 	movi	r2,32
1000ce30:	f800283a 	ret
1000ce34:	0005883a 	mov	r2,zero
1000ce38:	003fec06 	br	1000cdec <__alt_data_end+0xf800cdec>
1000ce3c:	10800044 	addi	r2,r2,1
1000ce40:	f800283a 	ret

1000ce44 <__lo0bits>:
1000ce44:	20c00017 	ldw	r3,0(r4)
1000ce48:	188001cc 	andi	r2,r3,7
1000ce4c:	10000826 	beq	r2,zero,1000ce70 <__lo0bits+0x2c>
1000ce50:	1880004c 	andi	r2,r3,1
1000ce54:	1000211e 	bne	r2,zero,1000cedc <__lo0bits+0x98>
1000ce58:	1880008c 	andi	r2,r3,2
1000ce5c:	1000211e 	bne	r2,zero,1000cee4 <__lo0bits+0xa0>
1000ce60:	1806d0ba 	srli	r3,r3,2
1000ce64:	00800084 	movi	r2,2
1000ce68:	20c00015 	stw	r3,0(r4)
1000ce6c:	f800283a 	ret
1000ce70:	18bfffcc 	andi	r2,r3,65535
1000ce74:	10001326 	beq	r2,zero,1000cec4 <__lo0bits+0x80>
1000ce78:	0005883a 	mov	r2,zero
1000ce7c:	19403fcc 	andi	r5,r3,255
1000ce80:	2800021e 	bne	r5,zero,1000ce8c <__lo0bits+0x48>
1000ce84:	1806d23a 	srli	r3,r3,8
1000ce88:	10800204 	addi	r2,r2,8
1000ce8c:	194003cc 	andi	r5,r3,15
1000ce90:	2800021e 	bne	r5,zero,1000ce9c <__lo0bits+0x58>
1000ce94:	1806d13a 	srli	r3,r3,4
1000ce98:	10800104 	addi	r2,r2,4
1000ce9c:	194000cc 	andi	r5,r3,3
1000cea0:	2800021e 	bne	r5,zero,1000ceac <__lo0bits+0x68>
1000cea4:	1806d0ba 	srli	r3,r3,2
1000cea8:	10800084 	addi	r2,r2,2
1000ceac:	1940004c 	andi	r5,r3,1
1000ceb0:	2800081e 	bne	r5,zero,1000ced4 <__lo0bits+0x90>
1000ceb4:	1806d07a 	srli	r3,r3,1
1000ceb8:	1800051e 	bne	r3,zero,1000ced0 <__lo0bits+0x8c>
1000cebc:	00800804 	movi	r2,32
1000cec0:	f800283a 	ret
1000cec4:	1806d43a 	srli	r3,r3,16
1000cec8:	00800404 	movi	r2,16
1000cecc:	003feb06 	br	1000ce7c <__alt_data_end+0xf800ce7c>
1000ced0:	10800044 	addi	r2,r2,1
1000ced4:	20c00015 	stw	r3,0(r4)
1000ced8:	f800283a 	ret
1000cedc:	0005883a 	mov	r2,zero
1000cee0:	f800283a 	ret
1000cee4:	1806d07a 	srli	r3,r3,1
1000cee8:	00800044 	movi	r2,1
1000ceec:	20c00015 	stw	r3,0(r4)
1000cef0:	f800283a 	ret

1000cef4 <__i2b>:
1000cef4:	defffd04 	addi	sp,sp,-12
1000cef8:	dc000015 	stw	r16,0(sp)
1000cefc:	04000044 	movi	r16,1
1000cf00:	dc400115 	stw	r17,4(sp)
1000cf04:	2823883a 	mov	r17,r5
1000cf08:	800b883a 	mov	r5,r16
1000cf0c:	dfc00215 	stw	ra,8(sp)
1000cf10:	000cac00 	call	1000cac0 <_Balloc>
1000cf14:	14400515 	stw	r17,20(r2)
1000cf18:	14000415 	stw	r16,16(r2)
1000cf1c:	dfc00217 	ldw	ra,8(sp)
1000cf20:	dc400117 	ldw	r17,4(sp)
1000cf24:	dc000017 	ldw	r16,0(sp)
1000cf28:	dec00304 	addi	sp,sp,12
1000cf2c:	f800283a 	ret

1000cf30 <__multiply>:
1000cf30:	deffef04 	addi	sp,sp,-68
1000cf34:	dc400815 	stw	r17,32(sp)
1000cf38:	dc000715 	stw	r16,28(sp)
1000cf3c:	34400417 	ldw	r17,16(r6)
1000cf40:	2c000417 	ldw	r16,16(r5)
1000cf44:	dd800d15 	stw	r22,52(sp)
1000cf48:	dc800915 	stw	r18,36(sp)
1000cf4c:	dfc01015 	stw	ra,64(sp)
1000cf50:	df000f15 	stw	fp,60(sp)
1000cf54:	ddc00e15 	stw	r23,56(sp)
1000cf58:	dd400c15 	stw	r21,48(sp)
1000cf5c:	dd000b15 	stw	r20,44(sp)
1000cf60:	dcc00a15 	stw	r19,40(sp)
1000cf64:	2825883a 	mov	r18,r5
1000cf68:	302d883a 	mov	r22,r6
1000cf6c:	8440050e 	bge	r16,r17,1000cf84 <__multiply+0x54>
1000cf70:	8007883a 	mov	r3,r16
1000cf74:	3025883a 	mov	r18,r6
1000cf78:	8821883a 	mov	r16,r17
1000cf7c:	282d883a 	mov	r22,r5
1000cf80:	1823883a 	mov	r17,r3
1000cf84:	90800217 	ldw	r2,8(r18)
1000cf88:	8447883a 	add	r3,r16,r17
1000cf8c:	d8c00215 	stw	r3,8(sp)
1000cf90:	91400117 	ldw	r5,4(r18)
1000cf94:	10c0010e 	bge	r2,r3,1000cf9c <__multiply+0x6c>
1000cf98:	29400044 	addi	r5,r5,1
1000cf9c:	000cac00 	call	1000cac0 <_Balloc>
1000cfa0:	d8c00217 	ldw	r3,8(sp)
1000cfa4:	d8800615 	stw	r2,24(sp)
1000cfa8:	18eb883a 	add	r21,r3,r3
1000cfac:	ad6b883a 	add	r21,r21,r21
1000cfb0:	10c00504 	addi	r3,r2,20
1000cfb4:	1d6b883a 	add	r21,r3,r21
1000cfb8:	d8c00115 	stw	r3,4(sp)
1000cfbc:	dd400315 	stw	r21,12(sp)
1000cfc0:	1805883a 	mov	r2,r3
1000cfc4:	1d40042e 	bgeu	r3,r21,1000cfd8 <__multiply+0xa8>
1000cfc8:	d8c00317 	ldw	r3,12(sp)
1000cfcc:	10000015 	stw	zero,0(r2)
1000cfd0:	10800104 	addi	r2,r2,4
1000cfd4:	10fffc36 	bltu	r2,r3,1000cfc8 <__alt_data_end+0xf800cfc8>
1000cfd8:	8c63883a 	add	r17,r17,r17
1000cfdc:	b5800504 	addi	r22,r22,20
1000cfe0:	8c63883a 	add	r17,r17,r17
1000cfe4:	94800504 	addi	r18,r18,20
1000cfe8:	8421883a 	add	r16,r16,r16
1000cfec:	b463883a 	add	r17,r22,r17
1000cff0:	8421883a 	add	r16,r16,r16
1000cff4:	dd800015 	stw	r22,0(sp)
1000cff8:	dc800415 	stw	r18,16(sp)
1000cffc:	dc400515 	stw	r17,20(sp)
1000d000:	9429883a 	add	r20,r18,r16
1000d004:	b4404f2e 	bgeu	r22,r17,1000d144 <__multiply+0x214>
1000d008:	d8c00017 	ldw	r3,0(sp)
1000d00c:	1c800017 	ldw	r18,0(r3)
1000d010:	947fffcc 	andi	r17,r18,65535
1000d014:	88001e26 	beq	r17,zero,1000d090 <__multiply+0x160>
1000d018:	dd800117 	ldw	r22,4(sp)
1000d01c:	dd400417 	ldw	r21,16(sp)
1000d020:	0027883a 	mov	r19,zero
1000d024:	ac800017 	ldw	r18,0(r21)
1000d028:	b4000017 	ldw	r16,0(r22)
1000d02c:	880b883a 	mov	r5,r17
1000d030:	913fffcc 	andi	r4,r18,65535
1000d034:	0006ad80 	call	10006ad8 <__mulsi3>
1000d038:	9008d43a 	srli	r4,r18,16
1000d03c:	84bfffcc 	andi	r18,r16,65535
1000d040:	1485883a 	add	r2,r2,r18
1000d044:	14e5883a 	add	r18,r2,r19
1000d048:	8020d43a 	srli	r16,r16,16
1000d04c:	9026d43a 	srli	r19,r18,16
1000d050:	880b883a 	mov	r5,r17
1000d054:	0006ad80 	call	10006ad8 <__mulsi3>
1000d058:	1405883a 	add	r2,r2,r16
1000d05c:	14e1883a 	add	r16,r2,r19
1000d060:	90ffffcc 	andi	r3,r18,65535
1000d064:	8024943a 	slli	r18,r16,16
1000d068:	ad400104 	addi	r21,r21,4
1000d06c:	b005883a 	mov	r2,r22
1000d070:	90c6b03a 	or	r3,r18,r3
1000d074:	b0c00015 	stw	r3,0(r22)
1000d078:	8026d43a 	srli	r19,r16,16
1000d07c:	b5800104 	addi	r22,r22,4
1000d080:	ad3fe836 	bltu	r21,r20,1000d024 <__alt_data_end+0xf800d024>
1000d084:	d8c00017 	ldw	r3,0(sp)
1000d088:	14c00115 	stw	r19,4(r2)
1000d08c:	1c800017 	ldw	r18,0(r3)
1000d090:	9024d43a 	srli	r18,r18,16
1000d094:	90002226 	beq	r18,zero,1000d120 <__multiply+0x1f0>
1000d098:	d8c00117 	ldw	r3,4(sp)
1000d09c:	dd800417 	ldw	r22,16(sp)
1000d0a0:	002f883a 	mov	r23,zero
1000d0a4:	1f000017 	ldw	fp,0(r3)
1000d0a8:	1823883a 	mov	r17,r3
1000d0ac:	182b883a 	mov	r21,r3
1000d0b0:	e021883a 	mov	r16,fp
1000d0b4:	00000106 	br	1000d0bc <__multiply+0x18c>
1000d0b8:	982b883a 	mov	r21,r19
1000d0bc:	b100000b 	ldhu	r4,0(r22)
1000d0c0:	8020d43a 	srli	r16,r16,16
1000d0c4:	900b883a 	mov	r5,r18
1000d0c8:	0006ad80 	call	10006ad8 <__mulsi3>
1000d0cc:	1405883a 	add	r2,r2,r16
1000d0d0:	15ef883a 	add	r23,r2,r23
1000d0d4:	b804943a 	slli	r2,r23,16
1000d0d8:	e0ffffcc 	andi	r3,fp,65535
1000d0dc:	8c400104 	addi	r17,r17,4
1000d0e0:	10c6b03a 	or	r3,r2,r3
1000d0e4:	88ffff15 	stw	r3,-4(r17)
1000d0e8:	b5800104 	addi	r22,r22,4
1000d0ec:	b13fff17 	ldw	r4,-4(r22)
1000d0f0:	acc00104 	addi	r19,r21,4
1000d0f4:	900b883a 	mov	r5,r18
1000d0f8:	2008d43a 	srli	r4,r4,16
1000d0fc:	9c000017 	ldw	r16,0(r19)
1000d100:	0006ad80 	call	10006ad8 <__mulsi3>
1000d104:	b806d43a 	srli	r3,r23,16
1000d108:	813fffcc 	andi	r4,r16,65535
1000d10c:	1105883a 	add	r2,r2,r4
1000d110:	10f9883a 	add	fp,r2,r3
1000d114:	e02ed43a 	srli	r23,fp,16
1000d118:	b53fe736 	bltu	r22,r20,1000d0b8 <__alt_data_end+0xf800d0b8>
1000d11c:	af000115 	stw	fp,4(r21)
1000d120:	d8c00017 	ldw	r3,0(sp)
1000d124:	d9000517 	ldw	r4,20(sp)
1000d128:	18c00104 	addi	r3,r3,4
1000d12c:	d8c00015 	stw	r3,0(sp)
1000d130:	d8c00117 	ldw	r3,4(sp)
1000d134:	18c00104 	addi	r3,r3,4
1000d138:	d8c00115 	stw	r3,4(sp)
1000d13c:	d8c00017 	ldw	r3,0(sp)
1000d140:	193fb136 	bltu	r3,r4,1000d008 <__alt_data_end+0xf800d008>
1000d144:	d8c00217 	ldw	r3,8(sp)
1000d148:	00c00c0e 	bge	zero,r3,1000d17c <__multiply+0x24c>
1000d14c:	d8c00317 	ldw	r3,12(sp)
1000d150:	18bfff17 	ldw	r2,-4(r3)
1000d154:	1d7fff04 	addi	r21,r3,-4
1000d158:	10000326 	beq	r2,zero,1000d168 <__multiply+0x238>
1000d15c:	00000706 	br	1000d17c <__multiply+0x24c>
1000d160:	a8800017 	ldw	r2,0(r21)
1000d164:	1000051e 	bne	r2,zero,1000d17c <__multiply+0x24c>
1000d168:	d8c00217 	ldw	r3,8(sp)
1000d16c:	ad7fff04 	addi	r21,r21,-4
1000d170:	18ffffc4 	addi	r3,r3,-1
1000d174:	d8c00215 	stw	r3,8(sp)
1000d178:	183ff91e 	bne	r3,zero,1000d160 <__alt_data_end+0xf800d160>
1000d17c:	d8c00617 	ldw	r3,24(sp)
1000d180:	d9000217 	ldw	r4,8(sp)
1000d184:	1805883a 	mov	r2,r3
1000d188:	19000415 	stw	r4,16(r3)
1000d18c:	dfc01017 	ldw	ra,64(sp)
1000d190:	df000f17 	ldw	fp,60(sp)
1000d194:	ddc00e17 	ldw	r23,56(sp)
1000d198:	dd800d17 	ldw	r22,52(sp)
1000d19c:	dd400c17 	ldw	r21,48(sp)
1000d1a0:	dd000b17 	ldw	r20,44(sp)
1000d1a4:	dcc00a17 	ldw	r19,40(sp)
1000d1a8:	dc800917 	ldw	r18,36(sp)
1000d1ac:	dc400817 	ldw	r17,32(sp)
1000d1b0:	dc000717 	ldw	r16,28(sp)
1000d1b4:	dec01104 	addi	sp,sp,68
1000d1b8:	f800283a 	ret

1000d1bc <__pow5mult>:
1000d1bc:	defffa04 	addi	sp,sp,-24
1000d1c0:	dcc00315 	stw	r19,12(sp)
1000d1c4:	dc000015 	stw	r16,0(sp)
1000d1c8:	dfc00515 	stw	ra,20(sp)
1000d1cc:	dd000415 	stw	r20,16(sp)
1000d1d0:	dc800215 	stw	r18,8(sp)
1000d1d4:	dc400115 	stw	r17,4(sp)
1000d1d8:	308000cc 	andi	r2,r6,3
1000d1dc:	3021883a 	mov	r16,r6
1000d1e0:	2027883a 	mov	r19,r4
1000d1e4:	10002f1e 	bne	r2,zero,1000d2a4 <__pow5mult+0xe8>
1000d1e8:	2825883a 	mov	r18,r5
1000d1ec:	8021d0ba 	srai	r16,r16,2
1000d1f0:	80001a26 	beq	r16,zero,1000d25c <__pow5mult+0xa0>
1000d1f4:	9c401217 	ldw	r17,72(r19)
1000d1f8:	8800061e 	bne	r17,zero,1000d214 <__pow5mult+0x58>
1000d1fc:	00003406 	br	1000d2d0 <__pow5mult+0x114>
1000d200:	8021d07a 	srai	r16,r16,1
1000d204:	80001526 	beq	r16,zero,1000d25c <__pow5mult+0xa0>
1000d208:	88800017 	ldw	r2,0(r17)
1000d20c:	10001c26 	beq	r2,zero,1000d280 <__pow5mult+0xc4>
1000d210:	1023883a 	mov	r17,r2
1000d214:	8080004c 	andi	r2,r16,1
1000d218:	103ff926 	beq	r2,zero,1000d200 <__alt_data_end+0xf800d200>
1000d21c:	880d883a 	mov	r6,r17
1000d220:	900b883a 	mov	r5,r18
1000d224:	9809883a 	mov	r4,r19
1000d228:	000cf300 	call	1000cf30 <__multiply>
1000d22c:	90001b26 	beq	r18,zero,1000d29c <__pow5mult+0xe0>
1000d230:	91000117 	ldw	r4,4(r18)
1000d234:	98c01317 	ldw	r3,76(r19)
1000d238:	8021d07a 	srai	r16,r16,1
1000d23c:	2109883a 	add	r4,r4,r4
1000d240:	2109883a 	add	r4,r4,r4
1000d244:	1907883a 	add	r3,r3,r4
1000d248:	19000017 	ldw	r4,0(r3)
1000d24c:	91000015 	stw	r4,0(r18)
1000d250:	1c800015 	stw	r18,0(r3)
1000d254:	1025883a 	mov	r18,r2
1000d258:	803feb1e 	bne	r16,zero,1000d208 <__alt_data_end+0xf800d208>
1000d25c:	9005883a 	mov	r2,r18
1000d260:	dfc00517 	ldw	ra,20(sp)
1000d264:	dd000417 	ldw	r20,16(sp)
1000d268:	dcc00317 	ldw	r19,12(sp)
1000d26c:	dc800217 	ldw	r18,8(sp)
1000d270:	dc400117 	ldw	r17,4(sp)
1000d274:	dc000017 	ldw	r16,0(sp)
1000d278:	dec00604 	addi	sp,sp,24
1000d27c:	f800283a 	ret
1000d280:	880d883a 	mov	r6,r17
1000d284:	880b883a 	mov	r5,r17
1000d288:	9809883a 	mov	r4,r19
1000d28c:	000cf300 	call	1000cf30 <__multiply>
1000d290:	88800015 	stw	r2,0(r17)
1000d294:	10000015 	stw	zero,0(r2)
1000d298:	003fdd06 	br	1000d210 <__alt_data_end+0xf800d210>
1000d29c:	1025883a 	mov	r18,r2
1000d2a0:	003fd706 	br	1000d200 <__alt_data_end+0xf800d200>
1000d2a4:	10bfffc4 	addi	r2,r2,-1
1000d2a8:	1085883a 	add	r2,r2,r2
1000d2ac:	00c40074 	movhi	r3,4097
1000d2b0:	18da5304 	addi	r3,r3,26956
1000d2b4:	1085883a 	add	r2,r2,r2
1000d2b8:	1885883a 	add	r2,r3,r2
1000d2bc:	11800017 	ldw	r6,0(r2)
1000d2c0:	000f883a 	mov	r7,zero
1000d2c4:	000cb900 	call	1000cb90 <__multadd>
1000d2c8:	1025883a 	mov	r18,r2
1000d2cc:	003fc706 	br	1000d1ec <__alt_data_end+0xf800d1ec>
1000d2d0:	05000044 	movi	r20,1
1000d2d4:	a00b883a 	mov	r5,r20
1000d2d8:	9809883a 	mov	r4,r19
1000d2dc:	000cac00 	call	1000cac0 <_Balloc>
1000d2e0:	1023883a 	mov	r17,r2
1000d2e4:	00809c44 	movi	r2,625
1000d2e8:	88800515 	stw	r2,20(r17)
1000d2ec:	8d000415 	stw	r20,16(r17)
1000d2f0:	9c401215 	stw	r17,72(r19)
1000d2f4:	88000015 	stw	zero,0(r17)
1000d2f8:	003fc606 	br	1000d214 <__alt_data_end+0xf800d214>

1000d2fc <__lshift>:
1000d2fc:	defff904 	addi	sp,sp,-28
1000d300:	dd400515 	stw	r21,20(sp)
1000d304:	dcc00315 	stw	r19,12(sp)
1000d308:	302bd17a 	srai	r21,r6,5
1000d30c:	2cc00417 	ldw	r19,16(r5)
1000d310:	28800217 	ldw	r2,8(r5)
1000d314:	dd000415 	stw	r20,16(sp)
1000d318:	ace7883a 	add	r19,r21,r19
1000d31c:	dc800215 	stw	r18,8(sp)
1000d320:	dc400115 	stw	r17,4(sp)
1000d324:	dc000015 	stw	r16,0(sp)
1000d328:	dfc00615 	stw	ra,24(sp)
1000d32c:	9c000044 	addi	r16,r19,1
1000d330:	2823883a 	mov	r17,r5
1000d334:	3029883a 	mov	r20,r6
1000d338:	2025883a 	mov	r18,r4
1000d33c:	29400117 	ldw	r5,4(r5)
1000d340:	1400030e 	bge	r2,r16,1000d350 <__lshift+0x54>
1000d344:	1085883a 	add	r2,r2,r2
1000d348:	29400044 	addi	r5,r5,1
1000d34c:	143ffd16 	blt	r2,r16,1000d344 <__alt_data_end+0xf800d344>
1000d350:	9009883a 	mov	r4,r18
1000d354:	000cac00 	call	1000cac0 <_Balloc>
1000d358:	10c00504 	addi	r3,r2,20
1000d35c:	0540070e 	bge	zero,r21,1000d37c <__lshift+0x80>
1000d360:	ad6b883a 	add	r21,r21,r21
1000d364:	ad6b883a 	add	r21,r21,r21
1000d368:	1809883a 	mov	r4,r3
1000d36c:	1d47883a 	add	r3,r3,r21
1000d370:	20000015 	stw	zero,0(r4)
1000d374:	21000104 	addi	r4,r4,4
1000d378:	193ffd1e 	bne	r3,r4,1000d370 <__alt_data_end+0xf800d370>
1000d37c:	8a000417 	ldw	r8,16(r17)
1000d380:	89000504 	addi	r4,r17,20
1000d384:	a18007cc 	andi	r6,r20,31
1000d388:	4211883a 	add	r8,r8,r8
1000d38c:	4211883a 	add	r8,r8,r8
1000d390:	2211883a 	add	r8,r4,r8
1000d394:	30002326 	beq	r6,zero,1000d424 <__lshift+0x128>
1000d398:	02400804 	movi	r9,32
1000d39c:	4993c83a 	sub	r9,r9,r6
1000d3a0:	000b883a 	mov	r5,zero
1000d3a4:	21c00017 	ldw	r7,0(r4)
1000d3a8:	1815883a 	mov	r10,r3
1000d3ac:	18c00104 	addi	r3,r3,4
1000d3b0:	398e983a 	sll	r7,r7,r6
1000d3b4:	21000104 	addi	r4,r4,4
1000d3b8:	394ab03a 	or	r5,r7,r5
1000d3bc:	197fff15 	stw	r5,-4(r3)
1000d3c0:	217fff17 	ldw	r5,-4(r4)
1000d3c4:	2a4ad83a 	srl	r5,r5,r9
1000d3c8:	223ff636 	bltu	r4,r8,1000d3a4 <__alt_data_end+0xf800d3a4>
1000d3cc:	51400115 	stw	r5,4(r10)
1000d3d0:	28001a1e 	bne	r5,zero,1000d43c <__lshift+0x140>
1000d3d4:	843fffc4 	addi	r16,r16,-1
1000d3d8:	14000415 	stw	r16,16(r2)
1000d3dc:	88000826 	beq	r17,zero,1000d400 <__lshift+0x104>
1000d3e0:	89000117 	ldw	r4,4(r17)
1000d3e4:	90c01317 	ldw	r3,76(r18)
1000d3e8:	2109883a 	add	r4,r4,r4
1000d3ec:	2109883a 	add	r4,r4,r4
1000d3f0:	1907883a 	add	r3,r3,r4
1000d3f4:	19000017 	ldw	r4,0(r3)
1000d3f8:	89000015 	stw	r4,0(r17)
1000d3fc:	1c400015 	stw	r17,0(r3)
1000d400:	dfc00617 	ldw	ra,24(sp)
1000d404:	dd400517 	ldw	r21,20(sp)
1000d408:	dd000417 	ldw	r20,16(sp)
1000d40c:	dcc00317 	ldw	r19,12(sp)
1000d410:	dc800217 	ldw	r18,8(sp)
1000d414:	dc400117 	ldw	r17,4(sp)
1000d418:	dc000017 	ldw	r16,0(sp)
1000d41c:	dec00704 	addi	sp,sp,28
1000d420:	f800283a 	ret
1000d424:	21400017 	ldw	r5,0(r4)
1000d428:	18c00104 	addi	r3,r3,4
1000d42c:	21000104 	addi	r4,r4,4
1000d430:	197fff15 	stw	r5,-4(r3)
1000d434:	223ffb36 	bltu	r4,r8,1000d424 <__alt_data_end+0xf800d424>
1000d438:	003fe606 	br	1000d3d4 <__alt_data_end+0xf800d3d4>
1000d43c:	9c000084 	addi	r16,r19,2
1000d440:	003fe406 	br	1000d3d4 <__alt_data_end+0xf800d3d4>

1000d444 <__mcmp>:
1000d444:	20800417 	ldw	r2,16(r4)
1000d448:	28c00417 	ldw	r3,16(r5)
1000d44c:	10c5c83a 	sub	r2,r2,r3
1000d450:	1000111e 	bne	r2,zero,1000d498 <__mcmp+0x54>
1000d454:	18c7883a 	add	r3,r3,r3
1000d458:	18c7883a 	add	r3,r3,r3
1000d45c:	21000504 	addi	r4,r4,20
1000d460:	29400504 	addi	r5,r5,20
1000d464:	20c5883a 	add	r2,r4,r3
1000d468:	28cb883a 	add	r5,r5,r3
1000d46c:	00000106 	br	1000d474 <__mcmp+0x30>
1000d470:	20800a2e 	bgeu	r4,r2,1000d49c <__mcmp+0x58>
1000d474:	10bfff04 	addi	r2,r2,-4
1000d478:	297fff04 	addi	r5,r5,-4
1000d47c:	11800017 	ldw	r6,0(r2)
1000d480:	28c00017 	ldw	r3,0(r5)
1000d484:	30fffa26 	beq	r6,r3,1000d470 <__alt_data_end+0xf800d470>
1000d488:	30c00236 	bltu	r6,r3,1000d494 <__mcmp+0x50>
1000d48c:	00800044 	movi	r2,1
1000d490:	f800283a 	ret
1000d494:	00bfffc4 	movi	r2,-1
1000d498:	f800283a 	ret
1000d49c:	0005883a 	mov	r2,zero
1000d4a0:	f800283a 	ret

1000d4a4 <__mdiff>:
1000d4a4:	28c00417 	ldw	r3,16(r5)
1000d4a8:	30800417 	ldw	r2,16(r6)
1000d4ac:	defffa04 	addi	sp,sp,-24
1000d4b0:	dcc00315 	stw	r19,12(sp)
1000d4b4:	dc800215 	stw	r18,8(sp)
1000d4b8:	dfc00515 	stw	ra,20(sp)
1000d4bc:	dd000415 	stw	r20,16(sp)
1000d4c0:	dc400115 	stw	r17,4(sp)
1000d4c4:	dc000015 	stw	r16,0(sp)
1000d4c8:	1887c83a 	sub	r3,r3,r2
1000d4cc:	2825883a 	mov	r18,r5
1000d4d0:	3027883a 	mov	r19,r6
1000d4d4:	1800141e 	bne	r3,zero,1000d528 <__mdiff+0x84>
1000d4d8:	1085883a 	add	r2,r2,r2
1000d4dc:	1085883a 	add	r2,r2,r2
1000d4e0:	2a000504 	addi	r8,r5,20
1000d4e4:	34000504 	addi	r16,r6,20
1000d4e8:	4087883a 	add	r3,r8,r2
1000d4ec:	8085883a 	add	r2,r16,r2
1000d4f0:	00000106 	br	1000d4f8 <__mdiff+0x54>
1000d4f4:	40c0592e 	bgeu	r8,r3,1000d65c <__mdiff+0x1b8>
1000d4f8:	18ffff04 	addi	r3,r3,-4
1000d4fc:	10bfff04 	addi	r2,r2,-4
1000d500:	19c00017 	ldw	r7,0(r3)
1000d504:	11400017 	ldw	r5,0(r2)
1000d508:	397ffa26 	beq	r7,r5,1000d4f4 <__alt_data_end+0xf800d4f4>
1000d50c:	3940592e 	bgeu	r7,r5,1000d674 <__mdiff+0x1d0>
1000d510:	9005883a 	mov	r2,r18
1000d514:	4023883a 	mov	r17,r8
1000d518:	9825883a 	mov	r18,r19
1000d51c:	05000044 	movi	r20,1
1000d520:	1027883a 	mov	r19,r2
1000d524:	00000406 	br	1000d538 <__mdiff+0x94>
1000d528:	18005616 	blt	r3,zero,1000d684 <__mdiff+0x1e0>
1000d52c:	34400504 	addi	r17,r6,20
1000d530:	2c000504 	addi	r16,r5,20
1000d534:	0029883a 	mov	r20,zero
1000d538:	91400117 	ldw	r5,4(r18)
1000d53c:	000cac00 	call	1000cac0 <_Balloc>
1000d540:	92400417 	ldw	r9,16(r18)
1000d544:	9b000417 	ldw	r12,16(r19)
1000d548:	12c00504 	addi	r11,r2,20
1000d54c:	4a51883a 	add	r8,r9,r9
1000d550:	6319883a 	add	r12,r12,r12
1000d554:	4211883a 	add	r8,r8,r8
1000d558:	6319883a 	add	r12,r12,r12
1000d55c:	15000315 	stw	r20,12(r2)
1000d560:	8211883a 	add	r8,r16,r8
1000d564:	8b19883a 	add	r12,r17,r12
1000d568:	0007883a 	mov	r3,zero
1000d56c:	81400017 	ldw	r5,0(r16)
1000d570:	89c00017 	ldw	r7,0(r17)
1000d574:	59800104 	addi	r6,r11,4
1000d578:	293fffcc 	andi	r4,r5,65535
1000d57c:	20c7883a 	add	r3,r4,r3
1000d580:	393fffcc 	andi	r4,r7,65535
1000d584:	1909c83a 	sub	r4,r3,r4
1000d588:	280ad43a 	srli	r5,r5,16
1000d58c:	380ed43a 	srli	r7,r7,16
1000d590:	2007d43a 	srai	r3,r4,16
1000d594:	213fffcc 	andi	r4,r4,65535
1000d598:	29cbc83a 	sub	r5,r5,r7
1000d59c:	28c7883a 	add	r3,r5,r3
1000d5a0:	180a943a 	slli	r5,r3,16
1000d5a4:	8c400104 	addi	r17,r17,4
1000d5a8:	84000104 	addi	r16,r16,4
1000d5ac:	2908b03a 	or	r4,r5,r4
1000d5b0:	59000015 	stw	r4,0(r11)
1000d5b4:	1807d43a 	srai	r3,r3,16
1000d5b8:	3015883a 	mov	r10,r6
1000d5bc:	3017883a 	mov	r11,r6
1000d5c0:	8b3fea36 	bltu	r17,r12,1000d56c <__alt_data_end+0xf800d56c>
1000d5c4:	8200162e 	bgeu	r16,r8,1000d620 <__mdiff+0x17c>
1000d5c8:	8017883a 	mov	r11,r16
1000d5cc:	59400017 	ldw	r5,0(r11)
1000d5d0:	31800104 	addi	r6,r6,4
1000d5d4:	5ac00104 	addi	r11,r11,4
1000d5d8:	293fffcc 	andi	r4,r5,65535
1000d5dc:	20c7883a 	add	r3,r4,r3
1000d5e0:	280ed43a 	srli	r7,r5,16
1000d5e4:	180bd43a 	srai	r5,r3,16
1000d5e8:	193fffcc 	andi	r4,r3,65535
1000d5ec:	3947883a 	add	r3,r7,r5
1000d5f0:	180a943a 	slli	r5,r3,16
1000d5f4:	1807d43a 	srai	r3,r3,16
1000d5f8:	2908b03a 	or	r4,r5,r4
1000d5fc:	313fff15 	stw	r4,-4(r6)
1000d600:	5a3ff236 	bltu	r11,r8,1000d5cc <__alt_data_end+0xf800d5cc>
1000d604:	0406303a 	nor	r3,zero,r16
1000d608:	1a07883a 	add	r3,r3,r8
1000d60c:	1806d0ba 	srli	r3,r3,2
1000d610:	18c00044 	addi	r3,r3,1
1000d614:	18c7883a 	add	r3,r3,r3
1000d618:	18c7883a 	add	r3,r3,r3
1000d61c:	50d5883a 	add	r10,r10,r3
1000d620:	50ffff04 	addi	r3,r10,-4
1000d624:	2000041e 	bne	r4,zero,1000d638 <__mdiff+0x194>
1000d628:	18ffff04 	addi	r3,r3,-4
1000d62c:	19000017 	ldw	r4,0(r3)
1000d630:	4a7fffc4 	addi	r9,r9,-1
1000d634:	203ffc26 	beq	r4,zero,1000d628 <__alt_data_end+0xf800d628>
1000d638:	12400415 	stw	r9,16(r2)
1000d63c:	dfc00517 	ldw	ra,20(sp)
1000d640:	dd000417 	ldw	r20,16(sp)
1000d644:	dcc00317 	ldw	r19,12(sp)
1000d648:	dc800217 	ldw	r18,8(sp)
1000d64c:	dc400117 	ldw	r17,4(sp)
1000d650:	dc000017 	ldw	r16,0(sp)
1000d654:	dec00604 	addi	sp,sp,24
1000d658:	f800283a 	ret
1000d65c:	000b883a 	mov	r5,zero
1000d660:	000cac00 	call	1000cac0 <_Balloc>
1000d664:	00c00044 	movi	r3,1
1000d668:	10c00415 	stw	r3,16(r2)
1000d66c:	10000515 	stw	zero,20(r2)
1000d670:	003ff206 	br	1000d63c <__alt_data_end+0xf800d63c>
1000d674:	8023883a 	mov	r17,r16
1000d678:	0029883a 	mov	r20,zero
1000d67c:	4021883a 	mov	r16,r8
1000d680:	003fad06 	br	1000d538 <__alt_data_end+0xf800d538>
1000d684:	9005883a 	mov	r2,r18
1000d688:	94400504 	addi	r17,r18,20
1000d68c:	9c000504 	addi	r16,r19,20
1000d690:	9825883a 	mov	r18,r19
1000d694:	05000044 	movi	r20,1
1000d698:	1027883a 	mov	r19,r2
1000d69c:	003fa606 	br	1000d538 <__alt_data_end+0xf800d538>

1000d6a0 <__ulp>:
1000d6a0:	295ffc2c 	andhi	r5,r5,32752
1000d6a4:	00bf3034 	movhi	r2,64704
1000d6a8:	2887883a 	add	r3,r5,r2
1000d6ac:	00c0020e 	bge	zero,r3,1000d6b8 <__ulp+0x18>
1000d6b0:	0005883a 	mov	r2,zero
1000d6b4:	f800283a 	ret
1000d6b8:	00c7c83a 	sub	r3,zero,r3
1000d6bc:	1807d53a 	srai	r3,r3,20
1000d6c0:	008004c4 	movi	r2,19
1000d6c4:	10c00b0e 	bge	r2,r3,1000d6f4 <__ulp+0x54>
1000d6c8:	18bffb04 	addi	r2,r3,-20
1000d6cc:	01000784 	movi	r4,30
1000d6d0:	0007883a 	mov	r3,zero
1000d6d4:	20800516 	blt	r4,r2,1000d6ec <__ulp+0x4c>
1000d6d8:	010007c4 	movi	r4,31
1000d6dc:	2089c83a 	sub	r4,r4,r2
1000d6e0:	00800044 	movi	r2,1
1000d6e4:	1104983a 	sll	r2,r2,r4
1000d6e8:	f800283a 	ret
1000d6ec:	00800044 	movi	r2,1
1000d6f0:	f800283a 	ret
1000d6f4:	01400234 	movhi	r5,8
1000d6f8:	28c7d83a 	sra	r3,r5,r3
1000d6fc:	0005883a 	mov	r2,zero
1000d700:	f800283a 	ret

1000d704 <__b2d>:
1000d704:	defffa04 	addi	sp,sp,-24
1000d708:	dc000015 	stw	r16,0(sp)
1000d70c:	24000417 	ldw	r16,16(r4)
1000d710:	dc400115 	stw	r17,4(sp)
1000d714:	24400504 	addi	r17,r4,20
1000d718:	8421883a 	add	r16,r16,r16
1000d71c:	8421883a 	add	r16,r16,r16
1000d720:	8c21883a 	add	r16,r17,r16
1000d724:	dc800215 	stw	r18,8(sp)
1000d728:	84bfff17 	ldw	r18,-4(r16)
1000d72c:	dd000415 	stw	r20,16(sp)
1000d730:	dcc00315 	stw	r19,12(sp)
1000d734:	9009883a 	mov	r4,r18
1000d738:	2829883a 	mov	r20,r5
1000d73c:	dfc00515 	stw	ra,20(sp)
1000d740:	000cddc0 	call	1000cddc <__hi0bits>
1000d744:	00c00804 	movi	r3,32
1000d748:	1889c83a 	sub	r4,r3,r2
1000d74c:	a1000015 	stw	r4,0(r20)
1000d750:	01000284 	movi	r4,10
1000d754:	84ffff04 	addi	r19,r16,-4
1000d758:	20801216 	blt	r4,r2,1000d7a4 <__b2d+0xa0>
1000d75c:	018002c4 	movi	r6,11
1000d760:	308dc83a 	sub	r6,r6,r2
1000d764:	9186d83a 	srl	r3,r18,r6
1000d768:	18cffc34 	orhi	r3,r3,16368
1000d76c:	8cc0212e 	bgeu	r17,r19,1000d7f4 <__b2d+0xf0>
1000d770:	813ffe17 	ldw	r4,-8(r16)
1000d774:	218cd83a 	srl	r6,r4,r6
1000d778:	10800544 	addi	r2,r2,21
1000d77c:	9084983a 	sll	r2,r18,r2
1000d780:	1184b03a 	or	r2,r2,r6
1000d784:	dfc00517 	ldw	ra,20(sp)
1000d788:	dd000417 	ldw	r20,16(sp)
1000d78c:	dcc00317 	ldw	r19,12(sp)
1000d790:	dc800217 	ldw	r18,8(sp)
1000d794:	dc400117 	ldw	r17,4(sp)
1000d798:	dc000017 	ldw	r16,0(sp)
1000d79c:	dec00604 	addi	sp,sp,24
1000d7a0:	f800283a 	ret
1000d7a4:	8cc00f2e 	bgeu	r17,r19,1000d7e4 <__b2d+0xe0>
1000d7a8:	117ffd44 	addi	r5,r2,-11
1000d7ac:	80bffe17 	ldw	r2,-8(r16)
1000d7b0:	28000e26 	beq	r5,zero,1000d7ec <__b2d+0xe8>
1000d7b4:	1949c83a 	sub	r4,r3,r5
1000d7b8:	9164983a 	sll	r18,r18,r5
1000d7bc:	1106d83a 	srl	r3,r2,r4
1000d7c0:	81bffe04 	addi	r6,r16,-8
1000d7c4:	948ffc34 	orhi	r18,r18,16368
1000d7c8:	90c6b03a 	or	r3,r18,r3
1000d7cc:	89800e2e 	bgeu	r17,r6,1000d808 <__b2d+0x104>
1000d7d0:	81bffd17 	ldw	r6,-12(r16)
1000d7d4:	1144983a 	sll	r2,r2,r5
1000d7d8:	310ad83a 	srl	r5,r6,r4
1000d7dc:	2884b03a 	or	r2,r5,r2
1000d7e0:	003fe806 	br	1000d784 <__alt_data_end+0xf800d784>
1000d7e4:	10bffd44 	addi	r2,r2,-11
1000d7e8:	1000041e 	bne	r2,zero,1000d7fc <__b2d+0xf8>
1000d7ec:	90cffc34 	orhi	r3,r18,16368
1000d7f0:	003fe406 	br	1000d784 <__alt_data_end+0xf800d784>
1000d7f4:	000d883a 	mov	r6,zero
1000d7f8:	003fdf06 	br	1000d778 <__alt_data_end+0xf800d778>
1000d7fc:	90a4983a 	sll	r18,r18,r2
1000d800:	0005883a 	mov	r2,zero
1000d804:	003ff906 	br	1000d7ec <__alt_data_end+0xf800d7ec>
1000d808:	1144983a 	sll	r2,r2,r5
1000d80c:	003fdd06 	br	1000d784 <__alt_data_end+0xf800d784>

1000d810 <__d2b>:
1000d810:	defff804 	addi	sp,sp,-32
1000d814:	dc000215 	stw	r16,8(sp)
1000d818:	3021883a 	mov	r16,r6
1000d81c:	dc400315 	stw	r17,12(sp)
1000d820:	8022907a 	slli	r17,r16,1
1000d824:	dd000615 	stw	r20,24(sp)
1000d828:	2829883a 	mov	r20,r5
1000d82c:	01400044 	movi	r5,1
1000d830:	dcc00515 	stw	r19,20(sp)
1000d834:	dc800415 	stw	r18,16(sp)
1000d838:	dfc00715 	stw	ra,28(sp)
1000d83c:	3825883a 	mov	r18,r7
1000d840:	8822d57a 	srli	r17,r17,21
1000d844:	000cac00 	call	1000cac0 <_Balloc>
1000d848:	1027883a 	mov	r19,r2
1000d84c:	00800434 	movhi	r2,16
1000d850:	10bfffc4 	addi	r2,r2,-1
1000d854:	808c703a 	and	r6,r16,r2
1000d858:	88000126 	beq	r17,zero,1000d860 <__d2b+0x50>
1000d85c:	31800434 	orhi	r6,r6,16
1000d860:	d9800015 	stw	r6,0(sp)
1000d864:	a0002426 	beq	r20,zero,1000d8f8 <__d2b+0xe8>
1000d868:	d9000104 	addi	r4,sp,4
1000d86c:	dd000115 	stw	r20,4(sp)
1000d870:	000ce440 	call	1000ce44 <__lo0bits>
1000d874:	d8c00017 	ldw	r3,0(sp)
1000d878:	10002f1e 	bne	r2,zero,1000d938 <__d2b+0x128>
1000d87c:	d9000117 	ldw	r4,4(sp)
1000d880:	99000515 	stw	r4,20(r19)
1000d884:	1821003a 	cmpeq	r16,r3,zero
1000d888:	01000084 	movi	r4,2
1000d88c:	2421c83a 	sub	r16,r4,r16
1000d890:	98c00615 	stw	r3,24(r19)
1000d894:	9c000415 	stw	r16,16(r19)
1000d898:	88001f1e 	bne	r17,zero,1000d918 <__d2b+0x108>
1000d89c:	10bef384 	addi	r2,r2,-1074
1000d8a0:	90800015 	stw	r2,0(r18)
1000d8a4:	00900034 	movhi	r2,16384
1000d8a8:	10bfffc4 	addi	r2,r2,-1
1000d8ac:	8085883a 	add	r2,r16,r2
1000d8b0:	1085883a 	add	r2,r2,r2
1000d8b4:	1085883a 	add	r2,r2,r2
1000d8b8:	9885883a 	add	r2,r19,r2
1000d8bc:	11000517 	ldw	r4,20(r2)
1000d8c0:	8020917a 	slli	r16,r16,5
1000d8c4:	000cddc0 	call	1000cddc <__hi0bits>
1000d8c8:	d8c00817 	ldw	r3,32(sp)
1000d8cc:	8085c83a 	sub	r2,r16,r2
1000d8d0:	18800015 	stw	r2,0(r3)
1000d8d4:	9805883a 	mov	r2,r19
1000d8d8:	dfc00717 	ldw	ra,28(sp)
1000d8dc:	dd000617 	ldw	r20,24(sp)
1000d8e0:	dcc00517 	ldw	r19,20(sp)
1000d8e4:	dc800417 	ldw	r18,16(sp)
1000d8e8:	dc400317 	ldw	r17,12(sp)
1000d8ec:	dc000217 	ldw	r16,8(sp)
1000d8f0:	dec00804 	addi	sp,sp,32
1000d8f4:	f800283a 	ret
1000d8f8:	d809883a 	mov	r4,sp
1000d8fc:	000ce440 	call	1000ce44 <__lo0bits>
1000d900:	d8c00017 	ldw	r3,0(sp)
1000d904:	04000044 	movi	r16,1
1000d908:	9c000415 	stw	r16,16(r19)
1000d90c:	98c00515 	stw	r3,20(r19)
1000d910:	10800804 	addi	r2,r2,32
1000d914:	883fe126 	beq	r17,zero,1000d89c <__alt_data_end+0xf800d89c>
1000d918:	00c00d44 	movi	r3,53
1000d91c:	8c7ef344 	addi	r17,r17,-1075
1000d920:	88a3883a 	add	r17,r17,r2
1000d924:	1885c83a 	sub	r2,r3,r2
1000d928:	d8c00817 	ldw	r3,32(sp)
1000d92c:	94400015 	stw	r17,0(r18)
1000d930:	18800015 	stw	r2,0(r3)
1000d934:	003fe706 	br	1000d8d4 <__alt_data_end+0xf800d8d4>
1000d938:	01000804 	movi	r4,32
1000d93c:	2089c83a 	sub	r4,r4,r2
1000d940:	1908983a 	sll	r4,r3,r4
1000d944:	d9400117 	ldw	r5,4(sp)
1000d948:	1886d83a 	srl	r3,r3,r2
1000d94c:	2148b03a 	or	r4,r4,r5
1000d950:	99000515 	stw	r4,20(r19)
1000d954:	d8c00015 	stw	r3,0(sp)
1000d958:	003fca06 	br	1000d884 <__alt_data_end+0xf800d884>

1000d95c <__ratio>:
1000d95c:	defff904 	addi	sp,sp,-28
1000d960:	dc400315 	stw	r17,12(sp)
1000d964:	2823883a 	mov	r17,r5
1000d968:	d9400104 	addi	r5,sp,4
1000d96c:	dfc00615 	stw	ra,24(sp)
1000d970:	dcc00515 	stw	r19,20(sp)
1000d974:	dc800415 	stw	r18,16(sp)
1000d978:	2027883a 	mov	r19,r4
1000d97c:	dc000215 	stw	r16,8(sp)
1000d980:	000d7040 	call	1000d704 <__b2d>
1000d984:	d80b883a 	mov	r5,sp
1000d988:	8809883a 	mov	r4,r17
1000d98c:	1025883a 	mov	r18,r2
1000d990:	1821883a 	mov	r16,r3
1000d994:	000d7040 	call	1000d704 <__b2d>
1000d998:	8a000417 	ldw	r8,16(r17)
1000d99c:	99000417 	ldw	r4,16(r19)
1000d9a0:	d9400117 	ldw	r5,4(sp)
1000d9a4:	2209c83a 	sub	r4,r4,r8
1000d9a8:	2010917a 	slli	r8,r4,5
1000d9ac:	d9000017 	ldw	r4,0(sp)
1000d9b0:	2909c83a 	sub	r4,r5,r4
1000d9b4:	4109883a 	add	r4,r8,r4
1000d9b8:	01000e0e 	bge	zero,r4,1000d9f4 <__ratio+0x98>
1000d9bc:	2008953a 	slli	r4,r4,20
1000d9c0:	2421883a 	add	r16,r4,r16
1000d9c4:	100d883a 	mov	r6,r2
1000d9c8:	180f883a 	mov	r7,r3
1000d9cc:	9009883a 	mov	r4,r18
1000d9d0:	800b883a 	mov	r5,r16
1000d9d4:	001186c0 	call	1001186c <__divdf3>
1000d9d8:	dfc00617 	ldw	ra,24(sp)
1000d9dc:	dcc00517 	ldw	r19,20(sp)
1000d9e0:	dc800417 	ldw	r18,16(sp)
1000d9e4:	dc400317 	ldw	r17,12(sp)
1000d9e8:	dc000217 	ldw	r16,8(sp)
1000d9ec:	dec00704 	addi	sp,sp,28
1000d9f0:	f800283a 	ret
1000d9f4:	2008953a 	slli	r4,r4,20
1000d9f8:	1907c83a 	sub	r3,r3,r4
1000d9fc:	003ff106 	br	1000d9c4 <__alt_data_end+0xf800d9c4>

1000da00 <_mprec_log10>:
1000da00:	defffe04 	addi	sp,sp,-8
1000da04:	dc000015 	stw	r16,0(sp)
1000da08:	dfc00115 	stw	ra,4(sp)
1000da0c:	008005c4 	movi	r2,23
1000da10:	2021883a 	mov	r16,r4
1000da14:	11000d0e 	bge	r2,r4,1000da4c <_mprec_log10+0x4c>
1000da18:	0005883a 	mov	r2,zero
1000da1c:	00cffc34 	movhi	r3,16368
1000da20:	843fffc4 	addi	r16,r16,-1
1000da24:	000d883a 	mov	r6,zero
1000da28:	01d00934 	movhi	r7,16420
1000da2c:	1009883a 	mov	r4,r2
1000da30:	180b883a 	mov	r5,r3
1000da34:	00124940 	call	10012494 <__muldf3>
1000da38:	803ff91e 	bne	r16,zero,1000da20 <__alt_data_end+0xf800da20>
1000da3c:	dfc00117 	ldw	ra,4(sp)
1000da40:	dc000017 	ldw	r16,0(sp)
1000da44:	dec00204 	addi	sp,sp,8
1000da48:	f800283a 	ret
1000da4c:	202090fa 	slli	r16,r4,3
1000da50:	00840074 	movhi	r2,4097
1000da54:	109a6a04 	addi	r2,r2,27048
1000da58:	1421883a 	add	r16,r2,r16
1000da5c:	80800017 	ldw	r2,0(r16)
1000da60:	80c00117 	ldw	r3,4(r16)
1000da64:	dfc00117 	ldw	ra,4(sp)
1000da68:	dc000017 	ldw	r16,0(sp)
1000da6c:	dec00204 	addi	sp,sp,8
1000da70:	f800283a 	ret

1000da74 <__copybits>:
1000da74:	297fffc4 	addi	r5,r5,-1
1000da78:	280fd17a 	srai	r7,r5,5
1000da7c:	30c00417 	ldw	r3,16(r6)
1000da80:	30800504 	addi	r2,r6,20
1000da84:	39c00044 	addi	r7,r7,1
1000da88:	18c7883a 	add	r3,r3,r3
1000da8c:	39cf883a 	add	r7,r7,r7
1000da90:	18c7883a 	add	r3,r3,r3
1000da94:	39cf883a 	add	r7,r7,r7
1000da98:	10c7883a 	add	r3,r2,r3
1000da9c:	21cf883a 	add	r7,r4,r7
1000daa0:	10c00d2e 	bgeu	r2,r3,1000dad8 <__copybits+0x64>
1000daa4:	200b883a 	mov	r5,r4
1000daa8:	12000017 	ldw	r8,0(r2)
1000daac:	29400104 	addi	r5,r5,4
1000dab0:	10800104 	addi	r2,r2,4
1000dab4:	2a3fff15 	stw	r8,-4(r5)
1000dab8:	10fffb36 	bltu	r2,r3,1000daa8 <__alt_data_end+0xf800daa8>
1000dabc:	1985c83a 	sub	r2,r3,r6
1000dac0:	10bffac4 	addi	r2,r2,-21
1000dac4:	1004d0ba 	srli	r2,r2,2
1000dac8:	10800044 	addi	r2,r2,1
1000dacc:	1085883a 	add	r2,r2,r2
1000dad0:	1085883a 	add	r2,r2,r2
1000dad4:	2089883a 	add	r4,r4,r2
1000dad8:	21c0032e 	bgeu	r4,r7,1000dae8 <__copybits+0x74>
1000dadc:	20000015 	stw	zero,0(r4)
1000dae0:	21000104 	addi	r4,r4,4
1000dae4:	21fffd36 	bltu	r4,r7,1000dadc <__alt_data_end+0xf800dadc>
1000dae8:	f800283a 	ret

1000daec <__any_on>:
1000daec:	20c00417 	ldw	r3,16(r4)
1000daf0:	2805d17a 	srai	r2,r5,5
1000daf4:	21000504 	addi	r4,r4,20
1000daf8:	18800d0e 	bge	r3,r2,1000db30 <__any_on+0x44>
1000dafc:	18c7883a 	add	r3,r3,r3
1000db00:	18c7883a 	add	r3,r3,r3
1000db04:	20c7883a 	add	r3,r4,r3
1000db08:	20c0192e 	bgeu	r4,r3,1000db70 <__any_on+0x84>
1000db0c:	18bfff17 	ldw	r2,-4(r3)
1000db10:	18ffff04 	addi	r3,r3,-4
1000db14:	1000041e 	bne	r2,zero,1000db28 <__any_on+0x3c>
1000db18:	20c0142e 	bgeu	r4,r3,1000db6c <__any_on+0x80>
1000db1c:	18ffff04 	addi	r3,r3,-4
1000db20:	19400017 	ldw	r5,0(r3)
1000db24:	283ffc26 	beq	r5,zero,1000db18 <__alt_data_end+0xf800db18>
1000db28:	00800044 	movi	r2,1
1000db2c:	f800283a 	ret
1000db30:	10c00a0e 	bge	r2,r3,1000db5c <__any_on+0x70>
1000db34:	1085883a 	add	r2,r2,r2
1000db38:	1085883a 	add	r2,r2,r2
1000db3c:	294007cc 	andi	r5,r5,31
1000db40:	2087883a 	add	r3,r4,r2
1000db44:	283ff026 	beq	r5,zero,1000db08 <__alt_data_end+0xf800db08>
1000db48:	19800017 	ldw	r6,0(r3)
1000db4c:	3144d83a 	srl	r2,r6,r5
1000db50:	114a983a 	sll	r5,r2,r5
1000db54:	317ff41e 	bne	r6,r5,1000db28 <__alt_data_end+0xf800db28>
1000db58:	003feb06 	br	1000db08 <__alt_data_end+0xf800db08>
1000db5c:	1085883a 	add	r2,r2,r2
1000db60:	1085883a 	add	r2,r2,r2
1000db64:	2087883a 	add	r3,r4,r2
1000db68:	003fe706 	br	1000db08 <__alt_data_end+0xf800db08>
1000db6c:	f800283a 	ret
1000db70:	0005883a 	mov	r2,zero
1000db74:	f800283a 	ret

1000db78 <_realloc_r>:
1000db78:	defff604 	addi	sp,sp,-40
1000db7c:	dc800215 	stw	r18,8(sp)
1000db80:	dfc00915 	stw	ra,36(sp)
1000db84:	df000815 	stw	fp,32(sp)
1000db88:	ddc00715 	stw	r23,28(sp)
1000db8c:	dd800615 	stw	r22,24(sp)
1000db90:	dd400515 	stw	r21,20(sp)
1000db94:	dd000415 	stw	r20,16(sp)
1000db98:	dcc00315 	stw	r19,12(sp)
1000db9c:	dc400115 	stw	r17,4(sp)
1000dba0:	dc000015 	stw	r16,0(sp)
1000dba4:	3025883a 	mov	r18,r6
1000dba8:	2800b726 	beq	r5,zero,1000de88 <_realloc_r+0x310>
1000dbac:	282b883a 	mov	r21,r5
1000dbb0:	2029883a 	mov	r20,r4
1000dbb4:	0013e000 	call	10013e00 <__malloc_lock>
1000dbb8:	a8bfff17 	ldw	r2,-4(r21)
1000dbbc:	043fff04 	movi	r16,-4
1000dbc0:	90c002c4 	addi	r3,r18,11
1000dbc4:	01000584 	movi	r4,22
1000dbc8:	acfffe04 	addi	r19,r21,-8
1000dbcc:	1420703a 	and	r16,r2,r16
1000dbd0:	20c0332e 	bgeu	r4,r3,1000dca0 <_realloc_r+0x128>
1000dbd4:	047ffe04 	movi	r17,-8
1000dbd8:	1c62703a 	and	r17,r3,r17
1000dbdc:	8807883a 	mov	r3,r17
1000dbe0:	88005816 	blt	r17,zero,1000dd44 <_realloc_r+0x1cc>
1000dbe4:	8c805736 	bltu	r17,r18,1000dd44 <_realloc_r+0x1cc>
1000dbe8:	80c0300e 	bge	r16,r3,1000dcac <_realloc_r+0x134>
1000dbec:	070400b4 	movhi	fp,4098
1000dbf0:	e7106e04 	addi	fp,fp,16824
1000dbf4:	e1c00217 	ldw	r7,8(fp)
1000dbf8:	9c09883a 	add	r4,r19,r16
1000dbfc:	22000117 	ldw	r8,4(r4)
1000dc00:	21c06326 	beq	r4,r7,1000dd90 <_realloc_r+0x218>
1000dc04:	017fff84 	movi	r5,-2
1000dc08:	414a703a 	and	r5,r8,r5
1000dc0c:	214b883a 	add	r5,r4,r5
1000dc10:	29800117 	ldw	r6,4(r5)
1000dc14:	3180004c 	andi	r6,r6,1
1000dc18:	30003f26 	beq	r6,zero,1000dd18 <_realloc_r+0x1a0>
1000dc1c:	1080004c 	andi	r2,r2,1
1000dc20:	10008326 	beq	r2,zero,1000de30 <_realloc_r+0x2b8>
1000dc24:	900b883a 	mov	r5,r18
1000dc28:	a009883a 	mov	r4,r20
1000dc2c:	000be040 	call	1000be04 <_malloc_r>
1000dc30:	1025883a 	mov	r18,r2
1000dc34:	10011e26 	beq	r2,zero,1000e0b0 <_realloc_r+0x538>
1000dc38:	a93fff17 	ldw	r4,-4(r21)
1000dc3c:	10fffe04 	addi	r3,r2,-8
1000dc40:	00bfff84 	movi	r2,-2
1000dc44:	2084703a 	and	r2,r4,r2
1000dc48:	9885883a 	add	r2,r19,r2
1000dc4c:	1880ee26 	beq	r3,r2,1000e008 <_realloc_r+0x490>
1000dc50:	81bfff04 	addi	r6,r16,-4
1000dc54:	00800904 	movi	r2,36
1000dc58:	1180b836 	bltu	r2,r6,1000df3c <_realloc_r+0x3c4>
1000dc5c:	00c004c4 	movi	r3,19
1000dc60:	19809636 	bltu	r3,r6,1000debc <_realloc_r+0x344>
1000dc64:	9005883a 	mov	r2,r18
1000dc68:	a807883a 	mov	r3,r21
1000dc6c:	19000017 	ldw	r4,0(r3)
1000dc70:	11000015 	stw	r4,0(r2)
1000dc74:	19000117 	ldw	r4,4(r3)
1000dc78:	11000115 	stw	r4,4(r2)
1000dc7c:	18c00217 	ldw	r3,8(r3)
1000dc80:	10c00215 	stw	r3,8(r2)
1000dc84:	a80b883a 	mov	r5,r21
1000dc88:	a009883a 	mov	r4,r20
1000dc8c:	000b20c0 	call	1000b20c <_free_r>
1000dc90:	a009883a 	mov	r4,r20
1000dc94:	0013e240 	call	10013e24 <__malloc_unlock>
1000dc98:	9005883a 	mov	r2,r18
1000dc9c:	00001206 	br	1000dce8 <_realloc_r+0x170>
1000dca0:	00c00404 	movi	r3,16
1000dca4:	1823883a 	mov	r17,r3
1000dca8:	003fce06 	br	1000dbe4 <__alt_data_end+0xf800dbe4>
1000dcac:	a825883a 	mov	r18,r21
1000dcb0:	8445c83a 	sub	r2,r16,r17
1000dcb4:	00c003c4 	movi	r3,15
1000dcb8:	18802636 	bltu	r3,r2,1000dd54 <_realloc_r+0x1dc>
1000dcbc:	99800117 	ldw	r6,4(r19)
1000dcc0:	9c07883a 	add	r3,r19,r16
1000dcc4:	3180004c 	andi	r6,r6,1
1000dcc8:	3420b03a 	or	r16,r6,r16
1000dccc:	9c000115 	stw	r16,4(r19)
1000dcd0:	18800117 	ldw	r2,4(r3)
1000dcd4:	10800054 	ori	r2,r2,1
1000dcd8:	18800115 	stw	r2,4(r3)
1000dcdc:	a009883a 	mov	r4,r20
1000dce0:	0013e240 	call	10013e24 <__malloc_unlock>
1000dce4:	9005883a 	mov	r2,r18
1000dce8:	dfc00917 	ldw	ra,36(sp)
1000dcec:	df000817 	ldw	fp,32(sp)
1000dcf0:	ddc00717 	ldw	r23,28(sp)
1000dcf4:	dd800617 	ldw	r22,24(sp)
1000dcf8:	dd400517 	ldw	r21,20(sp)
1000dcfc:	dd000417 	ldw	r20,16(sp)
1000dd00:	dcc00317 	ldw	r19,12(sp)
1000dd04:	dc800217 	ldw	r18,8(sp)
1000dd08:	dc400117 	ldw	r17,4(sp)
1000dd0c:	dc000017 	ldw	r16,0(sp)
1000dd10:	dec00a04 	addi	sp,sp,40
1000dd14:	f800283a 	ret
1000dd18:	017fff04 	movi	r5,-4
1000dd1c:	414a703a 	and	r5,r8,r5
1000dd20:	814d883a 	add	r6,r16,r5
1000dd24:	30c01f16 	blt	r6,r3,1000dda4 <_realloc_r+0x22c>
1000dd28:	20800317 	ldw	r2,12(r4)
1000dd2c:	20c00217 	ldw	r3,8(r4)
1000dd30:	a825883a 	mov	r18,r21
1000dd34:	3021883a 	mov	r16,r6
1000dd38:	18800315 	stw	r2,12(r3)
1000dd3c:	10c00215 	stw	r3,8(r2)
1000dd40:	003fdb06 	br	1000dcb0 <__alt_data_end+0xf800dcb0>
1000dd44:	00800304 	movi	r2,12
1000dd48:	a0800015 	stw	r2,0(r20)
1000dd4c:	0005883a 	mov	r2,zero
1000dd50:	003fe506 	br	1000dce8 <__alt_data_end+0xf800dce8>
1000dd54:	98c00117 	ldw	r3,4(r19)
1000dd58:	9c4b883a 	add	r5,r19,r17
1000dd5c:	11000054 	ori	r4,r2,1
1000dd60:	18c0004c 	andi	r3,r3,1
1000dd64:	1c62b03a 	or	r17,r3,r17
1000dd68:	9c400115 	stw	r17,4(r19)
1000dd6c:	29000115 	stw	r4,4(r5)
1000dd70:	2885883a 	add	r2,r5,r2
1000dd74:	10c00117 	ldw	r3,4(r2)
1000dd78:	29400204 	addi	r5,r5,8
1000dd7c:	a009883a 	mov	r4,r20
1000dd80:	18c00054 	ori	r3,r3,1
1000dd84:	10c00115 	stw	r3,4(r2)
1000dd88:	000b20c0 	call	1000b20c <_free_r>
1000dd8c:	003fd306 	br	1000dcdc <__alt_data_end+0xf800dcdc>
1000dd90:	017fff04 	movi	r5,-4
1000dd94:	414a703a 	and	r5,r8,r5
1000dd98:	89800404 	addi	r6,r17,16
1000dd9c:	8151883a 	add	r8,r16,r5
1000dda0:	4180590e 	bge	r8,r6,1000df08 <_realloc_r+0x390>
1000dda4:	1080004c 	andi	r2,r2,1
1000dda8:	103f9e1e 	bne	r2,zero,1000dc24 <__alt_data_end+0xf800dc24>
1000ddac:	adbffe17 	ldw	r22,-8(r21)
1000ddb0:	00bfff04 	movi	r2,-4
1000ddb4:	9dadc83a 	sub	r22,r19,r22
1000ddb8:	b1800117 	ldw	r6,4(r22)
1000ddbc:	3084703a 	and	r2,r6,r2
1000ddc0:	20002026 	beq	r4,zero,1000de44 <_realloc_r+0x2cc>
1000ddc4:	80af883a 	add	r23,r16,r2
1000ddc8:	b96f883a 	add	r23,r23,r5
1000ddcc:	21c05f26 	beq	r4,r7,1000df4c <_realloc_r+0x3d4>
1000ddd0:	b8c01c16 	blt	r23,r3,1000de44 <_realloc_r+0x2cc>
1000ddd4:	20800317 	ldw	r2,12(r4)
1000ddd8:	20c00217 	ldw	r3,8(r4)
1000dddc:	81bfff04 	addi	r6,r16,-4
1000dde0:	01000904 	movi	r4,36
1000dde4:	18800315 	stw	r2,12(r3)
1000dde8:	10c00215 	stw	r3,8(r2)
1000ddec:	b0c00217 	ldw	r3,8(r22)
1000ddf0:	b0800317 	ldw	r2,12(r22)
1000ddf4:	b4800204 	addi	r18,r22,8
1000ddf8:	18800315 	stw	r2,12(r3)
1000ddfc:	10c00215 	stw	r3,8(r2)
1000de00:	21801b36 	bltu	r4,r6,1000de70 <_realloc_r+0x2f8>
1000de04:	008004c4 	movi	r2,19
1000de08:	1180352e 	bgeu	r2,r6,1000dee0 <_realloc_r+0x368>
1000de0c:	a8800017 	ldw	r2,0(r21)
1000de10:	b0800215 	stw	r2,8(r22)
1000de14:	a8800117 	ldw	r2,4(r21)
1000de18:	b0800315 	stw	r2,12(r22)
1000de1c:	008006c4 	movi	r2,27
1000de20:	11807f36 	bltu	r2,r6,1000e020 <_realloc_r+0x4a8>
1000de24:	b0800404 	addi	r2,r22,16
1000de28:	ad400204 	addi	r21,r21,8
1000de2c:	00002d06 	br	1000dee4 <_realloc_r+0x36c>
1000de30:	adbffe17 	ldw	r22,-8(r21)
1000de34:	00bfff04 	movi	r2,-4
1000de38:	9dadc83a 	sub	r22,r19,r22
1000de3c:	b1000117 	ldw	r4,4(r22)
1000de40:	2084703a 	and	r2,r4,r2
1000de44:	b03f7726 	beq	r22,zero,1000dc24 <__alt_data_end+0xf800dc24>
1000de48:	80af883a 	add	r23,r16,r2
1000de4c:	b8ff7516 	blt	r23,r3,1000dc24 <__alt_data_end+0xf800dc24>
1000de50:	b0800317 	ldw	r2,12(r22)
1000de54:	b0c00217 	ldw	r3,8(r22)
1000de58:	81bfff04 	addi	r6,r16,-4
1000de5c:	01000904 	movi	r4,36
1000de60:	18800315 	stw	r2,12(r3)
1000de64:	10c00215 	stw	r3,8(r2)
1000de68:	b4800204 	addi	r18,r22,8
1000de6c:	21bfe52e 	bgeu	r4,r6,1000de04 <__alt_data_end+0xf800de04>
1000de70:	a80b883a 	mov	r5,r21
1000de74:	9009883a 	mov	r4,r18
1000de78:	000c83c0 	call	1000c83c <memmove>
1000de7c:	b821883a 	mov	r16,r23
1000de80:	b027883a 	mov	r19,r22
1000de84:	003f8a06 	br	1000dcb0 <__alt_data_end+0xf800dcb0>
1000de88:	300b883a 	mov	r5,r6
1000de8c:	dfc00917 	ldw	ra,36(sp)
1000de90:	df000817 	ldw	fp,32(sp)
1000de94:	ddc00717 	ldw	r23,28(sp)
1000de98:	dd800617 	ldw	r22,24(sp)
1000de9c:	dd400517 	ldw	r21,20(sp)
1000dea0:	dd000417 	ldw	r20,16(sp)
1000dea4:	dcc00317 	ldw	r19,12(sp)
1000dea8:	dc800217 	ldw	r18,8(sp)
1000deac:	dc400117 	ldw	r17,4(sp)
1000deb0:	dc000017 	ldw	r16,0(sp)
1000deb4:	dec00a04 	addi	sp,sp,40
1000deb8:	000be041 	jmpi	1000be04 <_malloc_r>
1000debc:	a8c00017 	ldw	r3,0(r21)
1000dec0:	90c00015 	stw	r3,0(r18)
1000dec4:	a8c00117 	ldw	r3,4(r21)
1000dec8:	90c00115 	stw	r3,4(r18)
1000decc:	00c006c4 	movi	r3,27
1000ded0:	19804536 	bltu	r3,r6,1000dfe8 <_realloc_r+0x470>
1000ded4:	90800204 	addi	r2,r18,8
1000ded8:	a8c00204 	addi	r3,r21,8
1000dedc:	003f6306 	br	1000dc6c <__alt_data_end+0xf800dc6c>
1000dee0:	9005883a 	mov	r2,r18
1000dee4:	a8c00017 	ldw	r3,0(r21)
1000dee8:	b821883a 	mov	r16,r23
1000deec:	b027883a 	mov	r19,r22
1000def0:	10c00015 	stw	r3,0(r2)
1000def4:	a8c00117 	ldw	r3,4(r21)
1000def8:	10c00115 	stw	r3,4(r2)
1000defc:	a8c00217 	ldw	r3,8(r21)
1000df00:	10c00215 	stw	r3,8(r2)
1000df04:	003f6a06 	br	1000dcb0 <__alt_data_end+0xf800dcb0>
1000df08:	9c67883a 	add	r19,r19,r17
1000df0c:	4445c83a 	sub	r2,r8,r17
1000df10:	e4c00215 	stw	r19,8(fp)
1000df14:	10800054 	ori	r2,r2,1
1000df18:	98800115 	stw	r2,4(r19)
1000df1c:	a8bfff17 	ldw	r2,-4(r21)
1000df20:	a009883a 	mov	r4,r20
1000df24:	1080004c 	andi	r2,r2,1
1000df28:	1462b03a 	or	r17,r2,r17
1000df2c:	ac7fff15 	stw	r17,-4(r21)
1000df30:	0013e240 	call	10013e24 <__malloc_unlock>
1000df34:	a805883a 	mov	r2,r21
1000df38:	003f6b06 	br	1000dce8 <__alt_data_end+0xf800dce8>
1000df3c:	a80b883a 	mov	r5,r21
1000df40:	9009883a 	mov	r4,r18
1000df44:	000c83c0 	call	1000c83c <memmove>
1000df48:	003f4e06 	br	1000dc84 <__alt_data_end+0xf800dc84>
1000df4c:	89000404 	addi	r4,r17,16
1000df50:	b93fbc16 	blt	r23,r4,1000de44 <__alt_data_end+0xf800de44>
1000df54:	b0800317 	ldw	r2,12(r22)
1000df58:	b0c00217 	ldw	r3,8(r22)
1000df5c:	81bfff04 	addi	r6,r16,-4
1000df60:	01000904 	movi	r4,36
1000df64:	18800315 	stw	r2,12(r3)
1000df68:	10c00215 	stw	r3,8(r2)
1000df6c:	b4800204 	addi	r18,r22,8
1000df70:	21804336 	bltu	r4,r6,1000e080 <_realloc_r+0x508>
1000df74:	008004c4 	movi	r2,19
1000df78:	11803f2e 	bgeu	r2,r6,1000e078 <_realloc_r+0x500>
1000df7c:	a8800017 	ldw	r2,0(r21)
1000df80:	b0800215 	stw	r2,8(r22)
1000df84:	a8800117 	ldw	r2,4(r21)
1000df88:	b0800315 	stw	r2,12(r22)
1000df8c:	008006c4 	movi	r2,27
1000df90:	11803f36 	bltu	r2,r6,1000e090 <_realloc_r+0x518>
1000df94:	b0800404 	addi	r2,r22,16
1000df98:	ad400204 	addi	r21,r21,8
1000df9c:	a8c00017 	ldw	r3,0(r21)
1000dfa0:	10c00015 	stw	r3,0(r2)
1000dfa4:	a8c00117 	ldw	r3,4(r21)
1000dfa8:	10c00115 	stw	r3,4(r2)
1000dfac:	a8c00217 	ldw	r3,8(r21)
1000dfb0:	10c00215 	stw	r3,8(r2)
1000dfb4:	b447883a 	add	r3,r22,r17
1000dfb8:	bc45c83a 	sub	r2,r23,r17
1000dfbc:	e0c00215 	stw	r3,8(fp)
1000dfc0:	10800054 	ori	r2,r2,1
1000dfc4:	18800115 	stw	r2,4(r3)
1000dfc8:	b0800117 	ldw	r2,4(r22)
1000dfcc:	a009883a 	mov	r4,r20
1000dfd0:	1080004c 	andi	r2,r2,1
1000dfd4:	1462b03a 	or	r17,r2,r17
1000dfd8:	b4400115 	stw	r17,4(r22)
1000dfdc:	0013e240 	call	10013e24 <__malloc_unlock>
1000dfe0:	9005883a 	mov	r2,r18
1000dfe4:	003f4006 	br	1000dce8 <__alt_data_end+0xf800dce8>
1000dfe8:	a8c00217 	ldw	r3,8(r21)
1000dfec:	90c00215 	stw	r3,8(r18)
1000dff0:	a8c00317 	ldw	r3,12(r21)
1000dff4:	90c00315 	stw	r3,12(r18)
1000dff8:	30801126 	beq	r6,r2,1000e040 <_realloc_r+0x4c8>
1000dffc:	90800404 	addi	r2,r18,16
1000e000:	a8c00404 	addi	r3,r21,16
1000e004:	003f1906 	br	1000dc6c <__alt_data_end+0xf800dc6c>
1000e008:	90ffff17 	ldw	r3,-4(r18)
1000e00c:	00bfff04 	movi	r2,-4
1000e010:	a825883a 	mov	r18,r21
1000e014:	1884703a 	and	r2,r3,r2
1000e018:	80a1883a 	add	r16,r16,r2
1000e01c:	003f2406 	br	1000dcb0 <__alt_data_end+0xf800dcb0>
1000e020:	a8800217 	ldw	r2,8(r21)
1000e024:	b0800415 	stw	r2,16(r22)
1000e028:	a8800317 	ldw	r2,12(r21)
1000e02c:	b0800515 	stw	r2,20(r22)
1000e030:	31000a26 	beq	r6,r4,1000e05c <_realloc_r+0x4e4>
1000e034:	b0800604 	addi	r2,r22,24
1000e038:	ad400404 	addi	r21,r21,16
1000e03c:	003fa906 	br	1000dee4 <__alt_data_end+0xf800dee4>
1000e040:	a9000417 	ldw	r4,16(r21)
1000e044:	90800604 	addi	r2,r18,24
1000e048:	a8c00604 	addi	r3,r21,24
1000e04c:	91000415 	stw	r4,16(r18)
1000e050:	a9000517 	ldw	r4,20(r21)
1000e054:	91000515 	stw	r4,20(r18)
1000e058:	003f0406 	br	1000dc6c <__alt_data_end+0xf800dc6c>
1000e05c:	a8c00417 	ldw	r3,16(r21)
1000e060:	ad400604 	addi	r21,r21,24
1000e064:	b0800804 	addi	r2,r22,32
1000e068:	b0c00615 	stw	r3,24(r22)
1000e06c:	a8ffff17 	ldw	r3,-4(r21)
1000e070:	b0c00715 	stw	r3,28(r22)
1000e074:	003f9b06 	br	1000dee4 <__alt_data_end+0xf800dee4>
1000e078:	9005883a 	mov	r2,r18
1000e07c:	003fc706 	br	1000df9c <__alt_data_end+0xf800df9c>
1000e080:	a80b883a 	mov	r5,r21
1000e084:	9009883a 	mov	r4,r18
1000e088:	000c83c0 	call	1000c83c <memmove>
1000e08c:	003fc906 	br	1000dfb4 <__alt_data_end+0xf800dfb4>
1000e090:	a8800217 	ldw	r2,8(r21)
1000e094:	b0800415 	stw	r2,16(r22)
1000e098:	a8800317 	ldw	r2,12(r21)
1000e09c:	b0800515 	stw	r2,20(r22)
1000e0a0:	31000726 	beq	r6,r4,1000e0c0 <_realloc_r+0x548>
1000e0a4:	b0800604 	addi	r2,r22,24
1000e0a8:	ad400404 	addi	r21,r21,16
1000e0ac:	003fbb06 	br	1000df9c <__alt_data_end+0xf800df9c>
1000e0b0:	a009883a 	mov	r4,r20
1000e0b4:	0013e240 	call	10013e24 <__malloc_unlock>
1000e0b8:	0005883a 	mov	r2,zero
1000e0bc:	003f0a06 	br	1000dce8 <__alt_data_end+0xf800dce8>
1000e0c0:	a8c00417 	ldw	r3,16(r21)
1000e0c4:	ad400604 	addi	r21,r21,24
1000e0c8:	b0800804 	addi	r2,r22,32
1000e0cc:	b0c00615 	stw	r3,24(r22)
1000e0d0:	a8ffff17 	ldw	r3,-4(r21)
1000e0d4:	b0c00715 	stw	r3,28(r22)
1000e0d8:	003fb006 	br	1000df9c <__alt_data_end+0xf800df9c>

1000e0dc <__fpclassifyd>:
1000e0dc:	00a00034 	movhi	r2,32768
1000e0e0:	10bfffc4 	addi	r2,r2,-1
1000e0e4:	2884703a 	and	r2,r5,r2
1000e0e8:	10000726 	beq	r2,zero,1000e108 <__fpclassifyd+0x2c>
1000e0ec:	00fffc34 	movhi	r3,65520
1000e0f0:	019ff834 	movhi	r6,32736
1000e0f4:	28c7883a 	add	r3,r5,r3
1000e0f8:	31bfffc4 	addi	r6,r6,-1
1000e0fc:	30c00536 	bltu	r6,r3,1000e114 <__fpclassifyd+0x38>
1000e100:	00800104 	movi	r2,4
1000e104:	f800283a 	ret
1000e108:	2000021e 	bne	r4,zero,1000e114 <__fpclassifyd+0x38>
1000e10c:	00800084 	movi	r2,2
1000e110:	f800283a 	ret
1000e114:	00dffc34 	movhi	r3,32752
1000e118:	019ff834 	movhi	r6,32736
1000e11c:	28cb883a 	add	r5,r5,r3
1000e120:	31bfffc4 	addi	r6,r6,-1
1000e124:	317ff62e 	bgeu	r6,r5,1000e100 <__alt_data_end+0xf800e100>
1000e128:	01400434 	movhi	r5,16
1000e12c:	297fffc4 	addi	r5,r5,-1
1000e130:	28800236 	bltu	r5,r2,1000e13c <__fpclassifyd+0x60>
1000e134:	008000c4 	movi	r2,3
1000e138:	f800283a 	ret
1000e13c:	10c00226 	beq	r2,r3,1000e148 <__fpclassifyd+0x6c>
1000e140:	0005883a 	mov	r2,zero
1000e144:	f800283a 	ret
1000e148:	2005003a 	cmpeq	r2,r4,zero
1000e14c:	f800283a 	ret

1000e150 <_sbrk_r>:
1000e150:	defffd04 	addi	sp,sp,-12
1000e154:	dc000015 	stw	r16,0(sp)
1000e158:	040400f4 	movhi	r16,4099
1000e15c:	dc400115 	stw	r17,4(sp)
1000e160:	84112304 	addi	r16,r16,17548
1000e164:	2023883a 	mov	r17,r4
1000e168:	2809883a 	mov	r4,r5
1000e16c:	dfc00215 	stw	ra,8(sp)
1000e170:	80000015 	stw	zero,0(r16)
1000e174:	001400c0 	call	1001400c <sbrk>
1000e178:	00ffffc4 	movi	r3,-1
1000e17c:	10c00526 	beq	r2,r3,1000e194 <_sbrk_r+0x44>
1000e180:	dfc00217 	ldw	ra,8(sp)
1000e184:	dc400117 	ldw	r17,4(sp)
1000e188:	dc000017 	ldw	r16,0(sp)
1000e18c:	dec00304 	addi	sp,sp,12
1000e190:	f800283a 	ret
1000e194:	80c00017 	ldw	r3,0(r16)
1000e198:	183ff926 	beq	r3,zero,1000e180 <__alt_data_end+0xf800e180>
1000e19c:	88c00015 	stw	r3,0(r17)
1000e1a0:	003ff706 	br	1000e180 <__alt_data_end+0xf800e180>

1000e1a4 <__sread>:
1000e1a4:	defffe04 	addi	sp,sp,-8
1000e1a8:	dc000015 	stw	r16,0(sp)
1000e1ac:	2821883a 	mov	r16,r5
1000e1b0:	2940038f 	ldh	r5,14(r5)
1000e1b4:	dfc00115 	stw	ra,4(sp)
1000e1b8:	00100600 	call	10010060 <_read_r>
1000e1bc:	10000716 	blt	r2,zero,1000e1dc <__sread+0x38>
1000e1c0:	80c01417 	ldw	r3,80(r16)
1000e1c4:	1887883a 	add	r3,r3,r2
1000e1c8:	80c01415 	stw	r3,80(r16)
1000e1cc:	dfc00117 	ldw	ra,4(sp)
1000e1d0:	dc000017 	ldw	r16,0(sp)
1000e1d4:	dec00204 	addi	sp,sp,8
1000e1d8:	f800283a 	ret
1000e1dc:	80c0030b 	ldhu	r3,12(r16)
1000e1e0:	18fbffcc 	andi	r3,r3,61439
1000e1e4:	80c0030d 	sth	r3,12(r16)
1000e1e8:	dfc00117 	ldw	ra,4(sp)
1000e1ec:	dc000017 	ldw	r16,0(sp)
1000e1f0:	dec00204 	addi	sp,sp,8
1000e1f4:	f800283a 	ret

1000e1f8 <__seofread>:
1000e1f8:	0005883a 	mov	r2,zero
1000e1fc:	f800283a 	ret

1000e200 <__swrite>:
1000e200:	2880030b 	ldhu	r2,12(r5)
1000e204:	defffb04 	addi	sp,sp,-20
1000e208:	dcc00315 	stw	r19,12(sp)
1000e20c:	dc800215 	stw	r18,8(sp)
1000e210:	dc400115 	stw	r17,4(sp)
1000e214:	dc000015 	stw	r16,0(sp)
1000e218:	dfc00415 	stw	ra,16(sp)
1000e21c:	10c0400c 	andi	r3,r2,256
1000e220:	2821883a 	mov	r16,r5
1000e224:	2023883a 	mov	r17,r4
1000e228:	3025883a 	mov	r18,r6
1000e22c:	3827883a 	mov	r19,r7
1000e230:	18000526 	beq	r3,zero,1000e248 <__swrite+0x48>
1000e234:	2940038f 	ldh	r5,14(r5)
1000e238:	01c00084 	movi	r7,2
1000e23c:	000d883a 	mov	r6,zero
1000e240:	00100000 	call	10010000 <_lseek_r>
1000e244:	8080030b 	ldhu	r2,12(r16)
1000e248:	8140038f 	ldh	r5,14(r16)
1000e24c:	10bbffcc 	andi	r2,r2,61439
1000e250:	980f883a 	mov	r7,r19
1000e254:	900d883a 	mov	r6,r18
1000e258:	8809883a 	mov	r4,r17
1000e25c:	8080030d 	sth	r2,12(r16)
1000e260:	dfc00417 	ldw	ra,16(sp)
1000e264:	dcc00317 	ldw	r19,12(sp)
1000e268:	dc800217 	ldw	r18,8(sp)
1000e26c:	dc400117 	ldw	r17,4(sp)
1000e270:	dc000017 	ldw	r16,0(sp)
1000e274:	dec00504 	addi	sp,sp,20
1000e278:	000fab41 	jmpi	1000fab4 <_write_r>

1000e27c <__sseek>:
1000e27c:	defffe04 	addi	sp,sp,-8
1000e280:	dc000015 	stw	r16,0(sp)
1000e284:	2821883a 	mov	r16,r5
1000e288:	2940038f 	ldh	r5,14(r5)
1000e28c:	dfc00115 	stw	ra,4(sp)
1000e290:	00100000 	call	10010000 <_lseek_r>
1000e294:	00ffffc4 	movi	r3,-1
1000e298:	10c00826 	beq	r2,r3,1000e2bc <__sseek+0x40>
1000e29c:	80c0030b 	ldhu	r3,12(r16)
1000e2a0:	80801415 	stw	r2,80(r16)
1000e2a4:	18c40014 	ori	r3,r3,4096
1000e2a8:	80c0030d 	sth	r3,12(r16)
1000e2ac:	dfc00117 	ldw	ra,4(sp)
1000e2b0:	dc000017 	ldw	r16,0(sp)
1000e2b4:	dec00204 	addi	sp,sp,8
1000e2b8:	f800283a 	ret
1000e2bc:	80c0030b 	ldhu	r3,12(r16)
1000e2c0:	18fbffcc 	andi	r3,r3,61439
1000e2c4:	80c0030d 	sth	r3,12(r16)
1000e2c8:	dfc00117 	ldw	ra,4(sp)
1000e2cc:	dc000017 	ldw	r16,0(sp)
1000e2d0:	dec00204 	addi	sp,sp,8
1000e2d4:	f800283a 	ret

1000e2d8 <__sclose>:
1000e2d8:	2940038f 	ldh	r5,14(r5)
1000e2dc:	000fb141 	jmpi	1000fb14 <_close_r>

1000e2e0 <strcmp>:
1000e2e0:	2144b03a 	or	r2,r4,r5
1000e2e4:	108000cc 	andi	r2,r2,3
1000e2e8:	1000171e 	bne	r2,zero,1000e348 <strcmp+0x68>
1000e2ec:	20800017 	ldw	r2,0(r4)
1000e2f0:	28c00017 	ldw	r3,0(r5)
1000e2f4:	10c0141e 	bne	r2,r3,1000e348 <strcmp+0x68>
1000e2f8:	027fbff4 	movhi	r9,65279
1000e2fc:	4a7fbfc4 	addi	r9,r9,-257
1000e300:	0086303a 	nor	r3,zero,r2
1000e304:	02202074 	movhi	r8,32897
1000e308:	1245883a 	add	r2,r2,r9
1000e30c:	42202004 	addi	r8,r8,-32640
1000e310:	10c4703a 	and	r2,r2,r3
1000e314:	1204703a 	and	r2,r2,r8
1000e318:	10000226 	beq	r2,zero,1000e324 <strcmp+0x44>
1000e31c:	00002306 	br	1000e3ac <strcmp+0xcc>
1000e320:	1000221e 	bne	r2,zero,1000e3ac <strcmp+0xcc>
1000e324:	21000104 	addi	r4,r4,4
1000e328:	20c00017 	ldw	r3,0(r4)
1000e32c:	29400104 	addi	r5,r5,4
1000e330:	29800017 	ldw	r6,0(r5)
1000e334:	1a4f883a 	add	r7,r3,r9
1000e338:	00c4303a 	nor	r2,zero,r3
1000e33c:	3884703a 	and	r2,r7,r2
1000e340:	1204703a 	and	r2,r2,r8
1000e344:	19bff626 	beq	r3,r6,1000e320 <__alt_data_end+0xf800e320>
1000e348:	20800003 	ldbu	r2,0(r4)
1000e34c:	10c03fcc 	andi	r3,r2,255
1000e350:	18c0201c 	xori	r3,r3,128
1000e354:	18ffe004 	addi	r3,r3,-128
1000e358:	18000c26 	beq	r3,zero,1000e38c <strcmp+0xac>
1000e35c:	29800007 	ldb	r6,0(r5)
1000e360:	19800326 	beq	r3,r6,1000e370 <strcmp+0x90>
1000e364:	00001306 	br	1000e3b4 <strcmp+0xd4>
1000e368:	29800007 	ldb	r6,0(r5)
1000e36c:	11800b1e 	bne	r2,r6,1000e39c <strcmp+0xbc>
1000e370:	21000044 	addi	r4,r4,1
1000e374:	20c00003 	ldbu	r3,0(r4)
1000e378:	29400044 	addi	r5,r5,1
1000e37c:	18803fcc 	andi	r2,r3,255
1000e380:	1080201c 	xori	r2,r2,128
1000e384:	10bfe004 	addi	r2,r2,-128
1000e388:	103ff71e 	bne	r2,zero,1000e368 <__alt_data_end+0xf800e368>
1000e38c:	0007883a 	mov	r3,zero
1000e390:	28800003 	ldbu	r2,0(r5)
1000e394:	1885c83a 	sub	r2,r3,r2
1000e398:	f800283a 	ret
1000e39c:	28800003 	ldbu	r2,0(r5)
1000e3a0:	18c03fcc 	andi	r3,r3,255
1000e3a4:	1885c83a 	sub	r2,r3,r2
1000e3a8:	f800283a 	ret
1000e3ac:	0005883a 	mov	r2,zero
1000e3b0:	f800283a 	ret
1000e3b4:	10c03fcc 	andi	r3,r2,255
1000e3b8:	003ff506 	br	1000e390 <__alt_data_end+0xf800e390>

1000e3bc <__sprint_r.part.0>:
1000e3bc:	28801917 	ldw	r2,100(r5)
1000e3c0:	defff604 	addi	sp,sp,-40
1000e3c4:	dd400515 	stw	r21,20(sp)
1000e3c8:	dfc00915 	stw	ra,36(sp)
1000e3cc:	df000815 	stw	fp,32(sp)
1000e3d0:	ddc00715 	stw	r23,28(sp)
1000e3d4:	dd800615 	stw	r22,24(sp)
1000e3d8:	dd000415 	stw	r20,16(sp)
1000e3dc:	dcc00315 	stw	r19,12(sp)
1000e3e0:	dc800215 	stw	r18,8(sp)
1000e3e4:	dc400115 	stw	r17,4(sp)
1000e3e8:	dc000015 	stw	r16,0(sp)
1000e3ec:	1088000c 	andi	r2,r2,8192
1000e3f0:	302b883a 	mov	r21,r6
1000e3f4:	10002e26 	beq	r2,zero,1000e4b0 <__sprint_r.part.0+0xf4>
1000e3f8:	30800217 	ldw	r2,8(r6)
1000e3fc:	35800017 	ldw	r22,0(r6)
1000e400:	10002926 	beq	r2,zero,1000e4a8 <__sprint_r.part.0+0xec>
1000e404:	2827883a 	mov	r19,r5
1000e408:	2029883a 	mov	r20,r4
1000e40c:	b5c00104 	addi	r23,r22,4
1000e410:	04bfffc4 	movi	r18,-1
1000e414:	bc400017 	ldw	r17,0(r23)
1000e418:	b4000017 	ldw	r16,0(r22)
1000e41c:	0039883a 	mov	fp,zero
1000e420:	8822d0ba 	srli	r17,r17,2
1000e424:	8800031e 	bne	r17,zero,1000e434 <__sprint_r.part.0+0x78>
1000e428:	00001806 	br	1000e48c <__sprint_r.part.0+0xd0>
1000e42c:	84000104 	addi	r16,r16,4
1000e430:	8f001526 	beq	r17,fp,1000e488 <__sprint_r.part.0+0xcc>
1000e434:	81400017 	ldw	r5,0(r16)
1000e438:	980d883a 	mov	r6,r19
1000e43c:	a009883a 	mov	r4,r20
1000e440:	000feac0 	call	1000feac <_fputwc_r>
1000e444:	e7000044 	addi	fp,fp,1
1000e448:	14bff81e 	bne	r2,r18,1000e42c <__alt_data_end+0xf800e42c>
1000e44c:	9005883a 	mov	r2,r18
1000e450:	a8000215 	stw	zero,8(r21)
1000e454:	a8000115 	stw	zero,4(r21)
1000e458:	dfc00917 	ldw	ra,36(sp)
1000e45c:	df000817 	ldw	fp,32(sp)
1000e460:	ddc00717 	ldw	r23,28(sp)
1000e464:	dd800617 	ldw	r22,24(sp)
1000e468:	dd400517 	ldw	r21,20(sp)
1000e46c:	dd000417 	ldw	r20,16(sp)
1000e470:	dcc00317 	ldw	r19,12(sp)
1000e474:	dc800217 	ldw	r18,8(sp)
1000e478:	dc400117 	ldw	r17,4(sp)
1000e47c:	dc000017 	ldw	r16,0(sp)
1000e480:	dec00a04 	addi	sp,sp,40
1000e484:	f800283a 	ret
1000e488:	a8800217 	ldw	r2,8(r21)
1000e48c:	8c63883a 	add	r17,r17,r17
1000e490:	8c63883a 	add	r17,r17,r17
1000e494:	1445c83a 	sub	r2,r2,r17
1000e498:	a8800215 	stw	r2,8(r21)
1000e49c:	b5800204 	addi	r22,r22,8
1000e4a0:	bdc00204 	addi	r23,r23,8
1000e4a4:	103fdb1e 	bne	r2,zero,1000e414 <__alt_data_end+0xf800e414>
1000e4a8:	0005883a 	mov	r2,zero
1000e4ac:	003fe806 	br	1000e450 <__alt_data_end+0xf800e450>
1000e4b0:	000b51c0 	call	1000b51c <__sfvwrite_r>
1000e4b4:	003fe606 	br	1000e450 <__alt_data_end+0xf800e450>

1000e4b8 <__sprint_r>:
1000e4b8:	30c00217 	ldw	r3,8(r6)
1000e4bc:	18000126 	beq	r3,zero,1000e4c4 <__sprint_r+0xc>
1000e4c0:	000e3bc1 	jmpi	1000e3bc <__sprint_r.part.0>
1000e4c4:	30000115 	stw	zero,4(r6)
1000e4c8:	0005883a 	mov	r2,zero
1000e4cc:	f800283a 	ret

1000e4d0 <___vfiprintf_internal_r>:
1000e4d0:	deffca04 	addi	sp,sp,-216
1000e4d4:	dd403115 	stw	r21,196(sp)
1000e4d8:	dfc03515 	stw	ra,212(sp)
1000e4dc:	df003415 	stw	fp,208(sp)
1000e4e0:	ddc03315 	stw	r23,204(sp)
1000e4e4:	dd803215 	stw	r22,200(sp)
1000e4e8:	dd003015 	stw	r20,192(sp)
1000e4ec:	dcc02f15 	stw	r19,188(sp)
1000e4f0:	dc802e15 	stw	r18,184(sp)
1000e4f4:	dc402d15 	stw	r17,180(sp)
1000e4f8:	dc002c15 	stw	r16,176(sp)
1000e4fc:	d9002115 	stw	r4,132(sp)
1000e500:	d9402015 	stw	r5,128(sp)
1000e504:	d9c02215 	stw	r7,136(sp)
1000e508:	302b883a 	mov	r21,r6
1000e50c:	20000226 	beq	r4,zero,1000e518 <___vfiprintf_internal_r+0x48>
1000e510:	20800e17 	ldw	r2,56(r4)
1000e514:	1000cf26 	beq	r2,zero,1000e854 <___vfiprintf_internal_r+0x384>
1000e518:	d8c02017 	ldw	r3,128(sp)
1000e51c:	1880030b 	ldhu	r2,12(r3)
1000e520:	10c8000c 	andi	r3,r2,8192
1000e524:	1800071e 	bne	r3,zero,1000e544 <___vfiprintf_internal_r+0x74>
1000e528:	d9402017 	ldw	r5,128(sp)
1000e52c:	00f7ffc4 	movi	r3,-8193
1000e530:	10880014 	ori	r2,r2,8192
1000e534:	29001917 	ldw	r4,100(r5)
1000e538:	2880030d 	sth	r2,12(r5)
1000e53c:	20c6703a 	and	r3,r4,r3
1000e540:	28c01915 	stw	r3,100(r5)
1000e544:	10c0020c 	andi	r3,r2,8
1000e548:	1800a526 	beq	r3,zero,1000e7e0 <___vfiprintf_internal_r+0x310>
1000e54c:	d9002017 	ldw	r4,128(sp)
1000e550:	20c00417 	ldw	r3,16(r4)
1000e554:	1800a226 	beq	r3,zero,1000e7e0 <___vfiprintf_internal_r+0x310>
1000e558:	1080068c 	andi	r2,r2,26
1000e55c:	00c00284 	movi	r3,10
1000e560:	10c0a826 	beq	r2,r3,1000e804 <___vfiprintf_internal_r+0x334>
1000e564:	d9001a04 	addi	r4,sp,104
1000e568:	d94019c4 	addi	r5,sp,103
1000e56c:	04840074 	movhi	r18,4097
1000e570:	2145c83a 	sub	r2,r4,r5
1000e574:	949a9c04 	addi	r18,r18,27248
1000e578:	d9001e15 	stw	r4,120(sp)
1000e57c:	d9401f15 	stw	r5,124(sp)
1000e580:	dec01a15 	stw	sp,104(sp)
1000e584:	d8001c15 	stw	zero,112(sp)
1000e588:	d8001b15 	stw	zero,108(sp)
1000e58c:	d811883a 	mov	r8,sp
1000e590:	d8002615 	stw	zero,152(sp)
1000e594:	d8002415 	stw	zero,144(sp)
1000e598:	d8802815 	stw	r2,160(sp)
1000e59c:	a82d883a 	mov	r22,r21
1000e5a0:	b0800007 	ldb	r2,0(r22)
1000e5a4:	10040d26 	beq	r2,zero,1000f5dc <___vfiprintf_internal_r+0x110c>
1000e5a8:	00c00944 	movi	r3,37
1000e5ac:	b029883a 	mov	r20,r22
1000e5b0:	10c0021e 	bne	r2,r3,1000e5bc <___vfiprintf_internal_r+0xec>
1000e5b4:	00001606 	br	1000e610 <___vfiprintf_internal_r+0x140>
1000e5b8:	10c00326 	beq	r2,r3,1000e5c8 <___vfiprintf_internal_r+0xf8>
1000e5bc:	a5000044 	addi	r20,r20,1
1000e5c0:	a0800007 	ldb	r2,0(r20)
1000e5c4:	103ffc1e 	bne	r2,zero,1000e5b8 <__alt_data_end+0xf800e5b8>
1000e5c8:	a5a1c83a 	sub	r16,r20,r22
1000e5cc:	80001026 	beq	r16,zero,1000e610 <___vfiprintf_internal_r+0x140>
1000e5d0:	d8c01c17 	ldw	r3,112(sp)
1000e5d4:	d8801b17 	ldw	r2,108(sp)
1000e5d8:	45800015 	stw	r22,0(r8)
1000e5dc:	80c7883a 	add	r3,r16,r3
1000e5e0:	10800044 	addi	r2,r2,1
1000e5e4:	44000115 	stw	r16,4(r8)
1000e5e8:	d8c01c15 	stw	r3,112(sp)
1000e5ec:	d8801b15 	stw	r2,108(sp)
1000e5f0:	010001c4 	movi	r4,7
1000e5f4:	2080750e 	bge	r4,r2,1000e7cc <___vfiprintf_internal_r+0x2fc>
1000e5f8:	1803951e 	bne	r3,zero,1000f450 <___vfiprintf_internal_r+0xf80>
1000e5fc:	d8c02417 	ldw	r3,144(sp)
1000e600:	d8001b15 	stw	zero,108(sp)
1000e604:	d811883a 	mov	r8,sp
1000e608:	1c07883a 	add	r3,r3,r16
1000e60c:	d8c02415 	stw	r3,144(sp)
1000e610:	a0800007 	ldb	r2,0(r20)
1000e614:	1002e026 	beq	r2,zero,1000f198 <___vfiprintf_internal_r+0xcc8>
1000e618:	a5800044 	addi	r22,r20,1
1000e61c:	a0c00047 	ldb	r3,1(r20)
1000e620:	d8001d85 	stb	zero,118(sp)
1000e624:	0027883a 	mov	r19,zero
1000e628:	d8002305 	stb	zero,140(sp)
1000e62c:	043fffc4 	movi	r16,-1
1000e630:	d8002515 	stw	zero,148(sp)
1000e634:	0023883a 	mov	r17,zero
1000e638:	05001604 	movi	r20,88
1000e63c:	05400244 	movi	r21,9
1000e640:	402f883a 	mov	r23,r8
1000e644:	b5800044 	addi	r22,r22,1
1000e648:	18bff804 	addi	r2,r3,-32
1000e64c:	a0827736 	bltu	r20,r2,1000f02c <___vfiprintf_internal_r+0xb5c>
1000e650:	100490ba 	slli	r2,r2,2
1000e654:	01040074 	movhi	r4,4097
1000e658:	21399a04 	addi	r4,r4,-6552
1000e65c:	1105883a 	add	r2,r2,r4
1000e660:	10800017 	ldw	r2,0(r2)
1000e664:	1000683a 	jmp	r2
1000e668:	1000ed2c 	andhi	zero,r2,948
1000e66c:	1000f02c 	andhi	zero,r2,960
1000e670:	1000f02c 	andhi	zero,r2,960
1000e674:	1000ed48 	cmpgei	zero,r2,949
1000e678:	1000f02c 	andhi	zero,r2,960
1000e67c:	1000f02c 	andhi	zero,r2,960
1000e680:	1000f02c 	andhi	zero,r2,960
1000e684:	1000f02c 	andhi	zero,r2,960
1000e688:	1000f02c 	andhi	zero,r2,960
1000e68c:	1000f02c 	andhi	zero,r2,960
1000e690:	1000ef50 	cmplti	zero,r2,957
1000e694:	1000ef74 	orhi	zero,r2,957
1000e698:	1000f02c 	andhi	zero,r2,960
1000e69c:	1000e86c 	andhi	zero,r2,929
1000e6a0:	1000ef88 	cmpgei	zero,r2,958
1000e6a4:	1000f02c 	andhi	zero,r2,960
1000e6a8:	1000ed54 	ori	zero,r2,949
1000e6ac:	1000ed60 	cmpeqi	zero,r2,949
1000e6b0:	1000ed60 	cmpeqi	zero,r2,949
1000e6b4:	1000ed60 	cmpeqi	zero,r2,949
1000e6b8:	1000ed60 	cmpeqi	zero,r2,949
1000e6bc:	1000ed60 	cmpeqi	zero,r2,949
1000e6c0:	1000ed60 	cmpeqi	zero,r2,949
1000e6c4:	1000ed60 	cmpeqi	zero,r2,949
1000e6c8:	1000ed60 	cmpeqi	zero,r2,949
1000e6cc:	1000ed60 	cmpeqi	zero,r2,949
1000e6d0:	1000f02c 	andhi	zero,r2,960
1000e6d4:	1000f02c 	andhi	zero,r2,960
1000e6d8:	1000f02c 	andhi	zero,r2,960
1000e6dc:	1000f02c 	andhi	zero,r2,960
1000e6e0:	1000f02c 	andhi	zero,r2,960
1000e6e4:	1000f02c 	andhi	zero,r2,960
1000e6e8:	1000f02c 	andhi	zero,r2,960
1000e6ec:	1000f02c 	andhi	zero,r2,960
1000e6f0:	1000f02c 	andhi	zero,r2,960
1000e6f4:	1000f02c 	andhi	zero,r2,960
1000e6f8:	1000eda0 	cmpeqi	zero,r2,950
1000e6fc:	1000f02c 	andhi	zero,r2,960
1000e700:	1000f02c 	andhi	zero,r2,960
1000e704:	1000f02c 	andhi	zero,r2,960
1000e708:	1000f02c 	andhi	zero,r2,960
1000e70c:	1000f02c 	andhi	zero,r2,960
1000e710:	1000f02c 	andhi	zero,r2,960
1000e714:	1000f02c 	andhi	zero,r2,960
1000e718:	1000f02c 	andhi	zero,r2,960
1000e71c:	1000f02c 	andhi	zero,r2,960
1000e720:	1000f02c 	andhi	zero,r2,960
1000e724:	1000eddc 	xori	zero,r2,951
1000e728:	1000f02c 	andhi	zero,r2,960
1000e72c:	1000f02c 	andhi	zero,r2,960
1000e730:	1000f02c 	andhi	zero,r2,960
1000e734:	1000f02c 	andhi	zero,r2,960
1000e738:	1000f02c 	andhi	zero,r2,960
1000e73c:	1000ee38 	rdprs	zero,r2,952
1000e740:	1000f02c 	andhi	zero,r2,960
1000e744:	1000f02c 	andhi	zero,r2,960
1000e748:	1000eeac 	andhi	zero,r2,954
1000e74c:	1000f02c 	andhi	zero,r2,960
1000e750:	1000f02c 	andhi	zero,r2,960
1000e754:	1000f02c 	andhi	zero,r2,960
1000e758:	1000f02c 	andhi	zero,r2,960
1000e75c:	1000f02c 	andhi	zero,r2,960
1000e760:	1000f02c 	andhi	zero,r2,960
1000e764:	1000f02c 	andhi	zero,r2,960
1000e768:	1000f02c 	andhi	zero,r2,960
1000e76c:	1000f02c 	andhi	zero,r2,960
1000e770:	1000f02c 	andhi	zero,r2,960
1000e774:	1000ec54 	ori	zero,r2,945
1000e778:	1000ec84 	addi	zero,r2,946
1000e77c:	1000f02c 	andhi	zero,r2,960
1000e780:	1000f02c 	andhi	zero,r2,960
1000e784:	1000f02c 	andhi	zero,r2,960
1000e788:	1000efd4 	ori	zero,r2,959
1000e78c:	1000ec84 	addi	zero,r2,946
1000e790:	1000f02c 	andhi	zero,r2,960
1000e794:	1000f02c 	andhi	zero,r2,960
1000e798:	1000eb2c 	andhi	zero,r2,940
1000e79c:	1000f02c 	andhi	zero,r2,960
1000e7a0:	1000eb40 	call	11000eb4 <__alt_heap_start+0xfcc8e0>
1000e7a4:	1000eb78 	rdprs	zero,r2,941
1000e7a8:	1000e878 	rdprs	zero,r2,929
1000e7ac:	1000eb20 	cmpeqi	zero,r2,940
1000e7b0:	1000f02c 	andhi	zero,r2,960
1000e7b4:	1000eeec 	andhi	zero,r2,955
1000e7b8:	1000f02c 	andhi	zero,r2,960
1000e7bc:	1000ef38 	rdprs	zero,r2,956
1000e7c0:	1000f02c 	andhi	zero,r2,960
1000e7c4:	1000f02c 	andhi	zero,r2,960
1000e7c8:	1000ebfc 	xorhi	zero,r2,943
1000e7cc:	42000204 	addi	r8,r8,8
1000e7d0:	d8c02417 	ldw	r3,144(sp)
1000e7d4:	1c07883a 	add	r3,r3,r16
1000e7d8:	d8c02415 	stw	r3,144(sp)
1000e7dc:	003f8c06 	br	1000e610 <__alt_data_end+0xf800e610>
1000e7e0:	d9402017 	ldw	r5,128(sp)
1000e7e4:	d9002117 	ldw	r4,132(sp)
1000e7e8:	000908c0 	call	1000908c <__swsetup_r>
1000e7ec:	1003c11e 	bne	r2,zero,1000f6f4 <___vfiprintf_internal_r+0x1224>
1000e7f0:	d9402017 	ldw	r5,128(sp)
1000e7f4:	00c00284 	movi	r3,10
1000e7f8:	2880030b 	ldhu	r2,12(r5)
1000e7fc:	1080068c 	andi	r2,r2,26
1000e800:	10ff581e 	bne	r2,r3,1000e564 <__alt_data_end+0xf800e564>
1000e804:	d8c02017 	ldw	r3,128(sp)
1000e808:	1880038f 	ldh	r2,14(r3)
1000e80c:	103f5516 	blt	r2,zero,1000e564 <__alt_data_end+0xf800e564>
1000e810:	d9c02217 	ldw	r7,136(sp)
1000e814:	d9002117 	ldw	r4,132(sp)
1000e818:	a80d883a 	mov	r6,r21
1000e81c:	180b883a 	mov	r5,r3
1000e820:	000f9f80 	call	1000f9f8 <__sbprintf>
1000e824:	dfc03517 	ldw	ra,212(sp)
1000e828:	df003417 	ldw	fp,208(sp)
1000e82c:	ddc03317 	ldw	r23,204(sp)
1000e830:	dd803217 	ldw	r22,200(sp)
1000e834:	dd403117 	ldw	r21,196(sp)
1000e838:	dd003017 	ldw	r20,192(sp)
1000e83c:	dcc02f17 	ldw	r19,188(sp)
1000e840:	dc802e17 	ldw	r18,184(sp)
1000e844:	dc402d17 	ldw	r17,180(sp)
1000e848:	dc002c17 	ldw	r16,176(sp)
1000e84c:	dec03604 	addi	sp,sp,216
1000e850:	f800283a 	ret
1000e854:	000b0980 	call	1000b098 <__sinit>
1000e858:	003f2f06 	br	1000e518 <__alt_data_end+0xf800e518>
1000e85c:	d8c02517 	ldw	r3,148(sp)
1000e860:	d8802215 	stw	r2,136(sp)
1000e864:	00c7c83a 	sub	r3,zero,r3
1000e868:	d8c02515 	stw	r3,148(sp)
1000e86c:	8c400114 	ori	r17,r17,4
1000e870:	b0c00007 	ldb	r3,0(r22)
1000e874:	003f7306 	br	1000e644 <__alt_data_end+0xf800e644>
1000e878:	00800c04 	movi	r2,48
1000e87c:	d9402217 	ldw	r5,136(sp)
1000e880:	d8801d05 	stb	r2,116(sp)
1000e884:	00801e04 	movi	r2,120
1000e888:	d8801d45 	stb	r2,117(sp)
1000e88c:	d8001d85 	stb	zero,118(sp)
1000e890:	b811883a 	mov	r8,r23
1000e894:	28c00104 	addi	r3,r5,4
1000e898:	2cc00017 	ldw	r19,0(r5)
1000e89c:	0029883a 	mov	r20,zero
1000e8a0:	88800094 	ori	r2,r17,2
1000e8a4:	80032516 	blt	r16,zero,1000f53c <___vfiprintf_internal_r+0x106c>
1000e8a8:	00bfdfc4 	movi	r2,-129
1000e8ac:	88a2703a 	and	r17,r17,r2
1000e8b0:	d8c02215 	stw	r3,136(sp)
1000e8b4:	8c400094 	ori	r17,r17,2
1000e8b8:	98032a1e 	bne	r19,zero,1000f564 <___vfiprintf_internal_r+0x1094>
1000e8bc:	00840074 	movhi	r2,4097
1000e8c0:	109a3b04 	addi	r2,r2,26860
1000e8c4:	d8802615 	stw	r2,152(sp)
1000e8c8:	002b883a 	mov	r21,zero
1000e8cc:	8001741e 	bne	r16,zero,1000eea0 <___vfiprintf_internal_r+0x9d0>
1000e8d0:	0021883a 	mov	r16,zero
1000e8d4:	0029883a 	mov	r20,zero
1000e8d8:	ddc01a04 	addi	r23,sp,104
1000e8dc:	8027883a 	mov	r19,r16
1000e8e0:	8500010e 	bge	r16,r20,1000e8e8 <___vfiprintf_internal_r+0x418>
1000e8e4:	a027883a 	mov	r19,r20
1000e8e8:	ad403fcc 	andi	r21,r21,255
1000e8ec:	ad40201c 	xori	r21,r21,128
1000e8f0:	ad7fe004 	addi	r21,r21,-128
1000e8f4:	a8000126 	beq	r21,zero,1000e8fc <___vfiprintf_internal_r+0x42c>
1000e8f8:	9cc00044 	addi	r19,r19,1
1000e8fc:	89c0008c 	andi	r7,r17,2
1000e900:	38000126 	beq	r7,zero,1000e908 <___vfiprintf_internal_r+0x438>
1000e904:	9cc00084 	addi	r19,r19,2
1000e908:	88c0210c 	andi	r3,r17,132
1000e90c:	1801dd1e 	bne	r3,zero,1000f084 <___vfiprintf_internal_r+0xbb4>
1000e910:	d9402517 	ldw	r5,148(sp)
1000e914:	2cebc83a 	sub	r21,r5,r19
1000e918:	0541da0e 	bge	zero,r21,1000f084 <___vfiprintf_internal_r+0xbb4>
1000e91c:	07000404 	movi	fp,16
1000e920:	d8801c17 	ldw	r2,112(sp)
1000e924:	e543be0e 	bge	fp,r21,1000f820 <___vfiprintf_internal_r+0x1350>
1000e928:	01440074 	movhi	r5,4097
1000e92c:	295aa004 	addi	r5,r5,27264
1000e930:	dc002715 	stw	r16,156(sp)
1000e934:	d9801b17 	ldw	r6,108(sp)
1000e938:	a821883a 	mov	r16,r21
1000e93c:	d9402315 	stw	r5,140(sp)
1000e940:	028001c4 	movi	r10,7
1000e944:	d9c02915 	stw	r7,164(sp)
1000e948:	182b883a 	mov	r21,r3
1000e94c:	00000506 	br	1000e964 <___vfiprintf_internal_r+0x494>
1000e950:	31000084 	addi	r4,r6,2
1000e954:	42000204 	addi	r8,r8,8
1000e958:	180d883a 	mov	r6,r3
1000e95c:	843ffc04 	addi	r16,r16,-16
1000e960:	e4000f0e 	bge	fp,r16,1000e9a0 <___vfiprintf_internal_r+0x4d0>
1000e964:	01040074 	movhi	r4,4097
1000e968:	10800404 	addi	r2,r2,16
1000e96c:	30c00044 	addi	r3,r6,1
1000e970:	211aa004 	addi	r4,r4,27264
1000e974:	41000015 	stw	r4,0(r8)
1000e978:	47000115 	stw	fp,4(r8)
1000e97c:	d8801c15 	stw	r2,112(sp)
1000e980:	d8c01b15 	stw	r3,108(sp)
1000e984:	50fff20e 	bge	r10,r3,1000e950 <__alt_data_end+0xf800e950>
1000e988:	1001b21e 	bne	r2,zero,1000f054 <___vfiprintf_internal_r+0xb84>
1000e98c:	843ffc04 	addi	r16,r16,-16
1000e990:	000d883a 	mov	r6,zero
1000e994:	01000044 	movi	r4,1
1000e998:	d811883a 	mov	r8,sp
1000e99c:	e43ff116 	blt	fp,r16,1000e964 <__alt_data_end+0xf800e964>
1000e9a0:	a807883a 	mov	r3,r21
1000e9a4:	d9c02917 	ldw	r7,164(sp)
1000e9a8:	802b883a 	mov	r21,r16
1000e9ac:	dc002717 	ldw	r16,156(sp)
1000e9b0:	d9402317 	ldw	r5,140(sp)
1000e9b4:	a885883a 	add	r2,r21,r2
1000e9b8:	45400115 	stw	r21,4(r8)
1000e9bc:	41400015 	stw	r5,0(r8)
1000e9c0:	d8801c15 	stw	r2,112(sp)
1000e9c4:	d9001b15 	stw	r4,108(sp)
1000e9c8:	014001c4 	movi	r5,7
1000e9cc:	29026216 	blt	r5,r4,1000f358 <___vfiprintf_internal_r+0xe88>
1000e9d0:	d9801d87 	ldb	r6,118(sp)
1000e9d4:	42000204 	addi	r8,r8,8
1000e9d8:	21400044 	addi	r5,r4,1
1000e9dc:	3001ae1e 	bne	r6,zero,1000f098 <___vfiprintf_internal_r+0xbc8>
1000e9e0:	3801bb26 	beq	r7,zero,1000f0d0 <___vfiprintf_internal_r+0xc00>
1000e9e4:	d9001d04 	addi	r4,sp,116
1000e9e8:	10800084 	addi	r2,r2,2
1000e9ec:	41000015 	stw	r4,0(r8)
1000e9f0:	01000084 	movi	r4,2
1000e9f4:	41000115 	stw	r4,4(r8)
1000e9f8:	d8801c15 	stw	r2,112(sp)
1000e9fc:	d9401b15 	stw	r5,108(sp)
1000ea00:	010001c4 	movi	r4,7
1000ea04:	2142680e 	bge	r4,r5,1000f3a8 <___vfiprintf_internal_r+0xed8>
1000ea08:	1002b11e 	bne	r2,zero,1000f4d0 <___vfiprintf_internal_r+0x1000>
1000ea0c:	01802004 	movi	r6,128
1000ea10:	01400044 	movi	r5,1
1000ea14:	0009883a 	mov	r4,zero
1000ea18:	d811883a 	mov	r8,sp
1000ea1c:	1981ae1e 	bne	r3,r6,1000f0d8 <___vfiprintf_internal_r+0xc08>
1000ea20:	d8c02517 	ldw	r3,148(sp)
1000ea24:	1cf9c83a 	sub	fp,r3,r19
1000ea28:	0701ab0e 	bge	zero,fp,1000f0d8 <___vfiprintf_internal_r+0xc08>
1000ea2c:	05400404 	movi	r21,16
1000ea30:	af03a90e 	bge	r21,fp,1000f8d8 <___vfiprintf_internal_r+0x1408>
1000ea34:	01440074 	movhi	r5,4097
1000ea38:	295a9c04 	addi	r5,r5,27248
1000ea3c:	d9402315 	stw	r5,140(sp)
1000ea40:	01c001c4 	movi	r7,7
1000ea44:	00000506 	br	1000ea5c <___vfiprintf_internal_r+0x58c>
1000ea48:	21800084 	addi	r6,r4,2
1000ea4c:	42000204 	addi	r8,r8,8
1000ea50:	1809883a 	mov	r4,r3
1000ea54:	e73ffc04 	addi	fp,fp,-16
1000ea58:	af000d0e 	bge	r21,fp,1000ea90 <___vfiprintf_internal_r+0x5c0>
1000ea5c:	10800404 	addi	r2,r2,16
1000ea60:	20c00044 	addi	r3,r4,1
1000ea64:	44800015 	stw	r18,0(r8)
1000ea68:	45400115 	stw	r21,4(r8)
1000ea6c:	d8801c15 	stw	r2,112(sp)
1000ea70:	d8c01b15 	stw	r3,108(sp)
1000ea74:	38fff40e 	bge	r7,r3,1000ea48 <__alt_data_end+0xf800ea48>
1000ea78:	10022b1e 	bne	r2,zero,1000f328 <___vfiprintf_internal_r+0xe58>
1000ea7c:	e73ffc04 	addi	fp,fp,-16
1000ea80:	01800044 	movi	r6,1
1000ea84:	0009883a 	mov	r4,zero
1000ea88:	d811883a 	mov	r8,sp
1000ea8c:	af3ff316 	blt	r21,fp,1000ea5c <__alt_data_end+0xf800ea5c>
1000ea90:	d8c02317 	ldw	r3,140(sp)
1000ea94:	1705883a 	add	r2,r2,fp
1000ea98:	47000115 	stw	fp,4(r8)
1000ea9c:	40c00015 	stw	r3,0(r8)
1000eaa0:	d8801c15 	stw	r2,112(sp)
1000eaa4:	d9801b15 	stw	r6,108(sp)
1000eaa8:	00c001c4 	movi	r3,7
1000eaac:	19829416 	blt	r3,r6,1000f500 <___vfiprintf_internal_r+0x1030>
1000eab0:	8521c83a 	sub	r16,r16,r20
1000eab4:	42000204 	addi	r8,r8,8
1000eab8:	31400044 	addi	r5,r6,1
1000eabc:	3009883a 	mov	r4,r6
1000eac0:	04018716 	blt	zero,r16,1000f0e0 <___vfiprintf_internal_r+0xc10>
1000eac4:	a085883a 	add	r2,r20,r2
1000eac8:	45c00015 	stw	r23,0(r8)
1000eacc:	45000115 	stw	r20,4(r8)
1000ead0:	d8801c15 	stw	r2,112(sp)
1000ead4:	d9401b15 	stw	r5,108(sp)
1000ead8:	00c001c4 	movi	r3,7
1000eadc:	1941c20e 	bge	r3,r5,1000f1e8 <___vfiprintf_internal_r+0xd18>
1000eae0:	1002531e 	bne	r2,zero,1000f430 <___vfiprintf_internal_r+0xf60>
1000eae4:	d8001b15 	stw	zero,108(sp)
1000eae8:	8c40010c 	andi	r17,r17,4
1000eaec:	88023226 	beq	r17,zero,1000f3b8 <___vfiprintf_internal_r+0xee8>
1000eaf0:	d9002517 	ldw	r4,148(sp)
1000eaf4:	24e3c83a 	sub	r17,r4,r19
1000eaf8:	04432916 	blt	zero,r17,1000f7a0 <___vfiprintf_internal_r+0x12d0>
1000eafc:	d8802517 	ldw	r2,148(sp)
1000eb00:	14c0010e 	bge	r2,r19,1000eb08 <___vfiprintf_internal_r+0x638>
1000eb04:	9805883a 	mov	r2,r19
1000eb08:	d8c02417 	ldw	r3,144(sp)
1000eb0c:	1887883a 	add	r3,r3,r2
1000eb10:	d8c02415 	stw	r3,144(sp)
1000eb14:	d8001b15 	stw	zero,108(sp)
1000eb18:	d811883a 	mov	r8,sp
1000eb1c:	003ea006 	br	1000e5a0 <__alt_data_end+0xf800e5a0>
1000eb20:	8c400814 	ori	r17,r17,32
1000eb24:	b0c00007 	ldb	r3,0(r22)
1000eb28:	003ec606 	br	1000e644 <__alt_data_end+0xf800e644>
1000eb2c:	b0c00007 	ldb	r3,0(r22)
1000eb30:	00801b04 	movi	r2,108
1000eb34:	18832026 	beq	r3,r2,1000f7b8 <___vfiprintf_internal_r+0x12e8>
1000eb38:	8c400414 	ori	r17,r17,16
1000eb3c:	003ec106 	br	1000e644 <__alt_data_end+0xf800e644>
1000eb40:	9cc03fcc 	andi	r19,r19,255
1000eb44:	b811883a 	mov	r8,r23
1000eb48:	9803981e 	bne	r19,zero,1000f9ac <___vfiprintf_internal_r+0x14dc>
1000eb4c:	8880080c 	andi	r2,r17,32
1000eb50:	1002be26 	beq	r2,zero,1000f64c <___vfiprintf_internal_r+0x117c>
1000eb54:	d9002217 	ldw	r4,136(sp)
1000eb58:	d9402417 	ldw	r5,144(sp)
1000eb5c:	20800017 	ldw	r2,0(r4)
1000eb60:	2807d7fa 	srai	r3,r5,31
1000eb64:	21000104 	addi	r4,r4,4
1000eb68:	d9002215 	stw	r4,136(sp)
1000eb6c:	11400015 	stw	r5,0(r2)
1000eb70:	10c00115 	stw	r3,4(r2)
1000eb74:	003e8a06 	br	1000e5a0 <__alt_data_end+0xf800e5a0>
1000eb78:	9cc03fcc 	andi	r19,r19,255
1000eb7c:	b811883a 	mov	r8,r23
1000eb80:	9803871e 	bne	r19,zero,1000f9a0 <___vfiprintf_internal_r+0x14d0>
1000eb84:	8880080c 	andi	r2,r17,32
1000eb88:	10009a26 	beq	r2,zero,1000edf4 <___vfiprintf_internal_r+0x924>
1000eb8c:	d9002217 	ldw	r4,136(sp)
1000eb90:	d8001d85 	stb	zero,118(sp)
1000eb94:	20800204 	addi	r2,r4,8
1000eb98:	24c00017 	ldw	r19,0(r4)
1000eb9c:	25000117 	ldw	r20,4(r4)
1000eba0:	8002a416 	blt	r16,zero,1000f634 <___vfiprintf_internal_r+0x1164>
1000eba4:	013fdfc4 	movi	r4,-129
1000eba8:	9d06b03a 	or	r3,r19,r20
1000ebac:	d8802215 	stw	r2,136(sp)
1000ebb0:	8922703a 	and	r17,r17,r4
1000ebb4:	18009b26 	beq	r3,zero,1000ee24 <___vfiprintf_internal_r+0x954>
1000ebb8:	002b883a 	mov	r21,zero
1000ebbc:	ddc01a04 	addi	r23,sp,104
1000ebc0:	9806d0fa 	srli	r3,r19,3
1000ebc4:	a008977a 	slli	r4,r20,29
1000ebc8:	a028d0fa 	srli	r20,r20,3
1000ebcc:	9cc001cc 	andi	r19,r19,7
1000ebd0:	98800c04 	addi	r2,r19,48
1000ebd4:	bdffffc4 	addi	r23,r23,-1
1000ebd8:	20e6b03a 	or	r19,r4,r3
1000ebdc:	b8800005 	stb	r2,0(r23)
1000ebe0:	9d06b03a 	or	r3,r19,r20
1000ebe4:	183ff61e 	bne	r3,zero,1000ebc0 <__alt_data_end+0xf800ebc0>
1000ebe8:	88c0004c 	andi	r3,r17,1
1000ebec:	18021f1e 	bne	r3,zero,1000f46c <___vfiprintf_internal_r+0xf9c>
1000ebf0:	d9401e17 	ldw	r5,120(sp)
1000ebf4:	2de9c83a 	sub	r20,r5,r23
1000ebf8:	003f3806 	br	1000e8dc <__alt_data_end+0xf800e8dc>
1000ebfc:	9cc03fcc 	andi	r19,r19,255
1000ec00:	b811883a 	mov	r8,r23
1000ec04:	98034f1e 	bne	r19,zero,1000f944 <___vfiprintf_internal_r+0x1474>
1000ec08:	00840074 	movhi	r2,4097
1000ec0c:	109a3b04 	addi	r2,r2,26860
1000ec10:	d8802615 	stw	r2,152(sp)
1000ec14:	8880080c 	andi	r2,r17,32
1000ec18:	1000ac26 	beq	r2,zero,1000eecc <___vfiprintf_internal_r+0x9fc>
1000ec1c:	d9002217 	ldw	r4,136(sp)
1000ec20:	24c00017 	ldw	r19,0(r4)
1000ec24:	25000117 	ldw	r20,4(r4)
1000ec28:	21000204 	addi	r4,r4,8
1000ec2c:	d9002215 	stw	r4,136(sp)
1000ec30:	8880004c 	andi	r2,r17,1
1000ec34:	1001e726 	beq	r2,zero,1000f3d4 <___vfiprintf_internal_r+0xf04>
1000ec38:	9d04b03a 	or	r2,r19,r20
1000ec3c:	10025c1e 	bne	r2,zero,1000f5b0 <___vfiprintf_internal_r+0x10e0>
1000ec40:	d8001d85 	stb	zero,118(sp)
1000ec44:	80024416 	blt	r16,zero,1000f558 <___vfiprintf_internal_r+0x1088>
1000ec48:	00bfdfc4 	movi	r2,-129
1000ec4c:	88a2703a 	and	r17,r17,r2
1000ec50:	003f1d06 	br	1000e8c8 <__alt_data_end+0xf800e8c8>
1000ec54:	d8c02217 	ldw	r3,136(sp)
1000ec58:	04c00044 	movi	r19,1
1000ec5c:	b811883a 	mov	r8,r23
1000ec60:	18800017 	ldw	r2,0(r3)
1000ec64:	18c00104 	addi	r3,r3,4
1000ec68:	d8001d85 	stb	zero,118(sp)
1000ec6c:	d8801005 	stb	r2,64(sp)
1000ec70:	d8c02215 	stw	r3,136(sp)
1000ec74:	9829883a 	mov	r20,r19
1000ec78:	ddc01004 	addi	r23,sp,64
1000ec7c:	0021883a 	mov	r16,zero
1000ec80:	003f1e06 	br	1000e8fc <__alt_data_end+0xf800e8fc>
1000ec84:	9cc03fcc 	andi	r19,r19,255
1000ec88:	b811883a 	mov	r8,r23
1000ec8c:	9803331e 	bne	r19,zero,1000f95c <___vfiprintf_internal_r+0x148c>
1000ec90:	8880080c 	andi	r2,r17,32
1000ec94:	10004826 	beq	r2,zero,1000edb8 <___vfiprintf_internal_r+0x8e8>
1000ec98:	d9002217 	ldw	r4,136(sp)
1000ec9c:	20800117 	ldw	r2,4(r4)
1000eca0:	24c00017 	ldw	r19,0(r4)
1000eca4:	21000204 	addi	r4,r4,8
1000eca8:	d9002215 	stw	r4,136(sp)
1000ecac:	1029883a 	mov	r20,r2
1000ecb0:	10024c16 	blt	r2,zero,1000f5e4 <___vfiprintf_internal_r+0x1114>
1000ecb4:	dd401d83 	ldbu	r21,118(sp)
1000ecb8:	80007116 	blt	r16,zero,1000ee80 <___vfiprintf_internal_r+0x9b0>
1000ecbc:	00ffdfc4 	movi	r3,-129
1000ecc0:	9d04b03a 	or	r2,r19,r20
1000ecc4:	88e2703a 	and	r17,r17,r3
1000ecc8:	1000d126 	beq	r2,zero,1000f010 <___vfiprintf_internal_r+0xb40>
1000eccc:	a0023526 	beq	r20,zero,1000f5a4 <___vfiprintf_internal_r+0x10d4>
1000ecd0:	ddc01a04 	addi	r23,sp,104
1000ecd4:	4039883a 	mov	fp,r8
1000ecd8:	9809883a 	mov	r4,r19
1000ecdc:	a00b883a 	mov	r5,r20
1000ece0:	01800284 	movi	r6,10
1000ece4:	000f883a 	mov	r7,zero
1000ece8:	00109fc0 	call	100109fc <__umoddi3>
1000ecec:	10800c04 	addi	r2,r2,48
1000ecf0:	bdffffc4 	addi	r23,r23,-1
1000ecf4:	9809883a 	mov	r4,r19
1000ecf8:	a00b883a 	mov	r5,r20
1000ecfc:	b8800005 	stb	r2,0(r23)
1000ed00:	01800284 	movi	r6,10
1000ed04:	000f883a 	mov	r7,zero
1000ed08:	00104000 	call	10010400 <__udivdi3>
1000ed0c:	1027883a 	mov	r19,r2
1000ed10:	10c4b03a 	or	r2,r2,r3
1000ed14:	1829883a 	mov	r20,r3
1000ed18:	103fef1e 	bne	r2,zero,1000ecd8 <__alt_data_end+0xf800ecd8>
1000ed1c:	d9001e17 	ldw	r4,120(sp)
1000ed20:	e011883a 	mov	r8,fp
1000ed24:	25e9c83a 	sub	r20,r4,r23
1000ed28:	003eec06 	br	1000e8dc <__alt_data_end+0xf800e8dc>
1000ed2c:	d8802307 	ldb	r2,140(sp)
1000ed30:	1002361e 	bne	r2,zero,1000f60c <___vfiprintf_internal_r+0x113c>
1000ed34:	00c00804 	movi	r3,32
1000ed38:	d8c02305 	stb	r3,140(sp)
1000ed3c:	04c00044 	movi	r19,1
1000ed40:	b0c00007 	ldb	r3,0(r22)
1000ed44:	003e3f06 	br	1000e644 <__alt_data_end+0xf800e644>
1000ed48:	8c400054 	ori	r17,r17,1
1000ed4c:	b0c00007 	ldb	r3,0(r22)
1000ed50:	003e3c06 	br	1000e644 <__alt_data_end+0xf800e644>
1000ed54:	8c402014 	ori	r17,r17,128
1000ed58:	b0c00007 	ldb	r3,0(r22)
1000ed5c:	003e3906 	br	1000e644 <__alt_data_end+0xf800e644>
1000ed60:	dc002715 	stw	r16,156(sp)
1000ed64:	d8002515 	stw	zero,148(sp)
1000ed68:	1f3ff404 	addi	fp,r3,-48
1000ed6c:	0009883a 	mov	r4,zero
1000ed70:	b021883a 	mov	r16,r22
1000ed74:	01400284 	movi	r5,10
1000ed78:	0006ad80 	call	10006ad8 <__mulsi3>
1000ed7c:	80c00007 	ldb	r3,0(r16)
1000ed80:	e089883a 	add	r4,fp,r2
1000ed84:	b5800044 	addi	r22,r22,1
1000ed88:	1f3ff404 	addi	fp,r3,-48
1000ed8c:	b021883a 	mov	r16,r22
1000ed90:	af3ff82e 	bgeu	r21,fp,1000ed74 <__alt_data_end+0xf800ed74>
1000ed94:	d9002515 	stw	r4,148(sp)
1000ed98:	dc002717 	ldw	r16,156(sp)
1000ed9c:	003e2a06 	br	1000e648 <__alt_data_end+0xf800e648>
1000eda0:	9cc03fcc 	andi	r19,r19,255
1000eda4:	b811883a 	mov	r8,r23
1000eda8:	9802e91e 	bne	r19,zero,1000f950 <___vfiprintf_internal_r+0x1480>
1000edac:	8c400414 	ori	r17,r17,16
1000edb0:	8880080c 	andi	r2,r17,32
1000edb4:	103fb81e 	bne	r2,zero,1000ec98 <__alt_data_end+0xf800ec98>
1000edb8:	8880040c 	andi	r2,r17,16
1000edbc:	10022e26 	beq	r2,zero,1000f678 <___vfiprintf_internal_r+0x11a8>
1000edc0:	d9402217 	ldw	r5,136(sp)
1000edc4:	2cc00017 	ldw	r19,0(r5)
1000edc8:	29400104 	addi	r5,r5,4
1000edcc:	d9402215 	stw	r5,136(sp)
1000edd0:	9829d7fa 	srai	r20,r19,31
1000edd4:	a005883a 	mov	r2,r20
1000edd8:	003fb506 	br	1000ecb0 <__alt_data_end+0xf800ecb0>
1000eddc:	9cc03fcc 	andi	r19,r19,255
1000ede0:	b811883a 	mov	r8,r23
1000ede4:	9802fa1e 	bne	r19,zero,1000f9d0 <___vfiprintf_internal_r+0x1500>
1000ede8:	8c400414 	ori	r17,r17,16
1000edec:	8880080c 	andi	r2,r17,32
1000edf0:	103f661e 	bne	r2,zero,1000eb8c <__alt_data_end+0xf800eb8c>
1000edf4:	8880040c 	andi	r2,r17,16
1000edf8:	10020626 	beq	r2,zero,1000f614 <___vfiprintf_internal_r+0x1144>
1000edfc:	d9402217 	ldw	r5,136(sp)
1000ee00:	d8001d85 	stb	zero,118(sp)
1000ee04:	0029883a 	mov	r20,zero
1000ee08:	28800104 	addi	r2,r5,4
1000ee0c:	2cc00017 	ldw	r19,0(r5)
1000ee10:	80020816 	blt	r16,zero,1000f634 <___vfiprintf_internal_r+0x1164>
1000ee14:	00ffdfc4 	movi	r3,-129
1000ee18:	d8802215 	stw	r2,136(sp)
1000ee1c:	88e2703a 	and	r17,r17,r3
1000ee20:	983f651e 	bne	r19,zero,1000ebb8 <__alt_data_end+0xf800ebb8>
1000ee24:	002b883a 	mov	r21,zero
1000ee28:	8002cf26 	beq	r16,zero,1000f968 <___vfiprintf_internal_r+0x1498>
1000ee2c:	0027883a 	mov	r19,zero
1000ee30:	0029883a 	mov	r20,zero
1000ee34:	003f6106 	br	1000ebbc <__alt_data_end+0xf800ebbc>
1000ee38:	9cc03fcc 	andi	r19,r19,255
1000ee3c:	b811883a 	mov	r8,r23
1000ee40:	9802e01e 	bne	r19,zero,1000f9c4 <___vfiprintf_internal_r+0x14f4>
1000ee44:	8c400414 	ori	r17,r17,16
1000ee48:	8880080c 	andi	r2,r17,32
1000ee4c:	1000641e 	bne	r2,zero,1000efe0 <___vfiprintf_internal_r+0xb10>
1000ee50:	8880040c 	andi	r2,r17,16
1000ee54:	1001c81e 	bne	r2,zero,1000f578 <___vfiprintf_internal_r+0x10a8>
1000ee58:	8880100c 	andi	r2,r17,64
1000ee5c:	d8001d85 	stb	zero,118(sp)
1000ee60:	1002281e 	bne	r2,zero,1000f704 <___vfiprintf_internal_r+0x1234>
1000ee64:	d9002217 	ldw	r4,136(sp)
1000ee68:	0029883a 	mov	r20,zero
1000ee6c:	20800104 	addi	r2,r4,4
1000ee70:	24c00017 	ldw	r19,0(r4)
1000ee74:	8001c60e 	bge	r16,zero,1000f590 <___vfiprintf_internal_r+0x10c0>
1000ee78:	d8802215 	stw	r2,136(sp)
1000ee7c:	002b883a 	mov	r21,zero
1000ee80:	9d04b03a 	or	r2,r19,r20
1000ee84:	103f911e 	bne	r2,zero,1000eccc <__alt_data_end+0xf800eccc>
1000ee88:	00800044 	movi	r2,1
1000ee8c:	10803fcc 	andi	r2,r2,255
1000ee90:	00c00044 	movi	r3,1
1000ee94:	10c05f26 	beq	r2,r3,1000f014 <___vfiprintf_internal_r+0xb44>
1000ee98:	00c00084 	movi	r3,2
1000ee9c:	10ffe31e 	bne	r2,r3,1000ee2c <__alt_data_end+0xf800ee2c>
1000eea0:	0027883a 	mov	r19,zero
1000eea4:	0029883a 	mov	r20,zero
1000eea8:	00015106 	br	1000f3f0 <___vfiprintf_internal_r+0xf20>
1000eeac:	9cc03fcc 	andi	r19,r19,255
1000eeb0:	b811883a 	mov	r8,r23
1000eeb4:	9802c01e 	bne	r19,zero,1000f9b8 <___vfiprintf_internal_r+0x14e8>
1000eeb8:	01440074 	movhi	r5,4097
1000eebc:	295a3604 	addi	r5,r5,26840
1000eec0:	d9402615 	stw	r5,152(sp)
1000eec4:	8880080c 	andi	r2,r17,32
1000eec8:	103f541e 	bne	r2,zero,1000ec1c <__alt_data_end+0xf800ec1c>
1000eecc:	8880040c 	andi	r2,r17,16
1000eed0:	1001f226 	beq	r2,zero,1000f69c <___vfiprintf_internal_r+0x11cc>
1000eed4:	d9402217 	ldw	r5,136(sp)
1000eed8:	0029883a 	mov	r20,zero
1000eedc:	2cc00017 	ldw	r19,0(r5)
1000eee0:	29400104 	addi	r5,r5,4
1000eee4:	d9402215 	stw	r5,136(sp)
1000eee8:	003f5106 	br	1000ec30 <__alt_data_end+0xf800ec30>
1000eeec:	d8c02217 	ldw	r3,136(sp)
1000eef0:	b811883a 	mov	r8,r23
1000eef4:	d8001d85 	stb	zero,118(sp)
1000eef8:	1dc00017 	ldw	r23,0(r3)
1000eefc:	1f000104 	addi	fp,r3,4
1000ef00:	b8025926 	beq	r23,zero,1000f868 <___vfiprintf_internal_r+0x1398>
1000ef04:	80023316 	blt	r16,zero,1000f7d4 <___vfiprintf_internal_r+0x1304>
1000ef08:	800d883a 	mov	r6,r16
1000ef0c:	000b883a 	mov	r5,zero
1000ef10:	b809883a 	mov	r4,r23
1000ef14:	da002a15 	stw	r8,168(sp)
1000ef18:	000c6100 	call	1000c610 <memchr>
1000ef1c:	da002a17 	ldw	r8,168(sp)
1000ef20:	10026826 	beq	r2,zero,1000f8c4 <___vfiprintf_internal_r+0x13f4>
1000ef24:	15e9c83a 	sub	r20,r2,r23
1000ef28:	dd401d83 	ldbu	r21,118(sp)
1000ef2c:	df002215 	stw	fp,136(sp)
1000ef30:	0021883a 	mov	r16,zero
1000ef34:	003e6906 	br	1000e8dc <__alt_data_end+0xf800e8dc>
1000ef38:	9cc03fcc 	andi	r19,r19,255
1000ef3c:	b811883a 	mov	r8,r23
1000ef40:	983fc126 	beq	r19,zero,1000ee48 <__alt_data_end+0xf800ee48>
1000ef44:	d8c02303 	ldbu	r3,140(sp)
1000ef48:	d8c01d85 	stb	r3,118(sp)
1000ef4c:	003fbe06 	br	1000ee48 <__alt_data_end+0xf800ee48>
1000ef50:	d9002217 	ldw	r4,136(sp)
1000ef54:	d9402217 	ldw	r5,136(sp)
1000ef58:	21000017 	ldw	r4,0(r4)
1000ef5c:	28800104 	addi	r2,r5,4
1000ef60:	d9002515 	stw	r4,148(sp)
1000ef64:	203e3d16 	blt	r4,zero,1000e85c <__alt_data_end+0xf800e85c>
1000ef68:	d8802215 	stw	r2,136(sp)
1000ef6c:	b0c00007 	ldb	r3,0(r22)
1000ef70:	003db406 	br	1000e644 <__alt_data_end+0xf800e644>
1000ef74:	00c00ac4 	movi	r3,43
1000ef78:	d8c02305 	stb	r3,140(sp)
1000ef7c:	04c00044 	movi	r19,1
1000ef80:	b0c00007 	ldb	r3,0(r22)
1000ef84:	003daf06 	br	1000e644 <__alt_data_end+0xf800e644>
1000ef88:	b0c00007 	ldb	r3,0(r22)
1000ef8c:	01000a84 	movi	r4,42
1000ef90:	b4000044 	addi	r16,r22,1
1000ef94:	19025e26 	beq	r3,r4,1000f910 <___vfiprintf_internal_r+0x1440>
1000ef98:	1f3ff404 	addi	fp,r3,-48
1000ef9c:	0009883a 	mov	r4,zero
1000efa0:	af025236 	bltu	r21,fp,1000f8ec <___vfiprintf_internal_r+0x141c>
1000efa4:	01400284 	movi	r5,10
1000efa8:	0006ad80 	call	10006ad8 <__mulsi3>
1000efac:	80c00007 	ldb	r3,0(r16)
1000efb0:	1709883a 	add	r4,r2,fp
1000efb4:	85800044 	addi	r22,r16,1
1000efb8:	1f3ff404 	addi	fp,r3,-48
1000efbc:	b021883a 	mov	r16,r22
1000efc0:	af3ff82e 	bgeu	r21,fp,1000efa4 <__alt_data_end+0xf800efa4>
1000efc4:	2021883a 	mov	r16,r4
1000efc8:	203d9f0e 	bge	r4,zero,1000e648 <__alt_data_end+0xf800e648>
1000efcc:	043fffc4 	movi	r16,-1
1000efd0:	003d9d06 	br	1000e648 <__alt_data_end+0xf800e648>
1000efd4:	8c401014 	ori	r17,r17,64
1000efd8:	b0c00007 	ldb	r3,0(r22)
1000efdc:	003d9906 	br	1000e644 <__alt_data_end+0xf800e644>
1000efe0:	d9002217 	ldw	r4,136(sp)
1000efe4:	d8001d85 	stb	zero,118(sp)
1000efe8:	20c00204 	addi	r3,r4,8
1000efec:	24c00017 	ldw	r19,0(r4)
1000eff0:	25000117 	ldw	r20,4(r4)
1000eff4:	8001e716 	blt	r16,zero,1000f794 <___vfiprintf_internal_r+0x12c4>
1000eff8:	013fdfc4 	movi	r4,-129
1000effc:	9d04b03a 	or	r2,r19,r20
1000f000:	d8c02215 	stw	r3,136(sp)
1000f004:	8922703a 	and	r17,r17,r4
1000f008:	002b883a 	mov	r21,zero
1000f00c:	103f2f1e 	bne	r2,zero,1000eccc <__alt_data_end+0xf800eccc>
1000f010:	803e2f26 	beq	r16,zero,1000e8d0 <__alt_data_end+0xf800e8d0>
1000f014:	0027883a 	mov	r19,zero
1000f018:	9cc00c04 	addi	r19,r19,48
1000f01c:	dcc019c5 	stb	r19,103(sp)
1000f020:	dd002817 	ldw	r20,160(sp)
1000f024:	ddc019c4 	addi	r23,sp,103
1000f028:	003e2c06 	br	1000e8dc <__alt_data_end+0xf800e8dc>
1000f02c:	9cc03fcc 	andi	r19,r19,255
1000f030:	b811883a 	mov	r8,r23
1000f034:	9802571e 	bne	r19,zero,1000f994 <___vfiprintf_internal_r+0x14c4>
1000f038:	18005726 	beq	r3,zero,1000f198 <___vfiprintf_internal_r+0xcc8>
1000f03c:	04c00044 	movi	r19,1
1000f040:	d8c01005 	stb	r3,64(sp)
1000f044:	d8001d85 	stb	zero,118(sp)
1000f048:	9829883a 	mov	r20,r19
1000f04c:	ddc01004 	addi	r23,sp,64
1000f050:	003f0a06 	br	1000ec7c <__alt_data_end+0xf800ec7c>
1000f054:	d9402017 	ldw	r5,128(sp)
1000f058:	d9002117 	ldw	r4,132(sp)
1000f05c:	d9801a04 	addi	r6,sp,104
1000f060:	da802a15 	stw	r10,168(sp)
1000f064:	000e3bc0 	call	1000e3bc <__sprint_r.part.0>
1000f068:	da802a17 	ldw	r10,168(sp)
1000f06c:	1000501e 	bne	r2,zero,1000f1b0 <___vfiprintf_internal_r+0xce0>
1000f070:	d9801b17 	ldw	r6,108(sp)
1000f074:	d8801c17 	ldw	r2,112(sp)
1000f078:	d811883a 	mov	r8,sp
1000f07c:	31000044 	addi	r4,r6,1
1000f080:	003e3606 	br	1000e95c <__alt_data_end+0xf800e95c>
1000f084:	d9001b17 	ldw	r4,108(sp)
1000f088:	d8801c17 	ldw	r2,112(sp)
1000f08c:	21400044 	addi	r5,r4,1
1000f090:	d9801d87 	ldb	r6,118(sp)
1000f094:	303e5226 	beq	r6,zero,1000e9e0 <__alt_data_end+0xf800e9e0>
1000f098:	01800044 	movi	r6,1
1000f09c:	d9001d84 	addi	r4,sp,118
1000f0a0:	1185883a 	add	r2,r2,r6
1000f0a4:	41000015 	stw	r4,0(r8)
1000f0a8:	41800115 	stw	r6,4(r8)
1000f0ac:	d8801c15 	stw	r2,112(sp)
1000f0b0:	d9401b15 	stw	r5,108(sp)
1000f0b4:	010001c4 	movi	r4,7
1000f0b8:	2140b00e 	bge	r4,r5,1000f37c <___vfiprintf_internal_r+0xeac>
1000f0bc:	1000f61e 	bne	r2,zero,1000f498 <___vfiprintf_internal_r+0xfc8>
1000f0c0:	3800b31e 	bne	r7,zero,1000f390 <___vfiprintf_internal_r+0xec0>
1000f0c4:	0009883a 	mov	r4,zero
1000f0c8:	300b883a 	mov	r5,r6
1000f0cc:	d811883a 	mov	r8,sp
1000f0d0:	01802004 	movi	r6,128
1000f0d4:	19be5226 	beq	r3,r6,1000ea20 <__alt_data_end+0xf800ea20>
1000f0d8:	8521c83a 	sub	r16,r16,r20
1000f0dc:	043e790e 	bge	zero,r16,1000eac4 <__alt_data_end+0xf800eac4>
1000f0e0:	05400404 	movi	r21,16
1000f0e4:	ac01b00e 	bge	r21,r16,1000f7a8 <___vfiprintf_internal_r+0x12d8>
1000f0e8:	01440074 	movhi	r5,4097
1000f0ec:	295a9c04 	addi	r5,r5,27248
1000f0f0:	d9402315 	stw	r5,140(sp)
1000f0f4:	070001c4 	movi	fp,7
1000f0f8:	00000506 	br	1000f110 <___vfiprintf_internal_r+0xc40>
1000f0fc:	21400084 	addi	r5,r4,2
1000f100:	42000204 	addi	r8,r8,8
1000f104:	1809883a 	mov	r4,r3
1000f108:	843ffc04 	addi	r16,r16,-16
1000f10c:	ac000d0e 	bge	r21,r16,1000f144 <___vfiprintf_internal_r+0xc74>
1000f110:	10800404 	addi	r2,r2,16
1000f114:	20c00044 	addi	r3,r4,1
1000f118:	44800015 	stw	r18,0(r8)
1000f11c:	45400115 	stw	r21,4(r8)
1000f120:	d8801c15 	stw	r2,112(sp)
1000f124:	d8c01b15 	stw	r3,108(sp)
1000f128:	e0fff40e 	bge	fp,r3,1000f0fc <__alt_data_end+0xf800f0fc>
1000f12c:	1000101e 	bne	r2,zero,1000f170 <___vfiprintf_internal_r+0xca0>
1000f130:	843ffc04 	addi	r16,r16,-16
1000f134:	01400044 	movi	r5,1
1000f138:	0009883a 	mov	r4,zero
1000f13c:	d811883a 	mov	r8,sp
1000f140:	ac3ff316 	blt	r21,r16,1000f110 <__alt_data_end+0xf800f110>
1000f144:	d8c02317 	ldw	r3,140(sp)
1000f148:	1405883a 	add	r2,r2,r16
1000f14c:	44000115 	stw	r16,4(r8)
1000f150:	40c00015 	stw	r3,0(r8)
1000f154:	d8801c15 	stw	r2,112(sp)
1000f158:	d9401b15 	stw	r5,108(sp)
1000f15c:	00c001c4 	movi	r3,7
1000f160:	19401916 	blt	r3,r5,1000f1c8 <___vfiprintf_internal_r+0xcf8>
1000f164:	42000204 	addi	r8,r8,8
1000f168:	29400044 	addi	r5,r5,1
1000f16c:	003e5506 	br	1000eac4 <__alt_data_end+0xf800eac4>
1000f170:	d9402017 	ldw	r5,128(sp)
1000f174:	d9002117 	ldw	r4,132(sp)
1000f178:	d9801a04 	addi	r6,sp,104
1000f17c:	000e3bc0 	call	1000e3bc <__sprint_r.part.0>
1000f180:	10000b1e 	bne	r2,zero,1000f1b0 <___vfiprintf_internal_r+0xce0>
1000f184:	d9001b17 	ldw	r4,108(sp)
1000f188:	d8801c17 	ldw	r2,112(sp)
1000f18c:	d811883a 	mov	r8,sp
1000f190:	21400044 	addi	r5,r4,1
1000f194:	003fdc06 	br	1000f108 <__alt_data_end+0xf800f108>
1000f198:	d8801c17 	ldw	r2,112(sp)
1000f19c:	10000426 	beq	r2,zero,1000f1b0 <___vfiprintf_internal_r+0xce0>
1000f1a0:	d9402017 	ldw	r5,128(sp)
1000f1a4:	d9002117 	ldw	r4,132(sp)
1000f1a8:	d9801a04 	addi	r6,sp,104
1000f1ac:	000e3bc0 	call	1000e3bc <__sprint_r.part.0>
1000f1b0:	d9402017 	ldw	r5,128(sp)
1000f1b4:	2880030b 	ldhu	r2,12(r5)
1000f1b8:	1080100c 	andi	r2,r2,64
1000f1bc:	10014d1e 	bne	r2,zero,1000f6f4 <___vfiprintf_internal_r+0x1224>
1000f1c0:	d8802417 	ldw	r2,144(sp)
1000f1c4:	003d9706 	br	1000e824 <__alt_data_end+0xf800e824>
1000f1c8:	1000d21e 	bne	r2,zero,1000f514 <___vfiprintf_internal_r+0x1044>
1000f1cc:	00c00044 	movi	r3,1
1000f1d0:	a005883a 	mov	r2,r20
1000f1d4:	ddc00015 	stw	r23,0(sp)
1000f1d8:	dd000115 	stw	r20,4(sp)
1000f1dc:	dd001c15 	stw	r20,112(sp)
1000f1e0:	d8c01b15 	stw	r3,108(sp)
1000f1e4:	d811883a 	mov	r8,sp
1000f1e8:	42000204 	addi	r8,r8,8
1000f1ec:	8c40010c 	andi	r17,r17,4
1000f1f0:	88004026 	beq	r17,zero,1000f2f4 <___vfiprintf_internal_r+0xe24>
1000f1f4:	d9002517 	ldw	r4,148(sp)
1000f1f8:	24e3c83a 	sub	r17,r4,r19
1000f1fc:	04403d0e 	bge	zero,r17,1000f2f4 <___vfiprintf_internal_r+0xe24>
1000f200:	04000404 	movi	r16,16
1000f204:	8441a90e 	bge	r16,r17,1000f8ac <___vfiprintf_internal_r+0x13dc>
1000f208:	00c40074 	movhi	r3,4097
1000f20c:	18daa004 	addi	r3,r3,27264
1000f210:	d9001b17 	ldw	r4,108(sp)
1000f214:	d8c02315 	stw	r3,140(sp)
1000f218:	050001c4 	movi	r20,7
1000f21c:	dd402117 	ldw	r21,132(sp)
1000f220:	ddc02017 	ldw	r23,128(sp)
1000f224:	00000506 	br	1000f23c <___vfiprintf_internal_r+0xd6c>
1000f228:	21400084 	addi	r5,r4,2
1000f22c:	42000204 	addi	r8,r8,8
1000f230:	1809883a 	mov	r4,r3
1000f234:	8c7ffc04 	addi	r17,r17,-16
1000f238:	84400f0e 	bge	r16,r17,1000f278 <___vfiprintf_internal_r+0xda8>
1000f23c:	01440074 	movhi	r5,4097
1000f240:	10800404 	addi	r2,r2,16
1000f244:	20c00044 	addi	r3,r4,1
1000f248:	295aa004 	addi	r5,r5,27264
1000f24c:	41400015 	stw	r5,0(r8)
1000f250:	44000115 	stw	r16,4(r8)
1000f254:	d8801c15 	stw	r2,112(sp)
1000f258:	d8c01b15 	stw	r3,108(sp)
1000f25c:	a0fff20e 	bge	r20,r3,1000f228 <__alt_data_end+0xf800f228>
1000f260:	1000141e 	bne	r2,zero,1000f2b4 <___vfiprintf_internal_r+0xde4>
1000f264:	8c7ffc04 	addi	r17,r17,-16
1000f268:	01400044 	movi	r5,1
1000f26c:	0009883a 	mov	r4,zero
1000f270:	d811883a 	mov	r8,sp
1000f274:	847ff116 	blt	r16,r17,1000f23c <__alt_data_end+0xf800f23c>
1000f278:	d8c02317 	ldw	r3,140(sp)
1000f27c:	1445883a 	add	r2,r2,r17
1000f280:	44400115 	stw	r17,4(r8)
1000f284:	40c00015 	stw	r3,0(r8)
1000f288:	d8801c15 	stw	r2,112(sp)
1000f28c:	d9401b15 	stw	r5,108(sp)
1000f290:	00c001c4 	movi	r3,7
1000f294:	1940170e 	bge	r3,r5,1000f2f4 <___vfiprintf_internal_r+0xe24>
1000f298:	1000101e 	bne	r2,zero,1000f2dc <___vfiprintf_internal_r+0xe0c>
1000f29c:	d8802517 	ldw	r2,148(sp)
1000f2a0:	14c11616 	blt	r2,r19,1000f6fc <___vfiprintf_internal_r+0x122c>
1000f2a4:	d9002417 	ldw	r4,144(sp)
1000f2a8:	2089883a 	add	r4,r4,r2
1000f2ac:	d9002415 	stw	r4,144(sp)
1000f2b0:	003e1806 	br	1000eb14 <__alt_data_end+0xf800eb14>
1000f2b4:	d9801a04 	addi	r6,sp,104
1000f2b8:	b80b883a 	mov	r5,r23
1000f2bc:	a809883a 	mov	r4,r21
1000f2c0:	000e3bc0 	call	1000e3bc <__sprint_r.part.0>
1000f2c4:	103fba1e 	bne	r2,zero,1000f1b0 <__alt_data_end+0xf800f1b0>
1000f2c8:	d9001b17 	ldw	r4,108(sp)
1000f2cc:	d8801c17 	ldw	r2,112(sp)
1000f2d0:	d811883a 	mov	r8,sp
1000f2d4:	21400044 	addi	r5,r4,1
1000f2d8:	003fd606 	br	1000f234 <__alt_data_end+0xf800f234>
1000f2dc:	d9402017 	ldw	r5,128(sp)
1000f2e0:	d9002117 	ldw	r4,132(sp)
1000f2e4:	d9801a04 	addi	r6,sp,104
1000f2e8:	000e3bc0 	call	1000e3bc <__sprint_r.part.0>
1000f2ec:	103fb01e 	bne	r2,zero,1000f1b0 <__alt_data_end+0xf800f1b0>
1000f2f0:	d8801c17 	ldw	r2,112(sp)
1000f2f4:	d8c02517 	ldw	r3,148(sp)
1000f2f8:	1cc0010e 	bge	r3,r19,1000f300 <___vfiprintf_internal_r+0xe30>
1000f2fc:	9807883a 	mov	r3,r19
1000f300:	d9002417 	ldw	r4,144(sp)
1000f304:	20c9883a 	add	r4,r4,r3
1000f308:	d9002415 	stw	r4,144(sp)
1000f30c:	103e0126 	beq	r2,zero,1000eb14 <__alt_data_end+0xf800eb14>
1000f310:	d9402017 	ldw	r5,128(sp)
1000f314:	d9002117 	ldw	r4,132(sp)
1000f318:	d9801a04 	addi	r6,sp,104
1000f31c:	000e3bc0 	call	1000e3bc <__sprint_r.part.0>
1000f320:	103dfc26 	beq	r2,zero,1000eb14 <__alt_data_end+0xf800eb14>
1000f324:	003fa206 	br	1000f1b0 <__alt_data_end+0xf800f1b0>
1000f328:	d9402017 	ldw	r5,128(sp)
1000f32c:	d9002117 	ldw	r4,132(sp)
1000f330:	d9801a04 	addi	r6,sp,104
1000f334:	d9c02b15 	stw	r7,172(sp)
1000f338:	000e3bc0 	call	1000e3bc <__sprint_r.part.0>
1000f33c:	d9c02b17 	ldw	r7,172(sp)
1000f340:	103f9b1e 	bne	r2,zero,1000f1b0 <__alt_data_end+0xf800f1b0>
1000f344:	d9001b17 	ldw	r4,108(sp)
1000f348:	d8801c17 	ldw	r2,112(sp)
1000f34c:	d811883a 	mov	r8,sp
1000f350:	21800044 	addi	r6,r4,1
1000f354:	003dbf06 	br	1000ea54 <__alt_data_end+0xf800ea54>
1000f358:	1000d81e 	bne	r2,zero,1000f6bc <___vfiprintf_internal_r+0x11ec>
1000f35c:	d9001d87 	ldb	r4,118(sp)
1000f360:	20000a26 	beq	r4,zero,1000f38c <___vfiprintf_internal_r+0xebc>
1000f364:	00800044 	movi	r2,1
1000f368:	d9001d84 	addi	r4,sp,118
1000f36c:	100b883a 	mov	r5,r2
1000f370:	d9000015 	stw	r4,0(sp)
1000f374:	d8800115 	stw	r2,4(sp)
1000f378:	d811883a 	mov	r8,sp
1000f37c:	2809883a 	mov	r4,r5
1000f380:	42000204 	addi	r8,r8,8
1000f384:	29400044 	addi	r5,r5,1
1000f388:	003d9506 	br	1000e9e0 <__alt_data_end+0xf800e9e0>
1000f38c:	3800fd26 	beq	r7,zero,1000f784 <___vfiprintf_internal_r+0x12b4>
1000f390:	00800084 	movi	r2,2
1000f394:	d9001d04 	addi	r4,sp,116
1000f398:	d9000015 	stw	r4,0(sp)
1000f39c:	d8800115 	stw	r2,4(sp)
1000f3a0:	01400044 	movi	r5,1
1000f3a4:	d811883a 	mov	r8,sp
1000f3a8:	2809883a 	mov	r4,r5
1000f3ac:	42000204 	addi	r8,r8,8
1000f3b0:	29400044 	addi	r5,r5,1
1000f3b4:	003f4606 	br	1000f0d0 <__alt_data_end+0xf800f0d0>
1000f3b8:	d8802517 	ldw	r2,148(sp)
1000f3bc:	14c0010e 	bge	r2,r19,1000f3c4 <___vfiprintf_internal_r+0xef4>
1000f3c0:	9805883a 	mov	r2,r19
1000f3c4:	d9402417 	ldw	r5,144(sp)
1000f3c8:	288b883a 	add	r5,r5,r2
1000f3cc:	d9402415 	stw	r5,144(sp)
1000f3d0:	003dd006 	br	1000eb14 <__alt_data_end+0xf800eb14>
1000f3d4:	d8001d85 	stb	zero,118(sp)
1000f3d8:	80005d16 	blt	r16,zero,1000f550 <___vfiprintf_internal_r+0x1080>
1000f3dc:	00ffdfc4 	movi	r3,-129
1000f3e0:	9d04b03a 	or	r2,r19,r20
1000f3e4:	88e2703a 	and	r17,r17,r3
1000f3e8:	103d3726 	beq	r2,zero,1000e8c8 <__alt_data_end+0xf800e8c8>
1000f3ec:	002b883a 	mov	r21,zero
1000f3f0:	d9002617 	ldw	r4,152(sp)
1000f3f4:	ddc01a04 	addi	r23,sp,104
1000f3f8:	988003cc 	andi	r2,r19,15
1000f3fc:	a006973a 	slli	r3,r20,28
1000f400:	2085883a 	add	r2,r4,r2
1000f404:	9826d13a 	srli	r19,r19,4
1000f408:	10800003 	ldbu	r2,0(r2)
1000f40c:	a028d13a 	srli	r20,r20,4
1000f410:	bdffffc4 	addi	r23,r23,-1
1000f414:	1ce6b03a 	or	r19,r3,r19
1000f418:	b8800005 	stb	r2,0(r23)
1000f41c:	9d04b03a 	or	r2,r19,r20
1000f420:	103ff51e 	bne	r2,zero,1000f3f8 <__alt_data_end+0xf800f3f8>
1000f424:	d8801e17 	ldw	r2,120(sp)
1000f428:	15e9c83a 	sub	r20,r2,r23
1000f42c:	003d2b06 	br	1000e8dc <__alt_data_end+0xf800e8dc>
1000f430:	d9402017 	ldw	r5,128(sp)
1000f434:	d9002117 	ldw	r4,132(sp)
1000f438:	d9801a04 	addi	r6,sp,104
1000f43c:	000e3bc0 	call	1000e3bc <__sprint_r.part.0>
1000f440:	103f5b1e 	bne	r2,zero,1000f1b0 <__alt_data_end+0xf800f1b0>
1000f444:	d8801c17 	ldw	r2,112(sp)
1000f448:	d811883a 	mov	r8,sp
1000f44c:	003f6706 	br	1000f1ec <__alt_data_end+0xf800f1ec>
1000f450:	d9402017 	ldw	r5,128(sp)
1000f454:	d9002117 	ldw	r4,132(sp)
1000f458:	d9801a04 	addi	r6,sp,104
1000f45c:	000e3bc0 	call	1000e3bc <__sprint_r.part.0>
1000f460:	103f531e 	bne	r2,zero,1000f1b0 <__alt_data_end+0xf800f1b0>
1000f464:	d811883a 	mov	r8,sp
1000f468:	003cd906 	br	1000e7d0 <__alt_data_end+0xf800e7d0>
1000f46c:	10803fcc 	andi	r2,r2,255
1000f470:	1080201c 	xori	r2,r2,128
1000f474:	10bfe004 	addi	r2,r2,-128
1000f478:	00c00c04 	movi	r3,48
1000f47c:	10ffe926 	beq	r2,r3,1000f424 <__alt_data_end+0xf800f424>
1000f480:	b8ffffc5 	stb	r3,-1(r23)
1000f484:	d8c01e17 	ldw	r3,120(sp)
1000f488:	b8bfffc4 	addi	r2,r23,-1
1000f48c:	102f883a 	mov	r23,r2
1000f490:	18a9c83a 	sub	r20,r3,r2
1000f494:	003d1106 	br	1000e8dc <__alt_data_end+0xf800e8dc>
1000f498:	d9402017 	ldw	r5,128(sp)
1000f49c:	d9002117 	ldw	r4,132(sp)
1000f4a0:	d9801a04 	addi	r6,sp,104
1000f4a4:	d8c02a15 	stw	r3,168(sp)
1000f4a8:	d9c02b15 	stw	r7,172(sp)
1000f4ac:	000e3bc0 	call	1000e3bc <__sprint_r.part.0>
1000f4b0:	d8c02a17 	ldw	r3,168(sp)
1000f4b4:	d9c02b17 	ldw	r7,172(sp)
1000f4b8:	103f3d1e 	bne	r2,zero,1000f1b0 <__alt_data_end+0xf800f1b0>
1000f4bc:	d9001b17 	ldw	r4,108(sp)
1000f4c0:	d8801c17 	ldw	r2,112(sp)
1000f4c4:	d811883a 	mov	r8,sp
1000f4c8:	21400044 	addi	r5,r4,1
1000f4cc:	003d4406 	br	1000e9e0 <__alt_data_end+0xf800e9e0>
1000f4d0:	d9402017 	ldw	r5,128(sp)
1000f4d4:	d9002117 	ldw	r4,132(sp)
1000f4d8:	d9801a04 	addi	r6,sp,104
1000f4dc:	d8c02a15 	stw	r3,168(sp)
1000f4e0:	000e3bc0 	call	1000e3bc <__sprint_r.part.0>
1000f4e4:	d8c02a17 	ldw	r3,168(sp)
1000f4e8:	103f311e 	bne	r2,zero,1000f1b0 <__alt_data_end+0xf800f1b0>
1000f4ec:	d9001b17 	ldw	r4,108(sp)
1000f4f0:	d8801c17 	ldw	r2,112(sp)
1000f4f4:	d811883a 	mov	r8,sp
1000f4f8:	21400044 	addi	r5,r4,1
1000f4fc:	003ef406 	br	1000f0d0 <__alt_data_end+0xf800f0d0>
1000f500:	1000bd1e 	bne	r2,zero,1000f7f8 <___vfiprintf_internal_r+0x1328>
1000f504:	01400044 	movi	r5,1
1000f508:	0009883a 	mov	r4,zero
1000f50c:	d811883a 	mov	r8,sp
1000f510:	003ef106 	br	1000f0d8 <__alt_data_end+0xf800f0d8>
1000f514:	d9402017 	ldw	r5,128(sp)
1000f518:	d9002117 	ldw	r4,132(sp)
1000f51c:	d9801a04 	addi	r6,sp,104
1000f520:	000e3bc0 	call	1000e3bc <__sprint_r.part.0>
1000f524:	103f221e 	bne	r2,zero,1000f1b0 <__alt_data_end+0xf800f1b0>
1000f528:	d9401b17 	ldw	r5,108(sp)
1000f52c:	d8801c17 	ldw	r2,112(sp)
1000f530:	d811883a 	mov	r8,sp
1000f534:	29400044 	addi	r5,r5,1
1000f538:	003d6206 	br	1000eac4 <__alt_data_end+0xf800eac4>
1000f53c:	01440074 	movhi	r5,4097
1000f540:	295a3b04 	addi	r5,r5,26860
1000f544:	d9402615 	stw	r5,152(sp)
1000f548:	d8c02215 	stw	r3,136(sp)
1000f54c:	1023883a 	mov	r17,r2
1000f550:	9d04b03a 	or	r2,r19,r20
1000f554:	103fa51e 	bne	r2,zero,1000f3ec <__alt_data_end+0xf800f3ec>
1000f558:	002b883a 	mov	r21,zero
1000f55c:	00800084 	movi	r2,2
1000f560:	003e4a06 	br	1000ee8c <__alt_data_end+0xf800ee8c>
1000f564:	01440074 	movhi	r5,4097
1000f568:	295a3b04 	addi	r5,r5,26860
1000f56c:	002b883a 	mov	r21,zero
1000f570:	d9402615 	stw	r5,152(sp)
1000f574:	003f9e06 	br	1000f3f0 <__alt_data_end+0xf800f3f0>
1000f578:	d9402217 	ldw	r5,136(sp)
1000f57c:	d8001d85 	stb	zero,118(sp)
1000f580:	0029883a 	mov	r20,zero
1000f584:	28800104 	addi	r2,r5,4
1000f588:	2cc00017 	ldw	r19,0(r5)
1000f58c:	803e3a16 	blt	r16,zero,1000ee78 <__alt_data_end+0xf800ee78>
1000f590:	00ffdfc4 	movi	r3,-129
1000f594:	d8802215 	stw	r2,136(sp)
1000f598:	88e2703a 	and	r17,r17,r3
1000f59c:	002b883a 	mov	r21,zero
1000f5a0:	983e9b26 	beq	r19,zero,1000f010 <__alt_data_end+0xf800f010>
1000f5a4:	00800244 	movi	r2,9
1000f5a8:	14fdc936 	bltu	r2,r19,1000ecd0 <__alt_data_end+0xf800ecd0>
1000f5ac:	003e9a06 	br	1000f018 <__alt_data_end+0xf800f018>
1000f5b0:	00800c04 	movi	r2,48
1000f5b4:	d8c01d45 	stb	r3,117(sp)
1000f5b8:	d8801d05 	stb	r2,116(sp)
1000f5bc:	d8001d85 	stb	zero,118(sp)
1000f5c0:	88c00094 	ori	r3,r17,2
1000f5c4:	80009c16 	blt	r16,zero,1000f838 <___vfiprintf_internal_r+0x1368>
1000f5c8:	00bfdfc4 	movi	r2,-129
1000f5cc:	88a2703a 	and	r17,r17,r2
1000f5d0:	8c400094 	ori	r17,r17,2
1000f5d4:	002b883a 	mov	r21,zero
1000f5d8:	003f8506 	br	1000f3f0 <__alt_data_end+0xf800f3f0>
1000f5dc:	b029883a 	mov	r20,r22
1000f5e0:	003c0b06 	br	1000e610 <__alt_data_end+0xf800e610>
1000f5e4:	04e7c83a 	sub	r19,zero,r19
1000f5e8:	05400b44 	movi	r21,45
1000f5ec:	9804c03a 	cmpne	r2,r19,zero
1000f5f0:	0529c83a 	sub	r20,zero,r20
1000f5f4:	dd401d85 	stb	r21,118(sp)
1000f5f8:	a0a9c83a 	sub	r20,r20,r2
1000f5fc:	80009716 	blt	r16,zero,1000f85c <___vfiprintf_internal_r+0x138c>
1000f600:	00bfdfc4 	movi	r2,-129
1000f604:	88a2703a 	and	r17,r17,r2
1000f608:	003db006 	br	1000eccc <__alt_data_end+0xf800eccc>
1000f60c:	b0c00007 	ldb	r3,0(r22)
1000f610:	003c0c06 	br	1000e644 <__alt_data_end+0xf800e644>
1000f614:	8880100c 	andi	r2,r17,64
1000f618:	d8001d85 	stb	zero,118(sp)
1000f61c:	1000461e 	bne	r2,zero,1000f738 <___vfiprintf_internal_r+0x1268>
1000f620:	d9002217 	ldw	r4,136(sp)
1000f624:	0029883a 	mov	r20,zero
1000f628:	20800104 	addi	r2,r4,4
1000f62c:	24c00017 	ldw	r19,0(r4)
1000f630:	803df80e 	bge	r16,zero,1000ee14 <__alt_data_end+0xf800ee14>
1000f634:	9d06b03a 	or	r3,r19,r20
1000f638:	d8802215 	stw	r2,136(sp)
1000f63c:	183d5e1e 	bne	r3,zero,1000ebb8 <__alt_data_end+0xf800ebb8>
1000f640:	002b883a 	mov	r21,zero
1000f644:	0005883a 	mov	r2,zero
1000f648:	003e1006 	br	1000ee8c <__alt_data_end+0xf800ee8c>
1000f64c:	8880040c 	andi	r2,r17,16
1000f650:	1000321e 	bne	r2,zero,1000f71c <___vfiprintf_internal_r+0x124c>
1000f654:	8c40100c 	andi	r17,r17,64
1000f658:	88008d26 	beq	r17,zero,1000f890 <___vfiprintf_internal_r+0x13c0>
1000f65c:	d9402217 	ldw	r5,136(sp)
1000f660:	d8c02417 	ldw	r3,144(sp)
1000f664:	28800017 	ldw	r2,0(r5)
1000f668:	29400104 	addi	r5,r5,4
1000f66c:	d9402215 	stw	r5,136(sp)
1000f670:	10c0000d 	sth	r3,0(r2)
1000f674:	003bca06 	br	1000e5a0 <__alt_data_end+0xf800e5a0>
1000f678:	8880100c 	andi	r2,r17,64
1000f67c:	10003a26 	beq	r2,zero,1000f768 <___vfiprintf_internal_r+0x1298>
1000f680:	d8802217 	ldw	r2,136(sp)
1000f684:	14c0000f 	ldh	r19,0(r2)
1000f688:	10800104 	addi	r2,r2,4
1000f68c:	d8802215 	stw	r2,136(sp)
1000f690:	9829d7fa 	srai	r20,r19,31
1000f694:	a005883a 	mov	r2,r20
1000f698:	003d8506 	br	1000ecb0 <__alt_data_end+0xf800ecb0>
1000f69c:	8880100c 	andi	r2,r17,64
1000f6a0:	10002b26 	beq	r2,zero,1000f750 <___vfiprintf_internal_r+0x1280>
1000f6a4:	d8802217 	ldw	r2,136(sp)
1000f6a8:	0029883a 	mov	r20,zero
1000f6ac:	14c0000b 	ldhu	r19,0(r2)
1000f6b0:	10800104 	addi	r2,r2,4
1000f6b4:	d8802215 	stw	r2,136(sp)
1000f6b8:	003d5d06 	br	1000ec30 <__alt_data_end+0xf800ec30>
1000f6bc:	d9402017 	ldw	r5,128(sp)
1000f6c0:	d9002117 	ldw	r4,132(sp)
1000f6c4:	d9801a04 	addi	r6,sp,104
1000f6c8:	d8c02a15 	stw	r3,168(sp)
1000f6cc:	d9c02b15 	stw	r7,172(sp)
1000f6d0:	000e3bc0 	call	1000e3bc <__sprint_r.part.0>
1000f6d4:	d8c02a17 	ldw	r3,168(sp)
1000f6d8:	d9c02b17 	ldw	r7,172(sp)
1000f6dc:	103eb41e 	bne	r2,zero,1000f1b0 <__alt_data_end+0xf800f1b0>
1000f6e0:	d9001b17 	ldw	r4,108(sp)
1000f6e4:	d8801c17 	ldw	r2,112(sp)
1000f6e8:	d811883a 	mov	r8,sp
1000f6ec:	21400044 	addi	r5,r4,1
1000f6f0:	003e6706 	br	1000f090 <__alt_data_end+0xf800f090>
1000f6f4:	00bfffc4 	movi	r2,-1
1000f6f8:	003c4a06 	br	1000e824 <__alt_data_end+0xf800e824>
1000f6fc:	9805883a 	mov	r2,r19
1000f700:	003ee806 	br	1000f2a4 <__alt_data_end+0xf800f2a4>
1000f704:	d8c02217 	ldw	r3,136(sp)
1000f708:	0029883a 	mov	r20,zero
1000f70c:	18800104 	addi	r2,r3,4
1000f710:	1cc0000b 	ldhu	r19,0(r3)
1000f714:	803f9e0e 	bge	r16,zero,1000f590 <__alt_data_end+0xf800f590>
1000f718:	003dd706 	br	1000ee78 <__alt_data_end+0xf800ee78>
1000f71c:	d8c02217 	ldw	r3,136(sp)
1000f720:	d9002417 	ldw	r4,144(sp)
1000f724:	18800017 	ldw	r2,0(r3)
1000f728:	18c00104 	addi	r3,r3,4
1000f72c:	d8c02215 	stw	r3,136(sp)
1000f730:	11000015 	stw	r4,0(r2)
1000f734:	003b9a06 	br	1000e5a0 <__alt_data_end+0xf800e5a0>
1000f738:	d8c02217 	ldw	r3,136(sp)
1000f73c:	0029883a 	mov	r20,zero
1000f740:	18800104 	addi	r2,r3,4
1000f744:	1cc0000b 	ldhu	r19,0(r3)
1000f748:	803db20e 	bge	r16,zero,1000ee14 <__alt_data_end+0xf800ee14>
1000f74c:	003fb906 	br	1000f634 <__alt_data_end+0xf800f634>
1000f750:	d9002217 	ldw	r4,136(sp)
1000f754:	0029883a 	mov	r20,zero
1000f758:	24c00017 	ldw	r19,0(r4)
1000f75c:	21000104 	addi	r4,r4,4
1000f760:	d9002215 	stw	r4,136(sp)
1000f764:	003d3206 	br	1000ec30 <__alt_data_end+0xf800ec30>
1000f768:	d8c02217 	ldw	r3,136(sp)
1000f76c:	1cc00017 	ldw	r19,0(r3)
1000f770:	18c00104 	addi	r3,r3,4
1000f774:	d8c02215 	stw	r3,136(sp)
1000f778:	9829d7fa 	srai	r20,r19,31
1000f77c:	a005883a 	mov	r2,r20
1000f780:	003d4b06 	br	1000ecb0 <__alt_data_end+0xf800ecb0>
1000f784:	0009883a 	mov	r4,zero
1000f788:	01400044 	movi	r5,1
1000f78c:	d811883a 	mov	r8,sp
1000f790:	003e4f06 	br	1000f0d0 <__alt_data_end+0xf800f0d0>
1000f794:	d8c02215 	stw	r3,136(sp)
1000f798:	002b883a 	mov	r21,zero
1000f79c:	003db806 	br	1000ee80 <__alt_data_end+0xf800ee80>
1000f7a0:	d811883a 	mov	r8,sp
1000f7a4:	003e9606 	br	1000f200 <__alt_data_end+0xf800f200>
1000f7a8:	01040074 	movhi	r4,4097
1000f7ac:	211a9c04 	addi	r4,r4,27248
1000f7b0:	d9002315 	stw	r4,140(sp)
1000f7b4:	003e6306 	br	1000f144 <__alt_data_end+0xf800f144>
1000f7b8:	b0c00043 	ldbu	r3,1(r22)
1000f7bc:	8c400814 	ori	r17,r17,32
1000f7c0:	b5800044 	addi	r22,r22,1
1000f7c4:	18c03fcc 	andi	r3,r3,255
1000f7c8:	18c0201c 	xori	r3,r3,128
1000f7cc:	18ffe004 	addi	r3,r3,-128
1000f7d0:	003b9c06 	br	1000e644 <__alt_data_end+0xf800e644>
1000f7d4:	b809883a 	mov	r4,r23
1000f7d8:	da002a15 	stw	r8,168(sp)
1000f7dc:	0006c400 	call	10006c40 <strlen>
1000f7e0:	1029883a 	mov	r20,r2
1000f7e4:	dd401d83 	ldbu	r21,118(sp)
1000f7e8:	df002215 	stw	fp,136(sp)
1000f7ec:	0021883a 	mov	r16,zero
1000f7f0:	da002a17 	ldw	r8,168(sp)
1000f7f4:	003c3906 	br	1000e8dc <__alt_data_end+0xf800e8dc>
1000f7f8:	d9402017 	ldw	r5,128(sp)
1000f7fc:	d9002117 	ldw	r4,132(sp)
1000f800:	d9801a04 	addi	r6,sp,104
1000f804:	000e3bc0 	call	1000e3bc <__sprint_r.part.0>
1000f808:	103e691e 	bne	r2,zero,1000f1b0 <__alt_data_end+0xf800f1b0>
1000f80c:	d9001b17 	ldw	r4,108(sp)
1000f810:	d8801c17 	ldw	r2,112(sp)
1000f814:	d811883a 	mov	r8,sp
1000f818:	21400044 	addi	r5,r4,1
1000f81c:	003e2e06 	br	1000f0d8 <__alt_data_end+0xf800f0d8>
1000f820:	01040074 	movhi	r4,4097
1000f824:	211aa004 	addi	r4,r4,27264
1000f828:	d9002315 	stw	r4,140(sp)
1000f82c:	d9001b17 	ldw	r4,108(sp)
1000f830:	21000044 	addi	r4,r4,1
1000f834:	003c5e06 	br	1000e9b0 <__alt_data_end+0xf800e9b0>
1000f838:	002b883a 	mov	r21,zero
1000f83c:	00800084 	movi	r2,2
1000f840:	10803fcc 	andi	r2,r2,255
1000f844:	01000044 	movi	r4,1
1000f848:	11002b26 	beq	r2,r4,1000f8f8 <___vfiprintf_internal_r+0x1428>
1000f84c:	01000084 	movi	r4,2
1000f850:	11002b1e 	bne	r2,r4,1000f900 <___vfiprintf_internal_r+0x1430>
1000f854:	1823883a 	mov	r17,r3
1000f858:	003ee506 	br	1000f3f0 <__alt_data_end+0xf800f3f0>
1000f85c:	8807883a 	mov	r3,r17
1000f860:	00800044 	movi	r2,1
1000f864:	003ff606 	br	1000f840 <__alt_data_end+0xf800f840>
1000f868:	00800184 	movi	r2,6
1000f86c:	1400012e 	bgeu	r2,r16,1000f874 <___vfiprintf_internal_r+0x13a4>
1000f870:	1021883a 	mov	r16,r2
1000f874:	8029883a 	mov	r20,r16
1000f878:	8027883a 	mov	r19,r16
1000f87c:	80002216 	blt	r16,zero,1000f908 <___vfiprintf_internal_r+0x1438>
1000f880:	05c40074 	movhi	r23,4097
1000f884:	df002215 	stw	fp,136(sp)
1000f888:	bdda4004 	addi	r23,r23,26880
1000f88c:	003cfb06 	br	1000ec7c <__alt_data_end+0xf800ec7c>
1000f890:	d9002217 	ldw	r4,136(sp)
1000f894:	d9402417 	ldw	r5,144(sp)
1000f898:	20800017 	ldw	r2,0(r4)
1000f89c:	21000104 	addi	r4,r4,4
1000f8a0:	d9002215 	stw	r4,136(sp)
1000f8a4:	11400015 	stw	r5,0(r2)
1000f8a8:	003b3d06 	br	1000e5a0 <__alt_data_end+0xf800e5a0>
1000f8ac:	01440074 	movhi	r5,4097
1000f8b0:	295aa004 	addi	r5,r5,27264
1000f8b4:	d9402315 	stw	r5,140(sp)
1000f8b8:	d9401b17 	ldw	r5,108(sp)
1000f8bc:	29400044 	addi	r5,r5,1
1000f8c0:	003e6d06 	br	1000f278 <__alt_data_end+0xf800f278>
1000f8c4:	8029883a 	mov	r20,r16
1000f8c8:	dd401d83 	ldbu	r21,118(sp)
1000f8cc:	df002215 	stw	fp,136(sp)
1000f8d0:	0021883a 	mov	r16,zero
1000f8d4:	003c0106 	br	1000e8dc <__alt_data_end+0xf800e8dc>
1000f8d8:	00c40074 	movhi	r3,4097
1000f8dc:	18da9c04 	addi	r3,r3,27248
1000f8e0:	d8c02315 	stw	r3,140(sp)
1000f8e4:	280d883a 	mov	r6,r5
1000f8e8:	003c6906 	br	1000ea90 <__alt_data_end+0xf800ea90>
1000f8ec:	802d883a 	mov	r22,r16
1000f8f0:	0021883a 	mov	r16,zero
1000f8f4:	003b5406 	br	1000e648 <__alt_data_end+0xf800e648>
1000f8f8:	1823883a 	mov	r17,r3
1000f8fc:	003cf306 	br	1000eccc <__alt_data_end+0xf800eccc>
1000f900:	1823883a 	mov	r17,r3
1000f904:	003cad06 	br	1000ebbc <__alt_data_end+0xf800ebbc>
1000f908:	0027883a 	mov	r19,zero
1000f90c:	003fdc06 	br	1000f880 <__alt_data_end+0xf800f880>
1000f910:	d9402217 	ldw	r5,136(sp)
1000f914:	8005883a 	mov	r2,r16
1000f918:	b0c00043 	ldbu	r3,1(r22)
1000f91c:	2c000017 	ldw	r16,0(r5)
1000f920:	29000104 	addi	r4,r5,4
1000f924:	d9002215 	stw	r4,136(sp)
1000f928:	102d883a 	mov	r22,r2
1000f92c:	803fa50e 	bge	r16,zero,1000f7c4 <__alt_data_end+0xf800f7c4>
1000f930:	18c03fcc 	andi	r3,r3,255
1000f934:	18c0201c 	xori	r3,r3,128
1000f938:	043fffc4 	movi	r16,-1
1000f93c:	18ffe004 	addi	r3,r3,-128
1000f940:	003b4006 	br	1000e644 <__alt_data_end+0xf800e644>
1000f944:	d9402303 	ldbu	r5,140(sp)
1000f948:	d9401d85 	stb	r5,118(sp)
1000f94c:	003cae06 	br	1000ec08 <__alt_data_end+0xf800ec08>
1000f950:	d8c02303 	ldbu	r3,140(sp)
1000f954:	d8c01d85 	stb	r3,118(sp)
1000f958:	003d1406 	br	1000edac <__alt_data_end+0xf800edac>
1000f95c:	d8c02303 	ldbu	r3,140(sp)
1000f960:	d8c01d85 	stb	r3,118(sp)
1000f964:	003cca06 	br	1000ec90 <__alt_data_end+0xf800ec90>
1000f968:	8880004c 	andi	r2,r17,1
1000f96c:	002b883a 	mov	r21,zero
1000f970:	10000526 	beq	r2,zero,1000f988 <___vfiprintf_internal_r+0x14b8>
1000f974:	00800c04 	movi	r2,48
1000f978:	d88019c5 	stb	r2,103(sp)
1000f97c:	dd002817 	ldw	r20,160(sp)
1000f980:	ddc019c4 	addi	r23,sp,103
1000f984:	003bd506 	br	1000e8dc <__alt_data_end+0xf800e8dc>
1000f988:	0029883a 	mov	r20,zero
1000f98c:	ddc01a04 	addi	r23,sp,104
1000f990:	003bd206 	br	1000e8dc <__alt_data_end+0xf800e8dc>
1000f994:	d9002303 	ldbu	r4,140(sp)
1000f998:	d9001d85 	stb	r4,118(sp)
1000f99c:	003da606 	br	1000f038 <__alt_data_end+0xf800f038>
1000f9a0:	d8c02303 	ldbu	r3,140(sp)
1000f9a4:	d8c01d85 	stb	r3,118(sp)
1000f9a8:	003c7606 	br	1000eb84 <__alt_data_end+0xf800eb84>
1000f9ac:	d8c02303 	ldbu	r3,140(sp)
1000f9b0:	d8c01d85 	stb	r3,118(sp)
1000f9b4:	003c6506 	br	1000eb4c <__alt_data_end+0xf800eb4c>
1000f9b8:	d9002303 	ldbu	r4,140(sp)
1000f9bc:	d9001d85 	stb	r4,118(sp)
1000f9c0:	003d3d06 	br	1000eeb8 <__alt_data_end+0xf800eeb8>
1000f9c4:	d8c02303 	ldbu	r3,140(sp)
1000f9c8:	d8c01d85 	stb	r3,118(sp)
1000f9cc:	003d1d06 	br	1000ee44 <__alt_data_end+0xf800ee44>
1000f9d0:	d8c02303 	ldbu	r3,140(sp)
1000f9d4:	d8c01d85 	stb	r3,118(sp)
1000f9d8:	003d0306 	br	1000ede8 <__alt_data_end+0xf800ede8>

1000f9dc <__vfiprintf_internal>:
1000f9dc:	008400b4 	movhi	r2,4098
1000f9e0:	1095f304 	addi	r2,r2,22476
1000f9e4:	300f883a 	mov	r7,r6
1000f9e8:	280d883a 	mov	r6,r5
1000f9ec:	200b883a 	mov	r5,r4
1000f9f0:	11000017 	ldw	r4,0(r2)
1000f9f4:	000e4d01 	jmpi	1000e4d0 <___vfiprintf_internal_r>

1000f9f8 <__sbprintf>:
1000f9f8:	2880030b 	ldhu	r2,12(r5)
1000f9fc:	2ac01917 	ldw	r11,100(r5)
1000fa00:	2a80038b 	ldhu	r10,14(r5)
1000fa04:	2a400717 	ldw	r9,28(r5)
1000fa08:	2a000917 	ldw	r8,36(r5)
1000fa0c:	defee204 	addi	sp,sp,-1144
1000fa10:	00c10004 	movi	r3,1024
1000fa14:	dc011a15 	stw	r16,1128(sp)
1000fa18:	10bfff4c 	andi	r2,r2,65533
1000fa1c:	2821883a 	mov	r16,r5
1000fa20:	d8cb883a 	add	r5,sp,r3
1000fa24:	dc811c15 	stw	r18,1136(sp)
1000fa28:	dc411b15 	stw	r17,1132(sp)
1000fa2c:	dfc11d15 	stw	ra,1140(sp)
1000fa30:	2025883a 	mov	r18,r4
1000fa34:	d881030d 	sth	r2,1036(sp)
1000fa38:	dac11915 	stw	r11,1124(sp)
1000fa3c:	da81038d 	sth	r10,1038(sp)
1000fa40:	da410715 	stw	r9,1052(sp)
1000fa44:	da010915 	stw	r8,1060(sp)
1000fa48:	dec10015 	stw	sp,1024(sp)
1000fa4c:	dec10415 	stw	sp,1040(sp)
1000fa50:	d8c10215 	stw	r3,1032(sp)
1000fa54:	d8c10515 	stw	r3,1044(sp)
1000fa58:	d8010615 	stw	zero,1048(sp)
1000fa5c:	000e4d00 	call	1000e4d0 <___vfiprintf_internal_r>
1000fa60:	1023883a 	mov	r17,r2
1000fa64:	10000416 	blt	r2,zero,1000fa78 <__sbprintf+0x80>
1000fa68:	d9410004 	addi	r5,sp,1024
1000fa6c:	9009883a 	mov	r4,r18
1000fa70:	000acac0 	call	1000acac <_fflush_r>
1000fa74:	10000d1e 	bne	r2,zero,1000faac <__sbprintf+0xb4>
1000fa78:	d881030b 	ldhu	r2,1036(sp)
1000fa7c:	1080100c 	andi	r2,r2,64
1000fa80:	10000326 	beq	r2,zero,1000fa90 <__sbprintf+0x98>
1000fa84:	8080030b 	ldhu	r2,12(r16)
1000fa88:	10801014 	ori	r2,r2,64
1000fa8c:	8080030d 	sth	r2,12(r16)
1000fa90:	8805883a 	mov	r2,r17
1000fa94:	dfc11d17 	ldw	ra,1140(sp)
1000fa98:	dc811c17 	ldw	r18,1136(sp)
1000fa9c:	dc411b17 	ldw	r17,1132(sp)
1000faa0:	dc011a17 	ldw	r16,1128(sp)
1000faa4:	dec11e04 	addi	sp,sp,1144
1000faa8:	f800283a 	ret
1000faac:	047fffc4 	movi	r17,-1
1000fab0:	003ff106 	br	1000fa78 <__alt_data_end+0xf800fa78>

1000fab4 <_write_r>:
1000fab4:	defffd04 	addi	sp,sp,-12
1000fab8:	2805883a 	mov	r2,r5
1000fabc:	dc000015 	stw	r16,0(sp)
1000fac0:	040400f4 	movhi	r16,4099
1000fac4:	dc400115 	stw	r17,4(sp)
1000fac8:	300b883a 	mov	r5,r6
1000facc:	84112304 	addi	r16,r16,17548
1000fad0:	2023883a 	mov	r17,r4
1000fad4:	380d883a 	mov	r6,r7
1000fad8:	1009883a 	mov	r4,r2
1000fadc:	dfc00215 	stw	ra,8(sp)
1000fae0:	80000015 	stw	zero,0(r16)
1000fae4:	00141280 	call	10014128 <write>
1000fae8:	00ffffc4 	movi	r3,-1
1000faec:	10c00526 	beq	r2,r3,1000fb04 <_write_r+0x50>
1000faf0:	dfc00217 	ldw	ra,8(sp)
1000faf4:	dc400117 	ldw	r17,4(sp)
1000faf8:	dc000017 	ldw	r16,0(sp)
1000fafc:	dec00304 	addi	sp,sp,12
1000fb00:	f800283a 	ret
1000fb04:	80c00017 	ldw	r3,0(r16)
1000fb08:	183ff926 	beq	r3,zero,1000faf0 <__alt_data_end+0xf800faf0>
1000fb0c:	88c00015 	stw	r3,0(r17)
1000fb10:	003ff706 	br	1000faf0 <__alt_data_end+0xf800faf0>

1000fb14 <_close_r>:
1000fb14:	defffd04 	addi	sp,sp,-12
1000fb18:	dc000015 	stw	r16,0(sp)
1000fb1c:	040400f4 	movhi	r16,4099
1000fb20:	dc400115 	stw	r17,4(sp)
1000fb24:	84112304 	addi	r16,r16,17548
1000fb28:	2023883a 	mov	r17,r4
1000fb2c:	2809883a 	mov	r4,r5
1000fb30:	dfc00215 	stw	ra,8(sp)
1000fb34:	80000015 	stw	zero,0(r16)
1000fb38:	00138a00 	call	100138a0 <close>
1000fb3c:	00ffffc4 	movi	r3,-1
1000fb40:	10c00526 	beq	r2,r3,1000fb58 <_close_r+0x44>
1000fb44:	dfc00217 	ldw	ra,8(sp)
1000fb48:	dc400117 	ldw	r17,4(sp)
1000fb4c:	dc000017 	ldw	r16,0(sp)
1000fb50:	dec00304 	addi	sp,sp,12
1000fb54:	f800283a 	ret
1000fb58:	80c00017 	ldw	r3,0(r16)
1000fb5c:	183ff926 	beq	r3,zero,1000fb44 <__alt_data_end+0xf800fb44>
1000fb60:	88c00015 	stw	r3,0(r17)
1000fb64:	003ff706 	br	1000fb44 <__alt_data_end+0xf800fb44>

1000fb68 <_calloc_r>:
1000fb68:	defffe04 	addi	sp,sp,-8
1000fb6c:	2805883a 	mov	r2,r5
1000fb70:	dc000015 	stw	r16,0(sp)
1000fb74:	300b883a 	mov	r5,r6
1000fb78:	2021883a 	mov	r16,r4
1000fb7c:	1009883a 	mov	r4,r2
1000fb80:	dfc00115 	stw	ra,4(sp)
1000fb84:	0006ad80 	call	10006ad8 <__mulsi3>
1000fb88:	100b883a 	mov	r5,r2
1000fb8c:	8009883a 	mov	r4,r16
1000fb90:	000be040 	call	1000be04 <_malloc_r>
1000fb94:	10002926 	beq	r2,zero,1000fc3c <_calloc_r+0xd4>
1000fb98:	11bfff17 	ldw	r6,-4(r2)
1000fb9c:	1021883a 	mov	r16,r2
1000fba0:	00bfff04 	movi	r2,-4
1000fba4:	308c703a 	and	r6,r6,r2
1000fba8:	00c00904 	movi	r3,36
1000fbac:	308d883a 	add	r6,r6,r2
1000fbb0:	19801636 	bltu	r3,r6,1000fc0c <_calloc_r+0xa4>
1000fbb4:	008004c4 	movi	r2,19
1000fbb8:	11800b2e 	bgeu	r2,r6,1000fbe8 <_calloc_r+0x80>
1000fbbc:	80000015 	stw	zero,0(r16)
1000fbc0:	80000115 	stw	zero,4(r16)
1000fbc4:	008006c4 	movi	r2,27
1000fbc8:	11801a2e 	bgeu	r2,r6,1000fc34 <_calloc_r+0xcc>
1000fbcc:	80000215 	stw	zero,8(r16)
1000fbd0:	80000315 	stw	zero,12(r16)
1000fbd4:	30c0151e 	bne	r6,r3,1000fc2c <_calloc_r+0xc4>
1000fbd8:	80000415 	stw	zero,16(r16)
1000fbdc:	80800604 	addi	r2,r16,24
1000fbe0:	80000515 	stw	zero,20(r16)
1000fbe4:	00000106 	br	1000fbec <_calloc_r+0x84>
1000fbe8:	8005883a 	mov	r2,r16
1000fbec:	10000015 	stw	zero,0(r2)
1000fbf0:	10000115 	stw	zero,4(r2)
1000fbf4:	10000215 	stw	zero,8(r2)
1000fbf8:	8005883a 	mov	r2,r16
1000fbfc:	dfc00117 	ldw	ra,4(sp)
1000fc00:	dc000017 	ldw	r16,0(sp)
1000fc04:	dec00204 	addi	sp,sp,8
1000fc08:	f800283a 	ret
1000fc0c:	000b883a 	mov	r5,zero
1000fc10:	8009883a 	mov	r4,r16
1000fc14:	000c9980 	call	1000c998 <memset>
1000fc18:	8005883a 	mov	r2,r16
1000fc1c:	dfc00117 	ldw	ra,4(sp)
1000fc20:	dc000017 	ldw	r16,0(sp)
1000fc24:	dec00204 	addi	sp,sp,8
1000fc28:	f800283a 	ret
1000fc2c:	80800404 	addi	r2,r16,16
1000fc30:	003fee06 	br	1000fbec <__alt_data_end+0xf800fbec>
1000fc34:	80800204 	addi	r2,r16,8
1000fc38:	003fec06 	br	1000fbec <__alt_data_end+0xf800fbec>
1000fc3c:	0005883a 	mov	r2,zero
1000fc40:	003fee06 	br	1000fbfc <__alt_data_end+0xf800fbfc>

1000fc44 <_fclose_r>:
1000fc44:	28003926 	beq	r5,zero,1000fd2c <_fclose_r+0xe8>
1000fc48:	defffc04 	addi	sp,sp,-16
1000fc4c:	dc400115 	stw	r17,4(sp)
1000fc50:	dc000015 	stw	r16,0(sp)
1000fc54:	dfc00315 	stw	ra,12(sp)
1000fc58:	dc800215 	stw	r18,8(sp)
1000fc5c:	2023883a 	mov	r17,r4
1000fc60:	2821883a 	mov	r16,r5
1000fc64:	20000226 	beq	r4,zero,1000fc70 <_fclose_r+0x2c>
1000fc68:	20800e17 	ldw	r2,56(r4)
1000fc6c:	10002726 	beq	r2,zero,1000fd0c <_fclose_r+0xc8>
1000fc70:	8080030f 	ldh	r2,12(r16)
1000fc74:	1000071e 	bne	r2,zero,1000fc94 <_fclose_r+0x50>
1000fc78:	0005883a 	mov	r2,zero
1000fc7c:	dfc00317 	ldw	ra,12(sp)
1000fc80:	dc800217 	ldw	r18,8(sp)
1000fc84:	dc400117 	ldw	r17,4(sp)
1000fc88:	dc000017 	ldw	r16,0(sp)
1000fc8c:	dec00404 	addi	sp,sp,16
1000fc90:	f800283a 	ret
1000fc94:	800b883a 	mov	r5,r16
1000fc98:	8809883a 	mov	r4,r17
1000fc9c:	000aa900 	call	1000aa90 <__sflush_r>
1000fca0:	1025883a 	mov	r18,r2
1000fca4:	80800b17 	ldw	r2,44(r16)
1000fca8:	10000426 	beq	r2,zero,1000fcbc <_fclose_r+0x78>
1000fcac:	81400717 	ldw	r5,28(r16)
1000fcb0:	8809883a 	mov	r4,r17
1000fcb4:	103ee83a 	callr	r2
1000fcb8:	10001616 	blt	r2,zero,1000fd14 <_fclose_r+0xd0>
1000fcbc:	8080030b 	ldhu	r2,12(r16)
1000fcc0:	1080200c 	andi	r2,r2,128
1000fcc4:	1000151e 	bne	r2,zero,1000fd1c <_fclose_r+0xd8>
1000fcc8:	81400c17 	ldw	r5,48(r16)
1000fccc:	28000526 	beq	r5,zero,1000fce4 <_fclose_r+0xa0>
1000fcd0:	80801004 	addi	r2,r16,64
1000fcd4:	28800226 	beq	r5,r2,1000fce0 <_fclose_r+0x9c>
1000fcd8:	8809883a 	mov	r4,r17
1000fcdc:	000b20c0 	call	1000b20c <_free_r>
1000fce0:	80000c15 	stw	zero,48(r16)
1000fce4:	81401117 	ldw	r5,68(r16)
1000fce8:	28000326 	beq	r5,zero,1000fcf8 <_fclose_r+0xb4>
1000fcec:	8809883a 	mov	r4,r17
1000fcf0:	000b20c0 	call	1000b20c <_free_r>
1000fcf4:	80001115 	stw	zero,68(r16)
1000fcf8:	000b0a80 	call	1000b0a8 <__sfp_lock_acquire>
1000fcfc:	8000030d 	sth	zero,12(r16)
1000fd00:	000b0ac0 	call	1000b0ac <__sfp_lock_release>
1000fd04:	9005883a 	mov	r2,r18
1000fd08:	003fdc06 	br	1000fc7c <__alt_data_end+0xf800fc7c>
1000fd0c:	000b0980 	call	1000b098 <__sinit>
1000fd10:	003fd706 	br	1000fc70 <__alt_data_end+0xf800fc70>
1000fd14:	04bfffc4 	movi	r18,-1
1000fd18:	003fe806 	br	1000fcbc <__alt_data_end+0xf800fcbc>
1000fd1c:	81400417 	ldw	r5,16(r16)
1000fd20:	8809883a 	mov	r4,r17
1000fd24:	000b20c0 	call	1000b20c <_free_r>
1000fd28:	003fe706 	br	1000fcc8 <__alt_data_end+0xf800fcc8>
1000fd2c:	0005883a 	mov	r2,zero
1000fd30:	f800283a 	ret

1000fd34 <fclose>:
1000fd34:	008400b4 	movhi	r2,4098
1000fd38:	1095f304 	addi	r2,r2,22476
1000fd3c:	200b883a 	mov	r5,r4
1000fd40:	11000017 	ldw	r4,0(r2)
1000fd44:	000fc441 	jmpi	1000fc44 <_fclose_r>

1000fd48 <__fputwc>:
1000fd48:	defff804 	addi	sp,sp,-32
1000fd4c:	dcc00415 	stw	r19,16(sp)
1000fd50:	dc800315 	stw	r18,12(sp)
1000fd54:	dc000115 	stw	r16,4(sp)
1000fd58:	dfc00715 	stw	ra,28(sp)
1000fd5c:	dd400615 	stw	r21,24(sp)
1000fd60:	dd000515 	stw	r20,20(sp)
1000fd64:	dc400215 	stw	r17,8(sp)
1000fd68:	2027883a 	mov	r19,r4
1000fd6c:	2825883a 	mov	r18,r5
1000fd70:	3021883a 	mov	r16,r6
1000fd74:	000bbf40 	call	1000bbf4 <__locale_mb_cur_max>
1000fd78:	00c00044 	movi	r3,1
1000fd7c:	10c03e26 	beq	r2,r3,1000fe78 <__fputwc+0x130>
1000fd80:	81c01704 	addi	r7,r16,92
1000fd84:	900d883a 	mov	r6,r18
1000fd88:	d80b883a 	mov	r5,sp
1000fd8c:	9809883a 	mov	r4,r19
1000fd90:	00102180 	call	10010218 <_wcrtomb_r>
1000fd94:	1029883a 	mov	r20,r2
1000fd98:	00bfffc4 	movi	r2,-1
1000fd9c:	a0802026 	beq	r20,r2,1000fe20 <__fputwc+0xd8>
1000fda0:	d9400003 	ldbu	r5,0(sp)
1000fda4:	a0001c26 	beq	r20,zero,1000fe18 <__fputwc+0xd0>
1000fda8:	0023883a 	mov	r17,zero
1000fdac:	05400284 	movi	r21,10
1000fdb0:	00000906 	br	1000fdd8 <__fputwc+0x90>
1000fdb4:	80800017 	ldw	r2,0(r16)
1000fdb8:	11400005 	stb	r5,0(r2)
1000fdbc:	80c00017 	ldw	r3,0(r16)
1000fdc0:	18c00044 	addi	r3,r3,1
1000fdc4:	80c00015 	stw	r3,0(r16)
1000fdc8:	8c400044 	addi	r17,r17,1
1000fdcc:	dc45883a 	add	r2,sp,r17
1000fdd0:	8d00112e 	bgeu	r17,r20,1000fe18 <__fputwc+0xd0>
1000fdd4:	11400003 	ldbu	r5,0(r2)
1000fdd8:	80c00217 	ldw	r3,8(r16)
1000fddc:	18ffffc4 	addi	r3,r3,-1
1000fde0:	80c00215 	stw	r3,8(r16)
1000fde4:	183ff30e 	bge	r3,zero,1000fdb4 <__alt_data_end+0xf800fdb4>
1000fde8:	80800617 	ldw	r2,24(r16)
1000fdec:	18801916 	blt	r3,r2,1000fe54 <__fputwc+0x10c>
1000fdf0:	80800017 	ldw	r2,0(r16)
1000fdf4:	11400005 	stb	r5,0(r2)
1000fdf8:	80800017 	ldw	r2,0(r16)
1000fdfc:	10c00003 	ldbu	r3,0(r2)
1000fe00:	10800044 	addi	r2,r2,1
1000fe04:	1d402326 	beq	r3,r21,1000fe94 <__fputwc+0x14c>
1000fe08:	80800015 	stw	r2,0(r16)
1000fe0c:	8c400044 	addi	r17,r17,1
1000fe10:	dc45883a 	add	r2,sp,r17
1000fe14:	8d3fef36 	bltu	r17,r20,1000fdd4 <__alt_data_end+0xf800fdd4>
1000fe18:	9005883a 	mov	r2,r18
1000fe1c:	00000406 	br	1000fe30 <__fputwc+0xe8>
1000fe20:	80c0030b 	ldhu	r3,12(r16)
1000fe24:	a005883a 	mov	r2,r20
1000fe28:	18c01014 	ori	r3,r3,64
1000fe2c:	80c0030d 	sth	r3,12(r16)
1000fe30:	dfc00717 	ldw	ra,28(sp)
1000fe34:	dd400617 	ldw	r21,24(sp)
1000fe38:	dd000517 	ldw	r20,20(sp)
1000fe3c:	dcc00417 	ldw	r19,16(sp)
1000fe40:	dc800317 	ldw	r18,12(sp)
1000fe44:	dc400217 	ldw	r17,8(sp)
1000fe48:	dc000117 	ldw	r16,4(sp)
1000fe4c:	dec00804 	addi	sp,sp,32
1000fe50:	f800283a 	ret
1000fe54:	800d883a 	mov	r6,r16
1000fe58:	29403fcc 	andi	r5,r5,255
1000fe5c:	9809883a 	mov	r4,r19
1000fe60:	00100c00 	call	100100c0 <__swbuf_r>
1000fe64:	10bfffe0 	cmpeqi	r2,r2,-1
1000fe68:	10803fcc 	andi	r2,r2,255
1000fe6c:	103fd626 	beq	r2,zero,1000fdc8 <__alt_data_end+0xf800fdc8>
1000fe70:	00bfffc4 	movi	r2,-1
1000fe74:	003fee06 	br	1000fe30 <__alt_data_end+0xf800fe30>
1000fe78:	90ffffc4 	addi	r3,r18,-1
1000fe7c:	01003f84 	movi	r4,254
1000fe80:	20ffbf36 	bltu	r4,r3,1000fd80 <__alt_data_end+0xf800fd80>
1000fe84:	900b883a 	mov	r5,r18
1000fe88:	dc800005 	stb	r18,0(sp)
1000fe8c:	1029883a 	mov	r20,r2
1000fe90:	003fc506 	br	1000fda8 <__alt_data_end+0xf800fda8>
1000fe94:	800d883a 	mov	r6,r16
1000fe98:	a80b883a 	mov	r5,r21
1000fe9c:	9809883a 	mov	r4,r19
1000fea0:	00100c00 	call	100100c0 <__swbuf_r>
1000fea4:	10bfffe0 	cmpeqi	r2,r2,-1
1000fea8:	003fef06 	br	1000fe68 <__alt_data_end+0xf800fe68>

1000feac <_fputwc_r>:
1000feac:	3080030b 	ldhu	r2,12(r6)
1000feb0:	10c8000c 	andi	r3,r2,8192
1000feb4:	1800051e 	bne	r3,zero,1000fecc <_fputwc_r+0x20>
1000feb8:	30c01917 	ldw	r3,100(r6)
1000febc:	10880014 	ori	r2,r2,8192
1000fec0:	3080030d 	sth	r2,12(r6)
1000fec4:	18880014 	ori	r2,r3,8192
1000fec8:	30801915 	stw	r2,100(r6)
1000fecc:	000fd481 	jmpi	1000fd48 <__fputwc>

1000fed0 <fputwc>:
1000fed0:	008400b4 	movhi	r2,4098
1000fed4:	defffc04 	addi	sp,sp,-16
1000fed8:	1095f304 	addi	r2,r2,22476
1000fedc:	dc000115 	stw	r16,4(sp)
1000fee0:	14000017 	ldw	r16,0(r2)
1000fee4:	dc400215 	stw	r17,8(sp)
1000fee8:	dfc00315 	stw	ra,12(sp)
1000feec:	2023883a 	mov	r17,r4
1000fef0:	80000226 	beq	r16,zero,1000fefc <fputwc+0x2c>
1000fef4:	80800e17 	ldw	r2,56(r16)
1000fef8:	10001026 	beq	r2,zero,1000ff3c <fputwc+0x6c>
1000fefc:	2880030b 	ldhu	r2,12(r5)
1000ff00:	10c8000c 	andi	r3,r2,8192
1000ff04:	1800051e 	bne	r3,zero,1000ff1c <fputwc+0x4c>
1000ff08:	28c01917 	ldw	r3,100(r5)
1000ff0c:	10880014 	ori	r2,r2,8192
1000ff10:	2880030d 	sth	r2,12(r5)
1000ff14:	18880014 	ori	r2,r3,8192
1000ff18:	28801915 	stw	r2,100(r5)
1000ff1c:	280d883a 	mov	r6,r5
1000ff20:	8009883a 	mov	r4,r16
1000ff24:	880b883a 	mov	r5,r17
1000ff28:	dfc00317 	ldw	ra,12(sp)
1000ff2c:	dc400217 	ldw	r17,8(sp)
1000ff30:	dc000117 	ldw	r16,4(sp)
1000ff34:	dec00404 	addi	sp,sp,16
1000ff38:	000fd481 	jmpi	1000fd48 <__fputwc>
1000ff3c:	8009883a 	mov	r4,r16
1000ff40:	d9400015 	stw	r5,0(sp)
1000ff44:	000b0980 	call	1000b098 <__sinit>
1000ff48:	d9400017 	ldw	r5,0(sp)
1000ff4c:	003feb06 	br	1000fefc <__alt_data_end+0xf800fefc>

1000ff50 <_fstat_r>:
1000ff50:	defffd04 	addi	sp,sp,-12
1000ff54:	2805883a 	mov	r2,r5
1000ff58:	dc000015 	stw	r16,0(sp)
1000ff5c:	040400f4 	movhi	r16,4099
1000ff60:	dc400115 	stw	r17,4(sp)
1000ff64:	84112304 	addi	r16,r16,17548
1000ff68:	2023883a 	mov	r17,r4
1000ff6c:	300b883a 	mov	r5,r6
1000ff70:	1009883a 	mov	r4,r2
1000ff74:	dfc00215 	stw	ra,8(sp)
1000ff78:	80000015 	stw	zero,0(r16)
1000ff7c:	00139e00 	call	100139e0 <fstat>
1000ff80:	00ffffc4 	movi	r3,-1
1000ff84:	10c00526 	beq	r2,r3,1000ff9c <_fstat_r+0x4c>
1000ff88:	dfc00217 	ldw	ra,8(sp)
1000ff8c:	dc400117 	ldw	r17,4(sp)
1000ff90:	dc000017 	ldw	r16,0(sp)
1000ff94:	dec00304 	addi	sp,sp,12
1000ff98:	f800283a 	ret
1000ff9c:	80c00017 	ldw	r3,0(r16)
1000ffa0:	183ff926 	beq	r3,zero,1000ff88 <__alt_data_end+0xf800ff88>
1000ffa4:	88c00015 	stw	r3,0(r17)
1000ffa8:	003ff706 	br	1000ff88 <__alt_data_end+0xf800ff88>

1000ffac <_isatty_r>:
1000ffac:	defffd04 	addi	sp,sp,-12
1000ffb0:	dc000015 	stw	r16,0(sp)
1000ffb4:	040400f4 	movhi	r16,4099
1000ffb8:	dc400115 	stw	r17,4(sp)
1000ffbc:	84112304 	addi	r16,r16,17548
1000ffc0:	2023883a 	mov	r17,r4
1000ffc4:	2809883a 	mov	r4,r5
1000ffc8:	dfc00215 	stw	ra,8(sp)
1000ffcc:	80000015 	stw	zero,0(r16)
1000ffd0:	0013ad40 	call	10013ad4 <isatty>
1000ffd4:	00ffffc4 	movi	r3,-1
1000ffd8:	10c00526 	beq	r2,r3,1000fff0 <_isatty_r+0x44>
1000ffdc:	dfc00217 	ldw	ra,8(sp)
1000ffe0:	dc400117 	ldw	r17,4(sp)
1000ffe4:	dc000017 	ldw	r16,0(sp)
1000ffe8:	dec00304 	addi	sp,sp,12
1000ffec:	f800283a 	ret
1000fff0:	80c00017 	ldw	r3,0(r16)
1000fff4:	183ff926 	beq	r3,zero,1000ffdc <__alt_data_end+0xf800ffdc>
1000fff8:	88c00015 	stw	r3,0(r17)
1000fffc:	003ff706 	br	1000ffdc <__alt_data_end+0xf800ffdc>

10010000 <_lseek_r>:
10010000:	defffd04 	addi	sp,sp,-12
10010004:	2805883a 	mov	r2,r5
10010008:	dc000015 	stw	r16,0(sp)
1001000c:	040400f4 	movhi	r16,4099
10010010:	dc400115 	stw	r17,4(sp)
10010014:	300b883a 	mov	r5,r6
10010018:	84112304 	addi	r16,r16,17548
1001001c:	2023883a 	mov	r17,r4
10010020:	380d883a 	mov	r6,r7
10010024:	1009883a 	mov	r4,r2
10010028:	dfc00215 	stw	ra,8(sp)
1001002c:	80000015 	stw	zero,0(r16)
10010030:	0013ca80 	call	10013ca8 <lseek>
10010034:	00ffffc4 	movi	r3,-1
10010038:	10c00526 	beq	r2,r3,10010050 <_lseek_r+0x50>
1001003c:	dfc00217 	ldw	ra,8(sp)
10010040:	dc400117 	ldw	r17,4(sp)
10010044:	dc000017 	ldw	r16,0(sp)
10010048:	dec00304 	addi	sp,sp,12
1001004c:	f800283a 	ret
10010050:	80c00017 	ldw	r3,0(r16)
10010054:	183ff926 	beq	r3,zero,1001003c <__alt_data_end+0xf801003c>
10010058:	88c00015 	stw	r3,0(r17)
1001005c:	003ff706 	br	1001003c <__alt_data_end+0xf801003c>

10010060 <_read_r>:
10010060:	defffd04 	addi	sp,sp,-12
10010064:	2805883a 	mov	r2,r5
10010068:	dc000015 	stw	r16,0(sp)
1001006c:	040400f4 	movhi	r16,4099
10010070:	dc400115 	stw	r17,4(sp)
10010074:	300b883a 	mov	r5,r6
10010078:	84112304 	addi	r16,r16,17548
1001007c:	2023883a 	mov	r17,r4
10010080:	380d883a 	mov	r6,r7
10010084:	1009883a 	mov	r4,r2
10010088:	dfc00215 	stw	ra,8(sp)
1001008c:	80000015 	stw	zero,0(r16)
10010090:	0013e840 	call	10013e84 <read>
10010094:	00ffffc4 	movi	r3,-1
10010098:	10c00526 	beq	r2,r3,100100b0 <_read_r+0x50>
1001009c:	dfc00217 	ldw	ra,8(sp)
100100a0:	dc400117 	ldw	r17,4(sp)
100100a4:	dc000017 	ldw	r16,0(sp)
100100a8:	dec00304 	addi	sp,sp,12
100100ac:	f800283a 	ret
100100b0:	80c00017 	ldw	r3,0(r16)
100100b4:	183ff926 	beq	r3,zero,1001009c <__alt_data_end+0xf801009c>
100100b8:	88c00015 	stw	r3,0(r17)
100100bc:	003ff706 	br	1001009c <__alt_data_end+0xf801009c>

100100c0 <__swbuf_r>:
100100c0:	defffb04 	addi	sp,sp,-20
100100c4:	dcc00315 	stw	r19,12(sp)
100100c8:	dc800215 	stw	r18,8(sp)
100100cc:	dc000015 	stw	r16,0(sp)
100100d0:	dfc00415 	stw	ra,16(sp)
100100d4:	dc400115 	stw	r17,4(sp)
100100d8:	2025883a 	mov	r18,r4
100100dc:	2827883a 	mov	r19,r5
100100e0:	3021883a 	mov	r16,r6
100100e4:	20000226 	beq	r4,zero,100100f0 <__swbuf_r+0x30>
100100e8:	20800e17 	ldw	r2,56(r4)
100100ec:	10004226 	beq	r2,zero,100101f8 <__swbuf_r+0x138>
100100f0:	80800617 	ldw	r2,24(r16)
100100f4:	8100030b 	ldhu	r4,12(r16)
100100f8:	80800215 	stw	r2,8(r16)
100100fc:	2080020c 	andi	r2,r4,8
10010100:	10003626 	beq	r2,zero,100101dc <__swbuf_r+0x11c>
10010104:	80c00417 	ldw	r3,16(r16)
10010108:	18003426 	beq	r3,zero,100101dc <__swbuf_r+0x11c>
1001010c:	2088000c 	andi	r2,r4,8192
10010110:	9c403fcc 	andi	r17,r19,255
10010114:	10001a26 	beq	r2,zero,10010180 <__swbuf_r+0xc0>
10010118:	80800017 	ldw	r2,0(r16)
1001011c:	81000517 	ldw	r4,20(r16)
10010120:	10c7c83a 	sub	r3,r2,r3
10010124:	1900200e 	bge	r3,r4,100101a8 <__swbuf_r+0xe8>
10010128:	18c00044 	addi	r3,r3,1
1001012c:	81000217 	ldw	r4,8(r16)
10010130:	11400044 	addi	r5,r2,1
10010134:	81400015 	stw	r5,0(r16)
10010138:	213fffc4 	addi	r4,r4,-1
1001013c:	81000215 	stw	r4,8(r16)
10010140:	14c00005 	stb	r19,0(r2)
10010144:	80800517 	ldw	r2,20(r16)
10010148:	10c01e26 	beq	r2,r3,100101c4 <__swbuf_r+0x104>
1001014c:	8080030b 	ldhu	r2,12(r16)
10010150:	1080004c 	andi	r2,r2,1
10010154:	10000226 	beq	r2,zero,10010160 <__swbuf_r+0xa0>
10010158:	00800284 	movi	r2,10
1001015c:	88801926 	beq	r17,r2,100101c4 <__swbuf_r+0x104>
10010160:	8805883a 	mov	r2,r17
10010164:	dfc00417 	ldw	ra,16(sp)
10010168:	dcc00317 	ldw	r19,12(sp)
1001016c:	dc800217 	ldw	r18,8(sp)
10010170:	dc400117 	ldw	r17,4(sp)
10010174:	dc000017 	ldw	r16,0(sp)
10010178:	dec00504 	addi	sp,sp,20
1001017c:	f800283a 	ret
10010180:	81401917 	ldw	r5,100(r16)
10010184:	00b7ffc4 	movi	r2,-8193
10010188:	21080014 	ori	r4,r4,8192
1001018c:	2884703a 	and	r2,r5,r2
10010190:	80801915 	stw	r2,100(r16)
10010194:	80800017 	ldw	r2,0(r16)
10010198:	8100030d 	sth	r4,12(r16)
1001019c:	81000517 	ldw	r4,20(r16)
100101a0:	10c7c83a 	sub	r3,r2,r3
100101a4:	193fe016 	blt	r3,r4,10010128 <__alt_data_end+0xf8010128>
100101a8:	800b883a 	mov	r5,r16
100101ac:	9009883a 	mov	r4,r18
100101b0:	000acac0 	call	1000acac <_fflush_r>
100101b4:	1000071e 	bne	r2,zero,100101d4 <__swbuf_r+0x114>
100101b8:	80800017 	ldw	r2,0(r16)
100101bc:	00c00044 	movi	r3,1
100101c0:	003fda06 	br	1001012c <__alt_data_end+0xf801012c>
100101c4:	800b883a 	mov	r5,r16
100101c8:	9009883a 	mov	r4,r18
100101cc:	000acac0 	call	1000acac <_fflush_r>
100101d0:	103fe326 	beq	r2,zero,10010160 <__alt_data_end+0xf8010160>
100101d4:	00bfffc4 	movi	r2,-1
100101d8:	003fe206 	br	10010164 <__alt_data_end+0xf8010164>
100101dc:	800b883a 	mov	r5,r16
100101e0:	9009883a 	mov	r4,r18
100101e4:	000908c0 	call	1000908c <__swsetup_r>
100101e8:	103ffa1e 	bne	r2,zero,100101d4 <__alt_data_end+0xf80101d4>
100101ec:	8100030b 	ldhu	r4,12(r16)
100101f0:	80c00417 	ldw	r3,16(r16)
100101f4:	003fc506 	br	1001010c <__alt_data_end+0xf801010c>
100101f8:	000b0980 	call	1000b098 <__sinit>
100101fc:	003fbc06 	br	100100f0 <__alt_data_end+0xf80100f0>

10010200 <__swbuf>:
10010200:	008400b4 	movhi	r2,4098
10010204:	1095f304 	addi	r2,r2,22476
10010208:	280d883a 	mov	r6,r5
1001020c:	200b883a 	mov	r5,r4
10010210:	11000017 	ldw	r4,0(r2)
10010214:	00100c01 	jmpi	100100c0 <__swbuf_r>

10010218 <_wcrtomb_r>:
10010218:	defff604 	addi	sp,sp,-40
1001021c:	008400b4 	movhi	r2,4098
10010220:	dc800815 	stw	r18,32(sp)
10010224:	dc400715 	stw	r17,28(sp)
10010228:	dc000615 	stw	r16,24(sp)
1001022c:	1095f704 	addi	r2,r2,22492
10010230:	dfc00915 	stw	ra,36(sp)
10010234:	2021883a 	mov	r16,r4
10010238:	3823883a 	mov	r17,r7
1001023c:	14800017 	ldw	r18,0(r2)
10010240:	28001426 	beq	r5,zero,10010294 <_wcrtomb_r+0x7c>
10010244:	d9400415 	stw	r5,16(sp)
10010248:	d9800515 	stw	r6,20(sp)
1001024c:	000bbe80 	call	1000bbe8 <__locale_charset>
10010250:	d9800517 	ldw	r6,20(sp)
10010254:	d9400417 	ldw	r5,16(sp)
10010258:	100f883a 	mov	r7,r2
1001025c:	dc400015 	stw	r17,0(sp)
10010260:	8009883a 	mov	r4,r16
10010264:	903ee83a 	callr	r18
10010268:	00ffffc4 	movi	r3,-1
1001026c:	10c0031e 	bne	r2,r3,1001027c <_wcrtomb_r+0x64>
10010270:	88000015 	stw	zero,0(r17)
10010274:	00c02284 	movi	r3,138
10010278:	80c00015 	stw	r3,0(r16)
1001027c:	dfc00917 	ldw	ra,36(sp)
10010280:	dc800817 	ldw	r18,32(sp)
10010284:	dc400717 	ldw	r17,28(sp)
10010288:	dc000617 	ldw	r16,24(sp)
1001028c:	dec00a04 	addi	sp,sp,40
10010290:	f800283a 	ret
10010294:	000bbe80 	call	1000bbe8 <__locale_charset>
10010298:	100f883a 	mov	r7,r2
1001029c:	dc400015 	stw	r17,0(sp)
100102a0:	000d883a 	mov	r6,zero
100102a4:	d9400104 	addi	r5,sp,4
100102a8:	8009883a 	mov	r4,r16
100102ac:	903ee83a 	callr	r18
100102b0:	003fed06 	br	10010268 <__alt_data_end+0xf8010268>

100102b4 <wcrtomb>:
100102b4:	defff604 	addi	sp,sp,-40
100102b8:	008400b4 	movhi	r2,4098
100102bc:	dc800615 	stw	r18,24(sp)
100102c0:	dc400515 	stw	r17,20(sp)
100102c4:	1095f304 	addi	r2,r2,22476
100102c8:	dfc00915 	stw	ra,36(sp)
100102cc:	dd000815 	stw	r20,32(sp)
100102d0:	dcc00715 	stw	r19,28(sp)
100102d4:	dc000415 	stw	r16,16(sp)
100102d8:	3025883a 	mov	r18,r6
100102dc:	14400017 	ldw	r17,0(r2)
100102e0:	20001926 	beq	r4,zero,10010348 <wcrtomb+0x94>
100102e4:	008400b4 	movhi	r2,4098
100102e8:	1095f704 	addi	r2,r2,22492
100102ec:	15000017 	ldw	r20,0(r2)
100102f0:	2021883a 	mov	r16,r4
100102f4:	2827883a 	mov	r19,r5
100102f8:	000bbe80 	call	1000bbe8 <__locale_charset>
100102fc:	100f883a 	mov	r7,r2
10010300:	dc800015 	stw	r18,0(sp)
10010304:	980d883a 	mov	r6,r19
10010308:	800b883a 	mov	r5,r16
1001030c:	8809883a 	mov	r4,r17
10010310:	a03ee83a 	callr	r20
10010314:	00ffffc4 	movi	r3,-1
10010318:	10c0031e 	bne	r2,r3,10010328 <wcrtomb+0x74>
1001031c:	90000015 	stw	zero,0(r18)
10010320:	00c02284 	movi	r3,138
10010324:	88c00015 	stw	r3,0(r17)
10010328:	dfc00917 	ldw	ra,36(sp)
1001032c:	dd000817 	ldw	r20,32(sp)
10010330:	dcc00717 	ldw	r19,28(sp)
10010334:	dc800617 	ldw	r18,24(sp)
10010338:	dc400517 	ldw	r17,20(sp)
1001033c:	dc000417 	ldw	r16,16(sp)
10010340:	dec00a04 	addi	sp,sp,40
10010344:	f800283a 	ret
10010348:	008400b4 	movhi	r2,4098
1001034c:	1095f704 	addi	r2,r2,22492
10010350:	14000017 	ldw	r16,0(r2)
10010354:	000bbe80 	call	1000bbe8 <__locale_charset>
10010358:	100f883a 	mov	r7,r2
1001035c:	dc800015 	stw	r18,0(sp)
10010360:	000d883a 	mov	r6,zero
10010364:	d9400104 	addi	r5,sp,4
10010368:	8809883a 	mov	r4,r17
1001036c:	803ee83a 	callr	r16
10010370:	003fe806 	br	10010314 <__alt_data_end+0xf8010314>

10010374 <__ascii_wctomb>:
10010374:	28000526 	beq	r5,zero,1001038c <__ascii_wctomb+0x18>
10010378:	00803fc4 	movi	r2,255
1001037c:	11800536 	bltu	r2,r6,10010394 <__ascii_wctomb+0x20>
10010380:	29800005 	stb	r6,0(r5)
10010384:	00800044 	movi	r2,1
10010388:	f800283a 	ret
1001038c:	0005883a 	mov	r2,zero
10010390:	f800283a 	ret
10010394:	00802284 	movi	r2,138
10010398:	20800015 	stw	r2,0(r4)
1001039c:	00bfffc4 	movi	r2,-1
100103a0:	f800283a 	ret

100103a4 <_wctomb_r>:
100103a4:	008400b4 	movhi	r2,4098
100103a8:	defff904 	addi	sp,sp,-28
100103ac:	1095f704 	addi	r2,r2,22492
100103b0:	dfc00615 	stw	ra,24(sp)
100103b4:	dc400515 	stw	r17,20(sp)
100103b8:	dc000415 	stw	r16,16(sp)
100103bc:	3823883a 	mov	r17,r7
100103c0:	14000017 	ldw	r16,0(r2)
100103c4:	d9000115 	stw	r4,4(sp)
100103c8:	d9400215 	stw	r5,8(sp)
100103cc:	d9800315 	stw	r6,12(sp)
100103d0:	000bbe80 	call	1000bbe8 <__locale_charset>
100103d4:	d9800317 	ldw	r6,12(sp)
100103d8:	d9400217 	ldw	r5,8(sp)
100103dc:	d9000117 	ldw	r4,4(sp)
100103e0:	100f883a 	mov	r7,r2
100103e4:	dc400015 	stw	r17,0(sp)
100103e8:	803ee83a 	callr	r16
100103ec:	dfc00617 	ldw	ra,24(sp)
100103f0:	dc400517 	ldw	r17,20(sp)
100103f4:	dc000417 	ldw	r16,16(sp)
100103f8:	dec00704 	addi	sp,sp,28
100103fc:	f800283a 	ret

10010400 <__udivdi3>:
10010400:	defff404 	addi	sp,sp,-48
10010404:	dcc00515 	stw	r19,20(sp)
10010408:	dc000215 	stw	r16,8(sp)
1001040c:	dfc00b15 	stw	ra,44(sp)
10010410:	df000a15 	stw	fp,40(sp)
10010414:	ddc00915 	stw	r23,36(sp)
10010418:	dd800815 	stw	r22,32(sp)
1001041c:	dd400715 	stw	r21,28(sp)
10010420:	dd000615 	stw	r20,24(sp)
10010424:	dc800415 	stw	r18,16(sp)
10010428:	dc400315 	stw	r17,12(sp)
1001042c:	2027883a 	mov	r19,r4
10010430:	2821883a 	mov	r16,r5
10010434:	3800461e 	bne	r7,zero,10010550 <__udivdi3+0x150>
10010438:	3023883a 	mov	r17,r6
1001043c:	2025883a 	mov	r18,r4
10010440:	2980572e 	bgeu	r5,r6,100105a0 <__udivdi3+0x1a0>
10010444:	00bfffd4 	movui	r2,65535
10010448:	282d883a 	mov	r22,r5
1001044c:	1180b236 	bltu	r2,r6,10010718 <__udivdi3+0x318>
10010450:	00803fc4 	movi	r2,255
10010454:	1185803a 	cmpltu	r2,r2,r6
10010458:	100490fa 	slli	r2,r2,3
1001045c:	3086d83a 	srl	r3,r6,r2
10010460:	01040074 	movhi	r4,4097
10010464:	211aa404 	addi	r4,r4,27280
10010468:	20c7883a 	add	r3,r4,r3
1001046c:	18c00003 	ldbu	r3,0(r3)
10010470:	1885883a 	add	r2,r3,r2
10010474:	00c00804 	movi	r3,32
10010478:	1887c83a 	sub	r3,r3,r2
1001047c:	18000526 	beq	r3,zero,10010494 <__udivdi3+0x94>
10010480:	80e0983a 	sll	r16,r16,r3
10010484:	9884d83a 	srl	r2,r19,r2
10010488:	30e2983a 	sll	r17,r6,r3
1001048c:	98e4983a 	sll	r18,r19,r3
10010490:	142cb03a 	or	r22,r2,r16
10010494:	882ad43a 	srli	r21,r17,16
10010498:	b009883a 	mov	r4,r22
1001049c:	8d3fffcc 	andi	r20,r17,65535
100104a0:	a80b883a 	mov	r5,r21
100104a4:	0006a800 	call	10006a80 <__umodsi3>
100104a8:	b009883a 	mov	r4,r22
100104ac:	a80b883a 	mov	r5,r21
100104b0:	1027883a 	mov	r19,r2
100104b4:	0006a1c0 	call	10006a1c <__udivsi3>
100104b8:	100b883a 	mov	r5,r2
100104bc:	a009883a 	mov	r4,r20
100104c0:	102d883a 	mov	r22,r2
100104c4:	0006ad80 	call	10006ad8 <__mulsi3>
100104c8:	9826943a 	slli	r19,r19,16
100104cc:	9006d43a 	srli	r3,r18,16
100104d0:	1cc6b03a 	or	r3,r3,r19
100104d4:	1880052e 	bgeu	r3,r2,100104ec <__udivdi3+0xec>
100104d8:	1c47883a 	add	r3,r3,r17
100104dc:	b13fffc4 	addi	r4,r22,-1
100104e0:	1c400136 	bltu	r3,r17,100104e8 <__udivdi3+0xe8>
100104e4:	18814236 	bltu	r3,r2,100109f0 <__udivdi3+0x5f0>
100104e8:	202d883a 	mov	r22,r4
100104ec:	18a1c83a 	sub	r16,r3,r2
100104f0:	8009883a 	mov	r4,r16
100104f4:	a80b883a 	mov	r5,r21
100104f8:	0006a800 	call	10006a80 <__umodsi3>
100104fc:	1027883a 	mov	r19,r2
10010500:	8009883a 	mov	r4,r16
10010504:	a80b883a 	mov	r5,r21
10010508:	9826943a 	slli	r19,r19,16
1001050c:	0006a1c0 	call	10006a1c <__udivsi3>
10010510:	100b883a 	mov	r5,r2
10010514:	a009883a 	mov	r4,r20
10010518:	94bfffcc 	andi	r18,r18,65535
1001051c:	1021883a 	mov	r16,r2
10010520:	94e4b03a 	or	r18,r18,r19
10010524:	0006ad80 	call	10006ad8 <__mulsi3>
10010528:	9080052e 	bgeu	r18,r2,10010540 <__udivdi3+0x140>
1001052c:	8ca5883a 	add	r18,r17,r18
10010530:	80ffffc4 	addi	r3,r16,-1
10010534:	94410c36 	bltu	r18,r17,10010968 <__udivdi3+0x568>
10010538:	90810b2e 	bgeu	r18,r2,10010968 <__udivdi3+0x568>
1001053c:	843fff84 	addi	r16,r16,-2
10010540:	b004943a 	slli	r2,r22,16
10010544:	0007883a 	mov	r3,zero
10010548:	1404b03a 	or	r2,r2,r16
1001054c:	00005e06 	br	100106c8 <__udivdi3+0x2c8>
10010550:	29c05b36 	bltu	r5,r7,100106c0 <__udivdi3+0x2c0>
10010554:	00bfffd4 	movui	r2,65535
10010558:	11c0672e 	bgeu	r2,r7,100106f8 <__udivdi3+0x2f8>
1001055c:	00804034 	movhi	r2,256
10010560:	10bfffc4 	addi	r2,r2,-1
10010564:	11c10a36 	bltu	r2,r7,10010990 <__udivdi3+0x590>
10010568:	00800404 	movi	r2,16
1001056c:	3886d83a 	srl	r3,r7,r2
10010570:	01040074 	movhi	r4,4097
10010574:	211aa404 	addi	r4,r4,27280
10010578:	20c7883a 	add	r3,r4,r3
1001057c:	18c00003 	ldbu	r3,0(r3)
10010580:	05c00804 	movi	r23,32
10010584:	1885883a 	add	r2,r3,r2
10010588:	b8afc83a 	sub	r23,r23,r2
1001058c:	b800671e 	bne	r23,zero,1001072c <__udivdi3+0x32c>
10010590:	3c010536 	bltu	r7,r16,100109a8 <__udivdi3+0x5a8>
10010594:	9985403a 	cmpgeu	r2,r19,r6
10010598:	0007883a 	mov	r3,zero
1001059c:	00004a06 	br	100106c8 <__udivdi3+0x2c8>
100105a0:	3000041e 	bne	r6,zero,100105b4 <__udivdi3+0x1b4>
100105a4:	000b883a 	mov	r5,zero
100105a8:	01000044 	movi	r4,1
100105ac:	0006a1c0 	call	10006a1c <__udivsi3>
100105b0:	1023883a 	mov	r17,r2
100105b4:	00bfffd4 	movui	r2,65535
100105b8:	1440532e 	bgeu	r2,r17,10010708 <__udivdi3+0x308>
100105bc:	00804034 	movhi	r2,256
100105c0:	10bfffc4 	addi	r2,r2,-1
100105c4:	1440f436 	bltu	r2,r17,10010998 <__udivdi3+0x598>
100105c8:	00800404 	movi	r2,16
100105cc:	8886d83a 	srl	r3,r17,r2
100105d0:	01040074 	movhi	r4,4097
100105d4:	211aa404 	addi	r4,r4,27280
100105d8:	20c7883a 	add	r3,r4,r3
100105dc:	18c00003 	ldbu	r3,0(r3)
100105e0:	1885883a 	add	r2,r3,r2
100105e4:	00c00804 	movi	r3,32
100105e8:	1887c83a 	sub	r3,r3,r2
100105ec:	1800a51e 	bne	r3,zero,10010884 <__udivdi3+0x484>
100105f0:	882ad43a 	srli	r21,r17,16
100105f4:	8461c83a 	sub	r16,r16,r17
100105f8:	8d3fffcc 	andi	r20,r17,65535
100105fc:	00c00044 	movi	r3,1
10010600:	a80b883a 	mov	r5,r21
10010604:	8009883a 	mov	r4,r16
10010608:	d8c00115 	stw	r3,4(sp)
1001060c:	0006a800 	call	10006a80 <__umodsi3>
10010610:	a80b883a 	mov	r5,r21
10010614:	8009883a 	mov	r4,r16
10010618:	1027883a 	mov	r19,r2
1001061c:	0006a1c0 	call	10006a1c <__udivsi3>
10010620:	a00b883a 	mov	r5,r20
10010624:	1009883a 	mov	r4,r2
10010628:	102d883a 	mov	r22,r2
1001062c:	0006ad80 	call	10006ad8 <__mulsi3>
10010630:	9826943a 	slli	r19,r19,16
10010634:	900ed43a 	srli	r7,r18,16
10010638:	d8c00117 	ldw	r3,4(sp)
1001063c:	3cceb03a 	or	r7,r7,r19
10010640:	3880052e 	bgeu	r7,r2,10010658 <__udivdi3+0x258>
10010644:	3c4f883a 	add	r7,r7,r17
10010648:	b13fffc4 	addi	r4,r22,-1
1001064c:	3c400136 	bltu	r7,r17,10010654 <__udivdi3+0x254>
10010650:	3880e436 	bltu	r7,r2,100109e4 <__udivdi3+0x5e4>
10010654:	202d883a 	mov	r22,r4
10010658:	38a1c83a 	sub	r16,r7,r2
1001065c:	8009883a 	mov	r4,r16
10010660:	a80b883a 	mov	r5,r21
10010664:	d8c00115 	stw	r3,4(sp)
10010668:	0006a800 	call	10006a80 <__umodsi3>
1001066c:	1027883a 	mov	r19,r2
10010670:	8009883a 	mov	r4,r16
10010674:	a80b883a 	mov	r5,r21
10010678:	9826943a 	slli	r19,r19,16
1001067c:	0006a1c0 	call	10006a1c <__udivsi3>
10010680:	a00b883a 	mov	r5,r20
10010684:	1009883a 	mov	r4,r2
10010688:	94bfffcc 	andi	r18,r18,65535
1001068c:	1021883a 	mov	r16,r2
10010690:	94e4b03a 	or	r18,r18,r19
10010694:	0006ad80 	call	10006ad8 <__mulsi3>
10010698:	d8c00117 	ldw	r3,4(sp)
1001069c:	9080052e 	bgeu	r18,r2,100106b4 <__udivdi3+0x2b4>
100106a0:	8ca5883a 	add	r18,r17,r18
100106a4:	813fffc4 	addi	r4,r16,-1
100106a8:	9440ad36 	bltu	r18,r17,10010960 <__udivdi3+0x560>
100106ac:	9080ac2e 	bgeu	r18,r2,10010960 <__udivdi3+0x560>
100106b0:	843fff84 	addi	r16,r16,-2
100106b4:	b004943a 	slli	r2,r22,16
100106b8:	1404b03a 	or	r2,r2,r16
100106bc:	00000206 	br	100106c8 <__udivdi3+0x2c8>
100106c0:	0007883a 	mov	r3,zero
100106c4:	0005883a 	mov	r2,zero
100106c8:	dfc00b17 	ldw	ra,44(sp)
100106cc:	df000a17 	ldw	fp,40(sp)
100106d0:	ddc00917 	ldw	r23,36(sp)
100106d4:	dd800817 	ldw	r22,32(sp)
100106d8:	dd400717 	ldw	r21,28(sp)
100106dc:	dd000617 	ldw	r20,24(sp)
100106e0:	dcc00517 	ldw	r19,20(sp)
100106e4:	dc800417 	ldw	r18,16(sp)
100106e8:	dc400317 	ldw	r17,12(sp)
100106ec:	dc000217 	ldw	r16,8(sp)
100106f0:	dec00c04 	addi	sp,sp,48
100106f4:	f800283a 	ret
100106f8:	00803fc4 	movi	r2,255
100106fc:	11c5803a 	cmpltu	r2,r2,r7
10010700:	100490fa 	slli	r2,r2,3
10010704:	003f9906 	br	1001056c <__alt_data_end+0xf801056c>
10010708:	00803fc4 	movi	r2,255
1001070c:	1445803a 	cmpltu	r2,r2,r17
10010710:	100490fa 	slli	r2,r2,3
10010714:	003fad06 	br	100105cc <__alt_data_end+0xf80105cc>
10010718:	00804034 	movhi	r2,256
1001071c:	10bfffc4 	addi	r2,r2,-1
10010720:	11809f36 	bltu	r2,r6,100109a0 <__udivdi3+0x5a0>
10010724:	00800404 	movi	r2,16
10010728:	003f4c06 	br	1001045c <__alt_data_end+0xf801045c>
1001072c:	3dce983a 	sll	r7,r7,r23
10010730:	30b8d83a 	srl	fp,r6,r2
10010734:	80a2d83a 	srl	r17,r16,r2
10010738:	35cc983a 	sll	r6,r6,r23
1001073c:	3f38b03a 	or	fp,r7,fp
10010740:	e024d43a 	srli	r18,fp,16
10010744:	9884d83a 	srl	r2,r19,r2
10010748:	85e0983a 	sll	r16,r16,r23
1001074c:	8809883a 	mov	r4,r17
10010750:	900b883a 	mov	r5,r18
10010754:	d9800015 	stw	r6,0(sp)
10010758:	1420b03a 	or	r16,r2,r16
1001075c:	0006a800 	call	10006a80 <__umodsi3>
10010760:	900b883a 	mov	r5,r18
10010764:	8809883a 	mov	r4,r17
10010768:	1029883a 	mov	r20,r2
1001076c:	e5bfffcc 	andi	r22,fp,65535
10010770:	0006a1c0 	call	10006a1c <__udivsi3>
10010774:	100b883a 	mov	r5,r2
10010778:	b009883a 	mov	r4,r22
1001077c:	102b883a 	mov	r21,r2
10010780:	0006ad80 	call	10006ad8 <__mulsi3>
10010784:	a028943a 	slli	r20,r20,16
10010788:	8006d43a 	srli	r3,r16,16
1001078c:	1d06b03a 	or	r3,r3,r20
10010790:	1880042e 	bgeu	r3,r2,100107a4 <__udivdi3+0x3a4>
10010794:	1f07883a 	add	r3,r3,fp
10010798:	a93fffc4 	addi	r4,r21,-1
1001079c:	1f00892e 	bgeu	r3,fp,100109c4 <__udivdi3+0x5c4>
100107a0:	202b883a 	mov	r21,r4
100107a4:	18a3c83a 	sub	r17,r3,r2
100107a8:	8809883a 	mov	r4,r17
100107ac:	900b883a 	mov	r5,r18
100107b0:	0006a800 	call	10006a80 <__umodsi3>
100107b4:	1029883a 	mov	r20,r2
100107b8:	8809883a 	mov	r4,r17
100107bc:	900b883a 	mov	r5,r18
100107c0:	a028943a 	slli	r20,r20,16
100107c4:	0006a1c0 	call	10006a1c <__udivsi3>
100107c8:	100b883a 	mov	r5,r2
100107cc:	b009883a 	mov	r4,r22
100107d0:	843fffcc 	andi	r16,r16,65535
100107d4:	1023883a 	mov	r17,r2
100107d8:	8520b03a 	or	r16,r16,r20
100107dc:	0006ad80 	call	10006ad8 <__mulsi3>
100107e0:	8080042e 	bgeu	r16,r2,100107f4 <__udivdi3+0x3f4>
100107e4:	8721883a 	add	r16,r16,fp
100107e8:	88ffffc4 	addi	r3,r17,-1
100107ec:	8700712e 	bgeu	r16,fp,100109b4 <__udivdi3+0x5b4>
100107f0:	1823883a 	mov	r17,r3
100107f4:	a80e943a 	slli	r7,r21,16
100107f8:	d8c00017 	ldw	r3,0(sp)
100107fc:	80a1c83a 	sub	r16,r16,r2
10010800:	3c64b03a 	or	r18,r7,r17
10010804:	1d3fffcc 	andi	r20,r3,65535
10010808:	9022d43a 	srli	r17,r18,16
1001080c:	95bfffcc 	andi	r22,r18,65535
10010810:	a00b883a 	mov	r5,r20
10010814:	b009883a 	mov	r4,r22
10010818:	182ad43a 	srli	r21,r3,16
1001081c:	0006ad80 	call	10006ad8 <__mulsi3>
10010820:	a00b883a 	mov	r5,r20
10010824:	8809883a 	mov	r4,r17
10010828:	1039883a 	mov	fp,r2
1001082c:	0006ad80 	call	10006ad8 <__mulsi3>
10010830:	8809883a 	mov	r4,r17
10010834:	a80b883a 	mov	r5,r21
10010838:	1029883a 	mov	r20,r2
1001083c:	0006ad80 	call	10006ad8 <__mulsi3>
10010840:	a80b883a 	mov	r5,r21
10010844:	b009883a 	mov	r4,r22
10010848:	1023883a 	mov	r17,r2
1001084c:	0006ad80 	call	10006ad8 <__mulsi3>
10010850:	e006d43a 	srli	r3,fp,16
10010854:	1505883a 	add	r2,r2,r20
10010858:	1887883a 	add	r3,r3,r2
1001085c:	1d00022e 	bgeu	r3,r20,10010868 <__udivdi3+0x468>
10010860:	00800074 	movhi	r2,1
10010864:	88a3883a 	add	r17,r17,r2
10010868:	1804d43a 	srli	r2,r3,16
1001086c:	1463883a 	add	r17,r2,r17
10010870:	84404436 	bltu	r16,r17,10010984 <__udivdi3+0x584>
10010874:	84403e26 	beq	r16,r17,10010970 <__udivdi3+0x570>
10010878:	9005883a 	mov	r2,r18
1001087c:	0007883a 	mov	r3,zero
10010880:	003f9106 	br	100106c8 <__alt_data_end+0xf80106c8>
10010884:	88e2983a 	sll	r17,r17,r3
10010888:	80aed83a 	srl	r23,r16,r2
1001088c:	80e0983a 	sll	r16,r16,r3
10010890:	882ad43a 	srli	r21,r17,16
10010894:	9884d83a 	srl	r2,r19,r2
10010898:	b809883a 	mov	r4,r23
1001089c:	a80b883a 	mov	r5,r21
100108a0:	98e4983a 	sll	r18,r19,r3
100108a4:	142cb03a 	or	r22,r2,r16
100108a8:	0006a800 	call	10006a80 <__umodsi3>
100108ac:	b809883a 	mov	r4,r23
100108b0:	a80b883a 	mov	r5,r21
100108b4:	1027883a 	mov	r19,r2
100108b8:	8d3fffcc 	andi	r20,r17,65535
100108bc:	0006a1c0 	call	10006a1c <__udivsi3>
100108c0:	a009883a 	mov	r4,r20
100108c4:	100b883a 	mov	r5,r2
100108c8:	102f883a 	mov	r23,r2
100108cc:	0006ad80 	call	10006ad8 <__mulsi3>
100108d0:	9826943a 	slli	r19,r19,16
100108d4:	b008d43a 	srli	r4,r22,16
100108d8:	24c8b03a 	or	r4,r4,r19
100108dc:	2080062e 	bgeu	r4,r2,100108f8 <__udivdi3+0x4f8>
100108e0:	2449883a 	add	r4,r4,r17
100108e4:	b8ffffc4 	addi	r3,r23,-1
100108e8:	24403c36 	bltu	r4,r17,100109dc <__udivdi3+0x5dc>
100108ec:	20803b2e 	bgeu	r4,r2,100109dc <__udivdi3+0x5dc>
100108f0:	bdffff84 	addi	r23,r23,-2
100108f4:	2449883a 	add	r4,r4,r17
100108f8:	20a1c83a 	sub	r16,r4,r2
100108fc:	a80b883a 	mov	r5,r21
10010900:	8009883a 	mov	r4,r16
10010904:	0006a800 	call	10006a80 <__umodsi3>
10010908:	a80b883a 	mov	r5,r21
1001090c:	8009883a 	mov	r4,r16
10010910:	1027883a 	mov	r19,r2
10010914:	0006a1c0 	call	10006a1c <__udivsi3>
10010918:	a009883a 	mov	r4,r20
1001091c:	100b883a 	mov	r5,r2
10010920:	9826943a 	slli	r19,r19,16
10010924:	1039883a 	mov	fp,r2
10010928:	0006ad80 	call	10006ad8 <__mulsi3>
1001092c:	b13fffcc 	andi	r4,r22,65535
10010930:	24c8b03a 	or	r4,r4,r19
10010934:	2080062e 	bgeu	r4,r2,10010950 <__udivdi3+0x550>
10010938:	2449883a 	add	r4,r4,r17
1001093c:	e0ffffc4 	addi	r3,fp,-1
10010940:	24402436 	bltu	r4,r17,100109d4 <__udivdi3+0x5d4>
10010944:	2080232e 	bgeu	r4,r2,100109d4 <__udivdi3+0x5d4>
10010948:	e73fff84 	addi	fp,fp,-2
1001094c:	2449883a 	add	r4,r4,r17
10010950:	b82e943a 	slli	r23,r23,16
10010954:	20a1c83a 	sub	r16,r4,r2
10010958:	bf06b03a 	or	r3,r23,fp
1001095c:	003f2806 	br	10010600 <__alt_data_end+0xf8010600>
10010960:	2021883a 	mov	r16,r4
10010964:	003f5306 	br	100106b4 <__alt_data_end+0xf80106b4>
10010968:	1821883a 	mov	r16,r3
1001096c:	003ef406 	br	10010540 <__alt_data_end+0xf8010540>
10010970:	1806943a 	slli	r3,r3,16
10010974:	9de6983a 	sll	r19,r19,r23
10010978:	e73fffcc 	andi	fp,fp,65535
1001097c:	1f07883a 	add	r3,r3,fp
10010980:	98ffbd2e 	bgeu	r19,r3,10010878 <__alt_data_end+0xf8010878>
10010984:	90bfffc4 	addi	r2,r18,-1
10010988:	0007883a 	mov	r3,zero
1001098c:	003f4e06 	br	100106c8 <__alt_data_end+0xf80106c8>
10010990:	00800604 	movi	r2,24
10010994:	003ef506 	br	1001056c <__alt_data_end+0xf801056c>
10010998:	00800604 	movi	r2,24
1001099c:	003f0b06 	br	100105cc <__alt_data_end+0xf80105cc>
100109a0:	00800604 	movi	r2,24
100109a4:	003ead06 	br	1001045c <__alt_data_end+0xf801045c>
100109a8:	0007883a 	mov	r3,zero
100109ac:	00800044 	movi	r2,1
100109b0:	003f4506 	br	100106c8 <__alt_data_end+0xf80106c8>
100109b4:	80bf8e2e 	bgeu	r16,r2,100107f0 <__alt_data_end+0xf80107f0>
100109b8:	8c7fff84 	addi	r17,r17,-2
100109bc:	8721883a 	add	r16,r16,fp
100109c0:	003f8c06 	br	100107f4 <__alt_data_end+0xf80107f4>
100109c4:	18bf762e 	bgeu	r3,r2,100107a0 <__alt_data_end+0xf80107a0>
100109c8:	ad7fff84 	addi	r21,r21,-2
100109cc:	1f07883a 	add	r3,r3,fp
100109d0:	003f7406 	br	100107a4 <__alt_data_end+0xf80107a4>
100109d4:	1839883a 	mov	fp,r3
100109d8:	003fdd06 	br	10010950 <__alt_data_end+0xf8010950>
100109dc:	182f883a 	mov	r23,r3
100109e0:	003fc506 	br	100108f8 <__alt_data_end+0xf80108f8>
100109e4:	b5bfff84 	addi	r22,r22,-2
100109e8:	3c4f883a 	add	r7,r7,r17
100109ec:	003f1a06 	br	10010658 <__alt_data_end+0xf8010658>
100109f0:	b5bfff84 	addi	r22,r22,-2
100109f4:	1c47883a 	add	r3,r3,r17
100109f8:	003ebc06 	br	100104ec <__alt_data_end+0xf80104ec>

100109fc <__umoddi3>:
100109fc:	defff304 	addi	sp,sp,-52
10010a00:	df000b15 	stw	fp,44(sp)
10010a04:	dc400415 	stw	r17,16(sp)
10010a08:	dc000315 	stw	r16,12(sp)
10010a0c:	dfc00c15 	stw	ra,48(sp)
10010a10:	ddc00a15 	stw	r23,40(sp)
10010a14:	dd800915 	stw	r22,36(sp)
10010a18:	dd400815 	stw	r21,32(sp)
10010a1c:	dd000715 	stw	r20,28(sp)
10010a20:	dcc00615 	stw	r19,24(sp)
10010a24:	dc800515 	stw	r18,20(sp)
10010a28:	2021883a 	mov	r16,r4
10010a2c:	2823883a 	mov	r17,r5
10010a30:	2839883a 	mov	fp,r5
10010a34:	3800401e 	bne	r7,zero,10010b38 <__umoddi3+0x13c>
10010a38:	3027883a 	mov	r19,r6
10010a3c:	2029883a 	mov	r20,r4
10010a40:	2980552e 	bgeu	r5,r6,10010b98 <__umoddi3+0x19c>
10010a44:	00bfffd4 	movui	r2,65535
10010a48:	1180a236 	bltu	r2,r6,10010cd4 <__umoddi3+0x2d8>
10010a4c:	01003fc4 	movi	r4,255
10010a50:	2189803a 	cmpltu	r4,r4,r6
10010a54:	200890fa 	slli	r4,r4,3
10010a58:	3104d83a 	srl	r2,r6,r4
10010a5c:	00c40074 	movhi	r3,4097
10010a60:	18daa404 	addi	r3,r3,27280
10010a64:	1885883a 	add	r2,r3,r2
10010a68:	10c00003 	ldbu	r3,0(r2)
10010a6c:	00800804 	movi	r2,32
10010a70:	1909883a 	add	r4,r3,r4
10010a74:	1125c83a 	sub	r18,r2,r4
10010a78:	90000526 	beq	r18,zero,10010a90 <__umoddi3+0x94>
10010a7c:	8ca2983a 	sll	r17,r17,r18
10010a80:	8108d83a 	srl	r4,r16,r4
10010a84:	34a6983a 	sll	r19,r6,r18
10010a88:	84a8983a 	sll	r20,r16,r18
10010a8c:	2478b03a 	or	fp,r4,r17
10010a90:	982cd43a 	srli	r22,r19,16
10010a94:	e009883a 	mov	r4,fp
10010a98:	9dffffcc 	andi	r23,r19,65535
10010a9c:	b00b883a 	mov	r5,r22
10010aa0:	0006a800 	call	10006a80 <__umodsi3>
10010aa4:	b00b883a 	mov	r5,r22
10010aa8:	e009883a 	mov	r4,fp
10010aac:	102b883a 	mov	r21,r2
10010ab0:	0006a1c0 	call	10006a1c <__udivsi3>
10010ab4:	100b883a 	mov	r5,r2
10010ab8:	b809883a 	mov	r4,r23
10010abc:	0006ad80 	call	10006ad8 <__mulsi3>
10010ac0:	a82a943a 	slli	r21,r21,16
10010ac4:	a006d43a 	srli	r3,r20,16
10010ac8:	1d46b03a 	or	r3,r3,r21
10010acc:	1880032e 	bgeu	r3,r2,10010adc <__umoddi3+0xe0>
10010ad0:	1cc7883a 	add	r3,r3,r19
10010ad4:	1cc00136 	bltu	r3,r19,10010adc <__umoddi3+0xe0>
10010ad8:	18813136 	bltu	r3,r2,10010fa0 <__umoddi3+0x5a4>
10010adc:	18a1c83a 	sub	r16,r3,r2
10010ae0:	b00b883a 	mov	r5,r22
10010ae4:	8009883a 	mov	r4,r16
10010ae8:	0006a800 	call	10006a80 <__umodsi3>
10010aec:	b00b883a 	mov	r5,r22
10010af0:	8009883a 	mov	r4,r16
10010af4:	1023883a 	mov	r17,r2
10010af8:	0006a1c0 	call	10006a1c <__udivsi3>
10010afc:	100b883a 	mov	r5,r2
10010b00:	b809883a 	mov	r4,r23
10010b04:	8822943a 	slli	r17,r17,16
10010b08:	0006ad80 	call	10006ad8 <__mulsi3>
10010b0c:	a0ffffcc 	andi	r3,r20,65535
10010b10:	1c46b03a 	or	r3,r3,r17
10010b14:	1880042e 	bgeu	r3,r2,10010b28 <__umoddi3+0x12c>
10010b18:	1cc7883a 	add	r3,r3,r19
10010b1c:	1cc00236 	bltu	r3,r19,10010b28 <__umoddi3+0x12c>
10010b20:	1880012e 	bgeu	r3,r2,10010b28 <__umoddi3+0x12c>
10010b24:	1cc7883a 	add	r3,r3,r19
10010b28:	1885c83a 	sub	r2,r3,r2
10010b2c:	1484d83a 	srl	r2,r2,r18
10010b30:	0007883a 	mov	r3,zero
10010b34:	00005306 	br	10010c84 <__umoddi3+0x288>
10010b38:	29c05036 	bltu	r5,r7,10010c7c <__umoddi3+0x280>
10010b3c:	00bfffd4 	movui	r2,65535
10010b40:	11c05c2e 	bgeu	r2,r7,10010cb4 <__umoddi3+0x2b8>
10010b44:	00804034 	movhi	r2,256
10010b48:	10bfffc4 	addi	r2,r2,-1
10010b4c:	11c10636 	bltu	r2,r7,10010f68 <__umoddi3+0x56c>
10010b50:	01000404 	movi	r4,16
10010b54:	3904d83a 	srl	r2,r7,r4
10010b58:	00c40074 	movhi	r3,4097
10010b5c:	18daa404 	addi	r3,r3,27280
10010b60:	1885883a 	add	r2,r3,r2
10010b64:	14c00003 	ldbu	r19,0(r2)
10010b68:	00c00804 	movi	r3,32
10010b6c:	9927883a 	add	r19,r19,r4
10010b70:	1ce9c83a 	sub	r20,r3,r19
10010b74:	a0005c1e 	bne	r20,zero,10010ce8 <__umoddi3+0x2ec>
10010b78:	3c400136 	bltu	r7,r17,10010b80 <__umoddi3+0x184>
10010b7c:	81810a36 	bltu	r16,r6,10010fa8 <__umoddi3+0x5ac>
10010b80:	8185c83a 	sub	r2,r16,r6
10010b84:	89e3c83a 	sub	r17,r17,r7
10010b88:	8089803a 	cmpltu	r4,r16,r2
10010b8c:	8939c83a 	sub	fp,r17,r4
10010b90:	e007883a 	mov	r3,fp
10010b94:	00003b06 	br	10010c84 <__umoddi3+0x288>
10010b98:	3000041e 	bne	r6,zero,10010bac <__umoddi3+0x1b0>
10010b9c:	000b883a 	mov	r5,zero
10010ba0:	01000044 	movi	r4,1
10010ba4:	0006a1c0 	call	10006a1c <__udivsi3>
10010ba8:	1027883a 	mov	r19,r2
10010bac:	00bfffd4 	movui	r2,65535
10010bb0:	14c0442e 	bgeu	r2,r19,10010cc4 <__umoddi3+0x2c8>
10010bb4:	00804034 	movhi	r2,256
10010bb8:	10bfffc4 	addi	r2,r2,-1
10010bbc:	14c0ec36 	bltu	r2,r19,10010f70 <__umoddi3+0x574>
10010bc0:	00800404 	movi	r2,16
10010bc4:	9886d83a 	srl	r3,r19,r2
10010bc8:	01040074 	movhi	r4,4097
10010bcc:	211aa404 	addi	r4,r4,27280
10010bd0:	20c7883a 	add	r3,r4,r3
10010bd4:	18c00003 	ldbu	r3,0(r3)
10010bd8:	1887883a 	add	r3,r3,r2
10010bdc:	00800804 	movi	r2,32
10010be0:	10e5c83a 	sub	r18,r2,r3
10010be4:	9000ab1e 	bne	r18,zero,10010e94 <__umoddi3+0x498>
10010be8:	982cd43a 	srli	r22,r19,16
10010bec:	8ce3c83a 	sub	r17,r17,r19
10010bf0:	9dffffcc 	andi	r23,r19,65535
10010bf4:	b00b883a 	mov	r5,r22
10010bf8:	8809883a 	mov	r4,r17
10010bfc:	0006a800 	call	10006a80 <__umodsi3>
10010c00:	b00b883a 	mov	r5,r22
10010c04:	8809883a 	mov	r4,r17
10010c08:	102b883a 	mov	r21,r2
10010c0c:	0006a1c0 	call	10006a1c <__udivsi3>
10010c10:	b80b883a 	mov	r5,r23
10010c14:	1009883a 	mov	r4,r2
10010c18:	0006ad80 	call	10006ad8 <__mulsi3>
10010c1c:	a82a943a 	slli	r21,r21,16
10010c20:	a006d43a 	srli	r3,r20,16
10010c24:	1d46b03a 	or	r3,r3,r21
10010c28:	1880042e 	bgeu	r3,r2,10010c3c <__umoddi3+0x240>
10010c2c:	1cc7883a 	add	r3,r3,r19
10010c30:	1cc00236 	bltu	r3,r19,10010c3c <__umoddi3+0x240>
10010c34:	1880012e 	bgeu	r3,r2,10010c3c <__umoddi3+0x240>
10010c38:	1cc7883a 	add	r3,r3,r19
10010c3c:	18a1c83a 	sub	r16,r3,r2
10010c40:	b00b883a 	mov	r5,r22
10010c44:	8009883a 	mov	r4,r16
10010c48:	0006a800 	call	10006a80 <__umodsi3>
10010c4c:	1023883a 	mov	r17,r2
10010c50:	b00b883a 	mov	r5,r22
10010c54:	8009883a 	mov	r4,r16
10010c58:	0006a1c0 	call	10006a1c <__udivsi3>
10010c5c:	8822943a 	slli	r17,r17,16
10010c60:	b80b883a 	mov	r5,r23
10010c64:	1009883a 	mov	r4,r2
10010c68:	0006ad80 	call	10006ad8 <__mulsi3>
10010c6c:	a53fffcc 	andi	r20,r20,65535
10010c70:	a446b03a 	or	r3,r20,r17
10010c74:	18bfac2e 	bgeu	r3,r2,10010b28 <__alt_data_end+0xf8010b28>
10010c78:	003fa706 	br	10010b18 <__alt_data_end+0xf8010b18>
10010c7c:	2005883a 	mov	r2,r4
10010c80:	2807883a 	mov	r3,r5
10010c84:	dfc00c17 	ldw	ra,48(sp)
10010c88:	df000b17 	ldw	fp,44(sp)
10010c8c:	ddc00a17 	ldw	r23,40(sp)
10010c90:	dd800917 	ldw	r22,36(sp)
10010c94:	dd400817 	ldw	r21,32(sp)
10010c98:	dd000717 	ldw	r20,28(sp)
10010c9c:	dcc00617 	ldw	r19,24(sp)
10010ca0:	dc800517 	ldw	r18,20(sp)
10010ca4:	dc400417 	ldw	r17,16(sp)
10010ca8:	dc000317 	ldw	r16,12(sp)
10010cac:	dec00d04 	addi	sp,sp,52
10010cb0:	f800283a 	ret
10010cb4:	04c03fc4 	movi	r19,255
10010cb8:	99c9803a 	cmpltu	r4,r19,r7
10010cbc:	200890fa 	slli	r4,r4,3
10010cc0:	003fa406 	br	10010b54 <__alt_data_end+0xf8010b54>
10010cc4:	00803fc4 	movi	r2,255
10010cc8:	14c5803a 	cmpltu	r2,r2,r19
10010ccc:	100490fa 	slli	r2,r2,3
10010cd0:	003fbc06 	br	10010bc4 <__alt_data_end+0xf8010bc4>
10010cd4:	00804034 	movhi	r2,256
10010cd8:	10bfffc4 	addi	r2,r2,-1
10010cdc:	1180a636 	bltu	r2,r6,10010f78 <__umoddi3+0x57c>
10010ce0:	01000404 	movi	r4,16
10010ce4:	003f5c06 	br	10010a58 <__alt_data_end+0xf8010a58>
10010ce8:	3d0e983a 	sll	r7,r7,r20
10010cec:	34ead83a 	srl	r21,r6,r19
10010cf0:	8cc6d83a 	srl	r3,r17,r19
10010cf4:	8d10983a 	sll	r8,r17,r20
10010cf8:	3d6ab03a 	or	r21,r7,r21
10010cfc:	a82cd43a 	srli	r22,r21,16
10010d00:	84e2d83a 	srl	r17,r16,r19
10010d04:	1809883a 	mov	r4,r3
10010d08:	b00b883a 	mov	r5,r22
10010d0c:	8a22b03a 	or	r17,r17,r8
10010d10:	3524983a 	sll	r18,r6,r20
10010d14:	dc400015 	stw	r17,0(sp)
10010d18:	d8c00115 	stw	r3,4(sp)
10010d1c:	0006a800 	call	10006a80 <__umodsi3>
10010d20:	d8c00117 	ldw	r3,4(sp)
10010d24:	b00b883a 	mov	r5,r22
10010d28:	1039883a 	mov	fp,r2
10010d2c:	1809883a 	mov	r4,r3
10010d30:	0006a1c0 	call	10006a1c <__udivsi3>
10010d34:	adffffcc 	andi	r23,r21,65535
10010d38:	100b883a 	mov	r5,r2
10010d3c:	b809883a 	mov	r4,r23
10010d40:	1023883a 	mov	r17,r2
10010d44:	0006ad80 	call	10006ad8 <__mulsi3>
10010d48:	d9400017 	ldw	r5,0(sp)
10010d4c:	e008943a 	slli	r4,fp,16
10010d50:	8520983a 	sll	r16,r16,r20
10010d54:	2806d43a 	srli	r3,r5,16
10010d58:	1906b03a 	or	r3,r3,r4
10010d5c:	1880042e 	bgeu	r3,r2,10010d70 <__umoddi3+0x374>
10010d60:	1d47883a 	add	r3,r3,r21
10010d64:	893fffc4 	addi	r4,r17,-1
10010d68:	1d40892e 	bgeu	r3,r21,10010f90 <__umoddi3+0x594>
10010d6c:	2023883a 	mov	r17,r4
10010d70:	18b9c83a 	sub	fp,r3,r2
10010d74:	b00b883a 	mov	r5,r22
10010d78:	e009883a 	mov	r4,fp
10010d7c:	0006a800 	call	10006a80 <__umodsi3>
10010d80:	b00b883a 	mov	r5,r22
10010d84:	e009883a 	mov	r4,fp
10010d88:	d8800215 	stw	r2,8(sp)
10010d8c:	0006a1c0 	call	10006a1c <__udivsi3>
10010d90:	100b883a 	mov	r5,r2
10010d94:	b809883a 	mov	r4,r23
10010d98:	102d883a 	mov	r22,r2
10010d9c:	0006ad80 	call	10006ad8 <__mulsi3>
10010da0:	d9800217 	ldw	r6,8(sp)
10010da4:	d8c00017 	ldw	r3,0(sp)
10010da8:	300c943a 	slli	r6,r6,16
10010dac:	1a3fffcc 	andi	r8,r3,65535
10010db0:	4190b03a 	or	r8,r8,r6
10010db4:	4080042e 	bgeu	r8,r2,10010dc8 <__umoddi3+0x3cc>
10010db8:	4551883a 	add	r8,r8,r21
10010dbc:	b0ffffc4 	addi	r3,r22,-1
10010dc0:	45406f2e 	bgeu	r8,r21,10010f80 <__umoddi3+0x584>
10010dc4:	182d883a 	mov	r22,r3
10010dc8:	880e943a 	slli	r7,r17,16
10010dcc:	9006d43a 	srli	r3,r18,16
10010dd0:	91bfffcc 	andi	r6,r18,65535
10010dd4:	3dacb03a 	or	r22,r7,r22
10010dd8:	b02ed43a 	srli	r23,r22,16
10010ddc:	b5bfffcc 	andi	r22,r22,65535
10010de0:	300b883a 	mov	r5,r6
10010de4:	b009883a 	mov	r4,r22
10010de8:	40a3c83a 	sub	r17,r8,r2
10010dec:	d8c00115 	stw	r3,4(sp)
10010df0:	d9800215 	stw	r6,8(sp)
10010df4:	0006ad80 	call	10006ad8 <__mulsi3>
10010df8:	d9800217 	ldw	r6,8(sp)
10010dfc:	b809883a 	mov	r4,r23
10010e00:	1039883a 	mov	fp,r2
10010e04:	300b883a 	mov	r5,r6
10010e08:	0006ad80 	call	10006ad8 <__mulsi3>
10010e0c:	d8c00117 	ldw	r3,4(sp)
10010e10:	b809883a 	mov	r4,r23
10010e14:	d8800215 	stw	r2,8(sp)
10010e18:	180b883a 	mov	r5,r3
10010e1c:	0006ad80 	call	10006ad8 <__mulsi3>
10010e20:	d8c00117 	ldw	r3,4(sp)
10010e24:	b009883a 	mov	r4,r22
10010e28:	102f883a 	mov	r23,r2
10010e2c:	180b883a 	mov	r5,r3
10010e30:	0006ad80 	call	10006ad8 <__mulsi3>
10010e34:	d9800217 	ldw	r6,8(sp)
10010e38:	e006d43a 	srli	r3,fp,16
10010e3c:	1185883a 	add	r2,r2,r6
10010e40:	1885883a 	add	r2,r3,r2
10010e44:	1180022e 	bgeu	r2,r6,10010e50 <__umoddi3+0x454>
10010e48:	00c00074 	movhi	r3,1
10010e4c:	b8ef883a 	add	r23,r23,r3
10010e50:	1006d43a 	srli	r3,r2,16
10010e54:	1004943a 	slli	r2,r2,16
10010e58:	e73fffcc 	andi	fp,fp,65535
10010e5c:	1dc7883a 	add	r3,r3,r23
10010e60:	1739883a 	add	fp,r2,fp
10010e64:	88c03a36 	bltu	r17,r3,10010f50 <__umoddi3+0x554>
10010e68:	88c05126 	beq	r17,r3,10010fb0 <__umoddi3+0x5b4>
10010e6c:	88c9c83a 	sub	r4,r17,r3
10010e70:	e00f883a 	mov	r7,fp
10010e74:	81cfc83a 	sub	r7,r16,r7
10010e78:	81c7803a 	cmpltu	r3,r16,r7
10010e7c:	20c7c83a 	sub	r3,r4,r3
10010e80:	1cc4983a 	sll	r2,r3,r19
10010e84:	3d0ed83a 	srl	r7,r7,r20
10010e88:	1d06d83a 	srl	r3,r3,r20
10010e8c:	11c4b03a 	or	r2,r2,r7
10010e90:	003f7c06 	br	10010c84 <__alt_data_end+0xf8010c84>
10010e94:	9ca6983a 	sll	r19,r19,r18
10010e98:	88f8d83a 	srl	fp,r17,r3
10010e9c:	80c4d83a 	srl	r2,r16,r3
10010ea0:	982cd43a 	srli	r22,r19,16
10010ea4:	8ca2983a 	sll	r17,r17,r18
10010ea8:	e009883a 	mov	r4,fp
10010eac:	b00b883a 	mov	r5,r22
10010eb0:	146ab03a 	or	r21,r2,r17
10010eb4:	0006a800 	call	10006a80 <__umodsi3>
10010eb8:	b00b883a 	mov	r5,r22
10010ebc:	e009883a 	mov	r4,fp
10010ec0:	1029883a 	mov	r20,r2
10010ec4:	9dffffcc 	andi	r23,r19,65535
10010ec8:	0006a1c0 	call	10006a1c <__udivsi3>
10010ecc:	b809883a 	mov	r4,r23
10010ed0:	100b883a 	mov	r5,r2
10010ed4:	0006ad80 	call	10006ad8 <__mulsi3>
10010ed8:	a008943a 	slli	r4,r20,16
10010edc:	a806d43a 	srli	r3,r21,16
10010ee0:	84a8983a 	sll	r20,r16,r18
10010ee4:	1906b03a 	or	r3,r3,r4
10010ee8:	1880042e 	bgeu	r3,r2,10010efc <__umoddi3+0x500>
10010eec:	1cc7883a 	add	r3,r3,r19
10010ef0:	1cc00236 	bltu	r3,r19,10010efc <__umoddi3+0x500>
10010ef4:	1880012e 	bgeu	r3,r2,10010efc <__umoddi3+0x500>
10010ef8:	1cc7883a 	add	r3,r3,r19
10010efc:	18a3c83a 	sub	r17,r3,r2
10010f00:	b00b883a 	mov	r5,r22
10010f04:	8809883a 	mov	r4,r17
10010f08:	0006a800 	call	10006a80 <__umodsi3>
10010f0c:	b00b883a 	mov	r5,r22
10010f10:	8809883a 	mov	r4,r17
10010f14:	1021883a 	mov	r16,r2
10010f18:	0006a1c0 	call	10006a1c <__udivsi3>
10010f1c:	100b883a 	mov	r5,r2
10010f20:	b809883a 	mov	r4,r23
10010f24:	8020943a 	slli	r16,r16,16
10010f28:	0006ad80 	call	10006ad8 <__mulsi3>
10010f2c:	a8ffffcc 	andi	r3,r21,65535
10010f30:	1c06b03a 	or	r3,r3,r16
10010f34:	1880042e 	bgeu	r3,r2,10010f48 <__umoddi3+0x54c>
10010f38:	1cc7883a 	add	r3,r3,r19
10010f3c:	1cc00236 	bltu	r3,r19,10010f48 <__umoddi3+0x54c>
10010f40:	1880012e 	bgeu	r3,r2,10010f48 <__umoddi3+0x54c>
10010f44:	1cc7883a 	add	r3,r3,r19
10010f48:	18a3c83a 	sub	r17,r3,r2
10010f4c:	003f2906 	br	10010bf4 <__alt_data_end+0xf8010bf4>
10010f50:	e48fc83a 	sub	r7,fp,r18
10010f54:	1d49c83a 	sub	r4,r3,r21
10010f58:	e1f9803a 	cmpltu	fp,fp,r7
10010f5c:	2739c83a 	sub	fp,r4,fp
10010f60:	8f09c83a 	sub	r4,r17,fp
10010f64:	003fc306 	br	10010e74 <__alt_data_end+0xf8010e74>
10010f68:	01000604 	movi	r4,24
10010f6c:	003ef906 	br	10010b54 <__alt_data_end+0xf8010b54>
10010f70:	00800604 	movi	r2,24
10010f74:	003f1306 	br	10010bc4 <__alt_data_end+0xf8010bc4>
10010f78:	01000604 	movi	r4,24
10010f7c:	003eb606 	br	10010a58 <__alt_data_end+0xf8010a58>
10010f80:	40bf902e 	bgeu	r8,r2,10010dc4 <__alt_data_end+0xf8010dc4>
10010f84:	b5bfff84 	addi	r22,r22,-2
10010f88:	4551883a 	add	r8,r8,r21
10010f8c:	003f8e06 	br	10010dc8 <__alt_data_end+0xf8010dc8>
10010f90:	18bf762e 	bgeu	r3,r2,10010d6c <__alt_data_end+0xf8010d6c>
10010f94:	8c7fff84 	addi	r17,r17,-2
10010f98:	1d47883a 	add	r3,r3,r21
10010f9c:	003f7406 	br	10010d70 <__alt_data_end+0xf8010d70>
10010fa0:	1cc7883a 	add	r3,r3,r19
10010fa4:	003ecd06 	br	10010adc <__alt_data_end+0xf8010adc>
10010fa8:	8005883a 	mov	r2,r16
10010fac:	003ef806 	br	10010b90 <__alt_data_end+0xf8010b90>
10010fb0:	873fe736 	bltu	r16,fp,10010f50 <__alt_data_end+0xf8010f50>
10010fb4:	e00f883a 	mov	r7,fp
10010fb8:	0009883a 	mov	r4,zero
10010fbc:	003fad06 	br	10010e74 <__alt_data_end+0xf8010e74>

10010fc0 <__adddf3>:
10010fc0:	02c00434 	movhi	r11,16
10010fc4:	5affffc4 	addi	r11,r11,-1
10010fc8:	2806d7fa 	srli	r3,r5,31
10010fcc:	2ad4703a 	and	r10,r5,r11
10010fd0:	3ad2703a 	and	r9,r7,r11
10010fd4:	3804d53a 	srli	r2,r7,20
10010fd8:	3018d77a 	srli	r12,r6,29
10010fdc:	280ad53a 	srli	r5,r5,20
10010fe0:	501490fa 	slli	r10,r10,3
10010fe4:	2010d77a 	srli	r8,r4,29
10010fe8:	481290fa 	slli	r9,r9,3
10010fec:	380ed7fa 	srli	r7,r7,31
10010ff0:	defffb04 	addi	sp,sp,-20
10010ff4:	dc800215 	stw	r18,8(sp)
10010ff8:	dc400115 	stw	r17,4(sp)
10010ffc:	dc000015 	stw	r16,0(sp)
10011000:	dfc00415 	stw	ra,16(sp)
10011004:	dcc00315 	stw	r19,12(sp)
10011008:	1c803fcc 	andi	r18,r3,255
1001100c:	2c01ffcc 	andi	r16,r5,2047
10011010:	5210b03a 	or	r8,r10,r8
10011014:	202290fa 	slli	r17,r4,3
10011018:	1081ffcc 	andi	r2,r2,2047
1001101c:	4b12b03a 	or	r9,r9,r12
10011020:	300c90fa 	slli	r6,r6,3
10011024:	91c07526 	beq	r18,r7,100111fc <__adddf3+0x23c>
10011028:	8087c83a 	sub	r3,r16,r2
1001102c:	00c0ab0e 	bge	zero,r3,100112dc <__adddf3+0x31c>
10011030:	10002a1e 	bne	r2,zero,100110dc <__adddf3+0x11c>
10011034:	4984b03a 	or	r2,r9,r6
10011038:	1000961e 	bne	r2,zero,10011294 <__adddf3+0x2d4>
1001103c:	888001cc 	andi	r2,r17,7
10011040:	10000726 	beq	r2,zero,10011060 <__adddf3+0xa0>
10011044:	888003cc 	andi	r2,r17,15
10011048:	00c00104 	movi	r3,4
1001104c:	10c00426 	beq	r2,r3,10011060 <__adddf3+0xa0>
10011050:	88c7883a 	add	r3,r17,r3
10011054:	1c63803a 	cmpltu	r17,r3,r17
10011058:	4451883a 	add	r8,r8,r17
1001105c:	1823883a 	mov	r17,r3
10011060:	4080202c 	andhi	r2,r8,128
10011064:	10005926 	beq	r2,zero,100111cc <__adddf3+0x20c>
10011068:	84000044 	addi	r16,r16,1
1001106c:	0081ffc4 	movi	r2,2047
10011070:	8080ba26 	beq	r16,r2,1001135c <__adddf3+0x39c>
10011074:	00bfe034 	movhi	r2,65408
10011078:	10bfffc4 	addi	r2,r2,-1
1001107c:	4090703a 	and	r8,r8,r2
10011080:	4004977a 	slli	r2,r8,29
10011084:	4010927a 	slli	r8,r8,9
10011088:	8822d0fa 	srli	r17,r17,3
1001108c:	8401ffcc 	andi	r16,r16,2047
10011090:	4010d33a 	srli	r8,r8,12
10011094:	9007883a 	mov	r3,r18
10011098:	1444b03a 	or	r2,r2,r17
1001109c:	8401ffcc 	andi	r16,r16,2047
100110a0:	8020953a 	slli	r16,r16,20
100110a4:	18c03fcc 	andi	r3,r3,255
100110a8:	01000434 	movhi	r4,16
100110ac:	213fffc4 	addi	r4,r4,-1
100110b0:	180697fa 	slli	r3,r3,31
100110b4:	4110703a 	and	r8,r8,r4
100110b8:	4410b03a 	or	r8,r8,r16
100110bc:	40c6b03a 	or	r3,r8,r3
100110c0:	dfc00417 	ldw	ra,16(sp)
100110c4:	dcc00317 	ldw	r19,12(sp)
100110c8:	dc800217 	ldw	r18,8(sp)
100110cc:	dc400117 	ldw	r17,4(sp)
100110d0:	dc000017 	ldw	r16,0(sp)
100110d4:	dec00504 	addi	sp,sp,20
100110d8:	f800283a 	ret
100110dc:	0081ffc4 	movi	r2,2047
100110e0:	80bfd626 	beq	r16,r2,1001103c <__alt_data_end+0xf801103c>
100110e4:	4a402034 	orhi	r9,r9,128
100110e8:	00800e04 	movi	r2,56
100110ec:	10c09f16 	blt	r2,r3,1001136c <__adddf3+0x3ac>
100110f0:	008007c4 	movi	r2,31
100110f4:	10c0c216 	blt	r2,r3,10011400 <__adddf3+0x440>
100110f8:	00800804 	movi	r2,32
100110fc:	10c5c83a 	sub	r2,r2,r3
10011100:	488a983a 	sll	r5,r9,r2
10011104:	30c8d83a 	srl	r4,r6,r3
10011108:	3084983a 	sll	r2,r6,r2
1001110c:	48c6d83a 	srl	r3,r9,r3
10011110:	290cb03a 	or	r6,r5,r4
10011114:	1004c03a 	cmpne	r2,r2,zero
10011118:	308cb03a 	or	r6,r6,r2
1001111c:	898dc83a 	sub	r6,r17,r6
10011120:	89a3803a 	cmpltu	r17,r17,r6
10011124:	40d1c83a 	sub	r8,r8,r3
10011128:	4451c83a 	sub	r8,r8,r17
1001112c:	3023883a 	mov	r17,r6
10011130:	4080202c 	andhi	r2,r8,128
10011134:	10002326 	beq	r2,zero,100111c4 <__adddf3+0x204>
10011138:	04c02034 	movhi	r19,128
1001113c:	9cffffc4 	addi	r19,r19,-1
10011140:	44e6703a 	and	r19,r8,r19
10011144:	98007626 	beq	r19,zero,10011320 <__adddf3+0x360>
10011148:	9809883a 	mov	r4,r19
1001114c:	00138000 	call	10013800 <__clzsi2>
10011150:	10fffe04 	addi	r3,r2,-8
10011154:	010007c4 	movi	r4,31
10011158:	20c07716 	blt	r4,r3,10011338 <__adddf3+0x378>
1001115c:	00800804 	movi	r2,32
10011160:	10c5c83a 	sub	r2,r2,r3
10011164:	8884d83a 	srl	r2,r17,r2
10011168:	98d0983a 	sll	r8,r19,r3
1001116c:	88e2983a 	sll	r17,r17,r3
10011170:	1204b03a 	or	r2,r2,r8
10011174:	1c007416 	blt	r3,r16,10011348 <__adddf3+0x388>
10011178:	1c21c83a 	sub	r16,r3,r16
1001117c:	82000044 	addi	r8,r16,1
10011180:	00c007c4 	movi	r3,31
10011184:	1a009116 	blt	r3,r8,100113cc <__adddf3+0x40c>
10011188:	00c00804 	movi	r3,32
1001118c:	1a07c83a 	sub	r3,r3,r8
10011190:	8a08d83a 	srl	r4,r17,r8
10011194:	88e2983a 	sll	r17,r17,r3
10011198:	10c6983a 	sll	r3,r2,r3
1001119c:	1210d83a 	srl	r8,r2,r8
100111a0:	8804c03a 	cmpne	r2,r17,zero
100111a4:	1906b03a 	or	r3,r3,r4
100111a8:	18a2b03a 	or	r17,r3,r2
100111ac:	0021883a 	mov	r16,zero
100111b0:	003fa206 	br	1001103c <__alt_data_end+0xf801103c>
100111b4:	1890b03a 	or	r8,r3,r2
100111b8:	40017d26 	beq	r8,zero,100117b0 <__adddf3+0x7f0>
100111bc:	1011883a 	mov	r8,r2
100111c0:	1823883a 	mov	r17,r3
100111c4:	888001cc 	andi	r2,r17,7
100111c8:	103f9e1e 	bne	r2,zero,10011044 <__alt_data_end+0xf8011044>
100111cc:	4004977a 	slli	r2,r8,29
100111d0:	8822d0fa 	srli	r17,r17,3
100111d4:	4010d0fa 	srli	r8,r8,3
100111d8:	9007883a 	mov	r3,r18
100111dc:	1444b03a 	or	r2,r2,r17
100111e0:	0101ffc4 	movi	r4,2047
100111e4:	81002426 	beq	r16,r4,10011278 <__adddf3+0x2b8>
100111e8:	8120703a 	and	r16,r16,r4
100111ec:	01000434 	movhi	r4,16
100111f0:	213fffc4 	addi	r4,r4,-1
100111f4:	4110703a 	and	r8,r8,r4
100111f8:	003fa806 	br	1001109c <__alt_data_end+0xf801109c>
100111fc:	8089c83a 	sub	r4,r16,r2
10011200:	01005e0e 	bge	zero,r4,1001137c <__adddf3+0x3bc>
10011204:	10002b26 	beq	r2,zero,100112b4 <__adddf3+0x2f4>
10011208:	0081ffc4 	movi	r2,2047
1001120c:	80bf8b26 	beq	r16,r2,1001103c <__alt_data_end+0xf801103c>
10011210:	4a402034 	orhi	r9,r9,128
10011214:	00800e04 	movi	r2,56
10011218:	1100a40e 	bge	r2,r4,100114ac <__adddf3+0x4ec>
1001121c:	498cb03a 	or	r6,r9,r6
10011220:	300ac03a 	cmpne	r5,r6,zero
10011224:	0013883a 	mov	r9,zero
10011228:	2c4b883a 	add	r5,r5,r17
1001122c:	2c63803a 	cmpltu	r17,r5,r17
10011230:	4a11883a 	add	r8,r9,r8
10011234:	8a11883a 	add	r8,r17,r8
10011238:	2823883a 	mov	r17,r5
1001123c:	4080202c 	andhi	r2,r8,128
10011240:	103fe026 	beq	r2,zero,100111c4 <__alt_data_end+0xf80111c4>
10011244:	84000044 	addi	r16,r16,1
10011248:	0081ffc4 	movi	r2,2047
1001124c:	8080d226 	beq	r16,r2,10011598 <__adddf3+0x5d8>
10011250:	00bfe034 	movhi	r2,65408
10011254:	10bfffc4 	addi	r2,r2,-1
10011258:	4090703a 	and	r8,r8,r2
1001125c:	880ad07a 	srli	r5,r17,1
10011260:	400897fa 	slli	r4,r8,31
10011264:	88c0004c 	andi	r3,r17,1
10011268:	28e2b03a 	or	r17,r5,r3
1001126c:	4010d07a 	srli	r8,r8,1
10011270:	2462b03a 	or	r17,r4,r17
10011274:	003f7106 	br	1001103c <__alt_data_end+0xf801103c>
10011278:	4088b03a 	or	r4,r8,r2
1001127c:	20014526 	beq	r4,zero,10011794 <__adddf3+0x7d4>
10011280:	01000434 	movhi	r4,16
10011284:	42000234 	orhi	r8,r8,8
10011288:	213fffc4 	addi	r4,r4,-1
1001128c:	4110703a 	and	r8,r8,r4
10011290:	003f8206 	br	1001109c <__alt_data_end+0xf801109c>
10011294:	18ffffc4 	addi	r3,r3,-1
10011298:	1800491e 	bne	r3,zero,100113c0 <__adddf3+0x400>
1001129c:	898bc83a 	sub	r5,r17,r6
100112a0:	8963803a 	cmpltu	r17,r17,r5
100112a4:	4251c83a 	sub	r8,r8,r9
100112a8:	4451c83a 	sub	r8,r8,r17
100112ac:	2823883a 	mov	r17,r5
100112b0:	003f9f06 	br	10011130 <__alt_data_end+0xf8011130>
100112b4:	4984b03a 	or	r2,r9,r6
100112b8:	103f6026 	beq	r2,zero,1001103c <__alt_data_end+0xf801103c>
100112bc:	213fffc4 	addi	r4,r4,-1
100112c0:	2000931e 	bne	r4,zero,10011510 <__adddf3+0x550>
100112c4:	898d883a 	add	r6,r17,r6
100112c8:	3463803a 	cmpltu	r17,r6,r17
100112cc:	4251883a 	add	r8,r8,r9
100112d0:	8a11883a 	add	r8,r17,r8
100112d4:	3023883a 	mov	r17,r6
100112d8:	003fd806 	br	1001123c <__alt_data_end+0xf801123c>
100112dc:	1800541e 	bne	r3,zero,10011430 <__adddf3+0x470>
100112e0:	80800044 	addi	r2,r16,1
100112e4:	1081ffcc 	andi	r2,r2,2047
100112e8:	00c00044 	movi	r3,1
100112ec:	1880a00e 	bge	r3,r2,10011570 <__adddf3+0x5b0>
100112f0:	8989c83a 	sub	r4,r17,r6
100112f4:	8905803a 	cmpltu	r2,r17,r4
100112f8:	4267c83a 	sub	r19,r8,r9
100112fc:	98a7c83a 	sub	r19,r19,r2
10011300:	9880202c 	andhi	r2,r19,128
10011304:	10006326 	beq	r2,zero,10011494 <__adddf3+0x4d4>
10011308:	3463c83a 	sub	r17,r6,r17
1001130c:	4a07c83a 	sub	r3,r9,r8
10011310:	344d803a 	cmpltu	r6,r6,r17
10011314:	19a7c83a 	sub	r19,r3,r6
10011318:	3825883a 	mov	r18,r7
1001131c:	983f8a1e 	bne	r19,zero,10011148 <__alt_data_end+0xf8011148>
10011320:	8809883a 	mov	r4,r17
10011324:	00138000 	call	10013800 <__clzsi2>
10011328:	10800804 	addi	r2,r2,32
1001132c:	10fffe04 	addi	r3,r2,-8
10011330:	010007c4 	movi	r4,31
10011334:	20ff890e 	bge	r4,r3,1001115c <__alt_data_end+0xf801115c>
10011338:	10bff604 	addi	r2,r2,-40
1001133c:	8884983a 	sll	r2,r17,r2
10011340:	0023883a 	mov	r17,zero
10011344:	1c3f8c0e 	bge	r3,r16,10011178 <__alt_data_end+0xf8011178>
10011348:	023fe034 	movhi	r8,65408
1001134c:	423fffc4 	addi	r8,r8,-1
10011350:	80e1c83a 	sub	r16,r16,r3
10011354:	1210703a 	and	r8,r2,r8
10011358:	003f3806 	br	1001103c <__alt_data_end+0xf801103c>
1001135c:	9007883a 	mov	r3,r18
10011360:	0011883a 	mov	r8,zero
10011364:	0005883a 	mov	r2,zero
10011368:	003f4c06 	br	1001109c <__alt_data_end+0xf801109c>
1001136c:	498cb03a 	or	r6,r9,r6
10011370:	300cc03a 	cmpne	r6,r6,zero
10011374:	0007883a 	mov	r3,zero
10011378:	003f6806 	br	1001111c <__alt_data_end+0xf801111c>
1001137c:	20009c1e 	bne	r4,zero,100115f0 <__adddf3+0x630>
10011380:	80800044 	addi	r2,r16,1
10011384:	1141ffcc 	andi	r5,r2,2047
10011388:	01000044 	movi	r4,1
1001138c:	2140670e 	bge	r4,r5,1001152c <__adddf3+0x56c>
10011390:	0101ffc4 	movi	r4,2047
10011394:	11007f26 	beq	r2,r4,10011594 <__adddf3+0x5d4>
10011398:	898d883a 	add	r6,r17,r6
1001139c:	4247883a 	add	r3,r8,r9
100113a0:	3451803a 	cmpltu	r8,r6,r17
100113a4:	40d1883a 	add	r8,r8,r3
100113a8:	402297fa 	slli	r17,r8,31
100113ac:	300cd07a 	srli	r6,r6,1
100113b0:	4010d07a 	srli	r8,r8,1
100113b4:	1021883a 	mov	r16,r2
100113b8:	89a2b03a 	or	r17,r17,r6
100113bc:	003f1f06 	br	1001103c <__alt_data_end+0xf801103c>
100113c0:	0081ffc4 	movi	r2,2047
100113c4:	80bf481e 	bne	r16,r2,100110e8 <__alt_data_end+0xf80110e8>
100113c8:	003f1c06 	br	1001103c <__alt_data_end+0xf801103c>
100113cc:	843ff844 	addi	r16,r16,-31
100113d0:	01000804 	movi	r4,32
100113d4:	1406d83a 	srl	r3,r2,r16
100113d8:	41005026 	beq	r8,r4,1001151c <__adddf3+0x55c>
100113dc:	01001004 	movi	r4,64
100113e0:	2211c83a 	sub	r8,r4,r8
100113e4:	1204983a 	sll	r2,r2,r8
100113e8:	88a2b03a 	or	r17,r17,r2
100113ec:	8822c03a 	cmpne	r17,r17,zero
100113f0:	1c62b03a 	or	r17,r3,r17
100113f4:	0011883a 	mov	r8,zero
100113f8:	0021883a 	mov	r16,zero
100113fc:	003f7106 	br	100111c4 <__alt_data_end+0xf80111c4>
10011400:	193ff804 	addi	r4,r3,-32
10011404:	00800804 	movi	r2,32
10011408:	4908d83a 	srl	r4,r9,r4
1001140c:	18804526 	beq	r3,r2,10011524 <__adddf3+0x564>
10011410:	00801004 	movi	r2,64
10011414:	10c5c83a 	sub	r2,r2,r3
10011418:	4886983a 	sll	r3,r9,r2
1001141c:	198cb03a 	or	r6,r3,r6
10011420:	300cc03a 	cmpne	r6,r6,zero
10011424:	218cb03a 	or	r6,r4,r6
10011428:	0007883a 	mov	r3,zero
1001142c:	003f3b06 	br	1001111c <__alt_data_end+0xf801111c>
10011430:	80002a26 	beq	r16,zero,100114dc <__adddf3+0x51c>
10011434:	0101ffc4 	movi	r4,2047
10011438:	11006826 	beq	r2,r4,100115dc <__adddf3+0x61c>
1001143c:	00c7c83a 	sub	r3,zero,r3
10011440:	42002034 	orhi	r8,r8,128
10011444:	01000e04 	movi	r4,56
10011448:	20c07c16 	blt	r4,r3,1001163c <__adddf3+0x67c>
1001144c:	010007c4 	movi	r4,31
10011450:	20c0da16 	blt	r4,r3,100117bc <__adddf3+0x7fc>
10011454:	01000804 	movi	r4,32
10011458:	20c9c83a 	sub	r4,r4,r3
1001145c:	4114983a 	sll	r10,r8,r4
10011460:	88cad83a 	srl	r5,r17,r3
10011464:	8908983a 	sll	r4,r17,r4
10011468:	40c6d83a 	srl	r3,r8,r3
1001146c:	5162b03a 	or	r17,r10,r5
10011470:	2008c03a 	cmpne	r4,r4,zero
10011474:	8922b03a 	or	r17,r17,r4
10011478:	3463c83a 	sub	r17,r6,r17
1001147c:	48c7c83a 	sub	r3,r9,r3
10011480:	344d803a 	cmpltu	r6,r6,r17
10011484:	1991c83a 	sub	r8,r3,r6
10011488:	1021883a 	mov	r16,r2
1001148c:	3825883a 	mov	r18,r7
10011490:	003f2706 	br	10011130 <__alt_data_end+0xf8011130>
10011494:	24d0b03a 	or	r8,r4,r19
10011498:	40001b1e 	bne	r8,zero,10011508 <__adddf3+0x548>
1001149c:	0005883a 	mov	r2,zero
100114a0:	0007883a 	mov	r3,zero
100114a4:	0021883a 	mov	r16,zero
100114a8:	003f4d06 	br	100111e0 <__alt_data_end+0xf80111e0>
100114ac:	008007c4 	movi	r2,31
100114b0:	11003c16 	blt	r2,r4,100115a4 <__adddf3+0x5e4>
100114b4:	00800804 	movi	r2,32
100114b8:	1105c83a 	sub	r2,r2,r4
100114bc:	488e983a 	sll	r7,r9,r2
100114c0:	310ad83a 	srl	r5,r6,r4
100114c4:	3084983a 	sll	r2,r6,r2
100114c8:	4912d83a 	srl	r9,r9,r4
100114cc:	394ab03a 	or	r5,r7,r5
100114d0:	1004c03a 	cmpne	r2,r2,zero
100114d4:	288ab03a 	or	r5,r5,r2
100114d8:	003f5306 	br	10011228 <__alt_data_end+0xf8011228>
100114dc:	4448b03a 	or	r4,r8,r17
100114e0:	20003e26 	beq	r4,zero,100115dc <__adddf3+0x61c>
100114e4:	00c6303a 	nor	r3,zero,r3
100114e8:	18003a1e 	bne	r3,zero,100115d4 <__adddf3+0x614>
100114ec:	3463c83a 	sub	r17,r6,r17
100114f0:	4a07c83a 	sub	r3,r9,r8
100114f4:	344d803a 	cmpltu	r6,r6,r17
100114f8:	1991c83a 	sub	r8,r3,r6
100114fc:	1021883a 	mov	r16,r2
10011500:	3825883a 	mov	r18,r7
10011504:	003f0a06 	br	10011130 <__alt_data_end+0xf8011130>
10011508:	2023883a 	mov	r17,r4
1001150c:	003f0d06 	br	10011144 <__alt_data_end+0xf8011144>
10011510:	0081ffc4 	movi	r2,2047
10011514:	80bf3f1e 	bne	r16,r2,10011214 <__alt_data_end+0xf8011214>
10011518:	003ec806 	br	1001103c <__alt_data_end+0xf801103c>
1001151c:	0005883a 	mov	r2,zero
10011520:	003fb106 	br	100113e8 <__alt_data_end+0xf80113e8>
10011524:	0007883a 	mov	r3,zero
10011528:	003fbc06 	br	1001141c <__alt_data_end+0xf801141c>
1001152c:	4444b03a 	or	r2,r8,r17
10011530:	8000871e 	bne	r16,zero,10011750 <__adddf3+0x790>
10011534:	1000ba26 	beq	r2,zero,10011820 <__adddf3+0x860>
10011538:	4984b03a 	or	r2,r9,r6
1001153c:	103ebf26 	beq	r2,zero,1001103c <__alt_data_end+0xf801103c>
10011540:	8985883a 	add	r2,r17,r6
10011544:	4247883a 	add	r3,r8,r9
10011548:	1451803a 	cmpltu	r8,r2,r17
1001154c:	40d1883a 	add	r8,r8,r3
10011550:	40c0202c 	andhi	r3,r8,128
10011554:	1023883a 	mov	r17,r2
10011558:	183f1a26 	beq	r3,zero,100111c4 <__alt_data_end+0xf80111c4>
1001155c:	00bfe034 	movhi	r2,65408
10011560:	10bfffc4 	addi	r2,r2,-1
10011564:	2021883a 	mov	r16,r4
10011568:	4090703a 	and	r8,r8,r2
1001156c:	003eb306 	br	1001103c <__alt_data_end+0xf801103c>
10011570:	4444b03a 	or	r2,r8,r17
10011574:	8000291e 	bne	r16,zero,1001161c <__adddf3+0x65c>
10011578:	10004b1e 	bne	r2,zero,100116a8 <__adddf3+0x6e8>
1001157c:	4990b03a 	or	r8,r9,r6
10011580:	40008b26 	beq	r8,zero,100117b0 <__adddf3+0x7f0>
10011584:	4811883a 	mov	r8,r9
10011588:	3023883a 	mov	r17,r6
1001158c:	3825883a 	mov	r18,r7
10011590:	003eaa06 	br	1001103c <__alt_data_end+0xf801103c>
10011594:	1021883a 	mov	r16,r2
10011598:	0011883a 	mov	r8,zero
1001159c:	0005883a 	mov	r2,zero
100115a0:	003f0f06 	br	100111e0 <__alt_data_end+0xf80111e0>
100115a4:	217ff804 	addi	r5,r4,-32
100115a8:	00800804 	movi	r2,32
100115ac:	494ad83a 	srl	r5,r9,r5
100115b0:	20807d26 	beq	r4,r2,100117a8 <__adddf3+0x7e8>
100115b4:	00801004 	movi	r2,64
100115b8:	1109c83a 	sub	r4,r2,r4
100115bc:	4912983a 	sll	r9,r9,r4
100115c0:	498cb03a 	or	r6,r9,r6
100115c4:	300cc03a 	cmpne	r6,r6,zero
100115c8:	298ab03a 	or	r5,r5,r6
100115cc:	0013883a 	mov	r9,zero
100115d0:	003f1506 	br	10011228 <__alt_data_end+0xf8011228>
100115d4:	0101ffc4 	movi	r4,2047
100115d8:	113f9a1e 	bne	r2,r4,10011444 <__alt_data_end+0xf8011444>
100115dc:	4811883a 	mov	r8,r9
100115e0:	3023883a 	mov	r17,r6
100115e4:	1021883a 	mov	r16,r2
100115e8:	3825883a 	mov	r18,r7
100115ec:	003e9306 	br	1001103c <__alt_data_end+0xf801103c>
100115f0:	8000161e 	bne	r16,zero,1001164c <__adddf3+0x68c>
100115f4:	444ab03a 	or	r5,r8,r17
100115f8:	28005126 	beq	r5,zero,10011740 <__adddf3+0x780>
100115fc:	0108303a 	nor	r4,zero,r4
10011600:	20004d1e 	bne	r4,zero,10011738 <__adddf3+0x778>
10011604:	89a3883a 	add	r17,r17,r6
10011608:	4253883a 	add	r9,r8,r9
1001160c:	898d803a 	cmpltu	r6,r17,r6
10011610:	3251883a 	add	r8,r6,r9
10011614:	1021883a 	mov	r16,r2
10011618:	003f0806 	br	1001123c <__alt_data_end+0xf801123c>
1001161c:	1000301e 	bne	r2,zero,100116e0 <__adddf3+0x720>
10011620:	4984b03a 	or	r2,r9,r6
10011624:	10007126 	beq	r2,zero,100117ec <__adddf3+0x82c>
10011628:	4811883a 	mov	r8,r9
1001162c:	3023883a 	mov	r17,r6
10011630:	3825883a 	mov	r18,r7
10011634:	0401ffc4 	movi	r16,2047
10011638:	003e8006 	br	1001103c <__alt_data_end+0xf801103c>
1001163c:	4462b03a 	or	r17,r8,r17
10011640:	8822c03a 	cmpne	r17,r17,zero
10011644:	0007883a 	mov	r3,zero
10011648:	003f8b06 	br	10011478 <__alt_data_end+0xf8011478>
1001164c:	0141ffc4 	movi	r5,2047
10011650:	11403b26 	beq	r2,r5,10011740 <__adddf3+0x780>
10011654:	0109c83a 	sub	r4,zero,r4
10011658:	42002034 	orhi	r8,r8,128
1001165c:	01400e04 	movi	r5,56
10011660:	29006716 	blt	r5,r4,10011800 <__adddf3+0x840>
10011664:	014007c4 	movi	r5,31
10011668:	29007016 	blt	r5,r4,1001182c <__adddf3+0x86c>
1001166c:	01400804 	movi	r5,32
10011670:	290bc83a 	sub	r5,r5,r4
10011674:	4154983a 	sll	r10,r8,r5
10011678:	890ed83a 	srl	r7,r17,r4
1001167c:	894a983a 	sll	r5,r17,r5
10011680:	4108d83a 	srl	r4,r8,r4
10011684:	51e2b03a 	or	r17,r10,r7
10011688:	280ac03a 	cmpne	r5,r5,zero
1001168c:	8962b03a 	or	r17,r17,r5
10011690:	89a3883a 	add	r17,r17,r6
10011694:	2253883a 	add	r9,r4,r9
10011698:	898d803a 	cmpltu	r6,r17,r6
1001169c:	3251883a 	add	r8,r6,r9
100116a0:	1021883a 	mov	r16,r2
100116a4:	003ee506 	br	1001123c <__alt_data_end+0xf801123c>
100116a8:	4984b03a 	or	r2,r9,r6
100116ac:	103e6326 	beq	r2,zero,1001103c <__alt_data_end+0xf801103c>
100116b0:	8987c83a 	sub	r3,r17,r6
100116b4:	88c9803a 	cmpltu	r4,r17,r3
100116b8:	4245c83a 	sub	r2,r8,r9
100116bc:	1105c83a 	sub	r2,r2,r4
100116c0:	1100202c 	andhi	r4,r2,128
100116c4:	203ebb26 	beq	r4,zero,100111b4 <__alt_data_end+0xf80111b4>
100116c8:	3463c83a 	sub	r17,r6,r17
100116cc:	4a07c83a 	sub	r3,r9,r8
100116d0:	344d803a 	cmpltu	r6,r6,r17
100116d4:	1991c83a 	sub	r8,r3,r6
100116d8:	3825883a 	mov	r18,r7
100116dc:	003e5706 	br	1001103c <__alt_data_end+0xf801103c>
100116e0:	4984b03a 	or	r2,r9,r6
100116e4:	10002e26 	beq	r2,zero,100117a0 <__adddf3+0x7e0>
100116e8:	4004d0fa 	srli	r2,r8,3
100116ec:	8822d0fa 	srli	r17,r17,3
100116f0:	4010977a 	slli	r8,r8,29
100116f4:	10c0022c 	andhi	r3,r2,8
100116f8:	4462b03a 	or	r17,r8,r17
100116fc:	18000826 	beq	r3,zero,10011720 <__adddf3+0x760>
10011700:	4808d0fa 	srli	r4,r9,3
10011704:	20c0022c 	andhi	r3,r4,8
10011708:	1800051e 	bne	r3,zero,10011720 <__adddf3+0x760>
1001170c:	300cd0fa 	srli	r6,r6,3
10011710:	4806977a 	slli	r3,r9,29
10011714:	2005883a 	mov	r2,r4
10011718:	3825883a 	mov	r18,r7
1001171c:	19a2b03a 	or	r17,r3,r6
10011720:	8810d77a 	srli	r8,r17,29
10011724:	100490fa 	slli	r2,r2,3
10011728:	882290fa 	slli	r17,r17,3
1001172c:	0401ffc4 	movi	r16,2047
10011730:	4090b03a 	or	r8,r8,r2
10011734:	003e4106 	br	1001103c <__alt_data_end+0xf801103c>
10011738:	0141ffc4 	movi	r5,2047
1001173c:	117fc71e 	bne	r2,r5,1001165c <__alt_data_end+0xf801165c>
10011740:	4811883a 	mov	r8,r9
10011744:	3023883a 	mov	r17,r6
10011748:	1021883a 	mov	r16,r2
1001174c:	003e3b06 	br	1001103c <__alt_data_end+0xf801103c>
10011750:	10002f26 	beq	r2,zero,10011810 <__adddf3+0x850>
10011754:	4984b03a 	or	r2,r9,r6
10011758:	10001126 	beq	r2,zero,100117a0 <__adddf3+0x7e0>
1001175c:	4004d0fa 	srli	r2,r8,3
10011760:	8822d0fa 	srli	r17,r17,3
10011764:	4010977a 	slli	r8,r8,29
10011768:	10c0022c 	andhi	r3,r2,8
1001176c:	4462b03a 	or	r17,r8,r17
10011770:	183feb26 	beq	r3,zero,10011720 <__alt_data_end+0xf8011720>
10011774:	4808d0fa 	srli	r4,r9,3
10011778:	20c0022c 	andhi	r3,r4,8
1001177c:	183fe81e 	bne	r3,zero,10011720 <__alt_data_end+0xf8011720>
10011780:	300cd0fa 	srli	r6,r6,3
10011784:	4806977a 	slli	r3,r9,29
10011788:	2005883a 	mov	r2,r4
1001178c:	19a2b03a 	or	r17,r3,r6
10011790:	003fe306 	br	10011720 <__alt_data_end+0xf8011720>
10011794:	0011883a 	mov	r8,zero
10011798:	0005883a 	mov	r2,zero
1001179c:	003e3f06 	br	1001109c <__alt_data_end+0xf801109c>
100117a0:	0401ffc4 	movi	r16,2047
100117a4:	003e2506 	br	1001103c <__alt_data_end+0xf801103c>
100117a8:	0013883a 	mov	r9,zero
100117ac:	003f8406 	br	100115c0 <__alt_data_end+0xf80115c0>
100117b0:	0005883a 	mov	r2,zero
100117b4:	0007883a 	mov	r3,zero
100117b8:	003e8906 	br	100111e0 <__alt_data_end+0xf80111e0>
100117bc:	197ff804 	addi	r5,r3,-32
100117c0:	01000804 	movi	r4,32
100117c4:	414ad83a 	srl	r5,r8,r5
100117c8:	19002426 	beq	r3,r4,1001185c <__adddf3+0x89c>
100117cc:	01001004 	movi	r4,64
100117d0:	20c7c83a 	sub	r3,r4,r3
100117d4:	40c6983a 	sll	r3,r8,r3
100117d8:	1c46b03a 	or	r3,r3,r17
100117dc:	1806c03a 	cmpne	r3,r3,zero
100117e0:	28e2b03a 	or	r17,r5,r3
100117e4:	0007883a 	mov	r3,zero
100117e8:	003f2306 	br	10011478 <__alt_data_end+0xf8011478>
100117ec:	0007883a 	mov	r3,zero
100117f0:	5811883a 	mov	r8,r11
100117f4:	00bfffc4 	movi	r2,-1
100117f8:	0401ffc4 	movi	r16,2047
100117fc:	003e7806 	br	100111e0 <__alt_data_end+0xf80111e0>
10011800:	4462b03a 	or	r17,r8,r17
10011804:	8822c03a 	cmpne	r17,r17,zero
10011808:	0009883a 	mov	r4,zero
1001180c:	003fa006 	br	10011690 <__alt_data_end+0xf8011690>
10011810:	4811883a 	mov	r8,r9
10011814:	3023883a 	mov	r17,r6
10011818:	0401ffc4 	movi	r16,2047
1001181c:	003e0706 	br	1001103c <__alt_data_end+0xf801103c>
10011820:	4811883a 	mov	r8,r9
10011824:	3023883a 	mov	r17,r6
10011828:	003e0406 	br	1001103c <__alt_data_end+0xf801103c>
1001182c:	21fff804 	addi	r7,r4,-32
10011830:	01400804 	movi	r5,32
10011834:	41ced83a 	srl	r7,r8,r7
10011838:	21400a26 	beq	r4,r5,10011864 <__adddf3+0x8a4>
1001183c:	01401004 	movi	r5,64
10011840:	2909c83a 	sub	r4,r5,r4
10011844:	4108983a 	sll	r4,r8,r4
10011848:	2448b03a 	or	r4,r4,r17
1001184c:	2008c03a 	cmpne	r4,r4,zero
10011850:	3922b03a 	or	r17,r7,r4
10011854:	0009883a 	mov	r4,zero
10011858:	003f8d06 	br	10011690 <__alt_data_end+0xf8011690>
1001185c:	0007883a 	mov	r3,zero
10011860:	003fdd06 	br	100117d8 <__alt_data_end+0xf80117d8>
10011864:	0009883a 	mov	r4,zero
10011868:	003ff706 	br	10011848 <__alt_data_end+0xf8011848>

1001186c <__divdf3>:
1001186c:	defff004 	addi	sp,sp,-64
10011870:	dc800815 	stw	r18,32(sp)
10011874:	2824d53a 	srli	r18,r5,20
10011878:	dd800c15 	stw	r22,48(sp)
1001187c:	282cd7fa 	srli	r22,r5,31
10011880:	dc000615 	stw	r16,24(sp)
10011884:	04000434 	movhi	r16,16
10011888:	843fffc4 	addi	r16,r16,-1
1001188c:	dfc00f15 	stw	ra,60(sp)
10011890:	df000e15 	stw	fp,56(sp)
10011894:	ddc00d15 	stw	r23,52(sp)
10011898:	dd400b15 	stw	r21,44(sp)
1001189c:	dd000a15 	stw	r20,40(sp)
100118a0:	dcc00915 	stw	r19,36(sp)
100118a4:	dc400715 	stw	r17,28(sp)
100118a8:	9481ffcc 	andi	r18,r18,2047
100118ac:	2c20703a 	and	r16,r5,r16
100118b0:	b2003fcc 	andi	r8,r22,255
100118b4:	90006126 	beq	r18,zero,10011a3c <__divdf3+0x1d0>
100118b8:	0081ffc4 	movi	r2,2047
100118bc:	202b883a 	mov	r21,r4
100118c0:	90803726 	beq	r18,r2,100119a0 <__divdf3+0x134>
100118c4:	80800434 	orhi	r2,r16,16
100118c8:	100490fa 	slli	r2,r2,3
100118cc:	2020d77a 	srli	r16,r4,29
100118d0:	202a90fa 	slli	r21,r4,3
100118d4:	94bf0044 	addi	r18,r18,-1023
100118d8:	80a0b03a 	or	r16,r16,r2
100118dc:	0013883a 	mov	r9,zero
100118e0:	000b883a 	mov	r5,zero
100118e4:	3806d53a 	srli	r3,r7,20
100118e8:	382ed7fa 	srli	r23,r7,31
100118ec:	04400434 	movhi	r17,16
100118f0:	8c7fffc4 	addi	r17,r17,-1
100118f4:	18c1ffcc 	andi	r3,r3,2047
100118f8:	3029883a 	mov	r20,r6
100118fc:	3c62703a 	and	r17,r7,r17
10011900:	bf003fcc 	andi	fp,r23,255
10011904:	18006e26 	beq	r3,zero,10011ac0 <__divdf3+0x254>
10011908:	0081ffc4 	movi	r2,2047
1001190c:	18806626 	beq	r3,r2,10011aa8 <__divdf3+0x23c>
10011910:	88800434 	orhi	r2,r17,16
10011914:	100490fa 	slli	r2,r2,3
10011918:	3022d77a 	srli	r17,r6,29
1001191c:	302890fa 	slli	r20,r6,3
10011920:	18ff0044 	addi	r3,r3,-1023
10011924:	88a2b03a 	or	r17,r17,r2
10011928:	000f883a 	mov	r7,zero
1001192c:	b5e6f03a 	xor	r19,r22,r23
10011930:	3a4cb03a 	or	r6,r7,r9
10011934:	008003c4 	movi	r2,15
10011938:	9809883a 	mov	r4,r19
1001193c:	90c7c83a 	sub	r3,r18,r3
10011940:	9cc03fcc 	andi	r19,r19,255
10011944:	11809636 	bltu	r2,r6,10011ba0 <__divdf3+0x334>
10011948:	300c90ba 	slli	r6,r6,2
1001194c:	00840074 	movhi	r2,4097
10011950:	10865804 	addi	r2,r2,6496
10011954:	308d883a 	add	r6,r6,r2
10011958:	30800017 	ldw	r2,0(r6)
1001195c:	1000683a 	jmp	r2
10011960:	10011ba0 	cmpeqi	zero,r2,1134
10011964:	100119d8 	cmpnei	zero,r2,1127
10011968:	10011b90 	cmplti	zero,r2,1134
1001196c:	100119cc 	andi	zero,r2,1127
10011970:	10011b90 	cmplti	zero,r2,1134
10011974:	10011b64 	muli	zero,r2,1133
10011978:	10011b90 	cmplti	zero,r2,1134
1001197c:	100119cc 	andi	zero,r2,1127
10011980:	100119d8 	cmpnei	zero,r2,1127
10011984:	100119d8 	cmpnei	zero,r2,1127
10011988:	10011b64 	muli	zero,r2,1133
1001198c:	100119cc 	andi	zero,r2,1127
10011990:	100119bc 	xorhi	zero,r2,1126
10011994:	100119bc 	xorhi	zero,r2,1126
10011998:	100119bc 	xorhi	zero,r2,1126
1001199c:	10011f28 	cmpgeui	zero,r2,1148
100119a0:	2404b03a 	or	r2,r4,r16
100119a4:	10006c1e 	bne	r2,zero,10011b58 <__divdf3+0x2ec>
100119a8:	02400204 	movi	r9,8
100119ac:	0021883a 	mov	r16,zero
100119b0:	002b883a 	mov	r21,zero
100119b4:	01400084 	movi	r5,2
100119b8:	003fca06 	br	100118e4 <__alt_data_end+0xf80118e4>
100119bc:	8023883a 	mov	r17,r16
100119c0:	a829883a 	mov	r20,r21
100119c4:	4039883a 	mov	fp,r8
100119c8:	280f883a 	mov	r7,r5
100119cc:	00800084 	movi	r2,2
100119d0:	3881601e 	bne	r7,r2,10011f54 <__divdf3+0x6e8>
100119d4:	e027883a 	mov	r19,fp
100119d8:	9900004c 	andi	r4,r19,1
100119dc:	0081ffc4 	movi	r2,2047
100119e0:	0021883a 	mov	r16,zero
100119e4:	002b883a 	mov	r21,zero
100119e8:	1004953a 	slli	r2,r2,20
100119ec:	20c03fcc 	andi	r3,r4,255
100119f0:	01400434 	movhi	r5,16
100119f4:	297fffc4 	addi	r5,r5,-1
100119f8:	180697fa 	slli	r3,r3,31
100119fc:	8160703a 	and	r16,r16,r5
10011a00:	80a0b03a 	or	r16,r16,r2
10011a04:	80c6b03a 	or	r3,r16,r3
10011a08:	a805883a 	mov	r2,r21
10011a0c:	dfc00f17 	ldw	ra,60(sp)
10011a10:	df000e17 	ldw	fp,56(sp)
10011a14:	ddc00d17 	ldw	r23,52(sp)
10011a18:	dd800c17 	ldw	r22,48(sp)
10011a1c:	dd400b17 	ldw	r21,44(sp)
10011a20:	dd000a17 	ldw	r20,40(sp)
10011a24:	dcc00917 	ldw	r19,36(sp)
10011a28:	dc800817 	ldw	r18,32(sp)
10011a2c:	dc400717 	ldw	r17,28(sp)
10011a30:	dc000617 	ldw	r16,24(sp)
10011a34:	dec01004 	addi	sp,sp,64
10011a38:	f800283a 	ret
10011a3c:	2404b03a 	or	r2,r4,r16
10011a40:	2023883a 	mov	r17,r4
10011a44:	10003f26 	beq	r2,zero,10011b44 <__divdf3+0x2d8>
10011a48:	80015e26 	beq	r16,zero,10011fc4 <__divdf3+0x758>
10011a4c:	8009883a 	mov	r4,r16
10011a50:	d9800215 	stw	r6,8(sp)
10011a54:	d9c00515 	stw	r7,20(sp)
10011a58:	da000415 	stw	r8,16(sp)
10011a5c:	00138000 	call	10013800 <__clzsi2>
10011a60:	d9800217 	ldw	r6,8(sp)
10011a64:	d9c00517 	ldw	r7,20(sp)
10011a68:	da000417 	ldw	r8,16(sp)
10011a6c:	113ffd44 	addi	r4,r2,-11
10011a70:	00c00704 	movi	r3,28
10011a74:	19014f16 	blt	r3,r4,10011fb4 <__divdf3+0x748>
10011a78:	00c00744 	movi	r3,29
10011a7c:	157ffe04 	addi	r21,r2,-8
10011a80:	1907c83a 	sub	r3,r3,r4
10011a84:	8560983a 	sll	r16,r16,r21
10011a88:	88c6d83a 	srl	r3,r17,r3
10011a8c:	8d6a983a 	sll	r21,r17,r21
10011a90:	1c20b03a 	or	r16,r3,r16
10011a94:	1080fcc4 	addi	r2,r2,1011
10011a98:	00a5c83a 	sub	r18,zero,r2
10011a9c:	0013883a 	mov	r9,zero
10011aa0:	000b883a 	mov	r5,zero
10011aa4:	003f8f06 	br	100118e4 <__alt_data_end+0xf80118e4>
10011aa8:	3444b03a 	or	r2,r6,r17
10011aac:	1000231e 	bne	r2,zero,10011b3c <__divdf3+0x2d0>
10011ab0:	0023883a 	mov	r17,zero
10011ab4:	0029883a 	mov	r20,zero
10011ab8:	01c00084 	movi	r7,2
10011abc:	003f9b06 	br	1001192c <__alt_data_end+0xf801192c>
10011ac0:	3444b03a 	or	r2,r6,r17
10011ac4:	10001926 	beq	r2,zero,10011b2c <__divdf3+0x2c0>
10011ac8:	88014b26 	beq	r17,zero,10011ff8 <__divdf3+0x78c>
10011acc:	8809883a 	mov	r4,r17
10011ad0:	d9400115 	stw	r5,4(sp)
10011ad4:	d9800215 	stw	r6,8(sp)
10011ad8:	da000415 	stw	r8,16(sp)
10011adc:	da400315 	stw	r9,12(sp)
10011ae0:	00138000 	call	10013800 <__clzsi2>
10011ae4:	d9400117 	ldw	r5,4(sp)
10011ae8:	d9800217 	ldw	r6,8(sp)
10011aec:	da000417 	ldw	r8,16(sp)
10011af0:	da400317 	ldw	r9,12(sp)
10011af4:	113ffd44 	addi	r4,r2,-11
10011af8:	00c00704 	movi	r3,28
10011afc:	19013a16 	blt	r3,r4,10011fe8 <__divdf3+0x77c>
10011b00:	00c00744 	movi	r3,29
10011b04:	153ffe04 	addi	r20,r2,-8
10011b08:	1907c83a 	sub	r3,r3,r4
10011b0c:	8d22983a 	sll	r17,r17,r20
10011b10:	30c6d83a 	srl	r3,r6,r3
10011b14:	3528983a 	sll	r20,r6,r20
10011b18:	1c62b03a 	or	r17,r3,r17
10011b1c:	1080fcc4 	addi	r2,r2,1011
10011b20:	0087c83a 	sub	r3,zero,r2
10011b24:	000f883a 	mov	r7,zero
10011b28:	003f8006 	br	1001192c <__alt_data_end+0xf801192c>
10011b2c:	0023883a 	mov	r17,zero
10011b30:	0029883a 	mov	r20,zero
10011b34:	01c00044 	movi	r7,1
10011b38:	003f7c06 	br	1001192c <__alt_data_end+0xf801192c>
10011b3c:	01c000c4 	movi	r7,3
10011b40:	003f7a06 	br	1001192c <__alt_data_end+0xf801192c>
10011b44:	02400104 	movi	r9,4
10011b48:	0021883a 	mov	r16,zero
10011b4c:	002b883a 	mov	r21,zero
10011b50:	01400044 	movi	r5,1
10011b54:	003f6306 	br	100118e4 <__alt_data_end+0xf80118e4>
10011b58:	02400304 	movi	r9,12
10011b5c:	014000c4 	movi	r5,3
10011b60:	003f6006 	br	100118e4 <__alt_data_end+0xf80118e4>
10011b64:	04000434 	movhi	r16,16
10011b68:	0009883a 	mov	r4,zero
10011b6c:	843fffc4 	addi	r16,r16,-1
10011b70:	057fffc4 	movi	r21,-1
10011b74:	0081ffc4 	movi	r2,2047
10011b78:	003f9b06 	br	100119e8 <__alt_data_end+0xf80119e8>
10011b7c:	00c00044 	movi	r3,1
10011b80:	1887c83a 	sub	r3,r3,r2
10011b84:	01000e04 	movi	r4,56
10011b88:	20c1530e 	bge	r4,r3,100120d8 <__divdf3+0x86c>
10011b8c:	9900004c 	andi	r4,r19,1
10011b90:	0005883a 	mov	r2,zero
10011b94:	0021883a 	mov	r16,zero
10011b98:	002b883a 	mov	r21,zero
10011b9c:	003f9206 	br	100119e8 <__alt_data_end+0xf80119e8>
10011ba0:	8c012e36 	bltu	r17,r16,1001205c <__divdf3+0x7f0>
10011ba4:	84412c26 	beq	r16,r17,10012058 <__divdf3+0x7ec>
10011ba8:	a82f883a 	mov	r23,r21
10011bac:	18ffffc4 	addi	r3,r3,-1
10011bb0:	002b883a 	mov	r21,zero
10011bb4:	a004d63a 	srli	r2,r20,24
10011bb8:	8822923a 	slli	r17,r17,8
10011bbc:	a028923a 	slli	r20,r20,8
10011bc0:	8009883a 	mov	r4,r16
10011bc4:	88acb03a 	or	r22,r17,r2
10011bc8:	dd000015 	stw	r20,0(sp)
10011bcc:	b028d43a 	srli	r20,r22,16
10011bd0:	d8c00215 	stw	r3,8(sp)
10011bd4:	b4bfffcc 	andi	r18,r22,65535
10011bd8:	a00b883a 	mov	r5,r20
10011bdc:	0006a1c0 	call	10006a1c <__udivsi3>
10011be0:	100b883a 	mov	r5,r2
10011be4:	9009883a 	mov	r4,r18
10011be8:	1023883a 	mov	r17,r2
10011bec:	0006ad80 	call	10006ad8 <__mulsi3>
10011bf0:	8009883a 	mov	r4,r16
10011bf4:	a00b883a 	mov	r5,r20
10011bf8:	1039883a 	mov	fp,r2
10011bfc:	0006a800 	call	10006a80 <__umodsi3>
10011c00:	1004943a 	slli	r2,r2,16
10011c04:	b808d43a 	srli	r4,r23,16
10011c08:	d8c00217 	ldw	r3,8(sp)
10011c0c:	2084b03a 	or	r2,r4,r2
10011c10:	1700062e 	bgeu	r2,fp,10011c2c <__divdf3+0x3c0>
10011c14:	1585883a 	add	r2,r2,r22
10011c18:	893fffc4 	addi	r4,r17,-1
10011c1c:	15811d36 	bltu	r2,r22,10012094 <__divdf3+0x828>
10011c20:	17011c2e 	bgeu	r2,fp,10012094 <__divdf3+0x828>
10011c24:	8c7fff84 	addi	r17,r17,-2
10011c28:	1585883a 	add	r2,r2,r22
10011c2c:	1739c83a 	sub	fp,r2,fp
10011c30:	a00b883a 	mov	r5,r20
10011c34:	e009883a 	mov	r4,fp
10011c38:	d8c00215 	stw	r3,8(sp)
10011c3c:	0006a1c0 	call	10006a1c <__udivsi3>
10011c40:	100b883a 	mov	r5,r2
10011c44:	9009883a 	mov	r4,r18
10011c48:	1021883a 	mov	r16,r2
10011c4c:	0006ad80 	call	10006ad8 <__mulsi3>
10011c50:	a00b883a 	mov	r5,r20
10011c54:	e009883a 	mov	r4,fp
10011c58:	d8800415 	stw	r2,16(sp)
10011c5c:	0006a800 	call	10006a80 <__umodsi3>
10011c60:	1004943a 	slli	r2,r2,16
10011c64:	da000417 	ldw	r8,16(sp)
10011c68:	bdffffcc 	andi	r23,r23,65535
10011c6c:	b884b03a 	or	r2,r23,r2
10011c70:	d8c00217 	ldw	r3,8(sp)
10011c74:	1200062e 	bgeu	r2,r8,10011c90 <__divdf3+0x424>
10011c78:	1585883a 	add	r2,r2,r22
10011c7c:	813fffc4 	addi	r4,r16,-1
10011c80:	15810236 	bltu	r2,r22,1001208c <__divdf3+0x820>
10011c84:	1201012e 	bgeu	r2,r8,1001208c <__divdf3+0x820>
10011c88:	843fff84 	addi	r16,r16,-2
10011c8c:	1585883a 	add	r2,r2,r22
10011c90:	8822943a 	slli	r17,r17,16
10011c94:	d9800017 	ldw	r6,0(sp)
10011c98:	1211c83a 	sub	r8,r2,r8
10011c9c:	8c22b03a 	or	r17,r17,r16
10011ca0:	373fffcc 	andi	fp,r6,65535
10011ca4:	8abfffcc 	andi	r10,r17,65535
10011ca8:	8820d43a 	srli	r16,r17,16
10011cac:	5009883a 	mov	r4,r10
10011cb0:	e00b883a 	mov	r5,fp
10011cb4:	302ed43a 	srli	r23,r6,16
10011cb8:	d8c00215 	stw	r3,8(sp)
10011cbc:	da000415 	stw	r8,16(sp)
10011cc0:	da800115 	stw	r10,4(sp)
10011cc4:	0006ad80 	call	10006ad8 <__mulsi3>
10011cc8:	800b883a 	mov	r5,r16
10011ccc:	e009883a 	mov	r4,fp
10011cd0:	d8800515 	stw	r2,20(sp)
10011cd4:	0006ad80 	call	10006ad8 <__mulsi3>
10011cd8:	8009883a 	mov	r4,r16
10011cdc:	b80b883a 	mov	r5,r23
10011ce0:	d8800315 	stw	r2,12(sp)
10011ce4:	0006ad80 	call	10006ad8 <__mulsi3>
10011ce8:	da800117 	ldw	r10,4(sp)
10011cec:	b80b883a 	mov	r5,r23
10011cf0:	1021883a 	mov	r16,r2
10011cf4:	5009883a 	mov	r4,r10
10011cf8:	0006ad80 	call	10006ad8 <__mulsi3>
10011cfc:	d9c00517 	ldw	r7,20(sp)
10011d00:	da400317 	ldw	r9,12(sp)
10011d04:	d8c00217 	ldw	r3,8(sp)
10011d08:	3808d43a 	srli	r4,r7,16
10011d0c:	1245883a 	add	r2,r2,r9
10011d10:	da000417 	ldw	r8,16(sp)
10011d14:	2085883a 	add	r2,r4,r2
10011d18:	1240022e 	bgeu	r2,r9,10011d24 <__divdf3+0x4b8>
10011d1c:	01000074 	movhi	r4,1
10011d20:	8121883a 	add	r16,r16,r4
10011d24:	1008d43a 	srli	r4,r2,16
10011d28:	1004943a 	slli	r2,r2,16
10011d2c:	39ffffcc 	andi	r7,r7,65535
10011d30:	2409883a 	add	r4,r4,r16
10011d34:	11c5883a 	add	r2,r2,r7
10011d38:	4100bb36 	bltu	r8,r4,10012028 <__divdf3+0x7bc>
10011d3c:	4100d726 	beq	r8,r4,1001209c <__divdf3+0x830>
10011d40:	4109c83a 	sub	r4,r8,r4
10011d44:	a8a1c83a 	sub	r16,r21,r2
10011d48:	ac2b803a 	cmpltu	r21,r21,r16
10011d4c:	256bc83a 	sub	r21,r4,r21
10011d50:	b540d926 	beq	r22,r21,100120b8 <__divdf3+0x84c>
10011d54:	a00b883a 	mov	r5,r20
10011d58:	a809883a 	mov	r4,r21
10011d5c:	d8c00215 	stw	r3,8(sp)
10011d60:	0006a1c0 	call	10006a1c <__udivsi3>
10011d64:	100b883a 	mov	r5,r2
10011d68:	9009883a 	mov	r4,r18
10011d6c:	d8800515 	stw	r2,20(sp)
10011d70:	0006ad80 	call	10006ad8 <__mulsi3>
10011d74:	a809883a 	mov	r4,r21
10011d78:	a00b883a 	mov	r5,r20
10011d7c:	d8800415 	stw	r2,16(sp)
10011d80:	0006a800 	call	10006a80 <__umodsi3>
10011d84:	1004943a 	slli	r2,r2,16
10011d88:	8008d43a 	srli	r4,r16,16
10011d8c:	da000417 	ldw	r8,16(sp)
10011d90:	d8c00217 	ldw	r3,8(sp)
10011d94:	2084b03a 	or	r2,r4,r2
10011d98:	d9c00517 	ldw	r7,20(sp)
10011d9c:	1200062e 	bgeu	r2,r8,10011db8 <__divdf3+0x54c>
10011da0:	1585883a 	add	r2,r2,r22
10011da4:	393fffc4 	addi	r4,r7,-1
10011da8:	1580c536 	bltu	r2,r22,100120c0 <__divdf3+0x854>
10011dac:	1200c42e 	bgeu	r2,r8,100120c0 <__divdf3+0x854>
10011db0:	39ffff84 	addi	r7,r7,-2
10011db4:	1585883a 	add	r2,r2,r22
10011db8:	122bc83a 	sub	r21,r2,r8
10011dbc:	a00b883a 	mov	r5,r20
10011dc0:	a809883a 	mov	r4,r21
10011dc4:	d8c00215 	stw	r3,8(sp)
10011dc8:	d9c00515 	stw	r7,20(sp)
10011dcc:	0006a1c0 	call	10006a1c <__udivsi3>
10011dd0:	9009883a 	mov	r4,r18
10011dd4:	100b883a 	mov	r5,r2
10011dd8:	d8800415 	stw	r2,16(sp)
10011ddc:	0006ad80 	call	10006ad8 <__mulsi3>
10011de0:	a809883a 	mov	r4,r21
10011de4:	a00b883a 	mov	r5,r20
10011de8:	1025883a 	mov	r18,r2
10011dec:	0006a800 	call	10006a80 <__umodsi3>
10011df0:	1004943a 	slli	r2,r2,16
10011df4:	813fffcc 	andi	r4,r16,65535
10011df8:	d8c00217 	ldw	r3,8(sp)
10011dfc:	20a0b03a 	or	r16,r4,r2
10011e00:	d9c00517 	ldw	r7,20(sp)
10011e04:	da000417 	ldw	r8,16(sp)
10011e08:	8480062e 	bgeu	r16,r18,10011e24 <__divdf3+0x5b8>
10011e0c:	85a1883a 	add	r16,r16,r22
10011e10:	40bfffc4 	addi	r2,r8,-1
10011e14:	8580ac36 	bltu	r16,r22,100120c8 <__divdf3+0x85c>
10011e18:	8480ab2e 	bgeu	r16,r18,100120c8 <__divdf3+0x85c>
10011e1c:	423fff84 	addi	r8,r8,-2
10011e20:	85a1883a 	add	r16,r16,r22
10011e24:	3804943a 	slli	r2,r7,16
10011e28:	84a1c83a 	sub	r16,r16,r18
10011e2c:	e009883a 	mov	r4,fp
10011e30:	1228b03a 	or	r20,r2,r8
10011e34:	a1ffffcc 	andi	r7,r20,65535
10011e38:	a024d43a 	srli	r18,r20,16
10011e3c:	380b883a 	mov	r5,r7
10011e40:	d8c00215 	stw	r3,8(sp)
10011e44:	d9c00515 	stw	r7,20(sp)
10011e48:	0006ad80 	call	10006ad8 <__mulsi3>
10011e4c:	900b883a 	mov	r5,r18
10011e50:	e009883a 	mov	r4,fp
10011e54:	102b883a 	mov	r21,r2
10011e58:	0006ad80 	call	10006ad8 <__mulsi3>
10011e5c:	900b883a 	mov	r5,r18
10011e60:	b809883a 	mov	r4,r23
10011e64:	1039883a 	mov	fp,r2
10011e68:	0006ad80 	call	10006ad8 <__mulsi3>
10011e6c:	d9c00517 	ldw	r7,20(sp)
10011e70:	b80b883a 	mov	r5,r23
10011e74:	1025883a 	mov	r18,r2
10011e78:	3809883a 	mov	r4,r7
10011e7c:	0006ad80 	call	10006ad8 <__mulsi3>
10011e80:	a808d43a 	srli	r4,r21,16
10011e84:	1705883a 	add	r2,r2,fp
10011e88:	d8c00217 	ldw	r3,8(sp)
10011e8c:	2085883a 	add	r2,r4,r2
10011e90:	1700022e 	bgeu	r2,fp,10011e9c <__divdf3+0x630>
10011e94:	01000074 	movhi	r4,1
10011e98:	9125883a 	add	r18,r18,r4
10011e9c:	1008d43a 	srli	r4,r2,16
10011ea0:	1004943a 	slli	r2,r2,16
10011ea4:	ad7fffcc 	andi	r21,r21,65535
10011ea8:	2489883a 	add	r4,r4,r18
10011eac:	1545883a 	add	r2,r2,r21
10011eb0:	81003836 	bltu	r16,r4,10011f94 <__divdf3+0x728>
10011eb4:	81003626 	beq	r16,r4,10011f90 <__divdf3+0x724>
10011eb8:	a5000054 	ori	r20,r20,1
10011ebc:	1880ffc4 	addi	r2,r3,1023
10011ec0:	00bf2e0e 	bge	zero,r2,10011b7c <__alt_data_end+0xf8011b7c>
10011ec4:	a10001cc 	andi	r4,r20,7
10011ec8:	20000726 	beq	r4,zero,10011ee8 <__divdf3+0x67c>
10011ecc:	a10003cc 	andi	r4,r20,15
10011ed0:	01400104 	movi	r5,4
10011ed4:	21400426 	beq	r4,r5,10011ee8 <__divdf3+0x67c>
10011ed8:	a149883a 	add	r4,r20,r5
10011edc:	2529803a 	cmpltu	r20,r4,r20
10011ee0:	8d23883a 	add	r17,r17,r20
10011ee4:	2029883a 	mov	r20,r4
10011ee8:	8900402c 	andhi	r4,r17,256
10011eec:	20000426 	beq	r4,zero,10011f00 <__divdf3+0x694>
10011ef0:	18810004 	addi	r2,r3,1024
10011ef4:	00ffc034 	movhi	r3,65280
10011ef8:	18ffffc4 	addi	r3,r3,-1
10011efc:	88e2703a 	and	r17,r17,r3
10011f00:	00c1ff84 	movi	r3,2046
10011f04:	18beb416 	blt	r3,r2,100119d8 <__alt_data_end+0xf80119d8>
10011f08:	a028d0fa 	srli	r20,r20,3
10011f0c:	882a977a 	slli	r21,r17,29
10011f10:	8820927a 	slli	r16,r17,9
10011f14:	1081ffcc 	andi	r2,r2,2047
10011f18:	ad2ab03a 	or	r21,r21,r20
10011f1c:	8020d33a 	srli	r16,r16,12
10011f20:	9900004c 	andi	r4,r19,1
10011f24:	003eb006 	br	100119e8 <__alt_data_end+0xf80119e8>
10011f28:	8080022c 	andhi	r2,r16,8
10011f2c:	10001226 	beq	r2,zero,10011f78 <__divdf3+0x70c>
10011f30:	8880022c 	andhi	r2,r17,8
10011f34:	1000101e 	bne	r2,zero,10011f78 <__divdf3+0x70c>
10011f38:	00800434 	movhi	r2,16
10011f3c:	8c000234 	orhi	r16,r17,8
10011f40:	10bfffc4 	addi	r2,r2,-1
10011f44:	b809883a 	mov	r4,r23
10011f48:	80a0703a 	and	r16,r16,r2
10011f4c:	a02b883a 	mov	r21,r20
10011f50:	003f0806 	br	10011b74 <__alt_data_end+0xf8011b74>
10011f54:	008000c4 	movi	r2,3
10011f58:	3880b126 	beq	r7,r2,10012220 <__divdf3+0x9b4>
10011f5c:	00800044 	movi	r2,1
10011f60:	38805b1e 	bne	r7,r2,100120d0 <__divdf3+0x864>
10011f64:	e009883a 	mov	r4,fp
10011f68:	0005883a 	mov	r2,zero
10011f6c:	0021883a 	mov	r16,zero
10011f70:	002b883a 	mov	r21,zero
10011f74:	003e9c06 	br	100119e8 <__alt_data_end+0xf80119e8>
10011f78:	00800434 	movhi	r2,16
10011f7c:	84000234 	orhi	r16,r16,8
10011f80:	10bfffc4 	addi	r2,r2,-1
10011f84:	b009883a 	mov	r4,r22
10011f88:	80a0703a 	and	r16,r16,r2
10011f8c:	003ef906 	br	10011b74 <__alt_data_end+0xf8011b74>
10011f90:	103fca26 	beq	r2,zero,10011ebc <__alt_data_end+0xf8011ebc>
10011f94:	b421883a 	add	r16,r22,r16
10011f98:	a17fffc4 	addi	r5,r20,-1
10011f9c:	8580422e 	bgeu	r16,r22,100120a8 <__divdf3+0x83c>
10011fa0:	2829883a 	mov	r20,r5
10011fa4:	813fc41e 	bne	r16,r4,10011eb8 <__alt_data_end+0xf8011eb8>
10011fa8:	d9800017 	ldw	r6,0(sp)
10011fac:	30bfc21e 	bne	r6,r2,10011eb8 <__alt_data_end+0xf8011eb8>
10011fb0:	003fc206 	br	10011ebc <__alt_data_end+0xf8011ebc>
10011fb4:	143ff604 	addi	r16,r2,-40
10011fb8:	8c20983a 	sll	r16,r17,r16
10011fbc:	002b883a 	mov	r21,zero
10011fc0:	003eb406 	br	10011a94 <__alt_data_end+0xf8011a94>
10011fc4:	d9800215 	stw	r6,8(sp)
10011fc8:	d9c00515 	stw	r7,20(sp)
10011fcc:	da000415 	stw	r8,16(sp)
10011fd0:	00138000 	call	10013800 <__clzsi2>
10011fd4:	10800804 	addi	r2,r2,32
10011fd8:	da000417 	ldw	r8,16(sp)
10011fdc:	d9c00517 	ldw	r7,20(sp)
10011fe0:	d9800217 	ldw	r6,8(sp)
10011fe4:	003ea106 	br	10011a6c <__alt_data_end+0xf8011a6c>
10011fe8:	147ff604 	addi	r17,r2,-40
10011fec:	3462983a 	sll	r17,r6,r17
10011ff0:	0029883a 	mov	r20,zero
10011ff4:	003ec906 	br	10011b1c <__alt_data_end+0xf8011b1c>
10011ff8:	3009883a 	mov	r4,r6
10011ffc:	d9400115 	stw	r5,4(sp)
10012000:	d9800215 	stw	r6,8(sp)
10012004:	da000415 	stw	r8,16(sp)
10012008:	da400315 	stw	r9,12(sp)
1001200c:	00138000 	call	10013800 <__clzsi2>
10012010:	10800804 	addi	r2,r2,32
10012014:	da400317 	ldw	r9,12(sp)
10012018:	da000417 	ldw	r8,16(sp)
1001201c:	d9800217 	ldw	r6,8(sp)
10012020:	d9400117 	ldw	r5,4(sp)
10012024:	003eb306 	br	10011af4 <__alt_data_end+0xf8011af4>
10012028:	d9800017 	ldw	r6,0(sp)
1001202c:	a9ab883a 	add	r21,r21,r6
10012030:	a98b803a 	cmpltu	r5,r21,r6
10012034:	2d8b883a 	add	r5,r5,r22
10012038:	2a11883a 	add	r8,r5,r8
1001203c:	897fffc4 	addi	r5,r17,-1
10012040:	b2000c2e 	bgeu	r22,r8,10012074 <__divdf3+0x808>
10012044:	41003f36 	bltu	r8,r4,10012144 <__divdf3+0x8d8>
10012048:	22006c26 	beq	r4,r8,100121fc <__divdf3+0x990>
1001204c:	4109c83a 	sub	r4,r8,r4
10012050:	2823883a 	mov	r17,r5
10012054:	003f3b06 	br	10011d44 <__alt_data_end+0xf8011d44>
10012058:	ad3ed336 	bltu	r21,r20,10011ba8 <__alt_data_end+0xf8011ba8>
1001205c:	a804d07a 	srli	r2,r21,1
10012060:	802e97fa 	slli	r23,r16,31
10012064:	a82a97fa 	slli	r21,r21,31
10012068:	8020d07a 	srli	r16,r16,1
1001206c:	b8aeb03a 	or	r23,r23,r2
10012070:	003ed006 	br	10011bb4 <__alt_data_end+0xf8011bb4>
10012074:	b23ff51e 	bne	r22,r8,1001204c <__alt_data_end+0xf801204c>
10012078:	d9800017 	ldw	r6,0(sp)
1001207c:	a9bff12e 	bgeu	r21,r6,10012044 <__alt_data_end+0xf8012044>
10012080:	b109c83a 	sub	r4,r22,r4
10012084:	2823883a 	mov	r17,r5
10012088:	003f2e06 	br	10011d44 <__alt_data_end+0xf8011d44>
1001208c:	2021883a 	mov	r16,r4
10012090:	003eff06 	br	10011c90 <__alt_data_end+0xf8011c90>
10012094:	2023883a 	mov	r17,r4
10012098:	003ee406 	br	10011c2c <__alt_data_end+0xf8011c2c>
1001209c:	a8bfe236 	bltu	r21,r2,10012028 <__alt_data_end+0xf8012028>
100120a0:	0009883a 	mov	r4,zero
100120a4:	003f2706 	br	10011d44 <__alt_data_end+0xf8011d44>
100120a8:	81002d36 	bltu	r16,r4,10012160 <__divdf3+0x8f4>
100120ac:	24005626 	beq	r4,r16,10012208 <__divdf3+0x99c>
100120b0:	2829883a 	mov	r20,r5
100120b4:	003f8006 	br	10011eb8 <__alt_data_end+0xf8011eb8>
100120b8:	053fffc4 	movi	r20,-1
100120bc:	003f7f06 	br	10011ebc <__alt_data_end+0xf8011ebc>
100120c0:	200f883a 	mov	r7,r4
100120c4:	003f3c06 	br	10011db8 <__alt_data_end+0xf8011db8>
100120c8:	1011883a 	mov	r8,r2
100120cc:	003f5506 	br	10011e24 <__alt_data_end+0xf8011e24>
100120d0:	e027883a 	mov	r19,fp
100120d4:	003f7906 	br	10011ebc <__alt_data_end+0xf8011ebc>
100120d8:	010007c4 	movi	r4,31
100120dc:	20c02816 	blt	r4,r3,10012180 <__divdf3+0x914>
100120e0:	00800804 	movi	r2,32
100120e4:	10c5c83a 	sub	r2,r2,r3
100120e8:	888a983a 	sll	r5,r17,r2
100120ec:	a0c8d83a 	srl	r4,r20,r3
100120f0:	a084983a 	sll	r2,r20,r2
100120f4:	88e2d83a 	srl	r17,r17,r3
100120f8:	2906b03a 	or	r3,r5,r4
100120fc:	1004c03a 	cmpne	r2,r2,zero
10012100:	1886b03a 	or	r3,r3,r2
10012104:	188001cc 	andi	r2,r3,7
10012108:	10000726 	beq	r2,zero,10012128 <__divdf3+0x8bc>
1001210c:	188003cc 	andi	r2,r3,15
10012110:	01000104 	movi	r4,4
10012114:	11000426 	beq	r2,r4,10012128 <__divdf3+0x8bc>
10012118:	1805883a 	mov	r2,r3
1001211c:	10c00104 	addi	r3,r2,4
10012120:	1885803a 	cmpltu	r2,r3,r2
10012124:	88a3883a 	add	r17,r17,r2
10012128:	8880202c 	andhi	r2,r17,128
1001212c:	10002926 	beq	r2,zero,100121d4 <__divdf3+0x968>
10012130:	9900004c 	andi	r4,r19,1
10012134:	00800044 	movi	r2,1
10012138:	0021883a 	mov	r16,zero
1001213c:	002b883a 	mov	r21,zero
10012140:	003e2906 	br	100119e8 <__alt_data_end+0xf80119e8>
10012144:	d9800017 	ldw	r6,0(sp)
10012148:	8c7fff84 	addi	r17,r17,-2
1001214c:	a9ab883a 	add	r21,r21,r6
10012150:	a98b803a 	cmpltu	r5,r21,r6
10012154:	2d8b883a 	add	r5,r5,r22
10012158:	2a11883a 	add	r8,r5,r8
1001215c:	003ef806 	br	10011d40 <__alt_data_end+0xf8011d40>
10012160:	d9800017 	ldw	r6,0(sp)
10012164:	318f883a 	add	r7,r6,r6
10012168:	398b803a 	cmpltu	r5,r7,r6
1001216c:	2d8d883a 	add	r6,r5,r22
10012170:	81a1883a 	add	r16,r16,r6
10012174:	a17fff84 	addi	r5,r20,-2
10012178:	d9c00015 	stw	r7,0(sp)
1001217c:	003f8806 	br	10011fa0 <__alt_data_end+0xf8011fa0>
10012180:	013ff844 	movi	r4,-31
10012184:	2085c83a 	sub	r2,r4,r2
10012188:	8888d83a 	srl	r4,r17,r2
1001218c:	00800804 	movi	r2,32
10012190:	18802126 	beq	r3,r2,10012218 <__divdf3+0x9ac>
10012194:	04001004 	movi	r16,64
10012198:	80c7c83a 	sub	r3,r16,r3
1001219c:	88e0983a 	sll	r16,r17,r3
100121a0:	8504b03a 	or	r2,r16,r20
100121a4:	1004c03a 	cmpne	r2,r2,zero
100121a8:	2084b03a 	or	r2,r4,r2
100121ac:	144001cc 	andi	r17,r2,7
100121b0:	88000d1e 	bne	r17,zero,100121e8 <__divdf3+0x97c>
100121b4:	0021883a 	mov	r16,zero
100121b8:	102ad0fa 	srli	r21,r2,3
100121bc:	9900004c 	andi	r4,r19,1
100121c0:	0005883a 	mov	r2,zero
100121c4:	ac6ab03a 	or	r21,r21,r17
100121c8:	003e0706 	br	100119e8 <__alt_data_end+0xf80119e8>
100121cc:	1007883a 	mov	r3,r2
100121d0:	0023883a 	mov	r17,zero
100121d4:	8820927a 	slli	r16,r17,9
100121d8:	1805883a 	mov	r2,r3
100121dc:	8822977a 	slli	r17,r17,29
100121e0:	8020d33a 	srli	r16,r16,12
100121e4:	003ff406 	br	100121b8 <__alt_data_end+0xf80121b8>
100121e8:	10c003cc 	andi	r3,r2,15
100121ec:	01000104 	movi	r4,4
100121f0:	193ff626 	beq	r3,r4,100121cc <__alt_data_end+0xf80121cc>
100121f4:	0023883a 	mov	r17,zero
100121f8:	003fc806 	br	1001211c <__alt_data_end+0xf801211c>
100121fc:	a8bfd136 	bltu	r21,r2,10012144 <__alt_data_end+0xf8012144>
10012200:	2823883a 	mov	r17,r5
10012204:	003fa606 	br	100120a0 <__alt_data_end+0xf80120a0>
10012208:	d9800017 	ldw	r6,0(sp)
1001220c:	30bfd436 	bltu	r6,r2,10012160 <__alt_data_end+0xf8012160>
10012210:	2829883a 	mov	r20,r5
10012214:	003f6406 	br	10011fa8 <__alt_data_end+0xf8011fa8>
10012218:	0021883a 	mov	r16,zero
1001221c:	003fe006 	br	100121a0 <__alt_data_end+0xf80121a0>
10012220:	00800434 	movhi	r2,16
10012224:	8c000234 	orhi	r16,r17,8
10012228:	10bfffc4 	addi	r2,r2,-1
1001222c:	e009883a 	mov	r4,fp
10012230:	80a0703a 	and	r16,r16,r2
10012234:	a02b883a 	mov	r21,r20
10012238:	003e4e06 	br	10011b74 <__alt_data_end+0xf8011b74>

1001223c <__eqdf2>:
1001223c:	2804d53a 	srli	r2,r5,20
10012240:	3806d53a 	srli	r3,r7,20
10012244:	02000434 	movhi	r8,16
10012248:	423fffc4 	addi	r8,r8,-1
1001224c:	1081ffcc 	andi	r2,r2,2047
10012250:	0281ffc4 	movi	r10,2047
10012254:	2a12703a 	and	r9,r5,r8
10012258:	18c1ffcc 	andi	r3,r3,2047
1001225c:	3a10703a 	and	r8,r7,r8
10012260:	280ad7fa 	srli	r5,r5,31
10012264:	380ed7fa 	srli	r7,r7,31
10012268:	12801026 	beq	r2,r10,100122ac <__eqdf2+0x70>
1001226c:	0281ffc4 	movi	r10,2047
10012270:	1a800a26 	beq	r3,r10,1001229c <__eqdf2+0x60>
10012274:	10c00226 	beq	r2,r3,10012280 <__eqdf2+0x44>
10012278:	00800044 	movi	r2,1
1001227c:	f800283a 	ret
10012280:	4a3ffd1e 	bne	r9,r8,10012278 <__alt_data_end+0xf8012278>
10012284:	21bffc1e 	bne	r4,r6,10012278 <__alt_data_end+0xf8012278>
10012288:	29c00c26 	beq	r5,r7,100122bc <__eqdf2+0x80>
1001228c:	103ffa1e 	bne	r2,zero,10012278 <__alt_data_end+0xf8012278>
10012290:	2244b03a 	or	r2,r4,r9
10012294:	1004c03a 	cmpne	r2,r2,zero
10012298:	f800283a 	ret
1001229c:	3214b03a 	or	r10,r6,r8
100122a0:	503ff426 	beq	r10,zero,10012274 <__alt_data_end+0xf8012274>
100122a4:	00800044 	movi	r2,1
100122a8:	f800283a 	ret
100122ac:	2254b03a 	or	r10,r4,r9
100122b0:	503fee26 	beq	r10,zero,1001226c <__alt_data_end+0xf801226c>
100122b4:	00800044 	movi	r2,1
100122b8:	f800283a 	ret
100122bc:	0005883a 	mov	r2,zero
100122c0:	f800283a 	ret

100122c4 <__gedf2>:
100122c4:	2804d53a 	srli	r2,r5,20
100122c8:	3806d53a 	srli	r3,r7,20
100122cc:	02000434 	movhi	r8,16
100122d0:	423fffc4 	addi	r8,r8,-1
100122d4:	1081ffcc 	andi	r2,r2,2047
100122d8:	0241ffc4 	movi	r9,2047
100122dc:	2a14703a 	and	r10,r5,r8
100122e0:	18c1ffcc 	andi	r3,r3,2047
100122e4:	3a10703a 	and	r8,r7,r8
100122e8:	280ad7fa 	srli	r5,r5,31
100122ec:	380ed7fa 	srli	r7,r7,31
100122f0:	12401d26 	beq	r2,r9,10012368 <__gedf2+0xa4>
100122f4:	0241ffc4 	movi	r9,2047
100122f8:	1a401226 	beq	r3,r9,10012344 <__gedf2+0x80>
100122fc:	1000081e 	bne	r2,zero,10012320 <__gedf2+0x5c>
10012300:	2296b03a 	or	r11,r4,r10
10012304:	5813003a 	cmpeq	r9,r11,zero
10012308:	1800091e 	bne	r3,zero,10012330 <__gedf2+0x6c>
1001230c:	3218b03a 	or	r12,r6,r8
10012310:	6000071e 	bne	r12,zero,10012330 <__gedf2+0x6c>
10012314:	0005883a 	mov	r2,zero
10012318:	5800101e 	bne	r11,zero,1001235c <__gedf2+0x98>
1001231c:	f800283a 	ret
10012320:	18000c1e 	bne	r3,zero,10012354 <__gedf2+0x90>
10012324:	3212b03a 	or	r9,r6,r8
10012328:	48000c26 	beq	r9,zero,1001235c <__gedf2+0x98>
1001232c:	0013883a 	mov	r9,zero
10012330:	39c03fcc 	andi	r7,r7,255
10012334:	48000826 	beq	r9,zero,10012358 <__gedf2+0x94>
10012338:	38000926 	beq	r7,zero,10012360 <__gedf2+0x9c>
1001233c:	00800044 	movi	r2,1
10012340:	f800283a 	ret
10012344:	3212b03a 	or	r9,r6,r8
10012348:	483fec26 	beq	r9,zero,100122fc <__alt_data_end+0xf80122fc>
1001234c:	00bfff84 	movi	r2,-2
10012350:	f800283a 	ret
10012354:	39c03fcc 	andi	r7,r7,255
10012358:	29c00626 	beq	r5,r7,10012374 <__gedf2+0xb0>
1001235c:	283ff726 	beq	r5,zero,1001233c <__alt_data_end+0xf801233c>
10012360:	00bfffc4 	movi	r2,-1
10012364:	f800283a 	ret
10012368:	2292b03a 	or	r9,r4,r10
1001236c:	483fe126 	beq	r9,zero,100122f4 <__alt_data_end+0xf80122f4>
10012370:	003ff606 	br	1001234c <__alt_data_end+0xf801234c>
10012374:	18bff916 	blt	r3,r2,1001235c <__alt_data_end+0xf801235c>
10012378:	10c00316 	blt	r2,r3,10012388 <__gedf2+0xc4>
1001237c:	42bff736 	bltu	r8,r10,1001235c <__alt_data_end+0xf801235c>
10012380:	52000326 	beq	r10,r8,10012390 <__gedf2+0xcc>
10012384:	5200042e 	bgeu	r10,r8,10012398 <__gedf2+0xd4>
10012388:	283fec1e 	bne	r5,zero,1001233c <__alt_data_end+0xf801233c>
1001238c:	003ff406 	br	10012360 <__alt_data_end+0xf8012360>
10012390:	313ff236 	bltu	r6,r4,1001235c <__alt_data_end+0xf801235c>
10012394:	21bffc36 	bltu	r4,r6,10012388 <__alt_data_end+0xf8012388>
10012398:	0005883a 	mov	r2,zero
1001239c:	f800283a 	ret

100123a0 <__ledf2>:
100123a0:	2804d53a 	srli	r2,r5,20
100123a4:	3810d53a 	srli	r8,r7,20
100123a8:	00c00434 	movhi	r3,16
100123ac:	18ffffc4 	addi	r3,r3,-1
100123b0:	1081ffcc 	andi	r2,r2,2047
100123b4:	0241ffc4 	movi	r9,2047
100123b8:	28d4703a 	and	r10,r5,r3
100123bc:	4201ffcc 	andi	r8,r8,2047
100123c0:	38c6703a 	and	r3,r7,r3
100123c4:	280ad7fa 	srli	r5,r5,31
100123c8:	380ed7fa 	srli	r7,r7,31
100123cc:	12401f26 	beq	r2,r9,1001244c <__ledf2+0xac>
100123d0:	0241ffc4 	movi	r9,2047
100123d4:	42401426 	beq	r8,r9,10012428 <__ledf2+0x88>
100123d8:	1000091e 	bne	r2,zero,10012400 <__ledf2+0x60>
100123dc:	2296b03a 	or	r11,r4,r10
100123e0:	5813003a 	cmpeq	r9,r11,zero
100123e4:	29403fcc 	andi	r5,r5,255
100123e8:	40000a1e 	bne	r8,zero,10012414 <__ledf2+0x74>
100123ec:	30d8b03a 	or	r12,r6,r3
100123f0:	6000081e 	bne	r12,zero,10012414 <__ledf2+0x74>
100123f4:	0005883a 	mov	r2,zero
100123f8:	5800111e 	bne	r11,zero,10012440 <__ledf2+0xa0>
100123fc:	f800283a 	ret
10012400:	29403fcc 	andi	r5,r5,255
10012404:	40000c1e 	bne	r8,zero,10012438 <__ledf2+0x98>
10012408:	30d2b03a 	or	r9,r6,r3
1001240c:	48000c26 	beq	r9,zero,10012440 <__ledf2+0xa0>
10012410:	0013883a 	mov	r9,zero
10012414:	39c03fcc 	andi	r7,r7,255
10012418:	48000826 	beq	r9,zero,1001243c <__ledf2+0x9c>
1001241c:	38001126 	beq	r7,zero,10012464 <__ledf2+0xc4>
10012420:	00800044 	movi	r2,1
10012424:	f800283a 	ret
10012428:	30d2b03a 	or	r9,r6,r3
1001242c:	483fea26 	beq	r9,zero,100123d8 <__alt_data_end+0xf80123d8>
10012430:	00800084 	movi	r2,2
10012434:	f800283a 	ret
10012438:	39c03fcc 	andi	r7,r7,255
1001243c:	39400726 	beq	r7,r5,1001245c <__ledf2+0xbc>
10012440:	2800081e 	bne	r5,zero,10012464 <__ledf2+0xc4>
10012444:	00800044 	movi	r2,1
10012448:	f800283a 	ret
1001244c:	2292b03a 	or	r9,r4,r10
10012450:	483fdf26 	beq	r9,zero,100123d0 <__alt_data_end+0xf80123d0>
10012454:	00800084 	movi	r2,2
10012458:	f800283a 	ret
1001245c:	4080030e 	bge	r8,r2,1001246c <__ledf2+0xcc>
10012460:	383fef26 	beq	r7,zero,10012420 <__alt_data_end+0xf8012420>
10012464:	00bfffc4 	movi	r2,-1
10012468:	f800283a 	ret
1001246c:	123feb16 	blt	r2,r8,1001241c <__alt_data_end+0xf801241c>
10012470:	1abff336 	bltu	r3,r10,10012440 <__alt_data_end+0xf8012440>
10012474:	50c00326 	beq	r10,r3,10012484 <__ledf2+0xe4>
10012478:	50c0042e 	bgeu	r10,r3,1001248c <__ledf2+0xec>
1001247c:	283fe81e 	bne	r5,zero,10012420 <__alt_data_end+0xf8012420>
10012480:	003ff806 	br	10012464 <__alt_data_end+0xf8012464>
10012484:	313fee36 	bltu	r6,r4,10012440 <__alt_data_end+0xf8012440>
10012488:	21bffc36 	bltu	r4,r6,1001247c <__alt_data_end+0xf801247c>
1001248c:	0005883a 	mov	r2,zero
10012490:	f800283a 	ret

10012494 <__muldf3>:
10012494:	deffee04 	addi	sp,sp,-72
10012498:	dd000c15 	stw	r20,48(sp)
1001249c:	2828d53a 	srli	r20,r5,20
100124a0:	ddc00f15 	stw	r23,60(sp)
100124a4:	282ed7fa 	srli	r23,r5,31
100124a8:	dc000815 	stw	r16,32(sp)
100124ac:	04000434 	movhi	r16,16
100124b0:	dcc00b15 	stw	r19,44(sp)
100124b4:	843fffc4 	addi	r16,r16,-1
100124b8:	dfc01115 	stw	ra,68(sp)
100124bc:	df001015 	stw	fp,64(sp)
100124c0:	dd800e15 	stw	r22,56(sp)
100124c4:	dd400d15 	stw	r21,52(sp)
100124c8:	dc800a15 	stw	r18,40(sp)
100124cc:	dc400915 	stw	r17,36(sp)
100124d0:	a501ffcc 	andi	r20,r20,2047
100124d4:	2c20703a 	and	r16,r5,r16
100124d8:	b827883a 	mov	r19,r23
100124dc:	ba403fcc 	andi	r9,r23,255
100124e0:	a0006026 	beq	r20,zero,10012664 <__muldf3+0x1d0>
100124e4:	0081ffc4 	movi	r2,2047
100124e8:	202d883a 	mov	r22,r4
100124ec:	a0803626 	beq	r20,r2,100125c8 <__muldf3+0x134>
100124f0:	84000434 	orhi	r16,r16,16
100124f4:	200ad77a 	srli	r5,r4,29
100124f8:	800490fa 	slli	r2,r16,3
100124fc:	202c90fa 	slli	r22,r4,3
10012500:	a53f0044 	addi	r20,r20,-1023
10012504:	28a0b03a 	or	r16,r5,r2
10012508:	002b883a 	mov	r21,zero
1001250c:	000b883a 	mov	r5,zero
10012510:	3804d53a 	srli	r2,r7,20
10012514:	3838d7fa 	srli	fp,r7,31
10012518:	04400434 	movhi	r17,16
1001251c:	8c7fffc4 	addi	r17,r17,-1
10012520:	1081ffcc 	andi	r2,r2,2047
10012524:	3025883a 	mov	r18,r6
10012528:	3c62703a 	and	r17,r7,r17
1001252c:	e2803fcc 	andi	r10,fp,255
10012530:	10006d26 	beq	r2,zero,100126e8 <__muldf3+0x254>
10012534:	00c1ffc4 	movi	r3,2047
10012538:	10c06526 	beq	r2,r3,100126d0 <__muldf3+0x23c>
1001253c:	8c400434 	orhi	r17,r17,16
10012540:	300ed77a 	srli	r7,r6,29
10012544:	880690fa 	slli	r3,r17,3
10012548:	302490fa 	slli	r18,r6,3
1001254c:	10bf0044 	addi	r2,r2,-1023
10012550:	38e2b03a 	or	r17,r7,r3
10012554:	000f883a 	mov	r7,zero
10012558:	a087883a 	add	r3,r20,r2
1001255c:	010003c4 	movi	r4,15
10012560:	3d44b03a 	or	r2,r7,r21
10012564:	e5ccf03a 	xor	r6,fp,r23
10012568:	1a000044 	addi	r8,r3,1
1001256c:	20809b36 	bltu	r4,r2,100127dc <__muldf3+0x348>
10012570:	100490ba 	slli	r2,r2,2
10012574:	01040074 	movhi	r4,4097
10012578:	21096204 	addi	r4,r4,9608
1001257c:	1105883a 	add	r2,r2,r4
10012580:	10800017 	ldw	r2,0(r2)
10012584:	1000683a 	jmp	r2
10012588:	100127dc 	xori	zero,r2,1183
1001258c:	100125e8 	cmpgeui	zero,r2,1175
10012590:	100125e8 	cmpgeui	zero,r2,1175
10012594:	100125e4 	muli	zero,r2,1175
10012598:	100127b8 	rdprs	zero,r2,1182
1001259c:	100127b8 	rdprs	zero,r2,1182
100125a0:	100127a0 	cmpeqi	zero,r2,1182
100125a4:	100125e4 	muli	zero,r2,1175
100125a8:	100127b8 	rdprs	zero,r2,1182
100125ac:	100127a0 	cmpeqi	zero,r2,1182
100125b0:	100127b8 	rdprs	zero,r2,1182
100125b4:	100125e4 	muli	zero,r2,1175
100125b8:	100127c8 	cmpgei	zero,r2,1183
100125bc:	100127c8 	cmpgei	zero,r2,1183
100125c0:	100127c8 	cmpgei	zero,r2,1183
100125c4:	10012b28 	cmpgeui	zero,r2,1196
100125c8:	2404b03a 	or	r2,r4,r16
100125cc:	1000711e 	bne	r2,zero,10012794 <__muldf3+0x300>
100125d0:	05400204 	movi	r21,8
100125d4:	0021883a 	mov	r16,zero
100125d8:	002d883a 	mov	r22,zero
100125dc:	01400084 	movi	r5,2
100125e0:	003fcb06 	br	10012510 <__alt_data_end+0xf8012510>
100125e4:	500d883a 	mov	r6,r10
100125e8:	00800084 	movi	r2,2
100125ec:	38805926 	beq	r7,r2,10012754 <__muldf3+0x2c0>
100125f0:	008000c4 	movi	r2,3
100125f4:	3881bb26 	beq	r7,r2,10012ce4 <__muldf3+0x850>
100125f8:	00800044 	movi	r2,1
100125fc:	3881961e 	bne	r7,r2,10012c58 <__muldf3+0x7c4>
10012600:	3027883a 	mov	r19,r6
10012604:	0005883a 	mov	r2,zero
10012608:	0021883a 	mov	r16,zero
1001260c:	002d883a 	mov	r22,zero
10012610:	1004953a 	slli	r2,r2,20
10012614:	98c03fcc 	andi	r3,r19,255
10012618:	04400434 	movhi	r17,16
1001261c:	8c7fffc4 	addi	r17,r17,-1
10012620:	180697fa 	slli	r3,r3,31
10012624:	8460703a 	and	r16,r16,r17
10012628:	80a0b03a 	or	r16,r16,r2
1001262c:	80c6b03a 	or	r3,r16,r3
10012630:	b005883a 	mov	r2,r22
10012634:	dfc01117 	ldw	ra,68(sp)
10012638:	df001017 	ldw	fp,64(sp)
1001263c:	ddc00f17 	ldw	r23,60(sp)
10012640:	dd800e17 	ldw	r22,56(sp)
10012644:	dd400d17 	ldw	r21,52(sp)
10012648:	dd000c17 	ldw	r20,48(sp)
1001264c:	dcc00b17 	ldw	r19,44(sp)
10012650:	dc800a17 	ldw	r18,40(sp)
10012654:	dc400917 	ldw	r17,36(sp)
10012658:	dc000817 	ldw	r16,32(sp)
1001265c:	dec01204 	addi	sp,sp,72
10012660:	f800283a 	ret
10012664:	2404b03a 	or	r2,r4,r16
10012668:	202b883a 	mov	r21,r4
1001266c:	10004426 	beq	r2,zero,10012780 <__muldf3+0x2ec>
10012670:	80015126 	beq	r16,zero,10012bb8 <__muldf3+0x724>
10012674:	8009883a 	mov	r4,r16
10012678:	d9800715 	stw	r6,28(sp)
1001267c:	d9c00215 	stw	r7,8(sp)
10012680:	da400415 	stw	r9,16(sp)
10012684:	00138000 	call	10013800 <__clzsi2>
10012688:	d9800717 	ldw	r6,28(sp)
1001268c:	d9c00217 	ldw	r7,8(sp)
10012690:	da400417 	ldw	r9,16(sp)
10012694:	113ffd44 	addi	r4,r2,-11
10012698:	00c00704 	movi	r3,28
1001269c:	19014216 	blt	r3,r4,10012ba8 <__muldf3+0x714>
100126a0:	00c00744 	movi	r3,29
100126a4:	15bffe04 	addi	r22,r2,-8
100126a8:	1907c83a 	sub	r3,r3,r4
100126ac:	85a0983a 	sll	r16,r16,r22
100126b0:	a8c6d83a 	srl	r3,r21,r3
100126b4:	adac983a 	sll	r22,r21,r22
100126b8:	1c20b03a 	or	r16,r3,r16
100126bc:	1080fcc4 	addi	r2,r2,1011
100126c0:	00a9c83a 	sub	r20,zero,r2
100126c4:	002b883a 	mov	r21,zero
100126c8:	000b883a 	mov	r5,zero
100126cc:	003f9006 	br	10012510 <__alt_data_end+0xf8012510>
100126d0:	3446b03a 	or	r3,r6,r17
100126d4:	1800281e 	bne	r3,zero,10012778 <__muldf3+0x2e4>
100126d8:	0023883a 	mov	r17,zero
100126dc:	0025883a 	mov	r18,zero
100126e0:	01c00084 	movi	r7,2
100126e4:	003f9c06 	br	10012558 <__alt_data_end+0xf8012558>
100126e8:	3446b03a 	or	r3,r6,r17
100126ec:	18001e26 	beq	r3,zero,10012768 <__muldf3+0x2d4>
100126f0:	88012126 	beq	r17,zero,10012b78 <__muldf3+0x6e4>
100126f4:	8809883a 	mov	r4,r17
100126f8:	d9400215 	stw	r5,8(sp)
100126fc:	d9800715 	stw	r6,28(sp)
10012700:	da400415 	stw	r9,16(sp)
10012704:	da800315 	stw	r10,12(sp)
10012708:	00138000 	call	10013800 <__clzsi2>
1001270c:	d9400217 	ldw	r5,8(sp)
10012710:	d9800717 	ldw	r6,28(sp)
10012714:	da400417 	ldw	r9,16(sp)
10012718:	da800317 	ldw	r10,12(sp)
1001271c:	113ffd44 	addi	r4,r2,-11
10012720:	00c00704 	movi	r3,28
10012724:	19011016 	blt	r3,r4,10012b68 <__muldf3+0x6d4>
10012728:	00c00744 	movi	r3,29
1001272c:	14bffe04 	addi	r18,r2,-8
10012730:	1907c83a 	sub	r3,r3,r4
10012734:	8ca2983a 	sll	r17,r17,r18
10012738:	30c6d83a 	srl	r3,r6,r3
1001273c:	34a4983a 	sll	r18,r6,r18
10012740:	1c62b03a 	or	r17,r3,r17
10012744:	1080fcc4 	addi	r2,r2,1011
10012748:	0085c83a 	sub	r2,zero,r2
1001274c:	000f883a 	mov	r7,zero
10012750:	003f8106 	br	10012558 <__alt_data_end+0xf8012558>
10012754:	3027883a 	mov	r19,r6
10012758:	0081ffc4 	movi	r2,2047
1001275c:	0021883a 	mov	r16,zero
10012760:	002d883a 	mov	r22,zero
10012764:	003faa06 	br	10012610 <__alt_data_end+0xf8012610>
10012768:	0023883a 	mov	r17,zero
1001276c:	0025883a 	mov	r18,zero
10012770:	01c00044 	movi	r7,1
10012774:	003f7806 	br	10012558 <__alt_data_end+0xf8012558>
10012778:	01c000c4 	movi	r7,3
1001277c:	003f7606 	br	10012558 <__alt_data_end+0xf8012558>
10012780:	05400104 	movi	r21,4
10012784:	0021883a 	mov	r16,zero
10012788:	002d883a 	mov	r22,zero
1001278c:	01400044 	movi	r5,1
10012790:	003f5f06 	br	10012510 <__alt_data_end+0xf8012510>
10012794:	05400304 	movi	r21,12
10012798:	014000c4 	movi	r5,3
1001279c:	003f5c06 	br	10012510 <__alt_data_end+0xf8012510>
100127a0:	04000434 	movhi	r16,16
100127a4:	0027883a 	mov	r19,zero
100127a8:	843fffc4 	addi	r16,r16,-1
100127ac:	05bfffc4 	movi	r22,-1
100127b0:	0081ffc4 	movi	r2,2047
100127b4:	003f9606 	br	10012610 <__alt_data_end+0xf8012610>
100127b8:	8023883a 	mov	r17,r16
100127bc:	b025883a 	mov	r18,r22
100127c0:	280f883a 	mov	r7,r5
100127c4:	003f8806 	br	100125e8 <__alt_data_end+0xf80125e8>
100127c8:	8023883a 	mov	r17,r16
100127cc:	b025883a 	mov	r18,r22
100127d0:	480d883a 	mov	r6,r9
100127d4:	280f883a 	mov	r7,r5
100127d8:	003f8306 	br	100125e8 <__alt_data_end+0xf80125e8>
100127dc:	b026d43a 	srli	r19,r22,16
100127e0:	902ed43a 	srli	r23,r18,16
100127e4:	b5bfffcc 	andi	r22,r22,65535
100127e8:	94bfffcc 	andi	r18,r18,65535
100127ec:	b00b883a 	mov	r5,r22
100127f0:	9009883a 	mov	r4,r18
100127f4:	d8c00515 	stw	r3,20(sp)
100127f8:	d9800715 	stw	r6,28(sp)
100127fc:	da000615 	stw	r8,24(sp)
10012800:	0006ad80 	call	10006ad8 <__mulsi3>
10012804:	980b883a 	mov	r5,r19
10012808:	9009883a 	mov	r4,r18
1001280c:	1029883a 	mov	r20,r2
10012810:	0006ad80 	call	10006ad8 <__mulsi3>
10012814:	b80b883a 	mov	r5,r23
10012818:	9809883a 	mov	r4,r19
1001281c:	102b883a 	mov	r21,r2
10012820:	0006ad80 	call	10006ad8 <__mulsi3>
10012824:	b809883a 	mov	r4,r23
10012828:	b00b883a 	mov	r5,r22
1001282c:	1039883a 	mov	fp,r2
10012830:	0006ad80 	call	10006ad8 <__mulsi3>
10012834:	a008d43a 	srli	r4,r20,16
10012838:	1545883a 	add	r2,r2,r21
1001283c:	d8c00517 	ldw	r3,20(sp)
10012840:	2085883a 	add	r2,r4,r2
10012844:	d9800717 	ldw	r6,28(sp)
10012848:	da000617 	ldw	r8,24(sp)
1001284c:	1540022e 	bgeu	r2,r21,10012858 <__muldf3+0x3c4>
10012850:	01000074 	movhi	r4,1
10012854:	e139883a 	add	fp,fp,r4
10012858:	100e943a 	slli	r7,r2,16
1001285c:	1004d43a 	srli	r2,r2,16
10012860:	882ad43a 	srli	r21,r17,16
10012864:	a53fffcc 	andi	r20,r20,65535
10012868:	8c7fffcc 	andi	r17,r17,65535
1001286c:	3d29883a 	add	r20,r7,r20
10012870:	b00b883a 	mov	r5,r22
10012874:	8809883a 	mov	r4,r17
10012878:	d8c00515 	stw	r3,20(sp)
1001287c:	d9800715 	stw	r6,28(sp)
10012880:	da000615 	stw	r8,24(sp)
10012884:	dd000115 	stw	r20,4(sp)
10012888:	d8800015 	stw	r2,0(sp)
1001288c:	0006ad80 	call	10006ad8 <__mulsi3>
10012890:	980b883a 	mov	r5,r19
10012894:	8809883a 	mov	r4,r17
10012898:	d8800215 	stw	r2,8(sp)
1001289c:	0006ad80 	call	10006ad8 <__mulsi3>
100128a0:	9809883a 	mov	r4,r19
100128a4:	a80b883a 	mov	r5,r21
100128a8:	1029883a 	mov	r20,r2
100128ac:	0006ad80 	call	10006ad8 <__mulsi3>
100128b0:	b00b883a 	mov	r5,r22
100128b4:	a809883a 	mov	r4,r21
100128b8:	d8800415 	stw	r2,16(sp)
100128bc:	0006ad80 	call	10006ad8 <__mulsi3>
100128c0:	d9c00217 	ldw	r7,8(sp)
100128c4:	1505883a 	add	r2,r2,r20
100128c8:	d8c00517 	ldw	r3,20(sp)
100128cc:	3826d43a 	srli	r19,r7,16
100128d0:	d9800717 	ldw	r6,28(sp)
100128d4:	da000617 	ldw	r8,24(sp)
100128d8:	9885883a 	add	r2,r19,r2
100128dc:	da400417 	ldw	r9,16(sp)
100128e0:	1500022e 	bgeu	r2,r20,100128ec <__muldf3+0x458>
100128e4:	01000074 	movhi	r4,1
100128e8:	4913883a 	add	r9,r9,r4
100128ec:	1028d43a 	srli	r20,r2,16
100128f0:	1004943a 	slli	r2,r2,16
100128f4:	802cd43a 	srli	r22,r16,16
100128f8:	843fffcc 	andi	r16,r16,65535
100128fc:	3cffffcc 	andi	r19,r7,65535
10012900:	9009883a 	mov	r4,r18
10012904:	800b883a 	mov	r5,r16
10012908:	a269883a 	add	r20,r20,r9
1001290c:	d8c00515 	stw	r3,20(sp)
10012910:	d9800715 	stw	r6,28(sp)
10012914:	da000615 	stw	r8,24(sp)
10012918:	14e7883a 	add	r19,r2,r19
1001291c:	0006ad80 	call	10006ad8 <__mulsi3>
10012920:	9009883a 	mov	r4,r18
10012924:	b00b883a 	mov	r5,r22
10012928:	d8800315 	stw	r2,12(sp)
1001292c:	0006ad80 	call	10006ad8 <__mulsi3>
10012930:	b809883a 	mov	r4,r23
10012934:	b00b883a 	mov	r5,r22
10012938:	d8800215 	stw	r2,8(sp)
1001293c:	0006ad80 	call	10006ad8 <__mulsi3>
10012940:	b80b883a 	mov	r5,r23
10012944:	8009883a 	mov	r4,r16
10012948:	d8800415 	stw	r2,16(sp)
1001294c:	0006ad80 	call	10006ad8 <__mulsi3>
10012950:	da800317 	ldw	r10,12(sp)
10012954:	d9c00217 	ldw	r7,8(sp)
10012958:	d9000017 	ldw	r4,0(sp)
1001295c:	502ed43a 	srli	r23,r10,16
10012960:	11c5883a 	add	r2,r2,r7
10012964:	24e5883a 	add	r18,r4,r19
10012968:	b885883a 	add	r2,r23,r2
1001296c:	d8c00517 	ldw	r3,20(sp)
10012970:	d9800717 	ldw	r6,28(sp)
10012974:	da000617 	ldw	r8,24(sp)
10012978:	da400417 	ldw	r9,16(sp)
1001297c:	11c0022e 	bgeu	r2,r7,10012988 <__muldf3+0x4f4>
10012980:	01000074 	movhi	r4,1
10012984:	4913883a 	add	r9,r9,r4
10012988:	100ed43a 	srli	r7,r2,16
1001298c:	1004943a 	slli	r2,r2,16
10012990:	55ffffcc 	andi	r23,r10,65535
10012994:	3a53883a 	add	r9,r7,r9
10012998:	8809883a 	mov	r4,r17
1001299c:	800b883a 	mov	r5,r16
100129a0:	d8c00515 	stw	r3,20(sp)
100129a4:	d9800715 	stw	r6,28(sp)
100129a8:	da000615 	stw	r8,24(sp)
100129ac:	da400415 	stw	r9,16(sp)
100129b0:	15ef883a 	add	r23,r2,r23
100129b4:	0006ad80 	call	10006ad8 <__mulsi3>
100129b8:	8809883a 	mov	r4,r17
100129bc:	b00b883a 	mov	r5,r22
100129c0:	d8800215 	stw	r2,8(sp)
100129c4:	0006ad80 	call	10006ad8 <__mulsi3>
100129c8:	b00b883a 	mov	r5,r22
100129cc:	a809883a 	mov	r4,r21
100129d0:	d8800315 	stw	r2,12(sp)
100129d4:	0006ad80 	call	10006ad8 <__mulsi3>
100129d8:	8009883a 	mov	r4,r16
100129dc:	a80b883a 	mov	r5,r21
100129e0:	1023883a 	mov	r17,r2
100129e4:	0006ad80 	call	10006ad8 <__mulsi3>
100129e8:	d9c00217 	ldw	r7,8(sp)
100129ec:	da800317 	ldw	r10,12(sp)
100129f0:	d8c00517 	ldw	r3,20(sp)
100129f4:	3808d43a 	srli	r4,r7,16
100129f8:	1285883a 	add	r2,r2,r10
100129fc:	d9800717 	ldw	r6,28(sp)
10012a00:	2085883a 	add	r2,r4,r2
10012a04:	da000617 	ldw	r8,24(sp)
10012a08:	da400417 	ldw	r9,16(sp)
10012a0c:	1280022e 	bgeu	r2,r10,10012a18 <__muldf3+0x584>
10012a10:	01000074 	movhi	r4,1
10012a14:	8923883a 	add	r17,r17,r4
10012a18:	1008943a 	slli	r4,r2,16
10012a1c:	39ffffcc 	andi	r7,r7,65535
10012a20:	e4b9883a 	add	fp,fp,r18
10012a24:	21cf883a 	add	r7,r4,r7
10012a28:	e4e7803a 	cmpltu	r19,fp,r19
10012a2c:	3d0f883a 	add	r7,r7,r20
10012a30:	bf39883a 	add	fp,r23,fp
10012a34:	99c9883a 	add	r4,r19,r7
10012a38:	e5ef803a 	cmpltu	r23,fp,r23
10012a3c:	490b883a 	add	r5,r9,r4
10012a40:	1004d43a 	srli	r2,r2,16
10012a44:	b965883a 	add	r18,r23,r5
10012a48:	24c9803a 	cmpltu	r4,r4,r19
10012a4c:	3d29803a 	cmpltu	r20,r7,r20
10012a50:	a128b03a 	or	r20,r20,r4
10012a54:	95ef803a 	cmpltu	r23,r18,r23
10012a58:	2a53803a 	cmpltu	r9,r5,r9
10012a5c:	a0a9883a 	add	r20,r20,r2
10012a60:	4deeb03a 	or	r23,r9,r23
10012a64:	a5ef883a 	add	r23,r20,r23
10012a68:	bc63883a 	add	r17,r23,r17
10012a6c:	e004927a 	slli	r2,fp,9
10012a70:	d9000117 	ldw	r4,4(sp)
10012a74:	882e927a 	slli	r23,r17,9
10012a78:	9022d5fa 	srli	r17,r18,23
10012a7c:	e038d5fa 	srli	fp,fp,23
10012a80:	1104b03a 	or	r2,r2,r4
10012a84:	9024927a 	slli	r18,r18,9
10012a88:	1004c03a 	cmpne	r2,r2,zero
10012a8c:	bc62b03a 	or	r17,r23,r17
10012a90:	1738b03a 	or	fp,r2,fp
10012a94:	8880402c 	andhi	r2,r17,256
10012a98:	e4a4b03a 	or	r18,fp,r18
10012a9c:	10000726 	beq	r2,zero,10012abc <__muldf3+0x628>
10012aa0:	9006d07a 	srli	r3,r18,1
10012aa4:	880497fa 	slli	r2,r17,31
10012aa8:	9480004c 	andi	r18,r18,1
10012aac:	8822d07a 	srli	r17,r17,1
10012ab0:	1ca4b03a 	or	r18,r3,r18
10012ab4:	14a4b03a 	or	r18,r2,r18
10012ab8:	4007883a 	mov	r3,r8
10012abc:	1880ffc4 	addi	r2,r3,1023
10012ac0:	0080460e 	bge	zero,r2,10012bdc <__muldf3+0x748>
10012ac4:	910001cc 	andi	r4,r18,7
10012ac8:	20000726 	beq	r4,zero,10012ae8 <__muldf3+0x654>
10012acc:	910003cc 	andi	r4,r18,15
10012ad0:	01400104 	movi	r5,4
10012ad4:	21400426 	beq	r4,r5,10012ae8 <__muldf3+0x654>
10012ad8:	9149883a 	add	r4,r18,r5
10012adc:	24a5803a 	cmpltu	r18,r4,r18
10012ae0:	8ca3883a 	add	r17,r17,r18
10012ae4:	2025883a 	mov	r18,r4
10012ae8:	8900402c 	andhi	r4,r17,256
10012aec:	20000426 	beq	r4,zero,10012b00 <__muldf3+0x66c>
10012af0:	18810004 	addi	r2,r3,1024
10012af4:	00ffc034 	movhi	r3,65280
10012af8:	18ffffc4 	addi	r3,r3,-1
10012afc:	88e2703a 	and	r17,r17,r3
10012b00:	00c1ff84 	movi	r3,2046
10012b04:	18bf1316 	blt	r3,r2,10012754 <__alt_data_end+0xf8012754>
10012b08:	882c977a 	slli	r22,r17,29
10012b0c:	9024d0fa 	srli	r18,r18,3
10012b10:	8822927a 	slli	r17,r17,9
10012b14:	1081ffcc 	andi	r2,r2,2047
10012b18:	b4acb03a 	or	r22,r22,r18
10012b1c:	8820d33a 	srli	r16,r17,12
10012b20:	3027883a 	mov	r19,r6
10012b24:	003eba06 	br	10012610 <__alt_data_end+0xf8012610>
10012b28:	8080022c 	andhi	r2,r16,8
10012b2c:	10000926 	beq	r2,zero,10012b54 <__muldf3+0x6c0>
10012b30:	8880022c 	andhi	r2,r17,8
10012b34:	1000071e 	bne	r2,zero,10012b54 <__muldf3+0x6c0>
10012b38:	00800434 	movhi	r2,16
10012b3c:	8c000234 	orhi	r16,r17,8
10012b40:	10bfffc4 	addi	r2,r2,-1
10012b44:	e027883a 	mov	r19,fp
10012b48:	80a0703a 	and	r16,r16,r2
10012b4c:	902d883a 	mov	r22,r18
10012b50:	003f1706 	br	100127b0 <__alt_data_end+0xf80127b0>
10012b54:	00800434 	movhi	r2,16
10012b58:	84000234 	orhi	r16,r16,8
10012b5c:	10bfffc4 	addi	r2,r2,-1
10012b60:	80a0703a 	and	r16,r16,r2
10012b64:	003f1206 	br	100127b0 <__alt_data_end+0xf80127b0>
10012b68:	147ff604 	addi	r17,r2,-40
10012b6c:	3462983a 	sll	r17,r6,r17
10012b70:	0025883a 	mov	r18,zero
10012b74:	003ef306 	br	10012744 <__alt_data_end+0xf8012744>
10012b78:	3009883a 	mov	r4,r6
10012b7c:	d9400215 	stw	r5,8(sp)
10012b80:	d9800715 	stw	r6,28(sp)
10012b84:	da400415 	stw	r9,16(sp)
10012b88:	da800315 	stw	r10,12(sp)
10012b8c:	00138000 	call	10013800 <__clzsi2>
10012b90:	10800804 	addi	r2,r2,32
10012b94:	da800317 	ldw	r10,12(sp)
10012b98:	da400417 	ldw	r9,16(sp)
10012b9c:	d9800717 	ldw	r6,28(sp)
10012ba0:	d9400217 	ldw	r5,8(sp)
10012ba4:	003edd06 	br	1001271c <__alt_data_end+0xf801271c>
10012ba8:	143ff604 	addi	r16,r2,-40
10012bac:	ac20983a 	sll	r16,r21,r16
10012bb0:	002d883a 	mov	r22,zero
10012bb4:	003ec106 	br	100126bc <__alt_data_end+0xf80126bc>
10012bb8:	d9800715 	stw	r6,28(sp)
10012bbc:	d9c00215 	stw	r7,8(sp)
10012bc0:	da400415 	stw	r9,16(sp)
10012bc4:	00138000 	call	10013800 <__clzsi2>
10012bc8:	10800804 	addi	r2,r2,32
10012bcc:	da400417 	ldw	r9,16(sp)
10012bd0:	d9c00217 	ldw	r7,8(sp)
10012bd4:	d9800717 	ldw	r6,28(sp)
10012bd8:	003eae06 	br	10012694 <__alt_data_end+0xf8012694>
10012bdc:	00c00044 	movi	r3,1
10012be0:	1887c83a 	sub	r3,r3,r2
10012be4:	01000e04 	movi	r4,56
10012be8:	20fe8516 	blt	r4,r3,10012600 <__alt_data_end+0xf8012600>
10012bec:	010007c4 	movi	r4,31
10012bf0:	20c01b16 	blt	r4,r3,10012c60 <__muldf3+0x7cc>
10012bf4:	00800804 	movi	r2,32
10012bf8:	10c5c83a 	sub	r2,r2,r3
10012bfc:	888a983a 	sll	r5,r17,r2
10012c00:	90c8d83a 	srl	r4,r18,r3
10012c04:	9084983a 	sll	r2,r18,r2
10012c08:	88e2d83a 	srl	r17,r17,r3
10012c0c:	2906b03a 	or	r3,r5,r4
10012c10:	1004c03a 	cmpne	r2,r2,zero
10012c14:	1886b03a 	or	r3,r3,r2
10012c18:	188001cc 	andi	r2,r3,7
10012c1c:	10000726 	beq	r2,zero,10012c3c <__muldf3+0x7a8>
10012c20:	188003cc 	andi	r2,r3,15
10012c24:	01000104 	movi	r4,4
10012c28:	11000426 	beq	r2,r4,10012c3c <__muldf3+0x7a8>
10012c2c:	1805883a 	mov	r2,r3
10012c30:	10c00104 	addi	r3,r2,4
10012c34:	1885803a 	cmpltu	r2,r3,r2
10012c38:	88a3883a 	add	r17,r17,r2
10012c3c:	8880202c 	andhi	r2,r17,128
10012c40:	10001c26 	beq	r2,zero,10012cb4 <__muldf3+0x820>
10012c44:	3027883a 	mov	r19,r6
10012c48:	00800044 	movi	r2,1
10012c4c:	0021883a 	mov	r16,zero
10012c50:	002d883a 	mov	r22,zero
10012c54:	003e6e06 	br	10012610 <__alt_data_end+0xf8012610>
10012c58:	4007883a 	mov	r3,r8
10012c5c:	003f9706 	br	10012abc <__alt_data_end+0xf8012abc>
10012c60:	017ff844 	movi	r5,-31
10012c64:	2885c83a 	sub	r2,r5,r2
10012c68:	888ad83a 	srl	r5,r17,r2
10012c6c:	00800804 	movi	r2,32
10012c70:	18801a26 	beq	r3,r2,10012cdc <__muldf3+0x848>
10012c74:	01001004 	movi	r4,64
10012c78:	20c7c83a 	sub	r3,r4,r3
10012c7c:	88e2983a 	sll	r17,r17,r3
10012c80:	8ca4b03a 	or	r18,r17,r18
10012c84:	9004c03a 	cmpne	r2,r18,zero
10012c88:	2884b03a 	or	r2,r5,r2
10012c8c:	144001cc 	andi	r17,r2,7
10012c90:	88000d1e 	bne	r17,zero,10012cc8 <__muldf3+0x834>
10012c94:	0021883a 	mov	r16,zero
10012c98:	102cd0fa 	srli	r22,r2,3
10012c9c:	3027883a 	mov	r19,r6
10012ca0:	0005883a 	mov	r2,zero
10012ca4:	b46cb03a 	or	r22,r22,r17
10012ca8:	003e5906 	br	10012610 <__alt_data_end+0xf8012610>
10012cac:	1007883a 	mov	r3,r2
10012cb0:	0023883a 	mov	r17,zero
10012cb4:	8820927a 	slli	r16,r17,9
10012cb8:	1805883a 	mov	r2,r3
10012cbc:	8822977a 	slli	r17,r17,29
10012cc0:	8020d33a 	srli	r16,r16,12
10012cc4:	003ff406 	br	10012c98 <__alt_data_end+0xf8012c98>
10012cc8:	10c003cc 	andi	r3,r2,15
10012ccc:	01000104 	movi	r4,4
10012cd0:	193ff626 	beq	r3,r4,10012cac <__alt_data_end+0xf8012cac>
10012cd4:	0023883a 	mov	r17,zero
10012cd8:	003fd506 	br	10012c30 <__alt_data_end+0xf8012c30>
10012cdc:	0023883a 	mov	r17,zero
10012ce0:	003fe706 	br	10012c80 <__alt_data_end+0xf8012c80>
10012ce4:	00800434 	movhi	r2,16
10012ce8:	8c000234 	orhi	r16,r17,8
10012cec:	10bfffc4 	addi	r2,r2,-1
10012cf0:	3027883a 	mov	r19,r6
10012cf4:	80a0703a 	and	r16,r16,r2
10012cf8:	902d883a 	mov	r22,r18
10012cfc:	003eac06 	br	100127b0 <__alt_data_end+0xf80127b0>

10012d00 <__subdf3>:
10012d00:	02000434 	movhi	r8,16
10012d04:	423fffc4 	addi	r8,r8,-1
10012d08:	defffb04 	addi	sp,sp,-20
10012d0c:	2a14703a 	and	r10,r5,r8
10012d10:	3812d53a 	srli	r9,r7,20
10012d14:	3a10703a 	and	r8,r7,r8
10012d18:	2006d77a 	srli	r3,r4,29
10012d1c:	3004d77a 	srli	r2,r6,29
10012d20:	dc000015 	stw	r16,0(sp)
10012d24:	501490fa 	slli	r10,r10,3
10012d28:	2820d53a 	srli	r16,r5,20
10012d2c:	401090fa 	slli	r8,r8,3
10012d30:	dc800215 	stw	r18,8(sp)
10012d34:	dc400115 	stw	r17,4(sp)
10012d38:	dfc00415 	stw	ra,16(sp)
10012d3c:	202290fa 	slli	r17,r4,3
10012d40:	dcc00315 	stw	r19,12(sp)
10012d44:	4a41ffcc 	andi	r9,r9,2047
10012d48:	0101ffc4 	movi	r4,2047
10012d4c:	2824d7fa 	srli	r18,r5,31
10012d50:	8401ffcc 	andi	r16,r16,2047
10012d54:	50c6b03a 	or	r3,r10,r3
10012d58:	380ed7fa 	srli	r7,r7,31
10012d5c:	408ab03a 	or	r5,r8,r2
10012d60:	300c90fa 	slli	r6,r6,3
10012d64:	49009626 	beq	r9,r4,10012fc0 <__subdf3+0x2c0>
10012d68:	39c0005c 	xori	r7,r7,1
10012d6c:	8245c83a 	sub	r2,r16,r9
10012d70:	3c807426 	beq	r7,r18,10012f44 <__subdf3+0x244>
10012d74:	0080af0e 	bge	zero,r2,10013034 <__subdf3+0x334>
10012d78:	48002a1e 	bne	r9,zero,10012e24 <__subdf3+0x124>
10012d7c:	2988b03a 	or	r4,r5,r6
10012d80:	20009a1e 	bne	r4,zero,10012fec <__subdf3+0x2ec>
10012d84:	888001cc 	andi	r2,r17,7
10012d88:	10000726 	beq	r2,zero,10012da8 <__subdf3+0xa8>
10012d8c:	888003cc 	andi	r2,r17,15
10012d90:	01000104 	movi	r4,4
10012d94:	11000426 	beq	r2,r4,10012da8 <__subdf3+0xa8>
10012d98:	890b883a 	add	r5,r17,r4
10012d9c:	2c63803a 	cmpltu	r17,r5,r17
10012da0:	1c47883a 	add	r3,r3,r17
10012da4:	2823883a 	mov	r17,r5
10012da8:	1880202c 	andhi	r2,r3,128
10012dac:	10005926 	beq	r2,zero,10012f14 <__subdf3+0x214>
10012db0:	84000044 	addi	r16,r16,1
10012db4:	0081ffc4 	movi	r2,2047
10012db8:	8080be26 	beq	r16,r2,100130b4 <__subdf3+0x3b4>
10012dbc:	017fe034 	movhi	r5,65408
10012dc0:	297fffc4 	addi	r5,r5,-1
10012dc4:	1946703a 	and	r3,r3,r5
10012dc8:	1804977a 	slli	r2,r3,29
10012dcc:	1806927a 	slli	r3,r3,9
10012dd0:	8822d0fa 	srli	r17,r17,3
10012dd4:	8401ffcc 	andi	r16,r16,2047
10012dd8:	180ad33a 	srli	r5,r3,12
10012ddc:	9100004c 	andi	r4,r18,1
10012de0:	1444b03a 	or	r2,r2,r17
10012de4:	80c1ffcc 	andi	r3,r16,2047
10012de8:	1820953a 	slli	r16,r3,20
10012dec:	20c03fcc 	andi	r3,r4,255
10012df0:	180897fa 	slli	r4,r3,31
10012df4:	00c00434 	movhi	r3,16
10012df8:	18ffffc4 	addi	r3,r3,-1
10012dfc:	28c6703a 	and	r3,r5,r3
10012e00:	1c06b03a 	or	r3,r3,r16
10012e04:	1906b03a 	or	r3,r3,r4
10012e08:	dfc00417 	ldw	ra,16(sp)
10012e0c:	dcc00317 	ldw	r19,12(sp)
10012e10:	dc800217 	ldw	r18,8(sp)
10012e14:	dc400117 	ldw	r17,4(sp)
10012e18:	dc000017 	ldw	r16,0(sp)
10012e1c:	dec00504 	addi	sp,sp,20
10012e20:	f800283a 	ret
10012e24:	0101ffc4 	movi	r4,2047
10012e28:	813fd626 	beq	r16,r4,10012d84 <__alt_data_end+0xf8012d84>
10012e2c:	29402034 	orhi	r5,r5,128
10012e30:	01000e04 	movi	r4,56
10012e34:	2080a316 	blt	r4,r2,100130c4 <__subdf3+0x3c4>
10012e38:	010007c4 	movi	r4,31
10012e3c:	2080c616 	blt	r4,r2,10013158 <__subdf3+0x458>
10012e40:	01000804 	movi	r4,32
10012e44:	2089c83a 	sub	r4,r4,r2
10012e48:	2910983a 	sll	r8,r5,r4
10012e4c:	308ed83a 	srl	r7,r6,r2
10012e50:	3108983a 	sll	r4,r6,r4
10012e54:	2884d83a 	srl	r2,r5,r2
10012e58:	41ccb03a 	or	r6,r8,r7
10012e5c:	2008c03a 	cmpne	r4,r4,zero
10012e60:	310cb03a 	or	r6,r6,r4
10012e64:	898dc83a 	sub	r6,r17,r6
10012e68:	89a3803a 	cmpltu	r17,r17,r6
10012e6c:	1887c83a 	sub	r3,r3,r2
10012e70:	1c47c83a 	sub	r3,r3,r17
10012e74:	3023883a 	mov	r17,r6
10012e78:	1880202c 	andhi	r2,r3,128
10012e7c:	10002326 	beq	r2,zero,10012f0c <__subdf3+0x20c>
10012e80:	04c02034 	movhi	r19,128
10012e84:	9cffffc4 	addi	r19,r19,-1
10012e88:	1ce6703a 	and	r19,r3,r19
10012e8c:	98007a26 	beq	r19,zero,10013078 <__subdf3+0x378>
10012e90:	9809883a 	mov	r4,r19
10012e94:	00138000 	call	10013800 <__clzsi2>
10012e98:	113ffe04 	addi	r4,r2,-8
10012e9c:	00c007c4 	movi	r3,31
10012ea0:	19007b16 	blt	r3,r4,10013090 <__subdf3+0x390>
10012ea4:	00800804 	movi	r2,32
10012ea8:	1105c83a 	sub	r2,r2,r4
10012eac:	8884d83a 	srl	r2,r17,r2
10012eb0:	9906983a 	sll	r3,r19,r4
10012eb4:	8922983a 	sll	r17,r17,r4
10012eb8:	10c4b03a 	or	r2,r2,r3
10012ebc:	24007816 	blt	r4,r16,100130a0 <__subdf3+0x3a0>
10012ec0:	2421c83a 	sub	r16,r4,r16
10012ec4:	80c00044 	addi	r3,r16,1
10012ec8:	010007c4 	movi	r4,31
10012ecc:	20c09516 	blt	r4,r3,10013124 <__subdf3+0x424>
10012ed0:	01400804 	movi	r5,32
10012ed4:	28cbc83a 	sub	r5,r5,r3
10012ed8:	88c8d83a 	srl	r4,r17,r3
10012edc:	8962983a 	sll	r17,r17,r5
10012ee0:	114a983a 	sll	r5,r2,r5
10012ee4:	10c6d83a 	srl	r3,r2,r3
10012ee8:	8804c03a 	cmpne	r2,r17,zero
10012eec:	290ab03a 	or	r5,r5,r4
10012ef0:	28a2b03a 	or	r17,r5,r2
10012ef4:	0021883a 	mov	r16,zero
10012ef8:	003fa206 	br	10012d84 <__alt_data_end+0xf8012d84>
10012efc:	2090b03a 	or	r8,r4,r2
10012f00:	40018e26 	beq	r8,zero,1001353c <__subdf3+0x83c>
10012f04:	1007883a 	mov	r3,r2
10012f08:	2023883a 	mov	r17,r4
10012f0c:	888001cc 	andi	r2,r17,7
10012f10:	103f9e1e 	bne	r2,zero,10012d8c <__alt_data_end+0xf8012d8c>
10012f14:	1804977a 	slli	r2,r3,29
10012f18:	8822d0fa 	srli	r17,r17,3
10012f1c:	1810d0fa 	srli	r8,r3,3
10012f20:	9100004c 	andi	r4,r18,1
10012f24:	1444b03a 	or	r2,r2,r17
10012f28:	00c1ffc4 	movi	r3,2047
10012f2c:	80c02826 	beq	r16,r3,10012fd0 <__subdf3+0x2d0>
10012f30:	01400434 	movhi	r5,16
10012f34:	297fffc4 	addi	r5,r5,-1
10012f38:	80e0703a 	and	r16,r16,r3
10012f3c:	414a703a 	and	r5,r8,r5
10012f40:	003fa806 	br	10012de4 <__alt_data_end+0xf8012de4>
10012f44:	0080630e 	bge	zero,r2,100130d4 <__subdf3+0x3d4>
10012f48:	48003026 	beq	r9,zero,1001300c <__subdf3+0x30c>
10012f4c:	0101ffc4 	movi	r4,2047
10012f50:	813f8c26 	beq	r16,r4,10012d84 <__alt_data_end+0xf8012d84>
10012f54:	29402034 	orhi	r5,r5,128
10012f58:	01000e04 	movi	r4,56
10012f5c:	2080a90e 	bge	r4,r2,10013204 <__subdf3+0x504>
10012f60:	298cb03a 	or	r6,r5,r6
10012f64:	3012c03a 	cmpne	r9,r6,zero
10012f68:	0005883a 	mov	r2,zero
10012f6c:	4c53883a 	add	r9,r9,r17
10012f70:	4c63803a 	cmpltu	r17,r9,r17
10012f74:	10c7883a 	add	r3,r2,r3
10012f78:	88c7883a 	add	r3,r17,r3
10012f7c:	4823883a 	mov	r17,r9
10012f80:	1880202c 	andhi	r2,r3,128
10012f84:	1000d026 	beq	r2,zero,100132c8 <__subdf3+0x5c8>
10012f88:	84000044 	addi	r16,r16,1
10012f8c:	0081ffc4 	movi	r2,2047
10012f90:	8080fe26 	beq	r16,r2,1001338c <__subdf3+0x68c>
10012f94:	00bfe034 	movhi	r2,65408
10012f98:	10bfffc4 	addi	r2,r2,-1
10012f9c:	1886703a 	and	r3,r3,r2
10012fa0:	880ad07a 	srli	r5,r17,1
10012fa4:	180497fa 	slli	r2,r3,31
10012fa8:	8900004c 	andi	r4,r17,1
10012fac:	2922b03a 	or	r17,r5,r4
10012fb0:	1806d07a 	srli	r3,r3,1
10012fb4:	1462b03a 	or	r17,r2,r17
10012fb8:	3825883a 	mov	r18,r7
10012fbc:	003f7106 	br	10012d84 <__alt_data_end+0xf8012d84>
10012fc0:	2984b03a 	or	r2,r5,r6
10012fc4:	103f6826 	beq	r2,zero,10012d68 <__alt_data_end+0xf8012d68>
10012fc8:	39c03fcc 	andi	r7,r7,255
10012fcc:	003f6706 	br	10012d6c <__alt_data_end+0xf8012d6c>
10012fd0:	4086b03a 	or	r3,r8,r2
10012fd4:	18015226 	beq	r3,zero,10013520 <__subdf3+0x820>
10012fd8:	00c00434 	movhi	r3,16
10012fdc:	41400234 	orhi	r5,r8,8
10012fe0:	18ffffc4 	addi	r3,r3,-1
10012fe4:	28ca703a 	and	r5,r5,r3
10012fe8:	003f7e06 	br	10012de4 <__alt_data_end+0xf8012de4>
10012fec:	10bfffc4 	addi	r2,r2,-1
10012ff0:	1000491e 	bne	r2,zero,10013118 <__subdf3+0x418>
10012ff4:	898fc83a 	sub	r7,r17,r6
10012ff8:	89e3803a 	cmpltu	r17,r17,r7
10012ffc:	1947c83a 	sub	r3,r3,r5
10013000:	1c47c83a 	sub	r3,r3,r17
10013004:	3823883a 	mov	r17,r7
10013008:	003f9b06 	br	10012e78 <__alt_data_end+0xf8012e78>
1001300c:	2988b03a 	or	r4,r5,r6
10013010:	203f5c26 	beq	r4,zero,10012d84 <__alt_data_end+0xf8012d84>
10013014:	10bfffc4 	addi	r2,r2,-1
10013018:	1000931e 	bne	r2,zero,10013268 <__subdf3+0x568>
1001301c:	898d883a 	add	r6,r17,r6
10013020:	3463803a 	cmpltu	r17,r6,r17
10013024:	1947883a 	add	r3,r3,r5
10013028:	88c7883a 	add	r3,r17,r3
1001302c:	3023883a 	mov	r17,r6
10013030:	003fd306 	br	10012f80 <__alt_data_end+0xf8012f80>
10013034:	1000541e 	bne	r2,zero,10013188 <__subdf3+0x488>
10013038:	80800044 	addi	r2,r16,1
1001303c:	1081ffcc 	andi	r2,r2,2047
10013040:	01000044 	movi	r4,1
10013044:	2080a20e 	bge	r4,r2,100132d0 <__subdf3+0x5d0>
10013048:	8989c83a 	sub	r4,r17,r6
1001304c:	8905803a 	cmpltu	r2,r17,r4
10013050:	1967c83a 	sub	r19,r3,r5
10013054:	98a7c83a 	sub	r19,r19,r2
10013058:	9880202c 	andhi	r2,r19,128
1001305c:	10006326 	beq	r2,zero,100131ec <__subdf3+0x4ec>
10013060:	3463c83a 	sub	r17,r6,r17
10013064:	28c7c83a 	sub	r3,r5,r3
10013068:	344d803a 	cmpltu	r6,r6,r17
1001306c:	19a7c83a 	sub	r19,r3,r6
10013070:	3825883a 	mov	r18,r7
10013074:	983f861e 	bne	r19,zero,10012e90 <__alt_data_end+0xf8012e90>
10013078:	8809883a 	mov	r4,r17
1001307c:	00138000 	call	10013800 <__clzsi2>
10013080:	10800804 	addi	r2,r2,32
10013084:	113ffe04 	addi	r4,r2,-8
10013088:	00c007c4 	movi	r3,31
1001308c:	193f850e 	bge	r3,r4,10012ea4 <__alt_data_end+0xf8012ea4>
10013090:	10bff604 	addi	r2,r2,-40
10013094:	8884983a 	sll	r2,r17,r2
10013098:	0023883a 	mov	r17,zero
1001309c:	243f880e 	bge	r4,r16,10012ec0 <__alt_data_end+0xf8012ec0>
100130a0:	00ffe034 	movhi	r3,65408
100130a4:	18ffffc4 	addi	r3,r3,-1
100130a8:	8121c83a 	sub	r16,r16,r4
100130ac:	10c6703a 	and	r3,r2,r3
100130b0:	003f3406 	br	10012d84 <__alt_data_end+0xf8012d84>
100130b4:	9100004c 	andi	r4,r18,1
100130b8:	000b883a 	mov	r5,zero
100130bc:	0005883a 	mov	r2,zero
100130c0:	003f4806 	br	10012de4 <__alt_data_end+0xf8012de4>
100130c4:	298cb03a 	or	r6,r5,r6
100130c8:	300cc03a 	cmpne	r6,r6,zero
100130cc:	0005883a 	mov	r2,zero
100130d0:	003f6406 	br	10012e64 <__alt_data_end+0xf8012e64>
100130d4:	10009a1e 	bne	r2,zero,10013340 <__subdf3+0x640>
100130d8:	82400044 	addi	r9,r16,1
100130dc:	4881ffcc 	andi	r2,r9,2047
100130e0:	02800044 	movi	r10,1
100130e4:	5080670e 	bge	r10,r2,10013284 <__subdf3+0x584>
100130e8:	0081ffc4 	movi	r2,2047
100130ec:	4880af26 	beq	r9,r2,100133ac <__subdf3+0x6ac>
100130f0:	898d883a 	add	r6,r17,r6
100130f4:	1945883a 	add	r2,r3,r5
100130f8:	3447803a 	cmpltu	r3,r6,r17
100130fc:	1887883a 	add	r3,r3,r2
10013100:	182297fa 	slli	r17,r3,31
10013104:	300cd07a 	srli	r6,r6,1
10013108:	1806d07a 	srli	r3,r3,1
1001310c:	4821883a 	mov	r16,r9
10013110:	89a2b03a 	or	r17,r17,r6
10013114:	003f1b06 	br	10012d84 <__alt_data_end+0xf8012d84>
10013118:	0101ffc4 	movi	r4,2047
1001311c:	813f441e 	bne	r16,r4,10012e30 <__alt_data_end+0xf8012e30>
10013120:	003f1806 	br	10012d84 <__alt_data_end+0xf8012d84>
10013124:	843ff844 	addi	r16,r16,-31
10013128:	01400804 	movi	r5,32
1001312c:	1408d83a 	srl	r4,r2,r16
10013130:	19405026 	beq	r3,r5,10013274 <__subdf3+0x574>
10013134:	01401004 	movi	r5,64
10013138:	28c7c83a 	sub	r3,r5,r3
1001313c:	10c4983a 	sll	r2,r2,r3
10013140:	88a2b03a 	or	r17,r17,r2
10013144:	8822c03a 	cmpne	r17,r17,zero
10013148:	2462b03a 	or	r17,r4,r17
1001314c:	0007883a 	mov	r3,zero
10013150:	0021883a 	mov	r16,zero
10013154:	003f6d06 	br	10012f0c <__alt_data_end+0xf8012f0c>
10013158:	11fff804 	addi	r7,r2,-32
1001315c:	01000804 	movi	r4,32
10013160:	29ced83a 	srl	r7,r5,r7
10013164:	11004526 	beq	r2,r4,1001327c <__subdf3+0x57c>
10013168:	01001004 	movi	r4,64
1001316c:	2089c83a 	sub	r4,r4,r2
10013170:	2904983a 	sll	r2,r5,r4
10013174:	118cb03a 	or	r6,r2,r6
10013178:	300cc03a 	cmpne	r6,r6,zero
1001317c:	398cb03a 	or	r6,r7,r6
10013180:	0005883a 	mov	r2,zero
10013184:	003f3706 	br	10012e64 <__alt_data_end+0xf8012e64>
10013188:	80002a26 	beq	r16,zero,10013234 <__subdf3+0x534>
1001318c:	0101ffc4 	movi	r4,2047
10013190:	49006626 	beq	r9,r4,1001332c <__subdf3+0x62c>
10013194:	0085c83a 	sub	r2,zero,r2
10013198:	18c02034 	orhi	r3,r3,128
1001319c:	01000e04 	movi	r4,56
100131a0:	20807e16 	blt	r4,r2,1001339c <__subdf3+0x69c>
100131a4:	010007c4 	movi	r4,31
100131a8:	2080e716 	blt	r4,r2,10013548 <__subdf3+0x848>
100131ac:	01000804 	movi	r4,32
100131b0:	2089c83a 	sub	r4,r4,r2
100131b4:	1914983a 	sll	r10,r3,r4
100131b8:	8890d83a 	srl	r8,r17,r2
100131bc:	8908983a 	sll	r4,r17,r4
100131c0:	1884d83a 	srl	r2,r3,r2
100131c4:	5222b03a 	or	r17,r10,r8
100131c8:	2006c03a 	cmpne	r3,r4,zero
100131cc:	88e2b03a 	or	r17,r17,r3
100131d0:	3463c83a 	sub	r17,r6,r17
100131d4:	2885c83a 	sub	r2,r5,r2
100131d8:	344d803a 	cmpltu	r6,r6,r17
100131dc:	1187c83a 	sub	r3,r2,r6
100131e0:	4821883a 	mov	r16,r9
100131e4:	3825883a 	mov	r18,r7
100131e8:	003f2306 	br	10012e78 <__alt_data_end+0xf8012e78>
100131ec:	24d0b03a 	or	r8,r4,r19
100131f0:	40001b1e 	bne	r8,zero,10013260 <__subdf3+0x560>
100131f4:	0005883a 	mov	r2,zero
100131f8:	0009883a 	mov	r4,zero
100131fc:	0021883a 	mov	r16,zero
10013200:	003f4906 	br	10012f28 <__alt_data_end+0xf8012f28>
10013204:	010007c4 	movi	r4,31
10013208:	20803a16 	blt	r4,r2,100132f4 <__subdf3+0x5f4>
1001320c:	01000804 	movi	r4,32
10013210:	2089c83a 	sub	r4,r4,r2
10013214:	2912983a 	sll	r9,r5,r4
10013218:	3090d83a 	srl	r8,r6,r2
1001321c:	3108983a 	sll	r4,r6,r4
10013220:	2884d83a 	srl	r2,r5,r2
10013224:	4a12b03a 	or	r9,r9,r8
10013228:	2008c03a 	cmpne	r4,r4,zero
1001322c:	4912b03a 	or	r9,r9,r4
10013230:	003f4e06 	br	10012f6c <__alt_data_end+0xf8012f6c>
10013234:	1c48b03a 	or	r4,r3,r17
10013238:	20003c26 	beq	r4,zero,1001332c <__subdf3+0x62c>
1001323c:	0084303a 	nor	r2,zero,r2
10013240:	1000381e 	bne	r2,zero,10013324 <__subdf3+0x624>
10013244:	3463c83a 	sub	r17,r6,r17
10013248:	28c5c83a 	sub	r2,r5,r3
1001324c:	344d803a 	cmpltu	r6,r6,r17
10013250:	1187c83a 	sub	r3,r2,r6
10013254:	4821883a 	mov	r16,r9
10013258:	3825883a 	mov	r18,r7
1001325c:	003f0606 	br	10012e78 <__alt_data_end+0xf8012e78>
10013260:	2023883a 	mov	r17,r4
10013264:	003f0906 	br	10012e8c <__alt_data_end+0xf8012e8c>
10013268:	0101ffc4 	movi	r4,2047
1001326c:	813f3a1e 	bne	r16,r4,10012f58 <__alt_data_end+0xf8012f58>
10013270:	003ec406 	br	10012d84 <__alt_data_end+0xf8012d84>
10013274:	0005883a 	mov	r2,zero
10013278:	003fb106 	br	10013140 <__alt_data_end+0xf8013140>
1001327c:	0005883a 	mov	r2,zero
10013280:	003fbc06 	br	10013174 <__alt_data_end+0xf8013174>
10013284:	1c44b03a 	or	r2,r3,r17
10013288:	80008e1e 	bne	r16,zero,100134c4 <__subdf3+0x7c4>
1001328c:	1000c826 	beq	r2,zero,100135b0 <__subdf3+0x8b0>
10013290:	2984b03a 	or	r2,r5,r6
10013294:	103ebb26 	beq	r2,zero,10012d84 <__alt_data_end+0xf8012d84>
10013298:	8989883a 	add	r4,r17,r6
1001329c:	1945883a 	add	r2,r3,r5
100132a0:	2447803a 	cmpltu	r3,r4,r17
100132a4:	1887883a 	add	r3,r3,r2
100132a8:	1880202c 	andhi	r2,r3,128
100132ac:	2023883a 	mov	r17,r4
100132b0:	103f1626 	beq	r2,zero,10012f0c <__alt_data_end+0xf8012f0c>
100132b4:	00bfe034 	movhi	r2,65408
100132b8:	10bfffc4 	addi	r2,r2,-1
100132bc:	5021883a 	mov	r16,r10
100132c0:	1886703a 	and	r3,r3,r2
100132c4:	003eaf06 	br	10012d84 <__alt_data_end+0xf8012d84>
100132c8:	3825883a 	mov	r18,r7
100132cc:	003f0f06 	br	10012f0c <__alt_data_end+0xf8012f0c>
100132d0:	1c44b03a 	or	r2,r3,r17
100132d4:	8000251e 	bne	r16,zero,1001336c <__subdf3+0x66c>
100132d8:	1000661e 	bne	r2,zero,10013474 <__subdf3+0x774>
100132dc:	2990b03a 	or	r8,r5,r6
100132e0:	40009626 	beq	r8,zero,1001353c <__subdf3+0x83c>
100132e4:	2807883a 	mov	r3,r5
100132e8:	3023883a 	mov	r17,r6
100132ec:	3825883a 	mov	r18,r7
100132f0:	003ea406 	br	10012d84 <__alt_data_end+0xf8012d84>
100132f4:	127ff804 	addi	r9,r2,-32
100132f8:	01000804 	movi	r4,32
100132fc:	2a52d83a 	srl	r9,r5,r9
10013300:	11008c26 	beq	r2,r4,10013534 <__subdf3+0x834>
10013304:	01001004 	movi	r4,64
10013308:	2085c83a 	sub	r2,r4,r2
1001330c:	2884983a 	sll	r2,r5,r2
10013310:	118cb03a 	or	r6,r2,r6
10013314:	300cc03a 	cmpne	r6,r6,zero
10013318:	4992b03a 	or	r9,r9,r6
1001331c:	0005883a 	mov	r2,zero
10013320:	003f1206 	br	10012f6c <__alt_data_end+0xf8012f6c>
10013324:	0101ffc4 	movi	r4,2047
10013328:	493f9c1e 	bne	r9,r4,1001319c <__alt_data_end+0xf801319c>
1001332c:	2807883a 	mov	r3,r5
10013330:	3023883a 	mov	r17,r6
10013334:	4821883a 	mov	r16,r9
10013338:	3825883a 	mov	r18,r7
1001333c:	003e9106 	br	10012d84 <__alt_data_end+0xf8012d84>
10013340:	80001f1e 	bne	r16,zero,100133c0 <__subdf3+0x6c0>
10013344:	1c48b03a 	or	r4,r3,r17
10013348:	20005a26 	beq	r4,zero,100134b4 <__subdf3+0x7b4>
1001334c:	0084303a 	nor	r2,zero,r2
10013350:	1000561e 	bne	r2,zero,100134ac <__subdf3+0x7ac>
10013354:	89a3883a 	add	r17,r17,r6
10013358:	1945883a 	add	r2,r3,r5
1001335c:	898d803a 	cmpltu	r6,r17,r6
10013360:	3087883a 	add	r3,r6,r2
10013364:	4821883a 	mov	r16,r9
10013368:	003f0506 	br	10012f80 <__alt_data_end+0xf8012f80>
1001336c:	10002b1e 	bne	r2,zero,1001341c <__subdf3+0x71c>
10013370:	2984b03a 	or	r2,r5,r6
10013374:	10008026 	beq	r2,zero,10013578 <__subdf3+0x878>
10013378:	2807883a 	mov	r3,r5
1001337c:	3023883a 	mov	r17,r6
10013380:	3825883a 	mov	r18,r7
10013384:	0401ffc4 	movi	r16,2047
10013388:	003e7e06 	br	10012d84 <__alt_data_end+0xf8012d84>
1001338c:	3809883a 	mov	r4,r7
10013390:	0011883a 	mov	r8,zero
10013394:	0005883a 	mov	r2,zero
10013398:	003ee306 	br	10012f28 <__alt_data_end+0xf8012f28>
1001339c:	1c62b03a 	or	r17,r3,r17
100133a0:	8822c03a 	cmpne	r17,r17,zero
100133a4:	0005883a 	mov	r2,zero
100133a8:	003f8906 	br	100131d0 <__alt_data_end+0xf80131d0>
100133ac:	3809883a 	mov	r4,r7
100133b0:	4821883a 	mov	r16,r9
100133b4:	0011883a 	mov	r8,zero
100133b8:	0005883a 	mov	r2,zero
100133bc:	003eda06 	br	10012f28 <__alt_data_end+0xf8012f28>
100133c0:	0101ffc4 	movi	r4,2047
100133c4:	49003b26 	beq	r9,r4,100134b4 <__subdf3+0x7b4>
100133c8:	0085c83a 	sub	r2,zero,r2
100133cc:	18c02034 	orhi	r3,r3,128
100133d0:	01000e04 	movi	r4,56
100133d4:	20806e16 	blt	r4,r2,10013590 <__subdf3+0x890>
100133d8:	010007c4 	movi	r4,31
100133dc:	20807716 	blt	r4,r2,100135bc <__subdf3+0x8bc>
100133e0:	01000804 	movi	r4,32
100133e4:	2089c83a 	sub	r4,r4,r2
100133e8:	1914983a 	sll	r10,r3,r4
100133ec:	8890d83a 	srl	r8,r17,r2
100133f0:	8908983a 	sll	r4,r17,r4
100133f4:	1884d83a 	srl	r2,r3,r2
100133f8:	5222b03a 	or	r17,r10,r8
100133fc:	2006c03a 	cmpne	r3,r4,zero
10013400:	88e2b03a 	or	r17,r17,r3
10013404:	89a3883a 	add	r17,r17,r6
10013408:	1145883a 	add	r2,r2,r5
1001340c:	898d803a 	cmpltu	r6,r17,r6
10013410:	3087883a 	add	r3,r6,r2
10013414:	4821883a 	mov	r16,r9
10013418:	003ed906 	br	10012f80 <__alt_data_end+0xf8012f80>
1001341c:	2984b03a 	or	r2,r5,r6
10013420:	10004226 	beq	r2,zero,1001352c <__subdf3+0x82c>
10013424:	1808d0fa 	srli	r4,r3,3
10013428:	8822d0fa 	srli	r17,r17,3
1001342c:	1806977a 	slli	r3,r3,29
10013430:	2080022c 	andhi	r2,r4,8
10013434:	1c62b03a 	or	r17,r3,r17
10013438:	10000826 	beq	r2,zero,1001345c <__subdf3+0x75c>
1001343c:	2812d0fa 	srli	r9,r5,3
10013440:	4880022c 	andhi	r2,r9,8
10013444:	1000051e 	bne	r2,zero,1001345c <__subdf3+0x75c>
10013448:	300cd0fa 	srli	r6,r6,3
1001344c:	2804977a 	slli	r2,r5,29
10013450:	4809883a 	mov	r4,r9
10013454:	3825883a 	mov	r18,r7
10013458:	11a2b03a 	or	r17,r2,r6
1001345c:	8806d77a 	srli	r3,r17,29
10013460:	200890fa 	slli	r4,r4,3
10013464:	882290fa 	slli	r17,r17,3
10013468:	0401ffc4 	movi	r16,2047
1001346c:	1906b03a 	or	r3,r3,r4
10013470:	003e4406 	br	10012d84 <__alt_data_end+0xf8012d84>
10013474:	2984b03a 	or	r2,r5,r6
10013478:	103e4226 	beq	r2,zero,10012d84 <__alt_data_end+0xf8012d84>
1001347c:	8989c83a 	sub	r4,r17,r6
10013480:	8911803a 	cmpltu	r8,r17,r4
10013484:	1945c83a 	sub	r2,r3,r5
10013488:	1205c83a 	sub	r2,r2,r8
1001348c:	1200202c 	andhi	r8,r2,128
10013490:	403e9a26 	beq	r8,zero,10012efc <__alt_data_end+0xf8012efc>
10013494:	3463c83a 	sub	r17,r6,r17
10013498:	28c5c83a 	sub	r2,r5,r3
1001349c:	344d803a 	cmpltu	r6,r6,r17
100134a0:	1187c83a 	sub	r3,r2,r6
100134a4:	3825883a 	mov	r18,r7
100134a8:	003e3606 	br	10012d84 <__alt_data_end+0xf8012d84>
100134ac:	0101ffc4 	movi	r4,2047
100134b0:	493fc71e 	bne	r9,r4,100133d0 <__alt_data_end+0xf80133d0>
100134b4:	2807883a 	mov	r3,r5
100134b8:	3023883a 	mov	r17,r6
100134bc:	4821883a 	mov	r16,r9
100134c0:	003e3006 	br	10012d84 <__alt_data_end+0xf8012d84>
100134c4:	10003626 	beq	r2,zero,100135a0 <__subdf3+0x8a0>
100134c8:	2984b03a 	or	r2,r5,r6
100134cc:	10001726 	beq	r2,zero,1001352c <__subdf3+0x82c>
100134d0:	1808d0fa 	srli	r4,r3,3
100134d4:	8822d0fa 	srli	r17,r17,3
100134d8:	1806977a 	slli	r3,r3,29
100134dc:	2080022c 	andhi	r2,r4,8
100134e0:	1c62b03a 	or	r17,r3,r17
100134e4:	10000726 	beq	r2,zero,10013504 <__subdf3+0x804>
100134e8:	2812d0fa 	srli	r9,r5,3
100134ec:	4880022c 	andhi	r2,r9,8
100134f0:	1000041e 	bne	r2,zero,10013504 <__subdf3+0x804>
100134f4:	300cd0fa 	srli	r6,r6,3
100134f8:	2804977a 	slli	r2,r5,29
100134fc:	4809883a 	mov	r4,r9
10013500:	11a2b03a 	or	r17,r2,r6
10013504:	8806d77a 	srli	r3,r17,29
10013508:	200890fa 	slli	r4,r4,3
1001350c:	882290fa 	slli	r17,r17,3
10013510:	3825883a 	mov	r18,r7
10013514:	1906b03a 	or	r3,r3,r4
10013518:	0401ffc4 	movi	r16,2047
1001351c:	003e1906 	br	10012d84 <__alt_data_end+0xf8012d84>
10013520:	000b883a 	mov	r5,zero
10013524:	0005883a 	mov	r2,zero
10013528:	003e2e06 	br	10012de4 <__alt_data_end+0xf8012de4>
1001352c:	0401ffc4 	movi	r16,2047
10013530:	003e1406 	br	10012d84 <__alt_data_end+0xf8012d84>
10013534:	0005883a 	mov	r2,zero
10013538:	003f7506 	br	10013310 <__alt_data_end+0xf8013310>
1001353c:	0005883a 	mov	r2,zero
10013540:	0009883a 	mov	r4,zero
10013544:	003e7806 	br	10012f28 <__alt_data_end+0xf8012f28>
10013548:	123ff804 	addi	r8,r2,-32
1001354c:	01000804 	movi	r4,32
10013550:	1a10d83a 	srl	r8,r3,r8
10013554:	11002526 	beq	r2,r4,100135ec <__subdf3+0x8ec>
10013558:	01001004 	movi	r4,64
1001355c:	2085c83a 	sub	r2,r4,r2
10013560:	1884983a 	sll	r2,r3,r2
10013564:	1444b03a 	or	r2,r2,r17
10013568:	1004c03a 	cmpne	r2,r2,zero
1001356c:	40a2b03a 	or	r17,r8,r2
10013570:	0005883a 	mov	r2,zero
10013574:	003f1606 	br	100131d0 <__alt_data_end+0xf80131d0>
10013578:	02000434 	movhi	r8,16
1001357c:	0009883a 	mov	r4,zero
10013580:	423fffc4 	addi	r8,r8,-1
10013584:	00bfffc4 	movi	r2,-1
10013588:	0401ffc4 	movi	r16,2047
1001358c:	003e6606 	br	10012f28 <__alt_data_end+0xf8012f28>
10013590:	1c62b03a 	or	r17,r3,r17
10013594:	8822c03a 	cmpne	r17,r17,zero
10013598:	0005883a 	mov	r2,zero
1001359c:	003f9906 	br	10013404 <__alt_data_end+0xf8013404>
100135a0:	2807883a 	mov	r3,r5
100135a4:	3023883a 	mov	r17,r6
100135a8:	0401ffc4 	movi	r16,2047
100135ac:	003df506 	br	10012d84 <__alt_data_end+0xf8012d84>
100135b0:	2807883a 	mov	r3,r5
100135b4:	3023883a 	mov	r17,r6
100135b8:	003df206 	br	10012d84 <__alt_data_end+0xf8012d84>
100135bc:	123ff804 	addi	r8,r2,-32
100135c0:	01000804 	movi	r4,32
100135c4:	1a10d83a 	srl	r8,r3,r8
100135c8:	11000a26 	beq	r2,r4,100135f4 <__subdf3+0x8f4>
100135cc:	01001004 	movi	r4,64
100135d0:	2085c83a 	sub	r2,r4,r2
100135d4:	1884983a 	sll	r2,r3,r2
100135d8:	1444b03a 	or	r2,r2,r17
100135dc:	1004c03a 	cmpne	r2,r2,zero
100135e0:	40a2b03a 	or	r17,r8,r2
100135e4:	0005883a 	mov	r2,zero
100135e8:	003f8606 	br	10013404 <__alt_data_end+0xf8013404>
100135ec:	0005883a 	mov	r2,zero
100135f0:	003fdc06 	br	10013564 <__alt_data_end+0xf8013564>
100135f4:	0005883a 	mov	r2,zero
100135f8:	003ff706 	br	100135d8 <__alt_data_end+0xf80135d8>

100135fc <__fixdfsi>:
100135fc:	280cd53a 	srli	r6,r5,20
10013600:	00c00434 	movhi	r3,16
10013604:	18ffffc4 	addi	r3,r3,-1
10013608:	3181ffcc 	andi	r6,r6,2047
1001360c:	01c0ff84 	movi	r7,1022
10013610:	28c6703a 	and	r3,r5,r3
10013614:	280ad7fa 	srli	r5,r5,31
10013618:	3980120e 	bge	r7,r6,10013664 <__fixdfsi+0x68>
1001361c:	00810744 	movi	r2,1053
10013620:	11800c16 	blt	r2,r6,10013654 <__fixdfsi+0x58>
10013624:	00810cc4 	movi	r2,1075
10013628:	1185c83a 	sub	r2,r2,r6
1001362c:	01c007c4 	movi	r7,31
10013630:	18c00434 	orhi	r3,r3,16
10013634:	38800d16 	blt	r7,r2,1001366c <__fixdfsi+0x70>
10013638:	31befb44 	addi	r6,r6,-1043
1001363c:	2084d83a 	srl	r2,r4,r2
10013640:	1986983a 	sll	r3,r3,r6
10013644:	1884b03a 	or	r2,r3,r2
10013648:	28000726 	beq	r5,zero,10013668 <__fixdfsi+0x6c>
1001364c:	0085c83a 	sub	r2,zero,r2
10013650:	f800283a 	ret
10013654:	00a00034 	movhi	r2,32768
10013658:	10bfffc4 	addi	r2,r2,-1
1001365c:	2885883a 	add	r2,r5,r2
10013660:	f800283a 	ret
10013664:	0005883a 	mov	r2,zero
10013668:	f800283a 	ret
1001366c:	008104c4 	movi	r2,1043
10013670:	1185c83a 	sub	r2,r2,r6
10013674:	1884d83a 	srl	r2,r3,r2
10013678:	003ff306 	br	10013648 <__alt_data_end+0xf8013648>

1001367c <__floatsidf>:
1001367c:	defffd04 	addi	sp,sp,-12
10013680:	dfc00215 	stw	ra,8(sp)
10013684:	dc400115 	stw	r17,4(sp)
10013688:	dc000015 	stw	r16,0(sp)
1001368c:	20002b26 	beq	r4,zero,1001373c <__floatsidf+0xc0>
10013690:	2023883a 	mov	r17,r4
10013694:	2020d7fa 	srli	r16,r4,31
10013698:	20002d16 	blt	r4,zero,10013750 <__floatsidf+0xd4>
1001369c:	8809883a 	mov	r4,r17
100136a0:	00138000 	call	10013800 <__clzsi2>
100136a4:	01410784 	movi	r5,1054
100136a8:	288bc83a 	sub	r5,r5,r2
100136ac:	01010cc4 	movi	r4,1075
100136b0:	2149c83a 	sub	r4,r4,r5
100136b4:	00c007c4 	movi	r3,31
100136b8:	1900160e 	bge	r3,r4,10013714 <__floatsidf+0x98>
100136bc:	00c104c4 	movi	r3,1043
100136c0:	1947c83a 	sub	r3,r3,r5
100136c4:	88c6983a 	sll	r3,r17,r3
100136c8:	00800434 	movhi	r2,16
100136cc:	10bfffc4 	addi	r2,r2,-1
100136d0:	1886703a 	and	r3,r3,r2
100136d4:	2941ffcc 	andi	r5,r5,2047
100136d8:	800d883a 	mov	r6,r16
100136dc:	0005883a 	mov	r2,zero
100136e0:	280a953a 	slli	r5,r5,20
100136e4:	31803fcc 	andi	r6,r6,255
100136e8:	01000434 	movhi	r4,16
100136ec:	300c97fa 	slli	r6,r6,31
100136f0:	213fffc4 	addi	r4,r4,-1
100136f4:	1906703a 	and	r3,r3,r4
100136f8:	1946b03a 	or	r3,r3,r5
100136fc:	1986b03a 	or	r3,r3,r6
10013700:	dfc00217 	ldw	ra,8(sp)
10013704:	dc400117 	ldw	r17,4(sp)
10013708:	dc000017 	ldw	r16,0(sp)
1001370c:	dec00304 	addi	sp,sp,12
10013710:	f800283a 	ret
10013714:	00c002c4 	movi	r3,11
10013718:	1887c83a 	sub	r3,r3,r2
1001371c:	88c6d83a 	srl	r3,r17,r3
10013720:	8904983a 	sll	r2,r17,r4
10013724:	01000434 	movhi	r4,16
10013728:	213fffc4 	addi	r4,r4,-1
1001372c:	2941ffcc 	andi	r5,r5,2047
10013730:	1906703a 	and	r3,r3,r4
10013734:	800d883a 	mov	r6,r16
10013738:	003fe906 	br	100136e0 <__alt_data_end+0xf80136e0>
1001373c:	000d883a 	mov	r6,zero
10013740:	000b883a 	mov	r5,zero
10013744:	0007883a 	mov	r3,zero
10013748:	0005883a 	mov	r2,zero
1001374c:	003fe406 	br	100136e0 <__alt_data_end+0xf80136e0>
10013750:	0123c83a 	sub	r17,zero,r4
10013754:	003fd106 	br	1001369c <__alt_data_end+0xf801369c>

10013758 <__floatunsidf>:
10013758:	defffe04 	addi	sp,sp,-8
1001375c:	dc000015 	stw	r16,0(sp)
10013760:	dfc00115 	stw	ra,4(sp)
10013764:	2021883a 	mov	r16,r4
10013768:	20002226 	beq	r4,zero,100137f4 <__floatunsidf+0x9c>
1001376c:	00138000 	call	10013800 <__clzsi2>
10013770:	01010784 	movi	r4,1054
10013774:	2089c83a 	sub	r4,r4,r2
10013778:	01810cc4 	movi	r6,1075
1001377c:	310dc83a 	sub	r6,r6,r4
10013780:	00c007c4 	movi	r3,31
10013784:	1980120e 	bge	r3,r6,100137d0 <__floatunsidf+0x78>
10013788:	00c104c4 	movi	r3,1043
1001378c:	1907c83a 	sub	r3,r3,r4
10013790:	80ca983a 	sll	r5,r16,r3
10013794:	00800434 	movhi	r2,16
10013798:	10bfffc4 	addi	r2,r2,-1
1001379c:	2101ffcc 	andi	r4,r4,2047
100137a0:	0021883a 	mov	r16,zero
100137a4:	288a703a 	and	r5,r5,r2
100137a8:	2008953a 	slli	r4,r4,20
100137ac:	00c00434 	movhi	r3,16
100137b0:	18ffffc4 	addi	r3,r3,-1
100137b4:	28c6703a 	and	r3,r5,r3
100137b8:	8005883a 	mov	r2,r16
100137bc:	1906b03a 	or	r3,r3,r4
100137c0:	dfc00117 	ldw	ra,4(sp)
100137c4:	dc000017 	ldw	r16,0(sp)
100137c8:	dec00204 	addi	sp,sp,8
100137cc:	f800283a 	ret
100137d0:	00c002c4 	movi	r3,11
100137d4:	188bc83a 	sub	r5,r3,r2
100137d8:	814ad83a 	srl	r5,r16,r5
100137dc:	00c00434 	movhi	r3,16
100137e0:	18ffffc4 	addi	r3,r3,-1
100137e4:	81a0983a 	sll	r16,r16,r6
100137e8:	2101ffcc 	andi	r4,r4,2047
100137ec:	28ca703a 	and	r5,r5,r3
100137f0:	003fed06 	br	100137a8 <__alt_data_end+0xf80137a8>
100137f4:	0009883a 	mov	r4,zero
100137f8:	000b883a 	mov	r5,zero
100137fc:	003fea06 	br	100137a8 <__alt_data_end+0xf80137a8>

10013800 <__clzsi2>:
10013800:	00bfffd4 	movui	r2,65535
10013804:	11000536 	bltu	r2,r4,1001381c <__clzsi2+0x1c>
10013808:	00803fc4 	movi	r2,255
1001380c:	11000f36 	bltu	r2,r4,1001384c <__clzsi2+0x4c>
10013810:	00800804 	movi	r2,32
10013814:	0007883a 	mov	r3,zero
10013818:	00000506 	br	10013830 <__clzsi2+0x30>
1001381c:	00804034 	movhi	r2,256
10013820:	10bfffc4 	addi	r2,r2,-1
10013824:	11000c2e 	bgeu	r2,r4,10013858 <__clzsi2+0x58>
10013828:	00800204 	movi	r2,8
1001382c:	00c00604 	movi	r3,24
10013830:	20c8d83a 	srl	r4,r4,r3
10013834:	00c40074 	movhi	r3,4097
10013838:	18daa404 	addi	r3,r3,27280
1001383c:	1909883a 	add	r4,r3,r4
10013840:	20c00003 	ldbu	r3,0(r4)
10013844:	10c5c83a 	sub	r2,r2,r3
10013848:	f800283a 	ret
1001384c:	00800604 	movi	r2,24
10013850:	00c00204 	movi	r3,8
10013854:	003ff606 	br	10013830 <__alt_data_end+0xf8013830>
10013858:	00800404 	movi	r2,16
1001385c:	1007883a 	mov	r3,r2
10013860:	003ff306 	br	10013830 <__alt_data_end+0xf8013830>

10013864 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10013864:	defffe04 	addi	sp,sp,-8
10013868:	dfc00115 	stw	ra,4(sp)
1001386c:	df000015 	stw	fp,0(sp)
10013870:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10013874:	d0a00b17 	ldw	r2,-32724(gp)
10013878:	10000326 	beq	r2,zero,10013888 <alt_get_errno+0x24>
1001387c:	d0a00b17 	ldw	r2,-32724(gp)
10013880:	103ee83a 	callr	r2
10013884:	00000106 	br	1001388c <alt_get_errno+0x28>
10013888:	d09b3104 	addi	r2,gp,27844
}
1001388c:	e037883a 	mov	sp,fp
10013890:	dfc00117 	ldw	ra,4(sp)
10013894:	df000017 	ldw	fp,0(sp)
10013898:	dec00204 	addi	sp,sp,8
1001389c:	f800283a 	ret

100138a0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
100138a0:	defffb04 	addi	sp,sp,-20
100138a4:	dfc00415 	stw	ra,16(sp)
100138a8:	df000315 	stw	fp,12(sp)
100138ac:	df000304 	addi	fp,sp,12
100138b0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
100138b4:	e0bfff17 	ldw	r2,-4(fp)
100138b8:	10000816 	blt	r2,zero,100138dc <close+0x3c>
100138bc:	01400304 	movi	r5,12
100138c0:	e13fff17 	ldw	r4,-4(fp)
100138c4:	0006ad80 	call	10006ad8 <__mulsi3>
100138c8:	1007883a 	mov	r3,r2
100138cc:	008400b4 	movhi	r2,4098
100138d0:	10917a04 	addi	r2,r2,17896
100138d4:	1885883a 	add	r2,r3,r2
100138d8:	00000106 	br	100138e0 <close+0x40>
100138dc:	0005883a 	mov	r2,zero
100138e0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
100138e4:	e0bffd17 	ldw	r2,-12(fp)
100138e8:	10001926 	beq	r2,zero,10013950 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
100138ec:	e0bffd17 	ldw	r2,-12(fp)
100138f0:	10800017 	ldw	r2,0(r2)
100138f4:	10800417 	ldw	r2,16(r2)
100138f8:	10000626 	beq	r2,zero,10013914 <close+0x74>
100138fc:	e0bffd17 	ldw	r2,-12(fp)
10013900:	10800017 	ldw	r2,0(r2)
10013904:	10800417 	ldw	r2,16(r2)
10013908:	e13ffd17 	ldw	r4,-12(fp)
1001390c:	103ee83a 	callr	r2
10013910:	00000106 	br	10013918 <close+0x78>
10013914:	0005883a 	mov	r2,zero
10013918:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1001391c:	e13fff17 	ldw	r4,-4(fp)
10013920:	0013f880 	call	10013f88 <alt_release_fd>
    if (rval < 0)
10013924:	e0bffe17 	ldw	r2,-8(fp)
10013928:	1000070e 	bge	r2,zero,10013948 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1001392c:	00138640 	call	10013864 <alt_get_errno>
10013930:	1007883a 	mov	r3,r2
10013934:	e0bffe17 	ldw	r2,-8(fp)
10013938:	0085c83a 	sub	r2,zero,r2
1001393c:	18800015 	stw	r2,0(r3)
      return -1;
10013940:	00bfffc4 	movi	r2,-1
10013944:	00000706 	br	10013964 <close+0xc4>
    }
    return 0;
10013948:	0005883a 	mov	r2,zero
1001394c:	00000506 	br	10013964 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10013950:	00138640 	call	10013864 <alt_get_errno>
10013954:	1007883a 	mov	r3,r2
10013958:	00801444 	movi	r2,81
1001395c:	18800015 	stw	r2,0(r3)
    return -1;
10013960:	00bfffc4 	movi	r2,-1
  }
}
10013964:	e037883a 	mov	sp,fp
10013968:	dfc00117 	ldw	ra,4(sp)
1001396c:	df000017 	ldw	fp,0(sp)
10013970:	dec00204 	addi	sp,sp,8
10013974:	f800283a 	ret

10013978 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10013978:	defffc04 	addi	sp,sp,-16
1001397c:	df000315 	stw	fp,12(sp)
10013980:	df000304 	addi	fp,sp,12
10013984:	e13ffd15 	stw	r4,-12(fp)
10013988:	e17ffe15 	stw	r5,-8(fp)
1001398c:	e1bfff15 	stw	r6,-4(fp)
  return len;
10013990:	e0bfff17 	ldw	r2,-4(fp)
}
10013994:	e037883a 	mov	sp,fp
10013998:	df000017 	ldw	fp,0(sp)
1001399c:	dec00104 	addi	sp,sp,4
100139a0:	f800283a 	ret

100139a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100139a4:	defffe04 	addi	sp,sp,-8
100139a8:	dfc00115 	stw	ra,4(sp)
100139ac:	df000015 	stw	fp,0(sp)
100139b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100139b4:	d0a00b17 	ldw	r2,-32724(gp)
100139b8:	10000326 	beq	r2,zero,100139c8 <alt_get_errno+0x24>
100139bc:	d0a00b17 	ldw	r2,-32724(gp)
100139c0:	103ee83a 	callr	r2
100139c4:	00000106 	br	100139cc <alt_get_errno+0x28>
100139c8:	d09b3104 	addi	r2,gp,27844
}
100139cc:	e037883a 	mov	sp,fp
100139d0:	dfc00117 	ldw	ra,4(sp)
100139d4:	df000017 	ldw	fp,0(sp)
100139d8:	dec00204 	addi	sp,sp,8
100139dc:	f800283a 	ret

100139e0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
100139e0:	defffb04 	addi	sp,sp,-20
100139e4:	dfc00415 	stw	ra,16(sp)
100139e8:	df000315 	stw	fp,12(sp)
100139ec:	df000304 	addi	fp,sp,12
100139f0:	e13ffe15 	stw	r4,-8(fp)
100139f4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100139f8:	e0bffe17 	ldw	r2,-8(fp)
100139fc:	10000816 	blt	r2,zero,10013a20 <fstat+0x40>
10013a00:	01400304 	movi	r5,12
10013a04:	e13ffe17 	ldw	r4,-8(fp)
10013a08:	0006ad80 	call	10006ad8 <__mulsi3>
10013a0c:	1007883a 	mov	r3,r2
10013a10:	008400b4 	movhi	r2,4098
10013a14:	10917a04 	addi	r2,r2,17896
10013a18:	1885883a 	add	r2,r3,r2
10013a1c:	00000106 	br	10013a24 <fstat+0x44>
10013a20:	0005883a 	mov	r2,zero
10013a24:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10013a28:	e0bffd17 	ldw	r2,-12(fp)
10013a2c:	10001026 	beq	r2,zero,10013a70 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10013a30:	e0bffd17 	ldw	r2,-12(fp)
10013a34:	10800017 	ldw	r2,0(r2)
10013a38:	10800817 	ldw	r2,32(r2)
10013a3c:	10000726 	beq	r2,zero,10013a5c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
10013a40:	e0bffd17 	ldw	r2,-12(fp)
10013a44:	10800017 	ldw	r2,0(r2)
10013a48:	10800817 	ldw	r2,32(r2)
10013a4c:	e17fff17 	ldw	r5,-4(fp)
10013a50:	e13ffd17 	ldw	r4,-12(fp)
10013a54:	103ee83a 	callr	r2
10013a58:	00000a06 	br	10013a84 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10013a5c:	e0bfff17 	ldw	r2,-4(fp)
10013a60:	00c80004 	movi	r3,8192
10013a64:	10c00115 	stw	r3,4(r2)
      return 0;
10013a68:	0005883a 	mov	r2,zero
10013a6c:	00000506 	br	10013a84 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10013a70:	00139a40 	call	100139a4 <alt_get_errno>
10013a74:	1007883a 	mov	r3,r2
10013a78:	00801444 	movi	r2,81
10013a7c:	18800015 	stw	r2,0(r3)
    return -1;
10013a80:	00bfffc4 	movi	r2,-1
  }
}
10013a84:	e037883a 	mov	sp,fp
10013a88:	dfc00117 	ldw	ra,4(sp)
10013a8c:	df000017 	ldw	fp,0(sp)
10013a90:	dec00204 	addi	sp,sp,8
10013a94:	f800283a 	ret

10013a98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10013a98:	defffe04 	addi	sp,sp,-8
10013a9c:	dfc00115 	stw	ra,4(sp)
10013aa0:	df000015 	stw	fp,0(sp)
10013aa4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10013aa8:	d0a00b17 	ldw	r2,-32724(gp)
10013aac:	10000326 	beq	r2,zero,10013abc <alt_get_errno+0x24>
10013ab0:	d0a00b17 	ldw	r2,-32724(gp)
10013ab4:	103ee83a 	callr	r2
10013ab8:	00000106 	br	10013ac0 <alt_get_errno+0x28>
10013abc:	d09b3104 	addi	r2,gp,27844
}
10013ac0:	e037883a 	mov	sp,fp
10013ac4:	dfc00117 	ldw	ra,4(sp)
10013ac8:	df000017 	ldw	fp,0(sp)
10013acc:	dec00204 	addi	sp,sp,8
10013ad0:	f800283a 	ret

10013ad4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10013ad4:	deffed04 	addi	sp,sp,-76
10013ad8:	dfc01215 	stw	ra,72(sp)
10013adc:	df001115 	stw	fp,68(sp)
10013ae0:	df001104 	addi	fp,sp,68
10013ae4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10013ae8:	e0bfff17 	ldw	r2,-4(fp)
10013aec:	10000816 	blt	r2,zero,10013b10 <isatty+0x3c>
10013af0:	01400304 	movi	r5,12
10013af4:	e13fff17 	ldw	r4,-4(fp)
10013af8:	0006ad80 	call	10006ad8 <__mulsi3>
10013afc:	1007883a 	mov	r3,r2
10013b00:	008400b4 	movhi	r2,4098
10013b04:	10917a04 	addi	r2,r2,17896
10013b08:	1885883a 	add	r2,r3,r2
10013b0c:	00000106 	br	10013b14 <isatty+0x40>
10013b10:	0005883a 	mov	r2,zero
10013b14:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10013b18:	e0bfef17 	ldw	r2,-68(fp)
10013b1c:	10000e26 	beq	r2,zero,10013b58 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
10013b20:	e0bfef17 	ldw	r2,-68(fp)
10013b24:	10800017 	ldw	r2,0(r2)
10013b28:	10800817 	ldw	r2,32(r2)
10013b2c:	1000021e 	bne	r2,zero,10013b38 <isatty+0x64>
    {
      return 1;
10013b30:	00800044 	movi	r2,1
10013b34:	00000d06 	br	10013b6c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10013b38:	e0bff004 	addi	r2,fp,-64
10013b3c:	100b883a 	mov	r5,r2
10013b40:	e13fff17 	ldw	r4,-4(fp)
10013b44:	00139e00 	call	100139e0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10013b48:	e0bff117 	ldw	r2,-60(fp)
10013b4c:	10880020 	cmpeqi	r2,r2,8192
10013b50:	10803fcc 	andi	r2,r2,255
10013b54:	00000506 	br	10013b6c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10013b58:	0013a980 	call	10013a98 <alt_get_errno>
10013b5c:	1007883a 	mov	r3,r2
10013b60:	00801444 	movi	r2,81
10013b64:	18800015 	stw	r2,0(r3)
    return 0;
10013b68:	0005883a 	mov	r2,zero
  }
}
10013b6c:	e037883a 	mov	sp,fp
10013b70:	dfc00117 	ldw	ra,4(sp)
10013b74:	df000017 	ldw	fp,0(sp)
10013b78:	dec00204 	addi	sp,sp,8
10013b7c:	f800283a 	ret

10013b80 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10013b80:	defffc04 	addi	sp,sp,-16
10013b84:	df000315 	stw	fp,12(sp)
10013b88:	df000304 	addi	fp,sp,12
10013b8c:	e13ffd15 	stw	r4,-12(fp)
10013b90:	e17ffe15 	stw	r5,-8(fp)
10013b94:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10013b98:	e0fffe17 	ldw	r3,-8(fp)
10013b9c:	e0bffd17 	ldw	r2,-12(fp)
10013ba0:	18800c26 	beq	r3,r2,10013bd4 <alt_load_section+0x54>
  {
    while( to != end )
10013ba4:	00000806 	br	10013bc8 <alt_load_section+0x48>
    {
      *to++ = *from++;
10013ba8:	e0bffe17 	ldw	r2,-8(fp)
10013bac:	10c00104 	addi	r3,r2,4
10013bb0:	e0fffe15 	stw	r3,-8(fp)
10013bb4:	e0fffd17 	ldw	r3,-12(fp)
10013bb8:	19000104 	addi	r4,r3,4
10013bbc:	e13ffd15 	stw	r4,-12(fp)
10013bc0:	18c00017 	ldw	r3,0(r3)
10013bc4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10013bc8:	e0fffe17 	ldw	r3,-8(fp)
10013bcc:	e0bfff17 	ldw	r2,-4(fp)
10013bd0:	18bff51e 	bne	r3,r2,10013ba8 <__alt_data_end+0xf8013ba8>
    {
      *to++ = *from++;
    }
  }
}
10013bd4:	0001883a 	nop
10013bd8:	e037883a 	mov	sp,fp
10013bdc:	df000017 	ldw	fp,0(sp)
10013be0:	dec00104 	addi	sp,sp,4
10013be4:	f800283a 	ret

10013be8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10013be8:	defffe04 	addi	sp,sp,-8
10013bec:	dfc00115 	stw	ra,4(sp)
10013bf0:	df000015 	stw	fp,0(sp)
10013bf4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10013bf8:	018400b4 	movhi	r6,4098
10013bfc:	31960204 	addi	r6,r6,22536
10013c00:	01440074 	movhi	r5,4097
10013c04:	295af104 	addi	r5,r5,27588
10013c08:	010400b4 	movhi	r4,4098
10013c0c:	21160204 	addi	r4,r4,22536
10013c10:	0013b800 	call	10013b80 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10013c14:	01840034 	movhi	r6,4096
10013c18:	31808c04 	addi	r6,r6,560
10013c1c:	01440034 	movhi	r5,4096
10013c20:	29400804 	addi	r5,r5,32
10013c24:	01040034 	movhi	r4,4096
10013c28:	21000804 	addi	r4,r4,32
10013c2c:	0013b800 	call	10013b80 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10013c30:	01840074 	movhi	r6,4097
10013c34:	319af104 	addi	r6,r6,27588
10013c38:	01440074 	movhi	r5,4097
10013c3c:	29582104 	addi	r5,r5,24708
10013c40:	01040074 	movhi	r4,4097
10013c44:	21182104 	addi	r4,r4,24708
10013c48:	0013b800 	call	10013b80 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10013c4c:	0014fcc0 	call	10014fcc <alt_dcache_flush_all>
  alt_icache_flush_all();
10013c50:	001518c0 	call	1001518c <alt_icache_flush_all>
}
10013c54:	0001883a 	nop
10013c58:	e037883a 	mov	sp,fp
10013c5c:	dfc00117 	ldw	ra,4(sp)
10013c60:	df000017 	ldw	fp,0(sp)
10013c64:	dec00204 	addi	sp,sp,8
10013c68:	f800283a 	ret

10013c6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10013c6c:	defffe04 	addi	sp,sp,-8
10013c70:	dfc00115 	stw	ra,4(sp)
10013c74:	df000015 	stw	fp,0(sp)
10013c78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10013c7c:	d0a00b17 	ldw	r2,-32724(gp)
10013c80:	10000326 	beq	r2,zero,10013c90 <alt_get_errno+0x24>
10013c84:	d0a00b17 	ldw	r2,-32724(gp)
10013c88:	103ee83a 	callr	r2
10013c8c:	00000106 	br	10013c94 <alt_get_errno+0x28>
10013c90:	d09b3104 	addi	r2,gp,27844
}
10013c94:	e037883a 	mov	sp,fp
10013c98:	dfc00117 	ldw	ra,4(sp)
10013c9c:	df000017 	ldw	fp,0(sp)
10013ca0:	dec00204 	addi	sp,sp,8
10013ca4:	f800283a 	ret

10013ca8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10013ca8:	defff904 	addi	sp,sp,-28
10013cac:	dfc00615 	stw	ra,24(sp)
10013cb0:	df000515 	stw	fp,20(sp)
10013cb4:	df000504 	addi	fp,sp,20
10013cb8:	e13ffd15 	stw	r4,-12(fp)
10013cbc:	e17ffe15 	stw	r5,-8(fp)
10013cc0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10013cc4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10013cc8:	e0bffd17 	ldw	r2,-12(fp)
10013ccc:	10000816 	blt	r2,zero,10013cf0 <lseek+0x48>
10013cd0:	01400304 	movi	r5,12
10013cd4:	e13ffd17 	ldw	r4,-12(fp)
10013cd8:	0006ad80 	call	10006ad8 <__mulsi3>
10013cdc:	1007883a 	mov	r3,r2
10013ce0:	008400b4 	movhi	r2,4098
10013ce4:	10917a04 	addi	r2,r2,17896
10013ce8:	1885883a 	add	r2,r3,r2
10013cec:	00000106 	br	10013cf4 <lseek+0x4c>
10013cf0:	0005883a 	mov	r2,zero
10013cf4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10013cf8:	e0bffc17 	ldw	r2,-16(fp)
10013cfc:	10001026 	beq	r2,zero,10013d40 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10013d00:	e0bffc17 	ldw	r2,-16(fp)
10013d04:	10800017 	ldw	r2,0(r2)
10013d08:	10800717 	ldw	r2,28(r2)
10013d0c:	10000926 	beq	r2,zero,10013d34 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10013d10:	e0bffc17 	ldw	r2,-16(fp)
10013d14:	10800017 	ldw	r2,0(r2)
10013d18:	10800717 	ldw	r2,28(r2)
10013d1c:	e1bfff17 	ldw	r6,-4(fp)
10013d20:	e17ffe17 	ldw	r5,-8(fp)
10013d24:	e13ffc17 	ldw	r4,-16(fp)
10013d28:	103ee83a 	callr	r2
10013d2c:	e0bffb15 	stw	r2,-20(fp)
10013d30:	00000506 	br	10013d48 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
10013d34:	00bfde84 	movi	r2,-134
10013d38:	e0bffb15 	stw	r2,-20(fp)
10013d3c:	00000206 	br	10013d48 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
10013d40:	00bfebc4 	movi	r2,-81
10013d44:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10013d48:	e0bffb17 	ldw	r2,-20(fp)
10013d4c:	1000070e 	bge	r2,zero,10013d6c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10013d50:	0013c6c0 	call	10013c6c <alt_get_errno>
10013d54:	1007883a 	mov	r3,r2
10013d58:	e0bffb17 	ldw	r2,-20(fp)
10013d5c:	0085c83a 	sub	r2,zero,r2
10013d60:	18800015 	stw	r2,0(r3)
    rc = -1;
10013d64:	00bfffc4 	movi	r2,-1
10013d68:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10013d6c:	e0bffb17 	ldw	r2,-20(fp)
}
10013d70:	e037883a 	mov	sp,fp
10013d74:	dfc00117 	ldw	ra,4(sp)
10013d78:	df000017 	ldw	fp,0(sp)
10013d7c:	dec00204 	addi	sp,sp,8
10013d80:	f800283a 	ret

10013d84 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10013d84:	defffd04 	addi	sp,sp,-12
10013d88:	dfc00215 	stw	ra,8(sp)
10013d8c:	df000115 	stw	fp,4(sp)
10013d90:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10013d94:	0009883a 	mov	r4,zero
10013d98:	001425c0 	call	1001425c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10013d9c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10013da0:	00142940 	call	10014294 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10013da4:	01840074 	movhi	r6,4097
10013da8:	319ae704 	addi	r6,r6,27548
10013dac:	01440074 	movhi	r5,4097
10013db0:	295ae704 	addi	r5,r5,27548
10013db4:	01040074 	movhi	r4,4097
10013db8:	211ae704 	addi	r4,r4,27548
10013dbc:	00155300 	call	10015530 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10013dc0:	00150cc0 	call	100150cc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10013dc4:	01040074 	movhi	r4,4097
10013dc8:	21144b04 	addi	r4,r4,20780
10013dcc:	0015cf00 	call	10015cf0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10013dd0:	d09b3217 	ldw	r2,27848(gp)
10013dd4:	d0db3317 	ldw	r3,27852(gp)
10013dd8:	d11b3417 	ldw	r4,27856(gp)
10013ddc:	200d883a 	mov	r6,r4
10013de0:	180b883a 	mov	r5,r3
10013de4:	1009883a 	mov	r4,r2
10013de8:	00044700 	call	10004470 <main>
10013dec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10013df0:	01000044 	movi	r4,1
10013df4:	00138a00 	call	100138a0 <close>
  exit (result);
10013df8:	e13fff17 	ldw	r4,-4(fp)
10013dfc:	0015d040 	call	10015d04 <exit>

10013e00 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10013e00:	defffe04 	addi	sp,sp,-8
10013e04:	df000115 	stw	fp,4(sp)
10013e08:	df000104 	addi	fp,sp,4
10013e0c:	e13fff15 	stw	r4,-4(fp)
}
10013e10:	0001883a 	nop
10013e14:	e037883a 	mov	sp,fp
10013e18:	df000017 	ldw	fp,0(sp)
10013e1c:	dec00104 	addi	sp,sp,4
10013e20:	f800283a 	ret

10013e24 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10013e24:	defffe04 	addi	sp,sp,-8
10013e28:	df000115 	stw	fp,4(sp)
10013e2c:	df000104 	addi	fp,sp,4
10013e30:	e13fff15 	stw	r4,-4(fp)
}
10013e34:	0001883a 	nop
10013e38:	e037883a 	mov	sp,fp
10013e3c:	df000017 	ldw	fp,0(sp)
10013e40:	dec00104 	addi	sp,sp,4
10013e44:	f800283a 	ret

10013e48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10013e48:	defffe04 	addi	sp,sp,-8
10013e4c:	dfc00115 	stw	ra,4(sp)
10013e50:	df000015 	stw	fp,0(sp)
10013e54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10013e58:	d0a00b17 	ldw	r2,-32724(gp)
10013e5c:	10000326 	beq	r2,zero,10013e6c <alt_get_errno+0x24>
10013e60:	d0a00b17 	ldw	r2,-32724(gp)
10013e64:	103ee83a 	callr	r2
10013e68:	00000106 	br	10013e70 <alt_get_errno+0x28>
10013e6c:	d09b3104 	addi	r2,gp,27844
}
10013e70:	e037883a 	mov	sp,fp
10013e74:	dfc00117 	ldw	ra,4(sp)
10013e78:	df000017 	ldw	fp,0(sp)
10013e7c:	dec00204 	addi	sp,sp,8
10013e80:	f800283a 	ret

10013e84 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10013e84:	defff904 	addi	sp,sp,-28
10013e88:	dfc00615 	stw	ra,24(sp)
10013e8c:	df000515 	stw	fp,20(sp)
10013e90:	df000504 	addi	fp,sp,20
10013e94:	e13ffd15 	stw	r4,-12(fp)
10013e98:	e17ffe15 	stw	r5,-8(fp)
10013e9c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10013ea0:	e0bffd17 	ldw	r2,-12(fp)
10013ea4:	10000816 	blt	r2,zero,10013ec8 <read+0x44>
10013ea8:	01400304 	movi	r5,12
10013eac:	e13ffd17 	ldw	r4,-12(fp)
10013eb0:	0006ad80 	call	10006ad8 <__mulsi3>
10013eb4:	1007883a 	mov	r3,r2
10013eb8:	008400b4 	movhi	r2,4098
10013ebc:	10917a04 	addi	r2,r2,17896
10013ec0:	1885883a 	add	r2,r3,r2
10013ec4:	00000106 	br	10013ecc <read+0x48>
10013ec8:	0005883a 	mov	r2,zero
10013ecc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10013ed0:	e0bffb17 	ldw	r2,-20(fp)
10013ed4:	10002226 	beq	r2,zero,10013f60 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10013ed8:	e0bffb17 	ldw	r2,-20(fp)
10013edc:	10800217 	ldw	r2,8(r2)
10013ee0:	108000cc 	andi	r2,r2,3
10013ee4:	10800060 	cmpeqi	r2,r2,1
10013ee8:	1000181e 	bne	r2,zero,10013f4c <read+0xc8>
        (fd->dev->read))
10013eec:	e0bffb17 	ldw	r2,-20(fp)
10013ef0:	10800017 	ldw	r2,0(r2)
10013ef4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10013ef8:	10001426 	beq	r2,zero,10013f4c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10013efc:	e0bffb17 	ldw	r2,-20(fp)
10013f00:	10800017 	ldw	r2,0(r2)
10013f04:	10800517 	ldw	r2,20(r2)
10013f08:	e0ffff17 	ldw	r3,-4(fp)
10013f0c:	180d883a 	mov	r6,r3
10013f10:	e17ffe17 	ldw	r5,-8(fp)
10013f14:	e13ffb17 	ldw	r4,-20(fp)
10013f18:	103ee83a 	callr	r2
10013f1c:	e0bffc15 	stw	r2,-16(fp)
10013f20:	e0bffc17 	ldw	r2,-16(fp)
10013f24:	1000070e 	bge	r2,zero,10013f44 <read+0xc0>
        {
          ALT_ERRNO = -rval;
10013f28:	0013e480 	call	10013e48 <alt_get_errno>
10013f2c:	1007883a 	mov	r3,r2
10013f30:	e0bffc17 	ldw	r2,-16(fp)
10013f34:	0085c83a 	sub	r2,zero,r2
10013f38:	18800015 	stw	r2,0(r3)
          return -1;
10013f3c:	00bfffc4 	movi	r2,-1
10013f40:	00000c06 	br	10013f74 <read+0xf0>
        }
        return rval;
10013f44:	e0bffc17 	ldw	r2,-16(fp)
10013f48:	00000a06 	br	10013f74 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
10013f4c:	0013e480 	call	10013e48 <alt_get_errno>
10013f50:	1007883a 	mov	r3,r2
10013f54:	00800344 	movi	r2,13
10013f58:	18800015 	stw	r2,0(r3)
10013f5c:	00000406 	br	10013f70 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10013f60:	0013e480 	call	10013e48 <alt_get_errno>
10013f64:	1007883a 	mov	r3,r2
10013f68:	00801444 	movi	r2,81
10013f6c:	18800015 	stw	r2,0(r3)
  }
  return -1;
10013f70:	00bfffc4 	movi	r2,-1
}
10013f74:	e037883a 	mov	sp,fp
10013f78:	dfc00117 	ldw	ra,4(sp)
10013f7c:	df000017 	ldw	fp,0(sp)
10013f80:	dec00204 	addi	sp,sp,8
10013f84:	f800283a 	ret

10013f88 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10013f88:	defffc04 	addi	sp,sp,-16
10013f8c:	dfc00315 	stw	ra,12(sp)
10013f90:	df000215 	stw	fp,8(sp)
10013f94:	dc000115 	stw	r16,4(sp)
10013f98:	df000204 	addi	fp,sp,8
10013f9c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10013fa0:	e0bffe17 	ldw	r2,-8(fp)
10013fa4:	108000d0 	cmplti	r2,r2,3
10013fa8:	1000111e 	bne	r2,zero,10013ff0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10013fac:	040400b4 	movhi	r16,4098
10013fb0:	84117a04 	addi	r16,r16,17896
10013fb4:	e0bffe17 	ldw	r2,-8(fp)
10013fb8:	01400304 	movi	r5,12
10013fbc:	1009883a 	mov	r4,r2
10013fc0:	0006ad80 	call	10006ad8 <__mulsi3>
10013fc4:	8085883a 	add	r2,r16,r2
10013fc8:	10800204 	addi	r2,r2,8
10013fcc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10013fd0:	040400b4 	movhi	r16,4098
10013fd4:	84117a04 	addi	r16,r16,17896
10013fd8:	e0bffe17 	ldw	r2,-8(fp)
10013fdc:	01400304 	movi	r5,12
10013fe0:	1009883a 	mov	r4,r2
10013fe4:	0006ad80 	call	10006ad8 <__mulsi3>
10013fe8:	8085883a 	add	r2,r16,r2
10013fec:	10000015 	stw	zero,0(r2)
  }
}
10013ff0:	0001883a 	nop
10013ff4:	e6ffff04 	addi	sp,fp,-4
10013ff8:	dfc00217 	ldw	ra,8(sp)
10013ffc:	df000117 	ldw	fp,4(sp)
10014000:	dc000017 	ldw	r16,0(sp)
10014004:	dec00304 	addi	sp,sp,12
10014008:	f800283a 	ret

1001400c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1001400c:	defff904 	addi	sp,sp,-28
10014010:	df000615 	stw	fp,24(sp)
10014014:	df000604 	addi	fp,sp,24
10014018:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001401c:	0005303a 	rdctl	r2,status
10014020:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10014024:	e0fffe17 	ldw	r3,-8(fp)
10014028:	00bfff84 	movi	r2,-2
1001402c:	1884703a 	and	r2,r3,r2
10014030:	1001703a 	wrctl	status,r2
  
  return context;
10014034:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10014038:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1001403c:	d0a00c17 	ldw	r2,-32720(gp)
10014040:	10c000c4 	addi	r3,r2,3
10014044:	00bfff04 	movi	r2,-4
10014048:	1884703a 	and	r2,r3,r2
1001404c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10014050:	d0e00c17 	ldw	r3,-32720(gp)
10014054:	e0bfff17 	ldw	r2,-4(fp)
10014058:	1887883a 	add	r3,r3,r2
1001405c:	00860034 	movhi	r2,6144
10014060:	10800004 	addi	r2,r2,0
10014064:	10c0062e 	bgeu	r2,r3,10014080 <sbrk+0x74>
10014068:	e0bffb17 	ldw	r2,-20(fp)
1001406c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10014070:	e0bffa17 	ldw	r2,-24(fp)
10014074:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10014078:	00bfffc4 	movi	r2,-1
1001407c:	00000b06 	br	100140ac <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10014080:	d0a00c17 	ldw	r2,-32720(gp)
10014084:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
10014088:	d0e00c17 	ldw	r3,-32720(gp)
1001408c:	e0bfff17 	ldw	r2,-4(fp)
10014090:	1885883a 	add	r2,r3,r2
10014094:	d0a00c15 	stw	r2,-32720(gp)
10014098:	e0bffb17 	ldw	r2,-20(fp)
1001409c:	e0bffc15 	stw	r2,-16(fp)
100140a0:	e0bffc17 	ldw	r2,-16(fp)
100140a4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
100140a8:	e0bffd17 	ldw	r2,-12(fp)
} 
100140ac:	e037883a 	mov	sp,fp
100140b0:	df000017 	ldw	fp,0(sp)
100140b4:	dec00104 	addi	sp,sp,4
100140b8:	f800283a 	ret

100140bc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
100140bc:	defffd04 	addi	sp,sp,-12
100140c0:	dfc00215 	stw	ra,8(sp)
100140c4:	df000115 	stw	fp,4(sp)
100140c8:	df000104 	addi	fp,sp,4
100140cc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
100140d0:	e13fff17 	ldw	r4,-4(fp)
100140d4:	0014e740 	call	10014e74 <alt_busy_sleep>
}
100140d8:	e037883a 	mov	sp,fp
100140dc:	dfc00117 	ldw	ra,4(sp)
100140e0:	df000017 	ldw	fp,0(sp)
100140e4:	dec00204 	addi	sp,sp,8
100140e8:	f800283a 	ret

100140ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100140ec:	defffe04 	addi	sp,sp,-8
100140f0:	dfc00115 	stw	ra,4(sp)
100140f4:	df000015 	stw	fp,0(sp)
100140f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100140fc:	d0a00b17 	ldw	r2,-32724(gp)
10014100:	10000326 	beq	r2,zero,10014110 <alt_get_errno+0x24>
10014104:	d0a00b17 	ldw	r2,-32724(gp)
10014108:	103ee83a 	callr	r2
1001410c:	00000106 	br	10014114 <alt_get_errno+0x28>
10014110:	d09b3104 	addi	r2,gp,27844
}
10014114:	e037883a 	mov	sp,fp
10014118:	dfc00117 	ldw	ra,4(sp)
1001411c:	df000017 	ldw	fp,0(sp)
10014120:	dec00204 	addi	sp,sp,8
10014124:	f800283a 	ret

10014128 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10014128:	defff904 	addi	sp,sp,-28
1001412c:	dfc00615 	stw	ra,24(sp)
10014130:	df000515 	stw	fp,20(sp)
10014134:	df000504 	addi	fp,sp,20
10014138:	e13ffd15 	stw	r4,-12(fp)
1001413c:	e17ffe15 	stw	r5,-8(fp)
10014140:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10014144:	e0bffd17 	ldw	r2,-12(fp)
10014148:	10000816 	blt	r2,zero,1001416c <write+0x44>
1001414c:	01400304 	movi	r5,12
10014150:	e13ffd17 	ldw	r4,-12(fp)
10014154:	0006ad80 	call	10006ad8 <__mulsi3>
10014158:	1007883a 	mov	r3,r2
1001415c:	008400b4 	movhi	r2,4098
10014160:	10917a04 	addi	r2,r2,17896
10014164:	1885883a 	add	r2,r3,r2
10014168:	00000106 	br	10014170 <write+0x48>
1001416c:	0005883a 	mov	r2,zero
10014170:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10014174:	e0bffb17 	ldw	r2,-20(fp)
10014178:	10002126 	beq	r2,zero,10014200 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1001417c:	e0bffb17 	ldw	r2,-20(fp)
10014180:	10800217 	ldw	r2,8(r2)
10014184:	108000cc 	andi	r2,r2,3
10014188:	10001826 	beq	r2,zero,100141ec <write+0xc4>
1001418c:	e0bffb17 	ldw	r2,-20(fp)
10014190:	10800017 	ldw	r2,0(r2)
10014194:	10800617 	ldw	r2,24(r2)
10014198:	10001426 	beq	r2,zero,100141ec <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1001419c:	e0bffb17 	ldw	r2,-20(fp)
100141a0:	10800017 	ldw	r2,0(r2)
100141a4:	10800617 	ldw	r2,24(r2)
100141a8:	e0ffff17 	ldw	r3,-4(fp)
100141ac:	180d883a 	mov	r6,r3
100141b0:	e17ffe17 	ldw	r5,-8(fp)
100141b4:	e13ffb17 	ldw	r4,-20(fp)
100141b8:	103ee83a 	callr	r2
100141bc:	e0bffc15 	stw	r2,-16(fp)
100141c0:	e0bffc17 	ldw	r2,-16(fp)
100141c4:	1000070e 	bge	r2,zero,100141e4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
100141c8:	00140ec0 	call	100140ec <alt_get_errno>
100141cc:	1007883a 	mov	r3,r2
100141d0:	e0bffc17 	ldw	r2,-16(fp)
100141d4:	0085c83a 	sub	r2,zero,r2
100141d8:	18800015 	stw	r2,0(r3)
        return -1;
100141dc:	00bfffc4 	movi	r2,-1
100141e0:	00000c06 	br	10014214 <write+0xec>
      }
      return rval;
100141e4:	e0bffc17 	ldw	r2,-16(fp)
100141e8:	00000a06 	br	10014214 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
100141ec:	00140ec0 	call	100140ec <alt_get_errno>
100141f0:	1007883a 	mov	r3,r2
100141f4:	00800344 	movi	r2,13
100141f8:	18800015 	stw	r2,0(r3)
100141fc:	00000406 	br	10014210 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10014200:	00140ec0 	call	100140ec <alt_get_errno>
10014204:	1007883a 	mov	r3,r2
10014208:	00801444 	movi	r2,81
1001420c:	18800015 	stw	r2,0(r3)
  }
  return -1;
10014210:	00bfffc4 	movi	r2,-1
}
10014214:	e037883a 	mov	sp,fp
10014218:	dfc00117 	ldw	ra,4(sp)
1001421c:	df000017 	ldw	fp,0(sp)
10014220:	dec00204 	addi	sp,sp,8
10014224:	f800283a 	ret

10014228 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10014228:	defffd04 	addi	sp,sp,-12
1001422c:	dfc00215 	stw	ra,8(sp)
10014230:	df000115 	stw	fp,4(sp)
10014234:	df000104 	addi	fp,sp,4
10014238:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1001423c:	d1600804 	addi	r5,gp,-32736
10014240:	e13fff17 	ldw	r4,-4(fp)
10014244:	00150280 	call	10015028 <alt_dev_llist_insert>
}
10014248:	e037883a 	mov	sp,fp
1001424c:	dfc00117 	ldw	ra,4(sp)
10014250:	df000017 	ldw	fp,0(sp)
10014254:	dec00204 	addi	sp,sp,8
10014258:	f800283a 	ret

1001425c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1001425c:	defffd04 	addi	sp,sp,-12
10014260:	dfc00215 	stw	ra,8(sp)
10014264:	df000115 	stw	fp,4(sp)
10014268:	df000104 	addi	fp,sp,4
1001426c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10014270:	00159d40 	call	100159d4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10014274:	00800044 	movi	r2,1
10014278:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1001427c:	0001883a 	nop
10014280:	e037883a 	mov	sp,fp
10014284:	dfc00117 	ldw	ra,4(sp)
10014288:	df000017 	ldw	fp,0(sp)
1001428c:	dec00204 	addi	sp,sp,8
10014290:	f800283a 	ret

10014294 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10014294:	defffe04 	addi	sp,sp,-8
10014298:	dfc00115 	stw	ra,4(sp)
1001429c:	df000015 	stw	fp,0(sp)
100142a0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
100142a4:	000d883a 	mov	r6,zero
100142a8:	000b883a 	mov	r5,zero
100142ac:	010400b4 	movhi	r4,4098
100142b0:	2111e404 	addi	r4,r4,18320
100142b4:	00144440 	call	10014444 <altera_avalon_jtag_uart_init>
100142b8:	010400b4 	movhi	r4,4098
100142bc:	2111da04 	addi	r4,r4,18280
100142c0:	00142280 	call	10014228 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
100142c4:	0001883a 	nop
}
100142c8:	0001883a 	nop
100142cc:	e037883a 	mov	sp,fp
100142d0:	dfc00117 	ldw	ra,4(sp)
100142d4:	df000017 	ldw	fp,0(sp)
100142d8:	dec00204 	addi	sp,sp,8
100142dc:	f800283a 	ret

100142e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
100142e0:	defffa04 	addi	sp,sp,-24
100142e4:	dfc00515 	stw	ra,20(sp)
100142e8:	df000415 	stw	fp,16(sp)
100142ec:	df000404 	addi	fp,sp,16
100142f0:	e13ffd15 	stw	r4,-12(fp)
100142f4:	e17ffe15 	stw	r5,-8(fp)
100142f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100142fc:	e0bffd17 	ldw	r2,-12(fp)
10014300:	10800017 	ldw	r2,0(r2)
10014304:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10014308:	e0bffc17 	ldw	r2,-16(fp)
1001430c:	10c00a04 	addi	r3,r2,40
10014310:	e0bffd17 	ldw	r2,-12(fp)
10014314:	10800217 	ldw	r2,8(r2)
10014318:	100f883a 	mov	r7,r2
1001431c:	e1bfff17 	ldw	r6,-4(fp)
10014320:	e17ffe17 	ldw	r5,-8(fp)
10014324:	1809883a 	mov	r4,r3
10014328:	00149080 	call	10014908 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1001432c:	e037883a 	mov	sp,fp
10014330:	dfc00117 	ldw	ra,4(sp)
10014334:	df000017 	ldw	fp,0(sp)
10014338:	dec00204 	addi	sp,sp,8
1001433c:	f800283a 	ret

10014340 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10014340:	defffa04 	addi	sp,sp,-24
10014344:	dfc00515 	stw	ra,20(sp)
10014348:	df000415 	stw	fp,16(sp)
1001434c:	df000404 	addi	fp,sp,16
10014350:	e13ffd15 	stw	r4,-12(fp)
10014354:	e17ffe15 	stw	r5,-8(fp)
10014358:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1001435c:	e0bffd17 	ldw	r2,-12(fp)
10014360:	10800017 	ldw	r2,0(r2)
10014364:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10014368:	e0bffc17 	ldw	r2,-16(fp)
1001436c:	10c00a04 	addi	r3,r2,40
10014370:	e0bffd17 	ldw	r2,-12(fp)
10014374:	10800217 	ldw	r2,8(r2)
10014378:	100f883a 	mov	r7,r2
1001437c:	e1bfff17 	ldw	r6,-4(fp)
10014380:	e17ffe17 	ldw	r5,-8(fp)
10014384:	1809883a 	mov	r4,r3
10014388:	0014b240 	call	10014b24 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1001438c:	e037883a 	mov	sp,fp
10014390:	dfc00117 	ldw	ra,4(sp)
10014394:	df000017 	ldw	fp,0(sp)
10014398:	dec00204 	addi	sp,sp,8
1001439c:	f800283a 	ret

100143a0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
100143a0:	defffc04 	addi	sp,sp,-16
100143a4:	dfc00315 	stw	ra,12(sp)
100143a8:	df000215 	stw	fp,8(sp)
100143ac:	df000204 	addi	fp,sp,8
100143b0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100143b4:	e0bfff17 	ldw	r2,-4(fp)
100143b8:	10800017 	ldw	r2,0(r2)
100143bc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
100143c0:	e0bffe17 	ldw	r2,-8(fp)
100143c4:	10c00a04 	addi	r3,r2,40
100143c8:	e0bfff17 	ldw	r2,-4(fp)
100143cc:	10800217 	ldw	r2,8(r2)
100143d0:	100b883a 	mov	r5,r2
100143d4:	1809883a 	mov	r4,r3
100143d8:	00147b00 	call	100147b0 <altera_avalon_jtag_uart_close>
}
100143dc:	e037883a 	mov	sp,fp
100143e0:	dfc00117 	ldw	ra,4(sp)
100143e4:	df000017 	ldw	fp,0(sp)
100143e8:	dec00204 	addi	sp,sp,8
100143ec:	f800283a 	ret

100143f0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
100143f0:	defffa04 	addi	sp,sp,-24
100143f4:	dfc00515 	stw	ra,20(sp)
100143f8:	df000415 	stw	fp,16(sp)
100143fc:	df000404 	addi	fp,sp,16
10014400:	e13ffd15 	stw	r4,-12(fp)
10014404:	e17ffe15 	stw	r5,-8(fp)
10014408:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1001440c:	e0bffd17 	ldw	r2,-12(fp)
10014410:	10800017 	ldw	r2,0(r2)
10014414:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10014418:	e0bffc17 	ldw	r2,-16(fp)
1001441c:	10800a04 	addi	r2,r2,40
10014420:	e1bfff17 	ldw	r6,-4(fp)
10014424:	e17ffe17 	ldw	r5,-8(fp)
10014428:	1009883a 	mov	r4,r2
1001442c:	00148180 	call	10014818 <altera_avalon_jtag_uart_ioctl>
}
10014430:	e037883a 	mov	sp,fp
10014434:	dfc00117 	ldw	ra,4(sp)
10014438:	df000017 	ldw	fp,0(sp)
1001443c:	dec00204 	addi	sp,sp,8
10014440:	f800283a 	ret

10014444 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10014444:	defffa04 	addi	sp,sp,-24
10014448:	dfc00515 	stw	ra,20(sp)
1001444c:	df000415 	stw	fp,16(sp)
10014450:	df000404 	addi	fp,sp,16
10014454:	e13ffd15 	stw	r4,-12(fp)
10014458:	e17ffe15 	stw	r5,-8(fp)
1001445c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10014460:	e0bffd17 	ldw	r2,-12(fp)
10014464:	00c00044 	movi	r3,1
10014468:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1001446c:	e0bffd17 	ldw	r2,-12(fp)
10014470:	10800017 	ldw	r2,0(r2)
10014474:	10800104 	addi	r2,r2,4
10014478:	1007883a 	mov	r3,r2
1001447c:	e0bffd17 	ldw	r2,-12(fp)
10014480:	10800817 	ldw	r2,32(r2)
10014484:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10014488:	e0bffe17 	ldw	r2,-8(fp)
1001448c:	e0ffff17 	ldw	r3,-4(fp)
10014490:	d8000015 	stw	zero,0(sp)
10014494:	e1fffd17 	ldw	r7,-12(fp)
10014498:	01840074 	movhi	r6,4097
1001449c:	31914104 	addi	r6,r6,17668
100144a0:	180b883a 	mov	r5,r3
100144a4:	1009883a 	mov	r4,r2
100144a8:	00151ac0 	call	100151ac <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
100144ac:	e0bffd17 	ldw	r2,-12(fp)
100144b0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
100144b4:	e0bffd17 	ldw	r2,-12(fp)
100144b8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
100144bc:	d0db3617 	ldw	r3,27864(gp)
100144c0:	e1fffd17 	ldw	r7,-12(fp)
100144c4:	01840074 	movhi	r6,4097
100144c8:	3191c404 	addi	r6,r6,18192
100144cc:	180b883a 	mov	r5,r3
100144d0:	1009883a 	mov	r4,r2
100144d4:	0014d480 	call	10014d48 <alt_alarm_start>
100144d8:	1000040e 	bge	r2,zero,100144ec <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
100144dc:	e0fffd17 	ldw	r3,-12(fp)
100144e0:	00a00034 	movhi	r2,32768
100144e4:	10bfffc4 	addi	r2,r2,-1
100144e8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
100144ec:	0001883a 	nop
100144f0:	e037883a 	mov	sp,fp
100144f4:	dfc00117 	ldw	ra,4(sp)
100144f8:	df000017 	ldw	fp,0(sp)
100144fc:	dec00204 	addi	sp,sp,8
10014500:	f800283a 	ret

10014504 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10014504:	defff804 	addi	sp,sp,-32
10014508:	df000715 	stw	fp,28(sp)
1001450c:	df000704 	addi	fp,sp,28
10014510:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10014514:	e0bfff17 	ldw	r2,-4(fp)
10014518:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1001451c:	e0bffb17 	ldw	r2,-20(fp)
10014520:	10800017 	ldw	r2,0(r2)
10014524:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10014528:	e0bffc17 	ldw	r2,-16(fp)
1001452c:	10800104 	addi	r2,r2,4
10014530:	10800037 	ldwio	r2,0(r2)
10014534:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10014538:	e0bffd17 	ldw	r2,-12(fp)
1001453c:	1080c00c 	andi	r2,r2,768
10014540:	10006d26 	beq	r2,zero,100146f8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10014544:	e0bffd17 	ldw	r2,-12(fp)
10014548:	1080400c 	andi	r2,r2,256
1001454c:	10003526 	beq	r2,zero,10014624 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10014550:	00800074 	movhi	r2,1
10014554:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10014558:	e0bffb17 	ldw	r2,-20(fp)
1001455c:	10800a17 	ldw	r2,40(r2)
10014560:	10800044 	addi	r2,r2,1
10014564:	1081ffcc 	andi	r2,r2,2047
10014568:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1001456c:	e0bffb17 	ldw	r2,-20(fp)
10014570:	10c00b17 	ldw	r3,44(r2)
10014574:	e0bffe17 	ldw	r2,-8(fp)
10014578:	18801526 	beq	r3,r2,100145d0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1001457c:	e0bffc17 	ldw	r2,-16(fp)
10014580:	10800037 	ldwio	r2,0(r2)
10014584:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10014588:	e0bff917 	ldw	r2,-28(fp)
1001458c:	10a0000c 	andi	r2,r2,32768
10014590:	10001126 	beq	r2,zero,100145d8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10014594:	e0bffb17 	ldw	r2,-20(fp)
10014598:	10800a17 	ldw	r2,40(r2)
1001459c:	e0fff917 	ldw	r3,-28(fp)
100145a0:	1809883a 	mov	r4,r3
100145a4:	e0fffb17 	ldw	r3,-20(fp)
100145a8:	1885883a 	add	r2,r3,r2
100145ac:	10800e04 	addi	r2,r2,56
100145b0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100145b4:	e0bffb17 	ldw	r2,-20(fp)
100145b8:	10800a17 	ldw	r2,40(r2)
100145bc:	10800044 	addi	r2,r2,1
100145c0:	10c1ffcc 	andi	r3,r2,2047
100145c4:	e0bffb17 	ldw	r2,-20(fp)
100145c8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
100145cc:	003fe206 	br	10014558 <__alt_data_end+0xf8014558>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
100145d0:	0001883a 	nop
100145d4:	00000106 	br	100145dc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
100145d8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
100145dc:	e0bff917 	ldw	r2,-28(fp)
100145e0:	10bfffec 	andhi	r2,r2,65535
100145e4:	10000f26 	beq	r2,zero,10014624 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100145e8:	e0bffb17 	ldw	r2,-20(fp)
100145ec:	10c00817 	ldw	r3,32(r2)
100145f0:	00bfff84 	movi	r2,-2
100145f4:	1886703a 	and	r3,r3,r2
100145f8:	e0bffb17 	ldw	r2,-20(fp)
100145fc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10014600:	e0bffc17 	ldw	r2,-16(fp)
10014604:	10800104 	addi	r2,r2,4
10014608:	1007883a 	mov	r3,r2
1001460c:	e0bffb17 	ldw	r2,-20(fp)
10014610:	10800817 	ldw	r2,32(r2)
10014614:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10014618:	e0bffc17 	ldw	r2,-16(fp)
1001461c:	10800104 	addi	r2,r2,4
10014620:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10014624:	e0bffd17 	ldw	r2,-12(fp)
10014628:	1080800c 	andi	r2,r2,512
1001462c:	103fbe26 	beq	r2,zero,10014528 <__alt_data_end+0xf8014528>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10014630:	e0bffd17 	ldw	r2,-12(fp)
10014634:	1004d43a 	srli	r2,r2,16
10014638:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1001463c:	00001406 	br	10014690 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10014640:	e0bffc17 	ldw	r2,-16(fp)
10014644:	e0fffb17 	ldw	r3,-20(fp)
10014648:	18c00d17 	ldw	r3,52(r3)
1001464c:	e13ffb17 	ldw	r4,-20(fp)
10014650:	20c7883a 	add	r3,r4,r3
10014654:	18c20e04 	addi	r3,r3,2104
10014658:	18c00003 	ldbu	r3,0(r3)
1001465c:	18c03fcc 	andi	r3,r3,255
10014660:	18c0201c 	xori	r3,r3,128
10014664:	18ffe004 	addi	r3,r3,-128
10014668:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001466c:	e0bffb17 	ldw	r2,-20(fp)
10014670:	10800d17 	ldw	r2,52(r2)
10014674:	10800044 	addi	r2,r2,1
10014678:	10c1ffcc 	andi	r3,r2,2047
1001467c:	e0bffb17 	ldw	r2,-20(fp)
10014680:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10014684:	e0bffa17 	ldw	r2,-24(fp)
10014688:	10bfffc4 	addi	r2,r2,-1
1001468c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10014690:	e0bffa17 	ldw	r2,-24(fp)
10014694:	10000526 	beq	r2,zero,100146ac <altera_avalon_jtag_uart_irq+0x1a8>
10014698:	e0bffb17 	ldw	r2,-20(fp)
1001469c:	10c00d17 	ldw	r3,52(r2)
100146a0:	e0bffb17 	ldw	r2,-20(fp)
100146a4:	10800c17 	ldw	r2,48(r2)
100146a8:	18bfe51e 	bne	r3,r2,10014640 <__alt_data_end+0xf8014640>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
100146ac:	e0bffa17 	ldw	r2,-24(fp)
100146b0:	103f9d26 	beq	r2,zero,10014528 <__alt_data_end+0xf8014528>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100146b4:	e0bffb17 	ldw	r2,-20(fp)
100146b8:	10c00817 	ldw	r3,32(r2)
100146bc:	00bfff44 	movi	r2,-3
100146c0:	1886703a 	and	r3,r3,r2
100146c4:	e0bffb17 	ldw	r2,-20(fp)
100146c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100146cc:	e0bffb17 	ldw	r2,-20(fp)
100146d0:	10800017 	ldw	r2,0(r2)
100146d4:	10800104 	addi	r2,r2,4
100146d8:	1007883a 	mov	r3,r2
100146dc:	e0bffb17 	ldw	r2,-20(fp)
100146e0:	10800817 	ldw	r2,32(r2)
100146e4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100146e8:	e0bffc17 	ldw	r2,-16(fp)
100146ec:	10800104 	addi	r2,r2,4
100146f0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
100146f4:	003f8c06 	br	10014528 <__alt_data_end+0xf8014528>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
100146f8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
100146fc:	0001883a 	nop
10014700:	e037883a 	mov	sp,fp
10014704:	df000017 	ldw	fp,0(sp)
10014708:	dec00104 	addi	sp,sp,4
1001470c:	f800283a 	ret

10014710 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10014710:	defff804 	addi	sp,sp,-32
10014714:	df000715 	stw	fp,28(sp)
10014718:	df000704 	addi	fp,sp,28
1001471c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10014720:	e0bffb17 	ldw	r2,-20(fp)
10014724:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10014728:	e0bff917 	ldw	r2,-28(fp)
1001472c:	10800017 	ldw	r2,0(r2)
10014730:	10800104 	addi	r2,r2,4
10014734:	10800037 	ldwio	r2,0(r2)
10014738:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1001473c:	e0bffa17 	ldw	r2,-24(fp)
10014740:	1081000c 	andi	r2,r2,1024
10014744:	10000b26 	beq	r2,zero,10014774 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10014748:	e0bff917 	ldw	r2,-28(fp)
1001474c:	10800017 	ldw	r2,0(r2)
10014750:	10800104 	addi	r2,r2,4
10014754:	1007883a 	mov	r3,r2
10014758:	e0bff917 	ldw	r2,-28(fp)
1001475c:	10800817 	ldw	r2,32(r2)
10014760:	10810014 	ori	r2,r2,1024
10014764:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10014768:	e0bff917 	ldw	r2,-28(fp)
1001476c:	10000915 	stw	zero,36(r2)
10014770:	00000a06 	br	1001479c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10014774:	e0bff917 	ldw	r2,-28(fp)
10014778:	10c00917 	ldw	r3,36(r2)
1001477c:	00a00034 	movhi	r2,32768
10014780:	10bfff04 	addi	r2,r2,-4
10014784:	10c00536 	bltu	r2,r3,1001479c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10014788:	e0bff917 	ldw	r2,-28(fp)
1001478c:	10800917 	ldw	r2,36(r2)
10014790:	10c00044 	addi	r3,r2,1
10014794:	e0bff917 	ldw	r2,-28(fp)
10014798:	10c00915 	stw	r3,36(r2)
1001479c:	d09b3617 	ldw	r2,27864(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
100147a0:	e037883a 	mov	sp,fp
100147a4:	df000017 	ldw	fp,0(sp)
100147a8:	dec00104 	addi	sp,sp,4
100147ac:	f800283a 	ret

100147b0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
100147b0:	defffd04 	addi	sp,sp,-12
100147b4:	df000215 	stw	fp,8(sp)
100147b8:	df000204 	addi	fp,sp,8
100147bc:	e13ffe15 	stw	r4,-8(fp)
100147c0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100147c4:	00000506 	br	100147dc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
100147c8:	e0bfff17 	ldw	r2,-4(fp)
100147cc:	1090000c 	andi	r2,r2,16384
100147d0:	10000226 	beq	r2,zero,100147dc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
100147d4:	00bffd44 	movi	r2,-11
100147d8:	00000b06 	br	10014808 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100147dc:	e0bffe17 	ldw	r2,-8(fp)
100147e0:	10c00d17 	ldw	r3,52(r2)
100147e4:	e0bffe17 	ldw	r2,-8(fp)
100147e8:	10800c17 	ldw	r2,48(r2)
100147ec:	18800526 	beq	r3,r2,10014804 <altera_avalon_jtag_uart_close+0x54>
100147f0:	e0bffe17 	ldw	r2,-8(fp)
100147f4:	10c00917 	ldw	r3,36(r2)
100147f8:	e0bffe17 	ldw	r2,-8(fp)
100147fc:	10800117 	ldw	r2,4(r2)
10014800:	18bff136 	bltu	r3,r2,100147c8 <__alt_data_end+0xf80147c8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10014804:	0005883a 	mov	r2,zero
}
10014808:	e037883a 	mov	sp,fp
1001480c:	df000017 	ldw	fp,0(sp)
10014810:	dec00104 	addi	sp,sp,4
10014814:	f800283a 	ret

10014818 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10014818:	defffa04 	addi	sp,sp,-24
1001481c:	df000515 	stw	fp,20(sp)
10014820:	df000504 	addi	fp,sp,20
10014824:	e13ffd15 	stw	r4,-12(fp)
10014828:	e17ffe15 	stw	r5,-8(fp)
1001482c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10014830:	00bff9c4 	movi	r2,-25
10014834:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10014838:	e0bffe17 	ldw	r2,-8(fp)
1001483c:	10da8060 	cmpeqi	r3,r2,27137
10014840:	1800031e 	bne	r3,zero,10014850 <altera_avalon_jtag_uart_ioctl+0x38>
10014844:	109a80a0 	cmpeqi	r2,r2,27138
10014848:	1000181e 	bne	r2,zero,100148ac <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
1001484c:	00002906 	br	100148f4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10014850:	e0bffd17 	ldw	r2,-12(fp)
10014854:	10c00117 	ldw	r3,4(r2)
10014858:	00a00034 	movhi	r2,32768
1001485c:	10bfffc4 	addi	r2,r2,-1
10014860:	18802126 	beq	r3,r2,100148e8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10014864:	e0bfff17 	ldw	r2,-4(fp)
10014868:	10800017 	ldw	r2,0(r2)
1001486c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10014870:	e0bffc17 	ldw	r2,-16(fp)
10014874:	10800090 	cmplti	r2,r2,2
10014878:	1000061e 	bne	r2,zero,10014894 <altera_avalon_jtag_uart_ioctl+0x7c>
1001487c:	e0fffc17 	ldw	r3,-16(fp)
10014880:	00a00034 	movhi	r2,32768
10014884:	10bfffc4 	addi	r2,r2,-1
10014888:	18800226 	beq	r3,r2,10014894 <altera_avalon_jtag_uart_ioctl+0x7c>
1001488c:	e0bffc17 	ldw	r2,-16(fp)
10014890:	00000206 	br	1001489c <altera_avalon_jtag_uart_ioctl+0x84>
10014894:	00a00034 	movhi	r2,32768
10014898:	10bfff84 	addi	r2,r2,-2
1001489c:	e0fffd17 	ldw	r3,-12(fp)
100148a0:	18800115 	stw	r2,4(r3)
      rc = 0;
100148a4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100148a8:	00000f06 	br	100148e8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
100148ac:	e0bffd17 	ldw	r2,-12(fp)
100148b0:	10c00117 	ldw	r3,4(r2)
100148b4:	00a00034 	movhi	r2,32768
100148b8:	10bfffc4 	addi	r2,r2,-1
100148bc:	18800c26 	beq	r3,r2,100148f0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
100148c0:	e0bffd17 	ldw	r2,-12(fp)
100148c4:	10c00917 	ldw	r3,36(r2)
100148c8:	e0bffd17 	ldw	r2,-12(fp)
100148cc:	10800117 	ldw	r2,4(r2)
100148d0:	1885803a 	cmpltu	r2,r3,r2
100148d4:	10c03fcc 	andi	r3,r2,255
100148d8:	e0bfff17 	ldw	r2,-4(fp)
100148dc:	10c00015 	stw	r3,0(r2)
      rc = 0;
100148e0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100148e4:	00000206 	br	100148f0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
100148e8:	0001883a 	nop
100148ec:	00000106 	br	100148f4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
100148f0:	0001883a 	nop

  default:
    break;
  }

  return rc;
100148f4:	e0bffb17 	ldw	r2,-20(fp)
}
100148f8:	e037883a 	mov	sp,fp
100148fc:	df000017 	ldw	fp,0(sp)
10014900:	dec00104 	addi	sp,sp,4
10014904:	f800283a 	ret

10014908 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10014908:	defff304 	addi	sp,sp,-52
1001490c:	dfc00c15 	stw	ra,48(sp)
10014910:	df000b15 	stw	fp,44(sp)
10014914:	df000b04 	addi	fp,sp,44
10014918:	e13ffc15 	stw	r4,-16(fp)
1001491c:	e17ffd15 	stw	r5,-12(fp)
10014920:	e1bffe15 	stw	r6,-8(fp)
10014924:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10014928:	e0bffd17 	ldw	r2,-12(fp)
1001492c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10014930:	00004706 	br	10014a50 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10014934:	e0bffc17 	ldw	r2,-16(fp)
10014938:	10800a17 	ldw	r2,40(r2)
1001493c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10014940:	e0bffc17 	ldw	r2,-16(fp)
10014944:	10800b17 	ldw	r2,44(r2)
10014948:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1001494c:	e0fff717 	ldw	r3,-36(fp)
10014950:	e0bff817 	ldw	r2,-32(fp)
10014954:	18800536 	bltu	r3,r2,1001496c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10014958:	e0fff717 	ldw	r3,-36(fp)
1001495c:	e0bff817 	ldw	r2,-32(fp)
10014960:	1885c83a 	sub	r2,r3,r2
10014964:	e0bff615 	stw	r2,-40(fp)
10014968:	00000406 	br	1001497c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1001496c:	00c20004 	movi	r3,2048
10014970:	e0bff817 	ldw	r2,-32(fp)
10014974:	1885c83a 	sub	r2,r3,r2
10014978:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1001497c:	e0bff617 	ldw	r2,-40(fp)
10014980:	10001e26 	beq	r2,zero,100149fc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10014984:	e0fffe17 	ldw	r3,-8(fp)
10014988:	e0bff617 	ldw	r2,-40(fp)
1001498c:	1880022e 	bgeu	r3,r2,10014998 <altera_avalon_jtag_uart_read+0x90>
        n = space;
10014990:	e0bffe17 	ldw	r2,-8(fp)
10014994:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10014998:	e0bffc17 	ldw	r2,-16(fp)
1001499c:	10c00e04 	addi	r3,r2,56
100149a0:	e0bff817 	ldw	r2,-32(fp)
100149a4:	1885883a 	add	r2,r3,r2
100149a8:	e1bff617 	ldw	r6,-40(fp)
100149ac:	100b883a 	mov	r5,r2
100149b0:	e13ff517 	ldw	r4,-44(fp)
100149b4:	000c6f40 	call	1000c6f4 <memcpy>
      ptr   += n;
100149b8:	e0fff517 	ldw	r3,-44(fp)
100149bc:	e0bff617 	ldw	r2,-40(fp)
100149c0:	1885883a 	add	r2,r3,r2
100149c4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
100149c8:	e0fffe17 	ldw	r3,-8(fp)
100149cc:	e0bff617 	ldw	r2,-40(fp)
100149d0:	1885c83a 	sub	r2,r3,r2
100149d4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100149d8:	e0fff817 	ldw	r3,-32(fp)
100149dc:	e0bff617 	ldw	r2,-40(fp)
100149e0:	1885883a 	add	r2,r3,r2
100149e4:	10c1ffcc 	andi	r3,r2,2047
100149e8:	e0bffc17 	ldw	r2,-16(fp)
100149ec:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
100149f0:	e0bffe17 	ldw	r2,-8(fp)
100149f4:	00bfcf16 	blt	zero,r2,10014934 <__alt_data_end+0xf8014934>
100149f8:	00000106 	br	10014a00 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
100149fc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10014a00:	e0fff517 	ldw	r3,-44(fp)
10014a04:	e0bffd17 	ldw	r2,-12(fp)
10014a08:	1880141e 	bne	r3,r2,10014a5c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10014a0c:	e0bfff17 	ldw	r2,-4(fp)
10014a10:	1090000c 	andi	r2,r2,16384
10014a14:	1000131e 	bne	r2,zero,10014a64 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10014a18:	0001883a 	nop
10014a1c:	e0bffc17 	ldw	r2,-16(fp)
10014a20:	10c00a17 	ldw	r3,40(r2)
10014a24:	e0bff717 	ldw	r2,-36(fp)
10014a28:	1880051e 	bne	r3,r2,10014a40 <altera_avalon_jtag_uart_read+0x138>
10014a2c:	e0bffc17 	ldw	r2,-16(fp)
10014a30:	10c00917 	ldw	r3,36(r2)
10014a34:	e0bffc17 	ldw	r2,-16(fp)
10014a38:	10800117 	ldw	r2,4(r2)
10014a3c:	18bff736 	bltu	r3,r2,10014a1c <__alt_data_end+0xf8014a1c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10014a40:	e0bffc17 	ldw	r2,-16(fp)
10014a44:	10c00a17 	ldw	r3,40(r2)
10014a48:	e0bff717 	ldw	r2,-36(fp)
10014a4c:	18800726 	beq	r3,r2,10014a6c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10014a50:	e0bffe17 	ldw	r2,-8(fp)
10014a54:	00bfb716 	blt	zero,r2,10014934 <__alt_data_end+0xf8014934>
10014a58:	00000506 	br	10014a70 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10014a5c:	0001883a 	nop
10014a60:	00000306 	br	10014a70 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10014a64:	0001883a 	nop
10014a68:	00000106 	br	10014a70 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10014a6c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10014a70:	e0fff517 	ldw	r3,-44(fp)
10014a74:	e0bffd17 	ldw	r2,-12(fp)
10014a78:	18801826 	beq	r3,r2,10014adc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10014a7c:	0005303a 	rdctl	r2,status
10014a80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10014a84:	e0fffb17 	ldw	r3,-20(fp)
10014a88:	00bfff84 	movi	r2,-2
10014a8c:	1884703a 	and	r2,r3,r2
10014a90:	1001703a 	wrctl	status,r2
  
  return context;
10014a94:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10014a98:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10014a9c:	e0bffc17 	ldw	r2,-16(fp)
10014aa0:	10800817 	ldw	r2,32(r2)
10014aa4:	10c00054 	ori	r3,r2,1
10014aa8:	e0bffc17 	ldw	r2,-16(fp)
10014aac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10014ab0:	e0bffc17 	ldw	r2,-16(fp)
10014ab4:	10800017 	ldw	r2,0(r2)
10014ab8:	10800104 	addi	r2,r2,4
10014abc:	1007883a 	mov	r3,r2
10014ac0:	e0bffc17 	ldw	r2,-16(fp)
10014ac4:	10800817 	ldw	r2,32(r2)
10014ac8:	18800035 	stwio	r2,0(r3)
10014acc:	e0bffa17 	ldw	r2,-24(fp)
10014ad0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10014ad4:	e0bff917 	ldw	r2,-28(fp)
10014ad8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10014adc:	e0fff517 	ldw	r3,-44(fp)
10014ae0:	e0bffd17 	ldw	r2,-12(fp)
10014ae4:	18800426 	beq	r3,r2,10014af8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10014ae8:	e0fff517 	ldw	r3,-44(fp)
10014aec:	e0bffd17 	ldw	r2,-12(fp)
10014af0:	1885c83a 	sub	r2,r3,r2
10014af4:	00000606 	br	10014b10 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10014af8:	e0bfff17 	ldw	r2,-4(fp)
10014afc:	1090000c 	andi	r2,r2,16384
10014b00:	10000226 	beq	r2,zero,10014b0c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10014b04:	00bffd44 	movi	r2,-11
10014b08:	00000106 	br	10014b10 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10014b0c:	00bffec4 	movi	r2,-5
}
10014b10:	e037883a 	mov	sp,fp
10014b14:	dfc00117 	ldw	ra,4(sp)
10014b18:	df000017 	ldw	fp,0(sp)
10014b1c:	dec00204 	addi	sp,sp,8
10014b20:	f800283a 	ret

10014b24 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10014b24:	defff304 	addi	sp,sp,-52
10014b28:	dfc00c15 	stw	ra,48(sp)
10014b2c:	df000b15 	stw	fp,44(sp)
10014b30:	df000b04 	addi	fp,sp,44
10014b34:	e13ffc15 	stw	r4,-16(fp)
10014b38:	e17ffd15 	stw	r5,-12(fp)
10014b3c:	e1bffe15 	stw	r6,-8(fp)
10014b40:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10014b44:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10014b48:	e0bffd17 	ldw	r2,-12(fp)
10014b4c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10014b50:	00003706 	br	10014c30 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10014b54:	e0bffc17 	ldw	r2,-16(fp)
10014b58:	10800c17 	ldw	r2,48(r2)
10014b5c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10014b60:	e0bffc17 	ldw	r2,-16(fp)
10014b64:	10800d17 	ldw	r2,52(r2)
10014b68:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10014b6c:	e0fff917 	ldw	r3,-28(fp)
10014b70:	e0bff517 	ldw	r2,-44(fp)
10014b74:	1880062e 	bgeu	r3,r2,10014b90 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10014b78:	e0fff517 	ldw	r3,-44(fp)
10014b7c:	e0bff917 	ldw	r2,-28(fp)
10014b80:	1885c83a 	sub	r2,r3,r2
10014b84:	10bfffc4 	addi	r2,r2,-1
10014b88:	e0bff615 	stw	r2,-40(fp)
10014b8c:	00000b06 	br	10014bbc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10014b90:	e0bff517 	ldw	r2,-44(fp)
10014b94:	10000526 	beq	r2,zero,10014bac <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10014b98:	00c20004 	movi	r3,2048
10014b9c:	e0bff917 	ldw	r2,-28(fp)
10014ba0:	1885c83a 	sub	r2,r3,r2
10014ba4:	e0bff615 	stw	r2,-40(fp)
10014ba8:	00000406 	br	10014bbc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10014bac:	00c1ffc4 	movi	r3,2047
10014bb0:	e0bff917 	ldw	r2,-28(fp)
10014bb4:	1885c83a 	sub	r2,r3,r2
10014bb8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10014bbc:	e0bff617 	ldw	r2,-40(fp)
10014bc0:	10001e26 	beq	r2,zero,10014c3c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10014bc4:	e0fffe17 	ldw	r3,-8(fp)
10014bc8:	e0bff617 	ldw	r2,-40(fp)
10014bcc:	1880022e 	bgeu	r3,r2,10014bd8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10014bd0:	e0bffe17 	ldw	r2,-8(fp)
10014bd4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10014bd8:	e0bffc17 	ldw	r2,-16(fp)
10014bdc:	10c20e04 	addi	r3,r2,2104
10014be0:	e0bff917 	ldw	r2,-28(fp)
10014be4:	1885883a 	add	r2,r3,r2
10014be8:	e1bff617 	ldw	r6,-40(fp)
10014bec:	e17ffd17 	ldw	r5,-12(fp)
10014bf0:	1009883a 	mov	r4,r2
10014bf4:	000c6f40 	call	1000c6f4 <memcpy>
      ptr   += n;
10014bf8:	e0fffd17 	ldw	r3,-12(fp)
10014bfc:	e0bff617 	ldw	r2,-40(fp)
10014c00:	1885883a 	add	r2,r3,r2
10014c04:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10014c08:	e0fffe17 	ldw	r3,-8(fp)
10014c0c:	e0bff617 	ldw	r2,-40(fp)
10014c10:	1885c83a 	sub	r2,r3,r2
10014c14:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10014c18:	e0fff917 	ldw	r3,-28(fp)
10014c1c:	e0bff617 	ldw	r2,-40(fp)
10014c20:	1885883a 	add	r2,r3,r2
10014c24:	10c1ffcc 	andi	r3,r2,2047
10014c28:	e0bffc17 	ldw	r2,-16(fp)
10014c2c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10014c30:	e0bffe17 	ldw	r2,-8(fp)
10014c34:	00bfc716 	blt	zero,r2,10014b54 <__alt_data_end+0xf8014b54>
10014c38:	00000106 	br	10014c40 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10014c3c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10014c40:	0005303a 	rdctl	r2,status
10014c44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10014c48:	e0fffb17 	ldw	r3,-20(fp)
10014c4c:	00bfff84 	movi	r2,-2
10014c50:	1884703a 	and	r2,r3,r2
10014c54:	1001703a 	wrctl	status,r2
  
  return context;
10014c58:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10014c5c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10014c60:	e0bffc17 	ldw	r2,-16(fp)
10014c64:	10800817 	ldw	r2,32(r2)
10014c68:	10c00094 	ori	r3,r2,2
10014c6c:	e0bffc17 	ldw	r2,-16(fp)
10014c70:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10014c74:	e0bffc17 	ldw	r2,-16(fp)
10014c78:	10800017 	ldw	r2,0(r2)
10014c7c:	10800104 	addi	r2,r2,4
10014c80:	1007883a 	mov	r3,r2
10014c84:	e0bffc17 	ldw	r2,-16(fp)
10014c88:	10800817 	ldw	r2,32(r2)
10014c8c:	18800035 	stwio	r2,0(r3)
10014c90:	e0bffa17 	ldw	r2,-24(fp)
10014c94:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10014c98:	e0bff817 	ldw	r2,-32(fp)
10014c9c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10014ca0:	e0bffe17 	ldw	r2,-8(fp)
10014ca4:	0080100e 	bge	zero,r2,10014ce8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10014ca8:	e0bfff17 	ldw	r2,-4(fp)
10014cac:	1090000c 	andi	r2,r2,16384
10014cb0:	1000101e 	bne	r2,zero,10014cf4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10014cb4:	0001883a 	nop
10014cb8:	e0bffc17 	ldw	r2,-16(fp)
10014cbc:	10c00d17 	ldw	r3,52(r2)
10014cc0:	e0bff517 	ldw	r2,-44(fp)
10014cc4:	1880051e 	bne	r3,r2,10014cdc <altera_avalon_jtag_uart_write+0x1b8>
10014cc8:	e0bffc17 	ldw	r2,-16(fp)
10014ccc:	10c00917 	ldw	r3,36(r2)
10014cd0:	e0bffc17 	ldw	r2,-16(fp)
10014cd4:	10800117 	ldw	r2,4(r2)
10014cd8:	18bff736 	bltu	r3,r2,10014cb8 <__alt_data_end+0xf8014cb8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10014cdc:	e0bffc17 	ldw	r2,-16(fp)
10014ce0:	10800917 	ldw	r2,36(r2)
10014ce4:	1000051e 	bne	r2,zero,10014cfc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10014ce8:	e0bffe17 	ldw	r2,-8(fp)
10014cec:	00bfd016 	blt	zero,r2,10014c30 <__alt_data_end+0xf8014c30>
10014cf0:	00000306 	br	10014d00 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10014cf4:	0001883a 	nop
10014cf8:	00000106 	br	10014d00 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10014cfc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10014d00:	e0fffd17 	ldw	r3,-12(fp)
10014d04:	e0bff717 	ldw	r2,-36(fp)
10014d08:	18800426 	beq	r3,r2,10014d1c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10014d0c:	e0fffd17 	ldw	r3,-12(fp)
10014d10:	e0bff717 	ldw	r2,-36(fp)
10014d14:	1885c83a 	sub	r2,r3,r2
10014d18:	00000606 	br	10014d34 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10014d1c:	e0bfff17 	ldw	r2,-4(fp)
10014d20:	1090000c 	andi	r2,r2,16384
10014d24:	10000226 	beq	r2,zero,10014d30 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10014d28:	00bffd44 	movi	r2,-11
10014d2c:	00000106 	br	10014d34 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10014d30:	00bffec4 	movi	r2,-5
}
10014d34:	e037883a 	mov	sp,fp
10014d38:	dfc00117 	ldw	ra,4(sp)
10014d3c:	df000017 	ldw	fp,0(sp)
10014d40:	dec00204 	addi	sp,sp,8
10014d44:	f800283a 	ret

10014d48 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10014d48:	defff504 	addi	sp,sp,-44
10014d4c:	df000a15 	stw	fp,40(sp)
10014d50:	df000a04 	addi	fp,sp,40
10014d54:	e13ffc15 	stw	r4,-16(fp)
10014d58:	e17ffd15 	stw	r5,-12(fp)
10014d5c:	e1bffe15 	stw	r6,-8(fp)
10014d60:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10014d64:	e03ff615 	stw	zero,-40(fp)
10014d68:	d09b3617 	ldw	r2,27864(gp)
  
  if (alt_ticks_per_second ())
10014d6c:	10003c26 	beq	r2,zero,10014e60 <alt_alarm_start+0x118>
  {
    if (alarm)
10014d70:	e0bffc17 	ldw	r2,-16(fp)
10014d74:	10003826 	beq	r2,zero,10014e58 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10014d78:	e0bffc17 	ldw	r2,-16(fp)
10014d7c:	e0fffe17 	ldw	r3,-8(fp)
10014d80:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10014d84:	e0bffc17 	ldw	r2,-16(fp)
10014d88:	e0ffff17 	ldw	r3,-4(fp)
10014d8c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10014d90:	0005303a 	rdctl	r2,status
10014d94:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10014d98:	e0fff917 	ldw	r3,-28(fp)
10014d9c:	00bfff84 	movi	r2,-2
10014da0:	1884703a 	and	r2,r3,r2
10014da4:	1001703a 	wrctl	status,r2
  
  return context;
10014da8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10014dac:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10014db0:	d09b3717 	ldw	r2,27868(gp)
      
      current_nticks = alt_nticks();
10014db4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10014db8:	e0fffd17 	ldw	r3,-12(fp)
10014dbc:	e0bff617 	ldw	r2,-40(fp)
10014dc0:	1885883a 	add	r2,r3,r2
10014dc4:	10c00044 	addi	r3,r2,1
10014dc8:	e0bffc17 	ldw	r2,-16(fp)
10014dcc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10014dd0:	e0bffc17 	ldw	r2,-16(fp)
10014dd4:	10c00217 	ldw	r3,8(r2)
10014dd8:	e0bff617 	ldw	r2,-40(fp)
10014ddc:	1880042e 	bgeu	r3,r2,10014df0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10014de0:	e0bffc17 	ldw	r2,-16(fp)
10014de4:	00c00044 	movi	r3,1
10014de8:	10c00405 	stb	r3,16(r2)
10014dec:	00000206 	br	10014df8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10014df0:	e0bffc17 	ldw	r2,-16(fp)
10014df4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10014df8:	e0bffc17 	ldw	r2,-16(fp)
10014dfc:	d0e00e04 	addi	r3,gp,-32712
10014e00:	e0fffa15 	stw	r3,-24(fp)
10014e04:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10014e08:	e0bffb17 	ldw	r2,-20(fp)
10014e0c:	e0fffa17 	ldw	r3,-24(fp)
10014e10:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10014e14:	e0bffa17 	ldw	r2,-24(fp)
10014e18:	10c00017 	ldw	r3,0(r2)
10014e1c:	e0bffb17 	ldw	r2,-20(fp)
10014e20:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10014e24:	e0bffa17 	ldw	r2,-24(fp)
10014e28:	10800017 	ldw	r2,0(r2)
10014e2c:	e0fffb17 	ldw	r3,-20(fp)
10014e30:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10014e34:	e0bffa17 	ldw	r2,-24(fp)
10014e38:	e0fffb17 	ldw	r3,-20(fp)
10014e3c:	10c00015 	stw	r3,0(r2)
10014e40:	e0bff817 	ldw	r2,-32(fp)
10014e44:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10014e48:	e0bff717 	ldw	r2,-36(fp)
10014e4c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10014e50:	0005883a 	mov	r2,zero
10014e54:	00000306 	br	10014e64 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10014e58:	00bffa84 	movi	r2,-22
10014e5c:	00000106 	br	10014e64 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10014e60:	00bfde84 	movi	r2,-134
  }
}
10014e64:	e037883a 	mov	sp,fp
10014e68:	df000017 	ldw	fp,0(sp)
10014e6c:	dec00104 	addi	sp,sp,4
10014e70:	f800283a 	ret

10014e74 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10014e74:	defffa04 	addi	sp,sp,-24
10014e78:	dfc00515 	stw	ra,20(sp)
10014e7c:	df000415 	stw	fp,16(sp)
10014e80:	df000404 	addi	fp,sp,16
10014e84:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
10014e88:	00800244 	movi	r2,9
10014e8c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10014e90:	014003f4 	movhi	r5,15
10014e94:	29509004 	addi	r5,r5,16960
10014e98:	e13ffd17 	ldw	r4,-12(fp)
10014e9c:	0006ad80 	call	10006ad8 <__mulsi3>
10014ea0:	100b883a 	mov	r5,r2
10014ea4:	0100bef4 	movhi	r4,763
10014ea8:	213c2004 	addi	r4,r4,-3968
10014eac:	0006a1c0 	call	10006a1c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10014eb0:	100b883a 	mov	r5,r2
10014eb4:	01200034 	movhi	r4,32768
10014eb8:	213fffc4 	addi	r4,r4,-1
10014ebc:	0006a1c0 	call	10006a1c <__udivsi3>
10014ec0:	100b883a 	mov	r5,r2
10014ec4:	e13fff17 	ldw	r4,-4(fp)
10014ec8:	0006a1c0 	call	10006a1c <__udivsi3>
10014ecc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10014ed0:	e0bffe17 	ldw	r2,-8(fp)
10014ed4:	10002a26 	beq	r2,zero,10014f80 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10014ed8:	e03ffc15 	stw	zero,-16(fp)
10014edc:	00001706 	br	10014f3c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10014ee0:	00a00034 	movhi	r2,32768
10014ee4:	10bfffc4 	addi	r2,r2,-1
10014ee8:	10bfffc4 	addi	r2,r2,-1
10014eec:	103ffe1e 	bne	r2,zero,10014ee8 <__alt_data_end+0xf8014ee8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10014ef0:	014003f4 	movhi	r5,15
10014ef4:	29509004 	addi	r5,r5,16960
10014ef8:	e13ffd17 	ldw	r4,-12(fp)
10014efc:	0006ad80 	call	10006ad8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10014f00:	100b883a 	mov	r5,r2
10014f04:	0100bef4 	movhi	r4,763
10014f08:	213c2004 	addi	r4,r4,-3968
10014f0c:	0006a1c0 	call	10006a1c <__udivsi3>
10014f10:	100b883a 	mov	r5,r2
10014f14:	01200034 	movhi	r4,32768
10014f18:	213fffc4 	addi	r4,r4,-1
10014f1c:	0006a1c0 	call	10006a1c <__udivsi3>
10014f20:	1007883a 	mov	r3,r2
10014f24:	e0bfff17 	ldw	r2,-4(fp)
10014f28:	10c5c83a 	sub	r2,r2,r3
10014f2c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10014f30:	e0bffc17 	ldw	r2,-16(fp)
10014f34:	10800044 	addi	r2,r2,1
10014f38:	e0bffc15 	stw	r2,-16(fp)
10014f3c:	e0fffc17 	ldw	r3,-16(fp)
10014f40:	e0bffe17 	ldw	r2,-8(fp)
10014f44:	18bfe616 	blt	r3,r2,10014ee0 <__alt_data_end+0xf8014ee0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10014f48:	014003f4 	movhi	r5,15
10014f4c:	29509004 	addi	r5,r5,16960
10014f50:	e13ffd17 	ldw	r4,-12(fp)
10014f54:	0006ad80 	call	10006ad8 <__mulsi3>
10014f58:	100b883a 	mov	r5,r2
10014f5c:	0100bef4 	movhi	r4,763
10014f60:	213c2004 	addi	r4,r4,-3968
10014f64:	0006a1c0 	call	10006a1c <__udivsi3>
10014f68:	e17fff17 	ldw	r5,-4(fp)
10014f6c:	1009883a 	mov	r4,r2
10014f70:	0006ad80 	call	10006ad8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10014f74:	10bfffc4 	addi	r2,r2,-1
10014f78:	103ffe1e 	bne	r2,zero,10014f74 <__alt_data_end+0xf8014f74>
10014f7c:	00000d06 	br	10014fb4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10014f80:	014003f4 	movhi	r5,15
10014f84:	29509004 	addi	r5,r5,16960
10014f88:	e13ffd17 	ldw	r4,-12(fp)
10014f8c:	0006ad80 	call	10006ad8 <__mulsi3>
10014f90:	100b883a 	mov	r5,r2
10014f94:	0100bef4 	movhi	r4,763
10014f98:	213c2004 	addi	r4,r4,-3968
10014f9c:	0006a1c0 	call	10006a1c <__udivsi3>
10014fa0:	e17fff17 	ldw	r5,-4(fp)
10014fa4:	1009883a 	mov	r4,r2
10014fa8:	0006ad80 	call	10006ad8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10014fac:	10bfffc4 	addi	r2,r2,-1
10014fb0:	00bffe16 	blt	zero,r2,10014fac <__alt_data_end+0xf8014fac>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10014fb4:	0005883a 	mov	r2,zero
}
10014fb8:	e037883a 	mov	sp,fp
10014fbc:	dfc00117 	ldw	ra,4(sp)
10014fc0:	df000017 	ldw	fp,0(sp)
10014fc4:	dec00204 	addi	sp,sp,8
10014fc8:	f800283a 	ret

10014fcc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10014fcc:	deffff04 	addi	sp,sp,-4
10014fd0:	df000015 	stw	fp,0(sp)
10014fd4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10014fd8:	0001883a 	nop
10014fdc:	e037883a 	mov	sp,fp
10014fe0:	df000017 	ldw	fp,0(sp)
10014fe4:	dec00104 	addi	sp,sp,4
10014fe8:	f800283a 	ret

10014fec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10014fec:	defffe04 	addi	sp,sp,-8
10014ff0:	dfc00115 	stw	ra,4(sp)
10014ff4:	df000015 	stw	fp,0(sp)
10014ff8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10014ffc:	d0a00b17 	ldw	r2,-32724(gp)
10015000:	10000326 	beq	r2,zero,10015010 <alt_get_errno+0x24>
10015004:	d0a00b17 	ldw	r2,-32724(gp)
10015008:	103ee83a 	callr	r2
1001500c:	00000106 	br	10015014 <alt_get_errno+0x28>
10015010:	d09b3104 	addi	r2,gp,27844
}
10015014:	e037883a 	mov	sp,fp
10015018:	dfc00117 	ldw	ra,4(sp)
1001501c:	df000017 	ldw	fp,0(sp)
10015020:	dec00204 	addi	sp,sp,8
10015024:	f800283a 	ret

10015028 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10015028:	defffa04 	addi	sp,sp,-24
1001502c:	dfc00515 	stw	ra,20(sp)
10015030:	df000415 	stw	fp,16(sp)
10015034:	df000404 	addi	fp,sp,16
10015038:	e13ffe15 	stw	r4,-8(fp)
1001503c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10015040:	e0bffe17 	ldw	r2,-8(fp)
10015044:	10000326 	beq	r2,zero,10015054 <alt_dev_llist_insert+0x2c>
10015048:	e0bffe17 	ldw	r2,-8(fp)
1001504c:	10800217 	ldw	r2,8(r2)
10015050:	1000061e 	bne	r2,zero,1001506c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10015054:	0014fec0 	call	10014fec <alt_get_errno>
10015058:	1007883a 	mov	r3,r2
1001505c:	00800584 	movi	r2,22
10015060:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10015064:	00bffa84 	movi	r2,-22
10015068:	00001306 	br	100150b8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1001506c:	e0bffe17 	ldw	r2,-8(fp)
10015070:	e0ffff17 	ldw	r3,-4(fp)
10015074:	e0fffc15 	stw	r3,-16(fp)
10015078:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1001507c:	e0bffd17 	ldw	r2,-12(fp)
10015080:	e0fffc17 	ldw	r3,-16(fp)
10015084:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10015088:	e0bffc17 	ldw	r2,-16(fp)
1001508c:	10c00017 	ldw	r3,0(r2)
10015090:	e0bffd17 	ldw	r2,-12(fp)
10015094:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10015098:	e0bffc17 	ldw	r2,-16(fp)
1001509c:	10800017 	ldw	r2,0(r2)
100150a0:	e0fffd17 	ldw	r3,-12(fp)
100150a4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100150a8:	e0bffc17 	ldw	r2,-16(fp)
100150ac:	e0fffd17 	ldw	r3,-12(fp)
100150b0:	10c00015 	stw	r3,0(r2)

  return 0;  
100150b4:	0005883a 	mov	r2,zero
}
100150b8:	e037883a 	mov	sp,fp
100150bc:	dfc00117 	ldw	ra,4(sp)
100150c0:	df000017 	ldw	fp,0(sp)
100150c4:	dec00204 	addi	sp,sp,8
100150c8:	f800283a 	ret

100150cc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
100150cc:	defffd04 	addi	sp,sp,-12
100150d0:	dfc00215 	stw	ra,8(sp)
100150d4:	df000115 	stw	fp,4(sp)
100150d8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100150dc:	00840074 	movhi	r2,4097
100150e0:	10982004 	addi	r2,r2,24704
100150e4:	e0bfff15 	stw	r2,-4(fp)
100150e8:	00000606 	br	10015104 <_do_ctors+0x38>
        (*ctor) (); 
100150ec:	e0bfff17 	ldw	r2,-4(fp)
100150f0:	10800017 	ldw	r2,0(r2)
100150f4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100150f8:	e0bfff17 	ldw	r2,-4(fp)
100150fc:	10bfff04 	addi	r2,r2,-4
10015100:	e0bfff15 	stw	r2,-4(fp)
10015104:	e0ffff17 	ldw	r3,-4(fp)
10015108:	00840074 	movhi	r2,4097
1001510c:	10982104 	addi	r2,r2,24708
10015110:	18bff62e 	bgeu	r3,r2,100150ec <__alt_data_end+0xf80150ec>
        (*ctor) (); 
}
10015114:	0001883a 	nop
10015118:	e037883a 	mov	sp,fp
1001511c:	dfc00117 	ldw	ra,4(sp)
10015120:	df000017 	ldw	fp,0(sp)
10015124:	dec00204 	addi	sp,sp,8
10015128:	f800283a 	ret

1001512c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1001512c:	defffd04 	addi	sp,sp,-12
10015130:	dfc00215 	stw	ra,8(sp)
10015134:	df000115 	stw	fp,4(sp)
10015138:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1001513c:	00840074 	movhi	r2,4097
10015140:	10982004 	addi	r2,r2,24704
10015144:	e0bfff15 	stw	r2,-4(fp)
10015148:	00000606 	br	10015164 <_do_dtors+0x38>
        (*dtor) (); 
1001514c:	e0bfff17 	ldw	r2,-4(fp)
10015150:	10800017 	ldw	r2,0(r2)
10015154:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10015158:	e0bfff17 	ldw	r2,-4(fp)
1001515c:	10bfff04 	addi	r2,r2,-4
10015160:	e0bfff15 	stw	r2,-4(fp)
10015164:	e0ffff17 	ldw	r3,-4(fp)
10015168:	00840074 	movhi	r2,4097
1001516c:	10982104 	addi	r2,r2,24708
10015170:	18bff62e 	bgeu	r3,r2,1001514c <__alt_data_end+0xf801514c>
        (*dtor) (); 
}
10015174:	0001883a 	nop
10015178:	e037883a 	mov	sp,fp
1001517c:	dfc00117 	ldw	ra,4(sp)
10015180:	df000017 	ldw	fp,0(sp)
10015184:	dec00204 	addi	sp,sp,8
10015188:	f800283a 	ret

1001518c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1001518c:	deffff04 	addi	sp,sp,-4
10015190:	df000015 	stw	fp,0(sp)
10015194:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10015198:	0001883a 	nop
1001519c:	e037883a 	mov	sp,fp
100151a0:	df000017 	ldw	fp,0(sp)
100151a4:	dec00104 	addi	sp,sp,4
100151a8:	f800283a 	ret

100151ac <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100151ac:	defff904 	addi	sp,sp,-28
100151b0:	dfc00615 	stw	ra,24(sp)
100151b4:	df000515 	stw	fp,20(sp)
100151b8:	df000504 	addi	fp,sp,20
100151bc:	e13ffc15 	stw	r4,-16(fp)
100151c0:	e17ffd15 	stw	r5,-12(fp)
100151c4:	e1bffe15 	stw	r6,-8(fp)
100151c8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100151cc:	e0800217 	ldw	r2,8(fp)
100151d0:	d8800015 	stw	r2,0(sp)
100151d4:	e1ffff17 	ldw	r7,-4(fp)
100151d8:	e1bffe17 	ldw	r6,-8(fp)
100151dc:	e17ffd17 	ldw	r5,-12(fp)
100151e0:	e13ffc17 	ldw	r4,-16(fp)
100151e4:	001535c0 	call	1001535c <alt_iic_isr_register>
}  
100151e8:	e037883a 	mov	sp,fp
100151ec:	dfc00117 	ldw	ra,4(sp)
100151f0:	df000017 	ldw	fp,0(sp)
100151f4:	dec00204 	addi	sp,sp,8
100151f8:	f800283a 	ret

100151fc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
100151fc:	defff904 	addi	sp,sp,-28
10015200:	df000615 	stw	fp,24(sp)
10015204:	df000604 	addi	fp,sp,24
10015208:	e13ffe15 	stw	r4,-8(fp)
1001520c:	e17fff15 	stw	r5,-4(fp)
10015210:	e0bfff17 	ldw	r2,-4(fp)
10015214:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10015218:	0005303a 	rdctl	r2,status
1001521c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10015220:	e0fffb17 	ldw	r3,-20(fp)
10015224:	00bfff84 	movi	r2,-2
10015228:	1884703a 	and	r2,r3,r2
1001522c:	1001703a 	wrctl	status,r2
  
  return context;
10015230:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10015234:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10015238:	00c00044 	movi	r3,1
1001523c:	e0bffa17 	ldw	r2,-24(fp)
10015240:	1884983a 	sll	r2,r3,r2
10015244:	1007883a 	mov	r3,r2
10015248:	d09b3517 	ldw	r2,27860(gp)
1001524c:	1884b03a 	or	r2,r3,r2
10015250:	d09b3515 	stw	r2,27860(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10015254:	d09b3517 	ldw	r2,27860(gp)
10015258:	100170fa 	wrctl	ienable,r2
1001525c:	e0bffc17 	ldw	r2,-16(fp)
10015260:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10015264:	e0bffd17 	ldw	r2,-12(fp)
10015268:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1001526c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10015270:	0001883a 	nop
}
10015274:	e037883a 	mov	sp,fp
10015278:	df000017 	ldw	fp,0(sp)
1001527c:	dec00104 	addi	sp,sp,4
10015280:	f800283a 	ret

10015284 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10015284:	defff904 	addi	sp,sp,-28
10015288:	df000615 	stw	fp,24(sp)
1001528c:	df000604 	addi	fp,sp,24
10015290:	e13ffe15 	stw	r4,-8(fp)
10015294:	e17fff15 	stw	r5,-4(fp)
10015298:	e0bfff17 	ldw	r2,-4(fp)
1001529c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100152a0:	0005303a 	rdctl	r2,status
100152a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100152a8:	e0fffb17 	ldw	r3,-20(fp)
100152ac:	00bfff84 	movi	r2,-2
100152b0:	1884703a 	and	r2,r3,r2
100152b4:	1001703a 	wrctl	status,r2
  
  return context;
100152b8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100152bc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
100152c0:	00c00044 	movi	r3,1
100152c4:	e0bffa17 	ldw	r2,-24(fp)
100152c8:	1884983a 	sll	r2,r3,r2
100152cc:	0084303a 	nor	r2,zero,r2
100152d0:	1007883a 	mov	r3,r2
100152d4:	d09b3517 	ldw	r2,27860(gp)
100152d8:	1884703a 	and	r2,r3,r2
100152dc:	d09b3515 	stw	r2,27860(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100152e0:	d09b3517 	ldw	r2,27860(gp)
100152e4:	100170fa 	wrctl	ienable,r2
100152e8:	e0bffc17 	ldw	r2,-16(fp)
100152ec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100152f0:	e0bffd17 	ldw	r2,-12(fp)
100152f4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100152f8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
100152fc:	0001883a 	nop
}
10015300:	e037883a 	mov	sp,fp
10015304:	df000017 	ldw	fp,0(sp)
10015308:	dec00104 	addi	sp,sp,4
1001530c:	f800283a 	ret

10015310 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10015310:	defffc04 	addi	sp,sp,-16
10015314:	df000315 	stw	fp,12(sp)
10015318:	df000304 	addi	fp,sp,12
1001531c:	e13ffe15 	stw	r4,-8(fp)
10015320:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10015324:	000530fa 	rdctl	r2,ienable
10015328:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1001532c:	00c00044 	movi	r3,1
10015330:	e0bfff17 	ldw	r2,-4(fp)
10015334:	1884983a 	sll	r2,r3,r2
10015338:	1007883a 	mov	r3,r2
1001533c:	e0bffd17 	ldw	r2,-12(fp)
10015340:	1884703a 	and	r2,r3,r2
10015344:	1004c03a 	cmpne	r2,r2,zero
10015348:	10803fcc 	andi	r2,r2,255
}
1001534c:	e037883a 	mov	sp,fp
10015350:	df000017 	ldw	fp,0(sp)
10015354:	dec00104 	addi	sp,sp,4
10015358:	f800283a 	ret

1001535c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1001535c:	defff504 	addi	sp,sp,-44
10015360:	dfc00a15 	stw	ra,40(sp)
10015364:	df000915 	stw	fp,36(sp)
10015368:	df000904 	addi	fp,sp,36
1001536c:	e13ffc15 	stw	r4,-16(fp)
10015370:	e17ffd15 	stw	r5,-12(fp)
10015374:	e1bffe15 	stw	r6,-8(fp)
10015378:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1001537c:	00bffa84 	movi	r2,-22
10015380:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10015384:	e0bffd17 	ldw	r2,-12(fp)
10015388:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1001538c:	e0bff817 	ldw	r2,-32(fp)
10015390:	10800808 	cmpgei	r2,r2,32
10015394:	1000271e 	bne	r2,zero,10015434 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10015398:	0005303a 	rdctl	r2,status
1001539c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100153a0:	e0fffb17 	ldw	r3,-20(fp)
100153a4:	00bfff84 	movi	r2,-2
100153a8:	1884703a 	and	r2,r3,r2
100153ac:	1001703a 	wrctl	status,r2
  
  return context;
100153b0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
100153b4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
100153b8:	008400f4 	movhi	r2,4099
100153bc:	10913504 	addi	r2,r2,17620
100153c0:	e0fff817 	ldw	r3,-32(fp)
100153c4:	180690fa 	slli	r3,r3,3
100153c8:	10c5883a 	add	r2,r2,r3
100153cc:	e0fffe17 	ldw	r3,-8(fp)
100153d0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
100153d4:	008400f4 	movhi	r2,4099
100153d8:	10913504 	addi	r2,r2,17620
100153dc:	e0fff817 	ldw	r3,-32(fp)
100153e0:	180690fa 	slli	r3,r3,3
100153e4:	10c5883a 	add	r2,r2,r3
100153e8:	10800104 	addi	r2,r2,4
100153ec:	e0ffff17 	ldw	r3,-4(fp)
100153f0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
100153f4:	e0bffe17 	ldw	r2,-8(fp)
100153f8:	10000526 	beq	r2,zero,10015410 <alt_iic_isr_register+0xb4>
100153fc:	e0bff817 	ldw	r2,-32(fp)
10015400:	100b883a 	mov	r5,r2
10015404:	e13ffc17 	ldw	r4,-16(fp)
10015408:	00151fc0 	call	100151fc <alt_ic_irq_enable>
1001540c:	00000406 	br	10015420 <alt_iic_isr_register+0xc4>
10015410:	e0bff817 	ldw	r2,-32(fp)
10015414:	100b883a 	mov	r5,r2
10015418:	e13ffc17 	ldw	r4,-16(fp)
1001541c:	00152840 	call	10015284 <alt_ic_irq_disable>
10015420:	e0bff715 	stw	r2,-36(fp)
10015424:	e0bffa17 	ldw	r2,-24(fp)
10015428:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001542c:	e0bff917 	ldw	r2,-28(fp)
10015430:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10015434:	e0bff717 	ldw	r2,-36(fp)
}
10015438:	e037883a 	mov	sp,fp
1001543c:	dfc00117 	ldw	ra,4(sp)
10015440:	df000017 	ldw	fp,0(sp)
10015444:	dec00204 	addi	sp,sp,8
10015448:	f800283a 	ret

1001544c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1001544c:	defff804 	addi	sp,sp,-32
10015450:	dfc00715 	stw	ra,28(sp)
10015454:	df000615 	stw	fp,24(sp)
10015458:	dc000515 	stw	r16,20(sp)
1001545c:	df000604 	addi	fp,sp,24
10015460:	e13ffb15 	stw	r4,-20(fp)
10015464:	e17ffc15 	stw	r5,-16(fp)
10015468:	e1bffd15 	stw	r6,-12(fp)
1001546c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10015470:	e1bffe17 	ldw	r6,-8(fp)
10015474:	e17ffd17 	ldw	r5,-12(fp)
10015478:	e13ffc17 	ldw	r4,-16(fp)
1001547c:	00156d40 	call	100156d4 <open>
10015480:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10015484:	e0bffa17 	ldw	r2,-24(fp)
10015488:	10002216 	blt	r2,zero,10015514 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
1001548c:	040400b4 	movhi	r16,4098
10015490:	84117a04 	addi	r16,r16,17896
10015494:	e0bffa17 	ldw	r2,-24(fp)
10015498:	01400304 	movi	r5,12
1001549c:	1009883a 	mov	r4,r2
100154a0:	0006ad80 	call	10006ad8 <__mulsi3>
100154a4:	8085883a 	add	r2,r16,r2
100154a8:	10c00017 	ldw	r3,0(r2)
100154ac:	e0bffb17 	ldw	r2,-20(fp)
100154b0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
100154b4:	040400b4 	movhi	r16,4098
100154b8:	84117a04 	addi	r16,r16,17896
100154bc:	e0bffa17 	ldw	r2,-24(fp)
100154c0:	01400304 	movi	r5,12
100154c4:	1009883a 	mov	r4,r2
100154c8:	0006ad80 	call	10006ad8 <__mulsi3>
100154cc:	8085883a 	add	r2,r16,r2
100154d0:	10800104 	addi	r2,r2,4
100154d4:	10c00017 	ldw	r3,0(r2)
100154d8:	e0bffb17 	ldw	r2,-20(fp)
100154dc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
100154e0:	040400b4 	movhi	r16,4098
100154e4:	84117a04 	addi	r16,r16,17896
100154e8:	e0bffa17 	ldw	r2,-24(fp)
100154ec:	01400304 	movi	r5,12
100154f0:	1009883a 	mov	r4,r2
100154f4:	0006ad80 	call	10006ad8 <__mulsi3>
100154f8:	8085883a 	add	r2,r16,r2
100154fc:	10800204 	addi	r2,r2,8
10015500:	10c00017 	ldw	r3,0(r2)
10015504:	e0bffb17 	ldw	r2,-20(fp)
10015508:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1001550c:	e13ffa17 	ldw	r4,-24(fp)
10015510:	0013f880 	call	10013f88 <alt_release_fd>
  }
} 
10015514:	0001883a 	nop
10015518:	e6ffff04 	addi	sp,fp,-4
1001551c:	dfc00217 	ldw	ra,8(sp)
10015520:	df000117 	ldw	fp,4(sp)
10015524:	dc000017 	ldw	r16,0(sp)
10015528:	dec00304 	addi	sp,sp,12
1001552c:	f800283a 	ret

10015530 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10015530:	defffb04 	addi	sp,sp,-20
10015534:	dfc00415 	stw	ra,16(sp)
10015538:	df000315 	stw	fp,12(sp)
1001553c:	df000304 	addi	fp,sp,12
10015540:	e13ffd15 	stw	r4,-12(fp)
10015544:	e17ffe15 	stw	r5,-8(fp)
10015548:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1001554c:	01c07fc4 	movi	r7,511
10015550:	01800044 	movi	r6,1
10015554:	e17ffd17 	ldw	r5,-12(fp)
10015558:	010400b4 	movhi	r4,4098
1001555c:	21117d04 	addi	r4,r4,17908
10015560:	001544c0 	call	1001544c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10015564:	01c07fc4 	movi	r7,511
10015568:	000d883a 	mov	r6,zero
1001556c:	e17ffe17 	ldw	r5,-8(fp)
10015570:	010400b4 	movhi	r4,4098
10015574:	21117a04 	addi	r4,r4,17896
10015578:	001544c0 	call	1001544c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1001557c:	01c07fc4 	movi	r7,511
10015580:	01800044 	movi	r6,1
10015584:	e17fff17 	ldw	r5,-4(fp)
10015588:	010400b4 	movhi	r4,4098
1001558c:	21118004 	addi	r4,r4,17920
10015590:	001544c0 	call	1001544c <alt_open_fd>
}  
10015594:	0001883a 	nop
10015598:	e037883a 	mov	sp,fp
1001559c:	dfc00117 	ldw	ra,4(sp)
100155a0:	df000017 	ldw	fp,0(sp)
100155a4:	dec00204 	addi	sp,sp,8
100155a8:	f800283a 	ret

100155ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100155ac:	defffe04 	addi	sp,sp,-8
100155b0:	dfc00115 	stw	ra,4(sp)
100155b4:	df000015 	stw	fp,0(sp)
100155b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100155bc:	d0a00b17 	ldw	r2,-32724(gp)
100155c0:	10000326 	beq	r2,zero,100155d0 <alt_get_errno+0x24>
100155c4:	d0a00b17 	ldw	r2,-32724(gp)
100155c8:	103ee83a 	callr	r2
100155cc:	00000106 	br	100155d4 <alt_get_errno+0x28>
100155d0:	d09b3104 	addi	r2,gp,27844
}
100155d4:	e037883a 	mov	sp,fp
100155d8:	dfc00117 	ldw	ra,4(sp)
100155dc:	df000017 	ldw	fp,0(sp)
100155e0:	dec00204 	addi	sp,sp,8
100155e4:	f800283a 	ret

100155e8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
100155e8:	defffb04 	addi	sp,sp,-20
100155ec:	dfc00415 	stw	ra,16(sp)
100155f0:	df000315 	stw	fp,12(sp)
100155f4:	dc000215 	stw	r16,8(sp)
100155f8:	df000304 	addi	fp,sp,12
100155fc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10015600:	e0bffe17 	ldw	r2,-8(fp)
10015604:	10800217 	ldw	r2,8(r2)
10015608:	10d00034 	orhi	r3,r2,16384
1001560c:	e0bffe17 	ldw	r2,-8(fp)
10015610:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10015614:	e03ffd15 	stw	zero,-12(fp)
10015618:	00002306 	br	100156a8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1001561c:	040400b4 	movhi	r16,4098
10015620:	84117a04 	addi	r16,r16,17896
10015624:	e0bffd17 	ldw	r2,-12(fp)
10015628:	01400304 	movi	r5,12
1001562c:	1009883a 	mov	r4,r2
10015630:	0006ad80 	call	10006ad8 <__mulsi3>
10015634:	8085883a 	add	r2,r16,r2
10015638:	10c00017 	ldw	r3,0(r2)
1001563c:	e0bffe17 	ldw	r2,-8(fp)
10015640:	10800017 	ldw	r2,0(r2)
10015644:	1880151e 	bne	r3,r2,1001569c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10015648:	040400b4 	movhi	r16,4098
1001564c:	84117a04 	addi	r16,r16,17896
10015650:	e0bffd17 	ldw	r2,-12(fp)
10015654:	01400304 	movi	r5,12
10015658:	1009883a 	mov	r4,r2
1001565c:	0006ad80 	call	10006ad8 <__mulsi3>
10015660:	8085883a 	add	r2,r16,r2
10015664:	10800204 	addi	r2,r2,8
10015668:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1001566c:	10000b0e 	bge	r2,zero,1001569c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10015670:	01400304 	movi	r5,12
10015674:	e13ffd17 	ldw	r4,-12(fp)
10015678:	0006ad80 	call	10006ad8 <__mulsi3>
1001567c:	1007883a 	mov	r3,r2
10015680:	008400b4 	movhi	r2,4098
10015684:	10917a04 	addi	r2,r2,17896
10015688:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1001568c:	e0bffe17 	ldw	r2,-8(fp)
10015690:	18800226 	beq	r3,r2,1001569c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10015694:	00bffcc4 	movi	r2,-13
10015698:	00000806 	br	100156bc <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1001569c:	e0bffd17 	ldw	r2,-12(fp)
100156a0:	10800044 	addi	r2,r2,1
100156a4:	e0bffd15 	stw	r2,-12(fp)
100156a8:	d0a00a17 	ldw	r2,-32728(gp)
100156ac:	1007883a 	mov	r3,r2
100156b0:	e0bffd17 	ldw	r2,-12(fp)
100156b4:	18bfd92e 	bgeu	r3,r2,1001561c <__alt_data_end+0xf801561c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
100156b8:	0005883a 	mov	r2,zero
}
100156bc:	e6ffff04 	addi	sp,fp,-4
100156c0:	dfc00217 	ldw	ra,8(sp)
100156c4:	df000117 	ldw	fp,4(sp)
100156c8:	dc000017 	ldw	r16,0(sp)
100156cc:	dec00304 	addi	sp,sp,12
100156d0:	f800283a 	ret

100156d4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
100156d4:	defff604 	addi	sp,sp,-40
100156d8:	dfc00915 	stw	ra,36(sp)
100156dc:	df000815 	stw	fp,32(sp)
100156e0:	df000804 	addi	fp,sp,32
100156e4:	e13ffd15 	stw	r4,-12(fp)
100156e8:	e17ffe15 	stw	r5,-8(fp)
100156ec:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
100156f0:	00bfffc4 	movi	r2,-1
100156f4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
100156f8:	00bffb44 	movi	r2,-19
100156fc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10015700:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10015704:	d1600804 	addi	r5,gp,-32736
10015708:	e13ffd17 	ldw	r4,-12(fp)
1001570c:	00159f80 	call	100159f8 <alt_find_dev>
10015710:	e0bff815 	stw	r2,-32(fp)
10015714:	e0bff817 	ldw	r2,-32(fp)
10015718:	1000051e 	bne	r2,zero,10015730 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1001571c:	e13ffd17 	ldw	r4,-12(fp)
10015720:	0015a880 	call	10015a88 <alt_find_file>
10015724:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10015728:	00800044 	movi	r2,1
1001572c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10015730:	e0bff817 	ldw	r2,-32(fp)
10015734:	10002b26 	beq	r2,zero,100157e4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
10015738:	e13ff817 	ldw	r4,-32(fp)
1001573c:	0015b900 	call	10015b90 <alt_get_fd>
10015740:	e0bff915 	stw	r2,-28(fp)
10015744:	e0bff917 	ldw	r2,-28(fp)
10015748:	1000030e 	bge	r2,zero,10015758 <open+0x84>
    {
      status = index;
1001574c:	e0bff917 	ldw	r2,-28(fp)
10015750:	e0bffa15 	stw	r2,-24(fp)
10015754:	00002506 	br	100157ec <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
10015758:	01400304 	movi	r5,12
1001575c:	e13ff917 	ldw	r4,-28(fp)
10015760:	0006ad80 	call	10006ad8 <__mulsi3>
10015764:	1007883a 	mov	r3,r2
10015768:	008400b4 	movhi	r2,4098
1001576c:	10917a04 	addi	r2,r2,17896
10015770:	1885883a 	add	r2,r3,r2
10015774:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10015778:	e0fffe17 	ldw	r3,-8(fp)
1001577c:	00900034 	movhi	r2,16384
10015780:	10bfffc4 	addi	r2,r2,-1
10015784:	1886703a 	and	r3,r3,r2
10015788:	e0bffc17 	ldw	r2,-16(fp)
1001578c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10015790:	e0bffb17 	ldw	r2,-20(fp)
10015794:	1000051e 	bne	r2,zero,100157ac <open+0xd8>
10015798:	e13ffc17 	ldw	r4,-16(fp)
1001579c:	00155e80 	call	100155e8 <alt_file_locked>
100157a0:	e0bffa15 	stw	r2,-24(fp)
100157a4:	e0bffa17 	ldw	r2,-24(fp)
100157a8:	10001016 	blt	r2,zero,100157ec <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
100157ac:	e0bff817 	ldw	r2,-32(fp)
100157b0:	10800317 	ldw	r2,12(r2)
100157b4:	10000826 	beq	r2,zero,100157d8 <open+0x104>
100157b8:	e0bff817 	ldw	r2,-32(fp)
100157bc:	10800317 	ldw	r2,12(r2)
100157c0:	e1ffff17 	ldw	r7,-4(fp)
100157c4:	e1bffe17 	ldw	r6,-8(fp)
100157c8:	e17ffd17 	ldw	r5,-12(fp)
100157cc:	e13ffc17 	ldw	r4,-16(fp)
100157d0:	103ee83a 	callr	r2
100157d4:	00000106 	br	100157dc <open+0x108>
100157d8:	0005883a 	mov	r2,zero
100157dc:	e0bffa15 	stw	r2,-24(fp)
100157e0:	00000206 	br	100157ec <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
100157e4:	00bffb44 	movi	r2,-19
100157e8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
100157ec:	e0bffa17 	ldw	r2,-24(fp)
100157f0:	1000090e 	bge	r2,zero,10015818 <open+0x144>
  {
    alt_release_fd (index);  
100157f4:	e13ff917 	ldw	r4,-28(fp)
100157f8:	0013f880 	call	10013f88 <alt_release_fd>
    ALT_ERRNO = -status;
100157fc:	00155ac0 	call	100155ac <alt_get_errno>
10015800:	1007883a 	mov	r3,r2
10015804:	e0bffa17 	ldw	r2,-24(fp)
10015808:	0085c83a 	sub	r2,zero,r2
1001580c:	18800015 	stw	r2,0(r3)
    return -1;
10015810:	00bfffc4 	movi	r2,-1
10015814:	00000106 	br	1001581c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
10015818:	e0bff917 	ldw	r2,-28(fp)
}
1001581c:	e037883a 	mov	sp,fp
10015820:	dfc00117 	ldw	ra,4(sp)
10015824:	df000017 	ldw	fp,0(sp)
10015828:	dec00204 	addi	sp,sp,8
1001582c:	f800283a 	ret

10015830 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10015830:	defffa04 	addi	sp,sp,-24
10015834:	df000515 	stw	fp,20(sp)
10015838:	df000504 	addi	fp,sp,20
1001583c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10015840:	0005303a 	rdctl	r2,status
10015844:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10015848:	e0fffc17 	ldw	r3,-16(fp)
1001584c:	00bfff84 	movi	r2,-2
10015850:	1884703a 	and	r2,r3,r2
10015854:	1001703a 	wrctl	status,r2
  
  return context;
10015858:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1001585c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10015860:	e0bfff17 	ldw	r2,-4(fp)
10015864:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10015868:	e0bffd17 	ldw	r2,-12(fp)
1001586c:	10800017 	ldw	r2,0(r2)
10015870:	e0fffd17 	ldw	r3,-12(fp)
10015874:	18c00117 	ldw	r3,4(r3)
10015878:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1001587c:	e0bffd17 	ldw	r2,-12(fp)
10015880:	10800117 	ldw	r2,4(r2)
10015884:	e0fffd17 	ldw	r3,-12(fp)
10015888:	18c00017 	ldw	r3,0(r3)
1001588c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10015890:	e0bffd17 	ldw	r2,-12(fp)
10015894:	e0fffd17 	ldw	r3,-12(fp)
10015898:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1001589c:	e0bffd17 	ldw	r2,-12(fp)
100158a0:	e0fffd17 	ldw	r3,-12(fp)
100158a4:	10c00015 	stw	r3,0(r2)
100158a8:	e0bffb17 	ldw	r2,-20(fp)
100158ac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100158b0:	e0bffe17 	ldw	r2,-8(fp)
100158b4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
100158b8:	0001883a 	nop
100158bc:	e037883a 	mov	sp,fp
100158c0:	df000017 	ldw	fp,0(sp)
100158c4:	dec00104 	addi	sp,sp,4
100158c8:	f800283a 	ret

100158cc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
100158cc:	defffb04 	addi	sp,sp,-20
100158d0:	dfc00415 	stw	ra,16(sp)
100158d4:	df000315 	stw	fp,12(sp)
100158d8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
100158dc:	d0a00e17 	ldw	r2,-32712(gp)
100158e0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
100158e4:	d09b3717 	ldw	r2,27868(gp)
100158e8:	10800044 	addi	r2,r2,1
100158ec:	d09b3715 	stw	r2,27868(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100158f0:	00002e06 	br	100159ac <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
100158f4:	e0bffd17 	ldw	r2,-12(fp)
100158f8:	10800017 	ldw	r2,0(r2)
100158fc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10015900:	e0bffd17 	ldw	r2,-12(fp)
10015904:	10800403 	ldbu	r2,16(r2)
10015908:	10803fcc 	andi	r2,r2,255
1001590c:	10000426 	beq	r2,zero,10015920 <alt_tick+0x54>
10015910:	d09b3717 	ldw	r2,27868(gp)
10015914:	1000021e 	bne	r2,zero,10015920 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10015918:	e0bffd17 	ldw	r2,-12(fp)
1001591c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10015920:	e0bffd17 	ldw	r2,-12(fp)
10015924:	10800217 	ldw	r2,8(r2)
10015928:	d0db3717 	ldw	r3,27868(gp)
1001592c:	18801d36 	bltu	r3,r2,100159a4 <alt_tick+0xd8>
10015930:	e0bffd17 	ldw	r2,-12(fp)
10015934:	10800403 	ldbu	r2,16(r2)
10015938:	10803fcc 	andi	r2,r2,255
1001593c:	1000191e 	bne	r2,zero,100159a4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10015940:	e0bffd17 	ldw	r2,-12(fp)
10015944:	10800317 	ldw	r2,12(r2)
10015948:	e0fffd17 	ldw	r3,-12(fp)
1001594c:	18c00517 	ldw	r3,20(r3)
10015950:	1809883a 	mov	r4,r3
10015954:	103ee83a 	callr	r2
10015958:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1001595c:	e0bfff17 	ldw	r2,-4(fp)
10015960:	1000031e 	bne	r2,zero,10015970 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10015964:	e13ffd17 	ldw	r4,-12(fp)
10015968:	00158300 	call	10015830 <alt_alarm_stop>
1001596c:	00000d06 	br	100159a4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10015970:	e0bffd17 	ldw	r2,-12(fp)
10015974:	10c00217 	ldw	r3,8(r2)
10015978:	e0bfff17 	ldw	r2,-4(fp)
1001597c:	1887883a 	add	r3,r3,r2
10015980:	e0bffd17 	ldw	r2,-12(fp)
10015984:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10015988:	e0bffd17 	ldw	r2,-12(fp)
1001598c:	10c00217 	ldw	r3,8(r2)
10015990:	d09b3717 	ldw	r2,27868(gp)
10015994:	1880032e 	bgeu	r3,r2,100159a4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10015998:	e0bffd17 	ldw	r2,-12(fp)
1001599c:	00c00044 	movi	r3,1
100159a0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
100159a4:	e0bffe17 	ldw	r2,-8(fp)
100159a8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100159ac:	e0fffd17 	ldw	r3,-12(fp)
100159b0:	d0a00e04 	addi	r2,gp,-32712
100159b4:	18bfcf1e 	bne	r3,r2,100158f4 <__alt_data_end+0xf80158f4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
100159b8:	0001883a 	nop
}
100159bc:	0001883a 	nop
100159c0:	e037883a 	mov	sp,fp
100159c4:	dfc00117 	ldw	ra,4(sp)
100159c8:	df000017 	ldw	fp,0(sp)
100159cc:	dec00204 	addi	sp,sp,8
100159d0:	f800283a 	ret

100159d4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
100159d4:	deffff04 	addi	sp,sp,-4
100159d8:	df000015 	stw	fp,0(sp)
100159dc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
100159e0:	000170fa 	wrctl	ienable,zero
}
100159e4:	0001883a 	nop
100159e8:	e037883a 	mov	sp,fp
100159ec:	df000017 	ldw	fp,0(sp)
100159f0:	dec00104 	addi	sp,sp,4
100159f4:	f800283a 	ret

100159f8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
100159f8:	defffa04 	addi	sp,sp,-24
100159fc:	dfc00515 	stw	ra,20(sp)
10015a00:	df000415 	stw	fp,16(sp)
10015a04:	df000404 	addi	fp,sp,16
10015a08:	e13ffe15 	stw	r4,-8(fp)
10015a0c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10015a10:	e0bfff17 	ldw	r2,-4(fp)
10015a14:	10800017 	ldw	r2,0(r2)
10015a18:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10015a1c:	e13ffe17 	ldw	r4,-8(fp)
10015a20:	0006c400 	call	10006c40 <strlen>
10015a24:	10800044 	addi	r2,r2,1
10015a28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10015a2c:	00000d06 	br	10015a64 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10015a30:	e0bffc17 	ldw	r2,-16(fp)
10015a34:	10800217 	ldw	r2,8(r2)
10015a38:	e0fffd17 	ldw	r3,-12(fp)
10015a3c:	180d883a 	mov	r6,r3
10015a40:	e17ffe17 	ldw	r5,-8(fp)
10015a44:	1009883a 	mov	r4,r2
10015a48:	0015d3c0 	call	10015d3c <memcmp>
10015a4c:	1000021e 	bne	r2,zero,10015a58 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10015a50:	e0bffc17 	ldw	r2,-16(fp)
10015a54:	00000706 	br	10015a74 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10015a58:	e0bffc17 	ldw	r2,-16(fp)
10015a5c:	10800017 	ldw	r2,0(r2)
10015a60:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10015a64:	e0fffc17 	ldw	r3,-16(fp)
10015a68:	e0bfff17 	ldw	r2,-4(fp)
10015a6c:	18bff01e 	bne	r3,r2,10015a30 <__alt_data_end+0xf8015a30>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10015a70:	0005883a 	mov	r2,zero
}
10015a74:	e037883a 	mov	sp,fp
10015a78:	dfc00117 	ldw	ra,4(sp)
10015a7c:	df000017 	ldw	fp,0(sp)
10015a80:	dec00204 	addi	sp,sp,8
10015a84:	f800283a 	ret

10015a88 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10015a88:	defffb04 	addi	sp,sp,-20
10015a8c:	dfc00415 	stw	ra,16(sp)
10015a90:	df000315 	stw	fp,12(sp)
10015a94:	df000304 	addi	fp,sp,12
10015a98:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10015a9c:	d0a00617 	ldw	r2,-32744(gp)
10015aa0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10015aa4:	00003106 	br	10015b6c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10015aa8:	e0bffd17 	ldw	r2,-12(fp)
10015aac:	10800217 	ldw	r2,8(r2)
10015ab0:	1009883a 	mov	r4,r2
10015ab4:	0006c400 	call	10006c40 <strlen>
10015ab8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10015abc:	e0bffd17 	ldw	r2,-12(fp)
10015ac0:	10c00217 	ldw	r3,8(r2)
10015ac4:	e0bffe17 	ldw	r2,-8(fp)
10015ac8:	10bfffc4 	addi	r2,r2,-1
10015acc:	1885883a 	add	r2,r3,r2
10015ad0:	10800003 	ldbu	r2,0(r2)
10015ad4:	10803fcc 	andi	r2,r2,255
10015ad8:	1080201c 	xori	r2,r2,128
10015adc:	10bfe004 	addi	r2,r2,-128
10015ae0:	10800bd8 	cmpnei	r2,r2,47
10015ae4:	1000031e 	bne	r2,zero,10015af4 <alt_find_file+0x6c>
    {
      len -= 1;
10015ae8:	e0bffe17 	ldw	r2,-8(fp)
10015aec:	10bfffc4 	addi	r2,r2,-1
10015af0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10015af4:	e0bffe17 	ldw	r2,-8(fp)
10015af8:	e0ffff17 	ldw	r3,-4(fp)
10015afc:	1885883a 	add	r2,r3,r2
10015b00:	10800003 	ldbu	r2,0(r2)
10015b04:	10803fcc 	andi	r2,r2,255
10015b08:	1080201c 	xori	r2,r2,128
10015b0c:	10bfe004 	addi	r2,r2,-128
10015b10:	10800be0 	cmpeqi	r2,r2,47
10015b14:	1000081e 	bne	r2,zero,10015b38 <alt_find_file+0xb0>
10015b18:	e0bffe17 	ldw	r2,-8(fp)
10015b1c:	e0ffff17 	ldw	r3,-4(fp)
10015b20:	1885883a 	add	r2,r3,r2
10015b24:	10800003 	ldbu	r2,0(r2)
10015b28:	10803fcc 	andi	r2,r2,255
10015b2c:	1080201c 	xori	r2,r2,128
10015b30:	10bfe004 	addi	r2,r2,-128
10015b34:	10000a1e 	bne	r2,zero,10015b60 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10015b38:	e0bffd17 	ldw	r2,-12(fp)
10015b3c:	10800217 	ldw	r2,8(r2)
10015b40:	e0fffe17 	ldw	r3,-8(fp)
10015b44:	180d883a 	mov	r6,r3
10015b48:	e17fff17 	ldw	r5,-4(fp)
10015b4c:	1009883a 	mov	r4,r2
10015b50:	0015d3c0 	call	10015d3c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10015b54:	1000021e 	bne	r2,zero,10015b60 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10015b58:	e0bffd17 	ldw	r2,-12(fp)
10015b5c:	00000706 	br	10015b7c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10015b60:	e0bffd17 	ldw	r2,-12(fp)
10015b64:	10800017 	ldw	r2,0(r2)
10015b68:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10015b6c:	e0fffd17 	ldw	r3,-12(fp)
10015b70:	d0a00604 	addi	r2,gp,-32744
10015b74:	18bfcc1e 	bne	r3,r2,10015aa8 <__alt_data_end+0xf8015aa8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10015b78:	0005883a 	mov	r2,zero
}
10015b7c:	e037883a 	mov	sp,fp
10015b80:	dfc00117 	ldw	ra,4(sp)
10015b84:	df000017 	ldw	fp,0(sp)
10015b88:	dec00204 	addi	sp,sp,8
10015b8c:	f800283a 	ret

10015b90 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10015b90:	defffa04 	addi	sp,sp,-24
10015b94:	dfc00515 	stw	ra,20(sp)
10015b98:	df000415 	stw	fp,16(sp)
10015b9c:	dc000315 	stw	r16,12(sp)
10015ba0:	df000404 	addi	fp,sp,16
10015ba4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10015ba8:	00bffa04 	movi	r2,-24
10015bac:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10015bb0:	e03ffc15 	stw	zero,-16(fp)
10015bb4:	00001d06 	br	10015c2c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
10015bb8:	040400b4 	movhi	r16,4098
10015bbc:	84117a04 	addi	r16,r16,17896
10015bc0:	e0bffc17 	ldw	r2,-16(fp)
10015bc4:	01400304 	movi	r5,12
10015bc8:	1009883a 	mov	r4,r2
10015bcc:	0006ad80 	call	10006ad8 <__mulsi3>
10015bd0:	8085883a 	add	r2,r16,r2
10015bd4:	10800017 	ldw	r2,0(r2)
10015bd8:	1000111e 	bne	r2,zero,10015c20 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
10015bdc:	040400b4 	movhi	r16,4098
10015be0:	84117a04 	addi	r16,r16,17896
10015be4:	e0bffc17 	ldw	r2,-16(fp)
10015be8:	01400304 	movi	r5,12
10015bec:	1009883a 	mov	r4,r2
10015bf0:	0006ad80 	call	10006ad8 <__mulsi3>
10015bf4:	8085883a 	add	r2,r16,r2
10015bf8:	e0fffe17 	ldw	r3,-8(fp)
10015bfc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10015c00:	d0e00a17 	ldw	r3,-32728(gp)
10015c04:	e0bffc17 	ldw	r2,-16(fp)
10015c08:	1880020e 	bge	r3,r2,10015c14 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
10015c0c:	e0bffc17 	ldw	r2,-16(fp)
10015c10:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
10015c14:	e0bffc17 	ldw	r2,-16(fp)
10015c18:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10015c1c:	00000606 	br	10015c38 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10015c20:	e0bffc17 	ldw	r2,-16(fp)
10015c24:	10800044 	addi	r2,r2,1
10015c28:	e0bffc15 	stw	r2,-16(fp)
10015c2c:	e0bffc17 	ldw	r2,-16(fp)
10015c30:	10800810 	cmplti	r2,r2,32
10015c34:	103fe01e 	bne	r2,zero,10015bb8 <__alt_data_end+0xf8015bb8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10015c38:	e0bffd17 	ldw	r2,-12(fp)
}
10015c3c:	e6ffff04 	addi	sp,fp,-4
10015c40:	dfc00217 	ldw	ra,8(sp)
10015c44:	df000117 	ldw	fp,4(sp)
10015c48:	dc000017 	ldw	r16,0(sp)
10015c4c:	dec00304 	addi	sp,sp,12
10015c50:	f800283a 	ret

10015c54 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10015c54:	defffe04 	addi	sp,sp,-8
10015c58:	df000115 	stw	fp,4(sp)
10015c5c:	df000104 	addi	fp,sp,4
10015c60:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10015c64:	e0bfff17 	ldw	r2,-4(fp)
10015c68:	10bffe84 	addi	r2,r2,-6
10015c6c:	10c00428 	cmpgeui	r3,r2,16
10015c70:	18001a1e 	bne	r3,zero,10015cdc <alt_exception_cause_generated_bad_addr+0x88>
10015c74:	100690ba 	slli	r3,r2,2
10015c78:	00840074 	movhi	r2,4097
10015c7c:	10972304 	addi	r2,r2,23692
10015c80:	1885883a 	add	r2,r3,r2
10015c84:	10800017 	ldw	r2,0(r2)
10015c88:	1000683a 	jmp	r2
10015c8c:	10015ccc 	andi	zero,r2,1395
10015c90:	10015ccc 	andi	zero,r2,1395
10015c94:	10015cdc 	xori	zero,r2,1395
10015c98:	10015cdc 	xori	zero,r2,1395
10015c9c:	10015cdc 	xori	zero,r2,1395
10015ca0:	10015ccc 	andi	zero,r2,1395
10015ca4:	10015cd4 	ori	zero,r2,1395
10015ca8:	10015cdc 	xori	zero,r2,1395
10015cac:	10015ccc 	andi	zero,r2,1395
10015cb0:	10015ccc 	andi	zero,r2,1395
10015cb4:	10015cdc 	xori	zero,r2,1395
10015cb8:	10015ccc 	andi	zero,r2,1395
10015cbc:	10015cd4 	ori	zero,r2,1395
10015cc0:	10015cdc 	xori	zero,r2,1395
10015cc4:	10015cdc 	xori	zero,r2,1395
10015cc8:	10015ccc 	andi	zero,r2,1395
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10015ccc:	00800044 	movi	r2,1
10015cd0:	00000306 	br	10015ce0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10015cd4:	0005883a 	mov	r2,zero
10015cd8:	00000106 	br	10015ce0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10015cdc:	0005883a 	mov	r2,zero
  }
}
10015ce0:	e037883a 	mov	sp,fp
10015ce4:	df000017 	ldw	fp,0(sp)
10015ce8:	dec00104 	addi	sp,sp,4
10015cec:	f800283a 	ret

10015cf0 <atexit>:
10015cf0:	200b883a 	mov	r5,r4
10015cf4:	000f883a 	mov	r7,zero
10015cf8:	000d883a 	mov	r6,zero
10015cfc:	0009883a 	mov	r4,zero
10015d00:	0015db81 	jmpi	10015db8 <__register_exitproc>

10015d04 <exit>:
10015d04:	defffe04 	addi	sp,sp,-8
10015d08:	000b883a 	mov	r5,zero
10015d0c:	dc000015 	stw	r16,0(sp)
10015d10:	dfc00115 	stw	ra,4(sp)
10015d14:	2021883a 	mov	r16,r4
10015d18:	0015ed00 	call	10015ed0 <__call_exitprocs>
10015d1c:	008400b4 	movhi	r2,4098
10015d20:	1095f204 	addi	r2,r2,22472
10015d24:	11000017 	ldw	r4,0(r2)
10015d28:	20800f17 	ldw	r2,60(r4)
10015d2c:	10000126 	beq	r2,zero,10015d34 <exit+0x30>
10015d30:	103ee83a 	callr	r2
10015d34:	8009883a 	mov	r4,r16
10015d38:	00160500 	call	10016050 <_exit>

10015d3c <memcmp>:
10015d3c:	01c000c4 	movi	r7,3
10015d40:	3980192e 	bgeu	r7,r6,10015da8 <memcmp+0x6c>
10015d44:	2144b03a 	or	r2,r4,r5
10015d48:	11c4703a 	and	r2,r2,r7
10015d4c:	10000f26 	beq	r2,zero,10015d8c <memcmp+0x50>
10015d50:	20800003 	ldbu	r2,0(r4)
10015d54:	28c00003 	ldbu	r3,0(r5)
10015d58:	10c0151e 	bne	r2,r3,10015db0 <memcmp+0x74>
10015d5c:	31bfff84 	addi	r6,r6,-2
10015d60:	01ffffc4 	movi	r7,-1
10015d64:	00000406 	br	10015d78 <memcmp+0x3c>
10015d68:	20800003 	ldbu	r2,0(r4)
10015d6c:	28c00003 	ldbu	r3,0(r5)
10015d70:	31bfffc4 	addi	r6,r6,-1
10015d74:	10c00e1e 	bne	r2,r3,10015db0 <memcmp+0x74>
10015d78:	21000044 	addi	r4,r4,1
10015d7c:	29400044 	addi	r5,r5,1
10015d80:	31fff91e 	bne	r6,r7,10015d68 <__alt_data_end+0xf8015d68>
10015d84:	0005883a 	mov	r2,zero
10015d88:	f800283a 	ret
10015d8c:	20c00017 	ldw	r3,0(r4)
10015d90:	28800017 	ldw	r2,0(r5)
10015d94:	18bfee1e 	bne	r3,r2,10015d50 <__alt_data_end+0xf8015d50>
10015d98:	31bfff04 	addi	r6,r6,-4
10015d9c:	21000104 	addi	r4,r4,4
10015da0:	29400104 	addi	r5,r5,4
10015da4:	39bff936 	bltu	r7,r6,10015d8c <__alt_data_end+0xf8015d8c>
10015da8:	303fe91e 	bne	r6,zero,10015d50 <__alt_data_end+0xf8015d50>
10015dac:	003ff506 	br	10015d84 <__alt_data_end+0xf8015d84>
10015db0:	10c5c83a 	sub	r2,r2,r3
10015db4:	f800283a 	ret

10015db8 <__register_exitproc>:
10015db8:	defffa04 	addi	sp,sp,-24
10015dbc:	dc000315 	stw	r16,12(sp)
10015dc0:	040400b4 	movhi	r16,4098
10015dc4:	8415f204 	addi	r16,r16,22472
10015dc8:	80c00017 	ldw	r3,0(r16)
10015dcc:	dc400415 	stw	r17,16(sp)
10015dd0:	dfc00515 	stw	ra,20(sp)
10015dd4:	18805217 	ldw	r2,328(r3)
10015dd8:	2023883a 	mov	r17,r4
10015ddc:	10003726 	beq	r2,zero,10015ebc <__register_exitproc+0x104>
10015de0:	10c00117 	ldw	r3,4(r2)
10015de4:	010007c4 	movi	r4,31
10015de8:	20c00e16 	blt	r4,r3,10015e24 <__register_exitproc+0x6c>
10015dec:	1a000044 	addi	r8,r3,1
10015df0:	8800221e 	bne	r17,zero,10015e7c <__register_exitproc+0xc4>
10015df4:	18c00084 	addi	r3,r3,2
10015df8:	18c7883a 	add	r3,r3,r3
10015dfc:	18c7883a 	add	r3,r3,r3
10015e00:	12000115 	stw	r8,4(r2)
10015e04:	10c7883a 	add	r3,r2,r3
10015e08:	19400015 	stw	r5,0(r3)
10015e0c:	0005883a 	mov	r2,zero
10015e10:	dfc00517 	ldw	ra,20(sp)
10015e14:	dc400417 	ldw	r17,16(sp)
10015e18:	dc000317 	ldw	r16,12(sp)
10015e1c:	dec00604 	addi	sp,sp,24
10015e20:	f800283a 	ret
10015e24:	00800034 	movhi	r2,0
10015e28:	10800004 	addi	r2,r2,0
10015e2c:	10002626 	beq	r2,zero,10015ec8 <__register_exitproc+0x110>
10015e30:	01006404 	movi	r4,400
10015e34:	d9400015 	stw	r5,0(sp)
10015e38:	d9800115 	stw	r6,4(sp)
10015e3c:	d9c00215 	stw	r7,8(sp)
10015e40:	00000000 	call	10000000 <__alt_mem_sdram>
10015e44:	d9400017 	ldw	r5,0(sp)
10015e48:	d9800117 	ldw	r6,4(sp)
10015e4c:	d9c00217 	ldw	r7,8(sp)
10015e50:	10001d26 	beq	r2,zero,10015ec8 <__register_exitproc+0x110>
10015e54:	81000017 	ldw	r4,0(r16)
10015e58:	10000115 	stw	zero,4(r2)
10015e5c:	02000044 	movi	r8,1
10015e60:	22405217 	ldw	r9,328(r4)
10015e64:	0007883a 	mov	r3,zero
10015e68:	12400015 	stw	r9,0(r2)
10015e6c:	20805215 	stw	r2,328(r4)
10015e70:	10006215 	stw	zero,392(r2)
10015e74:	10006315 	stw	zero,396(r2)
10015e78:	883fde26 	beq	r17,zero,10015df4 <__alt_data_end+0xf8015df4>
10015e7c:	18c9883a 	add	r4,r3,r3
10015e80:	2109883a 	add	r4,r4,r4
10015e84:	1109883a 	add	r4,r2,r4
10015e88:	21802215 	stw	r6,136(r4)
10015e8c:	01800044 	movi	r6,1
10015e90:	12406217 	ldw	r9,392(r2)
10015e94:	30cc983a 	sll	r6,r6,r3
10015e98:	4992b03a 	or	r9,r9,r6
10015e9c:	12406215 	stw	r9,392(r2)
10015ea0:	21c04215 	stw	r7,264(r4)
10015ea4:	01000084 	movi	r4,2
10015ea8:	893fd21e 	bne	r17,r4,10015df4 <__alt_data_end+0xf8015df4>
10015eac:	11006317 	ldw	r4,396(r2)
10015eb0:	218cb03a 	or	r6,r4,r6
10015eb4:	11806315 	stw	r6,396(r2)
10015eb8:	003fce06 	br	10015df4 <__alt_data_end+0xf8015df4>
10015ebc:	18805304 	addi	r2,r3,332
10015ec0:	18805215 	stw	r2,328(r3)
10015ec4:	003fc606 	br	10015de0 <__alt_data_end+0xf8015de0>
10015ec8:	00bfffc4 	movi	r2,-1
10015ecc:	003fd006 	br	10015e10 <__alt_data_end+0xf8015e10>

10015ed0 <__call_exitprocs>:
10015ed0:	defff504 	addi	sp,sp,-44
10015ed4:	df000915 	stw	fp,36(sp)
10015ed8:	dd400615 	stw	r21,24(sp)
10015edc:	dc800315 	stw	r18,12(sp)
10015ee0:	dfc00a15 	stw	ra,40(sp)
10015ee4:	ddc00815 	stw	r23,32(sp)
10015ee8:	dd800715 	stw	r22,28(sp)
10015eec:	dd000515 	stw	r20,20(sp)
10015ef0:	dcc00415 	stw	r19,16(sp)
10015ef4:	dc400215 	stw	r17,8(sp)
10015ef8:	dc000115 	stw	r16,4(sp)
10015efc:	d9000015 	stw	r4,0(sp)
10015f00:	2839883a 	mov	fp,r5
10015f04:	04800044 	movi	r18,1
10015f08:	057fffc4 	movi	r21,-1
10015f0c:	008400b4 	movhi	r2,4098
10015f10:	1095f204 	addi	r2,r2,22472
10015f14:	12000017 	ldw	r8,0(r2)
10015f18:	45005217 	ldw	r20,328(r8)
10015f1c:	44c05204 	addi	r19,r8,328
10015f20:	a0001c26 	beq	r20,zero,10015f94 <__call_exitprocs+0xc4>
10015f24:	a0800117 	ldw	r2,4(r20)
10015f28:	15ffffc4 	addi	r23,r2,-1
10015f2c:	b8000d16 	blt	r23,zero,10015f64 <__call_exitprocs+0x94>
10015f30:	14000044 	addi	r16,r2,1
10015f34:	8421883a 	add	r16,r16,r16
10015f38:	8421883a 	add	r16,r16,r16
10015f3c:	84402004 	addi	r17,r16,128
10015f40:	a463883a 	add	r17,r20,r17
10015f44:	a421883a 	add	r16,r20,r16
10015f48:	e0001e26 	beq	fp,zero,10015fc4 <__call_exitprocs+0xf4>
10015f4c:	80804017 	ldw	r2,256(r16)
10015f50:	e0801c26 	beq	fp,r2,10015fc4 <__call_exitprocs+0xf4>
10015f54:	bdffffc4 	addi	r23,r23,-1
10015f58:	843fff04 	addi	r16,r16,-4
10015f5c:	8c7fff04 	addi	r17,r17,-4
10015f60:	bd7ff91e 	bne	r23,r21,10015f48 <__alt_data_end+0xf8015f48>
10015f64:	00800034 	movhi	r2,0
10015f68:	10800004 	addi	r2,r2,0
10015f6c:	10000926 	beq	r2,zero,10015f94 <__call_exitprocs+0xc4>
10015f70:	a0800117 	ldw	r2,4(r20)
10015f74:	1000301e 	bne	r2,zero,10016038 <__call_exitprocs+0x168>
10015f78:	a0800017 	ldw	r2,0(r20)
10015f7c:	10003226 	beq	r2,zero,10016048 <__call_exitprocs+0x178>
10015f80:	a009883a 	mov	r4,r20
10015f84:	98800015 	stw	r2,0(r19)
10015f88:	00000000 	call	10000000 <__alt_mem_sdram>
10015f8c:	9d000017 	ldw	r20,0(r19)
10015f90:	a03fe41e 	bne	r20,zero,10015f24 <__alt_data_end+0xf8015f24>
10015f94:	dfc00a17 	ldw	ra,40(sp)
10015f98:	df000917 	ldw	fp,36(sp)
10015f9c:	ddc00817 	ldw	r23,32(sp)
10015fa0:	dd800717 	ldw	r22,28(sp)
10015fa4:	dd400617 	ldw	r21,24(sp)
10015fa8:	dd000517 	ldw	r20,20(sp)
10015fac:	dcc00417 	ldw	r19,16(sp)
10015fb0:	dc800317 	ldw	r18,12(sp)
10015fb4:	dc400217 	ldw	r17,8(sp)
10015fb8:	dc000117 	ldw	r16,4(sp)
10015fbc:	dec00b04 	addi	sp,sp,44
10015fc0:	f800283a 	ret
10015fc4:	a0800117 	ldw	r2,4(r20)
10015fc8:	80c00017 	ldw	r3,0(r16)
10015fcc:	10bfffc4 	addi	r2,r2,-1
10015fd0:	15c01426 	beq	r2,r23,10016024 <__call_exitprocs+0x154>
10015fd4:	80000015 	stw	zero,0(r16)
10015fd8:	183fde26 	beq	r3,zero,10015f54 <__alt_data_end+0xf8015f54>
10015fdc:	95c8983a 	sll	r4,r18,r23
10015fe0:	a0806217 	ldw	r2,392(r20)
10015fe4:	a5800117 	ldw	r22,4(r20)
10015fe8:	2084703a 	and	r2,r4,r2
10015fec:	10000b26 	beq	r2,zero,1001601c <__call_exitprocs+0x14c>
10015ff0:	a0806317 	ldw	r2,396(r20)
10015ff4:	2088703a 	and	r4,r4,r2
10015ff8:	20000c1e 	bne	r4,zero,1001602c <__call_exitprocs+0x15c>
10015ffc:	89400017 	ldw	r5,0(r17)
10016000:	d9000017 	ldw	r4,0(sp)
10016004:	183ee83a 	callr	r3
10016008:	a0800117 	ldw	r2,4(r20)
1001600c:	15bfbf1e 	bne	r2,r22,10015f0c <__alt_data_end+0xf8015f0c>
10016010:	98800017 	ldw	r2,0(r19)
10016014:	153fcf26 	beq	r2,r20,10015f54 <__alt_data_end+0xf8015f54>
10016018:	003fbc06 	br	10015f0c <__alt_data_end+0xf8015f0c>
1001601c:	183ee83a 	callr	r3
10016020:	003ff906 	br	10016008 <__alt_data_end+0xf8016008>
10016024:	a5c00115 	stw	r23,4(r20)
10016028:	003feb06 	br	10015fd8 <__alt_data_end+0xf8015fd8>
1001602c:	89000017 	ldw	r4,0(r17)
10016030:	183ee83a 	callr	r3
10016034:	003ff406 	br	10016008 <__alt_data_end+0xf8016008>
10016038:	a0800017 	ldw	r2,0(r20)
1001603c:	a027883a 	mov	r19,r20
10016040:	1029883a 	mov	r20,r2
10016044:	003fb606 	br	10015f20 <__alt_data_end+0xf8015f20>
10016048:	0005883a 	mov	r2,zero
1001604c:	003ffb06 	br	1001603c <__alt_data_end+0xf801603c>

10016050 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10016050:	defffd04 	addi	sp,sp,-12
10016054:	df000215 	stw	fp,8(sp)
10016058:	df000204 	addi	fp,sp,8
1001605c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10016060:	0001883a 	nop
10016064:	e0bfff17 	ldw	r2,-4(fp)
10016068:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1001606c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10016070:	10000226 	beq	r2,zero,1001607c <_exit+0x2c>
    ALT_SIM_FAIL();
10016074:	002af070 	cmpltui	zero,zero,43969
10016078:	00000106 	br	10016080 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
1001607c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10016080:	003fff06 	br	10016080 <__alt_data_end+0xf8016080>
