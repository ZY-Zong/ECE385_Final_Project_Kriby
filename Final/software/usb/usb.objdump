
usb.elf:     file format elf32-littlenios2
usb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00016a1c memsz 0x00016a1c flags r-x
    LOAD off    0x00017a3c vaddr 0x10016a3c paddr 0x10025680 align 2**12
         filesz 0x0000ec44 memsz 0x0000ec44 flags rw-
    LOAD off    0x000272c4 vaddr 0x100342c4 paddr 0x100342c4 align 2**12
         filesz 0x00000000 memsz 0x00000188 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00015d38  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000ad4  10015f68  10015f68  00016f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000ec44  10016a3c  10025680  00017a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000188  100342c4  100342c4  000272c4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000000e0  000000e0  00026680  2**0
                  CONTENTS
  7 .sdram        00000000  1003444c  1003444c  00026680  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00026680  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fd8  00000000  00000000  000266a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00024fe1  00000000  00000000  00027680  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000969c  00000000  00000000  0004c661  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c2ab  00000000  00000000  00055cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002ab4  00000000  00000000  00061fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000040fb  00000000  00000000  00064a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001786c  00000000  00000000  00068b57  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000803c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018d0  00000000  00000000  00080408  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0008584a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0008584d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00085859  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0008585a  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0008585b  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0008585f  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00085863  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00085867  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00085872  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0008587d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  00085888  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000037  00000000  00000000  00085899  2**0
                  CONTENTS, READONLY
 30 .jdi          00005b3a  00000000  00000000  000858d0  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0007dafc  00000000  00000000  0008b40a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10015f68 l    d  .rodata	00000000 .rodata
10016a3c l    d  .rwdata	00000000 .rwdata
100342c4 l    d  .bss	00000000 .bss
000000e0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
1003444c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 enemy.c
100342c4 l     O .bss	00000004 ADDRESS_PTR
10016a3c l     O .rwdata	00000040 image_indicator
10016a7c l     O .rwdata	0000686c Wall1
00000000 l    df *ABS*	00000000 game_logic.c
100342c8 l     O .bss	00000004 ADDRESS_PTR
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 kirby.c
100342cc l     O .bss	00000004 ADDRESS_PTR
1001d2e8 l     O .rwdata	00000040 image_indicator
1001d328 l     O .rwdata	0000686c Wall1
00000000 l    df *ABS*	00000000 main.c
100342d0 l     O .bss	00000004 ADDRESS_PTR
00000000 l    df *ABS*	00000000 star.c
100342d4 l     O .bss	00000004 ADDRESS_PTR
00000000 l    df *ABS*	00000000 test.c
100342d8 l     O .bss	00000004 ADDRESS_PTR
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 usb_main.c
100342dc l     O .bss	00000002 intStat
100342de l     O .bss	00000002 usb_ctl_val
100342e0 l     O .bss	00000002 ctl_reg
100342e2 l     O .bss	00000002 no_device
100342e4 l     O .bss	00000002 fs_device
100342e6 l     O .bss	00000001 toggle
100342e7 l     O .bss	00000001 data_size
100342e8 l     O .bss	00000001 hot_plug_count
100342ea l     O .bss	00000002 code
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10016782 l     O .rodata	00000010 zeroes.4404
10008eb4 l     F .text	000000bc __sbprintf
10016792 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
100090c4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1000ac1c l     F .text	00000008 __fp_unlock
1000ac30 l     F .text	0000019c __sinit.part.1
1000adcc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10023b94 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10023fd8 l     O .rwdata	00000020 lc_ctype_charset
10023fb8 l     O .rwdata	00000020 lc_message_charset
10023ff8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
100167c4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000e2a0 l     F .text	000000fc __sprint_r.part.0
100168e8 l     O .rodata	00000010 zeroes.4349
1000f8dc l     F .text	000000bc __sbprintf
100168f8 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
10013748 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1001385c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10013888 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1001397c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10013a64 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10013b50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10013d2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10025670 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
10013fd0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1001410c l     F .text	00000034 alt_dev_reg
100245e0 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
100143e8 l     F .text	0000020c altera_avalon_jtag_uart_irq
100145f4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10014ed0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10015330 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10015490 l     F .text	0000003c alt_get_errno
100154cc l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10034320 g     O .bss	00000004 alt_instruction_exception_handler
1000d8e4 g     F .text	00000074 _mprec_log10
1000d9d0 g     F .text	0000008c __any_on
1000fe90 g     F .text	00000054 _isatty_r
100167d0 g     O .rodata	00000028 __mprec_tinytens
10013c68 g     F .text	0000007c alt_main
10006a50 g     F .text	000000c0 _puts_r
10003d54 g     F .text	00000088 kirby_Is_Damaged
1003434c g     O .bss	00000100 alt_irq
1000fee4 g     F .text	00000060 _lseek_r
10006520 g     F .text	000002e8 get_keycode_value
10025680 g       *ABS*	00000000 __flash_rwdata_start
10012120 g     F .text	00000088 .hidden __eqdf2
1003444c g       *ABS*	00000000 __alt_heap_start
10003254 g     F .text	000000a4 force_It_On_Ground
10006a14 g     F .text	0000003c printf
100100fc g     F .text	0000009c _wcrtomb_r
1000e160 g     F .text	0000005c __sseek
1000af7c g     F .text	00000010 __sinit
1000ffa4 g     F .text	00000140 __swbuf_r
1000ba50 g     F .text	0000007c _setlocale_r
10003a84 g     F .text	00000104 get_Kirby_Right_Pos
1000add4 g     F .text	00000078 __sfmoreglue
10013d08 g     F .text	00000024 __malloc_unlock
10003ed8 g     F .text	000000bc sqr_Dis_Kirby_Enemy
10001058 g     F .text	00000110 get_Enemy_Right_Pos
10005928 g     F .text	00000080 UsbGetRetryCnt
1000c720 g     F .text	0000015c memmove
10001564 g     F .text	00000088 IO_init
10001168 g     F .text	000002ac GameStart
1000af64 g     F .text	00000018 _cleanup
1000c9a4 g     F .text	000000a8 _Balloc
100121a8 g     F .text	000000dc .hidden __gtdf2
100158b8 g     F .text	00000024 altera_nios2_gen2_irq_init
1000387c g     F .text	00000104 get_Kirby_Ceil_Pos
10000000 g     F .entry	0000000c __reset
10003ddc g     F .text	00000078 kirby_Damage_Action
10001524 g     F .text	00000040 draw_Start_Image
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000fe34 g     F .text	0000005c _fstat_r
10034304 g     O .bss	00000004 errno
1000e0dc g     F .text	00000008 __seofread
1003430c g     O .bss	00000004 alt_argv
1002d640 g       *ABS*	00000000 _gp
10013fa0 g     F .text	00000030 usleep
10003700 g     F .text	00000078 will_Touch_Ground
10024460 g     O .rwdata	00000180 alt_fd_list
100158dc g     F .text	00000090 alt_find_dev
1000c5d8 g     F .text	00000148 memcpy
1000ac24 g     F .text	0000000c _cleanup_r
10013560 g     F .text	000000dc .hidden __floatsidf
10015414 g     F .text	0000007c alt_io_redirect
10012284 g     F .text	000000f4 .hidden __ltdf2
10003668 g     F .text	00000044 frame_Time
10015f68 g       *ABS*	00000000 __DTOR_END__
10006b10 g     F .text	00000014 puts
10015b38 g     F .text	0000009c alt_exception_cause_generated_bad_addr
1000dfc0 g     F .text	00000074 __fpclassifyd
1000d840 g     F .text	000000a4 __ratio
1000403c g     F .text	00000188 game_Over_Anime
1000f8c0 g     F .text	0000001c __vfiprintf_internal
100147ec g     F .text	0000021c altera_avalon_jtag_uart_read
100069e4 g     F .text	00000030 _printf_r
000000e0 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10006900 g     F .text	00000064 .hidden __udivsi3
100139b8 g     F .text	000000ac isatty
10016820 g     O .rodata	000000c8 __mprec_tens
100044b0 g     F .text	00000274 update_Star
1000bacc g     F .text	0000000c __locale_charset
10034300 g     O .bss	00000004 __malloc_top_pad
10004fb4 g     F .text	00000268 UsbGetConfigDesc2
10025648 g     O .rwdata	00000004 __mb_cur_max
1000bafc g     F .text	0000000c _localeconv_r
1000cdd8 g     F .text	0000003c __i2b
1000b400 g     F .text	000004c8 __sfvwrite_r
100041c4 g     F .text	00000190 win_Anime
1000e034 g     F .text	00000054 _sbrk_r
10000598 g     F .text	000001b4 set_the_enemy_easy
1000ff44 g     F .text	00000060 _read_r
10025668 g     O .rwdata	00000004 alt_max_fd
1000fb28 g     F .text	000000f0 _fclose_r
10000e3c g     F .text	00000110 get_Enemy_Ceil_Pos
1000abec g     F .text	00000030 fflush
100342fc g     O .bss	00000004 __malloc_max_sbrked_mem
1000074c g     F .text	0000030c set_the_enemy_lightning
10010ea4 g     F .text	000008ac .hidden __adddf3
1000d5e8 g     F .text	0000010c __b2d
100108e0 g     F .text	000005c4 .hidden __umoddi3
10013b8c g     F .text	000000dc lseek
10025640 g     O .rwdata	00000004 _global_impure_ptr
1000da5c g     F .text	00000564 _realloc_r
1003444c g       *ABS*	00000000 __bss_end
10015240 g     F .text	000000f0 alt_iic_isr_register
100157b0 g     F .text	00000108 alt_tick
100102e4 g     F .text	000005fc .hidden __udivdi3
1000fd90 g     F .text	00000024 _fputwc_r
100167f8 g     O .rodata	00000028 __mprec_bigtens
1000cbbc g     F .text	00000104 __s2b
1001363c g     F .text	000000a8 .hidden __floatunsidf
100019c8 g     F .text	0000188c updateKirby
1000d328 g     F .text	00000060 __mcmp
10004a04 g     F .text	00000100 UsbSetAddress
1000af9c g     F .text	00000018 __fp_lock_all
100151f4 g     F .text	0000004c alt_ic_irq_enabled
10015714 g     F .text	0000009c alt_alarm_stop
10034314 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
10024438 g     O .rwdata	00000028 alt_dev_null
10014eb0 g     F .text	00000020 alt_dcache_flush_all
1000ccc0 g     F .text	00000068 __hi0bits
10001668 g     F .text	00000074 IO_read
100134e0 g     F .text	00000080 .hidden __fixdfsi
10025680 g       *ABS*	00000000 __ram_rwdata_end
10025660 g     O .rwdata	00000008 alt_dev_list
1001400c g     F .text	00000100 write
10016a3c g       *ABS*	00000000 __ram_rodata_end
100138c4 g     F .text	000000b8 fstat
10012284 g     F .text	000000f4 .hidden __ledf2
100059a8 g     F .text	00000080 UsbPrintMem
10003778 g     F .text	00000104 get_Kirby_Botton_Pos
1000d0a0 g     F .text	00000140 __pow5mult
1000e3b4 g     F .text	0000150c ___vfiprintf_internal_r
100342f4 g     O .bss	00000004 __nlocale_changed
10006964 g     F .text	00000058 .hidden __umodsi3
1003444c g       *ABS*	00000000 end
10014328 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10015f68 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
100136e4 g     F .text	00000064 .hidden __clzsi2
10014a08 g     F .text	00000224 altera_avalon_jtag_uart_write
1000af8c g     F .text	00000004 __sfp_lock_acquire
1000c4f4 g     F .text	000000e4 memchr
10006bbc g     F .text	000022dc ___vfprintf_internal_r
1000531c g     F .text	00000100 UsbClassRequest
1000b0f0 g     F .text	00000310 _free_r
1000bad8 g     F .text	00000010 __locale_mb_cur_max
10003f94 g     F .text	000000a8 sqr_Dis_Kirby_Door
10015db4 g     F .text	00000180 __call_exitprocs
100342f0 g     O .bss	00000004 __mlocale_changed
1002564c g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
10034318 g     O .bss	00000004 _alt_tick_rate
1000d1e0 g     F .text	00000148 __lshift
1003431c g     O .bss	00000004 _alt_nticks
10013d68 g     F .text	00000104 read
10014178 g     F .text	0000004c alt_sys_init
10001794 g     F .text	00000234 upload_Kirby_Info
10015c9c g     F .text	00000118 __register_exitproc
1000ce14 g     F .text	0000028c __multiply
10014694 g     F .text	00000068 altera_avalon_jtag_uart_close
100069bc g     F .text	00000028 .hidden __mulsi3
10016a3c g       *ABS*	00000000 __ram_rwdata_start
10015f68 g       *ABS*	00000000 __ram_rodata_start
10034324 g     O .bss	00000028 __malloc_current_mallinfo
1000d6f4 g     F .text	0000014c __d2b
10003b88 g     F .text	00000114 get_Wall_Info
10004b04 g     F .text	00000148 UsbGetDeviceDesc1
100141c4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10015a74 g     F .text	000000c4 alt_get_fd
10014d58 g     F .text	00000158 alt_busy_sleep
1000f9f8 g     F .text	00000054 _close_r
10001448 g     F .text	000000dc initial_Registers
1000046c g     F .text	0000012c initial_enemy
10015c20 g     F .text	0000007c memcmp
10014284 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1003444c g       *ABS*	00000000 __alt_stack_base
100142d4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10008f70 g     F .text	00000154 __swsetup_r
10011750 g     F .text	000009d0 .hidden __divdf3
1000ae4c g     F .text	00000118 __sfp
1000d958 g     F .text	00000078 __copybits
10004724 g     F .text	000000d0 star_Meet_Enemy
10024030 g     O .rwdata	00000408 __malloc_av_
1000af98 g     F .text	00000004 __sinit_lock_release
10012378 g     F .text	0000086c .hidden __muldf3
1000e088 g     F .text	00000054 __sread
100058a4 g     F .text	00000084 UsbWaitTDListDone
1001596c g     F .text	00000108 alt_find_file
10014f0c g     F .text	000000a4 alt_dev_llist_insert
10013ce4 g     F .text	00000024 __malloc_lock
10013ef0 g     F .text	000000b0 sbrk
1000ab90 g     F .text	0000005c _fflush_r
1000fa4c g     F .text	000000dc _calloc_r
100342c4 g       *ABS*	00000000 __bss_start
1000c87c g     F .text	00000128 memset
10004354 g     F .text	00000038 main
10034310 g     O .bss	00000004 alt_envp
100342f8 g     O .bss	00000004 __malloc_max_total_mem
10014224 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000026c g     F .text	00000200 AI_enemy
1000521c g     F .text	00000100 UsbSetConfig
100100e4 g     F .text	00000018 __swbuf
10000a58 g     F .text	000001ec upload_enemy_Info
1000e1bc g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000fc18 g     F .text	00000014 fclose
100047f4 g     F .text	000000c0 test_keyboard
100092ec g     F .text	00001688 _dtoa_r
1000bce8 g     F .text	0000080c _malloc_r
10010258 g     F .text	00000030 __ascii_wctomb
1002566c g     O .rwdata	00000004 alt_errno
10001414 g     F .text	00000034 initial_Game_State
1000b8c8 g     F .text	000000c4 _fwalk
10006808 g     F .text	00000084 .hidden __divsi3
1000afcc g     F .text	00000124 _malloc_trim_r
1000541c g     F .text	00000148 UsbGetHidDesc
10015f68 g       *ABS*	00000000 __CTOR_END__
1000e1c4 g     F .text	000000dc strcmp
10015f68 g       *ABS*	00000000 __flash_rodata_start
10015f68 g       *ABS*	00000000 __DTOR_LIST__
1000438c g     F .text	00000054 initial_Star
10003e8c g     F .text	0000004c enemy_Should_Be_Inhaled
10012120 g     F .text	00000088 .hidden __nedf2
1000490c g     F .text	00000044 UsbRead
10014140 g     F .text	00000038 alt_irq_init
10013e6c g     F .text	00000084 alt_release_fd
10016908 g     O .rodata	00000100 .hidden __clz_tab
100342ec g     O .bss	00000004 _PathLocale
100036ac g     F .text	00000054 map_Width
10015bd4 g     F .text	00000014 atexit
1000f998 g     F .text	00000060 _write_r
1000bb08 g     F .text	00000018 setlocale
10025644 g     O .rwdata	00000004 _impure_ptr
10034308 g     O .bss	00000004 alt_argc
1000a974 g     F .text	0000021c __sflush_r
100032f8 g     F .text	00000370 force_It_Inside_Map
10015010 g     F .text	00000060 _do_dtors
1000baf4 g     F .text	00000008 __locale_cjk_lang
10003980 g     F .text	00000104 get_Kirby_Left_Pos
10003cf8 g     F .text	0000005c kirby_Screen_Center_X
10000020 g       .exceptions	00000000 alt_irq_entry
1000d584 g     F .text	00000064 __ulp
1000afb4 g     F .text	00000018 __fp_unlock_all
10025658 g     O .rwdata	00000008 alt_fs_list
10005564 g     F .text	00000340 UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000bb20 g     F .text	0000000c localeconv
10015090 g     F .text	00000050 alt_ic_isr_register
100016dc g     F .text	000000b8 initial_Kirby
10025680 g       *ABS*	00000000 _edata
1003444c g       *ABS*	00000000 _end
100048b4 g     F .text	00000058 UsbWrite
1000fc2c g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
100146fc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10015168 g     F .text	0000008c alt_ic_irq_disable
1000e0e4 g     F .text	0000007c __swrite
10025650 g     O .rwdata	00000004 __malloc_trim_threshold
1000bae8 g     F .text	0000000c __locale_msgcharset
10015be8 g     F .text	00000038 exit
10005a28 g     F .text	00000af8 usb_initialize
1000b98c g     F .text	000000c4 _fwalk_reent
1000d388 g     F .text	000001fc __mdiff
10003e54 g     F .text	00000038 damage_Frame_Number
1000688c g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000f4c g     F .text	0000010c get_Enemy_Left_Pos
10000020 g     F .exceptions	00000000 alt_exception
1000af90 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100015ec g     F .text	0000007c IO_write
10015f34 g     F .text	00000034 _exit
10014c2c g     F .text	0000012c alt_alarm_start
10000d2c g     F .text	00000110 get_Enemy_Botton_Pos
1000bb2c g     F .text	000001bc __smakebuf_r
10000c44 g     F .text	000000e8 upload_enemy_Info_notshow
10006b24 g     F .text	00000098 strlen
100155b8 g     F .text	0000015c open
100121a8 g     F .text	000000dc .hidden __gedf2
10003c9c g     F .text	0000005c kirby_Return_Normal
10025654 g     O .rwdata	00000004 __wctomb
100043e0 g     F .text	00000054 spit_Star
1000e39c g     F .text	00000018 __sprint_r
10015070 g     F .text	00000020 alt_icache_flush_all
10025674 g     O .rwdata	00000004 alt_priority_mask
10004434 g     F .text	0000007c upload_Star_Info
100150e0 g     F .text	00000088 alt_ic_irq_enable
10008e98 g     F .text	0000001c __vfprintf_internal
10010288 g     F .text	0000005c _wctomb_r
10012be4 g     F .text	000008fc .hidden __subdf3
1000cd28 g     F .text	000000b0 __lo0bits
10004e24 g     F .text	00000190 UsbGetConfigDesc1
10025678 g     O .rwdata	00000008 alt_alarm_list
10014fb0 g     F .text	00000060 _do_ctors
10004950 g     F .text	000000b4 UsbSoftReset
10010198 g     F .text	000000c0 wcrtomb
10013784 g     F .text	000000d8 close
10004c4c g     F .text	000001d8 UsbGetDeviceDesc2
10013acc g     F .text	00000084 alt_load
1000fdb4 g     F .text	00000080 fputwc
1000af94 g     F .text	00000004 __sinit_lock_acquire
1000ca74 g     F .text	00000148 __multadd
1000ca4c g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	008400f4 	movhi	r2,4099
10000140:	1090d304 	addi	r2,r2,17228
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	008400f4 	movhi	r2,4099
10000158:	1090d304 	addi	r2,r2,17228
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d09b3817 	ldw	r2,27872(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d09b3817 	ldw	r2,27872(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	068400b4 	movhi	gp,4098
    ori gp, gp, %lo(_gp)
1000023c:	d6b59014 	ori	gp,gp,54848
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	008400f4 	movhi	r2,4099
    ori r2, r2, %lo(__bss_start)
10000244:	1090b114 	ori	r2,r2,17092

    movhi r3, %hi(__bss_end)
10000248:	00c400f4 	movhi	r3,4099
    ori r3, r3, %lo(__bss_end)
1000024c:	18d11314 	ori	r3,r3,17484

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	0013acc0 	call	10013acc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	0013c680 	call	10013c68 <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <AI_enemy>:
#include "image.h"
#include "wall.h"
#include "usb_main.h"


void AI_enemy(Enemy * enemy, Kirby *  kirby, int startx, int starty){
1000026c:	defffa04 	addi	sp,sp,-24
10000270:	dfc00515 	stw	ra,20(sp)
10000274:	df000415 	stw	fp,16(sp)
10000278:	df000404 	addi	fp,sp,16
1000027c:	e13ffc15 	stw	r4,-16(fp)
10000280:	e17ffd15 	stw	r5,-12(fp)
10000284:	e1bffe15 	stw	r6,-8(fp)
10000288:	e1ffff15 	stw	r7,-4(fp)
        if (enemy->enemyrightcount== enemy->dist ){
1000028c:	e0bffc17 	ldw	r2,-16(fp)
10000290:	10c00717 	ldw	r3,28(r2)
10000294:	e0bffc17 	ldw	r2,-16(fp)
10000298:	10800917 	ldw	r2,36(r2)
1000029c:	1880041e 	bne	r3,r2,100002b0 <AI_enemy+0x44>
			enemy->enemyrightcount =0;
100002a0:	e0bffc17 	ldw	r2,-16(fp)
100002a4:	10000715 	stw	zero,28(r2)
			enemy->is_right=0;
100002a8:	e0bffc17 	ldw	r2,-16(fp)
100002ac:	10000215 	stw	zero,8(r2)
		}
		if (enemy->enemyleftcount== enemy->dist ){
100002b0:	e0bffc17 	ldw	r2,-16(fp)
100002b4:	10c00817 	ldw	r3,32(r2)
100002b8:	e0bffc17 	ldw	r2,-16(fp)
100002bc:	10800917 	ldw	r2,36(r2)
100002c0:	1880051e 	bne	r3,r2,100002d8 <AI_enemy+0x6c>
			enemy->enemyleftcount =0;
100002c4:	e0bffc17 	ldw	r2,-16(fp)
100002c8:	10000815 	stw	zero,32(r2)
			enemy->is_right=1;
100002cc:	e0bffc17 	ldw	r2,-16(fp)
100002d0:	00c00044 	movi	r3,1
100002d4:	10c00215 	stw	r3,8(r2)
		}
		if ((enemy->enemyrightcount < enemy->dist)&&(enemy->is_right==1)){
100002d8:	e0bffc17 	ldw	r2,-16(fp)
100002dc:	10c00717 	ldw	r3,28(r2)
100002e0:	e0bffc17 	ldw	r2,-16(fp)
100002e4:	10800917 	ldw	r2,36(r2)
100002e8:	1880280e 	bge	r3,r2,1000038c <AI_enemy+0x120>
100002ec:	e0bffc17 	ldw	r2,-16(fp)
100002f0:	10800217 	ldw	r2,8(r2)
100002f4:	10800058 	cmpnei	r2,r2,1
100002f8:	1000241e 	bne	r2,zero,1000038c <AI_enemy+0x120>
			if(enemy->action!=1&&enemy->action!=2)
100002fc:	e0bffc17 	ldw	r2,-16(fp)
10000300:	10800417 	ldw	r2,16(r2)
10000304:	10800060 	cmpeqi	r2,r2,1
10000308:	1000091e 	bne	r2,zero,10000330 <AI_enemy+0xc4>
1000030c:	e0bffc17 	ldw	r2,-16(fp)
10000310:	10800417 	ldw	r2,16(r2)
10000314:	108000a0 	cmpeqi	r2,r2,2
10000318:	1000051e 	bne	r2,zero,10000330 <AI_enemy+0xc4>
				enemy->enemyrightcount+=1;
1000031c:	e0bffc17 	ldw	r2,-16(fp)
10000320:	10800717 	ldw	r2,28(r2)
10000324:	10c00044 	addi	r3,r2,1
10000328:	e0bffc17 	ldw	r2,-16(fp)
1000032c:	10c00715 	stw	r3,28(r2)
			if(enemy->tpe==0){
10000330:	e0bffc17 	ldw	r2,-16(fp)
10000334:	10800617 	ldw	r2,24(r2)
10000338:	10000a1e 	bne	r2,zero,10000364 <AI_enemy+0xf8>
				set_the_enemy_lightning(enemy,startx+enemy->enemyrightcount,starty,kirby);
1000033c:	e0bffc17 	ldw	r2,-16(fp)
10000340:	10c00717 	ldw	r3,28(r2)
10000344:	e0bffe17 	ldw	r2,-8(fp)
10000348:	1885883a 	add	r2,r3,r2
1000034c:	e1fffd17 	ldw	r7,-12(fp)
10000350:	e1bfff17 	ldw	r6,-4(fp)
10000354:	100b883a 	mov	r5,r2
10000358:	e13ffc17 	ldw	r4,-16(fp)
1000035c:	000074c0 	call	1000074c <set_the_enemy_lightning>
			enemy->is_right=1;
		}
		if ((enemy->enemyrightcount < enemy->dist)&&(enemy->is_right==1)){
			if(enemy->action!=1&&enemy->action!=2)
				enemy->enemyrightcount+=1;
			if(enemy->tpe==0){
10000360:	00003c06 	br	10000454 <AI_enemy+0x1e8>
				set_the_enemy_lightning(enemy,startx+enemy->enemyrightcount,starty,kirby);
			}else{
				set_the_enemy_easy (enemy,startx+enemy->enemyrightcount,starty,kirby);
10000364:	e0bffc17 	ldw	r2,-16(fp)
10000368:	10c00717 	ldw	r3,28(r2)
1000036c:	e0bffe17 	ldw	r2,-8(fp)
10000370:	1885883a 	add	r2,r3,r2
10000374:	e1fffd17 	ldw	r7,-12(fp)
10000378:	e1bfff17 	ldw	r6,-4(fp)
1000037c:	100b883a 	mov	r5,r2
10000380:	e13ffc17 	ldw	r4,-16(fp)
10000384:	00005980 	call	10000598 <set_the_enemy_easy>
			enemy->is_right=1;
		}
		if ((enemy->enemyrightcount < enemy->dist)&&(enemy->is_right==1)){
			if(enemy->action!=1&&enemy->action!=2)
				enemy->enemyrightcount+=1;
			if(enemy->tpe==0){
10000388:	00003206 	br	10000454 <AI_enemy+0x1e8>
				set_the_enemy_easy (enemy,startx+enemy->enemyrightcount,starty,kirby);
			}



		}else if((enemy->enemyleftcount < enemy->dist)&&(enemy->is_right==0)){
1000038c:	e0bffc17 	ldw	r2,-16(fp)
10000390:	10c00817 	ldw	r3,32(r2)
10000394:	e0bffc17 	ldw	r2,-16(fp)
10000398:	10800917 	ldw	r2,36(r2)
1000039c:	18802d0e 	bge	r3,r2,10000454 <AI_enemy+0x1e8>
100003a0:	e0bffc17 	ldw	r2,-16(fp)
100003a4:	10800217 	ldw	r2,8(r2)
100003a8:	10002a1e 	bne	r2,zero,10000454 <AI_enemy+0x1e8>
			if(enemy->action!=1&&enemy->action!=2)
100003ac:	e0bffc17 	ldw	r2,-16(fp)
100003b0:	10800417 	ldw	r2,16(r2)
100003b4:	10800060 	cmpeqi	r2,r2,1
100003b8:	1000091e 	bne	r2,zero,100003e0 <AI_enemy+0x174>
100003bc:	e0bffc17 	ldw	r2,-16(fp)
100003c0:	10800417 	ldw	r2,16(r2)
100003c4:	108000a0 	cmpeqi	r2,r2,2
100003c8:	1000051e 	bne	r2,zero,100003e0 <AI_enemy+0x174>
				enemy->enemyleftcount+=1;
100003cc:	e0bffc17 	ldw	r2,-16(fp)
100003d0:	10800817 	ldw	r2,32(r2)
100003d4:	10c00044 	addi	r3,r2,1
100003d8:	e0bffc17 	ldw	r2,-16(fp)
100003dc:	10c00815 	stw	r3,32(r2)
			if(enemy->tpe==0){
100003e0:	e0bffc17 	ldw	r2,-16(fp)
100003e4:	10800617 	ldw	r2,24(r2)
100003e8:	10000d1e 	bne	r2,zero,10000420 <AI_enemy+0x1b4>
				set_the_enemy_lightning(enemy,startx+enemy->dist-enemy->enemyleftcount,starty,kirby);
100003ec:	e0bffc17 	ldw	r2,-16(fp)
100003f0:	10c00917 	ldw	r3,36(r2)
100003f4:	e0bffe17 	ldw	r2,-8(fp)
100003f8:	1887883a 	add	r3,r3,r2
100003fc:	e0bffc17 	ldw	r2,-16(fp)
10000400:	10800817 	ldw	r2,32(r2)
10000404:	1885c83a 	sub	r2,r3,r2
10000408:	e1fffd17 	ldw	r7,-12(fp)
1000040c:	e1bfff17 	ldw	r6,-4(fp)
10000410:	100b883a 	mov	r5,r2
10000414:	e13ffc17 	ldw	r4,-16(fp)
10000418:	000074c0 	call	1000074c <set_the_enemy_lightning>
			}else{
				set_the_enemy_easy (enemy,startx+enemy->dist-enemy->enemyleftcount,starty,kirby);
			}
		}

}
1000041c:	00000d06 	br	10000454 <AI_enemy+0x1e8>
			if(enemy->action!=1&&enemy->action!=2)
				enemy->enemyleftcount+=1;
			if(enemy->tpe==0){
				set_the_enemy_lightning(enemy,startx+enemy->dist-enemy->enemyleftcount,starty,kirby);
			}else{
				set_the_enemy_easy (enemy,startx+enemy->dist-enemy->enemyleftcount,starty,kirby);
10000420:	e0bffc17 	ldw	r2,-16(fp)
10000424:	10c00917 	ldw	r3,36(r2)
10000428:	e0bffe17 	ldw	r2,-8(fp)
1000042c:	1887883a 	add	r3,r3,r2
10000430:	e0bffc17 	ldw	r2,-16(fp)
10000434:	10800817 	ldw	r2,32(r2)
10000438:	1885c83a 	sub	r2,r3,r2
1000043c:	e1fffd17 	ldw	r7,-12(fp)
10000440:	e1bfff17 	ldw	r6,-4(fp)
10000444:	100b883a 	mov	r5,r2
10000448:	e13ffc17 	ldw	r4,-16(fp)
1000044c:	00005980 	call	10000598 <set_the_enemy_easy>
			}
		}

}
10000450:	00000006 	br	10000454 <AI_enemy+0x1e8>
10000454:	0001883a 	nop
10000458:	e037883a 	mov	sp,fp
1000045c:	dfc00117 	ldw	ra,4(sp)
10000460:	df000017 	ldw	fp,0(sp)
10000464:	dec00204 	addi	sp,sp,8
10000468:	f800283a 	ret

1000046c <initial_enemy>:

void initial_enemy(Enemy * enemy, int which){
1000046c:	defffd04 	addi	sp,sp,-12
10000470:	df000215 	stw	fp,8(sp)
10000474:	df000204 	addi	fp,sp,8
10000478:	e13ffe15 	stw	r4,-8(fp)
1000047c:	e17fff15 	stw	r5,-4(fp)
    enemy->realx = 0;
10000480:	e0bffe17 	ldw	r2,-8(fp)
10000484:	10000015 	stw	zero,0(r2)
    enemy->realy = 0;
10000488:	e0bffe17 	ldw	r2,-8(fp)
1000048c:	10000115 	stw	zero,4(r2)
    enemy->is_right = 1;
10000490:	e0bffe17 	ldw	r2,-8(fp)
10000494:	00c00044 	movi	r3,1
10000498:	10c00215 	stw	r3,8(r2)
    enemy->health = 1;
1000049c:	e0bffe17 	ldw	r2,-8(fp)
100004a0:	00c00044 	movi	r3,1
100004a4:	10c00315 	stw	r3,12(r2)
    enemy->tpe = which ;
100004a8:	e0bffe17 	ldw	r2,-8(fp)
100004ac:	e0ffff17 	ldw	r3,-4(fp)
100004b0:	10c00615 	stw	r3,24(r2)
    enemy->frame = 0;
100004b4:	e0bffe17 	ldw	r2,-8(fp)
100004b8:	10000515 	stw	zero,20(r2)
    enemy->enemyrightcount=0;
100004bc:	e0bffe17 	ldw	r2,-8(fp)
100004c0:	10000715 	stw	zero,28(r2)
    enemy->enemyleftcount=0;
100004c4:	e0bffe17 	ldw	r2,-8(fp)
100004c8:	10000815 	stw	zero,32(r2)
    enemy->dist=0;
100004cc:	e0bffe17 	ldw	r2,-8(fp)
100004d0:	10000915 	stw	zero,36(r2)
    enemy->framecount=0;
100004d4:	e0bffe17 	ldw	r2,-8(fp)
100004d8:	10000a15 	stw	zero,40(r2)
    enemy->framechange=0;
100004dc:	e0bffe17 	ldw	r2,-8(fp)
100004e0:	10000b15 	stw	zero,44(r2)
    switch(enemy->tpe){
100004e4:	e0bffe17 	ldw	r2,-8(fp)
100004e8:	10800617 	ldw	r2,24(r2)
100004ec:	10c00060 	cmpeqi	r3,r2,1
100004f0:	18000f1e 	bne	r3,zero,10000530 <initial_enemy+0xc4>
100004f4:	10c00088 	cmpgei	r3,r2,2
100004f8:	1800021e 	bne	r3,zero,10000504 <initial_enemy+0x98>
100004fc:	10000626 	beq	r2,zero,10000518 <initial_enemy+0xac>
            break; 
        }


    }  
}
10000500:	00002006 	br	10000584 <initial_enemy+0x118>
    enemy->enemyrightcount=0;
    enemy->enemyleftcount=0;
    enemy->dist=0;
    enemy->framecount=0;
    enemy->framechange=0;
    switch(enemy->tpe){
10000504:	10c000a0 	cmpeqi	r3,r2,2
10000508:	1800101e 	bne	r3,zero,1000054c <initial_enemy+0xe0>
1000050c:	108000e0 	cmpeqi	r2,r2,3
10000510:	1000151e 	bne	r2,zero,10000568 <initial_enemy+0xfc>
            break; 
        }


    }  
}
10000514:	00001b06 	br	10000584 <initial_enemy+0x118>
    enemy->dist=0;
    enemy->framecount=0;
    enemy->framechange=0;
    switch(enemy->tpe){
        case 0:{
            enemy->action = 0;
10000518:	e0bffe17 	ldw	r2,-8(fp)
1000051c:	10000415 	stw	zero,16(r2)
            enemy->dist=100;
10000520:	e0bffe17 	ldw	r2,-8(fp)
10000524:	00c01904 	movi	r3,100
10000528:	10c00915 	stw	r3,36(r2)
            break; 
1000052c:	00001506 	br	10000584 <initial_enemy+0x118>
        }
        case 1:{
            enemy->action = 4;
10000530:	e0bffe17 	ldw	r2,-8(fp)
10000534:	00c00104 	movi	r3,4
10000538:	10c00415 	stw	r3,16(r2)
            enemy->dist=100;
1000053c:	e0bffe17 	ldw	r2,-8(fp)
10000540:	00c01904 	movi	r3,100
10000544:	10c00915 	stw	r3,36(r2)
            break; 
10000548:	00000e06 	br	10000584 <initial_enemy+0x118>
        }
        case 2:{
            enemy->action = 5;
1000054c:	e0bffe17 	ldw	r2,-8(fp)
10000550:	00c00144 	movi	r3,5
10000554:	10c00415 	stw	r3,16(r2)
            enemy->dist=135;
10000558:	e0bffe17 	ldw	r2,-8(fp)
1000055c:	00c021c4 	movi	r3,135
10000560:	10c00915 	stw	r3,36(r2)
            break; 
10000564:	00000706 	br	10000584 <initial_enemy+0x118>
        }
        case 3:{
            enemy->action = 6;
10000568:	e0bffe17 	ldw	r2,-8(fp)
1000056c:	00c00184 	movi	r3,6
10000570:	10c00415 	stw	r3,16(r2)
            enemy->dist=45;
10000574:	e0bffe17 	ldw	r2,-8(fp)
10000578:	00c00b44 	movi	r3,45
1000057c:	10c00915 	stw	r3,36(r2)
            break; 
10000580:	0001883a 	nop
        }


    }  
}
10000584:	0001883a 	nop
10000588:	e037883a 	mov	sp,fp
1000058c:	df000017 	ldw	fp,0(sp)
10000590:	dec00104 	addi	sp,sp,4
10000594:	f800283a 	ret

10000598 <set_the_enemy_easy>:

void set_the_enemy_easy(Enemy * enemy,int x,int y,Kirby * kirby){
10000598:	defffa04 	addi	sp,sp,-24
1000059c:	dfc00515 	stw	ra,20(sp)
100005a0:	df000415 	stw	fp,16(sp)
100005a4:	df000404 	addi	fp,sp,16
100005a8:	e13ffc15 	stw	r4,-16(fp)
100005ac:	e17ffd15 	stw	r5,-12(fp)
100005b0:	e1bffe15 	stw	r6,-8(fp)
100005b4:	e1ffff15 	stw	r7,-4(fp)
    // enemy->realx = x;
    // enemy->realy = y;

    if(enemy->health==0){
100005b8:	e0bffc17 	ldw	r2,-16(fp)
100005bc:	10800317 	ldw	r2,12(r2)
100005c0:	1000431e 	bne	r2,zero,100006d0 <set_the_enemy_easy+0x138>
        // draw the damage pic
        if (kirby-> x >=  enemy->realx ){
100005c4:	e0bfff17 	ldw	r2,-4(fp)
100005c8:	10c00017 	ldw	r3,0(r2)
100005cc:	e0bffc17 	ldw	r2,-16(fp)
100005d0:	10800017 	ldw	r2,0(r2)
100005d4:	18800416 	blt	r3,r2,100005e8 <set_the_enemy_easy+0x50>
            enemy->is_right =1;
100005d8:	e0bffc17 	ldw	r2,-16(fp)
100005dc:	00c00044 	movi	r3,1
100005e0:	10c00215 	stw	r3,8(r2)
100005e4:	00000206 	br	100005f0 <set_the_enemy_easy+0x58>
        }else{
            enemy->is_right =0;
100005e8:	e0bffc17 	ldw	r2,-16(fp)
100005ec:	10000215 	stw	zero,8(r2)
        }
        if((enemy->frame< 8)&&(enemy->tpe==3)){
100005f0:	e0bffc17 	ldw	r2,-16(fp)
100005f4:	10800517 	ldw	r2,20(r2)
100005f8:	10800208 	cmpgei	r2,r2,8
100005fc:	1000071e 	bne	r2,zero,1000061c <set_the_enemy_easy+0x84>
10000600:	e0bffc17 	ldw	r2,-16(fp)
10000604:	10800617 	ldw	r2,24(r2)
10000608:	108000d8 	cmpnei	r2,r2,3
1000060c:	1000031e 	bne	r2,zero,1000061c <set_the_enemy_easy+0x84>
            enemy->frame=8;
10000610:	e0bffc17 	ldw	r2,-16(fp)
10000614:	00c00204 	movi	r3,8
10000618:	10c00515 	stw	r3,20(r2)
        }
        if((enemy->frame< 12)&&(enemy->tpe==2)){
1000061c:	e0bffc17 	ldw	r2,-16(fp)
10000620:	10800517 	ldw	r2,20(r2)
10000624:	10800308 	cmpgei	r2,r2,12
10000628:	1000071e 	bne	r2,zero,10000648 <set_the_enemy_easy+0xb0>
1000062c:	e0bffc17 	ldw	r2,-16(fp)
10000630:	10800617 	ldw	r2,24(r2)
10000634:	10800098 	cmpnei	r2,r2,2
10000638:	1000031e 	bne	r2,zero,10000648 <set_the_enemy_easy+0xb0>
            enemy->frame=12;
1000063c:	e0bffc17 	ldw	r2,-16(fp)
10000640:	00c00304 	movi	r3,12
10000644:	10c00515 	stw	r3,20(r2)
        }
        if((enemy->frame< 11)&&(enemy->tpe==1)){
10000648:	e0bffc17 	ldw	r2,-16(fp)
1000064c:	10800517 	ldw	r2,20(r2)
10000650:	108002c8 	cmpgei	r2,r2,11
10000654:	1000071e 	bne	r2,zero,10000674 <set_the_enemy_easy+0xdc>
10000658:	e0bffc17 	ldw	r2,-16(fp)
1000065c:	10800617 	ldw	r2,24(r2)
10000660:	10800058 	cmpnei	r2,r2,1
10000664:	1000031e 	bne	r2,zero,10000674 <set_the_enemy_easy+0xdc>
            enemy->frame=11;
10000668:	e0bffc17 	ldw	r2,-16(fp)
1000066c:	00c002c4 	movi	r3,11
10000670:	10c00515 	stw	r3,20(r2)
        }

        if(enemy->framecount<4){
10000674:	e0bffc17 	ldw	r2,-16(fp)
10000678:	10800a17 	ldw	r2,40(r2)
1000067c:	10800108 	cmpgei	r2,r2,4
10000680:	1000101e 	bne	r2,zero,100006c4 <set_the_enemy_easy+0x12c>
           enemy->framecount+=1; 
10000684:	e0bffc17 	ldw	r2,-16(fp)
10000688:	10800a17 	ldw	r2,40(r2)
1000068c:	10c00044 	addi	r3,r2,1
10000690:	e0bffc17 	ldw	r2,-16(fp)
10000694:	10c00a15 	stw	r3,40(r2)
           upload_enemy_Info(enemy,kirby);
10000698:	e17fff17 	ldw	r5,-4(fp)
1000069c:	e13ffc17 	ldw	r4,-16(fp)
100006a0:	0000a580 	call	10000a58 <upload_enemy_Info>
           frame_Time(KIRBY_FRAME_STEP/2);
100006a4:	01003e84 	movi	r4,250
100006a8:	00036680 	call	10003668 <frame_Time>
           enemy->frame+=1;
100006ac:	e0bffc17 	ldw	r2,-16(fp)
100006b0:	10800517 	ldw	r2,20(r2)
100006b4:	10c00044 	addi	r3,r2,1
100006b8:	e0bffc17 	ldw	r2,-16(fp)
100006bc:	10c00515 	stw	r3,20(r2)
        frame_Time(KIRBY_FRAME_STEP/2);

    }
                                                                                                                                                                                                                                                                                                                    

}
100006c0:	00001c06 	br	10000734 <set_the_enemy_easy+0x19c>
           enemy->framecount+=1; 
           upload_enemy_Info(enemy,kirby);
           frame_Time(KIRBY_FRAME_STEP/2);
           enemy->frame+=1;
        }else{
             upload_enemy_Info_notshow(enemy);
100006c4:	e13ffc17 	ldw	r4,-16(fp)
100006c8:	0000c440 	call	10000c44 <upload_enemy_Info_notshow>
        frame_Time(KIRBY_FRAME_STEP/2);

    }
                                                                                                                                                                                                                                                                                                                    

}
100006cc:	00001906 	br	10000734 <set_the_enemy_easy+0x19c>
        }


    }else
    {
        enemy->realx = x;
100006d0:	e0bffc17 	ldw	r2,-16(fp)
100006d4:	e0fffd17 	ldw	r3,-12(fp)
100006d8:	10c00015 	stw	r3,0(r2)
        enemy->realy = y;
100006dc:	e0bffc17 	ldw	r2,-16(fp)
100006e0:	e0fffe17 	ldw	r3,-8(fp)
100006e4:	10c00115 	stw	r3,4(r2)
        enemy->frame = (enemy->frame  + 1) % LEFT_FRAME_NUM;
100006e8:	e0bffc17 	ldw	r2,-16(fp)
100006ec:	10800517 	ldw	r2,20(r2)
100006f0:	10c00044 	addi	r3,r2,1
100006f4:	00a00034 	movhi	r2,32768
100006f8:	108001c4 	addi	r2,r2,7
100006fc:	1884703a 	and	r2,r3,r2
10000700:	1000040e 	bge	r2,zero,10000714 <set_the_enemy_easy+0x17c>
10000704:	10bfffc4 	addi	r2,r2,-1
10000708:	00fffe04 	movi	r3,-8
1000070c:	10c4b03a 	or	r2,r2,r3
10000710:	10800044 	addi	r2,r2,1
10000714:	1007883a 	mov	r3,r2
10000718:	e0bffc17 	ldw	r2,-16(fp)
1000071c:	10c00515 	stw	r3,20(r2)
        upload_enemy_Info(enemy,kirby);
10000720:	e17fff17 	ldw	r5,-4(fp)
10000724:	e13ffc17 	ldw	r4,-16(fp)
10000728:	0000a580 	call	10000a58 <upload_enemy_Info>
        frame_Time(KIRBY_FRAME_STEP/2);
1000072c:	01003e84 	movi	r4,250
10000730:	00036680 	call	10003668 <frame_Time>

    }
                                                                                                                                                                                                                                                                                                                    

}
10000734:	0001883a 	nop
10000738:	e037883a 	mov	sp,fp
1000073c:	dfc00117 	ldw	ra,4(sp)
10000740:	df000017 	ldw	fp,0(sp)
10000744:	dec00204 	addi	sp,sp,8
10000748:	f800283a 	ret

1000074c <set_the_enemy_lightning>:

void set_the_enemy_lightning(Enemy * enemy,int x,int y,Kirby * kirby){
1000074c:	defff804 	addi	sp,sp,-32
10000750:	dfc00715 	stw	ra,28(sp)
10000754:	df000615 	stw	fp,24(sp)
10000758:	df000604 	addi	fp,sp,24
1000075c:	e13ffc15 	stw	r4,-16(fp)
10000760:	e17ffd15 	stw	r5,-12(fp)
10000764:	e1bffe15 	stw	r6,-8(fp)
10000768:	e1ffff15 	stw	r7,-4(fp)
    // enemy->realx = x;
    // enemy->realy = y;  
    int distx=0;
1000076c:	e03ffa15 	stw	zero,-24(fp)
    int disty=0;
10000770:	e03ffb15 	stw	zero,-20(fp)
    //enemy-> show= 1;
    if(enemy->health==0){
10000774:	e0bffc17 	ldw	r2,-16(fp)
10000778:	10800317 	ldw	r2,12(r2)
1000077c:	10002e1e 	bne	r2,zero,10000838 <set_the_enemy_lightning+0xec>
        // draw the damage pic 
        if (kirby-> x >=  enemy->realx ){
10000780:	e0bfff17 	ldw	r2,-4(fp)
10000784:	10c00017 	ldw	r3,0(r2)
10000788:	e0bffc17 	ldw	r2,-16(fp)
1000078c:	10800017 	ldw	r2,0(r2)
10000790:	18800416 	blt	r3,r2,100007a4 <set_the_enemy_lightning+0x58>
            enemy->is_right =1;
10000794:	e0bffc17 	ldw	r2,-16(fp)
10000798:	00c00044 	movi	r3,1
1000079c:	10c00215 	stw	r3,8(r2)
100007a0:	00000206 	br	100007ac <set_the_enemy_lightning+0x60>
        }else{
            enemy->is_right =0;
100007a4:	e0bffc17 	ldw	r2,-16(fp)
100007a8:	10000215 	stw	zero,8(r2)
        }
        if((enemy->frame< 12)&&(enemy->tpe==0)){
100007ac:	e0bffc17 	ldw	r2,-16(fp)
100007b0:	10800517 	ldw	r2,20(r2)
100007b4:	10800308 	cmpgei	r2,r2,12
100007b8:	1000081e 	bne	r2,zero,100007dc <set_the_enemy_lightning+0x90>
100007bc:	e0bffc17 	ldw	r2,-16(fp)
100007c0:	10800617 	ldw	r2,24(r2)
100007c4:	1000051e 	bne	r2,zero,100007dc <set_the_enemy_lightning+0x90>
            enemy->frame=12;
100007c8:	e0bffc17 	ldw	r2,-16(fp)
100007cc:	00c00304 	movi	r3,12
100007d0:	10c00515 	stw	r3,20(r2)
            enemy->action=0;
100007d4:	e0bffc17 	ldw	r2,-16(fp)
100007d8:	10000415 	stw	zero,16(r2)
        }

        if(enemy->framecount<4){
100007dc:	e0bffc17 	ldw	r2,-16(fp)
100007e0:	10800a17 	ldw	r2,40(r2)
100007e4:	10800108 	cmpgei	r2,r2,4
100007e8:	1000101e 	bne	r2,zero,1000082c <set_the_enemy_lightning+0xe0>
           enemy->framecount+=1; 
100007ec:	e0bffc17 	ldw	r2,-16(fp)
100007f0:	10800a17 	ldw	r2,40(r2)
100007f4:	10c00044 	addi	r3,r2,1
100007f8:	e0bffc17 	ldw	r2,-16(fp)
100007fc:	10c00a15 	stw	r3,40(r2)
           upload_enemy_Info(enemy,kirby);
10000800:	e17fff17 	ldw	r5,-4(fp)
10000804:	e13ffc17 	ldw	r4,-16(fp)
10000808:	0000a580 	call	10000a58 <upload_enemy_Info>
           frame_Time(KIRBY_FRAME_STEP/2);
1000080c:	01003e84 	movi	r4,250
10000810:	00036680 	call	10003668 <frame_Time>
           enemy->frame+=1;
10000814:	e0bffc17 	ldw	r2,-16(fp)
10000818:	10800517 	ldw	r2,20(r2)
1000081c:	10c00044 	addi	r3,r2,1
10000820:	e0bffc17 	ldw	r2,-16(fp)
10000824:	10c00515 	stw	r3,20(r2)
 

    }
                                                                                                                                                                                                                                                                                                                    

}
10000828:	00008506 	br	10000a40 <set_the_enemy_lightning+0x2f4>
           enemy->framecount+=1; 
           upload_enemy_Info(enemy,kirby);
           frame_Time(KIRBY_FRAME_STEP/2);
           enemy->frame+=1;
        }else{
             upload_enemy_Info_notshow(enemy);
1000082c:	e13ffc17 	ldw	r4,-16(fp)
10000830:	0000c440 	call	10000c44 <upload_enemy_Info_notshow>
 

    }
                                                                                                                                                                                                                                                                                                                    

}
10000834:	00008206 	br	10000a40 <set_the_enemy_lightning+0x2f4>
        }


    }else
    {   
        enemy->realx = x;
10000838:	e0bffc17 	ldw	r2,-16(fp)
1000083c:	e0fffd17 	ldw	r3,-12(fp)
10000840:	10c00015 	stw	r3,0(r2)
        enemy->realy = y;  
10000844:	e0bffc17 	ldw	r2,-16(fp)
10000848:	e0fffe17 	ldw	r3,-8(fp)
1000084c:	10c00115 	stw	r3,4(r2)
    
    	if (enemy->framechange==1){
10000850:	e0bffc17 	ldw	r2,-16(fp)
10000854:	10800b17 	ldw	r2,44(r2)
10000858:	10800058 	cmpnei	r2,r2,1
1000085c:	1000041e 	bne	r2,zero,10000870 <set_the_enemy_lightning+0x124>
    		enemy->frame=0;
10000860:	e0bffc17 	ldw	r2,-16(fp)
10000864:	10000515 	stw	zero,20(r2)
    		enemy->framechange=0;
10000868:	e0bffc17 	ldw	r2,-16(fp)
1000086c:	10000b15 	stw	zero,44(r2)
    	}
    	distx =abs(kirby->x - enemy->realx);
10000870:	e0bfff17 	ldw	r2,-4(fp)
10000874:	10c00017 	ldw	r3,0(r2)
10000878:	e0bffc17 	ldw	r2,-16(fp)
1000087c:	10800017 	ldw	r2,0(r2)
10000880:	1885c83a 	sub	r2,r3,r2
10000884:	1000010e 	bge	r2,zero,1000088c <set_the_enemy_lightning+0x140>
10000888:	0085c83a 	sub	r2,zero,r2
1000088c:	e0bffa15 	stw	r2,-24(fp)
    	disty =abs(kirby->y-enemy->realy);
10000890:	e0bfff17 	ldw	r2,-4(fp)
10000894:	10c00117 	ldw	r3,4(r2)
10000898:	e0bffc17 	ldw	r2,-16(fp)
1000089c:	10800117 	ldw	r2,4(r2)
100008a0:	1885c83a 	sub	r2,r3,r2
100008a4:	1000010e 	bge	r2,zero,100008ac <set_the_enemy_lightning+0x160>
100008a8:	0085c83a 	sub	r2,zero,r2
100008ac:	e0bffb15 	stw	r2,-20(fp)
    	if((distx==60||distx==40||distx==20)&&(disty<50)){
100008b0:	e0bffa17 	ldw	r2,-24(fp)
100008b4:	10800f20 	cmpeqi	r2,r2,60
100008b8:	1000061e 	bne	r2,zero,100008d4 <set_the_enemy_lightning+0x188>
100008bc:	e0bffa17 	ldw	r2,-24(fp)
100008c0:	10800a20 	cmpeqi	r2,r2,40
100008c4:	1000031e 	bne	r2,zero,100008d4 <set_the_enemy_lightning+0x188>
100008c8:	e0bffa17 	ldw	r2,-24(fp)
100008cc:	10800518 	cmpnei	r2,r2,20
100008d0:	1000061e 	bne	r2,zero,100008ec <set_the_enemy_lightning+0x1a0>
100008d4:	e0bffb17 	ldw	r2,-20(fp)
100008d8:	10800c88 	cmpgei	r2,r2,50
100008dc:	1000031e 	bne	r2,zero,100008ec <set_the_enemy_lightning+0x1a0>
    		enemy->framechange=1;
100008e0:	e0bffc17 	ldw	r2,-16(fp)
100008e4:	00c00044 	movi	r3,1
100008e8:	10c00b15 	stw	r3,44(r2)
    	}
    	if(distx>60||disty>50){
100008ec:	e0bffa17 	ldw	r2,-24(fp)
100008f0:	10800f48 	cmpgei	r2,r2,61
100008f4:	1000031e 	bne	r2,zero,10000904 <set_the_enemy_lightning+0x1b8>
100008f8:	e0bffb17 	ldw	r2,-20(fp)
100008fc:	10800cd0 	cmplti	r2,r2,51
10000900:	1000111e 	bne	r2,zero,10000948 <set_the_enemy_lightning+0x1fc>
    		enemy->action=0;
10000904:	e0bffc17 	ldw	r2,-16(fp)
10000908:	10000415 	stw	zero,16(r2)
    		enemy->frame = (enemy->frame  + 1) % LEFT_FRAME_NUM;
1000090c:	e0bffc17 	ldw	r2,-16(fp)
10000910:	10800517 	ldw	r2,20(r2)
10000914:	10c00044 	addi	r3,r2,1
10000918:	00a00034 	movhi	r2,32768
1000091c:	108001c4 	addi	r2,r2,7
10000920:	1884703a 	and	r2,r3,r2
10000924:	1000040e 	bge	r2,zero,10000938 <set_the_enemy_lightning+0x1ec>
10000928:	10bfffc4 	addi	r2,r2,-1
1000092c:	00fffe04 	movi	r3,-8
10000930:	10c4b03a 	or	r2,r2,r3
10000934:	10800044 	addi	r2,r2,1
10000938:	1007883a 	mov	r3,r2
1000093c:	e0bffc17 	ldw	r2,-16(fp)
10000940:	10c00515 	stw	r3,20(r2)
10000944:	00003206 	br	10000a10 <set_the_enemy_lightning+0x2c4>
    	}else if (distx <= 60 && distx >=30 && disty<50 ){
10000948:	e0bffa17 	ldw	r2,-24(fp)
1000094c:	10800f48 	cmpgei	r2,r2,61
10000950:	1000131e 	bne	r2,zero,100009a0 <set_the_enemy_lightning+0x254>
10000954:	e0bffa17 	ldw	r2,-24(fp)
10000958:	10800790 	cmplti	r2,r2,30
1000095c:	1000101e 	bne	r2,zero,100009a0 <set_the_enemy_lightning+0x254>
10000960:	e0bffb17 	ldw	r2,-20(fp)
10000964:	10800c88 	cmpgei	r2,r2,50
10000968:	10000d1e 	bne	r2,zero,100009a0 <set_the_enemy_lightning+0x254>
    		enemy->action=1;
1000096c:	e0bffc17 	ldw	r2,-16(fp)
10000970:	00c00044 	movi	r3,1
10000974:	10c00415 	stw	r3,16(r2)
    		enemy->frame = (enemy->frame  + 1) % 5;
10000978:	e0bffc17 	ldw	r2,-16(fp)
1000097c:	10800517 	ldw	r2,20(r2)
10000980:	10800044 	addi	r2,r2,1
10000984:	01400144 	movi	r5,5
10000988:	1009883a 	mov	r4,r2
1000098c:	000688c0 	call	1000688c <__modsi3>
10000990:	1007883a 	mov	r3,r2
10000994:	e0bffc17 	ldw	r2,-16(fp)
10000998:	10c00515 	stw	r3,20(r2)
1000099c:	00001c06 	br	10000a10 <set_the_enemy_lightning+0x2c4>

    	}else if(distx< 30&&disty<50){
100009a0:	e0bffa17 	ldw	r2,-24(fp)
100009a4:	10800788 	cmpgei	r2,r2,30
100009a8:	1000191e 	bne	r2,zero,10000a10 <set_the_enemy_lightning+0x2c4>
100009ac:	e0bffb17 	ldw	r2,-20(fp)
100009b0:	10800c88 	cmpgei	r2,r2,50
100009b4:	1000161e 	bne	r2,zero,10000a10 <set_the_enemy_lightning+0x2c4>
    		enemy->action=2;
100009b8:	e0bffc17 	ldw	r2,-16(fp)
100009bc:	00c00084 	movi	r3,2
100009c0:	10c00415 	stw	r3,16(r2)
    		enemy->frame = (enemy->frame  + 1) % 4;
100009c4:	e0bffc17 	ldw	r2,-16(fp)
100009c8:	10800517 	ldw	r2,20(r2)
100009cc:	10c00044 	addi	r3,r2,1
100009d0:	00a00034 	movhi	r2,32768
100009d4:	108000c4 	addi	r2,r2,3
100009d8:	1884703a 	and	r2,r3,r2
100009dc:	1000040e 	bge	r2,zero,100009f0 <set_the_enemy_lightning+0x2a4>
100009e0:	10bfffc4 	addi	r2,r2,-1
100009e4:	00ffff04 	movi	r3,-4
100009e8:	10c4b03a 	or	r2,r2,r3
100009ec:	10800044 	addi	r2,r2,1
100009f0:	1007883a 	mov	r3,r2
100009f4:	e0bffc17 	ldw	r2,-16(fp)
100009f8:	10c00515 	stw	r3,20(r2)
    		enemy->realy-=12;
100009fc:	e0bffc17 	ldw	r2,-16(fp)
10000a00:	10800117 	ldw	r2,4(r2)
10000a04:	10fffd04 	addi	r3,r2,-12
10000a08:	e0bffc17 	ldw	r2,-16(fp)
10000a0c:	10c00115 	stw	r3,4(r2)

    	}

    	upload_enemy_Info(enemy,kirby);
10000a10:	e17fff17 	ldw	r5,-4(fp)
10000a14:	e13ffc17 	ldw	r4,-16(fp)
10000a18:	0000a580 	call	10000a58 <upload_enemy_Info>
        frame_Time(KIRBY_FRAME_STEP/2);
10000a1c:	01003e84 	movi	r4,250
10000a20:	00036680 	call	10003668 <frame_Time>
     	if(enemy->action!=2){
10000a24:	e0bffc17 	ldw	r2,-16(fp)
10000a28:	10800417 	ldw	r2,16(r2)
10000a2c:	108000a0 	cmpeqi	r2,r2,2
10000a30:	1000031e 	bne	r2,zero,10000a40 <set_the_enemy_lightning+0x2f4>
        	enemy->realy=y;
10000a34:	e0bffc17 	ldw	r2,-16(fp)
10000a38:	e0fffe17 	ldw	r3,-8(fp)
10000a3c:	10c00115 	stw	r3,4(r2)
 

    }
                                                                                                                                                                                                                                                                                                                    

}
10000a40:	0001883a 	nop
10000a44:	e037883a 	mov	sp,fp
10000a48:	dfc00117 	ldw	ra,4(sp)
10000a4c:	df000017 	ldw	fp,0(sp)
10000a50:	dec00204 	addi	sp,sp,8
10000a54:	f800283a 	ret

10000a58 <upload_enemy_Info>:

void upload_enemy_Info(Enemy * enemy,Kirby * kirby){
10000a58:	defff404 	addi	sp,sp,-48
10000a5c:	dfc00b15 	stw	ra,44(sp)
10000a60:	df000a15 	stw	fp,40(sp)
10000a64:	df000a04 	addi	fp,sp,40
10000a68:	e13ffe15 	stw	r4,-8(fp)
10000a6c:	e17fff15 	stw	r5,-4(fp)

//    int Enemy_Pos_X = enemy->realx;
//    int Enemy_Pos_Y = enemy->realy;
    int Enemy_Image_X = enemy->frame;
10000a70:	e0bffe17 	ldw	r2,-8(fp)
10000a74:	10800517 	ldw	r2,20(r2)
10000a78:	e0bff815 	stw	r2,-32(fp)
    int Enemy_Image_Y = enemy->action;
10000a7c:	e0bffe17 	ldw	r2,-8(fp)
10000a80:	10800417 	ldw	r2,16(r2)
10000a84:	e0bff915 	stw	r2,-28(fp)
    int Enemy_Image_Width = 0;
10000a88:	e03ff615 	stw	zero,-40(fp)
    int Enemy_Image_Height = 0;
10000a8c:	e03ff715 	stw	zero,-36(fp)
    int Enemy_Screen_X = 0;
10000a90:	e03ffa15 	stw	zero,-24(fp)
    int Enemy_Screen_Y = 0;
10000a94:	e03ffb15 	stw	zero,-20(fp)
    int kirby_Botton_X =0;
10000a98:	e03ffc15 	stw	zero,-16(fp)
    int Kirby_Screen_X = 0;
10000a9c:	e03ffd15 	stw	zero,-12(fp)
    //enemy->show=1;
    // Decide enemy's image width and height
    if (enemy->tpe == 3) {
10000aa0:	e0bffe17 	ldw	r2,-8(fp)
10000aa4:	10800617 	ldw	r2,24(r2)
10000aa8:	108000d8 	cmpnei	r2,r2,3
10000aac:	1000051e 	bne	r2,zero,10000ac4 <upload_enemy_Info+0x6c>
        Enemy_Image_Width = 28;
10000ab0:	00800704 	movi	r2,28
10000ab4:	e0bff615 	stw	r2,-40(fp)
        Enemy_Image_Height = 28;
10000ab8:	00800704 	movi	r2,28
10000abc:	e0bff715 	stw	r2,-36(fp)
10000ac0:	00002606 	br	10000b5c <upload_enemy_Info+0x104>
    } else if ((enemy->tpe == 1) || (enemy->tpe == 2)) {
10000ac4:	e0bffe17 	ldw	r2,-8(fp)
10000ac8:	10800617 	ldw	r2,24(r2)
10000acc:	10800060 	cmpeqi	r2,r2,1
10000ad0:	1000041e 	bne	r2,zero,10000ae4 <upload_enemy_Info+0x8c>
10000ad4:	e0bffe17 	ldw	r2,-8(fp)
10000ad8:	10800617 	ldw	r2,24(r2)
10000adc:	10800098 	cmpnei	r2,r2,2
10000ae0:	1000051e 	bne	r2,zero,10000af8 <upload_enemy_Info+0xa0>
        Enemy_Image_Width = 25;
10000ae4:	00800644 	movi	r2,25
10000ae8:	e0bff615 	stw	r2,-40(fp)
        Enemy_Image_Height = 25;
10000aec:	00800644 	movi	r2,25
10000af0:	e0bff715 	stw	r2,-36(fp)
10000af4:	00001906 	br	10000b5c <upload_enemy_Info+0x104>
    } else {
    	if (enemy->action==0){
10000af8:	e0bffe17 	ldw	r2,-8(fp)
10000afc:	10800417 	ldw	r2,16(r2)
10000b00:	1000051e 	bne	r2,zero,10000b18 <upload_enemy_Info+0xc0>
			Enemy_Image_Width = 25;
10000b04:	00800644 	movi	r2,25
10000b08:	e0bff615 	stw	r2,-40(fp)
			Enemy_Image_Height = 25;
10000b0c:	00800644 	movi	r2,25
10000b10:	e0bff715 	stw	r2,-36(fp)
10000b14:	00001106 	br	10000b5c <upload_enemy_Info+0x104>
    	}else if(enemy->action==1){
10000b18:	e0bffe17 	ldw	r2,-8(fp)
10000b1c:	10800417 	ldw	r2,16(r2)
10000b20:	10800058 	cmpnei	r2,r2,1
10000b24:	1000051e 	bne	r2,zero,10000b3c <upload_enemy_Info+0xe4>
    		Enemy_Image_Width = 50;
10000b28:	00800c84 	movi	r2,50
10000b2c:	e0bff615 	stw	r2,-40(fp)
    		Enemy_Image_Height = 25;
10000b30:	00800644 	movi	r2,25
10000b34:	e0bff715 	stw	r2,-36(fp)
10000b38:	00000806 	br	10000b5c <upload_enemy_Info+0x104>
    	}else if(enemy->action==2){
10000b3c:	e0bffe17 	ldw	r2,-8(fp)
10000b40:	10800417 	ldw	r2,16(r2)
10000b44:	10800098 	cmpnei	r2,r2,2
10000b48:	1000041e 	bne	r2,zero,10000b5c <upload_enemy_Info+0x104>
    		Enemy_Image_Width = 50;
10000b4c:	00800c84 	movi	r2,50
10000b50:	e0bff615 	stw	r2,-40(fp)
    		Enemy_Image_Height = 50;
10000b54:	00800c84 	movi	r2,50
10000b58:	e0bff715 	stw	r2,-36(fp)
    	}
    }
    kirby_Botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff; // Center botton
10000b5c:	e13fff17 	ldw	r4,-4(fp)
10000b60:	00037780 	call	10003778 <get_Kirby_Botton_Pos>
10000b64:	1004d43a 	srli	r2,r2,16
10000b68:	e0bffc15 	stw	r2,-16(fp)
    Kirby_Screen_X = kirby_Screen_Center_X(kirby_Botton_X);
10000b6c:	e13ffc17 	ldw	r4,-16(fp)
10000b70:	0003cf80 	call	10003cf8 <kirby_Screen_Center_X>
10000b74:	e0bffd15 	stw	r2,-12(fp)

//    if(((kirby->x-enemy->realx)< 234)||((enemy->realx-kirby->x)< 234)){
	Enemy_Screen_X=enemy->realx-kirby->x+Kirby_Screen_X+203;
10000b78:	e0bffe17 	ldw	r2,-8(fp)
10000b7c:	10c00017 	ldw	r3,0(r2)
10000b80:	e0bfff17 	ldw	r2,-4(fp)
10000b84:	10800017 	ldw	r2,0(r2)
10000b88:	1887c83a 	sub	r3,r3,r2
10000b8c:	e0bffd17 	ldw	r2,-12(fp)
10000b90:	1885883a 	add	r2,r3,r2
10000b94:	108032c4 	addi	r2,r2,203
10000b98:	e0bffa15 	stw	r2,-24(fp)
	Enemy_Screen_Y=enemy->realy+152;
10000b9c:	e0bffe17 	ldw	r2,-8(fp)
10000ba0:	10800117 	ldw	r2,4(r2)
10000ba4:	10802604 	addi	r2,r2,152
10000ba8:	e0bffb15 	stw	r2,-20(fp)
//    }else{
//        Enemy_Screen_X = 0;
//        Enemy_Screen_Y = 0;
//    }
    // Upload to enemy's registers
    ADDRESS_PTR[4+2*enemy->tpe]=(Enemy_Image_X << 28) | (Enemy_Image_Y << 24) | (Enemy_Image_Width << 16) | (Enemy_Image_Height << 8)|(enemy->is_right);
10000bac:	d09b2117 	ldw	r2,27780(gp)
10000bb0:	e0fffe17 	ldw	r3,-8(fp)
10000bb4:	18c00617 	ldw	r3,24(r3)
10000bb8:	18c00084 	addi	r3,r3,2
10000bbc:	180690fa 	slli	r3,r3,3
10000bc0:	10c5883a 	add	r2,r2,r3
10000bc4:	e0fff817 	ldw	r3,-32(fp)
10000bc8:	1808973a 	slli	r4,r3,28
10000bcc:	e0fff917 	ldw	r3,-28(fp)
10000bd0:	1806963a 	slli	r3,r3,24
10000bd4:	20c8b03a 	or	r4,r4,r3
10000bd8:	e0fff617 	ldw	r3,-40(fp)
10000bdc:	1806943a 	slli	r3,r3,16
10000be0:	20c8b03a 	or	r4,r4,r3
10000be4:	e0fff717 	ldw	r3,-36(fp)
10000be8:	1806923a 	slli	r3,r3,8
10000bec:	20c8b03a 	or	r4,r4,r3
10000bf0:	e0fffe17 	ldw	r3,-8(fp)
10000bf4:	18c00217 	ldw	r3,8(r3)
10000bf8:	20c6b03a 	or	r3,r4,r3
10000bfc:	10c00015 	stw	r3,0(r2)
    //printf("the register is %x",ADDRESS_PTR[4+2*enemy->tpe]);
    ADDRESS_PTR[5+2*enemy->tpe]=(Enemy_Screen_X << 16)|Enemy_Screen_Y;
10000c00:	d09b2117 	ldw	r2,27780(gp)
10000c04:	e0fffe17 	ldw	r3,-8(fp)
10000c08:	18c00617 	ldw	r3,24(r3)
10000c0c:	180690fa 	slli	r3,r3,3
10000c10:	18c00504 	addi	r3,r3,20
10000c14:	10c5883a 	add	r2,r2,r3
10000c18:	e0fffa17 	ldw	r3,-24(fp)
10000c1c:	1808943a 	slli	r4,r3,16
10000c20:	e0fffb17 	ldw	r3,-20(fp)
10000c24:	20c6b03a 	or	r3,r4,r3
10000c28:	10c00015 	stw	r3,0(r2)
}
10000c2c:	0001883a 	nop
10000c30:	e037883a 	mov	sp,fp
10000c34:	dfc00117 	ldw	ra,4(sp)
10000c38:	df000017 	ldw	fp,0(sp)
10000c3c:	dec00204 	addi	sp,sp,8
10000c40:	f800283a 	ret

10000c44 <upload_enemy_Info_notshow>:

void upload_enemy_Info_notshow(Enemy * enemy){
10000c44:	defff804 	addi	sp,sp,-32
10000c48:	df000715 	stw	fp,28(sp)
10000c4c:	df000704 	addi	fp,sp,28
10000c50:	e13fff15 	stw	r4,-4(fp)
    enemy->realx = 0;
10000c54:	e0bfff17 	ldw	r2,-4(fp)
10000c58:	10000015 	stw	zero,0(r2)
    enemy->realy = 176;
10000c5c:	e0bfff17 	ldw	r2,-4(fp)
10000c60:	00c02c04 	movi	r3,176
10000c64:	10c00115 	stw	r3,4(r2)
    int Enemy_Image_X = enemy->frame;
10000c68:	e0bfff17 	ldw	r2,-4(fp)
10000c6c:	10800517 	ldw	r2,20(r2)
10000c70:	e0bff915 	stw	r2,-28(fp)
    int Enemy_Image_Y = enemy->action;
10000c74:	e0bfff17 	ldw	r2,-4(fp)
10000c78:	10800417 	ldw	r2,16(r2)
10000c7c:	e0bffa15 	stw	r2,-24(fp)
    int Enemy_Image_Width = 0;
10000c80:	e03ffb15 	stw	zero,-20(fp)
    int Enemy_Image_Height = 0;
10000c84:	e03ffc15 	stw	zero,-16(fp)
    int Enemy_Screen_X = 0;
10000c88:	e03ffd15 	stw	zero,-12(fp)
    int Enemy_Screen_Y = 0;
10000c8c:	e03ffe15 	stw	zero,-8(fp)

	Enemy_Screen_X=0;
10000c90:	e03ffd15 	stw	zero,-12(fp)
	Enemy_Screen_Y=0;
10000c94:	e03ffe15 	stw	zero,-8(fp)

    // Upload to enemy's registers
    ADDRESS_PTR[4+2*enemy->tpe]=(Enemy_Image_X << 28) | (Enemy_Image_Y << 24) | (Enemy_Image_Width << 16) | (Enemy_Image_Height << 8)|(enemy->is_right);
10000c98:	d09b2117 	ldw	r2,27780(gp)
10000c9c:	e0ffff17 	ldw	r3,-4(fp)
10000ca0:	18c00617 	ldw	r3,24(r3)
10000ca4:	18c00084 	addi	r3,r3,2
10000ca8:	180690fa 	slli	r3,r3,3
10000cac:	10c5883a 	add	r2,r2,r3
10000cb0:	e0fff917 	ldw	r3,-28(fp)
10000cb4:	1808973a 	slli	r4,r3,28
10000cb8:	e0fffa17 	ldw	r3,-24(fp)
10000cbc:	1806963a 	slli	r3,r3,24
10000cc0:	20c8b03a 	or	r4,r4,r3
10000cc4:	e0fffb17 	ldw	r3,-20(fp)
10000cc8:	1806943a 	slli	r3,r3,16
10000ccc:	20c8b03a 	or	r4,r4,r3
10000cd0:	e0fffc17 	ldw	r3,-16(fp)
10000cd4:	1806923a 	slli	r3,r3,8
10000cd8:	20c8b03a 	or	r4,r4,r3
10000cdc:	e0ffff17 	ldw	r3,-4(fp)
10000ce0:	18c00217 	ldw	r3,8(r3)
10000ce4:	20c6b03a 	or	r3,r4,r3
10000ce8:	10c00015 	stw	r3,0(r2)
    //printf("the register is %x",ADDRESS_PTR[4+2*enemy->tpe]);
    ADDRESS_PTR[5+2*enemy->tpe]=(Enemy_Screen_X << 16)|Enemy_Screen_Y;
10000cec:	d09b2117 	ldw	r2,27780(gp)
10000cf0:	e0ffff17 	ldw	r3,-4(fp)
10000cf4:	18c00617 	ldw	r3,24(r3)
10000cf8:	180690fa 	slli	r3,r3,3
10000cfc:	18c00504 	addi	r3,r3,20
10000d00:	10c5883a 	add	r2,r2,r3
10000d04:	e0fffd17 	ldw	r3,-12(fp)
10000d08:	1808943a 	slli	r4,r3,16
10000d0c:	e0fffe17 	ldw	r3,-8(fp)
10000d10:	20c6b03a 	or	r3,r4,r3
10000d14:	10c00015 	stw	r3,0(r2)
}
10000d18:	0001883a 	nop
10000d1c:	e037883a 	mov	sp,fp
10000d20:	df000017 	ldw	fp,0(sp)
10000d24:	dec00104 	addi	sp,sp,4
10000d28:	f800283a 	ret

10000d2c <get_Enemy_Botton_Pos>:

/* realX and realY are top center of enemies */

int get_Enemy_Botton_Pos (Enemy * enemy) {
10000d2c:	defffc04 	addi	sp,sp,-16
10000d30:	df000315 	stw	fp,12(sp)
10000d34:	df000304 	addi	fp,sp,12
10000d38:	e13fff15 	stw	r4,-4(fp)
    int enemy_ceil_X = 0;
10000d3c:	e03ffd15 	stw	zero,-12(fp)
    int enemy_ceil_Y = 0;
10000d40:	e03ffe15 	stw	zero,-8(fp)

    switch (enemy->action) {
10000d44:	e0bfff17 	ldw	r2,-4(fp)
10000d48:	10800417 	ldw	r2,16(r2)
10000d4c:	10c001e8 	cmpgeui	r3,r2,7
10000d50:	1800311e 	bne	r3,zero,10000e18 <get_Enemy_Botton_Pos+0xec>
10000d54:	100690ba 	slli	r3,r2,2
10000d58:	00840034 	movhi	r2,4096
10000d5c:	10835b04 	addi	r2,r2,3436
10000d60:	1885883a 	add	r2,r3,r2
10000d64:	10800017 	ldw	r2,0(r2)
10000d68:	1000683a 	jmp	r2
10000d6c:	10000d88 	cmpgei	zero,r2,54
10000d70:	10000dac 	andhi	zero,r2,54
10000d74:	10000dd0 	cmplti	zero,r2,55
10000d78:	10000e18 	cmpnei	zero,r2,56
10000d7c:	10000d88 	cmpgei	zero,r2,54
10000d80:	10000d88 	cmpgei	zero,r2,54
10000d84:	10000df4 	orhi	zero,r2,55
    case 0:
    case 4:
    case 5:
        enemy_ceil_X = enemy->realx + 14;
10000d88:	e0bfff17 	ldw	r2,-4(fp)
10000d8c:	10800017 	ldw	r2,0(r2)
10000d90:	10800384 	addi	r2,r2,14
10000d94:	e0bffd15 	stw	r2,-12(fp)
        enemy_ceil_Y = enemy->realy + 21;
10000d98:	e0bfff17 	ldw	r2,-4(fp)
10000d9c:	10800117 	ldw	r2,4(r2)
10000da0:	10800544 	addi	r2,r2,21
10000da4:	e0bffe15 	stw	r2,-8(fp)
        break;
10000da8:	00001c06 	br	10000e1c <get_Enemy_Botton_Pos+0xf0>
    case 1:
        enemy_ceil_X = enemy->realx + 14;
10000dac:	e0bfff17 	ldw	r2,-4(fp)
10000db0:	10800017 	ldw	r2,0(r2)
10000db4:	10800384 	addi	r2,r2,14
10000db8:	e0bffd15 	stw	r2,-12(fp)
        enemy_ceil_Y = enemy->realy + 21;
10000dbc:	e0bfff17 	ldw	r2,-4(fp)
10000dc0:	10800117 	ldw	r2,4(r2)
10000dc4:	10800544 	addi	r2,r2,21
10000dc8:	e0bffe15 	stw	r2,-8(fp)
        break;
10000dcc:	00001306 	br	10000e1c <get_Enemy_Botton_Pos+0xf0>
    case 2:
        enemy_ceil_X = enemy->realx + 14;
10000dd0:	e0bfff17 	ldw	r2,-4(fp)
10000dd4:	10800017 	ldw	r2,0(r2)
10000dd8:	10800384 	addi	r2,r2,14
10000ddc:	e0bffd15 	stw	r2,-12(fp)
        enemy_ceil_Y = enemy->realy + 46;
10000de0:	e0bfff17 	ldw	r2,-4(fp)
10000de4:	10800117 	ldw	r2,4(r2)
10000de8:	10800b84 	addi	r2,r2,46
10000dec:	e0bffe15 	stw	r2,-8(fp)
        break;
10000df0:	00000a06 	br	10000e1c <get_Enemy_Botton_Pos+0xf0>
    case 6:
        enemy_ceil_X = enemy->realx + 14;
10000df4:	e0bfff17 	ldw	r2,-4(fp)
10000df8:	10800017 	ldw	r2,0(r2)
10000dfc:	10800384 	addi	r2,r2,14
10000e00:	e0bffd15 	stw	r2,-12(fp)
        enemy_ceil_Y = enemy->realy + 26;
10000e04:	e0bfff17 	ldw	r2,-4(fp)
10000e08:	10800117 	ldw	r2,4(r2)
10000e0c:	10800684 	addi	r2,r2,26
10000e10:	e0bffe15 	stw	r2,-8(fp)
        break;
10000e14:	00000106 	br	10000e1c <get_Enemy_Botton_Pos+0xf0>
    default:
        break;
10000e18:	0001883a 	nop
    }
    return ((enemy_ceil_X << 16) | enemy_ceil_Y);
10000e1c:	e0bffd17 	ldw	r2,-12(fp)
10000e20:	1006943a 	slli	r3,r2,16
10000e24:	e0bffe17 	ldw	r2,-8(fp)
10000e28:	1884b03a 	or	r2,r3,r2
}
10000e2c:	e037883a 	mov	sp,fp
10000e30:	df000017 	ldw	fp,0(sp)
10000e34:	dec00104 	addi	sp,sp,4
10000e38:	f800283a 	ret

10000e3c <get_Enemy_Ceil_Pos>:

int get_Enemy_Ceil_Pos (Enemy * enemy) {
10000e3c:	defffc04 	addi	sp,sp,-16
10000e40:	df000315 	stw	fp,12(sp)
10000e44:	df000304 	addi	fp,sp,12
10000e48:	e13fff15 	stw	r4,-4(fp)
    int enemy_ceil_X = 0;
10000e4c:	e03ffd15 	stw	zero,-12(fp)
    int enemy_ceil_Y = 0;
10000e50:	e03ffe15 	stw	zero,-8(fp)

    switch (enemy->action) {
10000e54:	e0bfff17 	ldw	r2,-4(fp)
10000e58:	10800417 	ldw	r2,16(r2)
10000e5c:	10c001e8 	cmpgeui	r3,r2,7
10000e60:	1800311e 	bne	r3,zero,10000f28 <get_Enemy_Ceil_Pos+0xec>
10000e64:	100690ba 	slli	r3,r2,2
10000e68:	00840034 	movhi	r2,4096
10000e6c:	10839f04 	addi	r2,r2,3708
10000e70:	1885883a 	add	r2,r3,r2
10000e74:	10800017 	ldw	r2,0(r2)
10000e78:	1000683a 	jmp	r2
10000e7c:	10000e98 	cmpnei	zero,r2,58
10000e80:	10000ebc 	xorhi	zero,r2,58
10000e84:	10000ee0 	cmpeqi	zero,r2,59
10000e88:	10000f28 	cmpgeui	zero,r2,60
10000e8c:	10000e98 	cmpnei	zero,r2,58
10000e90:	10000e98 	cmpnei	zero,r2,58
10000e94:	10000f04 	addi	zero,r2,60
    case 0:
    case 4:
    case 5:
        enemy_ceil_X = enemy->realx + 14;
10000e98:	e0bfff17 	ldw	r2,-4(fp)
10000e9c:	10800017 	ldw	r2,0(r2)
10000ea0:	10800384 	addi	r2,r2,14
10000ea4:	e0bffd15 	stw	r2,-12(fp)
        enemy_ceil_Y = enemy->realy + 4;
10000ea8:	e0bfff17 	ldw	r2,-4(fp)
10000eac:	10800117 	ldw	r2,4(r2)
10000eb0:	10800104 	addi	r2,r2,4
10000eb4:	e0bffe15 	stw	r2,-8(fp)
        break;
10000eb8:	00001c06 	br	10000f2c <get_Enemy_Ceil_Pos+0xf0>
    case 1:
        enemy_ceil_X = enemy->realx + 14;
10000ebc:	e0bfff17 	ldw	r2,-4(fp)
10000ec0:	10800017 	ldw	r2,0(r2)
10000ec4:	10800384 	addi	r2,r2,14
10000ec8:	e0bffd15 	stw	r2,-12(fp)
        enemy_ceil_Y = enemy->realy + 4;
10000ecc:	e0bfff17 	ldw	r2,-4(fp)
10000ed0:	10800117 	ldw	r2,4(r2)
10000ed4:	10800104 	addi	r2,r2,4
10000ed8:	e0bffe15 	stw	r2,-8(fp)
        break;
10000edc:	00001306 	br	10000f2c <get_Enemy_Ceil_Pos+0xf0>
    case 2:
        enemy_ceil_X = enemy->realx + 14;
10000ee0:	e0bfff17 	ldw	r2,-4(fp)
10000ee4:	10800017 	ldw	r2,0(r2)
10000ee8:	10800384 	addi	r2,r2,14
10000eec:	e0bffd15 	stw	r2,-12(fp)
        enemy_ceil_Y = enemy->realy + 4;
10000ef0:	e0bfff17 	ldw	r2,-4(fp)
10000ef4:	10800117 	ldw	r2,4(r2)
10000ef8:	10800104 	addi	r2,r2,4
10000efc:	e0bffe15 	stw	r2,-8(fp)
        break;
10000f00:	00000a06 	br	10000f2c <get_Enemy_Ceil_Pos+0xf0>
    case 6:
        enemy_ceil_X = enemy->realx + 14;
10000f04:	e0bfff17 	ldw	r2,-4(fp)
10000f08:	10800017 	ldw	r2,0(r2)
10000f0c:	10800384 	addi	r2,r2,14
10000f10:	e0bffd15 	stw	r2,-12(fp)
        enemy_ceil_Y = enemy->realy + 3;
10000f14:	e0bfff17 	ldw	r2,-4(fp)
10000f18:	10800117 	ldw	r2,4(r2)
10000f1c:	108000c4 	addi	r2,r2,3
10000f20:	e0bffe15 	stw	r2,-8(fp)
        break;
10000f24:	00000106 	br	10000f2c <get_Enemy_Ceil_Pos+0xf0>
    default:
        break;
10000f28:	0001883a 	nop
    }
    return ((enemy_ceil_X << 16) | enemy_ceil_Y);
10000f2c:	e0bffd17 	ldw	r2,-12(fp)
10000f30:	1006943a 	slli	r3,r2,16
10000f34:	e0bffe17 	ldw	r2,-8(fp)
10000f38:	1884b03a 	or	r2,r3,r2
}
10000f3c:	e037883a 	mov	sp,fp
10000f40:	df000017 	ldw	fp,0(sp)
10000f44:	dec00104 	addi	sp,sp,4
10000f48:	f800283a 	ret

10000f4c <get_Enemy_Left_Pos>:

int get_Enemy_Left_Pos (Enemy * enemy) {
10000f4c:	defffc04 	addi	sp,sp,-16
10000f50:	df000315 	stw	fp,12(sp)
10000f54:	df000304 	addi	fp,sp,12
10000f58:	e13fff15 	stw	r4,-4(fp)
    int enemy_left_X = 0;
10000f5c:	e03ffd15 	stw	zero,-12(fp)
    int enemy_left_Y = 0;
10000f60:	e03ffe15 	stw	zero,-8(fp)

    switch (enemy->action) {
10000f64:	e0bfff17 	ldw	r2,-4(fp)
10000f68:	10800417 	ldw	r2,16(r2)
10000f6c:	10c001e8 	cmpgeui	r3,r2,7
10000f70:	1800301e 	bne	r3,zero,10001034 <get_Enemy_Left_Pos+0xe8>
10000f74:	100690ba 	slli	r3,r2,2
10000f78:	00840034 	movhi	r2,4096
10000f7c:	1083e304 	addi	r2,r2,3980
10000f80:	1885883a 	add	r2,r3,r2
10000f84:	10800017 	ldw	r2,0(r2)
10000f88:	1000683a 	jmp	r2
10000f8c:	10000fa8 	cmpgeui	zero,r2,62
10000f90:	10000fcc 	andi	zero,r2,63
10000f94:	10000ff0 	cmpltui	zero,r2,63
10000f98:	10001034 	orhi	zero,r2,64
10000f9c:	10000fa8 	cmpgeui	zero,r2,62
10000fa0:	10000fa8 	cmpgeui	zero,r2,62
10000fa4:	10001014 	ori	zero,r2,64
    case 0:
    case 4:
    case 5:
        enemy_left_X = enemy->realx + 4;
10000fa8:	e0bfff17 	ldw	r2,-4(fp)
10000fac:	10800017 	ldw	r2,0(r2)
10000fb0:	10800104 	addi	r2,r2,4
10000fb4:	e0bffd15 	stw	r2,-12(fp)
        enemy_left_Y = enemy->realy + 13;
10000fb8:	e0bfff17 	ldw	r2,-4(fp)
10000fbc:	10800117 	ldw	r2,4(r2)
10000fc0:	10800344 	addi	r2,r2,13
10000fc4:	e0bffe15 	stw	r2,-8(fp)
        break;
10000fc8:	00001b06 	br	10001038 <get_Enemy_Left_Pos+0xec>
    case 1:
        enemy_left_X = enemy->realx + 4;
10000fcc:	e0bfff17 	ldw	r2,-4(fp)
10000fd0:	10800017 	ldw	r2,0(r2)
10000fd4:	10800104 	addi	r2,r2,4
10000fd8:	e0bffd15 	stw	r2,-12(fp)
        enemy_left_Y = enemy->realy + 13;
10000fdc:	e0bfff17 	ldw	r2,-4(fp)
10000fe0:	10800117 	ldw	r2,4(r2)
10000fe4:	10800344 	addi	r2,r2,13
10000fe8:	e0bffe15 	stw	r2,-8(fp)
        break;
10000fec:	00001206 	br	10001038 <get_Enemy_Left_Pos+0xec>
    case 2:
        enemy_left_X = enemy->realx - 7;
10000ff0:	e0bfff17 	ldw	r2,-4(fp)
10000ff4:	10800017 	ldw	r2,0(r2)
10000ff8:	10bffe44 	addi	r2,r2,-7
10000ffc:	e0bffd15 	stw	r2,-12(fp)
        enemy_left_Y = enemy->realy + 25;
10001000:	e0bfff17 	ldw	r2,-4(fp)
10001004:	10800117 	ldw	r2,4(r2)
10001008:	10800644 	addi	r2,r2,25
1000100c:	e0bffe15 	stw	r2,-8(fp)
        break;
10001010:	00000906 	br	10001038 <get_Enemy_Left_Pos+0xec>
    case 6:
        enemy_left_X = enemy->realx - 0;
10001014:	e0bfff17 	ldw	r2,-4(fp)
10001018:	10800017 	ldw	r2,0(r2)
1000101c:	e0bffd15 	stw	r2,-12(fp)
        enemy_left_Y = enemy->realy + 14;
10001020:	e0bfff17 	ldw	r2,-4(fp)
10001024:	10800117 	ldw	r2,4(r2)
10001028:	10800384 	addi	r2,r2,14
1000102c:	e0bffe15 	stw	r2,-8(fp)
        break;
10001030:	00000106 	br	10001038 <get_Enemy_Left_Pos+0xec>
    default:
        break;
10001034:	0001883a 	nop
    }
    return ((enemy_left_X << 16) | enemy_left_Y);
10001038:	e0bffd17 	ldw	r2,-12(fp)
1000103c:	1006943a 	slli	r3,r2,16
10001040:	e0bffe17 	ldw	r2,-8(fp)
10001044:	1884b03a 	or	r2,r3,r2
}
10001048:	e037883a 	mov	sp,fp
1000104c:	df000017 	ldw	fp,0(sp)
10001050:	dec00104 	addi	sp,sp,4
10001054:	f800283a 	ret

10001058 <get_Enemy_Right_Pos>:

int get_Enemy_Right_Pos (Enemy * enemy) {
10001058:	defffc04 	addi	sp,sp,-16
1000105c:	df000315 	stw	fp,12(sp)
10001060:	df000304 	addi	fp,sp,12
10001064:	e13fff15 	stw	r4,-4(fp)
    int enemy_right_X = 0;
10001068:	e03ffd15 	stw	zero,-12(fp)
    int enemy_right_Y = 0;
1000106c:	e03ffe15 	stw	zero,-8(fp)

    switch (enemy->action) {
10001070:	e0bfff17 	ldw	r2,-4(fp)
10001074:	10800417 	ldw	r2,16(r2)
10001078:	10c001e8 	cmpgeui	r3,r2,7
1000107c:	1800311e 	bne	r3,zero,10001144 <get_Enemy_Right_Pos+0xec>
10001080:	100690ba 	slli	r3,r2,2
10001084:	00840034 	movhi	r2,4096
10001088:	10842604 	addi	r2,r2,4248
1000108c:	1885883a 	add	r2,r3,r2
10001090:	10800017 	ldw	r2,0(r2)
10001094:	1000683a 	jmp	r2
10001098:	100010b4 	orhi	zero,r2,66
1000109c:	100010d8 	cmpnei	zero,r2,67
100010a0:	100010fc 	xorhi	zero,r2,67
100010a4:	10001144 	addi	zero,r2,69
100010a8:	100010b4 	orhi	zero,r2,66
100010ac:	100010b4 	orhi	zero,r2,66
100010b0:	10001120 	cmpeqi	zero,r2,68
    case 0:
    case 4:
    case 5:
        enemy_right_X = enemy->realx + 24;
100010b4:	e0bfff17 	ldw	r2,-4(fp)
100010b8:	10800017 	ldw	r2,0(r2)
100010bc:	10800604 	addi	r2,r2,24
100010c0:	e0bffd15 	stw	r2,-12(fp)
        enemy_right_Y = enemy->realy + 13;
100010c4:	e0bfff17 	ldw	r2,-4(fp)
100010c8:	10800117 	ldw	r2,4(r2)
100010cc:	10800344 	addi	r2,r2,13
100010d0:	e0bffe15 	stw	r2,-8(fp)
        break;
100010d4:	00001c06 	br	10001148 <get_Enemy_Right_Pos+0xf0>

    case 1:
        enemy_right_X = enemy->realx + 24;
100010d8:	e0bfff17 	ldw	r2,-4(fp)
100010dc:	10800017 	ldw	r2,0(r2)
100010e0:	10800604 	addi	r2,r2,24
100010e4:	e0bffd15 	stw	r2,-12(fp)
        enemy_right_Y = enemy->realy + 13;
100010e8:	e0bfff17 	ldw	r2,-4(fp)
100010ec:	10800117 	ldw	r2,4(r2)
100010f0:	10800344 	addi	r2,r2,13
100010f4:	e0bffe15 	stw	r2,-8(fp)
        break;
100010f8:	00001306 	br	10001148 <get_Enemy_Right_Pos+0xf0>
    case 2:
        enemy_right_X = enemy->realx + 35;
100010fc:	e0bfff17 	ldw	r2,-4(fp)
10001100:	10800017 	ldw	r2,0(r2)
10001104:	108008c4 	addi	r2,r2,35
10001108:	e0bffd15 	stw	r2,-12(fp)
        enemy_right_Y = enemy->realy + 25;
1000110c:	e0bfff17 	ldw	r2,-4(fp)
10001110:	10800117 	ldw	r2,4(r2)
10001114:	10800644 	addi	r2,r2,25
10001118:	e0bffe15 	stw	r2,-8(fp)
        break;
1000111c:	00000a06 	br	10001148 <get_Enemy_Right_Pos+0xf0>
    case 6:
        enemy_right_X = enemy->realx + 28;
10001120:	e0bfff17 	ldw	r2,-4(fp)
10001124:	10800017 	ldw	r2,0(r2)
10001128:	10800704 	addi	r2,r2,28
1000112c:	e0bffd15 	stw	r2,-12(fp)
        enemy_right_Y = enemy->realy + 14;
10001130:	e0bfff17 	ldw	r2,-4(fp)
10001134:	10800117 	ldw	r2,4(r2)
10001138:	10800384 	addi	r2,r2,14
1000113c:	e0bffe15 	stw	r2,-8(fp)
        break;
10001140:	00000106 	br	10001148 <get_Enemy_Right_Pos+0xf0>
    default:
        break;
10001144:	0001883a 	nop
    }
    return ((enemy_right_X << 16) | enemy_right_Y);
10001148:	e0bffd17 	ldw	r2,-12(fp)
1000114c:	1006943a 	slli	r3,r2,16
10001150:	e0bffe17 	ldw	r2,-8(fp)
10001154:	1884b03a 	or	r2,r3,r2
}
10001158:	e037883a 	mov	sp,fp
1000115c:	df000017 	ldw	fp,0(sp)
10001160:	dec00104 	addi	sp,sp,4
10001164:	f800283a 	ret

10001168 <GameStart>:
#include "enemy.h"
#include "usb_main.h"

#include <stdio.h>

void GameStart() {
10001168:	defff504 	addi	sp,sp,-44
1000116c:	dfc00a15 	stw	ra,40(sp)
10001170:	df000915 	stw	fp,36(sp)
10001174:	df000904 	addi	fp,sp,36
    Enemy * lemon;
    Enemy * fire;
    Enemy * monkey;
    Enemy * lightning;

    int end = 0;
10001178:	e03ff815 	stw	zero,-32(fp)
    int keycode = 0;
1000117c:	e03ff915 	stw	zero,-28(fp)
    int pre_keycode = 0;
10001180:	e03ffa15 	stw	zero,-24(fp)

    usb_initialize();
10001184:	0005a280 	call	10005a28 <usb_initialize>

    // Start of the game loop
    START:
    end = 0;
10001188:	e03ff815 	stw	zero,-32(fp)
    keycode = 0;
1000118c:	e03ff915 	stw	zero,-28(fp)
    pre_keycode = 0;
10001190:	e03ffa15 	stw	zero,-24(fp)

    initial_Registers();
10001194:	00014480 	call	10001448 <initial_Registers>
    initial_Star(star);
10001198:	e13ffb17 	ldw	r4,-20(fp)
1000119c:	000438c0 	call	1000438c <initial_Star>
    initial_Kirby(kirby);
100011a0:	e13ffc17 	ldw	r4,-16(fp)
100011a4:	00016dc0 	call	100016dc <initial_Kirby>

    initial_enemy(lemon,3);
100011a8:	014000c4 	movi	r5,3
100011ac:	e13ffd17 	ldw	r4,-12(fp)
100011b0:	000046c0 	call	1000046c <initial_enemy>
    initial_enemy(fire,1);
100011b4:	01400044 	movi	r5,1
100011b8:	e13ffe17 	ldw	r4,-8(fp)
100011bc:	000046c0 	call	1000046c <initial_enemy>
//    initial_enemy(monkey,2);
    initial_enemy(lightning,0);
100011c0:	000b883a 	mov	r5,zero
100011c4:	e13fff17 	ldw	r4,-4(fp)
100011c8:	000046c0 	call	1000046c <initial_enemy>

    while (get_keycode_value() != 0x0028) {
100011cc:	00000206 	br	100011d8 <GameStart+0x70>
        draw_Start_Image(kirby);
100011d0:	e13ffc17 	ldw	r4,-16(fp)
100011d4:	00015240 	call	10001524 <draw_Start_Image>
    initial_enemy(lemon,3);
    initial_enemy(fire,1);
//    initial_enemy(monkey,2);
    initial_enemy(lightning,0);

    while (get_keycode_value() != 0x0028) {
100011d8:	00065200 	call	10006520 <get_keycode_value>
100011dc:	10800a18 	cmpnei	r2,r2,40
100011e0:	103ffb1e 	bne	r2,zero,100011d0 <__alt_data_end+0xf80011d0>
        draw_Start_Image(kirby);
    }

    REG_15_GAME_CONTROL = 0x0000000e;
100011e4:	d09b2217 	ldw	r2,27784(gp)
100011e8:	10800f04 	addi	r2,r2,60
100011ec:	00c00384 	movi	r3,14
100011f0:	10c00015 	stw	r3,0(r2)

    while (!end)
100011f4:	00008406 	br	10001408 <GameStart+0x2a0>
    {
        pre_keycode = keycode;
100011f8:	e0bff917 	ldw	r2,-28(fp)
100011fc:	e0bffa15 	stw	r2,-24(fp)
        keycode = get_keycode_value();
10001200:	00065200 	call	10006520 <get_keycode_value>
10001204:	e0bff915 	stw	r2,-28(fp)

        // Renew enemies
        if (kirby->x >= (150 + lemon->dist + SCREEN_WIDTH/2))
10001208:	e0bffc17 	ldw	r2,-16(fp)
1000120c:	10c00017 	ldw	r3,0(r2)
10001210:	e0bffd17 	ldw	r2,-12(fp)
10001214:	10800917 	ldw	r2,36(r2)
10001218:	108042c4 	addi	r2,r2,267
1000121c:	18800316 	blt	r3,r2,1000122c <GameStart+0xc4>
            initial_enemy(lemon, 3);
10001220:	014000c4 	movi	r5,3
10001224:	e13ffd17 	ldw	r4,-12(fp)
10001228:	000046c0 	call	1000046c <initial_enemy>
//        if ((kirby->x >= (320 + monkey->dist + SCREEN_WIDTH/2)) || (kirby->x <= (320 - SCREEN_WIDTH/2)))
//            initial_enemy(monkey, 2);
        if ((kirby->x >= (540 + fire->dist + SCREEN_WIDTH/2)) || (kirby->x <= (540 - SCREEN_WIDTH/2)))
1000122c:	e0bffc17 	ldw	r2,-16(fp)
10001230:	10c00017 	ldw	r3,0(r2)
10001234:	e0bffe17 	ldw	r2,-8(fp)
10001238:	10800917 	ldw	r2,36(r2)
1000123c:	1080a444 	addi	r2,r2,657
10001240:	1880040e 	bge	r3,r2,10001254 <GameStart+0xec>
10001244:	e0bffc17 	ldw	r2,-16(fp)
10001248:	10800017 	ldw	r2,0(r2)
1000124c:	10806a08 	cmpgei	r2,r2,424
10001250:	1000031e 	bne	r2,zero,10001260 <GameStart+0xf8>
            initial_enemy(fire, 1);
10001254:	01400044 	movi	r5,1
10001258:	e13ffe17 	ldw	r4,-8(fp)
1000125c:	000046c0 	call	1000046c <initial_enemy>
        if ((kirby->x >= (700 + lightning->dist + SCREEN_WIDTH/2)) || (kirby->x <= (700 - SCREEN_WIDTH/2)))
10001260:	e0bffc17 	ldw	r2,-16(fp)
10001264:	10c00017 	ldw	r3,0(r2)
10001268:	e0bfff17 	ldw	r2,-4(fp)
1000126c:	10800917 	ldw	r2,36(r2)
10001270:	1080cc44 	addi	r2,r2,817
10001274:	1880040e 	bge	r3,r2,10001288 <GameStart+0x120>
10001278:	e0bffc17 	ldw	r2,-16(fp)
1000127c:	10800017 	ldw	r2,0(r2)
10001280:	10809208 	cmpgei	r2,r2,584
10001284:	1000031e 	bne	r2,zero,10001294 <GameStart+0x12c>
            initial_enemy(lightning,0);
10001288:	000b883a 	mov	r5,zero
1000128c:	e13fff17 	ldw	r4,-4(fp)
10001290:	000046c0 	call	1000046c <initial_enemy>
        
        
        AI_enemy(lemon, kirby, 150, 30);
10001294:	01c00784 	movi	r7,30
10001298:	01802584 	movi	r6,150
1000129c:	e17ffc17 	ldw	r5,-16(fp)
100012a0:	e13ffd17 	ldw	r4,-12(fp)
100012a4:	000026c0 	call	1000026c <AI_enemy>
//        AI_enemy(monkey, kirby, 320, 95);
        AI_enemy(fire, kirby, 540, 64);
100012a8:	01c01004 	movi	r7,64
100012ac:	01808704 	movi	r6,540
100012b0:	e17ffc17 	ldw	r5,-16(fp)
100012b4:	e13ffe17 	ldw	r4,-8(fp)
100012b8:	000026c0 	call	1000026c <AI_enemy>
        AI_enemy(lightning, kirby, 700, 113);
100012bc:	01c01c44 	movi	r7,113
100012c0:	0180af04 	movi	r6,700
100012c4:	e17ffc17 	ldw	r5,-16(fp)
100012c8:	e13fff17 	ldw	r4,-4(fp)
100012cc:	000026c0 	call	1000026c <AI_enemy>
//            updateKirby(kirby, star, monkey, keycode, pre_keycode);
//            upload_Kirby_Info(kirby);
//            if (star->appear == 1)
//        	    spit_Star(kirby, star, monkey);
//        } else
        if ((sqr_Dis_Kirby_Enemy(kirby, lemon) <= ENEMY_DETECT_DIS_SQRT * ENEMY_DETECT_DIS_SQRT) && (lemon->health != 0)) {
100012d0:	e17ffd17 	ldw	r5,-12(fp)
100012d4:	e13ffc17 	ldw	r4,-16(fp)
100012d8:	0003ed80 	call	10003ed8 <sqr_Dis_Kirby_Enemy>
100012dc:	1095f948 	cmpgei	r2,r2,22501
100012e0:	1000151e 	bne	r2,zero,10001338 <GameStart+0x1d0>
100012e4:	e0bffd17 	ldw	r2,-12(fp)
100012e8:	10800317 	ldw	r2,12(r2)
100012ec:	10001226 	beq	r2,zero,10001338 <GameStart+0x1d0>
            updateKirby(kirby, star, lemon, keycode, pre_keycode);
100012f0:	e0bffa17 	ldw	r2,-24(fp)
100012f4:	d8800015 	stw	r2,0(sp)
100012f8:	e1fff917 	ldw	r7,-28(fp)
100012fc:	e1bffd17 	ldw	r6,-12(fp)
10001300:	e17ffb17 	ldw	r5,-20(fp)
10001304:	e13ffc17 	ldw	r4,-16(fp)
10001308:	00019c80 	call	100019c8 <updateKirby>
            upload_Kirby_Info(kirby);
1000130c:	e13ffc17 	ldw	r4,-16(fp)
10001310:	00017940 	call	10001794 <upload_Kirby_Info>
            if (star->appear == 1)
10001314:	e0bffb17 	ldw	r2,-20(fp)
10001318:	10800417 	ldw	r2,16(r2)
1000131c:	10800058 	cmpnei	r2,r2,1
10001320:	1000301e 	bne	r2,zero,100013e4 <GameStart+0x27c>
        	    spit_Star(kirby, star, lemon);
10001324:	e1bffd17 	ldw	r6,-12(fp)
10001328:	e17ffb17 	ldw	r5,-20(fp)
1000132c:	e13ffc17 	ldw	r4,-16(fp)
10001330:	00043e00 	call	100043e0 <spit_Star>
//        	    spit_Star(kirby, star, monkey);
//        } else
        if ((sqr_Dis_Kirby_Enemy(kirby, lemon) <= ENEMY_DETECT_DIS_SQRT * ENEMY_DETECT_DIS_SQRT) && (lemon->health != 0)) {
            updateKirby(kirby, star, lemon, keycode, pre_keycode);
            upload_Kirby_Info(kirby);
            if (star->appear == 1)
10001334:	00002b06 	br	100013e4 <GameStart+0x27c>
        	    spit_Star(kirby, star, lemon);
        } else if ((sqr_Dis_Kirby_Enemy(kirby, fire) <= ENEMY_DETECT_DIS_SQRT * ENEMY_DETECT_DIS_SQRT) && (fire->health != 0)) {
10001338:	e17ffe17 	ldw	r5,-8(fp)
1000133c:	e13ffc17 	ldw	r4,-16(fp)
10001340:	0003ed80 	call	10003ed8 <sqr_Dis_Kirby_Enemy>
10001344:	1095f948 	cmpgei	r2,r2,22501
10001348:	1000151e 	bne	r2,zero,100013a0 <GameStart+0x238>
1000134c:	e0bffe17 	ldw	r2,-8(fp)
10001350:	10800317 	ldw	r2,12(r2)
10001354:	10001226 	beq	r2,zero,100013a0 <GameStart+0x238>
            updateKirby(kirby, star, fire, keycode, pre_keycode);
10001358:	e0bffa17 	ldw	r2,-24(fp)
1000135c:	d8800015 	stw	r2,0(sp)
10001360:	e1fff917 	ldw	r7,-28(fp)
10001364:	e1bffe17 	ldw	r6,-8(fp)
10001368:	e17ffb17 	ldw	r5,-20(fp)
1000136c:	e13ffc17 	ldw	r4,-16(fp)
10001370:	00019c80 	call	100019c8 <updateKirby>
            upload_Kirby_Info(kirby);
10001374:	e13ffc17 	ldw	r4,-16(fp)
10001378:	00017940 	call	10001794 <upload_Kirby_Info>
            if (star->appear == 1)
1000137c:	e0bffb17 	ldw	r2,-20(fp)
10001380:	10800417 	ldw	r2,16(r2)
10001384:	10800058 	cmpnei	r2,r2,1
10001388:	1000161e 	bne	r2,zero,100013e4 <GameStart+0x27c>
        	    spit_Star(kirby, star, fire);
1000138c:	e1bffe17 	ldw	r6,-8(fp)
10001390:	e17ffb17 	ldw	r5,-20(fp)
10001394:	e13ffc17 	ldw	r4,-16(fp)
10001398:	00043e00 	call	100043e0 <spit_Star>
            if (star->appear == 1)
        	    spit_Star(kirby, star, lemon);
        } else if ((sqr_Dis_Kirby_Enemy(kirby, fire) <= ENEMY_DETECT_DIS_SQRT * ENEMY_DETECT_DIS_SQRT) && (fire->health != 0)) {
            updateKirby(kirby, star, fire, keycode, pre_keycode);
            upload_Kirby_Info(kirby);
            if (star->appear == 1)
1000139c:	00001106 	br	100013e4 <GameStart+0x27c>
        	    spit_Star(kirby, star, fire);
        } else {
            updateKirby(kirby, star, lightning, keycode, pre_keycode);
100013a0:	e0bffa17 	ldw	r2,-24(fp)
100013a4:	d8800015 	stw	r2,0(sp)
100013a8:	e1fff917 	ldw	r7,-28(fp)
100013ac:	e1bfff17 	ldw	r6,-4(fp)
100013b0:	e17ffb17 	ldw	r5,-20(fp)
100013b4:	e13ffc17 	ldw	r4,-16(fp)
100013b8:	00019c80 	call	100019c8 <updateKirby>
            upload_Kirby_Info(kirby);
100013bc:	e13ffc17 	ldw	r4,-16(fp)
100013c0:	00017940 	call	10001794 <upload_Kirby_Info>
            if (star->appear == 1)
100013c4:	e0bffb17 	ldw	r2,-20(fp)
100013c8:	10800417 	ldw	r2,16(r2)
100013cc:	10800058 	cmpnei	r2,r2,1
100013d0:	1000041e 	bne	r2,zero,100013e4 <GameStart+0x27c>
        	    spit_Star(kirby, star, lightning);
100013d4:	e1bfff17 	ldw	r6,-4(fp)
100013d8:	e17ffb17 	ldw	r5,-20(fp)
100013dc:	e13ffc17 	ldw	r4,-16(fp)
100013e0:	00043e00 	call	100043e0 <spit_Star>
        }

        if ((kirby->health == 0) || (kirby->entered_door == 1))
100013e4:	e0bffc17 	ldw	r2,-16(fp)
100013e8:	10800517 	ldw	r2,20(r2)
100013ec:	10000426 	beq	r2,zero,10001400 <GameStart+0x298>
100013f0:	e0bffc17 	ldw	r2,-16(fp)
100013f4:	10801017 	ldw	r2,64(r2)
100013f8:	10800058 	cmpnei	r2,r2,1
100013fc:	1000021e 	bne	r2,zero,10001408 <GameStart+0x2a0>
            end = 1;
10001400:	00800044 	movi	r2,1
10001404:	e0bff815 	stw	r2,-32(fp)
        draw_Start_Image(kirby);
    }

    REG_15_GAME_CONTROL = 0x0000000e;

    while (!end)
10001408:	e0bff817 	ldw	r2,-32(fp)
1000140c:	103f7a26 	beq	r2,zero,100011f8 <__alt_data_end+0xf80011f8>

        if ((kirby->health == 0) || (kirby->entered_door == 1))
            end = 1;
    }

    goto START;
10001410:	003f5d06 	br	10001188 <__alt_data_end+0xf8001188>

10001414 <initial_Game_State>:
}


void initial_Game_State (Game * game_state) {
10001414:	defffe04 	addi	sp,sp,-8
10001418:	df000115 	stw	fp,4(sp)
1000141c:	df000104 	addi	fp,sp,4
10001420:	e13fff15 	stw	r4,-4(fp)
    game_state->start = 0;
10001424:	e0bfff17 	ldw	r2,-4(fp)
10001428:	10000015 	stw	zero,0(r2)
    game_state->end = 0;
1000142c:	e0bfff17 	ldw	r2,-4(fp)
10001430:	10000115 	stw	zero,4(r2)
}
10001434:	0001883a 	nop
10001438:	e037883a 	mov	sp,fp
1000143c:	df000017 	ldw	fp,0(sp)
10001440:	dec00104 	addi	sp,sp,4
10001444:	f800283a 	ret

10001448 <initial_Registers>:


void initial_Registers() {
10001448:	deffff04 	addi	sp,sp,-4
1000144c:	df000015 	stw	fp,0(sp)
10001450:	d839883a 	mov	fp,sp
    REG_0_MAP_INFO      = 0;
10001454:	d09b2217 	ldw	r2,27784(gp)
10001458:	10000015 	stw	zero,0(r2)
    REG_1_KIRBY_IMAGE   = 0;
1000145c:	d09b2217 	ldw	r2,27784(gp)
10001460:	10800104 	addi	r2,r2,4
10001464:	10000015 	stw	zero,0(r2)
    REG_2_KIRBY_MAP_POS = 0;
10001468:	d09b2217 	ldw	r2,27784(gp)
1000146c:	10800204 	addi	r2,r2,8
10001470:	10000015 	stw	zero,0(r2)
    REG_3_STAR          = 0;
10001474:	d09b2217 	ldw	r2,27784(gp)
10001478:	10800304 	addi	r2,r2,12
1000147c:	10000015 	stw	zero,0(r2)
    REG_4_              = 0;
10001480:	d09b2217 	ldw	r2,27784(gp)
10001484:	10800404 	addi	r2,r2,16
10001488:	10000015 	stw	zero,0(r2)
    REG_5_              = 0;
1000148c:	d09b2217 	ldw	r2,27784(gp)
10001490:	10800504 	addi	r2,r2,20
10001494:	10000015 	stw	zero,0(r2)
    REG_6_              = 0;
10001498:	d09b2217 	ldw	r2,27784(gp)
1000149c:	10800604 	addi	r2,r2,24
100014a0:	10000015 	stw	zero,0(r2)
    REG_7_              = 0;
100014a4:	d09b2217 	ldw	r2,27784(gp)
100014a8:	10800704 	addi	r2,r2,28
100014ac:	10000015 	stw	zero,0(r2)
    REG_8_              = 0;
100014b0:	d09b2217 	ldw	r2,27784(gp)
100014b4:	10800804 	addi	r2,r2,32
100014b8:	10000015 	stw	zero,0(r2)
    REG_9_              = 0;
100014bc:	d09b2217 	ldw	r2,27784(gp)
100014c0:	10800904 	addi	r2,r2,36
100014c4:	10000015 	stw	zero,0(r2)
    REG_10_             = 0;
100014c8:	d09b2217 	ldw	r2,27784(gp)
100014cc:	10800a04 	addi	r2,r2,40
100014d0:	10000015 	stw	zero,0(r2)
    REG_11_             = 0;
100014d4:	d09b2217 	ldw	r2,27784(gp)
100014d8:	10800b04 	addi	r2,r2,44
100014dc:	10000015 	stw	zero,0(r2)
    REG_12_             = 0;
100014e0:	d09b2217 	ldw	r2,27784(gp)
100014e4:	10800c04 	addi	r2,r2,48
100014e8:	10000015 	stw	zero,0(r2)
    REG_13_             = 0;
100014ec:	d09b2217 	ldw	r2,27784(gp)
100014f0:	10800d04 	addi	r2,r2,52
100014f4:	10000015 	stw	zero,0(r2)
    REG_14_             = 0;
100014f8:	d09b2217 	ldw	r2,27784(gp)
100014fc:	10800e04 	addi	r2,r2,56
10001500:	10000015 	stw	zero,0(r2)
    REG_15_GAME_CONTROL = 0;
10001504:	d09b2217 	ldw	r2,27784(gp)
10001508:	10800f04 	addi	r2,r2,60
1000150c:	10000015 	stw	zero,0(r2)
}
10001510:	0001883a 	nop
10001514:	e037883a 	mov	sp,fp
10001518:	df000017 	ldw	fp,0(sp)
1000151c:	dec00104 	addi	sp,sp,4
10001520:	f800283a 	ret

10001524 <draw_Start_Image>:


void draw_Start_Image(Kirby * kirby) {
10001524:	defffd04 	addi	sp,sp,-12
10001528:	dfc00215 	stw	ra,8(sp)
1000152c:	df000115 	stw	fp,4(sp)
10001530:	df000104 	addi	fp,sp,4
10001534:	e13fff15 	stw	r4,-4(fp)
    REG_15_GAME_CONTROL = 0x00000000;
10001538:	d09b2217 	ldw	r2,27784(gp)
1000153c:	10800f04 	addi	r2,r2,60
10001540:	10000015 	stw	zero,0(r2)
    upload_Kirby_Info(kirby);
10001544:	e13fff17 	ldw	r4,-4(fp)
10001548:	00017940 	call	10001794 <upload_Kirby_Info>
}
1000154c:	0001883a 	nop
10001550:	e037883a 	mov	sp,fp
10001554:	dfc00117 	ldw	ra,4(sp)
10001558:	df000017 	ldw	fp,0(sp)
1000155c:	dec00204 	addi	sp,sp,8
10001560:	f800283a 	ret

10001564 <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
10001564:	deffff04 	addi	sp,sp,-4
10001568:	df000015 	stw	fp,0(sp)
1000156c:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
10001570:	00801c04 	movi	r2,112
10001574:	00c00044 	movi	r3,1
10001578:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
1000157c:	00802004 	movi	r2,128
10001580:	00c00044 	movi	r3,1
10001584:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10001588:	00802804 	movi	r2,160
1000158c:	00c00044 	movi	r3,1
10001590:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
10001594:	00802404 	movi	r2,144
10001598:	00c00044 	movi	r3,1
1000159c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
100015a0:	00803004 	movi	r2,192
100015a4:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
100015a8:	00802c04 	movi	r2,176
100015ac:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
100015b0:	00802004 	movi	r2,128
100015b4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
100015b8:	00801c04 	movi	r2,112
100015bc:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
100015c0:	00801c04 	movi	r2,112
100015c4:	00c00044 	movi	r3,1
100015c8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100015cc:	00802004 	movi	r2,128
100015d0:	00c00044 	movi	r3,1
100015d4:	10c00005 	stb	r3,0(r2)
}
100015d8:	0001883a 	nop
100015dc:	e037883a 	mov	sp,fp
100015e0:	df000017 	ldw	fp,0(sp)
100015e4:	dec00104 	addi	sp,sp,4
100015e8:	f800283a 	ret

100015ec <IO_write>:


void IO_write(alt_u8 Address, alt_u16 Data)
{
100015ec:	defffd04 	addi	sp,sp,-12
100015f0:	df000215 	stw	fp,8(sp)
100015f4:	df000204 	addi	fp,sp,8
100015f8:	2007883a 	mov	r3,r4
100015fc:	2805883a 	mov	r2,r5
10001600:	e0fffe05 	stb	r3,-8(fp)
10001604:	e0bfff0d 	sth	r2,-4(fp)
	//*otg_hpi_data = Data;


	//*otg_hpi_w = 1;
	// Disable read, enable CS and write, prepare address and data to be written
	*otg_hpi_r = 1;
10001608:	00802804 	movi	r2,160
1000160c:	00c00044 	movi	r3,1
10001610:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = Address;
10001614:	00803004 	movi	r2,192
10001618:	e0fffe03 	ldbu	r3,-8(fp)
1000161c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
10001620:	00802c04 	movi	r2,176
10001624:	e0ffff0b 	ldhu	r3,-4(fp)
10001628:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
1000162c:	00802004 	movi	r2,128
10001630:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10001634:	00802404 	movi	r2,144
10001638:	10000005 	stb	zero,0(r2)

	// Disable write and CS
	*otg_hpi_w = 1;
1000163c:	00802404 	movi	r2,144
10001640:	00c00044 	movi	r3,1
10001644:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10001648:	00802004 	movi	r2,128
1000164c:	00c00044 	movi	r3,1
10001650:	10c00005 	stb	r3,0(r2)
}
10001654:	0001883a 	nop
10001658:	e037883a 	mov	sp,fp
1000165c:	df000017 	ldw	fp,0(sp)
10001660:	dec00104 	addi	sp,sp,4
10001664:	f800283a 	ret

10001668 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
10001668:	defffd04 	addi	sp,sp,-12
1000166c:	df000215 	stw	fp,8(sp)
10001670:	df000204 	addi	fp,sp,8
10001674:	2005883a 	mov	r2,r4
10001678:	e0bfff05 	stb	r2,-4(fp)
	//*otg_hpi_address = Address;
	//*otg_hpi_r = 0;
	//*otg_hpi_data = Data;
	//*otg_hpi_r = 1;
	// Enable select chip and read, disable write, prepare address
	*otg_hpi_w = 1;
1000167c:	00802404 	movi	r2,144
10001680:	00c00044 	movi	r3,1
10001684:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = Address;
10001688:	00803004 	movi	r2,192
1000168c:	e0ffff03 	ldbu	r3,-4(fp)
10001690:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10001694:	00802004 	movi	r2,128
10001698:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
1000169c:	00802804 	movi	r2,160
100016a0:	10000005 	stb	zero,0(r2)

	// Read data to temporary variable
	temp = *otg_hpi_data;
100016a4:	00802c04 	movi	r2,176
100016a8:	10800017 	ldw	r2,0(r2)
100016ac:	e0bffe0d 	sth	r2,-8(fp)

	// Disable CS and read
	*otg_hpi_cs = 1;
100016b0:	00802004 	movi	r2,128
100016b4:	00c00044 	movi	r3,1
100016b8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
100016bc:	00802804 	movi	r2,160
100016c0:	00c00044 	movi	r3,1
100016c4:	10c00005 	stb	r3,0(r2)

	//printf("%x\n",temp);
	return temp;
100016c8:	e0bffe0b 	ldhu	r2,-8(fp)
}
100016cc:	e037883a 	mov	sp,fp
100016d0:	df000017 	ldw	fp,0(sp)
100016d4:	dec00104 	addi	sp,sp,4
100016d8:	f800283a 	ret

100016dc <initial_Kirby>:
#include "usb_main.h"
#include "star.h"

// #define TEST_EDGE

void initial_Kirby(Kirby * kirby){
100016dc:	defffe04 	addi	sp,sp,-8
100016e0:	df000115 	stw	fp,4(sp)
100016e4:	df000104 	addi	fp,sp,4
100016e8:	e13fff15 	stw	r4,-4(fp)
    kirby->x = KIRBY_START_X;
100016ec:	e0bfff17 	ldw	r2,-4(fp)
100016f0:	00c00144 	movi	r3,5
100016f4:	10c00015 	stw	r3,0(r2)
    kirby->y = KIRBY_START_Y;
100016f8:	e0bfff17 	ldw	r2,-4(fp)
100016fc:	00c018c4 	movi	r3,99
10001700:	10c00115 	stw	r3,4(r2)
    kirby->map = 0;
10001704:	e0bfff17 	ldw	r2,-4(fp)
10001708:	10000215 	stw	zero,8(r2)
    kirby->image = 0;
1000170c:	e0bfff17 	ldw	r2,-4(fp)
10001710:	10000315 	stw	zero,12(r2)
    kirby->is_left = 0;
10001714:	e0bfff17 	ldw	r2,-4(fp)
10001718:	10000415 	stw	zero,16(r2)
    kirby->health = 6;
1000171c:	e0bfff17 	ldw	r2,-4(fp)
10001720:	00c00184 	movi	r3,6
10001724:	10c00515 	stw	r3,20(r2)
    kirby->action = 0;
10001728:	e0bfff17 	ldw	r2,-4(fp)
1000172c:	10000615 	stw	zero,24(r2)
    kirby->frame = 0;
10001730:	e0bfff17 	ldw	r2,-4(fp)
10001734:	10000715 	stw	zero,28(r2)
    kirby->in_slope = 0;
10001738:	e0bfff17 	ldw	r2,-4(fp)
1000173c:	10000815 	stw	zero,32(r2)
    kirby->in_air = 0;
10001740:	e0bfff17 	ldw	r2,-4(fp)
10001744:	10000915 	stw	zero,36(r2)
    kirby->is_inhaled = 0;
10001748:	e0bfff17 	ldw	r2,-4(fp)
1000174c:	10000a15 	stw	zero,40(r2)
    kirby->damaging = 0;
10001750:	e0bfff17 	ldw	r2,-4(fp)
10001754:	10000b15 	stw	zero,44(r2)
    kirby->inhaling = 0;
10001758:	e0bfff17 	ldw	r2,-4(fp)
1000175c:	10000c15 	stw	zero,48(r2)
    kirby->spitting = 0;
10001760:	e0bfff17 	ldw	r2,-4(fp)
10001764:	10000d15 	stw	zero,52(r2)
    kirby->kicking = 0;
10001768:	e0bfff17 	ldw	r2,-4(fp)
1000176c:	10000e15 	stw	zero,56(r2)
    kirby->gulping = 0;
10001770:	e0bfff17 	ldw	r2,-4(fp)
10001774:	10000f15 	stw	zero,60(r2)
    kirby->entered_door = 0;
10001778:	e0bfff17 	ldw	r2,-4(fp)
1000177c:	10001015 	stw	zero,64(r2)
}
10001780:	0001883a 	nop
10001784:	e037883a 	mov	sp,fp
10001788:	df000017 	ldw	fp,0(sp)
1000178c:	dec00104 	addi	sp,sp,4
10001790:	f800283a 	ret

10001794 <upload_Kirby_Info>:

void upload_Kirby_Info(Kirby * kirby) {
10001794:	defff504 	addi	sp,sp,-44
10001798:	dfc00a15 	stw	ra,40(sp)
1000179c:	df000915 	stw	fp,36(sp)
100017a0:	df000904 	addi	fp,sp,36
100017a4:	e13fff15 	stw	r4,-4(fp)
//    int Kirby_Pos_X = kirby->x;
//    int Kirby_Pos_Y = kirby->y;
    int Kirby_Image_X = kirby->frame;
100017a8:	e0bfff17 	ldw	r2,-4(fp)
100017ac:	10800717 	ldw	r2,28(r2)
100017b0:	e0bffc15 	stw	r2,-16(fp)
    int Kirby_Image_Y = kirby->action;
100017b4:	e0bfff17 	ldw	r2,-4(fp)
100017b8:	10800617 	ldw	r2,24(r2)
100017bc:	e0bffd15 	stw	r2,-12(fp)
    int Kirby_Image_Width = 0;
100017c0:	e03ff715 	stw	zero,-36(fp)
    int Kirby_Image_Height = 0;
100017c4:	e03ff815 	stw	zero,-32(fp)
    int Kirby_Screen_X = 0;
100017c8:	e03ffe15 	stw	zero,-8(fp)
    int Kirby_Screen_Y = kirby->y;
100017cc:	e0bfff17 	ldw	r2,-4(fp)
100017d0:	10800117 	ldw	r2,4(r2)
100017d4:	e0bff915 	stw	r2,-28(fp)
//    int Map_Width = map_Width(kirby->map);
    int kirby_Botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff; // Center botton
100017d8:	e13fff17 	ldw	r4,-4(fp)
100017dc:	00037780 	call	10003778 <get_Kirby_Botton_Pos>
100017e0:	1004d43a 	srli	r2,r2,16
100017e4:	e0bffa15 	stw	r2,-24(fp)
    int kirby_Botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff; // Center botton
100017e8:	e13fff17 	ldw	r4,-4(fp)
100017ec:	00037780 	call	10003778 <get_Kirby_Botton_Pos>
100017f0:	10bfffcc 	andi	r2,r2,65535
100017f4:	e0bffb15 	stw	r2,-20(fp)

    if (kirby->inhaling == 1) {
100017f8:	e0bfff17 	ldw	r2,-4(fp)
100017fc:	10800c17 	ldw	r2,48(r2)
10001800:	10800058 	cmpnei	r2,r2,1
10001804:	1000061e 	bne	r2,zero,10001820 <upload_Kirby_Info+0x8c>
        kirby_Botton_X -= 16;
10001808:	e0bffa17 	ldw	r2,-24(fp)
1000180c:	10bffc04 	addi	r2,r2,-16
10001810:	e0bffa15 	stw	r2,-24(fp)
        kirby_Botton_Y -= 25;
10001814:	e0bffb17 	ldw	r2,-20(fp)
10001818:	10bff9c4 	addi	r2,r2,-25
1000181c:	e0bffb15 	stw	r2,-20(fp)
    }
    
    // Decide kirby's image width and height
    if (kirby->is_inhaled == 1) {
10001820:	e0bfff17 	ldw	r2,-4(fp)
10001824:	10800a17 	ldw	r2,40(r2)
10001828:	10800058 	cmpnei	r2,r2,1
1000182c:	1000051e 	bne	r2,zero,10001844 <upload_Kirby_Info+0xb0>
        Kirby_Image_Width = 30;
10001830:	00800784 	movi	r2,30
10001834:	e0bff715 	stw	r2,-36(fp)
        Kirby_Image_Height = 30;
10001838:	00800784 	movi	r2,30
1000183c:	e0bff815 	stw	r2,-32(fp)
10001840:	00000406 	br	10001854 <upload_Kirby_Info+0xc0>
    } else {
        Kirby_Image_Width = 28;
10001844:	00800704 	movi	r2,28
10001848:	e0bff715 	stw	r2,-36(fp)
        Kirby_Image_Height = 28;
1000184c:	00800704 	movi	r2,28
10001850:	e0bff815 	stw	r2,-32(fp)
    }
    if ((kirby->is_inhaled == 1) && (kirby->spitting != 0)) {
10001854:	e0bfff17 	ldw	r2,-4(fp)
10001858:	10800a17 	ldw	r2,40(r2)
1000185c:	10800058 	cmpnei	r2,r2,1
10001860:	1000071e 	bne	r2,zero,10001880 <upload_Kirby_Info+0xec>
10001864:	e0bfff17 	ldw	r2,-4(fp)
10001868:	10800d17 	ldw	r2,52(r2)
1000186c:	10000426 	beq	r2,zero,10001880 <upload_Kirby_Info+0xec>
        Kirby_Image_Width = 60;
10001870:	00800f04 	movi	r2,60
10001874:	e0bff715 	stw	r2,-36(fp)
        Kirby_Image_Height = 30;
10001878:	00800784 	movi	r2,30
1000187c:	e0bff815 	stw	r2,-32(fp)
    }
    if (kirby->inhaling != 0) {
10001880:	e0bfff17 	ldw	r2,-4(fp)
10001884:	10800c17 	ldw	r2,48(r2)
10001888:	10000426 	beq	r2,zero,1000189c <upload_Kirby_Info+0x108>
        Kirby_Image_Width = 60;
1000188c:	00800f04 	movi	r2,60
10001890:	e0bff715 	stw	r2,-36(fp)
        Kirby_Image_Height = 30;
10001894:	00800784 	movi	r2,30
10001898:	e0bff815 	stw	r2,-32(fp)
    }
    if (kirby->damaging != 0) {
1000189c:	e0bfff17 	ldw	r2,-4(fp)
100018a0:	10800b17 	ldw	r2,44(r2)
100018a4:	10000726 	beq	r2,zero,100018c4 <upload_Kirby_Info+0x130>
        Kirby_Image_Width = 35;
100018a8:	008008c4 	movi	r2,35
100018ac:	e0bff715 	stw	r2,-36(fp)
        Kirby_Image_Height = 35;
100018b0:	008008c4 	movi	r2,35
100018b4:	e0bff815 	stw	r2,-32(fp)
        Kirby_Screen_Y -= 10;
100018b8:	e0bff917 	ldw	r2,-28(fp)
100018bc:	10bffd84 	addi	r2,r2,-10
100018c0:	e0bff915 	stw	r2,-28(fp)
    }
    

    // Decide the position X of kirby in screen
    Kirby_Screen_X = kirby_Screen_Center_X(kirby_Botton_X);
100018c4:	e13ffa17 	ldw	r4,-24(fp)
100018c8:	0003cf80 	call	10003cf8 <kirby_Screen_Center_X>
100018cc:	e0bffe15 	stw	r2,-8(fp)

    
    

    // Upload to kirby's registers
    REG_0_MAP_INFO = (REG_0_MAP_INFO & 0x0000fff0) | (Kirby_Screen_X << 24) | (Kirby_Screen_Y << 16) | (kirby->image << 2) | kirby->map;
100018d0:	d0db2317 	ldw	r3,27788(gp)
100018d4:	d09b2317 	ldw	r2,27788(gp)
100018d8:	10800017 	ldw	r2,0(r2)
100018dc:	10bffc0c 	andi	r2,r2,65520
100018e0:	e13ffe17 	ldw	r4,-8(fp)
100018e4:	2008963a 	slli	r4,r4,24
100018e8:	1104b03a 	or	r2,r2,r4
100018ec:	e13ff917 	ldw	r4,-28(fp)
100018f0:	2008943a 	slli	r4,r4,16
100018f4:	1108b03a 	or	r4,r2,r4
100018f8:	e0bfff17 	ldw	r2,-4(fp)
100018fc:	10800317 	ldw	r2,12(r2)
10001900:	1085883a 	add	r2,r2,r2
10001904:	1085883a 	add	r2,r2,r2
10001908:	2084b03a 	or	r2,r4,r2
1000190c:	e13fff17 	ldw	r4,-4(fp)
10001910:	21000217 	ldw	r4,8(r4)
10001914:	1104b03a 	or	r2,r2,r4
10001918:	18800015 	stw	r2,0(r3)
    REG_1_KIRBY_IMAGE = (Kirby_Image_X << 24) | (Kirby_Image_Y << 16) | (Kirby_Image_Width << 8) | (Kirby_Image_Height << 1) | (kirby->is_left & 0x00000001);
1000191c:	d09b2317 	ldw	r2,27788(gp)
10001920:	10c00104 	addi	r3,r2,4
10001924:	e0bffc17 	ldw	r2,-16(fp)
10001928:	1008963a 	slli	r4,r2,24
1000192c:	e0bffd17 	ldw	r2,-12(fp)
10001930:	1004943a 	slli	r2,r2,16
10001934:	2088b03a 	or	r4,r4,r2
10001938:	e0bff717 	ldw	r2,-36(fp)
1000193c:	1004923a 	slli	r2,r2,8
10001940:	2088b03a 	or	r4,r4,r2
10001944:	e0bff817 	ldw	r2,-32(fp)
10001948:	1085883a 	add	r2,r2,r2
1000194c:	2088b03a 	or	r4,r4,r2
10001950:	e0bfff17 	ldw	r2,-4(fp)
10001954:	10800417 	ldw	r2,16(r2)
10001958:	1080004c 	andi	r2,r2,1
1000195c:	2084b03a 	or	r2,r4,r2
10001960:	18800015 	stw	r2,0(r3)
    REG_2_KIRBY_MAP_POS = (kirby_Botton_X << 16) | (kirby_Botton_Y);
10001964:	d09b2317 	ldw	r2,27788(gp)
10001968:	10800204 	addi	r2,r2,8
1000196c:	e0fffa17 	ldw	r3,-24(fp)
10001970:	1808943a 	slli	r4,r3,16
10001974:	e0fffb17 	ldw	r3,-20(fp)
10001978:	20c6b03a 	or	r3,r4,r3
1000197c:	10c00015 	stw	r3,0(r2)
    REG_15_GAME_CONTROL = (REG_15_GAME_CONTROL & 0xfffffff8) | (kirby->health & 0x00000007);
10001980:	d09b2317 	ldw	r2,27788(gp)
10001984:	10800f04 	addi	r2,r2,60
10001988:	d0db2317 	ldw	r3,27788(gp)
1000198c:	18c00f04 	addi	r3,r3,60
10001990:	19000017 	ldw	r4,0(r3)
10001994:	00fffe04 	movi	r3,-8
10001998:	20c8703a 	and	r4,r4,r3
1000199c:	e0ffff17 	ldw	r3,-4(fp)
100019a0:	18c00517 	ldw	r3,20(r3)
100019a4:	18c001cc 	andi	r3,r3,7
100019a8:	20c6b03a 	or	r3,r4,r3
100019ac:	10c00015 	stw	r3,0(r2)
    printf("REG_0_MAP_INFO: %08x\n", REG_0_MAP_INFO);
    printf("REG_1_KIRBY_IMAGE: %08x\n", REG_1_KIRBY_IMAGE);
    printf("REG_2_KIRBY_MAP_POS: %08x\n", REG_2_KIRBY_MAP_POS);
    printf("\n/******************* end ****************/\n");
    #endif
}
100019b0:	0001883a 	nop
100019b4:	e037883a 	mov	sp,fp
100019b8:	dfc00117 	ldw	ra,4(sp)
100019bc:	df000017 	ldw	fp,0(sp)
100019c0:	dec00204 	addi	sp,sp,8
100019c4:	f800283a 	ret

100019c8 <updateKirby>:

void updateKirby(Kirby * kirby, Star * star, Enemy * enemy, int keycode, int pre_keycode){
100019c8:	defff804 	addi	sp,sp,-32
100019cc:	dfc00715 	stw	ra,28(sp)
100019d0:	df000615 	stw	fp,24(sp)
100019d4:	dc000515 	stw	r16,20(sp)
100019d8:	df000604 	addi	fp,sp,24
100019dc:	e13ffb15 	stw	r4,-20(fp)
100019e0:	e17ffc15 	stw	r5,-16(fp)
100019e4:	e1bffd15 	stw	r6,-12(fp)
100019e8:	e1fffe15 	stw	r7,-8(fp)
    int map_width = map_Width(kirby->map);
100019ec:	e0bffb17 	ldw	r2,-20(fp)
100019f0:	10800217 	ldw	r2,8(r2)
100019f4:	1009883a 	mov	r4,r2
100019f8:	00036ac0 	call	100036ac <map_Width>
100019fc:	e0bffa15 	stw	r2,-24(fp)

    // Enforce spitting
    if (kirby->spitting > 0) {
10001a00:	e0bffb17 	ldw	r2,-20(fp)
10001a04:	10800d17 	ldw	r2,52(r2)
10001a08:	00802d0e 	bge	zero,r2,10001ac0 <updateKirby+0xf8>
        kirby->spitting += 1;
10001a0c:	e0bffb17 	ldw	r2,-20(fp)
10001a10:	10800d17 	ldw	r2,52(r2)
10001a14:	10c00044 	addi	r3,r2,1
10001a18:	e0bffb17 	ldw	r2,-20(fp)
10001a1c:	10c00d15 	stw	r3,52(r2)
        kirby->image = 1;
10001a20:	e0bffb17 	ldw	r2,-20(fp)
10001a24:	00c00044 	movi	r3,1
10001a28:	10c00315 	stw	r3,12(r2)
        kirby->action = 4;
10001a2c:	e0bffb17 	ldw	r2,-20(fp)
10001a30:	00c00104 	movi	r3,4
10001a34:	10c00615 	stw	r3,24(r2)
        kirby->frame += 1;
10001a38:	e0bffb17 	ldw	r2,-20(fp)
10001a3c:	10800717 	ldw	r2,28(r2)
10001a40:	10c00044 	addi	r3,r2,1
10001a44:	e0bffb17 	ldw	r2,-20(fp)
10001a48:	10c00715 	stw	r3,28(r2)
        // printf("\n Spitting, ignore keyboard control \n");
        spit_Star(kirby, star, enemy); // spit star in specific frame
10001a4c:	e1bffd17 	ldw	r6,-12(fp)
10001a50:	e17ffc17 	ldw	r5,-16(fp)
10001a54:	e13ffb17 	ldw	r4,-20(fp)
10001a58:	00043e00 	call	100043e0 <spit_Star>
        if (kirby->spitting == 8) {
10001a5c:	e0bffb17 	ldw	r2,-20(fp)
10001a60:	10800d17 	ldw	r2,52(r2)
10001a64:	10800218 	cmpnei	r2,r2,8
10001a68:	1000121e 	bne	r2,zero,10001ab4 <updateKirby+0xec>
            kirby->spitting = 0;
10001a6c:	e0bffb17 	ldw	r2,-20(fp)
10001a70:	10000d15 	stw	zero,52(r2)
            kirby->is_inhaled = 0;
10001a74:	e0bffb17 	ldw	r2,-20(fp)
10001a78:	10000a15 	stw	zero,40(r2)
            kirby->image = 0;
10001a7c:	e0bffb17 	ldw	r2,-20(fp)
10001a80:	10000315 	stw	zero,12(r2)
            kirby->action = 0;
10001a84:	e0bffb17 	ldw	r2,-20(fp)
10001a88:	10000615 	stw	zero,24(r2)
            if (kirby->in_air == 1)
10001a8c:	e0bffb17 	ldw	r2,-20(fp)
10001a90:	10800917 	ldw	r2,36(r2)
10001a94:	10800058 	cmpnei	r2,r2,1
10001a98:	1000041e 	bne	r2,zero,10001aac <updateKirby+0xe4>
                kirby->frame = 10;
10001a9c:	e0bffb17 	ldw	r2,-20(fp)
10001aa0:	00c00284 	movi	r3,10
10001aa4:	10c00715 	stw	r3,28(r2)
10001aa8:	00000206 	br	10001ab4 <updateKirby+0xec>
            else
                kirby->frame = 0;
10001aac:	e0bffb17 	ldw	r2,-20(fp)
10001ab0:	10000715 	stw	zero,28(r2)
        }
        frame_Time(KIRBY_FRAME_TIME_INHALE * 2);
10001ab4:	0109c404 	movi	r4,10000
10001ab8:	00036680 	call	10003668 <frame_Time>
10001abc:	00058e06 	br	100030f8 <updateKirby+0x1730>
    }
    
    // Enforce inhaling
    else if (kirby->inhaling >= 2) {
10001ac0:	e0bffb17 	ldw	r2,-20(fp)
10001ac4:	10800c17 	ldw	r2,48(r2)
10001ac8:	10800090 	cmplti	r2,r2,2
10001acc:	10002b1e 	bne	r2,zero,10001b7c <updateKirby+0x1b4>
        kirby->inhaling += 1;
10001ad0:	e0bffb17 	ldw	r2,-20(fp)
10001ad4:	10800c17 	ldw	r2,48(r2)
10001ad8:	10c00044 	addi	r3,r2,1
10001adc:	e0bffb17 	ldw	r2,-20(fp)
10001ae0:	10c00c15 	stw	r3,48(r2)
        kirby->image = 1;
10001ae4:	e0bffb17 	ldw	r2,-20(fp)
10001ae8:	00c00044 	movi	r3,1
10001aec:	10c00315 	stw	r3,12(r2)
        kirby->action = 3;
10001af0:	e0bffb17 	ldw	r2,-20(fp)
10001af4:	00c000c4 	movi	r3,3
10001af8:	10c00615 	stw	r3,24(r2)
        kirby->frame += 1;
10001afc:	e0bffb17 	ldw	r2,-20(fp)
10001b00:	10800717 	ldw	r2,28(r2)
10001b04:	10c00044 	addi	r3,r2,1
10001b08:	e0bffb17 	ldw	r2,-20(fp)
10001b0c:	10c00715 	stw	r3,28(r2)
        if (kirby->inhaling == 7) {
10001b10:	e0bffb17 	ldw	r2,-20(fp)
10001b14:	10800c17 	ldw	r2,48(r2)
10001b18:	108001d8 	cmpnei	r2,r2,7
10001b1c:	1000141e 	bne	r2,zero,10001b70 <updateKirby+0x1a8>
            kirby->inhaling = 0;
10001b20:	e0bffb17 	ldw	r2,-20(fp)
10001b24:	10000c15 	stw	zero,48(r2)
            kirby->is_inhaled = 1;
10001b28:	e0bffb17 	ldw	r2,-20(fp)
10001b2c:	00c00044 	movi	r3,1
10001b30:	10c00a15 	stw	r3,40(r2)
            if (kirby->in_air == 1) {
10001b34:	e0bffb17 	ldw	r2,-20(fp)
10001b38:	10800917 	ldw	r2,36(r2)
10001b3c:	10800058 	cmpnei	r2,r2,1
10001b40:	1000071e 	bne	r2,zero,10001b60 <updateKirby+0x198>
                kirby->action = 2;
10001b44:	e0bffb17 	ldw	r2,-20(fp)
10001b48:	00c00084 	movi	r3,2
10001b4c:	10c00615 	stw	r3,24(r2)
                kirby->frame = 13;
10001b50:	e0bffb17 	ldw	r2,-20(fp)
10001b54:	00c00344 	movi	r3,13
10001b58:	10c00715 	stw	r3,28(r2)
10001b5c:	00000406 	br	10001b70 <updateKirby+0x1a8>
            } else {
                kirby->action = 0;
10001b60:	e0bffb17 	ldw	r2,-20(fp)
10001b64:	10000615 	stw	zero,24(r2)
                kirby->frame = 0;
10001b68:	e0bffb17 	ldw	r2,-20(fp)
10001b6c:	10000715 	stw	zero,28(r2)
            }
        }
        frame_Time(KIRBY_FRAME_TIME_INHALE * 3);
10001b70:	010ea604 	movi	r4,15000
10001b74:	00036680 	call	10003668 <frame_Time>
10001b78:	00055f06 	br	100030f8 <updateKirby+0x1730>
    }

    // Gulping
    else if (kirby->gulping >= 1) {
10001b7c:	e0bffb17 	ldw	r2,-20(fp)
10001b80:	10800f17 	ldw	r2,60(r2)
10001b84:	0080210e 	bge	zero,r2,10001c0c <updateKirby+0x244>
        kirby->gulping += 1;
10001b88:	e0bffb17 	ldw	r2,-20(fp)
10001b8c:	10800f17 	ldw	r2,60(r2)
10001b90:	10c00044 	addi	r3,r2,1
10001b94:	e0bffb17 	ldw	r2,-20(fp)
10001b98:	10c00f15 	stw	r3,60(r2)
        kirby->image = 1;
10001b9c:	e0bffb17 	ldw	r2,-20(fp)
10001ba0:	00c00044 	movi	r3,1
10001ba4:	10c00315 	stw	r3,12(r2)
        kirby->action = 2;
10001ba8:	e0bffb17 	ldw	r2,-20(fp)
10001bac:	00c00084 	movi	r3,2
10001bb0:	10c00615 	stw	r3,24(r2)
        kirby->frame += 1;
10001bb4:	e0bffb17 	ldw	r2,-20(fp)
10001bb8:	10800717 	ldw	r2,28(r2)
10001bbc:	10c00044 	addi	r3,r2,1
10001bc0:	e0bffb17 	ldw	r2,-20(fp)
10001bc4:	10c00715 	stw	r3,28(r2)
        if (kirby->gulping == 7) {
10001bc8:	e0bffb17 	ldw	r2,-20(fp)
10001bcc:	10800f17 	ldw	r2,60(r2)
10001bd0:	108001d8 	cmpnei	r2,r2,7
10001bd4:	10000a1e 	bne	r2,zero,10001c00 <updateKirby+0x238>
            kirby->gulping = 0;
10001bd8:	e0bffb17 	ldw	r2,-20(fp)
10001bdc:	10000f15 	stw	zero,60(r2)
            kirby->is_inhaled = 0;
10001be0:	e0bffb17 	ldw	r2,-20(fp)
10001be4:	10000a15 	stw	zero,40(r2)
            kirby->image = 0;
10001be8:	e0bffb17 	ldw	r2,-20(fp)
10001bec:	10000315 	stw	zero,12(r2)
            kirby->action = 0;
10001bf0:	e0bffb17 	ldw	r2,-20(fp)
10001bf4:	10000615 	stw	zero,24(r2)
            kirby->frame = 0;
10001bf8:	e0bffb17 	ldw	r2,-20(fp)
10001bfc:	10000715 	stw	zero,28(r2)
        }
        frame_Time(KIRBY_FRAME_TIME_INHALE);
10001c00:	0104e204 	movi	r4,5000
10001c04:	00036680 	call	10003668 <frame_Time>
10001c08:	00053b06 	br	100030f8 <updateKirby+0x1730>
    }
    
    // Damage control
    else if (kirby->damaging >= 1) {
10001c0c:	e0bffb17 	ldw	r2,-20(fp)
10001c10:	10800b17 	ldw	r2,44(r2)
10001c14:	00803e0e 	bge	zero,r2,10001d10 <updateKirby+0x348>
        kirby->damaging += 1;
10001c18:	e0bffb17 	ldw	r2,-20(fp)
10001c1c:	10800b17 	ldw	r2,44(r2)
10001c20:	10c00044 	addi	r3,r2,1
10001c24:	e0bffb17 	ldw	r2,-20(fp)
10001c28:	10c00b15 	stw	r3,44(r2)
        if (kirby->is_left == 0)
10001c2c:	e0bffb17 	ldw	r2,-20(fp)
10001c30:	10800417 	ldw	r2,16(r2)
10001c34:	1000061e 	bne	r2,zero,10001c50 <updateKirby+0x288>
            kirby->x -= KIRBY_STEP_X;
10001c38:	e0bffb17 	ldw	r2,-20(fp)
10001c3c:	10800017 	ldw	r2,0(r2)
10001c40:	10ffff44 	addi	r3,r2,-3
10001c44:	e0bffb17 	ldw	r2,-20(fp)
10001c48:	10c00015 	stw	r3,0(r2)
10001c4c:	00000506 	br	10001c64 <updateKirby+0x29c>
        else
            kirby->x += KIRBY_STEP_X;
10001c50:	e0bffb17 	ldw	r2,-20(fp)
10001c54:	10800017 	ldw	r2,0(r2)
10001c58:	10c000c4 	addi	r3,r2,3
10001c5c:	e0bffb17 	ldw	r2,-20(fp)
10001c60:	10c00015 	stw	r3,0(r2)
        if (will_Touch_Ground(kirby, kirby->map) == 0)
10001c64:	e0bffb17 	ldw	r2,-20(fp)
10001c68:	10800217 	ldw	r2,8(r2)
10001c6c:	100b883a 	mov	r5,r2
10001c70:	e13ffb17 	ldw	r4,-20(fp)
10001c74:	00037000 	call	10003700 <will_Touch_Ground>
10001c78:	1000031e 	bne	r2,zero,10001c88 <updateKirby+0x2c0>
            kirby->in_air = 1;
10001c7c:	e0bffb17 	ldw	r2,-20(fp)
10001c80:	00c00044 	movi	r3,1
10001c84:	10c00915 	stw	r3,36(r2)
        kirby->image = 2;
10001c88:	e0bffb17 	ldw	r2,-20(fp)
10001c8c:	00c00084 	movi	r3,2
10001c90:	10c00315 	stw	r3,12(r2)
        // kirby->action = kirby_Damage_Action(enemy); //Keep action unchanged
        kirby->frame += 1;
10001c94:	e0bffb17 	ldw	r2,-20(fp)
10001c98:	10800717 	ldw	r2,28(r2)
10001c9c:	10c00044 	addi	r3,r2,1
10001ca0:	e0bffb17 	ldw	r2,-20(fp)
10001ca4:	10c00715 	stw	r3,28(r2)
        if (kirby->damaging == damage_Frame_Number(enemy)) {
10001ca8:	e0bffb17 	ldw	r2,-20(fp)
10001cac:	14000b17 	ldw	r16,44(r2)
10001cb0:	e13ffd17 	ldw	r4,-12(fp)
10001cb4:	0003e540 	call	10003e54 <damage_Frame_Number>
10001cb8:	8080121e 	bne	r16,r2,10001d04 <updateKirby+0x33c>
            // printf("\n############### kirby damaging images over #################\n");
            kirby->damaging = 0;
10001cbc:	e0bffb17 	ldw	r2,-20(fp)
10001cc0:	10000b15 	stw	zero,44(r2)
            kirby->is_inhaled = 0;
10001cc4:	e0bffb17 	ldw	r2,-20(fp)
10001cc8:	10000a15 	stw	zero,40(r2)
            kirby->image = 0;
10001ccc:	e0bffb17 	ldw	r2,-20(fp)
10001cd0:	10000315 	stw	zero,12(r2)
            kirby->action = 0;
10001cd4:	e0bffb17 	ldw	r2,-20(fp)
10001cd8:	10000615 	stw	zero,24(r2)
            if (kirby->in_air == 1)
10001cdc:	e0bffb17 	ldw	r2,-20(fp)
10001ce0:	10800917 	ldw	r2,36(r2)
10001ce4:	10800058 	cmpnei	r2,r2,1
10001ce8:	1000041e 	bne	r2,zero,10001cfc <updateKirby+0x334>
                kirby->frame = 10;
10001cec:	e0bffb17 	ldw	r2,-20(fp)
10001cf0:	00c00284 	movi	r3,10
10001cf4:	10c00715 	stw	r3,28(r2)
10001cf8:	00000206 	br	10001d04 <updateKirby+0x33c>
            else
                kirby->frame = 0;
10001cfc:	e0bffb17 	ldw	r2,-20(fp)
10001d00:	10000715 	stw	zero,28(r2)
        }
        frame_Time(KIRBY_FRAME_TIME_DAMAGE);
10001d04:	01027104 	movi	r4,2500
10001d08:	00036680 	call	10003668 <frame_Time>
10001d0c:	0004fa06 	br	100030f8 <updateKirby+0x1730>
    }

    // Kicking ass
    else if (kirby->kicking >= 1) {
10001d10:	e0bffb17 	ldw	r2,-20(fp)
10001d14:	10800e17 	ldw	r2,56(r2)
10001d18:	0080750e 	bge	zero,r2,10001ef0 <updateKirby+0x528>
        if ((kirby->kicking <= 8) && (kirby->kicking >= 1)) {
10001d1c:	e0bffb17 	ldw	r2,-20(fp)
10001d20:	10800e17 	ldw	r2,56(r2)
10001d24:	10800248 	cmpgei	r2,r2,9
10001d28:	1000231e 	bne	r2,zero,10001db8 <updateKirby+0x3f0>
10001d2c:	e0bffb17 	ldw	r2,-20(fp)
10001d30:	10800e17 	ldw	r2,56(r2)
10001d34:	0080200e 	bge	zero,r2,10001db8 <updateKirby+0x3f0>
            kirby->frame = 6;
10001d38:	e0bffb17 	ldw	r2,-20(fp)
10001d3c:	00c00184 	movi	r3,6
10001d40:	10c00715 	stw	r3,28(r2)
            if (kirby->is_left == 0)
10001d44:	e0bffb17 	ldw	r2,-20(fp)
10001d48:	10800417 	ldw	r2,16(r2)
10001d4c:	1000061e 	bne	r2,zero,10001d68 <updateKirby+0x3a0>
                kirby->x += KIRBY_KICK_X;
10001d50:	e0bffb17 	ldw	r2,-20(fp)
10001d54:	10800017 	ldw	r2,0(r2)
10001d58:	10c000c4 	addi	r3,r2,3
10001d5c:	e0bffb17 	ldw	r2,-20(fp)
10001d60:	10c00015 	stw	r3,0(r2)
10001d64:	00000506 	br	10001d7c <updateKirby+0x3b4>
            else
                kirby->x -= KIRBY_KICK_X;
10001d68:	e0bffb17 	ldw	r2,-20(fp)
10001d6c:	10800017 	ldw	r2,0(r2)
10001d70:	10ffff44 	addi	r3,r2,-3
10001d74:	e0bffb17 	ldw	r2,-20(fp)
10001d78:	10c00015 	stw	r3,0(r2)
            if (will_Touch_Ground(kirby, kirby->map) == 0)
10001d7c:	e0bffb17 	ldw	r2,-20(fp)
10001d80:	10800217 	ldw	r2,8(r2)
10001d84:	100b883a 	mov	r5,r2
10001d88:	e13ffb17 	ldw	r4,-20(fp)
10001d8c:	00037000 	call	10003700 <will_Touch_Ground>
10001d90:	1000031e 	bne	r2,zero,10001da0 <updateKirby+0x3d8>
                kirby->in_air = 1;
10001d94:	e0bffb17 	ldw	r2,-20(fp)
10001d98:	00c00044 	movi	r3,1
10001d9c:	10c00915 	stw	r3,36(r2)
            kirby->kicking += 1;
10001da0:	e0bffb17 	ldw	r2,-20(fp)
10001da4:	10800e17 	ldw	r2,56(r2)
10001da8:	10c00044 	addi	r3,r2,1
10001dac:	e0bffb17 	ldw	r2,-20(fp)
10001db0:	10c00e15 	stw	r3,56(r2)
10001db4:	00003406 	br	10001e88 <updateKirby+0x4c0>
        } else if ((kirby->kicking <= 12) && (kirby->kicking >= 9)) {
10001db8:	e0bffb17 	ldw	r2,-20(fp)
10001dbc:	10800e17 	ldw	r2,56(r2)
10001dc0:	10800348 	cmpgei	r2,r2,13
10001dc4:	1000241e 	bne	r2,zero,10001e58 <updateKirby+0x490>
10001dc8:	e0bffb17 	ldw	r2,-20(fp)
10001dcc:	10800e17 	ldw	r2,56(r2)
10001dd0:	10800250 	cmplti	r2,r2,9
10001dd4:	1000201e 	bne	r2,zero,10001e58 <updateKirby+0x490>
            kirby->frame = 7;
10001dd8:	e0bffb17 	ldw	r2,-20(fp)
10001ddc:	00c001c4 	movi	r3,7
10001de0:	10c00715 	stw	r3,28(r2)
            if (kirby->is_left == 0)
10001de4:	e0bffb17 	ldw	r2,-20(fp)
10001de8:	10800417 	ldw	r2,16(r2)
10001dec:	1000061e 	bne	r2,zero,10001e08 <updateKirby+0x440>
                kirby->x += (KIRBY_KICK_X - 1);
10001df0:	e0bffb17 	ldw	r2,-20(fp)
10001df4:	10800017 	ldw	r2,0(r2)
10001df8:	10c00084 	addi	r3,r2,2
10001dfc:	e0bffb17 	ldw	r2,-20(fp)
10001e00:	10c00015 	stw	r3,0(r2)
10001e04:	00000506 	br	10001e1c <updateKirby+0x454>
            else
                kirby->x -= (KIRBY_KICK_X - 1);
10001e08:	e0bffb17 	ldw	r2,-20(fp)
10001e0c:	10800017 	ldw	r2,0(r2)
10001e10:	10ffff84 	addi	r3,r2,-2
10001e14:	e0bffb17 	ldw	r2,-20(fp)
10001e18:	10c00015 	stw	r3,0(r2)
            if (will_Touch_Ground(kirby, kirby->map) == 0)
10001e1c:	e0bffb17 	ldw	r2,-20(fp)
10001e20:	10800217 	ldw	r2,8(r2)
10001e24:	100b883a 	mov	r5,r2
10001e28:	e13ffb17 	ldw	r4,-20(fp)
10001e2c:	00037000 	call	10003700 <will_Touch_Ground>
10001e30:	1000031e 	bne	r2,zero,10001e40 <updateKirby+0x478>
                kirby->in_air = 1;
10001e34:	e0bffb17 	ldw	r2,-20(fp)
10001e38:	00c00044 	movi	r3,1
10001e3c:	10c00915 	stw	r3,36(r2)
            kirby->kicking += 1;
10001e40:	e0bffb17 	ldw	r2,-20(fp)
10001e44:	10800e17 	ldw	r2,56(r2)
10001e48:	10c00044 	addi	r3,r2,1
10001e4c:	e0bffb17 	ldw	r2,-20(fp)
10001e50:	10c00e15 	stw	r3,56(r2)
10001e54:	00000c06 	br	10001e88 <updateKirby+0x4c0>
        } else if (kirby->kicking == 13) {
10001e58:	e0bffb17 	ldw	r2,-20(fp)
10001e5c:	10800e17 	ldw	r2,56(r2)
10001e60:	10800358 	cmpnei	r2,r2,13
10001e64:	1000081e 	bne	r2,zero,10001e88 <updateKirby+0x4c0>
            kirby->kicking = 0;
10001e68:	e0bffb17 	ldw	r2,-20(fp)
10001e6c:	10000e15 	stw	zero,56(r2)
            kirby->is_inhaled = 0;
10001e70:	e0bffb17 	ldw	r2,-20(fp)
10001e74:	10000a15 	stw	zero,40(r2)
            kirby->image = 0;
10001e78:	e0bffb17 	ldw	r2,-20(fp)
10001e7c:	10000315 	stw	zero,12(r2)
            kirby->action = 0;
10001e80:	e0bffb17 	ldw	r2,-20(fp)
10001e84:	10000615 	stw	zero,24(r2)
        }

        if (kirby->in_air == 1) {
10001e88:	e0bffb17 	ldw	r2,-20(fp)
10001e8c:	10800917 	ldw	r2,36(r2)
10001e90:	10800058 	cmpnei	r2,r2,1
10001e94:	10000a1e 	bne	r2,zero,10001ec0 <updateKirby+0x4f8>
            kirby->kicking = 0;
10001e98:	e0bffb17 	ldw	r2,-20(fp)
10001e9c:	10000e15 	stw	zero,56(r2)
            kirby->image = 0;
10001ea0:	e0bffb17 	ldw	r2,-20(fp)
10001ea4:	10000315 	stw	zero,12(r2)
            kirby->action = 0;
10001ea8:	e0bffb17 	ldw	r2,-20(fp)
10001eac:	10000615 	stw	zero,24(r2)
            kirby->frame = 10;
10001eb0:	e0bffb17 	ldw	r2,-20(fp)
10001eb4:	00c00284 	movi	r3,10
10001eb8:	10c00715 	stw	r3,28(r2)
10001ebc:	00000906 	br	10001ee4 <updateKirby+0x51c>
        }
        // Kill enemy
        else if (sqr_Dis_Kirby_Enemy(kirby, enemy) <= (KIRBY_DAMAGE_DIS_SQRT * KIRBY_DAMAGE_DIS_SQRT)) {
10001ec0:	e17ffd17 	ldw	r5,-12(fp)
10001ec4:	e13ffb17 	ldw	r4,-20(fp)
10001ec8:	0003ed80 	call	10003ed8 <sqr_Dis_Kirby_Enemy>
10001ecc:	10806448 	cmpgei	r2,r2,401
10001ed0:	1000041e 	bne	r2,zero,10001ee4 <updateKirby+0x51c>
            enemy->health = 0;
10001ed4:	e0bffd17 	ldw	r2,-12(fp)
10001ed8:	10000315 	stw	zero,12(r2)
            kirby->kicking = 0;
10001edc:	e0bffb17 	ldw	r2,-20(fp)
10001ee0:	10000e15 	stw	zero,56(r2)
        }
        frame_Time(KIRBY_FRAME_TIME_KICK);
10001ee4:	0100e104 	movi	r4,900
10001ee8:	00036680 	call	10003668 <frame_Time>
10001eec:	00048206 	br	100030f8 <updateKirby+0x1730>
    }

    // Key detection
    else {
        kirby->inhaling = 0;
10001ef0:	e0bffb17 	ldw	r2,-20(fp)
10001ef4:	10000c15 	stw	zero,48(r2)
        switch ((keycode & 0x0000ffff)) {
10001ef8:	e0bffe17 	ldw	r2,-8(fp)
10001efc:	10bfffcc 	andi	r2,r2,65535
10001f00:	10c106a0 	cmpeqi	r3,r2,1050
10001f04:	1802411e 	bne	r3,zero,1000280c <updateKirby+0xe44>
10001f08:	10c106c8 	cmpgei	r3,r2,1051
10001f0c:	18001b1e 	bne	r3,zero,10001f7c <updateKirby+0x5b4>
10001f10:	10c003e0 	cmpeqi	r3,r2,15
10001f14:	18046f1e 	bne	r3,zero,100030d4 <updateKirby+0x170c>
10001f18:	10c00408 	cmpgei	r3,r2,16
10001f1c:	18000b1e 	bne	r3,zero,10001f4c <updateKirby+0x584>
10001f20:	10c00120 	cmpeqi	r3,r2,4
10001f24:	1800d21e 	bne	r3,zero,10002270 <updateKirby+0x8a8>
10001f28:	10c00148 	cmpgei	r3,r2,5
10001f2c:	1800021e 	bne	r3,zero,10001f38 <updateKirby+0x570>
10001f30:	10002e26 	beq	r2,zero,10001fec <updateKirby+0x624>
10001f34:	0003c606 	br	10002e50 <updateKirby+0x1488>
10001f38:	10c001e0 	cmpeqi	r3,r2,7
10001f3c:	1801801e 	bne	r3,zero,10002540 <updateKirby+0xb78>
10001f40:	108003a0 	cmpeqi	r2,r2,14
10001f44:	10034f1e 	bne	r2,zero,10002c84 <updateKirby+0x12bc>
10001f48:	0003c106 	br	10002e50 <updateKirby+0x1488>
10001f4c:	10c006a0 	cmpeqi	r3,r2,26
10001f50:	1803211e 	bne	r3,zero,10002bd8 <updateKirby+0x1210>
10001f54:	10c006c8 	cmpgei	r3,r2,27
10001f58:	1800031e 	bne	r3,zero,10001f68 <updateKirby+0x5a0>
10001f5c:	108005a0 	cmpeqi	r2,r2,22
10001f60:	1002811e 	bne	r2,zero,10002968 <updateKirby+0xfa0>
10001f64:	0003ba06 	br	10002e50 <updateKirby+0x1488>
10001f68:	10c10020 	cmpeqi	r3,r2,1024
10001f6c:	1800c01e 	bne	r3,zero,10002270 <updateKirby+0x8a8>
10001f70:	108105a0 	cmpeqi	r2,r2,1046
10001f74:	1000be1e 	bne	r2,zero,10002270 <updateKirby+0x8a8>
10001f78:	0003b506 	br	10002e50 <updateKirby+0x1488>
10001f7c:	10c58120 	cmpeqi	r3,r2,5636
10001f80:	1800bb1e 	bne	r3,zero,10002270 <updateKirby+0x8a8>
10001f84:	10c58148 	cmpgei	r3,r2,5637
10001f88:	18000c1e 	bne	r3,zero,10001fbc <updateKirby+0x5f4>
10001f8c:	10c1c5a0 	cmpeqi	r3,r2,1814
10001f90:	18016b1e 	bne	r3,zero,10002540 <updateKirby+0xb78>
10001f94:	10c1c5c8 	cmpgei	r3,r2,1815
10001f98:	1800031e 	bne	r3,zero,10001fa8 <updateKirby+0x5e0>
10001f9c:	1081c020 	cmpeqi	r2,r2,1792
10001fa0:	1001671e 	bne	r2,zero,10002540 <updateKirby+0xb78>
10001fa4:	0003aa06 	br	10002e50 <updateKirby+0x1488>
10001fa8:	10c1c6a0 	cmpeqi	r3,r2,1818
10001fac:	1802431e 	bne	r3,zero,100028bc <updateKirby+0xef4>
10001fb0:	1083c5a0 	cmpeqi	r2,r2,3862
10001fb4:	1003771e 	bne	r2,zero,10002d94 <updateKirby+0x13cc>
10001fb8:	0003a506 	br	10002e50 <updateKirby+0x1488>
10001fbc:	10c583e0 	cmpeqi	r3,r2,5647
10001fc0:	1803741e 	bne	r3,zero,10002d94 <updateKirby+0x13cc>
10001fc4:	10c58408 	cmpgei	r3,r2,5648
10001fc8:	1800031e 	bne	r3,zero,10001fd8 <updateKirby+0x610>
10001fcc:	108581e0 	cmpeqi	r2,r2,5639
10001fd0:	10015b1e 	bne	r2,zero,10002540 <updateKirby+0xb78>
10001fd4:	00039e06 	br	10002e50 <updateKirby+0x1488>
10001fd8:	10c68120 	cmpeqi	r3,r2,6660
10001fdc:	18020b1e 	bne	r3,zero,1000280c <updateKirby+0xe44>
10001fe0:	108681e0 	cmpeqi	r2,r2,6663
10001fe4:	1002351e 	bne	r2,zero,100028bc <updateKirby+0xef4>
10001fe8:	00039906 	br	10002e50 <updateKirby+0x1488>
        case 0x0000: { // "" Stand
            if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
10001fec:	e0bffb17 	ldw	r2,-20(fp)
10001ff0:	10800917 	ldw	r2,36(r2)
10001ff4:	1000261e 	bne	r2,zero,10002090 <updateKirby+0x6c8>
10001ff8:	e0bffb17 	ldw	r2,-20(fp)
10001ffc:	10800a17 	ldw	r2,40(r2)
10002000:	1000231e 	bne	r2,zero,10002090 <updateKirby+0x6c8>
                kirby->image = 0;
10002004:	e0bffb17 	ldw	r2,-20(fp)
10002008:	10000315 	stw	zero,12(r2)
                kirby->action = 0;
1000200c:	e0bffb17 	ldw	r2,-20(fp)
10002010:	10000615 	stw	zero,24(r2)
                if (pre_keycode == keycode) {
10002014:	e0c00217 	ldw	r3,8(fp)
10002018:	e0bffe17 	ldw	r2,-8(fp)
1000201c:	1880131e 	bne	r3,r2,1000206c <updateKirby+0x6a4>
                    kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
10002020:	e0bffb17 	ldw	r2,-20(fp)
10002024:	10800717 	ldw	r2,28(r2)
10002028:	10c00044 	addi	r3,r2,1
1000202c:	00a00034 	movhi	r2,32768
10002030:	10800044 	addi	r2,r2,1
10002034:	1884703a 	and	r2,r3,r2
10002038:	1000040e 	bge	r2,zero,1000204c <updateKirby+0x684>
1000203c:	10bfffc4 	addi	r2,r2,-1
10002040:	00ffff84 	movi	r3,-2
10002044:	10c4b03a 	or	r2,r2,r3
10002048:	10800044 	addi	r2,r2,1
1000204c:	1007883a 	mov	r3,r2
10002050:	e0bffb17 	ldw	r2,-20(fp)
10002054:	10800817 	ldw	r2,32(r2)
10002058:	1085883a 	add	r2,r2,r2
1000205c:	1887883a 	add	r3,r3,r2
10002060:	e0bffb17 	ldw	r2,-20(fp)
10002064:	10c00715 	stw	r3,28(r2)
10002068:	00000606 	br	10002084 <updateKirby+0x6bc>
                } else {
                    kirby->frame = 0 + 2 * kirby->in_slope;
1000206c:	e0bffb17 	ldw	r2,-20(fp)
10002070:	10800817 	ldw	r2,32(r2)
10002074:	1085883a 	add	r2,r2,r2
10002078:	1007883a 	mov	r3,r2
1000207c:	e0bffb17 	ldw	r2,-20(fp)
10002080:	10c00715 	stw	r3,28(r2)
                }
                frame_Time(KIRBY_FRAME_TIME_BLINK);
10002084:	0102ee04 	movi	r4,3000
10002088:	00036680 	call	10003668 <frame_Time>
1000208c:	00007706 	br	1000226c <updateKirby+0x8a4>
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
10002090:	e0bffb17 	ldw	r2,-20(fp)
10002094:	10800917 	ldw	r2,36(r2)
10002098:	1000281e 	bne	r2,zero,1000213c <updateKirby+0x774>
1000209c:	e0bffb17 	ldw	r2,-20(fp)
100020a0:	10800a17 	ldw	r2,40(r2)
100020a4:	10800058 	cmpnei	r2,r2,1
100020a8:	1000241e 	bne	r2,zero,1000213c <updateKirby+0x774>
                kirby->image = 1;
100020ac:	e0bffb17 	ldw	r2,-20(fp)
100020b0:	00c00044 	movi	r3,1
100020b4:	10c00315 	stw	r3,12(r2)
                kirby->action = 0;
100020b8:	e0bffb17 	ldw	r2,-20(fp)
100020bc:	10000615 	stw	zero,24(r2)
                if (pre_keycode == keycode) {
100020c0:	e0c00217 	ldw	r3,8(fp)
100020c4:	e0bffe17 	ldw	r2,-8(fp)
100020c8:	1880131e 	bne	r3,r2,10002118 <updateKirby+0x750>
                    kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
100020cc:	e0bffb17 	ldw	r2,-20(fp)
100020d0:	10800717 	ldw	r2,28(r2)
100020d4:	10c00044 	addi	r3,r2,1
100020d8:	00a00034 	movhi	r2,32768
100020dc:	10800044 	addi	r2,r2,1
100020e0:	1884703a 	and	r2,r3,r2
100020e4:	1000040e 	bge	r2,zero,100020f8 <updateKirby+0x730>
100020e8:	10bfffc4 	addi	r2,r2,-1
100020ec:	00ffff84 	movi	r3,-2
100020f0:	10c4b03a 	or	r2,r2,r3
100020f4:	10800044 	addi	r2,r2,1
100020f8:	1007883a 	mov	r3,r2
100020fc:	e0bffb17 	ldw	r2,-20(fp)
10002100:	10800817 	ldw	r2,32(r2)
10002104:	1085883a 	add	r2,r2,r2
10002108:	1887883a 	add	r3,r3,r2
1000210c:	e0bffb17 	ldw	r2,-20(fp)
10002110:	10c00715 	stw	r3,28(r2)
10002114:	00000606 	br	10002130 <updateKirby+0x768>
                } else {
                    kirby->frame = 0 + 2 * kirby->in_slope;
10002118:	e0bffb17 	ldw	r2,-20(fp)
1000211c:	10800817 	ldw	r2,32(r2)
10002120:	1085883a 	add	r2,r2,r2
10002124:	1007883a 	mov	r3,r2
10002128:	e0bffb17 	ldw	r2,-20(fp)
1000212c:	10c00715 	stw	r3,28(r2)
                }
                frame_Time(KIRBY_FRAME_TIME_BLINK);
10002130:	0102ee04 	movi	r4,3000
10002134:	00036680 	call	10003668 <frame_Time>
10002138:	00004c06 	br	1000226c <updateKirby+0x8a4>
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
1000213c:	e0bffb17 	ldw	r2,-20(fp)
10002140:	10800917 	ldw	r2,36(r2)
10002144:	10800058 	cmpnei	r2,r2,1
10002148:	10001f1e 	bne	r2,zero,100021c8 <updateKirby+0x800>
1000214c:	e0bffb17 	ldw	r2,-20(fp)
10002150:	10800a17 	ldw	r2,40(r2)
10002154:	10001c1e 	bne	r2,zero,100021c8 <updateKirby+0x800>
                if (will_Touch_Ground(kirby, kirby->map)) {
10002158:	e0bffb17 	ldw	r2,-20(fp)
1000215c:	10800217 	ldw	r2,8(r2)
10002160:	100b883a 	mov	r5,r2
10002164:	e13ffb17 	ldw	r4,-20(fp)
10002168:	00037000 	call	10003700 <will_Touch_Ground>
1000216c:	10000726 	beq	r2,zero,1000218c <updateKirby+0x7c4>
                    kirby->image = 0;
10002170:	e0bffb17 	ldw	r2,-20(fp)
10002174:	10000315 	stw	zero,12(r2)
                    kirby->action = 0;
10002178:	e0bffb17 	ldw	r2,-20(fp)
1000217c:	10000615 	stw	zero,24(r2)
                    kirby->in_air = 0;
10002180:	e0bffb17 	ldw	r2,-20(fp)
10002184:	10000915 	stw	zero,36(r2)
                } else {
                    kirby->frame = 0 + 2 * kirby->in_slope;
                }
                frame_Time(KIRBY_FRAME_TIME_BLINK);
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
10002188:	00003806 	br	1000226c <updateKirby+0x8a4>
                    kirby->image = 0;
                    kirby->action = 0;
                    kirby->in_air = 0;
                } else {
                    kirby->image = 0;
1000218c:	e0bffb17 	ldw	r2,-20(fp)
10002190:	10000315 	stw	zero,12(r2)
                    kirby->action = 0;
10002194:	e0bffb17 	ldw	r2,-20(fp)
10002198:	10000615 	stw	zero,24(r2)
                    kirby->frame = 10;
1000219c:	e0bffb17 	ldw	r2,-20(fp)
100021a0:	00c00284 	movi	r3,10
100021a4:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
100021a8:	e0bffb17 	ldw	r2,-20(fp)
100021ac:	10800117 	ldw	r2,4(r2)
100021b0:	10c000c4 	addi	r3,r2,3
100021b4:	e0bffb17 	ldw	r2,-20(fp)
100021b8:	10c00115 	stw	r3,4(r2)
                    frame_Time(KIRBY_FRAME_TIME_WALK);
100021bc:	01017704 	movi	r4,1500
100021c0:	00036680 	call	10003668 <frame_Time>
                } else {
                    kirby->frame = 0 + 2 * kirby->in_slope;
                }
                frame_Time(KIRBY_FRAME_TIME_BLINK);
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
100021c4:	00002906 	br	1000226c <updateKirby+0x8a4>
                    kirby->action = 0;
                    kirby->frame = 10;
                    kirby->y += KIRBY_STEP_Y;
                    frame_Time(KIRBY_FRAME_TIME_WALK);
                }
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 1)) {
100021c8:	e0bffb17 	ldw	r2,-20(fp)
100021cc:	10800917 	ldw	r2,36(r2)
100021d0:	10800058 	cmpnei	r2,r2,1
100021d4:	1003c11e 	bne	r2,zero,100030dc <updateKirby+0x1714>
100021d8:	e0bffb17 	ldw	r2,-20(fp)
100021dc:	10800a17 	ldw	r2,40(r2)
100021e0:	10800058 	cmpnei	r2,r2,1
100021e4:	1003bd1e 	bne	r2,zero,100030dc <updateKirby+0x1714>
                if (will_Touch_Ground(kirby, kirby->map)) {
100021e8:	e0bffb17 	ldw	r2,-20(fp)
100021ec:	10800217 	ldw	r2,8(r2)
100021f0:	100b883a 	mov	r5,r2
100021f4:	e13ffb17 	ldw	r4,-20(fp)
100021f8:	00037000 	call	10003700 <will_Touch_Ground>
100021fc:	10000a26 	beq	r2,zero,10002228 <updateKirby+0x860>
                    kirby->image = 1;
10002200:	e0bffb17 	ldw	r2,-20(fp)
10002204:	00c00044 	movi	r3,1
10002208:	10c00315 	stw	r3,12(r2)
                    kirby->action = 0;
1000220c:	e0bffb17 	ldw	r2,-20(fp)
10002210:	10000615 	stw	zero,24(r2)
                    kirby->in_air = 0;
10002214:	e0bffb17 	ldw	r2,-20(fp)
10002218:	10000915 	stw	zero,36(r2)
                    kirby->frame = 0;
1000221c:	e0bffb17 	ldw	r2,-20(fp)
10002220:	10000715 	stw	zero,28(r2)
                    kirby->frame = 13;
                    kirby->y += KIRBY_STEP_Y;
                    frame_Time(KIRBY_FRAME_TIME_WALK);
                }
            }
            break;
10002224:	0003ad06 	br	100030dc <updateKirby+0x1714>
                    kirby->image = 1;
                    kirby->action = 0;
                    kirby->in_air = 0;
                    kirby->frame = 0;
                } else {
                    kirby->image = 1;
10002228:	e0bffb17 	ldw	r2,-20(fp)
1000222c:	00c00044 	movi	r3,1
10002230:	10c00315 	stw	r3,12(r2)
                    kirby->action = 2;
10002234:	e0bffb17 	ldw	r2,-20(fp)
10002238:	00c00084 	movi	r3,2
1000223c:	10c00615 	stw	r3,24(r2)
                    kirby->frame = 13;
10002240:	e0bffb17 	ldw	r2,-20(fp)
10002244:	00c00344 	movi	r3,13
10002248:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
1000224c:	e0bffb17 	ldw	r2,-20(fp)
10002250:	10800117 	ldw	r2,4(r2)
10002254:	10c000c4 	addi	r3,r2,3
10002258:	e0bffb17 	ldw	r2,-20(fp)
1000225c:	10c00115 	stw	r3,4(r2)
                    frame_Time(KIRBY_FRAME_TIME_WALK);
10002260:	01017704 	movi	r4,1500
10002264:	00036680 	call	10003668 <frame_Time>
                }
            }
            break;
10002268:	00039c06 	br	100030dc <updateKirby+0x1714>
1000226c:	00039b06 	br	100030dc <updateKirby+0x1714>

        case 0x0416:   //"a" & "s"
        case 0x1604:
        case 0x0400:
        case 0x0004: { //"a" left move
            kirby->x -= KIRBY_STEP_X;
10002270:	e0bffb17 	ldw	r2,-20(fp)
10002274:	10800017 	ldw	r2,0(r2)
10002278:	10ffff44 	addi	r3,r2,-3
1000227c:	e0bffb17 	ldw	r2,-20(fp)
10002280:	10c00015 	stw	r3,0(r2)
            kirby->is_left = 1;
10002284:	e0bffb17 	ldw	r2,-20(fp)
10002288:	00c00044 	movi	r3,1
1000228c:	10c00415 	stw	r3,16(r2)

            // Kirby may walk to air
            if (will_Touch_Ground(kirby, kirby->map) == 0)
10002290:	e0bffb17 	ldw	r2,-20(fp)
10002294:	10800217 	ldw	r2,8(r2)
10002298:	100b883a 	mov	r5,r2
1000229c:	e13ffb17 	ldw	r4,-20(fp)
100022a0:	00037000 	call	10003700 <will_Touch_Ground>
100022a4:	1000031e 	bne	r2,zero,100022b4 <updateKirby+0x8ec>
                kirby->in_air = 1;
100022a8:	e0bffb17 	ldw	r2,-20(fp)
100022ac:	00c00044 	movi	r3,1
100022b0:	10c00915 	stw	r3,36(r2)

            // state update
            if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
100022b4:	e0bffb17 	ldw	r2,-20(fp)
100022b8:	10800917 	ldw	r2,36(r2)
100022bc:	1000181e 	bne	r2,zero,10002320 <updateKirby+0x958>
100022c0:	e0bffb17 	ldw	r2,-20(fp)
100022c4:	10800a17 	ldw	r2,40(r2)
100022c8:	1000151e 	bne	r2,zero,10002320 <updateKirby+0x958>
                kirby->image = 0;
100022cc:	e0bffb17 	ldw	r2,-20(fp)
100022d0:	10000315 	stw	zero,12(r2)
                kirby->action = 1;
100022d4:	e0bffb17 	ldw	r2,-20(fp)
100022d8:	00c00044 	movi	r3,1
100022dc:	10c00615 	stw	r3,24(r2)
                if (pre_keycode == keycode)
100022e0:	e0c00217 	ldw	r3,8(fp)
100022e4:	e0bffe17 	ldw	r2,-8(fp)
100022e8:	18800a1e 	bne	r3,r2,10002314 <updateKirby+0x94c>
                    kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
100022ec:	e0bffb17 	ldw	r2,-20(fp)
100022f0:	10800717 	ldw	r2,28(r2)
100022f4:	10800044 	addi	r2,r2,1
100022f8:	01400284 	movi	r5,10
100022fc:	1009883a 	mov	r4,r2
10002300:	000688c0 	call	1000688c <__modsi3>
10002304:	1007883a 	mov	r3,r2
10002308:	e0bffb17 	ldw	r2,-20(fp)
1000230c:	10c00715 	stw	r3,28(r2)

            // state update
            if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
                kirby->image = 0;
                kirby->action = 1;
                if (pre_keycode == keycode)
10002310:	00008806 	br	10002534 <updateKirby+0xb6c>
                    kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
                else
                    kirby->frame = 0;
10002314:	e0bffb17 	ldw	r2,-20(fp)
10002318:	10000715 	stw	zero,28(r2)

            // state update
            if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
                kirby->image = 0;
                kirby->action = 1;
                if (pre_keycode == keycode)
1000231c:	00008506 	br	10002534 <updateKirby+0xb6c>
                    kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
                else
                    kirby->frame = 0;
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
10002320:	e0bffb17 	ldw	r2,-20(fp)
10002324:	10800917 	ldw	r2,36(r2)
10002328:	10001e1e 	bne	r2,zero,100023a4 <updateKirby+0x9dc>
1000232c:	e0bffb17 	ldw	r2,-20(fp)
10002330:	10800a17 	ldw	r2,40(r2)
10002334:	10800058 	cmpnei	r2,r2,1
10002338:	10001a1e 	bne	r2,zero,100023a4 <updateKirby+0x9dc>
                kirby->image = 1;
1000233c:	e0bffb17 	ldw	r2,-20(fp)
10002340:	00c00044 	movi	r3,1
10002344:	10c00315 	stw	r3,12(r2)
                kirby->action = 1;
10002348:	e0bffb17 	ldw	r2,-20(fp)
1000234c:	00c00044 	movi	r3,1
10002350:	10c00615 	stw	r3,24(r2)
                if (pre_keycode == keycode)
10002354:	e0c00217 	ldw	r3,8(fp)
10002358:	e0bffe17 	ldw	r2,-8(fp)
1000235c:	18800a1e 	bne	r3,r2,10002388 <updateKirby+0x9c0>
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
10002360:	e0bffb17 	ldw	r2,-20(fp)
10002364:	10800717 	ldw	r2,28(r2)
10002368:	10800044 	addi	r2,r2,1
1000236c:	01400344 	movi	r5,13
10002370:	1009883a 	mov	r4,r2
10002374:	000688c0 	call	1000688c <__modsi3>
10002378:	1007883a 	mov	r3,r2
1000237c:	e0bffb17 	ldw	r2,-20(fp)
10002380:	10c00715 	stw	r3,28(r2)
                else
                    kirby->frame = 0;
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
                kirby->image = 1;
                kirby->action = 1;
                if (pre_keycode == keycode)
10002384:	00006b06 	br	10002534 <updateKirby+0xb6c>
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope; 
10002388:	e0bffb17 	ldw	r2,-20(fp)
1000238c:	10800817 	ldw	r2,32(r2)
10002390:	1085883a 	add	r2,r2,r2
10002394:	1007883a 	mov	r3,r2
10002398:	e0bffb17 	ldw	r2,-20(fp)
1000239c:	10c00715 	stw	r3,28(r2)
                else
                    kirby->frame = 0;
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
                kirby->image = 1;
                kirby->action = 1;
                if (pre_keycode == keycode)
100023a0:	00006406 	br	10002534 <updateKirby+0xb6c>
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope; 
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
100023a4:	e0bffb17 	ldw	r2,-20(fp)
100023a8:	10800917 	ldw	r2,36(r2)
100023ac:	10800058 	cmpnei	r2,r2,1
100023b0:	10002c1e 	bne	r2,zero,10002464 <updateKirby+0xa9c>
100023b4:	e0bffb17 	ldw	r2,-20(fp)
100023b8:	10800a17 	ldw	r2,40(r2)
100023bc:	1000291e 	bne	r2,zero,10002464 <updateKirby+0xa9c>
                if (will_Touch_Ground(kirby, kirby->map)) {
100023c0:	e0bffb17 	ldw	r2,-20(fp)
100023c4:	10800217 	ldw	r2,8(r2)
100023c8:	100b883a 	mov	r5,r2
100023cc:	e13ffb17 	ldw	r4,-20(fp)
100023d0:	00037000 	call	10003700 <will_Touch_Ground>
100023d4:	10001626 	beq	r2,zero,10002430 <updateKirby+0xa68>
                    kirby->image = 0;
100023d8:	e0bffb17 	ldw	r2,-20(fp)
100023dc:	10000315 	stw	zero,12(r2)
                    kirby->action = 1;
100023e0:	e0bffb17 	ldw	r2,-20(fp)
100023e4:	00c00044 	movi	r3,1
100023e8:	10c00615 	stw	r3,24(r2)
                    kirby->in_air = 0;
100023ec:	e0bffb17 	ldw	r2,-20(fp)
100023f0:	10000915 	stw	zero,36(r2)
                    kirby->frame = 0;
100023f4:	e0bffb17 	ldw	r2,-20(fp)
100023f8:	10000715 	stw	zero,28(r2)
                    if (pre_keycode == keycode)
100023fc:	e0c00217 	ldw	r3,8(fp)
10002400:	e0bffe17 	ldw	r2,-8(fp)
10002404:	18804a1e 	bne	r3,r2,10002530 <updateKirby+0xb68>
                        kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
10002408:	e0bffb17 	ldw	r2,-20(fp)
1000240c:	10800717 	ldw	r2,28(r2)
10002410:	10800044 	addi	r2,r2,1
10002414:	01400284 	movi	r5,10
10002418:	1009883a 	mov	r4,r2
1000241c:	000688c0 	call	1000688c <__modsi3>
10002420:	1007883a 	mov	r3,r2
10002424:	e0bffb17 	ldw	r2,-20(fp)
10002428:	10c00715 	stw	r3,28(r2)
                if (pre_keycode == keycode)
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope; 
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
1000242c:	00004006 	br	10002530 <updateKirby+0xb68>
                    kirby->in_air = 0;
                    kirby->frame = 0;
                    if (pre_keycode == keycode)
                        kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
                } else {
                    kirby->image = 0;
10002430:	e0bffb17 	ldw	r2,-20(fp)
10002434:	10000315 	stw	zero,12(r2)
                    kirby->action = 0;
10002438:	e0bffb17 	ldw	r2,-20(fp)
1000243c:	10000615 	stw	zero,24(r2)
                    kirby->frame = 10;
10002440:	e0bffb17 	ldw	r2,-20(fp)
10002444:	00c00284 	movi	r3,10
10002448:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
1000244c:	e0bffb17 	ldw	r2,-20(fp)
10002450:	10800117 	ldw	r2,4(r2)
10002454:	10c000c4 	addi	r3,r2,3
10002458:	e0bffb17 	ldw	r2,-20(fp)
1000245c:	10c00115 	stw	r3,4(r2)
                if (pre_keycode == keycode)
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope; 
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
10002460:	00003306 	br	10002530 <updateKirby+0xb68>
                    kirby->image = 0;
                    kirby->action = 0;
                    kirby->frame = 10;
                    kirby->y += KIRBY_STEP_Y;
                }
            } else if  ((kirby->in_air == 1) && (kirby->is_inhaled == 1)) {
10002464:	e0bffb17 	ldw	r2,-20(fp)
10002468:	10800917 	ldw	r2,36(r2)
1000246c:	10800058 	cmpnei	r2,r2,1
10002470:	1000301e 	bne	r2,zero,10002534 <updateKirby+0xb6c>
10002474:	e0bffb17 	ldw	r2,-20(fp)
10002478:	10800a17 	ldw	r2,40(r2)
1000247c:	10800058 	cmpnei	r2,r2,1
10002480:	10002c1e 	bne	r2,zero,10002534 <updateKirby+0xb6c>
                if (will_Touch_Ground(kirby, kirby->map)) {
10002484:	e0bffb17 	ldw	r2,-20(fp)
10002488:	10800217 	ldw	r2,8(r2)
1000248c:	100b883a 	mov	r5,r2
10002490:	e13ffb17 	ldw	r4,-20(fp)
10002494:	00037000 	call	10003700 <will_Touch_Ground>
10002498:	10001626 	beq	r2,zero,100024f4 <updateKirby+0xb2c>
                    kirby->image = 1;
1000249c:	e0bffb17 	ldw	r2,-20(fp)
100024a0:	00c00044 	movi	r3,1
100024a4:	10c00315 	stw	r3,12(r2)
                    kirby->action = 0;
100024a8:	e0bffb17 	ldw	r2,-20(fp)
100024ac:	10000615 	stw	zero,24(r2)
                    kirby->in_air = 0;
100024b0:	e0bffb17 	ldw	r2,-20(fp)
100024b4:	10000915 	stw	zero,36(r2)
                    kirby->frame = 0;
100024b8:	e0bffb17 	ldw	r2,-20(fp)
100024bc:	10000715 	stw	zero,28(r2)
                    if (pre_keycode == keycode)
100024c0:	e0c00217 	ldw	r3,8(fp)
100024c4:	e0bffe17 	ldw	r2,-8(fp)
100024c8:	18801a1e 	bne	r3,r2,10002534 <updateKirby+0xb6c>
                        kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
100024cc:	e0bffb17 	ldw	r2,-20(fp)
100024d0:	10800717 	ldw	r2,28(r2)
100024d4:	10800044 	addi	r2,r2,1
100024d8:	01400344 	movi	r5,13
100024dc:	1009883a 	mov	r4,r2
100024e0:	000688c0 	call	1000688c <__modsi3>
100024e4:	1007883a 	mov	r3,r2
100024e8:	e0bffb17 	ldw	r2,-20(fp)
100024ec:	10c00715 	stw	r3,28(r2)
100024f0:	00001006 	br	10002534 <updateKirby+0xb6c>
                } else {
                    kirby->image = 1;
100024f4:	e0bffb17 	ldw	r2,-20(fp)
100024f8:	00c00044 	movi	r3,1
100024fc:	10c00315 	stw	r3,12(r2)
                    kirby->action = 2;
10002500:	e0bffb17 	ldw	r2,-20(fp)
10002504:	00c00084 	movi	r3,2
10002508:	10c00615 	stw	r3,24(r2)
                    kirby->frame = 13;
1000250c:	e0bffb17 	ldw	r2,-20(fp)
10002510:	00c00344 	movi	r3,13
10002514:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
10002518:	e0bffb17 	ldw	r2,-20(fp)
1000251c:	10800117 	ldw	r2,4(r2)
10002520:	10c000c4 	addi	r3,r2,3
10002524:	e0bffb17 	ldw	r2,-20(fp)
10002528:	10c00115 	stw	r3,4(r2)
1000252c:	00000106 	br	10002534 <updateKirby+0xb6c>
                if (pre_keycode == keycode)
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope; 
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
10002530:	0001883a 	nop
                    kirby->action = 2;
                    kirby->frame = 13;
                    kirby->y += KIRBY_STEP_Y;
                }
            }
            frame_Time(KIRBY_FRAME_TIME_WALK);
10002534:	01017704 	movi	r4,1500
10002538:	00036680 	call	10003668 <frame_Time>
            break;
1000253c:	0002ee06 	br	100030f8 <updateKirby+0x1730>

        case 0x0716:   //"d" & "s"
        case 0x1607:
        case 0x0700:
        case 0x0007: { //"d" right move
            kirby->x += KIRBY_STEP_X;
10002540:	e0bffb17 	ldw	r2,-20(fp)
10002544:	10800017 	ldw	r2,0(r2)
10002548:	10c000c4 	addi	r3,r2,3
1000254c:	e0bffb17 	ldw	r2,-20(fp)
10002550:	10c00015 	stw	r3,0(r2)
            kirby->is_left = 0;
10002554:	e0bffb17 	ldw	r2,-20(fp)
10002558:	10000415 	stw	zero,16(r2)

            // Kirby may walk to air
            if (will_Touch_Ground(kirby, kirby->map) == 0)
1000255c:	e0bffb17 	ldw	r2,-20(fp)
10002560:	10800217 	ldw	r2,8(r2)
10002564:	100b883a 	mov	r5,r2
10002568:	e13ffb17 	ldw	r4,-20(fp)
1000256c:	00037000 	call	10003700 <will_Touch_Ground>
10002570:	1000031e 	bne	r2,zero,10002580 <updateKirby+0xbb8>
                kirby->in_air = 1;
10002574:	e0bffb17 	ldw	r2,-20(fp)
10002578:	00c00044 	movi	r3,1
1000257c:	10c00915 	stw	r3,36(r2)

            // state update
            if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
10002580:	e0bffb17 	ldw	r2,-20(fp)
10002584:	10800917 	ldw	r2,36(r2)
10002588:	1000181e 	bne	r2,zero,100025ec <updateKirby+0xc24>
1000258c:	e0bffb17 	ldw	r2,-20(fp)
10002590:	10800a17 	ldw	r2,40(r2)
10002594:	1000151e 	bne	r2,zero,100025ec <updateKirby+0xc24>
                kirby->image = 0;
10002598:	e0bffb17 	ldw	r2,-20(fp)
1000259c:	10000315 	stw	zero,12(r2)
                kirby->action = 1;
100025a0:	e0bffb17 	ldw	r2,-20(fp)
100025a4:	00c00044 	movi	r3,1
100025a8:	10c00615 	stw	r3,24(r2)
                if (pre_keycode == keycode)
100025ac:	e0c00217 	ldw	r3,8(fp)
100025b0:	e0bffe17 	ldw	r2,-8(fp)
100025b4:	18800a1e 	bne	r3,r2,100025e0 <updateKirby+0xc18>
                    kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
100025b8:	e0bffb17 	ldw	r2,-20(fp)
100025bc:	10800717 	ldw	r2,28(r2)
100025c0:	10800044 	addi	r2,r2,1
100025c4:	01400284 	movi	r5,10
100025c8:	1009883a 	mov	r4,r2
100025cc:	000688c0 	call	1000688c <__modsi3>
100025d0:	1007883a 	mov	r3,r2
100025d4:	e0bffb17 	ldw	r2,-20(fp)
100025d8:	10c00715 	stw	r3,28(r2)

            // state update
            if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
                kirby->image = 0;
                kirby->action = 1;
                if (pre_keycode == keycode)
100025dc:	00008806 	br	10002800 <updateKirby+0xe38>
                    kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
                else
                    kirby->frame = 0;
100025e0:	e0bffb17 	ldw	r2,-20(fp)
100025e4:	10000715 	stw	zero,28(r2)

            // state update
            if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
                kirby->image = 0;
                kirby->action = 1;
                if (pre_keycode == keycode)
100025e8:	00008506 	br	10002800 <updateKirby+0xe38>
                    kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
                else
                    kirby->frame = 0;
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
100025ec:	e0bffb17 	ldw	r2,-20(fp)
100025f0:	10800917 	ldw	r2,36(r2)
100025f4:	10001e1e 	bne	r2,zero,10002670 <updateKirby+0xca8>
100025f8:	e0bffb17 	ldw	r2,-20(fp)
100025fc:	10800a17 	ldw	r2,40(r2)
10002600:	10800058 	cmpnei	r2,r2,1
10002604:	10001a1e 	bne	r2,zero,10002670 <updateKirby+0xca8>
                kirby->image = 1;
10002608:	e0bffb17 	ldw	r2,-20(fp)
1000260c:	00c00044 	movi	r3,1
10002610:	10c00315 	stw	r3,12(r2)
                kirby->action = 1;
10002614:	e0bffb17 	ldw	r2,-20(fp)
10002618:	00c00044 	movi	r3,1
1000261c:	10c00615 	stw	r3,24(r2)
                if (pre_keycode == keycode)
10002620:	e0c00217 	ldw	r3,8(fp)
10002624:	e0bffe17 	ldw	r2,-8(fp)
10002628:	18800a1e 	bne	r3,r2,10002654 <updateKirby+0xc8c>
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
1000262c:	e0bffb17 	ldw	r2,-20(fp)
10002630:	10800717 	ldw	r2,28(r2)
10002634:	10800044 	addi	r2,r2,1
10002638:	01400344 	movi	r5,13
1000263c:	1009883a 	mov	r4,r2
10002640:	000688c0 	call	1000688c <__modsi3>
10002644:	1007883a 	mov	r3,r2
10002648:	e0bffb17 	ldw	r2,-20(fp)
1000264c:	10c00715 	stw	r3,28(r2)
                else
                    kirby->frame = 0;
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
                kirby->image = 1;
                kirby->action = 1;
                if (pre_keycode == keycode)
10002650:	00006b06 	br	10002800 <updateKirby+0xe38>
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope;
10002654:	e0bffb17 	ldw	r2,-20(fp)
10002658:	10800817 	ldw	r2,32(r2)
1000265c:	1085883a 	add	r2,r2,r2
10002660:	1007883a 	mov	r3,r2
10002664:	e0bffb17 	ldw	r2,-20(fp)
10002668:	10c00715 	stw	r3,28(r2)
                else
                    kirby->frame = 0;
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
                kirby->image = 1;
                kirby->action = 1;
                if (pre_keycode == keycode)
1000266c:	00006406 	br	10002800 <updateKirby+0xe38>
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope;
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
10002670:	e0bffb17 	ldw	r2,-20(fp)
10002674:	10800917 	ldw	r2,36(r2)
10002678:	10800058 	cmpnei	r2,r2,1
1000267c:	10002c1e 	bne	r2,zero,10002730 <updateKirby+0xd68>
10002680:	e0bffb17 	ldw	r2,-20(fp)
10002684:	10800a17 	ldw	r2,40(r2)
10002688:	1000291e 	bne	r2,zero,10002730 <updateKirby+0xd68>
                if (will_Touch_Ground(kirby, kirby->map)) {
1000268c:	e0bffb17 	ldw	r2,-20(fp)
10002690:	10800217 	ldw	r2,8(r2)
10002694:	100b883a 	mov	r5,r2
10002698:	e13ffb17 	ldw	r4,-20(fp)
1000269c:	00037000 	call	10003700 <will_Touch_Ground>
100026a0:	10001626 	beq	r2,zero,100026fc <updateKirby+0xd34>
                    kirby->image = 0;
100026a4:	e0bffb17 	ldw	r2,-20(fp)
100026a8:	10000315 	stw	zero,12(r2)
                    kirby->action = 1;
100026ac:	e0bffb17 	ldw	r2,-20(fp)
100026b0:	00c00044 	movi	r3,1
100026b4:	10c00615 	stw	r3,24(r2)
                    kirby->in_air = 0;
100026b8:	e0bffb17 	ldw	r2,-20(fp)
100026bc:	10000915 	stw	zero,36(r2)
                    kirby->frame = 0;
100026c0:	e0bffb17 	ldw	r2,-20(fp)
100026c4:	10000715 	stw	zero,28(r2)
                    if (pre_keycode == keycode)
100026c8:	e0c00217 	ldw	r3,8(fp)
100026cc:	e0bffe17 	ldw	r2,-8(fp)
100026d0:	18804a1e 	bne	r3,r2,100027fc <updateKirby+0xe34>
                        kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
100026d4:	e0bffb17 	ldw	r2,-20(fp)
100026d8:	10800717 	ldw	r2,28(r2)
100026dc:	10800044 	addi	r2,r2,1
100026e0:	01400284 	movi	r5,10
100026e4:	1009883a 	mov	r4,r2
100026e8:	000688c0 	call	1000688c <__modsi3>
100026ec:	1007883a 	mov	r3,r2
100026f0:	e0bffb17 	ldw	r2,-20(fp)
100026f4:	10c00715 	stw	r3,28(r2)
                if (pre_keycode == keycode)
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope;
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
100026f8:	00004006 	br	100027fc <updateKirby+0xe34>
                    kirby->in_air = 0;
                    kirby->frame = 0;
                    if (pre_keycode == keycode)
                        kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
                } else {
                    kirby->image = 0;
100026fc:	e0bffb17 	ldw	r2,-20(fp)
10002700:	10000315 	stw	zero,12(r2)
                    kirby->action = 0;
10002704:	e0bffb17 	ldw	r2,-20(fp)
10002708:	10000615 	stw	zero,24(r2)
                    kirby->frame = 10;
1000270c:	e0bffb17 	ldw	r2,-20(fp)
10002710:	00c00284 	movi	r3,10
10002714:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
10002718:	e0bffb17 	ldw	r2,-20(fp)
1000271c:	10800117 	ldw	r2,4(r2)
10002720:	10c000c4 	addi	r3,r2,3
10002724:	e0bffb17 	ldw	r2,-20(fp)
10002728:	10c00115 	stw	r3,4(r2)
                if (pre_keycode == keycode)
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope;
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
1000272c:	00003306 	br	100027fc <updateKirby+0xe34>
                    kirby->image = 0;
                    kirby->action = 0;
                    kirby->frame = 10;
                    kirby->y += KIRBY_STEP_Y;
                }
            } else if  ((kirby->in_air == 1) && (kirby->is_inhaled == 1)) {
10002730:	e0bffb17 	ldw	r2,-20(fp)
10002734:	10800917 	ldw	r2,36(r2)
10002738:	10800058 	cmpnei	r2,r2,1
1000273c:	1000301e 	bne	r2,zero,10002800 <updateKirby+0xe38>
10002740:	e0bffb17 	ldw	r2,-20(fp)
10002744:	10800a17 	ldw	r2,40(r2)
10002748:	10800058 	cmpnei	r2,r2,1
1000274c:	10002c1e 	bne	r2,zero,10002800 <updateKirby+0xe38>
                if (will_Touch_Ground(kirby, kirby->map)) {
10002750:	e0bffb17 	ldw	r2,-20(fp)
10002754:	10800217 	ldw	r2,8(r2)
10002758:	100b883a 	mov	r5,r2
1000275c:	e13ffb17 	ldw	r4,-20(fp)
10002760:	00037000 	call	10003700 <will_Touch_Ground>
10002764:	10001626 	beq	r2,zero,100027c0 <updateKirby+0xdf8>
                    kirby->image = 1;
10002768:	e0bffb17 	ldw	r2,-20(fp)
1000276c:	00c00044 	movi	r3,1
10002770:	10c00315 	stw	r3,12(r2)
                    kirby->action = 0;
10002774:	e0bffb17 	ldw	r2,-20(fp)
10002778:	10000615 	stw	zero,24(r2)
                    kirby->in_air = 0;
1000277c:	e0bffb17 	ldw	r2,-20(fp)
10002780:	10000915 	stw	zero,36(r2)
                    kirby->frame = 0;
10002784:	e0bffb17 	ldw	r2,-20(fp)
10002788:	10000715 	stw	zero,28(r2)
                    if (pre_keycode == keycode)
1000278c:	e0c00217 	ldw	r3,8(fp)
10002790:	e0bffe17 	ldw	r2,-8(fp)
10002794:	18801a1e 	bne	r3,r2,10002800 <updateKirby+0xe38>
                        kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
10002798:	e0bffb17 	ldw	r2,-20(fp)
1000279c:	10800717 	ldw	r2,28(r2)
100027a0:	10800044 	addi	r2,r2,1
100027a4:	01400344 	movi	r5,13
100027a8:	1009883a 	mov	r4,r2
100027ac:	000688c0 	call	1000688c <__modsi3>
100027b0:	1007883a 	mov	r3,r2
100027b4:	e0bffb17 	ldw	r2,-20(fp)
100027b8:	10c00715 	stw	r3,28(r2)
100027bc:	00001006 	br	10002800 <updateKirby+0xe38>
                } else {
                    kirby->image = 1;
100027c0:	e0bffb17 	ldw	r2,-20(fp)
100027c4:	00c00044 	movi	r3,1
100027c8:	10c00315 	stw	r3,12(r2)
                    kirby->action = 2;
100027cc:	e0bffb17 	ldw	r2,-20(fp)
100027d0:	00c00084 	movi	r3,2
100027d4:	10c00615 	stw	r3,24(r2)
                    kirby->frame = 13;
100027d8:	e0bffb17 	ldw	r2,-20(fp)
100027dc:	00c00344 	movi	r3,13
100027e0:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
100027e4:	e0bffb17 	ldw	r2,-20(fp)
100027e8:	10800117 	ldw	r2,4(r2)
100027ec:	10c000c4 	addi	r3,r2,3
100027f0:	e0bffb17 	ldw	r2,-20(fp)
100027f4:	10c00115 	stw	r3,4(r2)
100027f8:	00000106 	br	10002800 <updateKirby+0xe38>
                if (pre_keycode == keycode)
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope;
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
100027fc:	0001883a 	nop
                    kirby->action = 2;
                    kirby->frame = 13;
                    kirby->y += KIRBY_STEP_Y;
                }
            }
            frame_Time(KIRBY_FRAME_TIME_WALK);
10002800:	01017704 	movi	r4,1500
10002804:	00036680 	call	10003668 <frame_Time>
            break;
10002808:	00023b06 	br	100030f8 <updateKirby+0x1730>
        }

        case 0x041a:   // "a" & "w"
        case 0x1a04: { // "w" & "a"
            kirby->is_left = 1;
1000280c:	e0bffb17 	ldw	r2,-20(fp)
10002810:	00c00044 	movi	r3,1
10002814:	10c00415 	stw	r3,16(r2)
            kirby->in_air = 1;
10002818:	e0bffb17 	ldw	r2,-20(fp)
1000281c:	00c00044 	movi	r3,1
10002820:	10c00915 	stw	r3,36(r2)
            kirby->is_inhaled = 1;
10002824:	e0bffb17 	ldw	r2,-20(fp)
10002828:	00c00044 	movi	r3,1
1000282c:	10c00a15 	stw	r3,40(r2)
            kirby->image = 1;
10002830:	e0bffb17 	ldw	r2,-20(fp)
10002834:	00c00044 	movi	r3,1
10002838:	10c00315 	stw	r3,12(r2)
            kirby->action = 2;
1000283c:	e0bffb17 	ldw	r2,-20(fp)
10002840:	00c00084 	movi	r3,2
10002844:	10c00615 	stw	r3,24(r2)
            if (pre_keycode == keycode)
10002848:	e0c00217 	ldw	r3,8(fp)
1000284c:	e0bffe17 	ldw	r2,-8(fp)
10002850:	18800a1e 	bne	r3,r2,1000287c <updateKirby+0xeb4>
                kirby->frame = 7 + ((kirby->frame - 7) + 1) % KIRBY_INHALED_FLY_FN;
10002854:	e0bffb17 	ldw	r2,-20(fp)
10002858:	10800717 	ldw	r2,28(r2)
1000285c:	10bffe84 	addi	r2,r2,-6
10002860:	01400184 	movi	r5,6
10002864:	1009883a 	mov	r4,r2
10002868:	000688c0 	call	1000688c <__modsi3>
1000286c:	10c001c4 	addi	r3,r2,7
10002870:	e0bffb17 	ldw	r2,-20(fp)
10002874:	10c00715 	stw	r3,28(r2)
10002878:	00000306 	br	10002888 <updateKirby+0xec0>
            else
                kirby->frame = 7;
1000287c:	e0bffb17 	ldw	r2,-20(fp)
10002880:	00c001c4 	movi	r3,7
10002884:	10c00715 	stw	r3,28(r2)
            // TO DO: Maybe need to check whether tough the up walls
            kirby->y -= KIRBY_STEP_Y;
10002888:	e0bffb17 	ldw	r2,-20(fp)
1000288c:	10800117 	ldw	r2,4(r2)
10002890:	10ffff44 	addi	r3,r2,-3
10002894:	e0bffb17 	ldw	r2,-20(fp)
10002898:	10c00115 	stw	r3,4(r2)
            kirby->x -= KIRBY_STEP_X;
1000289c:	e0bffb17 	ldw	r2,-20(fp)
100028a0:	10800017 	ldw	r2,0(r2)
100028a4:	10ffff44 	addi	r3,r2,-3
100028a8:	e0bffb17 	ldw	r2,-20(fp)
100028ac:	10c00015 	stw	r3,0(r2)
            frame_Time(KIRBY_FRAME_TIME_WALK);
100028b0:	01017704 	movi	r4,1500
100028b4:	00036680 	call	10003668 <frame_Time>
            break;
100028b8:	00020f06 	br	100030f8 <updateKirby+0x1730>
        }

        case 0x071a:   // "d" & "w"
        case 0x1a07:{  // "w" & "d"
            kirby->is_left = 0;
100028bc:	e0bffb17 	ldw	r2,-20(fp)
100028c0:	10000415 	stw	zero,16(r2)
            kirby->in_air = 1;
100028c4:	e0bffb17 	ldw	r2,-20(fp)
100028c8:	00c00044 	movi	r3,1
100028cc:	10c00915 	stw	r3,36(r2)
            kirby->is_inhaled = 1;
100028d0:	e0bffb17 	ldw	r2,-20(fp)
100028d4:	00c00044 	movi	r3,1
100028d8:	10c00a15 	stw	r3,40(r2)
            kirby->image = 1;
100028dc:	e0bffb17 	ldw	r2,-20(fp)
100028e0:	00c00044 	movi	r3,1
100028e4:	10c00315 	stw	r3,12(r2)
            kirby->action = 2;
100028e8:	e0bffb17 	ldw	r2,-20(fp)
100028ec:	00c00084 	movi	r3,2
100028f0:	10c00615 	stw	r3,24(r2)
            if (pre_keycode == keycode)
100028f4:	e0c00217 	ldw	r3,8(fp)
100028f8:	e0bffe17 	ldw	r2,-8(fp)
100028fc:	18800a1e 	bne	r3,r2,10002928 <updateKirby+0xf60>
                kirby->frame = 7 + ((kirby->frame - 7) + 1) % KIRBY_INHALED_FLY_FN;
10002900:	e0bffb17 	ldw	r2,-20(fp)
10002904:	10800717 	ldw	r2,28(r2)
10002908:	10bffe84 	addi	r2,r2,-6
1000290c:	01400184 	movi	r5,6
10002910:	1009883a 	mov	r4,r2
10002914:	000688c0 	call	1000688c <__modsi3>
10002918:	10c001c4 	addi	r3,r2,7
1000291c:	e0bffb17 	ldw	r2,-20(fp)
10002920:	10c00715 	stw	r3,28(r2)
10002924:	00000306 	br	10002934 <updateKirby+0xf6c>
            else
                kirby->frame = 7;
10002928:	e0bffb17 	ldw	r2,-20(fp)
1000292c:	00c001c4 	movi	r3,7
10002930:	10c00715 	stw	r3,28(r2)
            // TO DO: Maybe need to check whether tough the up walls
            kirby->y -= KIRBY_STEP_Y;
10002934:	e0bffb17 	ldw	r2,-20(fp)
10002938:	10800117 	ldw	r2,4(r2)
1000293c:	10ffff44 	addi	r3,r2,-3
10002940:	e0bffb17 	ldw	r2,-20(fp)
10002944:	10c00115 	stw	r3,4(r2)
            kirby->x += KIRBY_STEP_X;
10002948:	e0bffb17 	ldw	r2,-20(fp)
1000294c:	10800017 	ldw	r2,0(r2)
10002950:	10c000c4 	addi	r3,r2,3
10002954:	e0bffb17 	ldw	r2,-20(fp)
10002958:	10c00015 	stw	r3,0(r2)
            frame_Time(KIRBY_FRAME_TIME_WALK);
1000295c:	01017704 	movi	r4,1500
10002960:	00036680 	call	10003668 <frame_Time>
            break;
10002964:	0001e406 	br	100030f8 <updateKirby+0x1730>
        }
        
        case 0x0016: { //"s" squat
            if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
10002968:	e0bffb17 	ldw	r2,-20(fp)
1000296c:	10800917 	ldw	r2,36(r2)
10002970:	1000231e 	bne	r2,zero,10002a00 <updateKirby+0x1038>
10002974:	e0bffb17 	ldw	r2,-20(fp)
10002978:	10800a17 	ldw	r2,40(r2)
1000297c:	1000201e 	bne	r2,zero,10002a00 <updateKirby+0x1038>
                kirby->image = 0;
10002980:	e0bffb17 	ldw	r2,-20(fp)
10002984:	10000315 	stw	zero,12(r2)
                kirby->action = 2;
10002988:	e0bffb17 	ldw	r2,-20(fp)
1000298c:	00c00084 	movi	r3,2
10002990:	10c00615 	stw	r3,24(r2)
                if (pre_keycode == keycode)
10002994:	e0c00217 	ldw	r3,8(fp)
10002998:	e0bffe17 	ldw	r2,-8(fp)
1000299c:	1880131e 	bne	r3,r2,100029ec <updateKirby+0x1024>
                    kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
100029a0:	e0bffb17 	ldw	r2,-20(fp)
100029a4:	10800717 	ldw	r2,28(r2)
100029a8:	10c00044 	addi	r3,r2,1
100029ac:	00a00034 	movhi	r2,32768
100029b0:	10800044 	addi	r2,r2,1
100029b4:	1884703a 	and	r2,r3,r2
100029b8:	1000040e 	bge	r2,zero,100029cc <updateKirby+0x1004>
100029bc:	10bfffc4 	addi	r2,r2,-1
100029c0:	00ffff84 	movi	r3,-2
100029c4:	10c4b03a 	or	r2,r2,r3
100029c8:	10800044 	addi	r2,r2,1
100029cc:	1007883a 	mov	r3,r2
100029d0:	e0bffb17 	ldw	r2,-20(fp)
100029d4:	10800817 	ldw	r2,32(r2)
100029d8:	1085883a 	add	r2,r2,r2
100029dc:	1887883a 	add	r3,r3,r2
100029e0:	e0bffb17 	ldw	r2,-20(fp)
100029e4:	10c00715 	stw	r3,28(r2)
100029e8:	00000206 	br	100029f4 <updateKirby+0x102c>
                else
                    kirby->frame = 0;
100029ec:	e0bffb17 	ldw	r2,-20(fp)
100029f0:	10000715 	stw	zero,28(r2)
                frame_Time(KIRBY_FRAME_TIME_BLINK);
100029f4:	0102ee04 	movi	r4,3000
100029f8:	00036680 	call	10003668 <frame_Time>
100029fc:	00007506 	br	10002bd4 <updateKirby+0x120c>
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) { // Gulp
10002a00:	e0bffb17 	ldw	r2,-20(fp)
10002a04:	10800917 	ldw	r2,36(r2)
10002a08:	1000101e 	bne	r2,zero,10002a4c <updateKirby+0x1084>
10002a0c:	e0bffb17 	ldw	r2,-20(fp)
10002a10:	10800a17 	ldw	r2,40(r2)
10002a14:	10800058 	cmpnei	r2,r2,1
10002a18:	10000c1e 	bne	r2,zero,10002a4c <updateKirby+0x1084>
                kirby->gulping = 1;
10002a1c:	e0bffb17 	ldw	r2,-20(fp)
10002a20:	00c00044 	movi	r3,1
10002a24:	10c00f15 	stw	r3,60(r2)
                kirby->image = 1;
10002a28:	e0bffb17 	ldw	r2,-20(fp)
10002a2c:	00c00044 	movi	r3,1
10002a30:	10c00315 	stw	r3,12(r2)
                kirby->action = 2;
10002a34:	e0bffb17 	ldw	r2,-20(fp)
10002a38:	00c00084 	movi	r3,2
10002a3c:	10c00615 	stw	r3,24(r2)
                kirby->frame = 0;
10002a40:	e0bffb17 	ldw	r2,-20(fp)
10002a44:	10000715 	stw	zero,28(r2)
10002a48:	00006206 	br	10002bd4 <updateKirby+0x120c>
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
10002a4c:	e0bffb17 	ldw	r2,-20(fp)
10002a50:	10800917 	ldw	r2,36(r2)
10002a54:	10800058 	cmpnei	r2,r2,1
10002a58:	10002d1e 	bne	r2,zero,10002b10 <updateKirby+0x1148>
10002a5c:	e0bffb17 	ldw	r2,-20(fp)
10002a60:	10800a17 	ldw	r2,40(r2)
10002a64:	10002a1e 	bne	r2,zero,10002b10 <updateKirby+0x1148>
                if (will_Touch_Ground(kirby, kirby->map) == 1) {
10002a68:	e0bffb17 	ldw	r2,-20(fp)
10002a6c:	10800217 	ldw	r2,8(r2)
10002a70:	100b883a 	mov	r5,r2
10002a74:	e13ffb17 	ldw	r4,-20(fp)
10002a78:	00037000 	call	10003700 <will_Touch_Ground>
10002a7c:	10800058 	cmpnei	r2,r2,1
10002a80:	1000141e 	bne	r2,zero,10002ad4 <updateKirby+0x110c>
                    kirby->in_air = 0;
10002a84:	e0bffb17 	ldw	r2,-20(fp)
10002a88:	10000915 	stw	zero,36(r2)
                    force_It_On_Ground(kirby, kirby->map); // It will go to the ground
10002a8c:	e0bffb17 	ldw	r2,-20(fp)
10002a90:	10800217 	ldw	r2,8(r2)
10002a94:	100b883a 	mov	r5,r2
10002a98:	e13ffb17 	ldw	r4,-20(fp)
10002a9c:	00032540 	call	10003254 <force_It_On_Ground>
                    kirby->image = 0;
10002aa0:	e0bffb17 	ldw	r2,-20(fp)
10002aa4:	10000315 	stw	zero,12(r2)
                    kirby->action = 0;
10002aa8:	e0bffb17 	ldw	r2,-20(fp)
10002aac:	10000615 	stw	zero,24(r2)
                    kirby->frame = 0 + 2 * kirby->in_slope;
10002ab0:	e0bffb17 	ldw	r2,-20(fp)
10002ab4:	10800817 	ldw	r2,32(r2)
10002ab8:	1085883a 	add	r2,r2,r2
10002abc:	1007883a 	mov	r3,r2
10002ac0:	e0bffb17 	ldw	r2,-20(fp)
10002ac4:	10c00715 	stw	r3,28(r2)
                    frame_Time(KIRBY_FRAME_TIME_BLINK);
10002ac8:	0102ee04 	movi	r4,3000
10002acc:	00036680 	call	10003668 <frame_Time>
                kirby->gulping = 1;
                kirby->image = 1;
                kirby->action = 2;
                kirby->frame = 0;
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map) == 1) {
10002ad0:	00004006 	br	10002bd4 <updateKirby+0x120c>
                    kirby->image = 0;
                    kirby->action = 0;
                    kirby->frame = 0 + 2 * kirby->in_slope;
                    frame_Time(KIRBY_FRAME_TIME_BLINK);
                } else {  // Slowly Drop downwards
                    kirby->image = 0;
10002ad4:	e0bffb17 	ldw	r2,-20(fp)
10002ad8:	10000315 	stw	zero,12(r2)
                    kirby->action = 0;
10002adc:	e0bffb17 	ldw	r2,-20(fp)
10002ae0:	10000615 	stw	zero,24(r2)
                    kirby->frame = 10;
10002ae4:	e0bffb17 	ldw	r2,-20(fp)
10002ae8:	00c00284 	movi	r3,10
10002aec:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
10002af0:	e0bffb17 	ldw	r2,-20(fp)
10002af4:	10800117 	ldw	r2,4(r2)
10002af8:	10c000c4 	addi	r3,r2,3
10002afc:	e0bffb17 	ldw	r2,-20(fp)
10002b00:	10c00115 	stw	r3,4(r2)
                    frame_Time(KIRBY_FRAME_TIME_WALK);
10002b04:	01017704 	movi	r4,1500
10002b08:	00036680 	call	10003668 <frame_Time>
                kirby->gulping = 1;
                kirby->image = 1;
                kirby->action = 2;
                kirby->frame = 0;
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map) == 1) {
10002b0c:	00003106 	br	10002bd4 <updateKirby+0x120c>
                    kirby->action = 0;
                    kirby->frame = 10;
                    kirby->y += KIRBY_STEP_Y;
                    frame_Time(KIRBY_FRAME_TIME_WALK);
                }
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 1)) {
10002b10:	e0bffb17 	ldw	r2,-20(fp)
10002b14:	10800917 	ldw	r2,36(r2)
10002b18:	10800058 	cmpnei	r2,r2,1
10002b1c:	1001711e 	bne	r2,zero,100030e4 <updateKirby+0x171c>
10002b20:	e0bffb17 	ldw	r2,-20(fp)
10002b24:	10800a17 	ldw	r2,40(r2)
10002b28:	10800058 	cmpnei	r2,r2,1
10002b2c:	10016d1e 	bne	r2,zero,100030e4 <updateKirby+0x171c>
                if (will_Touch_Ground(kirby, kirby->map) == 1) {
10002b30:	e0bffb17 	ldw	r2,-20(fp)
10002b34:	10800217 	ldw	r2,8(r2)
10002b38:	100b883a 	mov	r5,r2
10002b3c:	e13ffb17 	ldw	r4,-20(fp)
10002b40:	00037000 	call	10003700 <will_Touch_Ground>
10002b44:	10800058 	cmpnei	r2,r2,1
10002b48:	1000111e 	bne	r2,zero,10002b90 <updateKirby+0x11c8>
                    kirby->in_air = 0;
10002b4c:	e0bffb17 	ldw	r2,-20(fp)
10002b50:	10000915 	stw	zero,36(r2)
                    force_It_On_Ground(kirby, kirby->map); // It will go to the ground
10002b54:	e0bffb17 	ldw	r2,-20(fp)
10002b58:	10800217 	ldw	r2,8(r2)
10002b5c:	100b883a 	mov	r5,r2
10002b60:	e13ffb17 	ldw	r4,-20(fp)
10002b64:	00032540 	call	10003254 <force_It_On_Ground>
                    kirby->image = 1;
10002b68:	e0bffb17 	ldw	r2,-20(fp)
10002b6c:	00c00044 	movi	r3,1
10002b70:	10c00315 	stw	r3,12(r2)
                    kirby->action = 0;
10002b74:	e0bffb17 	ldw	r2,-20(fp)
10002b78:	10000615 	stw	zero,24(r2)
                    kirby->frame = 0;
10002b7c:	e0bffb17 	ldw	r2,-20(fp)
10002b80:	10000715 	stw	zero,28(r2)
                    frame_Time(KIRBY_FRAME_TIME_BLINK);
10002b84:	0102ee04 	movi	r4,3000
10002b88:	00036680 	call	10003668 <frame_Time>
                    kirby->frame = 13;
                    kirby->y += KIRBY_STEP_Y;
                    frame_Time(KIRBY_FRAME_TIME_WALK);
                }
            }
            break;
10002b8c:	00015506 	br	100030e4 <updateKirby+0x171c>
                    kirby->image = 1;
                    kirby->action = 0;
                    kirby->frame = 0;
                    frame_Time(KIRBY_FRAME_TIME_BLINK);
                } else {  // Slowly Drop downwards
                    kirby->image = 1;
10002b90:	e0bffb17 	ldw	r2,-20(fp)
10002b94:	00c00044 	movi	r3,1
10002b98:	10c00315 	stw	r3,12(r2)
                    kirby->action = 2;
10002b9c:	e0bffb17 	ldw	r2,-20(fp)
10002ba0:	00c00084 	movi	r3,2
10002ba4:	10c00615 	stw	r3,24(r2)
                    kirby->frame = 13;
10002ba8:	e0bffb17 	ldw	r2,-20(fp)
10002bac:	00c00344 	movi	r3,13
10002bb0:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
10002bb4:	e0bffb17 	ldw	r2,-20(fp)
10002bb8:	10800117 	ldw	r2,4(r2)
10002bbc:	10c000c4 	addi	r3,r2,3
10002bc0:	e0bffb17 	ldw	r2,-20(fp)
10002bc4:	10c00115 	stw	r3,4(r2)
                    frame_Time(KIRBY_FRAME_TIME_WALK);
10002bc8:	01017704 	movi	r4,1500
10002bcc:	00036680 	call	10003668 <frame_Time>
                }
            }
            break;
10002bd0:	00014406 	br	100030e4 <updateKirby+0x171c>
10002bd4:	00014306 	br	100030e4 <updateKirby+0x171c>
        }

        case 0x001a: { //"w" jump
            if (sqr_Dis_Kirby_Door(kirby) <= (DOOR_TOLERANCE * DOOR_TOLERANCE))
10002bd8:	e13ffb17 	ldw	r4,-20(fp)
10002bdc:	0003f940 	call	10003f94 <sqr_Dis_Kirby_Door>
10002be0:	10800948 	cmpgei	r2,r2,37
10002be4:	1000031e 	bne	r2,zero,10002bf4 <updateKirby+0x122c>
            {
                kirby->entered_door = 1;
10002be8:	e0bffb17 	ldw	r2,-20(fp)
10002bec:	00c00044 	movi	r3,1
10002bf0:	10c01015 	stw	r3,64(r2)
            }
            kirby->in_air = 1;
10002bf4:	e0bffb17 	ldw	r2,-20(fp)
10002bf8:	00c00044 	movi	r3,1
10002bfc:	10c00915 	stw	r3,36(r2)
            kirby->is_inhaled = 1;
10002c00:	e0bffb17 	ldw	r2,-20(fp)
10002c04:	00c00044 	movi	r3,1
10002c08:	10c00a15 	stw	r3,40(r2)
            kirby->image = 1;
10002c0c:	e0bffb17 	ldw	r2,-20(fp)
10002c10:	00c00044 	movi	r3,1
10002c14:	10c00315 	stw	r3,12(r2)
            kirby->action = 2;
10002c18:	e0bffb17 	ldw	r2,-20(fp)
10002c1c:	00c00084 	movi	r3,2
10002c20:	10c00615 	stw	r3,24(r2)
            if (pre_keycode == keycode) {
10002c24:	e0c00217 	ldw	r3,8(fp)
10002c28:	e0bffe17 	ldw	r2,-8(fp)
10002c2c:	18800a1e 	bne	r3,r2,10002c58 <updateKirby+0x1290>
                kirby->frame = 7 + ((kirby->frame - 7) + 1) % KIRBY_INHALED_FLY_FN;
10002c30:	e0bffb17 	ldw	r2,-20(fp)
10002c34:	10800717 	ldw	r2,28(r2)
10002c38:	10bffe84 	addi	r2,r2,-6
10002c3c:	01400184 	movi	r5,6
10002c40:	1009883a 	mov	r4,r2
10002c44:	000688c0 	call	1000688c <__modsi3>
10002c48:	10c001c4 	addi	r3,r2,7
10002c4c:	e0bffb17 	ldw	r2,-20(fp)
10002c50:	10c00715 	stw	r3,28(r2)
10002c54:	00000306 	br	10002c64 <updateKirby+0x129c>
            } else {
                kirby->frame = 7;
10002c58:	e0bffb17 	ldw	r2,-20(fp)
10002c5c:	00c001c4 	movi	r3,7
10002c60:	10c00715 	stw	r3,28(r2)
            }
            // TO DO: Maybe need to check whether tough the up walls
            kirby->y -= KIRBY_STEP_Y; // fly upwards
10002c64:	e0bffb17 	ldw	r2,-20(fp)
10002c68:	10800117 	ldw	r2,4(r2)
10002c6c:	10ffff44 	addi	r3,r2,-3
10002c70:	e0bffb17 	ldw	r2,-20(fp)
10002c74:	10c00115 	stw	r3,4(r2)
            frame_Time(KIRBY_FRAME_TIME_WALK);
10002c78:	01017704 	movi	r4,1500
10002c7c:	00036680 	call	10003668 <frame_Time>
            break;
10002c80:	00011d06 	br	100030f8 <updateKirby+0x1730>
        }

        case 0x000e: { //"k" Fake B button
            if (kirby->is_inhaled == 0) { // Inhale
10002c84:	e0bffb17 	ldw	r2,-20(fp)
10002c88:	10800a17 	ldw	r2,40(r2)
10002c8c:	1000331e 	bne	r2,zero,10002d5c <updateKirby+0x1394>
                kirby->inhaling = 1;
10002c90:	e0bffb17 	ldw	r2,-20(fp)
10002c94:	00c00044 	movi	r3,1
10002c98:	10c00c15 	stw	r3,48(r2)
                kirby->image = 1;
10002c9c:	e0bffb17 	ldw	r2,-20(fp)
10002ca0:	00c00044 	movi	r3,1
10002ca4:	10c00315 	stw	r3,12(r2)
                kirby->action = 3;
10002ca8:	e0bffb17 	ldw	r2,-20(fp)
10002cac:	00c000c4 	movi	r3,3
10002cb0:	10c00615 	stw	r3,24(r2)
                if (enemy_Should_Be_Inhaled(kirby, enemy) == 0) {// Not get enemy signal
10002cb4:	e17ffd17 	ldw	r5,-12(fp)
10002cb8:	e13ffb17 	ldw	r4,-20(fp)
10002cbc:	0003e8c0 	call	10003e8c <enemy_Should_Be_Inhaled>
10002cc0:	1000171e 	bne	r2,zero,10002d20 <updateKirby+0x1358>
                    if (keycode == pre_keycode)
10002cc4:	e0fffe17 	ldw	r3,-8(fp)
10002cc8:	e0800217 	ldw	r2,8(fp)
10002ccc:	18800f1e 	bne	r3,r2,10002d0c <updateKirby+0x1344>
                        kirby->frame = (kirby->frame + 1) % 2;
10002cd0:	e0bffb17 	ldw	r2,-20(fp)
10002cd4:	10800717 	ldw	r2,28(r2)
10002cd8:	10c00044 	addi	r3,r2,1
10002cdc:	00a00034 	movhi	r2,32768
10002ce0:	10800044 	addi	r2,r2,1
10002ce4:	1884703a 	and	r2,r3,r2
10002ce8:	1000040e 	bge	r2,zero,10002cfc <updateKirby+0x1334>
10002cec:	10bfffc4 	addi	r2,r2,-1
10002cf0:	00ffff84 	movi	r3,-2
10002cf4:	10c4b03a 	or	r2,r2,r3
10002cf8:	10800044 	addi	r2,r2,1
10002cfc:	1007883a 	mov	r3,r2
10002d00:	e0bffb17 	ldw	r2,-20(fp)
10002d04:	10c00715 	stw	r3,28(r2)
10002d08:	00000206 	br	10002d14 <updateKirby+0x134c>
                    else
                        kirby->frame = 0;
10002d0c:	e0bffb17 	ldw	r2,-20(fp)
10002d10:	10000715 	stw	zero,28(r2)
                    frame_Time(KIRBY_FRAME_TIME_INHALE * 2);
10002d14:	0109c404 	movi	r4,10000
10002d18:	00036680 	call	10003668 <frame_Time>
10002d1c:	00001a06 	br	10002d88 <updateKirby+0x13c0>
                } else { // TO DO: Get enemy signal, need test and add signal
                    // printf("\n################## Inhale Enemies ################\n");
                    kirby->inhaling = 2;
10002d20:	e0bffb17 	ldw	r2,-20(fp)
10002d24:	00c00084 	movi	r3,2
10002d28:	10c00c15 	stw	r3,48(r2)
                    kirby->image = 1;
10002d2c:	e0bffb17 	ldw	r2,-20(fp)
10002d30:	00c00044 	movi	r3,1
10002d34:	10c00315 	stw	r3,12(r2)
                    kirby->action = 3;
10002d38:	e0bffb17 	ldw	r2,-20(fp)
10002d3c:	00c000c4 	movi	r3,3
10002d40:	10c00615 	stw	r3,24(r2)
                    kirby->frame = 2;
10002d44:	e0bffb17 	ldw	r2,-20(fp)
10002d48:	00c00084 	movi	r3,2
10002d4c:	10c00715 	stw	r3,28(r2)
                    // TO DO: The way enemies is dead when inhaled by kirby
                    enemy->health = 0;  // Enemy is dead
10002d50:	e0bffd17 	ldw	r2,-12(fp)
10002d54:	10000315 	stw	zero,12(r2)
10002d58:	00000b06 	br	10002d88 <updateKirby+0x13c0>
                    // enemy->realx = 0;
                    // enemy->realy = 0;
                }
            } else { // Spitting
                kirby->spitting = 1;
10002d5c:	e0bffb17 	ldw	r2,-20(fp)
10002d60:	00c00044 	movi	r3,1
10002d64:	10c00d15 	stw	r3,52(r2)
                kirby->image = 1;
10002d68:	e0bffb17 	ldw	r2,-20(fp)
10002d6c:	00c00044 	movi	r3,1
10002d70:	10c00315 	stw	r3,12(r2)
                kirby->action = 4;
10002d74:	e0bffb17 	ldw	r2,-20(fp)
10002d78:	00c00104 	movi	r3,4
10002d7c:	10c00615 	stw	r3,24(r2)
                kirby->frame = 0;
10002d80:	e0bffb17 	ldw	r2,-20(fp)
10002d84:	10000715 	stw	zero,28(r2)
            }
            frame_Time(KIRBY_FRAME_TIME_GULP);
10002d88:	0103e804 	movi	r4,4000
10002d8c:	00036680 	call	10003668 <frame_Time>
            break;
10002d90:	0000d906 	br	100030f8 <updateKirby+0x1730>
            break;
        }

        case 0x160f:
        case 0x0f16: { //"l" & "s"
            if (kirby->is_inhaled == 0) {
10002d94:	e0bffb17 	ldw	r2,-20(fp)
10002d98:	10800a17 	ldw	r2,40(r2)
10002d9c:	1000d31e 	bne	r2,zero,100030ec <updateKirby+0x1724>
                kirby->kicking = 1;
10002da0:	e0bffb17 	ldw	r2,-20(fp)
10002da4:	00c00044 	movi	r3,1
10002da8:	10c00e15 	stw	r3,56(r2)
                kirby->image = 0;
10002dac:	e0bffb17 	ldw	r2,-20(fp)
10002db0:	10000315 	stw	zero,12(r2)
                kirby->action = 2;
10002db4:	e0bffb17 	ldw	r2,-20(fp)
10002db8:	00c00084 	movi	r3,2
10002dbc:	10c00615 	stw	r3,24(r2)
                kirby->frame = 6;
10002dc0:	e0bffb17 	ldw	r2,-20(fp)
10002dc4:	00c00184 	movi	r3,6
10002dc8:	10c00715 	stw	r3,28(r2)
                while ((get_keycode_value() == 0x160f) || (get_keycode_value() == 0x0f16)) {
10002dcc:	00001906 	br	10002e34 <updateKirby+0x146c>
                    kirby->image = 0;
10002dd0:	e0bffb17 	ldw	r2,-20(fp)
10002dd4:	10000315 	stw	zero,12(r2)
                    kirby->action = 2;
10002dd8:	e0bffb17 	ldw	r2,-20(fp)
10002ddc:	00c00084 	movi	r3,2
10002de0:	10c00615 	stw	r3,24(r2)
                    kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
10002de4:	e0bffb17 	ldw	r2,-20(fp)
10002de8:	10800717 	ldw	r2,28(r2)
10002dec:	10c00044 	addi	r3,r2,1
10002df0:	00a00034 	movhi	r2,32768
10002df4:	10800044 	addi	r2,r2,1
10002df8:	1884703a 	and	r2,r3,r2
10002dfc:	1000040e 	bge	r2,zero,10002e10 <updateKirby+0x1448>
10002e00:	10bfffc4 	addi	r2,r2,-1
10002e04:	00ffff84 	movi	r3,-2
10002e08:	10c4b03a 	or	r2,r2,r3
10002e0c:	10800044 	addi	r2,r2,1
10002e10:	1007883a 	mov	r3,r2
10002e14:	e0bffb17 	ldw	r2,-20(fp)
10002e18:	10800817 	ldw	r2,32(r2)
10002e1c:	1085883a 	add	r2,r2,r2
10002e20:	1887883a 	add	r3,r3,r2
10002e24:	e0bffb17 	ldw	r2,-20(fp)
10002e28:	10c00715 	stw	r3,28(r2)
                    upload_Kirby_Info(kirby);
10002e2c:	e13ffb17 	ldw	r4,-20(fp)
10002e30:	00017940 	call	10001794 <upload_Kirby_Info>
            if (kirby->is_inhaled == 0) {
                kirby->kicking = 1;
                kirby->image = 0;
                kirby->action = 2;
                kirby->frame = 6;
                while ((get_keycode_value() == 0x160f) || (get_keycode_value() == 0x0f16)) {
10002e34:	00065200 	call	10006520 <get_keycode_value>
10002e38:	108583e0 	cmpeqi	r2,r2,5647
10002e3c:	103fe41e 	bne	r2,zero,10002dd0 <__alt_data_end+0xf8002dd0>
10002e40:	00065200 	call	10006520 <get_keycode_value>
10002e44:	1083c5a0 	cmpeqi	r2,r2,3862
10002e48:	103fe11e 	bne	r2,zero,10002dd0 <__alt_data_end+0xf8002dd0>
                    kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
                    upload_Kirby_Info(kirby);
                    // force_It_On_Ground(kirby, kirby->map);
                }
            }
            break;
10002e4c:	0000a706 	br	100030ec <updateKirby+0x1724>
            frame_Time(KIRBY_FRAME_STOP);
            break;
        #endif

        default: { // "" Stand
            if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
10002e50:	e0bffb17 	ldw	r2,-20(fp)
10002e54:	10800917 	ldw	r2,36(r2)
10002e58:	1000261e 	bne	r2,zero,10002ef4 <updateKirby+0x152c>
10002e5c:	e0bffb17 	ldw	r2,-20(fp)
10002e60:	10800a17 	ldw	r2,40(r2)
10002e64:	1000231e 	bne	r2,zero,10002ef4 <updateKirby+0x152c>
                kirby->image = 0;
10002e68:	e0bffb17 	ldw	r2,-20(fp)
10002e6c:	10000315 	stw	zero,12(r2)
                kirby->action = 0;
10002e70:	e0bffb17 	ldw	r2,-20(fp)
10002e74:	10000615 	stw	zero,24(r2)
                if (pre_keycode == keycode) {
10002e78:	e0c00217 	ldw	r3,8(fp)
10002e7c:	e0bffe17 	ldw	r2,-8(fp)
10002e80:	1880131e 	bne	r3,r2,10002ed0 <updateKirby+0x1508>
                    kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
10002e84:	e0bffb17 	ldw	r2,-20(fp)
10002e88:	10800717 	ldw	r2,28(r2)
10002e8c:	10c00044 	addi	r3,r2,1
10002e90:	00a00034 	movhi	r2,32768
10002e94:	10800044 	addi	r2,r2,1
10002e98:	1884703a 	and	r2,r3,r2
10002e9c:	1000040e 	bge	r2,zero,10002eb0 <updateKirby+0x14e8>
10002ea0:	10bfffc4 	addi	r2,r2,-1
10002ea4:	00ffff84 	movi	r3,-2
10002ea8:	10c4b03a 	or	r2,r2,r3
10002eac:	10800044 	addi	r2,r2,1
10002eb0:	1007883a 	mov	r3,r2
10002eb4:	e0bffb17 	ldw	r2,-20(fp)
10002eb8:	10800817 	ldw	r2,32(r2)
10002ebc:	1085883a 	add	r2,r2,r2
10002ec0:	1887883a 	add	r3,r3,r2
10002ec4:	e0bffb17 	ldw	r2,-20(fp)
10002ec8:	10c00715 	stw	r3,28(r2)
10002ecc:	00000606 	br	10002ee8 <updateKirby+0x1520>
                } else {
                    kirby->frame = 0 + 2 * kirby->in_slope;
10002ed0:	e0bffb17 	ldw	r2,-20(fp)
10002ed4:	10800817 	ldw	r2,32(r2)
10002ed8:	1085883a 	add	r2,r2,r2
10002edc:	1007883a 	mov	r3,r2
10002ee0:	e0bffb17 	ldw	r2,-20(fp)
10002ee4:	10c00715 	stw	r3,28(r2)
                }
                frame_Time(KIRBY_FRAME_TIME_BLINK);
10002ee8:	0102ee04 	movi	r4,3000
10002eec:	00036680 	call	10003668 <frame_Time>
10002ef0:	00007706 	br	100030d0 <updateKirby+0x1708>
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
10002ef4:	e0bffb17 	ldw	r2,-20(fp)
10002ef8:	10800917 	ldw	r2,36(r2)
10002efc:	1000281e 	bne	r2,zero,10002fa0 <updateKirby+0x15d8>
10002f00:	e0bffb17 	ldw	r2,-20(fp)
10002f04:	10800a17 	ldw	r2,40(r2)
10002f08:	10800058 	cmpnei	r2,r2,1
10002f0c:	1000241e 	bne	r2,zero,10002fa0 <updateKirby+0x15d8>
                kirby->image = 1;
10002f10:	e0bffb17 	ldw	r2,-20(fp)
10002f14:	00c00044 	movi	r3,1
10002f18:	10c00315 	stw	r3,12(r2)
                kirby->action = 0;
10002f1c:	e0bffb17 	ldw	r2,-20(fp)
10002f20:	10000615 	stw	zero,24(r2)
                if (pre_keycode == keycode) {
10002f24:	e0c00217 	ldw	r3,8(fp)
10002f28:	e0bffe17 	ldw	r2,-8(fp)
10002f2c:	1880131e 	bne	r3,r2,10002f7c <updateKirby+0x15b4>
                    kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
10002f30:	e0bffb17 	ldw	r2,-20(fp)
10002f34:	10800717 	ldw	r2,28(r2)
10002f38:	10c00044 	addi	r3,r2,1
10002f3c:	00a00034 	movhi	r2,32768
10002f40:	10800044 	addi	r2,r2,1
10002f44:	1884703a 	and	r2,r3,r2
10002f48:	1000040e 	bge	r2,zero,10002f5c <updateKirby+0x1594>
10002f4c:	10bfffc4 	addi	r2,r2,-1
10002f50:	00ffff84 	movi	r3,-2
10002f54:	10c4b03a 	or	r2,r2,r3
10002f58:	10800044 	addi	r2,r2,1
10002f5c:	1007883a 	mov	r3,r2
10002f60:	e0bffb17 	ldw	r2,-20(fp)
10002f64:	10800817 	ldw	r2,32(r2)
10002f68:	1085883a 	add	r2,r2,r2
10002f6c:	1887883a 	add	r3,r3,r2
10002f70:	e0bffb17 	ldw	r2,-20(fp)
10002f74:	10c00715 	stw	r3,28(r2)
10002f78:	00000606 	br	10002f94 <updateKirby+0x15cc>
                } else {
                    kirby->frame = 0 + 2 * kirby->in_slope;
10002f7c:	e0bffb17 	ldw	r2,-20(fp)
10002f80:	10800817 	ldw	r2,32(r2)
10002f84:	1085883a 	add	r2,r2,r2
10002f88:	1007883a 	mov	r3,r2
10002f8c:	e0bffb17 	ldw	r2,-20(fp)
10002f90:	10c00715 	stw	r3,28(r2)
                }
                frame_Time(KIRBY_FRAME_TIME_BLINK);
10002f94:	0102ee04 	movi	r4,3000
10002f98:	00036680 	call	10003668 <frame_Time>
10002f9c:	00004c06 	br	100030d0 <updateKirby+0x1708>
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
10002fa0:	e0bffb17 	ldw	r2,-20(fp)
10002fa4:	10800917 	ldw	r2,36(r2)
10002fa8:	10800058 	cmpnei	r2,r2,1
10002fac:	10001f1e 	bne	r2,zero,1000302c <updateKirby+0x1664>
10002fb0:	e0bffb17 	ldw	r2,-20(fp)
10002fb4:	10800a17 	ldw	r2,40(r2)
10002fb8:	10001c1e 	bne	r2,zero,1000302c <updateKirby+0x1664>
                if (will_Touch_Ground(kirby, kirby->map)) {
10002fbc:	e0bffb17 	ldw	r2,-20(fp)
10002fc0:	10800217 	ldw	r2,8(r2)
10002fc4:	100b883a 	mov	r5,r2
10002fc8:	e13ffb17 	ldw	r4,-20(fp)
10002fcc:	00037000 	call	10003700 <will_Touch_Ground>
10002fd0:	10000726 	beq	r2,zero,10002ff0 <updateKirby+0x1628>
                    kirby->image = 0;
10002fd4:	e0bffb17 	ldw	r2,-20(fp)
10002fd8:	10000315 	stw	zero,12(r2)
                    kirby->action = 0;
10002fdc:	e0bffb17 	ldw	r2,-20(fp)
10002fe0:	10000615 	stw	zero,24(r2)
                    kirby->in_air = 0;
10002fe4:	e0bffb17 	ldw	r2,-20(fp)
10002fe8:	10000915 	stw	zero,36(r2)
                } else {
                    kirby->frame = 0 + 2 * kirby->in_slope;
                }
                frame_Time(KIRBY_FRAME_TIME_BLINK);
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
10002fec:	00003806 	br	100030d0 <updateKirby+0x1708>
                    kirby->image = 0;
                    kirby->action = 0;
                    kirby->in_air = 0;
                } else {
                    kirby->image = 0;
10002ff0:	e0bffb17 	ldw	r2,-20(fp)
10002ff4:	10000315 	stw	zero,12(r2)
                    kirby->action = 0;
10002ff8:	e0bffb17 	ldw	r2,-20(fp)
10002ffc:	10000615 	stw	zero,24(r2)
                    kirby->frame = 10;
10003000:	e0bffb17 	ldw	r2,-20(fp)
10003004:	00c00284 	movi	r3,10
10003008:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
1000300c:	e0bffb17 	ldw	r2,-20(fp)
10003010:	10800117 	ldw	r2,4(r2)
10003014:	10c000c4 	addi	r3,r2,3
10003018:	e0bffb17 	ldw	r2,-20(fp)
1000301c:	10c00115 	stw	r3,4(r2)
                    frame_Time(KIRBY_FRAME_TIME_WALK);
10003020:	01017704 	movi	r4,1500
10003024:	00036680 	call	10003668 <frame_Time>
                } else {
                    kirby->frame = 0 + 2 * kirby->in_slope;
                }
                frame_Time(KIRBY_FRAME_TIME_BLINK);
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
10003028:	00002906 	br	100030d0 <updateKirby+0x1708>
                    kirby->action = 0;
                    kirby->frame = 10;
                    kirby->y += KIRBY_STEP_Y;
                    frame_Time(KIRBY_FRAME_TIME_WALK);
                }
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 1)) {
1000302c:	e0bffb17 	ldw	r2,-20(fp)
10003030:	10800917 	ldw	r2,36(r2)
10003034:	10800058 	cmpnei	r2,r2,1
10003038:	10002e1e 	bne	r2,zero,100030f4 <updateKirby+0x172c>
1000303c:	e0bffb17 	ldw	r2,-20(fp)
10003040:	10800a17 	ldw	r2,40(r2)
10003044:	10800058 	cmpnei	r2,r2,1
10003048:	10002a1e 	bne	r2,zero,100030f4 <updateKirby+0x172c>
                if (will_Touch_Ground(kirby, kirby->map)) {
1000304c:	e0bffb17 	ldw	r2,-20(fp)
10003050:	10800217 	ldw	r2,8(r2)
10003054:	100b883a 	mov	r5,r2
10003058:	e13ffb17 	ldw	r4,-20(fp)
1000305c:	00037000 	call	10003700 <will_Touch_Ground>
10003060:	10000a26 	beq	r2,zero,1000308c <updateKirby+0x16c4>
                    kirby->image = 1;
10003064:	e0bffb17 	ldw	r2,-20(fp)
10003068:	00c00044 	movi	r3,1
1000306c:	10c00315 	stw	r3,12(r2)
                    kirby->action = 0;
10003070:	e0bffb17 	ldw	r2,-20(fp)
10003074:	10000615 	stw	zero,24(r2)
                    kirby->in_air = 0;
10003078:	e0bffb17 	ldw	r2,-20(fp)
1000307c:	10000915 	stw	zero,36(r2)
                    kirby->frame = 0;
10003080:	e0bffb17 	ldw	r2,-20(fp)
10003084:	10000715 	stw	zero,28(r2)
                    kirby->frame = 13;
                    kirby->y += KIRBY_STEP_Y;
                    frame_Time(KIRBY_FRAME_TIME_WALK);
                }
            }
            break;
10003088:	00001a06 	br	100030f4 <updateKirby+0x172c>
                    kirby->image = 1;
                    kirby->action = 0;
                    kirby->in_air = 0;
                    kirby->frame = 0;
                } else {
                    kirby->image = 1;
1000308c:	e0bffb17 	ldw	r2,-20(fp)
10003090:	00c00044 	movi	r3,1
10003094:	10c00315 	stw	r3,12(r2)
                    kirby->action = 2;
10003098:	e0bffb17 	ldw	r2,-20(fp)
1000309c:	00c00084 	movi	r3,2
100030a0:	10c00615 	stw	r3,24(r2)
                    kirby->frame = 13;
100030a4:	e0bffb17 	ldw	r2,-20(fp)
100030a8:	00c00344 	movi	r3,13
100030ac:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
100030b0:	e0bffb17 	ldw	r2,-20(fp)
100030b4:	10800117 	ldw	r2,4(r2)
100030b8:	10c000c4 	addi	r3,r2,3
100030bc:	e0bffb17 	ldw	r2,-20(fp)
100030c0:	10c00115 	stw	r3,4(r2)
                    frame_Time(KIRBY_FRAME_TIME_WALK);
100030c4:	01017704 	movi	r4,1500
100030c8:	00036680 	call	10003668 <frame_Time>
                }
            }
            break;
100030cc:	00000906 	br	100030f4 <updateKirby+0x172c>
100030d0:	00000806 	br	100030f4 <updateKirby+0x172c>
            break;
        }

        case 0x000f: { //"l" Fake A button
                // Jump
            break;
100030d4:	0001883a 	nop
100030d8:	00000706 	br	100030f8 <updateKirby+0x1730>
                    kirby->frame = 13;
                    kirby->y += KIRBY_STEP_Y;
                    frame_Time(KIRBY_FRAME_TIME_WALK);
                }
            }
            break;
100030dc:	0001883a 	nop
100030e0:	00000506 	br	100030f8 <updateKirby+0x1730>
                    kirby->frame = 13;
                    kirby->y += KIRBY_STEP_Y;
                    frame_Time(KIRBY_FRAME_TIME_WALK);
                }
            }
            break;
100030e4:	0001883a 	nop
100030e8:	00000306 	br	100030f8 <updateKirby+0x1730>
                    kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
                    upload_Kirby_Info(kirby);
                    // force_It_On_Ground(kirby, kirby->map);
                }
            }
            break;
100030ec:	0001883a 	nop
100030f0:	00000106 	br	100030f8 <updateKirby+0x1730>
                    kirby->frame = 13;
                    kirby->y += KIRBY_STEP_Y;
                    frame_Time(KIRBY_FRAME_TIME_WALK);
                }
            }
            break;
100030f4:	0001883a 	nop
        }
        }
    }
    
    /* Damage control */
    if (kirby_Is_Damaged(kirby, enemy) && (kirby->damaging == 0)) {
100030f8:	e17ffd17 	ldw	r5,-12(fp)
100030fc:	e13ffb17 	ldw	r4,-20(fp)
10003100:	0003d540 	call	10003d54 <kirby_Is_Damaged>
10003104:	10001926 	beq	r2,zero,1000316c <updateKirby+0x17a4>
10003108:	e0bffb17 	ldw	r2,-20(fp)
1000310c:	10800b17 	ldw	r2,44(r2)
10003110:	1000161e 	bne	r2,zero,1000316c <updateKirby+0x17a4>
        kirby->health -= 1;
10003114:	e0bffb17 	ldw	r2,-20(fp)
10003118:	10800517 	ldw	r2,20(r2)
1000311c:	10ffffc4 	addi	r3,r2,-1
10003120:	e0bffb17 	ldw	r2,-20(fp)
10003124:	10c00515 	stw	r3,20(r2)
        kirby->spitting = 0;
10003128:	e0bffb17 	ldw	r2,-20(fp)
1000312c:	10000d15 	stw	zero,52(r2)
        kirby->inhaling = 0;
10003130:	e0bffb17 	ldw	r2,-20(fp)
10003134:	10000c15 	stw	zero,48(r2)
        kirby->damaging = 1;
10003138:	e0bffb17 	ldw	r2,-20(fp)
1000313c:	00c00044 	movi	r3,1
10003140:	10c00b15 	stw	r3,44(r2)
        kirby->image = 2;
10003144:	e0bffb17 	ldw	r2,-20(fp)
10003148:	00c00084 	movi	r3,2
1000314c:	10c00315 	stw	r3,12(r2)
        kirby->action = kirby_Damage_Action(enemy);
10003150:	e13ffd17 	ldw	r4,-12(fp)
10003154:	0003ddc0 	call	10003ddc <kirby_Damage_Action>
10003158:	1007883a 	mov	r3,r2
1000315c:	e0bffb17 	ldw	r2,-20(fp)
10003160:	10c00615 	stw	r3,24(r2)
        kirby->frame = 0;
10003164:	e0bffb17 	ldw	r2,-20(fp)
10003168:	10000715 	stw	zero,28(r2)
    }

    /* Position adjustment */
    // 1-Make sure Kirby not extending the map edges
    if (kirby->x <= 0) {
1000316c:	e0bffb17 	ldw	r2,-20(fp)
10003170:	10800017 	ldw	r2,0(r2)
10003174:	00800316 	blt	zero,r2,10003184 <updateKirby+0x17bc>
        kirby->x = 0;
10003178:	e0bffb17 	ldw	r2,-20(fp)
1000317c:	10000015 	stw	zero,0(r2)
10003180:	00000706 	br	100031a0 <updateKirby+0x17d8>
    } else if (kirby->x >= map_width) {
10003184:	e0bffb17 	ldw	r2,-20(fp)
10003188:	10c00017 	ldw	r3,0(r2)
1000318c:	e0bffa17 	ldw	r2,-24(fp)
10003190:	18800316 	blt	r3,r2,100031a0 <updateKirby+0x17d8>
        kirby->x = map_width;
10003194:	e0bffb17 	ldw	r2,-20(fp)
10003198:	e0fffa17 	ldw	r3,-24(fp)
1000319c:	10c00015 	stw	r3,0(r2)
    }
    if (kirby->y <= 0) {
100031a0:	e0bffb17 	ldw	r2,-20(fp)
100031a4:	10800117 	ldw	r2,4(r2)
100031a8:	00800316 	blt	zero,r2,100031b8 <updateKirby+0x17f0>
        kirby->y = 0;
100031ac:	e0bffb17 	ldw	r2,-20(fp)
100031b0:	10000115 	stw	zero,4(r2)
100031b4:	00000706 	br	100031d4 <updateKirby+0x180c>
    } else if (kirby->y >= MAP_HEIGHT) {
100031b8:	e0bffb17 	ldw	r2,-20(fp)
100031bc:	10800117 	ldw	r2,4(r2)
100031c0:	10802c10 	cmplti	r2,r2,176
100031c4:	1000031e 	bne	r2,zero,100031d4 <updateKirby+0x180c>
        kirby->y = MAP_HEIGHT;
100031c8:	e0bffb17 	ldw	r2,-20(fp)
100031cc:	00c02c04 	movi	r3,176
100031d0:	10c00115 	stw	r3,4(r2)
    }
    
    // 2-Floor detection for kirby on the ground
    if (kirby->in_air == 0)
100031d4:	e0bffb17 	ldw	r2,-20(fp)
100031d8:	10800917 	ldw	r2,36(r2)
100031dc:	1000051e 	bne	r2,zero,100031f4 <updateKirby+0x182c>
        force_It_On_Ground(kirby, kirby->map);
100031e0:	e0bffb17 	ldw	r2,-20(fp)
100031e4:	10800217 	ldw	r2,8(r2)
100031e8:	100b883a 	mov	r5,r2
100031ec:	e13ffb17 	ldw	r4,-20(fp)
100031f0:	00032540 	call	10003254 <force_It_On_Ground>

    // 3-Make sure Kirby do not go inside white area
    // if (kirby->damaging == 0)
    force_It_Inside_Map(kirby, kirby->map);
100031f4:	e0bffb17 	ldw	r2,-20(fp)
100031f8:	10800217 	ldw	r2,8(r2)
100031fc:	100b883a 	mov	r5,r2
10003200:	e13ffb17 	ldw	r4,-20(fp)
10003204:	00032f80 	call	100032f8 <force_It_Inside_Map>

    if (kirby->health == 0)
10003208:	e0bffb17 	ldw	r2,-20(fp)
1000320c:	10800517 	ldw	r2,20(r2)
10003210:	1000031e 	bne	r2,zero,10003220 <updateKirby+0x1858>
        game_Over_Anime(kirby);
10003214:	e13ffb17 	ldw	r4,-20(fp)
10003218:	000403c0 	call	1000403c <game_Over_Anime>
    else if (kirby->entered_door == 1)
        win_Anime(kirby);

}
1000321c:	00000606 	br	10003238 <updateKirby+0x1870>
    // if (kirby->damaging == 0)
    force_It_Inside_Map(kirby, kirby->map);

    if (kirby->health == 0)
        game_Over_Anime(kirby);
    else if (kirby->entered_door == 1)
10003220:	e0bffb17 	ldw	r2,-20(fp)
10003224:	10801017 	ldw	r2,64(r2)
10003228:	10800058 	cmpnei	r2,r2,1
1000322c:	1000021e 	bne	r2,zero,10003238 <updateKirby+0x1870>
        win_Anime(kirby);
10003230:	e13ffb17 	ldw	r4,-20(fp)
10003234:	00041c40 	call	100041c4 <win_Anime>

}
10003238:	0001883a 	nop
1000323c:	e6ffff04 	addi	sp,fp,-4
10003240:	dfc00217 	ldw	ra,8(sp)
10003244:	df000117 	ldw	fp,4(sp)
10003248:	dc000017 	ldw	r16,0(sp)
1000324c:	dec00304 	addi	sp,sp,12
10003250:	f800283a 	ret

10003254 <force_It_On_Ground>:

void force_It_On_Ground(Kirby * kirby, int map_idx) {
10003254:	defffa04 	addi	sp,sp,-24
10003258:	dfc00515 	stw	ra,20(sp)
1000325c:	df000415 	stw	fp,16(sp)
10003260:	df000404 	addi	fp,sp,16
10003264:	e13ffe15 	stw	r4,-8(fp)
10003268:	e17fff15 	stw	r5,-4(fp)
    int kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
1000326c:	e13ffe17 	ldw	r4,-8(fp)
10003270:	00037780 	call	10003778 <get_Kirby_Botton_Pos>
10003274:	1004d43a 	srli	r2,r2,16
10003278:	e0bffc15 	stw	r2,-16(fp)
    int kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
1000327c:	e13ffe17 	ldw	r4,-8(fp)
10003280:	00037780 	call	10003778 <get_Kirby_Botton_Pos>
10003284:	10bfffcc 	andi	r2,r2,65535
10003288:	e0bffd15 	stw	r2,-12(fp)
    // int kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
    // int kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;

    // Cling to the ground
    while (get_Wall_Info(kirby_botton_X, kirby_botton_Y + 1, map_idx) == AREA_CAN_GO) {
1000328c:	00000d06 	br	100032c4 <force_It_On_Ground+0x70>
//        int dropping_keycode = 0;
        kirby->y += 1;
10003290:	e0bffe17 	ldw	r2,-8(fp)
10003294:	10800117 	ldw	r2,4(r2)
10003298:	10c00044 	addi	r3,r2,1
1000329c:	e0bffe17 	ldw	r2,-8(fp)
100032a0:	10c00115 	stw	r3,4(r2)
        
        // Update values
        kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
100032a4:	e13ffe17 	ldw	r4,-8(fp)
100032a8:	00037780 	call	10003778 <get_Kirby_Botton_Pos>
100032ac:	1004d43a 	srli	r2,r2,16
100032b0:	e0bffc15 	stw	r2,-16(fp)
        kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
100032b4:	e13ffe17 	ldw	r4,-8(fp)
100032b8:	00037780 	call	10003778 <get_Kirby_Botton_Pos>
100032bc:	10bfffcc 	andi	r2,r2,65535
100032c0:	e0bffd15 	stw	r2,-12(fp)
    int kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
    // int kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
    // int kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;

    // Cling to the ground
    while (get_Wall_Info(kirby_botton_X, kirby_botton_Y + 1, map_idx) == AREA_CAN_GO) {
100032c4:	e0bffd17 	ldw	r2,-12(fp)
100032c8:	10800044 	addi	r2,r2,1
100032cc:	e1bfff17 	ldw	r6,-4(fp)
100032d0:	100b883a 	mov	r5,r2
100032d4:	e13ffc17 	ldw	r4,-16(fp)
100032d8:	0003b880 	call	10003b88 <get_Wall_Info>
100032dc:	103fec26 	beq	r2,zero,10003290 <__alt_data_end+0xf8003290>
        
        // Update values
        kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
    }
}
100032e0:	0001883a 	nop
100032e4:	e037883a 	mov	sp,fp
100032e8:	dfc00117 	ldw	ra,4(sp)
100032ec:	df000017 	ldw	fp,0(sp)
100032f0:	dec00204 	addi	sp,sp,8
100032f4:	f800283a 	ret

100032f8 <force_It_Inside_Map>:

void force_It_Inside_Map(Kirby * kirby, int map_idx) {
100032f8:	defff404 	addi	sp,sp,-48
100032fc:	dfc00b15 	stw	ra,44(sp)
10003300:	df000a15 	stw	fp,40(sp)
10003304:	df000a04 	addi	fp,sp,40
10003308:	e13ffe15 	stw	r4,-8(fp)
1000330c:	e17fff15 	stw	r5,-4(fp)
    int kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
10003310:	e13ffe17 	ldw	r4,-8(fp)
10003314:	00037780 	call	10003778 <get_Kirby_Botton_Pos>
10003318:	1004d43a 	srli	r2,r2,16
1000331c:	e0bff615 	stw	r2,-40(fp)
    int kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
10003320:	e13ffe17 	ldw	r4,-8(fp)
10003324:	00037780 	call	10003778 <get_Kirby_Botton_Pos>
10003328:	10bfffcc 	andi	r2,r2,65535
1000332c:	e0bff715 	stw	r2,-36(fp)
    int kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
10003330:	e13ffe17 	ldw	r4,-8(fp)
10003334:	000387c0 	call	1000387c <get_Kirby_Ceil_Pos>
10003338:	1004d43a 	srli	r2,r2,16
1000333c:	e0bff815 	stw	r2,-32(fp)
    int kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;
10003340:	e13ffe17 	ldw	r4,-8(fp)
10003344:	000387c0 	call	1000387c <get_Kirby_Ceil_Pos>
10003348:	10bfffcc 	andi	r2,r2,65535
1000334c:	e0bff915 	stw	r2,-28(fp)
    int kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
10003350:	e13ffe17 	ldw	r4,-8(fp)
10003354:	00039800 	call	10003980 <get_Kirby_Left_Pos>
10003358:	1004d43a 	srli	r2,r2,16
1000335c:	e0bffa15 	stw	r2,-24(fp)
    int kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
10003360:	e13ffe17 	ldw	r4,-8(fp)
10003364:	00039800 	call	10003980 <get_Kirby_Left_Pos>
10003368:	10bfffcc 	andi	r2,r2,65535
1000336c:	e0bffb15 	stw	r2,-20(fp)
    int kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
10003370:	e13ffe17 	ldw	r4,-8(fp)
10003374:	0003a840 	call	10003a84 <get_Kirby_Right_Pos>
10003378:	1004d43a 	srli	r2,r2,16
1000337c:	e0bffc15 	stw	r2,-16(fp)
    int kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
10003380:	e13ffe17 	ldw	r4,-8(fp)
10003384:	0003a840 	call	10003a84 <get_Kirby_Right_Pos>
10003388:	10bfffcc 	andi	r2,r2,65535
1000338c:	e0bffd15 	stw	r2,-12(fp)

    while (get_Wall_Info(kirby_botton_X, kirby_botton_Y, map_idx) == AREA_CANNOT_GO)
10003390:	00002506 	br	10003428 <force_It_Inside_Map+0x130>
    {
        kirby->y -= 1;
10003394:	e0bffe17 	ldw	r2,-8(fp)
10003398:	10800117 	ldw	r2,4(r2)
1000339c:	10ffffc4 	addi	r3,r2,-1
100033a0:	e0bffe17 	ldw	r2,-8(fp)
100033a4:	10c00115 	stw	r3,4(r2)
        kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
100033a8:	e13ffe17 	ldw	r4,-8(fp)
100033ac:	00037780 	call	10003778 <get_Kirby_Botton_Pos>
100033b0:	1004d43a 	srli	r2,r2,16
100033b4:	e0bff615 	stw	r2,-40(fp)
        kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
100033b8:	e13ffe17 	ldw	r4,-8(fp)
100033bc:	00037780 	call	10003778 <get_Kirby_Botton_Pos>
100033c0:	10bfffcc 	andi	r2,r2,65535
100033c4:	e0bff715 	stw	r2,-36(fp)
        kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
100033c8:	e13ffe17 	ldw	r4,-8(fp)
100033cc:	000387c0 	call	1000387c <get_Kirby_Ceil_Pos>
100033d0:	1004d43a 	srli	r2,r2,16
100033d4:	e0bff815 	stw	r2,-32(fp)
        kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;
100033d8:	e13ffe17 	ldw	r4,-8(fp)
100033dc:	000387c0 	call	1000387c <get_Kirby_Ceil_Pos>
100033e0:	10bfffcc 	andi	r2,r2,65535
100033e4:	e0bff915 	stw	r2,-28(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
100033e8:	e13ffe17 	ldw	r4,-8(fp)
100033ec:	00039800 	call	10003980 <get_Kirby_Left_Pos>
100033f0:	1004d43a 	srli	r2,r2,16
100033f4:	e0bffa15 	stw	r2,-24(fp)
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
100033f8:	e13ffe17 	ldw	r4,-8(fp)
100033fc:	00039800 	call	10003980 <get_Kirby_Left_Pos>
10003400:	10bfffcc 	andi	r2,r2,65535
10003404:	e0bffb15 	stw	r2,-20(fp)
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
10003408:	e13ffe17 	ldw	r4,-8(fp)
1000340c:	0003a840 	call	10003a84 <get_Kirby_Right_Pos>
10003410:	1004d43a 	srli	r2,r2,16
10003414:	e0bffc15 	stw	r2,-16(fp)
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
10003418:	e13ffe17 	ldw	r4,-8(fp)
1000341c:	0003a840 	call	10003a84 <get_Kirby_Right_Pos>
10003420:	10bfffcc 	andi	r2,r2,65535
10003424:	e0bffd15 	stw	r2,-12(fp)
    int kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
    int kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
    int kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
    int kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;

    while (get_Wall_Info(kirby_botton_X, kirby_botton_Y, map_idx) == AREA_CANNOT_GO)
10003428:	e1bfff17 	ldw	r6,-4(fp)
1000342c:	e17ff717 	ldw	r5,-36(fp)
10003430:	e13ff617 	ldw	r4,-40(fp)
10003434:	0003b880 	call	10003b88 <get_Wall_Info>
10003438:	10800060 	cmpeqi	r2,r2,1
1000343c:	103fd51e 	bne	r2,zero,10003394 <__alt_data_end+0xf8003394>
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
    while (get_Wall_Info(kirby_left_X, kirby_left_Y, map_idx) == AREA_CANNOT_GO)
10003440:	00002506 	br	100034d8 <force_It_Inside_Map+0x1e0>
    {
        kirby->x += 1;
10003444:	e0bffe17 	ldw	r2,-8(fp)
10003448:	10800017 	ldw	r2,0(r2)
1000344c:	10c00044 	addi	r3,r2,1
10003450:	e0bffe17 	ldw	r2,-8(fp)
10003454:	10c00015 	stw	r3,0(r2)
        kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
10003458:	e13ffe17 	ldw	r4,-8(fp)
1000345c:	00037780 	call	10003778 <get_Kirby_Botton_Pos>
10003460:	1004d43a 	srli	r2,r2,16
10003464:	e0bff615 	stw	r2,-40(fp)
        kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
10003468:	e13ffe17 	ldw	r4,-8(fp)
1000346c:	00037780 	call	10003778 <get_Kirby_Botton_Pos>
10003470:	10bfffcc 	andi	r2,r2,65535
10003474:	e0bff715 	stw	r2,-36(fp)
        kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
10003478:	e13ffe17 	ldw	r4,-8(fp)
1000347c:	000387c0 	call	1000387c <get_Kirby_Ceil_Pos>
10003480:	1004d43a 	srli	r2,r2,16
10003484:	e0bff815 	stw	r2,-32(fp)
        kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;
10003488:	e13ffe17 	ldw	r4,-8(fp)
1000348c:	000387c0 	call	1000387c <get_Kirby_Ceil_Pos>
10003490:	10bfffcc 	andi	r2,r2,65535
10003494:	e0bff915 	stw	r2,-28(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
10003498:	e13ffe17 	ldw	r4,-8(fp)
1000349c:	00039800 	call	10003980 <get_Kirby_Left_Pos>
100034a0:	1004d43a 	srli	r2,r2,16
100034a4:	e0bffa15 	stw	r2,-24(fp)
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
100034a8:	e13ffe17 	ldw	r4,-8(fp)
100034ac:	00039800 	call	10003980 <get_Kirby_Left_Pos>
100034b0:	10bfffcc 	andi	r2,r2,65535
100034b4:	e0bffb15 	stw	r2,-20(fp)
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
100034b8:	e13ffe17 	ldw	r4,-8(fp)
100034bc:	0003a840 	call	10003a84 <get_Kirby_Right_Pos>
100034c0:	1004d43a 	srli	r2,r2,16
100034c4:	e0bffc15 	stw	r2,-16(fp)
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
100034c8:	e13ffe17 	ldw	r4,-8(fp)
100034cc:	0003a840 	call	10003a84 <get_Kirby_Right_Pos>
100034d0:	10bfffcc 	andi	r2,r2,65535
100034d4:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
    while (get_Wall_Info(kirby_left_X, kirby_left_Y, map_idx) == AREA_CANNOT_GO)
100034d8:	e1bfff17 	ldw	r6,-4(fp)
100034dc:	e17ffb17 	ldw	r5,-20(fp)
100034e0:	e13ffa17 	ldw	r4,-24(fp)
100034e4:	0003b880 	call	10003b88 <get_Wall_Info>
100034e8:	10800060 	cmpeqi	r2,r2,1
100034ec:	103fd51e 	bne	r2,zero,10003444 <__alt_data_end+0xf8003444>
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
    while (get_Wall_Info(kirby_ceil_X, kirby_ceil_Y, map_idx) == AREA_CANNOT_GO)
100034f0:	00002506 	br	10003588 <force_It_Inside_Map+0x290>
    {
        kirby->y += 1;
100034f4:	e0bffe17 	ldw	r2,-8(fp)
100034f8:	10800117 	ldw	r2,4(r2)
100034fc:	10c00044 	addi	r3,r2,1
10003500:	e0bffe17 	ldw	r2,-8(fp)
10003504:	10c00115 	stw	r3,4(r2)
        kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
10003508:	e13ffe17 	ldw	r4,-8(fp)
1000350c:	00037780 	call	10003778 <get_Kirby_Botton_Pos>
10003510:	1004d43a 	srli	r2,r2,16
10003514:	e0bff615 	stw	r2,-40(fp)
        kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
10003518:	e13ffe17 	ldw	r4,-8(fp)
1000351c:	00037780 	call	10003778 <get_Kirby_Botton_Pos>
10003520:	10bfffcc 	andi	r2,r2,65535
10003524:	e0bff715 	stw	r2,-36(fp)
        kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
10003528:	e13ffe17 	ldw	r4,-8(fp)
1000352c:	000387c0 	call	1000387c <get_Kirby_Ceil_Pos>
10003530:	1004d43a 	srli	r2,r2,16
10003534:	e0bff815 	stw	r2,-32(fp)
        kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;
10003538:	e13ffe17 	ldw	r4,-8(fp)
1000353c:	000387c0 	call	1000387c <get_Kirby_Ceil_Pos>
10003540:	10bfffcc 	andi	r2,r2,65535
10003544:	e0bff915 	stw	r2,-28(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
10003548:	e13ffe17 	ldw	r4,-8(fp)
1000354c:	00039800 	call	10003980 <get_Kirby_Left_Pos>
10003550:	1004d43a 	srli	r2,r2,16
10003554:	e0bffa15 	stw	r2,-24(fp)
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
10003558:	e13ffe17 	ldw	r4,-8(fp)
1000355c:	00039800 	call	10003980 <get_Kirby_Left_Pos>
10003560:	10bfffcc 	andi	r2,r2,65535
10003564:	e0bffb15 	stw	r2,-20(fp)
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
10003568:	e13ffe17 	ldw	r4,-8(fp)
1000356c:	0003a840 	call	10003a84 <get_Kirby_Right_Pos>
10003570:	1004d43a 	srli	r2,r2,16
10003574:	e0bffc15 	stw	r2,-16(fp)
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
10003578:	e13ffe17 	ldw	r4,-8(fp)
1000357c:	0003a840 	call	10003a84 <get_Kirby_Right_Pos>
10003580:	10bfffcc 	andi	r2,r2,65535
10003584:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
    while (get_Wall_Info(kirby_ceil_X, kirby_ceil_Y, map_idx) == AREA_CANNOT_GO)
10003588:	e1bfff17 	ldw	r6,-4(fp)
1000358c:	e17ff917 	ldw	r5,-28(fp)
10003590:	e13ff817 	ldw	r4,-32(fp)
10003594:	0003b880 	call	10003b88 <get_Wall_Info>
10003598:	10800060 	cmpeqi	r2,r2,1
1000359c:	103fd51e 	bne	r2,zero,100034f4 <__alt_data_end+0xf80034f4>
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
    while (get_Wall_Info(kirby_right_X, kirby_right_Y, map_idx) == AREA_CANNOT_GO)
100035a0:	00002506 	br	10003638 <force_It_Inside_Map+0x340>
    {
        kirby->x -= 1;
100035a4:	e0bffe17 	ldw	r2,-8(fp)
100035a8:	10800017 	ldw	r2,0(r2)
100035ac:	10ffffc4 	addi	r3,r2,-1
100035b0:	e0bffe17 	ldw	r2,-8(fp)
100035b4:	10c00015 	stw	r3,0(r2)
        kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
100035b8:	e13ffe17 	ldw	r4,-8(fp)
100035bc:	00037780 	call	10003778 <get_Kirby_Botton_Pos>
100035c0:	1004d43a 	srli	r2,r2,16
100035c4:	e0bff615 	stw	r2,-40(fp)
        kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
100035c8:	e13ffe17 	ldw	r4,-8(fp)
100035cc:	00037780 	call	10003778 <get_Kirby_Botton_Pos>
100035d0:	10bfffcc 	andi	r2,r2,65535
100035d4:	e0bff715 	stw	r2,-36(fp)
        kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
100035d8:	e13ffe17 	ldw	r4,-8(fp)
100035dc:	000387c0 	call	1000387c <get_Kirby_Ceil_Pos>
100035e0:	1004d43a 	srli	r2,r2,16
100035e4:	e0bff815 	stw	r2,-32(fp)
        kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;
100035e8:	e13ffe17 	ldw	r4,-8(fp)
100035ec:	000387c0 	call	1000387c <get_Kirby_Ceil_Pos>
100035f0:	10bfffcc 	andi	r2,r2,65535
100035f4:	e0bff915 	stw	r2,-28(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
100035f8:	e13ffe17 	ldw	r4,-8(fp)
100035fc:	00039800 	call	10003980 <get_Kirby_Left_Pos>
10003600:	1004d43a 	srli	r2,r2,16
10003604:	e0bffa15 	stw	r2,-24(fp)
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
10003608:	e13ffe17 	ldw	r4,-8(fp)
1000360c:	00039800 	call	10003980 <get_Kirby_Left_Pos>
10003610:	10bfffcc 	andi	r2,r2,65535
10003614:	e0bffb15 	stw	r2,-20(fp)
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
10003618:	e13ffe17 	ldw	r4,-8(fp)
1000361c:	0003a840 	call	10003a84 <get_Kirby_Right_Pos>
10003620:	1004d43a 	srli	r2,r2,16
10003624:	e0bffc15 	stw	r2,-16(fp)
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
10003628:	e13ffe17 	ldw	r4,-8(fp)
1000362c:	0003a840 	call	10003a84 <get_Kirby_Right_Pos>
10003630:	10bfffcc 	andi	r2,r2,65535
10003634:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
    while (get_Wall_Info(kirby_right_X, kirby_right_Y, map_idx) == AREA_CANNOT_GO)
10003638:	e1bfff17 	ldw	r6,-4(fp)
1000363c:	e17ffd17 	ldw	r5,-12(fp)
10003640:	e13ffc17 	ldw	r4,-16(fp)
10003644:	0003b880 	call	10003b88 <get_Wall_Info>
10003648:	10800060 	cmpeqi	r2,r2,1
1000364c:	103fd51e 	bne	r2,zero,100035a4 <__alt_data_end+0xf80035a4>
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
}
10003650:	0001883a 	nop
10003654:	e037883a 	mov	sp,fp
10003658:	dfc00117 	ldw	ra,4(sp)
1000365c:	df000017 	ldw	fp,0(sp)
10003660:	dec00204 	addi	sp,sp,8
10003664:	f800283a 	ret

10003668 <frame_Time>:

void frame_Time(int t) {
10003668:	defffd04 	addi	sp,sp,-12
1000366c:	df000215 	stw	fp,8(sp)
10003670:	df000204 	addi	fp,sp,8
10003674:	e13fff15 	stw	r4,-4(fp)
    int i;
    for (i = 0; i < t; i++) {
10003678:	e03ffe15 	stw	zero,-8(fp)
1000367c:	00000306 	br	1000368c <frame_Time+0x24>
10003680:	e0bffe17 	ldw	r2,-8(fp)
10003684:	10800044 	addi	r2,r2,1
10003688:	e0bffe15 	stw	r2,-8(fp)
1000368c:	e0fffe17 	ldw	r3,-8(fp)
10003690:	e0bfff17 	ldw	r2,-4(fp)
10003694:	18bffa16 	blt	r3,r2,10003680 <__alt_data_end+0xf8003680>
        /* wait unitl the frame is over */
    }
}
10003698:	0001883a 	nop
1000369c:	e037883a 	mov	sp,fp
100036a0:	df000017 	ldw	fp,0(sp)
100036a4:	dec00104 	addi	sp,sp,4
100036a8:	f800283a 	ret

100036ac <map_Width>:

int map_Width(int i) {
100036ac:	defffe04 	addi	sp,sp,-8
100036b0:	df000115 	stw	fp,4(sp)
100036b4:	df000104 	addi	fp,sp,4
100036b8:	e13fff15 	stw	r4,-4(fp)
    switch (i) {
100036bc:	e0bfff17 	ldw	r2,-4(fp)
100036c0:	10c00060 	cmpeqi	r3,r2,1
100036c4:	1800051e 	bne	r3,zero,100036dc <map_Width+0x30>
100036c8:	10c000a0 	cmpeqi	r3,r2,2
100036cc:	1800051e 	bne	r3,zero,100036e4 <map_Width+0x38>
100036d0:	1000061e 	bne	r2,zero,100036ec <map_Width+0x40>
    case 0:
        return MAP_0_WIDTH;
100036d4:	00812fc4 	movi	r2,1215
100036d8:	00000506 	br	100036f0 <map_Width+0x44>
        break;
    case 1:
        return MAP_1_WIDTH;
100036dc:	0080f404 	movi	r2,976
100036e0:	00000306 	br	100036f0 <map_Width+0x44>
        break;
     case 2:
         return MAP_2_WIDTH;
100036e4:	00813044 	movi	r2,1217
100036e8:	00000106 	br	100036f0 <map_Width+0x44>
         break;
    default:
        return MAP_0_WIDTH;
100036ec:	00812fc4 	movi	r2,1215
        break;
    }
}
100036f0:	e037883a 	mov	sp,fp
100036f4:	df000017 	ldw	fp,0(sp)
100036f8:	dec00104 	addi	sp,sp,4
100036fc:	f800283a 	ret

10003700 <will_Touch_Ground>:

int will_Touch_Ground(Kirby * kirby, int map_idx) {
10003700:	defffa04 	addi	sp,sp,-24
10003704:	dfc00515 	stw	ra,20(sp)
10003708:	df000415 	stw	fp,16(sp)
1000370c:	df000404 	addi	fp,sp,16
10003710:	e13ffe15 	stw	r4,-8(fp)
10003714:	e17fff15 	stw	r5,-4(fp)
    int kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
10003718:	e13ffe17 	ldw	r4,-8(fp)
1000371c:	00037780 	call	10003778 <get_Kirby_Botton_Pos>
10003720:	1004d43a 	srli	r2,r2,16
10003724:	e0bffc15 	stw	r2,-16(fp)
    int kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
10003728:	e13ffe17 	ldw	r4,-8(fp)
1000372c:	00037780 	call	10003778 <get_Kirby_Botton_Pos>
10003730:	10bfffcc 	andi	r2,r2,65535
10003734:	e0bffd15 	stw	r2,-12(fp)

    if (get_Wall_Info(kirby_botton_X, kirby_botton_Y + 1, map_idx) == AREA_CANNOT_GO) {
10003738:	e0bffd17 	ldw	r2,-12(fp)
1000373c:	10800044 	addi	r2,r2,1
10003740:	e1bfff17 	ldw	r6,-4(fp)
10003744:	100b883a 	mov	r5,r2
10003748:	e13ffc17 	ldw	r4,-16(fp)
1000374c:	0003b880 	call	10003b88 <get_Wall_Info>
10003750:	10800058 	cmpnei	r2,r2,1
10003754:	1000021e 	bne	r2,zero,10003760 <will_Touch_Ground+0x60>
        return 1;
10003758:	00800044 	movi	r2,1
1000375c:	00000106 	br	10003764 <will_Touch_Ground+0x64>
    } else {
        return 0;
10003760:	0005883a 	mov	r2,zero
    }
}
10003764:	e037883a 	mov	sp,fp
10003768:	dfc00117 	ldw	ra,4(sp)
1000376c:	df000017 	ldw	fp,0(sp)
10003770:	dec00204 	addi	sp,sp,8
10003774:	f800283a 	ret

10003778 <get_Kirby_Botton_Pos>:

int get_Kirby_Botton_Pos(Kirby * kirby) {
10003778:	defffc04 	addi	sp,sp,-16
1000377c:	df000315 	stw	fp,12(sp)
10003780:	df000304 	addi	fp,sp,12
10003784:	e13fff15 	stw	r4,-4(fp)
    int kirby_botton_X = 0;
10003788:	e03ffd15 	stw	zero,-12(fp)
    int kirby_botton_Y = 0;
1000378c:	e03ffe15 	stw	zero,-8(fp)

    if (kirby->is_inhaled == 1) {
10003790:	e0bfff17 	ldw	r2,-4(fp)
10003794:	10800a17 	ldw	r2,40(r2)
10003798:	10800058 	cmpnei	r2,r2,1
1000379c:	1000091e 	bne	r2,zero,100037c4 <get_Kirby_Botton_Pos+0x4c>
        kirby_botton_X = kirby->x + 16;
100037a0:	e0bfff17 	ldw	r2,-4(fp)
100037a4:	10800017 	ldw	r2,0(r2)
100037a8:	10800404 	addi	r2,r2,16
100037ac:	e0bffd15 	stw	r2,-12(fp)
        kirby_botton_Y = kirby->y + 25;
100037b0:	e0bfff17 	ldw	r2,-4(fp)
100037b4:	10800117 	ldw	r2,4(r2)
100037b8:	10800644 	addi	r2,r2,25
100037bc:	e0bffe15 	stw	r2,-8(fp)
100037c0:	00002606 	br	1000385c <get_Kirby_Botton_Pos+0xe4>
    } else if ((kirby->inhaling == 1) || (kirby->spitting == 1)) {
100037c4:	e0bfff17 	ldw	r2,-4(fp)
100037c8:	10800c17 	ldw	r2,48(r2)
100037cc:	10800060 	cmpeqi	r2,r2,1
100037d0:	1000041e 	bne	r2,zero,100037e4 <get_Kirby_Botton_Pos+0x6c>
100037d4:	e0bfff17 	ldw	r2,-4(fp)
100037d8:	10800d17 	ldw	r2,52(r2)
100037dc:	10800058 	cmpnei	r2,r2,1
100037e0:	1000091e 	bne	r2,zero,10003808 <get_Kirby_Botton_Pos+0x90>
        kirby_botton_X = kirby->x + 30;
100037e4:	e0bfff17 	ldw	r2,-4(fp)
100037e8:	10800017 	ldw	r2,0(r2)
100037ec:	10800784 	addi	r2,r2,30
100037f0:	e0bffd15 	stw	r2,-12(fp)
        kirby_botton_Y = kirby->y + 25;
100037f4:	e0bfff17 	ldw	r2,-4(fp)
100037f8:	10800117 	ldw	r2,4(r2)
100037fc:	10800644 	addi	r2,r2,25
10003800:	e0bffe15 	stw	r2,-8(fp)
10003804:	00001506 	br	1000385c <get_Kirby_Botton_Pos+0xe4>
    } else if (kirby->damaging == 1) {
10003808:	e0bfff17 	ldw	r2,-4(fp)
1000380c:	10800b17 	ldw	r2,44(r2)
10003810:	10800058 	cmpnei	r2,r2,1
10003814:	1000091e 	bne	r2,zero,1000383c <get_Kirby_Botton_Pos+0xc4>
        kirby_botton_X = kirby->x + 17;
10003818:	e0bfff17 	ldw	r2,-4(fp)
1000381c:	10800017 	ldw	r2,0(r2)
10003820:	10800444 	addi	r2,r2,17
10003824:	e0bffd15 	stw	r2,-12(fp)
        kirby_botton_Y = kirby->y + 33;
10003828:	e0bfff17 	ldw	r2,-4(fp)
1000382c:	10800117 	ldw	r2,4(r2)
10003830:	10800844 	addi	r2,r2,33
10003834:	e0bffe15 	stw	r2,-8(fp)
10003838:	00000806 	br	1000385c <get_Kirby_Botton_Pos+0xe4>
    } else {
        kirby_botton_X = kirby->x + 14;
1000383c:	e0bfff17 	ldw	r2,-4(fp)
10003840:	10800017 	ldw	r2,0(r2)
10003844:	10800384 	addi	r2,r2,14
10003848:	e0bffd15 	stw	r2,-12(fp)
        kirby_botton_Y = kirby->y + 20;
1000384c:	e0bfff17 	ldw	r2,-4(fp)
10003850:	10800117 	ldw	r2,4(r2)
10003854:	10800504 	addi	r2,r2,20
10003858:	e0bffe15 	stw	r2,-8(fp)
    }
    return ((kirby_botton_X << 16) | kirby_botton_Y);
1000385c:	e0bffd17 	ldw	r2,-12(fp)
10003860:	1006943a 	slli	r3,r2,16
10003864:	e0bffe17 	ldw	r2,-8(fp)
10003868:	1884b03a 	or	r2,r3,r2
}
1000386c:	e037883a 	mov	sp,fp
10003870:	df000017 	ldw	fp,0(sp)
10003874:	dec00104 	addi	sp,sp,4
10003878:	f800283a 	ret

1000387c <get_Kirby_Ceil_Pos>:

int get_Kirby_Ceil_Pos(Kirby * kirby) {
1000387c:	defffc04 	addi	sp,sp,-16
10003880:	df000315 	stw	fp,12(sp)
10003884:	df000304 	addi	fp,sp,12
10003888:	e13fff15 	stw	r4,-4(fp)
    int kirby_ceil_X = 0;
1000388c:	e03ffd15 	stw	zero,-12(fp)
    int kirby_ceil_Y = 0;
10003890:	e03ffe15 	stw	zero,-8(fp)

    if (kirby->is_inhaled == 1) {
10003894:	e0bfff17 	ldw	r2,-4(fp)
10003898:	10800a17 	ldw	r2,40(r2)
1000389c:	10800058 	cmpnei	r2,r2,1
100038a0:	1000091e 	bne	r2,zero,100038c8 <get_Kirby_Ceil_Pos+0x4c>
        kirby_ceil_X = kirby->x + 16;
100038a4:	e0bfff17 	ldw	r2,-4(fp)
100038a8:	10800017 	ldw	r2,0(r2)
100038ac:	10800404 	addi	r2,r2,16
100038b0:	e0bffd15 	stw	r2,-12(fp)
        kirby_ceil_Y = kirby->y + 5;
100038b4:	e0bfff17 	ldw	r2,-4(fp)
100038b8:	10800117 	ldw	r2,4(r2)
100038bc:	10800144 	addi	r2,r2,5
100038c0:	e0bffe15 	stw	r2,-8(fp)
100038c4:	00002606 	br	10003960 <get_Kirby_Ceil_Pos+0xe4>
    } else if ((kirby->inhaling == 1) || (kirby->spitting == 1)) {
100038c8:	e0bfff17 	ldw	r2,-4(fp)
100038cc:	10800c17 	ldw	r2,48(r2)
100038d0:	10800060 	cmpeqi	r2,r2,1
100038d4:	1000041e 	bne	r2,zero,100038e8 <get_Kirby_Ceil_Pos+0x6c>
100038d8:	e0bfff17 	ldw	r2,-4(fp)
100038dc:	10800d17 	ldw	r2,52(r2)
100038e0:	10800058 	cmpnei	r2,r2,1
100038e4:	1000091e 	bne	r2,zero,1000390c <get_Kirby_Ceil_Pos+0x90>
        kirby_ceil_X = kirby->x + 30;
100038e8:	e0bfff17 	ldw	r2,-4(fp)
100038ec:	10800017 	ldw	r2,0(r2)
100038f0:	10800784 	addi	r2,r2,30
100038f4:	e0bffd15 	stw	r2,-12(fp)
        kirby_ceil_Y = kirby->y + 5;
100038f8:	e0bfff17 	ldw	r2,-4(fp)
100038fc:	10800117 	ldw	r2,4(r2)
10003900:	10800144 	addi	r2,r2,5
10003904:	e0bffe15 	stw	r2,-8(fp)
10003908:	00001506 	br	10003960 <get_Kirby_Ceil_Pos+0xe4>
    } else if (kirby->damaging == 1) {
1000390c:	e0bfff17 	ldw	r2,-4(fp)
10003910:	10800b17 	ldw	r2,44(r2)
10003914:	10800058 	cmpnei	r2,r2,1
10003918:	1000091e 	bne	r2,zero,10003940 <get_Kirby_Ceil_Pos+0xc4>
        kirby_ceil_X = kirby->x + 17;
1000391c:	e0bfff17 	ldw	r2,-4(fp)
10003920:	10800017 	ldw	r2,0(r2)
10003924:	10800444 	addi	r2,r2,17
10003928:	e0bffd15 	stw	r2,-12(fp)
        kirby_ceil_Y = kirby->y + 7;   //// Not an accurate value!!! ////
1000392c:	e0bfff17 	ldw	r2,-4(fp)
10003930:	10800117 	ldw	r2,4(r2)
10003934:	108001c4 	addi	r2,r2,7
10003938:	e0bffe15 	stw	r2,-8(fp)
1000393c:	00000806 	br	10003960 <get_Kirby_Ceil_Pos+0xe4>
    } else {
        kirby_ceil_X = kirby->x + 14;
10003940:	e0bfff17 	ldw	r2,-4(fp)
10003944:	10800017 	ldw	r2,0(r2)
10003948:	10800384 	addi	r2,r2,14
1000394c:	e0bffd15 	stw	r2,-12(fp)
        kirby_ceil_Y = kirby->y + 4;
10003950:	e0bfff17 	ldw	r2,-4(fp)
10003954:	10800117 	ldw	r2,4(r2)
10003958:	10800104 	addi	r2,r2,4
1000395c:	e0bffe15 	stw	r2,-8(fp)
    }
    return ((kirby_ceil_X << 16) | kirby_ceil_Y);
10003960:	e0bffd17 	ldw	r2,-12(fp)
10003964:	1006943a 	slli	r3,r2,16
10003968:	e0bffe17 	ldw	r2,-8(fp)
1000396c:	1884b03a 	or	r2,r3,r2
}
10003970:	e037883a 	mov	sp,fp
10003974:	df000017 	ldw	fp,0(sp)
10003978:	dec00104 	addi	sp,sp,4
1000397c:	f800283a 	ret

10003980 <get_Kirby_Left_Pos>:

int get_Kirby_Left_Pos(Kirby * kirby) {
10003980:	defffc04 	addi	sp,sp,-16
10003984:	df000315 	stw	fp,12(sp)
10003988:	df000304 	addi	fp,sp,12
1000398c:	e13fff15 	stw	r4,-4(fp)
    int kirby_left_X = 0;
10003990:	e03ffd15 	stw	zero,-12(fp)
    int kirby_left_Y = 0;
10003994:	e03ffe15 	stw	zero,-8(fp)

    if (kirby->is_inhaled == 1) {
10003998:	e0bfff17 	ldw	r2,-4(fp)
1000399c:	10800a17 	ldw	r2,40(r2)
100039a0:	10800058 	cmpnei	r2,r2,1
100039a4:	1000091e 	bne	r2,zero,100039cc <get_Kirby_Left_Pos+0x4c>
        kirby_left_X = kirby->x + 5;
100039a8:	e0bfff17 	ldw	r2,-4(fp)
100039ac:	10800017 	ldw	r2,0(r2)
100039b0:	10800144 	addi	r2,r2,5
100039b4:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_Y = kirby->y + 15;
100039b8:	e0bfff17 	ldw	r2,-4(fp)
100039bc:	10800117 	ldw	r2,4(r2)
100039c0:	108003c4 	addi	r2,r2,15
100039c4:	e0bffe15 	stw	r2,-8(fp)
100039c8:	00002606 	br	10003a64 <get_Kirby_Left_Pos+0xe4>
    } else if ((kirby->inhaling == 1) || (kirby->spitting == 1)) {
100039cc:	e0bfff17 	ldw	r2,-4(fp)
100039d0:	10800c17 	ldw	r2,48(r2)
100039d4:	10800060 	cmpeqi	r2,r2,1
100039d8:	1000041e 	bne	r2,zero,100039ec <get_Kirby_Left_Pos+0x6c>
100039dc:	e0bfff17 	ldw	r2,-4(fp)
100039e0:	10800d17 	ldw	r2,52(r2)
100039e4:	10800058 	cmpnei	r2,r2,1
100039e8:	1000091e 	bne	r2,zero,10003a10 <get_Kirby_Left_Pos+0x90>
        kirby_left_X = kirby->x + 21;
100039ec:	e0bfff17 	ldw	r2,-4(fp)
100039f0:	10800017 	ldw	r2,0(r2)
100039f4:	10800544 	addi	r2,r2,21
100039f8:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_Y = kirby->y + 15;
100039fc:	e0bfff17 	ldw	r2,-4(fp)
10003a00:	10800117 	ldw	r2,4(r2)
10003a04:	108003c4 	addi	r2,r2,15
10003a08:	e0bffe15 	stw	r2,-8(fp)
10003a0c:	00001506 	br	10003a64 <get_Kirby_Left_Pos+0xe4>
    } else if (kirby->damaging == 1) {
10003a10:	e0bfff17 	ldw	r2,-4(fp)
10003a14:	10800b17 	ldw	r2,44(r2)
10003a18:	10800058 	cmpnei	r2,r2,1
10003a1c:	1000091e 	bne	r2,zero,10003a44 <get_Kirby_Left_Pos+0xc4>
        kirby_left_X = kirby->x + 6;
10003a20:	e0bfff17 	ldw	r2,-4(fp)
10003a24:	10800017 	ldw	r2,0(r2)
10003a28:	10800184 	addi	r2,r2,6
10003a2c:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_Y = kirby->y + 18;   //// Not an accurate value!!! ////
10003a30:	e0bfff17 	ldw	r2,-4(fp)
10003a34:	10800117 	ldw	r2,4(r2)
10003a38:	10800484 	addi	r2,r2,18
10003a3c:	e0bffe15 	stw	r2,-8(fp)
10003a40:	00000806 	br	10003a64 <get_Kirby_Left_Pos+0xe4>
    } else {
        kirby_left_X = kirby->x + 8;    //// Not an accurate value!!! //// 8
10003a44:	e0bfff17 	ldw	r2,-4(fp)
10003a48:	10800017 	ldw	r2,0(r2)
10003a4c:	10800204 	addi	r2,r2,8
10003a50:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_Y = kirby->y + 14;   //// Not an accurate value!!! ////
10003a54:	e0bfff17 	ldw	r2,-4(fp)
10003a58:	10800117 	ldw	r2,4(r2)
10003a5c:	10800384 	addi	r2,r2,14
10003a60:	e0bffe15 	stw	r2,-8(fp)
    }
    return ((kirby_left_X << 16) | kirby_left_Y);
10003a64:	e0bffd17 	ldw	r2,-12(fp)
10003a68:	1006943a 	slli	r3,r2,16
10003a6c:	e0bffe17 	ldw	r2,-8(fp)
10003a70:	1884b03a 	or	r2,r3,r2
}
10003a74:	e037883a 	mov	sp,fp
10003a78:	df000017 	ldw	fp,0(sp)
10003a7c:	dec00104 	addi	sp,sp,4
10003a80:	f800283a 	ret

10003a84 <get_Kirby_Right_Pos>:

int get_Kirby_Right_Pos(Kirby * kirby) {
10003a84:	defffc04 	addi	sp,sp,-16
10003a88:	df000315 	stw	fp,12(sp)
10003a8c:	df000304 	addi	fp,sp,12
10003a90:	e13fff15 	stw	r4,-4(fp)
    int kirby_right_X = 0;
10003a94:	e03ffd15 	stw	zero,-12(fp)
    int kirby_right_Y = 0;
10003a98:	e03ffe15 	stw	zero,-8(fp)

    if (kirby->is_inhaled == 1) {
10003a9c:	e0bfff17 	ldw	r2,-4(fp)
10003aa0:	10800a17 	ldw	r2,40(r2)
10003aa4:	10800058 	cmpnei	r2,r2,1
10003aa8:	1000091e 	bne	r2,zero,10003ad0 <get_Kirby_Right_Pos+0x4c>
        kirby_right_X = kirby->x + 26;
10003aac:	e0bfff17 	ldw	r2,-4(fp)
10003ab0:	10800017 	ldw	r2,0(r2)
10003ab4:	10800684 	addi	r2,r2,26
10003ab8:	e0bffd15 	stw	r2,-12(fp)
        kirby_right_Y = kirby->y + 15;
10003abc:	e0bfff17 	ldw	r2,-4(fp)
10003ac0:	10800117 	ldw	r2,4(r2)
10003ac4:	108003c4 	addi	r2,r2,15
10003ac8:	e0bffe15 	stw	r2,-8(fp)
10003acc:	00002606 	br	10003b68 <get_Kirby_Right_Pos+0xe4>
    } else if ((kirby->inhaling == 1) || (kirby->spitting == 1)) {
10003ad0:	e0bfff17 	ldw	r2,-4(fp)
10003ad4:	10800c17 	ldw	r2,48(r2)
10003ad8:	10800060 	cmpeqi	r2,r2,1
10003adc:	1000041e 	bne	r2,zero,10003af0 <get_Kirby_Right_Pos+0x6c>
10003ae0:	e0bfff17 	ldw	r2,-4(fp)
10003ae4:	10800d17 	ldw	r2,52(r2)
10003ae8:	10800058 	cmpnei	r2,r2,1
10003aec:	1000091e 	bne	r2,zero,10003b14 <get_Kirby_Right_Pos+0x90>
        kirby_right_X = kirby->x + 41;
10003af0:	e0bfff17 	ldw	r2,-4(fp)
10003af4:	10800017 	ldw	r2,0(r2)
10003af8:	10800a44 	addi	r2,r2,41
10003afc:	e0bffd15 	stw	r2,-12(fp)
        kirby_right_Y = kirby->y + 15;
10003b00:	e0bfff17 	ldw	r2,-4(fp)
10003b04:	10800117 	ldw	r2,4(r2)
10003b08:	108003c4 	addi	r2,r2,15
10003b0c:	e0bffe15 	stw	r2,-8(fp)
10003b10:	00001506 	br	10003b68 <get_Kirby_Right_Pos+0xe4>
    } else if (kirby->damaging == 1) {
10003b14:	e0bfff17 	ldw	r2,-4(fp)
10003b18:	10800b17 	ldw	r2,44(r2)
10003b1c:	10800058 	cmpnei	r2,r2,1
10003b20:	1000091e 	bne	r2,zero,10003b48 <get_Kirby_Right_Pos+0xc4>
        kirby_right_X = kirby->x + 29;   //// Not an accurate value!!! ////
10003b24:	e0bfff17 	ldw	r2,-4(fp)
10003b28:	10800017 	ldw	r2,0(r2)
10003b2c:	10800744 	addi	r2,r2,29
10003b30:	e0bffd15 	stw	r2,-12(fp)
        kirby_right_Y = kirby->y + 18;   //// Not an accurate value!!! ////
10003b34:	e0bfff17 	ldw	r2,-4(fp)
10003b38:	10800117 	ldw	r2,4(r2)
10003b3c:	10800484 	addi	r2,r2,18
10003b40:	e0bffe15 	stw	r2,-8(fp)
10003b44:	00000806 	br	10003b68 <get_Kirby_Right_Pos+0xe4>
    } else {
        kirby_right_X = kirby->x + 24;    //// Not an accurate value!!! ////
10003b48:	e0bfff17 	ldw	r2,-4(fp)
10003b4c:	10800017 	ldw	r2,0(r2)
10003b50:	10800604 	addi	r2,r2,24
10003b54:	e0bffd15 	stw	r2,-12(fp)
        kirby_right_Y = kirby->y + 14;   //// Not an accurate value!!! ////
10003b58:	e0bfff17 	ldw	r2,-4(fp)
10003b5c:	10800117 	ldw	r2,4(r2)
10003b60:	10800384 	addi	r2,r2,14
10003b64:	e0bffe15 	stw	r2,-8(fp)
    }
    return ((kirby_right_X << 16) | kirby_right_Y);
10003b68:	e0bffd17 	ldw	r2,-12(fp)
10003b6c:	1006943a 	slli	r3,r2,16
10003b70:	e0bffe17 	ldw	r2,-8(fp)
10003b74:	1884b03a 	or	r2,r3,r2
}
10003b78:	e037883a 	mov	sp,fp
10003b7c:	df000017 	ldw	fp,0(sp)
10003b80:	dec00104 	addi	sp,sp,4
10003b84:	f800283a 	ret

10003b88 <get_Wall_Info>:

int get_Wall_Info(int x, int y, int map_idx) {
10003b88:	defff904 	addi	sp,sp,-28
10003b8c:	dfc00615 	stw	ra,24(sp)
10003b90:	df000515 	stw	fp,20(sp)
10003b94:	df000504 	addi	fp,sp,20
10003b98:	e13ffd15 	stw	r4,-12(fp)
10003b9c:	e17ffe15 	stw	r5,-8(fp)
10003ba0:	e1bfff15 	stw	r6,-4(fp)
    int idx, res = 0;
10003ba4:	e03ffb15 	stw	zero,-20(fp)
    idx = (map_Width(map_idx) * y + x) / 32;
10003ba8:	e13fff17 	ldw	r4,-4(fp)
10003bac:	00036ac0 	call	100036ac <map_Width>
10003bb0:	e17ffe17 	ldw	r5,-8(fp)
10003bb4:	1009883a 	mov	r4,r2
10003bb8:	00069bc0 	call	100069bc <__mulsi3>
10003bbc:	1007883a 	mov	r3,r2
10003bc0:	e0bffd17 	ldw	r2,-12(fp)
10003bc4:	1885883a 	add	r2,r3,r2
10003bc8:	1000010e 	bge	r2,zero,10003bd0 <get_Wall_Info+0x48>
10003bcc:	108007c4 	addi	r2,r2,31
10003bd0:	1005d17a 	srai	r2,r2,5
10003bd4:	e0bffc15 	stw	r2,-16(fp)
    res = (map_Width(map_idx) * y + x) % 32;
10003bd8:	e13fff17 	ldw	r4,-4(fp)
10003bdc:	00036ac0 	call	100036ac <map_Width>
10003be0:	e17ffe17 	ldw	r5,-8(fp)
10003be4:	1009883a 	mov	r4,r2
10003be8:	00069bc0 	call	100069bc <__mulsi3>
10003bec:	1007883a 	mov	r3,r2
10003bf0:	e0bffd17 	ldw	r2,-12(fp)
10003bf4:	1887883a 	add	r3,r3,r2
10003bf8:	00a00034 	movhi	r2,32768
10003bfc:	108007c4 	addi	r2,r2,31
10003c00:	1884703a 	and	r2,r3,r2
10003c04:	1000040e 	bge	r2,zero,10003c18 <get_Wall_Info+0x90>
10003c08:	10bfffc4 	addi	r2,r2,-1
10003c0c:	00fff804 	movi	r3,-32
10003c10:	10c4b03a 	or	r2,r2,r3
10003c14:	10800044 	addi	r2,r2,1
10003c18:	e0bffb15 	stw	r2,-20(fp)
    if (map_idx == 0) {
10003c1c:	e0bfff17 	ldw	r2,-4(fp)
10003c20:	10000d1e 	bne	r2,zero,10003c58 <get_Wall_Info+0xd0>
        return ((Wall1[idx] >> (31 - res)) & 0x00000001);
10003c24:	008400b4 	movhi	r2,4098
10003c28:	10b4ca04 	addi	r2,r2,-11480
10003c2c:	e0fffc17 	ldw	r3,-16(fp)
10003c30:	18c7883a 	add	r3,r3,r3
10003c34:	18c7883a 	add	r3,r3,r3
10003c38:	10c5883a 	add	r2,r2,r3
10003c3c:	10c00017 	ldw	r3,0(r2)
10003c40:	010007c4 	movi	r4,31
10003c44:	e0bffb17 	ldw	r2,-20(fp)
10003c48:	2085c83a 	sub	r2,r4,r2
10003c4c:	1885d83a 	sra	r2,r3,r2
10003c50:	1080004c 	andi	r2,r2,1
10003c54:	00000c06 	br	10003c88 <get_Wall_Info+0x100>
//    } else if (map_idx == 1) {
//        return ((Wall2[idx] >> (31 - res)) & 0x00000001);
    } else {
        return ((Wall1[idx] >> (31 - res)) & 0x00000001);
10003c58:	008400b4 	movhi	r2,4098
10003c5c:	10b4ca04 	addi	r2,r2,-11480
10003c60:	e0fffc17 	ldw	r3,-16(fp)
10003c64:	18c7883a 	add	r3,r3,r3
10003c68:	18c7883a 	add	r3,r3,r3
10003c6c:	10c5883a 	add	r2,r2,r3
10003c70:	10c00017 	ldw	r3,0(r2)
10003c74:	010007c4 	movi	r4,31
10003c78:	e0bffb17 	ldw	r2,-20(fp)
10003c7c:	2085c83a 	sub	r2,r4,r2
10003c80:	1885d83a 	sra	r2,r3,r2
10003c84:	1080004c 	andi	r2,r2,1
        // printf("Error: Map index out of tolerrance!");
    }
    return 1;
}
10003c88:	e037883a 	mov	sp,fp
10003c8c:	dfc00117 	ldw	ra,4(sp)
10003c90:	df000017 	ldw	fp,0(sp)
10003c94:	dec00204 	addi	sp,sp,8
10003c98:	f800283a 	ret

10003c9c <kirby_Return_Normal>:

void kirby_Return_Normal(Kirby * kirby) {
10003c9c:	defffd04 	addi	sp,sp,-12
10003ca0:	dfc00215 	stw	ra,8(sp)
10003ca4:	df000115 	stw	fp,4(sp)
10003ca8:	df000104 	addi	fp,sp,4
10003cac:	e13fff15 	stw	r4,-4(fp)
    kirby->is_inhaled = 0;
10003cb0:	e0bfff17 	ldw	r2,-4(fp)
10003cb4:	10000a15 	stw	zero,40(r2)
    kirby->in_air = 0;
10003cb8:	e0bfff17 	ldw	r2,-4(fp)
10003cbc:	10000915 	stw	zero,36(r2)
    kirby->image = 0;
10003cc0:	e0bfff17 	ldw	r2,-4(fp)
10003cc4:	10000315 	stw	zero,12(r2)
    kirby->action = 0;
10003cc8:	e0bfff17 	ldw	r2,-4(fp)
10003ccc:	10000615 	stw	zero,24(r2)
    kirby->frame = 0;
10003cd0:	e0bfff17 	ldw	r2,-4(fp)
10003cd4:	10000715 	stw	zero,28(r2)
    upload_Kirby_Info(kirby);
10003cd8:	e13fff17 	ldw	r4,-4(fp)
10003cdc:	00017940 	call	10001794 <upload_Kirby_Info>
}
10003ce0:	0001883a 	nop
10003ce4:	e037883a 	mov	sp,fp
10003ce8:	dfc00117 	ldw	ra,4(sp)
10003cec:	df000017 	ldw	fp,0(sp)
10003cf0:	dec00204 	addi	sp,sp,8
10003cf4:	f800283a 	ret

10003cf8 <kirby_Screen_Center_X>:

int kirby_Screen_Center_X(int x) {
10003cf8:	defffe04 	addi	sp,sp,-8
10003cfc:	df000115 	stw	fp,4(sp)
10003d00:	df000104 	addi	fp,sp,4
10003d04:	e13fff15 	stw	r4,-4(fp)
    if (x <= (SCREEN_WIDTH/2)) {
10003d08:	e0bfff17 	ldw	r2,-4(fp)
10003d0c:	10801d88 	cmpgei	r2,r2,118
10003d10:	1000021e 	bne	r2,zero,10003d1c <kirby_Screen_Center_X+0x24>
        return x;
10003d14:	e0bfff17 	ldw	r2,-4(fp)
10003d18:	00000a06 	br	10003d44 <kirby_Screen_Center_X+0x4c>
    } else if ((x > (SCREEN_WIDTH/2)) && (x < (MAP_0_WIDTH - SCREEN_WIDTH/2))) {
10003d1c:	e0bfff17 	ldw	r2,-4(fp)
10003d20:	10801d90 	cmplti	r2,r2,118
10003d24:	1000051e 	bne	r2,zero,10003d3c <kirby_Screen_Center_X+0x44>
10003d28:	e0bfff17 	ldw	r2,-4(fp)
10003d2c:	10811288 	cmpgei	r2,r2,1098
10003d30:	1000021e 	bne	r2,zero,10003d3c <kirby_Screen_Center_X+0x44>
        return (SCREEN_WIDTH/2);
10003d34:	00801d44 	movi	r2,117
10003d38:	00000206 	br	10003d44 <kirby_Screen_Center_X+0x4c>
    } else {
        return (x - MAP_0_WIDTH + SCREEN_WIDTH);
10003d3c:	e0bfff17 	ldw	r2,-4(fp)
10003d40:	10bf0ac4 	addi	r2,r2,-981
    }
}
10003d44:	e037883a 	mov	sp,fp
10003d48:	df000017 	ldw	fp,0(sp)
10003d4c:	dec00104 	addi	sp,sp,4
10003d50:	f800283a 	ret

10003d54 <kirby_Is_Damaged>:

int kirby_Is_Damaged (Kirby * kirby, Enemy * enemy) {
10003d54:	defffa04 	addi	sp,sp,-24
10003d58:	dfc00515 	stw	ra,20(sp)
10003d5c:	df000415 	stw	fp,16(sp)
10003d60:	dc000315 	stw	r16,12(sp)
10003d64:	df000404 	addi	fp,sp,16
10003d68:	e13ffd15 	stw	r4,-12(fp)
10003d6c:	e17ffe15 	stw	r5,-8(fp)
    int damage_dis_sqr = 0;
10003d70:	e03ffc15 	stw	zero,-16(fp)
    if (enemy->action == 2)
10003d74:	e0bffe17 	ldw	r2,-8(fp)
10003d78:	10800417 	ldw	r2,16(r2)
10003d7c:	10800098 	cmpnei	r2,r2,2
10003d80:	1000031e 	bne	r2,zero,10003d90 <kirby_Is_Damaged+0x3c>
        damage_dis_sqr = KIRBY_DAMEGE_DIS_SQRTL;
10003d84:	00800804 	movi	r2,32
10003d88:	e0bffc15 	stw	r2,-16(fp)
10003d8c:	00000206 	br	10003d98 <kirby_Is_Damaged+0x44>
    else
        damage_dis_sqr = KIRBY_DAMAGE_DIS_SQRT;
10003d90:	00800504 	movi	r2,20
10003d94:	e0bffc15 	stw	r2,-16(fp)

    if (sqr_Dis_Kirby_Enemy(kirby, enemy) <= (damage_dis_sqr * damage_dis_sqr))
10003d98:	e17ffe17 	ldw	r5,-8(fp)
10003d9c:	e13ffd17 	ldw	r4,-12(fp)
10003da0:	0003ed80 	call	10003ed8 <sqr_Dis_Kirby_Enemy>
10003da4:	1021883a 	mov	r16,r2
10003da8:	e17ffc17 	ldw	r5,-16(fp)
10003dac:	e13ffc17 	ldw	r4,-16(fp)
10003db0:	00069bc0 	call	100069bc <__mulsi3>
10003db4:	14000216 	blt	r2,r16,10003dc0 <kirby_Is_Damaged+0x6c>
        return 1;
10003db8:	00800044 	movi	r2,1
10003dbc:	00000106 	br	10003dc4 <kirby_Is_Damaged+0x70>
    return 0;
10003dc0:	0005883a 	mov	r2,zero
}
10003dc4:	e6ffff04 	addi	sp,fp,-4
10003dc8:	dfc00217 	ldw	ra,8(sp)
10003dcc:	df000117 	ldw	fp,4(sp)
10003dd0:	dc000017 	ldw	r16,0(sp)
10003dd4:	dec00304 	addi	sp,sp,12
10003dd8:	f800283a 	ret

10003ddc <kirby_Damage_Action>:

int kirby_Damage_Action(Enemy * enemy) {
10003ddc:	defffe04 	addi	sp,sp,-8
10003de0:	df000115 	stw	fp,4(sp)
10003de4:	df000104 	addi	fp,sp,4
10003de8:	e13fff15 	stw	r4,-4(fp)
    if (enemy->tpe == 0)
10003dec:	e0bfff17 	ldw	r2,-4(fp)
10003df0:	10800617 	ldw	r2,24(r2)
10003df4:	1000021e 	bne	r2,zero,10003e00 <kirby_Damage_Action+0x24>
        return 1;
10003df8:	00800044 	movi	r2,1
10003dfc:	00001106 	br	10003e44 <kirby_Damage_Action+0x68>
    if (enemy->tpe == 1)
10003e00:	e0bfff17 	ldw	r2,-4(fp)
10003e04:	10800617 	ldw	r2,24(r2)
10003e08:	10800058 	cmpnei	r2,r2,1
10003e0c:	1000021e 	bne	r2,zero,10003e18 <kirby_Damage_Action+0x3c>
        return 2;
10003e10:	00800084 	movi	r2,2
10003e14:	00000b06 	br	10003e44 <kirby_Damage_Action+0x68>
    if ((enemy->tpe == 2) || (enemy->tpe == 3))
10003e18:	e0bfff17 	ldw	r2,-4(fp)
10003e1c:	10800617 	ldw	r2,24(r2)
10003e20:	108000a0 	cmpeqi	r2,r2,2
10003e24:	1000041e 	bne	r2,zero,10003e38 <kirby_Damage_Action+0x5c>
10003e28:	e0bfff17 	ldw	r2,-4(fp)
10003e2c:	10800617 	ldw	r2,24(r2)
10003e30:	108000d8 	cmpnei	r2,r2,3
10003e34:	1000021e 	bne	r2,zero,10003e40 <kirby_Damage_Action+0x64>
        return 0;
10003e38:	0005883a 	mov	r2,zero
10003e3c:	00000106 	br	10003e44 <kirby_Damage_Action+0x68>
    return 0;
10003e40:	0005883a 	mov	r2,zero
    printf("\nERROR: Something wrong with kirby's damage action decision!\n");
}
10003e44:	e037883a 	mov	sp,fp
10003e48:	df000017 	ldw	fp,0(sp)
10003e4c:	dec00104 	addi	sp,sp,4
10003e50:	f800283a 	ret

10003e54 <damage_Frame_Number>:

int damage_Frame_Number(Enemy * enemy) {
10003e54:	defffe04 	addi	sp,sp,-8
10003e58:	df000115 	stw	fp,4(sp)
10003e5c:	df000104 	addi	fp,sp,4
10003e60:	e13fff15 	stw	r4,-4(fp)
    if (enemy->tpe == 0)
10003e64:	e0bfff17 	ldw	r2,-4(fp)
10003e68:	10800617 	ldw	r2,24(r2)
10003e6c:	1000021e 	bne	r2,zero,10003e78 <damage_Frame_Number+0x24>
        return 13;
10003e70:	00800344 	movi	r2,13
10003e74:	00000106 	br	10003e7c <damage_Frame_Number+0x28>
    else
        return 9;
10003e78:	00800244 	movi	r2,9
}
10003e7c:	e037883a 	mov	sp,fp
10003e80:	df000017 	ldw	fp,0(sp)
10003e84:	dec00104 	addi	sp,sp,4
10003e88:	f800283a 	ret

10003e8c <enemy_Should_Be_Inhaled>:

int enemy_Should_Be_Inhaled(Kirby * kirby, Enemy * enemy) {
10003e8c:	defffc04 	addi	sp,sp,-16
10003e90:	dfc00315 	stw	ra,12(sp)
10003e94:	df000215 	stw	fp,8(sp)
10003e98:	df000204 	addi	fp,sp,8
10003e9c:	e13ffe15 	stw	r4,-8(fp)
10003ea0:	e17fff15 	stw	r5,-4(fp)
    if (sqr_Dis_Kirby_Enemy(kirby, enemy) <= (KIRBY_INHALE_DIS_SQRT * KIRBY_INHALE_DIS_SQRT))
10003ea4:	e17fff17 	ldw	r5,-4(fp)
10003ea8:	e13ffe17 	ldw	r4,-8(fp)
10003eac:	0003ed80 	call	10003ed8 <sqr_Dis_Kirby_Enemy>
10003eb0:	10814448 	cmpgei	r2,r2,1297
10003eb4:	1000021e 	bne	r2,zero,10003ec0 <enemy_Should_Be_Inhaled+0x34>
        return 1;
10003eb8:	00800044 	movi	r2,1
10003ebc:	00000106 	br	10003ec4 <enemy_Should_Be_Inhaled+0x38>
    return 0;
10003ec0:	0005883a 	mov	r2,zero
}
10003ec4:	e037883a 	mov	sp,fp
10003ec8:	dfc00117 	ldw	ra,4(sp)
10003ecc:	df000017 	ldw	fp,0(sp)
10003ed0:	dec00204 	addi	sp,sp,8
10003ed4:	f800283a 	ret

10003ed8 <sqr_Dis_Kirby_Enemy>:

int sqr_Dis_Kirby_Enemy(Kirby * kirby, Enemy * enemy) {
10003ed8:	defff704 	addi	sp,sp,-36
10003edc:	dfc00815 	stw	ra,32(sp)
10003ee0:	df000715 	stw	fp,28(sp)
10003ee4:	dc000615 	stw	r16,24(sp)
10003ee8:	df000704 	addi	fp,sp,28
10003eec:	e13ffd15 	stw	r4,-12(fp)
10003ef0:	e17ffe15 	stw	r5,-8(fp)
    int kirby_Center_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
10003ef4:	e13ffd17 	ldw	r4,-12(fp)
10003ef8:	00037780 	call	10003778 <get_Kirby_Botton_Pos>
10003efc:	1004d43a 	srli	r2,r2,16
10003f00:	e0bff915 	stw	r2,-28(fp)
    int kirby_Center_Y = (get_Kirby_Left_Pos(kirby) & 0x0000ffff);
10003f04:	e13ffd17 	ldw	r4,-12(fp)
10003f08:	00039800 	call	10003980 <get_Kirby_Left_Pos>
10003f0c:	10bfffcc 	andi	r2,r2,65535
10003f10:	e0bffa15 	stw	r2,-24(fp)
    int enemy_Center_X = (get_Enemy_Botton_Pos(enemy) >> 16) & 0x0000ffff;
10003f14:	e13ffe17 	ldw	r4,-8(fp)
10003f18:	0000d2c0 	call	10000d2c <get_Enemy_Botton_Pos>
10003f1c:	1004d43a 	srli	r2,r2,16
10003f20:	e0bffb15 	stw	r2,-20(fp)
    int enemy_Center_Y = (get_Enemy_Left_Pos(enemy) & 0x0000ffff);
10003f24:	e13ffe17 	ldw	r4,-8(fp)
10003f28:	0000f4c0 	call	10000f4c <get_Enemy_Left_Pos>
10003f2c:	10bfffcc 	andi	r2,r2,65535
10003f30:	e0bffc15 	stw	r2,-16(fp)

    return ((kirby_Center_X - enemy_Center_X) * (kirby_Center_X - enemy_Center_X) + (kirby_Center_Y - enemy_Center_Y) * (kirby_Center_Y - enemy_Center_Y));
10003f34:	e0fff917 	ldw	r3,-28(fp)
10003f38:	e0bffb17 	ldw	r2,-20(fp)
10003f3c:	1889c83a 	sub	r4,r3,r2
10003f40:	e0fff917 	ldw	r3,-28(fp)
10003f44:	e0bffb17 	ldw	r2,-20(fp)
10003f48:	1885c83a 	sub	r2,r3,r2
10003f4c:	100b883a 	mov	r5,r2
10003f50:	00069bc0 	call	100069bc <__mulsi3>
10003f54:	1021883a 	mov	r16,r2
10003f58:	e0fffa17 	ldw	r3,-24(fp)
10003f5c:	e0bffc17 	ldw	r2,-16(fp)
10003f60:	1889c83a 	sub	r4,r3,r2
10003f64:	e0fffa17 	ldw	r3,-24(fp)
10003f68:	e0bffc17 	ldw	r2,-16(fp)
10003f6c:	1885c83a 	sub	r2,r3,r2
10003f70:	100b883a 	mov	r5,r2
10003f74:	00069bc0 	call	100069bc <__mulsi3>
10003f78:	8085883a 	add	r2,r16,r2
}
10003f7c:	e6ffff04 	addi	sp,fp,-4
10003f80:	dfc00217 	ldw	ra,8(sp)
10003f84:	df000117 	ldw	fp,4(sp)
10003f88:	dc000017 	ldw	r16,0(sp)
10003f8c:	dec00304 	addi	sp,sp,12
10003f90:	f800283a 	ret

10003f94 <sqr_Dis_Kirby_Door>:

int sqr_Dis_Kirby_Door(Kirby * kirby) {
10003f94:	defff804 	addi	sp,sp,-32
10003f98:	dfc00715 	stw	ra,28(sp)
10003f9c:	df000615 	stw	fp,24(sp)
10003fa0:	dc000515 	stw	r16,20(sp)
10003fa4:	df000604 	addi	fp,sp,24
10003fa8:	e13ffe15 	stw	r4,-8(fp)
    int kirby_Center_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
10003fac:	e13ffe17 	ldw	r4,-8(fp)
10003fb0:	00037780 	call	10003778 <get_Kirby_Botton_Pos>
10003fb4:	1004d43a 	srli	r2,r2,16
10003fb8:	e0bffa15 	stw	r2,-24(fp)
    int kirby_Center_Y = (get_Kirby_Left_Pos(kirby) & 0x0000ffff);
10003fbc:	e13ffe17 	ldw	r4,-8(fp)
10003fc0:	00039800 	call	10003980 <get_Kirby_Left_Pos>
10003fc4:	10bfffcc 	andi	r2,r2,65535
10003fc8:	e0bffb15 	stw	r2,-20(fp)
    int door_Center_X = DOOR_CENTER_X;
10003fcc:	00811184 	movi	r2,1094
10003fd0:	e0bffc15 	stw	r2,-16(fp)
    int door_Center_Y = DOOR_CENTER_Y;
10003fd4:	00801544 	movi	r2,85
10003fd8:	e0bffd15 	stw	r2,-12(fp)

    return ((kirby_Center_X - door_Center_X) * (kirby_Center_X - door_Center_X) + (kirby_Center_Y - door_Center_Y) * (kirby_Center_Y - door_Center_Y));
10003fdc:	e0fffa17 	ldw	r3,-24(fp)
10003fe0:	e0bffc17 	ldw	r2,-16(fp)
10003fe4:	1889c83a 	sub	r4,r3,r2
10003fe8:	e0fffa17 	ldw	r3,-24(fp)
10003fec:	e0bffc17 	ldw	r2,-16(fp)
10003ff0:	1885c83a 	sub	r2,r3,r2
10003ff4:	100b883a 	mov	r5,r2
10003ff8:	00069bc0 	call	100069bc <__mulsi3>
10003ffc:	1021883a 	mov	r16,r2
10004000:	e0fffb17 	ldw	r3,-20(fp)
10004004:	e0bffd17 	ldw	r2,-12(fp)
10004008:	1889c83a 	sub	r4,r3,r2
1000400c:	e0fffb17 	ldw	r3,-20(fp)
10004010:	e0bffd17 	ldw	r2,-12(fp)
10004014:	1885c83a 	sub	r2,r3,r2
10004018:	100b883a 	mov	r5,r2
1000401c:	00069bc0 	call	100069bc <__mulsi3>
10004020:	8085883a 	add	r2,r16,r2
}
10004024:	e6ffff04 	addi	sp,fp,-4
10004028:	dfc00217 	ldw	ra,8(sp)
1000402c:	df000117 	ldw	fp,4(sp)
10004030:	dc000017 	ldw	r16,0(sp)
10004034:	dec00304 	addi	sp,sp,12
10004038:	f800283a 	ret

1000403c <game_Over_Anime>:

void game_Over_Anime(Kirby * kirby) {
1000403c:	defffc04 	addi	sp,sp,-16
10004040:	dfc00315 	stw	ra,12(sp)
10004044:	df000215 	stw	fp,8(sp)
10004048:	df000204 	addi	fp,sp,8
1000404c:	e13fff15 	stw	r4,-4(fp)
    int i = 0;
10004050:	e03ffe15 	stw	zero,-8(fp)
    kirby->damaging = 1;
10004054:	e0bfff17 	ldw	r2,-4(fp)
10004058:	00c00044 	movi	r3,1
1000405c:	10c00b15 	stw	r3,44(r2)
    kirby->image = 2;
10004060:	e0bfff17 	ldw	r2,-4(fp)
10004064:	00c00084 	movi	r3,2
10004068:	10c00315 	stw	r3,12(r2)
    kirby->action = 0;
1000406c:	e0bfff17 	ldw	r2,-4(fp)
10004070:	10000615 	stw	zero,24(r2)
    kirby->frame = 0;
10004074:	e0bfff17 	ldw	r2,-4(fp)
10004078:	10000715 	stw	zero,28(r2)
    upload_Kirby_Info(kirby);
1000407c:	e13fff17 	ldw	r4,-4(fp)
10004080:	00017940 	call	10001794 <upload_Kirby_Info>
    frame_Time(GAME_OVER_FRAME_TIME);
10004084:	012bf214 	movui	r4,45000
10004088:	00036680 	call	10003668 <frame_Time>
    if (kirby->is_left == 0) {
1000408c:	e0bfff17 	ldw	r2,-4(fp)
10004090:	10800417 	ldw	r2,16(r2)
10004094:	1000231e 	bne	r2,zero,10004124 <game_Over_Anime+0xe8>
        for (i = 0; i < 14; i++) {
10004098:	e03ffe15 	stw	zero,-8(fp)
1000409c:	00001d06 	br	10004114 <game_Over_Anime+0xd8>
            kirby->frame = (kirby->frame + 1) % 8;
100040a0:	e0bfff17 	ldw	r2,-4(fp)
100040a4:	10800717 	ldw	r2,28(r2)
100040a8:	10c00044 	addi	r3,r2,1
100040ac:	00a00034 	movhi	r2,32768
100040b0:	108001c4 	addi	r2,r2,7
100040b4:	1884703a 	and	r2,r3,r2
100040b8:	1000040e 	bge	r2,zero,100040cc <game_Over_Anime+0x90>
100040bc:	10bfffc4 	addi	r2,r2,-1
100040c0:	00fffe04 	movi	r3,-8
100040c4:	10c4b03a 	or	r2,r2,r3
100040c8:	10800044 	addi	r2,r2,1
100040cc:	1007883a 	mov	r3,r2
100040d0:	e0bfff17 	ldw	r2,-4(fp)
100040d4:	10c00715 	stw	r3,28(r2)
            kirby->x -= KIRBY_STEP_X;
100040d8:	e0bfff17 	ldw	r2,-4(fp)
100040dc:	10800017 	ldw	r2,0(r2)
100040e0:	10ffff44 	addi	r3,r2,-3
100040e4:	e0bfff17 	ldw	r2,-4(fp)
100040e8:	10c00015 	stw	r3,0(r2)
            upload_Kirby_Info(kirby);
100040ec:	e13fff17 	ldw	r4,-4(fp)
100040f0:	00017940 	call	10001794 <upload_Kirby_Info>
            frame_Time(DIE_INCREASE_TIME_BASE * i);
100040f4:	0149c404 	movi	r5,10000
100040f8:	e13ffe17 	ldw	r4,-8(fp)
100040fc:	00069bc0 	call	100069bc <__mulsi3>
10004100:	1009883a 	mov	r4,r2
10004104:	00036680 	call	10003668 <frame_Time>
    kirby->action = 0;
    kirby->frame = 0;
    upload_Kirby_Info(kirby);
    frame_Time(GAME_OVER_FRAME_TIME);
    if (kirby->is_left == 0) {
        for (i = 0; i < 14; i++) {
10004108:	e0bffe17 	ldw	r2,-8(fp)
1000410c:	10800044 	addi	r2,r2,1
10004110:	e0bffe15 	stw	r2,-8(fp)
10004114:	e0bffe17 	ldw	r2,-8(fp)
10004118:	10800390 	cmplti	r2,r2,14
1000411c:	103fe01e 	bne	r2,zero,100040a0 <__alt_data_end+0xf80040a0>
            kirby->x += KIRBY_STEP_X;
            upload_Kirby_Info(kirby);
            frame_Time(DIE_INCREASE_TIME_BASE * i);
        }
    }
}
10004120:	00002206 	br	100041ac <game_Over_Anime+0x170>
            kirby->x -= KIRBY_STEP_X;
            upload_Kirby_Info(kirby);
            frame_Time(DIE_INCREASE_TIME_BASE * i);
        }
    } else {
        for (i = 0; i < 14; i++) {
10004124:	e03ffe15 	stw	zero,-8(fp)
10004128:	00001d06 	br	100041a0 <game_Over_Anime+0x164>
            kirby->frame = (kirby->frame + 1) % 8;
1000412c:	e0bfff17 	ldw	r2,-4(fp)
10004130:	10800717 	ldw	r2,28(r2)
10004134:	10c00044 	addi	r3,r2,1
10004138:	00a00034 	movhi	r2,32768
1000413c:	108001c4 	addi	r2,r2,7
10004140:	1884703a 	and	r2,r3,r2
10004144:	1000040e 	bge	r2,zero,10004158 <game_Over_Anime+0x11c>
10004148:	10bfffc4 	addi	r2,r2,-1
1000414c:	00fffe04 	movi	r3,-8
10004150:	10c4b03a 	or	r2,r2,r3
10004154:	10800044 	addi	r2,r2,1
10004158:	1007883a 	mov	r3,r2
1000415c:	e0bfff17 	ldw	r2,-4(fp)
10004160:	10c00715 	stw	r3,28(r2)
            kirby->x += KIRBY_STEP_X;
10004164:	e0bfff17 	ldw	r2,-4(fp)
10004168:	10800017 	ldw	r2,0(r2)
1000416c:	10c000c4 	addi	r3,r2,3
10004170:	e0bfff17 	ldw	r2,-4(fp)
10004174:	10c00015 	stw	r3,0(r2)
            upload_Kirby_Info(kirby);
10004178:	e13fff17 	ldw	r4,-4(fp)
1000417c:	00017940 	call	10001794 <upload_Kirby_Info>
            frame_Time(DIE_INCREASE_TIME_BASE * i);
10004180:	0149c404 	movi	r5,10000
10004184:	e13ffe17 	ldw	r4,-8(fp)
10004188:	00069bc0 	call	100069bc <__mulsi3>
1000418c:	1009883a 	mov	r4,r2
10004190:	00036680 	call	10003668 <frame_Time>
            kirby->x -= KIRBY_STEP_X;
            upload_Kirby_Info(kirby);
            frame_Time(DIE_INCREASE_TIME_BASE * i);
        }
    } else {
        for (i = 0; i < 14; i++) {
10004194:	e0bffe17 	ldw	r2,-8(fp)
10004198:	10800044 	addi	r2,r2,1
1000419c:	e0bffe15 	stw	r2,-8(fp)
100041a0:	e0bffe17 	ldw	r2,-8(fp)
100041a4:	10800390 	cmplti	r2,r2,14
100041a8:	103fe01e 	bne	r2,zero,1000412c <__alt_data_end+0xf800412c>
            kirby->x += KIRBY_STEP_X;
            upload_Kirby_Info(kirby);
            frame_Time(DIE_INCREASE_TIME_BASE * i);
        }
    }
}
100041ac:	0001883a 	nop
100041b0:	e037883a 	mov	sp,fp
100041b4:	dfc00117 	ldw	ra,4(sp)
100041b8:	df000017 	ldw	fp,0(sp)
100041bc:	dec00204 	addi	sp,sp,8
100041c0:	f800283a 	ret

100041c4 <win_Anime>:

void win_Anime(Kirby * kirby) {
100041c4:	defff504 	addi	sp,sp,-44
100041c8:	dfc00a15 	stw	ra,40(sp)
100041cc:	df000915 	stw	fp,36(sp)
100041d0:	df000904 	addi	fp,sp,36
100041d4:	e13fff15 	stw	r4,-4(fp)
    int i = 0;
100041d8:	e03ff715 	stw	zero,-36(fp)
    int y_list[7] = {5,3,3,2,2,1,1};
100041dc:	00800144 	movi	r2,5
100041e0:	e0bff815 	stw	r2,-32(fp)
100041e4:	008000c4 	movi	r2,3
100041e8:	e0bff915 	stw	r2,-28(fp)
100041ec:	008000c4 	movi	r2,3
100041f0:	e0bffa15 	stw	r2,-24(fp)
100041f4:	00800084 	movi	r2,2
100041f8:	e0bffb15 	stw	r2,-20(fp)
100041fc:	00800084 	movi	r2,2
10004200:	e0bffc15 	stw	r2,-16(fp)
10004204:	00800044 	movi	r2,1
10004208:	e0bffd15 	stw	r2,-12(fp)
1000420c:	00800044 	movi	r2,1
10004210:	e0bffe15 	stw	r2,-8(fp)

    kirby->inhaling = 0;
10004214:	e0bfff17 	ldw	r2,-4(fp)
10004218:	10000c15 	stw	zero,48(r2)
    kirby->damaging = 0;
1000421c:	e0bfff17 	ldw	r2,-4(fp)
10004220:	10000b15 	stw	zero,44(r2)
    kirby->gulping = 0;
10004224:	e0bfff17 	ldw	r2,-4(fp)
10004228:	10000f15 	stw	zero,60(r2)
    kirby->kicking = 0;
1000422c:	e0bfff17 	ldw	r2,-4(fp)
10004230:	10000e15 	stw	zero,56(r2)
    kirby->spitting = 0;
10004234:	e0bfff17 	ldw	r2,-4(fp)
10004238:	10000d15 	stw	zero,52(r2)
    kirby->is_inhaled = 0;
1000423c:	e0bfff17 	ldw	r2,-4(fp)
10004240:	10000a15 	stw	zero,40(r2)
    kirby->in_air = 0;
10004244:	e0bfff17 	ldw	r2,-4(fp)
10004248:	10000915 	stw	zero,36(r2)

    // Enter Door
    kirby->image = 0;
1000424c:	e0bfff17 	ldw	r2,-4(fp)
10004250:	10000315 	stw	zero,12(r2)
    kirby->action = 0;
10004254:	e0bfff17 	ldw	r2,-4(fp)
10004258:	10000615 	stw	zero,24(r2)
    kirby->frame = 5;
1000425c:	e0bfff17 	ldw	r2,-4(fp)
10004260:	00c00144 	movi	r3,5
10004264:	10c00715 	stw	r3,28(r2)
    kirby->x = DOOR_CENTER_X - 14;
10004268:	e0bfff17 	ldw	r2,-4(fp)
1000426c:	00c10e04 	movi	r3,1080
10004270:	10c00015 	stw	r3,0(r2)
    kirby->y = DOOR_CENTER_Y - 5;
10004274:	e0bfff17 	ldw	r2,-4(fp)
10004278:	00c01404 	movi	r3,80
1000427c:	10c00115 	stw	r3,4(r2)
    for (i = 0; i < 4; i++) {
10004280:	e03ff715 	stw	zero,-36(fp)
10004284:	00000c06 	br	100042b8 <win_Anime+0xf4>
        kirby->frame += 1;
10004288:	e0bfff17 	ldw	r2,-4(fp)
1000428c:	10800717 	ldw	r2,28(r2)
10004290:	10c00044 	addi	r3,r2,1
10004294:	e0bfff17 	ldw	r2,-4(fp)
10004298:	10c00715 	stw	r3,28(r2)
        upload_Kirby_Info(kirby);
1000429c:	e13fff17 	ldw	r4,-4(fp)
100042a0:	00017940 	call	10001794 <upload_Kirby_Info>
        frame_Time(GAME_OVER_FRAME_TIME);
100042a4:	012bf214 	movui	r4,45000
100042a8:	00036680 	call	10003668 <frame_Time>
    kirby->image = 0;
    kirby->action = 0;
    kirby->frame = 5;
    kirby->x = DOOR_CENTER_X - 14;
    kirby->y = DOOR_CENTER_Y - 5;
    for (i = 0; i < 4; i++) {
100042ac:	e0bff717 	ldw	r2,-36(fp)
100042b0:	10800044 	addi	r2,r2,1
100042b4:	e0bff715 	stw	r2,-36(fp)
100042b8:	e0bff717 	ldw	r2,-36(fp)
100042bc:	10800110 	cmplti	r2,r2,4
100042c0:	103ff11e 	bne	r2,zero,10004288 <__alt_data_end+0xf8004288>
        kirby->frame += 1;
        upload_Kirby_Info(kirby);
        frame_Time(GAME_OVER_FRAME_TIME);
    }
    // Jump
    kirby->action = 1;
100042c4:	e0bfff17 	ldw	r2,-4(fp)
100042c8:	00c00044 	movi	r3,1
100042cc:	10c00615 	stw	r3,24(r2)
    kirby->frame = 10;
100042d0:	e0bfff17 	ldw	r2,-4(fp)
100042d4:	00c00284 	movi	r3,10
100042d8:	10c00715 	stw	r3,28(r2)
    for (i = 0; i < 7; i++) {
100042dc:	e03ff715 	stw	zero,-36(fp)
100042e0:	00001306 	br	10004330 <win_Anime+0x16c>
        kirby->y -= y_list[i];
100042e4:	e0bfff17 	ldw	r2,-4(fp)
100042e8:	10c00117 	ldw	r3,4(r2)
100042ec:	e0bff717 	ldw	r2,-36(fp)
100042f0:	1085883a 	add	r2,r2,r2
100042f4:	1085883a 	add	r2,r2,r2
100042f8:	e13ff704 	addi	r4,fp,-36
100042fc:	2085883a 	add	r2,r4,r2
10004300:	10800104 	addi	r2,r2,4
10004304:	10800017 	ldw	r2,0(r2)
10004308:	1887c83a 	sub	r3,r3,r2
1000430c:	e0bfff17 	ldw	r2,-4(fp)
10004310:	10c00115 	stw	r3,4(r2)
        upload_Kirby_Info(kirby);
10004314:	e13fff17 	ldw	r4,-4(fp)
10004318:	00017940 	call	10001794 <upload_Kirby_Info>
        frame_Time(GAME_OVER_FRAME_TIME);
1000431c:	012bf214 	movui	r4,45000
10004320:	00036680 	call	10003668 <frame_Time>
        frame_Time(GAME_OVER_FRAME_TIME);
    }
    // Jump
    kirby->action = 1;
    kirby->frame = 10;
    for (i = 0; i < 7; i++) {
10004324:	e0bff717 	ldw	r2,-36(fp)
10004328:	10800044 	addi	r2,r2,1
1000432c:	e0bff715 	stw	r2,-36(fp)
10004330:	e0bff717 	ldw	r2,-36(fp)
10004334:	108001d0 	cmplti	r2,r2,7
10004338:	103fea1e 	bne	r2,zero,100042e4 <__alt_data_end+0xf80042e4>
        kirby->y -= y_list[i];
        upload_Kirby_Info(kirby);
        frame_Time(GAME_OVER_FRAME_TIME);
    }
}
1000433c:	0001883a 	nop
10004340:	e037883a 	mov	sp,fp
10004344:	dfc00117 	ldw	ra,4(sp)
10004348:	df000017 	ldw	fp,0(sp)
1000434c:	dec00204 	addi	sp,sp,8
10004350:	f800283a 	ret

10004354 <main>:
#include "test.h"
#include "usb_main.h"
#include "parameter.h"
#include "game_logic.h"

int main(void) {
10004354:	defffe04 	addi	sp,sp,-8
10004358:	dfc00115 	stw	ra,4(sp)
1000435c:	df000015 	stw	fp,0(sp)
10004360:	d839883a 	mov	fp,sp
    // Game * game_state;
    // initial_Game_State(game_state);
    GameStart();
10004364:	00011680 	call	10001168 <GameStart>

    printf("ERROR: Game interrupted!");
10004368:	01040074 	movhi	r4,4097
1000436c:	2117da04 	addi	r4,r4,24424
10004370:	0006a140 	call	10006a14 <printf>
    return 0;
10004374:	0005883a 	mov	r2,zero
}
10004378:	e037883a 	mov	sp,fp
1000437c:	dfc00117 	ldw	ra,4(sp)
10004380:	df000017 	ldw	fp,0(sp)
10004384:	dec00204 	addi	sp,sp,8
10004388:	f800283a 	ret

1000438c <initial_Star>:
#include "star.h"
#include "parameter.h"
#include "enemy.h"


void initial_Star(Star * star) {
1000438c:	defffe04 	addi	sp,sp,-8
10004390:	df000115 	stw	fp,4(sp)
10004394:	df000104 	addi	fp,sp,4
10004398:	e13fff15 	stw	r4,-4(fp)
    star->x = 0;
1000439c:	e0bfff17 	ldw	r2,-4(fp)
100043a0:	10000015 	stw	zero,0(r2)
    star->y = 0;
100043a4:	e0bfff17 	ldw	r2,-4(fp)
100043a8:	10000115 	stw	zero,4(r2)
    star->map_x = 0;
100043ac:	e0bfff17 	ldw	r2,-4(fp)
100043b0:	10000215 	stw	zero,8(r2)
    star->idx = 0;
100043b4:	e0bfff17 	ldw	r2,-4(fp)
100043b8:	10000315 	stw	zero,12(r2)
    star->appear = 0;
100043bc:	e0bfff17 	ldw	r2,-4(fp)
100043c0:	10000415 	stw	zero,16(r2)
    star->is_left = 0;
100043c4:	e0bfff17 	ldw	r2,-4(fp)
100043c8:	10000515 	stw	zero,20(r2)
}
100043cc:	0001883a 	nop
100043d0:	e037883a 	mov	sp,fp
100043d4:	df000017 	ldw	fp,0(sp)
100043d8:	dec00104 	addi	sp,sp,4
100043dc:	f800283a 	ret

100043e0 <spit_Star>:

void spit_Star(Kirby * kirby, Star * star, Enemy * enemy) {
100043e0:	defffb04 	addi	sp,sp,-20
100043e4:	dfc00415 	stw	ra,16(sp)
100043e8:	df000315 	stw	fp,12(sp)
100043ec:	df000304 	addi	fp,sp,12
100043f0:	e13ffd15 	stw	r4,-12(fp)
100043f4:	e17ffe15 	stw	r5,-8(fp)
100043f8:	e1bfff15 	stw	r6,-4(fp)
    update_Star(kirby, star, enemy);
100043fc:	e1bfff17 	ldw	r6,-4(fp)
10004400:	e17ffe17 	ldw	r5,-8(fp)
10004404:	e13ffd17 	ldw	r4,-12(fp)
10004408:	00044b00 	call	100044b0 <update_Star>
    upload_Star_Info(star);
1000440c:	e13ffe17 	ldw	r4,-8(fp)
10004410:	00044340 	call	10004434 <upload_Star_Info>
    frame_Time(STAR_FRAME_TIME);
10004414:	01036b04 	movi	r4,3500
10004418:	00036680 	call	10003668 <frame_Time>
}
1000441c:	0001883a 	nop
10004420:	e037883a 	mov	sp,fp
10004424:	dfc00117 	ldw	ra,4(sp)
10004428:	df000017 	ldw	fp,0(sp)
1000442c:	dec00204 	addi	sp,sp,8
10004430:	f800283a 	ret

10004434 <upload_Star_Info>:

void upload_Star_Info(Star * star) {
10004434:	defffe04 	addi	sp,sp,-8
10004438:	df000115 	stw	fp,4(sp)
1000443c:	df000104 	addi	fp,sp,4
10004440:	e13fff15 	stw	r4,-4(fp)
//    printf("\n**************** Spit Star - Load Registers ****************\n");
    REG_3_STAR = (star->x << 24) | (star->y << 16) | (star->idx << 14) | (star->is_left << 13) | (star->appear << 12);
10004444:	d09b2517 	ldw	r2,27796(gp)
10004448:	10800304 	addi	r2,r2,12
1000444c:	e0ffff17 	ldw	r3,-4(fp)
10004450:	18c00017 	ldw	r3,0(r3)
10004454:	1808963a 	slli	r4,r3,24
10004458:	e0ffff17 	ldw	r3,-4(fp)
1000445c:	18c00117 	ldw	r3,4(r3)
10004460:	1806943a 	slli	r3,r3,16
10004464:	20c8b03a 	or	r4,r4,r3
10004468:	e0ffff17 	ldw	r3,-4(fp)
1000446c:	18c00317 	ldw	r3,12(r3)
10004470:	180693ba 	slli	r3,r3,14
10004474:	20c8b03a 	or	r4,r4,r3
10004478:	e0ffff17 	ldw	r3,-4(fp)
1000447c:	18c00517 	ldw	r3,20(r3)
10004480:	1806937a 	slli	r3,r3,13
10004484:	20c8b03a 	or	r4,r4,r3
10004488:	e0ffff17 	ldw	r3,-4(fp)
1000448c:	18c00417 	ldw	r3,16(r3)
10004490:	1806933a 	slli	r3,r3,12
10004494:	20c6b03a 	or	r3,r4,r3
10004498:	10c00015 	stw	r3,0(r2)
}
1000449c:	0001883a 	nop
100044a0:	e037883a 	mov	sp,fp
100044a4:	df000017 	ldw	fp,0(sp)
100044a8:	dec00104 	addi	sp,sp,4
100044ac:	f800283a 	ret

100044b0 <update_Star>:

void update_Star(Kirby * kirby, Star * star, Enemy * enemy) {
100044b0:	defffb04 	addi	sp,sp,-20
100044b4:	dfc00415 	stw	ra,16(sp)
100044b8:	df000315 	stw	fp,12(sp)
100044bc:	df000304 	addi	fp,sp,12
100044c0:	e13ffd15 	stw	r4,-12(fp)
100044c4:	e17ffe15 	stw	r5,-8(fp)
100044c8:	e1bfff15 	stw	r6,-4(fp)
    if ((kirby->image == 1) && (kirby->action == 4) && (kirby->frame == 2)) {
100044cc:	e0bffd17 	ldw	r2,-12(fp)
100044d0:	10800317 	ldw	r2,12(r2)
100044d4:	10800058 	cmpnei	r2,r2,1
100044d8:	1000331e 	bne	r2,zero,100045a8 <update_Star+0xf8>
100044dc:	e0bffd17 	ldw	r2,-12(fp)
100044e0:	10800617 	ldw	r2,24(r2)
100044e4:	10800118 	cmpnei	r2,r2,4
100044e8:	10002f1e 	bne	r2,zero,100045a8 <update_Star+0xf8>
100044ec:	e0bffd17 	ldw	r2,-12(fp)
100044f0:	10800717 	ldw	r2,28(r2)
100044f4:	10800098 	cmpnei	r2,r2,2
100044f8:	10002b1e 	bne	r2,zero,100045a8 <update_Star+0xf8>
        // spit star
        star->appear = 1;
100044fc:	e0bffe17 	ldw	r2,-8(fp)
10004500:	00c00044 	movi	r3,1
10004504:	10c00415 	stw	r3,16(r2)
        star->idx = 0;
10004508:	e0bffe17 	ldw	r2,-8(fp)
1000450c:	10000315 	stw	zero,12(r2)
        star->is_left = kirby->is_left;
10004510:	e0bffd17 	ldw	r2,-12(fp)
10004514:	10c00417 	ldw	r3,16(r2)
10004518:	e0bffe17 	ldw	r2,-8(fp)
1000451c:	10c00515 	stw	r3,20(r2)
        if (star->is_left == 0) { // Right
10004520:	e0bffe17 	ldw	r2,-8(fp)
10004524:	10800517 	ldw	r2,20(r2)
10004528:	10000d1e 	bne	r2,zero,10004560 <update_Star+0xb0>
            star->x = kirby_Screen_Center_X(kirby->x) + 31;
1000452c:	e0bffd17 	ldw	r2,-12(fp)
10004530:	10800017 	ldw	r2,0(r2)
10004534:	1009883a 	mov	r4,r2
10004538:	0003cf80 	call	10003cf8 <kirby_Screen_Center_X>
1000453c:	10c007c4 	addi	r3,r2,31
10004540:	e0bffe17 	ldw	r2,-8(fp)
10004544:	10c00015 	stw	r3,0(r2)
            star->map_x = kirby->x + 31;
10004548:	e0bffd17 	ldw	r2,-12(fp)
1000454c:	10800017 	ldw	r2,0(r2)
10004550:	10c007c4 	addi	r3,r2,31
10004554:	e0bffe17 	ldw	r2,-8(fp)
10004558:	10c00215 	stw	r3,8(r2)
1000455c:	00000c06 	br	10004590 <update_Star+0xe0>
        } else { // Left
            star->x = kirby_Screen_Center_X(kirby->x) - 31;
10004560:	e0bffd17 	ldw	r2,-12(fp)
10004564:	10800017 	ldw	r2,0(r2)
10004568:	1009883a 	mov	r4,r2
1000456c:	0003cf80 	call	10003cf8 <kirby_Screen_Center_X>
10004570:	10fff844 	addi	r3,r2,-31
10004574:	e0bffe17 	ldw	r2,-8(fp)
10004578:	10c00015 	stw	r3,0(r2)
            star->map_x = kirby->x - 31;
1000457c:	e0bffd17 	ldw	r2,-12(fp)
10004580:	10800017 	ldw	r2,0(r2)
10004584:	10fff844 	addi	r3,r2,-31
10004588:	e0bffe17 	ldw	r2,-8(fp)
1000458c:	10c00215 	stw	r3,8(r2)
        }
        star->y = kirby->y + 3;
10004590:	e0bffd17 	ldw	r2,-12(fp)
10004594:	10800117 	ldw	r2,4(r2)
10004598:	10c000c4 	addi	r3,r2,3
1000459c:	e0bffe17 	ldw	r2,-8(fp)
100045a0:	10c00115 	stw	r3,4(r2)
        return;
100045a4:	00005a06 	br	10004710 <update_Star+0x260>
    }

    if (star->appear == 1) {
100045a8:	e0bffe17 	ldw	r2,-8(fp)
100045ac:	10800417 	ldw	r2,16(r2)
100045b0:	10800058 	cmpnei	r2,r2,1
100045b4:	1000561e 	bne	r2,zero,10004710 <update_Star+0x260>
        star->idx = (star->idx + 1) % 4; // 4 frames for 1 star-cycle
100045b8:	e0bffe17 	ldw	r2,-8(fp)
100045bc:	10800317 	ldw	r2,12(r2)
100045c0:	10c00044 	addi	r3,r2,1
100045c4:	00a00034 	movhi	r2,32768
100045c8:	108000c4 	addi	r2,r2,3
100045cc:	1884703a 	and	r2,r3,r2
100045d0:	1000040e 	bge	r2,zero,100045e4 <update_Star+0x134>
100045d4:	10bfffc4 	addi	r2,r2,-1
100045d8:	00ffff04 	movi	r3,-4
100045dc:	10c4b03a 	or	r2,r2,r3
100045e0:	10800044 	addi	r2,r2,1
100045e4:	1007883a 	mov	r3,r2
100045e8:	e0bffe17 	ldw	r2,-8(fp)
100045ec:	10c00315 	stw	r3,12(r2)

        // 1 - Edge detection: L/R
        if (star->is_left == 0) {
100045f0:	e0bffe17 	ldw	r2,-8(fp)
100045f4:	10800517 	ldw	r2,20(r2)
100045f8:	10001e1e 	bne	r2,zero,10004674 <update_Star+0x1c4>
            star->x += STAR_STEP_X;
100045fc:	e0bffe17 	ldw	r2,-8(fp)
10004600:	10800017 	ldw	r2,0(r2)
10004604:	10c00104 	addi	r3,r2,4
10004608:	e0bffe17 	ldw	r2,-8(fp)
1000460c:	10c00015 	stw	r3,0(r2)
            star->map_x += STAR_STEP_X;
10004610:	e0bffe17 	ldw	r2,-8(fp)
10004614:	10800217 	ldw	r2,8(r2)
10004618:	10c00104 	addi	r3,r2,4
1000461c:	e0bffe17 	ldw	r2,-8(fp)
10004620:	10c00215 	stw	r3,8(r2)

            // If meet edges of map or screen
            if ((get_Wall_Info(star->map_x + 22, star->y + 7, 0) == 1) || ((star->x + 22) > 260)) {
10004624:	e0bffe17 	ldw	r2,-8(fp)
10004628:	10800217 	ldw	r2,8(r2)
1000462c:	10c00584 	addi	r3,r2,22
10004630:	e0bffe17 	ldw	r2,-8(fp)
10004634:	10800117 	ldw	r2,4(r2)
10004638:	108001c4 	addi	r2,r2,7
1000463c:	000d883a 	mov	r6,zero
10004640:	100b883a 	mov	r5,r2
10004644:	1809883a 	mov	r4,r3
10004648:	0003b880 	call	10003b88 <get_Wall_Info>
1000464c:	10800060 	cmpeqi	r2,r2,1
10004650:	1000051e 	bne	r2,zero,10004668 <update_Star+0x1b8>
10004654:	e0bffe17 	ldw	r2,-8(fp)
10004658:	10800017 	ldw	r2,0(r2)
1000465c:	10800584 	addi	r2,r2,22
10004660:	10804150 	cmplti	r2,r2,261
10004664:	1000201e 	bne	r2,zero,100046e8 <update_Star+0x238>
                star->appear = 0;
10004668:	e0bffe17 	ldw	r2,-8(fp)
1000466c:	10000415 	stw	zero,16(r2)
                return;
10004670:	00002706 	br	10004710 <update_Star+0x260>
            }
        }
        else {
            star->x -= STAR_STEP_X;
10004674:	e0bffe17 	ldw	r2,-8(fp)
10004678:	10800017 	ldw	r2,0(r2)
1000467c:	10ffff04 	addi	r3,r2,-4
10004680:	e0bffe17 	ldw	r2,-8(fp)
10004684:	10c00015 	stw	r3,0(r2)
            star->map_x -= STAR_STEP_X;
10004688:	e0bffe17 	ldw	r2,-8(fp)
1000468c:	10800217 	ldw	r2,8(r2)
10004690:	10ffff04 	addi	r3,r2,-4
10004694:	e0bffe17 	ldw	r2,-8(fp)
10004698:	10c00215 	stw	r3,8(r2)

            // If meet edges of map or screen
            if ((get_Wall_Info(star->map_x + 1, star->y + 7, 0) == 1) || ((star->x + 1) <= 0)) {
1000469c:	e0bffe17 	ldw	r2,-8(fp)
100046a0:	10800217 	ldw	r2,8(r2)
100046a4:	10c00044 	addi	r3,r2,1
100046a8:	e0bffe17 	ldw	r2,-8(fp)
100046ac:	10800117 	ldw	r2,4(r2)
100046b0:	108001c4 	addi	r2,r2,7
100046b4:	000d883a 	mov	r6,zero
100046b8:	100b883a 	mov	r5,r2
100046bc:	1809883a 	mov	r4,r3
100046c0:	0003b880 	call	10003b88 <get_Wall_Info>
100046c4:	10800060 	cmpeqi	r2,r2,1
100046c8:	1000041e 	bne	r2,zero,100046dc <update_Star+0x22c>
100046cc:	e0bffe17 	ldw	r2,-8(fp)
100046d0:	10800017 	ldw	r2,0(r2)
100046d4:	10800044 	addi	r2,r2,1
100046d8:	00800316 	blt	zero,r2,100046e8 <update_Star+0x238>
                star->appear = 0;
100046dc:	e0bffe17 	ldw	r2,-8(fp)
100046e0:	10000415 	stw	zero,16(r2)
                return;
100046e4:	00000a06 	br	10004710 <update_Star+0x260>
            }
        }
        
        // 2 - Enemy detection
        if (star_Meet_Enemy(star, enemy)) {  // TO DO: Need a signal here
100046e8:	e17fff17 	ldw	r5,-4(fp)
100046ec:	e13ffe17 	ldw	r4,-8(fp)
100046f0:	00047240 	call	10004724 <star_Meet_Enemy>
100046f4:	10000526 	beq	r2,zero,1000470c <update_Star+0x25c>
            // TO DO: Enemy get a signal - Damaged
            star->appear = 0;
100046f8:	e0bffe17 	ldw	r2,-8(fp)
100046fc:	10000415 	stw	zero,16(r2)
            enemy->health = 0;
10004700:	e0bfff17 	ldw	r2,-4(fp)
10004704:	10000315 	stw	zero,12(r2)
            return;
10004708:	00000106 	br	10004710 <update_Star+0x260>
        }
        return;
1000470c:	0001883a 	nop
    }
}
10004710:	e037883a 	mov	sp,fp
10004714:	dfc00117 	ldw	ra,4(sp)
10004718:	df000017 	ldw	fp,0(sp)
1000471c:	dec00204 	addi	sp,sp,8
10004720:	f800283a 	ret

10004724 <star_Meet_Enemy>:

int star_Meet_Enemy(Star * star, Enemy * enemy) {
10004724:	defff704 	addi	sp,sp,-36
10004728:	dfc00815 	stw	ra,32(sp)
1000472c:	df000715 	stw	fp,28(sp)
10004730:	dc000615 	stw	r16,24(sp)
10004734:	df000704 	addi	fp,sp,28
10004738:	e13ffd15 	stw	r4,-12(fp)
1000473c:	e17ffe15 	stw	r5,-8(fp)
    int star_Center_X = star->map_x + 12;
10004740:	e0bffd17 	ldw	r2,-12(fp)
10004744:	10800217 	ldw	r2,8(r2)
10004748:	10800304 	addi	r2,r2,12
1000474c:	e0bff915 	stw	r2,-28(fp)
    int star_Center_Y = star->y + 12;
10004750:	e0bffd17 	ldw	r2,-12(fp)
10004754:	10800117 	ldw	r2,4(r2)
10004758:	10800304 	addi	r2,r2,12
1000475c:	e0bffa15 	stw	r2,-24(fp)
    int enemy_Center_X = (get_Enemy_Botton_Pos(enemy) >> 16) & 0x0000ffff;
10004760:	e13ffe17 	ldw	r4,-8(fp)
10004764:	0000d2c0 	call	10000d2c <get_Enemy_Botton_Pos>
10004768:	1004d43a 	srli	r2,r2,16
1000476c:	e0bffb15 	stw	r2,-20(fp)
    int enemy_Center_Y = (get_Enemy_Left_Pos(enemy) & 0x0000ffff);
10004770:	e13ffe17 	ldw	r4,-8(fp)
10004774:	0000f4c0 	call	10000f4c <get_Enemy_Left_Pos>
10004778:	10bfffcc 	andi	r2,r2,65535
1000477c:	e0bffc15 	stw	r2,-16(fp)

    if (((star_Center_X - enemy_Center_X) * (star_Center_X - enemy_Center_X)) + ((star_Center_Y - enemy_Center_Y) * (star_Center_Y - enemy_Center_Y)) <= (STAR_DAMAGE_DIS_SQRT * STAR_DAMAGE_DIS_SQRT))
10004780:	e0fff917 	ldw	r3,-28(fp)
10004784:	e0bffb17 	ldw	r2,-20(fp)
10004788:	1889c83a 	sub	r4,r3,r2
1000478c:	e0fff917 	ldw	r3,-28(fp)
10004790:	e0bffb17 	ldw	r2,-20(fp)
10004794:	1885c83a 	sub	r2,r3,r2
10004798:	100b883a 	mov	r5,r2
1000479c:	00069bc0 	call	100069bc <__mulsi3>
100047a0:	1021883a 	mov	r16,r2
100047a4:	e0fffa17 	ldw	r3,-24(fp)
100047a8:	e0bffc17 	ldw	r2,-16(fp)
100047ac:	1889c83a 	sub	r4,r3,r2
100047b0:	e0fffa17 	ldw	r3,-24(fp)
100047b4:	e0bffc17 	ldw	r2,-16(fp)
100047b8:	1885c83a 	sub	r2,r3,r2
100047bc:	100b883a 	mov	r5,r2
100047c0:	00069bc0 	call	100069bc <__mulsi3>
100047c4:	8085883a 	add	r2,r16,r2
100047c8:	10806e88 	cmpgei	r2,r2,442
100047cc:	1000021e 	bne	r2,zero,100047d8 <star_Meet_Enemy+0xb4>
        return 1;
100047d0:	00800044 	movi	r2,1
100047d4:	00000106 	br	100047dc <star_Meet_Enemy+0xb8>
    return 0;
100047d8:	0005883a 	mov	r2,zero
}
100047dc:	e6ffff04 	addi	sp,fp,-4
100047e0:	dfc00217 	ldw	ra,8(sp)
100047e4:	df000117 	ldw	fp,4(sp)
100047e8:	dc000017 	ldw	r16,0(sp)
100047ec:	dec00304 	addi	sp,sp,12
100047f0:	f800283a 	ret

100047f4 <test_keyboard>:
#include "parameter.h"




void test_keyboard(int keycode) {
100047f4:	defffd04 	addi	sp,sp,-12
100047f8:	dfc00215 	stw	ra,8(sp)
100047fc:	df000115 	stw	fp,4(sp)
10004800:	df000104 	addi	fp,sp,4
10004804:	e13fff15 	stw	r4,-4(fp)

    printf("########Test KeyBoard########");
10004808:	01040074 	movhi	r4,4097
1000480c:	2117e104 	addi	r4,r4,24452
10004810:	0006a140 	call	10006a14 <printf>
    switch (keycode){
10004814:	e0bfff17 	ldw	r2,-4(fp)
10004818:	10c001e0 	cmpeqi	r3,r2,7
1000481c:	1800151e 	bne	r3,zero,10004874 <test_keyboard+0x80>
10004820:	10c00208 	cmpgei	r3,r2,8
10004824:	1800031e 	bne	r3,zero,10004834 <test_keyboard+0x40>
10004828:	10800120 	cmpeqi	r2,r2,4
1000482c:	10000d1e 	bne	r2,zero,10004864 <test_keyboard+0x70>
10004830:	00001406 	br	10004884 <test_keyboard+0x90>
10004834:	10c005a0 	cmpeqi	r3,r2,22
10004838:	1800061e 	bne	r3,zero,10004854 <test_keyboard+0x60>
1000483c:	108006a0 	cmpeqi	r2,r2,26
10004840:	10001026 	beq	r2,zero,10004884 <test_keyboard+0x90>
        case 0x001a:  // h1A, "w"
            REG_0_MAP_INFO = 1 << 16;
10004844:	d09b2617 	ldw	r2,27800(gp)
10004848:	00c00074 	movhi	r3,1
1000484c:	10c00015 	stw	r3,0(r2)
            break;
10004850:	00000f06 	br	10004890 <test_keyboard+0x9c>
        case 0x0016:  // h16, "s"
            REG_0_MAP_INFO = 2 << 16;
10004854:	d09b2617 	ldw	r2,27800(gp)
10004858:	00c000b4 	movhi	r3,2
1000485c:	10c00015 	stw	r3,0(r2)
            break;
10004860:	00000b06 	br	10004890 <test_keyboard+0x9c>
        case 0x0004:   // h04, "a"
            REG_0_MAP_INFO = 1 << 16;
10004864:	d09b2617 	ldw	r2,27800(gp)
10004868:	00c00074 	movhi	r3,1
1000486c:	10c00015 	stw	r3,0(r2)
            break;
10004870:	00000706 	br	10004890 <test_keyboard+0x9c>
        case 0x0007:   // h07, "d"
            REG_0_MAP_INFO = 2 << 16;
10004874:	d09b2617 	ldw	r2,27800(gp)
10004878:	00c000b4 	movhi	r3,2
1000487c:	10c00015 	stw	r3,0(r2)
            break;
10004880:	00000306 	br	10004890 <test_keyboard+0x9c>
        default:
            REG_0_MAP_INFO = 0 << 16;
10004884:	d09b2617 	ldw	r2,27800(gp)
10004888:	10000015 	stw	zero,0(r2)
            break;
1000488c:	0001883a 	nop
    }
    printf("######### End Test ##########");
10004890:	01040074 	movhi	r4,4097
10004894:	2117e904 	addi	r4,r4,24484
10004898:	0006a140 	call	10006a14 <printf>
}
1000489c:	0001883a 	nop
100048a0:	e037883a 	mov	sp,fp
100048a4:	dfc00117 	ldw	ra,4(sp)
100048a8:	df000017 	ldw	fp,0(sp)
100048ac:	dec00204 	addi	sp,sp,8
100048b0:	f800283a 	ret

100048b4 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
100048b4:	defffc04 	addi	sp,sp,-16
100048b8:	dfc00315 	stw	ra,12(sp)
100048bc:	df000215 	stw	fp,8(sp)
100048c0:	df000204 	addi	fp,sp,8
100048c4:	2007883a 	mov	r3,r4
100048c8:	2805883a 	mov	r2,r5
100048cc:	e0fffe0d 	sth	r3,-8(fp)
100048d0:	e0bfff0d 	sth	r2,-4(fp)
	//write address of registers to HDI
	IO_write(HPI_ADDR, Address);
100048d4:	e0bffe0b 	ldhu	r2,-8(fp)
100048d8:	100b883a 	mov	r5,r2
100048dc:	01000084 	movi	r4,2
100048e0:	00015ec0 	call	100015ec <IO_write>

	//write data to address in HDI
	IO_write(HPI_DATA, Data);
100048e4:	e0bfff0b 	ldhu	r2,-4(fp)
100048e8:	100b883a 	mov	r5,r2
100048ec:	0009883a 	mov	r4,zero
100048f0:	00015ec0 	call	100015ec <IO_write>
}
100048f4:	0001883a 	nop
100048f8:	e037883a 	mov	sp,fp
100048fc:	dfc00117 	ldw	ra,4(sp)
10004900:	df000017 	ldw	fp,0(sp)
10004904:	dec00204 	addi	sp,sp,8
10004908:	f800283a 	ret

1000490c <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
1000490c:	defffd04 	addi	sp,sp,-12
10004910:	dfc00215 	stw	ra,8(sp)
10004914:	df000115 	stw	fp,4(sp)
10004918:	df000104 	addi	fp,sp,4
1000491c:	2005883a 	mov	r2,r4
10004920:	e0bfff0d 	sth	r2,-4(fp)
	//write address of registers to HDI
	IO_write(HPI_ADDR, Address);
10004924:	e0bfff0b 	ldhu	r2,-4(fp)
10004928:	100b883a 	mov	r5,r2
1000492c:	01000084 	movi	r4,2
10004930:	00015ec0 	call	100015ec <IO_write>

	//read the data stored in HPI address and return the value
	return IO_read(HPI_DATA);
10004934:	0009883a 	mov	r4,zero
10004938:	00016680 	call	10001668 <IO_read>
}
1000493c:	e037883a 	mov	sp,fp
10004940:	dfc00117 	ldw	ra,4(sp)
10004944:	df000017 	ldw	fp,0(sp)
10004948:	dec00204 	addi	sp,sp,8
1000494c:	f800283a 	ret

10004950 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10004950:	defffe04 	addi	sp,sp,-8
10004954:	dfc00115 	stw	ra,4(sp)
10004958:	df000015 	stw	fp,0(sp)
1000495c:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
10004960:	017e9414 	movui	r5,64080
10004964:	01000044 	movi	r4,1
10004968:	00015ec0 	call	100015ec <IO_write>
	usleep(100000);
1000496c:	010000b4 	movhi	r4,2
10004970:	2121a804 	addi	r4,r4,-31072
10004974:	0013fa00 	call	10013fa0 <usleep>
	printf("[USB INIT]:reset finished!\n");
10004978:	01040074 	movhi	r4,4097
1000497c:	2117f104 	addi	r4,r4,24516
10004980:	0006b100 	call	10006b10 <puts>

	usleep(500000);
10004984:	01000234 	movhi	r4,8
10004988:	21284804 	addi	r4,r4,-24288
1000498c:	0013fa00 	call	10013fa0 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
10004990:	01040074 	movhi	r4,4097
10004994:	2117f804 	addi	r4,r4,24544
10004998:	0006b100 	call	10006b10 <puts>
	IO_read(HPI_MAILBOX);
1000499c:	01000044 	movi	r4,1
100049a0:	00016680 	call	10001668 <IO_read>
	IO_read(HPI_STATUS);
100049a4:	010000c4 	movi	r4,3
100049a8:	00016680 	call	10001668 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
100049ac:	01005104 	movi	r4,324
100049b0:	000490c0 	call	1000490c <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
100049b4:	000b883a 	mov	r5,zero
100049b8:	01005104 	movi	r4,324
100049bc:	00048b40 	call	100048b4 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
100049c0:	01005204 	movi	r4,328
100049c4:	000490c0 	call	1000490c <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
100049c8:	000b883a 	mov	r5,zero
100049cc:	01005204 	movi	r4,328
100049d0:	00048b40 	call	100048b4 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
100049d4:	017fffd4 	movui	r5,65535
100049d8:	01302414 	movui	r4,49296
100049dc:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
100049e0:	017fffd4 	movui	r5,65535
100049e4:	01302c14 	movui	r4,49328
100049e8:	00048b40 	call	100048b4 <UsbWrite>
}
100049ec:	0001883a 	nop
100049f0:	e037883a 	mov	sp,fp
100049f4:	dfc00117 	ldw	ra,4(sp)
100049f8:	df000017 	ldw	fp,0(sp)
100049fc:	dec00204 	addi	sp,sp,8
10004a00:	f800283a 	ret

10004a04 <UsbSetAddress>:


void UsbSetAddress()
{
10004a04:	defffe04 	addi	sp,sp,-8
10004a08:	dfc00115 	stw	ra,4(sp)
10004a0c:	df000015 	stw	fp,0(sp)
10004a10:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10004a14:	01414004 	movi	r5,1280
10004a18:	01000084 	movi	r4,2
10004a1c:	00015ec0 	call	100015ec <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
10004a20:	01414304 	movi	r5,1292
10004a24:	0009883a 	mov	r4,zero
10004a28:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10004a2c:	01400204 	movi	r5,8
10004a30:	0009883a 	mov	r4,zero
10004a34:	00015ec0 	call	100015ec <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
10004a38:	01403404 	movi	r5,208
10004a3c:	0009883a 	mov	r4,zero
10004a40:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0001);
10004a44:	01400044 	movi	r5,1
10004a48:	0009883a 	mov	r4,zero
10004a4c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);
10004a50:	014004c4 	movi	r5,19
10004a54:	0009883a 	mov	r4,zero
10004a58:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0514);
10004a5c:	01414504 	movi	r5,1300
10004a60:	0009883a 	mov	r4,zero
10004a64:	00015ec0 	call	100015ec <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
10004a68:	01414004 	movi	r5,1280
10004a6c:	0009883a 	mov	r4,zero
10004a70:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0002);
10004a74:	01400084 	movi	r5,2
10004a78:	0009883a 	mov	r4,zero
10004a7c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);
10004a80:	000b883a 	mov	r5,zero
10004a84:	0009883a 	mov	r4,zero
10004a88:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);
10004a8c:	000b883a 	mov	r5,zero
10004a90:	0009883a 	mov	r4,zero
10004a94:	00015ec0 	call	100015ec <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10004a98:	000b883a 	mov	r5,zero
10004a9c:	0009883a 	mov	r4,zero
10004aa0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);//
10004aa4:	000b883a 	mov	r5,zero
10004aa8:	0009883a 	mov	r4,zero
10004aac:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0090);//
10004ab0:	01402404 	movi	r5,144
10004ab4:	0009883a 	mov	r4,zero
10004ab8:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0041);
10004abc:	01401044 	movi	r5,65
10004ac0:	0009883a 	mov	r4,zero
10004ac4:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);
10004ac8:	014004c4 	movi	r5,19
10004acc:	0009883a 	mov	r4,zero
10004ad0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);
10004ad4:	000b883a 	mov	r5,zero
10004ad8:	0009883a 	mov	r4,zero
10004adc:	00015ec0 	call	100015ec <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10004ae0:	01414004 	movi	r5,1280
10004ae4:	01006c04 	movi	r4,432
10004ae8:	00048b40 	call	100048b4 <UsbWrite>
}
10004aec:	0001883a 	nop
10004af0:	e037883a 	mov	sp,fp
10004af4:	dfc00117 	ldw	ra,4(sp)
10004af8:	df000017 	ldw	fp,0(sp)
10004afc:	dec00204 	addi	sp,sp,8
10004b00:	f800283a 	ret

10004b04 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
10004b04:	defffe04 	addi	sp,sp,-8
10004b08:	dfc00115 	stw	ra,4(sp)
10004b0c:	df000015 	stw	fp,0(sp)
10004b10:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10004b14:	01414004 	movi	r5,1280
10004b18:	01000084 	movi	r4,2
10004b1c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x050C);
10004b20:	01414304 	movi	r5,1292
10004b24:	0009883a 	mov	r4,zero
10004b28:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10004b2c:	01400204 	movi	r5,8
10004b30:	0009883a 	mov	r4,zero
10004b34:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10004b38:	0140b404 	movi	r5,720
10004b3c:	0009883a 	mov	r4,zero
10004b40:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0001);
10004b44:	01400044 	movi	r5,1
10004b48:	0009883a 	mov	r4,zero
10004b4c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);
10004b50:	014004c4 	movi	r5,19
10004b54:	0009883a 	mov	r4,zero
10004b58:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0514);
10004b5c:	01414504 	movi	r5,1300
10004b60:	0009883a 	mov	r4,zero
10004b64:	00015ec0 	call	100015ec <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10004b68:	0141a004 	movi	r5,1664
10004b6c:	0009883a 	mov	r4,zero
10004b70:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
10004b74:	01404004 	movi	r5,256
10004b78:	0009883a 	mov	r4,zero
10004b7c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);
10004b80:	000b883a 	mov	r5,zero
10004b84:	0009883a 	mov	r4,zero
10004b88:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0008);
10004b8c:	01400204 	movi	r5,8
10004b90:	0009883a 	mov	r4,zero
10004b94:	00015ec0 	call	100015ec <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
10004b98:	01414b04 	movi	r5,1324
10004b9c:	0009883a 	mov	r4,zero
10004ba0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0008);//
10004ba4:	01400204 	movi	r5,8
10004ba8:	0009883a 	mov	r4,zero
10004bac:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0290);//
10004bb0:	0140a404 	movi	r5,656
10004bb4:	0009883a 	mov	r4,zero
10004bb8:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0041);
10004bbc:	01401044 	movi	r5,65
10004bc0:	0009883a 	mov	r4,zero
10004bc4:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);
10004bc8:	014004c4 	movi	r5,19
10004bcc:	0009883a 	mov	r4,zero
10004bd0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0520);
10004bd4:	01414804 	movi	r5,1312
10004bd8:	0009883a 	mov	r4,zero
10004bdc:	00015ec0 	call	100015ec <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
10004be0:	000b883a 	mov	r5,zero
10004be4:	0009883a 	mov	r4,zero
10004be8:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10004bec:	000b883a 	mov	r5,zero
10004bf0:	0009883a 	mov	r4,zero
10004bf4:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
10004bf8:	01408404 	movi	r5,528
10004bfc:	0009883a 	mov	r4,zero
10004c00:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0041);
10004c04:	01401044 	movi	r5,65
10004c08:	0009883a 	mov	r4,zero
10004c0c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);
10004c10:	014004c4 	movi	r5,19
10004c14:	0009883a 	mov	r4,zero
10004c18:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);
10004c1c:	000b883a 	mov	r5,zero
10004c20:	0009883a 	mov	r4,zero
10004c24:	00015ec0 	call	100015ec <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10004c28:	01414004 	movi	r5,1280
10004c2c:	01006c04 	movi	r4,432
10004c30:	00048b40 	call	100048b4 <UsbWrite>
}
10004c34:	0001883a 	nop
10004c38:	e037883a 	mov	sp,fp
10004c3c:	dfc00117 	ldw	ra,4(sp)
10004c40:	df000017 	ldw	fp,0(sp)
10004c44:	dec00204 	addi	sp,sp,8
10004c48:	f800283a 	ret

10004c4c <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
10004c4c:	defffe04 	addi	sp,sp,-8
10004c50:	dfc00115 	stw	ra,4(sp)
10004c54:	df000015 	stw	fp,0(sp)
10004c58:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10004c5c:	01414004 	movi	r5,1280
10004c60:	01000084 	movi	r4,2
10004c64:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x050C);
10004c68:	01414304 	movi	r5,1292
10004c6c:	0009883a 	mov	r4,zero
10004c70:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10004c74:	01400204 	movi	r5,8
10004c78:	0009883a 	mov	r4,zero
10004c7c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10004c80:	0140b404 	movi	r5,720
10004c84:	0009883a 	mov	r4,zero
10004c88:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0001);
10004c8c:	01400044 	movi	r5,1
10004c90:	0009883a 	mov	r4,zero
10004c94:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);
10004c98:	014004c4 	movi	r5,19
10004c9c:	0009883a 	mov	r4,zero
10004ca0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0514);
10004ca4:	01414504 	movi	r5,1300
10004ca8:	0009883a 	mov	r4,zero
10004cac:	00015ec0 	call	100015ec <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10004cb0:	0141a004 	movi	r5,1664
10004cb4:	0009883a 	mov	r4,zero
10004cb8:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
10004cbc:	01404004 	movi	r5,256
10004cc0:	0009883a 	mov	r4,zero
10004cc4:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10004cc8:	000b883a 	mov	r5,zero
10004ccc:	0009883a 	mov	r4,zero
10004cd0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0012);//2
10004cd4:	01400484 	movi	r5,18
10004cd8:	0009883a 	mov	r4,zero
10004cdc:	00015ec0 	call	100015ec <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10004ce0:	01415104 	movi	r5,1348
10004ce4:	0009883a 	mov	r4,zero
10004ce8:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10004cec:	01400204 	movi	r5,8
10004cf0:	0009883a 	mov	r4,zero
10004cf4:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10004cf8:	0140a404 	movi	r5,656
10004cfc:	0009883a 	mov	r4,zero
10004d00:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10004d04:	01401044 	movi	r5,65
10004d08:	0009883a 	mov	r4,zero
10004d0c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10004d10:	014004c4 	movi	r5,19
10004d14:	0009883a 	mov	r4,zero
10004d18:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10004d1c:	01414804 	movi	r5,1312
10004d20:	0009883a 	mov	r4,zero
10004d24:	00015ec0 	call	100015ec <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10004d28:	01415304 	movi	r5,1356
10004d2c:	0009883a 	mov	r4,zero
10004d30:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10004d34:	01400204 	movi	r5,8
10004d38:	0009883a 	mov	r4,zero
10004d3c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10004d40:	0140a404 	movi	r5,656
10004d44:	0009883a 	mov	r4,zero
10004d48:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0001);//6
10004d4c:	01400044 	movi	r5,1
10004d50:	0009883a 	mov	r4,zero
10004d54:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10004d58:	014004c4 	movi	r5,19
10004d5c:	0009883a 	mov	r4,zero
10004d60:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10004d64:	01414b04 	movi	r5,1324
10004d68:	0009883a 	mov	r4,zero
10004d6c:	00015ec0 	call	100015ec <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
10004d70:	01415504 	movi	r5,1364
10004d74:	0009883a 	mov	r4,zero
10004d78:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0002);//e
10004d7c:	01400084 	movi	r5,2
10004d80:	0009883a 	mov	r4,zero
10004d84:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10004d88:	0140a404 	movi	r5,656
10004d8c:	0009883a 	mov	r4,zero
10004d90:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10004d94:	01401044 	movi	r5,65
10004d98:	0009883a 	mov	r4,zero
10004d9c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10004da0:	014004c4 	movi	r5,19
10004da4:	0009883a 	mov	r4,zero
10004da8:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10004dac:	01414e04 	movi	r5,1336
10004db0:	0009883a 	mov	r4,zero
10004db4:	00015ec0 	call	100015ec <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10004db8:	000b883a 	mov	r5,zero
10004dbc:	0009883a 	mov	r4,zero
10004dc0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10004dc4:	000b883a 	mov	r5,zero
10004dc8:	0009883a 	mov	r4,zero
10004dcc:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10004dd0:	01408404 	movi	r5,528
10004dd4:	0009883a 	mov	r4,zero
10004dd8:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0041);//e
10004ddc:	01401044 	movi	r5,65
10004de0:	0009883a 	mov	r4,zero
10004de4:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10004de8:	014004c4 	movi	r5,19
10004dec:	0009883a 	mov	r4,zero
10004df0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10004df4:	000b883a 	mov	r5,zero
10004df8:	0009883a 	mov	r4,zero
10004dfc:	00015ec0 	call	100015ec <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10004e00:	01414004 	movi	r5,1280
10004e04:	01006c04 	movi	r4,432
10004e08:	00048b40 	call	100048b4 <UsbWrite>
}
10004e0c:	0001883a 	nop
10004e10:	e037883a 	mov	sp,fp
10004e14:	dfc00117 	ldw	ra,4(sp)
10004e18:	df000017 	ldw	fp,0(sp)
10004e1c:	dec00204 	addi	sp,sp,8
10004e20:	f800283a 	ret

10004e24 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
10004e24:	defffe04 	addi	sp,sp,-8
10004e28:	dfc00115 	stw	ra,4(sp)
10004e2c:	df000015 	stw	fp,0(sp)
10004e30:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10004e34:	01414004 	movi	r5,1280
10004e38:	01000084 	movi	r4,2
10004e3c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x050C);
10004e40:	01414304 	movi	r5,1292
10004e44:	0009883a 	mov	r4,zero
10004e48:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10004e4c:	01400204 	movi	r5,8
10004e50:	0009883a 	mov	r4,zero
10004e54:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10004e58:	0140b404 	movi	r5,720
10004e5c:	0009883a 	mov	r4,zero
10004e60:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0001);
10004e64:	01400044 	movi	r5,1
10004e68:	0009883a 	mov	r4,zero
10004e6c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);
10004e70:	014004c4 	movi	r5,19
10004e74:	0009883a 	mov	r4,zero
10004e78:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0514);
10004e7c:	01414504 	movi	r5,1300
10004e80:	0009883a 	mov	r4,zero
10004e84:	00015ec0 	call	100015ec <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10004e88:	0141a004 	movi	r5,1664
10004e8c:	0009883a 	mov	r4,zero
10004e90:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10004e94:	01408004 	movi	r5,512
10004e98:	0009883a 	mov	r4,zero
10004e9c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10004ea0:	000b883a 	mov	r5,zero
10004ea4:	0009883a 	mov	r4,zero
10004ea8:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10004eac:	01400244 	movi	r5,9
10004eb0:	0009883a 	mov	r4,zero
10004eb4:	00015ec0 	call	100015ec <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10004eb8:	01415104 	movi	r5,1348
10004ebc:	0009883a 	mov	r4,zero
10004ec0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10004ec4:	01400204 	movi	r5,8
10004ec8:	0009883a 	mov	r4,zero
10004ecc:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10004ed0:	0140a404 	movi	r5,656
10004ed4:	0009883a 	mov	r4,zero
10004ed8:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10004edc:	01401044 	movi	r5,65
10004ee0:	0009883a 	mov	r4,zero
10004ee4:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10004ee8:	014004c4 	movi	r5,19
10004eec:	0009883a 	mov	r4,zero
10004ef0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10004ef4:	01414804 	movi	r5,1312
10004ef8:	0009883a 	mov	r4,zero
10004efc:	00015ec0 	call	100015ec <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10004f00:	01415304 	movi	r5,1356
10004f04:	0009883a 	mov	r4,zero
10004f08:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0001);//2
10004f0c:	01400044 	movi	r5,1
10004f10:	0009883a 	mov	r4,zero
10004f14:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10004f18:	0140a404 	movi	r5,656
10004f1c:	0009883a 	mov	r4,zero
10004f20:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10004f24:	01400044 	movi	r5,1
10004f28:	0009883a 	mov	r4,zero
10004f2c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10004f30:	014004c4 	movi	r5,19
10004f34:	0009883a 	mov	r4,zero
10004f38:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10004f3c:	01414b04 	movi	r5,1324
10004f40:	0009883a 	mov	r4,zero
10004f44:	00015ec0 	call	100015ec <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10004f48:	000b883a 	mov	r5,zero
10004f4c:	0009883a 	mov	r4,zero
10004f50:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10004f54:	000b883a 	mov	r5,zero
10004f58:	0009883a 	mov	r4,zero
10004f5c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10004f60:	01408404 	movi	r5,528
10004f64:	0009883a 	mov	r4,zero
10004f68:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10004f6c:	01401044 	movi	r5,65
10004f70:	0009883a 	mov	r4,zero
10004f74:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10004f78:	014004c4 	movi	r5,19
10004f7c:	0009883a 	mov	r4,zero
10004f80:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10004f84:	000b883a 	mov	r5,zero
10004f88:	0009883a 	mov	r4,zero
10004f8c:	00015ec0 	call	100015ec <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10004f90:	01414004 	movi	r5,1280
10004f94:	01006c04 	movi	r4,432
10004f98:	00048b40 	call	100048b4 <UsbWrite>
}
10004f9c:	0001883a 	nop
10004fa0:	e037883a 	mov	sp,fp
10004fa4:	dfc00117 	ldw	ra,4(sp)
10004fa8:	df000017 	ldw	fp,0(sp)
10004fac:	dec00204 	addi	sp,sp,8
10004fb0:	f800283a 	ret

10004fb4 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
10004fb4:	defffe04 	addi	sp,sp,-8
10004fb8:	dfc00115 	stw	ra,4(sp)
10004fbc:	df000015 	stw	fp,0(sp)
10004fc0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10004fc4:	01414004 	movi	r5,1280
10004fc8:	01000084 	movi	r4,2
10004fcc:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x050C);
10004fd0:	01414304 	movi	r5,1292
10004fd4:	0009883a 	mov	r4,zero
10004fd8:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10004fdc:	01400204 	movi	r5,8
10004fe0:	0009883a 	mov	r4,zero
10004fe4:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10004fe8:	0140b404 	movi	r5,720
10004fec:	0009883a 	mov	r4,zero
10004ff0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0001);
10004ff4:	01400044 	movi	r5,1
10004ff8:	0009883a 	mov	r4,zero
10004ffc:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);
10005000:	014004c4 	movi	r5,19
10005004:	0009883a 	mov	r4,zero
10005008:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0514);
1000500c:	01414504 	movi	r5,1300
10005010:	0009883a 	mov	r4,zero
10005014:	00015ec0 	call	100015ec <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10005018:	0141a004 	movi	r5,1664
1000501c:	0009883a 	mov	r4,zero
10005020:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10005024:	01408004 	movi	r5,512
10005028:	0009883a 	mov	r4,zero
1000502c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10005030:	000b883a 	mov	r5,zero
10005034:	0009883a 	mov	r4,zero
10005038:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
1000503c:	01403fc4 	movi	r5,255
10005040:	0009883a 	mov	r4,zero
10005044:	00015ec0 	call	100015ec <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
10005048:	01415704 	movi	r5,1372
1000504c:	0009883a 	mov	r4,zero
10005050:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10005054:	01400204 	movi	r5,8
10005058:	0009883a 	mov	r4,zero
1000505c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10005060:	0140a404 	movi	r5,656
10005064:	0009883a 	mov	r4,zero
10005068:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000506c:	01401044 	movi	r5,65
10005070:	0009883a 	mov	r4,zero
10005074:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10005078:	014004c4 	movi	r5,19
1000507c:	0009883a 	mov	r4,zero
10005080:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10005084:	01414804 	movi	r5,1312
10005088:	0009883a 	mov	r4,zero
1000508c:	00015ec0 	call	100015ec <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
10005090:	01415904 	movi	r5,1380
10005094:	0009883a 	mov	r4,zero
10005098:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0008);//2
1000509c:	01400204 	movi	r5,8
100050a0:	0009883a 	mov	r4,zero
100050a4:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100050a8:	0140a404 	movi	r5,656
100050ac:	0009883a 	mov	r4,zero
100050b0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100050b4:	01400044 	movi	r5,1
100050b8:	0009883a 	mov	r4,zero
100050bc:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100050c0:	014004c4 	movi	r5,19
100050c4:	0009883a 	mov	r4,zero
100050c8:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100050cc:	01414b04 	movi	r5,1324
100050d0:	0009883a 	mov	r4,zero
100050d4:	00015ec0 	call	100015ec <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
100050d8:	01415b04 	movi	r5,1388
100050dc:	0009883a 	mov	r4,zero
100050e0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0008);//e
100050e4:	01400204 	movi	r5,8
100050e8:	0009883a 	mov	r4,zero
100050ec:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100050f0:	0140a404 	movi	r5,656
100050f4:	0009883a 	mov	r4,zero
100050f8:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100050fc:	01401044 	movi	r5,65
10005100:	0009883a 	mov	r4,zero
10005104:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10005108:	014004c4 	movi	r5,19
1000510c:	0009883a 	mov	r4,zero
10005110:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10005114:	01414e04 	movi	r5,1336
10005118:	0009883a 	mov	r4,zero
1000511c:	00015ec0 	call	100015ec <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
10005120:	01415d04 	movi	r5,1396
10005124:	0009883a 	mov	r4,zero
10005128:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0008);//a
1000512c:	01400204 	movi	r5,8
10005130:	0009883a 	mov	r4,zero
10005134:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10005138:	0140a404 	movi	r5,656
1000513c:	0009883a 	mov	r4,zero
10005140:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10005144:	01400044 	movi	r5,1
10005148:	0009883a 	mov	r4,zero
1000514c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10005150:	014004c4 	movi	r5,19
10005154:	0009883a 	mov	r4,zero
10005158:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0544);//2
1000515c:	01415104 	movi	r5,1348
10005160:	0009883a 	mov	r4,zero
10005164:	00015ec0 	call	100015ec <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10005168:	01415f04 	movi	r5,1404
1000516c:	0009883a 	mov	r4,zero
10005170:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0002);//6
10005174:	01400084 	movi	r5,2
10005178:	0009883a 	mov	r4,zero
1000517c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10005180:	0140a404 	movi	r5,656
10005184:	0009883a 	mov	r4,zero
10005188:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
1000518c:	01401044 	movi	r5,65
10005190:	0009883a 	mov	r4,zero
10005194:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10005198:	014004c4 	movi	r5,19
1000519c:	0009883a 	mov	r4,zero
100051a0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0550);//e
100051a4:	01415404 	movi	r5,1360
100051a8:	0009883a 	mov	r4,zero
100051ac:	00015ec0 	call	100015ec <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
100051b0:	000b883a 	mov	r5,zero
100051b4:	0009883a 	mov	r4,zero
100051b8:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);//2
100051bc:	000b883a 	mov	r5,zero
100051c0:	0009883a 	mov	r4,zero
100051c4:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0210);//4
100051c8:	01408404 	movi	r5,528
100051cc:	0009883a 	mov	r4,zero
100051d0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0041);//6
100051d4:	01401044 	movi	r5,65
100051d8:	0009883a 	mov	r4,zero
100051dc:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100051e0:	014004c4 	movi	r5,19
100051e4:	0009883a 	mov	r4,zero
100051e8:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);//a
100051ec:	000b883a 	mov	r5,zero
100051f0:	0009883a 	mov	r4,zero
100051f4:	00015ec0 	call	100015ec <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100051f8:	01414004 	movi	r5,1280
100051fc:	01006c04 	movi	r4,432
10005200:	00048b40 	call	100048b4 <UsbWrite>
}
10005204:	0001883a 	nop
10005208:	e037883a 	mov	sp,fp
1000520c:	dfc00117 	ldw	ra,4(sp)
10005210:	df000017 	ldw	fp,0(sp)
10005214:	dec00204 	addi	sp,sp,8
10005218:	f800283a 	ret

1000521c <UsbSetConfig>:

void UsbSetConfig()
{
1000521c:	defffe04 	addi	sp,sp,-8
10005220:	dfc00115 	stw	ra,4(sp)
10005224:	df000015 	stw	fp,0(sp)
10005228:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000522c:	01414004 	movi	r5,1280
10005230:	01000084 	movi	r4,2
10005234:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x050C);
10005238:	01414304 	movi	r5,1292
1000523c:	0009883a 	mov	r4,zero
10005240:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10005244:	01400204 	movi	r5,8
10005248:	0009883a 	mov	r4,zero
1000524c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10005250:	0140b404 	movi	r5,720
10005254:	0009883a 	mov	r4,zero
10005258:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0001);
1000525c:	01400044 	movi	r5,1
10005260:	0009883a 	mov	r4,zero
10005264:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);
10005268:	014004c4 	movi	r5,19
1000526c:	0009883a 	mov	r4,zero
10005270:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0514);
10005274:	01414504 	movi	r5,1300
10005278:	0009883a 	mov	r4,zero
1000527c:	00015ec0 	call	100015ec <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10005280:	01424004 	movi	r5,2304
10005284:	0009883a 	mov	r4,zero
10005288:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
1000528c:	01400044 	movi	r5,1
10005290:	0009883a 	mov	r4,zero
10005294:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);
10005298:	000b883a 	mov	r5,zero
1000529c:	0009883a 	mov	r4,zero
100052a0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);
100052a4:	000b883a 	mov	r5,zero
100052a8:	0009883a 	mov	r4,zero
100052ac:	00015ec0 	call	100015ec <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
100052b0:	000b883a 	mov	r5,zero
100052b4:	0009883a 	mov	r4,zero
100052b8:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
100052bc:	000b883a 	mov	r5,zero
100052c0:	0009883a 	mov	r4,zero
100052c4:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
100052c8:	0140a404 	movi	r5,656
100052cc:	0009883a 	mov	r4,zero
100052d0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
100052d4:	01401044 	movi	r5,65
100052d8:	0009883a 	mov	r4,zero
100052dc:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);
100052e0:	014004c4 	movi	r5,19
100052e4:	0009883a 	mov	r4,zero
100052e8:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);
100052ec:	000b883a 	mov	r5,zero
100052f0:	0009883a 	mov	r4,zero
100052f4:	00015ec0 	call	100015ec <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100052f8:	01414004 	movi	r5,1280
100052fc:	01006c04 	movi	r4,432
10005300:	00048b40 	call	100048b4 <UsbWrite>

}
10005304:	0001883a 	nop
10005308:	e037883a 	mov	sp,fp
1000530c:	dfc00117 	ldw	ra,4(sp)
10005310:	df000017 	ldw	fp,0(sp)
10005314:	dec00204 	addi	sp,sp,8
10005318:	f800283a 	ret

1000531c <UsbClassRequest>:

void UsbClassRequest()
{
1000531c:	defffe04 	addi	sp,sp,-8
10005320:	dfc00115 	stw	ra,4(sp)
10005324:	df000015 	stw	fp,0(sp)
10005328:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000532c:	01414004 	movi	r5,1280
10005330:	01000084 	movi	r4,2
10005334:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x050C);
10005338:	01414304 	movi	r5,1292
1000533c:	0009883a 	mov	r4,zero
10005340:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10005344:	01400204 	movi	r5,8
10005348:	0009883a 	mov	r4,zero
1000534c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10005350:	0140b404 	movi	r5,720
10005354:	0009883a 	mov	r4,zero
10005358:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0001);
1000535c:	01400044 	movi	r5,1
10005360:	0009883a 	mov	r4,zero
10005364:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);
10005368:	014004c4 	movi	r5,19
1000536c:	0009883a 	mov	r4,zero
10005370:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0514);
10005374:	01414504 	movi	r5,1300
10005378:	0009883a 	mov	r4,zero
1000537c:	00015ec0 	call	100015ec <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10005380:	01428844 	movi	r5,2593
10005384:	0009883a 	mov	r4,zero
10005388:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
1000538c:	000b883a 	mov	r5,zero
10005390:	0009883a 	mov	r4,zero
10005394:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);
10005398:	000b883a 	mov	r5,zero
1000539c:	0009883a 	mov	r4,zero
100053a0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);
100053a4:	000b883a 	mov	r5,zero
100053a8:	0009883a 	mov	r4,zero
100053ac:	00015ec0 	call	100015ec <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
100053b0:	000b883a 	mov	r5,zero
100053b4:	0009883a 	mov	r4,zero
100053b8:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
100053bc:	000b883a 	mov	r5,zero
100053c0:	0009883a 	mov	r4,zero
100053c4:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
100053c8:	0140a404 	movi	r5,656
100053cc:	0009883a 	mov	r4,zero
100053d0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
100053d4:	01401044 	movi	r5,65
100053d8:	0009883a 	mov	r4,zero
100053dc:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);
100053e0:	014004c4 	movi	r5,19
100053e4:	0009883a 	mov	r4,zero
100053e8:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);
100053ec:	000b883a 	mov	r5,zero
100053f0:	0009883a 	mov	r4,zero
100053f4:	00015ec0 	call	100015ec <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100053f8:	01414004 	movi	r5,1280
100053fc:	01006c04 	movi	r4,432
10005400:	00048b40 	call	100048b4 <UsbWrite>
}
10005404:	0001883a 	nop
10005408:	e037883a 	mov	sp,fp
1000540c:	dfc00117 	ldw	ra,4(sp)
10005410:	df000017 	ldw	fp,0(sp)
10005414:	dec00204 	addi	sp,sp,8
10005418:	f800283a 	ret

1000541c <UsbGetHidDesc>:


void UsbGetHidDesc()
{
1000541c:	defffe04 	addi	sp,sp,-8
10005420:	dfc00115 	stw	ra,4(sp)
10005424:	df000015 	stw	fp,0(sp)
10005428:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000542c:	01414004 	movi	r5,1280
10005430:	01000084 	movi	r4,2
10005434:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x050C);
10005438:	01414304 	movi	r5,1292
1000543c:	0009883a 	mov	r4,zero
10005440:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10005444:	01400204 	movi	r5,8
10005448:	0009883a 	mov	r4,zero
1000544c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10005450:	0140b404 	movi	r5,720
10005454:	0009883a 	mov	r4,zero
10005458:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0001);
1000545c:	01400044 	movi	r5,1
10005460:	0009883a 	mov	r4,zero
10005464:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);
10005468:	014004c4 	movi	r5,19
1000546c:	0009883a 	mov	r4,zero
10005470:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0514);
10005474:	01414504 	movi	r5,1300
10005478:	0009883a 	mov	r4,zero
1000547c:	00015ec0 	call	100015ec <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10005480:	0141a044 	movi	r5,1665
10005484:	0009883a 	mov	r4,zero
10005488:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
1000548c:	01484004 	movi	r5,8448
10005490:	0009883a 	mov	r4,zero
10005494:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10005498:	000b883a 	mov	r5,zero
1000549c:	0009883a 	mov	r4,zero
100054a0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x007B);//2
100054a4:	01401ec4 	movi	r5,123
100054a8:	0009883a 	mov	r4,zero
100054ac:	00015ec0 	call	100015ec <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
100054b0:	01415104 	movi	r5,1348
100054b4:	0009883a 	mov	r4,zero
100054b8:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100054bc:	01400204 	movi	r5,8
100054c0:	0009883a 	mov	r4,zero
100054c4:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100054c8:	0140a404 	movi	r5,656
100054cc:	0009883a 	mov	r4,zero
100054d0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100054d4:	01401044 	movi	r5,65
100054d8:	0009883a 	mov	r4,zero
100054dc:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100054e0:	014004c4 	movi	r5,19
100054e4:	0009883a 	mov	r4,zero
100054e8:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100054ec:	01414804 	movi	r5,1312
100054f0:	0009883a 	mov	r4,zero
100054f4:	00015ec0 	call	100015ec <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
100054f8:	000b883a 	mov	r5,zero
100054fc:	0009883a 	mov	r4,zero
10005500:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10005504:	000b883a 	mov	r5,zero
10005508:	0009883a 	mov	r4,zero
1000550c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10005510:	01408404 	movi	r5,528
10005514:	0009883a 	mov	r4,zero
10005518:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0041);//2
1000551c:	01401044 	movi	r5,65
10005520:	0009883a 	mov	r4,zero
10005524:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10005528:	014004c4 	movi	r5,19
1000552c:	0009883a 	mov	r4,zero
10005530:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10005534:	000b883a 	mov	r5,zero
10005538:	0009883a 	mov	r4,zero
1000553c:	00015ec0 	call	100015ec <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10005540:	01414004 	movi	r5,1280
10005544:	01006c04 	movi	r4,432
10005548:	00048b40 	call	100048b4 <UsbWrite>

}
1000554c:	0001883a 	nop
10005550:	e037883a 	mov	sp,fp
10005554:	dfc00117 	ldw	ra,4(sp)
10005558:	df000017 	ldw	fp,0(sp)
1000555c:	dec00204 	addi	sp,sp,8
10005560:	f800283a 	ret

10005564 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10005564:	defffe04 	addi	sp,sp,-8
10005568:	dfc00115 	stw	ra,4(sp)
1000556c:	df000015 	stw	fp,0(sp)
10005570:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10005574:	01414004 	movi	r5,1280
10005578:	01000084 	movi	r4,2
1000557c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x050C);
10005580:	01414304 	movi	r5,1292
10005584:	0009883a 	mov	r4,zero
10005588:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000558c:	01400204 	movi	r5,8
10005590:	0009883a 	mov	r4,zero
10005594:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10005598:	0140b404 	movi	r5,720
1000559c:	0009883a 	mov	r4,zero
100055a0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0001);
100055a4:	01400044 	movi	r5,1
100055a8:	0009883a 	mov	r4,zero
100055ac:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);
100055b0:	014004c4 	movi	r5,19
100055b4:	0009883a 	mov	r4,zero
100055b8:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0514);
100055bc:	01414504 	movi	r5,1300
100055c0:	0009883a 	mov	r4,zero
100055c4:	00015ec0 	call	100015ec <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
100055c8:	0141a044 	movi	r5,1665
100055cc:	0009883a 	mov	r4,zero
100055d0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
100055d4:	01488004 	movi	r5,8704
100055d8:	0009883a 	mov	r4,zero
100055dc:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100055e0:	000b883a 	mov	r5,zero
100055e4:	0009883a 	mov	r4,zero
100055e8:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x007B);//2
100055ec:	01401ec4 	movi	r5,123
100055f0:	0009883a 	mov	r4,zero
100055f4:	00015ec0 	call	100015ec <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
100055f8:	01416004 	movi	r5,1408
100055fc:	0009883a 	mov	r4,zero
10005600:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10005604:	01400204 	movi	r5,8
10005608:	0009883a 	mov	r4,zero
1000560c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10005610:	0140a404 	movi	r5,656
10005614:	0009883a 	mov	r4,zero
10005618:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000561c:	01401044 	movi	r5,65
10005620:	0009883a 	mov	r4,zero
10005624:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10005628:	014004c4 	movi	r5,19
1000562c:	0009883a 	mov	r4,zero
10005630:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10005634:	01414804 	movi	r5,1312
10005638:	0009883a 	mov	r4,zero
1000563c:	00015ec0 	call	100015ec <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10005640:	01416204 	movi	r5,1416
10005644:	0009883a 	mov	r4,zero
10005648:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0008);//2
1000564c:	01400204 	movi	r5,8
10005650:	0009883a 	mov	r4,zero
10005654:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10005658:	0140a404 	movi	r5,656
1000565c:	0009883a 	mov	r4,zero
10005660:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10005664:	01400044 	movi	r5,1
10005668:	0009883a 	mov	r4,zero
1000566c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10005670:	014004c4 	movi	r5,19
10005674:	0009883a 	mov	r4,zero
10005678:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x052c);//a
1000567c:	01414b04 	movi	r5,1324
10005680:	0009883a 	mov	r4,zero
10005684:	00015ec0 	call	100015ec <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10005688:	01416404 	movi	r5,1424
1000568c:	0009883a 	mov	r4,zero
10005690:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10005694:	01400204 	movi	r5,8
10005698:	0009883a 	mov	r4,zero
1000569c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100056a0:	0140a404 	movi	r5,656
100056a4:	0009883a 	mov	r4,zero
100056a8:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100056ac:	01401044 	movi	r5,65
100056b0:	0009883a 	mov	r4,zero
100056b4:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100056b8:	014004c4 	movi	r5,19
100056bc:	0009883a 	mov	r4,zero
100056c0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0538);//6
100056c4:	01414e04 	movi	r5,1336
100056c8:	0009883a 	mov	r4,zero
100056cc:	00015ec0 	call	100015ec <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
100056d0:	01416604 	movi	r5,1432
100056d4:	0009883a 	mov	r4,zero
100056d8:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0008);//a
100056dc:	01400204 	movi	r5,8
100056e0:	0009883a 	mov	r4,zero
100056e4:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0290);//c
100056e8:	0140a404 	movi	r5,656
100056ec:	0009883a 	mov	r4,zero
100056f0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
100056f4:	01400044 	movi	r5,1
100056f8:	0009883a 	mov	r4,zero
100056fc:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10005700:	014004c4 	movi	r5,19
10005704:	0009883a 	mov	r4,zero
10005708:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0544);//2
1000570c:	01415104 	movi	r5,1348
10005710:	0009883a 	mov	r4,zero
10005714:	00015ec0 	call	100015ec <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10005718:	01416804 	movi	r5,1440
1000571c:	0009883a 	mov	r4,zero
10005720:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10005724:	01400204 	movi	r5,8
10005728:	0009883a 	mov	r4,zero
1000572c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10005730:	0140a404 	movi	r5,656
10005734:	0009883a 	mov	r4,zero
10005738:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
1000573c:	01401044 	movi	r5,65
10005740:	0009883a 	mov	r4,zero
10005744:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10005748:	014004c4 	movi	r5,19
1000574c:	0009883a 	mov	r4,zero
10005750:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10005754:	01415404 	movi	r5,1360
10005758:	0009883a 	mov	r4,zero
1000575c:	00015ec0 	call	100015ec <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10005760:	01416a04 	movi	r5,1448
10005764:	0009883a 	mov	r4,zero
10005768:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0008);//2
1000576c:	01400204 	movi	r5,8
10005770:	0009883a 	mov	r4,zero
10005774:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10005778:	0140a404 	movi	r5,656
1000577c:	0009883a 	mov	r4,zero
10005780:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10005784:	01400044 	movi	r5,1
10005788:	0009883a 	mov	r4,zero
1000578c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10005790:	014004c4 	movi	r5,19
10005794:	0009883a 	mov	r4,zero
10005798:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x055c);//a
1000579c:	01415704 	movi	r5,1372
100057a0:	0009883a 	mov	r4,zero
100057a4:	00015ec0 	call	100015ec <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
100057a8:	01416c04 	movi	r5,1456
100057ac:	0009883a 	mov	r4,zero
100057b0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0008);//e
100057b4:	01400204 	movi	r5,8
100057b8:	0009883a 	mov	r4,zero
100057bc:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0290);//560
100057c0:	0140a404 	movi	r5,656
100057c4:	0009883a 	mov	r4,zero
100057c8:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
100057cc:	01401044 	movi	r5,65
100057d0:	0009883a 	mov	r4,zero
100057d4:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100057d8:	014004c4 	movi	r5,19
100057dc:	0009883a 	mov	r4,zero
100057e0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0568);//6
100057e4:	01415a04 	movi	r5,1384
100057e8:	0009883a 	mov	r4,zero
100057ec:	00015ec0 	call	100015ec <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
100057f0:	01416e04 	movi	r5,1464
100057f4:	0009883a 	mov	r4,zero
100057f8:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0003);//a
100057fc:	014000c4 	movi	r5,3
10005800:	0009883a 	mov	r4,zero
10005804:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10005808:	0140a404 	movi	r5,656
1000580c:	0009883a 	mov	r4,zero
10005810:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10005814:	01400044 	movi	r5,1
10005818:	0009883a 	mov	r4,zero
1000581c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10005820:	014004c4 	movi	r5,19
10005824:	0009883a 	mov	r4,zero
10005828:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0574);//2
1000582c:	01415d04 	movi	r5,1396
10005830:	0009883a 	mov	r4,zero
10005834:	00015ec0 	call	100015ec <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10005838:	000b883a 	mov	r5,zero
1000583c:	0009883a 	mov	r4,zero
10005840:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10005844:	000b883a 	mov	r5,zero
10005848:	0009883a 	mov	r4,zero
1000584c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0210);//8
10005850:	01408404 	movi	r5,528
10005854:	0009883a 	mov	r4,zero
10005858:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000585c:	01401044 	movi	r5,65
10005860:	0009883a 	mov	r4,zero
10005864:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10005868:	014004c4 	movi	r5,19
1000586c:	0009883a 	mov	r4,zero
10005870:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10005874:	000b883a 	mov	r5,zero
10005878:	0009883a 	mov	r4,zero
1000587c:	00015ec0 	call	100015ec <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10005880:	01414004 	movi	r5,1280
10005884:	01006c04 	movi	r4,432
10005888:	00048b40 	call	100048b4 <UsbWrite>

}
1000588c:	0001883a 	nop
10005890:	e037883a 	mov	sp,fp
10005894:	dfc00117 	ldw	ra,4(sp)
10005898:	df000017 	ldw	fp,0(sp)
1000589c:	dec00204 	addi	sp,sp,8
100058a0:	f800283a 	ret

100058a4 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
100058a4:	defffd04 	addi	sp,sp,-12
100058a8:	dfc00215 	stw	ra,8(sp)
100058ac:	df000115 	stw	fp,4(sp)
100058b0:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
100058b4:	01005104 	movi	r4,324
100058b8:	000490c0 	call	1000490c <UsbRead>
100058bc:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
100058c0:	000b883a 	mov	r5,zero
100058c4:	01005104 	movi	r4,324
100058c8:	00048b40 	call	100048b4 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
100058cc:	00000d06 	br	10005904 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
100058d0:	e0bfff0b 	ldhu	r2,-4(fp)
100058d4:	10000526 	beq	r2,zero,100058ec <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
100058d8:	e0bfff0b 	ldhu	r2,-4(fp)
100058dc:	100b883a 	mov	r5,r2
100058e0:	01040074 	movhi	r4,4097
100058e4:	21180104 	addi	r4,r4,24580
100058e8:	0006a140 	call	10006a14 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
100058ec:	01005104 	movi	r4,324
100058f0:	000490c0 	call	1000490c <UsbRead>
100058f4:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
100058f8:	000b883a 	mov	r5,zero
100058fc:	01005104 	movi	r4,324
10005900:	00048b40 	call	100048b4 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10005904:	e0bfff0b 	ldhu	r2,-4(fp)
10005908:	10840018 	cmpnei	r2,r2,4096
1000590c:	103ff01e 	bne	r2,zero,100058d0 <__alt_data_end+0xf80058d0>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
10005910:	e0bfff0b 	ldhu	r2,-4(fp)
}
10005914:	e037883a 	mov	sp,fp
10005918:	dfc00117 	ldw	ra,4(sp)
1000591c:	df000017 	ldw	fp,0(sp)
10005920:	dec00204 	addi	sp,sp,8
10005924:	f800283a 	ret

10005928 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10005928:	defffd04 	addi	sp,sp,-12
1000592c:	dfc00215 	stw	ra,8(sp)
10005930:	df000115 	stw	fp,4(sp)
10005934:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10005938:	010000c4 	movi	r4,3
1000593c:	00016680 	call	10001668 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
10005940:	01005104 	movi	r4,324
10005944:	000490c0 	call	1000490c <UsbRead>
10005948:	10bfffcc 	andi	r2,r2,65535
1000594c:	10840018 	cmpnei	r2,r2,4096
10005950:	1000091e 	bne	r2,zero,10005978 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10005954:	000b883a 	mov	r5,zero
10005958:	01005104 	movi	r4,324
1000595c:	00048b40 	call	100048b4 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005960:	0001883a 	nop
10005964:	010000c4 	movi	r4,3
10005968:	00016680 	call	10001668 <IO_read>
1000596c:	10bfffcc 	andi	r2,r2,65535
10005970:	1080040c 	andi	r2,r2,16
10005974:	103ffb26 	beq	r2,zero,10005964 <__alt_data_end+0xf8005964>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10005978:	01414204 	movi	r5,1288
1000597c:	01000084 	movi	r4,2
10005980:	00015ec0 	call	100015ec <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10005984:	0009883a 	mov	r4,zero
10005988:	00016680 	call	10001668 <IO_read>
1000598c:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
10005990:	e0bfff0b 	ldhu	r2,-4(fp)
}
10005994:	e037883a 	mov	sp,fp
10005998:	dfc00117 	ldw	ra,4(sp)
1000599c:	df000017 	ldw	fp,0(sp)
100059a0:	dec00204 	addi	sp,sp,8
100059a4:	f800283a 	ret

100059a8 <UsbPrintMem>:


void UsbPrintMem()
{
100059a8:	defffc04 	addi	sp,sp,-16
100059ac:	dfc00315 	stw	ra,12(sp)
100059b0:	df000215 	stw	fp,8(sp)
100059b4:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
100059b8:	01414004 	movi	r5,1280
100059bc:	01000084 	movi	r4,2
100059c0:	00015ec0 	call	100015ec <IO_write>
	for (i = 0; i <= 200; i += 2)
100059c4:	e03ffe15 	stw	zero,-8(fp)
100059c8:	00000e06 	br	10005a04 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
100059cc:	0009883a 	mov	r4,zero
100059d0:	00016680 	call	10001668 <IO_read>
100059d4:	10bfffcc 	andi	r2,r2,65535
100059d8:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
100059dc:	e0bffe17 	ldw	r2,-8(fp)
100059e0:	10814004 	addi	r2,r2,1280
100059e4:	e1bfff17 	ldw	r6,-4(fp)
100059e8:	100b883a 	mov	r5,r2
100059ec:	01040074 	movhi	r4,4097
100059f0:	21180904 	addi	r4,r4,24612
100059f4:	0006a140 	call	10006a14 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
100059f8:	e0bffe17 	ldw	r2,-8(fp)
100059fc:	10800084 	addi	r2,r2,2
10005a00:	e0bffe15 	stw	r2,-8(fp)
10005a04:	e0bffe17 	ldw	r2,-8(fp)
10005a08:	10803250 	cmplti	r2,r2,201
10005a0c:	103fef1e 	bne	r2,zero,100059cc <__alt_data_end+0xf80059cc>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
10005a10:	0001883a 	nop
10005a14:	e037883a 	mov	sp,fp
10005a18:	dfc00117 	ldw	ra,4(sp)
10005a1c:	df000017 	ldw	fp,0(sp)
10005a20:	dec00204 	addi	sp,sp,8
10005a24:	f800283a 	ret

10005a28 <usb_initialize>:
static alt_u8  hot_plug_count;
static alt_u16 code;


void usb_initialize()
{
10005a28:	defffe04 	addi	sp,sp,-8
10005a2c:	dfc00115 	stw	ra,4(sp)
10005a30:	df000015 	stw	fp,0(sp)
10005a34:	d839883a 	mov	fp,sp
	IO_init();
10005a38:	00015640 	call	10001564 <IO_init>
	// alt_u8 toggle = 0;
	// alt_u8 data_size;
	// alt_u8 hot_plug_count;
	// alt_u16 code;

	printf("USB keyboard setup...\n\n");
10005a3c:	01040074 	movhi	r4,4097
10005a40:	21180e04 	addi	r4,r4,24632
10005a44:	0006b100 	call	10006b10 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
10005a48:	00049500 	call	10004950 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10005a4c:	000b883a 	mov	r5,zero
10005a50:	01005104 	movi	r4,324
10005a54:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10005a58:	017fffd4 	movui	r5,65535
10005a5c:	01302414 	movui	r4,49296
10005a60:	00048b40 	call	100048b4 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10005a64:	01409604 	movi	r5,600
10005a68:	01006d04 	movi	r4,436
10005a6c:	00048b40 	call	100048b4 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10005a70:	00811004 	movi	r2,1088
10005a74:	d09b278d 	sth	r2,27806(gp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10005a78:	d09b278b 	ldhu	r2,27806(gp)
10005a7c:	10bfffcc 	andi	r2,r2,65535
10005a80:	100b883a 	mov	r5,r2
10005a84:	01005084 	movi	r4,322
10005a88:	00048b40 	call	100048b4 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
10005a8c:	00808404 	movi	r2,528
10005a90:	d09b270d 	sth	r2,27804(gp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
10005a94:	d09b270b 	ldhu	r2,27804(gp)
10005a98:	10bfffcc 	andi	r2,r2,65535
10005a9c:	100b883a 	mov	r5,r2
10005aa0:	01302314 	movui	r4,49292
10005aa4:	00048b40 	call	100048b4 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
10005aa8:	000b883a 	mov	r5,zero
10005aac:	01007104 	movi	r4,452
10005ab0:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10005ab4:	000b883a 	mov	r5,zero
10005ab8:	01007184 	movi	r4,454
10005abc:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10005ac0:	000b883a 	mov	r5,zero
10005ac4:	01007204 	movi	r4,456
10005ac8:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10005acc:	000b883a 	mov	r5,zero
10005ad0:	01007284 	movi	r4,458
10005ad4:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10005ad8:	000b883a 	mov	r5,zero
10005adc:	01007304 	movi	r4,460
10005ae0:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10005ae4:	000b883a 	mov	r5,zero
10005ae8:	01007384 	movi	r4,462
10005aec:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10005af0:	000b883a 	mov	r5,zero
10005af4:	01007404 	movi	r4,464
10005af8:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10005afc:	000b883a 	mov	r5,zero
10005b00:	01007484 	movi	r4,466
10005b04:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10005b08:	000b883a 	mov	r5,zero
10005b0c:	01007504 	movi	r4,468
10005b10:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10005b14:	000b883a 	mov	r5,zero
10005b18:	01007584 	movi	r4,470
10005b1c:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10005b20:	000b883a 	mov	r5,zero
10005b24:	01007604 	movi	r4,472
10005b28:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10005b2c:	000b883a 	mov	r5,zero
10005b30:	01007684 	movi	r4,474
10005b34:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10005b38:	000b883a 	mov	r5,zero
10005b3c:	01007704 	movi	r4,476
10005b40:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10005b44:	000b883a 	mov	r5,zero
10005b48:	01007784 	movi	r4,478
10005b4c:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
10005b50:	01401c84 	movi	r5,114
10005b54:	01007084 	movi	r4,450
10005b58:	00048b40 	call	100048b4 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10005b5c:	01738054 	movui	r5,52737
10005b60:	01000044 	movi	r4,1
10005b64:	00015ec0 	call	100015ec <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10005b68:	0001883a 	nop
10005b6c:	010000c4 	movi	r4,3
10005b70:	00016680 	call	10001668 <IO_read>
10005b74:	10bfffcc 	andi	r2,r2,65535
10005b78:	103ffc26 	beq	r2,zero,10005b6c <__alt_data_end+0xf8005b6c>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10005b7c:	00000806 	br	10005ba0 <usb_initialize+0x178>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10005b80:	01000044 	movi	r4,1
10005b84:	00016680 	call	10001668 <IO_read>
10005b88:	10bfffcc 	andi	r2,r2,65535
10005b8c:	100b883a 	mov	r5,r2
10005b90:	01040074 	movhi	r4,4097
10005b94:	21181404 	addi	r4,r4,24656
10005b98:	0006a140 	call	10006a14 <printf>
		goto USB_HOT_PLUG;
10005b9c:	003faa06 	br	10005a48 <__alt_data_end+0xf8005a48>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10005ba0:	01000044 	movi	r4,1
10005ba4:	00016680 	call	10001668 <IO_read>
10005ba8:	10bfffcc 	andi	r2,r2,65535
10005bac:	1083fb58 	cmpnei	r2,r2,4077
10005bb0:	103ff31e 	bne	r2,zero,10005b80 <__alt_data_end+0xf8005b80>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
10005bb4:	01040074 	movhi	r4,4097
10005bb8:	21181d04 	addi	r4,r4,24692
10005bbc:	0006a140 	call	10006a14 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
10005bc0:	01401d04 	movi	r5,116
10005bc4:	01007084 	movi	r4,450
10005bc8:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
10005bcc:	01400f04 	movi	r5,60
10005bd0:	01007104 	movi	r4,452
10005bd4:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10005bd8:	000b883a 	mov	r5,zero
10005bdc:	01007184 	movi	r4,454
10005be0:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10005be4:	000b883a 	mov	r5,zero
10005be8:	01007204 	movi	r4,456
10005bec:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10005bf0:	000b883a 	mov	r5,zero
10005bf4:	01007284 	movi	r4,458
10005bf8:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10005bfc:	000b883a 	mov	r5,zero
10005c00:	01007304 	movi	r4,460
10005c04:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10005c08:	000b883a 	mov	r5,zero
10005c0c:	01007384 	movi	r4,462
10005c10:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10005c14:	000b883a 	mov	r5,zero
10005c18:	01007404 	movi	r4,464
10005c1c:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10005c20:	000b883a 	mov	r5,zero
10005c24:	01007484 	movi	r4,466
10005c28:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10005c2c:	000b883a 	mov	r5,zero
10005c30:	01007504 	movi	r4,468
10005c34:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10005c38:	000b883a 	mov	r5,zero
10005c3c:	01007584 	movi	r4,470
10005c40:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10005c44:	000b883a 	mov	r5,zero
10005c48:	01007604 	movi	r4,472
10005c4c:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10005c50:	000b883a 	mov	r5,zero
10005c54:	01007684 	movi	r4,474
10005c58:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10005c5c:	000b883a 	mov	r5,zero
10005c60:	01007704 	movi	r4,476
10005c64:	00048b40 	call	100048b4 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10005c68:	000b883a 	mov	r5,zero
10005c6c:	01007784 	movi	r4,478
10005c70:	00048b40 	call	100048b4 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10005c74:	01738054 	movui	r5,52737
10005c78:	01000044 	movi	r4,1
10005c7c:	00015ec0 	call	100015ec <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10005c80:	0001883a 	nop
10005c84:	01000044 	movi	r4,1
10005c88:	00016680 	call	10001668 <IO_read>
10005c8c:	10bfffcc 	andi	r2,r2,65535
10005c90:	1083fb58 	cmpnei	r2,r2,4077
10005c94:	10000826 	beq	r2,zero,10005cb8 <usb_initialize+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10005c98:	01000044 	movi	r4,1
10005c9c:	00016680 	call	10001668 <IO_read>
10005ca0:	10bfffcc 	andi	r2,r2,65535
10005ca4:	100b883a 	mov	r5,r2
10005ca8:	01040074 	movhi	r4,4097
10005cac:	21181404 	addi	r4,r4,24656
10005cb0:	0006a140 	call	10006a14 <printf>
		goto USB_HOT_PLUG;
10005cb4:	003f6406 	br	10005a48 <__alt_data_end+0xf8005a48>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
10005cb8:	00b02284 	movi	r2,-16246
10005cbc:	d09b280d 	sth	r2,27808(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
10005cc0:	008c0004 	movi	r2,12288
10005cc4:	d09b288d 	sth	r2,27810(gp)
	fs_device = A_DP_STAT;
10005cc8:	00880004 	movi	r2,8192
10005ccc:	d09b290d 	sth	r2,27812(gp)
	usb_ctl_val = UsbRead(ctl_reg);
10005cd0:	d09b280b 	ldhu	r2,27808(gp)
10005cd4:	10bfffcc 	andi	r2,r2,65535
10005cd8:	1009883a 	mov	r4,r2
10005cdc:	000490c0 	call	1000490c <UsbRead>
10005ce0:	d09b278d 	sth	r2,27806(gp)

	if (!(usb_ctl_val & no_device))
10005ce4:	d0db278b 	ldhu	r3,27806(gp)
10005ce8:	d09b288b 	ldhu	r2,27810(gp)
10005cec:	1884703a 	and	r2,r3,r2
10005cf0:	10bfffcc 	andi	r2,r2,65535
10005cf4:	1000361e 	bne	r2,zero,10005dd0 <usb_initialize+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10005cf8:	d01b2a05 	stb	zero,27816(gp)
10005cfc:	00000f06 	br	10005d3c <usb_initialize+0x314>
		{
			usleep(5*1000);
10005d00:	0104e204 	movi	r4,5000
10005d04:	0013fa00 	call	10013fa0 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10005d08:	d09b280b 	ldhu	r2,27808(gp)
10005d0c:	10bfffcc 	andi	r2,r2,65535
10005d10:	1009883a 	mov	r4,r2
10005d14:	000490c0 	call	1000490c <UsbRead>
10005d18:	d09b278d 	sth	r2,27806(gp)
			if(usb_ctl_val & no_device) break;
10005d1c:	d0db278b 	ldhu	r3,27806(gp)
10005d20:	d09b288b 	ldhu	r2,27810(gp)
10005d24:	1884703a 	and	r2,r3,r2
10005d28:	10bfffcc 	andi	r2,r2,65535
10005d2c:	1000081e 	bne	r2,zero,10005d50 <usb_initialize+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10005d30:	d09b2a03 	ldbu	r2,27816(gp)
10005d34:	10800044 	addi	r2,r2,1
10005d38:	d09b2a05 	stb	r2,27816(gp)
10005d3c:	d09b2a03 	ldbu	r2,27816(gp)
10005d40:	10803fcc 	andi	r2,r2,255
10005d44:	10800170 	cmpltui	r2,r2,5
10005d48:	103fed1e 	bne	r2,zero,10005d00 <__alt_data_end+0xf8005d00>
10005d4c:	00000106 	br	10005d54 <usb_initialize+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
10005d50:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
10005d54:	d0db278b 	ldhu	r3,27806(gp)
10005d58:	d09b288b 	ldhu	r2,27810(gp)
10005d5c:	1884703a 	and	r2,r3,r2
10005d60:	10bfffcc 	andi	r2,r2,65535
10005d64:	1000261e 	bne	r2,zero,10005e00 <usb_initialize+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
10005d68:	01040074 	movhi	r4,4097
10005d6c:	21182104 	addi	r4,r4,24708
10005d70:	0006b100 	call	10006b10 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10005d74:	01040074 	movhi	r4,4097
10005d78:	21182b04 	addi	r4,r4,24748
10005d7c:	0006b100 	call	10006b10 <puts>
			while (!(usb_ctl_val & no_device))
10005d80:	00000d06 	br	10005db8 <usb_initialize+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10005d84:	d09b280b 	ldhu	r2,27808(gp)
10005d88:	10bfffcc 	andi	r2,r2,65535
10005d8c:	1009883a 	mov	r4,r2
10005d90:	000490c0 	call	1000490c <UsbRead>
10005d94:	d09b278d 	sth	r2,27806(gp)
				if(usb_ctl_val & no_device)
10005d98:	d0db278b 	ldhu	r3,27806(gp)
10005d9c:	d09b288b 	ldhu	r2,27810(gp)
10005da0:	1884703a 	and	r2,r3,r2
10005da4:	10bfffcc 	andi	r2,r2,65535
10005da8:	10000126 	beq	r2,zero,10005db0 <usb_initialize+0x388>
					goto USB_HOT_PLUG;
10005dac:	003f2606 	br	10005a48 <__alt_data_end+0xf8005a48>

				usleep(2000);
10005db0:	0101f404 	movi	r4,2000
10005db4:	0013fa00 	call	10013fa0 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
10005db8:	d0db278b 	ldhu	r3,27806(gp)
10005dbc:	d09b288b 	ldhu	r2,27810(gp)
10005dc0:	1884703a 	and	r2,r3,r2
10005dc4:	10bfffcc 	andi	r2,r2,65535
10005dc8:	103fee26 	beq	r2,zero,10005d84 <__alt_data_end+0xf8005d84>
10005dcc:	00000c06 	br	10005e00 <usb_initialize+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
10005dd0:	d0db278b 	ldhu	r3,27806(gp)
10005dd4:	d09b290b 	ldhu	r2,27812(gp)
10005dd8:	1884703a 	and	r2,r3,r2
10005ddc:	10bfffcc 	andi	r2,r2,65535
10005de0:	10000426 	beq	r2,zero,10005df4 <usb_initialize+0x3cc>
		{
			printf("[INFO]: full speed device\n");
10005de4:	01040074 	movhi	r4,4097
10005de8:	21183704 	addi	r4,r4,24796
10005dec:	0006b100 	call	10006b10 <puts>
10005df0:	00000306 	br	10005e00 <usb_initialize+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
10005df4:	01040074 	movhi	r4,4097
10005df8:	21183e04 	addi	r4,r4,24824
10005dfc:	0006b100 	call	10006b10 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
10005e00:	0004a040 	call	10004a04 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005e04:	00000306 	br	10005e14 <usb_initialize+0x3ec>
	{
		UsbSetAddress();
10005e08:	0004a040 	call	10004a04 <UsbSetAddress>
		usleep(10*1000);
10005e0c:	0109c404 	movi	r4,10000
10005e10:	0013fa00 	call	10013fa0 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005e14:	010000c4 	movi	r4,3
10005e18:	00016680 	call	10001668 <IO_read>
10005e1c:	10bfffcc 	andi	r2,r2,65535
10005e20:	1080040c 	andi	r2,r2,16
10005e24:	103ff826 	beq	r2,zero,10005e08 <__alt_data_end+0xf8005e08>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10005e28:	00058a40 	call	100058a4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
10005e2c:	01414184 	movi	r5,1286
10005e30:	01000084 	movi	r4,2
10005e34:	00015ec0 	call	100015ec <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
10005e38:	0009883a 	mov	r4,zero
10005e3c:	00016680 	call	10001668 <IO_read>
10005e40:	10bfffcc 	andi	r2,r2,65535
10005e44:	100b883a 	mov	r5,r2
10005e48:	01040074 	movhi	r4,4097
10005e4c:	21184504 	addi	r4,r4,24852
10005e50:	0006a140 	call	10006a14 <printf>

	IO_write(HPI_ADDR,0x0508); // n
10005e54:	01414204 	movi	r5,1288
10005e58:	01000084 	movi	r4,2
10005e5c:	00015ec0 	call	100015ec <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10005e60:	0009883a 	mov	r4,zero
10005e64:	00016680 	call	10001668 <IO_read>
10005e68:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
10005e6c:	d09b278b 	ldhu	r2,27806(gp)
10005e70:	10bfffcc 	andi	r2,r2,65535
10005e74:	100b883a 	mov	r5,r2
10005e78:	01040074 	movhi	r4,4097
10005e7c:	21185004 	addi	r4,r4,24896
10005e80:	0006a140 	call	10006a14 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
10005e84:	0001883a 	nop
10005e88:	d09b278b 	ldhu	r2,27806(gp)
10005e8c:	10bfffcc 	andi	r2,r2,65535
10005e90:	108000d8 	cmpnei	r2,r2,3
10005e94:	10000326 	beq	r2,zero,10005ea4 <usb_initialize+0x47c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10005e98:	00059280 	call	10005928 <UsbGetRetryCnt>
10005e9c:	d09b278d 	sth	r2,27806(gp)

		goto USB_HOT_PLUG;
10005ea0:	003ee906 	br	10005a48 <__alt_data_end+0xf8005a48>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
10005ea4:	01040074 	movhi	r4,4097
10005ea8:	21185c04 	addi	r4,r4,24944
10005eac:	0006b100 	call	10006b10 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
10005eb0:	0004b040 	call	10004b04 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005eb4:	00000306 	br	10005ec4 <usb_initialize+0x49c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
10005eb8:	0004b040 	call	10004b04 <UsbGetDeviceDesc1>
		usleep(10*1000);
10005ebc:	0109c404 	movi	r4,10000
10005ec0:	0013fa00 	call	10013fa0 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005ec4:	010000c4 	movi	r4,3
10005ec8:	00016680 	call	10001668 <IO_read>
10005ecc:	10bfffcc 	andi	r2,r2,65535
10005ed0:	1080040c 	andi	r2,r2,16
10005ed4:	103ff826 	beq	r2,zero,10005eb8 <__alt_data_end+0xf8005eb8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10005ed8:	00058a40 	call	100058a4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10005edc:	01414184 	movi	r5,1286
10005ee0:	01000084 	movi	r4,2
10005ee4:	00015ec0 	call	100015ec <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10005ee8:	0009883a 	mov	r4,zero
10005eec:	00016680 	call	10001668 <IO_read>
10005ef0:	10bfffcc 	andi	r2,r2,65535
10005ef4:	100b883a 	mov	r5,r2
10005ef8:	01040074 	movhi	r4,4097
10005efc:	21186b04 	addi	r4,r4,25004
10005f00:	0006a140 	call	10006a14 <printf>

	IO_write(HPI_ADDR,0x0508);
10005f04:	01414204 	movi	r5,1288
10005f08:	01000084 	movi	r4,2
10005f0c:	00015ec0 	call	100015ec <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10005f10:	0009883a 	mov	r4,zero
10005f14:	00016680 	call	10001668 <IO_read>
10005f18:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10005f1c:	d09b278b 	ldhu	r2,27806(gp)
10005f20:	10bfffcc 	andi	r2,r2,65535
10005f24:	100b883a 	mov	r5,r2
10005f28:	01040074 	movhi	r4,4097
10005f2c:	21187604 	addi	r4,r4,25048
10005f30:	0006a140 	call	10006a14 <printf>
	while (usb_ctl_val != 0x03)
10005f34:	00000206 	br	10005f40 <usb_initialize+0x518>
	{
		usb_ctl_val = UsbGetRetryCnt();
10005f38:	00059280 	call	10005928 <UsbGetRetryCnt>
10005f3c:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10005f40:	d09b278b 	ldhu	r2,27806(gp)
10005f44:	10bfffcc 	andi	r2,r2,65535
10005f48:	108000d8 	cmpnei	r2,r2,3
10005f4c:	103ffa1e 	bne	r2,zero,10005f38 <__alt_data_end+0xf8005f38>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
10005f50:	01040074 	movhi	r4,4097
10005f54:	21188204 	addi	r4,r4,25096
10005f58:	0006b100 	call	10006b10 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
10005f5c:	0004c4c0 	call	10004c4c <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005f60:	00000306 	br	10005f70 <usb_initialize+0x548>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
10005f64:	0004c4c0 	call	10004c4c <UsbGetDeviceDesc2>
		usleep(10*1000);
10005f68:	0109c404 	movi	r4,10000
10005f6c:	0013fa00 	call	10013fa0 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005f70:	010000c4 	movi	r4,3
10005f74:	00016680 	call	10001668 <IO_read>
10005f78:	10bfffcc 	andi	r2,r2,65535
10005f7c:	1080040c 	andi	r2,r2,16
10005f80:	103ff826 	beq	r2,zero,10005f64 <__alt_data_end+0xf8005f64>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10005f84:	00058a40 	call	100058a4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10005f88:	01414184 	movi	r5,1286
10005f8c:	01000084 	movi	r4,2
10005f90:	00015ec0 	call	100015ec <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10005f94:	0009883a 	mov	r4,zero
10005f98:	00016680 	call	10001668 <IO_read>
10005f9c:	10bfffcc 	andi	r2,r2,65535
10005fa0:	100b883a 	mov	r5,r2
10005fa4:	01040074 	movhi	r4,4097
10005fa8:	21186b04 	addi	r4,r4,25004
10005fac:	0006a140 	call	10006a14 <printf>

	IO_write(HPI_ADDR,0x0508);
10005fb0:	01414204 	movi	r5,1288
10005fb4:	01000084 	movi	r4,2
10005fb8:	00015ec0 	call	100015ec <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10005fbc:	0009883a 	mov	r4,zero
10005fc0:	00016680 	call	10001668 <IO_read>
10005fc4:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10005fc8:	d09b278b 	ldhu	r2,27806(gp)
10005fcc:	10bfffcc 	andi	r2,r2,65535
10005fd0:	100b883a 	mov	r5,r2
10005fd4:	01040074 	movhi	r4,4097
10005fd8:	21187604 	addi	r4,r4,25048
10005fdc:	0006a140 	call	10006a14 <printf>
	while (usb_ctl_val != 0x03)
10005fe0:	00000206 	br	10005fec <usb_initialize+0x5c4>
	{
		usb_ctl_val = UsbGetRetryCnt();
10005fe4:	00059280 	call	10005928 <UsbGetRetryCnt>
10005fe8:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10005fec:	d09b278b 	ldhu	r2,27806(gp)
10005ff0:	10bfffcc 	andi	r2,r2,65535
10005ff4:	108000d8 	cmpnei	r2,r2,3
10005ff8:	103ffa1e 	bne	r2,zero,10005fe4 <__alt_data_end+0xf8005fe4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
10005ffc:	01040074 	movhi	r4,4097
10006000:	21189604 	addi	r4,r4,25176
10006004:	0006b100 	call	10006b10 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
10006008:	0004e240 	call	10004e24 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000600c:	00000306 	br	1000601c <usb_initialize+0x5f4>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
10006010:	0004e240 	call	10004e24 <UsbGetConfigDesc1>
		usleep(10*1000);
10006014:	0109c404 	movi	r4,10000
10006018:	0013fa00 	call	10013fa0 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000601c:	010000c4 	movi	r4,3
10006020:	00016680 	call	10001668 <IO_read>
10006024:	10bfffcc 	andi	r2,r2,65535
10006028:	1080040c 	andi	r2,r2,16
1000602c:	103ff826 	beq	r2,zero,10006010 <__alt_data_end+0xf8006010>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10006030:	00058a40 	call	100058a4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10006034:	01414184 	movi	r5,1286
10006038:	01000084 	movi	r4,2
1000603c:	00015ec0 	call	100015ec <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
10006040:	0009883a 	mov	r4,zero
10006044:	00016680 	call	10001668 <IO_read>
10006048:	10bfffcc 	andi	r2,r2,65535
1000604c:	100b883a 	mov	r5,r2
10006050:	01040074 	movhi	r4,4097
10006054:	2118a804 	addi	r4,r4,25248
10006058:	0006a140 	call	10006a14 <printf>

	IO_write(HPI_ADDR,0x0508);
1000605c:	01414204 	movi	r5,1288
10006060:	01000084 	movi	r4,2
10006064:	00015ec0 	call	100015ec <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10006068:	0009883a 	mov	r4,zero
1000606c:	00016680 	call	10001668 <IO_read>
10006070:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
10006074:	d09b278b 	ldhu	r2,27806(gp)
10006078:	10bfffcc 	andi	r2,r2,65535
1000607c:	100b883a 	mov	r5,r2
10006080:	01040074 	movhi	r4,4097
10006084:	2118b304 	addi	r4,r4,25292
10006088:	0006a140 	call	10006a14 <printf>
	while (usb_ctl_val != 0x03)
1000608c:	00000206 	br	10006098 <usb_initialize+0x670>
	{
		usb_ctl_val = UsbGetRetryCnt();
10006090:	00059280 	call	10005928 <UsbGetRetryCnt>
10006094:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10006098:	d09b278b 	ldhu	r2,27806(gp)
1000609c:	10bfffcc 	andi	r2,r2,65535
100060a0:	108000d8 	cmpnei	r2,r2,3
100060a4:	103ffa1e 	bne	r2,zero,10006090 <__alt_data_end+0xf8006090>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
100060a8:	01040074 	movhi	r4,4097
100060ac:	2118bf04 	addi	r4,r4,25340
100060b0:	0006b100 	call	10006b10 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
100060b4:	0004fb40 	call	10004fb4 <UsbGetConfigDesc2>

	usleep(100*1000);
100060b8:	010000b4 	movhi	r4,2
100060bc:	2121a804 	addi	r4,r4,-31072
100060c0:	0013fa00 	call	10013fa0 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100060c4:	00000306 	br	100060d4 <usb_initialize+0x6ac>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
100060c8:	0004fb40 	call	10004fb4 <UsbGetConfigDesc2>
		usleep(10*1000);
100060cc:	0109c404 	movi	r4,10000
100060d0:	0013fa00 	call	10013fa0 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100060d4:	010000c4 	movi	r4,3
100060d8:	00016680 	call	10001668 <IO_read>
100060dc:	10bfffcc 	andi	r2,r2,65535
100060e0:	1080040c 	andi	r2,r2,16
100060e4:	103ff826 	beq	r2,zero,100060c8 <__alt_data_end+0xf80060c8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100060e8:	00058a40 	call	100058a4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100060ec:	01414184 	movi	r5,1286
100060f0:	01000084 	movi	r4,2
100060f4:	00015ec0 	call	100015ec <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
100060f8:	0009883a 	mov	r4,zero
100060fc:	00016680 	call	10001668 <IO_read>
10006100:	10bfffcc 	andi	r2,r2,65535
10006104:	100b883a 	mov	r5,r2
10006108:	01040074 	movhi	r4,4097
1000610c:	2118d204 	addi	r4,r4,25416
10006110:	0006a140 	call	10006a14 <printf>

	IO_write(HPI_ADDR,0x0508);
10006114:	01414204 	movi	r5,1288
10006118:	01000084 	movi	r4,2
1000611c:	00015ec0 	call	100015ec <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10006120:	0009883a 	mov	r4,zero
10006124:	00016680 	call	10001668 <IO_read>
10006128:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
1000612c:	d09b278b 	ldhu	r2,27806(gp)
10006130:	10bfffcc 	andi	r2,r2,65535
10006134:	100b883a 	mov	r5,r2
10006138:	01040074 	movhi	r4,4097
1000613c:	2118dd04 	addi	r4,r4,25460
10006140:	0006a140 	call	10006a14 <printf>
	while (usb_ctl_val != 0x03)
10006144:	00000206 	br	10006150 <usb_initialize+0x728>
	{
		usb_ctl_val = UsbGetRetryCnt();
10006148:	00059280 	call	10005928 <UsbGetRetryCnt>
1000614c:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10006150:	d09b278b 	ldhu	r2,27806(gp)
10006154:	10bfffcc 	andi	r2,r2,65535
10006158:	108000d8 	cmpnei	r2,r2,3
1000615c:	103ffa1e 	bne	r2,zero,10006148 <__alt_data_end+0xf8006148>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10006160:	01040074 	movhi	r4,4097
10006164:	2118e904 	addi	r4,r4,25508
10006168:	0006b100 	call	10006b10 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
1000616c:	01415b04 	movi	r5,1388
10006170:	01000084 	movi	r4,2
10006174:	00015ec0 	call	100015ec <IO_write>
	code = IO_read(HPI_DATA);
10006178:	0009883a 	mov	r4,zero
1000617c:	00016680 	call	10001668 <IO_read>
10006180:	d09b2a8d 	sth	r2,27818(gp)
	code = code & 0x003;
10006184:	d09b2a8b 	ldhu	r2,27818(gp)
10006188:	108000cc 	andi	r2,r2,3
1000618c:	d09b2a8d 	sth	r2,27818(gp)
	printf("\ncode = %x\n", code);
10006190:	d09b2a8b 	ldhu	r2,27818(gp)
10006194:	10bfffcc 	andi	r2,r2,65535
10006198:	100b883a 	mov	r5,r2
1000619c:	01040074 	movhi	r4,4097
100061a0:	2118fc04 	addi	r4,r4,25584
100061a4:	0006a140 	call	10006a14 <printf>

	if (code == 0x01)
100061a8:	d09b2a8b 	ldhu	r2,27818(gp)
100061ac:	10bfffcc 	andi	r2,r2,65535
100061b0:	10800058 	cmpnei	r2,r2,1
100061b4:	1000041e 	bne	r2,zero,100061c8 <usb_initialize+0x7a0>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
100061b8:	01040074 	movhi	r4,4097
100061bc:	2118ff04 	addi	r4,r4,25596
100061c0:	0006b100 	call	10006b10 <puts>
100061c4:	00000306 	br	100061d4 <usb_initialize+0x7ac>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
100061c8:	01040074 	movhi	r4,4097
100061cc:	21190e04 	addi	r4,r4,25656
100061d0:	0006b100 	call	10006b10 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
100061d4:	01415d84 	movi	r5,1398
100061d8:	01000084 	movi	r4,2
100061dc:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x073F);
100061e0:	0141cfc4 	movi	r5,1855
100061e4:	0009883a 	mov	r4,zero
100061e8:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x8105);
100061ec:	01604154 	movui	r5,33029
100061f0:	0009883a 	mov	r4,zero
100061f4:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0003);
100061f8:	014000c4 	movi	r5,3
100061fc:	0009883a 	mov	r4,zero
10006200:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0008);
10006204:	01400204 	movi	r5,8
10006208:	0009883a 	mov	r4,zero
1000620c:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10006210:	016b0294 	movui	r5,44042
10006214:	0009883a 	mov	r4,zero
10006218:	00015ec0 	call	100015ec <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
1000621c:	01415d84 	movi	r5,1398
10006220:	01006c04 	movi	r4,432
10006224:	00048b40 	call	100048b4 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10006228:	01415f04 	movi	r5,1404
1000622c:	01000084 	movi	r4,2
10006230:	00015ec0 	call	100015ec <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10006234:	0009883a 	mov	r4,zero
10006238:	00016680 	call	10001668 <IO_read>
1000623c:	d09b29c5 	stb	r2,27815(gp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10006240:	d09b29c3 	ldbu	r2,27815(gp)
10006244:	10803fcc 	andi	r2,r2,255
10006248:	100b883a 	mov	r5,r2
1000624c:	01040074 	movhi	r4,4097
10006250:	21191704 	addi	r4,r4,25692
10006254:	0006a140 	call	10006a14 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10006258:	000521c0 	call	1000521c <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000625c:	00000306 	br	1000626c <usb_initialize+0x844>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10006260:	000521c0 	call	1000521c <UsbSetConfig>
		usleep(10*1000);
10006264:	0109c404 	movi	r4,10000
10006268:	0013fa00 	call	10013fa0 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000626c:	010000c4 	movi	r4,3
10006270:	00016680 	call	10001668 <IO_read>
10006274:	10bfffcc 	andi	r2,r2,65535
10006278:	1080040c 	andi	r2,r2,16
1000627c:	103ff826 	beq	r2,zero,10006260 <__alt_data_end+0xf8006260>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10006280:	00058a40 	call	100058a4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10006284:	01414184 	movi	r5,1286
10006288:	01000084 	movi	r4,2
1000628c:	00015ec0 	call	100015ec <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10006290:	0009883a 	mov	r4,zero
10006294:	00016680 	call	10001668 <IO_read>
10006298:	10bfffcc 	andi	r2,r2,65535
1000629c:	100b883a 	mov	r5,r2
100062a0:	01040074 	movhi	r4,4097
100062a4:	21192104 	addi	r4,r4,25732
100062a8:	0006a140 	call	10006a14 <printf>

	IO_write(HPI_ADDR,0x0508);
100062ac:	01414204 	movi	r5,1288
100062b0:	01000084 	movi	r4,2
100062b4:	00015ec0 	call	100015ec <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100062b8:	0009883a 	mov	r4,zero
100062bc:	00016680 	call	10001668 <IO_read>
100062c0:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
100062c4:	d09b278b 	ldhu	r2,27806(gp)
100062c8:	10bfffcc 	andi	r2,r2,65535
100062cc:	100b883a 	mov	r5,r2
100062d0:	01040074 	movhi	r4,4097
100062d4:	21192c04 	addi	r4,r4,25776
100062d8:	0006a140 	call	10006a14 <printf>
	while (usb_ctl_val != 0x03)
100062dc:	00000206 	br	100062e8 <usb_initialize+0x8c0>
	{
		usb_ctl_val = UsbGetRetryCnt();
100062e0:	00059280 	call	10005928 <UsbGetRetryCnt>
100062e4:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100062e8:	d09b278b 	ldhu	r2,27806(gp)
100062ec:	10bfffcc 	andi	r2,r2,65535
100062f0:	108000d8 	cmpnei	r2,r2,3
100062f4:	103ffa1e 	bne	r2,zero,100062e0 <__alt_data_end+0xf80062e0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
100062f8:	01040074 	movhi	r4,4097
100062fc:	21193804 	addi	r4,r4,25824
10006300:	0006b100 	call	10006b10 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10006304:	000531c0 	call	1000531c <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006308:	00000306 	br	10006318 <usb_initialize+0x8f0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
1000630c:	000531c0 	call	1000531c <UsbClassRequest>
		usleep(10*1000);
10006310:	0109c404 	movi	r4,10000
10006314:	0013fa00 	call	10013fa0 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006318:	010000c4 	movi	r4,3
1000631c:	00016680 	call	10001668 <IO_read>
10006320:	10bfffcc 	andi	r2,r2,65535
10006324:	1080040c 	andi	r2,r2,16
10006328:	103ff826 	beq	r2,zero,1000630c <__alt_data_end+0xf800630c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000632c:	00058a40 	call	100058a4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10006330:	01414184 	movi	r5,1286
10006334:	01000084 	movi	r4,2
10006338:	00015ec0 	call	100015ec <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000633c:	0009883a 	mov	r4,zero
10006340:	00016680 	call	10001668 <IO_read>
10006344:	10bfffcc 	andi	r2,r2,65535
10006348:	100b883a 	mov	r5,r2
1000634c:	01040074 	movhi	r4,4097
10006350:	21194a04 	addi	r4,r4,25896
10006354:	0006a140 	call	10006a14 <printf>

	IO_write(HPI_ADDR,0x0508);
10006358:	01414204 	movi	r5,1288
1000635c:	01000084 	movi	r4,2
10006360:	00015ec0 	call	100015ec <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10006364:	0009883a 	mov	r4,zero
10006368:	00016680 	call	10001668 <IO_read>
1000636c:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10006370:	d09b278b 	ldhu	r2,27806(gp)
10006374:	10bfffcc 	andi	r2,r2,65535
10006378:	100b883a 	mov	r5,r2
1000637c:	01040074 	movhi	r4,4097
10006380:	21195504 	addi	r4,r4,25940
10006384:	0006a140 	call	10006a14 <printf>
	while (usb_ctl_val != 0x03)
10006388:	00000206 	br	10006394 <usb_initialize+0x96c>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000638c:	00059280 	call	10005928 <UsbGetRetryCnt>
10006390:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10006394:	d09b278b 	ldhu	r2,27806(gp)
10006398:	10bfffcc 	andi	r2,r2,65535
1000639c:	108000d8 	cmpnei	r2,r2,3
100063a0:	103ffa1e 	bne	r2,zero,1000638c <__alt_data_end+0xf800638c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
100063a4:	01040074 	movhi	r4,4097
100063a8:	21196104 	addi	r4,r4,25988
100063ac:	0006b100 	call	10006b10 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
100063b0:	000541c0 	call	1000541c <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100063b4:	00000306 	br	100063c4 <usb_initialize+0x99c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
100063b8:	000541c0 	call	1000541c <UsbGetHidDesc>
		usleep(10*1000);
100063bc:	0109c404 	movi	r4,10000
100063c0:	0013fa00 	call	10013fa0 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100063c4:	010000c4 	movi	r4,3
100063c8:	00016680 	call	10001668 <IO_read>
100063cc:	10bfffcc 	andi	r2,r2,65535
100063d0:	1080040c 	andi	r2,r2,16
100063d4:	103ff826 	beq	r2,zero,100063b8 <__alt_data_end+0xf80063b8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100063d8:	00058a40 	call	100058a4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100063dc:	01414184 	movi	r5,1286
100063e0:	01000084 	movi	r4,2
100063e4:	00015ec0 	call	100015ec <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
100063e8:	0009883a 	mov	r4,zero
100063ec:	00016680 	call	10001668 <IO_read>
100063f0:	10bfffcc 	andi	r2,r2,65535
100063f4:	100b883a 	mov	r5,r2
100063f8:	01040074 	movhi	r4,4097
100063fc:	21194a04 	addi	r4,r4,25896
10006400:	0006a140 	call	10006a14 <printf>

	IO_write(HPI_ADDR,0x0508);
10006404:	01414204 	movi	r5,1288
10006408:	01000084 	movi	r4,2
1000640c:	00015ec0 	call	100015ec <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10006410:	0009883a 	mov	r4,zero
10006414:	00016680 	call	10001668 <IO_read>
10006418:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
1000641c:	d09b278b 	ldhu	r2,27806(gp)
10006420:	10bfffcc 	andi	r2,r2,65535
10006424:	100b883a 	mov	r5,r2
10006428:	01040074 	movhi	r4,4097
1000642c:	21195504 	addi	r4,r4,25940
10006430:	0006a140 	call	10006a14 <printf>
	while (usb_ctl_val != 0x03)
10006434:	00000206 	br	10006440 <usb_initialize+0xa18>
	{
		usb_ctl_val = UsbGetRetryCnt();
10006438:	00059280 	call	10005928 <UsbGetRetryCnt>
1000643c:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10006440:	d09b278b 	ldhu	r2,27806(gp)
10006444:	10bfffcc 	andi	r2,r2,65535
10006448:	108000d8 	cmpnei	r2,r2,3
1000644c:	103ffa1e 	bne	r2,zero,10006438 <__alt_data_end+0xf8006438>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10006450:	01040074 	movhi	r4,4097
10006454:	21197304 	addi	r4,r4,26060
10006458:	0006b100 	call	10006b10 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
1000645c:	00055640 	call	10005564 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006460:	00000306 	br	10006470 <usb_initialize+0xa48>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10006464:	00055640 	call	10005564 <UsbGetReportDesc>
		usleep(10*1000);
10006468:	0109c404 	movi	r4,10000
1000646c:	0013fa00 	call	10013fa0 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006470:	010000c4 	movi	r4,3
10006474:	00016680 	call	10001668 <IO_read>
10006478:	10bfffcc 	andi	r2,r2,65535
1000647c:	1080040c 	andi	r2,r2,16
10006480:	103ff826 	beq	r2,zero,10006464 <__alt_data_end+0xf8006464>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10006484:	00058a40 	call	100058a4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10006488:	01414184 	movi	r5,1286
1000648c:	01000084 	movi	r4,2
10006490:	00015ec0 	call	100015ec <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10006494:	0009883a 	mov	r4,zero
10006498:	00016680 	call	10001668 <IO_read>
1000649c:	10bfffcc 	andi	r2,r2,65535
100064a0:	100b883a 	mov	r5,r2
100064a4:	01040074 	movhi	r4,4097
100064a8:	21198704 	addi	r4,r4,26140
100064ac:	0006a140 	call	10006a14 <printf>

	IO_write(HPI_ADDR,0x0508);
100064b0:	01414204 	movi	r5,1288
100064b4:	01000084 	movi	r4,2
100064b8:	00015ec0 	call	100015ec <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100064bc:	0009883a 	mov	r4,zero
100064c0:	00016680 	call	10001668 <IO_read>
100064c4:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
100064c8:	d09b278b 	ldhu	r2,27806(gp)
100064cc:	10bfffcc 	andi	r2,r2,65535
100064d0:	100b883a 	mov	r5,r2
100064d4:	01040074 	movhi	r4,4097
100064d8:	21199304 	addi	r4,r4,26188
100064dc:	0006a140 	call	10006a14 <printf>
	while (usb_ctl_val != 0x03)
100064e0:	00000206 	br	100064ec <usb_initialize+0xac4>
	{
		usb_ctl_val = UsbGetRetryCnt();
100064e4:	00059280 	call	10005928 <UsbGetRetryCnt>
100064e8:	d09b278d 	sth	r2,27806(gp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100064ec:	d09b278b 	ldhu	r2,27806(gp)
100064f0:	10bfffcc 	andi	r2,r2,65535
100064f4:	108000d8 	cmpnei	r2,r2,3
100064f8:	103ffa1e 	bne	r2,zero,100064e4 <__alt_data_end+0xf80064e4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
100064fc:	01040074 	movhi	r4,4097
10006500:	21199f04 	addi	r4,r4,26236
10006504:	0006b100 	call	10006b10 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	// usleep(10000);
}
10006508:	0001883a 	nop
1000650c:	e037883a 	mov	sp,fp
10006510:	dfc00117 	ldw	ra,4(sp)
10006514:	df000017 	ldw	fp,0(sp)
10006518:	dec00204 	addi	sp,sp,8
1000651c:	f800283a 	ret

10006520 <get_keycode_value>:


// Should be place in a while loop to keep fetching keycodes
int get_keycode_value() 
{
10006520:	defffd04 	addi	sp,sp,-12
10006524:	dfc00215 	stw	ra,8(sp)
10006528:	df000115 	stw	fp,4(sp)
1000652c:	df000104 	addi	fp,sp,4
	// int keycode0 = 0;
	// int keycode1 = 0;
	int keycode = 0;
10006530:	e03fff15 	stw	zero,-4(fp)

	toggle++;
10006534:	d09b2983 	ldbu	r2,27814(gp)
10006538:	10800044 	addi	r2,r2,1
1000653c:	d09b2985 	stb	r2,27814(gp)
	IO_write(HPI_ADDR,0x0500); //the start address
10006540:	01414004 	movi	r5,1280
10006544:	01000084 	movi	r4,2
10006548:	00015ec0 	call	100015ec <IO_write>
	//data phase IN-1
	IO_write(HPI_DATA,0x051c); //500
1000654c:	01414704 	movi	r5,1308
10006550:	0009883a 	mov	r4,zero
10006554:	00015ec0 	call	100015ec <IO_write>

	IO_write(HPI_DATA,0x000f & data_size);//2 data length
10006558:	d09b29c3 	ldbu	r2,27815(gp)
1000655c:	10803fcc 	andi	r2,r2,255
10006560:	108003cc 	andi	r2,r2,15
10006564:	100b883a 	mov	r5,r2
10006568:	0009883a 	mov	r4,zero
1000656c:	00015ec0 	call	100015ec <IO_write>

	IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10006570:	0140a444 	movi	r5,657
10006574:	0009883a 	mov	r4,zero
10006578:	00015ec0 	call	100015ec <IO_write>
	if(toggle%2)
1000657c:	d09b2983 	ldbu	r2,27814(gp)
10006580:	1080004c 	andi	r2,r2,1
10006584:	10803fcc 	andi	r2,r2,255
10006588:	10000426 	beq	r2,zero,1000659c <get_keycode_value+0x7c>
	{
		IO_write(HPI_DATA,0x0001);//6 //data 1
1000658c:	01400044 	movi	r5,1
10006590:	0009883a 	mov	r4,zero
10006594:	00015ec0 	call	100015ec <IO_write>
10006598:	00000306 	br	100065a8 <get_keycode_value+0x88>
	}
	else
	{
		IO_write(HPI_DATA,0x0041);//6 //data 1
1000659c:	01401044 	movi	r5,65
100065a0:	0009883a 	mov	r4,zero
100065a4:	00015ec0 	call	100015ec <IO_write>
	}
	IO_write(HPI_DATA,0x0013);//8
100065a8:	014004c4 	movi	r5,19
100065ac:	0009883a 	mov	r4,zero
100065b0:	00015ec0 	call	100015ec <IO_write>
	IO_write(HPI_DATA,0x0000);//a
100065b4:	000b883a 	mov	r5,zero
100065b8:	0009883a 	mov	r4,zero
100065bc:	00015ec0 	call	100015ec <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100065c0:	01414004 	movi	r5,1280
100065c4:	01006c04 	movi	r4,432
100065c8:	00048b40 	call	100048b4 <UsbWrite>
	
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100065cc:	00002506 	br	10006664 <get_keycode_value+0x144>
	{
		IO_write(HPI_ADDR,0x0500); //the start address
100065d0:	01414004 	movi	r5,1280
100065d4:	01000084 	movi	r4,2
100065d8:	00015ec0 	call	100015ec <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
100065dc:	01414704 	movi	r5,1308
100065e0:	0009883a 	mov	r4,zero
100065e4:	00015ec0 	call	100015ec <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
100065e8:	d09b29c3 	ldbu	r2,27815(gp)
100065ec:	10803fcc 	andi	r2,r2,255
100065f0:	108003cc 	andi	r2,r2,15
100065f4:	100b883a 	mov	r5,r2
100065f8:	0009883a 	mov	r4,zero
100065fc:	00015ec0 	call	100015ec <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10006600:	0140a444 	movi	r5,657
10006604:	0009883a 	mov	r4,zero
10006608:	00015ec0 	call	100015ec <IO_write>
		if(toggle%2)
1000660c:	d09b2983 	ldbu	r2,27814(gp)
10006610:	1080004c 	andi	r2,r2,1
10006614:	10803fcc 	andi	r2,r2,255
10006618:	10000426 	beq	r2,zero,1000662c <get_keycode_value+0x10c>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
1000661c:	01400044 	movi	r5,1
10006620:	0009883a 	mov	r4,zero
10006624:	00015ec0 	call	100015ec <IO_write>
10006628:	00000306 	br	10006638 <get_keycode_value+0x118>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
1000662c:	01401044 	movi	r5,65
10006630:	0009883a 	mov	r4,zero
10006634:	00015ec0 	call	100015ec <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10006638:	014004c4 	movi	r5,19
1000663c:	0009883a 	mov	r4,zero
10006640:	00015ec0 	call	100015ec <IO_write>
		IO_write(HPI_DATA,0x0000);//
10006644:	000b883a 	mov	r5,zero
10006648:	0009883a 	mov	r4,zero
1000664c:	00015ec0 	call	100015ec <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10006650:	01414004 	movi	r5,1280
10006654:	01006c04 	movi	r4,432
10006658:	00048b40 	call	100048b4 <UsbWrite>
		usleep(10*1000);
1000665c:	0109c404 	movi	r4,10000
10006660:	0013fa00 	call	10013fa0 <usleep>
	}
	IO_write(HPI_DATA,0x0013);//8
	IO_write(HPI_DATA,0x0000);//a
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
	
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006664:	010000c4 	movi	r4,3
10006668:	00016680 	call	10001668 <IO_read>
1000666c:	10bfffcc 	andi	r2,r2,65535
10006670:	1080040c 	andi	r2,r2,16
10006674:	103fd626 	beq	r2,zero,100065d0 <__alt_data_end+0xf80065d0>
		IO_write(HPI_DATA,0x0000);//
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		usleep(10*1000);
	}//end while

	usb_ctl_val = UsbWaitTDListDone();
10006678:	00058a40 	call	100058a4 <UsbWaitTDListDone>
1000667c:	d09b278d 	sth	r2,27806(gp)
	/* Four key support */
	// keycode0 = UsbRead(0x051e);
	// keycode1 = UsbRead(0x0520);
	// keycode = keycode0 + (keycode1 << 8);
	/********************/
	keycode = UsbRead(0x051e);
10006680:	01014784 	movi	r4,1310
10006684:	000490c0 	call	1000490c <UsbRead>
10006688:	10bfffcc 	andi	r2,r2,65535
1000668c:	e0bfff15 	stw	r2,-4(fp)
	printf("\nfirst two keycode values are %04x\n",keycode);
10006690:	e17fff17 	ldw	r5,-4(fp)
10006694:	01040074 	movhi	r4,4097
10006698:	2119b304 	addi	r4,r4,26316
1000669c:	0006a140 	call	10006a14 <printf>
	// We only need the first keycode, which is at the lower byte of keycode.
	// Send the keycode to hardware via PIO.
	*keycode_base = keycode & 0xff;
100066a0:	00803404 	movi	r2,208
100066a4:	e0ffff17 	ldw	r3,-4(fp)
100066a8:	10c00005 	stb	r3,0(r2)

	usleep(200);//usleep(5000);
100066ac:	01003204 	movi	r4,200
100066b0:	0013fa00 	call	10013fa0 <usleep>
	usb_ctl_val = UsbRead(ctl_reg);
100066b4:	d09b280b 	ldhu	r2,27808(gp)
100066b8:	10bfffcc 	andi	r2,r2,65535
100066bc:	1009883a 	mov	r4,r2
100066c0:	000490c0 	call	1000490c <UsbRead>
100066c4:	d09b278d 	sth	r2,27806(gp)

	if(!(usb_ctl_val & no_device))
100066c8:	d0db278b 	ldhu	r3,27806(gp)
100066cc:	d09b288b 	ldhu	r2,27810(gp)
100066d0:	1884703a 	and	r2,r3,r2
100066d4:	10bfffcc 	andi	r2,r2,65535
100066d8:	1000401e 	bne	r2,zero,100067dc <get_keycode_value+0x2bc>
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
100066dc:	d01b2a05 	stb	zero,27816(gp)
100066e0:	00000f06 	br	10006720 <get_keycode_value+0x200>
		{
			usleep(5*1000);
100066e4:	0104e204 	movi	r4,5000
100066e8:	0013fa00 	call	10013fa0 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100066ec:	d09b280b 	ldhu	r2,27808(gp)
100066f0:	10bfffcc 	andi	r2,r2,65535
100066f4:	1009883a 	mov	r4,r2
100066f8:	000490c0 	call	1000490c <UsbRead>
100066fc:	d09b278d 	sth	r2,27806(gp)
			if(usb_ctl_val & no_device) break;
10006700:	d0db278b 	ldhu	r3,27806(gp)
10006704:	d09b288b 	ldhu	r2,27810(gp)
10006708:	1884703a 	and	r2,r3,r2
1000670c:	10bfffcc 	andi	r2,r2,65535
10006710:	1000081e 	bne	r2,zero,10006734 <get_keycode_value+0x214>
	usb_ctl_val = UsbRead(ctl_reg);

	if(!(usb_ctl_val & no_device))
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10006714:	d09b2a03 	ldbu	r2,27816(gp)
10006718:	10800044 	addi	r2,r2,1
1000671c:	d09b2a05 	stb	r2,27816(gp)
10006720:	d09b2a03 	ldbu	r2,27816(gp)
10006724:	10803fcc 	andi	r2,r2,255
10006728:	108001f0 	cmpltui	r2,r2,7
1000672c:	103fed1e 	bne	r2,zero,100066e4 <__alt_data_end+0xf80066e4>
10006730:	00000106 	br	10006738 <get_keycode_value+0x218>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
10006734:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
10006738:	d0db278b 	ldhu	r3,27806(gp)
1000673c:	d09b288b 	ldhu	r2,27810(gp)
10006740:	1884703a 	and	r2,r3,r2
10006744:	10bfffcc 	andi	r2,r2,65535
10006748:	1000241e 	bne	r2,zero,100067dc <get_keycode_value+0x2bc>
		{
			printf("\n[INFO]: the keyboard has been removed!!! \n");
1000674c:	01040074 	movhi	r4,4097
10006750:	2119bc04 	addi	r4,r4,26352
10006754:	0006b100 	call	10006b10 <puts>
			printf("[INFO]: please insert again!!! \n");
10006758:	01040074 	movhi	r4,4097
1000675c:	2119c704 	addi	r4,r4,26396
10006760:	0006b100 	call	10006b10 <puts>
		}
	}

	while (!(usb_ctl_val & no_device))
10006764:	00001d06 	br	100067dc <get_keycode_value+0x2bc>
	{

		usb_ctl_val = UsbRead(ctl_reg);
10006768:	d09b280b 	ldhu	r2,27808(gp)
1000676c:	10bfffcc 	andi	r2,r2,65535
10006770:	1009883a 	mov	r4,r2
10006774:	000490c0 	call	1000490c <UsbRead>
10006778:	d09b278d 	sth	r2,27806(gp)
		usleep(5*1000);
1000677c:	0104e204 	movi	r4,5000
10006780:	0013fa00 	call	10013fa0 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10006784:	d09b280b 	ldhu	r2,27808(gp)
10006788:	10bfffcc 	andi	r2,r2,65535
1000678c:	1009883a 	mov	r4,r2
10006790:	000490c0 	call	1000490c <UsbRead>
10006794:	d09b278d 	sth	r2,27806(gp)
		usleep(5*1000);
10006798:	0104e204 	movi	r4,5000
1000679c:	0013fa00 	call	10013fa0 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
100067a0:	d09b280b 	ldhu	r2,27808(gp)
100067a4:	10bfffcc 	andi	r2,r2,65535
100067a8:	1009883a 	mov	r4,r2
100067ac:	000490c0 	call	1000490c <UsbRead>
100067b0:	d09b278d 	sth	r2,27806(gp)
		usleep(5*1000);
100067b4:	0104e204 	movi	r4,5000
100067b8:	0013fa00 	call	10013fa0 <usleep>

		if(usb_ctl_val & no_device)
100067bc:	d0db278b 	ldhu	r3,27806(gp)
100067c0:	d09b288b 	ldhu	r2,27810(gp)
100067c4:	1884703a 	and	r2,r3,r2
100067c8:	10bfffcc 	andi	r2,r2,65535
100067cc:	10000126 	beq	r2,zero,100067d4 <get_keycode_value+0x2b4>
			usb_initialize();
100067d0:	0005a280 	call	10005a28 <usb_initialize>

		usleep(200);
100067d4:	01003204 	movi	r4,200
100067d8:	0013fa00 	call	10013fa0 <usleep>
			printf("\n[INFO]: the keyboard has been removed!!! \n");
			printf("[INFO]: please insert again!!! \n");
		}
	}

	while (!(usb_ctl_val & no_device))
100067dc:	d0db278b 	ldhu	r3,27806(gp)
100067e0:	d09b288b 	ldhu	r2,27810(gp)
100067e4:	1884703a 	and	r2,r3,r2
100067e8:	10bfffcc 	andi	r2,r2,65535
100067ec:	103fde26 	beq	r2,zero,10006768 <__alt_data_end+0xf8006768>
		if(usb_ctl_val & no_device)
			usb_initialize();

		usleep(200);
	}
	return keycode;
100067f0:	e0bfff17 	ldw	r2,-4(fp)
}
100067f4:	e037883a 	mov	sp,fp
100067f8:	dfc00117 	ldw	ra,4(sp)
100067fc:	df000017 	ldw	fp,0(sp)
10006800:	dec00204 	addi	sp,sp,8
10006804:	f800283a 	ret

10006808 <__divsi3>:
10006808:	20001b16 	blt	r4,zero,10006878 <__divsi3+0x70>
1000680c:	000f883a 	mov	r7,zero
10006810:	28001616 	blt	r5,zero,1000686c <__divsi3+0x64>
10006814:	200d883a 	mov	r6,r4
10006818:	29001a2e 	bgeu	r5,r4,10006884 <__divsi3+0x7c>
1000681c:	00800804 	movi	r2,32
10006820:	00c00044 	movi	r3,1
10006824:	00000106 	br	1000682c <__divsi3+0x24>
10006828:	10000d26 	beq	r2,zero,10006860 <__divsi3+0x58>
1000682c:	294b883a 	add	r5,r5,r5
10006830:	10bfffc4 	addi	r2,r2,-1
10006834:	18c7883a 	add	r3,r3,r3
10006838:	293ffb36 	bltu	r5,r4,10006828 <__alt_data_end+0xf8006828>
1000683c:	0005883a 	mov	r2,zero
10006840:	18000726 	beq	r3,zero,10006860 <__divsi3+0x58>
10006844:	0005883a 	mov	r2,zero
10006848:	31400236 	bltu	r6,r5,10006854 <__divsi3+0x4c>
1000684c:	314dc83a 	sub	r6,r6,r5
10006850:	10c4b03a 	or	r2,r2,r3
10006854:	1806d07a 	srli	r3,r3,1
10006858:	280ad07a 	srli	r5,r5,1
1000685c:	183ffa1e 	bne	r3,zero,10006848 <__alt_data_end+0xf8006848>
10006860:	38000126 	beq	r7,zero,10006868 <__divsi3+0x60>
10006864:	0085c83a 	sub	r2,zero,r2
10006868:	f800283a 	ret
1000686c:	014bc83a 	sub	r5,zero,r5
10006870:	39c0005c 	xori	r7,r7,1
10006874:	003fe706 	br	10006814 <__alt_data_end+0xf8006814>
10006878:	0109c83a 	sub	r4,zero,r4
1000687c:	01c00044 	movi	r7,1
10006880:	003fe306 	br	10006810 <__alt_data_end+0xf8006810>
10006884:	00c00044 	movi	r3,1
10006888:	003fee06 	br	10006844 <__alt_data_end+0xf8006844>

1000688c <__modsi3>:
1000688c:	20001716 	blt	r4,zero,100068ec <__modsi3+0x60>
10006890:	000f883a 	mov	r7,zero
10006894:	2005883a 	mov	r2,r4
10006898:	28001216 	blt	r5,zero,100068e4 <__modsi3+0x58>
1000689c:	2900162e 	bgeu	r5,r4,100068f8 <__modsi3+0x6c>
100068a0:	01800804 	movi	r6,32
100068a4:	00c00044 	movi	r3,1
100068a8:	00000106 	br	100068b0 <__modsi3+0x24>
100068ac:	30000a26 	beq	r6,zero,100068d8 <__modsi3+0x4c>
100068b0:	294b883a 	add	r5,r5,r5
100068b4:	31bfffc4 	addi	r6,r6,-1
100068b8:	18c7883a 	add	r3,r3,r3
100068bc:	293ffb36 	bltu	r5,r4,100068ac <__alt_data_end+0xf80068ac>
100068c0:	18000526 	beq	r3,zero,100068d8 <__modsi3+0x4c>
100068c4:	1806d07a 	srli	r3,r3,1
100068c8:	11400136 	bltu	r2,r5,100068d0 <__modsi3+0x44>
100068cc:	1145c83a 	sub	r2,r2,r5
100068d0:	280ad07a 	srli	r5,r5,1
100068d4:	183ffb1e 	bne	r3,zero,100068c4 <__alt_data_end+0xf80068c4>
100068d8:	38000126 	beq	r7,zero,100068e0 <__modsi3+0x54>
100068dc:	0085c83a 	sub	r2,zero,r2
100068e0:	f800283a 	ret
100068e4:	014bc83a 	sub	r5,zero,r5
100068e8:	003fec06 	br	1000689c <__alt_data_end+0xf800689c>
100068ec:	0109c83a 	sub	r4,zero,r4
100068f0:	01c00044 	movi	r7,1
100068f4:	003fe706 	br	10006894 <__alt_data_end+0xf8006894>
100068f8:	00c00044 	movi	r3,1
100068fc:	003ff106 	br	100068c4 <__alt_data_end+0xf80068c4>

10006900 <__udivsi3>:
10006900:	200d883a 	mov	r6,r4
10006904:	2900152e 	bgeu	r5,r4,1000695c <__udivsi3+0x5c>
10006908:	28001416 	blt	r5,zero,1000695c <__udivsi3+0x5c>
1000690c:	00800804 	movi	r2,32
10006910:	00c00044 	movi	r3,1
10006914:	00000206 	br	10006920 <__udivsi3+0x20>
10006918:	10000e26 	beq	r2,zero,10006954 <__udivsi3+0x54>
1000691c:	28000516 	blt	r5,zero,10006934 <__udivsi3+0x34>
10006920:	294b883a 	add	r5,r5,r5
10006924:	10bfffc4 	addi	r2,r2,-1
10006928:	18c7883a 	add	r3,r3,r3
1000692c:	293ffa36 	bltu	r5,r4,10006918 <__alt_data_end+0xf8006918>
10006930:	18000826 	beq	r3,zero,10006954 <__udivsi3+0x54>
10006934:	0005883a 	mov	r2,zero
10006938:	31400236 	bltu	r6,r5,10006944 <__udivsi3+0x44>
1000693c:	314dc83a 	sub	r6,r6,r5
10006940:	10c4b03a 	or	r2,r2,r3
10006944:	1806d07a 	srli	r3,r3,1
10006948:	280ad07a 	srli	r5,r5,1
1000694c:	183ffa1e 	bne	r3,zero,10006938 <__alt_data_end+0xf8006938>
10006950:	f800283a 	ret
10006954:	0005883a 	mov	r2,zero
10006958:	f800283a 	ret
1000695c:	00c00044 	movi	r3,1
10006960:	003ff406 	br	10006934 <__alt_data_end+0xf8006934>

10006964 <__umodsi3>:
10006964:	2005883a 	mov	r2,r4
10006968:	2900122e 	bgeu	r5,r4,100069b4 <__umodsi3+0x50>
1000696c:	28001116 	blt	r5,zero,100069b4 <__umodsi3+0x50>
10006970:	01800804 	movi	r6,32
10006974:	00c00044 	movi	r3,1
10006978:	00000206 	br	10006984 <__umodsi3+0x20>
1000697c:	30000c26 	beq	r6,zero,100069b0 <__umodsi3+0x4c>
10006980:	28000516 	blt	r5,zero,10006998 <__umodsi3+0x34>
10006984:	294b883a 	add	r5,r5,r5
10006988:	31bfffc4 	addi	r6,r6,-1
1000698c:	18c7883a 	add	r3,r3,r3
10006990:	293ffa36 	bltu	r5,r4,1000697c <__alt_data_end+0xf800697c>
10006994:	18000626 	beq	r3,zero,100069b0 <__umodsi3+0x4c>
10006998:	1806d07a 	srli	r3,r3,1
1000699c:	11400136 	bltu	r2,r5,100069a4 <__umodsi3+0x40>
100069a0:	1145c83a 	sub	r2,r2,r5
100069a4:	280ad07a 	srli	r5,r5,1
100069a8:	183ffb1e 	bne	r3,zero,10006998 <__alt_data_end+0xf8006998>
100069ac:	f800283a 	ret
100069b0:	f800283a 	ret
100069b4:	00c00044 	movi	r3,1
100069b8:	003ff706 	br	10006998 <__alt_data_end+0xf8006998>

100069bc <__mulsi3>:
100069bc:	0005883a 	mov	r2,zero
100069c0:	20000726 	beq	r4,zero,100069e0 <__mulsi3+0x24>
100069c4:	20c0004c 	andi	r3,r4,1
100069c8:	2008d07a 	srli	r4,r4,1
100069cc:	18000126 	beq	r3,zero,100069d4 <__mulsi3+0x18>
100069d0:	1145883a 	add	r2,r2,r5
100069d4:	294b883a 	add	r5,r5,r5
100069d8:	203ffa1e 	bne	r4,zero,100069c4 <__alt_data_end+0xf80069c4>
100069dc:	f800283a 	ret
100069e0:	f800283a 	ret

100069e4 <_printf_r>:
100069e4:	defffd04 	addi	sp,sp,-12
100069e8:	2805883a 	mov	r2,r5
100069ec:	dfc00015 	stw	ra,0(sp)
100069f0:	d9800115 	stw	r6,4(sp)
100069f4:	d9c00215 	stw	r7,8(sp)
100069f8:	21400217 	ldw	r5,8(r4)
100069fc:	d9c00104 	addi	r7,sp,4
10006a00:	100d883a 	mov	r6,r2
10006a04:	0006bbc0 	call	10006bbc <___vfprintf_internal_r>
10006a08:	dfc00017 	ldw	ra,0(sp)
10006a0c:	dec00304 	addi	sp,sp,12
10006a10:	f800283a 	ret

10006a14 <printf>:
10006a14:	defffc04 	addi	sp,sp,-16
10006a18:	dfc00015 	stw	ra,0(sp)
10006a1c:	d9400115 	stw	r5,4(sp)
10006a20:	d9800215 	stw	r6,8(sp)
10006a24:	d9c00315 	stw	r7,12(sp)
10006a28:	008400b4 	movhi	r2,4098
10006a2c:	10959104 	addi	r2,r2,22084
10006a30:	10800017 	ldw	r2,0(r2)
10006a34:	200b883a 	mov	r5,r4
10006a38:	d9800104 	addi	r6,sp,4
10006a3c:	11000217 	ldw	r4,8(r2)
10006a40:	0008e980 	call	10008e98 <__vfprintf_internal>
10006a44:	dfc00017 	ldw	ra,0(sp)
10006a48:	dec00404 	addi	sp,sp,16
10006a4c:	f800283a 	ret

10006a50 <_puts_r>:
10006a50:	defff604 	addi	sp,sp,-40
10006a54:	dc000715 	stw	r16,28(sp)
10006a58:	2021883a 	mov	r16,r4
10006a5c:	2809883a 	mov	r4,r5
10006a60:	dc400815 	stw	r17,32(sp)
10006a64:	dfc00915 	stw	ra,36(sp)
10006a68:	2823883a 	mov	r17,r5
10006a6c:	0006b240 	call	10006b24 <strlen>
10006a70:	10c00044 	addi	r3,r2,1
10006a74:	d8800115 	stw	r2,4(sp)
10006a78:	00840074 	movhi	r2,4097
10006a7c:	1099cf04 	addi	r2,r2,26428
10006a80:	d8800215 	stw	r2,8(sp)
10006a84:	00800044 	movi	r2,1
10006a88:	d8800315 	stw	r2,12(sp)
10006a8c:	00800084 	movi	r2,2
10006a90:	dc400015 	stw	r17,0(sp)
10006a94:	d8c00615 	stw	r3,24(sp)
10006a98:	dec00415 	stw	sp,16(sp)
10006a9c:	d8800515 	stw	r2,20(sp)
10006aa0:	80000226 	beq	r16,zero,10006aac <_puts_r+0x5c>
10006aa4:	80800e17 	ldw	r2,56(r16)
10006aa8:	10001426 	beq	r2,zero,10006afc <_puts_r+0xac>
10006aac:	81400217 	ldw	r5,8(r16)
10006ab0:	2880030b 	ldhu	r2,12(r5)
10006ab4:	10c8000c 	andi	r3,r2,8192
10006ab8:	1800061e 	bne	r3,zero,10006ad4 <_puts_r+0x84>
10006abc:	29001917 	ldw	r4,100(r5)
10006ac0:	00f7ffc4 	movi	r3,-8193
10006ac4:	10880014 	ori	r2,r2,8192
10006ac8:	20c6703a 	and	r3,r4,r3
10006acc:	2880030d 	sth	r2,12(r5)
10006ad0:	28c01915 	stw	r3,100(r5)
10006ad4:	d9800404 	addi	r6,sp,16
10006ad8:	8009883a 	mov	r4,r16
10006adc:	000b4000 	call	1000b400 <__sfvwrite_r>
10006ae0:	1000091e 	bne	r2,zero,10006b08 <_puts_r+0xb8>
10006ae4:	00800284 	movi	r2,10
10006ae8:	dfc00917 	ldw	ra,36(sp)
10006aec:	dc400817 	ldw	r17,32(sp)
10006af0:	dc000717 	ldw	r16,28(sp)
10006af4:	dec00a04 	addi	sp,sp,40
10006af8:	f800283a 	ret
10006afc:	8009883a 	mov	r4,r16
10006b00:	000af7c0 	call	1000af7c <__sinit>
10006b04:	003fe906 	br	10006aac <__alt_data_end+0xf8006aac>
10006b08:	00bfffc4 	movi	r2,-1
10006b0c:	003ff606 	br	10006ae8 <__alt_data_end+0xf8006ae8>

10006b10 <puts>:
10006b10:	008400b4 	movhi	r2,4098
10006b14:	10959104 	addi	r2,r2,22084
10006b18:	200b883a 	mov	r5,r4
10006b1c:	11000017 	ldw	r4,0(r2)
10006b20:	0006a501 	jmpi	10006a50 <_puts_r>

10006b24 <strlen>:
10006b24:	208000cc 	andi	r2,r4,3
10006b28:	10002026 	beq	r2,zero,10006bac <strlen+0x88>
10006b2c:	20800007 	ldb	r2,0(r4)
10006b30:	10002026 	beq	r2,zero,10006bb4 <strlen+0x90>
10006b34:	2005883a 	mov	r2,r4
10006b38:	00000206 	br	10006b44 <strlen+0x20>
10006b3c:	10c00007 	ldb	r3,0(r2)
10006b40:	18001826 	beq	r3,zero,10006ba4 <strlen+0x80>
10006b44:	10800044 	addi	r2,r2,1
10006b48:	10c000cc 	andi	r3,r2,3
10006b4c:	183ffb1e 	bne	r3,zero,10006b3c <__alt_data_end+0xf8006b3c>
10006b50:	10c00017 	ldw	r3,0(r2)
10006b54:	01ffbff4 	movhi	r7,65279
10006b58:	39ffbfc4 	addi	r7,r7,-257
10006b5c:	00ca303a 	nor	r5,zero,r3
10006b60:	01a02074 	movhi	r6,32897
10006b64:	19c7883a 	add	r3,r3,r7
10006b68:	31a02004 	addi	r6,r6,-32640
10006b6c:	1946703a 	and	r3,r3,r5
10006b70:	1986703a 	and	r3,r3,r6
10006b74:	1800091e 	bne	r3,zero,10006b9c <strlen+0x78>
10006b78:	10800104 	addi	r2,r2,4
10006b7c:	10c00017 	ldw	r3,0(r2)
10006b80:	19cb883a 	add	r5,r3,r7
10006b84:	00c6303a 	nor	r3,zero,r3
10006b88:	28c6703a 	and	r3,r5,r3
10006b8c:	1986703a 	and	r3,r3,r6
10006b90:	183ff926 	beq	r3,zero,10006b78 <__alt_data_end+0xf8006b78>
10006b94:	00000106 	br	10006b9c <strlen+0x78>
10006b98:	10800044 	addi	r2,r2,1
10006b9c:	10c00007 	ldb	r3,0(r2)
10006ba0:	183ffd1e 	bne	r3,zero,10006b98 <__alt_data_end+0xf8006b98>
10006ba4:	1105c83a 	sub	r2,r2,r4
10006ba8:	f800283a 	ret
10006bac:	2005883a 	mov	r2,r4
10006bb0:	003fe706 	br	10006b50 <__alt_data_end+0xf8006b50>
10006bb4:	0005883a 	mov	r2,zero
10006bb8:	f800283a 	ret

10006bbc <___vfprintf_internal_r>:
10006bbc:	deffb804 	addi	sp,sp,-288
10006bc0:	dfc04715 	stw	ra,284(sp)
10006bc4:	ddc04515 	stw	r23,276(sp)
10006bc8:	dd404315 	stw	r21,268(sp)
10006bcc:	d9002d15 	stw	r4,180(sp)
10006bd0:	282f883a 	mov	r23,r5
10006bd4:	302b883a 	mov	r21,r6
10006bd8:	d9c02e15 	stw	r7,184(sp)
10006bdc:	df004615 	stw	fp,280(sp)
10006be0:	dd804415 	stw	r22,272(sp)
10006be4:	dd004215 	stw	r20,264(sp)
10006be8:	dcc04115 	stw	r19,260(sp)
10006bec:	dc804015 	stw	r18,256(sp)
10006bf0:	dc403f15 	stw	r17,252(sp)
10006bf4:	dc003e15 	stw	r16,248(sp)
10006bf8:	000bafc0 	call	1000bafc <_localeconv_r>
10006bfc:	10800017 	ldw	r2,0(r2)
10006c00:	1009883a 	mov	r4,r2
10006c04:	d8803415 	stw	r2,208(sp)
10006c08:	0006b240 	call	10006b24 <strlen>
10006c0c:	d8803715 	stw	r2,220(sp)
10006c10:	d8802d17 	ldw	r2,180(sp)
10006c14:	10000226 	beq	r2,zero,10006c20 <___vfprintf_internal_r+0x64>
10006c18:	10800e17 	ldw	r2,56(r2)
10006c1c:	1000fb26 	beq	r2,zero,1000700c <___vfprintf_internal_r+0x450>
10006c20:	b880030b 	ldhu	r2,12(r23)
10006c24:	10c8000c 	andi	r3,r2,8192
10006c28:	1800061e 	bne	r3,zero,10006c44 <___vfprintf_internal_r+0x88>
10006c2c:	b9001917 	ldw	r4,100(r23)
10006c30:	00f7ffc4 	movi	r3,-8193
10006c34:	10880014 	ori	r2,r2,8192
10006c38:	20c6703a 	and	r3,r4,r3
10006c3c:	b880030d 	sth	r2,12(r23)
10006c40:	b8c01915 	stw	r3,100(r23)
10006c44:	10c0020c 	andi	r3,r2,8
10006c48:	1800c326 	beq	r3,zero,10006f58 <___vfprintf_internal_r+0x39c>
10006c4c:	b8c00417 	ldw	r3,16(r23)
10006c50:	1800c126 	beq	r3,zero,10006f58 <___vfprintf_internal_r+0x39c>
10006c54:	1080068c 	andi	r2,r2,26
10006c58:	00c00284 	movi	r3,10
10006c5c:	10c0c626 	beq	r2,r3,10006f78 <___vfprintf_internal_r+0x3bc>
10006c60:	d8c00404 	addi	r3,sp,16
10006c64:	05040074 	movhi	r20,4097
10006c68:	d9001e04 	addi	r4,sp,120
10006c6c:	a519e084 	addi	r20,r20,26498
10006c70:	d8c01e15 	stw	r3,120(sp)
10006c74:	d8002015 	stw	zero,128(sp)
10006c78:	d8001f15 	stw	zero,124(sp)
10006c7c:	d8003315 	stw	zero,204(sp)
10006c80:	d8003615 	stw	zero,216(sp)
10006c84:	d8003815 	stw	zero,224(sp)
10006c88:	1811883a 	mov	r8,r3
10006c8c:	d8003915 	stw	zero,228(sp)
10006c90:	d8003a15 	stw	zero,232(sp)
10006c94:	d8002f15 	stw	zero,188(sp)
10006c98:	d9002815 	stw	r4,160(sp)
10006c9c:	a8800007 	ldb	r2,0(r21)
10006ca0:	10028b26 	beq	r2,zero,100076d0 <___vfprintf_internal_r+0xb14>
10006ca4:	00c00944 	movi	r3,37
10006ca8:	a823883a 	mov	r17,r21
10006cac:	10c0021e 	bne	r2,r3,10006cb8 <___vfprintf_internal_r+0xfc>
10006cb0:	00001406 	br	10006d04 <___vfprintf_internal_r+0x148>
10006cb4:	10c00326 	beq	r2,r3,10006cc4 <___vfprintf_internal_r+0x108>
10006cb8:	8c400044 	addi	r17,r17,1
10006cbc:	88800007 	ldb	r2,0(r17)
10006cc0:	103ffc1e 	bne	r2,zero,10006cb4 <__alt_data_end+0xf8006cb4>
10006cc4:	8d61c83a 	sub	r16,r17,r21
10006cc8:	80000e26 	beq	r16,zero,10006d04 <___vfprintf_internal_r+0x148>
10006ccc:	d8c02017 	ldw	r3,128(sp)
10006cd0:	d8801f17 	ldw	r2,124(sp)
10006cd4:	45400015 	stw	r21,0(r8)
10006cd8:	1c07883a 	add	r3,r3,r16
10006cdc:	10800044 	addi	r2,r2,1
10006ce0:	d8c02015 	stw	r3,128(sp)
10006ce4:	44000115 	stw	r16,4(r8)
10006ce8:	d8801f15 	stw	r2,124(sp)
10006cec:	00c001c4 	movi	r3,7
10006cf0:	1880a916 	blt	r3,r2,10006f98 <___vfprintf_internal_r+0x3dc>
10006cf4:	42000204 	addi	r8,r8,8
10006cf8:	d9402f17 	ldw	r5,188(sp)
10006cfc:	2c0b883a 	add	r5,r5,r16
10006d00:	d9402f15 	stw	r5,188(sp)
10006d04:	88800007 	ldb	r2,0(r17)
10006d08:	1000aa26 	beq	r2,zero,10006fb4 <___vfprintf_internal_r+0x3f8>
10006d0c:	8d400044 	addi	r21,r17,1
10006d10:	8c400047 	ldb	r17,1(r17)
10006d14:	0021883a 	mov	r16,zero
10006d18:	00bfffc4 	movi	r2,-1
10006d1c:	0025883a 	mov	r18,zero
10006d20:	dc002905 	stb	r16,164(sp)
10006d24:	d8002785 	stb	zero,158(sp)
10006d28:	d8002b05 	stb	zero,172(sp)
10006d2c:	d8802a15 	stw	r2,168(sp)
10006d30:	d8003115 	stw	zero,196(sp)
10006d34:	04c01604 	movi	r19,88
10006d38:	05800244 	movi	r22,9
10006d3c:	9021883a 	mov	r16,r18
10006d40:	4039883a 	mov	fp,r8
10006d44:	ad400044 	addi	r21,r21,1
10006d48:	88bff804 	addi	r2,r17,-32
10006d4c:	98833236 	bltu	r19,r2,10007a18 <___vfprintf_internal_r+0xe5c>
10006d50:	100490ba 	slli	r2,r2,2
10006d54:	00c40034 	movhi	r3,4096
10006d58:	18db5a04 	addi	r3,r3,28008
10006d5c:	10c5883a 	add	r2,r2,r3
10006d60:	10800017 	ldw	r2,0(r2)
10006d64:	1000683a 	jmp	r2
10006d68:	10007910 	cmplti	zero,r2,484
10006d6c:	10007a18 	cmpnei	zero,r2,488
10006d70:	10007a18 	cmpnei	zero,r2,488
10006d74:	10007930 	cmpltui	zero,r2,484
10006d78:	10007a18 	cmpnei	zero,r2,488
10006d7c:	10007a18 	cmpnei	zero,r2,488
10006d80:	10007a18 	cmpnei	zero,r2,488
10006d84:	10007a18 	cmpnei	zero,r2,488
10006d88:	10007a18 	cmpnei	zero,r2,488
10006d8c:	10007a18 	cmpnei	zero,r2,488
10006d90:	10007018 	cmpnei	zero,r2,448
10006d94:	10007820 	cmpeqi	zero,r2,480
10006d98:	10007a18 	cmpnei	zero,r2,488
10006d9c:	10006edc 	xori	zero,r2,443
10006da0:	1000703c 	xorhi	zero,r2,448
10006da4:	10007a18 	cmpnei	zero,r2,488
10006da8:	1000708c 	andi	zero,r2,450
10006dac:	10007098 	cmpnei	zero,r2,450
10006db0:	10007098 	cmpnei	zero,r2,450
10006db4:	10007098 	cmpnei	zero,r2,450
10006db8:	10007098 	cmpnei	zero,r2,450
10006dbc:	10007098 	cmpnei	zero,r2,450
10006dc0:	10007098 	cmpnei	zero,r2,450
10006dc4:	10007098 	cmpnei	zero,r2,450
10006dc8:	10007098 	cmpnei	zero,r2,450
10006dcc:	10007098 	cmpnei	zero,r2,450
10006dd0:	10007a18 	cmpnei	zero,r2,488
10006dd4:	10007a18 	cmpnei	zero,r2,488
10006dd8:	10007a18 	cmpnei	zero,r2,488
10006ddc:	10007a18 	cmpnei	zero,r2,488
10006de0:	10007a18 	cmpnei	zero,r2,488
10006de4:	10007a18 	cmpnei	zero,r2,488
10006de8:	10007a18 	cmpnei	zero,r2,488
10006dec:	10007a18 	cmpnei	zero,r2,488
10006df0:	10007a18 	cmpnei	zero,r2,488
10006df4:	10007a18 	cmpnei	zero,r2,488
10006df8:	100070d4 	ori	zero,r2,451
10006dfc:	1000719c 	xori	zero,r2,454
10006e00:	10007a18 	cmpnei	zero,r2,488
10006e04:	1000719c 	xori	zero,r2,454
10006e08:	10007a18 	cmpnei	zero,r2,488
10006e0c:	10007a18 	cmpnei	zero,r2,488
10006e10:	10007a18 	cmpnei	zero,r2,488
10006e14:	10007a18 	cmpnei	zero,r2,488
10006e18:	10007248 	cmpgei	zero,r2,457
10006e1c:	10007a18 	cmpnei	zero,r2,488
10006e20:	10007a18 	cmpnei	zero,r2,488
10006e24:	10007254 	ori	zero,r2,457
10006e28:	10007a18 	cmpnei	zero,r2,488
10006e2c:	10007a18 	cmpnei	zero,r2,488
10006e30:	10007a18 	cmpnei	zero,r2,488
10006e34:	10007a18 	cmpnei	zero,r2,488
10006e38:	10007a18 	cmpnei	zero,r2,488
10006e3c:	100076d8 	cmpnei	zero,r2,475
10006e40:	10007a18 	cmpnei	zero,r2,488
10006e44:	10007a18 	cmpnei	zero,r2,488
10006e48:	10007744 	addi	zero,r2,477
10006e4c:	10007a18 	cmpnei	zero,r2,488
10006e50:	10007a18 	cmpnei	zero,r2,488
10006e54:	10007a18 	cmpnei	zero,r2,488
10006e58:	10007a18 	cmpnei	zero,r2,488
10006e5c:	10007a18 	cmpnei	zero,r2,488
10006e60:	10007a18 	cmpnei	zero,r2,488
10006e64:	10007a18 	cmpnei	zero,r2,488
10006e68:	10007a18 	cmpnei	zero,r2,488
10006e6c:	10007a18 	cmpnei	zero,r2,488
10006e70:	10007a18 	cmpnei	zero,r2,488
10006e74:	100079bc 	xorhi	zero,r2,486
10006e78:	1000793c 	xorhi	zero,r2,484
10006e7c:	1000719c 	xori	zero,r2,454
10006e80:	1000719c 	xori	zero,r2,454
10006e84:	1000719c 	xori	zero,r2,454
10006e88:	1000795c 	xori	zero,r2,485
10006e8c:	1000793c 	xorhi	zero,r2,484
10006e90:	10007a18 	cmpnei	zero,r2,488
10006e94:	10007a18 	cmpnei	zero,r2,488
10006e98:	10007968 	cmpgeui	zero,r2,485
10006e9c:	10007a18 	cmpnei	zero,r2,488
10006ea0:	1000797c 	xorhi	zero,r2,485
10006ea4:	10007800 	call	11000780 <__alt_heap_start+0xfcc334>
10006ea8:	10006ee8 	cmpgeui	zero,r2,443
10006eac:	10007838 	rdprs	zero,r2,480
10006eb0:	10007a18 	cmpnei	zero,r2,488
10006eb4:	10007844 	addi	zero,r2,481
10006eb8:	10007a18 	cmpnei	zero,r2,488
10006ebc:	100078a8 	cmpgeui	zero,r2,482
10006ec0:	10007a18 	cmpnei	zero,r2,488
10006ec4:	10007a18 	cmpnei	zero,r2,488
10006ec8:	100078c8 	cmpgei	zero,r2,483
10006ecc:	d8c03117 	ldw	r3,196(sp)
10006ed0:	d8802e15 	stw	r2,184(sp)
10006ed4:	00c7c83a 	sub	r3,zero,r3
10006ed8:	d8c03115 	stw	r3,196(sp)
10006edc:	84000114 	ori	r16,r16,4
10006ee0:	ac400007 	ldb	r17,0(r21)
10006ee4:	003f9706 	br	10006d44 <__alt_data_end+0xf8006d44>
10006ee8:	00800c04 	movi	r2,48
10006eec:	d8802705 	stb	r2,156(sp)
10006ef0:	00801e04 	movi	r2,120
10006ef4:	d8802745 	stb	r2,157(sp)
10006ef8:	d9002a17 	ldw	r4,168(sp)
10006efc:	d8802e17 	ldw	r2,184(sp)
10006f00:	d8002785 	stb	zero,158(sp)
10006f04:	e011883a 	mov	r8,fp
10006f08:	10c00104 	addi	r3,r2,4
10006f0c:	14c00017 	ldw	r19,0(r2)
10006f10:	002d883a 	mov	r22,zero
10006f14:	80800094 	ori	r2,r16,2
10006f18:	2002ca16 	blt	r4,zero,10007a44 <___vfprintf_internal_r+0xe88>
10006f1c:	00bfdfc4 	movi	r2,-129
10006f20:	80a4703a 	and	r18,r16,r2
10006f24:	d8c02e15 	stw	r3,184(sp)
10006f28:	94800094 	ori	r18,r18,2
10006f2c:	9802b41e 	bne	r19,zero,10007a00 <___vfprintf_internal_r+0xe44>
10006f30:	01440074 	movhi	r5,4097
10006f34:	2959d904 	addi	r5,r5,26468
10006f38:	d9403915 	stw	r5,228(sp)
10006f3c:	04401e04 	movi	r17,120
10006f40:	d8802a17 	ldw	r2,168(sp)
10006f44:	0039883a 	mov	fp,zero
10006f48:	1001fa26 	beq	r2,zero,10007734 <___vfprintf_internal_r+0xb78>
10006f4c:	0027883a 	mov	r19,zero
10006f50:	002d883a 	mov	r22,zero
10006f54:	00021906 	br	100077bc <___vfprintf_internal_r+0xc00>
10006f58:	d9002d17 	ldw	r4,180(sp)
10006f5c:	b80b883a 	mov	r5,r23
10006f60:	0008f700 	call	10008f70 <__swsetup_r>
10006f64:	1005dc1e 	bne	r2,zero,100086d8 <___vfprintf_internal_r+0x1b1c>
10006f68:	b880030b 	ldhu	r2,12(r23)
10006f6c:	00c00284 	movi	r3,10
10006f70:	1080068c 	andi	r2,r2,26
10006f74:	10ff3a1e 	bne	r2,r3,10006c60 <__alt_data_end+0xf8006c60>
10006f78:	b880038f 	ldh	r2,14(r23)
10006f7c:	103f3816 	blt	r2,zero,10006c60 <__alt_data_end+0xf8006c60>
10006f80:	d9c02e17 	ldw	r7,184(sp)
10006f84:	d9002d17 	ldw	r4,180(sp)
10006f88:	a80d883a 	mov	r6,r21
10006f8c:	b80b883a 	mov	r5,r23
10006f90:	0008eb40 	call	10008eb4 <__sbprintf>
10006f94:	00001106 	br	10006fdc <___vfprintf_internal_r+0x420>
10006f98:	d9002d17 	ldw	r4,180(sp)
10006f9c:	d9801e04 	addi	r6,sp,120
10006fa0:	b80b883a 	mov	r5,r23
10006fa4:	000e39c0 	call	1000e39c <__sprint_r>
10006fa8:	1000081e 	bne	r2,zero,10006fcc <___vfprintf_internal_r+0x410>
10006fac:	da000404 	addi	r8,sp,16
10006fb0:	003f5106 	br	10006cf8 <__alt_data_end+0xf8006cf8>
10006fb4:	d8802017 	ldw	r2,128(sp)
10006fb8:	10000426 	beq	r2,zero,10006fcc <___vfprintf_internal_r+0x410>
10006fbc:	d9002d17 	ldw	r4,180(sp)
10006fc0:	d9801e04 	addi	r6,sp,120
10006fc4:	b80b883a 	mov	r5,r23
10006fc8:	000e39c0 	call	1000e39c <__sprint_r>
10006fcc:	b880030b 	ldhu	r2,12(r23)
10006fd0:	1080100c 	andi	r2,r2,64
10006fd4:	1005c01e 	bne	r2,zero,100086d8 <___vfprintf_internal_r+0x1b1c>
10006fd8:	d8802f17 	ldw	r2,188(sp)
10006fdc:	dfc04717 	ldw	ra,284(sp)
10006fe0:	df004617 	ldw	fp,280(sp)
10006fe4:	ddc04517 	ldw	r23,276(sp)
10006fe8:	dd804417 	ldw	r22,272(sp)
10006fec:	dd404317 	ldw	r21,268(sp)
10006ff0:	dd004217 	ldw	r20,264(sp)
10006ff4:	dcc04117 	ldw	r19,260(sp)
10006ff8:	dc804017 	ldw	r18,256(sp)
10006ffc:	dc403f17 	ldw	r17,252(sp)
10007000:	dc003e17 	ldw	r16,248(sp)
10007004:	dec04804 	addi	sp,sp,288
10007008:	f800283a 	ret
1000700c:	d9002d17 	ldw	r4,180(sp)
10007010:	000af7c0 	call	1000af7c <__sinit>
10007014:	003f0206 	br	10006c20 <__alt_data_end+0xf8006c20>
10007018:	d9002e17 	ldw	r4,184(sp)
1000701c:	d9402e17 	ldw	r5,184(sp)
10007020:	21000017 	ldw	r4,0(r4)
10007024:	28800104 	addi	r2,r5,4
10007028:	d9003115 	stw	r4,196(sp)
1000702c:	203fa716 	blt	r4,zero,10006ecc <__alt_data_end+0xf8006ecc>
10007030:	d8802e15 	stw	r2,184(sp)
10007034:	ac400007 	ldb	r17,0(r21)
10007038:	003f4206 	br	10006d44 <__alt_data_end+0xf8006d44>
1000703c:	ac400007 	ldb	r17,0(r21)
10007040:	01000a84 	movi	r4,42
10007044:	a8c00044 	addi	r3,r21,1
10007048:	89075826 	beq	r17,r4,10008dac <___vfprintf_internal_r+0x21f0>
1000704c:	8cbff404 	addi	r18,r17,-48
10007050:	b486ae36 	bltu	r22,r18,10008b0c <___vfprintf_internal_r+0x1f50>
10007054:	0009883a 	mov	r4,zero
10007058:	1823883a 	mov	r17,r3
1000705c:	01400284 	movi	r5,10
10007060:	00069bc0 	call	100069bc <__mulsi3>
10007064:	88c00007 	ldb	r3,0(r17)
10007068:	1489883a 	add	r4,r2,r18
1000706c:	8d400044 	addi	r21,r17,1
10007070:	1cbff404 	addi	r18,r3,-48
10007074:	a823883a 	mov	r17,r21
10007078:	b4bff82e 	bgeu	r22,r18,1000705c <__alt_data_end+0xf800705c>
1000707c:	1823883a 	mov	r17,r3
10007080:	2005f616 	blt	r4,zero,1000885c <___vfprintf_internal_r+0x1ca0>
10007084:	d9002a15 	stw	r4,168(sp)
10007088:	003f2f06 	br	10006d48 <__alt_data_end+0xf8006d48>
1000708c:	84002014 	ori	r16,r16,128
10007090:	ac400007 	ldb	r17,0(r21)
10007094:	003f2b06 	br	10006d44 <__alt_data_end+0xf8006d44>
10007098:	8cbff404 	addi	r18,r17,-48
1000709c:	d8003115 	stw	zero,196(sp)
100070a0:	0009883a 	mov	r4,zero
100070a4:	a823883a 	mov	r17,r21
100070a8:	01400284 	movi	r5,10
100070ac:	00069bc0 	call	100069bc <__mulsi3>
100070b0:	88c00007 	ldb	r3,0(r17)
100070b4:	9089883a 	add	r4,r18,r2
100070b8:	ad400044 	addi	r21,r21,1
100070bc:	1cbff404 	addi	r18,r3,-48
100070c0:	a823883a 	mov	r17,r21
100070c4:	b4bff82e 	bgeu	r22,r18,100070a8 <__alt_data_end+0xf80070a8>
100070c8:	1823883a 	mov	r17,r3
100070cc:	d9003115 	stw	r4,196(sp)
100070d0:	003f1d06 	br	10006d48 <__alt_data_end+0xf8006d48>
100070d4:	8025883a 	mov	r18,r16
100070d8:	dc002903 	ldbu	r16,164(sp)
100070dc:	e011883a 	mov	r8,fp
100070e0:	84003fcc 	andi	r16,r16,255
100070e4:	8007531e 	bne	r16,zero,10008e34 <___vfprintf_internal_r+0x2278>
100070e8:	94800414 	ori	r18,r18,16
100070ec:	9080080c 	andi	r2,r18,32
100070f0:	1003a326 	beq	r2,zero,10007f80 <___vfprintf_internal_r+0x13c4>
100070f4:	d9002e17 	ldw	r4,184(sp)
100070f8:	20800117 	ldw	r2,4(r4)
100070fc:	24c00017 	ldw	r19,0(r4)
10007100:	21000204 	addi	r4,r4,8
10007104:	d9002e15 	stw	r4,184(sp)
10007108:	102d883a 	mov	r22,r2
1000710c:	10047316 	blt	r2,zero,100082dc <___vfprintf_internal_r+0x1720>
10007110:	d9002a17 	ldw	r4,168(sp)
10007114:	df002783 	ldbu	fp,158(sp)
10007118:	2003e416 	blt	r4,zero,100080ac <___vfprintf_internal_r+0x14f0>
1000711c:	00ffdfc4 	movi	r3,-129
10007120:	9d84b03a 	or	r2,r19,r22
10007124:	90e4703a 	and	r18,r18,r3
10007128:	10018026 	beq	r2,zero,1000772c <___vfprintf_internal_r+0xb70>
1000712c:	b003ab26 	beq	r22,zero,10007fdc <___vfprintf_internal_r+0x1420>
10007130:	dc402915 	stw	r17,164(sp)
10007134:	dc001e04 	addi	r16,sp,120
10007138:	b023883a 	mov	r17,r22
1000713c:	402d883a 	mov	r22,r8
10007140:	9809883a 	mov	r4,r19
10007144:	880b883a 	mov	r5,r17
10007148:	01800284 	movi	r6,10
1000714c:	000f883a 	mov	r7,zero
10007150:	00108e00 	call	100108e0 <__umoddi3>
10007154:	10800c04 	addi	r2,r2,48
10007158:	843fffc4 	addi	r16,r16,-1
1000715c:	9809883a 	mov	r4,r19
10007160:	880b883a 	mov	r5,r17
10007164:	80800005 	stb	r2,0(r16)
10007168:	01800284 	movi	r6,10
1000716c:	000f883a 	mov	r7,zero
10007170:	00102e40 	call	100102e4 <__udivdi3>
10007174:	1027883a 	mov	r19,r2
10007178:	10c4b03a 	or	r2,r2,r3
1000717c:	1823883a 	mov	r17,r3
10007180:	103fef1e 	bne	r2,zero,10007140 <__alt_data_end+0xf8007140>
10007184:	d8c02817 	ldw	r3,160(sp)
10007188:	dc402917 	ldw	r17,164(sp)
1000718c:	b011883a 	mov	r8,r22
10007190:	1c07c83a 	sub	r3,r3,r16
10007194:	d8c02b15 	stw	r3,172(sp)
10007198:	00005f06 	br	10007318 <___vfprintf_internal_r+0x75c>
1000719c:	8025883a 	mov	r18,r16
100071a0:	dc002903 	ldbu	r16,164(sp)
100071a4:	e011883a 	mov	r8,fp
100071a8:	84003fcc 	andi	r16,r16,255
100071ac:	80071e1e 	bne	r16,zero,10008e28 <___vfprintf_internal_r+0x226c>
100071b0:	9080020c 	andi	r2,r18,8
100071b4:	1004af26 	beq	r2,zero,10008474 <___vfprintf_internal_r+0x18b8>
100071b8:	d9002e17 	ldw	r4,184(sp)
100071bc:	d9402e17 	ldw	r5,184(sp)
100071c0:	d8802e17 	ldw	r2,184(sp)
100071c4:	21000017 	ldw	r4,0(r4)
100071c8:	29400117 	ldw	r5,4(r5)
100071cc:	10800204 	addi	r2,r2,8
100071d0:	d9003615 	stw	r4,216(sp)
100071d4:	d9403815 	stw	r5,224(sp)
100071d8:	d8802e15 	stw	r2,184(sp)
100071dc:	d9003617 	ldw	r4,216(sp)
100071e0:	d9403817 	ldw	r5,224(sp)
100071e4:	da003d15 	stw	r8,244(sp)
100071e8:	04000044 	movi	r16,1
100071ec:	000dfc00 	call	1000dfc0 <__fpclassifyd>
100071f0:	da003d17 	ldw	r8,244(sp)
100071f4:	1404441e 	bne	r2,r16,10008308 <___vfprintf_internal_r+0x174c>
100071f8:	d9003617 	ldw	r4,216(sp)
100071fc:	d9403817 	ldw	r5,224(sp)
10007200:	000d883a 	mov	r6,zero
10007204:	000f883a 	mov	r7,zero
10007208:	00122840 	call	10012284 <__ledf2>
1000720c:	da003d17 	ldw	r8,244(sp)
10007210:	1005e316 	blt	r2,zero,100089a0 <___vfprintf_internal_r+0x1de4>
10007214:	df002783 	ldbu	fp,158(sp)
10007218:	008011c4 	movi	r2,71
1000721c:	1445580e 	bge	r2,r17,10008780 <___vfprintf_internal_r+0x1bc4>
10007220:	04040074 	movhi	r16,4097
10007224:	8419d104 	addi	r16,r16,26436
10007228:	00c000c4 	movi	r3,3
1000722c:	00bfdfc4 	movi	r2,-129
10007230:	d8c02915 	stw	r3,164(sp)
10007234:	90a4703a 	and	r18,r18,r2
10007238:	d8c02b15 	stw	r3,172(sp)
1000723c:	d8002a15 	stw	zero,168(sp)
10007240:	d8003215 	stw	zero,200(sp)
10007244:	00003a06 	br	10007330 <___vfprintf_internal_r+0x774>
10007248:	84000214 	ori	r16,r16,8
1000724c:	ac400007 	ldb	r17,0(r21)
10007250:	003ebc06 	br	10006d44 <__alt_data_end+0xf8006d44>
10007254:	8025883a 	mov	r18,r16
10007258:	dc002903 	ldbu	r16,164(sp)
1000725c:	e011883a 	mov	r8,fp
10007260:	84003fcc 	andi	r16,r16,255
10007264:	8007001e 	bne	r16,zero,10008e68 <___vfprintf_internal_r+0x22ac>
10007268:	94800414 	ori	r18,r18,16
1000726c:	9080080c 	andi	r2,r18,32
10007270:	1002fa26 	beq	r2,zero,10007e5c <___vfprintf_internal_r+0x12a0>
10007274:	d9002e17 	ldw	r4,184(sp)
10007278:	d9402a17 	ldw	r5,168(sp)
1000727c:	d8002785 	stb	zero,158(sp)
10007280:	20800204 	addi	r2,r4,8
10007284:	24c00017 	ldw	r19,0(r4)
10007288:	25800117 	ldw	r22,4(r4)
1000728c:	2804b116 	blt	r5,zero,10008554 <___vfprintf_internal_r+0x1998>
10007290:	013fdfc4 	movi	r4,-129
10007294:	9d86b03a 	or	r3,r19,r22
10007298:	d8802e15 	stw	r2,184(sp)
1000729c:	9124703a 	and	r18,r18,r4
100072a0:	1802fb1e 	bne	r3,zero,10007e90 <___vfprintf_internal_r+0x12d4>
100072a4:	d8c02a17 	ldw	r3,168(sp)
100072a8:	0039883a 	mov	fp,zero
100072ac:	1805e526 	beq	r3,zero,10008a44 <___vfprintf_internal_r+0x1e88>
100072b0:	0027883a 	mov	r19,zero
100072b4:	002d883a 	mov	r22,zero
100072b8:	dc001e04 	addi	r16,sp,120
100072bc:	9806d0fa 	srli	r3,r19,3
100072c0:	b008977a 	slli	r4,r22,29
100072c4:	b02cd0fa 	srli	r22,r22,3
100072c8:	9cc001cc 	andi	r19,r19,7
100072cc:	98800c04 	addi	r2,r19,48
100072d0:	843fffc4 	addi	r16,r16,-1
100072d4:	20e6b03a 	or	r19,r4,r3
100072d8:	80800005 	stb	r2,0(r16)
100072dc:	9d86b03a 	or	r3,r19,r22
100072e0:	183ff61e 	bne	r3,zero,100072bc <__alt_data_end+0xf80072bc>
100072e4:	90c0004c 	andi	r3,r18,1
100072e8:	18014126 	beq	r3,zero,100077f0 <___vfprintf_internal_r+0xc34>
100072ec:	10803fcc 	andi	r2,r2,255
100072f0:	1080201c 	xori	r2,r2,128
100072f4:	10bfe004 	addi	r2,r2,-128
100072f8:	00c00c04 	movi	r3,48
100072fc:	10c13c26 	beq	r2,r3,100077f0 <___vfprintf_internal_r+0xc34>
10007300:	80ffffc5 	stb	r3,-1(r16)
10007304:	d8c02817 	ldw	r3,160(sp)
10007308:	80bfffc4 	addi	r2,r16,-1
1000730c:	1021883a 	mov	r16,r2
10007310:	1887c83a 	sub	r3,r3,r2
10007314:	d8c02b15 	stw	r3,172(sp)
10007318:	d8802b17 	ldw	r2,172(sp)
1000731c:	d9002a17 	ldw	r4,168(sp)
10007320:	1100010e 	bge	r2,r4,10007328 <___vfprintf_internal_r+0x76c>
10007324:	2005883a 	mov	r2,r4
10007328:	d8802915 	stw	r2,164(sp)
1000732c:	d8003215 	stw	zero,200(sp)
10007330:	e7003fcc 	andi	fp,fp,255
10007334:	e700201c 	xori	fp,fp,128
10007338:	e73fe004 	addi	fp,fp,-128
1000733c:	e0000326 	beq	fp,zero,1000734c <___vfprintf_internal_r+0x790>
10007340:	d8c02917 	ldw	r3,164(sp)
10007344:	18c00044 	addi	r3,r3,1
10007348:	d8c02915 	stw	r3,164(sp)
1000734c:	90c0008c 	andi	r3,r18,2
10007350:	d8c02c15 	stw	r3,176(sp)
10007354:	18000326 	beq	r3,zero,10007364 <___vfprintf_internal_r+0x7a8>
10007358:	d8c02917 	ldw	r3,164(sp)
1000735c:	18c00084 	addi	r3,r3,2
10007360:	d8c02915 	stw	r3,164(sp)
10007364:	90c0210c 	andi	r3,r18,132
10007368:	d8c03015 	stw	r3,192(sp)
1000736c:	1801c51e 	bne	r3,zero,10007a84 <___vfprintf_internal_r+0xec8>
10007370:	d9003117 	ldw	r4,196(sp)
10007374:	d8c02917 	ldw	r3,164(sp)
10007378:	20e7c83a 	sub	r19,r4,r3
1000737c:	04c1c10e 	bge	zero,r19,10007a84 <___vfprintf_internal_r+0xec8>
10007380:	02400404 	movi	r9,16
10007384:	d8c02017 	ldw	r3,128(sp)
10007388:	d8801f17 	ldw	r2,124(sp)
1000738c:	4cc52f0e 	bge	r9,r19,1000884c <___vfprintf_internal_r+0x1c90>
10007390:	01440074 	movhi	r5,4097
10007394:	2959e484 	addi	r5,r5,26514
10007398:	dc403b15 	stw	r17,236(sp)
1000739c:	d9403515 	stw	r5,212(sp)
100073a0:	9823883a 	mov	r17,r19
100073a4:	482d883a 	mov	r22,r9
100073a8:	9027883a 	mov	r19,r18
100073ac:	070001c4 	movi	fp,7
100073b0:	8025883a 	mov	r18,r16
100073b4:	dc002d17 	ldw	r16,180(sp)
100073b8:	00000306 	br	100073c8 <___vfprintf_internal_r+0x80c>
100073bc:	8c7ffc04 	addi	r17,r17,-16
100073c0:	42000204 	addi	r8,r8,8
100073c4:	b440130e 	bge	r22,r17,10007414 <___vfprintf_internal_r+0x858>
100073c8:	01040074 	movhi	r4,4097
100073cc:	18c00404 	addi	r3,r3,16
100073d0:	10800044 	addi	r2,r2,1
100073d4:	2119e484 	addi	r4,r4,26514
100073d8:	41000015 	stw	r4,0(r8)
100073dc:	45800115 	stw	r22,4(r8)
100073e0:	d8c02015 	stw	r3,128(sp)
100073e4:	d8801f15 	stw	r2,124(sp)
100073e8:	e0bff40e 	bge	fp,r2,100073bc <__alt_data_end+0xf80073bc>
100073ec:	d9801e04 	addi	r6,sp,120
100073f0:	b80b883a 	mov	r5,r23
100073f4:	8009883a 	mov	r4,r16
100073f8:	000e39c0 	call	1000e39c <__sprint_r>
100073fc:	103ef31e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
10007400:	8c7ffc04 	addi	r17,r17,-16
10007404:	d8c02017 	ldw	r3,128(sp)
10007408:	d8801f17 	ldw	r2,124(sp)
1000740c:	da000404 	addi	r8,sp,16
10007410:	b47fed16 	blt	r22,r17,100073c8 <__alt_data_end+0xf80073c8>
10007414:	9021883a 	mov	r16,r18
10007418:	9825883a 	mov	r18,r19
1000741c:	8827883a 	mov	r19,r17
10007420:	dc403b17 	ldw	r17,236(sp)
10007424:	d9403517 	ldw	r5,212(sp)
10007428:	98c7883a 	add	r3,r19,r3
1000742c:	10800044 	addi	r2,r2,1
10007430:	41400015 	stw	r5,0(r8)
10007434:	44c00115 	stw	r19,4(r8)
10007438:	d8c02015 	stw	r3,128(sp)
1000743c:	d8801f15 	stw	r2,124(sp)
10007440:	010001c4 	movi	r4,7
10007444:	2082c516 	blt	r4,r2,10007f5c <___vfprintf_internal_r+0x13a0>
10007448:	df002787 	ldb	fp,158(sp)
1000744c:	42000204 	addi	r8,r8,8
10007450:	e0000c26 	beq	fp,zero,10007484 <___vfprintf_internal_r+0x8c8>
10007454:	d8801f17 	ldw	r2,124(sp)
10007458:	d9002784 	addi	r4,sp,158
1000745c:	18c00044 	addi	r3,r3,1
10007460:	10800044 	addi	r2,r2,1
10007464:	41000015 	stw	r4,0(r8)
10007468:	01000044 	movi	r4,1
1000746c:	41000115 	stw	r4,4(r8)
10007470:	d8c02015 	stw	r3,128(sp)
10007474:	d8801f15 	stw	r2,124(sp)
10007478:	010001c4 	movi	r4,7
1000747c:	20825e16 	blt	r4,r2,10007df8 <___vfprintf_internal_r+0x123c>
10007480:	42000204 	addi	r8,r8,8
10007484:	d8802c17 	ldw	r2,176(sp)
10007488:	10000c26 	beq	r2,zero,100074bc <___vfprintf_internal_r+0x900>
1000748c:	d8801f17 	ldw	r2,124(sp)
10007490:	d9002704 	addi	r4,sp,156
10007494:	18c00084 	addi	r3,r3,2
10007498:	10800044 	addi	r2,r2,1
1000749c:	41000015 	stw	r4,0(r8)
100074a0:	01000084 	movi	r4,2
100074a4:	41000115 	stw	r4,4(r8)
100074a8:	d8c02015 	stw	r3,128(sp)
100074ac:	d8801f15 	stw	r2,124(sp)
100074b0:	010001c4 	movi	r4,7
100074b4:	20825816 	blt	r4,r2,10007e18 <___vfprintf_internal_r+0x125c>
100074b8:	42000204 	addi	r8,r8,8
100074bc:	d9003017 	ldw	r4,192(sp)
100074c0:	00802004 	movi	r2,128
100074c4:	2081bb26 	beq	r4,r2,10007bb4 <___vfprintf_internal_r+0xff8>
100074c8:	d9402a17 	ldw	r5,168(sp)
100074cc:	d8802b17 	ldw	r2,172(sp)
100074d0:	28adc83a 	sub	r22,r5,r2
100074d4:	0580310e 	bge	zero,r22,1000759c <___vfprintf_internal_r+0x9e0>
100074d8:	07000404 	movi	fp,16
100074dc:	d8801f17 	ldw	r2,124(sp)
100074e0:	e584360e 	bge	fp,r22,100085bc <___vfprintf_internal_r+0x1a00>
100074e4:	01440074 	movhi	r5,4097
100074e8:	2959e084 	addi	r5,r5,26498
100074ec:	dc402a15 	stw	r17,168(sp)
100074f0:	d9402c15 	stw	r5,176(sp)
100074f4:	b023883a 	mov	r17,r22
100074f8:	04c001c4 	movi	r19,7
100074fc:	a82d883a 	mov	r22,r21
10007500:	902b883a 	mov	r21,r18
10007504:	8025883a 	mov	r18,r16
10007508:	dc002d17 	ldw	r16,180(sp)
1000750c:	00000306 	br	1000751c <___vfprintf_internal_r+0x960>
10007510:	8c7ffc04 	addi	r17,r17,-16
10007514:	42000204 	addi	r8,r8,8
10007518:	e440110e 	bge	fp,r17,10007560 <___vfprintf_internal_r+0x9a4>
1000751c:	18c00404 	addi	r3,r3,16
10007520:	10800044 	addi	r2,r2,1
10007524:	45000015 	stw	r20,0(r8)
10007528:	47000115 	stw	fp,4(r8)
1000752c:	d8c02015 	stw	r3,128(sp)
10007530:	d8801f15 	stw	r2,124(sp)
10007534:	98bff60e 	bge	r19,r2,10007510 <__alt_data_end+0xf8007510>
10007538:	d9801e04 	addi	r6,sp,120
1000753c:	b80b883a 	mov	r5,r23
10007540:	8009883a 	mov	r4,r16
10007544:	000e39c0 	call	1000e39c <__sprint_r>
10007548:	103ea01e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
1000754c:	8c7ffc04 	addi	r17,r17,-16
10007550:	d8c02017 	ldw	r3,128(sp)
10007554:	d8801f17 	ldw	r2,124(sp)
10007558:	da000404 	addi	r8,sp,16
1000755c:	e47fef16 	blt	fp,r17,1000751c <__alt_data_end+0xf800751c>
10007560:	9021883a 	mov	r16,r18
10007564:	a825883a 	mov	r18,r21
10007568:	b02b883a 	mov	r21,r22
1000756c:	882d883a 	mov	r22,r17
10007570:	dc402a17 	ldw	r17,168(sp)
10007574:	d9002c17 	ldw	r4,176(sp)
10007578:	1d87883a 	add	r3,r3,r22
1000757c:	10800044 	addi	r2,r2,1
10007580:	41000015 	stw	r4,0(r8)
10007584:	45800115 	stw	r22,4(r8)
10007588:	d8c02015 	stw	r3,128(sp)
1000758c:	d8801f15 	stw	r2,124(sp)
10007590:	010001c4 	movi	r4,7
10007594:	20821016 	blt	r4,r2,10007dd8 <___vfprintf_internal_r+0x121c>
10007598:	42000204 	addi	r8,r8,8
1000759c:	9080400c 	andi	r2,r18,256
100075a0:	10013a1e 	bne	r2,zero,10007a8c <___vfprintf_internal_r+0xed0>
100075a4:	d9402b17 	ldw	r5,172(sp)
100075a8:	d8801f17 	ldw	r2,124(sp)
100075ac:	44000015 	stw	r16,0(r8)
100075b0:	1947883a 	add	r3,r3,r5
100075b4:	10800044 	addi	r2,r2,1
100075b8:	41400115 	stw	r5,4(r8)
100075bc:	d8c02015 	stw	r3,128(sp)
100075c0:	d8801f15 	stw	r2,124(sp)
100075c4:	010001c4 	movi	r4,7
100075c8:	2081f516 	blt	r4,r2,10007da0 <___vfprintf_internal_r+0x11e4>
100075cc:	42000204 	addi	r8,r8,8
100075d0:	9480010c 	andi	r18,r18,4
100075d4:	90003226 	beq	r18,zero,100076a0 <___vfprintf_internal_r+0xae4>
100075d8:	d9403117 	ldw	r5,196(sp)
100075dc:	d8802917 	ldw	r2,164(sp)
100075e0:	28a1c83a 	sub	r16,r5,r2
100075e4:	04002e0e 	bge	zero,r16,100076a0 <___vfprintf_internal_r+0xae4>
100075e8:	04400404 	movi	r17,16
100075ec:	d8801f17 	ldw	r2,124(sp)
100075f0:	8c04c40e 	bge	r17,r16,10008904 <___vfprintf_internal_r+0x1d48>
100075f4:	01440074 	movhi	r5,4097
100075f8:	2959e484 	addi	r5,r5,26514
100075fc:	d9403515 	stw	r5,212(sp)
10007600:	048001c4 	movi	r18,7
10007604:	dcc02d17 	ldw	r19,180(sp)
10007608:	00000306 	br	10007618 <___vfprintf_internal_r+0xa5c>
1000760c:	843ffc04 	addi	r16,r16,-16
10007610:	42000204 	addi	r8,r8,8
10007614:	8c00130e 	bge	r17,r16,10007664 <___vfprintf_internal_r+0xaa8>
10007618:	01040074 	movhi	r4,4097
1000761c:	18c00404 	addi	r3,r3,16
10007620:	10800044 	addi	r2,r2,1
10007624:	2119e484 	addi	r4,r4,26514
10007628:	41000015 	stw	r4,0(r8)
1000762c:	44400115 	stw	r17,4(r8)
10007630:	d8c02015 	stw	r3,128(sp)
10007634:	d8801f15 	stw	r2,124(sp)
10007638:	90bff40e 	bge	r18,r2,1000760c <__alt_data_end+0xf800760c>
1000763c:	d9801e04 	addi	r6,sp,120
10007640:	b80b883a 	mov	r5,r23
10007644:	9809883a 	mov	r4,r19
10007648:	000e39c0 	call	1000e39c <__sprint_r>
1000764c:	103e5f1e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
10007650:	843ffc04 	addi	r16,r16,-16
10007654:	d8c02017 	ldw	r3,128(sp)
10007658:	d8801f17 	ldw	r2,124(sp)
1000765c:	da000404 	addi	r8,sp,16
10007660:	8c3fed16 	blt	r17,r16,10007618 <__alt_data_end+0xf8007618>
10007664:	d9403517 	ldw	r5,212(sp)
10007668:	1c07883a 	add	r3,r3,r16
1000766c:	10800044 	addi	r2,r2,1
10007670:	41400015 	stw	r5,0(r8)
10007674:	44000115 	stw	r16,4(r8)
10007678:	d8c02015 	stw	r3,128(sp)
1000767c:	d8801f15 	stw	r2,124(sp)
10007680:	010001c4 	movi	r4,7
10007684:	2080060e 	bge	r4,r2,100076a0 <___vfprintf_internal_r+0xae4>
10007688:	d9002d17 	ldw	r4,180(sp)
1000768c:	d9801e04 	addi	r6,sp,120
10007690:	b80b883a 	mov	r5,r23
10007694:	000e39c0 	call	1000e39c <__sprint_r>
10007698:	103e4c1e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
1000769c:	d8c02017 	ldw	r3,128(sp)
100076a0:	d8803117 	ldw	r2,196(sp)
100076a4:	d9002917 	ldw	r4,164(sp)
100076a8:	1100010e 	bge	r2,r4,100076b0 <___vfprintf_internal_r+0xaf4>
100076ac:	2005883a 	mov	r2,r4
100076b0:	d9402f17 	ldw	r5,188(sp)
100076b4:	288b883a 	add	r5,r5,r2
100076b8:	d9402f15 	stw	r5,188(sp)
100076bc:	1801c01e 	bne	r3,zero,10007dc0 <___vfprintf_internal_r+0x1204>
100076c0:	a8800007 	ldb	r2,0(r21)
100076c4:	d8001f15 	stw	zero,124(sp)
100076c8:	da000404 	addi	r8,sp,16
100076cc:	103d751e 	bne	r2,zero,10006ca4 <__alt_data_end+0xf8006ca4>
100076d0:	a823883a 	mov	r17,r21
100076d4:	003d8b06 	br	10006d04 <__alt_data_end+0xf8006d04>
100076d8:	8025883a 	mov	r18,r16
100076dc:	dc002903 	ldbu	r16,164(sp)
100076e0:	e011883a 	mov	r8,fp
100076e4:	84003fcc 	andi	r16,r16,255
100076e8:	8005e51e 	bne	r16,zero,10008e80 <___vfprintf_internal_r+0x22c4>
100076ec:	94800414 	ori	r18,r18,16
100076f0:	9080080c 	andi	r2,r18,32
100076f4:	10022b26 	beq	r2,zero,10007fa4 <___vfprintf_internal_r+0x13e8>
100076f8:	d9002e17 	ldw	r4,184(sp)
100076fc:	d9402a17 	ldw	r5,168(sp)
10007700:	d8002785 	stb	zero,158(sp)
10007704:	20c00204 	addi	r3,r4,8
10007708:	24c00017 	ldw	r19,0(r4)
1000770c:	25800117 	ldw	r22,4(r4)
10007710:	28042e16 	blt	r5,zero,100087cc <___vfprintf_internal_r+0x1c10>
10007714:	013fdfc4 	movi	r4,-129
10007718:	9d84b03a 	or	r2,r19,r22
1000771c:	d8c02e15 	stw	r3,184(sp)
10007720:	9124703a 	and	r18,r18,r4
10007724:	0039883a 	mov	fp,zero
10007728:	103e801e 	bne	r2,zero,1000712c <__alt_data_end+0xf800712c>
1000772c:	d9002a17 	ldw	r4,168(sp)
10007730:	2002e01e 	bne	r4,zero,100082b4 <___vfprintf_internal_r+0x16f8>
10007734:	d8002a15 	stw	zero,168(sp)
10007738:	d8002b15 	stw	zero,172(sp)
1000773c:	dc001e04 	addi	r16,sp,120
10007740:	003ef506 	br	10007318 <__alt_data_end+0xf8007318>
10007744:	8025883a 	mov	r18,r16
10007748:	dc002903 	ldbu	r16,164(sp)
1000774c:	e011883a 	mov	r8,fp
10007750:	84003fcc 	andi	r16,r16,255
10007754:	8005ba1e 	bne	r16,zero,10008e40 <___vfprintf_internal_r+0x2284>
10007758:	01040074 	movhi	r4,4097
1000775c:	2119d404 	addi	r4,r4,26448
10007760:	d9003915 	stw	r4,228(sp)
10007764:	9080080c 	andi	r2,r18,32
10007768:	10006126 	beq	r2,zero,100078f0 <___vfprintf_internal_r+0xd34>
1000776c:	d9402e17 	ldw	r5,184(sp)
10007770:	2cc00017 	ldw	r19,0(r5)
10007774:	2d800117 	ldw	r22,4(r5)
10007778:	29400204 	addi	r5,r5,8
1000777c:	d9402e15 	stw	r5,184(sp)
10007780:	9080004c 	andi	r2,r18,1
10007784:	1001ac26 	beq	r2,zero,10007e38 <___vfprintf_internal_r+0x127c>
10007788:	9d84b03a 	or	r2,r19,r22
1000778c:	10038526 	beq	r2,zero,100085a4 <___vfprintf_internal_r+0x19e8>
10007790:	d8c02a17 	ldw	r3,168(sp)
10007794:	00800c04 	movi	r2,48
10007798:	d8802705 	stb	r2,156(sp)
1000779c:	dc402745 	stb	r17,157(sp)
100077a0:	d8002785 	stb	zero,158(sp)
100077a4:	90800094 	ori	r2,r18,2
100077a8:	18047916 	blt	r3,zero,10008990 <___vfprintf_internal_r+0x1dd4>
100077ac:	00bfdfc4 	movi	r2,-129
100077b0:	90a4703a 	and	r18,r18,r2
100077b4:	94800094 	ori	r18,r18,2
100077b8:	0039883a 	mov	fp,zero
100077bc:	d9003917 	ldw	r4,228(sp)
100077c0:	dc001e04 	addi	r16,sp,120
100077c4:	988003cc 	andi	r2,r19,15
100077c8:	b006973a 	slli	r3,r22,28
100077cc:	2085883a 	add	r2,r4,r2
100077d0:	9826d13a 	srli	r19,r19,4
100077d4:	10800003 	ldbu	r2,0(r2)
100077d8:	b02cd13a 	srli	r22,r22,4
100077dc:	843fffc4 	addi	r16,r16,-1
100077e0:	1ce6b03a 	or	r19,r3,r19
100077e4:	80800005 	stb	r2,0(r16)
100077e8:	9d84b03a 	or	r2,r19,r22
100077ec:	103ff51e 	bne	r2,zero,100077c4 <__alt_data_end+0xf80077c4>
100077f0:	d8c02817 	ldw	r3,160(sp)
100077f4:	1c07c83a 	sub	r3,r3,r16
100077f8:	d8c02b15 	stw	r3,172(sp)
100077fc:	003ec606 	br	10007318 <__alt_data_end+0xf8007318>
10007800:	8025883a 	mov	r18,r16
10007804:	dc002903 	ldbu	r16,164(sp)
10007808:	e011883a 	mov	r8,fp
1000780c:	84003fcc 	andi	r16,r16,255
10007810:	803e9626 	beq	r16,zero,1000726c <__alt_data_end+0xf800726c>
10007814:	d8c02b03 	ldbu	r3,172(sp)
10007818:	d8c02785 	stb	r3,158(sp)
1000781c:	003e9306 	br	1000726c <__alt_data_end+0xf800726c>
10007820:	00c00044 	movi	r3,1
10007824:	d8c02905 	stb	r3,164(sp)
10007828:	00c00ac4 	movi	r3,43
1000782c:	d8c02b05 	stb	r3,172(sp)
10007830:	ac400007 	ldb	r17,0(r21)
10007834:	003d4306 	br	10006d44 <__alt_data_end+0xf8006d44>
10007838:	84000814 	ori	r16,r16,32
1000783c:	ac400007 	ldb	r17,0(r21)
10007840:	003d4006 	br	10006d44 <__alt_data_end+0xf8006d44>
10007844:	d8802e17 	ldw	r2,184(sp)
10007848:	8025883a 	mov	r18,r16
1000784c:	d8002785 	stb	zero,158(sp)
10007850:	14000017 	ldw	r16,0(r2)
10007854:	e011883a 	mov	r8,fp
10007858:	14c00104 	addi	r19,r2,4
1000785c:	80042d26 	beq	r16,zero,10008914 <___vfprintf_internal_r+0x1d58>
10007860:	d8c02a17 	ldw	r3,168(sp)
10007864:	1803e416 	blt	r3,zero,100087f8 <___vfprintf_internal_r+0x1c3c>
10007868:	180d883a 	mov	r6,r3
1000786c:	000b883a 	mov	r5,zero
10007870:	8009883a 	mov	r4,r16
10007874:	df003d15 	stw	fp,244(sp)
10007878:	000c4f40 	call	1000c4f4 <memchr>
1000787c:	da003d17 	ldw	r8,244(sp)
10007880:	10046826 	beq	r2,zero,10008a24 <___vfprintf_internal_r+0x1e68>
10007884:	1405c83a 	sub	r2,r2,r16
10007888:	d8802b15 	stw	r2,172(sp)
1000788c:	1003e016 	blt	r2,zero,10008810 <___vfprintf_internal_r+0x1c54>
10007890:	df002783 	ldbu	fp,158(sp)
10007894:	d8802915 	stw	r2,164(sp)
10007898:	dcc02e15 	stw	r19,184(sp)
1000789c:	d8002a15 	stw	zero,168(sp)
100078a0:	d8003215 	stw	zero,200(sp)
100078a4:	003ea206 	br	10007330 <__alt_data_end+0xf8007330>
100078a8:	8025883a 	mov	r18,r16
100078ac:	dc002903 	ldbu	r16,164(sp)
100078b0:	e011883a 	mov	r8,fp
100078b4:	84003fcc 	andi	r16,r16,255
100078b8:	803f8d26 	beq	r16,zero,100076f0 <__alt_data_end+0xf80076f0>
100078bc:	d8c02b03 	ldbu	r3,172(sp)
100078c0:	d8c02785 	stb	r3,158(sp)
100078c4:	003f8a06 	br	100076f0 <__alt_data_end+0xf80076f0>
100078c8:	8025883a 	mov	r18,r16
100078cc:	dc002903 	ldbu	r16,164(sp)
100078d0:	e011883a 	mov	r8,fp
100078d4:	84003fcc 	andi	r16,r16,255
100078d8:	8005661e 	bne	r16,zero,10008e74 <___vfprintf_internal_r+0x22b8>
100078dc:	01040074 	movhi	r4,4097
100078e0:	2119d904 	addi	r4,r4,26468
100078e4:	d9003915 	stw	r4,228(sp)
100078e8:	9080080c 	andi	r2,r18,32
100078ec:	103f9f1e 	bne	r2,zero,1000776c <__alt_data_end+0xf800776c>
100078f0:	9080040c 	andi	r2,r18,16
100078f4:	1002eb26 	beq	r2,zero,100084a4 <___vfprintf_internal_r+0x18e8>
100078f8:	d8802e17 	ldw	r2,184(sp)
100078fc:	002d883a 	mov	r22,zero
10007900:	14c00017 	ldw	r19,0(r2)
10007904:	10800104 	addi	r2,r2,4
10007908:	d8802e15 	stw	r2,184(sp)
1000790c:	003f9c06 	br	10007780 <__alt_data_end+0xf8007780>
10007910:	d8802b07 	ldb	r2,172(sp)
10007914:	1002e11e 	bne	r2,zero,1000849c <___vfprintf_internal_r+0x18e0>
10007918:	00c00044 	movi	r3,1
1000791c:	d8c02905 	stb	r3,164(sp)
10007920:	00c00804 	movi	r3,32
10007924:	d8c02b05 	stb	r3,172(sp)
10007928:	ac400007 	ldb	r17,0(r21)
1000792c:	003d0506 	br	10006d44 <__alt_data_end+0xf8006d44>
10007930:	84000054 	ori	r16,r16,1
10007934:	ac400007 	ldb	r17,0(r21)
10007938:	003d0206 	br	10006d44 <__alt_data_end+0xf8006d44>
1000793c:	8025883a 	mov	r18,r16
10007940:	dc002903 	ldbu	r16,164(sp)
10007944:	e011883a 	mov	r8,fp
10007948:	84003fcc 	andi	r16,r16,255
1000794c:	803de726 	beq	r16,zero,100070ec <__alt_data_end+0xf80070ec>
10007950:	d8c02b03 	ldbu	r3,172(sp)
10007954:	d8c02785 	stb	r3,158(sp)
10007958:	003de406 	br	100070ec <__alt_data_end+0xf80070ec>
1000795c:	84001014 	ori	r16,r16,64
10007960:	ac400007 	ldb	r17,0(r21)
10007964:	003cf706 	br	10006d44 <__alt_data_end+0xf8006d44>
10007968:	ac400007 	ldb	r17,0(r21)
1000796c:	00801b04 	movi	r2,108
10007970:	88838f26 	beq	r17,r2,100087b0 <___vfprintf_internal_r+0x1bf4>
10007974:	84000414 	ori	r16,r16,16
10007978:	003cf206 	br	10006d44 <__alt_data_end+0xf8006d44>
1000797c:	8025883a 	mov	r18,r16
10007980:	dc002903 	ldbu	r16,164(sp)
10007984:	e011883a 	mov	r8,fp
10007988:	84003fcc 	andi	r16,r16,255
1000798c:	80053f1e 	bne	r16,zero,10008e8c <___vfprintf_internal_r+0x22d0>
10007990:	9080080c 	andi	r2,r18,32
10007994:	1002d226 	beq	r2,zero,100084e0 <___vfprintf_internal_r+0x1924>
10007998:	d9002e17 	ldw	r4,184(sp)
1000799c:	d9402f17 	ldw	r5,188(sp)
100079a0:	20800017 	ldw	r2,0(r4)
100079a4:	2807d7fa 	srai	r3,r5,31
100079a8:	21000104 	addi	r4,r4,4
100079ac:	d9002e15 	stw	r4,184(sp)
100079b0:	11400015 	stw	r5,0(r2)
100079b4:	10c00115 	stw	r3,4(r2)
100079b8:	003cb806 	br	10006c9c <__alt_data_end+0xf8006c9c>
100079bc:	d8c02e17 	ldw	r3,184(sp)
100079c0:	d9002e17 	ldw	r4,184(sp)
100079c4:	8025883a 	mov	r18,r16
100079c8:	18800017 	ldw	r2,0(r3)
100079cc:	21000104 	addi	r4,r4,4
100079d0:	00c00044 	movi	r3,1
100079d4:	e011883a 	mov	r8,fp
100079d8:	d8c02915 	stw	r3,164(sp)
100079dc:	d8002785 	stb	zero,158(sp)
100079e0:	d8801405 	stb	r2,80(sp)
100079e4:	d9002e15 	stw	r4,184(sp)
100079e8:	d8c02b15 	stw	r3,172(sp)
100079ec:	d8002a15 	stw	zero,168(sp)
100079f0:	d8003215 	stw	zero,200(sp)
100079f4:	dc001404 	addi	r16,sp,80
100079f8:	0039883a 	mov	fp,zero
100079fc:	003e5306 	br	1000734c <__alt_data_end+0xf800734c>
10007a00:	01040074 	movhi	r4,4097
10007a04:	2119d904 	addi	r4,r4,26468
10007a08:	0039883a 	mov	fp,zero
10007a0c:	d9003915 	stw	r4,228(sp)
10007a10:	04401e04 	movi	r17,120
10007a14:	003f6906 	br	100077bc <__alt_data_end+0xf80077bc>
10007a18:	8025883a 	mov	r18,r16
10007a1c:	dc002903 	ldbu	r16,164(sp)
10007a20:	e011883a 	mov	r8,fp
10007a24:	84003fcc 	andi	r16,r16,255
10007a28:	8005081e 	bne	r16,zero,10008e4c <___vfprintf_internal_r+0x2290>
10007a2c:	883d6126 	beq	r17,zero,10006fb4 <__alt_data_end+0xf8006fb4>
10007a30:	00c00044 	movi	r3,1
10007a34:	d8c02915 	stw	r3,164(sp)
10007a38:	dc401405 	stb	r17,80(sp)
10007a3c:	d8002785 	stb	zero,158(sp)
10007a40:	003fe906 	br	100079e8 <__alt_data_end+0xf80079e8>
10007a44:	01440074 	movhi	r5,4097
10007a48:	2959d904 	addi	r5,r5,26468
10007a4c:	d9403915 	stw	r5,228(sp)
10007a50:	d8c02e15 	stw	r3,184(sp)
10007a54:	1025883a 	mov	r18,r2
10007a58:	04401e04 	movi	r17,120
10007a5c:	9d84b03a 	or	r2,r19,r22
10007a60:	1000fc1e 	bne	r2,zero,10007e54 <___vfprintf_internal_r+0x1298>
10007a64:	0039883a 	mov	fp,zero
10007a68:	00800084 	movi	r2,2
10007a6c:	10803fcc 	andi	r2,r2,255
10007a70:	00c00044 	movi	r3,1
10007a74:	10c20f26 	beq	r2,r3,100082b4 <___vfprintf_internal_r+0x16f8>
10007a78:	00c00084 	movi	r3,2
10007a7c:	10fd3326 	beq	r2,r3,10006f4c <__alt_data_end+0xf8006f4c>
10007a80:	003e0b06 	br	100072b0 <__alt_data_end+0xf80072b0>
10007a84:	d8c02017 	ldw	r3,128(sp)
10007a88:	003e7106 	br	10007450 <__alt_data_end+0xf8007450>
10007a8c:	00801944 	movi	r2,101
10007a90:	14407e0e 	bge	r2,r17,10007c8c <___vfprintf_internal_r+0x10d0>
10007a94:	d9003617 	ldw	r4,216(sp)
10007a98:	d9403817 	ldw	r5,224(sp)
10007a9c:	000d883a 	mov	r6,zero
10007aa0:	000f883a 	mov	r7,zero
10007aa4:	d8c03c15 	stw	r3,240(sp)
10007aa8:	da003d15 	stw	r8,244(sp)
10007aac:	00121200 	call	10012120 <__eqdf2>
10007ab0:	d8c03c17 	ldw	r3,240(sp)
10007ab4:	da003d17 	ldw	r8,244(sp)
10007ab8:	1000f71e 	bne	r2,zero,10007e98 <___vfprintf_internal_r+0x12dc>
10007abc:	d8801f17 	ldw	r2,124(sp)
10007ac0:	01040074 	movhi	r4,4097
10007ac4:	2119e004 	addi	r4,r4,26496
10007ac8:	18c00044 	addi	r3,r3,1
10007acc:	10800044 	addi	r2,r2,1
10007ad0:	41000015 	stw	r4,0(r8)
10007ad4:	01000044 	movi	r4,1
10007ad8:	41000115 	stw	r4,4(r8)
10007adc:	d8c02015 	stw	r3,128(sp)
10007ae0:	d8801f15 	stw	r2,124(sp)
10007ae4:	010001c4 	movi	r4,7
10007ae8:	2082b816 	blt	r4,r2,100085cc <___vfprintf_internal_r+0x1a10>
10007aec:	42000204 	addi	r8,r8,8
10007af0:	d8802617 	ldw	r2,152(sp)
10007af4:	d9403317 	ldw	r5,204(sp)
10007af8:	11400216 	blt	r2,r5,10007b04 <___vfprintf_internal_r+0xf48>
10007afc:	9080004c 	andi	r2,r18,1
10007b00:	103eb326 	beq	r2,zero,100075d0 <__alt_data_end+0xf80075d0>
10007b04:	d8803717 	ldw	r2,220(sp)
10007b08:	d9003417 	ldw	r4,208(sp)
10007b0c:	d9403717 	ldw	r5,220(sp)
10007b10:	1887883a 	add	r3,r3,r2
10007b14:	d8801f17 	ldw	r2,124(sp)
10007b18:	41000015 	stw	r4,0(r8)
10007b1c:	41400115 	stw	r5,4(r8)
10007b20:	10800044 	addi	r2,r2,1
10007b24:	d8c02015 	stw	r3,128(sp)
10007b28:	d8801f15 	stw	r2,124(sp)
10007b2c:	010001c4 	movi	r4,7
10007b30:	20832916 	blt	r4,r2,100087d8 <___vfprintf_internal_r+0x1c1c>
10007b34:	42000204 	addi	r8,r8,8
10007b38:	d8803317 	ldw	r2,204(sp)
10007b3c:	143fffc4 	addi	r16,r2,-1
10007b40:	043ea30e 	bge	zero,r16,100075d0 <__alt_data_end+0xf80075d0>
10007b44:	04400404 	movi	r17,16
10007b48:	d8801f17 	ldw	r2,124(sp)
10007b4c:	8c00880e 	bge	r17,r16,10007d70 <___vfprintf_internal_r+0x11b4>
10007b50:	01440074 	movhi	r5,4097
10007b54:	2959e084 	addi	r5,r5,26498
10007b58:	d9402c15 	stw	r5,176(sp)
10007b5c:	058001c4 	movi	r22,7
10007b60:	dcc02d17 	ldw	r19,180(sp)
10007b64:	00000306 	br	10007b74 <___vfprintf_internal_r+0xfb8>
10007b68:	42000204 	addi	r8,r8,8
10007b6c:	843ffc04 	addi	r16,r16,-16
10007b70:	8c00820e 	bge	r17,r16,10007d7c <___vfprintf_internal_r+0x11c0>
10007b74:	18c00404 	addi	r3,r3,16
10007b78:	10800044 	addi	r2,r2,1
10007b7c:	45000015 	stw	r20,0(r8)
10007b80:	44400115 	stw	r17,4(r8)
10007b84:	d8c02015 	stw	r3,128(sp)
10007b88:	d8801f15 	stw	r2,124(sp)
10007b8c:	b0bff60e 	bge	r22,r2,10007b68 <__alt_data_end+0xf8007b68>
10007b90:	d9801e04 	addi	r6,sp,120
10007b94:	b80b883a 	mov	r5,r23
10007b98:	9809883a 	mov	r4,r19
10007b9c:	000e39c0 	call	1000e39c <__sprint_r>
10007ba0:	103d0a1e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
10007ba4:	d8c02017 	ldw	r3,128(sp)
10007ba8:	d8801f17 	ldw	r2,124(sp)
10007bac:	da000404 	addi	r8,sp,16
10007bb0:	003fee06 	br	10007b6c <__alt_data_end+0xf8007b6c>
10007bb4:	d9403117 	ldw	r5,196(sp)
10007bb8:	d8802917 	ldw	r2,164(sp)
10007bbc:	28adc83a 	sub	r22,r5,r2
10007bc0:	05be410e 	bge	zero,r22,100074c8 <__alt_data_end+0xf80074c8>
10007bc4:	07000404 	movi	fp,16
10007bc8:	d8801f17 	ldw	r2,124(sp)
10007bcc:	e5838f0e 	bge	fp,r22,10008a0c <___vfprintf_internal_r+0x1e50>
10007bd0:	01440074 	movhi	r5,4097
10007bd4:	2959e084 	addi	r5,r5,26498
10007bd8:	dc403015 	stw	r17,192(sp)
10007bdc:	d9402c15 	stw	r5,176(sp)
10007be0:	b023883a 	mov	r17,r22
10007be4:	04c001c4 	movi	r19,7
10007be8:	a82d883a 	mov	r22,r21
10007bec:	902b883a 	mov	r21,r18
10007bf0:	8025883a 	mov	r18,r16
10007bf4:	dc002d17 	ldw	r16,180(sp)
10007bf8:	00000306 	br	10007c08 <___vfprintf_internal_r+0x104c>
10007bfc:	8c7ffc04 	addi	r17,r17,-16
10007c00:	42000204 	addi	r8,r8,8
10007c04:	e440110e 	bge	fp,r17,10007c4c <___vfprintf_internal_r+0x1090>
10007c08:	18c00404 	addi	r3,r3,16
10007c0c:	10800044 	addi	r2,r2,1
10007c10:	45000015 	stw	r20,0(r8)
10007c14:	47000115 	stw	fp,4(r8)
10007c18:	d8c02015 	stw	r3,128(sp)
10007c1c:	d8801f15 	stw	r2,124(sp)
10007c20:	98bff60e 	bge	r19,r2,10007bfc <__alt_data_end+0xf8007bfc>
10007c24:	d9801e04 	addi	r6,sp,120
10007c28:	b80b883a 	mov	r5,r23
10007c2c:	8009883a 	mov	r4,r16
10007c30:	000e39c0 	call	1000e39c <__sprint_r>
10007c34:	103ce51e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
10007c38:	8c7ffc04 	addi	r17,r17,-16
10007c3c:	d8c02017 	ldw	r3,128(sp)
10007c40:	d8801f17 	ldw	r2,124(sp)
10007c44:	da000404 	addi	r8,sp,16
10007c48:	e47fef16 	blt	fp,r17,10007c08 <__alt_data_end+0xf8007c08>
10007c4c:	9021883a 	mov	r16,r18
10007c50:	a825883a 	mov	r18,r21
10007c54:	b02b883a 	mov	r21,r22
10007c58:	882d883a 	mov	r22,r17
10007c5c:	dc403017 	ldw	r17,192(sp)
10007c60:	d9002c17 	ldw	r4,176(sp)
10007c64:	1d87883a 	add	r3,r3,r22
10007c68:	10800044 	addi	r2,r2,1
10007c6c:	41000015 	stw	r4,0(r8)
10007c70:	45800115 	stw	r22,4(r8)
10007c74:	d8c02015 	stw	r3,128(sp)
10007c78:	d8801f15 	stw	r2,124(sp)
10007c7c:	010001c4 	movi	r4,7
10007c80:	20818e16 	blt	r4,r2,100082bc <___vfprintf_internal_r+0x1700>
10007c84:	42000204 	addi	r8,r8,8
10007c88:	003e0f06 	br	100074c8 <__alt_data_end+0xf80074c8>
10007c8c:	d9403317 	ldw	r5,204(sp)
10007c90:	00800044 	movi	r2,1
10007c94:	18c00044 	addi	r3,r3,1
10007c98:	1141530e 	bge	r2,r5,100081e8 <___vfprintf_internal_r+0x162c>
10007c9c:	dc401f17 	ldw	r17,124(sp)
10007ca0:	00800044 	movi	r2,1
10007ca4:	40800115 	stw	r2,4(r8)
10007ca8:	8c400044 	addi	r17,r17,1
10007cac:	44000015 	stw	r16,0(r8)
10007cb0:	d8c02015 	stw	r3,128(sp)
10007cb4:	dc401f15 	stw	r17,124(sp)
10007cb8:	008001c4 	movi	r2,7
10007cbc:	14416b16 	blt	r2,r17,1000826c <___vfprintf_internal_r+0x16b0>
10007cc0:	42000204 	addi	r8,r8,8
10007cc4:	d8803717 	ldw	r2,220(sp)
10007cc8:	d9003417 	ldw	r4,208(sp)
10007ccc:	8c400044 	addi	r17,r17,1
10007cd0:	10c7883a 	add	r3,r2,r3
10007cd4:	40800115 	stw	r2,4(r8)
10007cd8:	41000015 	stw	r4,0(r8)
10007cdc:	d8c02015 	stw	r3,128(sp)
10007ce0:	dc401f15 	stw	r17,124(sp)
10007ce4:	008001c4 	movi	r2,7
10007ce8:	14416916 	blt	r2,r17,10008290 <___vfprintf_internal_r+0x16d4>
10007cec:	45800204 	addi	r22,r8,8
10007cf0:	d9003617 	ldw	r4,216(sp)
10007cf4:	d9403817 	ldw	r5,224(sp)
10007cf8:	000d883a 	mov	r6,zero
10007cfc:	000f883a 	mov	r7,zero
10007d00:	d8c03c15 	stw	r3,240(sp)
10007d04:	00121200 	call	10012120 <__eqdf2>
10007d08:	d8c03c17 	ldw	r3,240(sp)
10007d0c:	1000bc26 	beq	r2,zero,10008000 <___vfprintf_internal_r+0x1444>
10007d10:	d9403317 	ldw	r5,204(sp)
10007d14:	84000044 	addi	r16,r16,1
10007d18:	8c400044 	addi	r17,r17,1
10007d1c:	28bfffc4 	addi	r2,r5,-1
10007d20:	1887883a 	add	r3,r3,r2
10007d24:	b0800115 	stw	r2,4(r22)
10007d28:	b4000015 	stw	r16,0(r22)
10007d2c:	d8c02015 	stw	r3,128(sp)
10007d30:	dc401f15 	stw	r17,124(sp)
10007d34:	008001c4 	movi	r2,7
10007d38:	14414316 	blt	r2,r17,10008248 <___vfprintf_internal_r+0x168c>
10007d3c:	b5800204 	addi	r22,r22,8
10007d40:	d9003a17 	ldw	r4,232(sp)
10007d44:	df0022c4 	addi	fp,sp,139
10007d48:	8c400044 	addi	r17,r17,1
10007d4c:	20c7883a 	add	r3,r4,r3
10007d50:	b7000015 	stw	fp,0(r22)
10007d54:	b1000115 	stw	r4,4(r22)
10007d58:	d8c02015 	stw	r3,128(sp)
10007d5c:	dc401f15 	stw	r17,124(sp)
10007d60:	008001c4 	movi	r2,7
10007d64:	14400e16 	blt	r2,r17,10007da0 <___vfprintf_internal_r+0x11e4>
10007d68:	b2000204 	addi	r8,r22,8
10007d6c:	003e1806 	br	100075d0 <__alt_data_end+0xf80075d0>
10007d70:	01040074 	movhi	r4,4097
10007d74:	2119e084 	addi	r4,r4,26498
10007d78:	d9002c15 	stw	r4,176(sp)
10007d7c:	d9002c17 	ldw	r4,176(sp)
10007d80:	1c07883a 	add	r3,r3,r16
10007d84:	44000115 	stw	r16,4(r8)
10007d88:	41000015 	stw	r4,0(r8)
10007d8c:	10800044 	addi	r2,r2,1
10007d90:	d8c02015 	stw	r3,128(sp)
10007d94:	d8801f15 	stw	r2,124(sp)
10007d98:	010001c4 	movi	r4,7
10007d9c:	20be0b0e 	bge	r4,r2,100075cc <__alt_data_end+0xf80075cc>
10007da0:	d9002d17 	ldw	r4,180(sp)
10007da4:	d9801e04 	addi	r6,sp,120
10007da8:	b80b883a 	mov	r5,r23
10007dac:	000e39c0 	call	1000e39c <__sprint_r>
10007db0:	103c861e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
10007db4:	d8c02017 	ldw	r3,128(sp)
10007db8:	da000404 	addi	r8,sp,16
10007dbc:	003e0406 	br	100075d0 <__alt_data_end+0xf80075d0>
10007dc0:	d9002d17 	ldw	r4,180(sp)
10007dc4:	d9801e04 	addi	r6,sp,120
10007dc8:	b80b883a 	mov	r5,r23
10007dcc:	000e39c0 	call	1000e39c <__sprint_r>
10007dd0:	103e3b26 	beq	r2,zero,100076c0 <__alt_data_end+0xf80076c0>
10007dd4:	003c7d06 	br	10006fcc <__alt_data_end+0xf8006fcc>
10007dd8:	d9002d17 	ldw	r4,180(sp)
10007ddc:	d9801e04 	addi	r6,sp,120
10007de0:	b80b883a 	mov	r5,r23
10007de4:	000e39c0 	call	1000e39c <__sprint_r>
10007de8:	103c781e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
10007dec:	d8c02017 	ldw	r3,128(sp)
10007df0:	da000404 	addi	r8,sp,16
10007df4:	003de906 	br	1000759c <__alt_data_end+0xf800759c>
10007df8:	d9002d17 	ldw	r4,180(sp)
10007dfc:	d9801e04 	addi	r6,sp,120
10007e00:	b80b883a 	mov	r5,r23
10007e04:	000e39c0 	call	1000e39c <__sprint_r>
10007e08:	103c701e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
10007e0c:	d8c02017 	ldw	r3,128(sp)
10007e10:	da000404 	addi	r8,sp,16
10007e14:	003d9b06 	br	10007484 <__alt_data_end+0xf8007484>
10007e18:	d9002d17 	ldw	r4,180(sp)
10007e1c:	d9801e04 	addi	r6,sp,120
10007e20:	b80b883a 	mov	r5,r23
10007e24:	000e39c0 	call	1000e39c <__sprint_r>
10007e28:	103c681e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
10007e2c:	d8c02017 	ldw	r3,128(sp)
10007e30:	da000404 	addi	r8,sp,16
10007e34:	003da106 	br	100074bc <__alt_data_end+0xf80074bc>
10007e38:	d9402a17 	ldw	r5,168(sp)
10007e3c:	d8002785 	stb	zero,158(sp)
10007e40:	283f0616 	blt	r5,zero,10007a5c <__alt_data_end+0xf8007a5c>
10007e44:	00ffdfc4 	movi	r3,-129
10007e48:	9d84b03a 	or	r2,r19,r22
10007e4c:	90e4703a 	and	r18,r18,r3
10007e50:	103c3b26 	beq	r2,zero,10006f40 <__alt_data_end+0xf8006f40>
10007e54:	0039883a 	mov	fp,zero
10007e58:	003e5806 	br	100077bc <__alt_data_end+0xf80077bc>
10007e5c:	9080040c 	andi	r2,r18,16
10007e60:	1001b326 	beq	r2,zero,10008530 <___vfprintf_internal_r+0x1974>
10007e64:	d8c02e17 	ldw	r3,184(sp)
10007e68:	d9002a17 	ldw	r4,168(sp)
10007e6c:	d8002785 	stb	zero,158(sp)
10007e70:	18800104 	addi	r2,r3,4
10007e74:	1cc00017 	ldw	r19,0(r3)
10007e78:	002d883a 	mov	r22,zero
10007e7c:	2001b516 	blt	r4,zero,10008554 <___vfprintf_internal_r+0x1998>
10007e80:	00ffdfc4 	movi	r3,-129
10007e84:	d8802e15 	stw	r2,184(sp)
10007e88:	90e4703a 	and	r18,r18,r3
10007e8c:	983d0526 	beq	r19,zero,100072a4 <__alt_data_end+0xf80072a4>
10007e90:	0039883a 	mov	fp,zero
10007e94:	003d0806 	br	100072b8 <__alt_data_end+0xf80072b8>
10007e98:	dc402617 	ldw	r17,152(sp)
10007e9c:	0441d30e 	bge	zero,r17,100085ec <___vfprintf_internal_r+0x1a30>
10007ea0:	dc403217 	ldw	r17,200(sp)
10007ea4:	d8803317 	ldw	r2,204(sp)
10007ea8:	1440010e 	bge	r2,r17,10007eb0 <___vfprintf_internal_r+0x12f4>
10007eac:	1023883a 	mov	r17,r2
10007eb0:	04400a0e 	bge	zero,r17,10007edc <___vfprintf_internal_r+0x1320>
10007eb4:	d8801f17 	ldw	r2,124(sp)
10007eb8:	1c47883a 	add	r3,r3,r17
10007ebc:	44000015 	stw	r16,0(r8)
10007ec0:	10800044 	addi	r2,r2,1
10007ec4:	44400115 	stw	r17,4(r8)
10007ec8:	d8c02015 	stw	r3,128(sp)
10007ecc:	d8801f15 	stw	r2,124(sp)
10007ed0:	010001c4 	movi	r4,7
10007ed4:	20826516 	blt	r4,r2,1000886c <___vfprintf_internal_r+0x1cb0>
10007ed8:	42000204 	addi	r8,r8,8
10007edc:	88026116 	blt	r17,zero,10008864 <___vfprintf_internal_r+0x1ca8>
10007ee0:	d9003217 	ldw	r4,200(sp)
10007ee4:	2463c83a 	sub	r17,r4,r17
10007ee8:	04407b0e 	bge	zero,r17,100080d8 <___vfprintf_internal_r+0x151c>
10007eec:	05800404 	movi	r22,16
10007ef0:	d8801f17 	ldw	r2,124(sp)
10007ef4:	b4419d0e 	bge	r22,r17,1000856c <___vfprintf_internal_r+0x19b0>
10007ef8:	01040074 	movhi	r4,4097
10007efc:	2119e084 	addi	r4,r4,26498
10007f00:	d9002c15 	stw	r4,176(sp)
10007f04:	070001c4 	movi	fp,7
10007f08:	dcc02d17 	ldw	r19,180(sp)
10007f0c:	00000306 	br	10007f1c <___vfprintf_internal_r+0x1360>
10007f10:	42000204 	addi	r8,r8,8
10007f14:	8c7ffc04 	addi	r17,r17,-16
10007f18:	b441970e 	bge	r22,r17,10008578 <___vfprintf_internal_r+0x19bc>
10007f1c:	18c00404 	addi	r3,r3,16
10007f20:	10800044 	addi	r2,r2,1
10007f24:	45000015 	stw	r20,0(r8)
10007f28:	45800115 	stw	r22,4(r8)
10007f2c:	d8c02015 	stw	r3,128(sp)
10007f30:	d8801f15 	stw	r2,124(sp)
10007f34:	e0bff60e 	bge	fp,r2,10007f10 <__alt_data_end+0xf8007f10>
10007f38:	d9801e04 	addi	r6,sp,120
10007f3c:	b80b883a 	mov	r5,r23
10007f40:	9809883a 	mov	r4,r19
10007f44:	000e39c0 	call	1000e39c <__sprint_r>
10007f48:	103c201e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
10007f4c:	d8c02017 	ldw	r3,128(sp)
10007f50:	d8801f17 	ldw	r2,124(sp)
10007f54:	da000404 	addi	r8,sp,16
10007f58:	003fee06 	br	10007f14 <__alt_data_end+0xf8007f14>
10007f5c:	d9002d17 	ldw	r4,180(sp)
10007f60:	d9801e04 	addi	r6,sp,120
10007f64:	b80b883a 	mov	r5,r23
10007f68:	000e39c0 	call	1000e39c <__sprint_r>
10007f6c:	103c171e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
10007f70:	d8c02017 	ldw	r3,128(sp)
10007f74:	df002787 	ldb	fp,158(sp)
10007f78:	da000404 	addi	r8,sp,16
10007f7c:	003d3406 	br	10007450 <__alt_data_end+0xf8007450>
10007f80:	9080040c 	andi	r2,r18,16
10007f84:	10016126 	beq	r2,zero,1000850c <___vfprintf_internal_r+0x1950>
10007f88:	d9402e17 	ldw	r5,184(sp)
10007f8c:	2cc00017 	ldw	r19,0(r5)
10007f90:	29400104 	addi	r5,r5,4
10007f94:	d9402e15 	stw	r5,184(sp)
10007f98:	982dd7fa 	srai	r22,r19,31
10007f9c:	b005883a 	mov	r2,r22
10007fa0:	003c5a06 	br	1000710c <__alt_data_end+0xf800710c>
10007fa4:	9080040c 	andi	r2,r18,16
10007fa8:	10003526 	beq	r2,zero,10008080 <___vfprintf_internal_r+0x14c4>
10007fac:	d8c02e17 	ldw	r3,184(sp)
10007fb0:	d9002a17 	ldw	r4,168(sp)
10007fb4:	d8002785 	stb	zero,158(sp)
10007fb8:	18800104 	addi	r2,r3,4
10007fbc:	1cc00017 	ldw	r19,0(r3)
10007fc0:	002d883a 	mov	r22,zero
10007fc4:	20003716 	blt	r4,zero,100080a4 <___vfprintf_internal_r+0x14e8>
10007fc8:	00ffdfc4 	movi	r3,-129
10007fcc:	d8802e15 	stw	r2,184(sp)
10007fd0:	90e4703a 	and	r18,r18,r3
10007fd4:	0039883a 	mov	fp,zero
10007fd8:	983dd426 	beq	r19,zero,1000772c <__alt_data_end+0xf800772c>
10007fdc:	00800244 	movi	r2,9
10007fe0:	14fc5336 	bltu	r2,r19,10007130 <__alt_data_end+0xf8007130>
10007fe4:	d8c02817 	ldw	r3,160(sp)
10007fe8:	dc001dc4 	addi	r16,sp,119
10007fec:	9cc00c04 	addi	r19,r19,48
10007ff0:	1c07c83a 	sub	r3,r3,r16
10007ff4:	dcc01dc5 	stb	r19,119(sp)
10007ff8:	d8c02b15 	stw	r3,172(sp)
10007ffc:	003cc606 	br	10007318 <__alt_data_end+0xf8007318>
10008000:	d8803317 	ldw	r2,204(sp)
10008004:	143fffc4 	addi	r16,r2,-1
10008008:	043f4d0e 	bge	zero,r16,10007d40 <__alt_data_end+0xf8007d40>
1000800c:	07000404 	movi	fp,16
10008010:	e400810e 	bge	fp,r16,10008218 <___vfprintf_internal_r+0x165c>
10008014:	01440074 	movhi	r5,4097
10008018:	2959e084 	addi	r5,r5,26498
1000801c:	d9402c15 	stw	r5,176(sp)
10008020:	01c001c4 	movi	r7,7
10008024:	dcc02d17 	ldw	r19,180(sp)
10008028:	00000306 	br	10008038 <___vfprintf_internal_r+0x147c>
1000802c:	b5800204 	addi	r22,r22,8
10008030:	843ffc04 	addi	r16,r16,-16
10008034:	e4007b0e 	bge	fp,r16,10008224 <___vfprintf_internal_r+0x1668>
10008038:	18c00404 	addi	r3,r3,16
1000803c:	8c400044 	addi	r17,r17,1
10008040:	b5000015 	stw	r20,0(r22)
10008044:	b7000115 	stw	fp,4(r22)
10008048:	d8c02015 	stw	r3,128(sp)
1000804c:	dc401f15 	stw	r17,124(sp)
10008050:	3c7ff60e 	bge	r7,r17,1000802c <__alt_data_end+0xf800802c>
10008054:	d9801e04 	addi	r6,sp,120
10008058:	b80b883a 	mov	r5,r23
1000805c:	9809883a 	mov	r4,r19
10008060:	d9c03c15 	stw	r7,240(sp)
10008064:	000e39c0 	call	1000e39c <__sprint_r>
10008068:	d9c03c17 	ldw	r7,240(sp)
1000806c:	103bd71e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
10008070:	d8c02017 	ldw	r3,128(sp)
10008074:	dc401f17 	ldw	r17,124(sp)
10008078:	dd800404 	addi	r22,sp,16
1000807c:	003fec06 	br	10008030 <__alt_data_end+0xf8008030>
10008080:	9080100c 	andi	r2,r18,64
10008084:	d8002785 	stb	zero,158(sp)
10008088:	10010e26 	beq	r2,zero,100084c4 <___vfprintf_internal_r+0x1908>
1000808c:	d9402e17 	ldw	r5,184(sp)
10008090:	d8c02a17 	ldw	r3,168(sp)
10008094:	002d883a 	mov	r22,zero
10008098:	28800104 	addi	r2,r5,4
1000809c:	2cc0000b 	ldhu	r19,0(r5)
100080a0:	183fc90e 	bge	r3,zero,10007fc8 <__alt_data_end+0xf8007fc8>
100080a4:	d8802e15 	stw	r2,184(sp)
100080a8:	0039883a 	mov	fp,zero
100080ac:	9d84b03a 	or	r2,r19,r22
100080b0:	103c1e1e 	bne	r2,zero,1000712c <__alt_data_end+0xf800712c>
100080b4:	00800044 	movi	r2,1
100080b8:	003e6c06 	br	10007a6c <__alt_data_end+0xf8007a6c>
100080bc:	d9002d17 	ldw	r4,180(sp)
100080c0:	d9801e04 	addi	r6,sp,120
100080c4:	b80b883a 	mov	r5,r23
100080c8:	000e39c0 	call	1000e39c <__sprint_r>
100080cc:	103bbf1e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
100080d0:	d8c02017 	ldw	r3,128(sp)
100080d4:	da000404 	addi	r8,sp,16
100080d8:	d9003217 	ldw	r4,200(sp)
100080dc:	d8802617 	ldw	r2,152(sp)
100080e0:	d9403317 	ldw	r5,204(sp)
100080e4:	8123883a 	add	r17,r16,r4
100080e8:	11400216 	blt	r2,r5,100080f4 <___vfprintf_internal_r+0x1538>
100080ec:	9100004c 	andi	r4,r18,1
100080f0:	20000d26 	beq	r4,zero,10008128 <___vfprintf_internal_r+0x156c>
100080f4:	d9003717 	ldw	r4,220(sp)
100080f8:	d9403417 	ldw	r5,208(sp)
100080fc:	1907883a 	add	r3,r3,r4
10008100:	d9001f17 	ldw	r4,124(sp)
10008104:	41400015 	stw	r5,0(r8)
10008108:	d9403717 	ldw	r5,220(sp)
1000810c:	21000044 	addi	r4,r4,1
10008110:	d8c02015 	stw	r3,128(sp)
10008114:	41400115 	stw	r5,4(r8)
10008118:	d9001f15 	stw	r4,124(sp)
1000811c:	014001c4 	movi	r5,7
10008120:	2901e816 	blt	r5,r4,100088c4 <___vfprintf_internal_r+0x1d08>
10008124:	42000204 	addi	r8,r8,8
10008128:	d9003317 	ldw	r4,204(sp)
1000812c:	8121883a 	add	r16,r16,r4
10008130:	2085c83a 	sub	r2,r4,r2
10008134:	8461c83a 	sub	r16,r16,r17
10008138:	1400010e 	bge	r2,r16,10008140 <___vfprintf_internal_r+0x1584>
1000813c:	1021883a 	mov	r16,r2
10008140:	04000a0e 	bge	zero,r16,1000816c <___vfprintf_internal_r+0x15b0>
10008144:	d9001f17 	ldw	r4,124(sp)
10008148:	1c07883a 	add	r3,r3,r16
1000814c:	44400015 	stw	r17,0(r8)
10008150:	21000044 	addi	r4,r4,1
10008154:	44000115 	stw	r16,4(r8)
10008158:	d8c02015 	stw	r3,128(sp)
1000815c:	d9001f15 	stw	r4,124(sp)
10008160:	014001c4 	movi	r5,7
10008164:	2901fb16 	blt	r5,r4,10008954 <___vfprintf_internal_r+0x1d98>
10008168:	42000204 	addi	r8,r8,8
1000816c:	8001f716 	blt	r16,zero,1000894c <___vfprintf_internal_r+0x1d90>
10008170:	1421c83a 	sub	r16,r2,r16
10008174:	043d160e 	bge	zero,r16,100075d0 <__alt_data_end+0xf80075d0>
10008178:	04400404 	movi	r17,16
1000817c:	d8801f17 	ldw	r2,124(sp)
10008180:	8c3efb0e 	bge	r17,r16,10007d70 <__alt_data_end+0xf8007d70>
10008184:	01440074 	movhi	r5,4097
10008188:	2959e084 	addi	r5,r5,26498
1000818c:	d9402c15 	stw	r5,176(sp)
10008190:	058001c4 	movi	r22,7
10008194:	dcc02d17 	ldw	r19,180(sp)
10008198:	00000306 	br	100081a8 <___vfprintf_internal_r+0x15ec>
1000819c:	42000204 	addi	r8,r8,8
100081a0:	843ffc04 	addi	r16,r16,-16
100081a4:	8c3ef50e 	bge	r17,r16,10007d7c <__alt_data_end+0xf8007d7c>
100081a8:	18c00404 	addi	r3,r3,16
100081ac:	10800044 	addi	r2,r2,1
100081b0:	45000015 	stw	r20,0(r8)
100081b4:	44400115 	stw	r17,4(r8)
100081b8:	d8c02015 	stw	r3,128(sp)
100081bc:	d8801f15 	stw	r2,124(sp)
100081c0:	b0bff60e 	bge	r22,r2,1000819c <__alt_data_end+0xf800819c>
100081c4:	d9801e04 	addi	r6,sp,120
100081c8:	b80b883a 	mov	r5,r23
100081cc:	9809883a 	mov	r4,r19
100081d0:	000e39c0 	call	1000e39c <__sprint_r>
100081d4:	103b7d1e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
100081d8:	d8c02017 	ldw	r3,128(sp)
100081dc:	d8801f17 	ldw	r2,124(sp)
100081e0:	da000404 	addi	r8,sp,16
100081e4:	003fee06 	br	100081a0 <__alt_data_end+0xf80081a0>
100081e8:	9088703a 	and	r4,r18,r2
100081ec:	203eab1e 	bne	r4,zero,10007c9c <__alt_data_end+0xf8007c9c>
100081f0:	dc401f17 	ldw	r17,124(sp)
100081f4:	40800115 	stw	r2,4(r8)
100081f8:	44000015 	stw	r16,0(r8)
100081fc:	8c400044 	addi	r17,r17,1
10008200:	d8c02015 	stw	r3,128(sp)
10008204:	dc401f15 	stw	r17,124(sp)
10008208:	008001c4 	movi	r2,7
1000820c:	14400e16 	blt	r2,r17,10008248 <___vfprintf_internal_r+0x168c>
10008210:	45800204 	addi	r22,r8,8
10008214:	003eca06 	br	10007d40 <__alt_data_end+0xf8007d40>
10008218:	01040074 	movhi	r4,4097
1000821c:	2119e084 	addi	r4,r4,26498
10008220:	d9002c15 	stw	r4,176(sp)
10008224:	d8802c17 	ldw	r2,176(sp)
10008228:	1c07883a 	add	r3,r3,r16
1000822c:	8c400044 	addi	r17,r17,1
10008230:	b0800015 	stw	r2,0(r22)
10008234:	b4000115 	stw	r16,4(r22)
10008238:	d8c02015 	stw	r3,128(sp)
1000823c:	dc401f15 	stw	r17,124(sp)
10008240:	008001c4 	movi	r2,7
10008244:	147ebd0e 	bge	r2,r17,10007d3c <__alt_data_end+0xf8007d3c>
10008248:	d9002d17 	ldw	r4,180(sp)
1000824c:	d9801e04 	addi	r6,sp,120
10008250:	b80b883a 	mov	r5,r23
10008254:	000e39c0 	call	1000e39c <__sprint_r>
10008258:	103b5c1e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
1000825c:	d8c02017 	ldw	r3,128(sp)
10008260:	dc401f17 	ldw	r17,124(sp)
10008264:	dd800404 	addi	r22,sp,16
10008268:	003eb506 	br	10007d40 <__alt_data_end+0xf8007d40>
1000826c:	d9002d17 	ldw	r4,180(sp)
10008270:	d9801e04 	addi	r6,sp,120
10008274:	b80b883a 	mov	r5,r23
10008278:	000e39c0 	call	1000e39c <__sprint_r>
1000827c:	103b531e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
10008280:	d8c02017 	ldw	r3,128(sp)
10008284:	dc401f17 	ldw	r17,124(sp)
10008288:	da000404 	addi	r8,sp,16
1000828c:	003e8d06 	br	10007cc4 <__alt_data_end+0xf8007cc4>
10008290:	d9002d17 	ldw	r4,180(sp)
10008294:	d9801e04 	addi	r6,sp,120
10008298:	b80b883a 	mov	r5,r23
1000829c:	000e39c0 	call	1000e39c <__sprint_r>
100082a0:	103b4a1e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
100082a4:	d8c02017 	ldw	r3,128(sp)
100082a8:	dc401f17 	ldw	r17,124(sp)
100082ac:	dd800404 	addi	r22,sp,16
100082b0:	003e8f06 	br	10007cf0 <__alt_data_end+0xf8007cf0>
100082b4:	0027883a 	mov	r19,zero
100082b8:	003f4a06 	br	10007fe4 <__alt_data_end+0xf8007fe4>
100082bc:	d9002d17 	ldw	r4,180(sp)
100082c0:	d9801e04 	addi	r6,sp,120
100082c4:	b80b883a 	mov	r5,r23
100082c8:	000e39c0 	call	1000e39c <__sprint_r>
100082cc:	103b3f1e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
100082d0:	d8c02017 	ldw	r3,128(sp)
100082d4:	da000404 	addi	r8,sp,16
100082d8:	003c7b06 	br	100074c8 <__alt_data_end+0xf80074c8>
100082dc:	d9402a17 	ldw	r5,168(sp)
100082e0:	04e7c83a 	sub	r19,zero,r19
100082e4:	07000b44 	movi	fp,45
100082e8:	9804c03a 	cmpne	r2,r19,zero
100082ec:	05adc83a 	sub	r22,zero,r22
100082f0:	df002785 	stb	fp,158(sp)
100082f4:	b0adc83a 	sub	r22,r22,r2
100082f8:	28017b16 	blt	r5,zero,100088e8 <___vfprintf_internal_r+0x1d2c>
100082fc:	00bfdfc4 	movi	r2,-129
10008300:	90a4703a 	and	r18,r18,r2
10008304:	003b8906 	br	1000712c <__alt_data_end+0xf800712c>
10008308:	d9003617 	ldw	r4,216(sp)
1000830c:	d9403817 	ldw	r5,224(sp)
10008310:	da003d15 	stw	r8,244(sp)
10008314:	000dfc00 	call	1000dfc0 <__fpclassifyd>
10008318:	da003d17 	ldw	r8,244(sp)
1000831c:	1000f026 	beq	r2,zero,100086e0 <___vfprintf_internal_r+0x1b24>
10008320:	d9002a17 	ldw	r4,168(sp)
10008324:	05bff7c4 	movi	r22,-33
10008328:	00bfffc4 	movi	r2,-1
1000832c:	8dac703a 	and	r22,r17,r22
10008330:	20820026 	beq	r4,r2,10008b34 <___vfprintf_internal_r+0x1f78>
10008334:	008011c4 	movi	r2,71
10008338:	b081f726 	beq	r22,r2,10008b18 <___vfprintf_internal_r+0x1f5c>
1000833c:	d9003817 	ldw	r4,224(sp)
10008340:	90c04014 	ori	r3,r18,256
10008344:	d8c02c15 	stw	r3,176(sp)
10008348:	20021516 	blt	r4,zero,10008ba0 <___vfprintf_internal_r+0x1fe4>
1000834c:	dcc03817 	ldw	r19,224(sp)
10008350:	d8002905 	stb	zero,164(sp)
10008354:	00801984 	movi	r2,102
10008358:	8881f926 	beq	r17,r2,10008b40 <___vfprintf_internal_r+0x1f84>
1000835c:	00801184 	movi	r2,70
10008360:	88821c26 	beq	r17,r2,10008bd4 <___vfprintf_internal_r+0x2018>
10008364:	00801144 	movi	r2,69
10008368:	b081ef26 	beq	r22,r2,10008b28 <___vfprintf_internal_r+0x1f6c>
1000836c:	d8c02a17 	ldw	r3,168(sp)
10008370:	d8802104 	addi	r2,sp,132
10008374:	d8800315 	stw	r2,12(sp)
10008378:	d9403617 	ldw	r5,216(sp)
1000837c:	d8802504 	addi	r2,sp,148
10008380:	d9002d17 	ldw	r4,180(sp)
10008384:	d8800215 	stw	r2,8(sp)
10008388:	d8802604 	addi	r2,sp,152
1000838c:	d8c00015 	stw	r3,0(sp)
10008390:	d8800115 	stw	r2,4(sp)
10008394:	01c00084 	movi	r7,2
10008398:	980d883a 	mov	r6,r19
1000839c:	d8c03c15 	stw	r3,240(sp)
100083a0:	da003d15 	stw	r8,244(sp)
100083a4:	00092ec0 	call	100092ec <_dtoa_r>
100083a8:	1021883a 	mov	r16,r2
100083ac:	008019c4 	movi	r2,103
100083b0:	d8c03c17 	ldw	r3,240(sp)
100083b4:	da003d17 	ldw	r8,244(sp)
100083b8:	88817126 	beq	r17,r2,10008980 <___vfprintf_internal_r+0x1dc4>
100083bc:	008011c4 	movi	r2,71
100083c0:	88829126 	beq	r17,r2,10008e08 <___vfprintf_internal_r+0x224c>
100083c4:	80f9883a 	add	fp,r16,r3
100083c8:	d9003617 	ldw	r4,216(sp)
100083cc:	000d883a 	mov	r6,zero
100083d0:	000f883a 	mov	r7,zero
100083d4:	980b883a 	mov	r5,r19
100083d8:	da003d15 	stw	r8,244(sp)
100083dc:	00121200 	call	10012120 <__eqdf2>
100083e0:	da003d17 	ldw	r8,244(sp)
100083e4:	10018d26 	beq	r2,zero,10008a1c <___vfprintf_internal_r+0x1e60>
100083e8:	d8802117 	ldw	r2,132(sp)
100083ec:	1700062e 	bgeu	r2,fp,10008408 <___vfprintf_internal_r+0x184c>
100083f0:	01000c04 	movi	r4,48
100083f4:	10c00044 	addi	r3,r2,1
100083f8:	d8c02115 	stw	r3,132(sp)
100083fc:	11000005 	stb	r4,0(r2)
10008400:	d8802117 	ldw	r2,132(sp)
10008404:	173ffb36 	bltu	r2,fp,100083f4 <__alt_data_end+0xf80083f4>
10008408:	1405c83a 	sub	r2,r2,r16
1000840c:	d8803315 	stw	r2,204(sp)
10008410:	008011c4 	movi	r2,71
10008414:	b0817626 	beq	r22,r2,100089f0 <___vfprintf_internal_r+0x1e34>
10008418:	00801944 	movi	r2,101
1000841c:	1442800e 	bge	r2,r17,10008e20 <___vfprintf_internal_r+0x2264>
10008420:	d8c02617 	ldw	r3,152(sp)
10008424:	00801984 	movi	r2,102
10008428:	d8c03215 	stw	r3,200(sp)
1000842c:	8881fe26 	beq	r17,r2,10008c28 <___vfprintf_internal_r+0x206c>
10008430:	d8c03217 	ldw	r3,200(sp)
10008434:	d9003317 	ldw	r4,204(sp)
10008438:	1901dd16 	blt	r3,r4,10008bb0 <___vfprintf_internal_r+0x1ff4>
1000843c:	9480004c 	andi	r18,r18,1
10008440:	90022b1e 	bne	r18,zero,10008cf0 <___vfprintf_internal_r+0x2134>
10008444:	1805883a 	mov	r2,r3
10008448:	18028316 	blt	r3,zero,10008e58 <___vfprintf_internal_r+0x229c>
1000844c:	d8c03217 	ldw	r3,200(sp)
10008450:	044019c4 	movi	r17,103
10008454:	d8c02b15 	stw	r3,172(sp)
10008458:	df002907 	ldb	fp,164(sp)
1000845c:	e001531e 	bne	fp,zero,100089ac <___vfprintf_internal_r+0x1df0>
10008460:	df002783 	ldbu	fp,158(sp)
10008464:	d8802915 	stw	r2,164(sp)
10008468:	dc802c17 	ldw	r18,176(sp)
1000846c:	d8002a15 	stw	zero,168(sp)
10008470:	003baf06 	br	10007330 <__alt_data_end+0xf8007330>
10008474:	d8c02e17 	ldw	r3,184(sp)
10008478:	d9002e17 	ldw	r4,184(sp)
1000847c:	d9402e17 	ldw	r5,184(sp)
10008480:	18c00017 	ldw	r3,0(r3)
10008484:	21000117 	ldw	r4,4(r4)
10008488:	29400204 	addi	r5,r5,8
1000848c:	d8c03615 	stw	r3,216(sp)
10008490:	d9003815 	stw	r4,224(sp)
10008494:	d9402e15 	stw	r5,184(sp)
10008498:	003b5006 	br	100071dc <__alt_data_end+0xf80071dc>
1000849c:	ac400007 	ldb	r17,0(r21)
100084a0:	003a2806 	br	10006d44 <__alt_data_end+0xf8006d44>
100084a4:	9080100c 	andi	r2,r18,64
100084a8:	1000a826 	beq	r2,zero,1000874c <___vfprintf_internal_r+0x1b90>
100084ac:	d8c02e17 	ldw	r3,184(sp)
100084b0:	002d883a 	mov	r22,zero
100084b4:	1cc0000b 	ldhu	r19,0(r3)
100084b8:	18c00104 	addi	r3,r3,4
100084bc:	d8c02e15 	stw	r3,184(sp)
100084c0:	003caf06 	br	10007780 <__alt_data_end+0xf8007780>
100084c4:	d9002e17 	ldw	r4,184(sp)
100084c8:	d9402a17 	ldw	r5,168(sp)
100084cc:	002d883a 	mov	r22,zero
100084d0:	20800104 	addi	r2,r4,4
100084d4:	24c00017 	ldw	r19,0(r4)
100084d8:	283ebb0e 	bge	r5,zero,10007fc8 <__alt_data_end+0xf8007fc8>
100084dc:	003ef106 	br	100080a4 <__alt_data_end+0xf80080a4>
100084e0:	9080040c 	andi	r2,r18,16
100084e4:	1000921e 	bne	r2,zero,10008730 <___vfprintf_internal_r+0x1b74>
100084e8:	9480100c 	andi	r18,r18,64
100084ec:	90013926 	beq	r18,zero,100089d4 <___vfprintf_internal_r+0x1e18>
100084f0:	d9402e17 	ldw	r5,184(sp)
100084f4:	d8c02f17 	ldw	r3,188(sp)
100084f8:	28800017 	ldw	r2,0(r5)
100084fc:	29400104 	addi	r5,r5,4
10008500:	d9402e15 	stw	r5,184(sp)
10008504:	10c0000d 	sth	r3,0(r2)
10008508:	0039e406 	br	10006c9c <__alt_data_end+0xf8006c9c>
1000850c:	9080100c 	andi	r2,r18,64
10008510:	10008026 	beq	r2,zero,10008714 <___vfprintf_internal_r+0x1b58>
10008514:	d8802e17 	ldw	r2,184(sp)
10008518:	14c0000f 	ldh	r19,0(r2)
1000851c:	10800104 	addi	r2,r2,4
10008520:	d8802e15 	stw	r2,184(sp)
10008524:	982dd7fa 	srai	r22,r19,31
10008528:	b005883a 	mov	r2,r22
1000852c:	003af706 	br	1000710c <__alt_data_end+0xf800710c>
10008530:	9080100c 	andi	r2,r18,64
10008534:	d8002785 	stb	zero,158(sp)
10008538:	10008a1e 	bne	r2,zero,10008764 <___vfprintf_internal_r+0x1ba8>
1000853c:	d9002e17 	ldw	r4,184(sp)
10008540:	d9402a17 	ldw	r5,168(sp)
10008544:	002d883a 	mov	r22,zero
10008548:	20800104 	addi	r2,r4,4
1000854c:	24c00017 	ldw	r19,0(r4)
10008550:	283e4b0e 	bge	r5,zero,10007e80 <__alt_data_end+0xf8007e80>
10008554:	9d86b03a 	or	r3,r19,r22
10008558:	d8802e15 	stw	r2,184(sp)
1000855c:	183e4c1e 	bne	r3,zero,10007e90 <__alt_data_end+0xf8007e90>
10008560:	0039883a 	mov	fp,zero
10008564:	0005883a 	mov	r2,zero
10008568:	003d4006 	br	10007a6c <__alt_data_end+0xf8007a6c>
1000856c:	01440074 	movhi	r5,4097
10008570:	2959e084 	addi	r5,r5,26498
10008574:	d9402c15 	stw	r5,176(sp)
10008578:	d9402c17 	ldw	r5,176(sp)
1000857c:	1c47883a 	add	r3,r3,r17
10008580:	10800044 	addi	r2,r2,1
10008584:	41400015 	stw	r5,0(r8)
10008588:	44400115 	stw	r17,4(r8)
1000858c:	d8c02015 	stw	r3,128(sp)
10008590:	d8801f15 	stw	r2,124(sp)
10008594:	010001c4 	movi	r4,7
10008598:	20bec816 	blt	r4,r2,100080bc <__alt_data_end+0xf80080bc>
1000859c:	42000204 	addi	r8,r8,8
100085a0:	003ecd06 	br	100080d8 <__alt_data_end+0xf80080d8>
100085a4:	d9002a17 	ldw	r4,168(sp)
100085a8:	d8002785 	stb	zero,158(sp)
100085ac:	203d2d16 	blt	r4,zero,10007a64 <__alt_data_end+0xf8007a64>
100085b0:	00bfdfc4 	movi	r2,-129
100085b4:	90a4703a 	and	r18,r18,r2
100085b8:	003a6106 	br	10006f40 <__alt_data_end+0xf8006f40>
100085bc:	01040074 	movhi	r4,4097
100085c0:	2119e084 	addi	r4,r4,26498
100085c4:	d9002c15 	stw	r4,176(sp)
100085c8:	003bea06 	br	10007574 <__alt_data_end+0xf8007574>
100085cc:	d9002d17 	ldw	r4,180(sp)
100085d0:	d9801e04 	addi	r6,sp,120
100085d4:	b80b883a 	mov	r5,r23
100085d8:	000e39c0 	call	1000e39c <__sprint_r>
100085dc:	103a7b1e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
100085e0:	d8c02017 	ldw	r3,128(sp)
100085e4:	da000404 	addi	r8,sp,16
100085e8:	003d4106 	br	10007af0 <__alt_data_end+0xf8007af0>
100085ec:	d8801f17 	ldw	r2,124(sp)
100085f0:	01440074 	movhi	r5,4097
100085f4:	01000044 	movi	r4,1
100085f8:	18c00044 	addi	r3,r3,1
100085fc:	10800044 	addi	r2,r2,1
10008600:	2959e004 	addi	r5,r5,26496
10008604:	41000115 	stw	r4,4(r8)
10008608:	41400015 	stw	r5,0(r8)
1000860c:	d8c02015 	stw	r3,128(sp)
10008610:	d8801f15 	stw	r2,124(sp)
10008614:	010001c4 	movi	r4,7
10008618:	20805c16 	blt	r4,r2,1000878c <___vfprintf_internal_r+0x1bd0>
1000861c:	42000204 	addi	r8,r8,8
10008620:	8800041e 	bne	r17,zero,10008634 <___vfprintf_internal_r+0x1a78>
10008624:	d8803317 	ldw	r2,204(sp)
10008628:	1000021e 	bne	r2,zero,10008634 <___vfprintf_internal_r+0x1a78>
1000862c:	9080004c 	andi	r2,r18,1
10008630:	103be726 	beq	r2,zero,100075d0 <__alt_data_end+0xf80075d0>
10008634:	d9003717 	ldw	r4,220(sp)
10008638:	d8801f17 	ldw	r2,124(sp)
1000863c:	d9403417 	ldw	r5,208(sp)
10008640:	20c7883a 	add	r3,r4,r3
10008644:	10800044 	addi	r2,r2,1
10008648:	41000115 	stw	r4,4(r8)
1000864c:	41400015 	stw	r5,0(r8)
10008650:	d8c02015 	stw	r3,128(sp)
10008654:	d8801f15 	stw	r2,124(sp)
10008658:	010001c4 	movi	r4,7
1000865c:	20812116 	blt	r4,r2,10008ae4 <___vfprintf_internal_r+0x1f28>
10008660:	42000204 	addi	r8,r8,8
10008664:	0463c83a 	sub	r17,zero,r17
10008668:	0440730e 	bge	zero,r17,10008838 <___vfprintf_internal_r+0x1c7c>
1000866c:	05800404 	movi	r22,16
10008670:	b440860e 	bge	r22,r17,1000888c <___vfprintf_internal_r+0x1cd0>
10008674:	01440074 	movhi	r5,4097
10008678:	2959e084 	addi	r5,r5,26498
1000867c:	d9402c15 	stw	r5,176(sp)
10008680:	070001c4 	movi	fp,7
10008684:	dcc02d17 	ldw	r19,180(sp)
10008688:	00000306 	br	10008698 <___vfprintf_internal_r+0x1adc>
1000868c:	42000204 	addi	r8,r8,8
10008690:	8c7ffc04 	addi	r17,r17,-16
10008694:	b440800e 	bge	r22,r17,10008898 <___vfprintf_internal_r+0x1cdc>
10008698:	18c00404 	addi	r3,r3,16
1000869c:	10800044 	addi	r2,r2,1
100086a0:	45000015 	stw	r20,0(r8)
100086a4:	45800115 	stw	r22,4(r8)
100086a8:	d8c02015 	stw	r3,128(sp)
100086ac:	d8801f15 	stw	r2,124(sp)
100086b0:	e0bff60e 	bge	fp,r2,1000868c <__alt_data_end+0xf800868c>
100086b4:	d9801e04 	addi	r6,sp,120
100086b8:	b80b883a 	mov	r5,r23
100086bc:	9809883a 	mov	r4,r19
100086c0:	000e39c0 	call	1000e39c <__sprint_r>
100086c4:	103a411e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
100086c8:	d8c02017 	ldw	r3,128(sp)
100086cc:	d8801f17 	ldw	r2,124(sp)
100086d0:	da000404 	addi	r8,sp,16
100086d4:	003fee06 	br	10008690 <__alt_data_end+0xf8008690>
100086d8:	00bfffc4 	movi	r2,-1
100086dc:	003a3f06 	br	10006fdc <__alt_data_end+0xf8006fdc>
100086e0:	008011c4 	movi	r2,71
100086e4:	1440b816 	blt	r2,r17,100089c8 <___vfprintf_internal_r+0x1e0c>
100086e8:	04040074 	movhi	r16,4097
100086ec:	8419d204 	addi	r16,r16,26440
100086f0:	00c000c4 	movi	r3,3
100086f4:	00bfdfc4 	movi	r2,-129
100086f8:	d8c02915 	stw	r3,164(sp)
100086fc:	90a4703a 	and	r18,r18,r2
10008700:	df002783 	ldbu	fp,158(sp)
10008704:	d8c02b15 	stw	r3,172(sp)
10008708:	d8002a15 	stw	zero,168(sp)
1000870c:	d8003215 	stw	zero,200(sp)
10008710:	003b0706 	br	10007330 <__alt_data_end+0xf8007330>
10008714:	d8c02e17 	ldw	r3,184(sp)
10008718:	1cc00017 	ldw	r19,0(r3)
1000871c:	18c00104 	addi	r3,r3,4
10008720:	d8c02e15 	stw	r3,184(sp)
10008724:	982dd7fa 	srai	r22,r19,31
10008728:	b005883a 	mov	r2,r22
1000872c:	003a7706 	br	1000710c <__alt_data_end+0xf800710c>
10008730:	d8c02e17 	ldw	r3,184(sp)
10008734:	d9002f17 	ldw	r4,188(sp)
10008738:	18800017 	ldw	r2,0(r3)
1000873c:	18c00104 	addi	r3,r3,4
10008740:	d8c02e15 	stw	r3,184(sp)
10008744:	11000015 	stw	r4,0(r2)
10008748:	00395406 	br	10006c9c <__alt_data_end+0xf8006c9c>
1000874c:	d9002e17 	ldw	r4,184(sp)
10008750:	002d883a 	mov	r22,zero
10008754:	24c00017 	ldw	r19,0(r4)
10008758:	21000104 	addi	r4,r4,4
1000875c:	d9002e15 	stw	r4,184(sp)
10008760:	003c0706 	br	10007780 <__alt_data_end+0xf8007780>
10008764:	d9402e17 	ldw	r5,184(sp)
10008768:	d8c02a17 	ldw	r3,168(sp)
1000876c:	002d883a 	mov	r22,zero
10008770:	28800104 	addi	r2,r5,4
10008774:	2cc0000b 	ldhu	r19,0(r5)
10008778:	183dc10e 	bge	r3,zero,10007e80 <__alt_data_end+0xf8007e80>
1000877c:	003f7506 	br	10008554 <__alt_data_end+0xf8008554>
10008780:	04040074 	movhi	r16,4097
10008784:	8419d004 	addi	r16,r16,26432
10008788:	003aa706 	br	10007228 <__alt_data_end+0xf8007228>
1000878c:	d9002d17 	ldw	r4,180(sp)
10008790:	d9801e04 	addi	r6,sp,120
10008794:	b80b883a 	mov	r5,r23
10008798:	000e39c0 	call	1000e39c <__sprint_r>
1000879c:	103a0b1e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
100087a0:	dc402617 	ldw	r17,152(sp)
100087a4:	d8c02017 	ldw	r3,128(sp)
100087a8:	da000404 	addi	r8,sp,16
100087ac:	003f9c06 	br	10008620 <__alt_data_end+0xf8008620>
100087b0:	ac400043 	ldbu	r17,1(r21)
100087b4:	84000814 	ori	r16,r16,32
100087b8:	ad400044 	addi	r21,r21,1
100087bc:	8c403fcc 	andi	r17,r17,255
100087c0:	8c40201c 	xori	r17,r17,128
100087c4:	8c7fe004 	addi	r17,r17,-128
100087c8:	00395e06 	br	10006d44 <__alt_data_end+0xf8006d44>
100087cc:	d8c02e15 	stw	r3,184(sp)
100087d0:	0039883a 	mov	fp,zero
100087d4:	003e3506 	br	100080ac <__alt_data_end+0xf80080ac>
100087d8:	d9002d17 	ldw	r4,180(sp)
100087dc:	d9801e04 	addi	r6,sp,120
100087e0:	b80b883a 	mov	r5,r23
100087e4:	000e39c0 	call	1000e39c <__sprint_r>
100087e8:	1039f81e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
100087ec:	d8c02017 	ldw	r3,128(sp)
100087f0:	da000404 	addi	r8,sp,16
100087f4:	003cd006 	br	10007b38 <__alt_data_end+0xf8007b38>
100087f8:	8009883a 	mov	r4,r16
100087fc:	df003d15 	stw	fp,244(sp)
10008800:	0006b240 	call	10006b24 <strlen>
10008804:	d8802b15 	stw	r2,172(sp)
10008808:	da003d17 	ldw	r8,244(sp)
1000880c:	103c200e 	bge	r2,zero,10007890 <__alt_data_end+0xf8007890>
10008810:	0005883a 	mov	r2,zero
10008814:	003c1e06 	br	10007890 <__alt_data_end+0xf8007890>
10008818:	d9002d17 	ldw	r4,180(sp)
1000881c:	d9801e04 	addi	r6,sp,120
10008820:	b80b883a 	mov	r5,r23
10008824:	000e39c0 	call	1000e39c <__sprint_r>
10008828:	1039e81e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
1000882c:	d8c02017 	ldw	r3,128(sp)
10008830:	d8801f17 	ldw	r2,124(sp)
10008834:	da000404 	addi	r8,sp,16
10008838:	d9403317 	ldw	r5,204(sp)
1000883c:	10800044 	addi	r2,r2,1
10008840:	44000015 	stw	r16,0(r8)
10008844:	28c7883a 	add	r3,r5,r3
10008848:	003b5b06 	br	100075b8 <__alt_data_end+0xf80075b8>
1000884c:	01040074 	movhi	r4,4097
10008850:	2119e484 	addi	r4,r4,26514
10008854:	d9003515 	stw	r4,212(sp)
10008858:	003af206 	br	10007424 <__alt_data_end+0xf8007424>
1000885c:	013fffc4 	movi	r4,-1
10008860:	003a0806 	br	10007084 <__alt_data_end+0xf8007084>
10008864:	0023883a 	mov	r17,zero
10008868:	003d9d06 	br	10007ee0 <__alt_data_end+0xf8007ee0>
1000886c:	d9002d17 	ldw	r4,180(sp)
10008870:	d9801e04 	addi	r6,sp,120
10008874:	b80b883a 	mov	r5,r23
10008878:	000e39c0 	call	1000e39c <__sprint_r>
1000887c:	1039d31e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
10008880:	d8c02017 	ldw	r3,128(sp)
10008884:	da000404 	addi	r8,sp,16
10008888:	003d9406 	br	10007edc <__alt_data_end+0xf8007edc>
1000888c:	01040074 	movhi	r4,4097
10008890:	2119e084 	addi	r4,r4,26498
10008894:	d9002c15 	stw	r4,176(sp)
10008898:	d9002c17 	ldw	r4,176(sp)
1000889c:	1c47883a 	add	r3,r3,r17
100088a0:	10800044 	addi	r2,r2,1
100088a4:	41000015 	stw	r4,0(r8)
100088a8:	44400115 	stw	r17,4(r8)
100088ac:	d8c02015 	stw	r3,128(sp)
100088b0:	d8801f15 	stw	r2,124(sp)
100088b4:	010001c4 	movi	r4,7
100088b8:	20bfd716 	blt	r4,r2,10008818 <__alt_data_end+0xf8008818>
100088bc:	42000204 	addi	r8,r8,8
100088c0:	003fdd06 	br	10008838 <__alt_data_end+0xf8008838>
100088c4:	d9002d17 	ldw	r4,180(sp)
100088c8:	d9801e04 	addi	r6,sp,120
100088cc:	b80b883a 	mov	r5,r23
100088d0:	000e39c0 	call	1000e39c <__sprint_r>
100088d4:	1039bd1e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
100088d8:	d8802617 	ldw	r2,152(sp)
100088dc:	d8c02017 	ldw	r3,128(sp)
100088e0:	da000404 	addi	r8,sp,16
100088e4:	003e1006 	br	10008128 <__alt_data_end+0xf8008128>
100088e8:	00800044 	movi	r2,1
100088ec:	10803fcc 	andi	r2,r2,255
100088f0:	00c00044 	movi	r3,1
100088f4:	10fa0d26 	beq	r2,r3,1000712c <__alt_data_end+0xf800712c>
100088f8:	00c00084 	movi	r3,2
100088fc:	10fbaf26 	beq	r2,r3,100077bc <__alt_data_end+0xf80077bc>
10008900:	003a6d06 	br	100072b8 <__alt_data_end+0xf80072b8>
10008904:	01040074 	movhi	r4,4097
10008908:	2119e484 	addi	r4,r4,26514
1000890c:	d9003515 	stw	r4,212(sp)
10008910:	003b5406 	br	10007664 <__alt_data_end+0xf8007664>
10008914:	d8802a17 	ldw	r2,168(sp)
10008918:	00c00184 	movi	r3,6
1000891c:	1880012e 	bgeu	r3,r2,10008924 <___vfprintf_internal_r+0x1d68>
10008920:	1805883a 	mov	r2,r3
10008924:	d8802b15 	stw	r2,172(sp)
10008928:	1000ef16 	blt	r2,zero,10008ce8 <___vfprintf_internal_r+0x212c>
1000892c:	04040074 	movhi	r16,4097
10008930:	d8802915 	stw	r2,164(sp)
10008934:	dcc02e15 	stw	r19,184(sp)
10008938:	d8002a15 	stw	zero,168(sp)
1000893c:	d8003215 	stw	zero,200(sp)
10008940:	8419de04 	addi	r16,r16,26488
10008944:	0039883a 	mov	fp,zero
10008948:	003a8006 	br	1000734c <__alt_data_end+0xf800734c>
1000894c:	0021883a 	mov	r16,zero
10008950:	003e0706 	br	10008170 <__alt_data_end+0xf8008170>
10008954:	d9002d17 	ldw	r4,180(sp)
10008958:	d9801e04 	addi	r6,sp,120
1000895c:	b80b883a 	mov	r5,r23
10008960:	000e39c0 	call	1000e39c <__sprint_r>
10008964:	1039991e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
10008968:	d8802617 	ldw	r2,152(sp)
1000896c:	d9403317 	ldw	r5,204(sp)
10008970:	d8c02017 	ldw	r3,128(sp)
10008974:	da000404 	addi	r8,sp,16
10008978:	2885c83a 	sub	r2,r5,r2
1000897c:	003dfb06 	br	1000816c <__alt_data_end+0xf800816c>
10008980:	9080004c 	andi	r2,r18,1
10008984:	103e8f1e 	bne	r2,zero,100083c4 <__alt_data_end+0xf80083c4>
10008988:	d8802117 	ldw	r2,132(sp)
1000898c:	003e9e06 	br	10008408 <__alt_data_end+0xf8008408>
10008990:	1025883a 	mov	r18,r2
10008994:	0039883a 	mov	fp,zero
10008998:	00800084 	movi	r2,2
1000899c:	003fd306 	br	100088ec <__alt_data_end+0xf80088ec>
100089a0:	07000b44 	movi	fp,45
100089a4:	df002785 	stb	fp,158(sp)
100089a8:	003a1b06 	br	10007218 <__alt_data_end+0xf8007218>
100089ac:	00c00b44 	movi	r3,45
100089b0:	d8c02785 	stb	r3,158(sp)
100089b4:	d8802915 	stw	r2,164(sp)
100089b8:	dc802c17 	ldw	r18,176(sp)
100089bc:	d8002a15 	stw	zero,168(sp)
100089c0:	07000b44 	movi	fp,45
100089c4:	003a5e06 	br	10007340 <__alt_data_end+0xf8007340>
100089c8:	04040074 	movhi	r16,4097
100089cc:	8419d304 	addi	r16,r16,26444
100089d0:	003f4706 	br	100086f0 <__alt_data_end+0xf80086f0>
100089d4:	d9002e17 	ldw	r4,184(sp)
100089d8:	d9402f17 	ldw	r5,188(sp)
100089dc:	20800017 	ldw	r2,0(r4)
100089e0:	21000104 	addi	r4,r4,4
100089e4:	d9002e15 	stw	r4,184(sp)
100089e8:	11400015 	stw	r5,0(r2)
100089ec:	0038ab06 	br	10006c9c <__alt_data_end+0xf8006c9c>
100089f0:	dd802617 	ldw	r22,152(sp)
100089f4:	00bfff44 	movi	r2,-3
100089f8:	b0801c16 	blt	r22,r2,10008a6c <___vfprintf_internal_r+0x1eb0>
100089fc:	d9402a17 	ldw	r5,168(sp)
10008a00:	2d801a16 	blt	r5,r22,10008a6c <___vfprintf_internal_r+0x1eb0>
10008a04:	dd803215 	stw	r22,200(sp)
10008a08:	003e8906 	br	10008430 <__alt_data_end+0xf8008430>
10008a0c:	01040074 	movhi	r4,4097
10008a10:	2119e084 	addi	r4,r4,26498
10008a14:	d9002c15 	stw	r4,176(sp)
10008a18:	003c9106 	br	10007c60 <__alt_data_end+0xf8007c60>
10008a1c:	e005883a 	mov	r2,fp
10008a20:	003e7906 	br	10008408 <__alt_data_end+0xf8008408>
10008a24:	d9002a17 	ldw	r4,168(sp)
10008a28:	df002783 	ldbu	fp,158(sp)
10008a2c:	dcc02e15 	stw	r19,184(sp)
10008a30:	d9002915 	stw	r4,164(sp)
10008a34:	d9002b15 	stw	r4,172(sp)
10008a38:	d8002a15 	stw	zero,168(sp)
10008a3c:	d8003215 	stw	zero,200(sp)
10008a40:	003a3b06 	br	10007330 <__alt_data_end+0xf8007330>
10008a44:	9080004c 	andi	r2,r18,1
10008a48:	0039883a 	mov	fp,zero
10008a4c:	10000426 	beq	r2,zero,10008a60 <___vfprintf_internal_r+0x1ea4>
10008a50:	00800c04 	movi	r2,48
10008a54:	dc001dc4 	addi	r16,sp,119
10008a58:	d8801dc5 	stb	r2,119(sp)
10008a5c:	003b6406 	br	100077f0 <__alt_data_end+0xf80077f0>
10008a60:	d8002b15 	stw	zero,172(sp)
10008a64:	dc001e04 	addi	r16,sp,120
10008a68:	003a2b06 	br	10007318 <__alt_data_end+0xf8007318>
10008a6c:	8c7fff84 	addi	r17,r17,-2
10008a70:	b5bfffc4 	addi	r22,r22,-1
10008a74:	dd802615 	stw	r22,152(sp)
10008a78:	dc4022c5 	stb	r17,139(sp)
10008a7c:	b000bf16 	blt	r22,zero,10008d7c <___vfprintf_internal_r+0x21c0>
10008a80:	00800ac4 	movi	r2,43
10008a84:	d8802305 	stb	r2,140(sp)
10008a88:	00800244 	movi	r2,9
10008a8c:	15807016 	blt	r2,r22,10008c50 <___vfprintf_internal_r+0x2094>
10008a90:	00800c04 	movi	r2,48
10008a94:	b5800c04 	addi	r22,r22,48
10008a98:	d8802345 	stb	r2,141(sp)
10008a9c:	dd802385 	stb	r22,142(sp)
10008aa0:	d88023c4 	addi	r2,sp,143
10008aa4:	df0022c4 	addi	fp,sp,139
10008aa8:	d8c03317 	ldw	r3,204(sp)
10008aac:	1739c83a 	sub	fp,r2,fp
10008ab0:	d9003317 	ldw	r4,204(sp)
10008ab4:	e0c7883a 	add	r3,fp,r3
10008ab8:	df003a15 	stw	fp,232(sp)
10008abc:	d8c02b15 	stw	r3,172(sp)
10008ac0:	00800044 	movi	r2,1
10008ac4:	1100b30e 	bge	r2,r4,10008d94 <___vfprintf_internal_r+0x21d8>
10008ac8:	d8c02b17 	ldw	r3,172(sp)
10008acc:	18c00044 	addi	r3,r3,1
10008ad0:	d8c02b15 	stw	r3,172(sp)
10008ad4:	1805883a 	mov	r2,r3
10008ad8:	1800ac16 	blt	r3,zero,10008d8c <___vfprintf_internal_r+0x21d0>
10008adc:	d8003215 	stw	zero,200(sp)
10008ae0:	003e5d06 	br	10008458 <__alt_data_end+0xf8008458>
10008ae4:	d9002d17 	ldw	r4,180(sp)
10008ae8:	d9801e04 	addi	r6,sp,120
10008aec:	b80b883a 	mov	r5,r23
10008af0:	000e39c0 	call	1000e39c <__sprint_r>
10008af4:	1039351e 	bne	r2,zero,10006fcc <__alt_data_end+0xf8006fcc>
10008af8:	dc402617 	ldw	r17,152(sp)
10008afc:	d8c02017 	ldw	r3,128(sp)
10008b00:	d8801f17 	ldw	r2,124(sp)
10008b04:	da000404 	addi	r8,sp,16
10008b08:	003ed606 	br	10008664 <__alt_data_end+0xf8008664>
10008b0c:	182b883a 	mov	r21,r3
10008b10:	d8002a15 	stw	zero,168(sp)
10008b14:	00388c06 	br	10006d48 <__alt_data_end+0xf8006d48>
10008b18:	d8802a17 	ldw	r2,168(sp)
10008b1c:	103e071e 	bne	r2,zero,1000833c <__alt_data_end+0xf800833c>
10008b20:	dc002a15 	stw	r16,168(sp)
10008b24:	003e0506 	br	1000833c <__alt_data_end+0xf800833c>
10008b28:	d9002a17 	ldw	r4,168(sp)
10008b2c:	20c00044 	addi	r3,r4,1
10008b30:	003e0f06 	br	10008370 <__alt_data_end+0xf8008370>
10008b34:	01400184 	movi	r5,6
10008b38:	d9402a15 	stw	r5,168(sp)
10008b3c:	003dff06 	br	1000833c <__alt_data_end+0xf800833c>
10008b40:	d8802104 	addi	r2,sp,132
10008b44:	d8800315 	stw	r2,12(sp)
10008b48:	d8802504 	addi	r2,sp,148
10008b4c:	d8800215 	stw	r2,8(sp)
10008b50:	d8802604 	addi	r2,sp,152
10008b54:	d8800115 	stw	r2,4(sp)
10008b58:	d8802a17 	ldw	r2,168(sp)
10008b5c:	d9403617 	ldw	r5,216(sp)
10008b60:	d9002d17 	ldw	r4,180(sp)
10008b64:	d8800015 	stw	r2,0(sp)
10008b68:	01c000c4 	movi	r7,3
10008b6c:	980d883a 	mov	r6,r19
10008b70:	da003d15 	stw	r8,244(sp)
10008b74:	00092ec0 	call	100092ec <_dtoa_r>
10008b78:	d8c02a17 	ldw	r3,168(sp)
10008b7c:	da003d17 	ldw	r8,244(sp)
10008b80:	1021883a 	mov	r16,r2
10008b84:	10f9883a 	add	fp,r2,r3
10008b88:	81000007 	ldb	r4,0(r16)
10008b8c:	00800c04 	movi	r2,48
10008b90:	20805e26 	beq	r4,r2,10008d0c <___vfprintf_internal_r+0x2150>
10008b94:	d8c02617 	ldw	r3,152(sp)
10008b98:	e0f9883a 	add	fp,fp,r3
10008b9c:	003e0a06 	br	100083c8 <__alt_data_end+0xf80083c8>
10008ba0:	00c00b44 	movi	r3,45
10008ba4:	24e0003c 	xorhi	r19,r4,32768
10008ba8:	d8c02905 	stb	r3,164(sp)
10008bac:	003de906 	br	10008354 <__alt_data_end+0xf8008354>
10008bb0:	d8c03217 	ldw	r3,200(sp)
10008bb4:	00c07a0e 	bge	zero,r3,10008da0 <___vfprintf_internal_r+0x21e4>
10008bb8:	00800044 	movi	r2,1
10008bbc:	d9003317 	ldw	r4,204(sp)
10008bc0:	1105883a 	add	r2,r2,r4
10008bc4:	d8802b15 	stw	r2,172(sp)
10008bc8:	10004e16 	blt	r2,zero,10008d04 <___vfprintf_internal_r+0x2148>
10008bcc:	044019c4 	movi	r17,103
10008bd0:	003e2106 	br	10008458 <__alt_data_end+0xf8008458>
10008bd4:	d9002a17 	ldw	r4,168(sp)
10008bd8:	d8802104 	addi	r2,sp,132
10008bdc:	d8800315 	stw	r2,12(sp)
10008be0:	d9000015 	stw	r4,0(sp)
10008be4:	d8802504 	addi	r2,sp,148
10008be8:	d9403617 	ldw	r5,216(sp)
10008bec:	d9002d17 	ldw	r4,180(sp)
10008bf0:	d8800215 	stw	r2,8(sp)
10008bf4:	d8802604 	addi	r2,sp,152
10008bf8:	d8800115 	stw	r2,4(sp)
10008bfc:	01c000c4 	movi	r7,3
10008c00:	980d883a 	mov	r6,r19
10008c04:	da003d15 	stw	r8,244(sp)
10008c08:	00092ec0 	call	100092ec <_dtoa_r>
10008c0c:	d8c02a17 	ldw	r3,168(sp)
10008c10:	da003d17 	ldw	r8,244(sp)
10008c14:	1021883a 	mov	r16,r2
10008c18:	00801184 	movi	r2,70
10008c1c:	80f9883a 	add	fp,r16,r3
10008c20:	88bfd926 	beq	r17,r2,10008b88 <__alt_data_end+0xf8008b88>
10008c24:	003de806 	br	100083c8 <__alt_data_end+0xf80083c8>
10008c28:	d9002a17 	ldw	r4,168(sp)
10008c2c:	00c04d0e 	bge	zero,r3,10008d64 <___vfprintf_internal_r+0x21a8>
10008c30:	2000441e 	bne	r4,zero,10008d44 <___vfprintf_internal_r+0x2188>
10008c34:	9480004c 	andi	r18,r18,1
10008c38:	9000421e 	bne	r18,zero,10008d44 <___vfprintf_internal_r+0x2188>
10008c3c:	1805883a 	mov	r2,r3
10008c40:	18006f16 	blt	r3,zero,10008e00 <___vfprintf_internal_r+0x2244>
10008c44:	d8c03217 	ldw	r3,200(sp)
10008c48:	d8c02b15 	stw	r3,172(sp)
10008c4c:	003e0206 	br	10008458 <__alt_data_end+0xf8008458>
10008c50:	df0022c4 	addi	fp,sp,139
10008c54:	dc002a15 	stw	r16,168(sp)
10008c58:	4027883a 	mov	r19,r8
10008c5c:	e021883a 	mov	r16,fp
10008c60:	b009883a 	mov	r4,r22
10008c64:	01400284 	movi	r5,10
10008c68:	000688c0 	call	1000688c <__modsi3>
10008c6c:	10800c04 	addi	r2,r2,48
10008c70:	843fffc4 	addi	r16,r16,-1
10008c74:	b009883a 	mov	r4,r22
10008c78:	01400284 	movi	r5,10
10008c7c:	80800005 	stb	r2,0(r16)
10008c80:	00068080 	call	10006808 <__divsi3>
10008c84:	102d883a 	mov	r22,r2
10008c88:	00800244 	movi	r2,9
10008c8c:	15bff416 	blt	r2,r22,10008c60 <__alt_data_end+0xf8008c60>
10008c90:	9811883a 	mov	r8,r19
10008c94:	b0800c04 	addi	r2,r22,48
10008c98:	8027883a 	mov	r19,r16
10008c9c:	997fffc4 	addi	r5,r19,-1
10008ca0:	98bfffc5 	stb	r2,-1(r19)
10008ca4:	dc002a17 	ldw	r16,168(sp)
10008ca8:	2f006d2e 	bgeu	r5,fp,10008e60 <___vfprintf_internal_r+0x22a4>
10008cac:	d9c02384 	addi	r7,sp,142
10008cb0:	3ccfc83a 	sub	r7,r7,r19
10008cb4:	d9002344 	addi	r4,sp,141
10008cb8:	e1cf883a 	add	r7,fp,r7
10008cbc:	00000106 	br	10008cc4 <___vfprintf_internal_r+0x2108>
10008cc0:	28800003 	ldbu	r2,0(r5)
10008cc4:	20800005 	stb	r2,0(r4)
10008cc8:	21000044 	addi	r4,r4,1
10008ccc:	29400044 	addi	r5,r5,1
10008cd0:	393ffb1e 	bne	r7,r4,10008cc0 <__alt_data_end+0xf8008cc0>
10008cd4:	d8802304 	addi	r2,sp,140
10008cd8:	14c5c83a 	sub	r2,r2,r19
10008cdc:	d8c02344 	addi	r3,sp,141
10008ce0:	1885883a 	add	r2,r3,r2
10008ce4:	003f7006 	br	10008aa8 <__alt_data_end+0xf8008aa8>
10008ce8:	0005883a 	mov	r2,zero
10008cec:	003f0f06 	br	1000892c <__alt_data_end+0xf800892c>
10008cf0:	d8c03217 	ldw	r3,200(sp)
10008cf4:	18c00044 	addi	r3,r3,1
10008cf8:	d8c02b15 	stw	r3,172(sp)
10008cfc:	1805883a 	mov	r2,r3
10008d00:	183fb20e 	bge	r3,zero,10008bcc <__alt_data_end+0xf8008bcc>
10008d04:	0005883a 	mov	r2,zero
10008d08:	003fb006 	br	10008bcc <__alt_data_end+0xf8008bcc>
10008d0c:	d9003617 	ldw	r4,216(sp)
10008d10:	000d883a 	mov	r6,zero
10008d14:	000f883a 	mov	r7,zero
10008d18:	980b883a 	mov	r5,r19
10008d1c:	d8c03c15 	stw	r3,240(sp)
10008d20:	da003d15 	stw	r8,244(sp)
10008d24:	00121200 	call	10012120 <__eqdf2>
10008d28:	d8c03c17 	ldw	r3,240(sp)
10008d2c:	da003d17 	ldw	r8,244(sp)
10008d30:	103f9826 	beq	r2,zero,10008b94 <__alt_data_end+0xf8008b94>
10008d34:	00800044 	movi	r2,1
10008d38:	10c7c83a 	sub	r3,r2,r3
10008d3c:	d8c02615 	stw	r3,152(sp)
10008d40:	003f9506 	br	10008b98 <__alt_data_end+0xf8008b98>
10008d44:	d9002a17 	ldw	r4,168(sp)
10008d48:	d8c03217 	ldw	r3,200(sp)
10008d4c:	20800044 	addi	r2,r4,1
10008d50:	1885883a 	add	r2,r3,r2
10008d54:	d8802b15 	stw	r2,172(sp)
10008d58:	103dbf0e 	bge	r2,zero,10008458 <__alt_data_end+0xf8008458>
10008d5c:	0005883a 	mov	r2,zero
10008d60:	003dbd06 	br	10008458 <__alt_data_end+0xf8008458>
10008d64:	2000201e 	bne	r4,zero,10008de8 <___vfprintf_internal_r+0x222c>
10008d68:	9480004c 	andi	r18,r18,1
10008d6c:	90001e1e 	bne	r18,zero,10008de8 <___vfprintf_internal_r+0x222c>
10008d70:	00800044 	movi	r2,1
10008d74:	d8802b15 	stw	r2,172(sp)
10008d78:	003db706 	br	10008458 <__alt_data_end+0xf8008458>
10008d7c:	00800b44 	movi	r2,45
10008d80:	05adc83a 	sub	r22,zero,r22
10008d84:	d8802305 	stb	r2,140(sp)
10008d88:	003f3f06 	br	10008a88 <__alt_data_end+0xf8008a88>
10008d8c:	0005883a 	mov	r2,zero
10008d90:	003f5206 	br	10008adc <__alt_data_end+0xf8008adc>
10008d94:	90a4703a 	and	r18,r18,r2
10008d98:	903f4e26 	beq	r18,zero,10008ad4 <__alt_data_end+0xf8008ad4>
10008d9c:	003f4a06 	br	10008ac8 <__alt_data_end+0xf8008ac8>
10008da0:	00800084 	movi	r2,2
10008da4:	10c5c83a 	sub	r2,r2,r3
10008da8:	003f8406 	br	10008bbc <__alt_data_end+0xf8008bbc>
10008dac:	d9402e17 	ldw	r5,184(sp)
10008db0:	d9002e17 	ldw	r4,184(sp)
10008db4:	ac400043 	ldbu	r17,1(r21)
10008db8:	29400017 	ldw	r5,0(r5)
10008dbc:	20800104 	addi	r2,r4,4
10008dc0:	d8802e15 	stw	r2,184(sp)
10008dc4:	d9402a15 	stw	r5,168(sp)
10008dc8:	182b883a 	mov	r21,r3
10008dcc:	283e7b0e 	bge	r5,zero,100087bc <__alt_data_end+0xf80087bc>
10008dd0:	8c403fcc 	andi	r17,r17,255
10008dd4:	017fffc4 	movi	r5,-1
10008dd8:	8c40201c 	xori	r17,r17,128
10008ddc:	d9402a15 	stw	r5,168(sp)
10008de0:	8c7fe004 	addi	r17,r17,-128
10008de4:	0037d706 	br	10006d44 <__alt_data_end+0xf8006d44>
10008de8:	d8c02a17 	ldw	r3,168(sp)
10008dec:	18c00084 	addi	r3,r3,2
10008df0:	d8c02b15 	stw	r3,172(sp)
10008df4:	1805883a 	mov	r2,r3
10008df8:	183d970e 	bge	r3,zero,10008458 <__alt_data_end+0xf8008458>
10008dfc:	003fd706 	br	10008d5c <__alt_data_end+0xf8008d5c>
10008e00:	0005883a 	mov	r2,zero
10008e04:	003f8f06 	br	10008c44 <__alt_data_end+0xf8008c44>
10008e08:	9080004c 	andi	r2,r18,1
10008e0c:	103f821e 	bne	r2,zero,10008c18 <__alt_data_end+0xf8008c18>
10008e10:	d8802117 	ldw	r2,132(sp)
10008e14:	1405c83a 	sub	r2,r2,r16
10008e18:	d8803315 	stw	r2,204(sp)
10008e1c:	b47ef426 	beq	r22,r17,100089f0 <__alt_data_end+0xf80089f0>
10008e20:	dd802617 	ldw	r22,152(sp)
10008e24:	003f1206 	br	10008a70 <__alt_data_end+0xf8008a70>
10008e28:	d8c02b03 	ldbu	r3,172(sp)
10008e2c:	d8c02785 	stb	r3,158(sp)
10008e30:	0038df06 	br	100071b0 <__alt_data_end+0xf80071b0>
10008e34:	d8c02b03 	ldbu	r3,172(sp)
10008e38:	d8c02785 	stb	r3,158(sp)
10008e3c:	0038aa06 	br	100070e8 <__alt_data_end+0xf80070e8>
10008e40:	d8c02b03 	ldbu	r3,172(sp)
10008e44:	d8c02785 	stb	r3,158(sp)
10008e48:	003a4306 	br	10007758 <__alt_data_end+0xf8007758>
10008e4c:	d8c02b03 	ldbu	r3,172(sp)
10008e50:	d8c02785 	stb	r3,158(sp)
10008e54:	003af506 	br	10007a2c <__alt_data_end+0xf8007a2c>
10008e58:	0005883a 	mov	r2,zero
10008e5c:	003d7b06 	br	1000844c <__alt_data_end+0xf800844c>
10008e60:	d8802344 	addi	r2,sp,141
10008e64:	003f1006 	br	10008aa8 <__alt_data_end+0xf8008aa8>
10008e68:	d8c02b03 	ldbu	r3,172(sp)
10008e6c:	d8c02785 	stb	r3,158(sp)
10008e70:	0038fd06 	br	10007268 <__alt_data_end+0xf8007268>
10008e74:	d8c02b03 	ldbu	r3,172(sp)
10008e78:	d8c02785 	stb	r3,158(sp)
10008e7c:	003a9706 	br	100078dc <__alt_data_end+0xf80078dc>
10008e80:	d8c02b03 	ldbu	r3,172(sp)
10008e84:	d8c02785 	stb	r3,158(sp)
10008e88:	003a1806 	br	100076ec <__alt_data_end+0xf80076ec>
10008e8c:	d8c02b03 	ldbu	r3,172(sp)
10008e90:	d8c02785 	stb	r3,158(sp)
10008e94:	003abe06 	br	10007990 <__alt_data_end+0xf8007990>

10008e98 <__vfprintf_internal>:
10008e98:	008400b4 	movhi	r2,4098
10008e9c:	10959104 	addi	r2,r2,22084
10008ea0:	300f883a 	mov	r7,r6
10008ea4:	280d883a 	mov	r6,r5
10008ea8:	200b883a 	mov	r5,r4
10008eac:	11000017 	ldw	r4,0(r2)
10008eb0:	0006bbc1 	jmpi	10006bbc <___vfprintf_internal_r>

10008eb4 <__sbprintf>:
10008eb4:	2880030b 	ldhu	r2,12(r5)
10008eb8:	2ac01917 	ldw	r11,100(r5)
10008ebc:	2a80038b 	ldhu	r10,14(r5)
10008ec0:	2a400717 	ldw	r9,28(r5)
10008ec4:	2a000917 	ldw	r8,36(r5)
10008ec8:	defee204 	addi	sp,sp,-1144
10008ecc:	00c10004 	movi	r3,1024
10008ed0:	dc011a15 	stw	r16,1128(sp)
10008ed4:	10bfff4c 	andi	r2,r2,65533
10008ed8:	2821883a 	mov	r16,r5
10008edc:	d8cb883a 	add	r5,sp,r3
10008ee0:	dc811c15 	stw	r18,1136(sp)
10008ee4:	dc411b15 	stw	r17,1132(sp)
10008ee8:	dfc11d15 	stw	ra,1140(sp)
10008eec:	2025883a 	mov	r18,r4
10008ef0:	d881030d 	sth	r2,1036(sp)
10008ef4:	dac11915 	stw	r11,1124(sp)
10008ef8:	da81038d 	sth	r10,1038(sp)
10008efc:	da410715 	stw	r9,1052(sp)
10008f00:	da010915 	stw	r8,1060(sp)
10008f04:	dec10015 	stw	sp,1024(sp)
10008f08:	dec10415 	stw	sp,1040(sp)
10008f0c:	d8c10215 	stw	r3,1032(sp)
10008f10:	d8c10515 	stw	r3,1044(sp)
10008f14:	d8010615 	stw	zero,1048(sp)
10008f18:	0006bbc0 	call	10006bbc <___vfprintf_internal_r>
10008f1c:	1023883a 	mov	r17,r2
10008f20:	10000416 	blt	r2,zero,10008f34 <__sbprintf+0x80>
10008f24:	d9410004 	addi	r5,sp,1024
10008f28:	9009883a 	mov	r4,r18
10008f2c:	000ab900 	call	1000ab90 <_fflush_r>
10008f30:	10000d1e 	bne	r2,zero,10008f68 <__sbprintf+0xb4>
10008f34:	d881030b 	ldhu	r2,1036(sp)
10008f38:	1080100c 	andi	r2,r2,64
10008f3c:	10000326 	beq	r2,zero,10008f4c <__sbprintf+0x98>
10008f40:	8080030b 	ldhu	r2,12(r16)
10008f44:	10801014 	ori	r2,r2,64
10008f48:	8080030d 	sth	r2,12(r16)
10008f4c:	8805883a 	mov	r2,r17
10008f50:	dfc11d17 	ldw	ra,1140(sp)
10008f54:	dc811c17 	ldw	r18,1136(sp)
10008f58:	dc411b17 	ldw	r17,1132(sp)
10008f5c:	dc011a17 	ldw	r16,1128(sp)
10008f60:	dec11e04 	addi	sp,sp,1144
10008f64:	f800283a 	ret
10008f68:	047fffc4 	movi	r17,-1
10008f6c:	003ff106 	br	10008f34 <__alt_data_end+0xf8008f34>

10008f70 <__swsetup_r>:
10008f70:	008400b4 	movhi	r2,4098
10008f74:	defffd04 	addi	sp,sp,-12
10008f78:	10959104 	addi	r2,r2,22084
10008f7c:	dc400115 	stw	r17,4(sp)
10008f80:	2023883a 	mov	r17,r4
10008f84:	11000017 	ldw	r4,0(r2)
10008f88:	dc000015 	stw	r16,0(sp)
10008f8c:	dfc00215 	stw	ra,8(sp)
10008f90:	2821883a 	mov	r16,r5
10008f94:	20000226 	beq	r4,zero,10008fa0 <__swsetup_r+0x30>
10008f98:	20800e17 	ldw	r2,56(r4)
10008f9c:	10003126 	beq	r2,zero,10009064 <__swsetup_r+0xf4>
10008fa0:	8080030b 	ldhu	r2,12(r16)
10008fa4:	10c0020c 	andi	r3,r2,8
10008fa8:	1009883a 	mov	r4,r2
10008fac:	18000f26 	beq	r3,zero,10008fec <__swsetup_r+0x7c>
10008fb0:	80c00417 	ldw	r3,16(r16)
10008fb4:	18001526 	beq	r3,zero,1000900c <__swsetup_r+0x9c>
10008fb8:	1100004c 	andi	r4,r2,1
10008fbc:	20001c1e 	bne	r4,zero,10009030 <__swsetup_r+0xc0>
10008fc0:	1080008c 	andi	r2,r2,2
10008fc4:	1000291e 	bne	r2,zero,1000906c <__swsetup_r+0xfc>
10008fc8:	80800517 	ldw	r2,20(r16)
10008fcc:	80800215 	stw	r2,8(r16)
10008fd0:	18001c26 	beq	r3,zero,10009044 <__swsetup_r+0xd4>
10008fd4:	0005883a 	mov	r2,zero
10008fd8:	dfc00217 	ldw	ra,8(sp)
10008fdc:	dc400117 	ldw	r17,4(sp)
10008fe0:	dc000017 	ldw	r16,0(sp)
10008fe4:	dec00304 	addi	sp,sp,12
10008fe8:	f800283a 	ret
10008fec:	2080040c 	andi	r2,r4,16
10008ff0:	10002e26 	beq	r2,zero,100090ac <__swsetup_r+0x13c>
10008ff4:	2080010c 	andi	r2,r4,4
10008ff8:	10001e1e 	bne	r2,zero,10009074 <__swsetup_r+0x104>
10008ffc:	80c00417 	ldw	r3,16(r16)
10009000:	20800214 	ori	r2,r4,8
10009004:	8080030d 	sth	r2,12(r16)
10009008:	183feb1e 	bne	r3,zero,10008fb8 <__alt_data_end+0xf8008fb8>
1000900c:	1100a00c 	andi	r4,r2,640
10009010:	01408004 	movi	r5,512
10009014:	217fe826 	beq	r4,r5,10008fb8 <__alt_data_end+0xf8008fb8>
10009018:	800b883a 	mov	r5,r16
1000901c:	8809883a 	mov	r4,r17
10009020:	000bb2c0 	call	1000bb2c <__smakebuf_r>
10009024:	8080030b 	ldhu	r2,12(r16)
10009028:	80c00417 	ldw	r3,16(r16)
1000902c:	003fe206 	br	10008fb8 <__alt_data_end+0xf8008fb8>
10009030:	80800517 	ldw	r2,20(r16)
10009034:	80000215 	stw	zero,8(r16)
10009038:	0085c83a 	sub	r2,zero,r2
1000903c:	80800615 	stw	r2,24(r16)
10009040:	183fe41e 	bne	r3,zero,10008fd4 <__alt_data_end+0xf8008fd4>
10009044:	80c0030b 	ldhu	r3,12(r16)
10009048:	0005883a 	mov	r2,zero
1000904c:	1900200c 	andi	r4,r3,128
10009050:	203fe126 	beq	r4,zero,10008fd8 <__alt_data_end+0xf8008fd8>
10009054:	18c01014 	ori	r3,r3,64
10009058:	80c0030d 	sth	r3,12(r16)
1000905c:	00bfffc4 	movi	r2,-1
10009060:	003fdd06 	br	10008fd8 <__alt_data_end+0xf8008fd8>
10009064:	000af7c0 	call	1000af7c <__sinit>
10009068:	003fcd06 	br	10008fa0 <__alt_data_end+0xf8008fa0>
1000906c:	0005883a 	mov	r2,zero
10009070:	003fd606 	br	10008fcc <__alt_data_end+0xf8008fcc>
10009074:	81400c17 	ldw	r5,48(r16)
10009078:	28000626 	beq	r5,zero,10009094 <__swsetup_r+0x124>
1000907c:	80801004 	addi	r2,r16,64
10009080:	28800326 	beq	r5,r2,10009090 <__swsetup_r+0x120>
10009084:	8809883a 	mov	r4,r17
10009088:	000b0f00 	call	1000b0f0 <_free_r>
1000908c:	8100030b 	ldhu	r4,12(r16)
10009090:	80000c15 	stw	zero,48(r16)
10009094:	80c00417 	ldw	r3,16(r16)
10009098:	00bff6c4 	movi	r2,-37
1000909c:	1108703a 	and	r4,r2,r4
100090a0:	80000115 	stw	zero,4(r16)
100090a4:	80c00015 	stw	r3,0(r16)
100090a8:	003fd506 	br	10009000 <__alt_data_end+0xf8009000>
100090ac:	00800244 	movi	r2,9
100090b0:	88800015 	stw	r2,0(r17)
100090b4:	20801014 	ori	r2,r4,64
100090b8:	8080030d 	sth	r2,12(r16)
100090bc:	00bfffc4 	movi	r2,-1
100090c0:	003fc506 	br	10008fd8 <__alt_data_end+0xf8008fd8>

100090c4 <quorem>:
100090c4:	defff204 	addi	sp,sp,-56
100090c8:	ddc00b15 	stw	r23,44(sp)
100090cc:	20800417 	ldw	r2,16(r4)
100090d0:	2dc00417 	ldw	r23,16(r5)
100090d4:	dfc00d15 	stw	ra,52(sp)
100090d8:	df000c15 	stw	fp,48(sp)
100090dc:	dd800a15 	stw	r22,40(sp)
100090e0:	dd400915 	stw	r21,36(sp)
100090e4:	dd000815 	stw	r20,32(sp)
100090e8:	dcc00715 	stw	r19,28(sp)
100090ec:	dc800615 	stw	r18,24(sp)
100090f0:	dc400515 	stw	r17,20(sp)
100090f4:	dc000415 	stw	r16,16(sp)
100090f8:	15c07a16 	blt	r2,r23,100092e4 <quorem+0x220>
100090fc:	bdffffc4 	addi	r23,r23,-1
10009100:	bde9883a 	add	r20,r23,r23
10009104:	28c00504 	addi	r3,r5,20
10009108:	a529883a 	add	r20,r20,r20
1000910c:	1d39883a 	add	fp,r3,r20
10009110:	24c00504 	addi	r19,r4,20
10009114:	d9400215 	stw	r5,8(sp)
10009118:	9d29883a 	add	r20,r19,r20
1000911c:	e1400017 	ldw	r5,0(fp)
10009120:	d9000015 	stw	r4,0(sp)
10009124:	a1000017 	ldw	r4,0(r20)
10009128:	29400044 	addi	r5,r5,1
1000912c:	d8c00115 	stw	r3,4(sp)
10009130:	dd000315 	stw	r20,12(sp)
10009134:	00069000 	call	10006900 <__udivsi3>
10009138:	1025883a 	mov	r18,r2
1000913c:	10003026 	beq	r2,zero,10009200 <quorem+0x13c>
10009140:	dc400117 	ldw	r17,4(sp)
10009144:	9829883a 	mov	r20,r19
10009148:	002d883a 	mov	r22,zero
1000914c:	0021883a 	mov	r16,zero
10009150:	8d400017 	ldw	r21,0(r17)
10009154:	900b883a 	mov	r5,r18
10009158:	8c400104 	addi	r17,r17,4
1000915c:	a93fffcc 	andi	r4,r21,65535
10009160:	00069bc0 	call	100069bc <__mulsi3>
10009164:	a808d43a 	srli	r4,r21,16
10009168:	900b883a 	mov	r5,r18
1000916c:	15ad883a 	add	r22,r2,r22
10009170:	00069bc0 	call	100069bc <__mulsi3>
10009174:	a1000017 	ldw	r4,0(r20)
10009178:	b00cd43a 	srli	r6,r22,16
1000917c:	b0ffffcc 	andi	r3,r22,65535
10009180:	217fffcc 	andi	r5,r4,65535
10009184:	2c21883a 	add	r16,r5,r16
10009188:	80c7c83a 	sub	r3,r16,r3
1000918c:	2008d43a 	srli	r4,r4,16
10009190:	1185883a 	add	r2,r2,r6
10009194:	1821d43a 	srai	r16,r3,16
10009198:	117fffcc 	andi	r5,r2,65535
1000919c:	2149c83a 	sub	r4,r4,r5
100091a0:	2421883a 	add	r16,r4,r16
100091a4:	8008943a 	slli	r4,r16,16
100091a8:	18ffffcc 	andi	r3,r3,65535
100091ac:	102cd43a 	srli	r22,r2,16
100091b0:	20c8b03a 	or	r4,r4,r3
100091b4:	a1000015 	stw	r4,0(r20)
100091b8:	8021d43a 	srai	r16,r16,16
100091bc:	a5000104 	addi	r20,r20,4
100091c0:	e47fe32e 	bgeu	fp,r17,10009150 <__alt_data_end+0xf8009150>
100091c4:	d8c00317 	ldw	r3,12(sp)
100091c8:	18800017 	ldw	r2,0(r3)
100091cc:	10000c1e 	bne	r2,zero,10009200 <quorem+0x13c>
100091d0:	18bfff04 	addi	r2,r3,-4
100091d4:	9880082e 	bgeu	r19,r2,100091f8 <quorem+0x134>
100091d8:	18ffff17 	ldw	r3,-4(r3)
100091dc:	18000326 	beq	r3,zero,100091ec <quorem+0x128>
100091e0:	00000506 	br	100091f8 <quorem+0x134>
100091e4:	10c00017 	ldw	r3,0(r2)
100091e8:	1800031e 	bne	r3,zero,100091f8 <quorem+0x134>
100091ec:	10bfff04 	addi	r2,r2,-4
100091f0:	bdffffc4 	addi	r23,r23,-1
100091f4:	98bffb36 	bltu	r19,r2,100091e4 <__alt_data_end+0xf80091e4>
100091f8:	d8c00017 	ldw	r3,0(sp)
100091fc:	1dc00415 	stw	r23,16(r3)
10009200:	d9400217 	ldw	r5,8(sp)
10009204:	d9000017 	ldw	r4,0(sp)
10009208:	000d3280 	call	1000d328 <__mcmp>
1000920c:	10002816 	blt	r2,zero,100092b0 <quorem+0x1ec>
10009210:	dc400117 	ldw	r17,4(sp)
10009214:	94800044 	addi	r18,r18,1
10009218:	980d883a 	mov	r6,r19
1000921c:	0007883a 	mov	r3,zero
10009220:	31000017 	ldw	r4,0(r6)
10009224:	89400017 	ldw	r5,0(r17)
10009228:	31800104 	addi	r6,r6,4
1000922c:	20bfffcc 	andi	r2,r4,65535
10009230:	10c7883a 	add	r3,r2,r3
10009234:	28bfffcc 	andi	r2,r5,65535
10009238:	1885c83a 	sub	r2,r3,r2
1000923c:	280ad43a 	srli	r5,r5,16
10009240:	2008d43a 	srli	r4,r4,16
10009244:	1007d43a 	srai	r3,r2,16
10009248:	10bfffcc 	andi	r2,r2,65535
1000924c:	2149c83a 	sub	r4,r4,r5
10009250:	20c9883a 	add	r4,r4,r3
10009254:	200a943a 	slli	r5,r4,16
10009258:	8c400104 	addi	r17,r17,4
1000925c:	2007d43a 	srai	r3,r4,16
10009260:	2884b03a 	or	r2,r5,r2
10009264:	30bfff15 	stw	r2,-4(r6)
10009268:	e47fed2e 	bgeu	fp,r17,10009220 <__alt_data_end+0xf8009220>
1000926c:	bdc5883a 	add	r2,r23,r23
10009270:	1085883a 	add	r2,r2,r2
10009274:	9887883a 	add	r3,r19,r2
10009278:	18800017 	ldw	r2,0(r3)
1000927c:	10000c1e 	bne	r2,zero,100092b0 <quorem+0x1ec>
10009280:	18bfff04 	addi	r2,r3,-4
10009284:	9880082e 	bgeu	r19,r2,100092a8 <quorem+0x1e4>
10009288:	18ffff17 	ldw	r3,-4(r3)
1000928c:	18000326 	beq	r3,zero,1000929c <quorem+0x1d8>
10009290:	00000506 	br	100092a8 <quorem+0x1e4>
10009294:	10c00017 	ldw	r3,0(r2)
10009298:	1800031e 	bne	r3,zero,100092a8 <quorem+0x1e4>
1000929c:	10bfff04 	addi	r2,r2,-4
100092a0:	bdffffc4 	addi	r23,r23,-1
100092a4:	98bffb36 	bltu	r19,r2,10009294 <__alt_data_end+0xf8009294>
100092a8:	d8c00017 	ldw	r3,0(sp)
100092ac:	1dc00415 	stw	r23,16(r3)
100092b0:	9005883a 	mov	r2,r18
100092b4:	dfc00d17 	ldw	ra,52(sp)
100092b8:	df000c17 	ldw	fp,48(sp)
100092bc:	ddc00b17 	ldw	r23,44(sp)
100092c0:	dd800a17 	ldw	r22,40(sp)
100092c4:	dd400917 	ldw	r21,36(sp)
100092c8:	dd000817 	ldw	r20,32(sp)
100092cc:	dcc00717 	ldw	r19,28(sp)
100092d0:	dc800617 	ldw	r18,24(sp)
100092d4:	dc400517 	ldw	r17,20(sp)
100092d8:	dc000417 	ldw	r16,16(sp)
100092dc:	dec00e04 	addi	sp,sp,56
100092e0:	f800283a 	ret
100092e4:	0005883a 	mov	r2,zero
100092e8:	003ff206 	br	100092b4 <__alt_data_end+0xf80092b4>

100092ec <_dtoa_r>:
100092ec:	20801017 	ldw	r2,64(r4)
100092f0:	deffde04 	addi	sp,sp,-136
100092f4:	df002015 	stw	fp,128(sp)
100092f8:	dcc01b15 	stw	r19,108(sp)
100092fc:	dc801a15 	stw	r18,104(sp)
10009300:	dc401915 	stw	r17,100(sp)
10009304:	dc001815 	stw	r16,96(sp)
10009308:	dfc02115 	stw	ra,132(sp)
1000930c:	ddc01f15 	stw	r23,124(sp)
10009310:	dd801e15 	stw	r22,120(sp)
10009314:	dd401d15 	stw	r21,116(sp)
10009318:	dd001c15 	stw	r20,112(sp)
1000931c:	d9c00315 	stw	r7,12(sp)
10009320:	2039883a 	mov	fp,r4
10009324:	3023883a 	mov	r17,r6
10009328:	2825883a 	mov	r18,r5
1000932c:	dc002417 	ldw	r16,144(sp)
10009330:	3027883a 	mov	r19,r6
10009334:	10000826 	beq	r2,zero,10009358 <_dtoa_r+0x6c>
10009338:	21801117 	ldw	r6,68(r4)
1000933c:	00c00044 	movi	r3,1
10009340:	100b883a 	mov	r5,r2
10009344:	1986983a 	sll	r3,r3,r6
10009348:	11800115 	stw	r6,4(r2)
1000934c:	10c00215 	stw	r3,8(r2)
10009350:	000ca4c0 	call	1000ca4c <_Bfree>
10009354:	e0001015 	stw	zero,64(fp)
10009358:	88002e16 	blt	r17,zero,10009414 <_dtoa_r+0x128>
1000935c:	80000015 	stw	zero,0(r16)
10009360:	889ffc2c 	andhi	r2,r17,32752
10009364:	00dffc34 	movhi	r3,32752
10009368:	10c01c26 	beq	r2,r3,100093dc <_dtoa_r+0xf0>
1000936c:	000d883a 	mov	r6,zero
10009370:	000f883a 	mov	r7,zero
10009374:	9009883a 	mov	r4,r18
10009378:	980b883a 	mov	r5,r19
1000937c:	00121200 	call	10012120 <__eqdf2>
10009380:	10002b1e 	bne	r2,zero,10009430 <_dtoa_r+0x144>
10009384:	d9c02317 	ldw	r7,140(sp)
10009388:	00800044 	movi	r2,1
1000938c:	38800015 	stw	r2,0(r7)
10009390:	d8802517 	ldw	r2,148(sp)
10009394:	10019e26 	beq	r2,zero,10009a10 <_dtoa_r+0x724>
10009398:	d8c02517 	ldw	r3,148(sp)
1000939c:	00840074 	movhi	r2,4097
100093a0:	1099e044 	addi	r2,r2,26497
100093a4:	18800015 	stw	r2,0(r3)
100093a8:	10bfffc4 	addi	r2,r2,-1
100093ac:	dfc02117 	ldw	ra,132(sp)
100093b0:	df002017 	ldw	fp,128(sp)
100093b4:	ddc01f17 	ldw	r23,124(sp)
100093b8:	dd801e17 	ldw	r22,120(sp)
100093bc:	dd401d17 	ldw	r21,116(sp)
100093c0:	dd001c17 	ldw	r20,112(sp)
100093c4:	dcc01b17 	ldw	r19,108(sp)
100093c8:	dc801a17 	ldw	r18,104(sp)
100093cc:	dc401917 	ldw	r17,100(sp)
100093d0:	dc001817 	ldw	r16,96(sp)
100093d4:	dec02204 	addi	sp,sp,136
100093d8:	f800283a 	ret
100093dc:	d8c02317 	ldw	r3,140(sp)
100093e0:	0089c3c4 	movi	r2,9999
100093e4:	18800015 	stw	r2,0(r3)
100093e8:	90017726 	beq	r18,zero,100099c8 <_dtoa_r+0x6dc>
100093ec:	00840074 	movhi	r2,4097
100093f0:	1099ec04 	addi	r2,r2,26544
100093f4:	d9002517 	ldw	r4,148(sp)
100093f8:	203fec26 	beq	r4,zero,100093ac <__alt_data_end+0xf80093ac>
100093fc:	10c000c7 	ldb	r3,3(r2)
10009400:	1801781e 	bne	r3,zero,100099e4 <_dtoa_r+0x6f8>
10009404:	10c000c4 	addi	r3,r2,3
10009408:	d9802517 	ldw	r6,148(sp)
1000940c:	30c00015 	stw	r3,0(r6)
10009410:	003fe606 	br	100093ac <__alt_data_end+0xf80093ac>
10009414:	04e00034 	movhi	r19,32768
10009418:	9cffffc4 	addi	r19,r19,-1
1000941c:	00800044 	movi	r2,1
10009420:	8ce6703a 	and	r19,r17,r19
10009424:	80800015 	stw	r2,0(r16)
10009428:	9823883a 	mov	r17,r19
1000942c:	003fcc06 	br	10009360 <__alt_data_end+0xf8009360>
10009430:	d8800204 	addi	r2,sp,8
10009434:	d8800015 	stw	r2,0(sp)
10009438:	d9c00104 	addi	r7,sp,4
1000943c:	900b883a 	mov	r5,r18
10009440:	980d883a 	mov	r6,r19
10009444:	e009883a 	mov	r4,fp
10009448:	8820d53a 	srli	r16,r17,20
1000944c:	000d6f40 	call	1000d6f4 <__d2b>
10009450:	d8800915 	stw	r2,36(sp)
10009454:	8001651e 	bne	r16,zero,100099ec <_dtoa_r+0x700>
10009458:	dd800217 	ldw	r22,8(sp)
1000945c:	dc000117 	ldw	r16,4(sp)
10009460:	00800804 	movi	r2,32
10009464:	b421883a 	add	r16,r22,r16
10009468:	80c10c84 	addi	r3,r16,1074
1000946c:	10c2d10e 	bge	r2,r3,10009fb4 <_dtoa_r+0xcc8>
10009470:	00801004 	movi	r2,64
10009474:	81010484 	addi	r4,r16,1042
10009478:	10c7c83a 	sub	r3,r2,r3
1000947c:	9108d83a 	srl	r4,r18,r4
10009480:	88e2983a 	sll	r17,r17,r3
10009484:	2448b03a 	or	r4,r4,r17
10009488:	001363c0 	call	1001363c <__floatunsidf>
1000948c:	017f8434 	movhi	r5,65040
10009490:	01800044 	movi	r6,1
10009494:	1009883a 	mov	r4,r2
10009498:	194b883a 	add	r5,r3,r5
1000949c:	843fffc4 	addi	r16,r16,-1
100094a0:	d9801115 	stw	r6,68(sp)
100094a4:	000d883a 	mov	r6,zero
100094a8:	01cffe34 	movhi	r7,16376
100094ac:	0012be40 	call	10012be4 <__subdf3>
100094b0:	0198dbf4 	movhi	r6,25455
100094b4:	01cff4f4 	movhi	r7,16339
100094b8:	3190d844 	addi	r6,r6,17249
100094bc:	39e1e9c4 	addi	r7,r7,-30809
100094c0:	1009883a 	mov	r4,r2
100094c4:	180b883a 	mov	r5,r3
100094c8:	00123780 	call	10012378 <__muldf3>
100094cc:	01a2d874 	movhi	r6,35681
100094d0:	01cff1f4 	movhi	r7,16327
100094d4:	31b22cc4 	addi	r6,r6,-14157
100094d8:	39e28a04 	addi	r7,r7,-30168
100094dc:	180b883a 	mov	r5,r3
100094e0:	1009883a 	mov	r4,r2
100094e4:	0010ea40 	call	10010ea4 <__adddf3>
100094e8:	8009883a 	mov	r4,r16
100094ec:	1029883a 	mov	r20,r2
100094f0:	1823883a 	mov	r17,r3
100094f4:	00135600 	call	10013560 <__floatsidf>
100094f8:	019427f4 	movhi	r6,20639
100094fc:	01cff4f4 	movhi	r7,16339
10009500:	319e7ec4 	addi	r6,r6,31227
10009504:	39d104c4 	addi	r7,r7,17427
10009508:	1009883a 	mov	r4,r2
1000950c:	180b883a 	mov	r5,r3
10009510:	00123780 	call	10012378 <__muldf3>
10009514:	100d883a 	mov	r6,r2
10009518:	180f883a 	mov	r7,r3
1000951c:	a009883a 	mov	r4,r20
10009520:	880b883a 	mov	r5,r17
10009524:	0010ea40 	call	10010ea4 <__adddf3>
10009528:	1009883a 	mov	r4,r2
1000952c:	180b883a 	mov	r5,r3
10009530:	1029883a 	mov	r20,r2
10009534:	1823883a 	mov	r17,r3
10009538:	00134e00 	call	100134e0 <__fixdfsi>
1000953c:	000d883a 	mov	r6,zero
10009540:	000f883a 	mov	r7,zero
10009544:	a009883a 	mov	r4,r20
10009548:	880b883a 	mov	r5,r17
1000954c:	d8800515 	stw	r2,20(sp)
10009550:	00122840 	call	10012284 <__ledf2>
10009554:	10028716 	blt	r2,zero,10009f74 <_dtoa_r+0xc88>
10009558:	d8c00517 	ldw	r3,20(sp)
1000955c:	00800584 	movi	r2,22
10009560:	10c27536 	bltu	r2,r3,10009f38 <_dtoa_r+0xc4c>
10009564:	180490fa 	slli	r2,r3,3
10009568:	00c40074 	movhi	r3,4097
1000956c:	18da0804 	addi	r3,r3,26656
10009570:	1885883a 	add	r2,r3,r2
10009574:	11000017 	ldw	r4,0(r2)
10009578:	11400117 	ldw	r5,4(r2)
1000957c:	900d883a 	mov	r6,r18
10009580:	980f883a 	mov	r7,r19
10009584:	00121a80 	call	100121a8 <__gedf2>
10009588:	00828d0e 	bge	zero,r2,10009fc0 <_dtoa_r+0xcd4>
1000958c:	d9000517 	ldw	r4,20(sp)
10009590:	d8000e15 	stw	zero,56(sp)
10009594:	213fffc4 	addi	r4,r4,-1
10009598:	d9000515 	stw	r4,20(sp)
1000959c:	b42dc83a 	sub	r22,r22,r16
100095a0:	b5bfffc4 	addi	r22,r22,-1
100095a4:	b0026f16 	blt	r22,zero,10009f64 <_dtoa_r+0xc78>
100095a8:	d8000815 	stw	zero,32(sp)
100095ac:	d9c00517 	ldw	r7,20(sp)
100095b0:	38026416 	blt	r7,zero,10009f44 <_dtoa_r+0xc58>
100095b4:	b1ed883a 	add	r22,r22,r7
100095b8:	d9c00d15 	stw	r7,52(sp)
100095bc:	d8000a15 	stw	zero,40(sp)
100095c0:	d9800317 	ldw	r6,12(sp)
100095c4:	00800244 	movi	r2,9
100095c8:	11811436 	bltu	r2,r6,10009a1c <_dtoa_r+0x730>
100095cc:	00800144 	movi	r2,5
100095d0:	1184e10e 	bge	r2,r6,1000a958 <_dtoa_r+0x166c>
100095d4:	31bfff04 	addi	r6,r6,-4
100095d8:	d9800315 	stw	r6,12(sp)
100095dc:	0023883a 	mov	r17,zero
100095e0:	d9800317 	ldw	r6,12(sp)
100095e4:	008000c4 	movi	r2,3
100095e8:	30836726 	beq	r6,r2,1000a388 <_dtoa_r+0x109c>
100095ec:	1183410e 	bge	r2,r6,1000a2f4 <_dtoa_r+0x1008>
100095f0:	d9c00317 	ldw	r7,12(sp)
100095f4:	00800104 	movi	r2,4
100095f8:	38827c26 	beq	r7,r2,10009fec <_dtoa_r+0xd00>
100095fc:	00800144 	movi	r2,5
10009600:	3884c41e 	bne	r7,r2,1000a914 <_dtoa_r+0x1628>
10009604:	00800044 	movi	r2,1
10009608:	d8800b15 	stw	r2,44(sp)
1000960c:	d8c00517 	ldw	r3,20(sp)
10009610:	d9002217 	ldw	r4,136(sp)
10009614:	1907883a 	add	r3,r3,r4
10009618:	19800044 	addi	r6,r3,1
1000961c:	d8c00c15 	stw	r3,48(sp)
10009620:	d9800615 	stw	r6,24(sp)
10009624:	0183a40e 	bge	zero,r6,1000a4b8 <_dtoa_r+0x11cc>
10009628:	d9800617 	ldw	r6,24(sp)
1000962c:	3021883a 	mov	r16,r6
10009630:	e0001115 	stw	zero,68(fp)
10009634:	008005c4 	movi	r2,23
10009638:	1184c92e 	bgeu	r2,r6,1000a960 <_dtoa_r+0x1674>
1000963c:	00c00044 	movi	r3,1
10009640:	00800104 	movi	r2,4
10009644:	1085883a 	add	r2,r2,r2
10009648:	11000504 	addi	r4,r2,20
1000964c:	180b883a 	mov	r5,r3
10009650:	18c00044 	addi	r3,r3,1
10009654:	313ffb2e 	bgeu	r6,r4,10009644 <__alt_data_end+0xf8009644>
10009658:	e1401115 	stw	r5,68(fp)
1000965c:	e009883a 	mov	r4,fp
10009660:	000c9a40 	call	1000c9a4 <_Balloc>
10009664:	d8800715 	stw	r2,28(sp)
10009668:	e0801015 	stw	r2,64(fp)
1000966c:	00800384 	movi	r2,14
10009670:	1400f736 	bltu	r2,r16,10009a50 <_dtoa_r+0x764>
10009674:	8800f626 	beq	r17,zero,10009a50 <_dtoa_r+0x764>
10009678:	d9c00517 	ldw	r7,20(sp)
1000967c:	01c39a0e 	bge	zero,r7,1000a4e8 <_dtoa_r+0x11fc>
10009680:	388003cc 	andi	r2,r7,15
10009684:	100490fa 	slli	r2,r2,3
10009688:	382bd13a 	srai	r21,r7,4
1000968c:	00c40074 	movhi	r3,4097
10009690:	18da0804 	addi	r3,r3,26656
10009694:	1885883a 	add	r2,r3,r2
10009698:	a8c0040c 	andi	r3,r21,16
1000969c:	12400017 	ldw	r9,0(r2)
100096a0:	12000117 	ldw	r8,4(r2)
100096a4:	18037926 	beq	r3,zero,1000a48c <_dtoa_r+0x11a0>
100096a8:	00840074 	movhi	r2,4097
100096ac:	1099fe04 	addi	r2,r2,26616
100096b0:	11800817 	ldw	r6,32(r2)
100096b4:	11c00917 	ldw	r7,36(r2)
100096b8:	9009883a 	mov	r4,r18
100096bc:	980b883a 	mov	r5,r19
100096c0:	da001715 	stw	r8,92(sp)
100096c4:	da401615 	stw	r9,88(sp)
100096c8:	00117500 	call	10011750 <__divdf3>
100096cc:	da001717 	ldw	r8,92(sp)
100096d0:	da401617 	ldw	r9,88(sp)
100096d4:	ad4003cc 	andi	r21,r21,15
100096d8:	040000c4 	movi	r16,3
100096dc:	1023883a 	mov	r17,r2
100096e0:	1829883a 	mov	r20,r3
100096e4:	a8001126 	beq	r21,zero,1000972c <_dtoa_r+0x440>
100096e8:	05c40074 	movhi	r23,4097
100096ec:	bdd9fe04 	addi	r23,r23,26616
100096f0:	4805883a 	mov	r2,r9
100096f4:	4007883a 	mov	r3,r8
100096f8:	a980004c 	andi	r6,r21,1
100096fc:	1009883a 	mov	r4,r2
10009700:	a82bd07a 	srai	r21,r21,1
10009704:	180b883a 	mov	r5,r3
10009708:	30000426 	beq	r6,zero,1000971c <_dtoa_r+0x430>
1000970c:	b9800017 	ldw	r6,0(r23)
10009710:	b9c00117 	ldw	r7,4(r23)
10009714:	84000044 	addi	r16,r16,1
10009718:	00123780 	call	10012378 <__muldf3>
1000971c:	bdc00204 	addi	r23,r23,8
10009720:	a83ff51e 	bne	r21,zero,100096f8 <__alt_data_end+0xf80096f8>
10009724:	1013883a 	mov	r9,r2
10009728:	1811883a 	mov	r8,r3
1000972c:	480d883a 	mov	r6,r9
10009730:	400f883a 	mov	r7,r8
10009734:	8809883a 	mov	r4,r17
10009738:	a00b883a 	mov	r5,r20
1000973c:	00117500 	call	10011750 <__divdf3>
10009740:	d8800f15 	stw	r2,60(sp)
10009744:	d8c01015 	stw	r3,64(sp)
10009748:	d8c00e17 	ldw	r3,56(sp)
1000974c:	18000626 	beq	r3,zero,10009768 <_dtoa_r+0x47c>
10009750:	d9000f17 	ldw	r4,60(sp)
10009754:	d9401017 	ldw	r5,64(sp)
10009758:	000d883a 	mov	r6,zero
1000975c:	01cffc34 	movhi	r7,16368
10009760:	00122840 	call	10012284 <__ledf2>
10009764:	10040b16 	blt	r2,zero,1000a794 <_dtoa_r+0x14a8>
10009768:	8009883a 	mov	r4,r16
1000976c:	00135600 	call	10013560 <__floatsidf>
10009770:	d9800f17 	ldw	r6,60(sp)
10009774:	d9c01017 	ldw	r7,64(sp)
10009778:	1009883a 	mov	r4,r2
1000977c:	180b883a 	mov	r5,r3
10009780:	00123780 	call	10012378 <__muldf3>
10009784:	000d883a 	mov	r6,zero
10009788:	01d00734 	movhi	r7,16412
1000978c:	1009883a 	mov	r4,r2
10009790:	180b883a 	mov	r5,r3
10009794:	0010ea40 	call	10010ea4 <__adddf3>
10009798:	1021883a 	mov	r16,r2
1000979c:	d8800617 	ldw	r2,24(sp)
100097a0:	047f3034 	movhi	r17,64704
100097a4:	1c63883a 	add	r17,r3,r17
100097a8:	10031826 	beq	r2,zero,1000a40c <_dtoa_r+0x1120>
100097ac:	d8c00517 	ldw	r3,20(sp)
100097b0:	db000617 	ldw	r12,24(sp)
100097b4:	d8c01315 	stw	r3,76(sp)
100097b8:	d9000b17 	ldw	r4,44(sp)
100097bc:	20038f26 	beq	r4,zero,1000a5fc <_dtoa_r+0x1310>
100097c0:	60bfffc4 	addi	r2,r12,-1
100097c4:	100490fa 	slli	r2,r2,3
100097c8:	00c40074 	movhi	r3,4097
100097cc:	18da0804 	addi	r3,r3,26656
100097d0:	1885883a 	add	r2,r3,r2
100097d4:	11800017 	ldw	r6,0(r2)
100097d8:	11c00117 	ldw	r7,4(r2)
100097dc:	d8800717 	ldw	r2,28(sp)
100097e0:	0009883a 	mov	r4,zero
100097e4:	014ff834 	movhi	r5,16352
100097e8:	db001615 	stw	r12,88(sp)
100097ec:	15c00044 	addi	r23,r2,1
100097f0:	00117500 	call	10011750 <__divdf3>
100097f4:	800d883a 	mov	r6,r16
100097f8:	880f883a 	mov	r7,r17
100097fc:	1009883a 	mov	r4,r2
10009800:	180b883a 	mov	r5,r3
10009804:	0012be40 	call	10012be4 <__subdf3>
10009808:	d9401017 	ldw	r5,64(sp)
1000980c:	d9000f17 	ldw	r4,60(sp)
10009810:	102b883a 	mov	r21,r2
10009814:	d8c01215 	stw	r3,72(sp)
10009818:	00134e00 	call	100134e0 <__fixdfsi>
1000981c:	1009883a 	mov	r4,r2
10009820:	1029883a 	mov	r20,r2
10009824:	00135600 	call	10013560 <__floatsidf>
10009828:	d9000f17 	ldw	r4,60(sp)
1000982c:	d9401017 	ldw	r5,64(sp)
10009830:	100d883a 	mov	r6,r2
10009834:	180f883a 	mov	r7,r3
10009838:	0012be40 	call	10012be4 <__subdf3>
1000983c:	1823883a 	mov	r17,r3
10009840:	d8c00717 	ldw	r3,28(sp)
10009844:	d9401217 	ldw	r5,72(sp)
10009848:	a2000c04 	addi	r8,r20,48
1000984c:	1021883a 	mov	r16,r2
10009850:	1a000005 	stb	r8,0(r3)
10009854:	800d883a 	mov	r6,r16
10009858:	880f883a 	mov	r7,r17
1000985c:	a809883a 	mov	r4,r21
10009860:	4029883a 	mov	r20,r8
10009864:	00121a80 	call	100121a8 <__gedf2>
10009868:	00841d16 	blt	zero,r2,1000a8e0 <_dtoa_r+0x15f4>
1000986c:	800d883a 	mov	r6,r16
10009870:	880f883a 	mov	r7,r17
10009874:	0009883a 	mov	r4,zero
10009878:	014ffc34 	movhi	r5,16368
1000987c:	0012be40 	call	10012be4 <__subdf3>
10009880:	d9401217 	ldw	r5,72(sp)
10009884:	100d883a 	mov	r6,r2
10009888:	180f883a 	mov	r7,r3
1000988c:	a809883a 	mov	r4,r21
10009890:	00121a80 	call	100121a8 <__gedf2>
10009894:	db001617 	ldw	r12,88(sp)
10009898:	00840e16 	blt	zero,r2,1000a8d4 <_dtoa_r+0x15e8>
1000989c:	00800044 	movi	r2,1
100098a0:	13006b0e 	bge	r2,r12,10009a50 <_dtoa_r+0x764>
100098a4:	d9000717 	ldw	r4,28(sp)
100098a8:	dd800f15 	stw	r22,60(sp)
100098ac:	dcc01015 	stw	r19,64(sp)
100098b0:	2319883a 	add	r12,r4,r12
100098b4:	dcc01217 	ldw	r19,72(sp)
100098b8:	602d883a 	mov	r22,r12
100098bc:	dc801215 	stw	r18,72(sp)
100098c0:	b825883a 	mov	r18,r23
100098c4:	00000906 	br	100098ec <_dtoa_r+0x600>
100098c8:	0012be40 	call	10012be4 <__subdf3>
100098cc:	a80d883a 	mov	r6,r21
100098d0:	980f883a 	mov	r7,r19
100098d4:	1009883a 	mov	r4,r2
100098d8:	180b883a 	mov	r5,r3
100098dc:	00122840 	call	10012284 <__ledf2>
100098e0:	1003e816 	blt	r2,zero,1000a884 <_dtoa_r+0x1598>
100098e4:	b825883a 	mov	r18,r23
100098e8:	bd83e926 	beq	r23,r22,1000a890 <_dtoa_r+0x15a4>
100098ec:	a809883a 	mov	r4,r21
100098f0:	980b883a 	mov	r5,r19
100098f4:	000d883a 	mov	r6,zero
100098f8:	01d00934 	movhi	r7,16420
100098fc:	00123780 	call	10012378 <__muldf3>
10009900:	000d883a 	mov	r6,zero
10009904:	01d00934 	movhi	r7,16420
10009908:	8009883a 	mov	r4,r16
1000990c:	880b883a 	mov	r5,r17
10009910:	102b883a 	mov	r21,r2
10009914:	1827883a 	mov	r19,r3
10009918:	00123780 	call	10012378 <__muldf3>
1000991c:	180b883a 	mov	r5,r3
10009920:	1009883a 	mov	r4,r2
10009924:	1821883a 	mov	r16,r3
10009928:	1023883a 	mov	r17,r2
1000992c:	00134e00 	call	100134e0 <__fixdfsi>
10009930:	1009883a 	mov	r4,r2
10009934:	1029883a 	mov	r20,r2
10009938:	00135600 	call	10013560 <__floatsidf>
1000993c:	8809883a 	mov	r4,r17
10009940:	800b883a 	mov	r5,r16
10009944:	100d883a 	mov	r6,r2
10009948:	180f883a 	mov	r7,r3
1000994c:	0012be40 	call	10012be4 <__subdf3>
10009950:	a5000c04 	addi	r20,r20,48
10009954:	a80d883a 	mov	r6,r21
10009958:	980f883a 	mov	r7,r19
1000995c:	1009883a 	mov	r4,r2
10009960:	180b883a 	mov	r5,r3
10009964:	95000005 	stb	r20,0(r18)
10009968:	1021883a 	mov	r16,r2
1000996c:	1823883a 	mov	r17,r3
10009970:	00122840 	call	10012284 <__ledf2>
10009974:	bdc00044 	addi	r23,r23,1
10009978:	800d883a 	mov	r6,r16
1000997c:	880f883a 	mov	r7,r17
10009980:	0009883a 	mov	r4,zero
10009984:	014ffc34 	movhi	r5,16368
10009988:	103fcf0e 	bge	r2,zero,100098c8 <__alt_data_end+0xf80098c8>
1000998c:	d8c01317 	ldw	r3,76(sp)
10009990:	d8c00515 	stw	r3,20(sp)
10009994:	d9400917 	ldw	r5,36(sp)
10009998:	e009883a 	mov	r4,fp
1000999c:	000ca4c0 	call	1000ca4c <_Bfree>
100099a0:	d9000517 	ldw	r4,20(sp)
100099a4:	d9802317 	ldw	r6,140(sp)
100099a8:	d9c02517 	ldw	r7,148(sp)
100099ac:	b8000005 	stb	zero,0(r23)
100099b0:	20800044 	addi	r2,r4,1
100099b4:	30800015 	stw	r2,0(r6)
100099b8:	3802aa26 	beq	r7,zero,1000a464 <_dtoa_r+0x1178>
100099bc:	3dc00015 	stw	r23,0(r7)
100099c0:	d8800717 	ldw	r2,28(sp)
100099c4:	003e7906 	br	100093ac <__alt_data_end+0xf80093ac>
100099c8:	00800434 	movhi	r2,16
100099cc:	10bfffc4 	addi	r2,r2,-1
100099d0:	88a2703a 	and	r17,r17,r2
100099d4:	883e851e 	bne	r17,zero,100093ec <__alt_data_end+0xf80093ec>
100099d8:	00840074 	movhi	r2,4097
100099dc:	1099e904 	addi	r2,r2,26532
100099e0:	003e8406 	br	100093f4 <__alt_data_end+0xf80093f4>
100099e4:	10c00204 	addi	r3,r2,8
100099e8:	003e8706 	br	10009408 <__alt_data_end+0xf8009408>
100099ec:	01400434 	movhi	r5,16
100099f0:	297fffc4 	addi	r5,r5,-1
100099f4:	994a703a 	and	r5,r19,r5
100099f8:	9009883a 	mov	r4,r18
100099fc:	843f0044 	addi	r16,r16,-1023
10009a00:	294ffc34 	orhi	r5,r5,16368
10009a04:	dd800217 	ldw	r22,8(sp)
10009a08:	d8001115 	stw	zero,68(sp)
10009a0c:	003ea506 	br	100094a4 <__alt_data_end+0xf80094a4>
10009a10:	00840074 	movhi	r2,4097
10009a14:	1099e004 	addi	r2,r2,26496
10009a18:	003e6406 	br	100093ac <__alt_data_end+0xf80093ac>
10009a1c:	e0001115 	stw	zero,68(fp)
10009a20:	000b883a 	mov	r5,zero
10009a24:	e009883a 	mov	r4,fp
10009a28:	000c9a40 	call	1000c9a4 <_Balloc>
10009a2c:	01bfffc4 	movi	r6,-1
10009a30:	01c00044 	movi	r7,1
10009a34:	d8800715 	stw	r2,28(sp)
10009a38:	d9800c15 	stw	r6,48(sp)
10009a3c:	e0801015 	stw	r2,64(fp)
10009a40:	d8000315 	stw	zero,12(sp)
10009a44:	d9c00b15 	stw	r7,44(sp)
10009a48:	d9800615 	stw	r6,24(sp)
10009a4c:	d8002215 	stw	zero,136(sp)
10009a50:	d8800117 	ldw	r2,4(sp)
10009a54:	10008916 	blt	r2,zero,10009c7c <_dtoa_r+0x990>
10009a58:	d9000517 	ldw	r4,20(sp)
10009a5c:	00c00384 	movi	r3,14
10009a60:	19008616 	blt	r3,r4,10009c7c <_dtoa_r+0x990>
10009a64:	200490fa 	slli	r2,r4,3
10009a68:	00c40074 	movhi	r3,4097
10009a6c:	d9802217 	ldw	r6,136(sp)
10009a70:	18da0804 	addi	r3,r3,26656
10009a74:	1885883a 	add	r2,r3,r2
10009a78:	14000017 	ldw	r16,0(r2)
10009a7c:	14400117 	ldw	r17,4(r2)
10009a80:	30016316 	blt	r6,zero,1000a010 <_dtoa_r+0xd24>
10009a84:	800d883a 	mov	r6,r16
10009a88:	880f883a 	mov	r7,r17
10009a8c:	9009883a 	mov	r4,r18
10009a90:	980b883a 	mov	r5,r19
10009a94:	00117500 	call	10011750 <__divdf3>
10009a98:	180b883a 	mov	r5,r3
10009a9c:	1009883a 	mov	r4,r2
10009aa0:	00134e00 	call	100134e0 <__fixdfsi>
10009aa4:	1009883a 	mov	r4,r2
10009aa8:	102b883a 	mov	r21,r2
10009aac:	00135600 	call	10013560 <__floatsidf>
10009ab0:	800d883a 	mov	r6,r16
10009ab4:	880f883a 	mov	r7,r17
10009ab8:	1009883a 	mov	r4,r2
10009abc:	180b883a 	mov	r5,r3
10009ac0:	00123780 	call	10012378 <__muldf3>
10009ac4:	100d883a 	mov	r6,r2
10009ac8:	180f883a 	mov	r7,r3
10009acc:	9009883a 	mov	r4,r18
10009ad0:	980b883a 	mov	r5,r19
10009ad4:	0012be40 	call	10012be4 <__subdf3>
10009ad8:	d9c00717 	ldw	r7,28(sp)
10009adc:	1009883a 	mov	r4,r2
10009ae0:	a8800c04 	addi	r2,r21,48
10009ae4:	38800005 	stb	r2,0(r7)
10009ae8:	3dc00044 	addi	r23,r7,1
10009aec:	d9c00617 	ldw	r7,24(sp)
10009af0:	01800044 	movi	r6,1
10009af4:	180b883a 	mov	r5,r3
10009af8:	2005883a 	mov	r2,r4
10009afc:	39803826 	beq	r7,r6,10009be0 <_dtoa_r+0x8f4>
10009b00:	000d883a 	mov	r6,zero
10009b04:	01d00934 	movhi	r7,16420
10009b08:	00123780 	call	10012378 <__muldf3>
10009b0c:	000d883a 	mov	r6,zero
10009b10:	000f883a 	mov	r7,zero
10009b14:	1009883a 	mov	r4,r2
10009b18:	180b883a 	mov	r5,r3
10009b1c:	1025883a 	mov	r18,r2
10009b20:	1827883a 	mov	r19,r3
10009b24:	00121200 	call	10012120 <__eqdf2>
10009b28:	103f9a26 	beq	r2,zero,10009994 <__alt_data_end+0xf8009994>
10009b2c:	d9c00617 	ldw	r7,24(sp)
10009b30:	d8c00717 	ldw	r3,28(sp)
10009b34:	b829883a 	mov	r20,r23
10009b38:	38bfffc4 	addi	r2,r7,-1
10009b3c:	18ad883a 	add	r22,r3,r2
10009b40:	00000a06 	br	10009b6c <_dtoa_r+0x880>
10009b44:	00123780 	call	10012378 <__muldf3>
10009b48:	000d883a 	mov	r6,zero
10009b4c:	000f883a 	mov	r7,zero
10009b50:	1009883a 	mov	r4,r2
10009b54:	180b883a 	mov	r5,r3
10009b58:	1025883a 	mov	r18,r2
10009b5c:	1827883a 	mov	r19,r3
10009b60:	b829883a 	mov	r20,r23
10009b64:	00121200 	call	10012120 <__eqdf2>
10009b68:	103f8a26 	beq	r2,zero,10009994 <__alt_data_end+0xf8009994>
10009b6c:	800d883a 	mov	r6,r16
10009b70:	880f883a 	mov	r7,r17
10009b74:	9009883a 	mov	r4,r18
10009b78:	980b883a 	mov	r5,r19
10009b7c:	00117500 	call	10011750 <__divdf3>
10009b80:	180b883a 	mov	r5,r3
10009b84:	1009883a 	mov	r4,r2
10009b88:	00134e00 	call	100134e0 <__fixdfsi>
10009b8c:	1009883a 	mov	r4,r2
10009b90:	102b883a 	mov	r21,r2
10009b94:	00135600 	call	10013560 <__floatsidf>
10009b98:	800d883a 	mov	r6,r16
10009b9c:	880f883a 	mov	r7,r17
10009ba0:	1009883a 	mov	r4,r2
10009ba4:	180b883a 	mov	r5,r3
10009ba8:	00123780 	call	10012378 <__muldf3>
10009bac:	100d883a 	mov	r6,r2
10009bb0:	180f883a 	mov	r7,r3
10009bb4:	9009883a 	mov	r4,r18
10009bb8:	980b883a 	mov	r5,r19
10009bbc:	0012be40 	call	10012be4 <__subdf3>
10009bc0:	aa000c04 	addi	r8,r21,48
10009bc4:	a2000005 	stb	r8,0(r20)
10009bc8:	000d883a 	mov	r6,zero
10009bcc:	01d00934 	movhi	r7,16420
10009bd0:	1009883a 	mov	r4,r2
10009bd4:	180b883a 	mov	r5,r3
10009bd8:	a5c00044 	addi	r23,r20,1
10009bdc:	b53fd91e 	bne	r22,r20,10009b44 <__alt_data_end+0xf8009b44>
10009be0:	100d883a 	mov	r6,r2
10009be4:	180f883a 	mov	r7,r3
10009be8:	1009883a 	mov	r4,r2
10009bec:	180b883a 	mov	r5,r3
10009bf0:	0010ea40 	call	10010ea4 <__adddf3>
10009bf4:	100d883a 	mov	r6,r2
10009bf8:	180f883a 	mov	r7,r3
10009bfc:	8009883a 	mov	r4,r16
10009c00:	880b883a 	mov	r5,r17
10009c04:	1027883a 	mov	r19,r2
10009c08:	1825883a 	mov	r18,r3
10009c0c:	00122840 	call	10012284 <__ledf2>
10009c10:	10000816 	blt	r2,zero,10009c34 <_dtoa_r+0x948>
10009c14:	980d883a 	mov	r6,r19
10009c18:	900f883a 	mov	r7,r18
10009c1c:	8009883a 	mov	r4,r16
10009c20:	880b883a 	mov	r5,r17
10009c24:	00121200 	call	10012120 <__eqdf2>
10009c28:	103f5a1e 	bne	r2,zero,10009994 <__alt_data_end+0xf8009994>
10009c2c:	ad40004c 	andi	r21,r21,1
10009c30:	a83f5826 	beq	r21,zero,10009994 <__alt_data_end+0xf8009994>
10009c34:	bd3fffc3 	ldbu	r20,-1(r23)
10009c38:	b8bfffc4 	addi	r2,r23,-1
10009c3c:	1007883a 	mov	r3,r2
10009c40:	01400e44 	movi	r5,57
10009c44:	d9800717 	ldw	r6,28(sp)
10009c48:	00000506 	br	10009c60 <_dtoa_r+0x974>
10009c4c:	18ffffc4 	addi	r3,r3,-1
10009c50:	11824726 	beq	r2,r6,1000a570 <_dtoa_r+0x1284>
10009c54:	1d000003 	ldbu	r20,0(r3)
10009c58:	102f883a 	mov	r23,r2
10009c5c:	10bfffc4 	addi	r2,r2,-1
10009c60:	a1003fcc 	andi	r4,r20,255
10009c64:	2100201c 	xori	r4,r4,128
10009c68:	213fe004 	addi	r4,r4,-128
10009c6c:	217ff726 	beq	r4,r5,10009c4c <__alt_data_end+0xf8009c4c>
10009c70:	a2000044 	addi	r8,r20,1
10009c74:	12000005 	stb	r8,0(r2)
10009c78:	003f4606 	br	10009994 <__alt_data_end+0xf8009994>
10009c7c:	d9000b17 	ldw	r4,44(sp)
10009c80:	2000c826 	beq	r4,zero,10009fa4 <_dtoa_r+0xcb8>
10009c84:	d9800317 	ldw	r6,12(sp)
10009c88:	00c00044 	movi	r3,1
10009c8c:	1980f90e 	bge	r3,r6,1000a074 <_dtoa_r+0xd88>
10009c90:	d8800617 	ldw	r2,24(sp)
10009c94:	d8c00a17 	ldw	r3,40(sp)
10009c98:	157fffc4 	addi	r21,r2,-1
10009c9c:	1d41f316 	blt	r3,r21,1000a46c <_dtoa_r+0x1180>
10009ca0:	1d6bc83a 	sub	r21,r3,r21
10009ca4:	d9c00617 	ldw	r7,24(sp)
10009ca8:	3802aa16 	blt	r7,zero,1000a754 <_dtoa_r+0x1468>
10009cac:	dd000817 	ldw	r20,32(sp)
10009cb0:	d8800617 	ldw	r2,24(sp)
10009cb4:	d8c00817 	ldw	r3,32(sp)
10009cb8:	01400044 	movi	r5,1
10009cbc:	e009883a 	mov	r4,fp
10009cc0:	1887883a 	add	r3,r3,r2
10009cc4:	d8c00815 	stw	r3,32(sp)
10009cc8:	b0ad883a 	add	r22,r22,r2
10009ccc:	000cdd80 	call	1000cdd8 <__i2b>
10009cd0:	1023883a 	mov	r17,r2
10009cd4:	a0000826 	beq	r20,zero,10009cf8 <_dtoa_r+0xa0c>
10009cd8:	0580070e 	bge	zero,r22,10009cf8 <_dtoa_r+0xa0c>
10009cdc:	a005883a 	mov	r2,r20
10009ce0:	b500b916 	blt	r22,r20,10009fc8 <_dtoa_r+0xcdc>
10009ce4:	d9000817 	ldw	r4,32(sp)
10009ce8:	a0a9c83a 	sub	r20,r20,r2
10009cec:	b0adc83a 	sub	r22,r22,r2
10009cf0:	2089c83a 	sub	r4,r4,r2
10009cf4:	d9000815 	stw	r4,32(sp)
10009cf8:	d9800a17 	ldw	r6,40(sp)
10009cfc:	0181810e 	bge	zero,r6,1000a304 <_dtoa_r+0x1018>
10009d00:	d9c00b17 	ldw	r7,44(sp)
10009d04:	3800b326 	beq	r7,zero,10009fd4 <_dtoa_r+0xce8>
10009d08:	a800b226 	beq	r21,zero,10009fd4 <_dtoa_r+0xce8>
10009d0c:	880b883a 	mov	r5,r17
10009d10:	a80d883a 	mov	r6,r21
10009d14:	e009883a 	mov	r4,fp
10009d18:	000d0a00 	call	1000d0a0 <__pow5mult>
10009d1c:	d9800917 	ldw	r6,36(sp)
10009d20:	100b883a 	mov	r5,r2
10009d24:	e009883a 	mov	r4,fp
10009d28:	1023883a 	mov	r17,r2
10009d2c:	000ce140 	call	1000ce14 <__multiply>
10009d30:	1021883a 	mov	r16,r2
10009d34:	d8800a17 	ldw	r2,40(sp)
10009d38:	d9400917 	ldw	r5,36(sp)
10009d3c:	e009883a 	mov	r4,fp
10009d40:	1545c83a 	sub	r2,r2,r21
10009d44:	d8800a15 	stw	r2,40(sp)
10009d48:	000ca4c0 	call	1000ca4c <_Bfree>
10009d4c:	d8c00a17 	ldw	r3,40(sp)
10009d50:	18009f1e 	bne	r3,zero,10009fd0 <_dtoa_r+0xce4>
10009d54:	05c00044 	movi	r23,1
10009d58:	e009883a 	mov	r4,fp
10009d5c:	b80b883a 	mov	r5,r23
10009d60:	000cdd80 	call	1000cdd8 <__i2b>
10009d64:	d9000d17 	ldw	r4,52(sp)
10009d68:	102b883a 	mov	r21,r2
10009d6c:	2000ce26 	beq	r4,zero,1000a0a8 <_dtoa_r+0xdbc>
10009d70:	200d883a 	mov	r6,r4
10009d74:	100b883a 	mov	r5,r2
10009d78:	e009883a 	mov	r4,fp
10009d7c:	000d0a00 	call	1000d0a0 <__pow5mult>
10009d80:	d9800317 	ldw	r6,12(sp)
10009d84:	102b883a 	mov	r21,r2
10009d88:	b981810e 	bge	r23,r6,1000a390 <_dtoa_r+0x10a4>
10009d8c:	0027883a 	mov	r19,zero
10009d90:	a8800417 	ldw	r2,16(r21)
10009d94:	05c00804 	movi	r23,32
10009d98:	10800104 	addi	r2,r2,4
10009d9c:	1085883a 	add	r2,r2,r2
10009da0:	1085883a 	add	r2,r2,r2
10009da4:	a885883a 	add	r2,r21,r2
10009da8:	11000017 	ldw	r4,0(r2)
10009dac:	000ccc00 	call	1000ccc0 <__hi0bits>
10009db0:	b885c83a 	sub	r2,r23,r2
10009db4:	1585883a 	add	r2,r2,r22
10009db8:	108007cc 	andi	r2,r2,31
10009dbc:	1000b326 	beq	r2,zero,1000a08c <_dtoa_r+0xda0>
10009dc0:	00c00804 	movi	r3,32
10009dc4:	1887c83a 	sub	r3,r3,r2
10009dc8:	01000104 	movi	r4,4
10009dcc:	20c2cd0e 	bge	r4,r3,1000a904 <_dtoa_r+0x1618>
10009dd0:	00c00704 	movi	r3,28
10009dd4:	1885c83a 	sub	r2,r3,r2
10009dd8:	d8c00817 	ldw	r3,32(sp)
10009ddc:	a0a9883a 	add	r20,r20,r2
10009de0:	b0ad883a 	add	r22,r22,r2
10009de4:	1887883a 	add	r3,r3,r2
10009de8:	d8c00815 	stw	r3,32(sp)
10009dec:	d9800817 	ldw	r6,32(sp)
10009df0:	0180040e 	bge	zero,r6,10009e04 <_dtoa_r+0xb18>
10009df4:	800b883a 	mov	r5,r16
10009df8:	e009883a 	mov	r4,fp
10009dfc:	000d1e00 	call	1000d1e0 <__lshift>
10009e00:	1021883a 	mov	r16,r2
10009e04:	0580050e 	bge	zero,r22,10009e1c <_dtoa_r+0xb30>
10009e08:	a80b883a 	mov	r5,r21
10009e0c:	b00d883a 	mov	r6,r22
10009e10:	e009883a 	mov	r4,fp
10009e14:	000d1e00 	call	1000d1e0 <__lshift>
10009e18:	102b883a 	mov	r21,r2
10009e1c:	d9c00e17 	ldw	r7,56(sp)
10009e20:	3801211e 	bne	r7,zero,1000a2a8 <_dtoa_r+0xfbc>
10009e24:	d9800617 	ldw	r6,24(sp)
10009e28:	0181380e 	bge	zero,r6,1000a30c <_dtoa_r+0x1020>
10009e2c:	d8c00b17 	ldw	r3,44(sp)
10009e30:	1800ab1e 	bne	r3,zero,1000a0e0 <_dtoa_r+0xdf4>
10009e34:	dc800717 	ldw	r18,28(sp)
10009e38:	dcc00617 	ldw	r19,24(sp)
10009e3c:	9029883a 	mov	r20,r18
10009e40:	00000206 	br	10009e4c <_dtoa_r+0xb60>
10009e44:	000ca740 	call	1000ca74 <__multadd>
10009e48:	1021883a 	mov	r16,r2
10009e4c:	a80b883a 	mov	r5,r21
10009e50:	8009883a 	mov	r4,r16
10009e54:	00090c40 	call	100090c4 <quorem>
10009e58:	10800c04 	addi	r2,r2,48
10009e5c:	90800005 	stb	r2,0(r18)
10009e60:	94800044 	addi	r18,r18,1
10009e64:	9507c83a 	sub	r3,r18,r20
10009e68:	000f883a 	mov	r7,zero
10009e6c:	01800284 	movi	r6,10
10009e70:	800b883a 	mov	r5,r16
10009e74:	e009883a 	mov	r4,fp
10009e78:	1cfff216 	blt	r3,r19,10009e44 <__alt_data_end+0xf8009e44>
10009e7c:	1011883a 	mov	r8,r2
10009e80:	d8800617 	ldw	r2,24(sp)
10009e84:	0082370e 	bge	zero,r2,1000a764 <_dtoa_r+0x1478>
10009e88:	d9000717 	ldw	r4,28(sp)
10009e8c:	0025883a 	mov	r18,zero
10009e90:	20af883a 	add	r23,r4,r2
10009e94:	01800044 	movi	r6,1
10009e98:	800b883a 	mov	r5,r16
10009e9c:	e009883a 	mov	r4,fp
10009ea0:	da001715 	stw	r8,92(sp)
10009ea4:	000d1e00 	call	1000d1e0 <__lshift>
10009ea8:	a80b883a 	mov	r5,r21
10009eac:	1009883a 	mov	r4,r2
10009eb0:	d8800915 	stw	r2,36(sp)
10009eb4:	000d3280 	call	1000d328 <__mcmp>
10009eb8:	da001717 	ldw	r8,92(sp)
10009ebc:	0081800e 	bge	zero,r2,1000a4c0 <_dtoa_r+0x11d4>
10009ec0:	b93fffc3 	ldbu	r4,-1(r23)
10009ec4:	b8bfffc4 	addi	r2,r23,-1
10009ec8:	1007883a 	mov	r3,r2
10009ecc:	01800e44 	movi	r6,57
10009ed0:	d9c00717 	ldw	r7,28(sp)
10009ed4:	00000506 	br	10009eec <_dtoa_r+0xc00>
10009ed8:	18ffffc4 	addi	r3,r3,-1
10009edc:	11c12326 	beq	r2,r7,1000a36c <_dtoa_r+0x1080>
10009ee0:	19000003 	ldbu	r4,0(r3)
10009ee4:	102f883a 	mov	r23,r2
10009ee8:	10bfffc4 	addi	r2,r2,-1
10009eec:	21403fcc 	andi	r5,r4,255
10009ef0:	2940201c 	xori	r5,r5,128
10009ef4:	297fe004 	addi	r5,r5,-128
10009ef8:	29bff726 	beq	r5,r6,10009ed8 <__alt_data_end+0xf8009ed8>
10009efc:	21000044 	addi	r4,r4,1
10009f00:	11000005 	stb	r4,0(r2)
10009f04:	a80b883a 	mov	r5,r21
10009f08:	e009883a 	mov	r4,fp
10009f0c:	000ca4c0 	call	1000ca4c <_Bfree>
10009f10:	883ea026 	beq	r17,zero,10009994 <__alt_data_end+0xf8009994>
10009f14:	90000426 	beq	r18,zero,10009f28 <_dtoa_r+0xc3c>
10009f18:	94400326 	beq	r18,r17,10009f28 <_dtoa_r+0xc3c>
10009f1c:	900b883a 	mov	r5,r18
10009f20:	e009883a 	mov	r4,fp
10009f24:	000ca4c0 	call	1000ca4c <_Bfree>
10009f28:	880b883a 	mov	r5,r17
10009f2c:	e009883a 	mov	r4,fp
10009f30:	000ca4c0 	call	1000ca4c <_Bfree>
10009f34:	003e9706 	br	10009994 <__alt_data_end+0xf8009994>
10009f38:	01800044 	movi	r6,1
10009f3c:	d9800e15 	stw	r6,56(sp)
10009f40:	003d9606 	br	1000959c <__alt_data_end+0xf800959c>
10009f44:	d8800817 	ldw	r2,32(sp)
10009f48:	d8c00517 	ldw	r3,20(sp)
10009f4c:	d8000d15 	stw	zero,52(sp)
10009f50:	10c5c83a 	sub	r2,r2,r3
10009f54:	00c9c83a 	sub	r4,zero,r3
10009f58:	d8800815 	stw	r2,32(sp)
10009f5c:	d9000a15 	stw	r4,40(sp)
10009f60:	003d9706 	br	100095c0 <__alt_data_end+0xf80095c0>
10009f64:	05adc83a 	sub	r22,zero,r22
10009f68:	dd800815 	stw	r22,32(sp)
10009f6c:	002d883a 	mov	r22,zero
10009f70:	003d8e06 	br	100095ac <__alt_data_end+0xf80095ac>
10009f74:	d9000517 	ldw	r4,20(sp)
10009f78:	00135600 	call	10013560 <__floatsidf>
10009f7c:	100d883a 	mov	r6,r2
10009f80:	180f883a 	mov	r7,r3
10009f84:	a009883a 	mov	r4,r20
10009f88:	880b883a 	mov	r5,r17
10009f8c:	00121200 	call	10012120 <__eqdf2>
10009f90:	103d7126 	beq	r2,zero,10009558 <__alt_data_end+0xf8009558>
10009f94:	d9c00517 	ldw	r7,20(sp)
10009f98:	39ffffc4 	addi	r7,r7,-1
10009f9c:	d9c00515 	stw	r7,20(sp)
10009fa0:	003d6d06 	br	10009558 <__alt_data_end+0xf8009558>
10009fa4:	dd400a17 	ldw	r21,40(sp)
10009fa8:	dd000817 	ldw	r20,32(sp)
10009fac:	0023883a 	mov	r17,zero
10009fb0:	003f4806 	br	10009cd4 <__alt_data_end+0xf8009cd4>
10009fb4:	10e3c83a 	sub	r17,r2,r3
10009fb8:	9448983a 	sll	r4,r18,r17
10009fbc:	003d3206 	br	10009488 <__alt_data_end+0xf8009488>
10009fc0:	d8000e15 	stw	zero,56(sp)
10009fc4:	003d7506 	br	1000959c <__alt_data_end+0xf800959c>
10009fc8:	b005883a 	mov	r2,r22
10009fcc:	003f4506 	br	10009ce4 <__alt_data_end+0xf8009ce4>
10009fd0:	dc000915 	stw	r16,36(sp)
10009fd4:	d9800a17 	ldw	r6,40(sp)
10009fd8:	d9400917 	ldw	r5,36(sp)
10009fdc:	e009883a 	mov	r4,fp
10009fe0:	000d0a00 	call	1000d0a0 <__pow5mult>
10009fe4:	1021883a 	mov	r16,r2
10009fe8:	003f5a06 	br	10009d54 <__alt_data_end+0xf8009d54>
10009fec:	01c00044 	movi	r7,1
10009ff0:	d9c00b15 	stw	r7,44(sp)
10009ff4:	d8802217 	ldw	r2,136(sp)
10009ff8:	0081280e 	bge	zero,r2,1000a49c <_dtoa_r+0x11b0>
10009ffc:	100d883a 	mov	r6,r2
1000a000:	1021883a 	mov	r16,r2
1000a004:	d8800c15 	stw	r2,48(sp)
1000a008:	d8800615 	stw	r2,24(sp)
1000a00c:	003d8806 	br	10009630 <__alt_data_end+0xf8009630>
1000a010:	d8800617 	ldw	r2,24(sp)
1000a014:	00be9b16 	blt	zero,r2,10009a84 <__alt_data_end+0xf8009a84>
1000a018:	10010f1e 	bne	r2,zero,1000a458 <_dtoa_r+0x116c>
1000a01c:	880b883a 	mov	r5,r17
1000a020:	000d883a 	mov	r6,zero
1000a024:	01d00534 	movhi	r7,16404
1000a028:	8009883a 	mov	r4,r16
1000a02c:	00123780 	call	10012378 <__muldf3>
1000a030:	900d883a 	mov	r6,r18
1000a034:	980f883a 	mov	r7,r19
1000a038:	1009883a 	mov	r4,r2
1000a03c:	180b883a 	mov	r5,r3
1000a040:	00121a80 	call	100121a8 <__gedf2>
1000a044:	002b883a 	mov	r21,zero
1000a048:	0023883a 	mov	r17,zero
1000a04c:	1000bf16 	blt	r2,zero,1000a34c <_dtoa_r+0x1060>
1000a050:	d9802217 	ldw	r6,136(sp)
1000a054:	ddc00717 	ldw	r23,28(sp)
1000a058:	018c303a 	nor	r6,zero,r6
1000a05c:	d9800515 	stw	r6,20(sp)
1000a060:	a80b883a 	mov	r5,r21
1000a064:	e009883a 	mov	r4,fp
1000a068:	000ca4c0 	call	1000ca4c <_Bfree>
1000a06c:	883e4926 	beq	r17,zero,10009994 <__alt_data_end+0xf8009994>
1000a070:	003fad06 	br	10009f28 <__alt_data_end+0xf8009f28>
1000a074:	d9c01117 	ldw	r7,68(sp)
1000a078:	3801bc26 	beq	r7,zero,1000a76c <_dtoa_r+0x1480>
1000a07c:	10810cc4 	addi	r2,r2,1075
1000a080:	dd400a17 	ldw	r21,40(sp)
1000a084:	dd000817 	ldw	r20,32(sp)
1000a088:	003f0a06 	br	10009cb4 <__alt_data_end+0xf8009cb4>
1000a08c:	00800704 	movi	r2,28
1000a090:	d9000817 	ldw	r4,32(sp)
1000a094:	a0a9883a 	add	r20,r20,r2
1000a098:	b0ad883a 	add	r22,r22,r2
1000a09c:	2089883a 	add	r4,r4,r2
1000a0a0:	d9000815 	stw	r4,32(sp)
1000a0a4:	003f5106 	br	10009dec <__alt_data_end+0xf8009dec>
1000a0a8:	d8c00317 	ldw	r3,12(sp)
1000a0ac:	b8c1fc0e 	bge	r23,r3,1000a8a0 <_dtoa_r+0x15b4>
1000a0b0:	0027883a 	mov	r19,zero
1000a0b4:	b805883a 	mov	r2,r23
1000a0b8:	003f3e06 	br	10009db4 <__alt_data_end+0xf8009db4>
1000a0bc:	880b883a 	mov	r5,r17
1000a0c0:	e009883a 	mov	r4,fp
1000a0c4:	000f883a 	mov	r7,zero
1000a0c8:	01800284 	movi	r6,10
1000a0cc:	000ca740 	call	1000ca74 <__multadd>
1000a0d0:	d9000c17 	ldw	r4,48(sp)
1000a0d4:	1023883a 	mov	r17,r2
1000a0d8:	0102040e 	bge	zero,r4,1000a8ec <_dtoa_r+0x1600>
1000a0dc:	d9000615 	stw	r4,24(sp)
1000a0e0:	0500050e 	bge	zero,r20,1000a0f8 <_dtoa_r+0xe0c>
1000a0e4:	880b883a 	mov	r5,r17
1000a0e8:	a00d883a 	mov	r6,r20
1000a0ec:	e009883a 	mov	r4,fp
1000a0f0:	000d1e00 	call	1000d1e0 <__lshift>
1000a0f4:	1023883a 	mov	r17,r2
1000a0f8:	9801241e 	bne	r19,zero,1000a58c <_dtoa_r+0x12a0>
1000a0fc:	8829883a 	mov	r20,r17
1000a100:	d9000617 	ldw	r4,24(sp)
1000a104:	dcc00717 	ldw	r19,28(sp)
1000a108:	9480004c 	andi	r18,r18,1
1000a10c:	20bfffc4 	addi	r2,r4,-1
1000a110:	9885883a 	add	r2,r19,r2
1000a114:	d8800415 	stw	r2,16(sp)
1000a118:	dc800615 	stw	r18,24(sp)
1000a11c:	a80b883a 	mov	r5,r21
1000a120:	8009883a 	mov	r4,r16
1000a124:	00090c40 	call	100090c4 <quorem>
1000a128:	880b883a 	mov	r5,r17
1000a12c:	8009883a 	mov	r4,r16
1000a130:	102f883a 	mov	r23,r2
1000a134:	000d3280 	call	1000d328 <__mcmp>
1000a138:	a80b883a 	mov	r5,r21
1000a13c:	a00d883a 	mov	r6,r20
1000a140:	e009883a 	mov	r4,fp
1000a144:	102d883a 	mov	r22,r2
1000a148:	000d3880 	call	1000d388 <__mdiff>
1000a14c:	1007883a 	mov	r3,r2
1000a150:	10800317 	ldw	r2,12(r2)
1000a154:	bc800c04 	addi	r18,r23,48
1000a158:	180b883a 	mov	r5,r3
1000a15c:	10004e1e 	bne	r2,zero,1000a298 <_dtoa_r+0xfac>
1000a160:	8009883a 	mov	r4,r16
1000a164:	d8c01615 	stw	r3,88(sp)
1000a168:	000d3280 	call	1000d328 <__mcmp>
1000a16c:	d8c01617 	ldw	r3,88(sp)
1000a170:	e009883a 	mov	r4,fp
1000a174:	d8801615 	stw	r2,88(sp)
1000a178:	180b883a 	mov	r5,r3
1000a17c:	000ca4c0 	call	1000ca4c <_Bfree>
1000a180:	d8801617 	ldw	r2,88(sp)
1000a184:	1000041e 	bne	r2,zero,1000a198 <_dtoa_r+0xeac>
1000a188:	d9800317 	ldw	r6,12(sp)
1000a18c:	3000021e 	bne	r6,zero,1000a198 <_dtoa_r+0xeac>
1000a190:	d8c00617 	ldw	r3,24(sp)
1000a194:	18003726 	beq	r3,zero,1000a274 <_dtoa_r+0xf88>
1000a198:	b0002016 	blt	r22,zero,1000a21c <_dtoa_r+0xf30>
1000a19c:	b000041e 	bne	r22,zero,1000a1b0 <_dtoa_r+0xec4>
1000a1a0:	d9000317 	ldw	r4,12(sp)
1000a1a4:	2000021e 	bne	r4,zero,1000a1b0 <_dtoa_r+0xec4>
1000a1a8:	d8c00617 	ldw	r3,24(sp)
1000a1ac:	18001b26 	beq	r3,zero,1000a21c <_dtoa_r+0xf30>
1000a1b0:	00810716 	blt	zero,r2,1000a5d0 <_dtoa_r+0x12e4>
1000a1b4:	d8c00417 	ldw	r3,16(sp)
1000a1b8:	9d800044 	addi	r22,r19,1
1000a1bc:	9c800005 	stb	r18,0(r19)
1000a1c0:	b02f883a 	mov	r23,r22
1000a1c4:	98c10626 	beq	r19,r3,1000a5e0 <_dtoa_r+0x12f4>
1000a1c8:	800b883a 	mov	r5,r16
1000a1cc:	000f883a 	mov	r7,zero
1000a1d0:	01800284 	movi	r6,10
1000a1d4:	e009883a 	mov	r4,fp
1000a1d8:	000ca740 	call	1000ca74 <__multadd>
1000a1dc:	1021883a 	mov	r16,r2
1000a1e0:	000f883a 	mov	r7,zero
1000a1e4:	01800284 	movi	r6,10
1000a1e8:	880b883a 	mov	r5,r17
1000a1ec:	e009883a 	mov	r4,fp
1000a1f0:	8d002526 	beq	r17,r20,1000a288 <_dtoa_r+0xf9c>
1000a1f4:	000ca740 	call	1000ca74 <__multadd>
1000a1f8:	a00b883a 	mov	r5,r20
1000a1fc:	000f883a 	mov	r7,zero
1000a200:	01800284 	movi	r6,10
1000a204:	e009883a 	mov	r4,fp
1000a208:	1023883a 	mov	r17,r2
1000a20c:	000ca740 	call	1000ca74 <__multadd>
1000a210:	1029883a 	mov	r20,r2
1000a214:	b027883a 	mov	r19,r22
1000a218:	003fc006 	br	1000a11c <__alt_data_end+0xf800a11c>
1000a21c:	9011883a 	mov	r8,r18
1000a220:	00800e0e 	bge	zero,r2,1000a25c <_dtoa_r+0xf70>
1000a224:	800b883a 	mov	r5,r16
1000a228:	01800044 	movi	r6,1
1000a22c:	e009883a 	mov	r4,fp
1000a230:	da001715 	stw	r8,92(sp)
1000a234:	000d1e00 	call	1000d1e0 <__lshift>
1000a238:	a80b883a 	mov	r5,r21
1000a23c:	1009883a 	mov	r4,r2
1000a240:	1021883a 	mov	r16,r2
1000a244:	000d3280 	call	1000d328 <__mcmp>
1000a248:	da001717 	ldw	r8,92(sp)
1000a24c:	0081960e 	bge	zero,r2,1000a8a8 <_dtoa_r+0x15bc>
1000a250:	00800e44 	movi	r2,57
1000a254:	40817026 	beq	r8,r2,1000a818 <_dtoa_r+0x152c>
1000a258:	ba000c44 	addi	r8,r23,49
1000a25c:	8825883a 	mov	r18,r17
1000a260:	9dc00044 	addi	r23,r19,1
1000a264:	9a000005 	stb	r8,0(r19)
1000a268:	a023883a 	mov	r17,r20
1000a26c:	dc000915 	stw	r16,36(sp)
1000a270:	003f2406 	br	10009f04 <__alt_data_end+0xf8009f04>
1000a274:	00800e44 	movi	r2,57
1000a278:	9011883a 	mov	r8,r18
1000a27c:	90816626 	beq	r18,r2,1000a818 <_dtoa_r+0x152c>
1000a280:	05bff516 	blt	zero,r22,1000a258 <__alt_data_end+0xf800a258>
1000a284:	003ff506 	br	1000a25c <__alt_data_end+0xf800a25c>
1000a288:	000ca740 	call	1000ca74 <__multadd>
1000a28c:	1023883a 	mov	r17,r2
1000a290:	1029883a 	mov	r20,r2
1000a294:	003fdf06 	br	1000a214 <__alt_data_end+0xf800a214>
1000a298:	e009883a 	mov	r4,fp
1000a29c:	000ca4c0 	call	1000ca4c <_Bfree>
1000a2a0:	00800044 	movi	r2,1
1000a2a4:	003fbc06 	br	1000a198 <__alt_data_end+0xf800a198>
1000a2a8:	a80b883a 	mov	r5,r21
1000a2ac:	8009883a 	mov	r4,r16
1000a2b0:	000d3280 	call	1000d328 <__mcmp>
1000a2b4:	103edb0e 	bge	r2,zero,10009e24 <__alt_data_end+0xf8009e24>
1000a2b8:	800b883a 	mov	r5,r16
1000a2bc:	000f883a 	mov	r7,zero
1000a2c0:	01800284 	movi	r6,10
1000a2c4:	e009883a 	mov	r4,fp
1000a2c8:	000ca740 	call	1000ca74 <__multadd>
1000a2cc:	1021883a 	mov	r16,r2
1000a2d0:	d8800517 	ldw	r2,20(sp)
1000a2d4:	d8c00b17 	ldw	r3,44(sp)
1000a2d8:	10bfffc4 	addi	r2,r2,-1
1000a2dc:	d8800515 	stw	r2,20(sp)
1000a2e0:	183f761e 	bne	r3,zero,1000a0bc <__alt_data_end+0xf800a0bc>
1000a2e4:	d9000c17 	ldw	r4,48(sp)
1000a2e8:	0101730e 	bge	zero,r4,1000a8b8 <_dtoa_r+0x15cc>
1000a2ec:	d9000615 	stw	r4,24(sp)
1000a2f0:	003ed006 	br	10009e34 <__alt_data_end+0xf8009e34>
1000a2f4:	00800084 	movi	r2,2
1000a2f8:	3081861e 	bne	r6,r2,1000a914 <_dtoa_r+0x1628>
1000a2fc:	d8000b15 	stw	zero,44(sp)
1000a300:	003f3c06 	br	10009ff4 <__alt_data_end+0xf8009ff4>
1000a304:	dc000917 	ldw	r16,36(sp)
1000a308:	003e9206 	br	10009d54 <__alt_data_end+0xf8009d54>
1000a30c:	d9c00317 	ldw	r7,12(sp)
1000a310:	00800084 	movi	r2,2
1000a314:	11fec50e 	bge	r2,r7,10009e2c <__alt_data_end+0xf8009e2c>
1000a318:	d9000617 	ldw	r4,24(sp)
1000a31c:	20013c1e 	bne	r4,zero,1000a810 <_dtoa_r+0x1524>
1000a320:	a80b883a 	mov	r5,r21
1000a324:	000f883a 	mov	r7,zero
1000a328:	01800144 	movi	r6,5
1000a32c:	e009883a 	mov	r4,fp
1000a330:	000ca740 	call	1000ca74 <__multadd>
1000a334:	100b883a 	mov	r5,r2
1000a338:	8009883a 	mov	r4,r16
1000a33c:	102b883a 	mov	r21,r2
1000a340:	000d3280 	call	1000d328 <__mcmp>
1000a344:	dc000915 	stw	r16,36(sp)
1000a348:	00bf410e 	bge	zero,r2,1000a050 <__alt_data_end+0xf800a050>
1000a34c:	d9c00717 	ldw	r7,28(sp)
1000a350:	00800c44 	movi	r2,49
1000a354:	38800005 	stb	r2,0(r7)
1000a358:	d8800517 	ldw	r2,20(sp)
1000a35c:	3dc00044 	addi	r23,r7,1
1000a360:	10800044 	addi	r2,r2,1
1000a364:	d8800515 	stw	r2,20(sp)
1000a368:	003f3d06 	br	1000a060 <__alt_data_end+0xf800a060>
1000a36c:	d9800517 	ldw	r6,20(sp)
1000a370:	d9c00717 	ldw	r7,28(sp)
1000a374:	00800c44 	movi	r2,49
1000a378:	31800044 	addi	r6,r6,1
1000a37c:	d9800515 	stw	r6,20(sp)
1000a380:	38800005 	stb	r2,0(r7)
1000a384:	003edf06 	br	10009f04 <__alt_data_end+0xf8009f04>
1000a388:	d8000b15 	stw	zero,44(sp)
1000a38c:	003c9f06 	br	1000960c <__alt_data_end+0xf800960c>
1000a390:	903e7e1e 	bne	r18,zero,10009d8c <__alt_data_end+0xf8009d8c>
1000a394:	00800434 	movhi	r2,16
1000a398:	10bfffc4 	addi	r2,r2,-1
1000a39c:	9884703a 	and	r2,r19,r2
1000a3a0:	1000ea1e 	bne	r2,zero,1000a74c <_dtoa_r+0x1460>
1000a3a4:	9cdffc2c 	andhi	r19,r19,32752
1000a3a8:	9800e826 	beq	r19,zero,1000a74c <_dtoa_r+0x1460>
1000a3ac:	d9c00817 	ldw	r7,32(sp)
1000a3b0:	b5800044 	addi	r22,r22,1
1000a3b4:	04c00044 	movi	r19,1
1000a3b8:	39c00044 	addi	r7,r7,1
1000a3bc:	d9c00815 	stw	r7,32(sp)
1000a3c0:	d8800d17 	ldw	r2,52(sp)
1000a3c4:	103e721e 	bne	r2,zero,10009d90 <__alt_data_end+0xf8009d90>
1000a3c8:	00800044 	movi	r2,1
1000a3cc:	003e7906 	br	10009db4 <__alt_data_end+0xf8009db4>
1000a3d0:	8009883a 	mov	r4,r16
1000a3d4:	00135600 	call	10013560 <__floatsidf>
1000a3d8:	d9800f17 	ldw	r6,60(sp)
1000a3dc:	d9c01017 	ldw	r7,64(sp)
1000a3e0:	1009883a 	mov	r4,r2
1000a3e4:	180b883a 	mov	r5,r3
1000a3e8:	00123780 	call	10012378 <__muldf3>
1000a3ec:	000d883a 	mov	r6,zero
1000a3f0:	01d00734 	movhi	r7,16412
1000a3f4:	1009883a 	mov	r4,r2
1000a3f8:	180b883a 	mov	r5,r3
1000a3fc:	0010ea40 	call	10010ea4 <__adddf3>
1000a400:	047f3034 	movhi	r17,64704
1000a404:	1021883a 	mov	r16,r2
1000a408:	1c63883a 	add	r17,r3,r17
1000a40c:	d9000f17 	ldw	r4,60(sp)
1000a410:	d9401017 	ldw	r5,64(sp)
1000a414:	000d883a 	mov	r6,zero
1000a418:	01d00534 	movhi	r7,16404
1000a41c:	0012be40 	call	10012be4 <__subdf3>
1000a420:	800d883a 	mov	r6,r16
1000a424:	880f883a 	mov	r7,r17
1000a428:	1009883a 	mov	r4,r2
1000a42c:	180b883a 	mov	r5,r3
1000a430:	102b883a 	mov	r21,r2
1000a434:	1829883a 	mov	r20,r3
1000a438:	00121a80 	call	100121a8 <__gedf2>
1000a43c:	00806c16 	blt	zero,r2,1000a5f0 <_dtoa_r+0x1304>
1000a440:	89e0003c 	xorhi	r7,r17,32768
1000a444:	800d883a 	mov	r6,r16
1000a448:	a809883a 	mov	r4,r21
1000a44c:	a00b883a 	mov	r5,r20
1000a450:	00122840 	call	10012284 <__ledf2>
1000a454:	103d7e0e 	bge	r2,zero,10009a50 <__alt_data_end+0xf8009a50>
1000a458:	002b883a 	mov	r21,zero
1000a45c:	0023883a 	mov	r17,zero
1000a460:	003efb06 	br	1000a050 <__alt_data_end+0xf800a050>
1000a464:	d8800717 	ldw	r2,28(sp)
1000a468:	003bd006 	br	100093ac <__alt_data_end+0xf80093ac>
1000a46c:	d9000a17 	ldw	r4,40(sp)
1000a470:	d9800d17 	ldw	r6,52(sp)
1000a474:	dd400a15 	stw	r21,40(sp)
1000a478:	a905c83a 	sub	r2,r21,r4
1000a47c:	308d883a 	add	r6,r6,r2
1000a480:	d9800d15 	stw	r6,52(sp)
1000a484:	002b883a 	mov	r21,zero
1000a488:	003e0606 	br	10009ca4 <__alt_data_end+0xf8009ca4>
1000a48c:	9023883a 	mov	r17,r18
1000a490:	9829883a 	mov	r20,r19
1000a494:	04000084 	movi	r16,2
1000a498:	003c9206 	br	100096e4 <__alt_data_end+0xf80096e4>
1000a49c:	04000044 	movi	r16,1
1000a4a0:	dc000c15 	stw	r16,48(sp)
1000a4a4:	dc000615 	stw	r16,24(sp)
1000a4a8:	dc002215 	stw	r16,136(sp)
1000a4ac:	e0001115 	stw	zero,68(fp)
1000a4b0:	000b883a 	mov	r5,zero
1000a4b4:	003c6906 	br	1000965c <__alt_data_end+0xf800965c>
1000a4b8:	3021883a 	mov	r16,r6
1000a4bc:	003ffb06 	br	1000a4ac <__alt_data_end+0xf800a4ac>
1000a4c0:	1000021e 	bne	r2,zero,1000a4cc <_dtoa_r+0x11e0>
1000a4c4:	4200004c 	andi	r8,r8,1
1000a4c8:	403e7d1e 	bne	r8,zero,10009ec0 <__alt_data_end+0xf8009ec0>
1000a4cc:	01000c04 	movi	r4,48
1000a4d0:	00000106 	br	1000a4d8 <_dtoa_r+0x11ec>
1000a4d4:	102f883a 	mov	r23,r2
1000a4d8:	b8bfffc4 	addi	r2,r23,-1
1000a4dc:	10c00007 	ldb	r3,0(r2)
1000a4e0:	193ffc26 	beq	r3,r4,1000a4d4 <__alt_data_end+0xf800a4d4>
1000a4e4:	003e8706 	br	10009f04 <__alt_data_end+0xf8009f04>
1000a4e8:	d8800517 	ldw	r2,20(sp)
1000a4ec:	00a3c83a 	sub	r17,zero,r2
1000a4f0:	8800a426 	beq	r17,zero,1000a784 <_dtoa_r+0x1498>
1000a4f4:	888003cc 	andi	r2,r17,15
1000a4f8:	100490fa 	slli	r2,r2,3
1000a4fc:	00c40074 	movhi	r3,4097
1000a500:	18da0804 	addi	r3,r3,26656
1000a504:	1885883a 	add	r2,r3,r2
1000a508:	11800017 	ldw	r6,0(r2)
1000a50c:	11c00117 	ldw	r7,4(r2)
1000a510:	9009883a 	mov	r4,r18
1000a514:	980b883a 	mov	r5,r19
1000a518:	8823d13a 	srai	r17,r17,4
1000a51c:	00123780 	call	10012378 <__muldf3>
1000a520:	d8800f15 	stw	r2,60(sp)
1000a524:	d8c01015 	stw	r3,64(sp)
1000a528:	8800e826 	beq	r17,zero,1000a8cc <_dtoa_r+0x15e0>
1000a52c:	05040074 	movhi	r20,4097
1000a530:	a519fe04 	addi	r20,r20,26616
1000a534:	04000084 	movi	r16,2
1000a538:	8980004c 	andi	r6,r17,1
1000a53c:	1009883a 	mov	r4,r2
1000a540:	8823d07a 	srai	r17,r17,1
1000a544:	180b883a 	mov	r5,r3
1000a548:	30000426 	beq	r6,zero,1000a55c <_dtoa_r+0x1270>
1000a54c:	a1800017 	ldw	r6,0(r20)
1000a550:	a1c00117 	ldw	r7,4(r20)
1000a554:	84000044 	addi	r16,r16,1
1000a558:	00123780 	call	10012378 <__muldf3>
1000a55c:	a5000204 	addi	r20,r20,8
1000a560:	883ff51e 	bne	r17,zero,1000a538 <__alt_data_end+0xf800a538>
1000a564:	d8800f15 	stw	r2,60(sp)
1000a568:	d8c01015 	stw	r3,64(sp)
1000a56c:	003c7606 	br	10009748 <__alt_data_end+0xf8009748>
1000a570:	00c00c04 	movi	r3,48
1000a574:	10c00005 	stb	r3,0(r2)
1000a578:	d8c00517 	ldw	r3,20(sp)
1000a57c:	bd3fffc3 	ldbu	r20,-1(r23)
1000a580:	18c00044 	addi	r3,r3,1
1000a584:	d8c00515 	stw	r3,20(sp)
1000a588:	003db906 	br	10009c70 <__alt_data_end+0xf8009c70>
1000a58c:	89400117 	ldw	r5,4(r17)
1000a590:	e009883a 	mov	r4,fp
1000a594:	000c9a40 	call	1000c9a4 <_Balloc>
1000a598:	89800417 	ldw	r6,16(r17)
1000a59c:	89400304 	addi	r5,r17,12
1000a5a0:	11000304 	addi	r4,r2,12
1000a5a4:	31800084 	addi	r6,r6,2
1000a5a8:	318d883a 	add	r6,r6,r6
1000a5ac:	318d883a 	add	r6,r6,r6
1000a5b0:	1027883a 	mov	r19,r2
1000a5b4:	000c5d80 	call	1000c5d8 <memcpy>
1000a5b8:	01800044 	movi	r6,1
1000a5bc:	980b883a 	mov	r5,r19
1000a5c0:	e009883a 	mov	r4,fp
1000a5c4:	000d1e00 	call	1000d1e0 <__lshift>
1000a5c8:	1029883a 	mov	r20,r2
1000a5cc:	003ecc06 	br	1000a100 <__alt_data_end+0xf800a100>
1000a5d0:	00800e44 	movi	r2,57
1000a5d4:	90809026 	beq	r18,r2,1000a818 <_dtoa_r+0x152c>
1000a5d8:	92000044 	addi	r8,r18,1
1000a5dc:	003f1f06 	br	1000a25c <__alt_data_end+0xf800a25c>
1000a5e0:	9011883a 	mov	r8,r18
1000a5e4:	8825883a 	mov	r18,r17
1000a5e8:	a023883a 	mov	r17,r20
1000a5ec:	003e2906 	br	10009e94 <__alt_data_end+0xf8009e94>
1000a5f0:	002b883a 	mov	r21,zero
1000a5f4:	0023883a 	mov	r17,zero
1000a5f8:	003f5406 	br	1000a34c <__alt_data_end+0xf800a34c>
1000a5fc:	61bfffc4 	addi	r6,r12,-1
1000a600:	300490fa 	slli	r2,r6,3
1000a604:	00c40074 	movhi	r3,4097
1000a608:	18da0804 	addi	r3,r3,26656
1000a60c:	1885883a 	add	r2,r3,r2
1000a610:	11000017 	ldw	r4,0(r2)
1000a614:	11400117 	ldw	r5,4(r2)
1000a618:	d8800717 	ldw	r2,28(sp)
1000a61c:	880f883a 	mov	r7,r17
1000a620:	d9801215 	stw	r6,72(sp)
1000a624:	800d883a 	mov	r6,r16
1000a628:	db001615 	stw	r12,88(sp)
1000a62c:	15c00044 	addi	r23,r2,1
1000a630:	00123780 	call	10012378 <__muldf3>
1000a634:	d9401017 	ldw	r5,64(sp)
1000a638:	d9000f17 	ldw	r4,60(sp)
1000a63c:	d8c01515 	stw	r3,84(sp)
1000a640:	d8801415 	stw	r2,80(sp)
1000a644:	00134e00 	call	100134e0 <__fixdfsi>
1000a648:	1009883a 	mov	r4,r2
1000a64c:	1021883a 	mov	r16,r2
1000a650:	00135600 	call	10013560 <__floatsidf>
1000a654:	d9000f17 	ldw	r4,60(sp)
1000a658:	d9401017 	ldw	r5,64(sp)
1000a65c:	100d883a 	mov	r6,r2
1000a660:	180f883a 	mov	r7,r3
1000a664:	0012be40 	call	10012be4 <__subdf3>
1000a668:	1829883a 	mov	r20,r3
1000a66c:	d8c00717 	ldw	r3,28(sp)
1000a670:	84000c04 	addi	r16,r16,48
1000a674:	1023883a 	mov	r17,r2
1000a678:	1c000005 	stb	r16,0(r3)
1000a67c:	db001617 	ldw	r12,88(sp)
1000a680:	00800044 	movi	r2,1
1000a684:	60802226 	beq	r12,r2,1000a710 <_dtoa_r+0x1424>
1000a688:	d9c00717 	ldw	r7,28(sp)
1000a68c:	8805883a 	mov	r2,r17
1000a690:	b82b883a 	mov	r21,r23
1000a694:	3b19883a 	add	r12,r7,r12
1000a698:	6023883a 	mov	r17,r12
1000a69c:	a007883a 	mov	r3,r20
1000a6a0:	dc800f15 	stw	r18,60(sp)
1000a6a4:	000d883a 	mov	r6,zero
1000a6a8:	01d00934 	movhi	r7,16420
1000a6ac:	1009883a 	mov	r4,r2
1000a6b0:	180b883a 	mov	r5,r3
1000a6b4:	00123780 	call	10012378 <__muldf3>
1000a6b8:	180b883a 	mov	r5,r3
1000a6bc:	1009883a 	mov	r4,r2
1000a6c0:	1829883a 	mov	r20,r3
1000a6c4:	1025883a 	mov	r18,r2
1000a6c8:	00134e00 	call	100134e0 <__fixdfsi>
1000a6cc:	1009883a 	mov	r4,r2
1000a6d0:	1021883a 	mov	r16,r2
1000a6d4:	00135600 	call	10013560 <__floatsidf>
1000a6d8:	100d883a 	mov	r6,r2
1000a6dc:	180f883a 	mov	r7,r3
1000a6e0:	9009883a 	mov	r4,r18
1000a6e4:	a00b883a 	mov	r5,r20
1000a6e8:	84000c04 	addi	r16,r16,48
1000a6ec:	0012be40 	call	10012be4 <__subdf3>
1000a6f0:	ad400044 	addi	r21,r21,1
1000a6f4:	ac3fffc5 	stb	r16,-1(r21)
1000a6f8:	ac7fea1e 	bne	r21,r17,1000a6a4 <__alt_data_end+0xf800a6a4>
1000a6fc:	1023883a 	mov	r17,r2
1000a700:	d8801217 	ldw	r2,72(sp)
1000a704:	dc800f17 	ldw	r18,60(sp)
1000a708:	1829883a 	mov	r20,r3
1000a70c:	b8af883a 	add	r23,r23,r2
1000a710:	d9001417 	ldw	r4,80(sp)
1000a714:	d9401517 	ldw	r5,84(sp)
1000a718:	000d883a 	mov	r6,zero
1000a71c:	01cff834 	movhi	r7,16352
1000a720:	0010ea40 	call	10010ea4 <__adddf3>
1000a724:	880d883a 	mov	r6,r17
1000a728:	a00f883a 	mov	r7,r20
1000a72c:	1009883a 	mov	r4,r2
1000a730:	180b883a 	mov	r5,r3
1000a734:	00122840 	call	10012284 <__ledf2>
1000a738:	10003e0e 	bge	r2,zero,1000a834 <_dtoa_r+0x1548>
1000a73c:	d9001317 	ldw	r4,76(sp)
1000a740:	bd3fffc3 	ldbu	r20,-1(r23)
1000a744:	d9000515 	stw	r4,20(sp)
1000a748:	003d3b06 	br	10009c38 <__alt_data_end+0xf8009c38>
1000a74c:	0027883a 	mov	r19,zero
1000a750:	003f1b06 	br	1000a3c0 <__alt_data_end+0xf800a3c0>
1000a754:	d8800817 	ldw	r2,32(sp)
1000a758:	11e9c83a 	sub	r20,r2,r7
1000a75c:	0005883a 	mov	r2,zero
1000a760:	003d5406 	br	10009cb4 <__alt_data_end+0xf8009cb4>
1000a764:	00800044 	movi	r2,1
1000a768:	003dc706 	br	10009e88 <__alt_data_end+0xf8009e88>
1000a76c:	d8c00217 	ldw	r3,8(sp)
1000a770:	00800d84 	movi	r2,54
1000a774:	dd400a17 	ldw	r21,40(sp)
1000a778:	10c5c83a 	sub	r2,r2,r3
1000a77c:	dd000817 	ldw	r20,32(sp)
1000a780:	003d4c06 	br	10009cb4 <__alt_data_end+0xf8009cb4>
1000a784:	dc800f15 	stw	r18,60(sp)
1000a788:	dcc01015 	stw	r19,64(sp)
1000a78c:	04000084 	movi	r16,2
1000a790:	003bed06 	br	10009748 <__alt_data_end+0xf8009748>
1000a794:	d9000617 	ldw	r4,24(sp)
1000a798:	203f0d26 	beq	r4,zero,1000a3d0 <__alt_data_end+0xf800a3d0>
1000a79c:	d9800c17 	ldw	r6,48(sp)
1000a7a0:	01bcab0e 	bge	zero,r6,10009a50 <__alt_data_end+0xf8009a50>
1000a7a4:	d9401017 	ldw	r5,64(sp)
1000a7a8:	d9000f17 	ldw	r4,60(sp)
1000a7ac:	000d883a 	mov	r6,zero
1000a7b0:	01d00934 	movhi	r7,16420
1000a7b4:	00123780 	call	10012378 <__muldf3>
1000a7b8:	81000044 	addi	r4,r16,1
1000a7bc:	d8800f15 	stw	r2,60(sp)
1000a7c0:	d8c01015 	stw	r3,64(sp)
1000a7c4:	00135600 	call	10013560 <__floatsidf>
1000a7c8:	d9800f17 	ldw	r6,60(sp)
1000a7cc:	d9c01017 	ldw	r7,64(sp)
1000a7d0:	1009883a 	mov	r4,r2
1000a7d4:	180b883a 	mov	r5,r3
1000a7d8:	00123780 	call	10012378 <__muldf3>
1000a7dc:	01d00734 	movhi	r7,16412
1000a7e0:	000d883a 	mov	r6,zero
1000a7e4:	1009883a 	mov	r4,r2
1000a7e8:	180b883a 	mov	r5,r3
1000a7ec:	0010ea40 	call	10010ea4 <__adddf3>
1000a7f0:	d9c00517 	ldw	r7,20(sp)
1000a7f4:	047f3034 	movhi	r17,64704
1000a7f8:	1021883a 	mov	r16,r2
1000a7fc:	39ffffc4 	addi	r7,r7,-1
1000a800:	d9c01315 	stw	r7,76(sp)
1000a804:	1c63883a 	add	r17,r3,r17
1000a808:	db000c17 	ldw	r12,48(sp)
1000a80c:	003bea06 	br	100097b8 <__alt_data_end+0xf80097b8>
1000a810:	dc000915 	stw	r16,36(sp)
1000a814:	003e0e06 	br	1000a050 <__alt_data_end+0xf800a050>
1000a818:	01000e44 	movi	r4,57
1000a81c:	8825883a 	mov	r18,r17
1000a820:	9dc00044 	addi	r23,r19,1
1000a824:	99000005 	stb	r4,0(r19)
1000a828:	a023883a 	mov	r17,r20
1000a82c:	dc000915 	stw	r16,36(sp)
1000a830:	003da406 	br	10009ec4 <__alt_data_end+0xf8009ec4>
1000a834:	d9801417 	ldw	r6,80(sp)
1000a838:	d9c01517 	ldw	r7,84(sp)
1000a83c:	0009883a 	mov	r4,zero
1000a840:	014ff834 	movhi	r5,16352
1000a844:	0012be40 	call	10012be4 <__subdf3>
1000a848:	880d883a 	mov	r6,r17
1000a84c:	a00f883a 	mov	r7,r20
1000a850:	1009883a 	mov	r4,r2
1000a854:	180b883a 	mov	r5,r3
1000a858:	00121a80 	call	100121a8 <__gedf2>
1000a85c:	00bc7c0e 	bge	zero,r2,10009a50 <__alt_data_end+0xf8009a50>
1000a860:	01000c04 	movi	r4,48
1000a864:	00000106 	br	1000a86c <_dtoa_r+0x1580>
1000a868:	102f883a 	mov	r23,r2
1000a86c:	b8bfffc4 	addi	r2,r23,-1
1000a870:	10c00007 	ldb	r3,0(r2)
1000a874:	193ffc26 	beq	r3,r4,1000a868 <__alt_data_end+0xf800a868>
1000a878:	d9801317 	ldw	r6,76(sp)
1000a87c:	d9800515 	stw	r6,20(sp)
1000a880:	003c4406 	br	10009994 <__alt_data_end+0xf8009994>
1000a884:	d9801317 	ldw	r6,76(sp)
1000a888:	d9800515 	stw	r6,20(sp)
1000a88c:	003cea06 	br	10009c38 <__alt_data_end+0xf8009c38>
1000a890:	dd800f17 	ldw	r22,60(sp)
1000a894:	dcc01017 	ldw	r19,64(sp)
1000a898:	dc801217 	ldw	r18,72(sp)
1000a89c:	003c6c06 	br	10009a50 <__alt_data_end+0xf8009a50>
1000a8a0:	903e031e 	bne	r18,zero,1000a0b0 <__alt_data_end+0xf800a0b0>
1000a8a4:	003ebb06 	br	1000a394 <__alt_data_end+0xf800a394>
1000a8a8:	103e6c1e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000a8ac:	4080004c 	andi	r2,r8,1
1000a8b0:	103e6a26 	beq	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000a8b4:	003e6606 	br	1000a250 <__alt_data_end+0xf800a250>
1000a8b8:	d8c00317 	ldw	r3,12(sp)
1000a8bc:	00800084 	movi	r2,2
1000a8c0:	10c02916 	blt	r2,r3,1000a968 <_dtoa_r+0x167c>
1000a8c4:	d9000c17 	ldw	r4,48(sp)
1000a8c8:	003e8806 	br	1000a2ec <__alt_data_end+0xf800a2ec>
1000a8cc:	04000084 	movi	r16,2
1000a8d0:	003b9d06 	br	10009748 <__alt_data_end+0xf8009748>
1000a8d4:	d9001317 	ldw	r4,76(sp)
1000a8d8:	d9000515 	stw	r4,20(sp)
1000a8dc:	003cd606 	br	10009c38 <__alt_data_end+0xf8009c38>
1000a8e0:	d8801317 	ldw	r2,76(sp)
1000a8e4:	d8800515 	stw	r2,20(sp)
1000a8e8:	003c2a06 	br	10009994 <__alt_data_end+0xf8009994>
1000a8ec:	d9800317 	ldw	r6,12(sp)
1000a8f0:	00800084 	movi	r2,2
1000a8f4:	11801516 	blt	r2,r6,1000a94c <_dtoa_r+0x1660>
1000a8f8:	d9c00c17 	ldw	r7,48(sp)
1000a8fc:	d9c00615 	stw	r7,24(sp)
1000a900:	003df706 	br	1000a0e0 <__alt_data_end+0xf800a0e0>
1000a904:	193d3926 	beq	r3,r4,10009dec <__alt_data_end+0xf8009dec>
1000a908:	00c00f04 	movi	r3,60
1000a90c:	1885c83a 	sub	r2,r3,r2
1000a910:	003ddf06 	br	1000a090 <__alt_data_end+0xf800a090>
1000a914:	e009883a 	mov	r4,fp
1000a918:	e0001115 	stw	zero,68(fp)
1000a91c:	000b883a 	mov	r5,zero
1000a920:	000c9a40 	call	1000c9a4 <_Balloc>
1000a924:	d8800715 	stw	r2,28(sp)
1000a928:	d8c00717 	ldw	r3,28(sp)
1000a92c:	00bfffc4 	movi	r2,-1
1000a930:	01000044 	movi	r4,1
1000a934:	d8800c15 	stw	r2,48(sp)
1000a938:	e0c01015 	stw	r3,64(fp)
1000a93c:	d9000b15 	stw	r4,44(sp)
1000a940:	d8800615 	stw	r2,24(sp)
1000a944:	d8002215 	stw	zero,136(sp)
1000a948:	003c4106 	br	10009a50 <__alt_data_end+0xf8009a50>
1000a94c:	d8c00c17 	ldw	r3,48(sp)
1000a950:	d8c00615 	stw	r3,24(sp)
1000a954:	003e7006 	br	1000a318 <__alt_data_end+0xf800a318>
1000a958:	04400044 	movi	r17,1
1000a95c:	003b2006 	br	100095e0 <__alt_data_end+0xf80095e0>
1000a960:	000b883a 	mov	r5,zero
1000a964:	003b3d06 	br	1000965c <__alt_data_end+0xf800965c>
1000a968:	d8800c17 	ldw	r2,48(sp)
1000a96c:	d8800615 	stw	r2,24(sp)
1000a970:	003e6906 	br	1000a318 <__alt_data_end+0xf800a318>

1000a974 <__sflush_r>:
1000a974:	2880030b 	ldhu	r2,12(r5)
1000a978:	defffb04 	addi	sp,sp,-20
1000a97c:	dcc00315 	stw	r19,12(sp)
1000a980:	dc400115 	stw	r17,4(sp)
1000a984:	dfc00415 	stw	ra,16(sp)
1000a988:	dc800215 	stw	r18,8(sp)
1000a98c:	dc000015 	stw	r16,0(sp)
1000a990:	10c0020c 	andi	r3,r2,8
1000a994:	2823883a 	mov	r17,r5
1000a998:	2027883a 	mov	r19,r4
1000a99c:	1800311e 	bne	r3,zero,1000aa64 <__sflush_r+0xf0>
1000a9a0:	28c00117 	ldw	r3,4(r5)
1000a9a4:	10820014 	ori	r2,r2,2048
1000a9a8:	2880030d 	sth	r2,12(r5)
1000a9ac:	00c04b0e 	bge	zero,r3,1000aadc <__sflush_r+0x168>
1000a9b0:	8a000a17 	ldw	r8,40(r17)
1000a9b4:	40002326 	beq	r8,zero,1000aa44 <__sflush_r+0xd0>
1000a9b8:	9c000017 	ldw	r16,0(r19)
1000a9bc:	10c4000c 	andi	r3,r2,4096
1000a9c0:	98000015 	stw	zero,0(r19)
1000a9c4:	18004826 	beq	r3,zero,1000aae8 <__sflush_r+0x174>
1000a9c8:	89801417 	ldw	r6,80(r17)
1000a9cc:	10c0010c 	andi	r3,r2,4
1000a9d0:	18000626 	beq	r3,zero,1000a9ec <__sflush_r+0x78>
1000a9d4:	88c00117 	ldw	r3,4(r17)
1000a9d8:	88800c17 	ldw	r2,48(r17)
1000a9dc:	30cdc83a 	sub	r6,r6,r3
1000a9e0:	10000226 	beq	r2,zero,1000a9ec <__sflush_r+0x78>
1000a9e4:	88800f17 	ldw	r2,60(r17)
1000a9e8:	308dc83a 	sub	r6,r6,r2
1000a9ec:	89400717 	ldw	r5,28(r17)
1000a9f0:	000f883a 	mov	r7,zero
1000a9f4:	9809883a 	mov	r4,r19
1000a9f8:	403ee83a 	callr	r8
1000a9fc:	00ffffc4 	movi	r3,-1
1000aa00:	10c04426 	beq	r2,r3,1000ab14 <__sflush_r+0x1a0>
1000aa04:	88c0030b 	ldhu	r3,12(r17)
1000aa08:	89000417 	ldw	r4,16(r17)
1000aa0c:	88000115 	stw	zero,4(r17)
1000aa10:	197dffcc 	andi	r5,r3,63487
1000aa14:	8940030d 	sth	r5,12(r17)
1000aa18:	89000015 	stw	r4,0(r17)
1000aa1c:	18c4000c 	andi	r3,r3,4096
1000aa20:	18002c1e 	bne	r3,zero,1000aad4 <__sflush_r+0x160>
1000aa24:	89400c17 	ldw	r5,48(r17)
1000aa28:	9c000015 	stw	r16,0(r19)
1000aa2c:	28000526 	beq	r5,zero,1000aa44 <__sflush_r+0xd0>
1000aa30:	88801004 	addi	r2,r17,64
1000aa34:	28800226 	beq	r5,r2,1000aa40 <__sflush_r+0xcc>
1000aa38:	9809883a 	mov	r4,r19
1000aa3c:	000b0f00 	call	1000b0f0 <_free_r>
1000aa40:	88000c15 	stw	zero,48(r17)
1000aa44:	0005883a 	mov	r2,zero
1000aa48:	dfc00417 	ldw	ra,16(sp)
1000aa4c:	dcc00317 	ldw	r19,12(sp)
1000aa50:	dc800217 	ldw	r18,8(sp)
1000aa54:	dc400117 	ldw	r17,4(sp)
1000aa58:	dc000017 	ldw	r16,0(sp)
1000aa5c:	dec00504 	addi	sp,sp,20
1000aa60:	f800283a 	ret
1000aa64:	2c800417 	ldw	r18,16(r5)
1000aa68:	903ff626 	beq	r18,zero,1000aa44 <__alt_data_end+0xf800aa44>
1000aa6c:	2c000017 	ldw	r16,0(r5)
1000aa70:	108000cc 	andi	r2,r2,3
1000aa74:	2c800015 	stw	r18,0(r5)
1000aa78:	84a1c83a 	sub	r16,r16,r18
1000aa7c:	1000131e 	bne	r2,zero,1000aacc <__sflush_r+0x158>
1000aa80:	28800517 	ldw	r2,20(r5)
1000aa84:	88800215 	stw	r2,8(r17)
1000aa88:	04000316 	blt	zero,r16,1000aa98 <__sflush_r+0x124>
1000aa8c:	003fed06 	br	1000aa44 <__alt_data_end+0xf800aa44>
1000aa90:	90a5883a 	add	r18,r18,r2
1000aa94:	043feb0e 	bge	zero,r16,1000aa44 <__alt_data_end+0xf800aa44>
1000aa98:	88800917 	ldw	r2,36(r17)
1000aa9c:	89400717 	ldw	r5,28(r17)
1000aaa0:	800f883a 	mov	r7,r16
1000aaa4:	900d883a 	mov	r6,r18
1000aaa8:	9809883a 	mov	r4,r19
1000aaac:	103ee83a 	callr	r2
1000aab0:	80a1c83a 	sub	r16,r16,r2
1000aab4:	00bff616 	blt	zero,r2,1000aa90 <__alt_data_end+0xf800aa90>
1000aab8:	88c0030b 	ldhu	r3,12(r17)
1000aabc:	00bfffc4 	movi	r2,-1
1000aac0:	18c01014 	ori	r3,r3,64
1000aac4:	88c0030d 	sth	r3,12(r17)
1000aac8:	003fdf06 	br	1000aa48 <__alt_data_end+0xf800aa48>
1000aacc:	0005883a 	mov	r2,zero
1000aad0:	003fec06 	br	1000aa84 <__alt_data_end+0xf800aa84>
1000aad4:	88801415 	stw	r2,80(r17)
1000aad8:	003fd206 	br	1000aa24 <__alt_data_end+0xf800aa24>
1000aadc:	28c00f17 	ldw	r3,60(r5)
1000aae0:	00ffb316 	blt	zero,r3,1000a9b0 <__alt_data_end+0xf800a9b0>
1000aae4:	003fd706 	br	1000aa44 <__alt_data_end+0xf800aa44>
1000aae8:	89400717 	ldw	r5,28(r17)
1000aaec:	000d883a 	mov	r6,zero
1000aaf0:	01c00044 	movi	r7,1
1000aaf4:	9809883a 	mov	r4,r19
1000aaf8:	403ee83a 	callr	r8
1000aafc:	100d883a 	mov	r6,r2
1000ab00:	00bfffc4 	movi	r2,-1
1000ab04:	30801426 	beq	r6,r2,1000ab58 <__sflush_r+0x1e4>
1000ab08:	8880030b 	ldhu	r2,12(r17)
1000ab0c:	8a000a17 	ldw	r8,40(r17)
1000ab10:	003fae06 	br	1000a9cc <__alt_data_end+0xf800a9cc>
1000ab14:	98c00017 	ldw	r3,0(r19)
1000ab18:	183fba26 	beq	r3,zero,1000aa04 <__alt_data_end+0xf800aa04>
1000ab1c:	01000744 	movi	r4,29
1000ab20:	19000626 	beq	r3,r4,1000ab3c <__sflush_r+0x1c8>
1000ab24:	01000584 	movi	r4,22
1000ab28:	19000426 	beq	r3,r4,1000ab3c <__sflush_r+0x1c8>
1000ab2c:	88c0030b 	ldhu	r3,12(r17)
1000ab30:	18c01014 	ori	r3,r3,64
1000ab34:	88c0030d 	sth	r3,12(r17)
1000ab38:	003fc306 	br	1000aa48 <__alt_data_end+0xf800aa48>
1000ab3c:	8880030b 	ldhu	r2,12(r17)
1000ab40:	88c00417 	ldw	r3,16(r17)
1000ab44:	88000115 	stw	zero,4(r17)
1000ab48:	10bdffcc 	andi	r2,r2,63487
1000ab4c:	8880030d 	sth	r2,12(r17)
1000ab50:	88c00015 	stw	r3,0(r17)
1000ab54:	003fb306 	br	1000aa24 <__alt_data_end+0xf800aa24>
1000ab58:	98800017 	ldw	r2,0(r19)
1000ab5c:	103fea26 	beq	r2,zero,1000ab08 <__alt_data_end+0xf800ab08>
1000ab60:	00c00744 	movi	r3,29
1000ab64:	10c00226 	beq	r2,r3,1000ab70 <__sflush_r+0x1fc>
1000ab68:	00c00584 	movi	r3,22
1000ab6c:	10c0031e 	bne	r2,r3,1000ab7c <__sflush_r+0x208>
1000ab70:	9c000015 	stw	r16,0(r19)
1000ab74:	0005883a 	mov	r2,zero
1000ab78:	003fb306 	br	1000aa48 <__alt_data_end+0xf800aa48>
1000ab7c:	88c0030b 	ldhu	r3,12(r17)
1000ab80:	3005883a 	mov	r2,r6
1000ab84:	18c01014 	ori	r3,r3,64
1000ab88:	88c0030d 	sth	r3,12(r17)
1000ab8c:	003fae06 	br	1000aa48 <__alt_data_end+0xf800aa48>

1000ab90 <_fflush_r>:
1000ab90:	defffd04 	addi	sp,sp,-12
1000ab94:	dc000115 	stw	r16,4(sp)
1000ab98:	dfc00215 	stw	ra,8(sp)
1000ab9c:	2021883a 	mov	r16,r4
1000aba0:	20000226 	beq	r4,zero,1000abac <_fflush_r+0x1c>
1000aba4:	20800e17 	ldw	r2,56(r4)
1000aba8:	10000c26 	beq	r2,zero,1000abdc <_fflush_r+0x4c>
1000abac:	2880030f 	ldh	r2,12(r5)
1000abb0:	1000051e 	bne	r2,zero,1000abc8 <_fflush_r+0x38>
1000abb4:	0005883a 	mov	r2,zero
1000abb8:	dfc00217 	ldw	ra,8(sp)
1000abbc:	dc000117 	ldw	r16,4(sp)
1000abc0:	dec00304 	addi	sp,sp,12
1000abc4:	f800283a 	ret
1000abc8:	8009883a 	mov	r4,r16
1000abcc:	dfc00217 	ldw	ra,8(sp)
1000abd0:	dc000117 	ldw	r16,4(sp)
1000abd4:	dec00304 	addi	sp,sp,12
1000abd8:	000a9741 	jmpi	1000a974 <__sflush_r>
1000abdc:	d9400015 	stw	r5,0(sp)
1000abe0:	000af7c0 	call	1000af7c <__sinit>
1000abe4:	d9400017 	ldw	r5,0(sp)
1000abe8:	003ff006 	br	1000abac <__alt_data_end+0xf800abac>

1000abec <fflush>:
1000abec:	20000526 	beq	r4,zero,1000ac04 <fflush+0x18>
1000abf0:	008400b4 	movhi	r2,4098
1000abf4:	10959104 	addi	r2,r2,22084
1000abf8:	200b883a 	mov	r5,r4
1000abfc:	11000017 	ldw	r4,0(r2)
1000ac00:	000ab901 	jmpi	1000ab90 <_fflush_r>
1000ac04:	008400b4 	movhi	r2,4098
1000ac08:	10959004 	addi	r2,r2,22080
1000ac0c:	11000017 	ldw	r4,0(r2)
1000ac10:	01440074 	movhi	r5,4097
1000ac14:	296ae404 	addi	r5,r5,-21616
1000ac18:	000b98c1 	jmpi	1000b98c <_fwalk_reent>

1000ac1c <__fp_unlock>:
1000ac1c:	0005883a 	mov	r2,zero
1000ac20:	f800283a 	ret

1000ac24 <_cleanup_r>:
1000ac24:	01440074 	movhi	r5,4097
1000ac28:	297eca04 	addi	r5,r5,-1240
1000ac2c:	000b98c1 	jmpi	1000b98c <_fwalk_reent>

1000ac30 <__sinit.part.1>:
1000ac30:	defff704 	addi	sp,sp,-36
1000ac34:	00c40074 	movhi	r3,4097
1000ac38:	dfc00815 	stw	ra,32(sp)
1000ac3c:	ddc00715 	stw	r23,28(sp)
1000ac40:	dd800615 	stw	r22,24(sp)
1000ac44:	dd400515 	stw	r21,20(sp)
1000ac48:	dd000415 	stw	r20,16(sp)
1000ac4c:	dcc00315 	stw	r19,12(sp)
1000ac50:	dc800215 	stw	r18,8(sp)
1000ac54:	dc400115 	stw	r17,4(sp)
1000ac58:	dc000015 	stw	r16,0(sp)
1000ac5c:	18eb0904 	addi	r3,r3,-21468
1000ac60:	24000117 	ldw	r16,4(r4)
1000ac64:	20c00f15 	stw	r3,60(r4)
1000ac68:	2080bb04 	addi	r2,r4,748
1000ac6c:	00c000c4 	movi	r3,3
1000ac70:	20c0b915 	stw	r3,740(r4)
1000ac74:	2080ba15 	stw	r2,744(r4)
1000ac78:	2000b815 	stw	zero,736(r4)
1000ac7c:	05c00204 	movi	r23,8
1000ac80:	00800104 	movi	r2,4
1000ac84:	2025883a 	mov	r18,r4
1000ac88:	b80d883a 	mov	r6,r23
1000ac8c:	81001704 	addi	r4,r16,92
1000ac90:	000b883a 	mov	r5,zero
1000ac94:	80000015 	stw	zero,0(r16)
1000ac98:	80000115 	stw	zero,4(r16)
1000ac9c:	80000215 	stw	zero,8(r16)
1000aca0:	8080030d 	sth	r2,12(r16)
1000aca4:	80001915 	stw	zero,100(r16)
1000aca8:	8000038d 	sth	zero,14(r16)
1000acac:	80000415 	stw	zero,16(r16)
1000acb0:	80000515 	stw	zero,20(r16)
1000acb4:	80000615 	stw	zero,24(r16)
1000acb8:	000c87c0 	call	1000c87c <memset>
1000acbc:	05840074 	movhi	r22,4097
1000acc0:	94400217 	ldw	r17,8(r18)
1000acc4:	05440074 	movhi	r21,4097
1000acc8:	05040074 	movhi	r20,4097
1000accc:	04c40074 	movhi	r19,4097
1000acd0:	b5b82204 	addi	r22,r22,-8056
1000acd4:	ad783904 	addi	r21,r21,-7964
1000acd8:	a5385804 	addi	r20,r20,-7840
1000acdc:	9cf86f04 	addi	r19,r19,-7748
1000ace0:	85800815 	stw	r22,32(r16)
1000ace4:	85400915 	stw	r21,36(r16)
1000ace8:	85000a15 	stw	r20,40(r16)
1000acec:	84c00b15 	stw	r19,44(r16)
1000acf0:	84000715 	stw	r16,28(r16)
1000acf4:	00800284 	movi	r2,10
1000acf8:	8880030d 	sth	r2,12(r17)
1000acfc:	00800044 	movi	r2,1
1000ad00:	b80d883a 	mov	r6,r23
1000ad04:	89001704 	addi	r4,r17,92
1000ad08:	000b883a 	mov	r5,zero
1000ad0c:	88000015 	stw	zero,0(r17)
1000ad10:	88000115 	stw	zero,4(r17)
1000ad14:	88000215 	stw	zero,8(r17)
1000ad18:	88001915 	stw	zero,100(r17)
1000ad1c:	8880038d 	sth	r2,14(r17)
1000ad20:	88000415 	stw	zero,16(r17)
1000ad24:	88000515 	stw	zero,20(r17)
1000ad28:	88000615 	stw	zero,24(r17)
1000ad2c:	000c87c0 	call	1000c87c <memset>
1000ad30:	94000317 	ldw	r16,12(r18)
1000ad34:	00800484 	movi	r2,18
1000ad38:	8c400715 	stw	r17,28(r17)
1000ad3c:	8d800815 	stw	r22,32(r17)
1000ad40:	8d400915 	stw	r21,36(r17)
1000ad44:	8d000a15 	stw	r20,40(r17)
1000ad48:	8cc00b15 	stw	r19,44(r17)
1000ad4c:	8080030d 	sth	r2,12(r16)
1000ad50:	00800084 	movi	r2,2
1000ad54:	80000015 	stw	zero,0(r16)
1000ad58:	80000115 	stw	zero,4(r16)
1000ad5c:	80000215 	stw	zero,8(r16)
1000ad60:	80001915 	stw	zero,100(r16)
1000ad64:	8080038d 	sth	r2,14(r16)
1000ad68:	80000415 	stw	zero,16(r16)
1000ad6c:	80000515 	stw	zero,20(r16)
1000ad70:	80000615 	stw	zero,24(r16)
1000ad74:	b80d883a 	mov	r6,r23
1000ad78:	000b883a 	mov	r5,zero
1000ad7c:	81001704 	addi	r4,r16,92
1000ad80:	000c87c0 	call	1000c87c <memset>
1000ad84:	00800044 	movi	r2,1
1000ad88:	84000715 	stw	r16,28(r16)
1000ad8c:	85800815 	stw	r22,32(r16)
1000ad90:	85400915 	stw	r21,36(r16)
1000ad94:	85000a15 	stw	r20,40(r16)
1000ad98:	84c00b15 	stw	r19,44(r16)
1000ad9c:	90800e15 	stw	r2,56(r18)
1000ada0:	dfc00817 	ldw	ra,32(sp)
1000ada4:	ddc00717 	ldw	r23,28(sp)
1000ada8:	dd800617 	ldw	r22,24(sp)
1000adac:	dd400517 	ldw	r21,20(sp)
1000adb0:	dd000417 	ldw	r20,16(sp)
1000adb4:	dcc00317 	ldw	r19,12(sp)
1000adb8:	dc800217 	ldw	r18,8(sp)
1000adbc:	dc400117 	ldw	r17,4(sp)
1000adc0:	dc000017 	ldw	r16,0(sp)
1000adc4:	dec00904 	addi	sp,sp,36
1000adc8:	f800283a 	ret

1000adcc <__fp_lock>:
1000adcc:	0005883a 	mov	r2,zero
1000add0:	f800283a 	ret

1000add4 <__sfmoreglue>:
1000add4:	defffc04 	addi	sp,sp,-16
1000add8:	dc800215 	stw	r18,8(sp)
1000addc:	2825883a 	mov	r18,r5
1000ade0:	dc000015 	stw	r16,0(sp)
1000ade4:	01401a04 	movi	r5,104
1000ade8:	2021883a 	mov	r16,r4
1000adec:	913fffc4 	addi	r4,r18,-1
1000adf0:	dfc00315 	stw	ra,12(sp)
1000adf4:	dc400115 	stw	r17,4(sp)
1000adf8:	00069bc0 	call	100069bc <__mulsi3>
1000adfc:	8009883a 	mov	r4,r16
1000ae00:	11401d04 	addi	r5,r2,116
1000ae04:	1023883a 	mov	r17,r2
1000ae08:	000bce80 	call	1000bce8 <_malloc_r>
1000ae0c:	1021883a 	mov	r16,r2
1000ae10:	10000726 	beq	r2,zero,1000ae30 <__sfmoreglue+0x5c>
1000ae14:	11000304 	addi	r4,r2,12
1000ae18:	10000015 	stw	zero,0(r2)
1000ae1c:	14800115 	stw	r18,4(r2)
1000ae20:	11000215 	stw	r4,8(r2)
1000ae24:	89801a04 	addi	r6,r17,104
1000ae28:	000b883a 	mov	r5,zero
1000ae2c:	000c87c0 	call	1000c87c <memset>
1000ae30:	8005883a 	mov	r2,r16
1000ae34:	dfc00317 	ldw	ra,12(sp)
1000ae38:	dc800217 	ldw	r18,8(sp)
1000ae3c:	dc400117 	ldw	r17,4(sp)
1000ae40:	dc000017 	ldw	r16,0(sp)
1000ae44:	dec00404 	addi	sp,sp,16
1000ae48:	f800283a 	ret

1000ae4c <__sfp>:
1000ae4c:	defffb04 	addi	sp,sp,-20
1000ae50:	dc000015 	stw	r16,0(sp)
1000ae54:	040400b4 	movhi	r16,4098
1000ae58:	84159004 	addi	r16,r16,22080
1000ae5c:	dcc00315 	stw	r19,12(sp)
1000ae60:	2027883a 	mov	r19,r4
1000ae64:	81000017 	ldw	r4,0(r16)
1000ae68:	dfc00415 	stw	ra,16(sp)
1000ae6c:	dc800215 	stw	r18,8(sp)
1000ae70:	20800e17 	ldw	r2,56(r4)
1000ae74:	dc400115 	stw	r17,4(sp)
1000ae78:	1000021e 	bne	r2,zero,1000ae84 <__sfp+0x38>
1000ae7c:	000ac300 	call	1000ac30 <__sinit.part.1>
1000ae80:	81000017 	ldw	r4,0(r16)
1000ae84:	2480b804 	addi	r18,r4,736
1000ae88:	047fffc4 	movi	r17,-1
1000ae8c:	91000117 	ldw	r4,4(r18)
1000ae90:	94000217 	ldw	r16,8(r18)
1000ae94:	213fffc4 	addi	r4,r4,-1
1000ae98:	20000a16 	blt	r4,zero,1000aec4 <__sfp+0x78>
1000ae9c:	8080030f 	ldh	r2,12(r16)
1000aea0:	10000c26 	beq	r2,zero,1000aed4 <__sfp+0x88>
1000aea4:	80c01d04 	addi	r3,r16,116
1000aea8:	00000206 	br	1000aeb4 <__sfp+0x68>
1000aeac:	18bfe60f 	ldh	r2,-104(r3)
1000aeb0:	10000826 	beq	r2,zero,1000aed4 <__sfp+0x88>
1000aeb4:	213fffc4 	addi	r4,r4,-1
1000aeb8:	1c3ffd04 	addi	r16,r3,-12
1000aebc:	18c01a04 	addi	r3,r3,104
1000aec0:	247ffa1e 	bne	r4,r17,1000aeac <__alt_data_end+0xf800aeac>
1000aec4:	90800017 	ldw	r2,0(r18)
1000aec8:	10001d26 	beq	r2,zero,1000af40 <__sfp+0xf4>
1000aecc:	1025883a 	mov	r18,r2
1000aed0:	003fee06 	br	1000ae8c <__alt_data_end+0xf800ae8c>
1000aed4:	00bfffc4 	movi	r2,-1
1000aed8:	8080038d 	sth	r2,14(r16)
1000aedc:	00800044 	movi	r2,1
1000aee0:	8080030d 	sth	r2,12(r16)
1000aee4:	80001915 	stw	zero,100(r16)
1000aee8:	80000015 	stw	zero,0(r16)
1000aeec:	80000215 	stw	zero,8(r16)
1000aef0:	80000115 	stw	zero,4(r16)
1000aef4:	80000415 	stw	zero,16(r16)
1000aef8:	80000515 	stw	zero,20(r16)
1000aefc:	80000615 	stw	zero,24(r16)
1000af00:	01800204 	movi	r6,8
1000af04:	000b883a 	mov	r5,zero
1000af08:	81001704 	addi	r4,r16,92
1000af0c:	000c87c0 	call	1000c87c <memset>
1000af10:	8005883a 	mov	r2,r16
1000af14:	80000c15 	stw	zero,48(r16)
1000af18:	80000d15 	stw	zero,52(r16)
1000af1c:	80001115 	stw	zero,68(r16)
1000af20:	80001215 	stw	zero,72(r16)
1000af24:	dfc00417 	ldw	ra,16(sp)
1000af28:	dcc00317 	ldw	r19,12(sp)
1000af2c:	dc800217 	ldw	r18,8(sp)
1000af30:	dc400117 	ldw	r17,4(sp)
1000af34:	dc000017 	ldw	r16,0(sp)
1000af38:	dec00504 	addi	sp,sp,20
1000af3c:	f800283a 	ret
1000af40:	01400104 	movi	r5,4
1000af44:	9809883a 	mov	r4,r19
1000af48:	000add40 	call	1000add4 <__sfmoreglue>
1000af4c:	90800015 	stw	r2,0(r18)
1000af50:	103fde1e 	bne	r2,zero,1000aecc <__alt_data_end+0xf800aecc>
1000af54:	00800304 	movi	r2,12
1000af58:	98800015 	stw	r2,0(r19)
1000af5c:	0005883a 	mov	r2,zero
1000af60:	003ff006 	br	1000af24 <__alt_data_end+0xf800af24>

1000af64 <_cleanup>:
1000af64:	008400b4 	movhi	r2,4098
1000af68:	10959004 	addi	r2,r2,22080
1000af6c:	11000017 	ldw	r4,0(r2)
1000af70:	01440074 	movhi	r5,4097
1000af74:	297eca04 	addi	r5,r5,-1240
1000af78:	000b98c1 	jmpi	1000b98c <_fwalk_reent>

1000af7c <__sinit>:
1000af7c:	20800e17 	ldw	r2,56(r4)
1000af80:	10000126 	beq	r2,zero,1000af88 <__sinit+0xc>
1000af84:	f800283a 	ret
1000af88:	000ac301 	jmpi	1000ac30 <__sinit.part.1>

1000af8c <__sfp_lock_acquire>:
1000af8c:	f800283a 	ret

1000af90 <__sfp_lock_release>:
1000af90:	f800283a 	ret

1000af94 <__sinit_lock_acquire>:
1000af94:	f800283a 	ret

1000af98 <__sinit_lock_release>:
1000af98:	f800283a 	ret

1000af9c <__fp_lock_all>:
1000af9c:	008400b4 	movhi	r2,4098
1000afa0:	10959104 	addi	r2,r2,22084
1000afa4:	11000017 	ldw	r4,0(r2)
1000afa8:	01440074 	movhi	r5,4097
1000afac:	296b7304 	addi	r5,r5,-21044
1000afb0:	000b8c81 	jmpi	1000b8c8 <_fwalk>

1000afb4 <__fp_unlock_all>:
1000afb4:	008400b4 	movhi	r2,4098
1000afb8:	10959104 	addi	r2,r2,22084
1000afbc:	11000017 	ldw	r4,0(r2)
1000afc0:	01440074 	movhi	r5,4097
1000afc4:	296b0704 	addi	r5,r5,-21476
1000afc8:	000b8c81 	jmpi	1000b8c8 <_fwalk>

1000afcc <_malloc_trim_r>:
1000afcc:	defffb04 	addi	sp,sp,-20
1000afd0:	dcc00315 	stw	r19,12(sp)
1000afd4:	04c400b4 	movhi	r19,4098
1000afd8:	dc800215 	stw	r18,8(sp)
1000afdc:	dc400115 	stw	r17,4(sp)
1000afe0:	dc000015 	stw	r16,0(sp)
1000afe4:	dfc00415 	stw	ra,16(sp)
1000afe8:	2821883a 	mov	r16,r5
1000afec:	9cd00c04 	addi	r19,r19,16432
1000aff0:	2025883a 	mov	r18,r4
1000aff4:	0013ce40 	call	10013ce4 <__malloc_lock>
1000aff8:	98800217 	ldw	r2,8(r19)
1000affc:	14400117 	ldw	r17,4(r2)
1000b000:	00bfff04 	movi	r2,-4
1000b004:	88a2703a 	and	r17,r17,r2
1000b008:	8c21c83a 	sub	r16,r17,r16
1000b00c:	8403fbc4 	addi	r16,r16,4079
1000b010:	8020d33a 	srli	r16,r16,12
1000b014:	0083ffc4 	movi	r2,4095
1000b018:	843fffc4 	addi	r16,r16,-1
1000b01c:	8020933a 	slli	r16,r16,12
1000b020:	1400060e 	bge	r2,r16,1000b03c <_malloc_trim_r+0x70>
1000b024:	000b883a 	mov	r5,zero
1000b028:	9009883a 	mov	r4,r18
1000b02c:	000e0340 	call	1000e034 <_sbrk_r>
1000b030:	98c00217 	ldw	r3,8(r19)
1000b034:	1c47883a 	add	r3,r3,r17
1000b038:	10c00a26 	beq	r2,r3,1000b064 <_malloc_trim_r+0x98>
1000b03c:	9009883a 	mov	r4,r18
1000b040:	0013d080 	call	10013d08 <__malloc_unlock>
1000b044:	0005883a 	mov	r2,zero
1000b048:	dfc00417 	ldw	ra,16(sp)
1000b04c:	dcc00317 	ldw	r19,12(sp)
1000b050:	dc800217 	ldw	r18,8(sp)
1000b054:	dc400117 	ldw	r17,4(sp)
1000b058:	dc000017 	ldw	r16,0(sp)
1000b05c:	dec00504 	addi	sp,sp,20
1000b060:	f800283a 	ret
1000b064:	040bc83a 	sub	r5,zero,r16
1000b068:	9009883a 	mov	r4,r18
1000b06c:	000e0340 	call	1000e034 <_sbrk_r>
1000b070:	00ffffc4 	movi	r3,-1
1000b074:	10c00d26 	beq	r2,r3,1000b0ac <_malloc_trim_r+0xe0>
1000b078:	00c400f4 	movhi	r3,4099
1000b07c:	18d0c904 	addi	r3,r3,17188
1000b080:	18800017 	ldw	r2,0(r3)
1000b084:	99000217 	ldw	r4,8(r19)
1000b088:	8c23c83a 	sub	r17,r17,r16
1000b08c:	8c400054 	ori	r17,r17,1
1000b090:	1421c83a 	sub	r16,r2,r16
1000b094:	24400115 	stw	r17,4(r4)
1000b098:	9009883a 	mov	r4,r18
1000b09c:	1c000015 	stw	r16,0(r3)
1000b0a0:	0013d080 	call	10013d08 <__malloc_unlock>
1000b0a4:	00800044 	movi	r2,1
1000b0a8:	003fe706 	br	1000b048 <__alt_data_end+0xf800b048>
1000b0ac:	000b883a 	mov	r5,zero
1000b0b0:	9009883a 	mov	r4,r18
1000b0b4:	000e0340 	call	1000e034 <_sbrk_r>
1000b0b8:	99000217 	ldw	r4,8(r19)
1000b0bc:	014003c4 	movi	r5,15
1000b0c0:	1107c83a 	sub	r3,r2,r4
1000b0c4:	28ffdd0e 	bge	r5,r3,1000b03c <__alt_data_end+0xf800b03c>
1000b0c8:	014400b4 	movhi	r5,4098
1000b0cc:	29559304 	addi	r5,r5,22092
1000b0d0:	29400017 	ldw	r5,0(r5)
1000b0d4:	18c00054 	ori	r3,r3,1
1000b0d8:	20c00115 	stw	r3,4(r4)
1000b0dc:	00c400f4 	movhi	r3,4099
1000b0e0:	1145c83a 	sub	r2,r2,r5
1000b0e4:	18d0c904 	addi	r3,r3,17188
1000b0e8:	18800015 	stw	r2,0(r3)
1000b0ec:	003fd306 	br	1000b03c <__alt_data_end+0xf800b03c>

1000b0f0 <_free_r>:
1000b0f0:	28004126 	beq	r5,zero,1000b1f8 <_free_r+0x108>
1000b0f4:	defffd04 	addi	sp,sp,-12
1000b0f8:	dc400115 	stw	r17,4(sp)
1000b0fc:	dc000015 	stw	r16,0(sp)
1000b100:	2023883a 	mov	r17,r4
1000b104:	2821883a 	mov	r16,r5
1000b108:	dfc00215 	stw	ra,8(sp)
1000b10c:	0013ce40 	call	10013ce4 <__malloc_lock>
1000b110:	81ffff17 	ldw	r7,-4(r16)
1000b114:	00bfff84 	movi	r2,-2
1000b118:	010400b4 	movhi	r4,4098
1000b11c:	81bffe04 	addi	r6,r16,-8
1000b120:	3884703a 	and	r2,r7,r2
1000b124:	21100c04 	addi	r4,r4,16432
1000b128:	308b883a 	add	r5,r6,r2
1000b12c:	2a400117 	ldw	r9,4(r5)
1000b130:	22000217 	ldw	r8,8(r4)
1000b134:	00ffff04 	movi	r3,-4
1000b138:	48c6703a 	and	r3,r9,r3
1000b13c:	2a005726 	beq	r5,r8,1000b29c <_free_r+0x1ac>
1000b140:	28c00115 	stw	r3,4(r5)
1000b144:	39c0004c 	andi	r7,r7,1
1000b148:	3800091e 	bne	r7,zero,1000b170 <_free_r+0x80>
1000b14c:	823ffe17 	ldw	r8,-8(r16)
1000b150:	22400204 	addi	r9,r4,8
1000b154:	320dc83a 	sub	r6,r6,r8
1000b158:	31c00217 	ldw	r7,8(r6)
1000b15c:	1205883a 	add	r2,r2,r8
1000b160:	3a406526 	beq	r7,r9,1000b2f8 <_free_r+0x208>
1000b164:	32000317 	ldw	r8,12(r6)
1000b168:	3a000315 	stw	r8,12(r7)
1000b16c:	41c00215 	stw	r7,8(r8)
1000b170:	28cf883a 	add	r7,r5,r3
1000b174:	39c00117 	ldw	r7,4(r7)
1000b178:	39c0004c 	andi	r7,r7,1
1000b17c:	38003a26 	beq	r7,zero,1000b268 <_free_r+0x178>
1000b180:	10c00054 	ori	r3,r2,1
1000b184:	30c00115 	stw	r3,4(r6)
1000b188:	3087883a 	add	r3,r6,r2
1000b18c:	18800015 	stw	r2,0(r3)
1000b190:	00c07fc4 	movi	r3,511
1000b194:	18801936 	bltu	r3,r2,1000b1fc <_free_r+0x10c>
1000b198:	1004d0fa 	srli	r2,r2,3
1000b19c:	01c00044 	movi	r7,1
1000b1a0:	21400117 	ldw	r5,4(r4)
1000b1a4:	10c00044 	addi	r3,r2,1
1000b1a8:	18c7883a 	add	r3,r3,r3
1000b1ac:	1005d0ba 	srai	r2,r2,2
1000b1b0:	18c7883a 	add	r3,r3,r3
1000b1b4:	18c7883a 	add	r3,r3,r3
1000b1b8:	1907883a 	add	r3,r3,r4
1000b1bc:	3884983a 	sll	r2,r7,r2
1000b1c0:	19c00017 	ldw	r7,0(r3)
1000b1c4:	1a3ffe04 	addi	r8,r3,-8
1000b1c8:	1144b03a 	or	r2,r2,r5
1000b1cc:	32000315 	stw	r8,12(r6)
1000b1d0:	31c00215 	stw	r7,8(r6)
1000b1d4:	20800115 	stw	r2,4(r4)
1000b1d8:	19800015 	stw	r6,0(r3)
1000b1dc:	39800315 	stw	r6,12(r7)
1000b1e0:	8809883a 	mov	r4,r17
1000b1e4:	dfc00217 	ldw	ra,8(sp)
1000b1e8:	dc400117 	ldw	r17,4(sp)
1000b1ec:	dc000017 	ldw	r16,0(sp)
1000b1f0:	dec00304 	addi	sp,sp,12
1000b1f4:	0013d081 	jmpi	10013d08 <__malloc_unlock>
1000b1f8:	f800283a 	ret
1000b1fc:	100ad27a 	srli	r5,r2,9
1000b200:	00c00104 	movi	r3,4
1000b204:	19404a36 	bltu	r3,r5,1000b330 <_free_r+0x240>
1000b208:	100ad1ba 	srli	r5,r2,6
1000b20c:	28c00e44 	addi	r3,r5,57
1000b210:	18c7883a 	add	r3,r3,r3
1000b214:	29400e04 	addi	r5,r5,56
1000b218:	18c7883a 	add	r3,r3,r3
1000b21c:	18c7883a 	add	r3,r3,r3
1000b220:	1909883a 	add	r4,r3,r4
1000b224:	20c00017 	ldw	r3,0(r4)
1000b228:	01c400b4 	movhi	r7,4098
1000b22c:	213ffe04 	addi	r4,r4,-8
1000b230:	39d00c04 	addi	r7,r7,16432
1000b234:	20c04426 	beq	r4,r3,1000b348 <_free_r+0x258>
1000b238:	01ffff04 	movi	r7,-4
1000b23c:	19400117 	ldw	r5,4(r3)
1000b240:	29ca703a 	and	r5,r5,r7
1000b244:	1140022e 	bgeu	r2,r5,1000b250 <_free_r+0x160>
1000b248:	18c00217 	ldw	r3,8(r3)
1000b24c:	20fffb1e 	bne	r4,r3,1000b23c <__alt_data_end+0xf800b23c>
1000b250:	19000317 	ldw	r4,12(r3)
1000b254:	31000315 	stw	r4,12(r6)
1000b258:	30c00215 	stw	r3,8(r6)
1000b25c:	21800215 	stw	r6,8(r4)
1000b260:	19800315 	stw	r6,12(r3)
1000b264:	003fde06 	br	1000b1e0 <__alt_data_end+0xf800b1e0>
1000b268:	29c00217 	ldw	r7,8(r5)
1000b26c:	10c5883a 	add	r2,r2,r3
1000b270:	00c400b4 	movhi	r3,4098
1000b274:	18d00e04 	addi	r3,r3,16440
1000b278:	38c03b26 	beq	r7,r3,1000b368 <_free_r+0x278>
1000b27c:	2a000317 	ldw	r8,12(r5)
1000b280:	11400054 	ori	r5,r2,1
1000b284:	3087883a 	add	r3,r6,r2
1000b288:	3a000315 	stw	r8,12(r7)
1000b28c:	41c00215 	stw	r7,8(r8)
1000b290:	31400115 	stw	r5,4(r6)
1000b294:	18800015 	stw	r2,0(r3)
1000b298:	003fbd06 	br	1000b190 <__alt_data_end+0xf800b190>
1000b29c:	39c0004c 	andi	r7,r7,1
1000b2a0:	10c5883a 	add	r2,r2,r3
1000b2a4:	3800071e 	bne	r7,zero,1000b2c4 <_free_r+0x1d4>
1000b2a8:	81fffe17 	ldw	r7,-8(r16)
1000b2ac:	31cdc83a 	sub	r6,r6,r7
1000b2b0:	30c00317 	ldw	r3,12(r6)
1000b2b4:	31400217 	ldw	r5,8(r6)
1000b2b8:	11c5883a 	add	r2,r2,r7
1000b2bc:	28c00315 	stw	r3,12(r5)
1000b2c0:	19400215 	stw	r5,8(r3)
1000b2c4:	10c00054 	ori	r3,r2,1
1000b2c8:	30c00115 	stw	r3,4(r6)
1000b2cc:	00c400b4 	movhi	r3,4098
1000b2d0:	18d59404 	addi	r3,r3,22096
1000b2d4:	18c00017 	ldw	r3,0(r3)
1000b2d8:	21800215 	stw	r6,8(r4)
1000b2dc:	10ffc036 	bltu	r2,r3,1000b1e0 <__alt_data_end+0xf800b1e0>
1000b2e0:	008400f4 	movhi	r2,4099
1000b2e4:	1090c004 	addi	r2,r2,17152
1000b2e8:	11400017 	ldw	r5,0(r2)
1000b2ec:	8809883a 	mov	r4,r17
1000b2f0:	000afcc0 	call	1000afcc <_malloc_trim_r>
1000b2f4:	003fba06 	br	1000b1e0 <__alt_data_end+0xf800b1e0>
1000b2f8:	28c9883a 	add	r4,r5,r3
1000b2fc:	21000117 	ldw	r4,4(r4)
1000b300:	2100004c 	andi	r4,r4,1
1000b304:	2000391e 	bne	r4,zero,1000b3ec <_free_r+0x2fc>
1000b308:	29c00217 	ldw	r7,8(r5)
1000b30c:	29000317 	ldw	r4,12(r5)
1000b310:	1885883a 	add	r2,r3,r2
1000b314:	10c00054 	ori	r3,r2,1
1000b318:	39000315 	stw	r4,12(r7)
1000b31c:	21c00215 	stw	r7,8(r4)
1000b320:	30c00115 	stw	r3,4(r6)
1000b324:	308d883a 	add	r6,r6,r2
1000b328:	30800015 	stw	r2,0(r6)
1000b32c:	003fac06 	br	1000b1e0 <__alt_data_end+0xf800b1e0>
1000b330:	00c00504 	movi	r3,20
1000b334:	19401536 	bltu	r3,r5,1000b38c <_free_r+0x29c>
1000b338:	28c01704 	addi	r3,r5,92
1000b33c:	18c7883a 	add	r3,r3,r3
1000b340:	294016c4 	addi	r5,r5,91
1000b344:	003fb406 	br	1000b218 <__alt_data_end+0xf800b218>
1000b348:	280bd0ba 	srai	r5,r5,2
1000b34c:	00c00044 	movi	r3,1
1000b350:	38800117 	ldw	r2,4(r7)
1000b354:	194a983a 	sll	r5,r3,r5
1000b358:	2007883a 	mov	r3,r4
1000b35c:	2884b03a 	or	r2,r5,r2
1000b360:	38800115 	stw	r2,4(r7)
1000b364:	003fbb06 	br	1000b254 <__alt_data_end+0xf800b254>
1000b368:	21800515 	stw	r6,20(r4)
1000b36c:	21800415 	stw	r6,16(r4)
1000b370:	10c00054 	ori	r3,r2,1
1000b374:	31c00315 	stw	r7,12(r6)
1000b378:	31c00215 	stw	r7,8(r6)
1000b37c:	30c00115 	stw	r3,4(r6)
1000b380:	308d883a 	add	r6,r6,r2
1000b384:	30800015 	stw	r2,0(r6)
1000b388:	003f9506 	br	1000b1e0 <__alt_data_end+0xf800b1e0>
1000b38c:	00c01504 	movi	r3,84
1000b390:	19400536 	bltu	r3,r5,1000b3a8 <_free_r+0x2b8>
1000b394:	100ad33a 	srli	r5,r2,12
1000b398:	28c01bc4 	addi	r3,r5,111
1000b39c:	18c7883a 	add	r3,r3,r3
1000b3a0:	29401b84 	addi	r5,r5,110
1000b3a4:	003f9c06 	br	1000b218 <__alt_data_end+0xf800b218>
1000b3a8:	00c05504 	movi	r3,340
1000b3ac:	19400536 	bltu	r3,r5,1000b3c4 <_free_r+0x2d4>
1000b3b0:	100ad3fa 	srli	r5,r2,15
1000b3b4:	28c01e04 	addi	r3,r5,120
1000b3b8:	18c7883a 	add	r3,r3,r3
1000b3bc:	29401dc4 	addi	r5,r5,119
1000b3c0:	003f9506 	br	1000b218 <__alt_data_end+0xf800b218>
1000b3c4:	00c15504 	movi	r3,1364
1000b3c8:	19400536 	bltu	r3,r5,1000b3e0 <_free_r+0x2f0>
1000b3cc:	100ad4ba 	srli	r5,r2,18
1000b3d0:	28c01f44 	addi	r3,r5,125
1000b3d4:	18c7883a 	add	r3,r3,r3
1000b3d8:	29401f04 	addi	r5,r5,124
1000b3dc:	003f8e06 	br	1000b218 <__alt_data_end+0xf800b218>
1000b3e0:	00c03f84 	movi	r3,254
1000b3e4:	01401f84 	movi	r5,126
1000b3e8:	003f8b06 	br	1000b218 <__alt_data_end+0xf800b218>
1000b3ec:	10c00054 	ori	r3,r2,1
1000b3f0:	30c00115 	stw	r3,4(r6)
1000b3f4:	308d883a 	add	r6,r6,r2
1000b3f8:	30800015 	stw	r2,0(r6)
1000b3fc:	003f7806 	br	1000b1e0 <__alt_data_end+0xf800b1e0>

1000b400 <__sfvwrite_r>:
1000b400:	30800217 	ldw	r2,8(r6)
1000b404:	10006726 	beq	r2,zero,1000b5a4 <__sfvwrite_r+0x1a4>
1000b408:	28c0030b 	ldhu	r3,12(r5)
1000b40c:	defff404 	addi	sp,sp,-48
1000b410:	dd400715 	stw	r21,28(sp)
1000b414:	dd000615 	stw	r20,24(sp)
1000b418:	dc000215 	stw	r16,8(sp)
1000b41c:	dfc00b15 	stw	ra,44(sp)
1000b420:	df000a15 	stw	fp,40(sp)
1000b424:	ddc00915 	stw	r23,36(sp)
1000b428:	dd800815 	stw	r22,32(sp)
1000b42c:	dcc00515 	stw	r19,20(sp)
1000b430:	dc800415 	stw	r18,16(sp)
1000b434:	dc400315 	stw	r17,12(sp)
1000b438:	1880020c 	andi	r2,r3,8
1000b43c:	2821883a 	mov	r16,r5
1000b440:	202b883a 	mov	r21,r4
1000b444:	3029883a 	mov	r20,r6
1000b448:	10002726 	beq	r2,zero,1000b4e8 <__sfvwrite_r+0xe8>
1000b44c:	28800417 	ldw	r2,16(r5)
1000b450:	10002526 	beq	r2,zero,1000b4e8 <__sfvwrite_r+0xe8>
1000b454:	1880008c 	andi	r2,r3,2
1000b458:	a4400017 	ldw	r17,0(r20)
1000b45c:	10002a26 	beq	r2,zero,1000b508 <__sfvwrite_r+0x108>
1000b460:	05a00034 	movhi	r22,32768
1000b464:	0027883a 	mov	r19,zero
1000b468:	0025883a 	mov	r18,zero
1000b46c:	b5bf0004 	addi	r22,r22,-1024
1000b470:	980d883a 	mov	r6,r19
1000b474:	a809883a 	mov	r4,r21
1000b478:	90004626 	beq	r18,zero,1000b594 <__sfvwrite_r+0x194>
1000b47c:	900f883a 	mov	r7,r18
1000b480:	b480022e 	bgeu	r22,r18,1000b48c <__sfvwrite_r+0x8c>
1000b484:	01e00034 	movhi	r7,32768
1000b488:	39ff0004 	addi	r7,r7,-1024
1000b48c:	80800917 	ldw	r2,36(r16)
1000b490:	81400717 	ldw	r5,28(r16)
1000b494:	103ee83a 	callr	r2
1000b498:	00805a0e 	bge	zero,r2,1000b604 <__sfvwrite_r+0x204>
1000b49c:	a0c00217 	ldw	r3,8(r20)
1000b4a0:	98a7883a 	add	r19,r19,r2
1000b4a4:	90a5c83a 	sub	r18,r18,r2
1000b4a8:	1885c83a 	sub	r2,r3,r2
1000b4ac:	a0800215 	stw	r2,8(r20)
1000b4b0:	103fef1e 	bne	r2,zero,1000b470 <__alt_data_end+0xf800b470>
1000b4b4:	0005883a 	mov	r2,zero
1000b4b8:	dfc00b17 	ldw	ra,44(sp)
1000b4bc:	df000a17 	ldw	fp,40(sp)
1000b4c0:	ddc00917 	ldw	r23,36(sp)
1000b4c4:	dd800817 	ldw	r22,32(sp)
1000b4c8:	dd400717 	ldw	r21,28(sp)
1000b4cc:	dd000617 	ldw	r20,24(sp)
1000b4d0:	dcc00517 	ldw	r19,20(sp)
1000b4d4:	dc800417 	ldw	r18,16(sp)
1000b4d8:	dc400317 	ldw	r17,12(sp)
1000b4dc:	dc000217 	ldw	r16,8(sp)
1000b4e0:	dec00c04 	addi	sp,sp,48
1000b4e4:	f800283a 	ret
1000b4e8:	800b883a 	mov	r5,r16
1000b4ec:	a809883a 	mov	r4,r21
1000b4f0:	0008f700 	call	10008f70 <__swsetup_r>
1000b4f4:	1000ee1e 	bne	r2,zero,1000b8b0 <__sfvwrite_r+0x4b0>
1000b4f8:	80c0030b 	ldhu	r3,12(r16)
1000b4fc:	a4400017 	ldw	r17,0(r20)
1000b500:	1880008c 	andi	r2,r3,2
1000b504:	103fd61e 	bne	r2,zero,1000b460 <__alt_data_end+0xf800b460>
1000b508:	1880004c 	andi	r2,r3,1
1000b50c:	1000421e 	bne	r2,zero,1000b618 <__sfvwrite_r+0x218>
1000b510:	0039883a 	mov	fp,zero
1000b514:	0025883a 	mov	r18,zero
1000b518:	90001a26 	beq	r18,zero,1000b584 <__sfvwrite_r+0x184>
1000b51c:	1880800c 	andi	r2,r3,512
1000b520:	84c00217 	ldw	r19,8(r16)
1000b524:	10002126 	beq	r2,zero,1000b5ac <__sfvwrite_r+0x1ac>
1000b528:	982f883a 	mov	r23,r19
1000b52c:	94c09636 	bltu	r18,r19,1000b788 <__sfvwrite_r+0x388>
1000b530:	1881200c 	andi	r2,r3,1152
1000b534:	1000a11e 	bne	r2,zero,1000b7bc <__sfvwrite_r+0x3bc>
1000b538:	81000017 	ldw	r4,0(r16)
1000b53c:	b80d883a 	mov	r6,r23
1000b540:	e00b883a 	mov	r5,fp
1000b544:	000c7200 	call	1000c720 <memmove>
1000b548:	80c00217 	ldw	r3,8(r16)
1000b54c:	81000017 	ldw	r4,0(r16)
1000b550:	9005883a 	mov	r2,r18
1000b554:	1ce7c83a 	sub	r19,r3,r19
1000b558:	25cf883a 	add	r7,r4,r23
1000b55c:	84c00215 	stw	r19,8(r16)
1000b560:	81c00015 	stw	r7,0(r16)
1000b564:	a0c00217 	ldw	r3,8(r20)
1000b568:	e0b9883a 	add	fp,fp,r2
1000b56c:	90a5c83a 	sub	r18,r18,r2
1000b570:	18a7c83a 	sub	r19,r3,r2
1000b574:	a4c00215 	stw	r19,8(r20)
1000b578:	983fce26 	beq	r19,zero,1000b4b4 <__alt_data_end+0xf800b4b4>
1000b57c:	80c0030b 	ldhu	r3,12(r16)
1000b580:	903fe61e 	bne	r18,zero,1000b51c <__alt_data_end+0xf800b51c>
1000b584:	8f000017 	ldw	fp,0(r17)
1000b588:	8c800117 	ldw	r18,4(r17)
1000b58c:	8c400204 	addi	r17,r17,8
1000b590:	003fe106 	br	1000b518 <__alt_data_end+0xf800b518>
1000b594:	8cc00017 	ldw	r19,0(r17)
1000b598:	8c800117 	ldw	r18,4(r17)
1000b59c:	8c400204 	addi	r17,r17,8
1000b5a0:	003fb306 	br	1000b470 <__alt_data_end+0xf800b470>
1000b5a4:	0005883a 	mov	r2,zero
1000b5a8:	f800283a 	ret
1000b5ac:	81000017 	ldw	r4,0(r16)
1000b5b0:	80800417 	ldw	r2,16(r16)
1000b5b4:	11005a36 	bltu	r2,r4,1000b720 <__sfvwrite_r+0x320>
1000b5b8:	85c00517 	ldw	r23,20(r16)
1000b5bc:	95c05836 	bltu	r18,r23,1000b720 <__sfvwrite_r+0x320>
1000b5c0:	00a00034 	movhi	r2,32768
1000b5c4:	10bfffc4 	addi	r2,r2,-1
1000b5c8:	9009883a 	mov	r4,r18
1000b5cc:	1480012e 	bgeu	r2,r18,1000b5d4 <__sfvwrite_r+0x1d4>
1000b5d0:	1009883a 	mov	r4,r2
1000b5d4:	b80b883a 	mov	r5,r23
1000b5d8:	00068080 	call	10006808 <__divsi3>
1000b5dc:	b80b883a 	mov	r5,r23
1000b5e0:	1009883a 	mov	r4,r2
1000b5e4:	00069bc0 	call	100069bc <__mulsi3>
1000b5e8:	81400717 	ldw	r5,28(r16)
1000b5ec:	80c00917 	ldw	r3,36(r16)
1000b5f0:	100f883a 	mov	r7,r2
1000b5f4:	e00d883a 	mov	r6,fp
1000b5f8:	a809883a 	mov	r4,r21
1000b5fc:	183ee83a 	callr	r3
1000b600:	00bfd816 	blt	zero,r2,1000b564 <__alt_data_end+0xf800b564>
1000b604:	8080030b 	ldhu	r2,12(r16)
1000b608:	10801014 	ori	r2,r2,64
1000b60c:	8080030d 	sth	r2,12(r16)
1000b610:	00bfffc4 	movi	r2,-1
1000b614:	003fa806 	br	1000b4b8 <__alt_data_end+0xf800b4b8>
1000b618:	0027883a 	mov	r19,zero
1000b61c:	0011883a 	mov	r8,zero
1000b620:	0039883a 	mov	fp,zero
1000b624:	0025883a 	mov	r18,zero
1000b628:	90001f26 	beq	r18,zero,1000b6a8 <__sfvwrite_r+0x2a8>
1000b62c:	40005a26 	beq	r8,zero,1000b798 <__sfvwrite_r+0x398>
1000b630:	982d883a 	mov	r22,r19
1000b634:	94c0012e 	bgeu	r18,r19,1000b63c <__sfvwrite_r+0x23c>
1000b638:	902d883a 	mov	r22,r18
1000b63c:	81000017 	ldw	r4,0(r16)
1000b640:	80800417 	ldw	r2,16(r16)
1000b644:	b02f883a 	mov	r23,r22
1000b648:	81c00517 	ldw	r7,20(r16)
1000b64c:	1100032e 	bgeu	r2,r4,1000b65c <__sfvwrite_r+0x25c>
1000b650:	80c00217 	ldw	r3,8(r16)
1000b654:	38c7883a 	add	r3,r7,r3
1000b658:	1d801816 	blt	r3,r22,1000b6bc <__sfvwrite_r+0x2bc>
1000b65c:	b1c03e16 	blt	r22,r7,1000b758 <__sfvwrite_r+0x358>
1000b660:	80800917 	ldw	r2,36(r16)
1000b664:	81400717 	ldw	r5,28(r16)
1000b668:	e00d883a 	mov	r6,fp
1000b66c:	da000115 	stw	r8,4(sp)
1000b670:	a809883a 	mov	r4,r21
1000b674:	103ee83a 	callr	r2
1000b678:	102f883a 	mov	r23,r2
1000b67c:	da000117 	ldw	r8,4(sp)
1000b680:	00bfe00e 	bge	zero,r2,1000b604 <__alt_data_end+0xf800b604>
1000b684:	9de7c83a 	sub	r19,r19,r23
1000b688:	98001f26 	beq	r19,zero,1000b708 <__sfvwrite_r+0x308>
1000b68c:	a0800217 	ldw	r2,8(r20)
1000b690:	e5f9883a 	add	fp,fp,r23
1000b694:	95e5c83a 	sub	r18,r18,r23
1000b698:	15efc83a 	sub	r23,r2,r23
1000b69c:	a5c00215 	stw	r23,8(r20)
1000b6a0:	b83f8426 	beq	r23,zero,1000b4b4 <__alt_data_end+0xf800b4b4>
1000b6a4:	903fe11e 	bne	r18,zero,1000b62c <__alt_data_end+0xf800b62c>
1000b6a8:	8f000017 	ldw	fp,0(r17)
1000b6ac:	8c800117 	ldw	r18,4(r17)
1000b6b0:	0011883a 	mov	r8,zero
1000b6b4:	8c400204 	addi	r17,r17,8
1000b6b8:	003fdb06 	br	1000b628 <__alt_data_end+0xf800b628>
1000b6bc:	180d883a 	mov	r6,r3
1000b6c0:	e00b883a 	mov	r5,fp
1000b6c4:	da000115 	stw	r8,4(sp)
1000b6c8:	d8c00015 	stw	r3,0(sp)
1000b6cc:	000c7200 	call	1000c720 <memmove>
1000b6d0:	d8c00017 	ldw	r3,0(sp)
1000b6d4:	80800017 	ldw	r2,0(r16)
1000b6d8:	800b883a 	mov	r5,r16
1000b6dc:	a809883a 	mov	r4,r21
1000b6e0:	10c5883a 	add	r2,r2,r3
1000b6e4:	80800015 	stw	r2,0(r16)
1000b6e8:	d8c00015 	stw	r3,0(sp)
1000b6ec:	000ab900 	call	1000ab90 <_fflush_r>
1000b6f0:	d8c00017 	ldw	r3,0(sp)
1000b6f4:	da000117 	ldw	r8,4(sp)
1000b6f8:	103fc21e 	bne	r2,zero,1000b604 <__alt_data_end+0xf800b604>
1000b6fc:	182f883a 	mov	r23,r3
1000b700:	9de7c83a 	sub	r19,r19,r23
1000b704:	983fe11e 	bne	r19,zero,1000b68c <__alt_data_end+0xf800b68c>
1000b708:	800b883a 	mov	r5,r16
1000b70c:	a809883a 	mov	r4,r21
1000b710:	000ab900 	call	1000ab90 <_fflush_r>
1000b714:	103fbb1e 	bne	r2,zero,1000b604 <__alt_data_end+0xf800b604>
1000b718:	0011883a 	mov	r8,zero
1000b71c:	003fdb06 	br	1000b68c <__alt_data_end+0xf800b68c>
1000b720:	94c0012e 	bgeu	r18,r19,1000b728 <__sfvwrite_r+0x328>
1000b724:	9027883a 	mov	r19,r18
1000b728:	980d883a 	mov	r6,r19
1000b72c:	e00b883a 	mov	r5,fp
1000b730:	000c7200 	call	1000c720 <memmove>
1000b734:	80800217 	ldw	r2,8(r16)
1000b738:	80c00017 	ldw	r3,0(r16)
1000b73c:	14c5c83a 	sub	r2,r2,r19
1000b740:	1cc7883a 	add	r3,r3,r19
1000b744:	80800215 	stw	r2,8(r16)
1000b748:	80c00015 	stw	r3,0(r16)
1000b74c:	10004326 	beq	r2,zero,1000b85c <__sfvwrite_r+0x45c>
1000b750:	9805883a 	mov	r2,r19
1000b754:	003f8306 	br	1000b564 <__alt_data_end+0xf800b564>
1000b758:	b00d883a 	mov	r6,r22
1000b75c:	e00b883a 	mov	r5,fp
1000b760:	da000115 	stw	r8,4(sp)
1000b764:	000c7200 	call	1000c720 <memmove>
1000b768:	80800217 	ldw	r2,8(r16)
1000b76c:	80c00017 	ldw	r3,0(r16)
1000b770:	da000117 	ldw	r8,4(sp)
1000b774:	1585c83a 	sub	r2,r2,r22
1000b778:	1dad883a 	add	r22,r3,r22
1000b77c:	80800215 	stw	r2,8(r16)
1000b780:	85800015 	stw	r22,0(r16)
1000b784:	003fbf06 	br	1000b684 <__alt_data_end+0xf800b684>
1000b788:	81000017 	ldw	r4,0(r16)
1000b78c:	9027883a 	mov	r19,r18
1000b790:	902f883a 	mov	r23,r18
1000b794:	003f6906 	br	1000b53c <__alt_data_end+0xf800b53c>
1000b798:	900d883a 	mov	r6,r18
1000b79c:	01400284 	movi	r5,10
1000b7a0:	e009883a 	mov	r4,fp
1000b7a4:	000c4f40 	call	1000c4f4 <memchr>
1000b7a8:	10003e26 	beq	r2,zero,1000b8a4 <__sfvwrite_r+0x4a4>
1000b7ac:	10800044 	addi	r2,r2,1
1000b7b0:	1727c83a 	sub	r19,r2,fp
1000b7b4:	02000044 	movi	r8,1
1000b7b8:	003f9d06 	br	1000b630 <__alt_data_end+0xf800b630>
1000b7bc:	80800517 	ldw	r2,20(r16)
1000b7c0:	81400417 	ldw	r5,16(r16)
1000b7c4:	81c00017 	ldw	r7,0(r16)
1000b7c8:	10a7883a 	add	r19,r2,r2
1000b7cc:	9885883a 	add	r2,r19,r2
1000b7d0:	1026d7fa 	srli	r19,r2,31
1000b7d4:	396dc83a 	sub	r22,r7,r5
1000b7d8:	b1000044 	addi	r4,r22,1
1000b7dc:	9885883a 	add	r2,r19,r2
1000b7e0:	1027d07a 	srai	r19,r2,1
1000b7e4:	2485883a 	add	r2,r4,r18
1000b7e8:	980d883a 	mov	r6,r19
1000b7ec:	9880022e 	bgeu	r19,r2,1000b7f8 <__sfvwrite_r+0x3f8>
1000b7f0:	1027883a 	mov	r19,r2
1000b7f4:	100d883a 	mov	r6,r2
1000b7f8:	18c1000c 	andi	r3,r3,1024
1000b7fc:	18001c26 	beq	r3,zero,1000b870 <__sfvwrite_r+0x470>
1000b800:	300b883a 	mov	r5,r6
1000b804:	a809883a 	mov	r4,r21
1000b808:	000bce80 	call	1000bce8 <_malloc_r>
1000b80c:	102f883a 	mov	r23,r2
1000b810:	10002926 	beq	r2,zero,1000b8b8 <__sfvwrite_r+0x4b8>
1000b814:	81400417 	ldw	r5,16(r16)
1000b818:	b00d883a 	mov	r6,r22
1000b81c:	1009883a 	mov	r4,r2
1000b820:	000c5d80 	call	1000c5d8 <memcpy>
1000b824:	8080030b 	ldhu	r2,12(r16)
1000b828:	00fedfc4 	movi	r3,-1153
1000b82c:	10c4703a 	and	r2,r2,r3
1000b830:	10802014 	ori	r2,r2,128
1000b834:	8080030d 	sth	r2,12(r16)
1000b838:	bd89883a 	add	r4,r23,r22
1000b83c:	9d8fc83a 	sub	r7,r19,r22
1000b840:	85c00415 	stw	r23,16(r16)
1000b844:	84c00515 	stw	r19,20(r16)
1000b848:	81000015 	stw	r4,0(r16)
1000b84c:	9027883a 	mov	r19,r18
1000b850:	81c00215 	stw	r7,8(r16)
1000b854:	902f883a 	mov	r23,r18
1000b858:	003f3806 	br	1000b53c <__alt_data_end+0xf800b53c>
1000b85c:	800b883a 	mov	r5,r16
1000b860:	a809883a 	mov	r4,r21
1000b864:	000ab900 	call	1000ab90 <_fflush_r>
1000b868:	103fb926 	beq	r2,zero,1000b750 <__alt_data_end+0xf800b750>
1000b86c:	003f6506 	br	1000b604 <__alt_data_end+0xf800b604>
1000b870:	a809883a 	mov	r4,r21
1000b874:	000da5c0 	call	1000da5c <_realloc_r>
1000b878:	102f883a 	mov	r23,r2
1000b87c:	103fee1e 	bne	r2,zero,1000b838 <__alt_data_end+0xf800b838>
1000b880:	81400417 	ldw	r5,16(r16)
1000b884:	a809883a 	mov	r4,r21
1000b888:	000b0f00 	call	1000b0f0 <_free_r>
1000b88c:	8080030b 	ldhu	r2,12(r16)
1000b890:	00ffdfc4 	movi	r3,-129
1000b894:	1884703a 	and	r2,r3,r2
1000b898:	00c00304 	movi	r3,12
1000b89c:	a8c00015 	stw	r3,0(r21)
1000b8a0:	003f5906 	br	1000b608 <__alt_data_end+0xf800b608>
1000b8a4:	94c00044 	addi	r19,r18,1
1000b8a8:	02000044 	movi	r8,1
1000b8ac:	003f6006 	br	1000b630 <__alt_data_end+0xf800b630>
1000b8b0:	00bfffc4 	movi	r2,-1
1000b8b4:	003f0006 	br	1000b4b8 <__alt_data_end+0xf800b4b8>
1000b8b8:	00800304 	movi	r2,12
1000b8bc:	a8800015 	stw	r2,0(r21)
1000b8c0:	8080030b 	ldhu	r2,12(r16)
1000b8c4:	003f5006 	br	1000b608 <__alt_data_end+0xf800b608>

1000b8c8 <_fwalk>:
1000b8c8:	defff704 	addi	sp,sp,-36
1000b8cc:	dd000415 	stw	r20,16(sp)
1000b8d0:	dfc00815 	stw	ra,32(sp)
1000b8d4:	ddc00715 	stw	r23,28(sp)
1000b8d8:	dd800615 	stw	r22,24(sp)
1000b8dc:	dd400515 	stw	r21,20(sp)
1000b8e0:	dcc00315 	stw	r19,12(sp)
1000b8e4:	dc800215 	stw	r18,8(sp)
1000b8e8:	dc400115 	stw	r17,4(sp)
1000b8ec:	dc000015 	stw	r16,0(sp)
1000b8f0:	2500b804 	addi	r20,r4,736
1000b8f4:	a0002326 	beq	r20,zero,1000b984 <_fwalk+0xbc>
1000b8f8:	282b883a 	mov	r21,r5
1000b8fc:	002f883a 	mov	r23,zero
1000b900:	05800044 	movi	r22,1
1000b904:	04ffffc4 	movi	r19,-1
1000b908:	a4400117 	ldw	r17,4(r20)
1000b90c:	a4800217 	ldw	r18,8(r20)
1000b910:	8c7fffc4 	addi	r17,r17,-1
1000b914:	88000d16 	blt	r17,zero,1000b94c <_fwalk+0x84>
1000b918:	94000304 	addi	r16,r18,12
1000b91c:	94800384 	addi	r18,r18,14
1000b920:	8080000b 	ldhu	r2,0(r16)
1000b924:	8c7fffc4 	addi	r17,r17,-1
1000b928:	813ffd04 	addi	r4,r16,-12
1000b92c:	b080042e 	bgeu	r22,r2,1000b940 <_fwalk+0x78>
1000b930:	9080000f 	ldh	r2,0(r18)
1000b934:	14c00226 	beq	r2,r19,1000b940 <_fwalk+0x78>
1000b938:	a83ee83a 	callr	r21
1000b93c:	b8aeb03a 	or	r23,r23,r2
1000b940:	84001a04 	addi	r16,r16,104
1000b944:	94801a04 	addi	r18,r18,104
1000b948:	8cfff51e 	bne	r17,r19,1000b920 <__alt_data_end+0xf800b920>
1000b94c:	a5000017 	ldw	r20,0(r20)
1000b950:	a03fed1e 	bne	r20,zero,1000b908 <__alt_data_end+0xf800b908>
1000b954:	b805883a 	mov	r2,r23
1000b958:	dfc00817 	ldw	ra,32(sp)
1000b95c:	ddc00717 	ldw	r23,28(sp)
1000b960:	dd800617 	ldw	r22,24(sp)
1000b964:	dd400517 	ldw	r21,20(sp)
1000b968:	dd000417 	ldw	r20,16(sp)
1000b96c:	dcc00317 	ldw	r19,12(sp)
1000b970:	dc800217 	ldw	r18,8(sp)
1000b974:	dc400117 	ldw	r17,4(sp)
1000b978:	dc000017 	ldw	r16,0(sp)
1000b97c:	dec00904 	addi	sp,sp,36
1000b980:	f800283a 	ret
1000b984:	002f883a 	mov	r23,zero
1000b988:	003ff206 	br	1000b954 <__alt_data_end+0xf800b954>

1000b98c <_fwalk_reent>:
1000b98c:	defff704 	addi	sp,sp,-36
1000b990:	dd000415 	stw	r20,16(sp)
1000b994:	dfc00815 	stw	ra,32(sp)
1000b998:	ddc00715 	stw	r23,28(sp)
1000b99c:	dd800615 	stw	r22,24(sp)
1000b9a0:	dd400515 	stw	r21,20(sp)
1000b9a4:	dcc00315 	stw	r19,12(sp)
1000b9a8:	dc800215 	stw	r18,8(sp)
1000b9ac:	dc400115 	stw	r17,4(sp)
1000b9b0:	dc000015 	stw	r16,0(sp)
1000b9b4:	2500b804 	addi	r20,r4,736
1000b9b8:	a0002326 	beq	r20,zero,1000ba48 <_fwalk_reent+0xbc>
1000b9bc:	282b883a 	mov	r21,r5
1000b9c0:	2027883a 	mov	r19,r4
1000b9c4:	002f883a 	mov	r23,zero
1000b9c8:	05800044 	movi	r22,1
1000b9cc:	04bfffc4 	movi	r18,-1
1000b9d0:	a4400117 	ldw	r17,4(r20)
1000b9d4:	a4000217 	ldw	r16,8(r20)
1000b9d8:	8c7fffc4 	addi	r17,r17,-1
1000b9dc:	88000c16 	blt	r17,zero,1000ba10 <_fwalk_reent+0x84>
1000b9e0:	84000304 	addi	r16,r16,12
1000b9e4:	8080000b 	ldhu	r2,0(r16)
1000b9e8:	8c7fffc4 	addi	r17,r17,-1
1000b9ec:	817ffd04 	addi	r5,r16,-12
1000b9f0:	b080052e 	bgeu	r22,r2,1000ba08 <_fwalk_reent+0x7c>
1000b9f4:	8080008f 	ldh	r2,2(r16)
1000b9f8:	9809883a 	mov	r4,r19
1000b9fc:	14800226 	beq	r2,r18,1000ba08 <_fwalk_reent+0x7c>
1000ba00:	a83ee83a 	callr	r21
1000ba04:	b8aeb03a 	or	r23,r23,r2
1000ba08:	84001a04 	addi	r16,r16,104
1000ba0c:	8cbff51e 	bne	r17,r18,1000b9e4 <__alt_data_end+0xf800b9e4>
1000ba10:	a5000017 	ldw	r20,0(r20)
1000ba14:	a03fee1e 	bne	r20,zero,1000b9d0 <__alt_data_end+0xf800b9d0>
1000ba18:	b805883a 	mov	r2,r23
1000ba1c:	dfc00817 	ldw	ra,32(sp)
1000ba20:	ddc00717 	ldw	r23,28(sp)
1000ba24:	dd800617 	ldw	r22,24(sp)
1000ba28:	dd400517 	ldw	r21,20(sp)
1000ba2c:	dd000417 	ldw	r20,16(sp)
1000ba30:	dcc00317 	ldw	r19,12(sp)
1000ba34:	dc800217 	ldw	r18,8(sp)
1000ba38:	dc400117 	ldw	r17,4(sp)
1000ba3c:	dc000017 	ldw	r16,0(sp)
1000ba40:	dec00904 	addi	sp,sp,36
1000ba44:	f800283a 	ret
1000ba48:	002f883a 	mov	r23,zero
1000ba4c:	003ff206 	br	1000ba18 <__alt_data_end+0xf800ba18>

1000ba50 <_setlocale_r>:
1000ba50:	30001b26 	beq	r6,zero,1000bac0 <_setlocale_r+0x70>
1000ba54:	01440074 	movhi	r5,4097
1000ba58:	defffe04 	addi	sp,sp,-8
1000ba5c:	2959ee04 	addi	r5,r5,26552
1000ba60:	3009883a 	mov	r4,r6
1000ba64:	dc000015 	stw	r16,0(sp)
1000ba68:	dfc00115 	stw	ra,4(sp)
1000ba6c:	3021883a 	mov	r16,r6
1000ba70:	000e1c40 	call	1000e1c4 <strcmp>
1000ba74:	1000061e 	bne	r2,zero,1000ba90 <_setlocale_r+0x40>
1000ba78:	00840074 	movhi	r2,4097
1000ba7c:	1099ed04 	addi	r2,r2,26548
1000ba80:	dfc00117 	ldw	ra,4(sp)
1000ba84:	dc000017 	ldw	r16,0(sp)
1000ba88:	dec00204 	addi	sp,sp,8
1000ba8c:	f800283a 	ret
1000ba90:	01440074 	movhi	r5,4097
1000ba94:	2959ed04 	addi	r5,r5,26548
1000ba98:	8009883a 	mov	r4,r16
1000ba9c:	000e1c40 	call	1000e1c4 <strcmp>
1000baa0:	103ff526 	beq	r2,zero,1000ba78 <__alt_data_end+0xf800ba78>
1000baa4:	01440074 	movhi	r5,4097
1000baa8:	2959d804 	addi	r5,r5,26464
1000baac:	8009883a 	mov	r4,r16
1000bab0:	000e1c40 	call	1000e1c4 <strcmp>
1000bab4:	103ff026 	beq	r2,zero,1000ba78 <__alt_data_end+0xf800ba78>
1000bab8:	0005883a 	mov	r2,zero
1000babc:	003ff006 	br	1000ba80 <__alt_data_end+0xf800ba80>
1000bac0:	00840074 	movhi	r2,4097
1000bac4:	1099ed04 	addi	r2,r2,26548
1000bac8:	f800283a 	ret

1000bacc <__locale_charset>:
1000bacc:	008400b4 	movhi	r2,4098
1000bad0:	108ff604 	addi	r2,r2,16344
1000bad4:	f800283a 	ret

1000bad8 <__locale_mb_cur_max>:
1000bad8:	008400b4 	movhi	r2,4098
1000badc:	10959204 	addi	r2,r2,22088
1000bae0:	10800017 	ldw	r2,0(r2)
1000bae4:	f800283a 	ret

1000bae8 <__locale_msgcharset>:
1000bae8:	008400b4 	movhi	r2,4098
1000baec:	108fee04 	addi	r2,r2,16312
1000baf0:	f800283a 	ret

1000baf4 <__locale_cjk_lang>:
1000baf4:	0005883a 	mov	r2,zero
1000baf8:	f800283a 	ret

1000bafc <_localeconv_r>:
1000bafc:	008400b4 	movhi	r2,4098
1000bb00:	108ffe04 	addi	r2,r2,16376
1000bb04:	f800283a 	ret

1000bb08 <setlocale>:
1000bb08:	008400b4 	movhi	r2,4098
1000bb0c:	10959104 	addi	r2,r2,22084
1000bb10:	280d883a 	mov	r6,r5
1000bb14:	200b883a 	mov	r5,r4
1000bb18:	11000017 	ldw	r4,0(r2)
1000bb1c:	000ba501 	jmpi	1000ba50 <_setlocale_r>

1000bb20 <localeconv>:
1000bb20:	008400b4 	movhi	r2,4098
1000bb24:	108ffe04 	addi	r2,r2,16376
1000bb28:	f800283a 	ret

1000bb2c <__smakebuf_r>:
1000bb2c:	2880030b 	ldhu	r2,12(r5)
1000bb30:	10c0008c 	andi	r3,r2,2
1000bb34:	1800411e 	bne	r3,zero,1000bc3c <__smakebuf_r+0x110>
1000bb38:	deffec04 	addi	sp,sp,-80
1000bb3c:	dc000f15 	stw	r16,60(sp)
1000bb40:	2821883a 	mov	r16,r5
1000bb44:	2940038f 	ldh	r5,14(r5)
1000bb48:	dc401015 	stw	r17,64(sp)
1000bb4c:	dfc01315 	stw	ra,76(sp)
1000bb50:	dcc01215 	stw	r19,72(sp)
1000bb54:	dc801115 	stw	r18,68(sp)
1000bb58:	2023883a 	mov	r17,r4
1000bb5c:	28001c16 	blt	r5,zero,1000bbd0 <__smakebuf_r+0xa4>
1000bb60:	d80d883a 	mov	r6,sp
1000bb64:	000fe340 	call	1000fe34 <_fstat_r>
1000bb68:	10001816 	blt	r2,zero,1000bbcc <__smakebuf_r+0xa0>
1000bb6c:	d8800117 	ldw	r2,4(sp)
1000bb70:	00e00014 	movui	r3,32768
1000bb74:	10bc000c 	andi	r2,r2,61440
1000bb78:	14c80020 	cmpeqi	r19,r2,8192
1000bb7c:	10c03726 	beq	r2,r3,1000bc5c <__smakebuf_r+0x130>
1000bb80:	80c0030b 	ldhu	r3,12(r16)
1000bb84:	18c20014 	ori	r3,r3,2048
1000bb88:	80c0030d 	sth	r3,12(r16)
1000bb8c:	00c80004 	movi	r3,8192
1000bb90:	10c0521e 	bne	r2,r3,1000bcdc <__smakebuf_r+0x1b0>
1000bb94:	8140038f 	ldh	r5,14(r16)
1000bb98:	8809883a 	mov	r4,r17
1000bb9c:	000fe900 	call	1000fe90 <_isatty_r>
1000bba0:	10004c26 	beq	r2,zero,1000bcd4 <__smakebuf_r+0x1a8>
1000bba4:	8080030b 	ldhu	r2,12(r16)
1000bba8:	80c010c4 	addi	r3,r16,67
1000bbac:	80c00015 	stw	r3,0(r16)
1000bbb0:	10800054 	ori	r2,r2,1
1000bbb4:	8080030d 	sth	r2,12(r16)
1000bbb8:	00800044 	movi	r2,1
1000bbbc:	80c00415 	stw	r3,16(r16)
1000bbc0:	80800515 	stw	r2,20(r16)
1000bbc4:	04810004 	movi	r18,1024
1000bbc8:	00000706 	br	1000bbe8 <__smakebuf_r+0xbc>
1000bbcc:	8080030b 	ldhu	r2,12(r16)
1000bbd0:	10c0200c 	andi	r3,r2,128
1000bbd4:	18001f1e 	bne	r3,zero,1000bc54 <__smakebuf_r+0x128>
1000bbd8:	04810004 	movi	r18,1024
1000bbdc:	10820014 	ori	r2,r2,2048
1000bbe0:	8080030d 	sth	r2,12(r16)
1000bbe4:	0027883a 	mov	r19,zero
1000bbe8:	900b883a 	mov	r5,r18
1000bbec:	8809883a 	mov	r4,r17
1000bbf0:	000bce80 	call	1000bce8 <_malloc_r>
1000bbf4:	10002c26 	beq	r2,zero,1000bca8 <__smakebuf_r+0x17c>
1000bbf8:	80c0030b 	ldhu	r3,12(r16)
1000bbfc:	01040074 	movhi	r4,4097
1000bc00:	212b0904 	addi	r4,r4,-21468
1000bc04:	89000f15 	stw	r4,60(r17)
1000bc08:	18c02014 	ori	r3,r3,128
1000bc0c:	80c0030d 	sth	r3,12(r16)
1000bc10:	80800015 	stw	r2,0(r16)
1000bc14:	80800415 	stw	r2,16(r16)
1000bc18:	84800515 	stw	r18,20(r16)
1000bc1c:	98001a1e 	bne	r19,zero,1000bc88 <__smakebuf_r+0x15c>
1000bc20:	dfc01317 	ldw	ra,76(sp)
1000bc24:	dcc01217 	ldw	r19,72(sp)
1000bc28:	dc801117 	ldw	r18,68(sp)
1000bc2c:	dc401017 	ldw	r17,64(sp)
1000bc30:	dc000f17 	ldw	r16,60(sp)
1000bc34:	dec01404 	addi	sp,sp,80
1000bc38:	f800283a 	ret
1000bc3c:	288010c4 	addi	r2,r5,67
1000bc40:	28800015 	stw	r2,0(r5)
1000bc44:	28800415 	stw	r2,16(r5)
1000bc48:	00800044 	movi	r2,1
1000bc4c:	28800515 	stw	r2,20(r5)
1000bc50:	f800283a 	ret
1000bc54:	04801004 	movi	r18,64
1000bc58:	003fe006 	br	1000bbdc <__alt_data_end+0xf800bbdc>
1000bc5c:	81000a17 	ldw	r4,40(r16)
1000bc60:	00c40074 	movhi	r3,4097
1000bc64:	18f85804 	addi	r3,r3,-7840
1000bc68:	20ffc51e 	bne	r4,r3,1000bb80 <__alt_data_end+0xf800bb80>
1000bc6c:	8080030b 	ldhu	r2,12(r16)
1000bc70:	04810004 	movi	r18,1024
1000bc74:	84801315 	stw	r18,76(r16)
1000bc78:	1484b03a 	or	r2,r2,r18
1000bc7c:	8080030d 	sth	r2,12(r16)
1000bc80:	0027883a 	mov	r19,zero
1000bc84:	003fd806 	br	1000bbe8 <__alt_data_end+0xf800bbe8>
1000bc88:	8140038f 	ldh	r5,14(r16)
1000bc8c:	8809883a 	mov	r4,r17
1000bc90:	000fe900 	call	1000fe90 <_isatty_r>
1000bc94:	103fe226 	beq	r2,zero,1000bc20 <__alt_data_end+0xf800bc20>
1000bc98:	8080030b 	ldhu	r2,12(r16)
1000bc9c:	10800054 	ori	r2,r2,1
1000bca0:	8080030d 	sth	r2,12(r16)
1000bca4:	003fde06 	br	1000bc20 <__alt_data_end+0xf800bc20>
1000bca8:	8080030b 	ldhu	r2,12(r16)
1000bcac:	10c0800c 	andi	r3,r2,512
1000bcb0:	183fdb1e 	bne	r3,zero,1000bc20 <__alt_data_end+0xf800bc20>
1000bcb4:	10800094 	ori	r2,r2,2
1000bcb8:	80c010c4 	addi	r3,r16,67
1000bcbc:	8080030d 	sth	r2,12(r16)
1000bcc0:	00800044 	movi	r2,1
1000bcc4:	80c00015 	stw	r3,0(r16)
1000bcc8:	80c00415 	stw	r3,16(r16)
1000bccc:	80800515 	stw	r2,20(r16)
1000bcd0:	003fd306 	br	1000bc20 <__alt_data_end+0xf800bc20>
1000bcd4:	04810004 	movi	r18,1024
1000bcd8:	003fc306 	br	1000bbe8 <__alt_data_end+0xf800bbe8>
1000bcdc:	0027883a 	mov	r19,zero
1000bce0:	04810004 	movi	r18,1024
1000bce4:	003fc006 	br	1000bbe8 <__alt_data_end+0xf800bbe8>

1000bce8 <_malloc_r>:
1000bce8:	defff504 	addi	sp,sp,-44
1000bcec:	dc800315 	stw	r18,12(sp)
1000bcf0:	dfc00a15 	stw	ra,40(sp)
1000bcf4:	df000915 	stw	fp,36(sp)
1000bcf8:	ddc00815 	stw	r23,32(sp)
1000bcfc:	dd800715 	stw	r22,28(sp)
1000bd00:	dd400615 	stw	r21,24(sp)
1000bd04:	dd000515 	stw	r20,20(sp)
1000bd08:	dcc00415 	stw	r19,16(sp)
1000bd0c:	dc400215 	stw	r17,8(sp)
1000bd10:	dc000115 	stw	r16,4(sp)
1000bd14:	288002c4 	addi	r2,r5,11
1000bd18:	00c00584 	movi	r3,22
1000bd1c:	2025883a 	mov	r18,r4
1000bd20:	18807f2e 	bgeu	r3,r2,1000bf20 <_malloc_r+0x238>
1000bd24:	047ffe04 	movi	r17,-8
1000bd28:	1462703a 	and	r17,r2,r17
1000bd2c:	8800a316 	blt	r17,zero,1000bfbc <_malloc_r+0x2d4>
1000bd30:	8940a236 	bltu	r17,r5,1000bfbc <_malloc_r+0x2d4>
1000bd34:	0013ce40 	call	10013ce4 <__malloc_lock>
1000bd38:	00807dc4 	movi	r2,503
1000bd3c:	1441e92e 	bgeu	r2,r17,1000c4e4 <_malloc_r+0x7fc>
1000bd40:	8804d27a 	srli	r2,r17,9
1000bd44:	1000a126 	beq	r2,zero,1000bfcc <_malloc_r+0x2e4>
1000bd48:	00c00104 	movi	r3,4
1000bd4c:	18811e36 	bltu	r3,r2,1000c1c8 <_malloc_r+0x4e0>
1000bd50:	8804d1ba 	srli	r2,r17,6
1000bd54:	12000e44 	addi	r8,r2,57
1000bd58:	11c00e04 	addi	r7,r2,56
1000bd5c:	4209883a 	add	r4,r8,r8
1000bd60:	04c400b4 	movhi	r19,4098
1000bd64:	2109883a 	add	r4,r4,r4
1000bd68:	9cd00c04 	addi	r19,r19,16432
1000bd6c:	2109883a 	add	r4,r4,r4
1000bd70:	9909883a 	add	r4,r19,r4
1000bd74:	24000117 	ldw	r16,4(r4)
1000bd78:	213ffe04 	addi	r4,r4,-8
1000bd7c:	24009726 	beq	r4,r16,1000bfdc <_malloc_r+0x2f4>
1000bd80:	80800117 	ldw	r2,4(r16)
1000bd84:	01bfff04 	movi	r6,-4
1000bd88:	014003c4 	movi	r5,15
1000bd8c:	1184703a 	and	r2,r2,r6
1000bd90:	1447c83a 	sub	r3,r2,r17
1000bd94:	28c00716 	blt	r5,r3,1000bdb4 <_malloc_r+0xcc>
1000bd98:	1800920e 	bge	r3,zero,1000bfe4 <_malloc_r+0x2fc>
1000bd9c:	84000317 	ldw	r16,12(r16)
1000bda0:	24008e26 	beq	r4,r16,1000bfdc <_malloc_r+0x2f4>
1000bda4:	80800117 	ldw	r2,4(r16)
1000bda8:	1184703a 	and	r2,r2,r6
1000bdac:	1447c83a 	sub	r3,r2,r17
1000bdb0:	28fff90e 	bge	r5,r3,1000bd98 <__alt_data_end+0xf800bd98>
1000bdb4:	3809883a 	mov	r4,r7
1000bdb8:	018400b4 	movhi	r6,4098
1000bdbc:	9c000417 	ldw	r16,16(r19)
1000bdc0:	31900c04 	addi	r6,r6,16432
1000bdc4:	32000204 	addi	r8,r6,8
1000bdc8:	82013426 	beq	r16,r8,1000c29c <_malloc_r+0x5b4>
1000bdcc:	80c00117 	ldw	r3,4(r16)
1000bdd0:	00bfff04 	movi	r2,-4
1000bdd4:	188e703a 	and	r7,r3,r2
1000bdd8:	3c45c83a 	sub	r2,r7,r17
1000bddc:	00c003c4 	movi	r3,15
1000bde0:	18811f16 	blt	r3,r2,1000c260 <_malloc_r+0x578>
1000bde4:	32000515 	stw	r8,20(r6)
1000bde8:	32000415 	stw	r8,16(r6)
1000bdec:	10007f0e 	bge	r2,zero,1000bfec <_malloc_r+0x304>
1000bdf0:	00807fc4 	movi	r2,511
1000bdf4:	11c0fd36 	bltu	r2,r7,1000c1ec <_malloc_r+0x504>
1000bdf8:	3806d0fa 	srli	r3,r7,3
1000bdfc:	01c00044 	movi	r7,1
1000be00:	30800117 	ldw	r2,4(r6)
1000be04:	19400044 	addi	r5,r3,1
1000be08:	294b883a 	add	r5,r5,r5
1000be0c:	1807d0ba 	srai	r3,r3,2
1000be10:	294b883a 	add	r5,r5,r5
1000be14:	294b883a 	add	r5,r5,r5
1000be18:	298b883a 	add	r5,r5,r6
1000be1c:	38c6983a 	sll	r3,r7,r3
1000be20:	29c00017 	ldw	r7,0(r5)
1000be24:	2a7ffe04 	addi	r9,r5,-8
1000be28:	1886b03a 	or	r3,r3,r2
1000be2c:	82400315 	stw	r9,12(r16)
1000be30:	81c00215 	stw	r7,8(r16)
1000be34:	30c00115 	stw	r3,4(r6)
1000be38:	2c000015 	stw	r16,0(r5)
1000be3c:	3c000315 	stw	r16,12(r7)
1000be40:	2005d0ba 	srai	r2,r4,2
1000be44:	01400044 	movi	r5,1
1000be48:	288a983a 	sll	r5,r5,r2
1000be4c:	19406f36 	bltu	r3,r5,1000c00c <_malloc_r+0x324>
1000be50:	28c4703a 	and	r2,r5,r3
1000be54:	10000a1e 	bne	r2,zero,1000be80 <_malloc_r+0x198>
1000be58:	00bfff04 	movi	r2,-4
1000be5c:	294b883a 	add	r5,r5,r5
1000be60:	2088703a 	and	r4,r4,r2
1000be64:	28c4703a 	and	r2,r5,r3
1000be68:	21000104 	addi	r4,r4,4
1000be6c:	1000041e 	bne	r2,zero,1000be80 <_malloc_r+0x198>
1000be70:	294b883a 	add	r5,r5,r5
1000be74:	28c4703a 	and	r2,r5,r3
1000be78:	21000104 	addi	r4,r4,4
1000be7c:	103ffc26 	beq	r2,zero,1000be70 <__alt_data_end+0xf800be70>
1000be80:	02bfff04 	movi	r10,-4
1000be84:	024003c4 	movi	r9,15
1000be88:	21800044 	addi	r6,r4,1
1000be8c:	318d883a 	add	r6,r6,r6
1000be90:	318d883a 	add	r6,r6,r6
1000be94:	318d883a 	add	r6,r6,r6
1000be98:	998d883a 	add	r6,r19,r6
1000be9c:	333ffe04 	addi	r12,r6,-8
1000bea0:	2017883a 	mov	r11,r4
1000bea4:	31800104 	addi	r6,r6,4
1000bea8:	34000017 	ldw	r16,0(r6)
1000beac:	31fffd04 	addi	r7,r6,-12
1000beb0:	81c0041e 	bne	r16,r7,1000bec4 <_malloc_r+0x1dc>
1000beb4:	0000fb06 	br	1000c2a4 <_malloc_r+0x5bc>
1000beb8:	1801030e 	bge	r3,zero,1000c2c8 <_malloc_r+0x5e0>
1000bebc:	84000317 	ldw	r16,12(r16)
1000bec0:	81c0f826 	beq	r16,r7,1000c2a4 <_malloc_r+0x5bc>
1000bec4:	80800117 	ldw	r2,4(r16)
1000bec8:	1284703a 	and	r2,r2,r10
1000becc:	1447c83a 	sub	r3,r2,r17
1000bed0:	48fff90e 	bge	r9,r3,1000beb8 <__alt_data_end+0xf800beb8>
1000bed4:	80800317 	ldw	r2,12(r16)
1000bed8:	81000217 	ldw	r4,8(r16)
1000bedc:	89400054 	ori	r5,r17,1
1000bee0:	81400115 	stw	r5,4(r16)
1000bee4:	20800315 	stw	r2,12(r4)
1000bee8:	11000215 	stw	r4,8(r2)
1000beec:	8463883a 	add	r17,r16,r17
1000bef0:	9c400515 	stw	r17,20(r19)
1000bef4:	9c400415 	stw	r17,16(r19)
1000bef8:	18800054 	ori	r2,r3,1
1000befc:	88800115 	stw	r2,4(r17)
1000bf00:	8a000315 	stw	r8,12(r17)
1000bf04:	8a000215 	stw	r8,8(r17)
1000bf08:	88e3883a 	add	r17,r17,r3
1000bf0c:	88c00015 	stw	r3,0(r17)
1000bf10:	9009883a 	mov	r4,r18
1000bf14:	0013d080 	call	10013d08 <__malloc_unlock>
1000bf18:	80800204 	addi	r2,r16,8
1000bf1c:	00001b06 	br	1000bf8c <_malloc_r+0x2a4>
1000bf20:	04400404 	movi	r17,16
1000bf24:	89402536 	bltu	r17,r5,1000bfbc <_malloc_r+0x2d4>
1000bf28:	0013ce40 	call	10013ce4 <__malloc_lock>
1000bf2c:	00800184 	movi	r2,6
1000bf30:	01000084 	movi	r4,2
1000bf34:	04c400b4 	movhi	r19,4098
1000bf38:	1085883a 	add	r2,r2,r2
1000bf3c:	9cd00c04 	addi	r19,r19,16432
1000bf40:	1085883a 	add	r2,r2,r2
1000bf44:	9885883a 	add	r2,r19,r2
1000bf48:	14000117 	ldw	r16,4(r2)
1000bf4c:	10fffe04 	addi	r3,r2,-8
1000bf50:	80c0d926 	beq	r16,r3,1000c2b8 <_malloc_r+0x5d0>
1000bf54:	80c00117 	ldw	r3,4(r16)
1000bf58:	81000317 	ldw	r4,12(r16)
1000bf5c:	00bfff04 	movi	r2,-4
1000bf60:	1884703a 	and	r2,r3,r2
1000bf64:	81400217 	ldw	r5,8(r16)
1000bf68:	8085883a 	add	r2,r16,r2
1000bf6c:	10c00117 	ldw	r3,4(r2)
1000bf70:	29000315 	stw	r4,12(r5)
1000bf74:	21400215 	stw	r5,8(r4)
1000bf78:	18c00054 	ori	r3,r3,1
1000bf7c:	10c00115 	stw	r3,4(r2)
1000bf80:	9009883a 	mov	r4,r18
1000bf84:	0013d080 	call	10013d08 <__malloc_unlock>
1000bf88:	80800204 	addi	r2,r16,8
1000bf8c:	dfc00a17 	ldw	ra,40(sp)
1000bf90:	df000917 	ldw	fp,36(sp)
1000bf94:	ddc00817 	ldw	r23,32(sp)
1000bf98:	dd800717 	ldw	r22,28(sp)
1000bf9c:	dd400617 	ldw	r21,24(sp)
1000bfa0:	dd000517 	ldw	r20,20(sp)
1000bfa4:	dcc00417 	ldw	r19,16(sp)
1000bfa8:	dc800317 	ldw	r18,12(sp)
1000bfac:	dc400217 	ldw	r17,8(sp)
1000bfb0:	dc000117 	ldw	r16,4(sp)
1000bfb4:	dec00b04 	addi	sp,sp,44
1000bfb8:	f800283a 	ret
1000bfbc:	00800304 	movi	r2,12
1000bfc0:	90800015 	stw	r2,0(r18)
1000bfc4:	0005883a 	mov	r2,zero
1000bfc8:	003ff006 	br	1000bf8c <__alt_data_end+0xf800bf8c>
1000bfcc:	01002004 	movi	r4,128
1000bfd0:	02001004 	movi	r8,64
1000bfd4:	01c00fc4 	movi	r7,63
1000bfd8:	003f6106 	br	1000bd60 <__alt_data_end+0xf800bd60>
1000bfdc:	4009883a 	mov	r4,r8
1000bfe0:	003f7506 	br	1000bdb8 <__alt_data_end+0xf800bdb8>
1000bfe4:	81000317 	ldw	r4,12(r16)
1000bfe8:	003fde06 	br	1000bf64 <__alt_data_end+0xf800bf64>
1000bfec:	81c5883a 	add	r2,r16,r7
1000bff0:	11400117 	ldw	r5,4(r2)
1000bff4:	9009883a 	mov	r4,r18
1000bff8:	29400054 	ori	r5,r5,1
1000bffc:	11400115 	stw	r5,4(r2)
1000c000:	0013d080 	call	10013d08 <__malloc_unlock>
1000c004:	80800204 	addi	r2,r16,8
1000c008:	003fe006 	br	1000bf8c <__alt_data_end+0xf800bf8c>
1000c00c:	9c000217 	ldw	r16,8(r19)
1000c010:	00bfff04 	movi	r2,-4
1000c014:	85800117 	ldw	r22,4(r16)
1000c018:	b0ac703a 	and	r22,r22,r2
1000c01c:	b4400336 	bltu	r22,r17,1000c02c <_malloc_r+0x344>
1000c020:	b445c83a 	sub	r2,r22,r17
1000c024:	00c003c4 	movi	r3,15
1000c028:	18805d16 	blt	r3,r2,1000c1a0 <_malloc_r+0x4b8>
1000c02c:	05c400b4 	movhi	r23,4098
1000c030:	008400f4 	movhi	r2,4099
1000c034:	1090c004 	addi	r2,r2,17152
1000c038:	bdd59304 	addi	r23,r23,22092
1000c03c:	15400017 	ldw	r21,0(r2)
1000c040:	b8c00017 	ldw	r3,0(r23)
1000c044:	00bfffc4 	movi	r2,-1
1000c048:	858d883a 	add	r6,r16,r22
1000c04c:	8d6b883a 	add	r21,r17,r21
1000c050:	1880ea26 	beq	r3,r2,1000c3fc <_malloc_r+0x714>
1000c054:	ad4403c4 	addi	r21,r21,4111
1000c058:	00bc0004 	movi	r2,-4096
1000c05c:	a8aa703a 	and	r21,r21,r2
1000c060:	a80b883a 	mov	r5,r21
1000c064:	9009883a 	mov	r4,r18
1000c068:	d9800015 	stw	r6,0(sp)
1000c06c:	000e0340 	call	1000e034 <_sbrk_r>
1000c070:	1029883a 	mov	r20,r2
1000c074:	00bfffc4 	movi	r2,-1
1000c078:	d9800017 	ldw	r6,0(sp)
1000c07c:	a080e826 	beq	r20,r2,1000c420 <_malloc_r+0x738>
1000c080:	a180a636 	bltu	r20,r6,1000c31c <_malloc_r+0x634>
1000c084:	070400f4 	movhi	fp,4099
1000c088:	e710c904 	addi	fp,fp,17188
1000c08c:	e0800017 	ldw	r2,0(fp)
1000c090:	a887883a 	add	r3,r21,r2
1000c094:	e0c00015 	stw	r3,0(fp)
1000c098:	3500e626 	beq	r6,r20,1000c434 <_malloc_r+0x74c>
1000c09c:	b9000017 	ldw	r4,0(r23)
1000c0a0:	00bfffc4 	movi	r2,-1
1000c0a4:	2080ee26 	beq	r4,r2,1000c460 <_malloc_r+0x778>
1000c0a8:	a185c83a 	sub	r2,r20,r6
1000c0ac:	10c5883a 	add	r2,r2,r3
1000c0b0:	e0800015 	stw	r2,0(fp)
1000c0b4:	a0c001cc 	andi	r3,r20,7
1000c0b8:	1800bc26 	beq	r3,zero,1000c3ac <_malloc_r+0x6c4>
1000c0bc:	a0e9c83a 	sub	r20,r20,r3
1000c0c0:	00840204 	movi	r2,4104
1000c0c4:	a5000204 	addi	r20,r20,8
1000c0c8:	10c7c83a 	sub	r3,r2,r3
1000c0cc:	a545883a 	add	r2,r20,r21
1000c0d0:	1083ffcc 	andi	r2,r2,4095
1000c0d4:	18abc83a 	sub	r21,r3,r2
1000c0d8:	a80b883a 	mov	r5,r21
1000c0dc:	9009883a 	mov	r4,r18
1000c0e0:	000e0340 	call	1000e034 <_sbrk_r>
1000c0e4:	00ffffc4 	movi	r3,-1
1000c0e8:	10c0e126 	beq	r2,r3,1000c470 <_malloc_r+0x788>
1000c0ec:	1505c83a 	sub	r2,r2,r20
1000c0f0:	1545883a 	add	r2,r2,r21
1000c0f4:	10800054 	ori	r2,r2,1
1000c0f8:	e0c00017 	ldw	r3,0(fp)
1000c0fc:	9d000215 	stw	r20,8(r19)
1000c100:	a0800115 	stw	r2,4(r20)
1000c104:	a8c7883a 	add	r3,r21,r3
1000c108:	e0c00015 	stw	r3,0(fp)
1000c10c:	84c00e26 	beq	r16,r19,1000c148 <_malloc_r+0x460>
1000c110:	018003c4 	movi	r6,15
1000c114:	3580a72e 	bgeu	r6,r22,1000c3b4 <_malloc_r+0x6cc>
1000c118:	81400117 	ldw	r5,4(r16)
1000c11c:	013ffe04 	movi	r4,-8
1000c120:	b0bffd04 	addi	r2,r22,-12
1000c124:	1104703a 	and	r2,r2,r4
1000c128:	2900004c 	andi	r4,r5,1
1000c12c:	2088b03a 	or	r4,r4,r2
1000c130:	81000115 	stw	r4,4(r16)
1000c134:	01400144 	movi	r5,5
1000c138:	8089883a 	add	r4,r16,r2
1000c13c:	21400115 	stw	r5,4(r4)
1000c140:	21400215 	stw	r5,8(r4)
1000c144:	3080cd36 	bltu	r6,r2,1000c47c <_malloc_r+0x794>
1000c148:	008400f4 	movhi	r2,4099
1000c14c:	1090bf04 	addi	r2,r2,17148
1000c150:	11000017 	ldw	r4,0(r2)
1000c154:	20c0012e 	bgeu	r4,r3,1000c15c <_malloc_r+0x474>
1000c158:	10c00015 	stw	r3,0(r2)
1000c15c:	008400f4 	movhi	r2,4099
1000c160:	1090be04 	addi	r2,r2,17144
1000c164:	11000017 	ldw	r4,0(r2)
1000c168:	9c000217 	ldw	r16,8(r19)
1000c16c:	20c0012e 	bgeu	r4,r3,1000c174 <_malloc_r+0x48c>
1000c170:	10c00015 	stw	r3,0(r2)
1000c174:	80c00117 	ldw	r3,4(r16)
1000c178:	00bfff04 	movi	r2,-4
1000c17c:	1886703a 	and	r3,r3,r2
1000c180:	1c45c83a 	sub	r2,r3,r17
1000c184:	1c400236 	bltu	r3,r17,1000c190 <_malloc_r+0x4a8>
1000c188:	00c003c4 	movi	r3,15
1000c18c:	18800416 	blt	r3,r2,1000c1a0 <_malloc_r+0x4b8>
1000c190:	9009883a 	mov	r4,r18
1000c194:	0013d080 	call	10013d08 <__malloc_unlock>
1000c198:	0005883a 	mov	r2,zero
1000c19c:	003f7b06 	br	1000bf8c <__alt_data_end+0xf800bf8c>
1000c1a0:	88c00054 	ori	r3,r17,1
1000c1a4:	80c00115 	stw	r3,4(r16)
1000c1a8:	8463883a 	add	r17,r16,r17
1000c1ac:	10800054 	ori	r2,r2,1
1000c1b0:	9c400215 	stw	r17,8(r19)
1000c1b4:	88800115 	stw	r2,4(r17)
1000c1b8:	9009883a 	mov	r4,r18
1000c1bc:	0013d080 	call	10013d08 <__malloc_unlock>
1000c1c0:	80800204 	addi	r2,r16,8
1000c1c4:	003f7106 	br	1000bf8c <__alt_data_end+0xf800bf8c>
1000c1c8:	00c00504 	movi	r3,20
1000c1cc:	18804a2e 	bgeu	r3,r2,1000c2f8 <_malloc_r+0x610>
1000c1d0:	00c01504 	movi	r3,84
1000c1d4:	18806e36 	bltu	r3,r2,1000c390 <_malloc_r+0x6a8>
1000c1d8:	8804d33a 	srli	r2,r17,12
1000c1dc:	12001bc4 	addi	r8,r2,111
1000c1e0:	11c01b84 	addi	r7,r2,110
1000c1e4:	4209883a 	add	r4,r8,r8
1000c1e8:	003edd06 	br	1000bd60 <__alt_data_end+0xf800bd60>
1000c1ec:	3804d27a 	srli	r2,r7,9
1000c1f0:	00c00104 	movi	r3,4
1000c1f4:	1880442e 	bgeu	r3,r2,1000c308 <_malloc_r+0x620>
1000c1f8:	00c00504 	movi	r3,20
1000c1fc:	18808136 	bltu	r3,r2,1000c404 <_malloc_r+0x71c>
1000c200:	11401704 	addi	r5,r2,92
1000c204:	10c016c4 	addi	r3,r2,91
1000c208:	294b883a 	add	r5,r5,r5
1000c20c:	294b883a 	add	r5,r5,r5
1000c210:	294b883a 	add	r5,r5,r5
1000c214:	994b883a 	add	r5,r19,r5
1000c218:	28800017 	ldw	r2,0(r5)
1000c21c:	018400b4 	movhi	r6,4098
1000c220:	297ffe04 	addi	r5,r5,-8
1000c224:	31900c04 	addi	r6,r6,16432
1000c228:	28806526 	beq	r5,r2,1000c3c0 <_malloc_r+0x6d8>
1000c22c:	01bfff04 	movi	r6,-4
1000c230:	10c00117 	ldw	r3,4(r2)
1000c234:	1986703a 	and	r3,r3,r6
1000c238:	38c0022e 	bgeu	r7,r3,1000c244 <_malloc_r+0x55c>
1000c23c:	10800217 	ldw	r2,8(r2)
1000c240:	28bffb1e 	bne	r5,r2,1000c230 <__alt_data_end+0xf800c230>
1000c244:	11400317 	ldw	r5,12(r2)
1000c248:	98c00117 	ldw	r3,4(r19)
1000c24c:	81400315 	stw	r5,12(r16)
1000c250:	80800215 	stw	r2,8(r16)
1000c254:	2c000215 	stw	r16,8(r5)
1000c258:	14000315 	stw	r16,12(r2)
1000c25c:	003ef806 	br	1000be40 <__alt_data_end+0xf800be40>
1000c260:	88c00054 	ori	r3,r17,1
1000c264:	80c00115 	stw	r3,4(r16)
1000c268:	8463883a 	add	r17,r16,r17
1000c26c:	34400515 	stw	r17,20(r6)
1000c270:	34400415 	stw	r17,16(r6)
1000c274:	10c00054 	ori	r3,r2,1
1000c278:	8a000315 	stw	r8,12(r17)
1000c27c:	8a000215 	stw	r8,8(r17)
1000c280:	88c00115 	stw	r3,4(r17)
1000c284:	88a3883a 	add	r17,r17,r2
1000c288:	88800015 	stw	r2,0(r17)
1000c28c:	9009883a 	mov	r4,r18
1000c290:	0013d080 	call	10013d08 <__malloc_unlock>
1000c294:	80800204 	addi	r2,r16,8
1000c298:	003f3c06 	br	1000bf8c <__alt_data_end+0xf800bf8c>
1000c29c:	30c00117 	ldw	r3,4(r6)
1000c2a0:	003ee706 	br	1000be40 <__alt_data_end+0xf800be40>
1000c2a4:	5ac00044 	addi	r11,r11,1
1000c2a8:	588000cc 	andi	r2,r11,3
1000c2ac:	31800204 	addi	r6,r6,8
1000c2b0:	103efd1e 	bne	r2,zero,1000bea8 <__alt_data_end+0xf800bea8>
1000c2b4:	00002406 	br	1000c348 <_malloc_r+0x660>
1000c2b8:	14000317 	ldw	r16,12(r2)
1000c2bc:	143f251e 	bne	r2,r16,1000bf54 <__alt_data_end+0xf800bf54>
1000c2c0:	21000084 	addi	r4,r4,2
1000c2c4:	003ebc06 	br	1000bdb8 <__alt_data_end+0xf800bdb8>
1000c2c8:	8085883a 	add	r2,r16,r2
1000c2cc:	10c00117 	ldw	r3,4(r2)
1000c2d0:	81000317 	ldw	r4,12(r16)
1000c2d4:	81400217 	ldw	r5,8(r16)
1000c2d8:	18c00054 	ori	r3,r3,1
1000c2dc:	10c00115 	stw	r3,4(r2)
1000c2e0:	29000315 	stw	r4,12(r5)
1000c2e4:	21400215 	stw	r5,8(r4)
1000c2e8:	9009883a 	mov	r4,r18
1000c2ec:	0013d080 	call	10013d08 <__malloc_unlock>
1000c2f0:	80800204 	addi	r2,r16,8
1000c2f4:	003f2506 	br	1000bf8c <__alt_data_end+0xf800bf8c>
1000c2f8:	12001704 	addi	r8,r2,92
1000c2fc:	11c016c4 	addi	r7,r2,91
1000c300:	4209883a 	add	r4,r8,r8
1000c304:	003e9606 	br	1000bd60 <__alt_data_end+0xf800bd60>
1000c308:	3804d1ba 	srli	r2,r7,6
1000c30c:	11400e44 	addi	r5,r2,57
1000c310:	10c00e04 	addi	r3,r2,56
1000c314:	294b883a 	add	r5,r5,r5
1000c318:	003fbc06 	br	1000c20c <__alt_data_end+0xf800c20c>
1000c31c:	84ff5926 	beq	r16,r19,1000c084 <__alt_data_end+0xf800c084>
1000c320:	008400b4 	movhi	r2,4098
1000c324:	10900c04 	addi	r2,r2,16432
1000c328:	14000217 	ldw	r16,8(r2)
1000c32c:	00bfff04 	movi	r2,-4
1000c330:	80c00117 	ldw	r3,4(r16)
1000c334:	1886703a 	and	r3,r3,r2
1000c338:	003f9106 	br	1000c180 <__alt_data_end+0xf800c180>
1000c33c:	60800217 	ldw	r2,8(r12)
1000c340:	213fffc4 	addi	r4,r4,-1
1000c344:	1300651e 	bne	r2,r12,1000c4dc <_malloc_r+0x7f4>
1000c348:	208000cc 	andi	r2,r4,3
1000c34c:	633ffe04 	addi	r12,r12,-8
1000c350:	103ffa1e 	bne	r2,zero,1000c33c <__alt_data_end+0xf800c33c>
1000c354:	98800117 	ldw	r2,4(r19)
1000c358:	0146303a 	nor	r3,zero,r5
1000c35c:	1884703a 	and	r2,r3,r2
1000c360:	98800115 	stw	r2,4(r19)
1000c364:	294b883a 	add	r5,r5,r5
1000c368:	117f2836 	bltu	r2,r5,1000c00c <__alt_data_end+0xf800c00c>
1000c36c:	283f2726 	beq	r5,zero,1000c00c <__alt_data_end+0xf800c00c>
1000c370:	2886703a 	and	r3,r5,r2
1000c374:	5809883a 	mov	r4,r11
1000c378:	183ec31e 	bne	r3,zero,1000be88 <__alt_data_end+0xf800be88>
1000c37c:	294b883a 	add	r5,r5,r5
1000c380:	2886703a 	and	r3,r5,r2
1000c384:	21000104 	addi	r4,r4,4
1000c388:	183ffc26 	beq	r3,zero,1000c37c <__alt_data_end+0xf800c37c>
1000c38c:	003ebe06 	br	1000be88 <__alt_data_end+0xf800be88>
1000c390:	00c05504 	movi	r3,340
1000c394:	18801236 	bltu	r3,r2,1000c3e0 <_malloc_r+0x6f8>
1000c398:	8804d3fa 	srli	r2,r17,15
1000c39c:	12001e04 	addi	r8,r2,120
1000c3a0:	11c01dc4 	addi	r7,r2,119
1000c3a4:	4209883a 	add	r4,r8,r8
1000c3a8:	003e6d06 	br	1000bd60 <__alt_data_end+0xf800bd60>
1000c3ac:	00c40004 	movi	r3,4096
1000c3b0:	003f4606 	br	1000c0cc <__alt_data_end+0xf800c0cc>
1000c3b4:	00800044 	movi	r2,1
1000c3b8:	a0800115 	stw	r2,4(r20)
1000c3bc:	003f7406 	br	1000c190 <__alt_data_end+0xf800c190>
1000c3c0:	1805d0ba 	srai	r2,r3,2
1000c3c4:	01c00044 	movi	r7,1
1000c3c8:	30c00117 	ldw	r3,4(r6)
1000c3cc:	388e983a 	sll	r7,r7,r2
1000c3d0:	2805883a 	mov	r2,r5
1000c3d4:	38c6b03a 	or	r3,r7,r3
1000c3d8:	30c00115 	stw	r3,4(r6)
1000c3dc:	003f9b06 	br	1000c24c <__alt_data_end+0xf800c24c>
1000c3e0:	00c15504 	movi	r3,1364
1000c3e4:	18801a36 	bltu	r3,r2,1000c450 <_malloc_r+0x768>
1000c3e8:	8804d4ba 	srli	r2,r17,18
1000c3ec:	12001f44 	addi	r8,r2,125
1000c3f0:	11c01f04 	addi	r7,r2,124
1000c3f4:	4209883a 	add	r4,r8,r8
1000c3f8:	003e5906 	br	1000bd60 <__alt_data_end+0xf800bd60>
1000c3fc:	ad400404 	addi	r21,r21,16
1000c400:	003f1706 	br	1000c060 <__alt_data_end+0xf800c060>
1000c404:	00c01504 	movi	r3,84
1000c408:	18802336 	bltu	r3,r2,1000c498 <_malloc_r+0x7b0>
1000c40c:	3804d33a 	srli	r2,r7,12
1000c410:	11401bc4 	addi	r5,r2,111
1000c414:	10c01b84 	addi	r3,r2,110
1000c418:	294b883a 	add	r5,r5,r5
1000c41c:	003f7b06 	br	1000c20c <__alt_data_end+0xf800c20c>
1000c420:	9c000217 	ldw	r16,8(r19)
1000c424:	00bfff04 	movi	r2,-4
1000c428:	80c00117 	ldw	r3,4(r16)
1000c42c:	1886703a 	and	r3,r3,r2
1000c430:	003f5306 	br	1000c180 <__alt_data_end+0xf800c180>
1000c434:	3083ffcc 	andi	r2,r6,4095
1000c438:	103f181e 	bne	r2,zero,1000c09c <__alt_data_end+0xf800c09c>
1000c43c:	99000217 	ldw	r4,8(r19)
1000c440:	b545883a 	add	r2,r22,r21
1000c444:	10800054 	ori	r2,r2,1
1000c448:	20800115 	stw	r2,4(r4)
1000c44c:	003f3e06 	br	1000c148 <__alt_data_end+0xf800c148>
1000c450:	01003f84 	movi	r4,254
1000c454:	02001fc4 	movi	r8,127
1000c458:	01c01f84 	movi	r7,126
1000c45c:	003e4006 	br	1000bd60 <__alt_data_end+0xf800bd60>
1000c460:	008400b4 	movhi	r2,4098
1000c464:	10959304 	addi	r2,r2,22092
1000c468:	15000015 	stw	r20,0(r2)
1000c46c:	003f1106 	br	1000c0b4 <__alt_data_end+0xf800c0b4>
1000c470:	00800044 	movi	r2,1
1000c474:	002b883a 	mov	r21,zero
1000c478:	003f1f06 	br	1000c0f8 <__alt_data_end+0xf800c0f8>
1000c47c:	81400204 	addi	r5,r16,8
1000c480:	9009883a 	mov	r4,r18
1000c484:	000b0f00 	call	1000b0f0 <_free_r>
1000c488:	008400f4 	movhi	r2,4099
1000c48c:	1090c904 	addi	r2,r2,17188
1000c490:	10c00017 	ldw	r3,0(r2)
1000c494:	003f2c06 	br	1000c148 <__alt_data_end+0xf800c148>
1000c498:	00c05504 	movi	r3,340
1000c49c:	18800536 	bltu	r3,r2,1000c4b4 <_malloc_r+0x7cc>
1000c4a0:	3804d3fa 	srli	r2,r7,15
1000c4a4:	11401e04 	addi	r5,r2,120
1000c4a8:	10c01dc4 	addi	r3,r2,119
1000c4ac:	294b883a 	add	r5,r5,r5
1000c4b0:	003f5606 	br	1000c20c <__alt_data_end+0xf800c20c>
1000c4b4:	00c15504 	movi	r3,1364
1000c4b8:	18800536 	bltu	r3,r2,1000c4d0 <_malloc_r+0x7e8>
1000c4bc:	3804d4ba 	srli	r2,r7,18
1000c4c0:	11401f44 	addi	r5,r2,125
1000c4c4:	10c01f04 	addi	r3,r2,124
1000c4c8:	294b883a 	add	r5,r5,r5
1000c4cc:	003f4f06 	br	1000c20c <__alt_data_end+0xf800c20c>
1000c4d0:	01403f84 	movi	r5,254
1000c4d4:	00c01f84 	movi	r3,126
1000c4d8:	003f4c06 	br	1000c20c <__alt_data_end+0xf800c20c>
1000c4dc:	98800117 	ldw	r2,4(r19)
1000c4e0:	003fa006 	br	1000c364 <__alt_data_end+0xf800c364>
1000c4e4:	8808d0fa 	srli	r4,r17,3
1000c4e8:	20800044 	addi	r2,r4,1
1000c4ec:	1085883a 	add	r2,r2,r2
1000c4f0:	003e9006 	br	1000bf34 <__alt_data_end+0xf800bf34>

1000c4f4 <memchr>:
1000c4f4:	208000cc 	andi	r2,r4,3
1000c4f8:	280f883a 	mov	r7,r5
1000c4fc:	10003426 	beq	r2,zero,1000c5d0 <memchr+0xdc>
1000c500:	30bfffc4 	addi	r2,r6,-1
1000c504:	30001a26 	beq	r6,zero,1000c570 <memchr+0x7c>
1000c508:	20c00003 	ldbu	r3,0(r4)
1000c50c:	29803fcc 	andi	r6,r5,255
1000c510:	30c0051e 	bne	r6,r3,1000c528 <memchr+0x34>
1000c514:	00001806 	br	1000c578 <memchr+0x84>
1000c518:	10001526 	beq	r2,zero,1000c570 <memchr+0x7c>
1000c51c:	20c00003 	ldbu	r3,0(r4)
1000c520:	10bfffc4 	addi	r2,r2,-1
1000c524:	30c01426 	beq	r6,r3,1000c578 <memchr+0x84>
1000c528:	21000044 	addi	r4,r4,1
1000c52c:	20c000cc 	andi	r3,r4,3
1000c530:	183ff91e 	bne	r3,zero,1000c518 <__alt_data_end+0xf800c518>
1000c534:	020000c4 	movi	r8,3
1000c538:	40801136 	bltu	r8,r2,1000c580 <memchr+0x8c>
1000c53c:	10000c26 	beq	r2,zero,1000c570 <memchr+0x7c>
1000c540:	20c00003 	ldbu	r3,0(r4)
1000c544:	29403fcc 	andi	r5,r5,255
1000c548:	28c00b26 	beq	r5,r3,1000c578 <memchr+0x84>
1000c54c:	20c00044 	addi	r3,r4,1
1000c550:	39803fcc 	andi	r6,r7,255
1000c554:	2089883a 	add	r4,r4,r2
1000c558:	00000306 	br	1000c568 <memchr+0x74>
1000c55c:	18c00044 	addi	r3,r3,1
1000c560:	197fffc3 	ldbu	r5,-1(r3)
1000c564:	31400526 	beq	r6,r5,1000c57c <memchr+0x88>
1000c568:	1805883a 	mov	r2,r3
1000c56c:	20fffb1e 	bne	r4,r3,1000c55c <__alt_data_end+0xf800c55c>
1000c570:	0005883a 	mov	r2,zero
1000c574:	f800283a 	ret
1000c578:	2005883a 	mov	r2,r4
1000c57c:	f800283a 	ret
1000c580:	28c03fcc 	andi	r3,r5,255
1000c584:	1812923a 	slli	r9,r3,8
1000c588:	02ffbff4 	movhi	r11,65279
1000c58c:	02a02074 	movhi	r10,32897
1000c590:	48d2b03a 	or	r9,r9,r3
1000c594:	4806943a 	slli	r3,r9,16
1000c598:	5affbfc4 	addi	r11,r11,-257
1000c59c:	52a02004 	addi	r10,r10,-32640
1000c5a0:	48d2b03a 	or	r9,r9,r3
1000c5a4:	20c00017 	ldw	r3,0(r4)
1000c5a8:	48c6f03a 	xor	r3,r9,r3
1000c5ac:	1acd883a 	add	r6,r3,r11
1000c5b0:	00c6303a 	nor	r3,zero,r3
1000c5b4:	30c6703a 	and	r3,r6,r3
1000c5b8:	1a86703a 	and	r3,r3,r10
1000c5bc:	183fe01e 	bne	r3,zero,1000c540 <__alt_data_end+0xf800c540>
1000c5c0:	10bfff04 	addi	r2,r2,-4
1000c5c4:	21000104 	addi	r4,r4,4
1000c5c8:	40bff636 	bltu	r8,r2,1000c5a4 <__alt_data_end+0xf800c5a4>
1000c5cc:	003fdb06 	br	1000c53c <__alt_data_end+0xf800c53c>
1000c5d0:	3005883a 	mov	r2,r6
1000c5d4:	003fd706 	br	1000c534 <__alt_data_end+0xf800c534>

1000c5d8 <memcpy>:
1000c5d8:	defffd04 	addi	sp,sp,-12
1000c5dc:	dfc00215 	stw	ra,8(sp)
1000c5e0:	dc400115 	stw	r17,4(sp)
1000c5e4:	dc000015 	stw	r16,0(sp)
1000c5e8:	00c003c4 	movi	r3,15
1000c5ec:	2005883a 	mov	r2,r4
1000c5f0:	1980452e 	bgeu	r3,r6,1000c708 <memcpy+0x130>
1000c5f4:	2906b03a 	or	r3,r5,r4
1000c5f8:	18c000cc 	andi	r3,r3,3
1000c5fc:	1800441e 	bne	r3,zero,1000c710 <memcpy+0x138>
1000c600:	347ffc04 	addi	r17,r6,-16
1000c604:	8822d13a 	srli	r17,r17,4
1000c608:	28c00104 	addi	r3,r5,4
1000c60c:	23400104 	addi	r13,r4,4
1000c610:	8820913a 	slli	r16,r17,4
1000c614:	2b000204 	addi	r12,r5,8
1000c618:	22c00204 	addi	r11,r4,8
1000c61c:	84000504 	addi	r16,r16,20
1000c620:	2a800304 	addi	r10,r5,12
1000c624:	22400304 	addi	r9,r4,12
1000c628:	2c21883a 	add	r16,r5,r16
1000c62c:	2811883a 	mov	r8,r5
1000c630:	200f883a 	mov	r7,r4
1000c634:	41000017 	ldw	r4,0(r8)
1000c638:	1fc00017 	ldw	ra,0(r3)
1000c63c:	63c00017 	ldw	r15,0(r12)
1000c640:	39000015 	stw	r4,0(r7)
1000c644:	53800017 	ldw	r14,0(r10)
1000c648:	6fc00015 	stw	ra,0(r13)
1000c64c:	5bc00015 	stw	r15,0(r11)
1000c650:	4b800015 	stw	r14,0(r9)
1000c654:	18c00404 	addi	r3,r3,16
1000c658:	39c00404 	addi	r7,r7,16
1000c65c:	42000404 	addi	r8,r8,16
1000c660:	6b400404 	addi	r13,r13,16
1000c664:	63000404 	addi	r12,r12,16
1000c668:	5ac00404 	addi	r11,r11,16
1000c66c:	52800404 	addi	r10,r10,16
1000c670:	4a400404 	addi	r9,r9,16
1000c674:	1c3fef1e 	bne	r3,r16,1000c634 <__alt_data_end+0xf800c634>
1000c678:	89c00044 	addi	r7,r17,1
1000c67c:	380e913a 	slli	r7,r7,4
1000c680:	310003cc 	andi	r4,r6,15
1000c684:	02c000c4 	movi	r11,3
1000c688:	11c7883a 	add	r3,r2,r7
1000c68c:	29cb883a 	add	r5,r5,r7
1000c690:	5900212e 	bgeu	r11,r4,1000c718 <memcpy+0x140>
1000c694:	1813883a 	mov	r9,r3
1000c698:	2811883a 	mov	r8,r5
1000c69c:	200f883a 	mov	r7,r4
1000c6a0:	42800017 	ldw	r10,0(r8)
1000c6a4:	4a400104 	addi	r9,r9,4
1000c6a8:	39ffff04 	addi	r7,r7,-4
1000c6ac:	4abfff15 	stw	r10,-4(r9)
1000c6b0:	42000104 	addi	r8,r8,4
1000c6b4:	59fffa36 	bltu	r11,r7,1000c6a0 <__alt_data_end+0xf800c6a0>
1000c6b8:	213fff04 	addi	r4,r4,-4
1000c6bc:	2008d0ba 	srli	r4,r4,2
1000c6c0:	318000cc 	andi	r6,r6,3
1000c6c4:	21000044 	addi	r4,r4,1
1000c6c8:	2109883a 	add	r4,r4,r4
1000c6cc:	2109883a 	add	r4,r4,r4
1000c6d0:	1907883a 	add	r3,r3,r4
1000c6d4:	290b883a 	add	r5,r5,r4
1000c6d8:	30000626 	beq	r6,zero,1000c6f4 <memcpy+0x11c>
1000c6dc:	198d883a 	add	r6,r3,r6
1000c6e0:	29c00003 	ldbu	r7,0(r5)
1000c6e4:	18c00044 	addi	r3,r3,1
1000c6e8:	29400044 	addi	r5,r5,1
1000c6ec:	19ffffc5 	stb	r7,-1(r3)
1000c6f0:	19bffb1e 	bne	r3,r6,1000c6e0 <__alt_data_end+0xf800c6e0>
1000c6f4:	dfc00217 	ldw	ra,8(sp)
1000c6f8:	dc400117 	ldw	r17,4(sp)
1000c6fc:	dc000017 	ldw	r16,0(sp)
1000c700:	dec00304 	addi	sp,sp,12
1000c704:	f800283a 	ret
1000c708:	2007883a 	mov	r3,r4
1000c70c:	003ff206 	br	1000c6d8 <__alt_data_end+0xf800c6d8>
1000c710:	2007883a 	mov	r3,r4
1000c714:	003ff106 	br	1000c6dc <__alt_data_end+0xf800c6dc>
1000c718:	200d883a 	mov	r6,r4
1000c71c:	003fee06 	br	1000c6d8 <__alt_data_end+0xf800c6d8>

1000c720 <memmove>:
1000c720:	2005883a 	mov	r2,r4
1000c724:	29000b2e 	bgeu	r5,r4,1000c754 <memmove+0x34>
1000c728:	298f883a 	add	r7,r5,r6
1000c72c:	21c0092e 	bgeu	r4,r7,1000c754 <memmove+0x34>
1000c730:	2187883a 	add	r3,r4,r6
1000c734:	198bc83a 	sub	r5,r3,r6
1000c738:	30004826 	beq	r6,zero,1000c85c <memmove+0x13c>
1000c73c:	39ffffc4 	addi	r7,r7,-1
1000c740:	39000003 	ldbu	r4,0(r7)
1000c744:	18ffffc4 	addi	r3,r3,-1
1000c748:	19000005 	stb	r4,0(r3)
1000c74c:	28fffb1e 	bne	r5,r3,1000c73c <__alt_data_end+0xf800c73c>
1000c750:	f800283a 	ret
1000c754:	00c003c4 	movi	r3,15
1000c758:	1980412e 	bgeu	r3,r6,1000c860 <memmove+0x140>
1000c75c:	2886b03a 	or	r3,r5,r2
1000c760:	18c000cc 	andi	r3,r3,3
1000c764:	1800401e 	bne	r3,zero,1000c868 <memmove+0x148>
1000c768:	33fffc04 	addi	r15,r6,-16
1000c76c:	781ed13a 	srli	r15,r15,4
1000c770:	28c00104 	addi	r3,r5,4
1000c774:	13400104 	addi	r13,r2,4
1000c778:	781c913a 	slli	r14,r15,4
1000c77c:	2b000204 	addi	r12,r5,8
1000c780:	12c00204 	addi	r11,r2,8
1000c784:	73800504 	addi	r14,r14,20
1000c788:	2a800304 	addi	r10,r5,12
1000c78c:	12400304 	addi	r9,r2,12
1000c790:	2b9d883a 	add	r14,r5,r14
1000c794:	2811883a 	mov	r8,r5
1000c798:	100f883a 	mov	r7,r2
1000c79c:	41000017 	ldw	r4,0(r8)
1000c7a0:	39c00404 	addi	r7,r7,16
1000c7a4:	18c00404 	addi	r3,r3,16
1000c7a8:	393ffc15 	stw	r4,-16(r7)
1000c7ac:	193ffc17 	ldw	r4,-16(r3)
1000c7b0:	6b400404 	addi	r13,r13,16
1000c7b4:	5ac00404 	addi	r11,r11,16
1000c7b8:	693ffc15 	stw	r4,-16(r13)
1000c7bc:	61000017 	ldw	r4,0(r12)
1000c7c0:	4a400404 	addi	r9,r9,16
1000c7c4:	42000404 	addi	r8,r8,16
1000c7c8:	593ffc15 	stw	r4,-16(r11)
1000c7cc:	51000017 	ldw	r4,0(r10)
1000c7d0:	63000404 	addi	r12,r12,16
1000c7d4:	52800404 	addi	r10,r10,16
1000c7d8:	493ffc15 	stw	r4,-16(r9)
1000c7dc:	1bbfef1e 	bne	r3,r14,1000c79c <__alt_data_end+0xf800c79c>
1000c7e0:	79000044 	addi	r4,r15,1
1000c7e4:	2008913a 	slli	r4,r4,4
1000c7e8:	328003cc 	andi	r10,r6,15
1000c7ec:	02c000c4 	movi	r11,3
1000c7f0:	1107883a 	add	r3,r2,r4
1000c7f4:	290b883a 	add	r5,r5,r4
1000c7f8:	5a801e2e 	bgeu	r11,r10,1000c874 <memmove+0x154>
1000c7fc:	1813883a 	mov	r9,r3
1000c800:	2811883a 	mov	r8,r5
1000c804:	500f883a 	mov	r7,r10
1000c808:	41000017 	ldw	r4,0(r8)
1000c80c:	4a400104 	addi	r9,r9,4
1000c810:	39ffff04 	addi	r7,r7,-4
1000c814:	493fff15 	stw	r4,-4(r9)
1000c818:	42000104 	addi	r8,r8,4
1000c81c:	59fffa36 	bltu	r11,r7,1000c808 <__alt_data_end+0xf800c808>
1000c820:	513fff04 	addi	r4,r10,-4
1000c824:	2008d0ba 	srli	r4,r4,2
1000c828:	318000cc 	andi	r6,r6,3
1000c82c:	21000044 	addi	r4,r4,1
1000c830:	2109883a 	add	r4,r4,r4
1000c834:	2109883a 	add	r4,r4,r4
1000c838:	1907883a 	add	r3,r3,r4
1000c83c:	290b883a 	add	r5,r5,r4
1000c840:	30000b26 	beq	r6,zero,1000c870 <memmove+0x150>
1000c844:	198d883a 	add	r6,r3,r6
1000c848:	29c00003 	ldbu	r7,0(r5)
1000c84c:	18c00044 	addi	r3,r3,1
1000c850:	29400044 	addi	r5,r5,1
1000c854:	19ffffc5 	stb	r7,-1(r3)
1000c858:	19bffb1e 	bne	r3,r6,1000c848 <__alt_data_end+0xf800c848>
1000c85c:	f800283a 	ret
1000c860:	1007883a 	mov	r3,r2
1000c864:	003ff606 	br	1000c840 <__alt_data_end+0xf800c840>
1000c868:	1007883a 	mov	r3,r2
1000c86c:	003ff506 	br	1000c844 <__alt_data_end+0xf800c844>
1000c870:	f800283a 	ret
1000c874:	500d883a 	mov	r6,r10
1000c878:	003ff106 	br	1000c840 <__alt_data_end+0xf800c840>

1000c87c <memset>:
1000c87c:	20c000cc 	andi	r3,r4,3
1000c880:	2005883a 	mov	r2,r4
1000c884:	18004426 	beq	r3,zero,1000c998 <memset+0x11c>
1000c888:	31ffffc4 	addi	r7,r6,-1
1000c88c:	30004026 	beq	r6,zero,1000c990 <memset+0x114>
1000c890:	2813883a 	mov	r9,r5
1000c894:	200d883a 	mov	r6,r4
1000c898:	2007883a 	mov	r3,r4
1000c89c:	00000406 	br	1000c8b0 <memset+0x34>
1000c8a0:	3a3fffc4 	addi	r8,r7,-1
1000c8a4:	31800044 	addi	r6,r6,1
1000c8a8:	38003926 	beq	r7,zero,1000c990 <memset+0x114>
1000c8ac:	400f883a 	mov	r7,r8
1000c8b0:	18c00044 	addi	r3,r3,1
1000c8b4:	32400005 	stb	r9,0(r6)
1000c8b8:	1a0000cc 	andi	r8,r3,3
1000c8bc:	403ff81e 	bne	r8,zero,1000c8a0 <__alt_data_end+0xf800c8a0>
1000c8c0:	010000c4 	movi	r4,3
1000c8c4:	21c02d2e 	bgeu	r4,r7,1000c97c <memset+0x100>
1000c8c8:	29003fcc 	andi	r4,r5,255
1000c8cc:	200c923a 	slli	r6,r4,8
1000c8d0:	3108b03a 	or	r4,r6,r4
1000c8d4:	200c943a 	slli	r6,r4,16
1000c8d8:	218cb03a 	or	r6,r4,r6
1000c8dc:	010003c4 	movi	r4,15
1000c8e0:	21c0182e 	bgeu	r4,r7,1000c944 <memset+0xc8>
1000c8e4:	3b3ffc04 	addi	r12,r7,-16
1000c8e8:	6018d13a 	srli	r12,r12,4
1000c8ec:	1a000104 	addi	r8,r3,4
1000c8f0:	1ac00204 	addi	r11,r3,8
1000c8f4:	6008913a 	slli	r4,r12,4
1000c8f8:	1a800304 	addi	r10,r3,12
1000c8fc:	1813883a 	mov	r9,r3
1000c900:	21000504 	addi	r4,r4,20
1000c904:	1909883a 	add	r4,r3,r4
1000c908:	49800015 	stw	r6,0(r9)
1000c90c:	41800015 	stw	r6,0(r8)
1000c910:	59800015 	stw	r6,0(r11)
1000c914:	51800015 	stw	r6,0(r10)
1000c918:	42000404 	addi	r8,r8,16
1000c91c:	4a400404 	addi	r9,r9,16
1000c920:	5ac00404 	addi	r11,r11,16
1000c924:	52800404 	addi	r10,r10,16
1000c928:	413ff71e 	bne	r8,r4,1000c908 <__alt_data_end+0xf800c908>
1000c92c:	63000044 	addi	r12,r12,1
1000c930:	6018913a 	slli	r12,r12,4
1000c934:	39c003cc 	andi	r7,r7,15
1000c938:	010000c4 	movi	r4,3
1000c93c:	1b07883a 	add	r3,r3,r12
1000c940:	21c00e2e 	bgeu	r4,r7,1000c97c <memset+0x100>
1000c944:	1813883a 	mov	r9,r3
1000c948:	3811883a 	mov	r8,r7
1000c94c:	010000c4 	movi	r4,3
1000c950:	49800015 	stw	r6,0(r9)
1000c954:	423fff04 	addi	r8,r8,-4
1000c958:	4a400104 	addi	r9,r9,4
1000c95c:	223ffc36 	bltu	r4,r8,1000c950 <__alt_data_end+0xf800c950>
1000c960:	393fff04 	addi	r4,r7,-4
1000c964:	2008d0ba 	srli	r4,r4,2
1000c968:	39c000cc 	andi	r7,r7,3
1000c96c:	21000044 	addi	r4,r4,1
1000c970:	2109883a 	add	r4,r4,r4
1000c974:	2109883a 	add	r4,r4,r4
1000c978:	1907883a 	add	r3,r3,r4
1000c97c:	38000526 	beq	r7,zero,1000c994 <memset+0x118>
1000c980:	19cf883a 	add	r7,r3,r7
1000c984:	19400005 	stb	r5,0(r3)
1000c988:	18c00044 	addi	r3,r3,1
1000c98c:	38fffd1e 	bne	r7,r3,1000c984 <__alt_data_end+0xf800c984>
1000c990:	f800283a 	ret
1000c994:	f800283a 	ret
1000c998:	2007883a 	mov	r3,r4
1000c99c:	300f883a 	mov	r7,r6
1000c9a0:	003fc706 	br	1000c8c0 <__alt_data_end+0xf800c8c0>

1000c9a4 <_Balloc>:
1000c9a4:	20801317 	ldw	r2,76(r4)
1000c9a8:	defffc04 	addi	sp,sp,-16
1000c9ac:	dc400115 	stw	r17,4(sp)
1000c9b0:	dc000015 	stw	r16,0(sp)
1000c9b4:	dfc00315 	stw	ra,12(sp)
1000c9b8:	dc800215 	stw	r18,8(sp)
1000c9bc:	2023883a 	mov	r17,r4
1000c9c0:	2821883a 	mov	r16,r5
1000c9c4:	10000f26 	beq	r2,zero,1000ca04 <_Balloc+0x60>
1000c9c8:	8407883a 	add	r3,r16,r16
1000c9cc:	18c7883a 	add	r3,r3,r3
1000c9d0:	10c7883a 	add	r3,r2,r3
1000c9d4:	18800017 	ldw	r2,0(r3)
1000c9d8:	10001126 	beq	r2,zero,1000ca20 <_Balloc+0x7c>
1000c9dc:	11000017 	ldw	r4,0(r2)
1000c9e0:	19000015 	stw	r4,0(r3)
1000c9e4:	10000415 	stw	zero,16(r2)
1000c9e8:	10000315 	stw	zero,12(r2)
1000c9ec:	dfc00317 	ldw	ra,12(sp)
1000c9f0:	dc800217 	ldw	r18,8(sp)
1000c9f4:	dc400117 	ldw	r17,4(sp)
1000c9f8:	dc000017 	ldw	r16,0(sp)
1000c9fc:	dec00404 	addi	sp,sp,16
1000ca00:	f800283a 	ret
1000ca04:	01800844 	movi	r6,33
1000ca08:	01400104 	movi	r5,4
1000ca0c:	000fa4c0 	call	1000fa4c <_calloc_r>
1000ca10:	88801315 	stw	r2,76(r17)
1000ca14:	103fec1e 	bne	r2,zero,1000c9c8 <__alt_data_end+0xf800c9c8>
1000ca18:	0005883a 	mov	r2,zero
1000ca1c:	003ff306 	br	1000c9ec <__alt_data_end+0xf800c9ec>
1000ca20:	01400044 	movi	r5,1
1000ca24:	2c24983a 	sll	r18,r5,r16
1000ca28:	8809883a 	mov	r4,r17
1000ca2c:	91800144 	addi	r6,r18,5
1000ca30:	318d883a 	add	r6,r6,r6
1000ca34:	318d883a 	add	r6,r6,r6
1000ca38:	000fa4c0 	call	1000fa4c <_calloc_r>
1000ca3c:	103ff626 	beq	r2,zero,1000ca18 <__alt_data_end+0xf800ca18>
1000ca40:	14000115 	stw	r16,4(r2)
1000ca44:	14800215 	stw	r18,8(r2)
1000ca48:	003fe606 	br	1000c9e4 <__alt_data_end+0xf800c9e4>

1000ca4c <_Bfree>:
1000ca4c:	28000826 	beq	r5,zero,1000ca70 <_Bfree+0x24>
1000ca50:	28c00117 	ldw	r3,4(r5)
1000ca54:	20801317 	ldw	r2,76(r4)
1000ca58:	18c7883a 	add	r3,r3,r3
1000ca5c:	18c7883a 	add	r3,r3,r3
1000ca60:	10c5883a 	add	r2,r2,r3
1000ca64:	10c00017 	ldw	r3,0(r2)
1000ca68:	28c00015 	stw	r3,0(r5)
1000ca6c:	11400015 	stw	r5,0(r2)
1000ca70:	f800283a 	ret

1000ca74 <__multadd>:
1000ca74:	defff704 	addi	sp,sp,-36
1000ca78:	dc800215 	stw	r18,8(sp)
1000ca7c:	2c800417 	ldw	r18,16(r5)
1000ca80:	dd800615 	stw	r22,24(sp)
1000ca84:	dd400515 	stw	r21,20(sp)
1000ca88:	dd000415 	stw	r20,16(sp)
1000ca8c:	dcc00315 	stw	r19,12(sp)
1000ca90:	dc400115 	stw	r17,4(sp)
1000ca94:	dc000015 	stw	r16,0(sp)
1000ca98:	dfc00815 	stw	ra,32(sp)
1000ca9c:	ddc00715 	stw	r23,28(sp)
1000caa0:	2827883a 	mov	r19,r5
1000caa4:	2029883a 	mov	r20,r4
1000caa8:	3023883a 	mov	r17,r6
1000caac:	3821883a 	mov	r16,r7
1000cab0:	2d400504 	addi	r21,r5,20
1000cab4:	002d883a 	mov	r22,zero
1000cab8:	adc00017 	ldw	r23,0(r21)
1000cabc:	880b883a 	mov	r5,r17
1000cac0:	ad400104 	addi	r21,r21,4
1000cac4:	b93fffcc 	andi	r4,r23,65535
1000cac8:	00069bc0 	call	100069bc <__mulsi3>
1000cacc:	b808d43a 	srli	r4,r23,16
1000cad0:	880b883a 	mov	r5,r17
1000cad4:	1421883a 	add	r16,r2,r16
1000cad8:	00069bc0 	call	100069bc <__mulsi3>
1000cadc:	800ed43a 	srli	r7,r16,16
1000cae0:	80ffffcc 	andi	r3,r16,65535
1000cae4:	b5800044 	addi	r22,r22,1
1000cae8:	11c5883a 	add	r2,r2,r7
1000caec:	100e943a 	slli	r7,r2,16
1000caf0:	1020d43a 	srli	r16,r2,16
1000caf4:	38c7883a 	add	r3,r7,r3
1000caf8:	a8ffff15 	stw	r3,-4(r21)
1000cafc:	b4bfee16 	blt	r22,r18,1000cab8 <__alt_data_end+0xf800cab8>
1000cb00:	80000926 	beq	r16,zero,1000cb28 <__multadd+0xb4>
1000cb04:	98800217 	ldw	r2,8(r19)
1000cb08:	9080130e 	bge	r18,r2,1000cb58 <__multadd+0xe4>
1000cb0c:	90800144 	addi	r2,r18,5
1000cb10:	1085883a 	add	r2,r2,r2
1000cb14:	1085883a 	add	r2,r2,r2
1000cb18:	9885883a 	add	r2,r19,r2
1000cb1c:	14000015 	stw	r16,0(r2)
1000cb20:	94800044 	addi	r18,r18,1
1000cb24:	9c800415 	stw	r18,16(r19)
1000cb28:	9805883a 	mov	r2,r19
1000cb2c:	dfc00817 	ldw	ra,32(sp)
1000cb30:	ddc00717 	ldw	r23,28(sp)
1000cb34:	dd800617 	ldw	r22,24(sp)
1000cb38:	dd400517 	ldw	r21,20(sp)
1000cb3c:	dd000417 	ldw	r20,16(sp)
1000cb40:	dcc00317 	ldw	r19,12(sp)
1000cb44:	dc800217 	ldw	r18,8(sp)
1000cb48:	dc400117 	ldw	r17,4(sp)
1000cb4c:	dc000017 	ldw	r16,0(sp)
1000cb50:	dec00904 	addi	sp,sp,36
1000cb54:	f800283a 	ret
1000cb58:	99400117 	ldw	r5,4(r19)
1000cb5c:	a009883a 	mov	r4,r20
1000cb60:	29400044 	addi	r5,r5,1
1000cb64:	000c9a40 	call	1000c9a4 <_Balloc>
1000cb68:	99800417 	ldw	r6,16(r19)
1000cb6c:	99400304 	addi	r5,r19,12
1000cb70:	11000304 	addi	r4,r2,12
1000cb74:	31800084 	addi	r6,r6,2
1000cb78:	318d883a 	add	r6,r6,r6
1000cb7c:	318d883a 	add	r6,r6,r6
1000cb80:	1023883a 	mov	r17,r2
1000cb84:	000c5d80 	call	1000c5d8 <memcpy>
1000cb88:	98000a26 	beq	r19,zero,1000cbb4 <__multadd+0x140>
1000cb8c:	98c00117 	ldw	r3,4(r19)
1000cb90:	a0801317 	ldw	r2,76(r20)
1000cb94:	18c7883a 	add	r3,r3,r3
1000cb98:	18c7883a 	add	r3,r3,r3
1000cb9c:	10c5883a 	add	r2,r2,r3
1000cba0:	10c00017 	ldw	r3,0(r2)
1000cba4:	98c00015 	stw	r3,0(r19)
1000cba8:	14c00015 	stw	r19,0(r2)
1000cbac:	8827883a 	mov	r19,r17
1000cbb0:	003fd606 	br	1000cb0c <__alt_data_end+0xf800cb0c>
1000cbb4:	8827883a 	mov	r19,r17
1000cbb8:	003fd406 	br	1000cb0c <__alt_data_end+0xf800cb0c>

1000cbbc <__s2b>:
1000cbbc:	defff904 	addi	sp,sp,-28
1000cbc0:	dc400115 	stw	r17,4(sp)
1000cbc4:	dc000015 	stw	r16,0(sp)
1000cbc8:	2023883a 	mov	r17,r4
1000cbcc:	2821883a 	mov	r16,r5
1000cbd0:	39000204 	addi	r4,r7,8
1000cbd4:	01400244 	movi	r5,9
1000cbd8:	dcc00315 	stw	r19,12(sp)
1000cbdc:	dc800215 	stw	r18,8(sp)
1000cbe0:	dfc00615 	stw	ra,24(sp)
1000cbe4:	dd400515 	stw	r21,20(sp)
1000cbe8:	dd000415 	stw	r20,16(sp)
1000cbec:	3825883a 	mov	r18,r7
1000cbf0:	3027883a 	mov	r19,r6
1000cbf4:	00068080 	call	10006808 <__divsi3>
1000cbf8:	00c00044 	movi	r3,1
1000cbfc:	000b883a 	mov	r5,zero
1000cc00:	1880030e 	bge	r3,r2,1000cc10 <__s2b+0x54>
1000cc04:	18c7883a 	add	r3,r3,r3
1000cc08:	29400044 	addi	r5,r5,1
1000cc0c:	18bffd16 	blt	r3,r2,1000cc04 <__alt_data_end+0xf800cc04>
1000cc10:	8809883a 	mov	r4,r17
1000cc14:	000c9a40 	call	1000c9a4 <_Balloc>
1000cc18:	d8c00717 	ldw	r3,28(sp)
1000cc1c:	10c00515 	stw	r3,20(r2)
1000cc20:	00c00044 	movi	r3,1
1000cc24:	10c00415 	stw	r3,16(r2)
1000cc28:	00c00244 	movi	r3,9
1000cc2c:	1cc0210e 	bge	r3,r19,1000ccb4 <__s2b+0xf8>
1000cc30:	80eb883a 	add	r21,r16,r3
1000cc34:	a829883a 	mov	r20,r21
1000cc38:	84e1883a 	add	r16,r16,r19
1000cc3c:	a1c00007 	ldb	r7,0(r20)
1000cc40:	01800284 	movi	r6,10
1000cc44:	a5000044 	addi	r20,r20,1
1000cc48:	100b883a 	mov	r5,r2
1000cc4c:	39fff404 	addi	r7,r7,-48
1000cc50:	8809883a 	mov	r4,r17
1000cc54:	000ca740 	call	1000ca74 <__multadd>
1000cc58:	a43ff81e 	bne	r20,r16,1000cc3c <__alt_data_end+0xf800cc3c>
1000cc5c:	ace1883a 	add	r16,r21,r19
1000cc60:	843ffe04 	addi	r16,r16,-8
1000cc64:	9c800a0e 	bge	r19,r18,1000cc90 <__s2b+0xd4>
1000cc68:	94e5c83a 	sub	r18,r18,r19
1000cc6c:	84a5883a 	add	r18,r16,r18
1000cc70:	81c00007 	ldb	r7,0(r16)
1000cc74:	01800284 	movi	r6,10
1000cc78:	84000044 	addi	r16,r16,1
1000cc7c:	100b883a 	mov	r5,r2
1000cc80:	39fff404 	addi	r7,r7,-48
1000cc84:	8809883a 	mov	r4,r17
1000cc88:	000ca740 	call	1000ca74 <__multadd>
1000cc8c:	84bff81e 	bne	r16,r18,1000cc70 <__alt_data_end+0xf800cc70>
1000cc90:	dfc00617 	ldw	ra,24(sp)
1000cc94:	dd400517 	ldw	r21,20(sp)
1000cc98:	dd000417 	ldw	r20,16(sp)
1000cc9c:	dcc00317 	ldw	r19,12(sp)
1000cca0:	dc800217 	ldw	r18,8(sp)
1000cca4:	dc400117 	ldw	r17,4(sp)
1000cca8:	dc000017 	ldw	r16,0(sp)
1000ccac:	dec00704 	addi	sp,sp,28
1000ccb0:	f800283a 	ret
1000ccb4:	84000284 	addi	r16,r16,10
1000ccb8:	1827883a 	mov	r19,r3
1000ccbc:	003fe906 	br	1000cc64 <__alt_data_end+0xf800cc64>

1000ccc0 <__hi0bits>:
1000ccc0:	20bfffec 	andhi	r2,r4,65535
1000ccc4:	1000141e 	bne	r2,zero,1000cd18 <__hi0bits+0x58>
1000ccc8:	2008943a 	slli	r4,r4,16
1000cccc:	00800404 	movi	r2,16
1000ccd0:	20ffc02c 	andhi	r3,r4,65280
1000ccd4:	1800021e 	bne	r3,zero,1000cce0 <__hi0bits+0x20>
1000ccd8:	2008923a 	slli	r4,r4,8
1000ccdc:	10800204 	addi	r2,r2,8
1000cce0:	20fc002c 	andhi	r3,r4,61440
1000cce4:	1800021e 	bne	r3,zero,1000ccf0 <__hi0bits+0x30>
1000cce8:	2008913a 	slli	r4,r4,4
1000ccec:	10800104 	addi	r2,r2,4
1000ccf0:	20f0002c 	andhi	r3,r4,49152
1000ccf4:	1800031e 	bne	r3,zero,1000cd04 <__hi0bits+0x44>
1000ccf8:	2109883a 	add	r4,r4,r4
1000ccfc:	10800084 	addi	r2,r2,2
1000cd00:	2109883a 	add	r4,r4,r4
1000cd04:	20000316 	blt	r4,zero,1000cd14 <__hi0bits+0x54>
1000cd08:	2110002c 	andhi	r4,r4,16384
1000cd0c:	2000041e 	bne	r4,zero,1000cd20 <__hi0bits+0x60>
1000cd10:	00800804 	movi	r2,32
1000cd14:	f800283a 	ret
1000cd18:	0005883a 	mov	r2,zero
1000cd1c:	003fec06 	br	1000ccd0 <__alt_data_end+0xf800ccd0>
1000cd20:	10800044 	addi	r2,r2,1
1000cd24:	f800283a 	ret

1000cd28 <__lo0bits>:
1000cd28:	20c00017 	ldw	r3,0(r4)
1000cd2c:	188001cc 	andi	r2,r3,7
1000cd30:	10000826 	beq	r2,zero,1000cd54 <__lo0bits+0x2c>
1000cd34:	1880004c 	andi	r2,r3,1
1000cd38:	1000211e 	bne	r2,zero,1000cdc0 <__lo0bits+0x98>
1000cd3c:	1880008c 	andi	r2,r3,2
1000cd40:	1000211e 	bne	r2,zero,1000cdc8 <__lo0bits+0xa0>
1000cd44:	1806d0ba 	srli	r3,r3,2
1000cd48:	00800084 	movi	r2,2
1000cd4c:	20c00015 	stw	r3,0(r4)
1000cd50:	f800283a 	ret
1000cd54:	18bfffcc 	andi	r2,r3,65535
1000cd58:	10001326 	beq	r2,zero,1000cda8 <__lo0bits+0x80>
1000cd5c:	0005883a 	mov	r2,zero
1000cd60:	19403fcc 	andi	r5,r3,255
1000cd64:	2800021e 	bne	r5,zero,1000cd70 <__lo0bits+0x48>
1000cd68:	1806d23a 	srli	r3,r3,8
1000cd6c:	10800204 	addi	r2,r2,8
1000cd70:	194003cc 	andi	r5,r3,15
1000cd74:	2800021e 	bne	r5,zero,1000cd80 <__lo0bits+0x58>
1000cd78:	1806d13a 	srli	r3,r3,4
1000cd7c:	10800104 	addi	r2,r2,4
1000cd80:	194000cc 	andi	r5,r3,3
1000cd84:	2800021e 	bne	r5,zero,1000cd90 <__lo0bits+0x68>
1000cd88:	1806d0ba 	srli	r3,r3,2
1000cd8c:	10800084 	addi	r2,r2,2
1000cd90:	1940004c 	andi	r5,r3,1
1000cd94:	2800081e 	bne	r5,zero,1000cdb8 <__lo0bits+0x90>
1000cd98:	1806d07a 	srli	r3,r3,1
1000cd9c:	1800051e 	bne	r3,zero,1000cdb4 <__lo0bits+0x8c>
1000cda0:	00800804 	movi	r2,32
1000cda4:	f800283a 	ret
1000cda8:	1806d43a 	srli	r3,r3,16
1000cdac:	00800404 	movi	r2,16
1000cdb0:	003feb06 	br	1000cd60 <__alt_data_end+0xf800cd60>
1000cdb4:	10800044 	addi	r2,r2,1
1000cdb8:	20c00015 	stw	r3,0(r4)
1000cdbc:	f800283a 	ret
1000cdc0:	0005883a 	mov	r2,zero
1000cdc4:	f800283a 	ret
1000cdc8:	1806d07a 	srli	r3,r3,1
1000cdcc:	00800044 	movi	r2,1
1000cdd0:	20c00015 	stw	r3,0(r4)
1000cdd4:	f800283a 	ret

1000cdd8 <__i2b>:
1000cdd8:	defffd04 	addi	sp,sp,-12
1000cddc:	dc000015 	stw	r16,0(sp)
1000cde0:	04000044 	movi	r16,1
1000cde4:	dc400115 	stw	r17,4(sp)
1000cde8:	2823883a 	mov	r17,r5
1000cdec:	800b883a 	mov	r5,r16
1000cdf0:	dfc00215 	stw	ra,8(sp)
1000cdf4:	000c9a40 	call	1000c9a4 <_Balloc>
1000cdf8:	14400515 	stw	r17,20(r2)
1000cdfc:	14000415 	stw	r16,16(r2)
1000ce00:	dfc00217 	ldw	ra,8(sp)
1000ce04:	dc400117 	ldw	r17,4(sp)
1000ce08:	dc000017 	ldw	r16,0(sp)
1000ce0c:	dec00304 	addi	sp,sp,12
1000ce10:	f800283a 	ret

1000ce14 <__multiply>:
1000ce14:	deffef04 	addi	sp,sp,-68
1000ce18:	dc400815 	stw	r17,32(sp)
1000ce1c:	dc000715 	stw	r16,28(sp)
1000ce20:	34400417 	ldw	r17,16(r6)
1000ce24:	2c000417 	ldw	r16,16(r5)
1000ce28:	dd800d15 	stw	r22,52(sp)
1000ce2c:	dc800915 	stw	r18,36(sp)
1000ce30:	dfc01015 	stw	ra,64(sp)
1000ce34:	df000f15 	stw	fp,60(sp)
1000ce38:	ddc00e15 	stw	r23,56(sp)
1000ce3c:	dd400c15 	stw	r21,48(sp)
1000ce40:	dd000b15 	stw	r20,44(sp)
1000ce44:	dcc00a15 	stw	r19,40(sp)
1000ce48:	2825883a 	mov	r18,r5
1000ce4c:	302d883a 	mov	r22,r6
1000ce50:	8440050e 	bge	r16,r17,1000ce68 <__multiply+0x54>
1000ce54:	8007883a 	mov	r3,r16
1000ce58:	3025883a 	mov	r18,r6
1000ce5c:	8821883a 	mov	r16,r17
1000ce60:	282d883a 	mov	r22,r5
1000ce64:	1823883a 	mov	r17,r3
1000ce68:	90800217 	ldw	r2,8(r18)
1000ce6c:	8447883a 	add	r3,r16,r17
1000ce70:	d8c00215 	stw	r3,8(sp)
1000ce74:	91400117 	ldw	r5,4(r18)
1000ce78:	10c0010e 	bge	r2,r3,1000ce80 <__multiply+0x6c>
1000ce7c:	29400044 	addi	r5,r5,1
1000ce80:	000c9a40 	call	1000c9a4 <_Balloc>
1000ce84:	d8c00217 	ldw	r3,8(sp)
1000ce88:	d8800615 	stw	r2,24(sp)
1000ce8c:	18eb883a 	add	r21,r3,r3
1000ce90:	ad6b883a 	add	r21,r21,r21
1000ce94:	10c00504 	addi	r3,r2,20
1000ce98:	1d6b883a 	add	r21,r3,r21
1000ce9c:	d8c00115 	stw	r3,4(sp)
1000cea0:	dd400315 	stw	r21,12(sp)
1000cea4:	1805883a 	mov	r2,r3
1000cea8:	1d40042e 	bgeu	r3,r21,1000cebc <__multiply+0xa8>
1000ceac:	d8c00317 	ldw	r3,12(sp)
1000ceb0:	10000015 	stw	zero,0(r2)
1000ceb4:	10800104 	addi	r2,r2,4
1000ceb8:	10fffc36 	bltu	r2,r3,1000ceac <__alt_data_end+0xf800ceac>
1000cebc:	8c63883a 	add	r17,r17,r17
1000cec0:	b5800504 	addi	r22,r22,20
1000cec4:	8c63883a 	add	r17,r17,r17
1000cec8:	94800504 	addi	r18,r18,20
1000cecc:	8421883a 	add	r16,r16,r16
1000ced0:	b463883a 	add	r17,r22,r17
1000ced4:	8421883a 	add	r16,r16,r16
1000ced8:	dd800015 	stw	r22,0(sp)
1000cedc:	dc800415 	stw	r18,16(sp)
1000cee0:	dc400515 	stw	r17,20(sp)
1000cee4:	9429883a 	add	r20,r18,r16
1000cee8:	b4404f2e 	bgeu	r22,r17,1000d028 <__multiply+0x214>
1000ceec:	d8c00017 	ldw	r3,0(sp)
1000cef0:	1c800017 	ldw	r18,0(r3)
1000cef4:	947fffcc 	andi	r17,r18,65535
1000cef8:	88001e26 	beq	r17,zero,1000cf74 <__multiply+0x160>
1000cefc:	dd800117 	ldw	r22,4(sp)
1000cf00:	dd400417 	ldw	r21,16(sp)
1000cf04:	0027883a 	mov	r19,zero
1000cf08:	ac800017 	ldw	r18,0(r21)
1000cf0c:	b4000017 	ldw	r16,0(r22)
1000cf10:	880b883a 	mov	r5,r17
1000cf14:	913fffcc 	andi	r4,r18,65535
1000cf18:	00069bc0 	call	100069bc <__mulsi3>
1000cf1c:	9008d43a 	srli	r4,r18,16
1000cf20:	84bfffcc 	andi	r18,r16,65535
1000cf24:	1485883a 	add	r2,r2,r18
1000cf28:	14e5883a 	add	r18,r2,r19
1000cf2c:	8020d43a 	srli	r16,r16,16
1000cf30:	9026d43a 	srli	r19,r18,16
1000cf34:	880b883a 	mov	r5,r17
1000cf38:	00069bc0 	call	100069bc <__mulsi3>
1000cf3c:	1405883a 	add	r2,r2,r16
1000cf40:	14e1883a 	add	r16,r2,r19
1000cf44:	90ffffcc 	andi	r3,r18,65535
1000cf48:	8024943a 	slli	r18,r16,16
1000cf4c:	ad400104 	addi	r21,r21,4
1000cf50:	b005883a 	mov	r2,r22
1000cf54:	90c6b03a 	or	r3,r18,r3
1000cf58:	b0c00015 	stw	r3,0(r22)
1000cf5c:	8026d43a 	srli	r19,r16,16
1000cf60:	b5800104 	addi	r22,r22,4
1000cf64:	ad3fe836 	bltu	r21,r20,1000cf08 <__alt_data_end+0xf800cf08>
1000cf68:	d8c00017 	ldw	r3,0(sp)
1000cf6c:	14c00115 	stw	r19,4(r2)
1000cf70:	1c800017 	ldw	r18,0(r3)
1000cf74:	9024d43a 	srli	r18,r18,16
1000cf78:	90002226 	beq	r18,zero,1000d004 <__multiply+0x1f0>
1000cf7c:	d8c00117 	ldw	r3,4(sp)
1000cf80:	dd800417 	ldw	r22,16(sp)
1000cf84:	002f883a 	mov	r23,zero
1000cf88:	1f000017 	ldw	fp,0(r3)
1000cf8c:	1823883a 	mov	r17,r3
1000cf90:	182b883a 	mov	r21,r3
1000cf94:	e021883a 	mov	r16,fp
1000cf98:	00000106 	br	1000cfa0 <__multiply+0x18c>
1000cf9c:	982b883a 	mov	r21,r19
1000cfa0:	b100000b 	ldhu	r4,0(r22)
1000cfa4:	8020d43a 	srli	r16,r16,16
1000cfa8:	900b883a 	mov	r5,r18
1000cfac:	00069bc0 	call	100069bc <__mulsi3>
1000cfb0:	1405883a 	add	r2,r2,r16
1000cfb4:	15ef883a 	add	r23,r2,r23
1000cfb8:	b804943a 	slli	r2,r23,16
1000cfbc:	e0ffffcc 	andi	r3,fp,65535
1000cfc0:	8c400104 	addi	r17,r17,4
1000cfc4:	10c6b03a 	or	r3,r2,r3
1000cfc8:	88ffff15 	stw	r3,-4(r17)
1000cfcc:	b5800104 	addi	r22,r22,4
1000cfd0:	b13fff17 	ldw	r4,-4(r22)
1000cfd4:	acc00104 	addi	r19,r21,4
1000cfd8:	900b883a 	mov	r5,r18
1000cfdc:	2008d43a 	srli	r4,r4,16
1000cfe0:	9c000017 	ldw	r16,0(r19)
1000cfe4:	00069bc0 	call	100069bc <__mulsi3>
1000cfe8:	b806d43a 	srli	r3,r23,16
1000cfec:	813fffcc 	andi	r4,r16,65535
1000cff0:	1105883a 	add	r2,r2,r4
1000cff4:	10f9883a 	add	fp,r2,r3
1000cff8:	e02ed43a 	srli	r23,fp,16
1000cffc:	b53fe736 	bltu	r22,r20,1000cf9c <__alt_data_end+0xf800cf9c>
1000d000:	af000115 	stw	fp,4(r21)
1000d004:	d8c00017 	ldw	r3,0(sp)
1000d008:	d9000517 	ldw	r4,20(sp)
1000d00c:	18c00104 	addi	r3,r3,4
1000d010:	d8c00015 	stw	r3,0(sp)
1000d014:	d8c00117 	ldw	r3,4(sp)
1000d018:	18c00104 	addi	r3,r3,4
1000d01c:	d8c00115 	stw	r3,4(sp)
1000d020:	d8c00017 	ldw	r3,0(sp)
1000d024:	193fb136 	bltu	r3,r4,1000ceec <__alt_data_end+0xf800ceec>
1000d028:	d8c00217 	ldw	r3,8(sp)
1000d02c:	00c00c0e 	bge	zero,r3,1000d060 <__multiply+0x24c>
1000d030:	d8c00317 	ldw	r3,12(sp)
1000d034:	18bfff17 	ldw	r2,-4(r3)
1000d038:	1d7fff04 	addi	r21,r3,-4
1000d03c:	10000326 	beq	r2,zero,1000d04c <__multiply+0x238>
1000d040:	00000706 	br	1000d060 <__multiply+0x24c>
1000d044:	a8800017 	ldw	r2,0(r21)
1000d048:	1000051e 	bne	r2,zero,1000d060 <__multiply+0x24c>
1000d04c:	d8c00217 	ldw	r3,8(sp)
1000d050:	ad7fff04 	addi	r21,r21,-4
1000d054:	18ffffc4 	addi	r3,r3,-1
1000d058:	d8c00215 	stw	r3,8(sp)
1000d05c:	183ff91e 	bne	r3,zero,1000d044 <__alt_data_end+0xf800d044>
1000d060:	d8c00617 	ldw	r3,24(sp)
1000d064:	d9000217 	ldw	r4,8(sp)
1000d068:	1805883a 	mov	r2,r3
1000d06c:	19000415 	stw	r4,16(r3)
1000d070:	dfc01017 	ldw	ra,64(sp)
1000d074:	df000f17 	ldw	fp,60(sp)
1000d078:	ddc00e17 	ldw	r23,56(sp)
1000d07c:	dd800d17 	ldw	r22,52(sp)
1000d080:	dd400c17 	ldw	r21,48(sp)
1000d084:	dd000b17 	ldw	r20,44(sp)
1000d088:	dcc00a17 	ldw	r19,40(sp)
1000d08c:	dc800917 	ldw	r18,36(sp)
1000d090:	dc400817 	ldw	r17,32(sp)
1000d094:	dc000717 	ldw	r16,28(sp)
1000d098:	dec01104 	addi	sp,sp,68
1000d09c:	f800283a 	ret

1000d0a0 <__pow5mult>:
1000d0a0:	defffa04 	addi	sp,sp,-24
1000d0a4:	dcc00315 	stw	r19,12(sp)
1000d0a8:	dc000015 	stw	r16,0(sp)
1000d0ac:	dfc00515 	stw	ra,20(sp)
1000d0b0:	dd000415 	stw	r20,16(sp)
1000d0b4:	dc800215 	stw	r18,8(sp)
1000d0b8:	dc400115 	stw	r17,4(sp)
1000d0bc:	308000cc 	andi	r2,r6,3
1000d0c0:	3021883a 	mov	r16,r6
1000d0c4:	2027883a 	mov	r19,r4
1000d0c8:	10002f1e 	bne	r2,zero,1000d188 <__pow5mult+0xe8>
1000d0cc:	2825883a 	mov	r18,r5
1000d0d0:	8021d0ba 	srai	r16,r16,2
1000d0d4:	80001a26 	beq	r16,zero,1000d140 <__pow5mult+0xa0>
1000d0d8:	9c401217 	ldw	r17,72(r19)
1000d0dc:	8800061e 	bne	r17,zero,1000d0f8 <__pow5mult+0x58>
1000d0e0:	00003406 	br	1000d1b4 <__pow5mult+0x114>
1000d0e4:	8021d07a 	srai	r16,r16,1
1000d0e8:	80001526 	beq	r16,zero,1000d140 <__pow5mult+0xa0>
1000d0ec:	88800017 	ldw	r2,0(r17)
1000d0f0:	10001c26 	beq	r2,zero,1000d164 <__pow5mult+0xc4>
1000d0f4:	1023883a 	mov	r17,r2
1000d0f8:	8080004c 	andi	r2,r16,1
1000d0fc:	103ff926 	beq	r2,zero,1000d0e4 <__alt_data_end+0xf800d0e4>
1000d100:	880d883a 	mov	r6,r17
1000d104:	900b883a 	mov	r5,r18
1000d108:	9809883a 	mov	r4,r19
1000d10c:	000ce140 	call	1000ce14 <__multiply>
1000d110:	90001b26 	beq	r18,zero,1000d180 <__pow5mult+0xe0>
1000d114:	91000117 	ldw	r4,4(r18)
1000d118:	98c01317 	ldw	r3,76(r19)
1000d11c:	8021d07a 	srai	r16,r16,1
1000d120:	2109883a 	add	r4,r4,r4
1000d124:	2109883a 	add	r4,r4,r4
1000d128:	1907883a 	add	r3,r3,r4
1000d12c:	19000017 	ldw	r4,0(r3)
1000d130:	91000015 	stw	r4,0(r18)
1000d134:	1c800015 	stw	r18,0(r3)
1000d138:	1025883a 	mov	r18,r2
1000d13c:	803feb1e 	bne	r16,zero,1000d0ec <__alt_data_end+0xf800d0ec>
1000d140:	9005883a 	mov	r2,r18
1000d144:	dfc00517 	ldw	ra,20(sp)
1000d148:	dd000417 	ldw	r20,16(sp)
1000d14c:	dcc00317 	ldw	r19,12(sp)
1000d150:	dc800217 	ldw	r18,8(sp)
1000d154:	dc400117 	ldw	r17,4(sp)
1000d158:	dc000017 	ldw	r16,0(sp)
1000d15c:	dec00604 	addi	sp,sp,24
1000d160:	f800283a 	ret
1000d164:	880d883a 	mov	r6,r17
1000d168:	880b883a 	mov	r5,r17
1000d16c:	9809883a 	mov	r4,r19
1000d170:	000ce140 	call	1000ce14 <__multiply>
1000d174:	88800015 	stw	r2,0(r17)
1000d178:	10000015 	stw	zero,0(r2)
1000d17c:	003fdd06 	br	1000d0f4 <__alt_data_end+0xf800d0f4>
1000d180:	1025883a 	mov	r18,r2
1000d184:	003fd706 	br	1000d0e4 <__alt_data_end+0xf800d0e4>
1000d188:	10bfffc4 	addi	r2,r2,-1
1000d18c:	1085883a 	add	r2,r2,r2
1000d190:	00c40074 	movhi	r3,4097
1000d194:	18d9f104 	addi	r3,r3,26564
1000d198:	1085883a 	add	r2,r2,r2
1000d19c:	1885883a 	add	r2,r3,r2
1000d1a0:	11800017 	ldw	r6,0(r2)
1000d1a4:	000f883a 	mov	r7,zero
1000d1a8:	000ca740 	call	1000ca74 <__multadd>
1000d1ac:	1025883a 	mov	r18,r2
1000d1b0:	003fc706 	br	1000d0d0 <__alt_data_end+0xf800d0d0>
1000d1b4:	05000044 	movi	r20,1
1000d1b8:	a00b883a 	mov	r5,r20
1000d1bc:	9809883a 	mov	r4,r19
1000d1c0:	000c9a40 	call	1000c9a4 <_Balloc>
1000d1c4:	1023883a 	mov	r17,r2
1000d1c8:	00809c44 	movi	r2,625
1000d1cc:	88800515 	stw	r2,20(r17)
1000d1d0:	8d000415 	stw	r20,16(r17)
1000d1d4:	9c401215 	stw	r17,72(r19)
1000d1d8:	88000015 	stw	zero,0(r17)
1000d1dc:	003fc606 	br	1000d0f8 <__alt_data_end+0xf800d0f8>

1000d1e0 <__lshift>:
1000d1e0:	defff904 	addi	sp,sp,-28
1000d1e4:	dd400515 	stw	r21,20(sp)
1000d1e8:	dcc00315 	stw	r19,12(sp)
1000d1ec:	302bd17a 	srai	r21,r6,5
1000d1f0:	2cc00417 	ldw	r19,16(r5)
1000d1f4:	28800217 	ldw	r2,8(r5)
1000d1f8:	dd000415 	stw	r20,16(sp)
1000d1fc:	ace7883a 	add	r19,r21,r19
1000d200:	dc800215 	stw	r18,8(sp)
1000d204:	dc400115 	stw	r17,4(sp)
1000d208:	dc000015 	stw	r16,0(sp)
1000d20c:	dfc00615 	stw	ra,24(sp)
1000d210:	9c000044 	addi	r16,r19,1
1000d214:	2823883a 	mov	r17,r5
1000d218:	3029883a 	mov	r20,r6
1000d21c:	2025883a 	mov	r18,r4
1000d220:	29400117 	ldw	r5,4(r5)
1000d224:	1400030e 	bge	r2,r16,1000d234 <__lshift+0x54>
1000d228:	1085883a 	add	r2,r2,r2
1000d22c:	29400044 	addi	r5,r5,1
1000d230:	143ffd16 	blt	r2,r16,1000d228 <__alt_data_end+0xf800d228>
1000d234:	9009883a 	mov	r4,r18
1000d238:	000c9a40 	call	1000c9a4 <_Balloc>
1000d23c:	10c00504 	addi	r3,r2,20
1000d240:	0540070e 	bge	zero,r21,1000d260 <__lshift+0x80>
1000d244:	ad6b883a 	add	r21,r21,r21
1000d248:	ad6b883a 	add	r21,r21,r21
1000d24c:	1809883a 	mov	r4,r3
1000d250:	1d47883a 	add	r3,r3,r21
1000d254:	20000015 	stw	zero,0(r4)
1000d258:	21000104 	addi	r4,r4,4
1000d25c:	193ffd1e 	bne	r3,r4,1000d254 <__alt_data_end+0xf800d254>
1000d260:	8a000417 	ldw	r8,16(r17)
1000d264:	89000504 	addi	r4,r17,20
1000d268:	a18007cc 	andi	r6,r20,31
1000d26c:	4211883a 	add	r8,r8,r8
1000d270:	4211883a 	add	r8,r8,r8
1000d274:	2211883a 	add	r8,r4,r8
1000d278:	30002326 	beq	r6,zero,1000d308 <__lshift+0x128>
1000d27c:	02400804 	movi	r9,32
1000d280:	4993c83a 	sub	r9,r9,r6
1000d284:	000b883a 	mov	r5,zero
1000d288:	21c00017 	ldw	r7,0(r4)
1000d28c:	1815883a 	mov	r10,r3
1000d290:	18c00104 	addi	r3,r3,4
1000d294:	398e983a 	sll	r7,r7,r6
1000d298:	21000104 	addi	r4,r4,4
1000d29c:	394ab03a 	or	r5,r7,r5
1000d2a0:	197fff15 	stw	r5,-4(r3)
1000d2a4:	217fff17 	ldw	r5,-4(r4)
1000d2a8:	2a4ad83a 	srl	r5,r5,r9
1000d2ac:	223ff636 	bltu	r4,r8,1000d288 <__alt_data_end+0xf800d288>
1000d2b0:	51400115 	stw	r5,4(r10)
1000d2b4:	28001a1e 	bne	r5,zero,1000d320 <__lshift+0x140>
1000d2b8:	843fffc4 	addi	r16,r16,-1
1000d2bc:	14000415 	stw	r16,16(r2)
1000d2c0:	88000826 	beq	r17,zero,1000d2e4 <__lshift+0x104>
1000d2c4:	89000117 	ldw	r4,4(r17)
1000d2c8:	90c01317 	ldw	r3,76(r18)
1000d2cc:	2109883a 	add	r4,r4,r4
1000d2d0:	2109883a 	add	r4,r4,r4
1000d2d4:	1907883a 	add	r3,r3,r4
1000d2d8:	19000017 	ldw	r4,0(r3)
1000d2dc:	89000015 	stw	r4,0(r17)
1000d2e0:	1c400015 	stw	r17,0(r3)
1000d2e4:	dfc00617 	ldw	ra,24(sp)
1000d2e8:	dd400517 	ldw	r21,20(sp)
1000d2ec:	dd000417 	ldw	r20,16(sp)
1000d2f0:	dcc00317 	ldw	r19,12(sp)
1000d2f4:	dc800217 	ldw	r18,8(sp)
1000d2f8:	dc400117 	ldw	r17,4(sp)
1000d2fc:	dc000017 	ldw	r16,0(sp)
1000d300:	dec00704 	addi	sp,sp,28
1000d304:	f800283a 	ret
1000d308:	21400017 	ldw	r5,0(r4)
1000d30c:	18c00104 	addi	r3,r3,4
1000d310:	21000104 	addi	r4,r4,4
1000d314:	197fff15 	stw	r5,-4(r3)
1000d318:	223ffb36 	bltu	r4,r8,1000d308 <__alt_data_end+0xf800d308>
1000d31c:	003fe606 	br	1000d2b8 <__alt_data_end+0xf800d2b8>
1000d320:	9c000084 	addi	r16,r19,2
1000d324:	003fe406 	br	1000d2b8 <__alt_data_end+0xf800d2b8>

1000d328 <__mcmp>:
1000d328:	20800417 	ldw	r2,16(r4)
1000d32c:	28c00417 	ldw	r3,16(r5)
1000d330:	10c5c83a 	sub	r2,r2,r3
1000d334:	1000111e 	bne	r2,zero,1000d37c <__mcmp+0x54>
1000d338:	18c7883a 	add	r3,r3,r3
1000d33c:	18c7883a 	add	r3,r3,r3
1000d340:	21000504 	addi	r4,r4,20
1000d344:	29400504 	addi	r5,r5,20
1000d348:	20c5883a 	add	r2,r4,r3
1000d34c:	28cb883a 	add	r5,r5,r3
1000d350:	00000106 	br	1000d358 <__mcmp+0x30>
1000d354:	20800a2e 	bgeu	r4,r2,1000d380 <__mcmp+0x58>
1000d358:	10bfff04 	addi	r2,r2,-4
1000d35c:	297fff04 	addi	r5,r5,-4
1000d360:	11800017 	ldw	r6,0(r2)
1000d364:	28c00017 	ldw	r3,0(r5)
1000d368:	30fffa26 	beq	r6,r3,1000d354 <__alt_data_end+0xf800d354>
1000d36c:	30c00236 	bltu	r6,r3,1000d378 <__mcmp+0x50>
1000d370:	00800044 	movi	r2,1
1000d374:	f800283a 	ret
1000d378:	00bfffc4 	movi	r2,-1
1000d37c:	f800283a 	ret
1000d380:	0005883a 	mov	r2,zero
1000d384:	f800283a 	ret

1000d388 <__mdiff>:
1000d388:	28c00417 	ldw	r3,16(r5)
1000d38c:	30800417 	ldw	r2,16(r6)
1000d390:	defffa04 	addi	sp,sp,-24
1000d394:	dcc00315 	stw	r19,12(sp)
1000d398:	dc800215 	stw	r18,8(sp)
1000d39c:	dfc00515 	stw	ra,20(sp)
1000d3a0:	dd000415 	stw	r20,16(sp)
1000d3a4:	dc400115 	stw	r17,4(sp)
1000d3a8:	dc000015 	stw	r16,0(sp)
1000d3ac:	1887c83a 	sub	r3,r3,r2
1000d3b0:	2825883a 	mov	r18,r5
1000d3b4:	3027883a 	mov	r19,r6
1000d3b8:	1800141e 	bne	r3,zero,1000d40c <__mdiff+0x84>
1000d3bc:	1085883a 	add	r2,r2,r2
1000d3c0:	1085883a 	add	r2,r2,r2
1000d3c4:	2a000504 	addi	r8,r5,20
1000d3c8:	34000504 	addi	r16,r6,20
1000d3cc:	4087883a 	add	r3,r8,r2
1000d3d0:	8085883a 	add	r2,r16,r2
1000d3d4:	00000106 	br	1000d3dc <__mdiff+0x54>
1000d3d8:	40c0592e 	bgeu	r8,r3,1000d540 <__mdiff+0x1b8>
1000d3dc:	18ffff04 	addi	r3,r3,-4
1000d3e0:	10bfff04 	addi	r2,r2,-4
1000d3e4:	19c00017 	ldw	r7,0(r3)
1000d3e8:	11400017 	ldw	r5,0(r2)
1000d3ec:	397ffa26 	beq	r7,r5,1000d3d8 <__alt_data_end+0xf800d3d8>
1000d3f0:	3940592e 	bgeu	r7,r5,1000d558 <__mdiff+0x1d0>
1000d3f4:	9005883a 	mov	r2,r18
1000d3f8:	4023883a 	mov	r17,r8
1000d3fc:	9825883a 	mov	r18,r19
1000d400:	05000044 	movi	r20,1
1000d404:	1027883a 	mov	r19,r2
1000d408:	00000406 	br	1000d41c <__mdiff+0x94>
1000d40c:	18005616 	blt	r3,zero,1000d568 <__mdiff+0x1e0>
1000d410:	34400504 	addi	r17,r6,20
1000d414:	2c000504 	addi	r16,r5,20
1000d418:	0029883a 	mov	r20,zero
1000d41c:	91400117 	ldw	r5,4(r18)
1000d420:	000c9a40 	call	1000c9a4 <_Balloc>
1000d424:	92400417 	ldw	r9,16(r18)
1000d428:	9b000417 	ldw	r12,16(r19)
1000d42c:	12c00504 	addi	r11,r2,20
1000d430:	4a51883a 	add	r8,r9,r9
1000d434:	6319883a 	add	r12,r12,r12
1000d438:	4211883a 	add	r8,r8,r8
1000d43c:	6319883a 	add	r12,r12,r12
1000d440:	15000315 	stw	r20,12(r2)
1000d444:	8211883a 	add	r8,r16,r8
1000d448:	8b19883a 	add	r12,r17,r12
1000d44c:	0007883a 	mov	r3,zero
1000d450:	81400017 	ldw	r5,0(r16)
1000d454:	89c00017 	ldw	r7,0(r17)
1000d458:	59800104 	addi	r6,r11,4
1000d45c:	293fffcc 	andi	r4,r5,65535
1000d460:	20c7883a 	add	r3,r4,r3
1000d464:	393fffcc 	andi	r4,r7,65535
1000d468:	1909c83a 	sub	r4,r3,r4
1000d46c:	280ad43a 	srli	r5,r5,16
1000d470:	380ed43a 	srli	r7,r7,16
1000d474:	2007d43a 	srai	r3,r4,16
1000d478:	213fffcc 	andi	r4,r4,65535
1000d47c:	29cbc83a 	sub	r5,r5,r7
1000d480:	28c7883a 	add	r3,r5,r3
1000d484:	180a943a 	slli	r5,r3,16
1000d488:	8c400104 	addi	r17,r17,4
1000d48c:	84000104 	addi	r16,r16,4
1000d490:	2908b03a 	or	r4,r5,r4
1000d494:	59000015 	stw	r4,0(r11)
1000d498:	1807d43a 	srai	r3,r3,16
1000d49c:	3015883a 	mov	r10,r6
1000d4a0:	3017883a 	mov	r11,r6
1000d4a4:	8b3fea36 	bltu	r17,r12,1000d450 <__alt_data_end+0xf800d450>
1000d4a8:	8200162e 	bgeu	r16,r8,1000d504 <__mdiff+0x17c>
1000d4ac:	8017883a 	mov	r11,r16
1000d4b0:	59400017 	ldw	r5,0(r11)
1000d4b4:	31800104 	addi	r6,r6,4
1000d4b8:	5ac00104 	addi	r11,r11,4
1000d4bc:	293fffcc 	andi	r4,r5,65535
1000d4c0:	20c7883a 	add	r3,r4,r3
1000d4c4:	280ed43a 	srli	r7,r5,16
1000d4c8:	180bd43a 	srai	r5,r3,16
1000d4cc:	193fffcc 	andi	r4,r3,65535
1000d4d0:	3947883a 	add	r3,r7,r5
1000d4d4:	180a943a 	slli	r5,r3,16
1000d4d8:	1807d43a 	srai	r3,r3,16
1000d4dc:	2908b03a 	or	r4,r5,r4
1000d4e0:	313fff15 	stw	r4,-4(r6)
1000d4e4:	5a3ff236 	bltu	r11,r8,1000d4b0 <__alt_data_end+0xf800d4b0>
1000d4e8:	0406303a 	nor	r3,zero,r16
1000d4ec:	1a07883a 	add	r3,r3,r8
1000d4f0:	1806d0ba 	srli	r3,r3,2
1000d4f4:	18c00044 	addi	r3,r3,1
1000d4f8:	18c7883a 	add	r3,r3,r3
1000d4fc:	18c7883a 	add	r3,r3,r3
1000d500:	50d5883a 	add	r10,r10,r3
1000d504:	50ffff04 	addi	r3,r10,-4
1000d508:	2000041e 	bne	r4,zero,1000d51c <__mdiff+0x194>
1000d50c:	18ffff04 	addi	r3,r3,-4
1000d510:	19000017 	ldw	r4,0(r3)
1000d514:	4a7fffc4 	addi	r9,r9,-1
1000d518:	203ffc26 	beq	r4,zero,1000d50c <__alt_data_end+0xf800d50c>
1000d51c:	12400415 	stw	r9,16(r2)
1000d520:	dfc00517 	ldw	ra,20(sp)
1000d524:	dd000417 	ldw	r20,16(sp)
1000d528:	dcc00317 	ldw	r19,12(sp)
1000d52c:	dc800217 	ldw	r18,8(sp)
1000d530:	dc400117 	ldw	r17,4(sp)
1000d534:	dc000017 	ldw	r16,0(sp)
1000d538:	dec00604 	addi	sp,sp,24
1000d53c:	f800283a 	ret
1000d540:	000b883a 	mov	r5,zero
1000d544:	000c9a40 	call	1000c9a4 <_Balloc>
1000d548:	00c00044 	movi	r3,1
1000d54c:	10c00415 	stw	r3,16(r2)
1000d550:	10000515 	stw	zero,20(r2)
1000d554:	003ff206 	br	1000d520 <__alt_data_end+0xf800d520>
1000d558:	8023883a 	mov	r17,r16
1000d55c:	0029883a 	mov	r20,zero
1000d560:	4021883a 	mov	r16,r8
1000d564:	003fad06 	br	1000d41c <__alt_data_end+0xf800d41c>
1000d568:	9005883a 	mov	r2,r18
1000d56c:	94400504 	addi	r17,r18,20
1000d570:	9c000504 	addi	r16,r19,20
1000d574:	9825883a 	mov	r18,r19
1000d578:	05000044 	movi	r20,1
1000d57c:	1027883a 	mov	r19,r2
1000d580:	003fa606 	br	1000d41c <__alt_data_end+0xf800d41c>

1000d584 <__ulp>:
1000d584:	295ffc2c 	andhi	r5,r5,32752
1000d588:	00bf3034 	movhi	r2,64704
1000d58c:	2887883a 	add	r3,r5,r2
1000d590:	00c0020e 	bge	zero,r3,1000d59c <__ulp+0x18>
1000d594:	0005883a 	mov	r2,zero
1000d598:	f800283a 	ret
1000d59c:	00c7c83a 	sub	r3,zero,r3
1000d5a0:	1807d53a 	srai	r3,r3,20
1000d5a4:	008004c4 	movi	r2,19
1000d5a8:	10c00b0e 	bge	r2,r3,1000d5d8 <__ulp+0x54>
1000d5ac:	18bffb04 	addi	r2,r3,-20
1000d5b0:	01000784 	movi	r4,30
1000d5b4:	0007883a 	mov	r3,zero
1000d5b8:	20800516 	blt	r4,r2,1000d5d0 <__ulp+0x4c>
1000d5bc:	010007c4 	movi	r4,31
1000d5c0:	2089c83a 	sub	r4,r4,r2
1000d5c4:	00800044 	movi	r2,1
1000d5c8:	1104983a 	sll	r2,r2,r4
1000d5cc:	f800283a 	ret
1000d5d0:	00800044 	movi	r2,1
1000d5d4:	f800283a 	ret
1000d5d8:	01400234 	movhi	r5,8
1000d5dc:	28c7d83a 	sra	r3,r5,r3
1000d5e0:	0005883a 	mov	r2,zero
1000d5e4:	f800283a 	ret

1000d5e8 <__b2d>:
1000d5e8:	defffa04 	addi	sp,sp,-24
1000d5ec:	dc000015 	stw	r16,0(sp)
1000d5f0:	24000417 	ldw	r16,16(r4)
1000d5f4:	dc400115 	stw	r17,4(sp)
1000d5f8:	24400504 	addi	r17,r4,20
1000d5fc:	8421883a 	add	r16,r16,r16
1000d600:	8421883a 	add	r16,r16,r16
1000d604:	8c21883a 	add	r16,r17,r16
1000d608:	dc800215 	stw	r18,8(sp)
1000d60c:	84bfff17 	ldw	r18,-4(r16)
1000d610:	dd000415 	stw	r20,16(sp)
1000d614:	dcc00315 	stw	r19,12(sp)
1000d618:	9009883a 	mov	r4,r18
1000d61c:	2829883a 	mov	r20,r5
1000d620:	dfc00515 	stw	ra,20(sp)
1000d624:	000ccc00 	call	1000ccc0 <__hi0bits>
1000d628:	00c00804 	movi	r3,32
1000d62c:	1889c83a 	sub	r4,r3,r2
1000d630:	a1000015 	stw	r4,0(r20)
1000d634:	01000284 	movi	r4,10
1000d638:	84ffff04 	addi	r19,r16,-4
1000d63c:	20801216 	blt	r4,r2,1000d688 <__b2d+0xa0>
1000d640:	018002c4 	movi	r6,11
1000d644:	308dc83a 	sub	r6,r6,r2
1000d648:	9186d83a 	srl	r3,r18,r6
1000d64c:	18cffc34 	orhi	r3,r3,16368
1000d650:	8cc0212e 	bgeu	r17,r19,1000d6d8 <__b2d+0xf0>
1000d654:	813ffe17 	ldw	r4,-8(r16)
1000d658:	218cd83a 	srl	r6,r4,r6
1000d65c:	10800544 	addi	r2,r2,21
1000d660:	9084983a 	sll	r2,r18,r2
1000d664:	1184b03a 	or	r2,r2,r6
1000d668:	dfc00517 	ldw	ra,20(sp)
1000d66c:	dd000417 	ldw	r20,16(sp)
1000d670:	dcc00317 	ldw	r19,12(sp)
1000d674:	dc800217 	ldw	r18,8(sp)
1000d678:	dc400117 	ldw	r17,4(sp)
1000d67c:	dc000017 	ldw	r16,0(sp)
1000d680:	dec00604 	addi	sp,sp,24
1000d684:	f800283a 	ret
1000d688:	8cc00f2e 	bgeu	r17,r19,1000d6c8 <__b2d+0xe0>
1000d68c:	117ffd44 	addi	r5,r2,-11
1000d690:	80bffe17 	ldw	r2,-8(r16)
1000d694:	28000e26 	beq	r5,zero,1000d6d0 <__b2d+0xe8>
1000d698:	1949c83a 	sub	r4,r3,r5
1000d69c:	9164983a 	sll	r18,r18,r5
1000d6a0:	1106d83a 	srl	r3,r2,r4
1000d6a4:	81bffe04 	addi	r6,r16,-8
1000d6a8:	948ffc34 	orhi	r18,r18,16368
1000d6ac:	90c6b03a 	or	r3,r18,r3
1000d6b0:	89800e2e 	bgeu	r17,r6,1000d6ec <__b2d+0x104>
1000d6b4:	81bffd17 	ldw	r6,-12(r16)
1000d6b8:	1144983a 	sll	r2,r2,r5
1000d6bc:	310ad83a 	srl	r5,r6,r4
1000d6c0:	2884b03a 	or	r2,r5,r2
1000d6c4:	003fe806 	br	1000d668 <__alt_data_end+0xf800d668>
1000d6c8:	10bffd44 	addi	r2,r2,-11
1000d6cc:	1000041e 	bne	r2,zero,1000d6e0 <__b2d+0xf8>
1000d6d0:	90cffc34 	orhi	r3,r18,16368
1000d6d4:	003fe406 	br	1000d668 <__alt_data_end+0xf800d668>
1000d6d8:	000d883a 	mov	r6,zero
1000d6dc:	003fdf06 	br	1000d65c <__alt_data_end+0xf800d65c>
1000d6e0:	90a4983a 	sll	r18,r18,r2
1000d6e4:	0005883a 	mov	r2,zero
1000d6e8:	003ff906 	br	1000d6d0 <__alt_data_end+0xf800d6d0>
1000d6ec:	1144983a 	sll	r2,r2,r5
1000d6f0:	003fdd06 	br	1000d668 <__alt_data_end+0xf800d668>

1000d6f4 <__d2b>:
1000d6f4:	defff804 	addi	sp,sp,-32
1000d6f8:	dc000215 	stw	r16,8(sp)
1000d6fc:	3021883a 	mov	r16,r6
1000d700:	dc400315 	stw	r17,12(sp)
1000d704:	8022907a 	slli	r17,r16,1
1000d708:	dd000615 	stw	r20,24(sp)
1000d70c:	2829883a 	mov	r20,r5
1000d710:	01400044 	movi	r5,1
1000d714:	dcc00515 	stw	r19,20(sp)
1000d718:	dc800415 	stw	r18,16(sp)
1000d71c:	dfc00715 	stw	ra,28(sp)
1000d720:	3825883a 	mov	r18,r7
1000d724:	8822d57a 	srli	r17,r17,21
1000d728:	000c9a40 	call	1000c9a4 <_Balloc>
1000d72c:	1027883a 	mov	r19,r2
1000d730:	00800434 	movhi	r2,16
1000d734:	10bfffc4 	addi	r2,r2,-1
1000d738:	808c703a 	and	r6,r16,r2
1000d73c:	88000126 	beq	r17,zero,1000d744 <__d2b+0x50>
1000d740:	31800434 	orhi	r6,r6,16
1000d744:	d9800015 	stw	r6,0(sp)
1000d748:	a0002426 	beq	r20,zero,1000d7dc <__d2b+0xe8>
1000d74c:	d9000104 	addi	r4,sp,4
1000d750:	dd000115 	stw	r20,4(sp)
1000d754:	000cd280 	call	1000cd28 <__lo0bits>
1000d758:	d8c00017 	ldw	r3,0(sp)
1000d75c:	10002f1e 	bne	r2,zero,1000d81c <__d2b+0x128>
1000d760:	d9000117 	ldw	r4,4(sp)
1000d764:	99000515 	stw	r4,20(r19)
1000d768:	1821003a 	cmpeq	r16,r3,zero
1000d76c:	01000084 	movi	r4,2
1000d770:	2421c83a 	sub	r16,r4,r16
1000d774:	98c00615 	stw	r3,24(r19)
1000d778:	9c000415 	stw	r16,16(r19)
1000d77c:	88001f1e 	bne	r17,zero,1000d7fc <__d2b+0x108>
1000d780:	10bef384 	addi	r2,r2,-1074
1000d784:	90800015 	stw	r2,0(r18)
1000d788:	00900034 	movhi	r2,16384
1000d78c:	10bfffc4 	addi	r2,r2,-1
1000d790:	8085883a 	add	r2,r16,r2
1000d794:	1085883a 	add	r2,r2,r2
1000d798:	1085883a 	add	r2,r2,r2
1000d79c:	9885883a 	add	r2,r19,r2
1000d7a0:	11000517 	ldw	r4,20(r2)
1000d7a4:	8020917a 	slli	r16,r16,5
1000d7a8:	000ccc00 	call	1000ccc0 <__hi0bits>
1000d7ac:	d8c00817 	ldw	r3,32(sp)
1000d7b0:	8085c83a 	sub	r2,r16,r2
1000d7b4:	18800015 	stw	r2,0(r3)
1000d7b8:	9805883a 	mov	r2,r19
1000d7bc:	dfc00717 	ldw	ra,28(sp)
1000d7c0:	dd000617 	ldw	r20,24(sp)
1000d7c4:	dcc00517 	ldw	r19,20(sp)
1000d7c8:	dc800417 	ldw	r18,16(sp)
1000d7cc:	dc400317 	ldw	r17,12(sp)
1000d7d0:	dc000217 	ldw	r16,8(sp)
1000d7d4:	dec00804 	addi	sp,sp,32
1000d7d8:	f800283a 	ret
1000d7dc:	d809883a 	mov	r4,sp
1000d7e0:	000cd280 	call	1000cd28 <__lo0bits>
1000d7e4:	d8c00017 	ldw	r3,0(sp)
1000d7e8:	04000044 	movi	r16,1
1000d7ec:	9c000415 	stw	r16,16(r19)
1000d7f0:	98c00515 	stw	r3,20(r19)
1000d7f4:	10800804 	addi	r2,r2,32
1000d7f8:	883fe126 	beq	r17,zero,1000d780 <__alt_data_end+0xf800d780>
1000d7fc:	00c00d44 	movi	r3,53
1000d800:	8c7ef344 	addi	r17,r17,-1075
1000d804:	88a3883a 	add	r17,r17,r2
1000d808:	1885c83a 	sub	r2,r3,r2
1000d80c:	d8c00817 	ldw	r3,32(sp)
1000d810:	94400015 	stw	r17,0(r18)
1000d814:	18800015 	stw	r2,0(r3)
1000d818:	003fe706 	br	1000d7b8 <__alt_data_end+0xf800d7b8>
1000d81c:	01000804 	movi	r4,32
1000d820:	2089c83a 	sub	r4,r4,r2
1000d824:	1908983a 	sll	r4,r3,r4
1000d828:	d9400117 	ldw	r5,4(sp)
1000d82c:	1886d83a 	srl	r3,r3,r2
1000d830:	2148b03a 	or	r4,r4,r5
1000d834:	99000515 	stw	r4,20(r19)
1000d838:	d8c00015 	stw	r3,0(sp)
1000d83c:	003fca06 	br	1000d768 <__alt_data_end+0xf800d768>

1000d840 <__ratio>:
1000d840:	defff904 	addi	sp,sp,-28
1000d844:	dc400315 	stw	r17,12(sp)
1000d848:	2823883a 	mov	r17,r5
1000d84c:	d9400104 	addi	r5,sp,4
1000d850:	dfc00615 	stw	ra,24(sp)
1000d854:	dcc00515 	stw	r19,20(sp)
1000d858:	dc800415 	stw	r18,16(sp)
1000d85c:	2027883a 	mov	r19,r4
1000d860:	dc000215 	stw	r16,8(sp)
1000d864:	000d5e80 	call	1000d5e8 <__b2d>
1000d868:	d80b883a 	mov	r5,sp
1000d86c:	8809883a 	mov	r4,r17
1000d870:	1025883a 	mov	r18,r2
1000d874:	1821883a 	mov	r16,r3
1000d878:	000d5e80 	call	1000d5e8 <__b2d>
1000d87c:	8a000417 	ldw	r8,16(r17)
1000d880:	99000417 	ldw	r4,16(r19)
1000d884:	d9400117 	ldw	r5,4(sp)
1000d888:	2209c83a 	sub	r4,r4,r8
1000d88c:	2010917a 	slli	r8,r4,5
1000d890:	d9000017 	ldw	r4,0(sp)
1000d894:	2909c83a 	sub	r4,r5,r4
1000d898:	4109883a 	add	r4,r8,r4
1000d89c:	01000e0e 	bge	zero,r4,1000d8d8 <__ratio+0x98>
1000d8a0:	2008953a 	slli	r4,r4,20
1000d8a4:	2421883a 	add	r16,r4,r16
1000d8a8:	100d883a 	mov	r6,r2
1000d8ac:	180f883a 	mov	r7,r3
1000d8b0:	9009883a 	mov	r4,r18
1000d8b4:	800b883a 	mov	r5,r16
1000d8b8:	00117500 	call	10011750 <__divdf3>
1000d8bc:	dfc00617 	ldw	ra,24(sp)
1000d8c0:	dcc00517 	ldw	r19,20(sp)
1000d8c4:	dc800417 	ldw	r18,16(sp)
1000d8c8:	dc400317 	ldw	r17,12(sp)
1000d8cc:	dc000217 	ldw	r16,8(sp)
1000d8d0:	dec00704 	addi	sp,sp,28
1000d8d4:	f800283a 	ret
1000d8d8:	2008953a 	slli	r4,r4,20
1000d8dc:	1907c83a 	sub	r3,r3,r4
1000d8e0:	003ff106 	br	1000d8a8 <__alt_data_end+0xf800d8a8>

1000d8e4 <_mprec_log10>:
1000d8e4:	defffe04 	addi	sp,sp,-8
1000d8e8:	dc000015 	stw	r16,0(sp)
1000d8ec:	dfc00115 	stw	ra,4(sp)
1000d8f0:	008005c4 	movi	r2,23
1000d8f4:	2021883a 	mov	r16,r4
1000d8f8:	11000d0e 	bge	r2,r4,1000d930 <_mprec_log10+0x4c>
1000d8fc:	0005883a 	mov	r2,zero
1000d900:	00cffc34 	movhi	r3,16368
1000d904:	843fffc4 	addi	r16,r16,-1
1000d908:	000d883a 	mov	r6,zero
1000d90c:	01d00934 	movhi	r7,16420
1000d910:	1009883a 	mov	r4,r2
1000d914:	180b883a 	mov	r5,r3
1000d918:	00123780 	call	10012378 <__muldf3>
1000d91c:	803ff91e 	bne	r16,zero,1000d904 <__alt_data_end+0xf800d904>
1000d920:	dfc00117 	ldw	ra,4(sp)
1000d924:	dc000017 	ldw	r16,0(sp)
1000d928:	dec00204 	addi	sp,sp,8
1000d92c:	f800283a 	ret
1000d930:	202090fa 	slli	r16,r4,3
1000d934:	00840074 	movhi	r2,4097
1000d938:	109a0804 	addi	r2,r2,26656
1000d93c:	1421883a 	add	r16,r2,r16
1000d940:	80800017 	ldw	r2,0(r16)
1000d944:	80c00117 	ldw	r3,4(r16)
1000d948:	dfc00117 	ldw	ra,4(sp)
1000d94c:	dc000017 	ldw	r16,0(sp)
1000d950:	dec00204 	addi	sp,sp,8
1000d954:	f800283a 	ret

1000d958 <__copybits>:
1000d958:	297fffc4 	addi	r5,r5,-1
1000d95c:	280fd17a 	srai	r7,r5,5
1000d960:	30c00417 	ldw	r3,16(r6)
1000d964:	30800504 	addi	r2,r6,20
1000d968:	39c00044 	addi	r7,r7,1
1000d96c:	18c7883a 	add	r3,r3,r3
1000d970:	39cf883a 	add	r7,r7,r7
1000d974:	18c7883a 	add	r3,r3,r3
1000d978:	39cf883a 	add	r7,r7,r7
1000d97c:	10c7883a 	add	r3,r2,r3
1000d980:	21cf883a 	add	r7,r4,r7
1000d984:	10c00d2e 	bgeu	r2,r3,1000d9bc <__copybits+0x64>
1000d988:	200b883a 	mov	r5,r4
1000d98c:	12000017 	ldw	r8,0(r2)
1000d990:	29400104 	addi	r5,r5,4
1000d994:	10800104 	addi	r2,r2,4
1000d998:	2a3fff15 	stw	r8,-4(r5)
1000d99c:	10fffb36 	bltu	r2,r3,1000d98c <__alt_data_end+0xf800d98c>
1000d9a0:	1985c83a 	sub	r2,r3,r6
1000d9a4:	10bffac4 	addi	r2,r2,-21
1000d9a8:	1004d0ba 	srli	r2,r2,2
1000d9ac:	10800044 	addi	r2,r2,1
1000d9b0:	1085883a 	add	r2,r2,r2
1000d9b4:	1085883a 	add	r2,r2,r2
1000d9b8:	2089883a 	add	r4,r4,r2
1000d9bc:	21c0032e 	bgeu	r4,r7,1000d9cc <__copybits+0x74>
1000d9c0:	20000015 	stw	zero,0(r4)
1000d9c4:	21000104 	addi	r4,r4,4
1000d9c8:	21fffd36 	bltu	r4,r7,1000d9c0 <__alt_data_end+0xf800d9c0>
1000d9cc:	f800283a 	ret

1000d9d0 <__any_on>:
1000d9d0:	20c00417 	ldw	r3,16(r4)
1000d9d4:	2805d17a 	srai	r2,r5,5
1000d9d8:	21000504 	addi	r4,r4,20
1000d9dc:	18800d0e 	bge	r3,r2,1000da14 <__any_on+0x44>
1000d9e0:	18c7883a 	add	r3,r3,r3
1000d9e4:	18c7883a 	add	r3,r3,r3
1000d9e8:	20c7883a 	add	r3,r4,r3
1000d9ec:	20c0192e 	bgeu	r4,r3,1000da54 <__any_on+0x84>
1000d9f0:	18bfff17 	ldw	r2,-4(r3)
1000d9f4:	18ffff04 	addi	r3,r3,-4
1000d9f8:	1000041e 	bne	r2,zero,1000da0c <__any_on+0x3c>
1000d9fc:	20c0142e 	bgeu	r4,r3,1000da50 <__any_on+0x80>
1000da00:	18ffff04 	addi	r3,r3,-4
1000da04:	19400017 	ldw	r5,0(r3)
1000da08:	283ffc26 	beq	r5,zero,1000d9fc <__alt_data_end+0xf800d9fc>
1000da0c:	00800044 	movi	r2,1
1000da10:	f800283a 	ret
1000da14:	10c00a0e 	bge	r2,r3,1000da40 <__any_on+0x70>
1000da18:	1085883a 	add	r2,r2,r2
1000da1c:	1085883a 	add	r2,r2,r2
1000da20:	294007cc 	andi	r5,r5,31
1000da24:	2087883a 	add	r3,r4,r2
1000da28:	283ff026 	beq	r5,zero,1000d9ec <__alt_data_end+0xf800d9ec>
1000da2c:	19800017 	ldw	r6,0(r3)
1000da30:	3144d83a 	srl	r2,r6,r5
1000da34:	114a983a 	sll	r5,r2,r5
1000da38:	317ff41e 	bne	r6,r5,1000da0c <__alt_data_end+0xf800da0c>
1000da3c:	003feb06 	br	1000d9ec <__alt_data_end+0xf800d9ec>
1000da40:	1085883a 	add	r2,r2,r2
1000da44:	1085883a 	add	r2,r2,r2
1000da48:	2087883a 	add	r3,r4,r2
1000da4c:	003fe706 	br	1000d9ec <__alt_data_end+0xf800d9ec>
1000da50:	f800283a 	ret
1000da54:	0005883a 	mov	r2,zero
1000da58:	f800283a 	ret

1000da5c <_realloc_r>:
1000da5c:	defff604 	addi	sp,sp,-40
1000da60:	dc800215 	stw	r18,8(sp)
1000da64:	dfc00915 	stw	ra,36(sp)
1000da68:	df000815 	stw	fp,32(sp)
1000da6c:	ddc00715 	stw	r23,28(sp)
1000da70:	dd800615 	stw	r22,24(sp)
1000da74:	dd400515 	stw	r21,20(sp)
1000da78:	dd000415 	stw	r20,16(sp)
1000da7c:	dcc00315 	stw	r19,12(sp)
1000da80:	dc400115 	stw	r17,4(sp)
1000da84:	dc000015 	stw	r16,0(sp)
1000da88:	3025883a 	mov	r18,r6
1000da8c:	2800b726 	beq	r5,zero,1000dd6c <_realloc_r+0x310>
1000da90:	282b883a 	mov	r21,r5
1000da94:	2029883a 	mov	r20,r4
1000da98:	0013ce40 	call	10013ce4 <__malloc_lock>
1000da9c:	a8bfff17 	ldw	r2,-4(r21)
1000daa0:	043fff04 	movi	r16,-4
1000daa4:	90c002c4 	addi	r3,r18,11
1000daa8:	01000584 	movi	r4,22
1000daac:	acfffe04 	addi	r19,r21,-8
1000dab0:	1420703a 	and	r16,r2,r16
1000dab4:	20c0332e 	bgeu	r4,r3,1000db84 <_realloc_r+0x128>
1000dab8:	047ffe04 	movi	r17,-8
1000dabc:	1c62703a 	and	r17,r3,r17
1000dac0:	8807883a 	mov	r3,r17
1000dac4:	88005816 	blt	r17,zero,1000dc28 <_realloc_r+0x1cc>
1000dac8:	8c805736 	bltu	r17,r18,1000dc28 <_realloc_r+0x1cc>
1000dacc:	80c0300e 	bge	r16,r3,1000db90 <_realloc_r+0x134>
1000dad0:	070400b4 	movhi	fp,4098
1000dad4:	e7100c04 	addi	fp,fp,16432
1000dad8:	e1c00217 	ldw	r7,8(fp)
1000dadc:	9c09883a 	add	r4,r19,r16
1000dae0:	22000117 	ldw	r8,4(r4)
1000dae4:	21c06326 	beq	r4,r7,1000dc74 <_realloc_r+0x218>
1000dae8:	017fff84 	movi	r5,-2
1000daec:	414a703a 	and	r5,r8,r5
1000daf0:	214b883a 	add	r5,r4,r5
1000daf4:	29800117 	ldw	r6,4(r5)
1000daf8:	3180004c 	andi	r6,r6,1
1000dafc:	30003f26 	beq	r6,zero,1000dbfc <_realloc_r+0x1a0>
1000db00:	1080004c 	andi	r2,r2,1
1000db04:	10008326 	beq	r2,zero,1000dd14 <_realloc_r+0x2b8>
1000db08:	900b883a 	mov	r5,r18
1000db0c:	a009883a 	mov	r4,r20
1000db10:	000bce80 	call	1000bce8 <_malloc_r>
1000db14:	1025883a 	mov	r18,r2
1000db18:	10011e26 	beq	r2,zero,1000df94 <_realloc_r+0x538>
1000db1c:	a93fff17 	ldw	r4,-4(r21)
1000db20:	10fffe04 	addi	r3,r2,-8
1000db24:	00bfff84 	movi	r2,-2
1000db28:	2084703a 	and	r2,r4,r2
1000db2c:	9885883a 	add	r2,r19,r2
1000db30:	1880ee26 	beq	r3,r2,1000deec <_realloc_r+0x490>
1000db34:	81bfff04 	addi	r6,r16,-4
1000db38:	00800904 	movi	r2,36
1000db3c:	1180b836 	bltu	r2,r6,1000de20 <_realloc_r+0x3c4>
1000db40:	00c004c4 	movi	r3,19
1000db44:	19809636 	bltu	r3,r6,1000dda0 <_realloc_r+0x344>
1000db48:	9005883a 	mov	r2,r18
1000db4c:	a807883a 	mov	r3,r21
1000db50:	19000017 	ldw	r4,0(r3)
1000db54:	11000015 	stw	r4,0(r2)
1000db58:	19000117 	ldw	r4,4(r3)
1000db5c:	11000115 	stw	r4,4(r2)
1000db60:	18c00217 	ldw	r3,8(r3)
1000db64:	10c00215 	stw	r3,8(r2)
1000db68:	a80b883a 	mov	r5,r21
1000db6c:	a009883a 	mov	r4,r20
1000db70:	000b0f00 	call	1000b0f0 <_free_r>
1000db74:	a009883a 	mov	r4,r20
1000db78:	0013d080 	call	10013d08 <__malloc_unlock>
1000db7c:	9005883a 	mov	r2,r18
1000db80:	00001206 	br	1000dbcc <_realloc_r+0x170>
1000db84:	00c00404 	movi	r3,16
1000db88:	1823883a 	mov	r17,r3
1000db8c:	003fce06 	br	1000dac8 <__alt_data_end+0xf800dac8>
1000db90:	a825883a 	mov	r18,r21
1000db94:	8445c83a 	sub	r2,r16,r17
1000db98:	00c003c4 	movi	r3,15
1000db9c:	18802636 	bltu	r3,r2,1000dc38 <_realloc_r+0x1dc>
1000dba0:	99800117 	ldw	r6,4(r19)
1000dba4:	9c07883a 	add	r3,r19,r16
1000dba8:	3180004c 	andi	r6,r6,1
1000dbac:	3420b03a 	or	r16,r6,r16
1000dbb0:	9c000115 	stw	r16,4(r19)
1000dbb4:	18800117 	ldw	r2,4(r3)
1000dbb8:	10800054 	ori	r2,r2,1
1000dbbc:	18800115 	stw	r2,4(r3)
1000dbc0:	a009883a 	mov	r4,r20
1000dbc4:	0013d080 	call	10013d08 <__malloc_unlock>
1000dbc8:	9005883a 	mov	r2,r18
1000dbcc:	dfc00917 	ldw	ra,36(sp)
1000dbd0:	df000817 	ldw	fp,32(sp)
1000dbd4:	ddc00717 	ldw	r23,28(sp)
1000dbd8:	dd800617 	ldw	r22,24(sp)
1000dbdc:	dd400517 	ldw	r21,20(sp)
1000dbe0:	dd000417 	ldw	r20,16(sp)
1000dbe4:	dcc00317 	ldw	r19,12(sp)
1000dbe8:	dc800217 	ldw	r18,8(sp)
1000dbec:	dc400117 	ldw	r17,4(sp)
1000dbf0:	dc000017 	ldw	r16,0(sp)
1000dbf4:	dec00a04 	addi	sp,sp,40
1000dbf8:	f800283a 	ret
1000dbfc:	017fff04 	movi	r5,-4
1000dc00:	414a703a 	and	r5,r8,r5
1000dc04:	814d883a 	add	r6,r16,r5
1000dc08:	30c01f16 	blt	r6,r3,1000dc88 <_realloc_r+0x22c>
1000dc0c:	20800317 	ldw	r2,12(r4)
1000dc10:	20c00217 	ldw	r3,8(r4)
1000dc14:	a825883a 	mov	r18,r21
1000dc18:	3021883a 	mov	r16,r6
1000dc1c:	18800315 	stw	r2,12(r3)
1000dc20:	10c00215 	stw	r3,8(r2)
1000dc24:	003fdb06 	br	1000db94 <__alt_data_end+0xf800db94>
1000dc28:	00800304 	movi	r2,12
1000dc2c:	a0800015 	stw	r2,0(r20)
1000dc30:	0005883a 	mov	r2,zero
1000dc34:	003fe506 	br	1000dbcc <__alt_data_end+0xf800dbcc>
1000dc38:	98c00117 	ldw	r3,4(r19)
1000dc3c:	9c4b883a 	add	r5,r19,r17
1000dc40:	11000054 	ori	r4,r2,1
1000dc44:	18c0004c 	andi	r3,r3,1
1000dc48:	1c62b03a 	or	r17,r3,r17
1000dc4c:	9c400115 	stw	r17,4(r19)
1000dc50:	29000115 	stw	r4,4(r5)
1000dc54:	2885883a 	add	r2,r5,r2
1000dc58:	10c00117 	ldw	r3,4(r2)
1000dc5c:	29400204 	addi	r5,r5,8
1000dc60:	a009883a 	mov	r4,r20
1000dc64:	18c00054 	ori	r3,r3,1
1000dc68:	10c00115 	stw	r3,4(r2)
1000dc6c:	000b0f00 	call	1000b0f0 <_free_r>
1000dc70:	003fd306 	br	1000dbc0 <__alt_data_end+0xf800dbc0>
1000dc74:	017fff04 	movi	r5,-4
1000dc78:	414a703a 	and	r5,r8,r5
1000dc7c:	89800404 	addi	r6,r17,16
1000dc80:	8151883a 	add	r8,r16,r5
1000dc84:	4180590e 	bge	r8,r6,1000ddec <_realloc_r+0x390>
1000dc88:	1080004c 	andi	r2,r2,1
1000dc8c:	103f9e1e 	bne	r2,zero,1000db08 <__alt_data_end+0xf800db08>
1000dc90:	adbffe17 	ldw	r22,-8(r21)
1000dc94:	00bfff04 	movi	r2,-4
1000dc98:	9dadc83a 	sub	r22,r19,r22
1000dc9c:	b1800117 	ldw	r6,4(r22)
1000dca0:	3084703a 	and	r2,r6,r2
1000dca4:	20002026 	beq	r4,zero,1000dd28 <_realloc_r+0x2cc>
1000dca8:	80af883a 	add	r23,r16,r2
1000dcac:	b96f883a 	add	r23,r23,r5
1000dcb0:	21c05f26 	beq	r4,r7,1000de30 <_realloc_r+0x3d4>
1000dcb4:	b8c01c16 	blt	r23,r3,1000dd28 <_realloc_r+0x2cc>
1000dcb8:	20800317 	ldw	r2,12(r4)
1000dcbc:	20c00217 	ldw	r3,8(r4)
1000dcc0:	81bfff04 	addi	r6,r16,-4
1000dcc4:	01000904 	movi	r4,36
1000dcc8:	18800315 	stw	r2,12(r3)
1000dccc:	10c00215 	stw	r3,8(r2)
1000dcd0:	b0c00217 	ldw	r3,8(r22)
1000dcd4:	b0800317 	ldw	r2,12(r22)
1000dcd8:	b4800204 	addi	r18,r22,8
1000dcdc:	18800315 	stw	r2,12(r3)
1000dce0:	10c00215 	stw	r3,8(r2)
1000dce4:	21801b36 	bltu	r4,r6,1000dd54 <_realloc_r+0x2f8>
1000dce8:	008004c4 	movi	r2,19
1000dcec:	1180352e 	bgeu	r2,r6,1000ddc4 <_realloc_r+0x368>
1000dcf0:	a8800017 	ldw	r2,0(r21)
1000dcf4:	b0800215 	stw	r2,8(r22)
1000dcf8:	a8800117 	ldw	r2,4(r21)
1000dcfc:	b0800315 	stw	r2,12(r22)
1000dd00:	008006c4 	movi	r2,27
1000dd04:	11807f36 	bltu	r2,r6,1000df04 <_realloc_r+0x4a8>
1000dd08:	b0800404 	addi	r2,r22,16
1000dd0c:	ad400204 	addi	r21,r21,8
1000dd10:	00002d06 	br	1000ddc8 <_realloc_r+0x36c>
1000dd14:	adbffe17 	ldw	r22,-8(r21)
1000dd18:	00bfff04 	movi	r2,-4
1000dd1c:	9dadc83a 	sub	r22,r19,r22
1000dd20:	b1000117 	ldw	r4,4(r22)
1000dd24:	2084703a 	and	r2,r4,r2
1000dd28:	b03f7726 	beq	r22,zero,1000db08 <__alt_data_end+0xf800db08>
1000dd2c:	80af883a 	add	r23,r16,r2
1000dd30:	b8ff7516 	blt	r23,r3,1000db08 <__alt_data_end+0xf800db08>
1000dd34:	b0800317 	ldw	r2,12(r22)
1000dd38:	b0c00217 	ldw	r3,8(r22)
1000dd3c:	81bfff04 	addi	r6,r16,-4
1000dd40:	01000904 	movi	r4,36
1000dd44:	18800315 	stw	r2,12(r3)
1000dd48:	10c00215 	stw	r3,8(r2)
1000dd4c:	b4800204 	addi	r18,r22,8
1000dd50:	21bfe52e 	bgeu	r4,r6,1000dce8 <__alt_data_end+0xf800dce8>
1000dd54:	a80b883a 	mov	r5,r21
1000dd58:	9009883a 	mov	r4,r18
1000dd5c:	000c7200 	call	1000c720 <memmove>
1000dd60:	b821883a 	mov	r16,r23
1000dd64:	b027883a 	mov	r19,r22
1000dd68:	003f8a06 	br	1000db94 <__alt_data_end+0xf800db94>
1000dd6c:	300b883a 	mov	r5,r6
1000dd70:	dfc00917 	ldw	ra,36(sp)
1000dd74:	df000817 	ldw	fp,32(sp)
1000dd78:	ddc00717 	ldw	r23,28(sp)
1000dd7c:	dd800617 	ldw	r22,24(sp)
1000dd80:	dd400517 	ldw	r21,20(sp)
1000dd84:	dd000417 	ldw	r20,16(sp)
1000dd88:	dcc00317 	ldw	r19,12(sp)
1000dd8c:	dc800217 	ldw	r18,8(sp)
1000dd90:	dc400117 	ldw	r17,4(sp)
1000dd94:	dc000017 	ldw	r16,0(sp)
1000dd98:	dec00a04 	addi	sp,sp,40
1000dd9c:	000bce81 	jmpi	1000bce8 <_malloc_r>
1000dda0:	a8c00017 	ldw	r3,0(r21)
1000dda4:	90c00015 	stw	r3,0(r18)
1000dda8:	a8c00117 	ldw	r3,4(r21)
1000ddac:	90c00115 	stw	r3,4(r18)
1000ddb0:	00c006c4 	movi	r3,27
1000ddb4:	19804536 	bltu	r3,r6,1000decc <_realloc_r+0x470>
1000ddb8:	90800204 	addi	r2,r18,8
1000ddbc:	a8c00204 	addi	r3,r21,8
1000ddc0:	003f6306 	br	1000db50 <__alt_data_end+0xf800db50>
1000ddc4:	9005883a 	mov	r2,r18
1000ddc8:	a8c00017 	ldw	r3,0(r21)
1000ddcc:	b821883a 	mov	r16,r23
1000ddd0:	b027883a 	mov	r19,r22
1000ddd4:	10c00015 	stw	r3,0(r2)
1000ddd8:	a8c00117 	ldw	r3,4(r21)
1000dddc:	10c00115 	stw	r3,4(r2)
1000dde0:	a8c00217 	ldw	r3,8(r21)
1000dde4:	10c00215 	stw	r3,8(r2)
1000dde8:	003f6a06 	br	1000db94 <__alt_data_end+0xf800db94>
1000ddec:	9c67883a 	add	r19,r19,r17
1000ddf0:	4445c83a 	sub	r2,r8,r17
1000ddf4:	e4c00215 	stw	r19,8(fp)
1000ddf8:	10800054 	ori	r2,r2,1
1000ddfc:	98800115 	stw	r2,4(r19)
1000de00:	a8bfff17 	ldw	r2,-4(r21)
1000de04:	a009883a 	mov	r4,r20
1000de08:	1080004c 	andi	r2,r2,1
1000de0c:	1462b03a 	or	r17,r2,r17
1000de10:	ac7fff15 	stw	r17,-4(r21)
1000de14:	0013d080 	call	10013d08 <__malloc_unlock>
1000de18:	a805883a 	mov	r2,r21
1000de1c:	003f6b06 	br	1000dbcc <__alt_data_end+0xf800dbcc>
1000de20:	a80b883a 	mov	r5,r21
1000de24:	9009883a 	mov	r4,r18
1000de28:	000c7200 	call	1000c720 <memmove>
1000de2c:	003f4e06 	br	1000db68 <__alt_data_end+0xf800db68>
1000de30:	89000404 	addi	r4,r17,16
1000de34:	b93fbc16 	blt	r23,r4,1000dd28 <__alt_data_end+0xf800dd28>
1000de38:	b0800317 	ldw	r2,12(r22)
1000de3c:	b0c00217 	ldw	r3,8(r22)
1000de40:	81bfff04 	addi	r6,r16,-4
1000de44:	01000904 	movi	r4,36
1000de48:	18800315 	stw	r2,12(r3)
1000de4c:	10c00215 	stw	r3,8(r2)
1000de50:	b4800204 	addi	r18,r22,8
1000de54:	21804336 	bltu	r4,r6,1000df64 <_realloc_r+0x508>
1000de58:	008004c4 	movi	r2,19
1000de5c:	11803f2e 	bgeu	r2,r6,1000df5c <_realloc_r+0x500>
1000de60:	a8800017 	ldw	r2,0(r21)
1000de64:	b0800215 	stw	r2,8(r22)
1000de68:	a8800117 	ldw	r2,4(r21)
1000de6c:	b0800315 	stw	r2,12(r22)
1000de70:	008006c4 	movi	r2,27
1000de74:	11803f36 	bltu	r2,r6,1000df74 <_realloc_r+0x518>
1000de78:	b0800404 	addi	r2,r22,16
1000de7c:	ad400204 	addi	r21,r21,8
1000de80:	a8c00017 	ldw	r3,0(r21)
1000de84:	10c00015 	stw	r3,0(r2)
1000de88:	a8c00117 	ldw	r3,4(r21)
1000de8c:	10c00115 	stw	r3,4(r2)
1000de90:	a8c00217 	ldw	r3,8(r21)
1000de94:	10c00215 	stw	r3,8(r2)
1000de98:	b447883a 	add	r3,r22,r17
1000de9c:	bc45c83a 	sub	r2,r23,r17
1000dea0:	e0c00215 	stw	r3,8(fp)
1000dea4:	10800054 	ori	r2,r2,1
1000dea8:	18800115 	stw	r2,4(r3)
1000deac:	b0800117 	ldw	r2,4(r22)
1000deb0:	a009883a 	mov	r4,r20
1000deb4:	1080004c 	andi	r2,r2,1
1000deb8:	1462b03a 	or	r17,r2,r17
1000debc:	b4400115 	stw	r17,4(r22)
1000dec0:	0013d080 	call	10013d08 <__malloc_unlock>
1000dec4:	9005883a 	mov	r2,r18
1000dec8:	003f4006 	br	1000dbcc <__alt_data_end+0xf800dbcc>
1000decc:	a8c00217 	ldw	r3,8(r21)
1000ded0:	90c00215 	stw	r3,8(r18)
1000ded4:	a8c00317 	ldw	r3,12(r21)
1000ded8:	90c00315 	stw	r3,12(r18)
1000dedc:	30801126 	beq	r6,r2,1000df24 <_realloc_r+0x4c8>
1000dee0:	90800404 	addi	r2,r18,16
1000dee4:	a8c00404 	addi	r3,r21,16
1000dee8:	003f1906 	br	1000db50 <__alt_data_end+0xf800db50>
1000deec:	90ffff17 	ldw	r3,-4(r18)
1000def0:	00bfff04 	movi	r2,-4
1000def4:	a825883a 	mov	r18,r21
1000def8:	1884703a 	and	r2,r3,r2
1000defc:	80a1883a 	add	r16,r16,r2
1000df00:	003f2406 	br	1000db94 <__alt_data_end+0xf800db94>
1000df04:	a8800217 	ldw	r2,8(r21)
1000df08:	b0800415 	stw	r2,16(r22)
1000df0c:	a8800317 	ldw	r2,12(r21)
1000df10:	b0800515 	stw	r2,20(r22)
1000df14:	31000a26 	beq	r6,r4,1000df40 <_realloc_r+0x4e4>
1000df18:	b0800604 	addi	r2,r22,24
1000df1c:	ad400404 	addi	r21,r21,16
1000df20:	003fa906 	br	1000ddc8 <__alt_data_end+0xf800ddc8>
1000df24:	a9000417 	ldw	r4,16(r21)
1000df28:	90800604 	addi	r2,r18,24
1000df2c:	a8c00604 	addi	r3,r21,24
1000df30:	91000415 	stw	r4,16(r18)
1000df34:	a9000517 	ldw	r4,20(r21)
1000df38:	91000515 	stw	r4,20(r18)
1000df3c:	003f0406 	br	1000db50 <__alt_data_end+0xf800db50>
1000df40:	a8c00417 	ldw	r3,16(r21)
1000df44:	ad400604 	addi	r21,r21,24
1000df48:	b0800804 	addi	r2,r22,32
1000df4c:	b0c00615 	stw	r3,24(r22)
1000df50:	a8ffff17 	ldw	r3,-4(r21)
1000df54:	b0c00715 	stw	r3,28(r22)
1000df58:	003f9b06 	br	1000ddc8 <__alt_data_end+0xf800ddc8>
1000df5c:	9005883a 	mov	r2,r18
1000df60:	003fc706 	br	1000de80 <__alt_data_end+0xf800de80>
1000df64:	a80b883a 	mov	r5,r21
1000df68:	9009883a 	mov	r4,r18
1000df6c:	000c7200 	call	1000c720 <memmove>
1000df70:	003fc906 	br	1000de98 <__alt_data_end+0xf800de98>
1000df74:	a8800217 	ldw	r2,8(r21)
1000df78:	b0800415 	stw	r2,16(r22)
1000df7c:	a8800317 	ldw	r2,12(r21)
1000df80:	b0800515 	stw	r2,20(r22)
1000df84:	31000726 	beq	r6,r4,1000dfa4 <_realloc_r+0x548>
1000df88:	b0800604 	addi	r2,r22,24
1000df8c:	ad400404 	addi	r21,r21,16
1000df90:	003fbb06 	br	1000de80 <__alt_data_end+0xf800de80>
1000df94:	a009883a 	mov	r4,r20
1000df98:	0013d080 	call	10013d08 <__malloc_unlock>
1000df9c:	0005883a 	mov	r2,zero
1000dfa0:	003f0a06 	br	1000dbcc <__alt_data_end+0xf800dbcc>
1000dfa4:	a8c00417 	ldw	r3,16(r21)
1000dfa8:	ad400604 	addi	r21,r21,24
1000dfac:	b0800804 	addi	r2,r22,32
1000dfb0:	b0c00615 	stw	r3,24(r22)
1000dfb4:	a8ffff17 	ldw	r3,-4(r21)
1000dfb8:	b0c00715 	stw	r3,28(r22)
1000dfbc:	003fb006 	br	1000de80 <__alt_data_end+0xf800de80>

1000dfc0 <__fpclassifyd>:
1000dfc0:	00a00034 	movhi	r2,32768
1000dfc4:	10bfffc4 	addi	r2,r2,-1
1000dfc8:	2884703a 	and	r2,r5,r2
1000dfcc:	10000726 	beq	r2,zero,1000dfec <__fpclassifyd+0x2c>
1000dfd0:	00fffc34 	movhi	r3,65520
1000dfd4:	019ff834 	movhi	r6,32736
1000dfd8:	28c7883a 	add	r3,r5,r3
1000dfdc:	31bfffc4 	addi	r6,r6,-1
1000dfe0:	30c00536 	bltu	r6,r3,1000dff8 <__fpclassifyd+0x38>
1000dfe4:	00800104 	movi	r2,4
1000dfe8:	f800283a 	ret
1000dfec:	2000021e 	bne	r4,zero,1000dff8 <__fpclassifyd+0x38>
1000dff0:	00800084 	movi	r2,2
1000dff4:	f800283a 	ret
1000dff8:	00dffc34 	movhi	r3,32752
1000dffc:	019ff834 	movhi	r6,32736
1000e000:	28cb883a 	add	r5,r5,r3
1000e004:	31bfffc4 	addi	r6,r6,-1
1000e008:	317ff62e 	bgeu	r6,r5,1000dfe4 <__alt_data_end+0xf800dfe4>
1000e00c:	01400434 	movhi	r5,16
1000e010:	297fffc4 	addi	r5,r5,-1
1000e014:	28800236 	bltu	r5,r2,1000e020 <__fpclassifyd+0x60>
1000e018:	008000c4 	movi	r2,3
1000e01c:	f800283a 	ret
1000e020:	10c00226 	beq	r2,r3,1000e02c <__fpclassifyd+0x6c>
1000e024:	0005883a 	mov	r2,zero
1000e028:	f800283a 	ret
1000e02c:	2005003a 	cmpeq	r2,r4,zero
1000e030:	f800283a 	ret

1000e034 <_sbrk_r>:
1000e034:	defffd04 	addi	sp,sp,-12
1000e038:	dc000015 	stw	r16,0(sp)
1000e03c:	040400f4 	movhi	r16,4099
1000e040:	dc400115 	stw	r17,4(sp)
1000e044:	8410c104 	addi	r16,r16,17156
1000e048:	2023883a 	mov	r17,r4
1000e04c:	2809883a 	mov	r4,r5
1000e050:	dfc00215 	stw	ra,8(sp)
1000e054:	80000015 	stw	zero,0(r16)
1000e058:	0013ef00 	call	10013ef0 <sbrk>
1000e05c:	00ffffc4 	movi	r3,-1
1000e060:	10c00526 	beq	r2,r3,1000e078 <_sbrk_r+0x44>
1000e064:	dfc00217 	ldw	ra,8(sp)
1000e068:	dc400117 	ldw	r17,4(sp)
1000e06c:	dc000017 	ldw	r16,0(sp)
1000e070:	dec00304 	addi	sp,sp,12
1000e074:	f800283a 	ret
1000e078:	80c00017 	ldw	r3,0(r16)
1000e07c:	183ff926 	beq	r3,zero,1000e064 <__alt_data_end+0xf800e064>
1000e080:	88c00015 	stw	r3,0(r17)
1000e084:	003ff706 	br	1000e064 <__alt_data_end+0xf800e064>

1000e088 <__sread>:
1000e088:	defffe04 	addi	sp,sp,-8
1000e08c:	dc000015 	stw	r16,0(sp)
1000e090:	2821883a 	mov	r16,r5
1000e094:	2940038f 	ldh	r5,14(r5)
1000e098:	dfc00115 	stw	ra,4(sp)
1000e09c:	000ff440 	call	1000ff44 <_read_r>
1000e0a0:	10000716 	blt	r2,zero,1000e0c0 <__sread+0x38>
1000e0a4:	80c01417 	ldw	r3,80(r16)
1000e0a8:	1887883a 	add	r3,r3,r2
1000e0ac:	80c01415 	stw	r3,80(r16)
1000e0b0:	dfc00117 	ldw	ra,4(sp)
1000e0b4:	dc000017 	ldw	r16,0(sp)
1000e0b8:	dec00204 	addi	sp,sp,8
1000e0bc:	f800283a 	ret
1000e0c0:	80c0030b 	ldhu	r3,12(r16)
1000e0c4:	18fbffcc 	andi	r3,r3,61439
1000e0c8:	80c0030d 	sth	r3,12(r16)
1000e0cc:	dfc00117 	ldw	ra,4(sp)
1000e0d0:	dc000017 	ldw	r16,0(sp)
1000e0d4:	dec00204 	addi	sp,sp,8
1000e0d8:	f800283a 	ret

1000e0dc <__seofread>:
1000e0dc:	0005883a 	mov	r2,zero
1000e0e0:	f800283a 	ret

1000e0e4 <__swrite>:
1000e0e4:	2880030b 	ldhu	r2,12(r5)
1000e0e8:	defffb04 	addi	sp,sp,-20
1000e0ec:	dcc00315 	stw	r19,12(sp)
1000e0f0:	dc800215 	stw	r18,8(sp)
1000e0f4:	dc400115 	stw	r17,4(sp)
1000e0f8:	dc000015 	stw	r16,0(sp)
1000e0fc:	dfc00415 	stw	ra,16(sp)
1000e100:	10c0400c 	andi	r3,r2,256
1000e104:	2821883a 	mov	r16,r5
1000e108:	2023883a 	mov	r17,r4
1000e10c:	3025883a 	mov	r18,r6
1000e110:	3827883a 	mov	r19,r7
1000e114:	18000526 	beq	r3,zero,1000e12c <__swrite+0x48>
1000e118:	2940038f 	ldh	r5,14(r5)
1000e11c:	01c00084 	movi	r7,2
1000e120:	000d883a 	mov	r6,zero
1000e124:	000fee40 	call	1000fee4 <_lseek_r>
1000e128:	8080030b 	ldhu	r2,12(r16)
1000e12c:	8140038f 	ldh	r5,14(r16)
1000e130:	10bbffcc 	andi	r2,r2,61439
1000e134:	980f883a 	mov	r7,r19
1000e138:	900d883a 	mov	r6,r18
1000e13c:	8809883a 	mov	r4,r17
1000e140:	8080030d 	sth	r2,12(r16)
1000e144:	dfc00417 	ldw	ra,16(sp)
1000e148:	dcc00317 	ldw	r19,12(sp)
1000e14c:	dc800217 	ldw	r18,8(sp)
1000e150:	dc400117 	ldw	r17,4(sp)
1000e154:	dc000017 	ldw	r16,0(sp)
1000e158:	dec00504 	addi	sp,sp,20
1000e15c:	000f9981 	jmpi	1000f998 <_write_r>

1000e160 <__sseek>:
1000e160:	defffe04 	addi	sp,sp,-8
1000e164:	dc000015 	stw	r16,0(sp)
1000e168:	2821883a 	mov	r16,r5
1000e16c:	2940038f 	ldh	r5,14(r5)
1000e170:	dfc00115 	stw	ra,4(sp)
1000e174:	000fee40 	call	1000fee4 <_lseek_r>
1000e178:	00ffffc4 	movi	r3,-1
1000e17c:	10c00826 	beq	r2,r3,1000e1a0 <__sseek+0x40>
1000e180:	80c0030b 	ldhu	r3,12(r16)
1000e184:	80801415 	stw	r2,80(r16)
1000e188:	18c40014 	ori	r3,r3,4096
1000e18c:	80c0030d 	sth	r3,12(r16)
1000e190:	dfc00117 	ldw	ra,4(sp)
1000e194:	dc000017 	ldw	r16,0(sp)
1000e198:	dec00204 	addi	sp,sp,8
1000e19c:	f800283a 	ret
1000e1a0:	80c0030b 	ldhu	r3,12(r16)
1000e1a4:	18fbffcc 	andi	r3,r3,61439
1000e1a8:	80c0030d 	sth	r3,12(r16)
1000e1ac:	dfc00117 	ldw	ra,4(sp)
1000e1b0:	dc000017 	ldw	r16,0(sp)
1000e1b4:	dec00204 	addi	sp,sp,8
1000e1b8:	f800283a 	ret

1000e1bc <__sclose>:
1000e1bc:	2940038f 	ldh	r5,14(r5)
1000e1c0:	000f9f81 	jmpi	1000f9f8 <_close_r>

1000e1c4 <strcmp>:
1000e1c4:	2144b03a 	or	r2,r4,r5
1000e1c8:	108000cc 	andi	r2,r2,3
1000e1cc:	1000171e 	bne	r2,zero,1000e22c <strcmp+0x68>
1000e1d0:	20800017 	ldw	r2,0(r4)
1000e1d4:	28c00017 	ldw	r3,0(r5)
1000e1d8:	10c0141e 	bne	r2,r3,1000e22c <strcmp+0x68>
1000e1dc:	027fbff4 	movhi	r9,65279
1000e1e0:	4a7fbfc4 	addi	r9,r9,-257
1000e1e4:	0086303a 	nor	r3,zero,r2
1000e1e8:	02202074 	movhi	r8,32897
1000e1ec:	1245883a 	add	r2,r2,r9
1000e1f0:	42202004 	addi	r8,r8,-32640
1000e1f4:	10c4703a 	and	r2,r2,r3
1000e1f8:	1204703a 	and	r2,r2,r8
1000e1fc:	10000226 	beq	r2,zero,1000e208 <strcmp+0x44>
1000e200:	00002306 	br	1000e290 <strcmp+0xcc>
1000e204:	1000221e 	bne	r2,zero,1000e290 <strcmp+0xcc>
1000e208:	21000104 	addi	r4,r4,4
1000e20c:	20c00017 	ldw	r3,0(r4)
1000e210:	29400104 	addi	r5,r5,4
1000e214:	29800017 	ldw	r6,0(r5)
1000e218:	1a4f883a 	add	r7,r3,r9
1000e21c:	00c4303a 	nor	r2,zero,r3
1000e220:	3884703a 	and	r2,r7,r2
1000e224:	1204703a 	and	r2,r2,r8
1000e228:	19bff626 	beq	r3,r6,1000e204 <__alt_data_end+0xf800e204>
1000e22c:	20800003 	ldbu	r2,0(r4)
1000e230:	10c03fcc 	andi	r3,r2,255
1000e234:	18c0201c 	xori	r3,r3,128
1000e238:	18ffe004 	addi	r3,r3,-128
1000e23c:	18000c26 	beq	r3,zero,1000e270 <strcmp+0xac>
1000e240:	29800007 	ldb	r6,0(r5)
1000e244:	19800326 	beq	r3,r6,1000e254 <strcmp+0x90>
1000e248:	00001306 	br	1000e298 <strcmp+0xd4>
1000e24c:	29800007 	ldb	r6,0(r5)
1000e250:	11800b1e 	bne	r2,r6,1000e280 <strcmp+0xbc>
1000e254:	21000044 	addi	r4,r4,1
1000e258:	20c00003 	ldbu	r3,0(r4)
1000e25c:	29400044 	addi	r5,r5,1
1000e260:	18803fcc 	andi	r2,r3,255
1000e264:	1080201c 	xori	r2,r2,128
1000e268:	10bfe004 	addi	r2,r2,-128
1000e26c:	103ff71e 	bne	r2,zero,1000e24c <__alt_data_end+0xf800e24c>
1000e270:	0007883a 	mov	r3,zero
1000e274:	28800003 	ldbu	r2,0(r5)
1000e278:	1885c83a 	sub	r2,r3,r2
1000e27c:	f800283a 	ret
1000e280:	28800003 	ldbu	r2,0(r5)
1000e284:	18c03fcc 	andi	r3,r3,255
1000e288:	1885c83a 	sub	r2,r3,r2
1000e28c:	f800283a 	ret
1000e290:	0005883a 	mov	r2,zero
1000e294:	f800283a 	ret
1000e298:	10c03fcc 	andi	r3,r2,255
1000e29c:	003ff506 	br	1000e274 <__alt_data_end+0xf800e274>

1000e2a0 <__sprint_r.part.0>:
1000e2a0:	28801917 	ldw	r2,100(r5)
1000e2a4:	defff604 	addi	sp,sp,-40
1000e2a8:	dd400515 	stw	r21,20(sp)
1000e2ac:	dfc00915 	stw	ra,36(sp)
1000e2b0:	df000815 	stw	fp,32(sp)
1000e2b4:	ddc00715 	stw	r23,28(sp)
1000e2b8:	dd800615 	stw	r22,24(sp)
1000e2bc:	dd000415 	stw	r20,16(sp)
1000e2c0:	dcc00315 	stw	r19,12(sp)
1000e2c4:	dc800215 	stw	r18,8(sp)
1000e2c8:	dc400115 	stw	r17,4(sp)
1000e2cc:	dc000015 	stw	r16,0(sp)
1000e2d0:	1088000c 	andi	r2,r2,8192
1000e2d4:	302b883a 	mov	r21,r6
1000e2d8:	10002e26 	beq	r2,zero,1000e394 <__sprint_r.part.0+0xf4>
1000e2dc:	30800217 	ldw	r2,8(r6)
1000e2e0:	35800017 	ldw	r22,0(r6)
1000e2e4:	10002926 	beq	r2,zero,1000e38c <__sprint_r.part.0+0xec>
1000e2e8:	2827883a 	mov	r19,r5
1000e2ec:	2029883a 	mov	r20,r4
1000e2f0:	b5c00104 	addi	r23,r22,4
1000e2f4:	04bfffc4 	movi	r18,-1
1000e2f8:	bc400017 	ldw	r17,0(r23)
1000e2fc:	b4000017 	ldw	r16,0(r22)
1000e300:	0039883a 	mov	fp,zero
1000e304:	8822d0ba 	srli	r17,r17,2
1000e308:	8800031e 	bne	r17,zero,1000e318 <__sprint_r.part.0+0x78>
1000e30c:	00001806 	br	1000e370 <__sprint_r.part.0+0xd0>
1000e310:	84000104 	addi	r16,r16,4
1000e314:	8f001526 	beq	r17,fp,1000e36c <__sprint_r.part.0+0xcc>
1000e318:	81400017 	ldw	r5,0(r16)
1000e31c:	980d883a 	mov	r6,r19
1000e320:	a009883a 	mov	r4,r20
1000e324:	000fd900 	call	1000fd90 <_fputwc_r>
1000e328:	e7000044 	addi	fp,fp,1
1000e32c:	14bff81e 	bne	r2,r18,1000e310 <__alt_data_end+0xf800e310>
1000e330:	9005883a 	mov	r2,r18
1000e334:	a8000215 	stw	zero,8(r21)
1000e338:	a8000115 	stw	zero,4(r21)
1000e33c:	dfc00917 	ldw	ra,36(sp)
1000e340:	df000817 	ldw	fp,32(sp)
1000e344:	ddc00717 	ldw	r23,28(sp)
1000e348:	dd800617 	ldw	r22,24(sp)
1000e34c:	dd400517 	ldw	r21,20(sp)
1000e350:	dd000417 	ldw	r20,16(sp)
1000e354:	dcc00317 	ldw	r19,12(sp)
1000e358:	dc800217 	ldw	r18,8(sp)
1000e35c:	dc400117 	ldw	r17,4(sp)
1000e360:	dc000017 	ldw	r16,0(sp)
1000e364:	dec00a04 	addi	sp,sp,40
1000e368:	f800283a 	ret
1000e36c:	a8800217 	ldw	r2,8(r21)
1000e370:	8c63883a 	add	r17,r17,r17
1000e374:	8c63883a 	add	r17,r17,r17
1000e378:	1445c83a 	sub	r2,r2,r17
1000e37c:	a8800215 	stw	r2,8(r21)
1000e380:	b5800204 	addi	r22,r22,8
1000e384:	bdc00204 	addi	r23,r23,8
1000e388:	103fdb1e 	bne	r2,zero,1000e2f8 <__alt_data_end+0xf800e2f8>
1000e38c:	0005883a 	mov	r2,zero
1000e390:	003fe806 	br	1000e334 <__alt_data_end+0xf800e334>
1000e394:	000b4000 	call	1000b400 <__sfvwrite_r>
1000e398:	003fe606 	br	1000e334 <__alt_data_end+0xf800e334>

1000e39c <__sprint_r>:
1000e39c:	30c00217 	ldw	r3,8(r6)
1000e3a0:	18000126 	beq	r3,zero,1000e3a8 <__sprint_r+0xc>
1000e3a4:	000e2a01 	jmpi	1000e2a0 <__sprint_r.part.0>
1000e3a8:	30000115 	stw	zero,4(r6)
1000e3ac:	0005883a 	mov	r2,zero
1000e3b0:	f800283a 	ret

1000e3b4 <___vfiprintf_internal_r>:
1000e3b4:	deffca04 	addi	sp,sp,-216
1000e3b8:	dd403115 	stw	r21,196(sp)
1000e3bc:	dfc03515 	stw	ra,212(sp)
1000e3c0:	df003415 	stw	fp,208(sp)
1000e3c4:	ddc03315 	stw	r23,204(sp)
1000e3c8:	dd803215 	stw	r22,200(sp)
1000e3cc:	dd003015 	stw	r20,192(sp)
1000e3d0:	dcc02f15 	stw	r19,188(sp)
1000e3d4:	dc802e15 	stw	r18,184(sp)
1000e3d8:	dc402d15 	stw	r17,180(sp)
1000e3dc:	dc002c15 	stw	r16,176(sp)
1000e3e0:	d9002115 	stw	r4,132(sp)
1000e3e4:	d9402015 	stw	r5,128(sp)
1000e3e8:	d9c02215 	stw	r7,136(sp)
1000e3ec:	302b883a 	mov	r21,r6
1000e3f0:	20000226 	beq	r4,zero,1000e3fc <___vfiprintf_internal_r+0x48>
1000e3f4:	20800e17 	ldw	r2,56(r4)
1000e3f8:	1000cf26 	beq	r2,zero,1000e738 <___vfiprintf_internal_r+0x384>
1000e3fc:	d8c02017 	ldw	r3,128(sp)
1000e400:	1880030b 	ldhu	r2,12(r3)
1000e404:	10c8000c 	andi	r3,r2,8192
1000e408:	1800071e 	bne	r3,zero,1000e428 <___vfiprintf_internal_r+0x74>
1000e40c:	d9402017 	ldw	r5,128(sp)
1000e410:	00f7ffc4 	movi	r3,-8193
1000e414:	10880014 	ori	r2,r2,8192
1000e418:	29001917 	ldw	r4,100(r5)
1000e41c:	2880030d 	sth	r2,12(r5)
1000e420:	20c6703a 	and	r3,r4,r3
1000e424:	28c01915 	stw	r3,100(r5)
1000e428:	10c0020c 	andi	r3,r2,8
1000e42c:	1800a526 	beq	r3,zero,1000e6c4 <___vfiprintf_internal_r+0x310>
1000e430:	d9002017 	ldw	r4,128(sp)
1000e434:	20c00417 	ldw	r3,16(r4)
1000e438:	1800a226 	beq	r3,zero,1000e6c4 <___vfiprintf_internal_r+0x310>
1000e43c:	1080068c 	andi	r2,r2,26
1000e440:	00c00284 	movi	r3,10
1000e444:	10c0a826 	beq	r2,r3,1000e6e8 <___vfiprintf_internal_r+0x334>
1000e448:	d9001a04 	addi	r4,sp,104
1000e44c:	d94019c4 	addi	r5,sp,103
1000e450:	04840074 	movhi	r18,4097
1000e454:	2145c83a 	sub	r2,r4,r5
1000e458:	949a3a04 	addi	r18,r18,26856
1000e45c:	d9001e15 	stw	r4,120(sp)
1000e460:	d9401f15 	stw	r5,124(sp)
1000e464:	dec01a15 	stw	sp,104(sp)
1000e468:	d8001c15 	stw	zero,112(sp)
1000e46c:	d8001b15 	stw	zero,108(sp)
1000e470:	d811883a 	mov	r8,sp
1000e474:	d8002615 	stw	zero,152(sp)
1000e478:	d8002415 	stw	zero,144(sp)
1000e47c:	d8802815 	stw	r2,160(sp)
1000e480:	a82d883a 	mov	r22,r21
1000e484:	b0800007 	ldb	r2,0(r22)
1000e488:	10040d26 	beq	r2,zero,1000f4c0 <___vfiprintf_internal_r+0x110c>
1000e48c:	00c00944 	movi	r3,37
1000e490:	b029883a 	mov	r20,r22
1000e494:	10c0021e 	bne	r2,r3,1000e4a0 <___vfiprintf_internal_r+0xec>
1000e498:	00001606 	br	1000e4f4 <___vfiprintf_internal_r+0x140>
1000e49c:	10c00326 	beq	r2,r3,1000e4ac <___vfiprintf_internal_r+0xf8>
1000e4a0:	a5000044 	addi	r20,r20,1
1000e4a4:	a0800007 	ldb	r2,0(r20)
1000e4a8:	103ffc1e 	bne	r2,zero,1000e49c <__alt_data_end+0xf800e49c>
1000e4ac:	a5a1c83a 	sub	r16,r20,r22
1000e4b0:	80001026 	beq	r16,zero,1000e4f4 <___vfiprintf_internal_r+0x140>
1000e4b4:	d8c01c17 	ldw	r3,112(sp)
1000e4b8:	d8801b17 	ldw	r2,108(sp)
1000e4bc:	45800015 	stw	r22,0(r8)
1000e4c0:	80c7883a 	add	r3,r16,r3
1000e4c4:	10800044 	addi	r2,r2,1
1000e4c8:	44000115 	stw	r16,4(r8)
1000e4cc:	d8c01c15 	stw	r3,112(sp)
1000e4d0:	d8801b15 	stw	r2,108(sp)
1000e4d4:	010001c4 	movi	r4,7
1000e4d8:	2080750e 	bge	r4,r2,1000e6b0 <___vfiprintf_internal_r+0x2fc>
1000e4dc:	1803951e 	bne	r3,zero,1000f334 <___vfiprintf_internal_r+0xf80>
1000e4e0:	d8c02417 	ldw	r3,144(sp)
1000e4e4:	d8001b15 	stw	zero,108(sp)
1000e4e8:	d811883a 	mov	r8,sp
1000e4ec:	1c07883a 	add	r3,r3,r16
1000e4f0:	d8c02415 	stw	r3,144(sp)
1000e4f4:	a0800007 	ldb	r2,0(r20)
1000e4f8:	1002e026 	beq	r2,zero,1000f07c <___vfiprintf_internal_r+0xcc8>
1000e4fc:	a5800044 	addi	r22,r20,1
1000e500:	a0c00047 	ldb	r3,1(r20)
1000e504:	d8001d85 	stb	zero,118(sp)
1000e508:	0027883a 	mov	r19,zero
1000e50c:	d8002305 	stb	zero,140(sp)
1000e510:	043fffc4 	movi	r16,-1
1000e514:	d8002515 	stw	zero,148(sp)
1000e518:	0023883a 	mov	r17,zero
1000e51c:	05001604 	movi	r20,88
1000e520:	05400244 	movi	r21,9
1000e524:	402f883a 	mov	r23,r8
1000e528:	b5800044 	addi	r22,r22,1
1000e52c:	18bff804 	addi	r2,r3,-32
1000e530:	a0827736 	bltu	r20,r2,1000ef10 <___vfiprintf_internal_r+0xb5c>
1000e534:	100490ba 	slli	r2,r2,2
1000e538:	01040074 	movhi	r4,4097
1000e53c:	21395304 	addi	r4,r4,-6836
1000e540:	1105883a 	add	r2,r2,r4
1000e544:	10800017 	ldw	r2,0(r2)
1000e548:	1000683a 	jmp	r2
1000e54c:	1000ec10 	cmplti	zero,r2,944
1000e550:	1000ef10 	cmplti	zero,r2,956
1000e554:	1000ef10 	cmplti	zero,r2,956
1000e558:	1000ec2c 	andhi	zero,r2,944
1000e55c:	1000ef10 	cmplti	zero,r2,956
1000e560:	1000ef10 	cmplti	zero,r2,956
1000e564:	1000ef10 	cmplti	zero,r2,956
1000e568:	1000ef10 	cmplti	zero,r2,956
1000e56c:	1000ef10 	cmplti	zero,r2,956
1000e570:	1000ef10 	cmplti	zero,r2,956
1000e574:	1000ee34 	orhi	zero,r2,952
1000e578:	1000ee58 	cmpnei	zero,r2,953
1000e57c:	1000ef10 	cmplti	zero,r2,956
1000e580:	1000e750 	cmplti	zero,r2,925
1000e584:	1000ee6c 	andhi	zero,r2,953
1000e588:	1000ef10 	cmplti	zero,r2,956
1000e58c:	1000ec38 	rdprs	zero,r2,944
1000e590:	1000ec44 	addi	zero,r2,945
1000e594:	1000ec44 	addi	zero,r2,945
1000e598:	1000ec44 	addi	zero,r2,945
1000e59c:	1000ec44 	addi	zero,r2,945
1000e5a0:	1000ec44 	addi	zero,r2,945
1000e5a4:	1000ec44 	addi	zero,r2,945
1000e5a8:	1000ec44 	addi	zero,r2,945
1000e5ac:	1000ec44 	addi	zero,r2,945
1000e5b0:	1000ec44 	addi	zero,r2,945
1000e5b4:	1000ef10 	cmplti	zero,r2,956
1000e5b8:	1000ef10 	cmplti	zero,r2,956
1000e5bc:	1000ef10 	cmplti	zero,r2,956
1000e5c0:	1000ef10 	cmplti	zero,r2,956
1000e5c4:	1000ef10 	cmplti	zero,r2,956
1000e5c8:	1000ef10 	cmplti	zero,r2,956
1000e5cc:	1000ef10 	cmplti	zero,r2,956
1000e5d0:	1000ef10 	cmplti	zero,r2,956
1000e5d4:	1000ef10 	cmplti	zero,r2,956
1000e5d8:	1000ef10 	cmplti	zero,r2,956
1000e5dc:	1000ec84 	addi	zero,r2,946
1000e5e0:	1000ef10 	cmplti	zero,r2,956
1000e5e4:	1000ef10 	cmplti	zero,r2,956
1000e5e8:	1000ef10 	cmplti	zero,r2,956
1000e5ec:	1000ef10 	cmplti	zero,r2,956
1000e5f0:	1000ef10 	cmplti	zero,r2,956
1000e5f4:	1000ef10 	cmplti	zero,r2,956
1000e5f8:	1000ef10 	cmplti	zero,r2,956
1000e5fc:	1000ef10 	cmplti	zero,r2,956
1000e600:	1000ef10 	cmplti	zero,r2,956
1000e604:	1000ef10 	cmplti	zero,r2,956
1000e608:	1000ecc0 	call	11000ecc <__alt_heap_start+0xfcca80>
1000e60c:	1000ef10 	cmplti	zero,r2,956
1000e610:	1000ef10 	cmplti	zero,r2,956
1000e614:	1000ef10 	cmplti	zero,r2,956
1000e618:	1000ef10 	cmplti	zero,r2,956
1000e61c:	1000ef10 	cmplti	zero,r2,956
1000e620:	1000ed1c 	xori	zero,r2,948
1000e624:	1000ef10 	cmplti	zero,r2,956
1000e628:	1000ef10 	cmplti	zero,r2,956
1000e62c:	1000ed90 	cmplti	zero,r2,950
1000e630:	1000ef10 	cmplti	zero,r2,956
1000e634:	1000ef10 	cmplti	zero,r2,956
1000e638:	1000ef10 	cmplti	zero,r2,956
1000e63c:	1000ef10 	cmplti	zero,r2,956
1000e640:	1000ef10 	cmplti	zero,r2,956
1000e644:	1000ef10 	cmplti	zero,r2,956
1000e648:	1000ef10 	cmplti	zero,r2,956
1000e64c:	1000ef10 	cmplti	zero,r2,956
1000e650:	1000ef10 	cmplti	zero,r2,956
1000e654:	1000ef10 	cmplti	zero,r2,956
1000e658:	1000eb38 	rdprs	zero,r2,940
1000e65c:	1000eb68 	cmpgeui	zero,r2,941
1000e660:	1000ef10 	cmplti	zero,r2,956
1000e664:	1000ef10 	cmplti	zero,r2,956
1000e668:	1000ef10 	cmplti	zero,r2,956
1000e66c:	1000eeb8 	rdprs	zero,r2,954
1000e670:	1000eb68 	cmpgeui	zero,r2,941
1000e674:	1000ef10 	cmplti	zero,r2,956
1000e678:	1000ef10 	cmplti	zero,r2,956
1000e67c:	1000ea10 	cmplti	zero,r2,936
1000e680:	1000ef10 	cmplti	zero,r2,956
1000e684:	1000ea24 	muli	zero,r2,936
1000e688:	1000ea5c 	xori	zero,r2,937
1000e68c:	1000e75c 	xori	zero,r2,925
1000e690:	1000ea04 	addi	zero,r2,936
1000e694:	1000ef10 	cmplti	zero,r2,956
1000e698:	1000edd0 	cmplti	zero,r2,951
1000e69c:	1000ef10 	cmplti	zero,r2,956
1000e6a0:	1000ee1c 	xori	zero,r2,952
1000e6a4:	1000ef10 	cmplti	zero,r2,956
1000e6a8:	1000ef10 	cmplti	zero,r2,956
1000e6ac:	1000eae0 	cmpeqi	zero,r2,939
1000e6b0:	42000204 	addi	r8,r8,8
1000e6b4:	d8c02417 	ldw	r3,144(sp)
1000e6b8:	1c07883a 	add	r3,r3,r16
1000e6bc:	d8c02415 	stw	r3,144(sp)
1000e6c0:	003f8c06 	br	1000e4f4 <__alt_data_end+0xf800e4f4>
1000e6c4:	d9402017 	ldw	r5,128(sp)
1000e6c8:	d9002117 	ldw	r4,132(sp)
1000e6cc:	0008f700 	call	10008f70 <__swsetup_r>
1000e6d0:	1003c11e 	bne	r2,zero,1000f5d8 <___vfiprintf_internal_r+0x1224>
1000e6d4:	d9402017 	ldw	r5,128(sp)
1000e6d8:	00c00284 	movi	r3,10
1000e6dc:	2880030b 	ldhu	r2,12(r5)
1000e6e0:	1080068c 	andi	r2,r2,26
1000e6e4:	10ff581e 	bne	r2,r3,1000e448 <__alt_data_end+0xf800e448>
1000e6e8:	d8c02017 	ldw	r3,128(sp)
1000e6ec:	1880038f 	ldh	r2,14(r3)
1000e6f0:	103f5516 	blt	r2,zero,1000e448 <__alt_data_end+0xf800e448>
1000e6f4:	d9c02217 	ldw	r7,136(sp)
1000e6f8:	d9002117 	ldw	r4,132(sp)
1000e6fc:	a80d883a 	mov	r6,r21
1000e700:	180b883a 	mov	r5,r3
1000e704:	000f8dc0 	call	1000f8dc <__sbprintf>
1000e708:	dfc03517 	ldw	ra,212(sp)
1000e70c:	df003417 	ldw	fp,208(sp)
1000e710:	ddc03317 	ldw	r23,204(sp)
1000e714:	dd803217 	ldw	r22,200(sp)
1000e718:	dd403117 	ldw	r21,196(sp)
1000e71c:	dd003017 	ldw	r20,192(sp)
1000e720:	dcc02f17 	ldw	r19,188(sp)
1000e724:	dc802e17 	ldw	r18,184(sp)
1000e728:	dc402d17 	ldw	r17,180(sp)
1000e72c:	dc002c17 	ldw	r16,176(sp)
1000e730:	dec03604 	addi	sp,sp,216
1000e734:	f800283a 	ret
1000e738:	000af7c0 	call	1000af7c <__sinit>
1000e73c:	003f2f06 	br	1000e3fc <__alt_data_end+0xf800e3fc>
1000e740:	d8c02517 	ldw	r3,148(sp)
1000e744:	d8802215 	stw	r2,136(sp)
1000e748:	00c7c83a 	sub	r3,zero,r3
1000e74c:	d8c02515 	stw	r3,148(sp)
1000e750:	8c400114 	ori	r17,r17,4
1000e754:	b0c00007 	ldb	r3,0(r22)
1000e758:	003f7306 	br	1000e528 <__alt_data_end+0xf800e528>
1000e75c:	00800c04 	movi	r2,48
1000e760:	d9402217 	ldw	r5,136(sp)
1000e764:	d8801d05 	stb	r2,116(sp)
1000e768:	00801e04 	movi	r2,120
1000e76c:	d8801d45 	stb	r2,117(sp)
1000e770:	d8001d85 	stb	zero,118(sp)
1000e774:	b811883a 	mov	r8,r23
1000e778:	28c00104 	addi	r3,r5,4
1000e77c:	2cc00017 	ldw	r19,0(r5)
1000e780:	0029883a 	mov	r20,zero
1000e784:	88800094 	ori	r2,r17,2
1000e788:	80032516 	blt	r16,zero,1000f420 <___vfiprintf_internal_r+0x106c>
1000e78c:	00bfdfc4 	movi	r2,-129
1000e790:	88a2703a 	and	r17,r17,r2
1000e794:	d8c02215 	stw	r3,136(sp)
1000e798:	8c400094 	ori	r17,r17,2
1000e79c:	98032a1e 	bne	r19,zero,1000f448 <___vfiprintf_internal_r+0x1094>
1000e7a0:	00840074 	movhi	r2,4097
1000e7a4:	1099d904 	addi	r2,r2,26468
1000e7a8:	d8802615 	stw	r2,152(sp)
1000e7ac:	002b883a 	mov	r21,zero
1000e7b0:	8001741e 	bne	r16,zero,1000ed84 <___vfiprintf_internal_r+0x9d0>
1000e7b4:	0021883a 	mov	r16,zero
1000e7b8:	0029883a 	mov	r20,zero
1000e7bc:	ddc01a04 	addi	r23,sp,104
1000e7c0:	8027883a 	mov	r19,r16
1000e7c4:	8500010e 	bge	r16,r20,1000e7cc <___vfiprintf_internal_r+0x418>
1000e7c8:	a027883a 	mov	r19,r20
1000e7cc:	ad403fcc 	andi	r21,r21,255
1000e7d0:	ad40201c 	xori	r21,r21,128
1000e7d4:	ad7fe004 	addi	r21,r21,-128
1000e7d8:	a8000126 	beq	r21,zero,1000e7e0 <___vfiprintf_internal_r+0x42c>
1000e7dc:	9cc00044 	addi	r19,r19,1
1000e7e0:	89c0008c 	andi	r7,r17,2
1000e7e4:	38000126 	beq	r7,zero,1000e7ec <___vfiprintf_internal_r+0x438>
1000e7e8:	9cc00084 	addi	r19,r19,2
1000e7ec:	88c0210c 	andi	r3,r17,132
1000e7f0:	1801dd1e 	bne	r3,zero,1000ef68 <___vfiprintf_internal_r+0xbb4>
1000e7f4:	d9402517 	ldw	r5,148(sp)
1000e7f8:	2cebc83a 	sub	r21,r5,r19
1000e7fc:	0541da0e 	bge	zero,r21,1000ef68 <___vfiprintf_internal_r+0xbb4>
1000e800:	07000404 	movi	fp,16
1000e804:	d8801c17 	ldw	r2,112(sp)
1000e808:	e543be0e 	bge	fp,r21,1000f704 <___vfiprintf_internal_r+0x1350>
1000e80c:	01440074 	movhi	r5,4097
1000e810:	295a3e04 	addi	r5,r5,26872
1000e814:	dc002715 	stw	r16,156(sp)
1000e818:	d9801b17 	ldw	r6,108(sp)
1000e81c:	a821883a 	mov	r16,r21
1000e820:	d9402315 	stw	r5,140(sp)
1000e824:	028001c4 	movi	r10,7
1000e828:	d9c02915 	stw	r7,164(sp)
1000e82c:	182b883a 	mov	r21,r3
1000e830:	00000506 	br	1000e848 <___vfiprintf_internal_r+0x494>
1000e834:	31000084 	addi	r4,r6,2
1000e838:	42000204 	addi	r8,r8,8
1000e83c:	180d883a 	mov	r6,r3
1000e840:	843ffc04 	addi	r16,r16,-16
1000e844:	e4000f0e 	bge	fp,r16,1000e884 <___vfiprintf_internal_r+0x4d0>
1000e848:	01040074 	movhi	r4,4097
1000e84c:	10800404 	addi	r2,r2,16
1000e850:	30c00044 	addi	r3,r6,1
1000e854:	211a3e04 	addi	r4,r4,26872
1000e858:	41000015 	stw	r4,0(r8)
1000e85c:	47000115 	stw	fp,4(r8)
1000e860:	d8801c15 	stw	r2,112(sp)
1000e864:	d8c01b15 	stw	r3,108(sp)
1000e868:	50fff20e 	bge	r10,r3,1000e834 <__alt_data_end+0xf800e834>
1000e86c:	1001b21e 	bne	r2,zero,1000ef38 <___vfiprintf_internal_r+0xb84>
1000e870:	843ffc04 	addi	r16,r16,-16
1000e874:	000d883a 	mov	r6,zero
1000e878:	01000044 	movi	r4,1
1000e87c:	d811883a 	mov	r8,sp
1000e880:	e43ff116 	blt	fp,r16,1000e848 <__alt_data_end+0xf800e848>
1000e884:	a807883a 	mov	r3,r21
1000e888:	d9c02917 	ldw	r7,164(sp)
1000e88c:	802b883a 	mov	r21,r16
1000e890:	dc002717 	ldw	r16,156(sp)
1000e894:	d9402317 	ldw	r5,140(sp)
1000e898:	a885883a 	add	r2,r21,r2
1000e89c:	45400115 	stw	r21,4(r8)
1000e8a0:	41400015 	stw	r5,0(r8)
1000e8a4:	d8801c15 	stw	r2,112(sp)
1000e8a8:	d9001b15 	stw	r4,108(sp)
1000e8ac:	014001c4 	movi	r5,7
1000e8b0:	29026216 	blt	r5,r4,1000f23c <___vfiprintf_internal_r+0xe88>
1000e8b4:	d9801d87 	ldb	r6,118(sp)
1000e8b8:	42000204 	addi	r8,r8,8
1000e8bc:	21400044 	addi	r5,r4,1
1000e8c0:	3001ae1e 	bne	r6,zero,1000ef7c <___vfiprintf_internal_r+0xbc8>
1000e8c4:	3801bb26 	beq	r7,zero,1000efb4 <___vfiprintf_internal_r+0xc00>
1000e8c8:	d9001d04 	addi	r4,sp,116
1000e8cc:	10800084 	addi	r2,r2,2
1000e8d0:	41000015 	stw	r4,0(r8)
1000e8d4:	01000084 	movi	r4,2
1000e8d8:	41000115 	stw	r4,4(r8)
1000e8dc:	d8801c15 	stw	r2,112(sp)
1000e8e0:	d9401b15 	stw	r5,108(sp)
1000e8e4:	010001c4 	movi	r4,7
1000e8e8:	2142680e 	bge	r4,r5,1000f28c <___vfiprintf_internal_r+0xed8>
1000e8ec:	1002b11e 	bne	r2,zero,1000f3b4 <___vfiprintf_internal_r+0x1000>
1000e8f0:	01802004 	movi	r6,128
1000e8f4:	01400044 	movi	r5,1
1000e8f8:	0009883a 	mov	r4,zero
1000e8fc:	d811883a 	mov	r8,sp
1000e900:	1981ae1e 	bne	r3,r6,1000efbc <___vfiprintf_internal_r+0xc08>
1000e904:	d8c02517 	ldw	r3,148(sp)
1000e908:	1cf9c83a 	sub	fp,r3,r19
1000e90c:	0701ab0e 	bge	zero,fp,1000efbc <___vfiprintf_internal_r+0xc08>
1000e910:	05400404 	movi	r21,16
1000e914:	af03a90e 	bge	r21,fp,1000f7bc <___vfiprintf_internal_r+0x1408>
1000e918:	01440074 	movhi	r5,4097
1000e91c:	295a3a04 	addi	r5,r5,26856
1000e920:	d9402315 	stw	r5,140(sp)
1000e924:	01c001c4 	movi	r7,7
1000e928:	00000506 	br	1000e940 <___vfiprintf_internal_r+0x58c>
1000e92c:	21800084 	addi	r6,r4,2
1000e930:	42000204 	addi	r8,r8,8
1000e934:	1809883a 	mov	r4,r3
1000e938:	e73ffc04 	addi	fp,fp,-16
1000e93c:	af000d0e 	bge	r21,fp,1000e974 <___vfiprintf_internal_r+0x5c0>
1000e940:	10800404 	addi	r2,r2,16
1000e944:	20c00044 	addi	r3,r4,1
1000e948:	44800015 	stw	r18,0(r8)
1000e94c:	45400115 	stw	r21,4(r8)
1000e950:	d8801c15 	stw	r2,112(sp)
1000e954:	d8c01b15 	stw	r3,108(sp)
1000e958:	38fff40e 	bge	r7,r3,1000e92c <__alt_data_end+0xf800e92c>
1000e95c:	10022b1e 	bne	r2,zero,1000f20c <___vfiprintf_internal_r+0xe58>
1000e960:	e73ffc04 	addi	fp,fp,-16
1000e964:	01800044 	movi	r6,1
1000e968:	0009883a 	mov	r4,zero
1000e96c:	d811883a 	mov	r8,sp
1000e970:	af3ff316 	blt	r21,fp,1000e940 <__alt_data_end+0xf800e940>
1000e974:	d8c02317 	ldw	r3,140(sp)
1000e978:	1705883a 	add	r2,r2,fp
1000e97c:	47000115 	stw	fp,4(r8)
1000e980:	40c00015 	stw	r3,0(r8)
1000e984:	d8801c15 	stw	r2,112(sp)
1000e988:	d9801b15 	stw	r6,108(sp)
1000e98c:	00c001c4 	movi	r3,7
1000e990:	19829416 	blt	r3,r6,1000f3e4 <___vfiprintf_internal_r+0x1030>
1000e994:	8521c83a 	sub	r16,r16,r20
1000e998:	42000204 	addi	r8,r8,8
1000e99c:	31400044 	addi	r5,r6,1
1000e9a0:	3009883a 	mov	r4,r6
1000e9a4:	04018716 	blt	zero,r16,1000efc4 <___vfiprintf_internal_r+0xc10>
1000e9a8:	a085883a 	add	r2,r20,r2
1000e9ac:	45c00015 	stw	r23,0(r8)
1000e9b0:	45000115 	stw	r20,4(r8)
1000e9b4:	d8801c15 	stw	r2,112(sp)
1000e9b8:	d9401b15 	stw	r5,108(sp)
1000e9bc:	00c001c4 	movi	r3,7
1000e9c0:	1941c20e 	bge	r3,r5,1000f0cc <___vfiprintf_internal_r+0xd18>
1000e9c4:	1002531e 	bne	r2,zero,1000f314 <___vfiprintf_internal_r+0xf60>
1000e9c8:	d8001b15 	stw	zero,108(sp)
1000e9cc:	8c40010c 	andi	r17,r17,4
1000e9d0:	88023226 	beq	r17,zero,1000f29c <___vfiprintf_internal_r+0xee8>
1000e9d4:	d9002517 	ldw	r4,148(sp)
1000e9d8:	24e3c83a 	sub	r17,r4,r19
1000e9dc:	04432916 	blt	zero,r17,1000f684 <___vfiprintf_internal_r+0x12d0>
1000e9e0:	d8802517 	ldw	r2,148(sp)
1000e9e4:	14c0010e 	bge	r2,r19,1000e9ec <___vfiprintf_internal_r+0x638>
1000e9e8:	9805883a 	mov	r2,r19
1000e9ec:	d8c02417 	ldw	r3,144(sp)
1000e9f0:	1887883a 	add	r3,r3,r2
1000e9f4:	d8c02415 	stw	r3,144(sp)
1000e9f8:	d8001b15 	stw	zero,108(sp)
1000e9fc:	d811883a 	mov	r8,sp
1000ea00:	003ea006 	br	1000e484 <__alt_data_end+0xf800e484>
1000ea04:	8c400814 	ori	r17,r17,32
1000ea08:	b0c00007 	ldb	r3,0(r22)
1000ea0c:	003ec606 	br	1000e528 <__alt_data_end+0xf800e528>
1000ea10:	b0c00007 	ldb	r3,0(r22)
1000ea14:	00801b04 	movi	r2,108
1000ea18:	18832026 	beq	r3,r2,1000f69c <___vfiprintf_internal_r+0x12e8>
1000ea1c:	8c400414 	ori	r17,r17,16
1000ea20:	003ec106 	br	1000e528 <__alt_data_end+0xf800e528>
1000ea24:	9cc03fcc 	andi	r19,r19,255
1000ea28:	b811883a 	mov	r8,r23
1000ea2c:	9803981e 	bne	r19,zero,1000f890 <___vfiprintf_internal_r+0x14dc>
1000ea30:	8880080c 	andi	r2,r17,32
1000ea34:	1002be26 	beq	r2,zero,1000f530 <___vfiprintf_internal_r+0x117c>
1000ea38:	d9002217 	ldw	r4,136(sp)
1000ea3c:	d9402417 	ldw	r5,144(sp)
1000ea40:	20800017 	ldw	r2,0(r4)
1000ea44:	2807d7fa 	srai	r3,r5,31
1000ea48:	21000104 	addi	r4,r4,4
1000ea4c:	d9002215 	stw	r4,136(sp)
1000ea50:	11400015 	stw	r5,0(r2)
1000ea54:	10c00115 	stw	r3,4(r2)
1000ea58:	003e8a06 	br	1000e484 <__alt_data_end+0xf800e484>
1000ea5c:	9cc03fcc 	andi	r19,r19,255
1000ea60:	b811883a 	mov	r8,r23
1000ea64:	9803871e 	bne	r19,zero,1000f884 <___vfiprintf_internal_r+0x14d0>
1000ea68:	8880080c 	andi	r2,r17,32
1000ea6c:	10009a26 	beq	r2,zero,1000ecd8 <___vfiprintf_internal_r+0x924>
1000ea70:	d9002217 	ldw	r4,136(sp)
1000ea74:	d8001d85 	stb	zero,118(sp)
1000ea78:	20800204 	addi	r2,r4,8
1000ea7c:	24c00017 	ldw	r19,0(r4)
1000ea80:	25000117 	ldw	r20,4(r4)
1000ea84:	8002a416 	blt	r16,zero,1000f518 <___vfiprintf_internal_r+0x1164>
1000ea88:	013fdfc4 	movi	r4,-129
1000ea8c:	9d06b03a 	or	r3,r19,r20
1000ea90:	d8802215 	stw	r2,136(sp)
1000ea94:	8922703a 	and	r17,r17,r4
1000ea98:	18009b26 	beq	r3,zero,1000ed08 <___vfiprintf_internal_r+0x954>
1000ea9c:	002b883a 	mov	r21,zero
1000eaa0:	ddc01a04 	addi	r23,sp,104
1000eaa4:	9806d0fa 	srli	r3,r19,3
1000eaa8:	a008977a 	slli	r4,r20,29
1000eaac:	a028d0fa 	srli	r20,r20,3
1000eab0:	9cc001cc 	andi	r19,r19,7
1000eab4:	98800c04 	addi	r2,r19,48
1000eab8:	bdffffc4 	addi	r23,r23,-1
1000eabc:	20e6b03a 	or	r19,r4,r3
1000eac0:	b8800005 	stb	r2,0(r23)
1000eac4:	9d06b03a 	or	r3,r19,r20
1000eac8:	183ff61e 	bne	r3,zero,1000eaa4 <__alt_data_end+0xf800eaa4>
1000eacc:	88c0004c 	andi	r3,r17,1
1000ead0:	18021f1e 	bne	r3,zero,1000f350 <___vfiprintf_internal_r+0xf9c>
1000ead4:	d9401e17 	ldw	r5,120(sp)
1000ead8:	2de9c83a 	sub	r20,r5,r23
1000eadc:	003f3806 	br	1000e7c0 <__alt_data_end+0xf800e7c0>
1000eae0:	9cc03fcc 	andi	r19,r19,255
1000eae4:	b811883a 	mov	r8,r23
1000eae8:	98034f1e 	bne	r19,zero,1000f828 <___vfiprintf_internal_r+0x1474>
1000eaec:	00840074 	movhi	r2,4097
1000eaf0:	1099d904 	addi	r2,r2,26468
1000eaf4:	d8802615 	stw	r2,152(sp)
1000eaf8:	8880080c 	andi	r2,r17,32
1000eafc:	1000ac26 	beq	r2,zero,1000edb0 <___vfiprintf_internal_r+0x9fc>
1000eb00:	d9002217 	ldw	r4,136(sp)
1000eb04:	24c00017 	ldw	r19,0(r4)
1000eb08:	25000117 	ldw	r20,4(r4)
1000eb0c:	21000204 	addi	r4,r4,8
1000eb10:	d9002215 	stw	r4,136(sp)
1000eb14:	8880004c 	andi	r2,r17,1
1000eb18:	1001e726 	beq	r2,zero,1000f2b8 <___vfiprintf_internal_r+0xf04>
1000eb1c:	9d04b03a 	or	r2,r19,r20
1000eb20:	10025c1e 	bne	r2,zero,1000f494 <___vfiprintf_internal_r+0x10e0>
1000eb24:	d8001d85 	stb	zero,118(sp)
1000eb28:	80024416 	blt	r16,zero,1000f43c <___vfiprintf_internal_r+0x1088>
1000eb2c:	00bfdfc4 	movi	r2,-129
1000eb30:	88a2703a 	and	r17,r17,r2
1000eb34:	003f1d06 	br	1000e7ac <__alt_data_end+0xf800e7ac>
1000eb38:	d8c02217 	ldw	r3,136(sp)
1000eb3c:	04c00044 	movi	r19,1
1000eb40:	b811883a 	mov	r8,r23
1000eb44:	18800017 	ldw	r2,0(r3)
1000eb48:	18c00104 	addi	r3,r3,4
1000eb4c:	d8001d85 	stb	zero,118(sp)
1000eb50:	d8801005 	stb	r2,64(sp)
1000eb54:	d8c02215 	stw	r3,136(sp)
1000eb58:	9829883a 	mov	r20,r19
1000eb5c:	ddc01004 	addi	r23,sp,64
1000eb60:	0021883a 	mov	r16,zero
1000eb64:	003f1e06 	br	1000e7e0 <__alt_data_end+0xf800e7e0>
1000eb68:	9cc03fcc 	andi	r19,r19,255
1000eb6c:	b811883a 	mov	r8,r23
1000eb70:	9803331e 	bne	r19,zero,1000f840 <___vfiprintf_internal_r+0x148c>
1000eb74:	8880080c 	andi	r2,r17,32
1000eb78:	10004826 	beq	r2,zero,1000ec9c <___vfiprintf_internal_r+0x8e8>
1000eb7c:	d9002217 	ldw	r4,136(sp)
1000eb80:	20800117 	ldw	r2,4(r4)
1000eb84:	24c00017 	ldw	r19,0(r4)
1000eb88:	21000204 	addi	r4,r4,8
1000eb8c:	d9002215 	stw	r4,136(sp)
1000eb90:	1029883a 	mov	r20,r2
1000eb94:	10024c16 	blt	r2,zero,1000f4c8 <___vfiprintf_internal_r+0x1114>
1000eb98:	dd401d83 	ldbu	r21,118(sp)
1000eb9c:	80007116 	blt	r16,zero,1000ed64 <___vfiprintf_internal_r+0x9b0>
1000eba0:	00ffdfc4 	movi	r3,-129
1000eba4:	9d04b03a 	or	r2,r19,r20
1000eba8:	88e2703a 	and	r17,r17,r3
1000ebac:	1000d126 	beq	r2,zero,1000eef4 <___vfiprintf_internal_r+0xb40>
1000ebb0:	a0023526 	beq	r20,zero,1000f488 <___vfiprintf_internal_r+0x10d4>
1000ebb4:	ddc01a04 	addi	r23,sp,104
1000ebb8:	4039883a 	mov	fp,r8
1000ebbc:	9809883a 	mov	r4,r19
1000ebc0:	a00b883a 	mov	r5,r20
1000ebc4:	01800284 	movi	r6,10
1000ebc8:	000f883a 	mov	r7,zero
1000ebcc:	00108e00 	call	100108e0 <__umoddi3>
1000ebd0:	10800c04 	addi	r2,r2,48
1000ebd4:	bdffffc4 	addi	r23,r23,-1
1000ebd8:	9809883a 	mov	r4,r19
1000ebdc:	a00b883a 	mov	r5,r20
1000ebe0:	b8800005 	stb	r2,0(r23)
1000ebe4:	01800284 	movi	r6,10
1000ebe8:	000f883a 	mov	r7,zero
1000ebec:	00102e40 	call	100102e4 <__udivdi3>
1000ebf0:	1027883a 	mov	r19,r2
1000ebf4:	10c4b03a 	or	r2,r2,r3
1000ebf8:	1829883a 	mov	r20,r3
1000ebfc:	103fef1e 	bne	r2,zero,1000ebbc <__alt_data_end+0xf800ebbc>
1000ec00:	d9001e17 	ldw	r4,120(sp)
1000ec04:	e011883a 	mov	r8,fp
1000ec08:	25e9c83a 	sub	r20,r4,r23
1000ec0c:	003eec06 	br	1000e7c0 <__alt_data_end+0xf800e7c0>
1000ec10:	d8802307 	ldb	r2,140(sp)
1000ec14:	1002361e 	bne	r2,zero,1000f4f0 <___vfiprintf_internal_r+0x113c>
1000ec18:	00c00804 	movi	r3,32
1000ec1c:	d8c02305 	stb	r3,140(sp)
1000ec20:	04c00044 	movi	r19,1
1000ec24:	b0c00007 	ldb	r3,0(r22)
1000ec28:	003e3f06 	br	1000e528 <__alt_data_end+0xf800e528>
1000ec2c:	8c400054 	ori	r17,r17,1
1000ec30:	b0c00007 	ldb	r3,0(r22)
1000ec34:	003e3c06 	br	1000e528 <__alt_data_end+0xf800e528>
1000ec38:	8c402014 	ori	r17,r17,128
1000ec3c:	b0c00007 	ldb	r3,0(r22)
1000ec40:	003e3906 	br	1000e528 <__alt_data_end+0xf800e528>
1000ec44:	dc002715 	stw	r16,156(sp)
1000ec48:	d8002515 	stw	zero,148(sp)
1000ec4c:	1f3ff404 	addi	fp,r3,-48
1000ec50:	0009883a 	mov	r4,zero
1000ec54:	b021883a 	mov	r16,r22
1000ec58:	01400284 	movi	r5,10
1000ec5c:	00069bc0 	call	100069bc <__mulsi3>
1000ec60:	80c00007 	ldb	r3,0(r16)
1000ec64:	e089883a 	add	r4,fp,r2
1000ec68:	b5800044 	addi	r22,r22,1
1000ec6c:	1f3ff404 	addi	fp,r3,-48
1000ec70:	b021883a 	mov	r16,r22
1000ec74:	af3ff82e 	bgeu	r21,fp,1000ec58 <__alt_data_end+0xf800ec58>
1000ec78:	d9002515 	stw	r4,148(sp)
1000ec7c:	dc002717 	ldw	r16,156(sp)
1000ec80:	003e2a06 	br	1000e52c <__alt_data_end+0xf800e52c>
1000ec84:	9cc03fcc 	andi	r19,r19,255
1000ec88:	b811883a 	mov	r8,r23
1000ec8c:	9802e91e 	bne	r19,zero,1000f834 <___vfiprintf_internal_r+0x1480>
1000ec90:	8c400414 	ori	r17,r17,16
1000ec94:	8880080c 	andi	r2,r17,32
1000ec98:	103fb81e 	bne	r2,zero,1000eb7c <__alt_data_end+0xf800eb7c>
1000ec9c:	8880040c 	andi	r2,r17,16
1000eca0:	10022e26 	beq	r2,zero,1000f55c <___vfiprintf_internal_r+0x11a8>
1000eca4:	d9402217 	ldw	r5,136(sp)
1000eca8:	2cc00017 	ldw	r19,0(r5)
1000ecac:	29400104 	addi	r5,r5,4
1000ecb0:	d9402215 	stw	r5,136(sp)
1000ecb4:	9829d7fa 	srai	r20,r19,31
1000ecb8:	a005883a 	mov	r2,r20
1000ecbc:	003fb506 	br	1000eb94 <__alt_data_end+0xf800eb94>
1000ecc0:	9cc03fcc 	andi	r19,r19,255
1000ecc4:	b811883a 	mov	r8,r23
1000ecc8:	9802fa1e 	bne	r19,zero,1000f8b4 <___vfiprintf_internal_r+0x1500>
1000eccc:	8c400414 	ori	r17,r17,16
1000ecd0:	8880080c 	andi	r2,r17,32
1000ecd4:	103f661e 	bne	r2,zero,1000ea70 <__alt_data_end+0xf800ea70>
1000ecd8:	8880040c 	andi	r2,r17,16
1000ecdc:	10020626 	beq	r2,zero,1000f4f8 <___vfiprintf_internal_r+0x1144>
1000ece0:	d9402217 	ldw	r5,136(sp)
1000ece4:	d8001d85 	stb	zero,118(sp)
1000ece8:	0029883a 	mov	r20,zero
1000ecec:	28800104 	addi	r2,r5,4
1000ecf0:	2cc00017 	ldw	r19,0(r5)
1000ecf4:	80020816 	blt	r16,zero,1000f518 <___vfiprintf_internal_r+0x1164>
1000ecf8:	00ffdfc4 	movi	r3,-129
1000ecfc:	d8802215 	stw	r2,136(sp)
1000ed00:	88e2703a 	and	r17,r17,r3
1000ed04:	983f651e 	bne	r19,zero,1000ea9c <__alt_data_end+0xf800ea9c>
1000ed08:	002b883a 	mov	r21,zero
1000ed0c:	8002cf26 	beq	r16,zero,1000f84c <___vfiprintf_internal_r+0x1498>
1000ed10:	0027883a 	mov	r19,zero
1000ed14:	0029883a 	mov	r20,zero
1000ed18:	003f6106 	br	1000eaa0 <__alt_data_end+0xf800eaa0>
1000ed1c:	9cc03fcc 	andi	r19,r19,255
1000ed20:	b811883a 	mov	r8,r23
1000ed24:	9802e01e 	bne	r19,zero,1000f8a8 <___vfiprintf_internal_r+0x14f4>
1000ed28:	8c400414 	ori	r17,r17,16
1000ed2c:	8880080c 	andi	r2,r17,32
1000ed30:	1000641e 	bne	r2,zero,1000eec4 <___vfiprintf_internal_r+0xb10>
1000ed34:	8880040c 	andi	r2,r17,16
1000ed38:	1001c81e 	bne	r2,zero,1000f45c <___vfiprintf_internal_r+0x10a8>
1000ed3c:	8880100c 	andi	r2,r17,64
1000ed40:	d8001d85 	stb	zero,118(sp)
1000ed44:	1002281e 	bne	r2,zero,1000f5e8 <___vfiprintf_internal_r+0x1234>
1000ed48:	d9002217 	ldw	r4,136(sp)
1000ed4c:	0029883a 	mov	r20,zero
1000ed50:	20800104 	addi	r2,r4,4
1000ed54:	24c00017 	ldw	r19,0(r4)
1000ed58:	8001c60e 	bge	r16,zero,1000f474 <___vfiprintf_internal_r+0x10c0>
1000ed5c:	d8802215 	stw	r2,136(sp)
1000ed60:	002b883a 	mov	r21,zero
1000ed64:	9d04b03a 	or	r2,r19,r20
1000ed68:	103f911e 	bne	r2,zero,1000ebb0 <__alt_data_end+0xf800ebb0>
1000ed6c:	00800044 	movi	r2,1
1000ed70:	10803fcc 	andi	r2,r2,255
1000ed74:	00c00044 	movi	r3,1
1000ed78:	10c05f26 	beq	r2,r3,1000eef8 <___vfiprintf_internal_r+0xb44>
1000ed7c:	00c00084 	movi	r3,2
1000ed80:	10ffe31e 	bne	r2,r3,1000ed10 <__alt_data_end+0xf800ed10>
1000ed84:	0027883a 	mov	r19,zero
1000ed88:	0029883a 	mov	r20,zero
1000ed8c:	00015106 	br	1000f2d4 <___vfiprintf_internal_r+0xf20>
1000ed90:	9cc03fcc 	andi	r19,r19,255
1000ed94:	b811883a 	mov	r8,r23
1000ed98:	9802c01e 	bne	r19,zero,1000f89c <___vfiprintf_internal_r+0x14e8>
1000ed9c:	01440074 	movhi	r5,4097
1000eda0:	2959d404 	addi	r5,r5,26448
1000eda4:	d9402615 	stw	r5,152(sp)
1000eda8:	8880080c 	andi	r2,r17,32
1000edac:	103f541e 	bne	r2,zero,1000eb00 <__alt_data_end+0xf800eb00>
1000edb0:	8880040c 	andi	r2,r17,16
1000edb4:	1001f226 	beq	r2,zero,1000f580 <___vfiprintf_internal_r+0x11cc>
1000edb8:	d9402217 	ldw	r5,136(sp)
1000edbc:	0029883a 	mov	r20,zero
1000edc0:	2cc00017 	ldw	r19,0(r5)
1000edc4:	29400104 	addi	r5,r5,4
1000edc8:	d9402215 	stw	r5,136(sp)
1000edcc:	003f5106 	br	1000eb14 <__alt_data_end+0xf800eb14>
1000edd0:	d8c02217 	ldw	r3,136(sp)
1000edd4:	b811883a 	mov	r8,r23
1000edd8:	d8001d85 	stb	zero,118(sp)
1000eddc:	1dc00017 	ldw	r23,0(r3)
1000ede0:	1f000104 	addi	fp,r3,4
1000ede4:	b8025926 	beq	r23,zero,1000f74c <___vfiprintf_internal_r+0x1398>
1000ede8:	80023316 	blt	r16,zero,1000f6b8 <___vfiprintf_internal_r+0x1304>
1000edec:	800d883a 	mov	r6,r16
1000edf0:	000b883a 	mov	r5,zero
1000edf4:	b809883a 	mov	r4,r23
1000edf8:	da002a15 	stw	r8,168(sp)
1000edfc:	000c4f40 	call	1000c4f4 <memchr>
1000ee00:	da002a17 	ldw	r8,168(sp)
1000ee04:	10026826 	beq	r2,zero,1000f7a8 <___vfiprintf_internal_r+0x13f4>
1000ee08:	15e9c83a 	sub	r20,r2,r23
1000ee0c:	dd401d83 	ldbu	r21,118(sp)
1000ee10:	df002215 	stw	fp,136(sp)
1000ee14:	0021883a 	mov	r16,zero
1000ee18:	003e6906 	br	1000e7c0 <__alt_data_end+0xf800e7c0>
1000ee1c:	9cc03fcc 	andi	r19,r19,255
1000ee20:	b811883a 	mov	r8,r23
1000ee24:	983fc126 	beq	r19,zero,1000ed2c <__alt_data_end+0xf800ed2c>
1000ee28:	d8c02303 	ldbu	r3,140(sp)
1000ee2c:	d8c01d85 	stb	r3,118(sp)
1000ee30:	003fbe06 	br	1000ed2c <__alt_data_end+0xf800ed2c>
1000ee34:	d9002217 	ldw	r4,136(sp)
1000ee38:	d9402217 	ldw	r5,136(sp)
1000ee3c:	21000017 	ldw	r4,0(r4)
1000ee40:	28800104 	addi	r2,r5,4
1000ee44:	d9002515 	stw	r4,148(sp)
1000ee48:	203e3d16 	blt	r4,zero,1000e740 <__alt_data_end+0xf800e740>
1000ee4c:	d8802215 	stw	r2,136(sp)
1000ee50:	b0c00007 	ldb	r3,0(r22)
1000ee54:	003db406 	br	1000e528 <__alt_data_end+0xf800e528>
1000ee58:	00c00ac4 	movi	r3,43
1000ee5c:	d8c02305 	stb	r3,140(sp)
1000ee60:	04c00044 	movi	r19,1
1000ee64:	b0c00007 	ldb	r3,0(r22)
1000ee68:	003daf06 	br	1000e528 <__alt_data_end+0xf800e528>
1000ee6c:	b0c00007 	ldb	r3,0(r22)
1000ee70:	01000a84 	movi	r4,42
1000ee74:	b4000044 	addi	r16,r22,1
1000ee78:	19025e26 	beq	r3,r4,1000f7f4 <___vfiprintf_internal_r+0x1440>
1000ee7c:	1f3ff404 	addi	fp,r3,-48
1000ee80:	0009883a 	mov	r4,zero
1000ee84:	af025236 	bltu	r21,fp,1000f7d0 <___vfiprintf_internal_r+0x141c>
1000ee88:	01400284 	movi	r5,10
1000ee8c:	00069bc0 	call	100069bc <__mulsi3>
1000ee90:	80c00007 	ldb	r3,0(r16)
1000ee94:	1709883a 	add	r4,r2,fp
1000ee98:	85800044 	addi	r22,r16,1
1000ee9c:	1f3ff404 	addi	fp,r3,-48
1000eea0:	b021883a 	mov	r16,r22
1000eea4:	af3ff82e 	bgeu	r21,fp,1000ee88 <__alt_data_end+0xf800ee88>
1000eea8:	2021883a 	mov	r16,r4
1000eeac:	203d9f0e 	bge	r4,zero,1000e52c <__alt_data_end+0xf800e52c>
1000eeb0:	043fffc4 	movi	r16,-1
1000eeb4:	003d9d06 	br	1000e52c <__alt_data_end+0xf800e52c>
1000eeb8:	8c401014 	ori	r17,r17,64
1000eebc:	b0c00007 	ldb	r3,0(r22)
1000eec0:	003d9906 	br	1000e528 <__alt_data_end+0xf800e528>
1000eec4:	d9002217 	ldw	r4,136(sp)
1000eec8:	d8001d85 	stb	zero,118(sp)
1000eecc:	20c00204 	addi	r3,r4,8
1000eed0:	24c00017 	ldw	r19,0(r4)
1000eed4:	25000117 	ldw	r20,4(r4)
1000eed8:	8001e716 	blt	r16,zero,1000f678 <___vfiprintf_internal_r+0x12c4>
1000eedc:	013fdfc4 	movi	r4,-129
1000eee0:	9d04b03a 	or	r2,r19,r20
1000eee4:	d8c02215 	stw	r3,136(sp)
1000eee8:	8922703a 	and	r17,r17,r4
1000eeec:	002b883a 	mov	r21,zero
1000eef0:	103f2f1e 	bne	r2,zero,1000ebb0 <__alt_data_end+0xf800ebb0>
1000eef4:	803e2f26 	beq	r16,zero,1000e7b4 <__alt_data_end+0xf800e7b4>
1000eef8:	0027883a 	mov	r19,zero
1000eefc:	9cc00c04 	addi	r19,r19,48
1000ef00:	dcc019c5 	stb	r19,103(sp)
1000ef04:	dd002817 	ldw	r20,160(sp)
1000ef08:	ddc019c4 	addi	r23,sp,103
1000ef0c:	003e2c06 	br	1000e7c0 <__alt_data_end+0xf800e7c0>
1000ef10:	9cc03fcc 	andi	r19,r19,255
1000ef14:	b811883a 	mov	r8,r23
1000ef18:	9802571e 	bne	r19,zero,1000f878 <___vfiprintf_internal_r+0x14c4>
1000ef1c:	18005726 	beq	r3,zero,1000f07c <___vfiprintf_internal_r+0xcc8>
1000ef20:	04c00044 	movi	r19,1
1000ef24:	d8c01005 	stb	r3,64(sp)
1000ef28:	d8001d85 	stb	zero,118(sp)
1000ef2c:	9829883a 	mov	r20,r19
1000ef30:	ddc01004 	addi	r23,sp,64
1000ef34:	003f0a06 	br	1000eb60 <__alt_data_end+0xf800eb60>
1000ef38:	d9402017 	ldw	r5,128(sp)
1000ef3c:	d9002117 	ldw	r4,132(sp)
1000ef40:	d9801a04 	addi	r6,sp,104
1000ef44:	da802a15 	stw	r10,168(sp)
1000ef48:	000e2a00 	call	1000e2a0 <__sprint_r.part.0>
1000ef4c:	da802a17 	ldw	r10,168(sp)
1000ef50:	1000501e 	bne	r2,zero,1000f094 <___vfiprintf_internal_r+0xce0>
1000ef54:	d9801b17 	ldw	r6,108(sp)
1000ef58:	d8801c17 	ldw	r2,112(sp)
1000ef5c:	d811883a 	mov	r8,sp
1000ef60:	31000044 	addi	r4,r6,1
1000ef64:	003e3606 	br	1000e840 <__alt_data_end+0xf800e840>
1000ef68:	d9001b17 	ldw	r4,108(sp)
1000ef6c:	d8801c17 	ldw	r2,112(sp)
1000ef70:	21400044 	addi	r5,r4,1
1000ef74:	d9801d87 	ldb	r6,118(sp)
1000ef78:	303e5226 	beq	r6,zero,1000e8c4 <__alt_data_end+0xf800e8c4>
1000ef7c:	01800044 	movi	r6,1
1000ef80:	d9001d84 	addi	r4,sp,118
1000ef84:	1185883a 	add	r2,r2,r6
1000ef88:	41000015 	stw	r4,0(r8)
1000ef8c:	41800115 	stw	r6,4(r8)
1000ef90:	d8801c15 	stw	r2,112(sp)
1000ef94:	d9401b15 	stw	r5,108(sp)
1000ef98:	010001c4 	movi	r4,7
1000ef9c:	2140b00e 	bge	r4,r5,1000f260 <___vfiprintf_internal_r+0xeac>
1000efa0:	1000f61e 	bne	r2,zero,1000f37c <___vfiprintf_internal_r+0xfc8>
1000efa4:	3800b31e 	bne	r7,zero,1000f274 <___vfiprintf_internal_r+0xec0>
1000efa8:	0009883a 	mov	r4,zero
1000efac:	300b883a 	mov	r5,r6
1000efb0:	d811883a 	mov	r8,sp
1000efb4:	01802004 	movi	r6,128
1000efb8:	19be5226 	beq	r3,r6,1000e904 <__alt_data_end+0xf800e904>
1000efbc:	8521c83a 	sub	r16,r16,r20
1000efc0:	043e790e 	bge	zero,r16,1000e9a8 <__alt_data_end+0xf800e9a8>
1000efc4:	05400404 	movi	r21,16
1000efc8:	ac01b00e 	bge	r21,r16,1000f68c <___vfiprintf_internal_r+0x12d8>
1000efcc:	01440074 	movhi	r5,4097
1000efd0:	295a3a04 	addi	r5,r5,26856
1000efd4:	d9402315 	stw	r5,140(sp)
1000efd8:	070001c4 	movi	fp,7
1000efdc:	00000506 	br	1000eff4 <___vfiprintf_internal_r+0xc40>
1000efe0:	21400084 	addi	r5,r4,2
1000efe4:	42000204 	addi	r8,r8,8
1000efe8:	1809883a 	mov	r4,r3
1000efec:	843ffc04 	addi	r16,r16,-16
1000eff0:	ac000d0e 	bge	r21,r16,1000f028 <___vfiprintf_internal_r+0xc74>
1000eff4:	10800404 	addi	r2,r2,16
1000eff8:	20c00044 	addi	r3,r4,1
1000effc:	44800015 	stw	r18,0(r8)
1000f000:	45400115 	stw	r21,4(r8)
1000f004:	d8801c15 	stw	r2,112(sp)
1000f008:	d8c01b15 	stw	r3,108(sp)
1000f00c:	e0fff40e 	bge	fp,r3,1000efe0 <__alt_data_end+0xf800efe0>
1000f010:	1000101e 	bne	r2,zero,1000f054 <___vfiprintf_internal_r+0xca0>
1000f014:	843ffc04 	addi	r16,r16,-16
1000f018:	01400044 	movi	r5,1
1000f01c:	0009883a 	mov	r4,zero
1000f020:	d811883a 	mov	r8,sp
1000f024:	ac3ff316 	blt	r21,r16,1000eff4 <__alt_data_end+0xf800eff4>
1000f028:	d8c02317 	ldw	r3,140(sp)
1000f02c:	1405883a 	add	r2,r2,r16
1000f030:	44000115 	stw	r16,4(r8)
1000f034:	40c00015 	stw	r3,0(r8)
1000f038:	d8801c15 	stw	r2,112(sp)
1000f03c:	d9401b15 	stw	r5,108(sp)
1000f040:	00c001c4 	movi	r3,7
1000f044:	19401916 	blt	r3,r5,1000f0ac <___vfiprintf_internal_r+0xcf8>
1000f048:	42000204 	addi	r8,r8,8
1000f04c:	29400044 	addi	r5,r5,1
1000f050:	003e5506 	br	1000e9a8 <__alt_data_end+0xf800e9a8>
1000f054:	d9402017 	ldw	r5,128(sp)
1000f058:	d9002117 	ldw	r4,132(sp)
1000f05c:	d9801a04 	addi	r6,sp,104
1000f060:	000e2a00 	call	1000e2a0 <__sprint_r.part.0>
1000f064:	10000b1e 	bne	r2,zero,1000f094 <___vfiprintf_internal_r+0xce0>
1000f068:	d9001b17 	ldw	r4,108(sp)
1000f06c:	d8801c17 	ldw	r2,112(sp)
1000f070:	d811883a 	mov	r8,sp
1000f074:	21400044 	addi	r5,r4,1
1000f078:	003fdc06 	br	1000efec <__alt_data_end+0xf800efec>
1000f07c:	d8801c17 	ldw	r2,112(sp)
1000f080:	10000426 	beq	r2,zero,1000f094 <___vfiprintf_internal_r+0xce0>
1000f084:	d9402017 	ldw	r5,128(sp)
1000f088:	d9002117 	ldw	r4,132(sp)
1000f08c:	d9801a04 	addi	r6,sp,104
1000f090:	000e2a00 	call	1000e2a0 <__sprint_r.part.0>
1000f094:	d9402017 	ldw	r5,128(sp)
1000f098:	2880030b 	ldhu	r2,12(r5)
1000f09c:	1080100c 	andi	r2,r2,64
1000f0a0:	10014d1e 	bne	r2,zero,1000f5d8 <___vfiprintf_internal_r+0x1224>
1000f0a4:	d8802417 	ldw	r2,144(sp)
1000f0a8:	003d9706 	br	1000e708 <__alt_data_end+0xf800e708>
1000f0ac:	1000d21e 	bne	r2,zero,1000f3f8 <___vfiprintf_internal_r+0x1044>
1000f0b0:	00c00044 	movi	r3,1
1000f0b4:	a005883a 	mov	r2,r20
1000f0b8:	ddc00015 	stw	r23,0(sp)
1000f0bc:	dd000115 	stw	r20,4(sp)
1000f0c0:	dd001c15 	stw	r20,112(sp)
1000f0c4:	d8c01b15 	stw	r3,108(sp)
1000f0c8:	d811883a 	mov	r8,sp
1000f0cc:	42000204 	addi	r8,r8,8
1000f0d0:	8c40010c 	andi	r17,r17,4
1000f0d4:	88004026 	beq	r17,zero,1000f1d8 <___vfiprintf_internal_r+0xe24>
1000f0d8:	d9002517 	ldw	r4,148(sp)
1000f0dc:	24e3c83a 	sub	r17,r4,r19
1000f0e0:	04403d0e 	bge	zero,r17,1000f1d8 <___vfiprintf_internal_r+0xe24>
1000f0e4:	04000404 	movi	r16,16
1000f0e8:	8441a90e 	bge	r16,r17,1000f790 <___vfiprintf_internal_r+0x13dc>
1000f0ec:	00c40074 	movhi	r3,4097
1000f0f0:	18da3e04 	addi	r3,r3,26872
1000f0f4:	d9001b17 	ldw	r4,108(sp)
1000f0f8:	d8c02315 	stw	r3,140(sp)
1000f0fc:	050001c4 	movi	r20,7
1000f100:	dd402117 	ldw	r21,132(sp)
1000f104:	ddc02017 	ldw	r23,128(sp)
1000f108:	00000506 	br	1000f120 <___vfiprintf_internal_r+0xd6c>
1000f10c:	21400084 	addi	r5,r4,2
1000f110:	42000204 	addi	r8,r8,8
1000f114:	1809883a 	mov	r4,r3
1000f118:	8c7ffc04 	addi	r17,r17,-16
1000f11c:	84400f0e 	bge	r16,r17,1000f15c <___vfiprintf_internal_r+0xda8>
1000f120:	01440074 	movhi	r5,4097
1000f124:	10800404 	addi	r2,r2,16
1000f128:	20c00044 	addi	r3,r4,1
1000f12c:	295a3e04 	addi	r5,r5,26872
1000f130:	41400015 	stw	r5,0(r8)
1000f134:	44000115 	stw	r16,4(r8)
1000f138:	d8801c15 	stw	r2,112(sp)
1000f13c:	d8c01b15 	stw	r3,108(sp)
1000f140:	a0fff20e 	bge	r20,r3,1000f10c <__alt_data_end+0xf800f10c>
1000f144:	1000141e 	bne	r2,zero,1000f198 <___vfiprintf_internal_r+0xde4>
1000f148:	8c7ffc04 	addi	r17,r17,-16
1000f14c:	01400044 	movi	r5,1
1000f150:	0009883a 	mov	r4,zero
1000f154:	d811883a 	mov	r8,sp
1000f158:	847ff116 	blt	r16,r17,1000f120 <__alt_data_end+0xf800f120>
1000f15c:	d8c02317 	ldw	r3,140(sp)
1000f160:	1445883a 	add	r2,r2,r17
1000f164:	44400115 	stw	r17,4(r8)
1000f168:	40c00015 	stw	r3,0(r8)
1000f16c:	d8801c15 	stw	r2,112(sp)
1000f170:	d9401b15 	stw	r5,108(sp)
1000f174:	00c001c4 	movi	r3,7
1000f178:	1940170e 	bge	r3,r5,1000f1d8 <___vfiprintf_internal_r+0xe24>
1000f17c:	1000101e 	bne	r2,zero,1000f1c0 <___vfiprintf_internal_r+0xe0c>
1000f180:	d8802517 	ldw	r2,148(sp)
1000f184:	14c11616 	blt	r2,r19,1000f5e0 <___vfiprintf_internal_r+0x122c>
1000f188:	d9002417 	ldw	r4,144(sp)
1000f18c:	2089883a 	add	r4,r4,r2
1000f190:	d9002415 	stw	r4,144(sp)
1000f194:	003e1806 	br	1000e9f8 <__alt_data_end+0xf800e9f8>
1000f198:	d9801a04 	addi	r6,sp,104
1000f19c:	b80b883a 	mov	r5,r23
1000f1a0:	a809883a 	mov	r4,r21
1000f1a4:	000e2a00 	call	1000e2a0 <__sprint_r.part.0>
1000f1a8:	103fba1e 	bne	r2,zero,1000f094 <__alt_data_end+0xf800f094>
1000f1ac:	d9001b17 	ldw	r4,108(sp)
1000f1b0:	d8801c17 	ldw	r2,112(sp)
1000f1b4:	d811883a 	mov	r8,sp
1000f1b8:	21400044 	addi	r5,r4,1
1000f1bc:	003fd606 	br	1000f118 <__alt_data_end+0xf800f118>
1000f1c0:	d9402017 	ldw	r5,128(sp)
1000f1c4:	d9002117 	ldw	r4,132(sp)
1000f1c8:	d9801a04 	addi	r6,sp,104
1000f1cc:	000e2a00 	call	1000e2a0 <__sprint_r.part.0>
1000f1d0:	103fb01e 	bne	r2,zero,1000f094 <__alt_data_end+0xf800f094>
1000f1d4:	d8801c17 	ldw	r2,112(sp)
1000f1d8:	d8c02517 	ldw	r3,148(sp)
1000f1dc:	1cc0010e 	bge	r3,r19,1000f1e4 <___vfiprintf_internal_r+0xe30>
1000f1e0:	9807883a 	mov	r3,r19
1000f1e4:	d9002417 	ldw	r4,144(sp)
1000f1e8:	20c9883a 	add	r4,r4,r3
1000f1ec:	d9002415 	stw	r4,144(sp)
1000f1f0:	103e0126 	beq	r2,zero,1000e9f8 <__alt_data_end+0xf800e9f8>
1000f1f4:	d9402017 	ldw	r5,128(sp)
1000f1f8:	d9002117 	ldw	r4,132(sp)
1000f1fc:	d9801a04 	addi	r6,sp,104
1000f200:	000e2a00 	call	1000e2a0 <__sprint_r.part.0>
1000f204:	103dfc26 	beq	r2,zero,1000e9f8 <__alt_data_end+0xf800e9f8>
1000f208:	003fa206 	br	1000f094 <__alt_data_end+0xf800f094>
1000f20c:	d9402017 	ldw	r5,128(sp)
1000f210:	d9002117 	ldw	r4,132(sp)
1000f214:	d9801a04 	addi	r6,sp,104
1000f218:	d9c02b15 	stw	r7,172(sp)
1000f21c:	000e2a00 	call	1000e2a0 <__sprint_r.part.0>
1000f220:	d9c02b17 	ldw	r7,172(sp)
1000f224:	103f9b1e 	bne	r2,zero,1000f094 <__alt_data_end+0xf800f094>
1000f228:	d9001b17 	ldw	r4,108(sp)
1000f22c:	d8801c17 	ldw	r2,112(sp)
1000f230:	d811883a 	mov	r8,sp
1000f234:	21800044 	addi	r6,r4,1
1000f238:	003dbf06 	br	1000e938 <__alt_data_end+0xf800e938>
1000f23c:	1000d81e 	bne	r2,zero,1000f5a0 <___vfiprintf_internal_r+0x11ec>
1000f240:	d9001d87 	ldb	r4,118(sp)
1000f244:	20000a26 	beq	r4,zero,1000f270 <___vfiprintf_internal_r+0xebc>
1000f248:	00800044 	movi	r2,1
1000f24c:	d9001d84 	addi	r4,sp,118
1000f250:	100b883a 	mov	r5,r2
1000f254:	d9000015 	stw	r4,0(sp)
1000f258:	d8800115 	stw	r2,4(sp)
1000f25c:	d811883a 	mov	r8,sp
1000f260:	2809883a 	mov	r4,r5
1000f264:	42000204 	addi	r8,r8,8
1000f268:	29400044 	addi	r5,r5,1
1000f26c:	003d9506 	br	1000e8c4 <__alt_data_end+0xf800e8c4>
1000f270:	3800fd26 	beq	r7,zero,1000f668 <___vfiprintf_internal_r+0x12b4>
1000f274:	00800084 	movi	r2,2
1000f278:	d9001d04 	addi	r4,sp,116
1000f27c:	d9000015 	stw	r4,0(sp)
1000f280:	d8800115 	stw	r2,4(sp)
1000f284:	01400044 	movi	r5,1
1000f288:	d811883a 	mov	r8,sp
1000f28c:	2809883a 	mov	r4,r5
1000f290:	42000204 	addi	r8,r8,8
1000f294:	29400044 	addi	r5,r5,1
1000f298:	003f4606 	br	1000efb4 <__alt_data_end+0xf800efb4>
1000f29c:	d8802517 	ldw	r2,148(sp)
1000f2a0:	14c0010e 	bge	r2,r19,1000f2a8 <___vfiprintf_internal_r+0xef4>
1000f2a4:	9805883a 	mov	r2,r19
1000f2a8:	d9402417 	ldw	r5,144(sp)
1000f2ac:	288b883a 	add	r5,r5,r2
1000f2b0:	d9402415 	stw	r5,144(sp)
1000f2b4:	003dd006 	br	1000e9f8 <__alt_data_end+0xf800e9f8>
1000f2b8:	d8001d85 	stb	zero,118(sp)
1000f2bc:	80005d16 	blt	r16,zero,1000f434 <___vfiprintf_internal_r+0x1080>
1000f2c0:	00ffdfc4 	movi	r3,-129
1000f2c4:	9d04b03a 	or	r2,r19,r20
1000f2c8:	88e2703a 	and	r17,r17,r3
1000f2cc:	103d3726 	beq	r2,zero,1000e7ac <__alt_data_end+0xf800e7ac>
1000f2d0:	002b883a 	mov	r21,zero
1000f2d4:	d9002617 	ldw	r4,152(sp)
1000f2d8:	ddc01a04 	addi	r23,sp,104
1000f2dc:	988003cc 	andi	r2,r19,15
1000f2e0:	a006973a 	slli	r3,r20,28
1000f2e4:	2085883a 	add	r2,r4,r2
1000f2e8:	9826d13a 	srli	r19,r19,4
1000f2ec:	10800003 	ldbu	r2,0(r2)
1000f2f0:	a028d13a 	srli	r20,r20,4
1000f2f4:	bdffffc4 	addi	r23,r23,-1
1000f2f8:	1ce6b03a 	or	r19,r3,r19
1000f2fc:	b8800005 	stb	r2,0(r23)
1000f300:	9d04b03a 	or	r2,r19,r20
1000f304:	103ff51e 	bne	r2,zero,1000f2dc <__alt_data_end+0xf800f2dc>
1000f308:	d8801e17 	ldw	r2,120(sp)
1000f30c:	15e9c83a 	sub	r20,r2,r23
1000f310:	003d2b06 	br	1000e7c0 <__alt_data_end+0xf800e7c0>
1000f314:	d9402017 	ldw	r5,128(sp)
1000f318:	d9002117 	ldw	r4,132(sp)
1000f31c:	d9801a04 	addi	r6,sp,104
1000f320:	000e2a00 	call	1000e2a0 <__sprint_r.part.0>
1000f324:	103f5b1e 	bne	r2,zero,1000f094 <__alt_data_end+0xf800f094>
1000f328:	d8801c17 	ldw	r2,112(sp)
1000f32c:	d811883a 	mov	r8,sp
1000f330:	003f6706 	br	1000f0d0 <__alt_data_end+0xf800f0d0>
1000f334:	d9402017 	ldw	r5,128(sp)
1000f338:	d9002117 	ldw	r4,132(sp)
1000f33c:	d9801a04 	addi	r6,sp,104
1000f340:	000e2a00 	call	1000e2a0 <__sprint_r.part.0>
1000f344:	103f531e 	bne	r2,zero,1000f094 <__alt_data_end+0xf800f094>
1000f348:	d811883a 	mov	r8,sp
1000f34c:	003cd906 	br	1000e6b4 <__alt_data_end+0xf800e6b4>
1000f350:	10803fcc 	andi	r2,r2,255
1000f354:	1080201c 	xori	r2,r2,128
1000f358:	10bfe004 	addi	r2,r2,-128
1000f35c:	00c00c04 	movi	r3,48
1000f360:	10ffe926 	beq	r2,r3,1000f308 <__alt_data_end+0xf800f308>
1000f364:	b8ffffc5 	stb	r3,-1(r23)
1000f368:	d8c01e17 	ldw	r3,120(sp)
1000f36c:	b8bfffc4 	addi	r2,r23,-1
1000f370:	102f883a 	mov	r23,r2
1000f374:	18a9c83a 	sub	r20,r3,r2
1000f378:	003d1106 	br	1000e7c0 <__alt_data_end+0xf800e7c0>
1000f37c:	d9402017 	ldw	r5,128(sp)
1000f380:	d9002117 	ldw	r4,132(sp)
1000f384:	d9801a04 	addi	r6,sp,104
1000f388:	d8c02a15 	stw	r3,168(sp)
1000f38c:	d9c02b15 	stw	r7,172(sp)
1000f390:	000e2a00 	call	1000e2a0 <__sprint_r.part.0>
1000f394:	d8c02a17 	ldw	r3,168(sp)
1000f398:	d9c02b17 	ldw	r7,172(sp)
1000f39c:	103f3d1e 	bne	r2,zero,1000f094 <__alt_data_end+0xf800f094>
1000f3a0:	d9001b17 	ldw	r4,108(sp)
1000f3a4:	d8801c17 	ldw	r2,112(sp)
1000f3a8:	d811883a 	mov	r8,sp
1000f3ac:	21400044 	addi	r5,r4,1
1000f3b0:	003d4406 	br	1000e8c4 <__alt_data_end+0xf800e8c4>
1000f3b4:	d9402017 	ldw	r5,128(sp)
1000f3b8:	d9002117 	ldw	r4,132(sp)
1000f3bc:	d9801a04 	addi	r6,sp,104
1000f3c0:	d8c02a15 	stw	r3,168(sp)
1000f3c4:	000e2a00 	call	1000e2a0 <__sprint_r.part.0>
1000f3c8:	d8c02a17 	ldw	r3,168(sp)
1000f3cc:	103f311e 	bne	r2,zero,1000f094 <__alt_data_end+0xf800f094>
1000f3d0:	d9001b17 	ldw	r4,108(sp)
1000f3d4:	d8801c17 	ldw	r2,112(sp)
1000f3d8:	d811883a 	mov	r8,sp
1000f3dc:	21400044 	addi	r5,r4,1
1000f3e0:	003ef406 	br	1000efb4 <__alt_data_end+0xf800efb4>
1000f3e4:	1000bd1e 	bne	r2,zero,1000f6dc <___vfiprintf_internal_r+0x1328>
1000f3e8:	01400044 	movi	r5,1
1000f3ec:	0009883a 	mov	r4,zero
1000f3f0:	d811883a 	mov	r8,sp
1000f3f4:	003ef106 	br	1000efbc <__alt_data_end+0xf800efbc>
1000f3f8:	d9402017 	ldw	r5,128(sp)
1000f3fc:	d9002117 	ldw	r4,132(sp)
1000f400:	d9801a04 	addi	r6,sp,104
1000f404:	000e2a00 	call	1000e2a0 <__sprint_r.part.0>
1000f408:	103f221e 	bne	r2,zero,1000f094 <__alt_data_end+0xf800f094>
1000f40c:	d9401b17 	ldw	r5,108(sp)
1000f410:	d8801c17 	ldw	r2,112(sp)
1000f414:	d811883a 	mov	r8,sp
1000f418:	29400044 	addi	r5,r5,1
1000f41c:	003d6206 	br	1000e9a8 <__alt_data_end+0xf800e9a8>
1000f420:	01440074 	movhi	r5,4097
1000f424:	2959d904 	addi	r5,r5,26468
1000f428:	d9402615 	stw	r5,152(sp)
1000f42c:	d8c02215 	stw	r3,136(sp)
1000f430:	1023883a 	mov	r17,r2
1000f434:	9d04b03a 	or	r2,r19,r20
1000f438:	103fa51e 	bne	r2,zero,1000f2d0 <__alt_data_end+0xf800f2d0>
1000f43c:	002b883a 	mov	r21,zero
1000f440:	00800084 	movi	r2,2
1000f444:	003e4a06 	br	1000ed70 <__alt_data_end+0xf800ed70>
1000f448:	01440074 	movhi	r5,4097
1000f44c:	2959d904 	addi	r5,r5,26468
1000f450:	002b883a 	mov	r21,zero
1000f454:	d9402615 	stw	r5,152(sp)
1000f458:	003f9e06 	br	1000f2d4 <__alt_data_end+0xf800f2d4>
1000f45c:	d9402217 	ldw	r5,136(sp)
1000f460:	d8001d85 	stb	zero,118(sp)
1000f464:	0029883a 	mov	r20,zero
1000f468:	28800104 	addi	r2,r5,4
1000f46c:	2cc00017 	ldw	r19,0(r5)
1000f470:	803e3a16 	blt	r16,zero,1000ed5c <__alt_data_end+0xf800ed5c>
1000f474:	00ffdfc4 	movi	r3,-129
1000f478:	d8802215 	stw	r2,136(sp)
1000f47c:	88e2703a 	and	r17,r17,r3
1000f480:	002b883a 	mov	r21,zero
1000f484:	983e9b26 	beq	r19,zero,1000eef4 <__alt_data_end+0xf800eef4>
1000f488:	00800244 	movi	r2,9
1000f48c:	14fdc936 	bltu	r2,r19,1000ebb4 <__alt_data_end+0xf800ebb4>
1000f490:	003e9a06 	br	1000eefc <__alt_data_end+0xf800eefc>
1000f494:	00800c04 	movi	r2,48
1000f498:	d8c01d45 	stb	r3,117(sp)
1000f49c:	d8801d05 	stb	r2,116(sp)
1000f4a0:	d8001d85 	stb	zero,118(sp)
1000f4a4:	88c00094 	ori	r3,r17,2
1000f4a8:	80009c16 	blt	r16,zero,1000f71c <___vfiprintf_internal_r+0x1368>
1000f4ac:	00bfdfc4 	movi	r2,-129
1000f4b0:	88a2703a 	and	r17,r17,r2
1000f4b4:	8c400094 	ori	r17,r17,2
1000f4b8:	002b883a 	mov	r21,zero
1000f4bc:	003f8506 	br	1000f2d4 <__alt_data_end+0xf800f2d4>
1000f4c0:	b029883a 	mov	r20,r22
1000f4c4:	003c0b06 	br	1000e4f4 <__alt_data_end+0xf800e4f4>
1000f4c8:	04e7c83a 	sub	r19,zero,r19
1000f4cc:	05400b44 	movi	r21,45
1000f4d0:	9804c03a 	cmpne	r2,r19,zero
1000f4d4:	0529c83a 	sub	r20,zero,r20
1000f4d8:	dd401d85 	stb	r21,118(sp)
1000f4dc:	a0a9c83a 	sub	r20,r20,r2
1000f4e0:	80009716 	blt	r16,zero,1000f740 <___vfiprintf_internal_r+0x138c>
1000f4e4:	00bfdfc4 	movi	r2,-129
1000f4e8:	88a2703a 	and	r17,r17,r2
1000f4ec:	003db006 	br	1000ebb0 <__alt_data_end+0xf800ebb0>
1000f4f0:	b0c00007 	ldb	r3,0(r22)
1000f4f4:	003c0c06 	br	1000e528 <__alt_data_end+0xf800e528>
1000f4f8:	8880100c 	andi	r2,r17,64
1000f4fc:	d8001d85 	stb	zero,118(sp)
1000f500:	1000461e 	bne	r2,zero,1000f61c <___vfiprintf_internal_r+0x1268>
1000f504:	d9002217 	ldw	r4,136(sp)
1000f508:	0029883a 	mov	r20,zero
1000f50c:	20800104 	addi	r2,r4,4
1000f510:	24c00017 	ldw	r19,0(r4)
1000f514:	803df80e 	bge	r16,zero,1000ecf8 <__alt_data_end+0xf800ecf8>
1000f518:	9d06b03a 	or	r3,r19,r20
1000f51c:	d8802215 	stw	r2,136(sp)
1000f520:	183d5e1e 	bne	r3,zero,1000ea9c <__alt_data_end+0xf800ea9c>
1000f524:	002b883a 	mov	r21,zero
1000f528:	0005883a 	mov	r2,zero
1000f52c:	003e1006 	br	1000ed70 <__alt_data_end+0xf800ed70>
1000f530:	8880040c 	andi	r2,r17,16
1000f534:	1000321e 	bne	r2,zero,1000f600 <___vfiprintf_internal_r+0x124c>
1000f538:	8c40100c 	andi	r17,r17,64
1000f53c:	88008d26 	beq	r17,zero,1000f774 <___vfiprintf_internal_r+0x13c0>
1000f540:	d9402217 	ldw	r5,136(sp)
1000f544:	d8c02417 	ldw	r3,144(sp)
1000f548:	28800017 	ldw	r2,0(r5)
1000f54c:	29400104 	addi	r5,r5,4
1000f550:	d9402215 	stw	r5,136(sp)
1000f554:	10c0000d 	sth	r3,0(r2)
1000f558:	003bca06 	br	1000e484 <__alt_data_end+0xf800e484>
1000f55c:	8880100c 	andi	r2,r17,64
1000f560:	10003a26 	beq	r2,zero,1000f64c <___vfiprintf_internal_r+0x1298>
1000f564:	d8802217 	ldw	r2,136(sp)
1000f568:	14c0000f 	ldh	r19,0(r2)
1000f56c:	10800104 	addi	r2,r2,4
1000f570:	d8802215 	stw	r2,136(sp)
1000f574:	9829d7fa 	srai	r20,r19,31
1000f578:	a005883a 	mov	r2,r20
1000f57c:	003d8506 	br	1000eb94 <__alt_data_end+0xf800eb94>
1000f580:	8880100c 	andi	r2,r17,64
1000f584:	10002b26 	beq	r2,zero,1000f634 <___vfiprintf_internal_r+0x1280>
1000f588:	d8802217 	ldw	r2,136(sp)
1000f58c:	0029883a 	mov	r20,zero
1000f590:	14c0000b 	ldhu	r19,0(r2)
1000f594:	10800104 	addi	r2,r2,4
1000f598:	d8802215 	stw	r2,136(sp)
1000f59c:	003d5d06 	br	1000eb14 <__alt_data_end+0xf800eb14>
1000f5a0:	d9402017 	ldw	r5,128(sp)
1000f5a4:	d9002117 	ldw	r4,132(sp)
1000f5a8:	d9801a04 	addi	r6,sp,104
1000f5ac:	d8c02a15 	stw	r3,168(sp)
1000f5b0:	d9c02b15 	stw	r7,172(sp)
1000f5b4:	000e2a00 	call	1000e2a0 <__sprint_r.part.0>
1000f5b8:	d8c02a17 	ldw	r3,168(sp)
1000f5bc:	d9c02b17 	ldw	r7,172(sp)
1000f5c0:	103eb41e 	bne	r2,zero,1000f094 <__alt_data_end+0xf800f094>
1000f5c4:	d9001b17 	ldw	r4,108(sp)
1000f5c8:	d8801c17 	ldw	r2,112(sp)
1000f5cc:	d811883a 	mov	r8,sp
1000f5d0:	21400044 	addi	r5,r4,1
1000f5d4:	003e6706 	br	1000ef74 <__alt_data_end+0xf800ef74>
1000f5d8:	00bfffc4 	movi	r2,-1
1000f5dc:	003c4a06 	br	1000e708 <__alt_data_end+0xf800e708>
1000f5e0:	9805883a 	mov	r2,r19
1000f5e4:	003ee806 	br	1000f188 <__alt_data_end+0xf800f188>
1000f5e8:	d8c02217 	ldw	r3,136(sp)
1000f5ec:	0029883a 	mov	r20,zero
1000f5f0:	18800104 	addi	r2,r3,4
1000f5f4:	1cc0000b 	ldhu	r19,0(r3)
1000f5f8:	803f9e0e 	bge	r16,zero,1000f474 <__alt_data_end+0xf800f474>
1000f5fc:	003dd706 	br	1000ed5c <__alt_data_end+0xf800ed5c>
1000f600:	d8c02217 	ldw	r3,136(sp)
1000f604:	d9002417 	ldw	r4,144(sp)
1000f608:	18800017 	ldw	r2,0(r3)
1000f60c:	18c00104 	addi	r3,r3,4
1000f610:	d8c02215 	stw	r3,136(sp)
1000f614:	11000015 	stw	r4,0(r2)
1000f618:	003b9a06 	br	1000e484 <__alt_data_end+0xf800e484>
1000f61c:	d8c02217 	ldw	r3,136(sp)
1000f620:	0029883a 	mov	r20,zero
1000f624:	18800104 	addi	r2,r3,4
1000f628:	1cc0000b 	ldhu	r19,0(r3)
1000f62c:	803db20e 	bge	r16,zero,1000ecf8 <__alt_data_end+0xf800ecf8>
1000f630:	003fb906 	br	1000f518 <__alt_data_end+0xf800f518>
1000f634:	d9002217 	ldw	r4,136(sp)
1000f638:	0029883a 	mov	r20,zero
1000f63c:	24c00017 	ldw	r19,0(r4)
1000f640:	21000104 	addi	r4,r4,4
1000f644:	d9002215 	stw	r4,136(sp)
1000f648:	003d3206 	br	1000eb14 <__alt_data_end+0xf800eb14>
1000f64c:	d8c02217 	ldw	r3,136(sp)
1000f650:	1cc00017 	ldw	r19,0(r3)
1000f654:	18c00104 	addi	r3,r3,4
1000f658:	d8c02215 	stw	r3,136(sp)
1000f65c:	9829d7fa 	srai	r20,r19,31
1000f660:	a005883a 	mov	r2,r20
1000f664:	003d4b06 	br	1000eb94 <__alt_data_end+0xf800eb94>
1000f668:	0009883a 	mov	r4,zero
1000f66c:	01400044 	movi	r5,1
1000f670:	d811883a 	mov	r8,sp
1000f674:	003e4f06 	br	1000efb4 <__alt_data_end+0xf800efb4>
1000f678:	d8c02215 	stw	r3,136(sp)
1000f67c:	002b883a 	mov	r21,zero
1000f680:	003db806 	br	1000ed64 <__alt_data_end+0xf800ed64>
1000f684:	d811883a 	mov	r8,sp
1000f688:	003e9606 	br	1000f0e4 <__alt_data_end+0xf800f0e4>
1000f68c:	01040074 	movhi	r4,4097
1000f690:	211a3a04 	addi	r4,r4,26856
1000f694:	d9002315 	stw	r4,140(sp)
1000f698:	003e6306 	br	1000f028 <__alt_data_end+0xf800f028>
1000f69c:	b0c00043 	ldbu	r3,1(r22)
1000f6a0:	8c400814 	ori	r17,r17,32
1000f6a4:	b5800044 	addi	r22,r22,1
1000f6a8:	18c03fcc 	andi	r3,r3,255
1000f6ac:	18c0201c 	xori	r3,r3,128
1000f6b0:	18ffe004 	addi	r3,r3,-128
1000f6b4:	003b9c06 	br	1000e528 <__alt_data_end+0xf800e528>
1000f6b8:	b809883a 	mov	r4,r23
1000f6bc:	da002a15 	stw	r8,168(sp)
1000f6c0:	0006b240 	call	10006b24 <strlen>
1000f6c4:	1029883a 	mov	r20,r2
1000f6c8:	dd401d83 	ldbu	r21,118(sp)
1000f6cc:	df002215 	stw	fp,136(sp)
1000f6d0:	0021883a 	mov	r16,zero
1000f6d4:	da002a17 	ldw	r8,168(sp)
1000f6d8:	003c3906 	br	1000e7c0 <__alt_data_end+0xf800e7c0>
1000f6dc:	d9402017 	ldw	r5,128(sp)
1000f6e0:	d9002117 	ldw	r4,132(sp)
1000f6e4:	d9801a04 	addi	r6,sp,104
1000f6e8:	000e2a00 	call	1000e2a0 <__sprint_r.part.0>
1000f6ec:	103e691e 	bne	r2,zero,1000f094 <__alt_data_end+0xf800f094>
1000f6f0:	d9001b17 	ldw	r4,108(sp)
1000f6f4:	d8801c17 	ldw	r2,112(sp)
1000f6f8:	d811883a 	mov	r8,sp
1000f6fc:	21400044 	addi	r5,r4,1
1000f700:	003e2e06 	br	1000efbc <__alt_data_end+0xf800efbc>
1000f704:	01040074 	movhi	r4,4097
1000f708:	211a3e04 	addi	r4,r4,26872
1000f70c:	d9002315 	stw	r4,140(sp)
1000f710:	d9001b17 	ldw	r4,108(sp)
1000f714:	21000044 	addi	r4,r4,1
1000f718:	003c5e06 	br	1000e894 <__alt_data_end+0xf800e894>
1000f71c:	002b883a 	mov	r21,zero
1000f720:	00800084 	movi	r2,2
1000f724:	10803fcc 	andi	r2,r2,255
1000f728:	01000044 	movi	r4,1
1000f72c:	11002b26 	beq	r2,r4,1000f7dc <___vfiprintf_internal_r+0x1428>
1000f730:	01000084 	movi	r4,2
1000f734:	11002b1e 	bne	r2,r4,1000f7e4 <___vfiprintf_internal_r+0x1430>
1000f738:	1823883a 	mov	r17,r3
1000f73c:	003ee506 	br	1000f2d4 <__alt_data_end+0xf800f2d4>
1000f740:	8807883a 	mov	r3,r17
1000f744:	00800044 	movi	r2,1
1000f748:	003ff606 	br	1000f724 <__alt_data_end+0xf800f724>
1000f74c:	00800184 	movi	r2,6
1000f750:	1400012e 	bgeu	r2,r16,1000f758 <___vfiprintf_internal_r+0x13a4>
1000f754:	1021883a 	mov	r16,r2
1000f758:	8029883a 	mov	r20,r16
1000f75c:	8027883a 	mov	r19,r16
1000f760:	80002216 	blt	r16,zero,1000f7ec <___vfiprintf_internal_r+0x1438>
1000f764:	05c40074 	movhi	r23,4097
1000f768:	df002215 	stw	fp,136(sp)
1000f76c:	bdd9de04 	addi	r23,r23,26488
1000f770:	003cfb06 	br	1000eb60 <__alt_data_end+0xf800eb60>
1000f774:	d9002217 	ldw	r4,136(sp)
1000f778:	d9402417 	ldw	r5,144(sp)
1000f77c:	20800017 	ldw	r2,0(r4)
1000f780:	21000104 	addi	r4,r4,4
1000f784:	d9002215 	stw	r4,136(sp)
1000f788:	11400015 	stw	r5,0(r2)
1000f78c:	003b3d06 	br	1000e484 <__alt_data_end+0xf800e484>
1000f790:	01440074 	movhi	r5,4097
1000f794:	295a3e04 	addi	r5,r5,26872
1000f798:	d9402315 	stw	r5,140(sp)
1000f79c:	d9401b17 	ldw	r5,108(sp)
1000f7a0:	29400044 	addi	r5,r5,1
1000f7a4:	003e6d06 	br	1000f15c <__alt_data_end+0xf800f15c>
1000f7a8:	8029883a 	mov	r20,r16
1000f7ac:	dd401d83 	ldbu	r21,118(sp)
1000f7b0:	df002215 	stw	fp,136(sp)
1000f7b4:	0021883a 	mov	r16,zero
1000f7b8:	003c0106 	br	1000e7c0 <__alt_data_end+0xf800e7c0>
1000f7bc:	00c40074 	movhi	r3,4097
1000f7c0:	18da3a04 	addi	r3,r3,26856
1000f7c4:	d8c02315 	stw	r3,140(sp)
1000f7c8:	280d883a 	mov	r6,r5
1000f7cc:	003c6906 	br	1000e974 <__alt_data_end+0xf800e974>
1000f7d0:	802d883a 	mov	r22,r16
1000f7d4:	0021883a 	mov	r16,zero
1000f7d8:	003b5406 	br	1000e52c <__alt_data_end+0xf800e52c>
1000f7dc:	1823883a 	mov	r17,r3
1000f7e0:	003cf306 	br	1000ebb0 <__alt_data_end+0xf800ebb0>
1000f7e4:	1823883a 	mov	r17,r3
1000f7e8:	003cad06 	br	1000eaa0 <__alt_data_end+0xf800eaa0>
1000f7ec:	0027883a 	mov	r19,zero
1000f7f0:	003fdc06 	br	1000f764 <__alt_data_end+0xf800f764>
1000f7f4:	d9402217 	ldw	r5,136(sp)
1000f7f8:	8005883a 	mov	r2,r16
1000f7fc:	b0c00043 	ldbu	r3,1(r22)
1000f800:	2c000017 	ldw	r16,0(r5)
1000f804:	29000104 	addi	r4,r5,4
1000f808:	d9002215 	stw	r4,136(sp)
1000f80c:	102d883a 	mov	r22,r2
1000f810:	803fa50e 	bge	r16,zero,1000f6a8 <__alt_data_end+0xf800f6a8>
1000f814:	18c03fcc 	andi	r3,r3,255
1000f818:	18c0201c 	xori	r3,r3,128
1000f81c:	043fffc4 	movi	r16,-1
1000f820:	18ffe004 	addi	r3,r3,-128
1000f824:	003b4006 	br	1000e528 <__alt_data_end+0xf800e528>
1000f828:	d9402303 	ldbu	r5,140(sp)
1000f82c:	d9401d85 	stb	r5,118(sp)
1000f830:	003cae06 	br	1000eaec <__alt_data_end+0xf800eaec>
1000f834:	d8c02303 	ldbu	r3,140(sp)
1000f838:	d8c01d85 	stb	r3,118(sp)
1000f83c:	003d1406 	br	1000ec90 <__alt_data_end+0xf800ec90>
1000f840:	d8c02303 	ldbu	r3,140(sp)
1000f844:	d8c01d85 	stb	r3,118(sp)
1000f848:	003cca06 	br	1000eb74 <__alt_data_end+0xf800eb74>
1000f84c:	8880004c 	andi	r2,r17,1
1000f850:	002b883a 	mov	r21,zero
1000f854:	10000526 	beq	r2,zero,1000f86c <___vfiprintf_internal_r+0x14b8>
1000f858:	00800c04 	movi	r2,48
1000f85c:	d88019c5 	stb	r2,103(sp)
1000f860:	dd002817 	ldw	r20,160(sp)
1000f864:	ddc019c4 	addi	r23,sp,103
1000f868:	003bd506 	br	1000e7c0 <__alt_data_end+0xf800e7c0>
1000f86c:	0029883a 	mov	r20,zero
1000f870:	ddc01a04 	addi	r23,sp,104
1000f874:	003bd206 	br	1000e7c0 <__alt_data_end+0xf800e7c0>
1000f878:	d9002303 	ldbu	r4,140(sp)
1000f87c:	d9001d85 	stb	r4,118(sp)
1000f880:	003da606 	br	1000ef1c <__alt_data_end+0xf800ef1c>
1000f884:	d8c02303 	ldbu	r3,140(sp)
1000f888:	d8c01d85 	stb	r3,118(sp)
1000f88c:	003c7606 	br	1000ea68 <__alt_data_end+0xf800ea68>
1000f890:	d8c02303 	ldbu	r3,140(sp)
1000f894:	d8c01d85 	stb	r3,118(sp)
1000f898:	003c6506 	br	1000ea30 <__alt_data_end+0xf800ea30>
1000f89c:	d9002303 	ldbu	r4,140(sp)
1000f8a0:	d9001d85 	stb	r4,118(sp)
1000f8a4:	003d3d06 	br	1000ed9c <__alt_data_end+0xf800ed9c>
1000f8a8:	d8c02303 	ldbu	r3,140(sp)
1000f8ac:	d8c01d85 	stb	r3,118(sp)
1000f8b0:	003d1d06 	br	1000ed28 <__alt_data_end+0xf800ed28>
1000f8b4:	d8c02303 	ldbu	r3,140(sp)
1000f8b8:	d8c01d85 	stb	r3,118(sp)
1000f8bc:	003d0306 	br	1000eccc <__alt_data_end+0xf800eccc>

1000f8c0 <__vfiprintf_internal>:
1000f8c0:	008400b4 	movhi	r2,4098
1000f8c4:	10959104 	addi	r2,r2,22084
1000f8c8:	300f883a 	mov	r7,r6
1000f8cc:	280d883a 	mov	r6,r5
1000f8d0:	200b883a 	mov	r5,r4
1000f8d4:	11000017 	ldw	r4,0(r2)
1000f8d8:	000e3b41 	jmpi	1000e3b4 <___vfiprintf_internal_r>

1000f8dc <__sbprintf>:
1000f8dc:	2880030b 	ldhu	r2,12(r5)
1000f8e0:	2ac01917 	ldw	r11,100(r5)
1000f8e4:	2a80038b 	ldhu	r10,14(r5)
1000f8e8:	2a400717 	ldw	r9,28(r5)
1000f8ec:	2a000917 	ldw	r8,36(r5)
1000f8f0:	defee204 	addi	sp,sp,-1144
1000f8f4:	00c10004 	movi	r3,1024
1000f8f8:	dc011a15 	stw	r16,1128(sp)
1000f8fc:	10bfff4c 	andi	r2,r2,65533
1000f900:	2821883a 	mov	r16,r5
1000f904:	d8cb883a 	add	r5,sp,r3
1000f908:	dc811c15 	stw	r18,1136(sp)
1000f90c:	dc411b15 	stw	r17,1132(sp)
1000f910:	dfc11d15 	stw	ra,1140(sp)
1000f914:	2025883a 	mov	r18,r4
1000f918:	d881030d 	sth	r2,1036(sp)
1000f91c:	dac11915 	stw	r11,1124(sp)
1000f920:	da81038d 	sth	r10,1038(sp)
1000f924:	da410715 	stw	r9,1052(sp)
1000f928:	da010915 	stw	r8,1060(sp)
1000f92c:	dec10015 	stw	sp,1024(sp)
1000f930:	dec10415 	stw	sp,1040(sp)
1000f934:	d8c10215 	stw	r3,1032(sp)
1000f938:	d8c10515 	stw	r3,1044(sp)
1000f93c:	d8010615 	stw	zero,1048(sp)
1000f940:	000e3b40 	call	1000e3b4 <___vfiprintf_internal_r>
1000f944:	1023883a 	mov	r17,r2
1000f948:	10000416 	blt	r2,zero,1000f95c <__sbprintf+0x80>
1000f94c:	d9410004 	addi	r5,sp,1024
1000f950:	9009883a 	mov	r4,r18
1000f954:	000ab900 	call	1000ab90 <_fflush_r>
1000f958:	10000d1e 	bne	r2,zero,1000f990 <__sbprintf+0xb4>
1000f95c:	d881030b 	ldhu	r2,1036(sp)
1000f960:	1080100c 	andi	r2,r2,64
1000f964:	10000326 	beq	r2,zero,1000f974 <__sbprintf+0x98>
1000f968:	8080030b 	ldhu	r2,12(r16)
1000f96c:	10801014 	ori	r2,r2,64
1000f970:	8080030d 	sth	r2,12(r16)
1000f974:	8805883a 	mov	r2,r17
1000f978:	dfc11d17 	ldw	ra,1140(sp)
1000f97c:	dc811c17 	ldw	r18,1136(sp)
1000f980:	dc411b17 	ldw	r17,1132(sp)
1000f984:	dc011a17 	ldw	r16,1128(sp)
1000f988:	dec11e04 	addi	sp,sp,1144
1000f98c:	f800283a 	ret
1000f990:	047fffc4 	movi	r17,-1
1000f994:	003ff106 	br	1000f95c <__alt_data_end+0xf800f95c>

1000f998 <_write_r>:
1000f998:	defffd04 	addi	sp,sp,-12
1000f99c:	2805883a 	mov	r2,r5
1000f9a0:	dc000015 	stw	r16,0(sp)
1000f9a4:	040400f4 	movhi	r16,4099
1000f9a8:	dc400115 	stw	r17,4(sp)
1000f9ac:	300b883a 	mov	r5,r6
1000f9b0:	8410c104 	addi	r16,r16,17156
1000f9b4:	2023883a 	mov	r17,r4
1000f9b8:	380d883a 	mov	r6,r7
1000f9bc:	1009883a 	mov	r4,r2
1000f9c0:	dfc00215 	stw	ra,8(sp)
1000f9c4:	80000015 	stw	zero,0(r16)
1000f9c8:	001400c0 	call	1001400c <write>
1000f9cc:	00ffffc4 	movi	r3,-1
1000f9d0:	10c00526 	beq	r2,r3,1000f9e8 <_write_r+0x50>
1000f9d4:	dfc00217 	ldw	ra,8(sp)
1000f9d8:	dc400117 	ldw	r17,4(sp)
1000f9dc:	dc000017 	ldw	r16,0(sp)
1000f9e0:	dec00304 	addi	sp,sp,12
1000f9e4:	f800283a 	ret
1000f9e8:	80c00017 	ldw	r3,0(r16)
1000f9ec:	183ff926 	beq	r3,zero,1000f9d4 <__alt_data_end+0xf800f9d4>
1000f9f0:	88c00015 	stw	r3,0(r17)
1000f9f4:	003ff706 	br	1000f9d4 <__alt_data_end+0xf800f9d4>

1000f9f8 <_close_r>:
1000f9f8:	defffd04 	addi	sp,sp,-12
1000f9fc:	dc000015 	stw	r16,0(sp)
1000fa00:	040400f4 	movhi	r16,4099
1000fa04:	dc400115 	stw	r17,4(sp)
1000fa08:	8410c104 	addi	r16,r16,17156
1000fa0c:	2023883a 	mov	r17,r4
1000fa10:	2809883a 	mov	r4,r5
1000fa14:	dfc00215 	stw	ra,8(sp)
1000fa18:	80000015 	stw	zero,0(r16)
1000fa1c:	00137840 	call	10013784 <close>
1000fa20:	00ffffc4 	movi	r3,-1
1000fa24:	10c00526 	beq	r2,r3,1000fa3c <_close_r+0x44>
1000fa28:	dfc00217 	ldw	ra,8(sp)
1000fa2c:	dc400117 	ldw	r17,4(sp)
1000fa30:	dc000017 	ldw	r16,0(sp)
1000fa34:	dec00304 	addi	sp,sp,12
1000fa38:	f800283a 	ret
1000fa3c:	80c00017 	ldw	r3,0(r16)
1000fa40:	183ff926 	beq	r3,zero,1000fa28 <__alt_data_end+0xf800fa28>
1000fa44:	88c00015 	stw	r3,0(r17)
1000fa48:	003ff706 	br	1000fa28 <__alt_data_end+0xf800fa28>

1000fa4c <_calloc_r>:
1000fa4c:	defffe04 	addi	sp,sp,-8
1000fa50:	2805883a 	mov	r2,r5
1000fa54:	dc000015 	stw	r16,0(sp)
1000fa58:	300b883a 	mov	r5,r6
1000fa5c:	2021883a 	mov	r16,r4
1000fa60:	1009883a 	mov	r4,r2
1000fa64:	dfc00115 	stw	ra,4(sp)
1000fa68:	00069bc0 	call	100069bc <__mulsi3>
1000fa6c:	100b883a 	mov	r5,r2
1000fa70:	8009883a 	mov	r4,r16
1000fa74:	000bce80 	call	1000bce8 <_malloc_r>
1000fa78:	10002926 	beq	r2,zero,1000fb20 <_calloc_r+0xd4>
1000fa7c:	11bfff17 	ldw	r6,-4(r2)
1000fa80:	1021883a 	mov	r16,r2
1000fa84:	00bfff04 	movi	r2,-4
1000fa88:	308c703a 	and	r6,r6,r2
1000fa8c:	00c00904 	movi	r3,36
1000fa90:	308d883a 	add	r6,r6,r2
1000fa94:	19801636 	bltu	r3,r6,1000faf0 <_calloc_r+0xa4>
1000fa98:	008004c4 	movi	r2,19
1000fa9c:	11800b2e 	bgeu	r2,r6,1000facc <_calloc_r+0x80>
1000faa0:	80000015 	stw	zero,0(r16)
1000faa4:	80000115 	stw	zero,4(r16)
1000faa8:	008006c4 	movi	r2,27
1000faac:	11801a2e 	bgeu	r2,r6,1000fb18 <_calloc_r+0xcc>
1000fab0:	80000215 	stw	zero,8(r16)
1000fab4:	80000315 	stw	zero,12(r16)
1000fab8:	30c0151e 	bne	r6,r3,1000fb10 <_calloc_r+0xc4>
1000fabc:	80000415 	stw	zero,16(r16)
1000fac0:	80800604 	addi	r2,r16,24
1000fac4:	80000515 	stw	zero,20(r16)
1000fac8:	00000106 	br	1000fad0 <_calloc_r+0x84>
1000facc:	8005883a 	mov	r2,r16
1000fad0:	10000015 	stw	zero,0(r2)
1000fad4:	10000115 	stw	zero,4(r2)
1000fad8:	10000215 	stw	zero,8(r2)
1000fadc:	8005883a 	mov	r2,r16
1000fae0:	dfc00117 	ldw	ra,4(sp)
1000fae4:	dc000017 	ldw	r16,0(sp)
1000fae8:	dec00204 	addi	sp,sp,8
1000faec:	f800283a 	ret
1000faf0:	000b883a 	mov	r5,zero
1000faf4:	8009883a 	mov	r4,r16
1000faf8:	000c87c0 	call	1000c87c <memset>
1000fafc:	8005883a 	mov	r2,r16
1000fb00:	dfc00117 	ldw	ra,4(sp)
1000fb04:	dc000017 	ldw	r16,0(sp)
1000fb08:	dec00204 	addi	sp,sp,8
1000fb0c:	f800283a 	ret
1000fb10:	80800404 	addi	r2,r16,16
1000fb14:	003fee06 	br	1000fad0 <__alt_data_end+0xf800fad0>
1000fb18:	80800204 	addi	r2,r16,8
1000fb1c:	003fec06 	br	1000fad0 <__alt_data_end+0xf800fad0>
1000fb20:	0005883a 	mov	r2,zero
1000fb24:	003fee06 	br	1000fae0 <__alt_data_end+0xf800fae0>

1000fb28 <_fclose_r>:
1000fb28:	28003926 	beq	r5,zero,1000fc10 <_fclose_r+0xe8>
1000fb2c:	defffc04 	addi	sp,sp,-16
1000fb30:	dc400115 	stw	r17,4(sp)
1000fb34:	dc000015 	stw	r16,0(sp)
1000fb38:	dfc00315 	stw	ra,12(sp)
1000fb3c:	dc800215 	stw	r18,8(sp)
1000fb40:	2023883a 	mov	r17,r4
1000fb44:	2821883a 	mov	r16,r5
1000fb48:	20000226 	beq	r4,zero,1000fb54 <_fclose_r+0x2c>
1000fb4c:	20800e17 	ldw	r2,56(r4)
1000fb50:	10002726 	beq	r2,zero,1000fbf0 <_fclose_r+0xc8>
1000fb54:	8080030f 	ldh	r2,12(r16)
1000fb58:	1000071e 	bne	r2,zero,1000fb78 <_fclose_r+0x50>
1000fb5c:	0005883a 	mov	r2,zero
1000fb60:	dfc00317 	ldw	ra,12(sp)
1000fb64:	dc800217 	ldw	r18,8(sp)
1000fb68:	dc400117 	ldw	r17,4(sp)
1000fb6c:	dc000017 	ldw	r16,0(sp)
1000fb70:	dec00404 	addi	sp,sp,16
1000fb74:	f800283a 	ret
1000fb78:	800b883a 	mov	r5,r16
1000fb7c:	8809883a 	mov	r4,r17
1000fb80:	000a9740 	call	1000a974 <__sflush_r>
1000fb84:	1025883a 	mov	r18,r2
1000fb88:	80800b17 	ldw	r2,44(r16)
1000fb8c:	10000426 	beq	r2,zero,1000fba0 <_fclose_r+0x78>
1000fb90:	81400717 	ldw	r5,28(r16)
1000fb94:	8809883a 	mov	r4,r17
1000fb98:	103ee83a 	callr	r2
1000fb9c:	10001616 	blt	r2,zero,1000fbf8 <_fclose_r+0xd0>
1000fba0:	8080030b 	ldhu	r2,12(r16)
1000fba4:	1080200c 	andi	r2,r2,128
1000fba8:	1000151e 	bne	r2,zero,1000fc00 <_fclose_r+0xd8>
1000fbac:	81400c17 	ldw	r5,48(r16)
1000fbb0:	28000526 	beq	r5,zero,1000fbc8 <_fclose_r+0xa0>
1000fbb4:	80801004 	addi	r2,r16,64
1000fbb8:	28800226 	beq	r5,r2,1000fbc4 <_fclose_r+0x9c>
1000fbbc:	8809883a 	mov	r4,r17
1000fbc0:	000b0f00 	call	1000b0f0 <_free_r>
1000fbc4:	80000c15 	stw	zero,48(r16)
1000fbc8:	81401117 	ldw	r5,68(r16)
1000fbcc:	28000326 	beq	r5,zero,1000fbdc <_fclose_r+0xb4>
1000fbd0:	8809883a 	mov	r4,r17
1000fbd4:	000b0f00 	call	1000b0f0 <_free_r>
1000fbd8:	80001115 	stw	zero,68(r16)
1000fbdc:	000af8c0 	call	1000af8c <__sfp_lock_acquire>
1000fbe0:	8000030d 	sth	zero,12(r16)
1000fbe4:	000af900 	call	1000af90 <__sfp_lock_release>
1000fbe8:	9005883a 	mov	r2,r18
1000fbec:	003fdc06 	br	1000fb60 <__alt_data_end+0xf800fb60>
1000fbf0:	000af7c0 	call	1000af7c <__sinit>
1000fbf4:	003fd706 	br	1000fb54 <__alt_data_end+0xf800fb54>
1000fbf8:	04bfffc4 	movi	r18,-1
1000fbfc:	003fe806 	br	1000fba0 <__alt_data_end+0xf800fba0>
1000fc00:	81400417 	ldw	r5,16(r16)
1000fc04:	8809883a 	mov	r4,r17
1000fc08:	000b0f00 	call	1000b0f0 <_free_r>
1000fc0c:	003fe706 	br	1000fbac <__alt_data_end+0xf800fbac>
1000fc10:	0005883a 	mov	r2,zero
1000fc14:	f800283a 	ret

1000fc18 <fclose>:
1000fc18:	008400b4 	movhi	r2,4098
1000fc1c:	10959104 	addi	r2,r2,22084
1000fc20:	200b883a 	mov	r5,r4
1000fc24:	11000017 	ldw	r4,0(r2)
1000fc28:	000fb281 	jmpi	1000fb28 <_fclose_r>

1000fc2c <__fputwc>:
1000fc2c:	defff804 	addi	sp,sp,-32
1000fc30:	dcc00415 	stw	r19,16(sp)
1000fc34:	dc800315 	stw	r18,12(sp)
1000fc38:	dc000115 	stw	r16,4(sp)
1000fc3c:	dfc00715 	stw	ra,28(sp)
1000fc40:	dd400615 	stw	r21,24(sp)
1000fc44:	dd000515 	stw	r20,20(sp)
1000fc48:	dc400215 	stw	r17,8(sp)
1000fc4c:	2027883a 	mov	r19,r4
1000fc50:	2825883a 	mov	r18,r5
1000fc54:	3021883a 	mov	r16,r6
1000fc58:	000bad80 	call	1000bad8 <__locale_mb_cur_max>
1000fc5c:	00c00044 	movi	r3,1
1000fc60:	10c03e26 	beq	r2,r3,1000fd5c <__fputwc+0x130>
1000fc64:	81c01704 	addi	r7,r16,92
1000fc68:	900d883a 	mov	r6,r18
1000fc6c:	d80b883a 	mov	r5,sp
1000fc70:	9809883a 	mov	r4,r19
1000fc74:	00100fc0 	call	100100fc <_wcrtomb_r>
1000fc78:	1029883a 	mov	r20,r2
1000fc7c:	00bfffc4 	movi	r2,-1
1000fc80:	a0802026 	beq	r20,r2,1000fd04 <__fputwc+0xd8>
1000fc84:	d9400003 	ldbu	r5,0(sp)
1000fc88:	a0001c26 	beq	r20,zero,1000fcfc <__fputwc+0xd0>
1000fc8c:	0023883a 	mov	r17,zero
1000fc90:	05400284 	movi	r21,10
1000fc94:	00000906 	br	1000fcbc <__fputwc+0x90>
1000fc98:	80800017 	ldw	r2,0(r16)
1000fc9c:	11400005 	stb	r5,0(r2)
1000fca0:	80c00017 	ldw	r3,0(r16)
1000fca4:	18c00044 	addi	r3,r3,1
1000fca8:	80c00015 	stw	r3,0(r16)
1000fcac:	8c400044 	addi	r17,r17,1
1000fcb0:	dc45883a 	add	r2,sp,r17
1000fcb4:	8d00112e 	bgeu	r17,r20,1000fcfc <__fputwc+0xd0>
1000fcb8:	11400003 	ldbu	r5,0(r2)
1000fcbc:	80c00217 	ldw	r3,8(r16)
1000fcc0:	18ffffc4 	addi	r3,r3,-1
1000fcc4:	80c00215 	stw	r3,8(r16)
1000fcc8:	183ff30e 	bge	r3,zero,1000fc98 <__alt_data_end+0xf800fc98>
1000fccc:	80800617 	ldw	r2,24(r16)
1000fcd0:	18801916 	blt	r3,r2,1000fd38 <__fputwc+0x10c>
1000fcd4:	80800017 	ldw	r2,0(r16)
1000fcd8:	11400005 	stb	r5,0(r2)
1000fcdc:	80800017 	ldw	r2,0(r16)
1000fce0:	10c00003 	ldbu	r3,0(r2)
1000fce4:	10800044 	addi	r2,r2,1
1000fce8:	1d402326 	beq	r3,r21,1000fd78 <__fputwc+0x14c>
1000fcec:	80800015 	stw	r2,0(r16)
1000fcf0:	8c400044 	addi	r17,r17,1
1000fcf4:	dc45883a 	add	r2,sp,r17
1000fcf8:	8d3fef36 	bltu	r17,r20,1000fcb8 <__alt_data_end+0xf800fcb8>
1000fcfc:	9005883a 	mov	r2,r18
1000fd00:	00000406 	br	1000fd14 <__fputwc+0xe8>
1000fd04:	80c0030b 	ldhu	r3,12(r16)
1000fd08:	a005883a 	mov	r2,r20
1000fd0c:	18c01014 	ori	r3,r3,64
1000fd10:	80c0030d 	sth	r3,12(r16)
1000fd14:	dfc00717 	ldw	ra,28(sp)
1000fd18:	dd400617 	ldw	r21,24(sp)
1000fd1c:	dd000517 	ldw	r20,20(sp)
1000fd20:	dcc00417 	ldw	r19,16(sp)
1000fd24:	dc800317 	ldw	r18,12(sp)
1000fd28:	dc400217 	ldw	r17,8(sp)
1000fd2c:	dc000117 	ldw	r16,4(sp)
1000fd30:	dec00804 	addi	sp,sp,32
1000fd34:	f800283a 	ret
1000fd38:	800d883a 	mov	r6,r16
1000fd3c:	29403fcc 	andi	r5,r5,255
1000fd40:	9809883a 	mov	r4,r19
1000fd44:	000ffa40 	call	1000ffa4 <__swbuf_r>
1000fd48:	10bfffe0 	cmpeqi	r2,r2,-1
1000fd4c:	10803fcc 	andi	r2,r2,255
1000fd50:	103fd626 	beq	r2,zero,1000fcac <__alt_data_end+0xf800fcac>
1000fd54:	00bfffc4 	movi	r2,-1
1000fd58:	003fee06 	br	1000fd14 <__alt_data_end+0xf800fd14>
1000fd5c:	90ffffc4 	addi	r3,r18,-1
1000fd60:	01003f84 	movi	r4,254
1000fd64:	20ffbf36 	bltu	r4,r3,1000fc64 <__alt_data_end+0xf800fc64>
1000fd68:	900b883a 	mov	r5,r18
1000fd6c:	dc800005 	stb	r18,0(sp)
1000fd70:	1029883a 	mov	r20,r2
1000fd74:	003fc506 	br	1000fc8c <__alt_data_end+0xf800fc8c>
1000fd78:	800d883a 	mov	r6,r16
1000fd7c:	a80b883a 	mov	r5,r21
1000fd80:	9809883a 	mov	r4,r19
1000fd84:	000ffa40 	call	1000ffa4 <__swbuf_r>
1000fd88:	10bfffe0 	cmpeqi	r2,r2,-1
1000fd8c:	003fef06 	br	1000fd4c <__alt_data_end+0xf800fd4c>

1000fd90 <_fputwc_r>:
1000fd90:	3080030b 	ldhu	r2,12(r6)
1000fd94:	10c8000c 	andi	r3,r2,8192
1000fd98:	1800051e 	bne	r3,zero,1000fdb0 <_fputwc_r+0x20>
1000fd9c:	30c01917 	ldw	r3,100(r6)
1000fda0:	10880014 	ori	r2,r2,8192
1000fda4:	3080030d 	sth	r2,12(r6)
1000fda8:	18880014 	ori	r2,r3,8192
1000fdac:	30801915 	stw	r2,100(r6)
1000fdb0:	000fc2c1 	jmpi	1000fc2c <__fputwc>

1000fdb4 <fputwc>:
1000fdb4:	008400b4 	movhi	r2,4098
1000fdb8:	defffc04 	addi	sp,sp,-16
1000fdbc:	10959104 	addi	r2,r2,22084
1000fdc0:	dc000115 	stw	r16,4(sp)
1000fdc4:	14000017 	ldw	r16,0(r2)
1000fdc8:	dc400215 	stw	r17,8(sp)
1000fdcc:	dfc00315 	stw	ra,12(sp)
1000fdd0:	2023883a 	mov	r17,r4
1000fdd4:	80000226 	beq	r16,zero,1000fde0 <fputwc+0x2c>
1000fdd8:	80800e17 	ldw	r2,56(r16)
1000fddc:	10001026 	beq	r2,zero,1000fe20 <fputwc+0x6c>
1000fde0:	2880030b 	ldhu	r2,12(r5)
1000fde4:	10c8000c 	andi	r3,r2,8192
1000fde8:	1800051e 	bne	r3,zero,1000fe00 <fputwc+0x4c>
1000fdec:	28c01917 	ldw	r3,100(r5)
1000fdf0:	10880014 	ori	r2,r2,8192
1000fdf4:	2880030d 	sth	r2,12(r5)
1000fdf8:	18880014 	ori	r2,r3,8192
1000fdfc:	28801915 	stw	r2,100(r5)
1000fe00:	280d883a 	mov	r6,r5
1000fe04:	8009883a 	mov	r4,r16
1000fe08:	880b883a 	mov	r5,r17
1000fe0c:	dfc00317 	ldw	ra,12(sp)
1000fe10:	dc400217 	ldw	r17,8(sp)
1000fe14:	dc000117 	ldw	r16,4(sp)
1000fe18:	dec00404 	addi	sp,sp,16
1000fe1c:	000fc2c1 	jmpi	1000fc2c <__fputwc>
1000fe20:	8009883a 	mov	r4,r16
1000fe24:	d9400015 	stw	r5,0(sp)
1000fe28:	000af7c0 	call	1000af7c <__sinit>
1000fe2c:	d9400017 	ldw	r5,0(sp)
1000fe30:	003feb06 	br	1000fde0 <__alt_data_end+0xf800fde0>

1000fe34 <_fstat_r>:
1000fe34:	defffd04 	addi	sp,sp,-12
1000fe38:	2805883a 	mov	r2,r5
1000fe3c:	dc000015 	stw	r16,0(sp)
1000fe40:	040400f4 	movhi	r16,4099
1000fe44:	dc400115 	stw	r17,4(sp)
1000fe48:	8410c104 	addi	r16,r16,17156
1000fe4c:	2023883a 	mov	r17,r4
1000fe50:	300b883a 	mov	r5,r6
1000fe54:	1009883a 	mov	r4,r2
1000fe58:	dfc00215 	stw	ra,8(sp)
1000fe5c:	80000015 	stw	zero,0(r16)
1000fe60:	00138c40 	call	100138c4 <fstat>
1000fe64:	00ffffc4 	movi	r3,-1
1000fe68:	10c00526 	beq	r2,r3,1000fe80 <_fstat_r+0x4c>
1000fe6c:	dfc00217 	ldw	ra,8(sp)
1000fe70:	dc400117 	ldw	r17,4(sp)
1000fe74:	dc000017 	ldw	r16,0(sp)
1000fe78:	dec00304 	addi	sp,sp,12
1000fe7c:	f800283a 	ret
1000fe80:	80c00017 	ldw	r3,0(r16)
1000fe84:	183ff926 	beq	r3,zero,1000fe6c <__alt_data_end+0xf800fe6c>
1000fe88:	88c00015 	stw	r3,0(r17)
1000fe8c:	003ff706 	br	1000fe6c <__alt_data_end+0xf800fe6c>

1000fe90 <_isatty_r>:
1000fe90:	defffd04 	addi	sp,sp,-12
1000fe94:	dc000015 	stw	r16,0(sp)
1000fe98:	040400f4 	movhi	r16,4099
1000fe9c:	dc400115 	stw	r17,4(sp)
1000fea0:	8410c104 	addi	r16,r16,17156
1000fea4:	2023883a 	mov	r17,r4
1000fea8:	2809883a 	mov	r4,r5
1000feac:	dfc00215 	stw	ra,8(sp)
1000feb0:	80000015 	stw	zero,0(r16)
1000feb4:	00139b80 	call	100139b8 <isatty>
1000feb8:	00ffffc4 	movi	r3,-1
1000febc:	10c00526 	beq	r2,r3,1000fed4 <_isatty_r+0x44>
1000fec0:	dfc00217 	ldw	ra,8(sp)
1000fec4:	dc400117 	ldw	r17,4(sp)
1000fec8:	dc000017 	ldw	r16,0(sp)
1000fecc:	dec00304 	addi	sp,sp,12
1000fed0:	f800283a 	ret
1000fed4:	80c00017 	ldw	r3,0(r16)
1000fed8:	183ff926 	beq	r3,zero,1000fec0 <__alt_data_end+0xf800fec0>
1000fedc:	88c00015 	stw	r3,0(r17)
1000fee0:	003ff706 	br	1000fec0 <__alt_data_end+0xf800fec0>

1000fee4 <_lseek_r>:
1000fee4:	defffd04 	addi	sp,sp,-12
1000fee8:	2805883a 	mov	r2,r5
1000feec:	dc000015 	stw	r16,0(sp)
1000fef0:	040400f4 	movhi	r16,4099
1000fef4:	dc400115 	stw	r17,4(sp)
1000fef8:	300b883a 	mov	r5,r6
1000fefc:	8410c104 	addi	r16,r16,17156
1000ff00:	2023883a 	mov	r17,r4
1000ff04:	380d883a 	mov	r6,r7
1000ff08:	1009883a 	mov	r4,r2
1000ff0c:	dfc00215 	stw	ra,8(sp)
1000ff10:	80000015 	stw	zero,0(r16)
1000ff14:	0013b8c0 	call	10013b8c <lseek>
1000ff18:	00ffffc4 	movi	r3,-1
1000ff1c:	10c00526 	beq	r2,r3,1000ff34 <_lseek_r+0x50>
1000ff20:	dfc00217 	ldw	ra,8(sp)
1000ff24:	dc400117 	ldw	r17,4(sp)
1000ff28:	dc000017 	ldw	r16,0(sp)
1000ff2c:	dec00304 	addi	sp,sp,12
1000ff30:	f800283a 	ret
1000ff34:	80c00017 	ldw	r3,0(r16)
1000ff38:	183ff926 	beq	r3,zero,1000ff20 <__alt_data_end+0xf800ff20>
1000ff3c:	88c00015 	stw	r3,0(r17)
1000ff40:	003ff706 	br	1000ff20 <__alt_data_end+0xf800ff20>

1000ff44 <_read_r>:
1000ff44:	defffd04 	addi	sp,sp,-12
1000ff48:	2805883a 	mov	r2,r5
1000ff4c:	dc000015 	stw	r16,0(sp)
1000ff50:	040400f4 	movhi	r16,4099
1000ff54:	dc400115 	stw	r17,4(sp)
1000ff58:	300b883a 	mov	r5,r6
1000ff5c:	8410c104 	addi	r16,r16,17156
1000ff60:	2023883a 	mov	r17,r4
1000ff64:	380d883a 	mov	r6,r7
1000ff68:	1009883a 	mov	r4,r2
1000ff6c:	dfc00215 	stw	ra,8(sp)
1000ff70:	80000015 	stw	zero,0(r16)
1000ff74:	0013d680 	call	10013d68 <read>
1000ff78:	00ffffc4 	movi	r3,-1
1000ff7c:	10c00526 	beq	r2,r3,1000ff94 <_read_r+0x50>
1000ff80:	dfc00217 	ldw	ra,8(sp)
1000ff84:	dc400117 	ldw	r17,4(sp)
1000ff88:	dc000017 	ldw	r16,0(sp)
1000ff8c:	dec00304 	addi	sp,sp,12
1000ff90:	f800283a 	ret
1000ff94:	80c00017 	ldw	r3,0(r16)
1000ff98:	183ff926 	beq	r3,zero,1000ff80 <__alt_data_end+0xf800ff80>
1000ff9c:	88c00015 	stw	r3,0(r17)
1000ffa0:	003ff706 	br	1000ff80 <__alt_data_end+0xf800ff80>

1000ffa4 <__swbuf_r>:
1000ffa4:	defffb04 	addi	sp,sp,-20
1000ffa8:	dcc00315 	stw	r19,12(sp)
1000ffac:	dc800215 	stw	r18,8(sp)
1000ffb0:	dc000015 	stw	r16,0(sp)
1000ffb4:	dfc00415 	stw	ra,16(sp)
1000ffb8:	dc400115 	stw	r17,4(sp)
1000ffbc:	2025883a 	mov	r18,r4
1000ffc0:	2827883a 	mov	r19,r5
1000ffc4:	3021883a 	mov	r16,r6
1000ffc8:	20000226 	beq	r4,zero,1000ffd4 <__swbuf_r+0x30>
1000ffcc:	20800e17 	ldw	r2,56(r4)
1000ffd0:	10004226 	beq	r2,zero,100100dc <__swbuf_r+0x138>
1000ffd4:	80800617 	ldw	r2,24(r16)
1000ffd8:	8100030b 	ldhu	r4,12(r16)
1000ffdc:	80800215 	stw	r2,8(r16)
1000ffe0:	2080020c 	andi	r2,r4,8
1000ffe4:	10003626 	beq	r2,zero,100100c0 <__swbuf_r+0x11c>
1000ffe8:	80c00417 	ldw	r3,16(r16)
1000ffec:	18003426 	beq	r3,zero,100100c0 <__swbuf_r+0x11c>
1000fff0:	2088000c 	andi	r2,r4,8192
1000fff4:	9c403fcc 	andi	r17,r19,255
1000fff8:	10001a26 	beq	r2,zero,10010064 <__swbuf_r+0xc0>
1000fffc:	80800017 	ldw	r2,0(r16)
10010000:	81000517 	ldw	r4,20(r16)
10010004:	10c7c83a 	sub	r3,r2,r3
10010008:	1900200e 	bge	r3,r4,1001008c <__swbuf_r+0xe8>
1001000c:	18c00044 	addi	r3,r3,1
10010010:	81000217 	ldw	r4,8(r16)
10010014:	11400044 	addi	r5,r2,1
10010018:	81400015 	stw	r5,0(r16)
1001001c:	213fffc4 	addi	r4,r4,-1
10010020:	81000215 	stw	r4,8(r16)
10010024:	14c00005 	stb	r19,0(r2)
10010028:	80800517 	ldw	r2,20(r16)
1001002c:	10c01e26 	beq	r2,r3,100100a8 <__swbuf_r+0x104>
10010030:	8080030b 	ldhu	r2,12(r16)
10010034:	1080004c 	andi	r2,r2,1
10010038:	10000226 	beq	r2,zero,10010044 <__swbuf_r+0xa0>
1001003c:	00800284 	movi	r2,10
10010040:	88801926 	beq	r17,r2,100100a8 <__swbuf_r+0x104>
10010044:	8805883a 	mov	r2,r17
10010048:	dfc00417 	ldw	ra,16(sp)
1001004c:	dcc00317 	ldw	r19,12(sp)
10010050:	dc800217 	ldw	r18,8(sp)
10010054:	dc400117 	ldw	r17,4(sp)
10010058:	dc000017 	ldw	r16,0(sp)
1001005c:	dec00504 	addi	sp,sp,20
10010060:	f800283a 	ret
10010064:	81401917 	ldw	r5,100(r16)
10010068:	00b7ffc4 	movi	r2,-8193
1001006c:	21080014 	ori	r4,r4,8192
10010070:	2884703a 	and	r2,r5,r2
10010074:	80801915 	stw	r2,100(r16)
10010078:	80800017 	ldw	r2,0(r16)
1001007c:	8100030d 	sth	r4,12(r16)
10010080:	81000517 	ldw	r4,20(r16)
10010084:	10c7c83a 	sub	r3,r2,r3
10010088:	193fe016 	blt	r3,r4,1001000c <__alt_data_end+0xf801000c>
1001008c:	800b883a 	mov	r5,r16
10010090:	9009883a 	mov	r4,r18
10010094:	000ab900 	call	1000ab90 <_fflush_r>
10010098:	1000071e 	bne	r2,zero,100100b8 <__swbuf_r+0x114>
1001009c:	80800017 	ldw	r2,0(r16)
100100a0:	00c00044 	movi	r3,1
100100a4:	003fda06 	br	10010010 <__alt_data_end+0xf8010010>
100100a8:	800b883a 	mov	r5,r16
100100ac:	9009883a 	mov	r4,r18
100100b0:	000ab900 	call	1000ab90 <_fflush_r>
100100b4:	103fe326 	beq	r2,zero,10010044 <__alt_data_end+0xf8010044>
100100b8:	00bfffc4 	movi	r2,-1
100100bc:	003fe206 	br	10010048 <__alt_data_end+0xf8010048>
100100c0:	800b883a 	mov	r5,r16
100100c4:	9009883a 	mov	r4,r18
100100c8:	0008f700 	call	10008f70 <__swsetup_r>
100100cc:	103ffa1e 	bne	r2,zero,100100b8 <__alt_data_end+0xf80100b8>
100100d0:	8100030b 	ldhu	r4,12(r16)
100100d4:	80c00417 	ldw	r3,16(r16)
100100d8:	003fc506 	br	1000fff0 <__alt_data_end+0xf800fff0>
100100dc:	000af7c0 	call	1000af7c <__sinit>
100100e0:	003fbc06 	br	1000ffd4 <__alt_data_end+0xf800ffd4>

100100e4 <__swbuf>:
100100e4:	008400b4 	movhi	r2,4098
100100e8:	10959104 	addi	r2,r2,22084
100100ec:	280d883a 	mov	r6,r5
100100f0:	200b883a 	mov	r5,r4
100100f4:	11000017 	ldw	r4,0(r2)
100100f8:	000ffa41 	jmpi	1000ffa4 <__swbuf_r>

100100fc <_wcrtomb_r>:
100100fc:	defff604 	addi	sp,sp,-40
10010100:	008400b4 	movhi	r2,4098
10010104:	dc800815 	stw	r18,32(sp)
10010108:	dc400715 	stw	r17,28(sp)
1001010c:	dc000615 	stw	r16,24(sp)
10010110:	10959504 	addi	r2,r2,22100
10010114:	dfc00915 	stw	ra,36(sp)
10010118:	2021883a 	mov	r16,r4
1001011c:	3823883a 	mov	r17,r7
10010120:	14800017 	ldw	r18,0(r2)
10010124:	28001426 	beq	r5,zero,10010178 <_wcrtomb_r+0x7c>
10010128:	d9400415 	stw	r5,16(sp)
1001012c:	d9800515 	stw	r6,20(sp)
10010130:	000bacc0 	call	1000bacc <__locale_charset>
10010134:	d9800517 	ldw	r6,20(sp)
10010138:	d9400417 	ldw	r5,16(sp)
1001013c:	100f883a 	mov	r7,r2
10010140:	dc400015 	stw	r17,0(sp)
10010144:	8009883a 	mov	r4,r16
10010148:	903ee83a 	callr	r18
1001014c:	00ffffc4 	movi	r3,-1
10010150:	10c0031e 	bne	r2,r3,10010160 <_wcrtomb_r+0x64>
10010154:	88000015 	stw	zero,0(r17)
10010158:	00c02284 	movi	r3,138
1001015c:	80c00015 	stw	r3,0(r16)
10010160:	dfc00917 	ldw	ra,36(sp)
10010164:	dc800817 	ldw	r18,32(sp)
10010168:	dc400717 	ldw	r17,28(sp)
1001016c:	dc000617 	ldw	r16,24(sp)
10010170:	dec00a04 	addi	sp,sp,40
10010174:	f800283a 	ret
10010178:	000bacc0 	call	1000bacc <__locale_charset>
1001017c:	100f883a 	mov	r7,r2
10010180:	dc400015 	stw	r17,0(sp)
10010184:	000d883a 	mov	r6,zero
10010188:	d9400104 	addi	r5,sp,4
1001018c:	8009883a 	mov	r4,r16
10010190:	903ee83a 	callr	r18
10010194:	003fed06 	br	1001014c <__alt_data_end+0xf801014c>

10010198 <wcrtomb>:
10010198:	defff604 	addi	sp,sp,-40
1001019c:	008400b4 	movhi	r2,4098
100101a0:	dc800615 	stw	r18,24(sp)
100101a4:	dc400515 	stw	r17,20(sp)
100101a8:	10959104 	addi	r2,r2,22084
100101ac:	dfc00915 	stw	ra,36(sp)
100101b0:	dd000815 	stw	r20,32(sp)
100101b4:	dcc00715 	stw	r19,28(sp)
100101b8:	dc000415 	stw	r16,16(sp)
100101bc:	3025883a 	mov	r18,r6
100101c0:	14400017 	ldw	r17,0(r2)
100101c4:	20001926 	beq	r4,zero,1001022c <wcrtomb+0x94>
100101c8:	008400b4 	movhi	r2,4098
100101cc:	10959504 	addi	r2,r2,22100
100101d0:	15000017 	ldw	r20,0(r2)
100101d4:	2021883a 	mov	r16,r4
100101d8:	2827883a 	mov	r19,r5
100101dc:	000bacc0 	call	1000bacc <__locale_charset>
100101e0:	100f883a 	mov	r7,r2
100101e4:	dc800015 	stw	r18,0(sp)
100101e8:	980d883a 	mov	r6,r19
100101ec:	800b883a 	mov	r5,r16
100101f0:	8809883a 	mov	r4,r17
100101f4:	a03ee83a 	callr	r20
100101f8:	00ffffc4 	movi	r3,-1
100101fc:	10c0031e 	bne	r2,r3,1001020c <wcrtomb+0x74>
10010200:	90000015 	stw	zero,0(r18)
10010204:	00c02284 	movi	r3,138
10010208:	88c00015 	stw	r3,0(r17)
1001020c:	dfc00917 	ldw	ra,36(sp)
10010210:	dd000817 	ldw	r20,32(sp)
10010214:	dcc00717 	ldw	r19,28(sp)
10010218:	dc800617 	ldw	r18,24(sp)
1001021c:	dc400517 	ldw	r17,20(sp)
10010220:	dc000417 	ldw	r16,16(sp)
10010224:	dec00a04 	addi	sp,sp,40
10010228:	f800283a 	ret
1001022c:	008400b4 	movhi	r2,4098
10010230:	10959504 	addi	r2,r2,22100
10010234:	14000017 	ldw	r16,0(r2)
10010238:	000bacc0 	call	1000bacc <__locale_charset>
1001023c:	100f883a 	mov	r7,r2
10010240:	dc800015 	stw	r18,0(sp)
10010244:	000d883a 	mov	r6,zero
10010248:	d9400104 	addi	r5,sp,4
1001024c:	8809883a 	mov	r4,r17
10010250:	803ee83a 	callr	r16
10010254:	003fe806 	br	100101f8 <__alt_data_end+0xf80101f8>

10010258 <__ascii_wctomb>:
10010258:	28000526 	beq	r5,zero,10010270 <__ascii_wctomb+0x18>
1001025c:	00803fc4 	movi	r2,255
10010260:	11800536 	bltu	r2,r6,10010278 <__ascii_wctomb+0x20>
10010264:	29800005 	stb	r6,0(r5)
10010268:	00800044 	movi	r2,1
1001026c:	f800283a 	ret
10010270:	0005883a 	mov	r2,zero
10010274:	f800283a 	ret
10010278:	00802284 	movi	r2,138
1001027c:	20800015 	stw	r2,0(r4)
10010280:	00bfffc4 	movi	r2,-1
10010284:	f800283a 	ret

10010288 <_wctomb_r>:
10010288:	008400b4 	movhi	r2,4098
1001028c:	defff904 	addi	sp,sp,-28
10010290:	10959504 	addi	r2,r2,22100
10010294:	dfc00615 	stw	ra,24(sp)
10010298:	dc400515 	stw	r17,20(sp)
1001029c:	dc000415 	stw	r16,16(sp)
100102a0:	3823883a 	mov	r17,r7
100102a4:	14000017 	ldw	r16,0(r2)
100102a8:	d9000115 	stw	r4,4(sp)
100102ac:	d9400215 	stw	r5,8(sp)
100102b0:	d9800315 	stw	r6,12(sp)
100102b4:	000bacc0 	call	1000bacc <__locale_charset>
100102b8:	d9800317 	ldw	r6,12(sp)
100102bc:	d9400217 	ldw	r5,8(sp)
100102c0:	d9000117 	ldw	r4,4(sp)
100102c4:	100f883a 	mov	r7,r2
100102c8:	dc400015 	stw	r17,0(sp)
100102cc:	803ee83a 	callr	r16
100102d0:	dfc00617 	ldw	ra,24(sp)
100102d4:	dc400517 	ldw	r17,20(sp)
100102d8:	dc000417 	ldw	r16,16(sp)
100102dc:	dec00704 	addi	sp,sp,28
100102e0:	f800283a 	ret

100102e4 <__udivdi3>:
100102e4:	defff404 	addi	sp,sp,-48
100102e8:	dcc00515 	stw	r19,20(sp)
100102ec:	dc000215 	stw	r16,8(sp)
100102f0:	dfc00b15 	stw	ra,44(sp)
100102f4:	df000a15 	stw	fp,40(sp)
100102f8:	ddc00915 	stw	r23,36(sp)
100102fc:	dd800815 	stw	r22,32(sp)
10010300:	dd400715 	stw	r21,28(sp)
10010304:	dd000615 	stw	r20,24(sp)
10010308:	dc800415 	stw	r18,16(sp)
1001030c:	dc400315 	stw	r17,12(sp)
10010310:	2027883a 	mov	r19,r4
10010314:	2821883a 	mov	r16,r5
10010318:	3800461e 	bne	r7,zero,10010434 <__udivdi3+0x150>
1001031c:	3023883a 	mov	r17,r6
10010320:	2025883a 	mov	r18,r4
10010324:	2980572e 	bgeu	r5,r6,10010484 <__udivdi3+0x1a0>
10010328:	00bfffd4 	movui	r2,65535
1001032c:	282d883a 	mov	r22,r5
10010330:	1180b236 	bltu	r2,r6,100105fc <__udivdi3+0x318>
10010334:	00803fc4 	movi	r2,255
10010338:	1185803a 	cmpltu	r2,r2,r6
1001033c:	100490fa 	slli	r2,r2,3
10010340:	3086d83a 	srl	r3,r6,r2
10010344:	01040074 	movhi	r4,4097
10010348:	211a4204 	addi	r4,r4,26888
1001034c:	20c7883a 	add	r3,r4,r3
10010350:	18c00003 	ldbu	r3,0(r3)
10010354:	1885883a 	add	r2,r3,r2
10010358:	00c00804 	movi	r3,32
1001035c:	1887c83a 	sub	r3,r3,r2
10010360:	18000526 	beq	r3,zero,10010378 <__udivdi3+0x94>
10010364:	80e0983a 	sll	r16,r16,r3
10010368:	9884d83a 	srl	r2,r19,r2
1001036c:	30e2983a 	sll	r17,r6,r3
10010370:	98e4983a 	sll	r18,r19,r3
10010374:	142cb03a 	or	r22,r2,r16
10010378:	882ad43a 	srli	r21,r17,16
1001037c:	b009883a 	mov	r4,r22
10010380:	8d3fffcc 	andi	r20,r17,65535
10010384:	a80b883a 	mov	r5,r21
10010388:	00069640 	call	10006964 <__umodsi3>
1001038c:	b009883a 	mov	r4,r22
10010390:	a80b883a 	mov	r5,r21
10010394:	1027883a 	mov	r19,r2
10010398:	00069000 	call	10006900 <__udivsi3>
1001039c:	100b883a 	mov	r5,r2
100103a0:	a009883a 	mov	r4,r20
100103a4:	102d883a 	mov	r22,r2
100103a8:	00069bc0 	call	100069bc <__mulsi3>
100103ac:	9826943a 	slli	r19,r19,16
100103b0:	9006d43a 	srli	r3,r18,16
100103b4:	1cc6b03a 	or	r3,r3,r19
100103b8:	1880052e 	bgeu	r3,r2,100103d0 <__udivdi3+0xec>
100103bc:	1c47883a 	add	r3,r3,r17
100103c0:	b13fffc4 	addi	r4,r22,-1
100103c4:	1c400136 	bltu	r3,r17,100103cc <__udivdi3+0xe8>
100103c8:	18814236 	bltu	r3,r2,100108d4 <__udivdi3+0x5f0>
100103cc:	202d883a 	mov	r22,r4
100103d0:	18a1c83a 	sub	r16,r3,r2
100103d4:	8009883a 	mov	r4,r16
100103d8:	a80b883a 	mov	r5,r21
100103dc:	00069640 	call	10006964 <__umodsi3>
100103e0:	1027883a 	mov	r19,r2
100103e4:	8009883a 	mov	r4,r16
100103e8:	a80b883a 	mov	r5,r21
100103ec:	9826943a 	slli	r19,r19,16
100103f0:	00069000 	call	10006900 <__udivsi3>
100103f4:	100b883a 	mov	r5,r2
100103f8:	a009883a 	mov	r4,r20
100103fc:	94bfffcc 	andi	r18,r18,65535
10010400:	1021883a 	mov	r16,r2
10010404:	94e4b03a 	or	r18,r18,r19
10010408:	00069bc0 	call	100069bc <__mulsi3>
1001040c:	9080052e 	bgeu	r18,r2,10010424 <__udivdi3+0x140>
10010410:	8ca5883a 	add	r18,r17,r18
10010414:	80ffffc4 	addi	r3,r16,-1
10010418:	94410c36 	bltu	r18,r17,1001084c <__udivdi3+0x568>
1001041c:	90810b2e 	bgeu	r18,r2,1001084c <__udivdi3+0x568>
10010420:	843fff84 	addi	r16,r16,-2
10010424:	b004943a 	slli	r2,r22,16
10010428:	0007883a 	mov	r3,zero
1001042c:	1404b03a 	or	r2,r2,r16
10010430:	00005e06 	br	100105ac <__udivdi3+0x2c8>
10010434:	29c05b36 	bltu	r5,r7,100105a4 <__udivdi3+0x2c0>
10010438:	00bfffd4 	movui	r2,65535
1001043c:	11c0672e 	bgeu	r2,r7,100105dc <__udivdi3+0x2f8>
10010440:	00804034 	movhi	r2,256
10010444:	10bfffc4 	addi	r2,r2,-1
10010448:	11c10a36 	bltu	r2,r7,10010874 <__udivdi3+0x590>
1001044c:	00800404 	movi	r2,16
10010450:	3886d83a 	srl	r3,r7,r2
10010454:	01040074 	movhi	r4,4097
10010458:	211a4204 	addi	r4,r4,26888
1001045c:	20c7883a 	add	r3,r4,r3
10010460:	18c00003 	ldbu	r3,0(r3)
10010464:	05c00804 	movi	r23,32
10010468:	1885883a 	add	r2,r3,r2
1001046c:	b8afc83a 	sub	r23,r23,r2
10010470:	b800671e 	bne	r23,zero,10010610 <__udivdi3+0x32c>
10010474:	3c010536 	bltu	r7,r16,1001088c <__udivdi3+0x5a8>
10010478:	9985403a 	cmpgeu	r2,r19,r6
1001047c:	0007883a 	mov	r3,zero
10010480:	00004a06 	br	100105ac <__udivdi3+0x2c8>
10010484:	3000041e 	bne	r6,zero,10010498 <__udivdi3+0x1b4>
10010488:	000b883a 	mov	r5,zero
1001048c:	01000044 	movi	r4,1
10010490:	00069000 	call	10006900 <__udivsi3>
10010494:	1023883a 	mov	r17,r2
10010498:	00bfffd4 	movui	r2,65535
1001049c:	1440532e 	bgeu	r2,r17,100105ec <__udivdi3+0x308>
100104a0:	00804034 	movhi	r2,256
100104a4:	10bfffc4 	addi	r2,r2,-1
100104a8:	1440f436 	bltu	r2,r17,1001087c <__udivdi3+0x598>
100104ac:	00800404 	movi	r2,16
100104b0:	8886d83a 	srl	r3,r17,r2
100104b4:	01040074 	movhi	r4,4097
100104b8:	211a4204 	addi	r4,r4,26888
100104bc:	20c7883a 	add	r3,r4,r3
100104c0:	18c00003 	ldbu	r3,0(r3)
100104c4:	1885883a 	add	r2,r3,r2
100104c8:	00c00804 	movi	r3,32
100104cc:	1887c83a 	sub	r3,r3,r2
100104d0:	1800a51e 	bne	r3,zero,10010768 <__udivdi3+0x484>
100104d4:	882ad43a 	srli	r21,r17,16
100104d8:	8461c83a 	sub	r16,r16,r17
100104dc:	8d3fffcc 	andi	r20,r17,65535
100104e0:	00c00044 	movi	r3,1
100104e4:	a80b883a 	mov	r5,r21
100104e8:	8009883a 	mov	r4,r16
100104ec:	d8c00115 	stw	r3,4(sp)
100104f0:	00069640 	call	10006964 <__umodsi3>
100104f4:	a80b883a 	mov	r5,r21
100104f8:	8009883a 	mov	r4,r16
100104fc:	1027883a 	mov	r19,r2
10010500:	00069000 	call	10006900 <__udivsi3>
10010504:	a00b883a 	mov	r5,r20
10010508:	1009883a 	mov	r4,r2
1001050c:	102d883a 	mov	r22,r2
10010510:	00069bc0 	call	100069bc <__mulsi3>
10010514:	9826943a 	slli	r19,r19,16
10010518:	900ed43a 	srli	r7,r18,16
1001051c:	d8c00117 	ldw	r3,4(sp)
10010520:	3cceb03a 	or	r7,r7,r19
10010524:	3880052e 	bgeu	r7,r2,1001053c <__udivdi3+0x258>
10010528:	3c4f883a 	add	r7,r7,r17
1001052c:	b13fffc4 	addi	r4,r22,-1
10010530:	3c400136 	bltu	r7,r17,10010538 <__udivdi3+0x254>
10010534:	3880e436 	bltu	r7,r2,100108c8 <__udivdi3+0x5e4>
10010538:	202d883a 	mov	r22,r4
1001053c:	38a1c83a 	sub	r16,r7,r2
10010540:	8009883a 	mov	r4,r16
10010544:	a80b883a 	mov	r5,r21
10010548:	d8c00115 	stw	r3,4(sp)
1001054c:	00069640 	call	10006964 <__umodsi3>
10010550:	1027883a 	mov	r19,r2
10010554:	8009883a 	mov	r4,r16
10010558:	a80b883a 	mov	r5,r21
1001055c:	9826943a 	slli	r19,r19,16
10010560:	00069000 	call	10006900 <__udivsi3>
10010564:	a00b883a 	mov	r5,r20
10010568:	1009883a 	mov	r4,r2
1001056c:	94bfffcc 	andi	r18,r18,65535
10010570:	1021883a 	mov	r16,r2
10010574:	94e4b03a 	or	r18,r18,r19
10010578:	00069bc0 	call	100069bc <__mulsi3>
1001057c:	d8c00117 	ldw	r3,4(sp)
10010580:	9080052e 	bgeu	r18,r2,10010598 <__udivdi3+0x2b4>
10010584:	8ca5883a 	add	r18,r17,r18
10010588:	813fffc4 	addi	r4,r16,-1
1001058c:	9440ad36 	bltu	r18,r17,10010844 <__udivdi3+0x560>
10010590:	9080ac2e 	bgeu	r18,r2,10010844 <__udivdi3+0x560>
10010594:	843fff84 	addi	r16,r16,-2
10010598:	b004943a 	slli	r2,r22,16
1001059c:	1404b03a 	or	r2,r2,r16
100105a0:	00000206 	br	100105ac <__udivdi3+0x2c8>
100105a4:	0007883a 	mov	r3,zero
100105a8:	0005883a 	mov	r2,zero
100105ac:	dfc00b17 	ldw	ra,44(sp)
100105b0:	df000a17 	ldw	fp,40(sp)
100105b4:	ddc00917 	ldw	r23,36(sp)
100105b8:	dd800817 	ldw	r22,32(sp)
100105bc:	dd400717 	ldw	r21,28(sp)
100105c0:	dd000617 	ldw	r20,24(sp)
100105c4:	dcc00517 	ldw	r19,20(sp)
100105c8:	dc800417 	ldw	r18,16(sp)
100105cc:	dc400317 	ldw	r17,12(sp)
100105d0:	dc000217 	ldw	r16,8(sp)
100105d4:	dec00c04 	addi	sp,sp,48
100105d8:	f800283a 	ret
100105dc:	00803fc4 	movi	r2,255
100105e0:	11c5803a 	cmpltu	r2,r2,r7
100105e4:	100490fa 	slli	r2,r2,3
100105e8:	003f9906 	br	10010450 <__alt_data_end+0xf8010450>
100105ec:	00803fc4 	movi	r2,255
100105f0:	1445803a 	cmpltu	r2,r2,r17
100105f4:	100490fa 	slli	r2,r2,3
100105f8:	003fad06 	br	100104b0 <__alt_data_end+0xf80104b0>
100105fc:	00804034 	movhi	r2,256
10010600:	10bfffc4 	addi	r2,r2,-1
10010604:	11809f36 	bltu	r2,r6,10010884 <__udivdi3+0x5a0>
10010608:	00800404 	movi	r2,16
1001060c:	003f4c06 	br	10010340 <__alt_data_end+0xf8010340>
10010610:	3dce983a 	sll	r7,r7,r23
10010614:	30b8d83a 	srl	fp,r6,r2
10010618:	80a2d83a 	srl	r17,r16,r2
1001061c:	35cc983a 	sll	r6,r6,r23
10010620:	3f38b03a 	or	fp,r7,fp
10010624:	e024d43a 	srli	r18,fp,16
10010628:	9884d83a 	srl	r2,r19,r2
1001062c:	85e0983a 	sll	r16,r16,r23
10010630:	8809883a 	mov	r4,r17
10010634:	900b883a 	mov	r5,r18
10010638:	d9800015 	stw	r6,0(sp)
1001063c:	1420b03a 	or	r16,r2,r16
10010640:	00069640 	call	10006964 <__umodsi3>
10010644:	900b883a 	mov	r5,r18
10010648:	8809883a 	mov	r4,r17
1001064c:	1029883a 	mov	r20,r2
10010650:	e5bfffcc 	andi	r22,fp,65535
10010654:	00069000 	call	10006900 <__udivsi3>
10010658:	100b883a 	mov	r5,r2
1001065c:	b009883a 	mov	r4,r22
10010660:	102b883a 	mov	r21,r2
10010664:	00069bc0 	call	100069bc <__mulsi3>
10010668:	a028943a 	slli	r20,r20,16
1001066c:	8006d43a 	srli	r3,r16,16
10010670:	1d06b03a 	or	r3,r3,r20
10010674:	1880042e 	bgeu	r3,r2,10010688 <__udivdi3+0x3a4>
10010678:	1f07883a 	add	r3,r3,fp
1001067c:	a93fffc4 	addi	r4,r21,-1
10010680:	1f00892e 	bgeu	r3,fp,100108a8 <__udivdi3+0x5c4>
10010684:	202b883a 	mov	r21,r4
10010688:	18a3c83a 	sub	r17,r3,r2
1001068c:	8809883a 	mov	r4,r17
10010690:	900b883a 	mov	r5,r18
10010694:	00069640 	call	10006964 <__umodsi3>
10010698:	1029883a 	mov	r20,r2
1001069c:	8809883a 	mov	r4,r17
100106a0:	900b883a 	mov	r5,r18
100106a4:	a028943a 	slli	r20,r20,16
100106a8:	00069000 	call	10006900 <__udivsi3>
100106ac:	100b883a 	mov	r5,r2
100106b0:	b009883a 	mov	r4,r22
100106b4:	843fffcc 	andi	r16,r16,65535
100106b8:	1023883a 	mov	r17,r2
100106bc:	8520b03a 	or	r16,r16,r20
100106c0:	00069bc0 	call	100069bc <__mulsi3>
100106c4:	8080042e 	bgeu	r16,r2,100106d8 <__udivdi3+0x3f4>
100106c8:	8721883a 	add	r16,r16,fp
100106cc:	88ffffc4 	addi	r3,r17,-1
100106d0:	8700712e 	bgeu	r16,fp,10010898 <__udivdi3+0x5b4>
100106d4:	1823883a 	mov	r17,r3
100106d8:	a80e943a 	slli	r7,r21,16
100106dc:	d8c00017 	ldw	r3,0(sp)
100106e0:	80a1c83a 	sub	r16,r16,r2
100106e4:	3c64b03a 	or	r18,r7,r17
100106e8:	1d3fffcc 	andi	r20,r3,65535
100106ec:	9022d43a 	srli	r17,r18,16
100106f0:	95bfffcc 	andi	r22,r18,65535
100106f4:	a00b883a 	mov	r5,r20
100106f8:	b009883a 	mov	r4,r22
100106fc:	182ad43a 	srli	r21,r3,16
10010700:	00069bc0 	call	100069bc <__mulsi3>
10010704:	a00b883a 	mov	r5,r20
10010708:	8809883a 	mov	r4,r17
1001070c:	1039883a 	mov	fp,r2
10010710:	00069bc0 	call	100069bc <__mulsi3>
10010714:	8809883a 	mov	r4,r17
10010718:	a80b883a 	mov	r5,r21
1001071c:	1029883a 	mov	r20,r2
10010720:	00069bc0 	call	100069bc <__mulsi3>
10010724:	a80b883a 	mov	r5,r21
10010728:	b009883a 	mov	r4,r22
1001072c:	1023883a 	mov	r17,r2
10010730:	00069bc0 	call	100069bc <__mulsi3>
10010734:	e006d43a 	srli	r3,fp,16
10010738:	1505883a 	add	r2,r2,r20
1001073c:	1887883a 	add	r3,r3,r2
10010740:	1d00022e 	bgeu	r3,r20,1001074c <__udivdi3+0x468>
10010744:	00800074 	movhi	r2,1
10010748:	88a3883a 	add	r17,r17,r2
1001074c:	1804d43a 	srli	r2,r3,16
10010750:	1463883a 	add	r17,r2,r17
10010754:	84404436 	bltu	r16,r17,10010868 <__udivdi3+0x584>
10010758:	84403e26 	beq	r16,r17,10010854 <__udivdi3+0x570>
1001075c:	9005883a 	mov	r2,r18
10010760:	0007883a 	mov	r3,zero
10010764:	003f9106 	br	100105ac <__alt_data_end+0xf80105ac>
10010768:	88e2983a 	sll	r17,r17,r3
1001076c:	80aed83a 	srl	r23,r16,r2
10010770:	80e0983a 	sll	r16,r16,r3
10010774:	882ad43a 	srli	r21,r17,16
10010778:	9884d83a 	srl	r2,r19,r2
1001077c:	b809883a 	mov	r4,r23
10010780:	a80b883a 	mov	r5,r21
10010784:	98e4983a 	sll	r18,r19,r3
10010788:	142cb03a 	or	r22,r2,r16
1001078c:	00069640 	call	10006964 <__umodsi3>
10010790:	b809883a 	mov	r4,r23
10010794:	a80b883a 	mov	r5,r21
10010798:	1027883a 	mov	r19,r2
1001079c:	8d3fffcc 	andi	r20,r17,65535
100107a0:	00069000 	call	10006900 <__udivsi3>
100107a4:	a009883a 	mov	r4,r20
100107a8:	100b883a 	mov	r5,r2
100107ac:	102f883a 	mov	r23,r2
100107b0:	00069bc0 	call	100069bc <__mulsi3>
100107b4:	9826943a 	slli	r19,r19,16
100107b8:	b008d43a 	srli	r4,r22,16
100107bc:	24c8b03a 	or	r4,r4,r19
100107c0:	2080062e 	bgeu	r4,r2,100107dc <__udivdi3+0x4f8>
100107c4:	2449883a 	add	r4,r4,r17
100107c8:	b8ffffc4 	addi	r3,r23,-1
100107cc:	24403c36 	bltu	r4,r17,100108c0 <__udivdi3+0x5dc>
100107d0:	20803b2e 	bgeu	r4,r2,100108c0 <__udivdi3+0x5dc>
100107d4:	bdffff84 	addi	r23,r23,-2
100107d8:	2449883a 	add	r4,r4,r17
100107dc:	20a1c83a 	sub	r16,r4,r2
100107e0:	a80b883a 	mov	r5,r21
100107e4:	8009883a 	mov	r4,r16
100107e8:	00069640 	call	10006964 <__umodsi3>
100107ec:	a80b883a 	mov	r5,r21
100107f0:	8009883a 	mov	r4,r16
100107f4:	1027883a 	mov	r19,r2
100107f8:	00069000 	call	10006900 <__udivsi3>
100107fc:	a009883a 	mov	r4,r20
10010800:	100b883a 	mov	r5,r2
10010804:	9826943a 	slli	r19,r19,16
10010808:	1039883a 	mov	fp,r2
1001080c:	00069bc0 	call	100069bc <__mulsi3>
10010810:	b13fffcc 	andi	r4,r22,65535
10010814:	24c8b03a 	or	r4,r4,r19
10010818:	2080062e 	bgeu	r4,r2,10010834 <__udivdi3+0x550>
1001081c:	2449883a 	add	r4,r4,r17
10010820:	e0ffffc4 	addi	r3,fp,-1
10010824:	24402436 	bltu	r4,r17,100108b8 <__udivdi3+0x5d4>
10010828:	2080232e 	bgeu	r4,r2,100108b8 <__udivdi3+0x5d4>
1001082c:	e73fff84 	addi	fp,fp,-2
10010830:	2449883a 	add	r4,r4,r17
10010834:	b82e943a 	slli	r23,r23,16
10010838:	20a1c83a 	sub	r16,r4,r2
1001083c:	bf06b03a 	or	r3,r23,fp
10010840:	003f2806 	br	100104e4 <__alt_data_end+0xf80104e4>
10010844:	2021883a 	mov	r16,r4
10010848:	003f5306 	br	10010598 <__alt_data_end+0xf8010598>
1001084c:	1821883a 	mov	r16,r3
10010850:	003ef406 	br	10010424 <__alt_data_end+0xf8010424>
10010854:	1806943a 	slli	r3,r3,16
10010858:	9de6983a 	sll	r19,r19,r23
1001085c:	e73fffcc 	andi	fp,fp,65535
10010860:	1f07883a 	add	r3,r3,fp
10010864:	98ffbd2e 	bgeu	r19,r3,1001075c <__alt_data_end+0xf801075c>
10010868:	90bfffc4 	addi	r2,r18,-1
1001086c:	0007883a 	mov	r3,zero
10010870:	003f4e06 	br	100105ac <__alt_data_end+0xf80105ac>
10010874:	00800604 	movi	r2,24
10010878:	003ef506 	br	10010450 <__alt_data_end+0xf8010450>
1001087c:	00800604 	movi	r2,24
10010880:	003f0b06 	br	100104b0 <__alt_data_end+0xf80104b0>
10010884:	00800604 	movi	r2,24
10010888:	003ead06 	br	10010340 <__alt_data_end+0xf8010340>
1001088c:	0007883a 	mov	r3,zero
10010890:	00800044 	movi	r2,1
10010894:	003f4506 	br	100105ac <__alt_data_end+0xf80105ac>
10010898:	80bf8e2e 	bgeu	r16,r2,100106d4 <__alt_data_end+0xf80106d4>
1001089c:	8c7fff84 	addi	r17,r17,-2
100108a0:	8721883a 	add	r16,r16,fp
100108a4:	003f8c06 	br	100106d8 <__alt_data_end+0xf80106d8>
100108a8:	18bf762e 	bgeu	r3,r2,10010684 <__alt_data_end+0xf8010684>
100108ac:	ad7fff84 	addi	r21,r21,-2
100108b0:	1f07883a 	add	r3,r3,fp
100108b4:	003f7406 	br	10010688 <__alt_data_end+0xf8010688>
100108b8:	1839883a 	mov	fp,r3
100108bc:	003fdd06 	br	10010834 <__alt_data_end+0xf8010834>
100108c0:	182f883a 	mov	r23,r3
100108c4:	003fc506 	br	100107dc <__alt_data_end+0xf80107dc>
100108c8:	b5bfff84 	addi	r22,r22,-2
100108cc:	3c4f883a 	add	r7,r7,r17
100108d0:	003f1a06 	br	1001053c <__alt_data_end+0xf801053c>
100108d4:	b5bfff84 	addi	r22,r22,-2
100108d8:	1c47883a 	add	r3,r3,r17
100108dc:	003ebc06 	br	100103d0 <__alt_data_end+0xf80103d0>

100108e0 <__umoddi3>:
100108e0:	defff304 	addi	sp,sp,-52
100108e4:	df000b15 	stw	fp,44(sp)
100108e8:	dc400415 	stw	r17,16(sp)
100108ec:	dc000315 	stw	r16,12(sp)
100108f0:	dfc00c15 	stw	ra,48(sp)
100108f4:	ddc00a15 	stw	r23,40(sp)
100108f8:	dd800915 	stw	r22,36(sp)
100108fc:	dd400815 	stw	r21,32(sp)
10010900:	dd000715 	stw	r20,28(sp)
10010904:	dcc00615 	stw	r19,24(sp)
10010908:	dc800515 	stw	r18,20(sp)
1001090c:	2021883a 	mov	r16,r4
10010910:	2823883a 	mov	r17,r5
10010914:	2839883a 	mov	fp,r5
10010918:	3800401e 	bne	r7,zero,10010a1c <__umoddi3+0x13c>
1001091c:	3027883a 	mov	r19,r6
10010920:	2029883a 	mov	r20,r4
10010924:	2980552e 	bgeu	r5,r6,10010a7c <__umoddi3+0x19c>
10010928:	00bfffd4 	movui	r2,65535
1001092c:	1180a236 	bltu	r2,r6,10010bb8 <__umoddi3+0x2d8>
10010930:	01003fc4 	movi	r4,255
10010934:	2189803a 	cmpltu	r4,r4,r6
10010938:	200890fa 	slli	r4,r4,3
1001093c:	3104d83a 	srl	r2,r6,r4
10010940:	00c40074 	movhi	r3,4097
10010944:	18da4204 	addi	r3,r3,26888
10010948:	1885883a 	add	r2,r3,r2
1001094c:	10c00003 	ldbu	r3,0(r2)
10010950:	00800804 	movi	r2,32
10010954:	1909883a 	add	r4,r3,r4
10010958:	1125c83a 	sub	r18,r2,r4
1001095c:	90000526 	beq	r18,zero,10010974 <__umoddi3+0x94>
10010960:	8ca2983a 	sll	r17,r17,r18
10010964:	8108d83a 	srl	r4,r16,r4
10010968:	34a6983a 	sll	r19,r6,r18
1001096c:	84a8983a 	sll	r20,r16,r18
10010970:	2478b03a 	or	fp,r4,r17
10010974:	982cd43a 	srli	r22,r19,16
10010978:	e009883a 	mov	r4,fp
1001097c:	9dffffcc 	andi	r23,r19,65535
10010980:	b00b883a 	mov	r5,r22
10010984:	00069640 	call	10006964 <__umodsi3>
10010988:	b00b883a 	mov	r5,r22
1001098c:	e009883a 	mov	r4,fp
10010990:	102b883a 	mov	r21,r2
10010994:	00069000 	call	10006900 <__udivsi3>
10010998:	100b883a 	mov	r5,r2
1001099c:	b809883a 	mov	r4,r23
100109a0:	00069bc0 	call	100069bc <__mulsi3>
100109a4:	a82a943a 	slli	r21,r21,16
100109a8:	a006d43a 	srli	r3,r20,16
100109ac:	1d46b03a 	or	r3,r3,r21
100109b0:	1880032e 	bgeu	r3,r2,100109c0 <__umoddi3+0xe0>
100109b4:	1cc7883a 	add	r3,r3,r19
100109b8:	1cc00136 	bltu	r3,r19,100109c0 <__umoddi3+0xe0>
100109bc:	18813136 	bltu	r3,r2,10010e84 <__umoddi3+0x5a4>
100109c0:	18a1c83a 	sub	r16,r3,r2
100109c4:	b00b883a 	mov	r5,r22
100109c8:	8009883a 	mov	r4,r16
100109cc:	00069640 	call	10006964 <__umodsi3>
100109d0:	b00b883a 	mov	r5,r22
100109d4:	8009883a 	mov	r4,r16
100109d8:	1023883a 	mov	r17,r2
100109dc:	00069000 	call	10006900 <__udivsi3>
100109e0:	100b883a 	mov	r5,r2
100109e4:	b809883a 	mov	r4,r23
100109e8:	8822943a 	slli	r17,r17,16
100109ec:	00069bc0 	call	100069bc <__mulsi3>
100109f0:	a0ffffcc 	andi	r3,r20,65535
100109f4:	1c46b03a 	or	r3,r3,r17
100109f8:	1880042e 	bgeu	r3,r2,10010a0c <__umoddi3+0x12c>
100109fc:	1cc7883a 	add	r3,r3,r19
10010a00:	1cc00236 	bltu	r3,r19,10010a0c <__umoddi3+0x12c>
10010a04:	1880012e 	bgeu	r3,r2,10010a0c <__umoddi3+0x12c>
10010a08:	1cc7883a 	add	r3,r3,r19
10010a0c:	1885c83a 	sub	r2,r3,r2
10010a10:	1484d83a 	srl	r2,r2,r18
10010a14:	0007883a 	mov	r3,zero
10010a18:	00005306 	br	10010b68 <__umoddi3+0x288>
10010a1c:	29c05036 	bltu	r5,r7,10010b60 <__umoddi3+0x280>
10010a20:	00bfffd4 	movui	r2,65535
10010a24:	11c05c2e 	bgeu	r2,r7,10010b98 <__umoddi3+0x2b8>
10010a28:	00804034 	movhi	r2,256
10010a2c:	10bfffc4 	addi	r2,r2,-1
10010a30:	11c10636 	bltu	r2,r7,10010e4c <__umoddi3+0x56c>
10010a34:	01000404 	movi	r4,16
10010a38:	3904d83a 	srl	r2,r7,r4
10010a3c:	00c40074 	movhi	r3,4097
10010a40:	18da4204 	addi	r3,r3,26888
10010a44:	1885883a 	add	r2,r3,r2
10010a48:	14c00003 	ldbu	r19,0(r2)
10010a4c:	00c00804 	movi	r3,32
10010a50:	9927883a 	add	r19,r19,r4
10010a54:	1ce9c83a 	sub	r20,r3,r19
10010a58:	a0005c1e 	bne	r20,zero,10010bcc <__umoddi3+0x2ec>
10010a5c:	3c400136 	bltu	r7,r17,10010a64 <__umoddi3+0x184>
10010a60:	81810a36 	bltu	r16,r6,10010e8c <__umoddi3+0x5ac>
10010a64:	8185c83a 	sub	r2,r16,r6
10010a68:	89e3c83a 	sub	r17,r17,r7
10010a6c:	8089803a 	cmpltu	r4,r16,r2
10010a70:	8939c83a 	sub	fp,r17,r4
10010a74:	e007883a 	mov	r3,fp
10010a78:	00003b06 	br	10010b68 <__umoddi3+0x288>
10010a7c:	3000041e 	bne	r6,zero,10010a90 <__umoddi3+0x1b0>
10010a80:	000b883a 	mov	r5,zero
10010a84:	01000044 	movi	r4,1
10010a88:	00069000 	call	10006900 <__udivsi3>
10010a8c:	1027883a 	mov	r19,r2
10010a90:	00bfffd4 	movui	r2,65535
10010a94:	14c0442e 	bgeu	r2,r19,10010ba8 <__umoddi3+0x2c8>
10010a98:	00804034 	movhi	r2,256
10010a9c:	10bfffc4 	addi	r2,r2,-1
10010aa0:	14c0ec36 	bltu	r2,r19,10010e54 <__umoddi3+0x574>
10010aa4:	00800404 	movi	r2,16
10010aa8:	9886d83a 	srl	r3,r19,r2
10010aac:	01040074 	movhi	r4,4097
10010ab0:	211a4204 	addi	r4,r4,26888
10010ab4:	20c7883a 	add	r3,r4,r3
10010ab8:	18c00003 	ldbu	r3,0(r3)
10010abc:	1887883a 	add	r3,r3,r2
10010ac0:	00800804 	movi	r2,32
10010ac4:	10e5c83a 	sub	r18,r2,r3
10010ac8:	9000ab1e 	bne	r18,zero,10010d78 <__umoddi3+0x498>
10010acc:	982cd43a 	srli	r22,r19,16
10010ad0:	8ce3c83a 	sub	r17,r17,r19
10010ad4:	9dffffcc 	andi	r23,r19,65535
10010ad8:	b00b883a 	mov	r5,r22
10010adc:	8809883a 	mov	r4,r17
10010ae0:	00069640 	call	10006964 <__umodsi3>
10010ae4:	b00b883a 	mov	r5,r22
10010ae8:	8809883a 	mov	r4,r17
10010aec:	102b883a 	mov	r21,r2
10010af0:	00069000 	call	10006900 <__udivsi3>
10010af4:	b80b883a 	mov	r5,r23
10010af8:	1009883a 	mov	r4,r2
10010afc:	00069bc0 	call	100069bc <__mulsi3>
10010b00:	a82a943a 	slli	r21,r21,16
10010b04:	a006d43a 	srli	r3,r20,16
10010b08:	1d46b03a 	or	r3,r3,r21
10010b0c:	1880042e 	bgeu	r3,r2,10010b20 <__umoddi3+0x240>
10010b10:	1cc7883a 	add	r3,r3,r19
10010b14:	1cc00236 	bltu	r3,r19,10010b20 <__umoddi3+0x240>
10010b18:	1880012e 	bgeu	r3,r2,10010b20 <__umoddi3+0x240>
10010b1c:	1cc7883a 	add	r3,r3,r19
10010b20:	18a1c83a 	sub	r16,r3,r2
10010b24:	b00b883a 	mov	r5,r22
10010b28:	8009883a 	mov	r4,r16
10010b2c:	00069640 	call	10006964 <__umodsi3>
10010b30:	1023883a 	mov	r17,r2
10010b34:	b00b883a 	mov	r5,r22
10010b38:	8009883a 	mov	r4,r16
10010b3c:	00069000 	call	10006900 <__udivsi3>
10010b40:	8822943a 	slli	r17,r17,16
10010b44:	b80b883a 	mov	r5,r23
10010b48:	1009883a 	mov	r4,r2
10010b4c:	00069bc0 	call	100069bc <__mulsi3>
10010b50:	a53fffcc 	andi	r20,r20,65535
10010b54:	a446b03a 	or	r3,r20,r17
10010b58:	18bfac2e 	bgeu	r3,r2,10010a0c <__alt_data_end+0xf8010a0c>
10010b5c:	003fa706 	br	100109fc <__alt_data_end+0xf80109fc>
10010b60:	2005883a 	mov	r2,r4
10010b64:	2807883a 	mov	r3,r5
10010b68:	dfc00c17 	ldw	ra,48(sp)
10010b6c:	df000b17 	ldw	fp,44(sp)
10010b70:	ddc00a17 	ldw	r23,40(sp)
10010b74:	dd800917 	ldw	r22,36(sp)
10010b78:	dd400817 	ldw	r21,32(sp)
10010b7c:	dd000717 	ldw	r20,28(sp)
10010b80:	dcc00617 	ldw	r19,24(sp)
10010b84:	dc800517 	ldw	r18,20(sp)
10010b88:	dc400417 	ldw	r17,16(sp)
10010b8c:	dc000317 	ldw	r16,12(sp)
10010b90:	dec00d04 	addi	sp,sp,52
10010b94:	f800283a 	ret
10010b98:	04c03fc4 	movi	r19,255
10010b9c:	99c9803a 	cmpltu	r4,r19,r7
10010ba0:	200890fa 	slli	r4,r4,3
10010ba4:	003fa406 	br	10010a38 <__alt_data_end+0xf8010a38>
10010ba8:	00803fc4 	movi	r2,255
10010bac:	14c5803a 	cmpltu	r2,r2,r19
10010bb0:	100490fa 	slli	r2,r2,3
10010bb4:	003fbc06 	br	10010aa8 <__alt_data_end+0xf8010aa8>
10010bb8:	00804034 	movhi	r2,256
10010bbc:	10bfffc4 	addi	r2,r2,-1
10010bc0:	1180a636 	bltu	r2,r6,10010e5c <__umoddi3+0x57c>
10010bc4:	01000404 	movi	r4,16
10010bc8:	003f5c06 	br	1001093c <__alt_data_end+0xf801093c>
10010bcc:	3d0e983a 	sll	r7,r7,r20
10010bd0:	34ead83a 	srl	r21,r6,r19
10010bd4:	8cc6d83a 	srl	r3,r17,r19
10010bd8:	8d10983a 	sll	r8,r17,r20
10010bdc:	3d6ab03a 	or	r21,r7,r21
10010be0:	a82cd43a 	srli	r22,r21,16
10010be4:	84e2d83a 	srl	r17,r16,r19
10010be8:	1809883a 	mov	r4,r3
10010bec:	b00b883a 	mov	r5,r22
10010bf0:	8a22b03a 	or	r17,r17,r8
10010bf4:	3524983a 	sll	r18,r6,r20
10010bf8:	dc400015 	stw	r17,0(sp)
10010bfc:	d8c00115 	stw	r3,4(sp)
10010c00:	00069640 	call	10006964 <__umodsi3>
10010c04:	d8c00117 	ldw	r3,4(sp)
10010c08:	b00b883a 	mov	r5,r22
10010c0c:	1039883a 	mov	fp,r2
10010c10:	1809883a 	mov	r4,r3
10010c14:	00069000 	call	10006900 <__udivsi3>
10010c18:	adffffcc 	andi	r23,r21,65535
10010c1c:	100b883a 	mov	r5,r2
10010c20:	b809883a 	mov	r4,r23
10010c24:	1023883a 	mov	r17,r2
10010c28:	00069bc0 	call	100069bc <__mulsi3>
10010c2c:	d9400017 	ldw	r5,0(sp)
10010c30:	e008943a 	slli	r4,fp,16
10010c34:	8520983a 	sll	r16,r16,r20
10010c38:	2806d43a 	srli	r3,r5,16
10010c3c:	1906b03a 	or	r3,r3,r4
10010c40:	1880042e 	bgeu	r3,r2,10010c54 <__umoddi3+0x374>
10010c44:	1d47883a 	add	r3,r3,r21
10010c48:	893fffc4 	addi	r4,r17,-1
10010c4c:	1d40892e 	bgeu	r3,r21,10010e74 <__umoddi3+0x594>
10010c50:	2023883a 	mov	r17,r4
10010c54:	18b9c83a 	sub	fp,r3,r2
10010c58:	b00b883a 	mov	r5,r22
10010c5c:	e009883a 	mov	r4,fp
10010c60:	00069640 	call	10006964 <__umodsi3>
10010c64:	b00b883a 	mov	r5,r22
10010c68:	e009883a 	mov	r4,fp
10010c6c:	d8800215 	stw	r2,8(sp)
10010c70:	00069000 	call	10006900 <__udivsi3>
10010c74:	100b883a 	mov	r5,r2
10010c78:	b809883a 	mov	r4,r23
10010c7c:	102d883a 	mov	r22,r2
10010c80:	00069bc0 	call	100069bc <__mulsi3>
10010c84:	d9800217 	ldw	r6,8(sp)
10010c88:	d8c00017 	ldw	r3,0(sp)
10010c8c:	300c943a 	slli	r6,r6,16
10010c90:	1a3fffcc 	andi	r8,r3,65535
10010c94:	4190b03a 	or	r8,r8,r6
10010c98:	4080042e 	bgeu	r8,r2,10010cac <__umoddi3+0x3cc>
10010c9c:	4551883a 	add	r8,r8,r21
10010ca0:	b0ffffc4 	addi	r3,r22,-1
10010ca4:	45406f2e 	bgeu	r8,r21,10010e64 <__umoddi3+0x584>
10010ca8:	182d883a 	mov	r22,r3
10010cac:	880e943a 	slli	r7,r17,16
10010cb0:	9006d43a 	srli	r3,r18,16
10010cb4:	91bfffcc 	andi	r6,r18,65535
10010cb8:	3dacb03a 	or	r22,r7,r22
10010cbc:	b02ed43a 	srli	r23,r22,16
10010cc0:	b5bfffcc 	andi	r22,r22,65535
10010cc4:	300b883a 	mov	r5,r6
10010cc8:	b009883a 	mov	r4,r22
10010ccc:	40a3c83a 	sub	r17,r8,r2
10010cd0:	d8c00115 	stw	r3,4(sp)
10010cd4:	d9800215 	stw	r6,8(sp)
10010cd8:	00069bc0 	call	100069bc <__mulsi3>
10010cdc:	d9800217 	ldw	r6,8(sp)
10010ce0:	b809883a 	mov	r4,r23
10010ce4:	1039883a 	mov	fp,r2
10010ce8:	300b883a 	mov	r5,r6
10010cec:	00069bc0 	call	100069bc <__mulsi3>
10010cf0:	d8c00117 	ldw	r3,4(sp)
10010cf4:	b809883a 	mov	r4,r23
10010cf8:	d8800215 	stw	r2,8(sp)
10010cfc:	180b883a 	mov	r5,r3
10010d00:	00069bc0 	call	100069bc <__mulsi3>
10010d04:	d8c00117 	ldw	r3,4(sp)
10010d08:	b009883a 	mov	r4,r22
10010d0c:	102f883a 	mov	r23,r2
10010d10:	180b883a 	mov	r5,r3
10010d14:	00069bc0 	call	100069bc <__mulsi3>
10010d18:	d9800217 	ldw	r6,8(sp)
10010d1c:	e006d43a 	srli	r3,fp,16
10010d20:	1185883a 	add	r2,r2,r6
10010d24:	1885883a 	add	r2,r3,r2
10010d28:	1180022e 	bgeu	r2,r6,10010d34 <__umoddi3+0x454>
10010d2c:	00c00074 	movhi	r3,1
10010d30:	b8ef883a 	add	r23,r23,r3
10010d34:	1006d43a 	srli	r3,r2,16
10010d38:	1004943a 	slli	r2,r2,16
10010d3c:	e73fffcc 	andi	fp,fp,65535
10010d40:	1dc7883a 	add	r3,r3,r23
10010d44:	1739883a 	add	fp,r2,fp
10010d48:	88c03a36 	bltu	r17,r3,10010e34 <__umoddi3+0x554>
10010d4c:	88c05126 	beq	r17,r3,10010e94 <__umoddi3+0x5b4>
10010d50:	88c9c83a 	sub	r4,r17,r3
10010d54:	e00f883a 	mov	r7,fp
10010d58:	81cfc83a 	sub	r7,r16,r7
10010d5c:	81c7803a 	cmpltu	r3,r16,r7
10010d60:	20c7c83a 	sub	r3,r4,r3
10010d64:	1cc4983a 	sll	r2,r3,r19
10010d68:	3d0ed83a 	srl	r7,r7,r20
10010d6c:	1d06d83a 	srl	r3,r3,r20
10010d70:	11c4b03a 	or	r2,r2,r7
10010d74:	003f7c06 	br	10010b68 <__alt_data_end+0xf8010b68>
10010d78:	9ca6983a 	sll	r19,r19,r18
10010d7c:	88f8d83a 	srl	fp,r17,r3
10010d80:	80c4d83a 	srl	r2,r16,r3
10010d84:	982cd43a 	srli	r22,r19,16
10010d88:	8ca2983a 	sll	r17,r17,r18
10010d8c:	e009883a 	mov	r4,fp
10010d90:	b00b883a 	mov	r5,r22
10010d94:	146ab03a 	or	r21,r2,r17
10010d98:	00069640 	call	10006964 <__umodsi3>
10010d9c:	b00b883a 	mov	r5,r22
10010da0:	e009883a 	mov	r4,fp
10010da4:	1029883a 	mov	r20,r2
10010da8:	9dffffcc 	andi	r23,r19,65535
10010dac:	00069000 	call	10006900 <__udivsi3>
10010db0:	b809883a 	mov	r4,r23
10010db4:	100b883a 	mov	r5,r2
10010db8:	00069bc0 	call	100069bc <__mulsi3>
10010dbc:	a008943a 	slli	r4,r20,16
10010dc0:	a806d43a 	srli	r3,r21,16
10010dc4:	84a8983a 	sll	r20,r16,r18
10010dc8:	1906b03a 	or	r3,r3,r4
10010dcc:	1880042e 	bgeu	r3,r2,10010de0 <__umoddi3+0x500>
10010dd0:	1cc7883a 	add	r3,r3,r19
10010dd4:	1cc00236 	bltu	r3,r19,10010de0 <__umoddi3+0x500>
10010dd8:	1880012e 	bgeu	r3,r2,10010de0 <__umoddi3+0x500>
10010ddc:	1cc7883a 	add	r3,r3,r19
10010de0:	18a3c83a 	sub	r17,r3,r2
10010de4:	b00b883a 	mov	r5,r22
10010de8:	8809883a 	mov	r4,r17
10010dec:	00069640 	call	10006964 <__umodsi3>
10010df0:	b00b883a 	mov	r5,r22
10010df4:	8809883a 	mov	r4,r17
10010df8:	1021883a 	mov	r16,r2
10010dfc:	00069000 	call	10006900 <__udivsi3>
10010e00:	100b883a 	mov	r5,r2
10010e04:	b809883a 	mov	r4,r23
10010e08:	8020943a 	slli	r16,r16,16
10010e0c:	00069bc0 	call	100069bc <__mulsi3>
10010e10:	a8ffffcc 	andi	r3,r21,65535
10010e14:	1c06b03a 	or	r3,r3,r16
10010e18:	1880042e 	bgeu	r3,r2,10010e2c <__umoddi3+0x54c>
10010e1c:	1cc7883a 	add	r3,r3,r19
10010e20:	1cc00236 	bltu	r3,r19,10010e2c <__umoddi3+0x54c>
10010e24:	1880012e 	bgeu	r3,r2,10010e2c <__umoddi3+0x54c>
10010e28:	1cc7883a 	add	r3,r3,r19
10010e2c:	18a3c83a 	sub	r17,r3,r2
10010e30:	003f2906 	br	10010ad8 <__alt_data_end+0xf8010ad8>
10010e34:	e48fc83a 	sub	r7,fp,r18
10010e38:	1d49c83a 	sub	r4,r3,r21
10010e3c:	e1f9803a 	cmpltu	fp,fp,r7
10010e40:	2739c83a 	sub	fp,r4,fp
10010e44:	8f09c83a 	sub	r4,r17,fp
10010e48:	003fc306 	br	10010d58 <__alt_data_end+0xf8010d58>
10010e4c:	01000604 	movi	r4,24
10010e50:	003ef906 	br	10010a38 <__alt_data_end+0xf8010a38>
10010e54:	00800604 	movi	r2,24
10010e58:	003f1306 	br	10010aa8 <__alt_data_end+0xf8010aa8>
10010e5c:	01000604 	movi	r4,24
10010e60:	003eb606 	br	1001093c <__alt_data_end+0xf801093c>
10010e64:	40bf902e 	bgeu	r8,r2,10010ca8 <__alt_data_end+0xf8010ca8>
10010e68:	b5bfff84 	addi	r22,r22,-2
10010e6c:	4551883a 	add	r8,r8,r21
10010e70:	003f8e06 	br	10010cac <__alt_data_end+0xf8010cac>
10010e74:	18bf762e 	bgeu	r3,r2,10010c50 <__alt_data_end+0xf8010c50>
10010e78:	8c7fff84 	addi	r17,r17,-2
10010e7c:	1d47883a 	add	r3,r3,r21
10010e80:	003f7406 	br	10010c54 <__alt_data_end+0xf8010c54>
10010e84:	1cc7883a 	add	r3,r3,r19
10010e88:	003ecd06 	br	100109c0 <__alt_data_end+0xf80109c0>
10010e8c:	8005883a 	mov	r2,r16
10010e90:	003ef806 	br	10010a74 <__alt_data_end+0xf8010a74>
10010e94:	873fe736 	bltu	r16,fp,10010e34 <__alt_data_end+0xf8010e34>
10010e98:	e00f883a 	mov	r7,fp
10010e9c:	0009883a 	mov	r4,zero
10010ea0:	003fad06 	br	10010d58 <__alt_data_end+0xf8010d58>

10010ea4 <__adddf3>:
10010ea4:	02c00434 	movhi	r11,16
10010ea8:	5affffc4 	addi	r11,r11,-1
10010eac:	2806d7fa 	srli	r3,r5,31
10010eb0:	2ad4703a 	and	r10,r5,r11
10010eb4:	3ad2703a 	and	r9,r7,r11
10010eb8:	3804d53a 	srli	r2,r7,20
10010ebc:	3018d77a 	srli	r12,r6,29
10010ec0:	280ad53a 	srli	r5,r5,20
10010ec4:	501490fa 	slli	r10,r10,3
10010ec8:	2010d77a 	srli	r8,r4,29
10010ecc:	481290fa 	slli	r9,r9,3
10010ed0:	380ed7fa 	srli	r7,r7,31
10010ed4:	defffb04 	addi	sp,sp,-20
10010ed8:	dc800215 	stw	r18,8(sp)
10010edc:	dc400115 	stw	r17,4(sp)
10010ee0:	dc000015 	stw	r16,0(sp)
10010ee4:	dfc00415 	stw	ra,16(sp)
10010ee8:	dcc00315 	stw	r19,12(sp)
10010eec:	1c803fcc 	andi	r18,r3,255
10010ef0:	2c01ffcc 	andi	r16,r5,2047
10010ef4:	5210b03a 	or	r8,r10,r8
10010ef8:	202290fa 	slli	r17,r4,3
10010efc:	1081ffcc 	andi	r2,r2,2047
10010f00:	4b12b03a 	or	r9,r9,r12
10010f04:	300c90fa 	slli	r6,r6,3
10010f08:	91c07526 	beq	r18,r7,100110e0 <__adddf3+0x23c>
10010f0c:	8087c83a 	sub	r3,r16,r2
10010f10:	00c0ab0e 	bge	zero,r3,100111c0 <__adddf3+0x31c>
10010f14:	10002a1e 	bne	r2,zero,10010fc0 <__adddf3+0x11c>
10010f18:	4984b03a 	or	r2,r9,r6
10010f1c:	1000961e 	bne	r2,zero,10011178 <__adddf3+0x2d4>
10010f20:	888001cc 	andi	r2,r17,7
10010f24:	10000726 	beq	r2,zero,10010f44 <__adddf3+0xa0>
10010f28:	888003cc 	andi	r2,r17,15
10010f2c:	00c00104 	movi	r3,4
10010f30:	10c00426 	beq	r2,r3,10010f44 <__adddf3+0xa0>
10010f34:	88c7883a 	add	r3,r17,r3
10010f38:	1c63803a 	cmpltu	r17,r3,r17
10010f3c:	4451883a 	add	r8,r8,r17
10010f40:	1823883a 	mov	r17,r3
10010f44:	4080202c 	andhi	r2,r8,128
10010f48:	10005926 	beq	r2,zero,100110b0 <__adddf3+0x20c>
10010f4c:	84000044 	addi	r16,r16,1
10010f50:	0081ffc4 	movi	r2,2047
10010f54:	8080ba26 	beq	r16,r2,10011240 <__adddf3+0x39c>
10010f58:	00bfe034 	movhi	r2,65408
10010f5c:	10bfffc4 	addi	r2,r2,-1
10010f60:	4090703a 	and	r8,r8,r2
10010f64:	4004977a 	slli	r2,r8,29
10010f68:	4010927a 	slli	r8,r8,9
10010f6c:	8822d0fa 	srli	r17,r17,3
10010f70:	8401ffcc 	andi	r16,r16,2047
10010f74:	4010d33a 	srli	r8,r8,12
10010f78:	9007883a 	mov	r3,r18
10010f7c:	1444b03a 	or	r2,r2,r17
10010f80:	8401ffcc 	andi	r16,r16,2047
10010f84:	8020953a 	slli	r16,r16,20
10010f88:	18c03fcc 	andi	r3,r3,255
10010f8c:	01000434 	movhi	r4,16
10010f90:	213fffc4 	addi	r4,r4,-1
10010f94:	180697fa 	slli	r3,r3,31
10010f98:	4110703a 	and	r8,r8,r4
10010f9c:	4410b03a 	or	r8,r8,r16
10010fa0:	40c6b03a 	or	r3,r8,r3
10010fa4:	dfc00417 	ldw	ra,16(sp)
10010fa8:	dcc00317 	ldw	r19,12(sp)
10010fac:	dc800217 	ldw	r18,8(sp)
10010fb0:	dc400117 	ldw	r17,4(sp)
10010fb4:	dc000017 	ldw	r16,0(sp)
10010fb8:	dec00504 	addi	sp,sp,20
10010fbc:	f800283a 	ret
10010fc0:	0081ffc4 	movi	r2,2047
10010fc4:	80bfd626 	beq	r16,r2,10010f20 <__alt_data_end+0xf8010f20>
10010fc8:	4a402034 	orhi	r9,r9,128
10010fcc:	00800e04 	movi	r2,56
10010fd0:	10c09f16 	blt	r2,r3,10011250 <__adddf3+0x3ac>
10010fd4:	008007c4 	movi	r2,31
10010fd8:	10c0c216 	blt	r2,r3,100112e4 <__adddf3+0x440>
10010fdc:	00800804 	movi	r2,32
10010fe0:	10c5c83a 	sub	r2,r2,r3
10010fe4:	488a983a 	sll	r5,r9,r2
10010fe8:	30c8d83a 	srl	r4,r6,r3
10010fec:	3084983a 	sll	r2,r6,r2
10010ff0:	48c6d83a 	srl	r3,r9,r3
10010ff4:	290cb03a 	or	r6,r5,r4
10010ff8:	1004c03a 	cmpne	r2,r2,zero
10010ffc:	308cb03a 	or	r6,r6,r2
10011000:	898dc83a 	sub	r6,r17,r6
10011004:	89a3803a 	cmpltu	r17,r17,r6
10011008:	40d1c83a 	sub	r8,r8,r3
1001100c:	4451c83a 	sub	r8,r8,r17
10011010:	3023883a 	mov	r17,r6
10011014:	4080202c 	andhi	r2,r8,128
10011018:	10002326 	beq	r2,zero,100110a8 <__adddf3+0x204>
1001101c:	04c02034 	movhi	r19,128
10011020:	9cffffc4 	addi	r19,r19,-1
10011024:	44e6703a 	and	r19,r8,r19
10011028:	98007626 	beq	r19,zero,10011204 <__adddf3+0x360>
1001102c:	9809883a 	mov	r4,r19
10011030:	00136e40 	call	100136e4 <__clzsi2>
10011034:	10fffe04 	addi	r3,r2,-8
10011038:	010007c4 	movi	r4,31
1001103c:	20c07716 	blt	r4,r3,1001121c <__adddf3+0x378>
10011040:	00800804 	movi	r2,32
10011044:	10c5c83a 	sub	r2,r2,r3
10011048:	8884d83a 	srl	r2,r17,r2
1001104c:	98d0983a 	sll	r8,r19,r3
10011050:	88e2983a 	sll	r17,r17,r3
10011054:	1204b03a 	or	r2,r2,r8
10011058:	1c007416 	blt	r3,r16,1001122c <__adddf3+0x388>
1001105c:	1c21c83a 	sub	r16,r3,r16
10011060:	82000044 	addi	r8,r16,1
10011064:	00c007c4 	movi	r3,31
10011068:	1a009116 	blt	r3,r8,100112b0 <__adddf3+0x40c>
1001106c:	00c00804 	movi	r3,32
10011070:	1a07c83a 	sub	r3,r3,r8
10011074:	8a08d83a 	srl	r4,r17,r8
10011078:	88e2983a 	sll	r17,r17,r3
1001107c:	10c6983a 	sll	r3,r2,r3
10011080:	1210d83a 	srl	r8,r2,r8
10011084:	8804c03a 	cmpne	r2,r17,zero
10011088:	1906b03a 	or	r3,r3,r4
1001108c:	18a2b03a 	or	r17,r3,r2
10011090:	0021883a 	mov	r16,zero
10011094:	003fa206 	br	10010f20 <__alt_data_end+0xf8010f20>
10011098:	1890b03a 	or	r8,r3,r2
1001109c:	40017d26 	beq	r8,zero,10011694 <__adddf3+0x7f0>
100110a0:	1011883a 	mov	r8,r2
100110a4:	1823883a 	mov	r17,r3
100110a8:	888001cc 	andi	r2,r17,7
100110ac:	103f9e1e 	bne	r2,zero,10010f28 <__alt_data_end+0xf8010f28>
100110b0:	4004977a 	slli	r2,r8,29
100110b4:	8822d0fa 	srli	r17,r17,3
100110b8:	4010d0fa 	srli	r8,r8,3
100110bc:	9007883a 	mov	r3,r18
100110c0:	1444b03a 	or	r2,r2,r17
100110c4:	0101ffc4 	movi	r4,2047
100110c8:	81002426 	beq	r16,r4,1001115c <__adddf3+0x2b8>
100110cc:	8120703a 	and	r16,r16,r4
100110d0:	01000434 	movhi	r4,16
100110d4:	213fffc4 	addi	r4,r4,-1
100110d8:	4110703a 	and	r8,r8,r4
100110dc:	003fa806 	br	10010f80 <__alt_data_end+0xf8010f80>
100110e0:	8089c83a 	sub	r4,r16,r2
100110e4:	01005e0e 	bge	zero,r4,10011260 <__adddf3+0x3bc>
100110e8:	10002b26 	beq	r2,zero,10011198 <__adddf3+0x2f4>
100110ec:	0081ffc4 	movi	r2,2047
100110f0:	80bf8b26 	beq	r16,r2,10010f20 <__alt_data_end+0xf8010f20>
100110f4:	4a402034 	orhi	r9,r9,128
100110f8:	00800e04 	movi	r2,56
100110fc:	1100a40e 	bge	r2,r4,10011390 <__adddf3+0x4ec>
10011100:	498cb03a 	or	r6,r9,r6
10011104:	300ac03a 	cmpne	r5,r6,zero
10011108:	0013883a 	mov	r9,zero
1001110c:	2c4b883a 	add	r5,r5,r17
10011110:	2c63803a 	cmpltu	r17,r5,r17
10011114:	4a11883a 	add	r8,r9,r8
10011118:	8a11883a 	add	r8,r17,r8
1001111c:	2823883a 	mov	r17,r5
10011120:	4080202c 	andhi	r2,r8,128
10011124:	103fe026 	beq	r2,zero,100110a8 <__alt_data_end+0xf80110a8>
10011128:	84000044 	addi	r16,r16,1
1001112c:	0081ffc4 	movi	r2,2047
10011130:	8080d226 	beq	r16,r2,1001147c <__adddf3+0x5d8>
10011134:	00bfe034 	movhi	r2,65408
10011138:	10bfffc4 	addi	r2,r2,-1
1001113c:	4090703a 	and	r8,r8,r2
10011140:	880ad07a 	srli	r5,r17,1
10011144:	400897fa 	slli	r4,r8,31
10011148:	88c0004c 	andi	r3,r17,1
1001114c:	28e2b03a 	or	r17,r5,r3
10011150:	4010d07a 	srli	r8,r8,1
10011154:	2462b03a 	or	r17,r4,r17
10011158:	003f7106 	br	10010f20 <__alt_data_end+0xf8010f20>
1001115c:	4088b03a 	or	r4,r8,r2
10011160:	20014526 	beq	r4,zero,10011678 <__adddf3+0x7d4>
10011164:	01000434 	movhi	r4,16
10011168:	42000234 	orhi	r8,r8,8
1001116c:	213fffc4 	addi	r4,r4,-1
10011170:	4110703a 	and	r8,r8,r4
10011174:	003f8206 	br	10010f80 <__alt_data_end+0xf8010f80>
10011178:	18ffffc4 	addi	r3,r3,-1
1001117c:	1800491e 	bne	r3,zero,100112a4 <__adddf3+0x400>
10011180:	898bc83a 	sub	r5,r17,r6
10011184:	8963803a 	cmpltu	r17,r17,r5
10011188:	4251c83a 	sub	r8,r8,r9
1001118c:	4451c83a 	sub	r8,r8,r17
10011190:	2823883a 	mov	r17,r5
10011194:	003f9f06 	br	10011014 <__alt_data_end+0xf8011014>
10011198:	4984b03a 	or	r2,r9,r6
1001119c:	103f6026 	beq	r2,zero,10010f20 <__alt_data_end+0xf8010f20>
100111a0:	213fffc4 	addi	r4,r4,-1
100111a4:	2000931e 	bne	r4,zero,100113f4 <__adddf3+0x550>
100111a8:	898d883a 	add	r6,r17,r6
100111ac:	3463803a 	cmpltu	r17,r6,r17
100111b0:	4251883a 	add	r8,r8,r9
100111b4:	8a11883a 	add	r8,r17,r8
100111b8:	3023883a 	mov	r17,r6
100111bc:	003fd806 	br	10011120 <__alt_data_end+0xf8011120>
100111c0:	1800541e 	bne	r3,zero,10011314 <__adddf3+0x470>
100111c4:	80800044 	addi	r2,r16,1
100111c8:	1081ffcc 	andi	r2,r2,2047
100111cc:	00c00044 	movi	r3,1
100111d0:	1880a00e 	bge	r3,r2,10011454 <__adddf3+0x5b0>
100111d4:	8989c83a 	sub	r4,r17,r6
100111d8:	8905803a 	cmpltu	r2,r17,r4
100111dc:	4267c83a 	sub	r19,r8,r9
100111e0:	98a7c83a 	sub	r19,r19,r2
100111e4:	9880202c 	andhi	r2,r19,128
100111e8:	10006326 	beq	r2,zero,10011378 <__adddf3+0x4d4>
100111ec:	3463c83a 	sub	r17,r6,r17
100111f0:	4a07c83a 	sub	r3,r9,r8
100111f4:	344d803a 	cmpltu	r6,r6,r17
100111f8:	19a7c83a 	sub	r19,r3,r6
100111fc:	3825883a 	mov	r18,r7
10011200:	983f8a1e 	bne	r19,zero,1001102c <__alt_data_end+0xf801102c>
10011204:	8809883a 	mov	r4,r17
10011208:	00136e40 	call	100136e4 <__clzsi2>
1001120c:	10800804 	addi	r2,r2,32
10011210:	10fffe04 	addi	r3,r2,-8
10011214:	010007c4 	movi	r4,31
10011218:	20ff890e 	bge	r4,r3,10011040 <__alt_data_end+0xf8011040>
1001121c:	10bff604 	addi	r2,r2,-40
10011220:	8884983a 	sll	r2,r17,r2
10011224:	0023883a 	mov	r17,zero
10011228:	1c3f8c0e 	bge	r3,r16,1001105c <__alt_data_end+0xf801105c>
1001122c:	023fe034 	movhi	r8,65408
10011230:	423fffc4 	addi	r8,r8,-1
10011234:	80e1c83a 	sub	r16,r16,r3
10011238:	1210703a 	and	r8,r2,r8
1001123c:	003f3806 	br	10010f20 <__alt_data_end+0xf8010f20>
10011240:	9007883a 	mov	r3,r18
10011244:	0011883a 	mov	r8,zero
10011248:	0005883a 	mov	r2,zero
1001124c:	003f4c06 	br	10010f80 <__alt_data_end+0xf8010f80>
10011250:	498cb03a 	or	r6,r9,r6
10011254:	300cc03a 	cmpne	r6,r6,zero
10011258:	0007883a 	mov	r3,zero
1001125c:	003f6806 	br	10011000 <__alt_data_end+0xf8011000>
10011260:	20009c1e 	bne	r4,zero,100114d4 <__adddf3+0x630>
10011264:	80800044 	addi	r2,r16,1
10011268:	1141ffcc 	andi	r5,r2,2047
1001126c:	01000044 	movi	r4,1
10011270:	2140670e 	bge	r4,r5,10011410 <__adddf3+0x56c>
10011274:	0101ffc4 	movi	r4,2047
10011278:	11007f26 	beq	r2,r4,10011478 <__adddf3+0x5d4>
1001127c:	898d883a 	add	r6,r17,r6
10011280:	4247883a 	add	r3,r8,r9
10011284:	3451803a 	cmpltu	r8,r6,r17
10011288:	40d1883a 	add	r8,r8,r3
1001128c:	402297fa 	slli	r17,r8,31
10011290:	300cd07a 	srli	r6,r6,1
10011294:	4010d07a 	srli	r8,r8,1
10011298:	1021883a 	mov	r16,r2
1001129c:	89a2b03a 	or	r17,r17,r6
100112a0:	003f1f06 	br	10010f20 <__alt_data_end+0xf8010f20>
100112a4:	0081ffc4 	movi	r2,2047
100112a8:	80bf481e 	bne	r16,r2,10010fcc <__alt_data_end+0xf8010fcc>
100112ac:	003f1c06 	br	10010f20 <__alt_data_end+0xf8010f20>
100112b0:	843ff844 	addi	r16,r16,-31
100112b4:	01000804 	movi	r4,32
100112b8:	1406d83a 	srl	r3,r2,r16
100112bc:	41005026 	beq	r8,r4,10011400 <__adddf3+0x55c>
100112c0:	01001004 	movi	r4,64
100112c4:	2211c83a 	sub	r8,r4,r8
100112c8:	1204983a 	sll	r2,r2,r8
100112cc:	88a2b03a 	or	r17,r17,r2
100112d0:	8822c03a 	cmpne	r17,r17,zero
100112d4:	1c62b03a 	or	r17,r3,r17
100112d8:	0011883a 	mov	r8,zero
100112dc:	0021883a 	mov	r16,zero
100112e0:	003f7106 	br	100110a8 <__alt_data_end+0xf80110a8>
100112e4:	193ff804 	addi	r4,r3,-32
100112e8:	00800804 	movi	r2,32
100112ec:	4908d83a 	srl	r4,r9,r4
100112f0:	18804526 	beq	r3,r2,10011408 <__adddf3+0x564>
100112f4:	00801004 	movi	r2,64
100112f8:	10c5c83a 	sub	r2,r2,r3
100112fc:	4886983a 	sll	r3,r9,r2
10011300:	198cb03a 	or	r6,r3,r6
10011304:	300cc03a 	cmpne	r6,r6,zero
10011308:	218cb03a 	or	r6,r4,r6
1001130c:	0007883a 	mov	r3,zero
10011310:	003f3b06 	br	10011000 <__alt_data_end+0xf8011000>
10011314:	80002a26 	beq	r16,zero,100113c0 <__adddf3+0x51c>
10011318:	0101ffc4 	movi	r4,2047
1001131c:	11006826 	beq	r2,r4,100114c0 <__adddf3+0x61c>
10011320:	00c7c83a 	sub	r3,zero,r3
10011324:	42002034 	orhi	r8,r8,128
10011328:	01000e04 	movi	r4,56
1001132c:	20c07c16 	blt	r4,r3,10011520 <__adddf3+0x67c>
10011330:	010007c4 	movi	r4,31
10011334:	20c0da16 	blt	r4,r3,100116a0 <__adddf3+0x7fc>
10011338:	01000804 	movi	r4,32
1001133c:	20c9c83a 	sub	r4,r4,r3
10011340:	4114983a 	sll	r10,r8,r4
10011344:	88cad83a 	srl	r5,r17,r3
10011348:	8908983a 	sll	r4,r17,r4
1001134c:	40c6d83a 	srl	r3,r8,r3
10011350:	5162b03a 	or	r17,r10,r5
10011354:	2008c03a 	cmpne	r4,r4,zero
10011358:	8922b03a 	or	r17,r17,r4
1001135c:	3463c83a 	sub	r17,r6,r17
10011360:	48c7c83a 	sub	r3,r9,r3
10011364:	344d803a 	cmpltu	r6,r6,r17
10011368:	1991c83a 	sub	r8,r3,r6
1001136c:	1021883a 	mov	r16,r2
10011370:	3825883a 	mov	r18,r7
10011374:	003f2706 	br	10011014 <__alt_data_end+0xf8011014>
10011378:	24d0b03a 	or	r8,r4,r19
1001137c:	40001b1e 	bne	r8,zero,100113ec <__adddf3+0x548>
10011380:	0005883a 	mov	r2,zero
10011384:	0007883a 	mov	r3,zero
10011388:	0021883a 	mov	r16,zero
1001138c:	003f4d06 	br	100110c4 <__alt_data_end+0xf80110c4>
10011390:	008007c4 	movi	r2,31
10011394:	11003c16 	blt	r2,r4,10011488 <__adddf3+0x5e4>
10011398:	00800804 	movi	r2,32
1001139c:	1105c83a 	sub	r2,r2,r4
100113a0:	488e983a 	sll	r7,r9,r2
100113a4:	310ad83a 	srl	r5,r6,r4
100113a8:	3084983a 	sll	r2,r6,r2
100113ac:	4912d83a 	srl	r9,r9,r4
100113b0:	394ab03a 	or	r5,r7,r5
100113b4:	1004c03a 	cmpne	r2,r2,zero
100113b8:	288ab03a 	or	r5,r5,r2
100113bc:	003f5306 	br	1001110c <__alt_data_end+0xf801110c>
100113c0:	4448b03a 	or	r4,r8,r17
100113c4:	20003e26 	beq	r4,zero,100114c0 <__adddf3+0x61c>
100113c8:	00c6303a 	nor	r3,zero,r3
100113cc:	18003a1e 	bne	r3,zero,100114b8 <__adddf3+0x614>
100113d0:	3463c83a 	sub	r17,r6,r17
100113d4:	4a07c83a 	sub	r3,r9,r8
100113d8:	344d803a 	cmpltu	r6,r6,r17
100113dc:	1991c83a 	sub	r8,r3,r6
100113e0:	1021883a 	mov	r16,r2
100113e4:	3825883a 	mov	r18,r7
100113e8:	003f0a06 	br	10011014 <__alt_data_end+0xf8011014>
100113ec:	2023883a 	mov	r17,r4
100113f0:	003f0d06 	br	10011028 <__alt_data_end+0xf8011028>
100113f4:	0081ffc4 	movi	r2,2047
100113f8:	80bf3f1e 	bne	r16,r2,100110f8 <__alt_data_end+0xf80110f8>
100113fc:	003ec806 	br	10010f20 <__alt_data_end+0xf8010f20>
10011400:	0005883a 	mov	r2,zero
10011404:	003fb106 	br	100112cc <__alt_data_end+0xf80112cc>
10011408:	0007883a 	mov	r3,zero
1001140c:	003fbc06 	br	10011300 <__alt_data_end+0xf8011300>
10011410:	4444b03a 	or	r2,r8,r17
10011414:	8000871e 	bne	r16,zero,10011634 <__adddf3+0x790>
10011418:	1000ba26 	beq	r2,zero,10011704 <__adddf3+0x860>
1001141c:	4984b03a 	or	r2,r9,r6
10011420:	103ebf26 	beq	r2,zero,10010f20 <__alt_data_end+0xf8010f20>
10011424:	8985883a 	add	r2,r17,r6
10011428:	4247883a 	add	r3,r8,r9
1001142c:	1451803a 	cmpltu	r8,r2,r17
10011430:	40d1883a 	add	r8,r8,r3
10011434:	40c0202c 	andhi	r3,r8,128
10011438:	1023883a 	mov	r17,r2
1001143c:	183f1a26 	beq	r3,zero,100110a8 <__alt_data_end+0xf80110a8>
10011440:	00bfe034 	movhi	r2,65408
10011444:	10bfffc4 	addi	r2,r2,-1
10011448:	2021883a 	mov	r16,r4
1001144c:	4090703a 	and	r8,r8,r2
10011450:	003eb306 	br	10010f20 <__alt_data_end+0xf8010f20>
10011454:	4444b03a 	or	r2,r8,r17
10011458:	8000291e 	bne	r16,zero,10011500 <__adddf3+0x65c>
1001145c:	10004b1e 	bne	r2,zero,1001158c <__adddf3+0x6e8>
10011460:	4990b03a 	or	r8,r9,r6
10011464:	40008b26 	beq	r8,zero,10011694 <__adddf3+0x7f0>
10011468:	4811883a 	mov	r8,r9
1001146c:	3023883a 	mov	r17,r6
10011470:	3825883a 	mov	r18,r7
10011474:	003eaa06 	br	10010f20 <__alt_data_end+0xf8010f20>
10011478:	1021883a 	mov	r16,r2
1001147c:	0011883a 	mov	r8,zero
10011480:	0005883a 	mov	r2,zero
10011484:	003f0f06 	br	100110c4 <__alt_data_end+0xf80110c4>
10011488:	217ff804 	addi	r5,r4,-32
1001148c:	00800804 	movi	r2,32
10011490:	494ad83a 	srl	r5,r9,r5
10011494:	20807d26 	beq	r4,r2,1001168c <__adddf3+0x7e8>
10011498:	00801004 	movi	r2,64
1001149c:	1109c83a 	sub	r4,r2,r4
100114a0:	4912983a 	sll	r9,r9,r4
100114a4:	498cb03a 	or	r6,r9,r6
100114a8:	300cc03a 	cmpne	r6,r6,zero
100114ac:	298ab03a 	or	r5,r5,r6
100114b0:	0013883a 	mov	r9,zero
100114b4:	003f1506 	br	1001110c <__alt_data_end+0xf801110c>
100114b8:	0101ffc4 	movi	r4,2047
100114bc:	113f9a1e 	bne	r2,r4,10011328 <__alt_data_end+0xf8011328>
100114c0:	4811883a 	mov	r8,r9
100114c4:	3023883a 	mov	r17,r6
100114c8:	1021883a 	mov	r16,r2
100114cc:	3825883a 	mov	r18,r7
100114d0:	003e9306 	br	10010f20 <__alt_data_end+0xf8010f20>
100114d4:	8000161e 	bne	r16,zero,10011530 <__adddf3+0x68c>
100114d8:	444ab03a 	or	r5,r8,r17
100114dc:	28005126 	beq	r5,zero,10011624 <__adddf3+0x780>
100114e0:	0108303a 	nor	r4,zero,r4
100114e4:	20004d1e 	bne	r4,zero,1001161c <__adddf3+0x778>
100114e8:	89a3883a 	add	r17,r17,r6
100114ec:	4253883a 	add	r9,r8,r9
100114f0:	898d803a 	cmpltu	r6,r17,r6
100114f4:	3251883a 	add	r8,r6,r9
100114f8:	1021883a 	mov	r16,r2
100114fc:	003f0806 	br	10011120 <__alt_data_end+0xf8011120>
10011500:	1000301e 	bne	r2,zero,100115c4 <__adddf3+0x720>
10011504:	4984b03a 	or	r2,r9,r6
10011508:	10007126 	beq	r2,zero,100116d0 <__adddf3+0x82c>
1001150c:	4811883a 	mov	r8,r9
10011510:	3023883a 	mov	r17,r6
10011514:	3825883a 	mov	r18,r7
10011518:	0401ffc4 	movi	r16,2047
1001151c:	003e8006 	br	10010f20 <__alt_data_end+0xf8010f20>
10011520:	4462b03a 	or	r17,r8,r17
10011524:	8822c03a 	cmpne	r17,r17,zero
10011528:	0007883a 	mov	r3,zero
1001152c:	003f8b06 	br	1001135c <__alt_data_end+0xf801135c>
10011530:	0141ffc4 	movi	r5,2047
10011534:	11403b26 	beq	r2,r5,10011624 <__adddf3+0x780>
10011538:	0109c83a 	sub	r4,zero,r4
1001153c:	42002034 	orhi	r8,r8,128
10011540:	01400e04 	movi	r5,56
10011544:	29006716 	blt	r5,r4,100116e4 <__adddf3+0x840>
10011548:	014007c4 	movi	r5,31
1001154c:	29007016 	blt	r5,r4,10011710 <__adddf3+0x86c>
10011550:	01400804 	movi	r5,32
10011554:	290bc83a 	sub	r5,r5,r4
10011558:	4154983a 	sll	r10,r8,r5
1001155c:	890ed83a 	srl	r7,r17,r4
10011560:	894a983a 	sll	r5,r17,r5
10011564:	4108d83a 	srl	r4,r8,r4
10011568:	51e2b03a 	or	r17,r10,r7
1001156c:	280ac03a 	cmpne	r5,r5,zero
10011570:	8962b03a 	or	r17,r17,r5
10011574:	89a3883a 	add	r17,r17,r6
10011578:	2253883a 	add	r9,r4,r9
1001157c:	898d803a 	cmpltu	r6,r17,r6
10011580:	3251883a 	add	r8,r6,r9
10011584:	1021883a 	mov	r16,r2
10011588:	003ee506 	br	10011120 <__alt_data_end+0xf8011120>
1001158c:	4984b03a 	or	r2,r9,r6
10011590:	103e6326 	beq	r2,zero,10010f20 <__alt_data_end+0xf8010f20>
10011594:	8987c83a 	sub	r3,r17,r6
10011598:	88c9803a 	cmpltu	r4,r17,r3
1001159c:	4245c83a 	sub	r2,r8,r9
100115a0:	1105c83a 	sub	r2,r2,r4
100115a4:	1100202c 	andhi	r4,r2,128
100115a8:	203ebb26 	beq	r4,zero,10011098 <__alt_data_end+0xf8011098>
100115ac:	3463c83a 	sub	r17,r6,r17
100115b0:	4a07c83a 	sub	r3,r9,r8
100115b4:	344d803a 	cmpltu	r6,r6,r17
100115b8:	1991c83a 	sub	r8,r3,r6
100115bc:	3825883a 	mov	r18,r7
100115c0:	003e5706 	br	10010f20 <__alt_data_end+0xf8010f20>
100115c4:	4984b03a 	or	r2,r9,r6
100115c8:	10002e26 	beq	r2,zero,10011684 <__adddf3+0x7e0>
100115cc:	4004d0fa 	srli	r2,r8,3
100115d0:	8822d0fa 	srli	r17,r17,3
100115d4:	4010977a 	slli	r8,r8,29
100115d8:	10c0022c 	andhi	r3,r2,8
100115dc:	4462b03a 	or	r17,r8,r17
100115e0:	18000826 	beq	r3,zero,10011604 <__adddf3+0x760>
100115e4:	4808d0fa 	srli	r4,r9,3
100115e8:	20c0022c 	andhi	r3,r4,8
100115ec:	1800051e 	bne	r3,zero,10011604 <__adddf3+0x760>
100115f0:	300cd0fa 	srli	r6,r6,3
100115f4:	4806977a 	slli	r3,r9,29
100115f8:	2005883a 	mov	r2,r4
100115fc:	3825883a 	mov	r18,r7
10011600:	19a2b03a 	or	r17,r3,r6
10011604:	8810d77a 	srli	r8,r17,29
10011608:	100490fa 	slli	r2,r2,3
1001160c:	882290fa 	slli	r17,r17,3
10011610:	0401ffc4 	movi	r16,2047
10011614:	4090b03a 	or	r8,r8,r2
10011618:	003e4106 	br	10010f20 <__alt_data_end+0xf8010f20>
1001161c:	0141ffc4 	movi	r5,2047
10011620:	117fc71e 	bne	r2,r5,10011540 <__alt_data_end+0xf8011540>
10011624:	4811883a 	mov	r8,r9
10011628:	3023883a 	mov	r17,r6
1001162c:	1021883a 	mov	r16,r2
10011630:	003e3b06 	br	10010f20 <__alt_data_end+0xf8010f20>
10011634:	10002f26 	beq	r2,zero,100116f4 <__adddf3+0x850>
10011638:	4984b03a 	or	r2,r9,r6
1001163c:	10001126 	beq	r2,zero,10011684 <__adddf3+0x7e0>
10011640:	4004d0fa 	srli	r2,r8,3
10011644:	8822d0fa 	srli	r17,r17,3
10011648:	4010977a 	slli	r8,r8,29
1001164c:	10c0022c 	andhi	r3,r2,8
10011650:	4462b03a 	or	r17,r8,r17
10011654:	183feb26 	beq	r3,zero,10011604 <__alt_data_end+0xf8011604>
10011658:	4808d0fa 	srli	r4,r9,3
1001165c:	20c0022c 	andhi	r3,r4,8
10011660:	183fe81e 	bne	r3,zero,10011604 <__alt_data_end+0xf8011604>
10011664:	300cd0fa 	srli	r6,r6,3
10011668:	4806977a 	slli	r3,r9,29
1001166c:	2005883a 	mov	r2,r4
10011670:	19a2b03a 	or	r17,r3,r6
10011674:	003fe306 	br	10011604 <__alt_data_end+0xf8011604>
10011678:	0011883a 	mov	r8,zero
1001167c:	0005883a 	mov	r2,zero
10011680:	003e3f06 	br	10010f80 <__alt_data_end+0xf8010f80>
10011684:	0401ffc4 	movi	r16,2047
10011688:	003e2506 	br	10010f20 <__alt_data_end+0xf8010f20>
1001168c:	0013883a 	mov	r9,zero
10011690:	003f8406 	br	100114a4 <__alt_data_end+0xf80114a4>
10011694:	0005883a 	mov	r2,zero
10011698:	0007883a 	mov	r3,zero
1001169c:	003e8906 	br	100110c4 <__alt_data_end+0xf80110c4>
100116a0:	197ff804 	addi	r5,r3,-32
100116a4:	01000804 	movi	r4,32
100116a8:	414ad83a 	srl	r5,r8,r5
100116ac:	19002426 	beq	r3,r4,10011740 <__adddf3+0x89c>
100116b0:	01001004 	movi	r4,64
100116b4:	20c7c83a 	sub	r3,r4,r3
100116b8:	40c6983a 	sll	r3,r8,r3
100116bc:	1c46b03a 	or	r3,r3,r17
100116c0:	1806c03a 	cmpne	r3,r3,zero
100116c4:	28e2b03a 	or	r17,r5,r3
100116c8:	0007883a 	mov	r3,zero
100116cc:	003f2306 	br	1001135c <__alt_data_end+0xf801135c>
100116d0:	0007883a 	mov	r3,zero
100116d4:	5811883a 	mov	r8,r11
100116d8:	00bfffc4 	movi	r2,-1
100116dc:	0401ffc4 	movi	r16,2047
100116e0:	003e7806 	br	100110c4 <__alt_data_end+0xf80110c4>
100116e4:	4462b03a 	or	r17,r8,r17
100116e8:	8822c03a 	cmpne	r17,r17,zero
100116ec:	0009883a 	mov	r4,zero
100116f0:	003fa006 	br	10011574 <__alt_data_end+0xf8011574>
100116f4:	4811883a 	mov	r8,r9
100116f8:	3023883a 	mov	r17,r6
100116fc:	0401ffc4 	movi	r16,2047
10011700:	003e0706 	br	10010f20 <__alt_data_end+0xf8010f20>
10011704:	4811883a 	mov	r8,r9
10011708:	3023883a 	mov	r17,r6
1001170c:	003e0406 	br	10010f20 <__alt_data_end+0xf8010f20>
10011710:	21fff804 	addi	r7,r4,-32
10011714:	01400804 	movi	r5,32
10011718:	41ced83a 	srl	r7,r8,r7
1001171c:	21400a26 	beq	r4,r5,10011748 <__adddf3+0x8a4>
10011720:	01401004 	movi	r5,64
10011724:	2909c83a 	sub	r4,r5,r4
10011728:	4108983a 	sll	r4,r8,r4
1001172c:	2448b03a 	or	r4,r4,r17
10011730:	2008c03a 	cmpne	r4,r4,zero
10011734:	3922b03a 	or	r17,r7,r4
10011738:	0009883a 	mov	r4,zero
1001173c:	003f8d06 	br	10011574 <__alt_data_end+0xf8011574>
10011740:	0007883a 	mov	r3,zero
10011744:	003fdd06 	br	100116bc <__alt_data_end+0xf80116bc>
10011748:	0009883a 	mov	r4,zero
1001174c:	003ff706 	br	1001172c <__alt_data_end+0xf801172c>

10011750 <__divdf3>:
10011750:	defff004 	addi	sp,sp,-64
10011754:	dc800815 	stw	r18,32(sp)
10011758:	2824d53a 	srli	r18,r5,20
1001175c:	dd800c15 	stw	r22,48(sp)
10011760:	282cd7fa 	srli	r22,r5,31
10011764:	dc000615 	stw	r16,24(sp)
10011768:	04000434 	movhi	r16,16
1001176c:	843fffc4 	addi	r16,r16,-1
10011770:	dfc00f15 	stw	ra,60(sp)
10011774:	df000e15 	stw	fp,56(sp)
10011778:	ddc00d15 	stw	r23,52(sp)
1001177c:	dd400b15 	stw	r21,44(sp)
10011780:	dd000a15 	stw	r20,40(sp)
10011784:	dcc00915 	stw	r19,36(sp)
10011788:	dc400715 	stw	r17,28(sp)
1001178c:	9481ffcc 	andi	r18,r18,2047
10011790:	2c20703a 	and	r16,r5,r16
10011794:	b2003fcc 	andi	r8,r22,255
10011798:	90006126 	beq	r18,zero,10011920 <__divdf3+0x1d0>
1001179c:	0081ffc4 	movi	r2,2047
100117a0:	202b883a 	mov	r21,r4
100117a4:	90803726 	beq	r18,r2,10011884 <__divdf3+0x134>
100117a8:	80800434 	orhi	r2,r16,16
100117ac:	100490fa 	slli	r2,r2,3
100117b0:	2020d77a 	srli	r16,r4,29
100117b4:	202a90fa 	slli	r21,r4,3
100117b8:	94bf0044 	addi	r18,r18,-1023
100117bc:	80a0b03a 	or	r16,r16,r2
100117c0:	0013883a 	mov	r9,zero
100117c4:	000b883a 	mov	r5,zero
100117c8:	3806d53a 	srli	r3,r7,20
100117cc:	382ed7fa 	srli	r23,r7,31
100117d0:	04400434 	movhi	r17,16
100117d4:	8c7fffc4 	addi	r17,r17,-1
100117d8:	18c1ffcc 	andi	r3,r3,2047
100117dc:	3029883a 	mov	r20,r6
100117e0:	3c62703a 	and	r17,r7,r17
100117e4:	bf003fcc 	andi	fp,r23,255
100117e8:	18006e26 	beq	r3,zero,100119a4 <__divdf3+0x254>
100117ec:	0081ffc4 	movi	r2,2047
100117f0:	18806626 	beq	r3,r2,1001198c <__divdf3+0x23c>
100117f4:	88800434 	orhi	r2,r17,16
100117f8:	100490fa 	slli	r2,r2,3
100117fc:	3022d77a 	srli	r17,r6,29
10011800:	302890fa 	slli	r20,r6,3
10011804:	18ff0044 	addi	r3,r3,-1023
10011808:	88a2b03a 	or	r17,r17,r2
1001180c:	000f883a 	mov	r7,zero
10011810:	b5e6f03a 	xor	r19,r22,r23
10011814:	3a4cb03a 	or	r6,r7,r9
10011818:	008003c4 	movi	r2,15
1001181c:	9809883a 	mov	r4,r19
10011820:	90c7c83a 	sub	r3,r18,r3
10011824:	9cc03fcc 	andi	r19,r19,255
10011828:	11809636 	bltu	r2,r6,10011a84 <__divdf3+0x334>
1001182c:	300c90ba 	slli	r6,r6,2
10011830:	00840074 	movhi	r2,4097
10011834:	10861104 	addi	r2,r2,6212
10011838:	308d883a 	add	r6,r6,r2
1001183c:	30800017 	ldw	r2,0(r6)
10011840:	1000683a 	jmp	r2
10011844:	10011a84 	addi	zero,r2,1130
10011848:	100118bc 	xorhi	zero,r2,1122
1001184c:	10011a74 	orhi	zero,r2,1129
10011850:	100118b0 	cmpltui	zero,r2,1122
10011854:	10011a74 	orhi	zero,r2,1129
10011858:	10011a48 	cmpgei	zero,r2,1129
1001185c:	10011a74 	orhi	zero,r2,1129
10011860:	100118b0 	cmpltui	zero,r2,1122
10011864:	100118bc 	xorhi	zero,r2,1122
10011868:	100118bc 	xorhi	zero,r2,1122
1001186c:	10011a48 	cmpgei	zero,r2,1129
10011870:	100118b0 	cmpltui	zero,r2,1122
10011874:	100118a0 	cmpeqi	zero,r2,1122
10011878:	100118a0 	cmpeqi	zero,r2,1122
1001187c:	100118a0 	cmpeqi	zero,r2,1122
10011880:	10011e0c 	andi	zero,r2,1144
10011884:	2404b03a 	or	r2,r4,r16
10011888:	10006c1e 	bne	r2,zero,10011a3c <__divdf3+0x2ec>
1001188c:	02400204 	movi	r9,8
10011890:	0021883a 	mov	r16,zero
10011894:	002b883a 	mov	r21,zero
10011898:	01400084 	movi	r5,2
1001189c:	003fca06 	br	100117c8 <__alt_data_end+0xf80117c8>
100118a0:	8023883a 	mov	r17,r16
100118a4:	a829883a 	mov	r20,r21
100118a8:	4039883a 	mov	fp,r8
100118ac:	280f883a 	mov	r7,r5
100118b0:	00800084 	movi	r2,2
100118b4:	3881601e 	bne	r7,r2,10011e38 <__divdf3+0x6e8>
100118b8:	e027883a 	mov	r19,fp
100118bc:	9900004c 	andi	r4,r19,1
100118c0:	0081ffc4 	movi	r2,2047
100118c4:	0021883a 	mov	r16,zero
100118c8:	002b883a 	mov	r21,zero
100118cc:	1004953a 	slli	r2,r2,20
100118d0:	20c03fcc 	andi	r3,r4,255
100118d4:	01400434 	movhi	r5,16
100118d8:	297fffc4 	addi	r5,r5,-1
100118dc:	180697fa 	slli	r3,r3,31
100118e0:	8160703a 	and	r16,r16,r5
100118e4:	80a0b03a 	or	r16,r16,r2
100118e8:	80c6b03a 	or	r3,r16,r3
100118ec:	a805883a 	mov	r2,r21
100118f0:	dfc00f17 	ldw	ra,60(sp)
100118f4:	df000e17 	ldw	fp,56(sp)
100118f8:	ddc00d17 	ldw	r23,52(sp)
100118fc:	dd800c17 	ldw	r22,48(sp)
10011900:	dd400b17 	ldw	r21,44(sp)
10011904:	dd000a17 	ldw	r20,40(sp)
10011908:	dcc00917 	ldw	r19,36(sp)
1001190c:	dc800817 	ldw	r18,32(sp)
10011910:	dc400717 	ldw	r17,28(sp)
10011914:	dc000617 	ldw	r16,24(sp)
10011918:	dec01004 	addi	sp,sp,64
1001191c:	f800283a 	ret
10011920:	2404b03a 	or	r2,r4,r16
10011924:	2023883a 	mov	r17,r4
10011928:	10003f26 	beq	r2,zero,10011a28 <__divdf3+0x2d8>
1001192c:	80015e26 	beq	r16,zero,10011ea8 <__divdf3+0x758>
10011930:	8009883a 	mov	r4,r16
10011934:	d9800215 	stw	r6,8(sp)
10011938:	d9c00515 	stw	r7,20(sp)
1001193c:	da000415 	stw	r8,16(sp)
10011940:	00136e40 	call	100136e4 <__clzsi2>
10011944:	d9800217 	ldw	r6,8(sp)
10011948:	d9c00517 	ldw	r7,20(sp)
1001194c:	da000417 	ldw	r8,16(sp)
10011950:	113ffd44 	addi	r4,r2,-11
10011954:	00c00704 	movi	r3,28
10011958:	19014f16 	blt	r3,r4,10011e98 <__divdf3+0x748>
1001195c:	00c00744 	movi	r3,29
10011960:	157ffe04 	addi	r21,r2,-8
10011964:	1907c83a 	sub	r3,r3,r4
10011968:	8560983a 	sll	r16,r16,r21
1001196c:	88c6d83a 	srl	r3,r17,r3
10011970:	8d6a983a 	sll	r21,r17,r21
10011974:	1c20b03a 	or	r16,r3,r16
10011978:	1080fcc4 	addi	r2,r2,1011
1001197c:	00a5c83a 	sub	r18,zero,r2
10011980:	0013883a 	mov	r9,zero
10011984:	000b883a 	mov	r5,zero
10011988:	003f8f06 	br	100117c8 <__alt_data_end+0xf80117c8>
1001198c:	3444b03a 	or	r2,r6,r17
10011990:	1000231e 	bne	r2,zero,10011a20 <__divdf3+0x2d0>
10011994:	0023883a 	mov	r17,zero
10011998:	0029883a 	mov	r20,zero
1001199c:	01c00084 	movi	r7,2
100119a0:	003f9b06 	br	10011810 <__alt_data_end+0xf8011810>
100119a4:	3444b03a 	or	r2,r6,r17
100119a8:	10001926 	beq	r2,zero,10011a10 <__divdf3+0x2c0>
100119ac:	88014b26 	beq	r17,zero,10011edc <__divdf3+0x78c>
100119b0:	8809883a 	mov	r4,r17
100119b4:	d9400115 	stw	r5,4(sp)
100119b8:	d9800215 	stw	r6,8(sp)
100119bc:	da000415 	stw	r8,16(sp)
100119c0:	da400315 	stw	r9,12(sp)
100119c4:	00136e40 	call	100136e4 <__clzsi2>
100119c8:	d9400117 	ldw	r5,4(sp)
100119cc:	d9800217 	ldw	r6,8(sp)
100119d0:	da000417 	ldw	r8,16(sp)
100119d4:	da400317 	ldw	r9,12(sp)
100119d8:	113ffd44 	addi	r4,r2,-11
100119dc:	00c00704 	movi	r3,28
100119e0:	19013a16 	blt	r3,r4,10011ecc <__divdf3+0x77c>
100119e4:	00c00744 	movi	r3,29
100119e8:	153ffe04 	addi	r20,r2,-8
100119ec:	1907c83a 	sub	r3,r3,r4
100119f0:	8d22983a 	sll	r17,r17,r20
100119f4:	30c6d83a 	srl	r3,r6,r3
100119f8:	3528983a 	sll	r20,r6,r20
100119fc:	1c62b03a 	or	r17,r3,r17
10011a00:	1080fcc4 	addi	r2,r2,1011
10011a04:	0087c83a 	sub	r3,zero,r2
10011a08:	000f883a 	mov	r7,zero
10011a0c:	003f8006 	br	10011810 <__alt_data_end+0xf8011810>
10011a10:	0023883a 	mov	r17,zero
10011a14:	0029883a 	mov	r20,zero
10011a18:	01c00044 	movi	r7,1
10011a1c:	003f7c06 	br	10011810 <__alt_data_end+0xf8011810>
10011a20:	01c000c4 	movi	r7,3
10011a24:	003f7a06 	br	10011810 <__alt_data_end+0xf8011810>
10011a28:	02400104 	movi	r9,4
10011a2c:	0021883a 	mov	r16,zero
10011a30:	002b883a 	mov	r21,zero
10011a34:	01400044 	movi	r5,1
10011a38:	003f6306 	br	100117c8 <__alt_data_end+0xf80117c8>
10011a3c:	02400304 	movi	r9,12
10011a40:	014000c4 	movi	r5,3
10011a44:	003f6006 	br	100117c8 <__alt_data_end+0xf80117c8>
10011a48:	04000434 	movhi	r16,16
10011a4c:	0009883a 	mov	r4,zero
10011a50:	843fffc4 	addi	r16,r16,-1
10011a54:	057fffc4 	movi	r21,-1
10011a58:	0081ffc4 	movi	r2,2047
10011a5c:	003f9b06 	br	100118cc <__alt_data_end+0xf80118cc>
10011a60:	00c00044 	movi	r3,1
10011a64:	1887c83a 	sub	r3,r3,r2
10011a68:	01000e04 	movi	r4,56
10011a6c:	20c1530e 	bge	r4,r3,10011fbc <__divdf3+0x86c>
10011a70:	9900004c 	andi	r4,r19,1
10011a74:	0005883a 	mov	r2,zero
10011a78:	0021883a 	mov	r16,zero
10011a7c:	002b883a 	mov	r21,zero
10011a80:	003f9206 	br	100118cc <__alt_data_end+0xf80118cc>
10011a84:	8c012e36 	bltu	r17,r16,10011f40 <__divdf3+0x7f0>
10011a88:	84412c26 	beq	r16,r17,10011f3c <__divdf3+0x7ec>
10011a8c:	a82f883a 	mov	r23,r21
10011a90:	18ffffc4 	addi	r3,r3,-1
10011a94:	002b883a 	mov	r21,zero
10011a98:	a004d63a 	srli	r2,r20,24
10011a9c:	8822923a 	slli	r17,r17,8
10011aa0:	a028923a 	slli	r20,r20,8
10011aa4:	8009883a 	mov	r4,r16
10011aa8:	88acb03a 	or	r22,r17,r2
10011aac:	dd000015 	stw	r20,0(sp)
10011ab0:	b028d43a 	srli	r20,r22,16
10011ab4:	d8c00215 	stw	r3,8(sp)
10011ab8:	b4bfffcc 	andi	r18,r22,65535
10011abc:	a00b883a 	mov	r5,r20
10011ac0:	00069000 	call	10006900 <__udivsi3>
10011ac4:	100b883a 	mov	r5,r2
10011ac8:	9009883a 	mov	r4,r18
10011acc:	1023883a 	mov	r17,r2
10011ad0:	00069bc0 	call	100069bc <__mulsi3>
10011ad4:	8009883a 	mov	r4,r16
10011ad8:	a00b883a 	mov	r5,r20
10011adc:	1039883a 	mov	fp,r2
10011ae0:	00069640 	call	10006964 <__umodsi3>
10011ae4:	1004943a 	slli	r2,r2,16
10011ae8:	b808d43a 	srli	r4,r23,16
10011aec:	d8c00217 	ldw	r3,8(sp)
10011af0:	2084b03a 	or	r2,r4,r2
10011af4:	1700062e 	bgeu	r2,fp,10011b10 <__divdf3+0x3c0>
10011af8:	1585883a 	add	r2,r2,r22
10011afc:	893fffc4 	addi	r4,r17,-1
10011b00:	15811d36 	bltu	r2,r22,10011f78 <__divdf3+0x828>
10011b04:	17011c2e 	bgeu	r2,fp,10011f78 <__divdf3+0x828>
10011b08:	8c7fff84 	addi	r17,r17,-2
10011b0c:	1585883a 	add	r2,r2,r22
10011b10:	1739c83a 	sub	fp,r2,fp
10011b14:	a00b883a 	mov	r5,r20
10011b18:	e009883a 	mov	r4,fp
10011b1c:	d8c00215 	stw	r3,8(sp)
10011b20:	00069000 	call	10006900 <__udivsi3>
10011b24:	100b883a 	mov	r5,r2
10011b28:	9009883a 	mov	r4,r18
10011b2c:	1021883a 	mov	r16,r2
10011b30:	00069bc0 	call	100069bc <__mulsi3>
10011b34:	a00b883a 	mov	r5,r20
10011b38:	e009883a 	mov	r4,fp
10011b3c:	d8800415 	stw	r2,16(sp)
10011b40:	00069640 	call	10006964 <__umodsi3>
10011b44:	1004943a 	slli	r2,r2,16
10011b48:	da000417 	ldw	r8,16(sp)
10011b4c:	bdffffcc 	andi	r23,r23,65535
10011b50:	b884b03a 	or	r2,r23,r2
10011b54:	d8c00217 	ldw	r3,8(sp)
10011b58:	1200062e 	bgeu	r2,r8,10011b74 <__divdf3+0x424>
10011b5c:	1585883a 	add	r2,r2,r22
10011b60:	813fffc4 	addi	r4,r16,-1
10011b64:	15810236 	bltu	r2,r22,10011f70 <__divdf3+0x820>
10011b68:	1201012e 	bgeu	r2,r8,10011f70 <__divdf3+0x820>
10011b6c:	843fff84 	addi	r16,r16,-2
10011b70:	1585883a 	add	r2,r2,r22
10011b74:	8822943a 	slli	r17,r17,16
10011b78:	d9800017 	ldw	r6,0(sp)
10011b7c:	1211c83a 	sub	r8,r2,r8
10011b80:	8c22b03a 	or	r17,r17,r16
10011b84:	373fffcc 	andi	fp,r6,65535
10011b88:	8abfffcc 	andi	r10,r17,65535
10011b8c:	8820d43a 	srli	r16,r17,16
10011b90:	5009883a 	mov	r4,r10
10011b94:	e00b883a 	mov	r5,fp
10011b98:	302ed43a 	srli	r23,r6,16
10011b9c:	d8c00215 	stw	r3,8(sp)
10011ba0:	da000415 	stw	r8,16(sp)
10011ba4:	da800115 	stw	r10,4(sp)
10011ba8:	00069bc0 	call	100069bc <__mulsi3>
10011bac:	800b883a 	mov	r5,r16
10011bb0:	e009883a 	mov	r4,fp
10011bb4:	d8800515 	stw	r2,20(sp)
10011bb8:	00069bc0 	call	100069bc <__mulsi3>
10011bbc:	8009883a 	mov	r4,r16
10011bc0:	b80b883a 	mov	r5,r23
10011bc4:	d8800315 	stw	r2,12(sp)
10011bc8:	00069bc0 	call	100069bc <__mulsi3>
10011bcc:	da800117 	ldw	r10,4(sp)
10011bd0:	b80b883a 	mov	r5,r23
10011bd4:	1021883a 	mov	r16,r2
10011bd8:	5009883a 	mov	r4,r10
10011bdc:	00069bc0 	call	100069bc <__mulsi3>
10011be0:	d9c00517 	ldw	r7,20(sp)
10011be4:	da400317 	ldw	r9,12(sp)
10011be8:	d8c00217 	ldw	r3,8(sp)
10011bec:	3808d43a 	srli	r4,r7,16
10011bf0:	1245883a 	add	r2,r2,r9
10011bf4:	da000417 	ldw	r8,16(sp)
10011bf8:	2085883a 	add	r2,r4,r2
10011bfc:	1240022e 	bgeu	r2,r9,10011c08 <__divdf3+0x4b8>
10011c00:	01000074 	movhi	r4,1
10011c04:	8121883a 	add	r16,r16,r4
10011c08:	1008d43a 	srli	r4,r2,16
10011c0c:	1004943a 	slli	r2,r2,16
10011c10:	39ffffcc 	andi	r7,r7,65535
10011c14:	2409883a 	add	r4,r4,r16
10011c18:	11c5883a 	add	r2,r2,r7
10011c1c:	4100bb36 	bltu	r8,r4,10011f0c <__divdf3+0x7bc>
10011c20:	4100d726 	beq	r8,r4,10011f80 <__divdf3+0x830>
10011c24:	4109c83a 	sub	r4,r8,r4
10011c28:	a8a1c83a 	sub	r16,r21,r2
10011c2c:	ac2b803a 	cmpltu	r21,r21,r16
10011c30:	256bc83a 	sub	r21,r4,r21
10011c34:	b540d926 	beq	r22,r21,10011f9c <__divdf3+0x84c>
10011c38:	a00b883a 	mov	r5,r20
10011c3c:	a809883a 	mov	r4,r21
10011c40:	d8c00215 	stw	r3,8(sp)
10011c44:	00069000 	call	10006900 <__udivsi3>
10011c48:	100b883a 	mov	r5,r2
10011c4c:	9009883a 	mov	r4,r18
10011c50:	d8800515 	stw	r2,20(sp)
10011c54:	00069bc0 	call	100069bc <__mulsi3>
10011c58:	a809883a 	mov	r4,r21
10011c5c:	a00b883a 	mov	r5,r20
10011c60:	d8800415 	stw	r2,16(sp)
10011c64:	00069640 	call	10006964 <__umodsi3>
10011c68:	1004943a 	slli	r2,r2,16
10011c6c:	8008d43a 	srli	r4,r16,16
10011c70:	da000417 	ldw	r8,16(sp)
10011c74:	d8c00217 	ldw	r3,8(sp)
10011c78:	2084b03a 	or	r2,r4,r2
10011c7c:	d9c00517 	ldw	r7,20(sp)
10011c80:	1200062e 	bgeu	r2,r8,10011c9c <__divdf3+0x54c>
10011c84:	1585883a 	add	r2,r2,r22
10011c88:	393fffc4 	addi	r4,r7,-1
10011c8c:	1580c536 	bltu	r2,r22,10011fa4 <__divdf3+0x854>
10011c90:	1200c42e 	bgeu	r2,r8,10011fa4 <__divdf3+0x854>
10011c94:	39ffff84 	addi	r7,r7,-2
10011c98:	1585883a 	add	r2,r2,r22
10011c9c:	122bc83a 	sub	r21,r2,r8
10011ca0:	a00b883a 	mov	r5,r20
10011ca4:	a809883a 	mov	r4,r21
10011ca8:	d8c00215 	stw	r3,8(sp)
10011cac:	d9c00515 	stw	r7,20(sp)
10011cb0:	00069000 	call	10006900 <__udivsi3>
10011cb4:	9009883a 	mov	r4,r18
10011cb8:	100b883a 	mov	r5,r2
10011cbc:	d8800415 	stw	r2,16(sp)
10011cc0:	00069bc0 	call	100069bc <__mulsi3>
10011cc4:	a809883a 	mov	r4,r21
10011cc8:	a00b883a 	mov	r5,r20
10011ccc:	1025883a 	mov	r18,r2
10011cd0:	00069640 	call	10006964 <__umodsi3>
10011cd4:	1004943a 	slli	r2,r2,16
10011cd8:	813fffcc 	andi	r4,r16,65535
10011cdc:	d8c00217 	ldw	r3,8(sp)
10011ce0:	20a0b03a 	or	r16,r4,r2
10011ce4:	d9c00517 	ldw	r7,20(sp)
10011ce8:	da000417 	ldw	r8,16(sp)
10011cec:	8480062e 	bgeu	r16,r18,10011d08 <__divdf3+0x5b8>
10011cf0:	85a1883a 	add	r16,r16,r22
10011cf4:	40bfffc4 	addi	r2,r8,-1
10011cf8:	8580ac36 	bltu	r16,r22,10011fac <__divdf3+0x85c>
10011cfc:	8480ab2e 	bgeu	r16,r18,10011fac <__divdf3+0x85c>
10011d00:	423fff84 	addi	r8,r8,-2
10011d04:	85a1883a 	add	r16,r16,r22
10011d08:	3804943a 	slli	r2,r7,16
10011d0c:	84a1c83a 	sub	r16,r16,r18
10011d10:	e009883a 	mov	r4,fp
10011d14:	1228b03a 	or	r20,r2,r8
10011d18:	a1ffffcc 	andi	r7,r20,65535
10011d1c:	a024d43a 	srli	r18,r20,16
10011d20:	380b883a 	mov	r5,r7
10011d24:	d8c00215 	stw	r3,8(sp)
10011d28:	d9c00515 	stw	r7,20(sp)
10011d2c:	00069bc0 	call	100069bc <__mulsi3>
10011d30:	900b883a 	mov	r5,r18
10011d34:	e009883a 	mov	r4,fp
10011d38:	102b883a 	mov	r21,r2
10011d3c:	00069bc0 	call	100069bc <__mulsi3>
10011d40:	900b883a 	mov	r5,r18
10011d44:	b809883a 	mov	r4,r23
10011d48:	1039883a 	mov	fp,r2
10011d4c:	00069bc0 	call	100069bc <__mulsi3>
10011d50:	d9c00517 	ldw	r7,20(sp)
10011d54:	b80b883a 	mov	r5,r23
10011d58:	1025883a 	mov	r18,r2
10011d5c:	3809883a 	mov	r4,r7
10011d60:	00069bc0 	call	100069bc <__mulsi3>
10011d64:	a808d43a 	srli	r4,r21,16
10011d68:	1705883a 	add	r2,r2,fp
10011d6c:	d8c00217 	ldw	r3,8(sp)
10011d70:	2085883a 	add	r2,r4,r2
10011d74:	1700022e 	bgeu	r2,fp,10011d80 <__divdf3+0x630>
10011d78:	01000074 	movhi	r4,1
10011d7c:	9125883a 	add	r18,r18,r4
10011d80:	1008d43a 	srli	r4,r2,16
10011d84:	1004943a 	slli	r2,r2,16
10011d88:	ad7fffcc 	andi	r21,r21,65535
10011d8c:	2489883a 	add	r4,r4,r18
10011d90:	1545883a 	add	r2,r2,r21
10011d94:	81003836 	bltu	r16,r4,10011e78 <__divdf3+0x728>
10011d98:	81003626 	beq	r16,r4,10011e74 <__divdf3+0x724>
10011d9c:	a5000054 	ori	r20,r20,1
10011da0:	1880ffc4 	addi	r2,r3,1023
10011da4:	00bf2e0e 	bge	zero,r2,10011a60 <__alt_data_end+0xf8011a60>
10011da8:	a10001cc 	andi	r4,r20,7
10011dac:	20000726 	beq	r4,zero,10011dcc <__divdf3+0x67c>
10011db0:	a10003cc 	andi	r4,r20,15
10011db4:	01400104 	movi	r5,4
10011db8:	21400426 	beq	r4,r5,10011dcc <__divdf3+0x67c>
10011dbc:	a149883a 	add	r4,r20,r5
10011dc0:	2529803a 	cmpltu	r20,r4,r20
10011dc4:	8d23883a 	add	r17,r17,r20
10011dc8:	2029883a 	mov	r20,r4
10011dcc:	8900402c 	andhi	r4,r17,256
10011dd0:	20000426 	beq	r4,zero,10011de4 <__divdf3+0x694>
10011dd4:	18810004 	addi	r2,r3,1024
10011dd8:	00ffc034 	movhi	r3,65280
10011ddc:	18ffffc4 	addi	r3,r3,-1
10011de0:	88e2703a 	and	r17,r17,r3
10011de4:	00c1ff84 	movi	r3,2046
10011de8:	18beb416 	blt	r3,r2,100118bc <__alt_data_end+0xf80118bc>
10011dec:	a028d0fa 	srli	r20,r20,3
10011df0:	882a977a 	slli	r21,r17,29
10011df4:	8820927a 	slli	r16,r17,9
10011df8:	1081ffcc 	andi	r2,r2,2047
10011dfc:	ad2ab03a 	or	r21,r21,r20
10011e00:	8020d33a 	srli	r16,r16,12
10011e04:	9900004c 	andi	r4,r19,1
10011e08:	003eb006 	br	100118cc <__alt_data_end+0xf80118cc>
10011e0c:	8080022c 	andhi	r2,r16,8
10011e10:	10001226 	beq	r2,zero,10011e5c <__divdf3+0x70c>
10011e14:	8880022c 	andhi	r2,r17,8
10011e18:	1000101e 	bne	r2,zero,10011e5c <__divdf3+0x70c>
10011e1c:	00800434 	movhi	r2,16
10011e20:	8c000234 	orhi	r16,r17,8
10011e24:	10bfffc4 	addi	r2,r2,-1
10011e28:	b809883a 	mov	r4,r23
10011e2c:	80a0703a 	and	r16,r16,r2
10011e30:	a02b883a 	mov	r21,r20
10011e34:	003f0806 	br	10011a58 <__alt_data_end+0xf8011a58>
10011e38:	008000c4 	movi	r2,3
10011e3c:	3880b126 	beq	r7,r2,10012104 <__divdf3+0x9b4>
10011e40:	00800044 	movi	r2,1
10011e44:	38805b1e 	bne	r7,r2,10011fb4 <__divdf3+0x864>
10011e48:	e009883a 	mov	r4,fp
10011e4c:	0005883a 	mov	r2,zero
10011e50:	0021883a 	mov	r16,zero
10011e54:	002b883a 	mov	r21,zero
10011e58:	003e9c06 	br	100118cc <__alt_data_end+0xf80118cc>
10011e5c:	00800434 	movhi	r2,16
10011e60:	84000234 	orhi	r16,r16,8
10011e64:	10bfffc4 	addi	r2,r2,-1
10011e68:	b009883a 	mov	r4,r22
10011e6c:	80a0703a 	and	r16,r16,r2
10011e70:	003ef906 	br	10011a58 <__alt_data_end+0xf8011a58>
10011e74:	103fca26 	beq	r2,zero,10011da0 <__alt_data_end+0xf8011da0>
10011e78:	b421883a 	add	r16,r22,r16
10011e7c:	a17fffc4 	addi	r5,r20,-1
10011e80:	8580422e 	bgeu	r16,r22,10011f8c <__divdf3+0x83c>
10011e84:	2829883a 	mov	r20,r5
10011e88:	813fc41e 	bne	r16,r4,10011d9c <__alt_data_end+0xf8011d9c>
10011e8c:	d9800017 	ldw	r6,0(sp)
10011e90:	30bfc21e 	bne	r6,r2,10011d9c <__alt_data_end+0xf8011d9c>
10011e94:	003fc206 	br	10011da0 <__alt_data_end+0xf8011da0>
10011e98:	143ff604 	addi	r16,r2,-40
10011e9c:	8c20983a 	sll	r16,r17,r16
10011ea0:	002b883a 	mov	r21,zero
10011ea4:	003eb406 	br	10011978 <__alt_data_end+0xf8011978>
10011ea8:	d9800215 	stw	r6,8(sp)
10011eac:	d9c00515 	stw	r7,20(sp)
10011eb0:	da000415 	stw	r8,16(sp)
10011eb4:	00136e40 	call	100136e4 <__clzsi2>
10011eb8:	10800804 	addi	r2,r2,32
10011ebc:	da000417 	ldw	r8,16(sp)
10011ec0:	d9c00517 	ldw	r7,20(sp)
10011ec4:	d9800217 	ldw	r6,8(sp)
10011ec8:	003ea106 	br	10011950 <__alt_data_end+0xf8011950>
10011ecc:	147ff604 	addi	r17,r2,-40
10011ed0:	3462983a 	sll	r17,r6,r17
10011ed4:	0029883a 	mov	r20,zero
10011ed8:	003ec906 	br	10011a00 <__alt_data_end+0xf8011a00>
10011edc:	3009883a 	mov	r4,r6
10011ee0:	d9400115 	stw	r5,4(sp)
10011ee4:	d9800215 	stw	r6,8(sp)
10011ee8:	da000415 	stw	r8,16(sp)
10011eec:	da400315 	stw	r9,12(sp)
10011ef0:	00136e40 	call	100136e4 <__clzsi2>
10011ef4:	10800804 	addi	r2,r2,32
10011ef8:	da400317 	ldw	r9,12(sp)
10011efc:	da000417 	ldw	r8,16(sp)
10011f00:	d9800217 	ldw	r6,8(sp)
10011f04:	d9400117 	ldw	r5,4(sp)
10011f08:	003eb306 	br	100119d8 <__alt_data_end+0xf80119d8>
10011f0c:	d9800017 	ldw	r6,0(sp)
10011f10:	a9ab883a 	add	r21,r21,r6
10011f14:	a98b803a 	cmpltu	r5,r21,r6
10011f18:	2d8b883a 	add	r5,r5,r22
10011f1c:	2a11883a 	add	r8,r5,r8
10011f20:	897fffc4 	addi	r5,r17,-1
10011f24:	b2000c2e 	bgeu	r22,r8,10011f58 <__divdf3+0x808>
10011f28:	41003f36 	bltu	r8,r4,10012028 <__divdf3+0x8d8>
10011f2c:	22006c26 	beq	r4,r8,100120e0 <__divdf3+0x990>
10011f30:	4109c83a 	sub	r4,r8,r4
10011f34:	2823883a 	mov	r17,r5
10011f38:	003f3b06 	br	10011c28 <__alt_data_end+0xf8011c28>
10011f3c:	ad3ed336 	bltu	r21,r20,10011a8c <__alt_data_end+0xf8011a8c>
10011f40:	a804d07a 	srli	r2,r21,1
10011f44:	802e97fa 	slli	r23,r16,31
10011f48:	a82a97fa 	slli	r21,r21,31
10011f4c:	8020d07a 	srli	r16,r16,1
10011f50:	b8aeb03a 	or	r23,r23,r2
10011f54:	003ed006 	br	10011a98 <__alt_data_end+0xf8011a98>
10011f58:	b23ff51e 	bne	r22,r8,10011f30 <__alt_data_end+0xf8011f30>
10011f5c:	d9800017 	ldw	r6,0(sp)
10011f60:	a9bff12e 	bgeu	r21,r6,10011f28 <__alt_data_end+0xf8011f28>
10011f64:	b109c83a 	sub	r4,r22,r4
10011f68:	2823883a 	mov	r17,r5
10011f6c:	003f2e06 	br	10011c28 <__alt_data_end+0xf8011c28>
10011f70:	2021883a 	mov	r16,r4
10011f74:	003eff06 	br	10011b74 <__alt_data_end+0xf8011b74>
10011f78:	2023883a 	mov	r17,r4
10011f7c:	003ee406 	br	10011b10 <__alt_data_end+0xf8011b10>
10011f80:	a8bfe236 	bltu	r21,r2,10011f0c <__alt_data_end+0xf8011f0c>
10011f84:	0009883a 	mov	r4,zero
10011f88:	003f2706 	br	10011c28 <__alt_data_end+0xf8011c28>
10011f8c:	81002d36 	bltu	r16,r4,10012044 <__divdf3+0x8f4>
10011f90:	24005626 	beq	r4,r16,100120ec <__divdf3+0x99c>
10011f94:	2829883a 	mov	r20,r5
10011f98:	003f8006 	br	10011d9c <__alt_data_end+0xf8011d9c>
10011f9c:	053fffc4 	movi	r20,-1
10011fa0:	003f7f06 	br	10011da0 <__alt_data_end+0xf8011da0>
10011fa4:	200f883a 	mov	r7,r4
10011fa8:	003f3c06 	br	10011c9c <__alt_data_end+0xf8011c9c>
10011fac:	1011883a 	mov	r8,r2
10011fb0:	003f5506 	br	10011d08 <__alt_data_end+0xf8011d08>
10011fb4:	e027883a 	mov	r19,fp
10011fb8:	003f7906 	br	10011da0 <__alt_data_end+0xf8011da0>
10011fbc:	010007c4 	movi	r4,31
10011fc0:	20c02816 	blt	r4,r3,10012064 <__divdf3+0x914>
10011fc4:	00800804 	movi	r2,32
10011fc8:	10c5c83a 	sub	r2,r2,r3
10011fcc:	888a983a 	sll	r5,r17,r2
10011fd0:	a0c8d83a 	srl	r4,r20,r3
10011fd4:	a084983a 	sll	r2,r20,r2
10011fd8:	88e2d83a 	srl	r17,r17,r3
10011fdc:	2906b03a 	or	r3,r5,r4
10011fe0:	1004c03a 	cmpne	r2,r2,zero
10011fe4:	1886b03a 	or	r3,r3,r2
10011fe8:	188001cc 	andi	r2,r3,7
10011fec:	10000726 	beq	r2,zero,1001200c <__divdf3+0x8bc>
10011ff0:	188003cc 	andi	r2,r3,15
10011ff4:	01000104 	movi	r4,4
10011ff8:	11000426 	beq	r2,r4,1001200c <__divdf3+0x8bc>
10011ffc:	1805883a 	mov	r2,r3
10012000:	10c00104 	addi	r3,r2,4
10012004:	1885803a 	cmpltu	r2,r3,r2
10012008:	88a3883a 	add	r17,r17,r2
1001200c:	8880202c 	andhi	r2,r17,128
10012010:	10002926 	beq	r2,zero,100120b8 <__divdf3+0x968>
10012014:	9900004c 	andi	r4,r19,1
10012018:	00800044 	movi	r2,1
1001201c:	0021883a 	mov	r16,zero
10012020:	002b883a 	mov	r21,zero
10012024:	003e2906 	br	100118cc <__alt_data_end+0xf80118cc>
10012028:	d9800017 	ldw	r6,0(sp)
1001202c:	8c7fff84 	addi	r17,r17,-2
10012030:	a9ab883a 	add	r21,r21,r6
10012034:	a98b803a 	cmpltu	r5,r21,r6
10012038:	2d8b883a 	add	r5,r5,r22
1001203c:	2a11883a 	add	r8,r5,r8
10012040:	003ef806 	br	10011c24 <__alt_data_end+0xf8011c24>
10012044:	d9800017 	ldw	r6,0(sp)
10012048:	318f883a 	add	r7,r6,r6
1001204c:	398b803a 	cmpltu	r5,r7,r6
10012050:	2d8d883a 	add	r6,r5,r22
10012054:	81a1883a 	add	r16,r16,r6
10012058:	a17fff84 	addi	r5,r20,-2
1001205c:	d9c00015 	stw	r7,0(sp)
10012060:	003f8806 	br	10011e84 <__alt_data_end+0xf8011e84>
10012064:	013ff844 	movi	r4,-31
10012068:	2085c83a 	sub	r2,r4,r2
1001206c:	8888d83a 	srl	r4,r17,r2
10012070:	00800804 	movi	r2,32
10012074:	18802126 	beq	r3,r2,100120fc <__divdf3+0x9ac>
10012078:	04001004 	movi	r16,64
1001207c:	80c7c83a 	sub	r3,r16,r3
10012080:	88e0983a 	sll	r16,r17,r3
10012084:	8504b03a 	or	r2,r16,r20
10012088:	1004c03a 	cmpne	r2,r2,zero
1001208c:	2084b03a 	or	r2,r4,r2
10012090:	144001cc 	andi	r17,r2,7
10012094:	88000d1e 	bne	r17,zero,100120cc <__divdf3+0x97c>
10012098:	0021883a 	mov	r16,zero
1001209c:	102ad0fa 	srli	r21,r2,3
100120a0:	9900004c 	andi	r4,r19,1
100120a4:	0005883a 	mov	r2,zero
100120a8:	ac6ab03a 	or	r21,r21,r17
100120ac:	003e0706 	br	100118cc <__alt_data_end+0xf80118cc>
100120b0:	1007883a 	mov	r3,r2
100120b4:	0023883a 	mov	r17,zero
100120b8:	8820927a 	slli	r16,r17,9
100120bc:	1805883a 	mov	r2,r3
100120c0:	8822977a 	slli	r17,r17,29
100120c4:	8020d33a 	srli	r16,r16,12
100120c8:	003ff406 	br	1001209c <__alt_data_end+0xf801209c>
100120cc:	10c003cc 	andi	r3,r2,15
100120d0:	01000104 	movi	r4,4
100120d4:	193ff626 	beq	r3,r4,100120b0 <__alt_data_end+0xf80120b0>
100120d8:	0023883a 	mov	r17,zero
100120dc:	003fc806 	br	10012000 <__alt_data_end+0xf8012000>
100120e0:	a8bfd136 	bltu	r21,r2,10012028 <__alt_data_end+0xf8012028>
100120e4:	2823883a 	mov	r17,r5
100120e8:	003fa606 	br	10011f84 <__alt_data_end+0xf8011f84>
100120ec:	d9800017 	ldw	r6,0(sp)
100120f0:	30bfd436 	bltu	r6,r2,10012044 <__alt_data_end+0xf8012044>
100120f4:	2829883a 	mov	r20,r5
100120f8:	003f6406 	br	10011e8c <__alt_data_end+0xf8011e8c>
100120fc:	0021883a 	mov	r16,zero
10012100:	003fe006 	br	10012084 <__alt_data_end+0xf8012084>
10012104:	00800434 	movhi	r2,16
10012108:	8c000234 	orhi	r16,r17,8
1001210c:	10bfffc4 	addi	r2,r2,-1
10012110:	e009883a 	mov	r4,fp
10012114:	80a0703a 	and	r16,r16,r2
10012118:	a02b883a 	mov	r21,r20
1001211c:	003e4e06 	br	10011a58 <__alt_data_end+0xf8011a58>

10012120 <__eqdf2>:
10012120:	2804d53a 	srli	r2,r5,20
10012124:	3806d53a 	srli	r3,r7,20
10012128:	02000434 	movhi	r8,16
1001212c:	423fffc4 	addi	r8,r8,-1
10012130:	1081ffcc 	andi	r2,r2,2047
10012134:	0281ffc4 	movi	r10,2047
10012138:	2a12703a 	and	r9,r5,r8
1001213c:	18c1ffcc 	andi	r3,r3,2047
10012140:	3a10703a 	and	r8,r7,r8
10012144:	280ad7fa 	srli	r5,r5,31
10012148:	380ed7fa 	srli	r7,r7,31
1001214c:	12801026 	beq	r2,r10,10012190 <__eqdf2+0x70>
10012150:	0281ffc4 	movi	r10,2047
10012154:	1a800a26 	beq	r3,r10,10012180 <__eqdf2+0x60>
10012158:	10c00226 	beq	r2,r3,10012164 <__eqdf2+0x44>
1001215c:	00800044 	movi	r2,1
10012160:	f800283a 	ret
10012164:	4a3ffd1e 	bne	r9,r8,1001215c <__alt_data_end+0xf801215c>
10012168:	21bffc1e 	bne	r4,r6,1001215c <__alt_data_end+0xf801215c>
1001216c:	29c00c26 	beq	r5,r7,100121a0 <__eqdf2+0x80>
10012170:	103ffa1e 	bne	r2,zero,1001215c <__alt_data_end+0xf801215c>
10012174:	2244b03a 	or	r2,r4,r9
10012178:	1004c03a 	cmpne	r2,r2,zero
1001217c:	f800283a 	ret
10012180:	3214b03a 	or	r10,r6,r8
10012184:	503ff426 	beq	r10,zero,10012158 <__alt_data_end+0xf8012158>
10012188:	00800044 	movi	r2,1
1001218c:	f800283a 	ret
10012190:	2254b03a 	or	r10,r4,r9
10012194:	503fee26 	beq	r10,zero,10012150 <__alt_data_end+0xf8012150>
10012198:	00800044 	movi	r2,1
1001219c:	f800283a 	ret
100121a0:	0005883a 	mov	r2,zero
100121a4:	f800283a 	ret

100121a8 <__gedf2>:
100121a8:	2804d53a 	srli	r2,r5,20
100121ac:	3806d53a 	srli	r3,r7,20
100121b0:	02000434 	movhi	r8,16
100121b4:	423fffc4 	addi	r8,r8,-1
100121b8:	1081ffcc 	andi	r2,r2,2047
100121bc:	0241ffc4 	movi	r9,2047
100121c0:	2a14703a 	and	r10,r5,r8
100121c4:	18c1ffcc 	andi	r3,r3,2047
100121c8:	3a10703a 	and	r8,r7,r8
100121cc:	280ad7fa 	srli	r5,r5,31
100121d0:	380ed7fa 	srli	r7,r7,31
100121d4:	12401d26 	beq	r2,r9,1001224c <__gedf2+0xa4>
100121d8:	0241ffc4 	movi	r9,2047
100121dc:	1a401226 	beq	r3,r9,10012228 <__gedf2+0x80>
100121e0:	1000081e 	bne	r2,zero,10012204 <__gedf2+0x5c>
100121e4:	2296b03a 	or	r11,r4,r10
100121e8:	5813003a 	cmpeq	r9,r11,zero
100121ec:	1800091e 	bne	r3,zero,10012214 <__gedf2+0x6c>
100121f0:	3218b03a 	or	r12,r6,r8
100121f4:	6000071e 	bne	r12,zero,10012214 <__gedf2+0x6c>
100121f8:	0005883a 	mov	r2,zero
100121fc:	5800101e 	bne	r11,zero,10012240 <__gedf2+0x98>
10012200:	f800283a 	ret
10012204:	18000c1e 	bne	r3,zero,10012238 <__gedf2+0x90>
10012208:	3212b03a 	or	r9,r6,r8
1001220c:	48000c26 	beq	r9,zero,10012240 <__gedf2+0x98>
10012210:	0013883a 	mov	r9,zero
10012214:	39c03fcc 	andi	r7,r7,255
10012218:	48000826 	beq	r9,zero,1001223c <__gedf2+0x94>
1001221c:	38000926 	beq	r7,zero,10012244 <__gedf2+0x9c>
10012220:	00800044 	movi	r2,1
10012224:	f800283a 	ret
10012228:	3212b03a 	or	r9,r6,r8
1001222c:	483fec26 	beq	r9,zero,100121e0 <__alt_data_end+0xf80121e0>
10012230:	00bfff84 	movi	r2,-2
10012234:	f800283a 	ret
10012238:	39c03fcc 	andi	r7,r7,255
1001223c:	29c00626 	beq	r5,r7,10012258 <__gedf2+0xb0>
10012240:	283ff726 	beq	r5,zero,10012220 <__alt_data_end+0xf8012220>
10012244:	00bfffc4 	movi	r2,-1
10012248:	f800283a 	ret
1001224c:	2292b03a 	or	r9,r4,r10
10012250:	483fe126 	beq	r9,zero,100121d8 <__alt_data_end+0xf80121d8>
10012254:	003ff606 	br	10012230 <__alt_data_end+0xf8012230>
10012258:	18bff916 	blt	r3,r2,10012240 <__alt_data_end+0xf8012240>
1001225c:	10c00316 	blt	r2,r3,1001226c <__gedf2+0xc4>
10012260:	42bff736 	bltu	r8,r10,10012240 <__alt_data_end+0xf8012240>
10012264:	52000326 	beq	r10,r8,10012274 <__gedf2+0xcc>
10012268:	5200042e 	bgeu	r10,r8,1001227c <__gedf2+0xd4>
1001226c:	283fec1e 	bne	r5,zero,10012220 <__alt_data_end+0xf8012220>
10012270:	003ff406 	br	10012244 <__alt_data_end+0xf8012244>
10012274:	313ff236 	bltu	r6,r4,10012240 <__alt_data_end+0xf8012240>
10012278:	21bffc36 	bltu	r4,r6,1001226c <__alt_data_end+0xf801226c>
1001227c:	0005883a 	mov	r2,zero
10012280:	f800283a 	ret

10012284 <__ledf2>:
10012284:	2804d53a 	srli	r2,r5,20
10012288:	3810d53a 	srli	r8,r7,20
1001228c:	00c00434 	movhi	r3,16
10012290:	18ffffc4 	addi	r3,r3,-1
10012294:	1081ffcc 	andi	r2,r2,2047
10012298:	0241ffc4 	movi	r9,2047
1001229c:	28d4703a 	and	r10,r5,r3
100122a0:	4201ffcc 	andi	r8,r8,2047
100122a4:	38c6703a 	and	r3,r7,r3
100122a8:	280ad7fa 	srli	r5,r5,31
100122ac:	380ed7fa 	srli	r7,r7,31
100122b0:	12401f26 	beq	r2,r9,10012330 <__ledf2+0xac>
100122b4:	0241ffc4 	movi	r9,2047
100122b8:	42401426 	beq	r8,r9,1001230c <__ledf2+0x88>
100122bc:	1000091e 	bne	r2,zero,100122e4 <__ledf2+0x60>
100122c0:	2296b03a 	or	r11,r4,r10
100122c4:	5813003a 	cmpeq	r9,r11,zero
100122c8:	29403fcc 	andi	r5,r5,255
100122cc:	40000a1e 	bne	r8,zero,100122f8 <__ledf2+0x74>
100122d0:	30d8b03a 	or	r12,r6,r3
100122d4:	6000081e 	bne	r12,zero,100122f8 <__ledf2+0x74>
100122d8:	0005883a 	mov	r2,zero
100122dc:	5800111e 	bne	r11,zero,10012324 <__ledf2+0xa0>
100122e0:	f800283a 	ret
100122e4:	29403fcc 	andi	r5,r5,255
100122e8:	40000c1e 	bne	r8,zero,1001231c <__ledf2+0x98>
100122ec:	30d2b03a 	or	r9,r6,r3
100122f0:	48000c26 	beq	r9,zero,10012324 <__ledf2+0xa0>
100122f4:	0013883a 	mov	r9,zero
100122f8:	39c03fcc 	andi	r7,r7,255
100122fc:	48000826 	beq	r9,zero,10012320 <__ledf2+0x9c>
10012300:	38001126 	beq	r7,zero,10012348 <__ledf2+0xc4>
10012304:	00800044 	movi	r2,1
10012308:	f800283a 	ret
1001230c:	30d2b03a 	or	r9,r6,r3
10012310:	483fea26 	beq	r9,zero,100122bc <__alt_data_end+0xf80122bc>
10012314:	00800084 	movi	r2,2
10012318:	f800283a 	ret
1001231c:	39c03fcc 	andi	r7,r7,255
10012320:	39400726 	beq	r7,r5,10012340 <__ledf2+0xbc>
10012324:	2800081e 	bne	r5,zero,10012348 <__ledf2+0xc4>
10012328:	00800044 	movi	r2,1
1001232c:	f800283a 	ret
10012330:	2292b03a 	or	r9,r4,r10
10012334:	483fdf26 	beq	r9,zero,100122b4 <__alt_data_end+0xf80122b4>
10012338:	00800084 	movi	r2,2
1001233c:	f800283a 	ret
10012340:	4080030e 	bge	r8,r2,10012350 <__ledf2+0xcc>
10012344:	383fef26 	beq	r7,zero,10012304 <__alt_data_end+0xf8012304>
10012348:	00bfffc4 	movi	r2,-1
1001234c:	f800283a 	ret
10012350:	123feb16 	blt	r2,r8,10012300 <__alt_data_end+0xf8012300>
10012354:	1abff336 	bltu	r3,r10,10012324 <__alt_data_end+0xf8012324>
10012358:	50c00326 	beq	r10,r3,10012368 <__ledf2+0xe4>
1001235c:	50c0042e 	bgeu	r10,r3,10012370 <__ledf2+0xec>
10012360:	283fe81e 	bne	r5,zero,10012304 <__alt_data_end+0xf8012304>
10012364:	003ff806 	br	10012348 <__alt_data_end+0xf8012348>
10012368:	313fee36 	bltu	r6,r4,10012324 <__alt_data_end+0xf8012324>
1001236c:	21bffc36 	bltu	r4,r6,10012360 <__alt_data_end+0xf8012360>
10012370:	0005883a 	mov	r2,zero
10012374:	f800283a 	ret

10012378 <__muldf3>:
10012378:	deffee04 	addi	sp,sp,-72
1001237c:	dd000c15 	stw	r20,48(sp)
10012380:	2828d53a 	srli	r20,r5,20
10012384:	ddc00f15 	stw	r23,60(sp)
10012388:	282ed7fa 	srli	r23,r5,31
1001238c:	dc000815 	stw	r16,32(sp)
10012390:	04000434 	movhi	r16,16
10012394:	dcc00b15 	stw	r19,44(sp)
10012398:	843fffc4 	addi	r16,r16,-1
1001239c:	dfc01115 	stw	ra,68(sp)
100123a0:	df001015 	stw	fp,64(sp)
100123a4:	dd800e15 	stw	r22,56(sp)
100123a8:	dd400d15 	stw	r21,52(sp)
100123ac:	dc800a15 	stw	r18,40(sp)
100123b0:	dc400915 	stw	r17,36(sp)
100123b4:	a501ffcc 	andi	r20,r20,2047
100123b8:	2c20703a 	and	r16,r5,r16
100123bc:	b827883a 	mov	r19,r23
100123c0:	ba403fcc 	andi	r9,r23,255
100123c4:	a0006026 	beq	r20,zero,10012548 <__muldf3+0x1d0>
100123c8:	0081ffc4 	movi	r2,2047
100123cc:	202d883a 	mov	r22,r4
100123d0:	a0803626 	beq	r20,r2,100124ac <__muldf3+0x134>
100123d4:	84000434 	orhi	r16,r16,16
100123d8:	200ad77a 	srli	r5,r4,29
100123dc:	800490fa 	slli	r2,r16,3
100123e0:	202c90fa 	slli	r22,r4,3
100123e4:	a53f0044 	addi	r20,r20,-1023
100123e8:	28a0b03a 	or	r16,r5,r2
100123ec:	002b883a 	mov	r21,zero
100123f0:	000b883a 	mov	r5,zero
100123f4:	3804d53a 	srli	r2,r7,20
100123f8:	3838d7fa 	srli	fp,r7,31
100123fc:	04400434 	movhi	r17,16
10012400:	8c7fffc4 	addi	r17,r17,-1
10012404:	1081ffcc 	andi	r2,r2,2047
10012408:	3025883a 	mov	r18,r6
1001240c:	3c62703a 	and	r17,r7,r17
10012410:	e2803fcc 	andi	r10,fp,255
10012414:	10006d26 	beq	r2,zero,100125cc <__muldf3+0x254>
10012418:	00c1ffc4 	movi	r3,2047
1001241c:	10c06526 	beq	r2,r3,100125b4 <__muldf3+0x23c>
10012420:	8c400434 	orhi	r17,r17,16
10012424:	300ed77a 	srli	r7,r6,29
10012428:	880690fa 	slli	r3,r17,3
1001242c:	302490fa 	slli	r18,r6,3
10012430:	10bf0044 	addi	r2,r2,-1023
10012434:	38e2b03a 	or	r17,r7,r3
10012438:	000f883a 	mov	r7,zero
1001243c:	a087883a 	add	r3,r20,r2
10012440:	010003c4 	movi	r4,15
10012444:	3d44b03a 	or	r2,r7,r21
10012448:	e5ccf03a 	xor	r6,fp,r23
1001244c:	1a000044 	addi	r8,r3,1
10012450:	20809b36 	bltu	r4,r2,100126c0 <__muldf3+0x348>
10012454:	100490ba 	slli	r2,r2,2
10012458:	01040074 	movhi	r4,4097
1001245c:	21091b04 	addi	r4,r4,9324
10012460:	1105883a 	add	r2,r2,r4
10012464:	10800017 	ldw	r2,0(r2)
10012468:	1000683a 	jmp	r2
1001246c:	100126c0 	call	1100126c <__alt_heap_start+0xfcce20>
10012470:	100124cc 	andi	zero,r2,1171
10012474:	100124cc 	andi	zero,r2,1171
10012478:	100124c8 	cmpgei	zero,r2,1171
1001247c:	1001269c 	xori	zero,r2,1178
10012480:	1001269c 	xori	zero,r2,1178
10012484:	10012684 	addi	zero,r2,1178
10012488:	100124c8 	cmpgei	zero,r2,1171
1001248c:	1001269c 	xori	zero,r2,1178
10012490:	10012684 	addi	zero,r2,1178
10012494:	1001269c 	xori	zero,r2,1178
10012498:	100124c8 	cmpgei	zero,r2,1171
1001249c:	100126ac 	andhi	zero,r2,1178
100124a0:	100126ac 	andhi	zero,r2,1178
100124a4:	100126ac 	andhi	zero,r2,1178
100124a8:	10012a0c 	andi	zero,r2,1192
100124ac:	2404b03a 	or	r2,r4,r16
100124b0:	1000711e 	bne	r2,zero,10012678 <__muldf3+0x300>
100124b4:	05400204 	movi	r21,8
100124b8:	0021883a 	mov	r16,zero
100124bc:	002d883a 	mov	r22,zero
100124c0:	01400084 	movi	r5,2
100124c4:	003fcb06 	br	100123f4 <__alt_data_end+0xf80123f4>
100124c8:	500d883a 	mov	r6,r10
100124cc:	00800084 	movi	r2,2
100124d0:	38805926 	beq	r7,r2,10012638 <__muldf3+0x2c0>
100124d4:	008000c4 	movi	r2,3
100124d8:	3881bb26 	beq	r7,r2,10012bc8 <__muldf3+0x850>
100124dc:	00800044 	movi	r2,1
100124e0:	3881961e 	bne	r7,r2,10012b3c <__muldf3+0x7c4>
100124e4:	3027883a 	mov	r19,r6
100124e8:	0005883a 	mov	r2,zero
100124ec:	0021883a 	mov	r16,zero
100124f0:	002d883a 	mov	r22,zero
100124f4:	1004953a 	slli	r2,r2,20
100124f8:	98c03fcc 	andi	r3,r19,255
100124fc:	04400434 	movhi	r17,16
10012500:	8c7fffc4 	addi	r17,r17,-1
10012504:	180697fa 	slli	r3,r3,31
10012508:	8460703a 	and	r16,r16,r17
1001250c:	80a0b03a 	or	r16,r16,r2
10012510:	80c6b03a 	or	r3,r16,r3
10012514:	b005883a 	mov	r2,r22
10012518:	dfc01117 	ldw	ra,68(sp)
1001251c:	df001017 	ldw	fp,64(sp)
10012520:	ddc00f17 	ldw	r23,60(sp)
10012524:	dd800e17 	ldw	r22,56(sp)
10012528:	dd400d17 	ldw	r21,52(sp)
1001252c:	dd000c17 	ldw	r20,48(sp)
10012530:	dcc00b17 	ldw	r19,44(sp)
10012534:	dc800a17 	ldw	r18,40(sp)
10012538:	dc400917 	ldw	r17,36(sp)
1001253c:	dc000817 	ldw	r16,32(sp)
10012540:	dec01204 	addi	sp,sp,72
10012544:	f800283a 	ret
10012548:	2404b03a 	or	r2,r4,r16
1001254c:	202b883a 	mov	r21,r4
10012550:	10004426 	beq	r2,zero,10012664 <__muldf3+0x2ec>
10012554:	80015126 	beq	r16,zero,10012a9c <__muldf3+0x724>
10012558:	8009883a 	mov	r4,r16
1001255c:	d9800715 	stw	r6,28(sp)
10012560:	d9c00215 	stw	r7,8(sp)
10012564:	da400415 	stw	r9,16(sp)
10012568:	00136e40 	call	100136e4 <__clzsi2>
1001256c:	d9800717 	ldw	r6,28(sp)
10012570:	d9c00217 	ldw	r7,8(sp)
10012574:	da400417 	ldw	r9,16(sp)
10012578:	113ffd44 	addi	r4,r2,-11
1001257c:	00c00704 	movi	r3,28
10012580:	19014216 	blt	r3,r4,10012a8c <__muldf3+0x714>
10012584:	00c00744 	movi	r3,29
10012588:	15bffe04 	addi	r22,r2,-8
1001258c:	1907c83a 	sub	r3,r3,r4
10012590:	85a0983a 	sll	r16,r16,r22
10012594:	a8c6d83a 	srl	r3,r21,r3
10012598:	adac983a 	sll	r22,r21,r22
1001259c:	1c20b03a 	or	r16,r3,r16
100125a0:	1080fcc4 	addi	r2,r2,1011
100125a4:	00a9c83a 	sub	r20,zero,r2
100125a8:	002b883a 	mov	r21,zero
100125ac:	000b883a 	mov	r5,zero
100125b0:	003f9006 	br	100123f4 <__alt_data_end+0xf80123f4>
100125b4:	3446b03a 	or	r3,r6,r17
100125b8:	1800281e 	bne	r3,zero,1001265c <__muldf3+0x2e4>
100125bc:	0023883a 	mov	r17,zero
100125c0:	0025883a 	mov	r18,zero
100125c4:	01c00084 	movi	r7,2
100125c8:	003f9c06 	br	1001243c <__alt_data_end+0xf801243c>
100125cc:	3446b03a 	or	r3,r6,r17
100125d0:	18001e26 	beq	r3,zero,1001264c <__muldf3+0x2d4>
100125d4:	88012126 	beq	r17,zero,10012a5c <__muldf3+0x6e4>
100125d8:	8809883a 	mov	r4,r17
100125dc:	d9400215 	stw	r5,8(sp)
100125e0:	d9800715 	stw	r6,28(sp)
100125e4:	da400415 	stw	r9,16(sp)
100125e8:	da800315 	stw	r10,12(sp)
100125ec:	00136e40 	call	100136e4 <__clzsi2>
100125f0:	d9400217 	ldw	r5,8(sp)
100125f4:	d9800717 	ldw	r6,28(sp)
100125f8:	da400417 	ldw	r9,16(sp)
100125fc:	da800317 	ldw	r10,12(sp)
10012600:	113ffd44 	addi	r4,r2,-11
10012604:	00c00704 	movi	r3,28
10012608:	19011016 	blt	r3,r4,10012a4c <__muldf3+0x6d4>
1001260c:	00c00744 	movi	r3,29
10012610:	14bffe04 	addi	r18,r2,-8
10012614:	1907c83a 	sub	r3,r3,r4
10012618:	8ca2983a 	sll	r17,r17,r18
1001261c:	30c6d83a 	srl	r3,r6,r3
10012620:	34a4983a 	sll	r18,r6,r18
10012624:	1c62b03a 	or	r17,r3,r17
10012628:	1080fcc4 	addi	r2,r2,1011
1001262c:	0085c83a 	sub	r2,zero,r2
10012630:	000f883a 	mov	r7,zero
10012634:	003f8106 	br	1001243c <__alt_data_end+0xf801243c>
10012638:	3027883a 	mov	r19,r6
1001263c:	0081ffc4 	movi	r2,2047
10012640:	0021883a 	mov	r16,zero
10012644:	002d883a 	mov	r22,zero
10012648:	003faa06 	br	100124f4 <__alt_data_end+0xf80124f4>
1001264c:	0023883a 	mov	r17,zero
10012650:	0025883a 	mov	r18,zero
10012654:	01c00044 	movi	r7,1
10012658:	003f7806 	br	1001243c <__alt_data_end+0xf801243c>
1001265c:	01c000c4 	movi	r7,3
10012660:	003f7606 	br	1001243c <__alt_data_end+0xf801243c>
10012664:	05400104 	movi	r21,4
10012668:	0021883a 	mov	r16,zero
1001266c:	002d883a 	mov	r22,zero
10012670:	01400044 	movi	r5,1
10012674:	003f5f06 	br	100123f4 <__alt_data_end+0xf80123f4>
10012678:	05400304 	movi	r21,12
1001267c:	014000c4 	movi	r5,3
10012680:	003f5c06 	br	100123f4 <__alt_data_end+0xf80123f4>
10012684:	04000434 	movhi	r16,16
10012688:	0027883a 	mov	r19,zero
1001268c:	843fffc4 	addi	r16,r16,-1
10012690:	05bfffc4 	movi	r22,-1
10012694:	0081ffc4 	movi	r2,2047
10012698:	003f9606 	br	100124f4 <__alt_data_end+0xf80124f4>
1001269c:	8023883a 	mov	r17,r16
100126a0:	b025883a 	mov	r18,r22
100126a4:	280f883a 	mov	r7,r5
100126a8:	003f8806 	br	100124cc <__alt_data_end+0xf80124cc>
100126ac:	8023883a 	mov	r17,r16
100126b0:	b025883a 	mov	r18,r22
100126b4:	480d883a 	mov	r6,r9
100126b8:	280f883a 	mov	r7,r5
100126bc:	003f8306 	br	100124cc <__alt_data_end+0xf80124cc>
100126c0:	b026d43a 	srli	r19,r22,16
100126c4:	902ed43a 	srli	r23,r18,16
100126c8:	b5bfffcc 	andi	r22,r22,65535
100126cc:	94bfffcc 	andi	r18,r18,65535
100126d0:	b00b883a 	mov	r5,r22
100126d4:	9009883a 	mov	r4,r18
100126d8:	d8c00515 	stw	r3,20(sp)
100126dc:	d9800715 	stw	r6,28(sp)
100126e0:	da000615 	stw	r8,24(sp)
100126e4:	00069bc0 	call	100069bc <__mulsi3>
100126e8:	980b883a 	mov	r5,r19
100126ec:	9009883a 	mov	r4,r18
100126f0:	1029883a 	mov	r20,r2
100126f4:	00069bc0 	call	100069bc <__mulsi3>
100126f8:	b80b883a 	mov	r5,r23
100126fc:	9809883a 	mov	r4,r19
10012700:	102b883a 	mov	r21,r2
10012704:	00069bc0 	call	100069bc <__mulsi3>
10012708:	b809883a 	mov	r4,r23
1001270c:	b00b883a 	mov	r5,r22
10012710:	1039883a 	mov	fp,r2
10012714:	00069bc0 	call	100069bc <__mulsi3>
10012718:	a008d43a 	srli	r4,r20,16
1001271c:	1545883a 	add	r2,r2,r21
10012720:	d8c00517 	ldw	r3,20(sp)
10012724:	2085883a 	add	r2,r4,r2
10012728:	d9800717 	ldw	r6,28(sp)
1001272c:	da000617 	ldw	r8,24(sp)
10012730:	1540022e 	bgeu	r2,r21,1001273c <__muldf3+0x3c4>
10012734:	01000074 	movhi	r4,1
10012738:	e139883a 	add	fp,fp,r4
1001273c:	100e943a 	slli	r7,r2,16
10012740:	1004d43a 	srli	r2,r2,16
10012744:	882ad43a 	srli	r21,r17,16
10012748:	a53fffcc 	andi	r20,r20,65535
1001274c:	8c7fffcc 	andi	r17,r17,65535
10012750:	3d29883a 	add	r20,r7,r20
10012754:	b00b883a 	mov	r5,r22
10012758:	8809883a 	mov	r4,r17
1001275c:	d8c00515 	stw	r3,20(sp)
10012760:	d9800715 	stw	r6,28(sp)
10012764:	da000615 	stw	r8,24(sp)
10012768:	dd000115 	stw	r20,4(sp)
1001276c:	d8800015 	stw	r2,0(sp)
10012770:	00069bc0 	call	100069bc <__mulsi3>
10012774:	980b883a 	mov	r5,r19
10012778:	8809883a 	mov	r4,r17
1001277c:	d8800215 	stw	r2,8(sp)
10012780:	00069bc0 	call	100069bc <__mulsi3>
10012784:	9809883a 	mov	r4,r19
10012788:	a80b883a 	mov	r5,r21
1001278c:	1029883a 	mov	r20,r2
10012790:	00069bc0 	call	100069bc <__mulsi3>
10012794:	b00b883a 	mov	r5,r22
10012798:	a809883a 	mov	r4,r21
1001279c:	d8800415 	stw	r2,16(sp)
100127a0:	00069bc0 	call	100069bc <__mulsi3>
100127a4:	d9c00217 	ldw	r7,8(sp)
100127a8:	1505883a 	add	r2,r2,r20
100127ac:	d8c00517 	ldw	r3,20(sp)
100127b0:	3826d43a 	srli	r19,r7,16
100127b4:	d9800717 	ldw	r6,28(sp)
100127b8:	da000617 	ldw	r8,24(sp)
100127bc:	9885883a 	add	r2,r19,r2
100127c0:	da400417 	ldw	r9,16(sp)
100127c4:	1500022e 	bgeu	r2,r20,100127d0 <__muldf3+0x458>
100127c8:	01000074 	movhi	r4,1
100127cc:	4913883a 	add	r9,r9,r4
100127d0:	1028d43a 	srli	r20,r2,16
100127d4:	1004943a 	slli	r2,r2,16
100127d8:	802cd43a 	srli	r22,r16,16
100127dc:	843fffcc 	andi	r16,r16,65535
100127e0:	3cffffcc 	andi	r19,r7,65535
100127e4:	9009883a 	mov	r4,r18
100127e8:	800b883a 	mov	r5,r16
100127ec:	a269883a 	add	r20,r20,r9
100127f0:	d8c00515 	stw	r3,20(sp)
100127f4:	d9800715 	stw	r6,28(sp)
100127f8:	da000615 	stw	r8,24(sp)
100127fc:	14e7883a 	add	r19,r2,r19
10012800:	00069bc0 	call	100069bc <__mulsi3>
10012804:	9009883a 	mov	r4,r18
10012808:	b00b883a 	mov	r5,r22
1001280c:	d8800315 	stw	r2,12(sp)
10012810:	00069bc0 	call	100069bc <__mulsi3>
10012814:	b809883a 	mov	r4,r23
10012818:	b00b883a 	mov	r5,r22
1001281c:	d8800215 	stw	r2,8(sp)
10012820:	00069bc0 	call	100069bc <__mulsi3>
10012824:	b80b883a 	mov	r5,r23
10012828:	8009883a 	mov	r4,r16
1001282c:	d8800415 	stw	r2,16(sp)
10012830:	00069bc0 	call	100069bc <__mulsi3>
10012834:	da800317 	ldw	r10,12(sp)
10012838:	d9c00217 	ldw	r7,8(sp)
1001283c:	d9000017 	ldw	r4,0(sp)
10012840:	502ed43a 	srli	r23,r10,16
10012844:	11c5883a 	add	r2,r2,r7
10012848:	24e5883a 	add	r18,r4,r19
1001284c:	b885883a 	add	r2,r23,r2
10012850:	d8c00517 	ldw	r3,20(sp)
10012854:	d9800717 	ldw	r6,28(sp)
10012858:	da000617 	ldw	r8,24(sp)
1001285c:	da400417 	ldw	r9,16(sp)
10012860:	11c0022e 	bgeu	r2,r7,1001286c <__muldf3+0x4f4>
10012864:	01000074 	movhi	r4,1
10012868:	4913883a 	add	r9,r9,r4
1001286c:	100ed43a 	srli	r7,r2,16
10012870:	1004943a 	slli	r2,r2,16
10012874:	55ffffcc 	andi	r23,r10,65535
10012878:	3a53883a 	add	r9,r7,r9
1001287c:	8809883a 	mov	r4,r17
10012880:	800b883a 	mov	r5,r16
10012884:	d8c00515 	stw	r3,20(sp)
10012888:	d9800715 	stw	r6,28(sp)
1001288c:	da000615 	stw	r8,24(sp)
10012890:	da400415 	stw	r9,16(sp)
10012894:	15ef883a 	add	r23,r2,r23
10012898:	00069bc0 	call	100069bc <__mulsi3>
1001289c:	8809883a 	mov	r4,r17
100128a0:	b00b883a 	mov	r5,r22
100128a4:	d8800215 	stw	r2,8(sp)
100128a8:	00069bc0 	call	100069bc <__mulsi3>
100128ac:	b00b883a 	mov	r5,r22
100128b0:	a809883a 	mov	r4,r21
100128b4:	d8800315 	stw	r2,12(sp)
100128b8:	00069bc0 	call	100069bc <__mulsi3>
100128bc:	8009883a 	mov	r4,r16
100128c0:	a80b883a 	mov	r5,r21
100128c4:	1023883a 	mov	r17,r2
100128c8:	00069bc0 	call	100069bc <__mulsi3>
100128cc:	d9c00217 	ldw	r7,8(sp)
100128d0:	da800317 	ldw	r10,12(sp)
100128d4:	d8c00517 	ldw	r3,20(sp)
100128d8:	3808d43a 	srli	r4,r7,16
100128dc:	1285883a 	add	r2,r2,r10
100128e0:	d9800717 	ldw	r6,28(sp)
100128e4:	2085883a 	add	r2,r4,r2
100128e8:	da000617 	ldw	r8,24(sp)
100128ec:	da400417 	ldw	r9,16(sp)
100128f0:	1280022e 	bgeu	r2,r10,100128fc <__muldf3+0x584>
100128f4:	01000074 	movhi	r4,1
100128f8:	8923883a 	add	r17,r17,r4
100128fc:	1008943a 	slli	r4,r2,16
10012900:	39ffffcc 	andi	r7,r7,65535
10012904:	e4b9883a 	add	fp,fp,r18
10012908:	21cf883a 	add	r7,r4,r7
1001290c:	e4e7803a 	cmpltu	r19,fp,r19
10012910:	3d0f883a 	add	r7,r7,r20
10012914:	bf39883a 	add	fp,r23,fp
10012918:	99c9883a 	add	r4,r19,r7
1001291c:	e5ef803a 	cmpltu	r23,fp,r23
10012920:	490b883a 	add	r5,r9,r4
10012924:	1004d43a 	srli	r2,r2,16
10012928:	b965883a 	add	r18,r23,r5
1001292c:	24c9803a 	cmpltu	r4,r4,r19
10012930:	3d29803a 	cmpltu	r20,r7,r20
10012934:	a128b03a 	or	r20,r20,r4
10012938:	95ef803a 	cmpltu	r23,r18,r23
1001293c:	2a53803a 	cmpltu	r9,r5,r9
10012940:	a0a9883a 	add	r20,r20,r2
10012944:	4deeb03a 	or	r23,r9,r23
10012948:	a5ef883a 	add	r23,r20,r23
1001294c:	bc63883a 	add	r17,r23,r17
10012950:	e004927a 	slli	r2,fp,9
10012954:	d9000117 	ldw	r4,4(sp)
10012958:	882e927a 	slli	r23,r17,9
1001295c:	9022d5fa 	srli	r17,r18,23
10012960:	e038d5fa 	srli	fp,fp,23
10012964:	1104b03a 	or	r2,r2,r4
10012968:	9024927a 	slli	r18,r18,9
1001296c:	1004c03a 	cmpne	r2,r2,zero
10012970:	bc62b03a 	or	r17,r23,r17
10012974:	1738b03a 	or	fp,r2,fp
10012978:	8880402c 	andhi	r2,r17,256
1001297c:	e4a4b03a 	or	r18,fp,r18
10012980:	10000726 	beq	r2,zero,100129a0 <__muldf3+0x628>
10012984:	9006d07a 	srli	r3,r18,1
10012988:	880497fa 	slli	r2,r17,31
1001298c:	9480004c 	andi	r18,r18,1
10012990:	8822d07a 	srli	r17,r17,1
10012994:	1ca4b03a 	or	r18,r3,r18
10012998:	14a4b03a 	or	r18,r2,r18
1001299c:	4007883a 	mov	r3,r8
100129a0:	1880ffc4 	addi	r2,r3,1023
100129a4:	0080460e 	bge	zero,r2,10012ac0 <__muldf3+0x748>
100129a8:	910001cc 	andi	r4,r18,7
100129ac:	20000726 	beq	r4,zero,100129cc <__muldf3+0x654>
100129b0:	910003cc 	andi	r4,r18,15
100129b4:	01400104 	movi	r5,4
100129b8:	21400426 	beq	r4,r5,100129cc <__muldf3+0x654>
100129bc:	9149883a 	add	r4,r18,r5
100129c0:	24a5803a 	cmpltu	r18,r4,r18
100129c4:	8ca3883a 	add	r17,r17,r18
100129c8:	2025883a 	mov	r18,r4
100129cc:	8900402c 	andhi	r4,r17,256
100129d0:	20000426 	beq	r4,zero,100129e4 <__muldf3+0x66c>
100129d4:	18810004 	addi	r2,r3,1024
100129d8:	00ffc034 	movhi	r3,65280
100129dc:	18ffffc4 	addi	r3,r3,-1
100129e0:	88e2703a 	and	r17,r17,r3
100129e4:	00c1ff84 	movi	r3,2046
100129e8:	18bf1316 	blt	r3,r2,10012638 <__alt_data_end+0xf8012638>
100129ec:	882c977a 	slli	r22,r17,29
100129f0:	9024d0fa 	srli	r18,r18,3
100129f4:	8822927a 	slli	r17,r17,9
100129f8:	1081ffcc 	andi	r2,r2,2047
100129fc:	b4acb03a 	or	r22,r22,r18
10012a00:	8820d33a 	srli	r16,r17,12
10012a04:	3027883a 	mov	r19,r6
10012a08:	003eba06 	br	100124f4 <__alt_data_end+0xf80124f4>
10012a0c:	8080022c 	andhi	r2,r16,8
10012a10:	10000926 	beq	r2,zero,10012a38 <__muldf3+0x6c0>
10012a14:	8880022c 	andhi	r2,r17,8
10012a18:	1000071e 	bne	r2,zero,10012a38 <__muldf3+0x6c0>
10012a1c:	00800434 	movhi	r2,16
10012a20:	8c000234 	orhi	r16,r17,8
10012a24:	10bfffc4 	addi	r2,r2,-1
10012a28:	e027883a 	mov	r19,fp
10012a2c:	80a0703a 	and	r16,r16,r2
10012a30:	902d883a 	mov	r22,r18
10012a34:	003f1706 	br	10012694 <__alt_data_end+0xf8012694>
10012a38:	00800434 	movhi	r2,16
10012a3c:	84000234 	orhi	r16,r16,8
10012a40:	10bfffc4 	addi	r2,r2,-1
10012a44:	80a0703a 	and	r16,r16,r2
10012a48:	003f1206 	br	10012694 <__alt_data_end+0xf8012694>
10012a4c:	147ff604 	addi	r17,r2,-40
10012a50:	3462983a 	sll	r17,r6,r17
10012a54:	0025883a 	mov	r18,zero
10012a58:	003ef306 	br	10012628 <__alt_data_end+0xf8012628>
10012a5c:	3009883a 	mov	r4,r6
10012a60:	d9400215 	stw	r5,8(sp)
10012a64:	d9800715 	stw	r6,28(sp)
10012a68:	da400415 	stw	r9,16(sp)
10012a6c:	da800315 	stw	r10,12(sp)
10012a70:	00136e40 	call	100136e4 <__clzsi2>
10012a74:	10800804 	addi	r2,r2,32
10012a78:	da800317 	ldw	r10,12(sp)
10012a7c:	da400417 	ldw	r9,16(sp)
10012a80:	d9800717 	ldw	r6,28(sp)
10012a84:	d9400217 	ldw	r5,8(sp)
10012a88:	003edd06 	br	10012600 <__alt_data_end+0xf8012600>
10012a8c:	143ff604 	addi	r16,r2,-40
10012a90:	ac20983a 	sll	r16,r21,r16
10012a94:	002d883a 	mov	r22,zero
10012a98:	003ec106 	br	100125a0 <__alt_data_end+0xf80125a0>
10012a9c:	d9800715 	stw	r6,28(sp)
10012aa0:	d9c00215 	stw	r7,8(sp)
10012aa4:	da400415 	stw	r9,16(sp)
10012aa8:	00136e40 	call	100136e4 <__clzsi2>
10012aac:	10800804 	addi	r2,r2,32
10012ab0:	da400417 	ldw	r9,16(sp)
10012ab4:	d9c00217 	ldw	r7,8(sp)
10012ab8:	d9800717 	ldw	r6,28(sp)
10012abc:	003eae06 	br	10012578 <__alt_data_end+0xf8012578>
10012ac0:	00c00044 	movi	r3,1
10012ac4:	1887c83a 	sub	r3,r3,r2
10012ac8:	01000e04 	movi	r4,56
10012acc:	20fe8516 	blt	r4,r3,100124e4 <__alt_data_end+0xf80124e4>
10012ad0:	010007c4 	movi	r4,31
10012ad4:	20c01b16 	blt	r4,r3,10012b44 <__muldf3+0x7cc>
10012ad8:	00800804 	movi	r2,32
10012adc:	10c5c83a 	sub	r2,r2,r3
10012ae0:	888a983a 	sll	r5,r17,r2
10012ae4:	90c8d83a 	srl	r4,r18,r3
10012ae8:	9084983a 	sll	r2,r18,r2
10012aec:	88e2d83a 	srl	r17,r17,r3
10012af0:	2906b03a 	or	r3,r5,r4
10012af4:	1004c03a 	cmpne	r2,r2,zero
10012af8:	1886b03a 	or	r3,r3,r2
10012afc:	188001cc 	andi	r2,r3,7
10012b00:	10000726 	beq	r2,zero,10012b20 <__muldf3+0x7a8>
10012b04:	188003cc 	andi	r2,r3,15
10012b08:	01000104 	movi	r4,4
10012b0c:	11000426 	beq	r2,r4,10012b20 <__muldf3+0x7a8>
10012b10:	1805883a 	mov	r2,r3
10012b14:	10c00104 	addi	r3,r2,4
10012b18:	1885803a 	cmpltu	r2,r3,r2
10012b1c:	88a3883a 	add	r17,r17,r2
10012b20:	8880202c 	andhi	r2,r17,128
10012b24:	10001c26 	beq	r2,zero,10012b98 <__muldf3+0x820>
10012b28:	3027883a 	mov	r19,r6
10012b2c:	00800044 	movi	r2,1
10012b30:	0021883a 	mov	r16,zero
10012b34:	002d883a 	mov	r22,zero
10012b38:	003e6e06 	br	100124f4 <__alt_data_end+0xf80124f4>
10012b3c:	4007883a 	mov	r3,r8
10012b40:	003f9706 	br	100129a0 <__alt_data_end+0xf80129a0>
10012b44:	017ff844 	movi	r5,-31
10012b48:	2885c83a 	sub	r2,r5,r2
10012b4c:	888ad83a 	srl	r5,r17,r2
10012b50:	00800804 	movi	r2,32
10012b54:	18801a26 	beq	r3,r2,10012bc0 <__muldf3+0x848>
10012b58:	01001004 	movi	r4,64
10012b5c:	20c7c83a 	sub	r3,r4,r3
10012b60:	88e2983a 	sll	r17,r17,r3
10012b64:	8ca4b03a 	or	r18,r17,r18
10012b68:	9004c03a 	cmpne	r2,r18,zero
10012b6c:	2884b03a 	or	r2,r5,r2
10012b70:	144001cc 	andi	r17,r2,7
10012b74:	88000d1e 	bne	r17,zero,10012bac <__muldf3+0x834>
10012b78:	0021883a 	mov	r16,zero
10012b7c:	102cd0fa 	srli	r22,r2,3
10012b80:	3027883a 	mov	r19,r6
10012b84:	0005883a 	mov	r2,zero
10012b88:	b46cb03a 	or	r22,r22,r17
10012b8c:	003e5906 	br	100124f4 <__alt_data_end+0xf80124f4>
10012b90:	1007883a 	mov	r3,r2
10012b94:	0023883a 	mov	r17,zero
10012b98:	8820927a 	slli	r16,r17,9
10012b9c:	1805883a 	mov	r2,r3
10012ba0:	8822977a 	slli	r17,r17,29
10012ba4:	8020d33a 	srli	r16,r16,12
10012ba8:	003ff406 	br	10012b7c <__alt_data_end+0xf8012b7c>
10012bac:	10c003cc 	andi	r3,r2,15
10012bb0:	01000104 	movi	r4,4
10012bb4:	193ff626 	beq	r3,r4,10012b90 <__alt_data_end+0xf8012b90>
10012bb8:	0023883a 	mov	r17,zero
10012bbc:	003fd506 	br	10012b14 <__alt_data_end+0xf8012b14>
10012bc0:	0023883a 	mov	r17,zero
10012bc4:	003fe706 	br	10012b64 <__alt_data_end+0xf8012b64>
10012bc8:	00800434 	movhi	r2,16
10012bcc:	8c000234 	orhi	r16,r17,8
10012bd0:	10bfffc4 	addi	r2,r2,-1
10012bd4:	3027883a 	mov	r19,r6
10012bd8:	80a0703a 	and	r16,r16,r2
10012bdc:	902d883a 	mov	r22,r18
10012be0:	003eac06 	br	10012694 <__alt_data_end+0xf8012694>

10012be4 <__subdf3>:
10012be4:	02000434 	movhi	r8,16
10012be8:	423fffc4 	addi	r8,r8,-1
10012bec:	defffb04 	addi	sp,sp,-20
10012bf0:	2a14703a 	and	r10,r5,r8
10012bf4:	3812d53a 	srli	r9,r7,20
10012bf8:	3a10703a 	and	r8,r7,r8
10012bfc:	2006d77a 	srli	r3,r4,29
10012c00:	3004d77a 	srli	r2,r6,29
10012c04:	dc000015 	stw	r16,0(sp)
10012c08:	501490fa 	slli	r10,r10,3
10012c0c:	2820d53a 	srli	r16,r5,20
10012c10:	401090fa 	slli	r8,r8,3
10012c14:	dc800215 	stw	r18,8(sp)
10012c18:	dc400115 	stw	r17,4(sp)
10012c1c:	dfc00415 	stw	ra,16(sp)
10012c20:	202290fa 	slli	r17,r4,3
10012c24:	dcc00315 	stw	r19,12(sp)
10012c28:	4a41ffcc 	andi	r9,r9,2047
10012c2c:	0101ffc4 	movi	r4,2047
10012c30:	2824d7fa 	srli	r18,r5,31
10012c34:	8401ffcc 	andi	r16,r16,2047
10012c38:	50c6b03a 	or	r3,r10,r3
10012c3c:	380ed7fa 	srli	r7,r7,31
10012c40:	408ab03a 	or	r5,r8,r2
10012c44:	300c90fa 	slli	r6,r6,3
10012c48:	49009626 	beq	r9,r4,10012ea4 <__subdf3+0x2c0>
10012c4c:	39c0005c 	xori	r7,r7,1
10012c50:	8245c83a 	sub	r2,r16,r9
10012c54:	3c807426 	beq	r7,r18,10012e28 <__subdf3+0x244>
10012c58:	0080af0e 	bge	zero,r2,10012f18 <__subdf3+0x334>
10012c5c:	48002a1e 	bne	r9,zero,10012d08 <__subdf3+0x124>
10012c60:	2988b03a 	or	r4,r5,r6
10012c64:	20009a1e 	bne	r4,zero,10012ed0 <__subdf3+0x2ec>
10012c68:	888001cc 	andi	r2,r17,7
10012c6c:	10000726 	beq	r2,zero,10012c8c <__subdf3+0xa8>
10012c70:	888003cc 	andi	r2,r17,15
10012c74:	01000104 	movi	r4,4
10012c78:	11000426 	beq	r2,r4,10012c8c <__subdf3+0xa8>
10012c7c:	890b883a 	add	r5,r17,r4
10012c80:	2c63803a 	cmpltu	r17,r5,r17
10012c84:	1c47883a 	add	r3,r3,r17
10012c88:	2823883a 	mov	r17,r5
10012c8c:	1880202c 	andhi	r2,r3,128
10012c90:	10005926 	beq	r2,zero,10012df8 <__subdf3+0x214>
10012c94:	84000044 	addi	r16,r16,1
10012c98:	0081ffc4 	movi	r2,2047
10012c9c:	8080be26 	beq	r16,r2,10012f98 <__subdf3+0x3b4>
10012ca0:	017fe034 	movhi	r5,65408
10012ca4:	297fffc4 	addi	r5,r5,-1
10012ca8:	1946703a 	and	r3,r3,r5
10012cac:	1804977a 	slli	r2,r3,29
10012cb0:	1806927a 	slli	r3,r3,9
10012cb4:	8822d0fa 	srli	r17,r17,3
10012cb8:	8401ffcc 	andi	r16,r16,2047
10012cbc:	180ad33a 	srli	r5,r3,12
10012cc0:	9100004c 	andi	r4,r18,1
10012cc4:	1444b03a 	or	r2,r2,r17
10012cc8:	80c1ffcc 	andi	r3,r16,2047
10012ccc:	1820953a 	slli	r16,r3,20
10012cd0:	20c03fcc 	andi	r3,r4,255
10012cd4:	180897fa 	slli	r4,r3,31
10012cd8:	00c00434 	movhi	r3,16
10012cdc:	18ffffc4 	addi	r3,r3,-1
10012ce0:	28c6703a 	and	r3,r5,r3
10012ce4:	1c06b03a 	or	r3,r3,r16
10012ce8:	1906b03a 	or	r3,r3,r4
10012cec:	dfc00417 	ldw	ra,16(sp)
10012cf0:	dcc00317 	ldw	r19,12(sp)
10012cf4:	dc800217 	ldw	r18,8(sp)
10012cf8:	dc400117 	ldw	r17,4(sp)
10012cfc:	dc000017 	ldw	r16,0(sp)
10012d00:	dec00504 	addi	sp,sp,20
10012d04:	f800283a 	ret
10012d08:	0101ffc4 	movi	r4,2047
10012d0c:	813fd626 	beq	r16,r4,10012c68 <__alt_data_end+0xf8012c68>
10012d10:	29402034 	orhi	r5,r5,128
10012d14:	01000e04 	movi	r4,56
10012d18:	2080a316 	blt	r4,r2,10012fa8 <__subdf3+0x3c4>
10012d1c:	010007c4 	movi	r4,31
10012d20:	2080c616 	blt	r4,r2,1001303c <__subdf3+0x458>
10012d24:	01000804 	movi	r4,32
10012d28:	2089c83a 	sub	r4,r4,r2
10012d2c:	2910983a 	sll	r8,r5,r4
10012d30:	308ed83a 	srl	r7,r6,r2
10012d34:	3108983a 	sll	r4,r6,r4
10012d38:	2884d83a 	srl	r2,r5,r2
10012d3c:	41ccb03a 	or	r6,r8,r7
10012d40:	2008c03a 	cmpne	r4,r4,zero
10012d44:	310cb03a 	or	r6,r6,r4
10012d48:	898dc83a 	sub	r6,r17,r6
10012d4c:	89a3803a 	cmpltu	r17,r17,r6
10012d50:	1887c83a 	sub	r3,r3,r2
10012d54:	1c47c83a 	sub	r3,r3,r17
10012d58:	3023883a 	mov	r17,r6
10012d5c:	1880202c 	andhi	r2,r3,128
10012d60:	10002326 	beq	r2,zero,10012df0 <__subdf3+0x20c>
10012d64:	04c02034 	movhi	r19,128
10012d68:	9cffffc4 	addi	r19,r19,-1
10012d6c:	1ce6703a 	and	r19,r3,r19
10012d70:	98007a26 	beq	r19,zero,10012f5c <__subdf3+0x378>
10012d74:	9809883a 	mov	r4,r19
10012d78:	00136e40 	call	100136e4 <__clzsi2>
10012d7c:	113ffe04 	addi	r4,r2,-8
10012d80:	00c007c4 	movi	r3,31
10012d84:	19007b16 	blt	r3,r4,10012f74 <__subdf3+0x390>
10012d88:	00800804 	movi	r2,32
10012d8c:	1105c83a 	sub	r2,r2,r4
10012d90:	8884d83a 	srl	r2,r17,r2
10012d94:	9906983a 	sll	r3,r19,r4
10012d98:	8922983a 	sll	r17,r17,r4
10012d9c:	10c4b03a 	or	r2,r2,r3
10012da0:	24007816 	blt	r4,r16,10012f84 <__subdf3+0x3a0>
10012da4:	2421c83a 	sub	r16,r4,r16
10012da8:	80c00044 	addi	r3,r16,1
10012dac:	010007c4 	movi	r4,31
10012db0:	20c09516 	blt	r4,r3,10013008 <__subdf3+0x424>
10012db4:	01400804 	movi	r5,32
10012db8:	28cbc83a 	sub	r5,r5,r3
10012dbc:	88c8d83a 	srl	r4,r17,r3
10012dc0:	8962983a 	sll	r17,r17,r5
10012dc4:	114a983a 	sll	r5,r2,r5
10012dc8:	10c6d83a 	srl	r3,r2,r3
10012dcc:	8804c03a 	cmpne	r2,r17,zero
10012dd0:	290ab03a 	or	r5,r5,r4
10012dd4:	28a2b03a 	or	r17,r5,r2
10012dd8:	0021883a 	mov	r16,zero
10012ddc:	003fa206 	br	10012c68 <__alt_data_end+0xf8012c68>
10012de0:	2090b03a 	or	r8,r4,r2
10012de4:	40018e26 	beq	r8,zero,10013420 <__subdf3+0x83c>
10012de8:	1007883a 	mov	r3,r2
10012dec:	2023883a 	mov	r17,r4
10012df0:	888001cc 	andi	r2,r17,7
10012df4:	103f9e1e 	bne	r2,zero,10012c70 <__alt_data_end+0xf8012c70>
10012df8:	1804977a 	slli	r2,r3,29
10012dfc:	8822d0fa 	srli	r17,r17,3
10012e00:	1810d0fa 	srli	r8,r3,3
10012e04:	9100004c 	andi	r4,r18,1
10012e08:	1444b03a 	or	r2,r2,r17
10012e0c:	00c1ffc4 	movi	r3,2047
10012e10:	80c02826 	beq	r16,r3,10012eb4 <__subdf3+0x2d0>
10012e14:	01400434 	movhi	r5,16
10012e18:	297fffc4 	addi	r5,r5,-1
10012e1c:	80e0703a 	and	r16,r16,r3
10012e20:	414a703a 	and	r5,r8,r5
10012e24:	003fa806 	br	10012cc8 <__alt_data_end+0xf8012cc8>
10012e28:	0080630e 	bge	zero,r2,10012fb8 <__subdf3+0x3d4>
10012e2c:	48003026 	beq	r9,zero,10012ef0 <__subdf3+0x30c>
10012e30:	0101ffc4 	movi	r4,2047
10012e34:	813f8c26 	beq	r16,r4,10012c68 <__alt_data_end+0xf8012c68>
10012e38:	29402034 	orhi	r5,r5,128
10012e3c:	01000e04 	movi	r4,56
10012e40:	2080a90e 	bge	r4,r2,100130e8 <__subdf3+0x504>
10012e44:	298cb03a 	or	r6,r5,r6
10012e48:	3012c03a 	cmpne	r9,r6,zero
10012e4c:	0005883a 	mov	r2,zero
10012e50:	4c53883a 	add	r9,r9,r17
10012e54:	4c63803a 	cmpltu	r17,r9,r17
10012e58:	10c7883a 	add	r3,r2,r3
10012e5c:	88c7883a 	add	r3,r17,r3
10012e60:	4823883a 	mov	r17,r9
10012e64:	1880202c 	andhi	r2,r3,128
10012e68:	1000d026 	beq	r2,zero,100131ac <__subdf3+0x5c8>
10012e6c:	84000044 	addi	r16,r16,1
10012e70:	0081ffc4 	movi	r2,2047
10012e74:	8080fe26 	beq	r16,r2,10013270 <__subdf3+0x68c>
10012e78:	00bfe034 	movhi	r2,65408
10012e7c:	10bfffc4 	addi	r2,r2,-1
10012e80:	1886703a 	and	r3,r3,r2
10012e84:	880ad07a 	srli	r5,r17,1
10012e88:	180497fa 	slli	r2,r3,31
10012e8c:	8900004c 	andi	r4,r17,1
10012e90:	2922b03a 	or	r17,r5,r4
10012e94:	1806d07a 	srli	r3,r3,1
10012e98:	1462b03a 	or	r17,r2,r17
10012e9c:	3825883a 	mov	r18,r7
10012ea0:	003f7106 	br	10012c68 <__alt_data_end+0xf8012c68>
10012ea4:	2984b03a 	or	r2,r5,r6
10012ea8:	103f6826 	beq	r2,zero,10012c4c <__alt_data_end+0xf8012c4c>
10012eac:	39c03fcc 	andi	r7,r7,255
10012eb0:	003f6706 	br	10012c50 <__alt_data_end+0xf8012c50>
10012eb4:	4086b03a 	or	r3,r8,r2
10012eb8:	18015226 	beq	r3,zero,10013404 <__subdf3+0x820>
10012ebc:	00c00434 	movhi	r3,16
10012ec0:	41400234 	orhi	r5,r8,8
10012ec4:	18ffffc4 	addi	r3,r3,-1
10012ec8:	28ca703a 	and	r5,r5,r3
10012ecc:	003f7e06 	br	10012cc8 <__alt_data_end+0xf8012cc8>
10012ed0:	10bfffc4 	addi	r2,r2,-1
10012ed4:	1000491e 	bne	r2,zero,10012ffc <__subdf3+0x418>
10012ed8:	898fc83a 	sub	r7,r17,r6
10012edc:	89e3803a 	cmpltu	r17,r17,r7
10012ee0:	1947c83a 	sub	r3,r3,r5
10012ee4:	1c47c83a 	sub	r3,r3,r17
10012ee8:	3823883a 	mov	r17,r7
10012eec:	003f9b06 	br	10012d5c <__alt_data_end+0xf8012d5c>
10012ef0:	2988b03a 	or	r4,r5,r6
10012ef4:	203f5c26 	beq	r4,zero,10012c68 <__alt_data_end+0xf8012c68>
10012ef8:	10bfffc4 	addi	r2,r2,-1
10012efc:	1000931e 	bne	r2,zero,1001314c <__subdf3+0x568>
10012f00:	898d883a 	add	r6,r17,r6
10012f04:	3463803a 	cmpltu	r17,r6,r17
10012f08:	1947883a 	add	r3,r3,r5
10012f0c:	88c7883a 	add	r3,r17,r3
10012f10:	3023883a 	mov	r17,r6
10012f14:	003fd306 	br	10012e64 <__alt_data_end+0xf8012e64>
10012f18:	1000541e 	bne	r2,zero,1001306c <__subdf3+0x488>
10012f1c:	80800044 	addi	r2,r16,1
10012f20:	1081ffcc 	andi	r2,r2,2047
10012f24:	01000044 	movi	r4,1
10012f28:	2080a20e 	bge	r4,r2,100131b4 <__subdf3+0x5d0>
10012f2c:	8989c83a 	sub	r4,r17,r6
10012f30:	8905803a 	cmpltu	r2,r17,r4
10012f34:	1967c83a 	sub	r19,r3,r5
10012f38:	98a7c83a 	sub	r19,r19,r2
10012f3c:	9880202c 	andhi	r2,r19,128
10012f40:	10006326 	beq	r2,zero,100130d0 <__subdf3+0x4ec>
10012f44:	3463c83a 	sub	r17,r6,r17
10012f48:	28c7c83a 	sub	r3,r5,r3
10012f4c:	344d803a 	cmpltu	r6,r6,r17
10012f50:	19a7c83a 	sub	r19,r3,r6
10012f54:	3825883a 	mov	r18,r7
10012f58:	983f861e 	bne	r19,zero,10012d74 <__alt_data_end+0xf8012d74>
10012f5c:	8809883a 	mov	r4,r17
10012f60:	00136e40 	call	100136e4 <__clzsi2>
10012f64:	10800804 	addi	r2,r2,32
10012f68:	113ffe04 	addi	r4,r2,-8
10012f6c:	00c007c4 	movi	r3,31
10012f70:	193f850e 	bge	r3,r4,10012d88 <__alt_data_end+0xf8012d88>
10012f74:	10bff604 	addi	r2,r2,-40
10012f78:	8884983a 	sll	r2,r17,r2
10012f7c:	0023883a 	mov	r17,zero
10012f80:	243f880e 	bge	r4,r16,10012da4 <__alt_data_end+0xf8012da4>
10012f84:	00ffe034 	movhi	r3,65408
10012f88:	18ffffc4 	addi	r3,r3,-1
10012f8c:	8121c83a 	sub	r16,r16,r4
10012f90:	10c6703a 	and	r3,r2,r3
10012f94:	003f3406 	br	10012c68 <__alt_data_end+0xf8012c68>
10012f98:	9100004c 	andi	r4,r18,1
10012f9c:	000b883a 	mov	r5,zero
10012fa0:	0005883a 	mov	r2,zero
10012fa4:	003f4806 	br	10012cc8 <__alt_data_end+0xf8012cc8>
10012fa8:	298cb03a 	or	r6,r5,r6
10012fac:	300cc03a 	cmpne	r6,r6,zero
10012fb0:	0005883a 	mov	r2,zero
10012fb4:	003f6406 	br	10012d48 <__alt_data_end+0xf8012d48>
10012fb8:	10009a1e 	bne	r2,zero,10013224 <__subdf3+0x640>
10012fbc:	82400044 	addi	r9,r16,1
10012fc0:	4881ffcc 	andi	r2,r9,2047
10012fc4:	02800044 	movi	r10,1
10012fc8:	5080670e 	bge	r10,r2,10013168 <__subdf3+0x584>
10012fcc:	0081ffc4 	movi	r2,2047
10012fd0:	4880af26 	beq	r9,r2,10013290 <__subdf3+0x6ac>
10012fd4:	898d883a 	add	r6,r17,r6
10012fd8:	1945883a 	add	r2,r3,r5
10012fdc:	3447803a 	cmpltu	r3,r6,r17
10012fe0:	1887883a 	add	r3,r3,r2
10012fe4:	182297fa 	slli	r17,r3,31
10012fe8:	300cd07a 	srli	r6,r6,1
10012fec:	1806d07a 	srli	r3,r3,1
10012ff0:	4821883a 	mov	r16,r9
10012ff4:	89a2b03a 	or	r17,r17,r6
10012ff8:	003f1b06 	br	10012c68 <__alt_data_end+0xf8012c68>
10012ffc:	0101ffc4 	movi	r4,2047
10013000:	813f441e 	bne	r16,r4,10012d14 <__alt_data_end+0xf8012d14>
10013004:	003f1806 	br	10012c68 <__alt_data_end+0xf8012c68>
10013008:	843ff844 	addi	r16,r16,-31
1001300c:	01400804 	movi	r5,32
10013010:	1408d83a 	srl	r4,r2,r16
10013014:	19405026 	beq	r3,r5,10013158 <__subdf3+0x574>
10013018:	01401004 	movi	r5,64
1001301c:	28c7c83a 	sub	r3,r5,r3
10013020:	10c4983a 	sll	r2,r2,r3
10013024:	88a2b03a 	or	r17,r17,r2
10013028:	8822c03a 	cmpne	r17,r17,zero
1001302c:	2462b03a 	or	r17,r4,r17
10013030:	0007883a 	mov	r3,zero
10013034:	0021883a 	mov	r16,zero
10013038:	003f6d06 	br	10012df0 <__alt_data_end+0xf8012df0>
1001303c:	11fff804 	addi	r7,r2,-32
10013040:	01000804 	movi	r4,32
10013044:	29ced83a 	srl	r7,r5,r7
10013048:	11004526 	beq	r2,r4,10013160 <__subdf3+0x57c>
1001304c:	01001004 	movi	r4,64
10013050:	2089c83a 	sub	r4,r4,r2
10013054:	2904983a 	sll	r2,r5,r4
10013058:	118cb03a 	or	r6,r2,r6
1001305c:	300cc03a 	cmpne	r6,r6,zero
10013060:	398cb03a 	or	r6,r7,r6
10013064:	0005883a 	mov	r2,zero
10013068:	003f3706 	br	10012d48 <__alt_data_end+0xf8012d48>
1001306c:	80002a26 	beq	r16,zero,10013118 <__subdf3+0x534>
10013070:	0101ffc4 	movi	r4,2047
10013074:	49006626 	beq	r9,r4,10013210 <__subdf3+0x62c>
10013078:	0085c83a 	sub	r2,zero,r2
1001307c:	18c02034 	orhi	r3,r3,128
10013080:	01000e04 	movi	r4,56
10013084:	20807e16 	blt	r4,r2,10013280 <__subdf3+0x69c>
10013088:	010007c4 	movi	r4,31
1001308c:	2080e716 	blt	r4,r2,1001342c <__subdf3+0x848>
10013090:	01000804 	movi	r4,32
10013094:	2089c83a 	sub	r4,r4,r2
10013098:	1914983a 	sll	r10,r3,r4
1001309c:	8890d83a 	srl	r8,r17,r2
100130a0:	8908983a 	sll	r4,r17,r4
100130a4:	1884d83a 	srl	r2,r3,r2
100130a8:	5222b03a 	or	r17,r10,r8
100130ac:	2006c03a 	cmpne	r3,r4,zero
100130b0:	88e2b03a 	or	r17,r17,r3
100130b4:	3463c83a 	sub	r17,r6,r17
100130b8:	2885c83a 	sub	r2,r5,r2
100130bc:	344d803a 	cmpltu	r6,r6,r17
100130c0:	1187c83a 	sub	r3,r2,r6
100130c4:	4821883a 	mov	r16,r9
100130c8:	3825883a 	mov	r18,r7
100130cc:	003f2306 	br	10012d5c <__alt_data_end+0xf8012d5c>
100130d0:	24d0b03a 	or	r8,r4,r19
100130d4:	40001b1e 	bne	r8,zero,10013144 <__subdf3+0x560>
100130d8:	0005883a 	mov	r2,zero
100130dc:	0009883a 	mov	r4,zero
100130e0:	0021883a 	mov	r16,zero
100130e4:	003f4906 	br	10012e0c <__alt_data_end+0xf8012e0c>
100130e8:	010007c4 	movi	r4,31
100130ec:	20803a16 	blt	r4,r2,100131d8 <__subdf3+0x5f4>
100130f0:	01000804 	movi	r4,32
100130f4:	2089c83a 	sub	r4,r4,r2
100130f8:	2912983a 	sll	r9,r5,r4
100130fc:	3090d83a 	srl	r8,r6,r2
10013100:	3108983a 	sll	r4,r6,r4
10013104:	2884d83a 	srl	r2,r5,r2
10013108:	4a12b03a 	or	r9,r9,r8
1001310c:	2008c03a 	cmpne	r4,r4,zero
10013110:	4912b03a 	or	r9,r9,r4
10013114:	003f4e06 	br	10012e50 <__alt_data_end+0xf8012e50>
10013118:	1c48b03a 	or	r4,r3,r17
1001311c:	20003c26 	beq	r4,zero,10013210 <__subdf3+0x62c>
10013120:	0084303a 	nor	r2,zero,r2
10013124:	1000381e 	bne	r2,zero,10013208 <__subdf3+0x624>
10013128:	3463c83a 	sub	r17,r6,r17
1001312c:	28c5c83a 	sub	r2,r5,r3
10013130:	344d803a 	cmpltu	r6,r6,r17
10013134:	1187c83a 	sub	r3,r2,r6
10013138:	4821883a 	mov	r16,r9
1001313c:	3825883a 	mov	r18,r7
10013140:	003f0606 	br	10012d5c <__alt_data_end+0xf8012d5c>
10013144:	2023883a 	mov	r17,r4
10013148:	003f0906 	br	10012d70 <__alt_data_end+0xf8012d70>
1001314c:	0101ffc4 	movi	r4,2047
10013150:	813f3a1e 	bne	r16,r4,10012e3c <__alt_data_end+0xf8012e3c>
10013154:	003ec406 	br	10012c68 <__alt_data_end+0xf8012c68>
10013158:	0005883a 	mov	r2,zero
1001315c:	003fb106 	br	10013024 <__alt_data_end+0xf8013024>
10013160:	0005883a 	mov	r2,zero
10013164:	003fbc06 	br	10013058 <__alt_data_end+0xf8013058>
10013168:	1c44b03a 	or	r2,r3,r17
1001316c:	80008e1e 	bne	r16,zero,100133a8 <__subdf3+0x7c4>
10013170:	1000c826 	beq	r2,zero,10013494 <__subdf3+0x8b0>
10013174:	2984b03a 	or	r2,r5,r6
10013178:	103ebb26 	beq	r2,zero,10012c68 <__alt_data_end+0xf8012c68>
1001317c:	8989883a 	add	r4,r17,r6
10013180:	1945883a 	add	r2,r3,r5
10013184:	2447803a 	cmpltu	r3,r4,r17
10013188:	1887883a 	add	r3,r3,r2
1001318c:	1880202c 	andhi	r2,r3,128
10013190:	2023883a 	mov	r17,r4
10013194:	103f1626 	beq	r2,zero,10012df0 <__alt_data_end+0xf8012df0>
10013198:	00bfe034 	movhi	r2,65408
1001319c:	10bfffc4 	addi	r2,r2,-1
100131a0:	5021883a 	mov	r16,r10
100131a4:	1886703a 	and	r3,r3,r2
100131a8:	003eaf06 	br	10012c68 <__alt_data_end+0xf8012c68>
100131ac:	3825883a 	mov	r18,r7
100131b0:	003f0f06 	br	10012df0 <__alt_data_end+0xf8012df0>
100131b4:	1c44b03a 	or	r2,r3,r17
100131b8:	8000251e 	bne	r16,zero,10013250 <__subdf3+0x66c>
100131bc:	1000661e 	bne	r2,zero,10013358 <__subdf3+0x774>
100131c0:	2990b03a 	or	r8,r5,r6
100131c4:	40009626 	beq	r8,zero,10013420 <__subdf3+0x83c>
100131c8:	2807883a 	mov	r3,r5
100131cc:	3023883a 	mov	r17,r6
100131d0:	3825883a 	mov	r18,r7
100131d4:	003ea406 	br	10012c68 <__alt_data_end+0xf8012c68>
100131d8:	127ff804 	addi	r9,r2,-32
100131dc:	01000804 	movi	r4,32
100131e0:	2a52d83a 	srl	r9,r5,r9
100131e4:	11008c26 	beq	r2,r4,10013418 <__subdf3+0x834>
100131e8:	01001004 	movi	r4,64
100131ec:	2085c83a 	sub	r2,r4,r2
100131f0:	2884983a 	sll	r2,r5,r2
100131f4:	118cb03a 	or	r6,r2,r6
100131f8:	300cc03a 	cmpne	r6,r6,zero
100131fc:	4992b03a 	or	r9,r9,r6
10013200:	0005883a 	mov	r2,zero
10013204:	003f1206 	br	10012e50 <__alt_data_end+0xf8012e50>
10013208:	0101ffc4 	movi	r4,2047
1001320c:	493f9c1e 	bne	r9,r4,10013080 <__alt_data_end+0xf8013080>
10013210:	2807883a 	mov	r3,r5
10013214:	3023883a 	mov	r17,r6
10013218:	4821883a 	mov	r16,r9
1001321c:	3825883a 	mov	r18,r7
10013220:	003e9106 	br	10012c68 <__alt_data_end+0xf8012c68>
10013224:	80001f1e 	bne	r16,zero,100132a4 <__subdf3+0x6c0>
10013228:	1c48b03a 	or	r4,r3,r17
1001322c:	20005a26 	beq	r4,zero,10013398 <__subdf3+0x7b4>
10013230:	0084303a 	nor	r2,zero,r2
10013234:	1000561e 	bne	r2,zero,10013390 <__subdf3+0x7ac>
10013238:	89a3883a 	add	r17,r17,r6
1001323c:	1945883a 	add	r2,r3,r5
10013240:	898d803a 	cmpltu	r6,r17,r6
10013244:	3087883a 	add	r3,r6,r2
10013248:	4821883a 	mov	r16,r9
1001324c:	003f0506 	br	10012e64 <__alt_data_end+0xf8012e64>
10013250:	10002b1e 	bne	r2,zero,10013300 <__subdf3+0x71c>
10013254:	2984b03a 	or	r2,r5,r6
10013258:	10008026 	beq	r2,zero,1001345c <__subdf3+0x878>
1001325c:	2807883a 	mov	r3,r5
10013260:	3023883a 	mov	r17,r6
10013264:	3825883a 	mov	r18,r7
10013268:	0401ffc4 	movi	r16,2047
1001326c:	003e7e06 	br	10012c68 <__alt_data_end+0xf8012c68>
10013270:	3809883a 	mov	r4,r7
10013274:	0011883a 	mov	r8,zero
10013278:	0005883a 	mov	r2,zero
1001327c:	003ee306 	br	10012e0c <__alt_data_end+0xf8012e0c>
10013280:	1c62b03a 	or	r17,r3,r17
10013284:	8822c03a 	cmpne	r17,r17,zero
10013288:	0005883a 	mov	r2,zero
1001328c:	003f8906 	br	100130b4 <__alt_data_end+0xf80130b4>
10013290:	3809883a 	mov	r4,r7
10013294:	4821883a 	mov	r16,r9
10013298:	0011883a 	mov	r8,zero
1001329c:	0005883a 	mov	r2,zero
100132a0:	003eda06 	br	10012e0c <__alt_data_end+0xf8012e0c>
100132a4:	0101ffc4 	movi	r4,2047
100132a8:	49003b26 	beq	r9,r4,10013398 <__subdf3+0x7b4>
100132ac:	0085c83a 	sub	r2,zero,r2
100132b0:	18c02034 	orhi	r3,r3,128
100132b4:	01000e04 	movi	r4,56
100132b8:	20806e16 	blt	r4,r2,10013474 <__subdf3+0x890>
100132bc:	010007c4 	movi	r4,31
100132c0:	20807716 	blt	r4,r2,100134a0 <__subdf3+0x8bc>
100132c4:	01000804 	movi	r4,32
100132c8:	2089c83a 	sub	r4,r4,r2
100132cc:	1914983a 	sll	r10,r3,r4
100132d0:	8890d83a 	srl	r8,r17,r2
100132d4:	8908983a 	sll	r4,r17,r4
100132d8:	1884d83a 	srl	r2,r3,r2
100132dc:	5222b03a 	or	r17,r10,r8
100132e0:	2006c03a 	cmpne	r3,r4,zero
100132e4:	88e2b03a 	or	r17,r17,r3
100132e8:	89a3883a 	add	r17,r17,r6
100132ec:	1145883a 	add	r2,r2,r5
100132f0:	898d803a 	cmpltu	r6,r17,r6
100132f4:	3087883a 	add	r3,r6,r2
100132f8:	4821883a 	mov	r16,r9
100132fc:	003ed906 	br	10012e64 <__alt_data_end+0xf8012e64>
10013300:	2984b03a 	or	r2,r5,r6
10013304:	10004226 	beq	r2,zero,10013410 <__subdf3+0x82c>
10013308:	1808d0fa 	srli	r4,r3,3
1001330c:	8822d0fa 	srli	r17,r17,3
10013310:	1806977a 	slli	r3,r3,29
10013314:	2080022c 	andhi	r2,r4,8
10013318:	1c62b03a 	or	r17,r3,r17
1001331c:	10000826 	beq	r2,zero,10013340 <__subdf3+0x75c>
10013320:	2812d0fa 	srli	r9,r5,3
10013324:	4880022c 	andhi	r2,r9,8
10013328:	1000051e 	bne	r2,zero,10013340 <__subdf3+0x75c>
1001332c:	300cd0fa 	srli	r6,r6,3
10013330:	2804977a 	slli	r2,r5,29
10013334:	4809883a 	mov	r4,r9
10013338:	3825883a 	mov	r18,r7
1001333c:	11a2b03a 	or	r17,r2,r6
10013340:	8806d77a 	srli	r3,r17,29
10013344:	200890fa 	slli	r4,r4,3
10013348:	882290fa 	slli	r17,r17,3
1001334c:	0401ffc4 	movi	r16,2047
10013350:	1906b03a 	or	r3,r3,r4
10013354:	003e4406 	br	10012c68 <__alt_data_end+0xf8012c68>
10013358:	2984b03a 	or	r2,r5,r6
1001335c:	103e4226 	beq	r2,zero,10012c68 <__alt_data_end+0xf8012c68>
10013360:	8989c83a 	sub	r4,r17,r6
10013364:	8911803a 	cmpltu	r8,r17,r4
10013368:	1945c83a 	sub	r2,r3,r5
1001336c:	1205c83a 	sub	r2,r2,r8
10013370:	1200202c 	andhi	r8,r2,128
10013374:	403e9a26 	beq	r8,zero,10012de0 <__alt_data_end+0xf8012de0>
10013378:	3463c83a 	sub	r17,r6,r17
1001337c:	28c5c83a 	sub	r2,r5,r3
10013380:	344d803a 	cmpltu	r6,r6,r17
10013384:	1187c83a 	sub	r3,r2,r6
10013388:	3825883a 	mov	r18,r7
1001338c:	003e3606 	br	10012c68 <__alt_data_end+0xf8012c68>
10013390:	0101ffc4 	movi	r4,2047
10013394:	493fc71e 	bne	r9,r4,100132b4 <__alt_data_end+0xf80132b4>
10013398:	2807883a 	mov	r3,r5
1001339c:	3023883a 	mov	r17,r6
100133a0:	4821883a 	mov	r16,r9
100133a4:	003e3006 	br	10012c68 <__alt_data_end+0xf8012c68>
100133a8:	10003626 	beq	r2,zero,10013484 <__subdf3+0x8a0>
100133ac:	2984b03a 	or	r2,r5,r6
100133b0:	10001726 	beq	r2,zero,10013410 <__subdf3+0x82c>
100133b4:	1808d0fa 	srli	r4,r3,3
100133b8:	8822d0fa 	srli	r17,r17,3
100133bc:	1806977a 	slli	r3,r3,29
100133c0:	2080022c 	andhi	r2,r4,8
100133c4:	1c62b03a 	or	r17,r3,r17
100133c8:	10000726 	beq	r2,zero,100133e8 <__subdf3+0x804>
100133cc:	2812d0fa 	srli	r9,r5,3
100133d0:	4880022c 	andhi	r2,r9,8
100133d4:	1000041e 	bne	r2,zero,100133e8 <__subdf3+0x804>
100133d8:	300cd0fa 	srli	r6,r6,3
100133dc:	2804977a 	slli	r2,r5,29
100133e0:	4809883a 	mov	r4,r9
100133e4:	11a2b03a 	or	r17,r2,r6
100133e8:	8806d77a 	srli	r3,r17,29
100133ec:	200890fa 	slli	r4,r4,3
100133f0:	882290fa 	slli	r17,r17,3
100133f4:	3825883a 	mov	r18,r7
100133f8:	1906b03a 	or	r3,r3,r4
100133fc:	0401ffc4 	movi	r16,2047
10013400:	003e1906 	br	10012c68 <__alt_data_end+0xf8012c68>
10013404:	000b883a 	mov	r5,zero
10013408:	0005883a 	mov	r2,zero
1001340c:	003e2e06 	br	10012cc8 <__alt_data_end+0xf8012cc8>
10013410:	0401ffc4 	movi	r16,2047
10013414:	003e1406 	br	10012c68 <__alt_data_end+0xf8012c68>
10013418:	0005883a 	mov	r2,zero
1001341c:	003f7506 	br	100131f4 <__alt_data_end+0xf80131f4>
10013420:	0005883a 	mov	r2,zero
10013424:	0009883a 	mov	r4,zero
10013428:	003e7806 	br	10012e0c <__alt_data_end+0xf8012e0c>
1001342c:	123ff804 	addi	r8,r2,-32
10013430:	01000804 	movi	r4,32
10013434:	1a10d83a 	srl	r8,r3,r8
10013438:	11002526 	beq	r2,r4,100134d0 <__subdf3+0x8ec>
1001343c:	01001004 	movi	r4,64
10013440:	2085c83a 	sub	r2,r4,r2
10013444:	1884983a 	sll	r2,r3,r2
10013448:	1444b03a 	or	r2,r2,r17
1001344c:	1004c03a 	cmpne	r2,r2,zero
10013450:	40a2b03a 	or	r17,r8,r2
10013454:	0005883a 	mov	r2,zero
10013458:	003f1606 	br	100130b4 <__alt_data_end+0xf80130b4>
1001345c:	02000434 	movhi	r8,16
10013460:	0009883a 	mov	r4,zero
10013464:	423fffc4 	addi	r8,r8,-1
10013468:	00bfffc4 	movi	r2,-1
1001346c:	0401ffc4 	movi	r16,2047
10013470:	003e6606 	br	10012e0c <__alt_data_end+0xf8012e0c>
10013474:	1c62b03a 	or	r17,r3,r17
10013478:	8822c03a 	cmpne	r17,r17,zero
1001347c:	0005883a 	mov	r2,zero
10013480:	003f9906 	br	100132e8 <__alt_data_end+0xf80132e8>
10013484:	2807883a 	mov	r3,r5
10013488:	3023883a 	mov	r17,r6
1001348c:	0401ffc4 	movi	r16,2047
10013490:	003df506 	br	10012c68 <__alt_data_end+0xf8012c68>
10013494:	2807883a 	mov	r3,r5
10013498:	3023883a 	mov	r17,r6
1001349c:	003df206 	br	10012c68 <__alt_data_end+0xf8012c68>
100134a0:	123ff804 	addi	r8,r2,-32
100134a4:	01000804 	movi	r4,32
100134a8:	1a10d83a 	srl	r8,r3,r8
100134ac:	11000a26 	beq	r2,r4,100134d8 <__subdf3+0x8f4>
100134b0:	01001004 	movi	r4,64
100134b4:	2085c83a 	sub	r2,r4,r2
100134b8:	1884983a 	sll	r2,r3,r2
100134bc:	1444b03a 	or	r2,r2,r17
100134c0:	1004c03a 	cmpne	r2,r2,zero
100134c4:	40a2b03a 	or	r17,r8,r2
100134c8:	0005883a 	mov	r2,zero
100134cc:	003f8606 	br	100132e8 <__alt_data_end+0xf80132e8>
100134d0:	0005883a 	mov	r2,zero
100134d4:	003fdc06 	br	10013448 <__alt_data_end+0xf8013448>
100134d8:	0005883a 	mov	r2,zero
100134dc:	003ff706 	br	100134bc <__alt_data_end+0xf80134bc>

100134e0 <__fixdfsi>:
100134e0:	280cd53a 	srli	r6,r5,20
100134e4:	00c00434 	movhi	r3,16
100134e8:	18ffffc4 	addi	r3,r3,-1
100134ec:	3181ffcc 	andi	r6,r6,2047
100134f0:	01c0ff84 	movi	r7,1022
100134f4:	28c6703a 	and	r3,r5,r3
100134f8:	280ad7fa 	srli	r5,r5,31
100134fc:	3980120e 	bge	r7,r6,10013548 <__fixdfsi+0x68>
10013500:	00810744 	movi	r2,1053
10013504:	11800c16 	blt	r2,r6,10013538 <__fixdfsi+0x58>
10013508:	00810cc4 	movi	r2,1075
1001350c:	1185c83a 	sub	r2,r2,r6
10013510:	01c007c4 	movi	r7,31
10013514:	18c00434 	orhi	r3,r3,16
10013518:	38800d16 	blt	r7,r2,10013550 <__fixdfsi+0x70>
1001351c:	31befb44 	addi	r6,r6,-1043
10013520:	2084d83a 	srl	r2,r4,r2
10013524:	1986983a 	sll	r3,r3,r6
10013528:	1884b03a 	or	r2,r3,r2
1001352c:	28000726 	beq	r5,zero,1001354c <__fixdfsi+0x6c>
10013530:	0085c83a 	sub	r2,zero,r2
10013534:	f800283a 	ret
10013538:	00a00034 	movhi	r2,32768
1001353c:	10bfffc4 	addi	r2,r2,-1
10013540:	2885883a 	add	r2,r5,r2
10013544:	f800283a 	ret
10013548:	0005883a 	mov	r2,zero
1001354c:	f800283a 	ret
10013550:	008104c4 	movi	r2,1043
10013554:	1185c83a 	sub	r2,r2,r6
10013558:	1884d83a 	srl	r2,r3,r2
1001355c:	003ff306 	br	1001352c <__alt_data_end+0xf801352c>

10013560 <__floatsidf>:
10013560:	defffd04 	addi	sp,sp,-12
10013564:	dfc00215 	stw	ra,8(sp)
10013568:	dc400115 	stw	r17,4(sp)
1001356c:	dc000015 	stw	r16,0(sp)
10013570:	20002b26 	beq	r4,zero,10013620 <__floatsidf+0xc0>
10013574:	2023883a 	mov	r17,r4
10013578:	2020d7fa 	srli	r16,r4,31
1001357c:	20002d16 	blt	r4,zero,10013634 <__floatsidf+0xd4>
10013580:	8809883a 	mov	r4,r17
10013584:	00136e40 	call	100136e4 <__clzsi2>
10013588:	01410784 	movi	r5,1054
1001358c:	288bc83a 	sub	r5,r5,r2
10013590:	01010cc4 	movi	r4,1075
10013594:	2149c83a 	sub	r4,r4,r5
10013598:	00c007c4 	movi	r3,31
1001359c:	1900160e 	bge	r3,r4,100135f8 <__floatsidf+0x98>
100135a0:	00c104c4 	movi	r3,1043
100135a4:	1947c83a 	sub	r3,r3,r5
100135a8:	88c6983a 	sll	r3,r17,r3
100135ac:	00800434 	movhi	r2,16
100135b0:	10bfffc4 	addi	r2,r2,-1
100135b4:	1886703a 	and	r3,r3,r2
100135b8:	2941ffcc 	andi	r5,r5,2047
100135bc:	800d883a 	mov	r6,r16
100135c0:	0005883a 	mov	r2,zero
100135c4:	280a953a 	slli	r5,r5,20
100135c8:	31803fcc 	andi	r6,r6,255
100135cc:	01000434 	movhi	r4,16
100135d0:	300c97fa 	slli	r6,r6,31
100135d4:	213fffc4 	addi	r4,r4,-1
100135d8:	1906703a 	and	r3,r3,r4
100135dc:	1946b03a 	or	r3,r3,r5
100135e0:	1986b03a 	or	r3,r3,r6
100135e4:	dfc00217 	ldw	ra,8(sp)
100135e8:	dc400117 	ldw	r17,4(sp)
100135ec:	dc000017 	ldw	r16,0(sp)
100135f0:	dec00304 	addi	sp,sp,12
100135f4:	f800283a 	ret
100135f8:	00c002c4 	movi	r3,11
100135fc:	1887c83a 	sub	r3,r3,r2
10013600:	88c6d83a 	srl	r3,r17,r3
10013604:	8904983a 	sll	r2,r17,r4
10013608:	01000434 	movhi	r4,16
1001360c:	213fffc4 	addi	r4,r4,-1
10013610:	2941ffcc 	andi	r5,r5,2047
10013614:	1906703a 	and	r3,r3,r4
10013618:	800d883a 	mov	r6,r16
1001361c:	003fe906 	br	100135c4 <__alt_data_end+0xf80135c4>
10013620:	000d883a 	mov	r6,zero
10013624:	000b883a 	mov	r5,zero
10013628:	0007883a 	mov	r3,zero
1001362c:	0005883a 	mov	r2,zero
10013630:	003fe406 	br	100135c4 <__alt_data_end+0xf80135c4>
10013634:	0123c83a 	sub	r17,zero,r4
10013638:	003fd106 	br	10013580 <__alt_data_end+0xf8013580>

1001363c <__floatunsidf>:
1001363c:	defffe04 	addi	sp,sp,-8
10013640:	dc000015 	stw	r16,0(sp)
10013644:	dfc00115 	stw	ra,4(sp)
10013648:	2021883a 	mov	r16,r4
1001364c:	20002226 	beq	r4,zero,100136d8 <__floatunsidf+0x9c>
10013650:	00136e40 	call	100136e4 <__clzsi2>
10013654:	01010784 	movi	r4,1054
10013658:	2089c83a 	sub	r4,r4,r2
1001365c:	01810cc4 	movi	r6,1075
10013660:	310dc83a 	sub	r6,r6,r4
10013664:	00c007c4 	movi	r3,31
10013668:	1980120e 	bge	r3,r6,100136b4 <__floatunsidf+0x78>
1001366c:	00c104c4 	movi	r3,1043
10013670:	1907c83a 	sub	r3,r3,r4
10013674:	80ca983a 	sll	r5,r16,r3
10013678:	00800434 	movhi	r2,16
1001367c:	10bfffc4 	addi	r2,r2,-1
10013680:	2101ffcc 	andi	r4,r4,2047
10013684:	0021883a 	mov	r16,zero
10013688:	288a703a 	and	r5,r5,r2
1001368c:	2008953a 	slli	r4,r4,20
10013690:	00c00434 	movhi	r3,16
10013694:	18ffffc4 	addi	r3,r3,-1
10013698:	28c6703a 	and	r3,r5,r3
1001369c:	8005883a 	mov	r2,r16
100136a0:	1906b03a 	or	r3,r3,r4
100136a4:	dfc00117 	ldw	ra,4(sp)
100136a8:	dc000017 	ldw	r16,0(sp)
100136ac:	dec00204 	addi	sp,sp,8
100136b0:	f800283a 	ret
100136b4:	00c002c4 	movi	r3,11
100136b8:	188bc83a 	sub	r5,r3,r2
100136bc:	814ad83a 	srl	r5,r16,r5
100136c0:	00c00434 	movhi	r3,16
100136c4:	18ffffc4 	addi	r3,r3,-1
100136c8:	81a0983a 	sll	r16,r16,r6
100136cc:	2101ffcc 	andi	r4,r4,2047
100136d0:	28ca703a 	and	r5,r5,r3
100136d4:	003fed06 	br	1001368c <__alt_data_end+0xf801368c>
100136d8:	0009883a 	mov	r4,zero
100136dc:	000b883a 	mov	r5,zero
100136e0:	003fea06 	br	1001368c <__alt_data_end+0xf801368c>

100136e4 <__clzsi2>:
100136e4:	00bfffd4 	movui	r2,65535
100136e8:	11000536 	bltu	r2,r4,10013700 <__clzsi2+0x1c>
100136ec:	00803fc4 	movi	r2,255
100136f0:	11000f36 	bltu	r2,r4,10013730 <__clzsi2+0x4c>
100136f4:	00800804 	movi	r2,32
100136f8:	0007883a 	mov	r3,zero
100136fc:	00000506 	br	10013714 <__clzsi2+0x30>
10013700:	00804034 	movhi	r2,256
10013704:	10bfffc4 	addi	r2,r2,-1
10013708:	11000c2e 	bgeu	r2,r4,1001373c <__clzsi2+0x58>
1001370c:	00800204 	movi	r2,8
10013710:	00c00604 	movi	r3,24
10013714:	20c8d83a 	srl	r4,r4,r3
10013718:	00c40074 	movhi	r3,4097
1001371c:	18da4204 	addi	r3,r3,26888
10013720:	1909883a 	add	r4,r3,r4
10013724:	20c00003 	ldbu	r3,0(r4)
10013728:	10c5c83a 	sub	r2,r2,r3
1001372c:	f800283a 	ret
10013730:	00800604 	movi	r2,24
10013734:	00c00204 	movi	r3,8
10013738:	003ff606 	br	10013714 <__alt_data_end+0xf8013714>
1001373c:	00800404 	movi	r2,16
10013740:	1007883a 	mov	r3,r2
10013744:	003ff306 	br	10013714 <__alt_data_end+0xf8013714>

10013748 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10013748:	defffe04 	addi	sp,sp,-8
1001374c:	dfc00115 	stw	ra,4(sp)
10013750:	df000015 	stw	fp,0(sp)
10013754:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10013758:	d0a00b17 	ldw	r2,-32724(gp)
1001375c:	10000326 	beq	r2,zero,1001376c <alt_get_errno+0x24>
10013760:	d0a00b17 	ldw	r2,-32724(gp)
10013764:	103ee83a 	callr	r2
10013768:	00000106 	br	10013770 <alt_get_errno+0x28>
1001376c:	d09b3104 	addi	r2,gp,27844
}
10013770:	e037883a 	mov	sp,fp
10013774:	dfc00117 	ldw	ra,4(sp)
10013778:	df000017 	ldw	fp,0(sp)
1001377c:	dec00204 	addi	sp,sp,8
10013780:	f800283a 	ret

10013784 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10013784:	defffb04 	addi	sp,sp,-20
10013788:	dfc00415 	stw	ra,16(sp)
1001378c:	df000315 	stw	fp,12(sp)
10013790:	df000304 	addi	fp,sp,12
10013794:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10013798:	e0bfff17 	ldw	r2,-4(fp)
1001379c:	10000816 	blt	r2,zero,100137c0 <close+0x3c>
100137a0:	01400304 	movi	r5,12
100137a4:	e13fff17 	ldw	r4,-4(fp)
100137a8:	00069bc0 	call	100069bc <__mulsi3>
100137ac:	1007883a 	mov	r3,r2
100137b0:	008400b4 	movhi	r2,4098
100137b4:	10911804 	addi	r2,r2,17504
100137b8:	1885883a 	add	r2,r3,r2
100137bc:	00000106 	br	100137c4 <close+0x40>
100137c0:	0005883a 	mov	r2,zero
100137c4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
100137c8:	e0bffd17 	ldw	r2,-12(fp)
100137cc:	10001926 	beq	r2,zero,10013834 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
100137d0:	e0bffd17 	ldw	r2,-12(fp)
100137d4:	10800017 	ldw	r2,0(r2)
100137d8:	10800417 	ldw	r2,16(r2)
100137dc:	10000626 	beq	r2,zero,100137f8 <close+0x74>
100137e0:	e0bffd17 	ldw	r2,-12(fp)
100137e4:	10800017 	ldw	r2,0(r2)
100137e8:	10800417 	ldw	r2,16(r2)
100137ec:	e13ffd17 	ldw	r4,-12(fp)
100137f0:	103ee83a 	callr	r2
100137f4:	00000106 	br	100137fc <close+0x78>
100137f8:	0005883a 	mov	r2,zero
100137fc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10013800:	e13fff17 	ldw	r4,-4(fp)
10013804:	0013e6c0 	call	10013e6c <alt_release_fd>
    if (rval < 0)
10013808:	e0bffe17 	ldw	r2,-8(fp)
1001380c:	1000070e 	bge	r2,zero,1001382c <close+0xa8>
    {
      ALT_ERRNO = -rval;
10013810:	00137480 	call	10013748 <alt_get_errno>
10013814:	1007883a 	mov	r3,r2
10013818:	e0bffe17 	ldw	r2,-8(fp)
1001381c:	0085c83a 	sub	r2,zero,r2
10013820:	18800015 	stw	r2,0(r3)
      return -1;
10013824:	00bfffc4 	movi	r2,-1
10013828:	00000706 	br	10013848 <close+0xc4>
    }
    return 0;
1001382c:	0005883a 	mov	r2,zero
10013830:	00000506 	br	10013848 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10013834:	00137480 	call	10013748 <alt_get_errno>
10013838:	1007883a 	mov	r3,r2
1001383c:	00801444 	movi	r2,81
10013840:	18800015 	stw	r2,0(r3)
    return -1;
10013844:	00bfffc4 	movi	r2,-1
  }
}
10013848:	e037883a 	mov	sp,fp
1001384c:	dfc00117 	ldw	ra,4(sp)
10013850:	df000017 	ldw	fp,0(sp)
10013854:	dec00204 	addi	sp,sp,8
10013858:	f800283a 	ret

1001385c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1001385c:	defffc04 	addi	sp,sp,-16
10013860:	df000315 	stw	fp,12(sp)
10013864:	df000304 	addi	fp,sp,12
10013868:	e13ffd15 	stw	r4,-12(fp)
1001386c:	e17ffe15 	stw	r5,-8(fp)
10013870:	e1bfff15 	stw	r6,-4(fp)
  return len;
10013874:	e0bfff17 	ldw	r2,-4(fp)
}
10013878:	e037883a 	mov	sp,fp
1001387c:	df000017 	ldw	fp,0(sp)
10013880:	dec00104 	addi	sp,sp,4
10013884:	f800283a 	ret

10013888 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10013888:	defffe04 	addi	sp,sp,-8
1001388c:	dfc00115 	stw	ra,4(sp)
10013890:	df000015 	stw	fp,0(sp)
10013894:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10013898:	d0a00b17 	ldw	r2,-32724(gp)
1001389c:	10000326 	beq	r2,zero,100138ac <alt_get_errno+0x24>
100138a0:	d0a00b17 	ldw	r2,-32724(gp)
100138a4:	103ee83a 	callr	r2
100138a8:	00000106 	br	100138b0 <alt_get_errno+0x28>
100138ac:	d09b3104 	addi	r2,gp,27844
}
100138b0:	e037883a 	mov	sp,fp
100138b4:	dfc00117 	ldw	ra,4(sp)
100138b8:	df000017 	ldw	fp,0(sp)
100138bc:	dec00204 	addi	sp,sp,8
100138c0:	f800283a 	ret

100138c4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
100138c4:	defffb04 	addi	sp,sp,-20
100138c8:	dfc00415 	stw	ra,16(sp)
100138cc:	df000315 	stw	fp,12(sp)
100138d0:	df000304 	addi	fp,sp,12
100138d4:	e13ffe15 	stw	r4,-8(fp)
100138d8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100138dc:	e0bffe17 	ldw	r2,-8(fp)
100138e0:	10000816 	blt	r2,zero,10013904 <fstat+0x40>
100138e4:	01400304 	movi	r5,12
100138e8:	e13ffe17 	ldw	r4,-8(fp)
100138ec:	00069bc0 	call	100069bc <__mulsi3>
100138f0:	1007883a 	mov	r3,r2
100138f4:	008400b4 	movhi	r2,4098
100138f8:	10911804 	addi	r2,r2,17504
100138fc:	1885883a 	add	r2,r3,r2
10013900:	00000106 	br	10013908 <fstat+0x44>
10013904:	0005883a 	mov	r2,zero
10013908:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1001390c:	e0bffd17 	ldw	r2,-12(fp)
10013910:	10001026 	beq	r2,zero,10013954 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10013914:	e0bffd17 	ldw	r2,-12(fp)
10013918:	10800017 	ldw	r2,0(r2)
1001391c:	10800817 	ldw	r2,32(r2)
10013920:	10000726 	beq	r2,zero,10013940 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
10013924:	e0bffd17 	ldw	r2,-12(fp)
10013928:	10800017 	ldw	r2,0(r2)
1001392c:	10800817 	ldw	r2,32(r2)
10013930:	e17fff17 	ldw	r5,-4(fp)
10013934:	e13ffd17 	ldw	r4,-12(fp)
10013938:	103ee83a 	callr	r2
1001393c:	00000a06 	br	10013968 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10013940:	e0bfff17 	ldw	r2,-4(fp)
10013944:	00c80004 	movi	r3,8192
10013948:	10c00115 	stw	r3,4(r2)
      return 0;
1001394c:	0005883a 	mov	r2,zero
10013950:	00000506 	br	10013968 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10013954:	00138880 	call	10013888 <alt_get_errno>
10013958:	1007883a 	mov	r3,r2
1001395c:	00801444 	movi	r2,81
10013960:	18800015 	stw	r2,0(r3)
    return -1;
10013964:	00bfffc4 	movi	r2,-1
  }
}
10013968:	e037883a 	mov	sp,fp
1001396c:	dfc00117 	ldw	ra,4(sp)
10013970:	df000017 	ldw	fp,0(sp)
10013974:	dec00204 	addi	sp,sp,8
10013978:	f800283a 	ret

1001397c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001397c:	defffe04 	addi	sp,sp,-8
10013980:	dfc00115 	stw	ra,4(sp)
10013984:	df000015 	stw	fp,0(sp)
10013988:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001398c:	d0a00b17 	ldw	r2,-32724(gp)
10013990:	10000326 	beq	r2,zero,100139a0 <alt_get_errno+0x24>
10013994:	d0a00b17 	ldw	r2,-32724(gp)
10013998:	103ee83a 	callr	r2
1001399c:	00000106 	br	100139a4 <alt_get_errno+0x28>
100139a0:	d09b3104 	addi	r2,gp,27844
}
100139a4:	e037883a 	mov	sp,fp
100139a8:	dfc00117 	ldw	ra,4(sp)
100139ac:	df000017 	ldw	fp,0(sp)
100139b0:	dec00204 	addi	sp,sp,8
100139b4:	f800283a 	ret

100139b8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
100139b8:	deffed04 	addi	sp,sp,-76
100139bc:	dfc01215 	stw	ra,72(sp)
100139c0:	df001115 	stw	fp,68(sp)
100139c4:	df001104 	addi	fp,sp,68
100139c8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100139cc:	e0bfff17 	ldw	r2,-4(fp)
100139d0:	10000816 	blt	r2,zero,100139f4 <isatty+0x3c>
100139d4:	01400304 	movi	r5,12
100139d8:	e13fff17 	ldw	r4,-4(fp)
100139dc:	00069bc0 	call	100069bc <__mulsi3>
100139e0:	1007883a 	mov	r3,r2
100139e4:	008400b4 	movhi	r2,4098
100139e8:	10911804 	addi	r2,r2,17504
100139ec:	1885883a 	add	r2,r3,r2
100139f0:	00000106 	br	100139f8 <isatty+0x40>
100139f4:	0005883a 	mov	r2,zero
100139f8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
100139fc:	e0bfef17 	ldw	r2,-68(fp)
10013a00:	10000e26 	beq	r2,zero,10013a3c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
10013a04:	e0bfef17 	ldw	r2,-68(fp)
10013a08:	10800017 	ldw	r2,0(r2)
10013a0c:	10800817 	ldw	r2,32(r2)
10013a10:	1000021e 	bne	r2,zero,10013a1c <isatty+0x64>
    {
      return 1;
10013a14:	00800044 	movi	r2,1
10013a18:	00000d06 	br	10013a50 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10013a1c:	e0bff004 	addi	r2,fp,-64
10013a20:	100b883a 	mov	r5,r2
10013a24:	e13fff17 	ldw	r4,-4(fp)
10013a28:	00138c40 	call	100138c4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10013a2c:	e0bff117 	ldw	r2,-60(fp)
10013a30:	10880020 	cmpeqi	r2,r2,8192
10013a34:	10803fcc 	andi	r2,r2,255
10013a38:	00000506 	br	10013a50 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10013a3c:	001397c0 	call	1001397c <alt_get_errno>
10013a40:	1007883a 	mov	r3,r2
10013a44:	00801444 	movi	r2,81
10013a48:	18800015 	stw	r2,0(r3)
    return 0;
10013a4c:	0005883a 	mov	r2,zero
  }
}
10013a50:	e037883a 	mov	sp,fp
10013a54:	dfc00117 	ldw	ra,4(sp)
10013a58:	df000017 	ldw	fp,0(sp)
10013a5c:	dec00204 	addi	sp,sp,8
10013a60:	f800283a 	ret

10013a64 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10013a64:	defffc04 	addi	sp,sp,-16
10013a68:	df000315 	stw	fp,12(sp)
10013a6c:	df000304 	addi	fp,sp,12
10013a70:	e13ffd15 	stw	r4,-12(fp)
10013a74:	e17ffe15 	stw	r5,-8(fp)
10013a78:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10013a7c:	e0fffe17 	ldw	r3,-8(fp)
10013a80:	e0bffd17 	ldw	r2,-12(fp)
10013a84:	18800c26 	beq	r3,r2,10013ab8 <alt_load_section+0x54>
  {
    while( to != end )
10013a88:	00000806 	br	10013aac <alt_load_section+0x48>
    {
      *to++ = *from++;
10013a8c:	e0bffe17 	ldw	r2,-8(fp)
10013a90:	10c00104 	addi	r3,r2,4
10013a94:	e0fffe15 	stw	r3,-8(fp)
10013a98:	e0fffd17 	ldw	r3,-12(fp)
10013a9c:	19000104 	addi	r4,r3,4
10013aa0:	e13ffd15 	stw	r4,-12(fp)
10013aa4:	18c00017 	ldw	r3,0(r3)
10013aa8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10013aac:	e0fffe17 	ldw	r3,-8(fp)
10013ab0:	e0bfff17 	ldw	r2,-4(fp)
10013ab4:	18bff51e 	bne	r3,r2,10013a8c <__alt_data_end+0xf8013a8c>
    {
      *to++ = *from++;
    }
  }
}
10013ab8:	0001883a 	nop
10013abc:	e037883a 	mov	sp,fp
10013ac0:	df000017 	ldw	fp,0(sp)
10013ac4:	dec00104 	addi	sp,sp,4
10013ac8:	f800283a 	ret

10013acc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10013acc:	defffe04 	addi	sp,sp,-8
10013ad0:	dfc00115 	stw	ra,4(sp)
10013ad4:	df000015 	stw	fp,0(sp)
10013ad8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10013adc:	018400b4 	movhi	r6,4098
10013ae0:	3195a004 	addi	r6,r6,22144
10013ae4:	01440074 	movhi	r5,4097
10013ae8:	295a8f04 	addi	r5,r5,27196
10013aec:	010400b4 	movhi	r4,4098
10013af0:	2115a004 	addi	r4,r4,22144
10013af4:	0013a640 	call	10013a64 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10013af8:	01840034 	movhi	r6,4096
10013afc:	31808c04 	addi	r6,r6,560
10013b00:	01440034 	movhi	r5,4096
10013b04:	29400804 	addi	r5,r5,32
10013b08:	01040034 	movhi	r4,4096
10013b0c:	21000804 	addi	r4,r4,32
10013b10:	0013a640 	call	10013a64 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10013b14:	01840074 	movhi	r6,4097
10013b18:	319a8f04 	addi	r6,r6,27196
10013b1c:	01440074 	movhi	r5,4097
10013b20:	2957da04 	addi	r5,r5,24424
10013b24:	01040074 	movhi	r4,4097
10013b28:	2117da04 	addi	r4,r4,24424
10013b2c:	0013a640 	call	10013a64 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10013b30:	0014eb00 	call	10014eb0 <alt_dcache_flush_all>
  alt_icache_flush_all();
10013b34:	00150700 	call	10015070 <alt_icache_flush_all>
}
10013b38:	0001883a 	nop
10013b3c:	e037883a 	mov	sp,fp
10013b40:	dfc00117 	ldw	ra,4(sp)
10013b44:	df000017 	ldw	fp,0(sp)
10013b48:	dec00204 	addi	sp,sp,8
10013b4c:	f800283a 	ret

10013b50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10013b50:	defffe04 	addi	sp,sp,-8
10013b54:	dfc00115 	stw	ra,4(sp)
10013b58:	df000015 	stw	fp,0(sp)
10013b5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10013b60:	d0a00b17 	ldw	r2,-32724(gp)
10013b64:	10000326 	beq	r2,zero,10013b74 <alt_get_errno+0x24>
10013b68:	d0a00b17 	ldw	r2,-32724(gp)
10013b6c:	103ee83a 	callr	r2
10013b70:	00000106 	br	10013b78 <alt_get_errno+0x28>
10013b74:	d09b3104 	addi	r2,gp,27844
}
10013b78:	e037883a 	mov	sp,fp
10013b7c:	dfc00117 	ldw	ra,4(sp)
10013b80:	df000017 	ldw	fp,0(sp)
10013b84:	dec00204 	addi	sp,sp,8
10013b88:	f800283a 	ret

10013b8c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10013b8c:	defff904 	addi	sp,sp,-28
10013b90:	dfc00615 	stw	ra,24(sp)
10013b94:	df000515 	stw	fp,20(sp)
10013b98:	df000504 	addi	fp,sp,20
10013b9c:	e13ffd15 	stw	r4,-12(fp)
10013ba0:	e17ffe15 	stw	r5,-8(fp)
10013ba4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10013ba8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10013bac:	e0bffd17 	ldw	r2,-12(fp)
10013bb0:	10000816 	blt	r2,zero,10013bd4 <lseek+0x48>
10013bb4:	01400304 	movi	r5,12
10013bb8:	e13ffd17 	ldw	r4,-12(fp)
10013bbc:	00069bc0 	call	100069bc <__mulsi3>
10013bc0:	1007883a 	mov	r3,r2
10013bc4:	008400b4 	movhi	r2,4098
10013bc8:	10911804 	addi	r2,r2,17504
10013bcc:	1885883a 	add	r2,r3,r2
10013bd0:	00000106 	br	10013bd8 <lseek+0x4c>
10013bd4:	0005883a 	mov	r2,zero
10013bd8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10013bdc:	e0bffc17 	ldw	r2,-16(fp)
10013be0:	10001026 	beq	r2,zero,10013c24 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10013be4:	e0bffc17 	ldw	r2,-16(fp)
10013be8:	10800017 	ldw	r2,0(r2)
10013bec:	10800717 	ldw	r2,28(r2)
10013bf0:	10000926 	beq	r2,zero,10013c18 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10013bf4:	e0bffc17 	ldw	r2,-16(fp)
10013bf8:	10800017 	ldw	r2,0(r2)
10013bfc:	10800717 	ldw	r2,28(r2)
10013c00:	e1bfff17 	ldw	r6,-4(fp)
10013c04:	e17ffe17 	ldw	r5,-8(fp)
10013c08:	e13ffc17 	ldw	r4,-16(fp)
10013c0c:	103ee83a 	callr	r2
10013c10:	e0bffb15 	stw	r2,-20(fp)
10013c14:	00000506 	br	10013c2c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
10013c18:	00bfde84 	movi	r2,-134
10013c1c:	e0bffb15 	stw	r2,-20(fp)
10013c20:	00000206 	br	10013c2c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
10013c24:	00bfebc4 	movi	r2,-81
10013c28:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10013c2c:	e0bffb17 	ldw	r2,-20(fp)
10013c30:	1000070e 	bge	r2,zero,10013c50 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10013c34:	0013b500 	call	10013b50 <alt_get_errno>
10013c38:	1007883a 	mov	r3,r2
10013c3c:	e0bffb17 	ldw	r2,-20(fp)
10013c40:	0085c83a 	sub	r2,zero,r2
10013c44:	18800015 	stw	r2,0(r3)
    rc = -1;
10013c48:	00bfffc4 	movi	r2,-1
10013c4c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10013c50:	e0bffb17 	ldw	r2,-20(fp)
}
10013c54:	e037883a 	mov	sp,fp
10013c58:	dfc00117 	ldw	ra,4(sp)
10013c5c:	df000017 	ldw	fp,0(sp)
10013c60:	dec00204 	addi	sp,sp,8
10013c64:	f800283a 	ret

10013c68 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10013c68:	defffd04 	addi	sp,sp,-12
10013c6c:	dfc00215 	stw	ra,8(sp)
10013c70:	df000115 	stw	fp,4(sp)
10013c74:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10013c78:	0009883a 	mov	r4,zero
10013c7c:	00141400 	call	10014140 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10013c80:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10013c84:	00141780 	call	10014178 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10013c88:	01840074 	movhi	r6,4097
10013c8c:	319a8504 	addi	r6,r6,27156
10013c90:	01440074 	movhi	r5,4097
10013c94:	295a8504 	addi	r5,r5,27156
10013c98:	01040074 	movhi	r4,4097
10013c9c:	211a8504 	addi	r4,r4,27156
10013ca0:	00154140 	call	10015414 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10013ca4:	0014fb00 	call	10014fb0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10013ca8:	01040074 	movhi	r4,4097
10013cac:	21140404 	addi	r4,r4,20496
10013cb0:	0015bd40 	call	10015bd4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10013cb4:	d09b3217 	ldw	r2,27848(gp)
10013cb8:	d0db3317 	ldw	r3,27852(gp)
10013cbc:	d11b3417 	ldw	r4,27856(gp)
10013cc0:	200d883a 	mov	r6,r4
10013cc4:	180b883a 	mov	r5,r3
10013cc8:	1009883a 	mov	r4,r2
10013ccc:	00043540 	call	10004354 <main>
10013cd0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10013cd4:	01000044 	movi	r4,1
10013cd8:	00137840 	call	10013784 <close>
  exit (result);
10013cdc:	e13fff17 	ldw	r4,-4(fp)
10013ce0:	0015be80 	call	10015be8 <exit>

10013ce4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10013ce4:	defffe04 	addi	sp,sp,-8
10013ce8:	df000115 	stw	fp,4(sp)
10013cec:	df000104 	addi	fp,sp,4
10013cf0:	e13fff15 	stw	r4,-4(fp)
}
10013cf4:	0001883a 	nop
10013cf8:	e037883a 	mov	sp,fp
10013cfc:	df000017 	ldw	fp,0(sp)
10013d00:	dec00104 	addi	sp,sp,4
10013d04:	f800283a 	ret

10013d08 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10013d08:	defffe04 	addi	sp,sp,-8
10013d0c:	df000115 	stw	fp,4(sp)
10013d10:	df000104 	addi	fp,sp,4
10013d14:	e13fff15 	stw	r4,-4(fp)
}
10013d18:	0001883a 	nop
10013d1c:	e037883a 	mov	sp,fp
10013d20:	df000017 	ldw	fp,0(sp)
10013d24:	dec00104 	addi	sp,sp,4
10013d28:	f800283a 	ret

10013d2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10013d2c:	defffe04 	addi	sp,sp,-8
10013d30:	dfc00115 	stw	ra,4(sp)
10013d34:	df000015 	stw	fp,0(sp)
10013d38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10013d3c:	d0a00b17 	ldw	r2,-32724(gp)
10013d40:	10000326 	beq	r2,zero,10013d50 <alt_get_errno+0x24>
10013d44:	d0a00b17 	ldw	r2,-32724(gp)
10013d48:	103ee83a 	callr	r2
10013d4c:	00000106 	br	10013d54 <alt_get_errno+0x28>
10013d50:	d09b3104 	addi	r2,gp,27844
}
10013d54:	e037883a 	mov	sp,fp
10013d58:	dfc00117 	ldw	ra,4(sp)
10013d5c:	df000017 	ldw	fp,0(sp)
10013d60:	dec00204 	addi	sp,sp,8
10013d64:	f800283a 	ret

10013d68 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10013d68:	defff904 	addi	sp,sp,-28
10013d6c:	dfc00615 	stw	ra,24(sp)
10013d70:	df000515 	stw	fp,20(sp)
10013d74:	df000504 	addi	fp,sp,20
10013d78:	e13ffd15 	stw	r4,-12(fp)
10013d7c:	e17ffe15 	stw	r5,-8(fp)
10013d80:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10013d84:	e0bffd17 	ldw	r2,-12(fp)
10013d88:	10000816 	blt	r2,zero,10013dac <read+0x44>
10013d8c:	01400304 	movi	r5,12
10013d90:	e13ffd17 	ldw	r4,-12(fp)
10013d94:	00069bc0 	call	100069bc <__mulsi3>
10013d98:	1007883a 	mov	r3,r2
10013d9c:	008400b4 	movhi	r2,4098
10013da0:	10911804 	addi	r2,r2,17504
10013da4:	1885883a 	add	r2,r3,r2
10013da8:	00000106 	br	10013db0 <read+0x48>
10013dac:	0005883a 	mov	r2,zero
10013db0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10013db4:	e0bffb17 	ldw	r2,-20(fp)
10013db8:	10002226 	beq	r2,zero,10013e44 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10013dbc:	e0bffb17 	ldw	r2,-20(fp)
10013dc0:	10800217 	ldw	r2,8(r2)
10013dc4:	108000cc 	andi	r2,r2,3
10013dc8:	10800060 	cmpeqi	r2,r2,1
10013dcc:	1000181e 	bne	r2,zero,10013e30 <read+0xc8>
        (fd->dev->read))
10013dd0:	e0bffb17 	ldw	r2,-20(fp)
10013dd4:	10800017 	ldw	r2,0(r2)
10013dd8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10013ddc:	10001426 	beq	r2,zero,10013e30 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10013de0:	e0bffb17 	ldw	r2,-20(fp)
10013de4:	10800017 	ldw	r2,0(r2)
10013de8:	10800517 	ldw	r2,20(r2)
10013dec:	e0ffff17 	ldw	r3,-4(fp)
10013df0:	180d883a 	mov	r6,r3
10013df4:	e17ffe17 	ldw	r5,-8(fp)
10013df8:	e13ffb17 	ldw	r4,-20(fp)
10013dfc:	103ee83a 	callr	r2
10013e00:	e0bffc15 	stw	r2,-16(fp)
10013e04:	e0bffc17 	ldw	r2,-16(fp)
10013e08:	1000070e 	bge	r2,zero,10013e28 <read+0xc0>
        {
          ALT_ERRNO = -rval;
10013e0c:	0013d2c0 	call	10013d2c <alt_get_errno>
10013e10:	1007883a 	mov	r3,r2
10013e14:	e0bffc17 	ldw	r2,-16(fp)
10013e18:	0085c83a 	sub	r2,zero,r2
10013e1c:	18800015 	stw	r2,0(r3)
          return -1;
10013e20:	00bfffc4 	movi	r2,-1
10013e24:	00000c06 	br	10013e58 <read+0xf0>
        }
        return rval;
10013e28:	e0bffc17 	ldw	r2,-16(fp)
10013e2c:	00000a06 	br	10013e58 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
10013e30:	0013d2c0 	call	10013d2c <alt_get_errno>
10013e34:	1007883a 	mov	r3,r2
10013e38:	00800344 	movi	r2,13
10013e3c:	18800015 	stw	r2,0(r3)
10013e40:	00000406 	br	10013e54 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10013e44:	0013d2c0 	call	10013d2c <alt_get_errno>
10013e48:	1007883a 	mov	r3,r2
10013e4c:	00801444 	movi	r2,81
10013e50:	18800015 	stw	r2,0(r3)
  }
  return -1;
10013e54:	00bfffc4 	movi	r2,-1
}
10013e58:	e037883a 	mov	sp,fp
10013e5c:	dfc00117 	ldw	ra,4(sp)
10013e60:	df000017 	ldw	fp,0(sp)
10013e64:	dec00204 	addi	sp,sp,8
10013e68:	f800283a 	ret

10013e6c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10013e6c:	defffc04 	addi	sp,sp,-16
10013e70:	dfc00315 	stw	ra,12(sp)
10013e74:	df000215 	stw	fp,8(sp)
10013e78:	dc000115 	stw	r16,4(sp)
10013e7c:	df000204 	addi	fp,sp,8
10013e80:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10013e84:	e0bffe17 	ldw	r2,-8(fp)
10013e88:	108000d0 	cmplti	r2,r2,3
10013e8c:	1000111e 	bne	r2,zero,10013ed4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10013e90:	040400b4 	movhi	r16,4098
10013e94:	84111804 	addi	r16,r16,17504
10013e98:	e0bffe17 	ldw	r2,-8(fp)
10013e9c:	01400304 	movi	r5,12
10013ea0:	1009883a 	mov	r4,r2
10013ea4:	00069bc0 	call	100069bc <__mulsi3>
10013ea8:	8085883a 	add	r2,r16,r2
10013eac:	10800204 	addi	r2,r2,8
10013eb0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10013eb4:	040400b4 	movhi	r16,4098
10013eb8:	84111804 	addi	r16,r16,17504
10013ebc:	e0bffe17 	ldw	r2,-8(fp)
10013ec0:	01400304 	movi	r5,12
10013ec4:	1009883a 	mov	r4,r2
10013ec8:	00069bc0 	call	100069bc <__mulsi3>
10013ecc:	8085883a 	add	r2,r16,r2
10013ed0:	10000015 	stw	zero,0(r2)
  }
}
10013ed4:	0001883a 	nop
10013ed8:	e6ffff04 	addi	sp,fp,-4
10013edc:	dfc00217 	ldw	ra,8(sp)
10013ee0:	df000117 	ldw	fp,4(sp)
10013ee4:	dc000017 	ldw	r16,0(sp)
10013ee8:	dec00304 	addi	sp,sp,12
10013eec:	f800283a 	ret

10013ef0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10013ef0:	defff904 	addi	sp,sp,-28
10013ef4:	df000615 	stw	fp,24(sp)
10013ef8:	df000604 	addi	fp,sp,24
10013efc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013f00:	0005303a 	rdctl	r2,status
10013f04:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013f08:	e0fffe17 	ldw	r3,-8(fp)
10013f0c:	00bfff84 	movi	r2,-2
10013f10:	1884703a 	and	r2,r3,r2
10013f14:	1001703a 	wrctl	status,r2
  
  return context;
10013f18:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10013f1c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10013f20:	d0a00c17 	ldw	r2,-32720(gp)
10013f24:	10c000c4 	addi	r3,r2,3
10013f28:	00bfff04 	movi	r2,-4
10013f2c:	1884703a 	and	r2,r3,r2
10013f30:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10013f34:	d0e00c17 	ldw	r3,-32720(gp)
10013f38:	e0bfff17 	ldw	r2,-4(fp)
10013f3c:	1887883a 	add	r3,r3,r2
10013f40:	00860034 	movhi	r2,6144
10013f44:	10800004 	addi	r2,r2,0
10013f48:	10c0062e 	bgeu	r2,r3,10013f64 <sbrk+0x74>
10013f4c:	e0bffb17 	ldw	r2,-20(fp)
10013f50:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013f54:	e0bffa17 	ldw	r2,-24(fp)
10013f58:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10013f5c:	00bfffc4 	movi	r2,-1
10013f60:	00000b06 	br	10013f90 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10013f64:	d0a00c17 	ldw	r2,-32720(gp)
10013f68:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
10013f6c:	d0e00c17 	ldw	r3,-32720(gp)
10013f70:	e0bfff17 	ldw	r2,-4(fp)
10013f74:	1885883a 	add	r2,r3,r2
10013f78:	d0a00c15 	stw	r2,-32720(gp)
10013f7c:	e0bffb17 	ldw	r2,-20(fp)
10013f80:	e0bffc15 	stw	r2,-16(fp)
10013f84:	e0bffc17 	ldw	r2,-16(fp)
10013f88:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10013f8c:	e0bffd17 	ldw	r2,-12(fp)
} 
10013f90:	e037883a 	mov	sp,fp
10013f94:	df000017 	ldw	fp,0(sp)
10013f98:	dec00104 	addi	sp,sp,4
10013f9c:	f800283a 	ret

10013fa0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
10013fa0:	defffd04 	addi	sp,sp,-12
10013fa4:	dfc00215 	stw	ra,8(sp)
10013fa8:	df000115 	stw	fp,4(sp)
10013fac:	df000104 	addi	fp,sp,4
10013fb0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
10013fb4:	e13fff17 	ldw	r4,-4(fp)
10013fb8:	0014d580 	call	10014d58 <alt_busy_sleep>
}
10013fbc:	e037883a 	mov	sp,fp
10013fc0:	dfc00117 	ldw	ra,4(sp)
10013fc4:	df000017 	ldw	fp,0(sp)
10013fc8:	dec00204 	addi	sp,sp,8
10013fcc:	f800283a 	ret

10013fd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10013fd0:	defffe04 	addi	sp,sp,-8
10013fd4:	dfc00115 	stw	ra,4(sp)
10013fd8:	df000015 	stw	fp,0(sp)
10013fdc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10013fe0:	d0a00b17 	ldw	r2,-32724(gp)
10013fe4:	10000326 	beq	r2,zero,10013ff4 <alt_get_errno+0x24>
10013fe8:	d0a00b17 	ldw	r2,-32724(gp)
10013fec:	103ee83a 	callr	r2
10013ff0:	00000106 	br	10013ff8 <alt_get_errno+0x28>
10013ff4:	d09b3104 	addi	r2,gp,27844
}
10013ff8:	e037883a 	mov	sp,fp
10013ffc:	dfc00117 	ldw	ra,4(sp)
10014000:	df000017 	ldw	fp,0(sp)
10014004:	dec00204 	addi	sp,sp,8
10014008:	f800283a 	ret

1001400c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1001400c:	defff904 	addi	sp,sp,-28
10014010:	dfc00615 	stw	ra,24(sp)
10014014:	df000515 	stw	fp,20(sp)
10014018:	df000504 	addi	fp,sp,20
1001401c:	e13ffd15 	stw	r4,-12(fp)
10014020:	e17ffe15 	stw	r5,-8(fp)
10014024:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10014028:	e0bffd17 	ldw	r2,-12(fp)
1001402c:	10000816 	blt	r2,zero,10014050 <write+0x44>
10014030:	01400304 	movi	r5,12
10014034:	e13ffd17 	ldw	r4,-12(fp)
10014038:	00069bc0 	call	100069bc <__mulsi3>
1001403c:	1007883a 	mov	r3,r2
10014040:	008400b4 	movhi	r2,4098
10014044:	10911804 	addi	r2,r2,17504
10014048:	1885883a 	add	r2,r3,r2
1001404c:	00000106 	br	10014054 <write+0x48>
10014050:	0005883a 	mov	r2,zero
10014054:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10014058:	e0bffb17 	ldw	r2,-20(fp)
1001405c:	10002126 	beq	r2,zero,100140e4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10014060:	e0bffb17 	ldw	r2,-20(fp)
10014064:	10800217 	ldw	r2,8(r2)
10014068:	108000cc 	andi	r2,r2,3
1001406c:	10001826 	beq	r2,zero,100140d0 <write+0xc4>
10014070:	e0bffb17 	ldw	r2,-20(fp)
10014074:	10800017 	ldw	r2,0(r2)
10014078:	10800617 	ldw	r2,24(r2)
1001407c:	10001426 	beq	r2,zero,100140d0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10014080:	e0bffb17 	ldw	r2,-20(fp)
10014084:	10800017 	ldw	r2,0(r2)
10014088:	10800617 	ldw	r2,24(r2)
1001408c:	e0ffff17 	ldw	r3,-4(fp)
10014090:	180d883a 	mov	r6,r3
10014094:	e17ffe17 	ldw	r5,-8(fp)
10014098:	e13ffb17 	ldw	r4,-20(fp)
1001409c:	103ee83a 	callr	r2
100140a0:	e0bffc15 	stw	r2,-16(fp)
100140a4:	e0bffc17 	ldw	r2,-16(fp)
100140a8:	1000070e 	bge	r2,zero,100140c8 <write+0xbc>
      {
        ALT_ERRNO = -rval;
100140ac:	0013fd00 	call	10013fd0 <alt_get_errno>
100140b0:	1007883a 	mov	r3,r2
100140b4:	e0bffc17 	ldw	r2,-16(fp)
100140b8:	0085c83a 	sub	r2,zero,r2
100140bc:	18800015 	stw	r2,0(r3)
        return -1;
100140c0:	00bfffc4 	movi	r2,-1
100140c4:	00000c06 	br	100140f8 <write+0xec>
      }
      return rval;
100140c8:	e0bffc17 	ldw	r2,-16(fp)
100140cc:	00000a06 	br	100140f8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
100140d0:	0013fd00 	call	10013fd0 <alt_get_errno>
100140d4:	1007883a 	mov	r3,r2
100140d8:	00800344 	movi	r2,13
100140dc:	18800015 	stw	r2,0(r3)
100140e0:	00000406 	br	100140f4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
100140e4:	0013fd00 	call	10013fd0 <alt_get_errno>
100140e8:	1007883a 	mov	r3,r2
100140ec:	00801444 	movi	r2,81
100140f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
100140f4:	00bfffc4 	movi	r2,-1
}
100140f8:	e037883a 	mov	sp,fp
100140fc:	dfc00117 	ldw	ra,4(sp)
10014100:	df000017 	ldw	fp,0(sp)
10014104:	dec00204 	addi	sp,sp,8
10014108:	f800283a 	ret

1001410c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1001410c:	defffd04 	addi	sp,sp,-12
10014110:	dfc00215 	stw	ra,8(sp)
10014114:	df000115 	stw	fp,4(sp)
10014118:	df000104 	addi	fp,sp,4
1001411c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10014120:	d1600804 	addi	r5,gp,-32736
10014124:	e13fff17 	ldw	r4,-4(fp)
10014128:	0014f0c0 	call	10014f0c <alt_dev_llist_insert>
}
1001412c:	e037883a 	mov	sp,fp
10014130:	dfc00117 	ldw	ra,4(sp)
10014134:	df000017 	ldw	fp,0(sp)
10014138:	dec00204 	addi	sp,sp,8
1001413c:	f800283a 	ret

10014140 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10014140:	defffd04 	addi	sp,sp,-12
10014144:	dfc00215 	stw	ra,8(sp)
10014148:	df000115 	stw	fp,4(sp)
1001414c:	df000104 	addi	fp,sp,4
10014150:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10014154:	00158b80 	call	100158b8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10014158:	00800044 	movi	r2,1
1001415c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10014160:	0001883a 	nop
10014164:	e037883a 	mov	sp,fp
10014168:	dfc00117 	ldw	ra,4(sp)
1001416c:	df000017 	ldw	fp,0(sp)
10014170:	dec00204 	addi	sp,sp,8
10014174:	f800283a 	ret

10014178 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10014178:	defffe04 	addi	sp,sp,-8
1001417c:	dfc00115 	stw	ra,4(sp)
10014180:	df000015 	stw	fp,0(sp)
10014184:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10014188:	000d883a 	mov	r6,zero
1001418c:	000b883a 	mov	r5,zero
10014190:	010400b4 	movhi	r4,4098
10014194:	21118204 	addi	r4,r4,17928
10014198:	00143280 	call	10014328 <altera_avalon_jtag_uart_init>
1001419c:	010400b4 	movhi	r4,4098
100141a0:	21117804 	addi	r4,r4,17888
100141a4:	001410c0 	call	1001410c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
100141a8:	0001883a 	nop
}
100141ac:	0001883a 	nop
100141b0:	e037883a 	mov	sp,fp
100141b4:	dfc00117 	ldw	ra,4(sp)
100141b8:	df000017 	ldw	fp,0(sp)
100141bc:	dec00204 	addi	sp,sp,8
100141c0:	f800283a 	ret

100141c4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
100141c4:	defffa04 	addi	sp,sp,-24
100141c8:	dfc00515 	stw	ra,20(sp)
100141cc:	df000415 	stw	fp,16(sp)
100141d0:	df000404 	addi	fp,sp,16
100141d4:	e13ffd15 	stw	r4,-12(fp)
100141d8:	e17ffe15 	stw	r5,-8(fp)
100141dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100141e0:	e0bffd17 	ldw	r2,-12(fp)
100141e4:	10800017 	ldw	r2,0(r2)
100141e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
100141ec:	e0bffc17 	ldw	r2,-16(fp)
100141f0:	10c00a04 	addi	r3,r2,40
100141f4:	e0bffd17 	ldw	r2,-12(fp)
100141f8:	10800217 	ldw	r2,8(r2)
100141fc:	100f883a 	mov	r7,r2
10014200:	e1bfff17 	ldw	r6,-4(fp)
10014204:	e17ffe17 	ldw	r5,-8(fp)
10014208:	1809883a 	mov	r4,r3
1001420c:	00147ec0 	call	100147ec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10014210:	e037883a 	mov	sp,fp
10014214:	dfc00117 	ldw	ra,4(sp)
10014218:	df000017 	ldw	fp,0(sp)
1001421c:	dec00204 	addi	sp,sp,8
10014220:	f800283a 	ret

10014224 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10014224:	defffa04 	addi	sp,sp,-24
10014228:	dfc00515 	stw	ra,20(sp)
1001422c:	df000415 	stw	fp,16(sp)
10014230:	df000404 	addi	fp,sp,16
10014234:	e13ffd15 	stw	r4,-12(fp)
10014238:	e17ffe15 	stw	r5,-8(fp)
1001423c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10014240:	e0bffd17 	ldw	r2,-12(fp)
10014244:	10800017 	ldw	r2,0(r2)
10014248:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1001424c:	e0bffc17 	ldw	r2,-16(fp)
10014250:	10c00a04 	addi	r3,r2,40
10014254:	e0bffd17 	ldw	r2,-12(fp)
10014258:	10800217 	ldw	r2,8(r2)
1001425c:	100f883a 	mov	r7,r2
10014260:	e1bfff17 	ldw	r6,-4(fp)
10014264:	e17ffe17 	ldw	r5,-8(fp)
10014268:	1809883a 	mov	r4,r3
1001426c:	0014a080 	call	10014a08 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10014270:	e037883a 	mov	sp,fp
10014274:	dfc00117 	ldw	ra,4(sp)
10014278:	df000017 	ldw	fp,0(sp)
1001427c:	dec00204 	addi	sp,sp,8
10014280:	f800283a 	ret

10014284 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10014284:	defffc04 	addi	sp,sp,-16
10014288:	dfc00315 	stw	ra,12(sp)
1001428c:	df000215 	stw	fp,8(sp)
10014290:	df000204 	addi	fp,sp,8
10014294:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10014298:	e0bfff17 	ldw	r2,-4(fp)
1001429c:	10800017 	ldw	r2,0(r2)
100142a0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
100142a4:	e0bffe17 	ldw	r2,-8(fp)
100142a8:	10c00a04 	addi	r3,r2,40
100142ac:	e0bfff17 	ldw	r2,-4(fp)
100142b0:	10800217 	ldw	r2,8(r2)
100142b4:	100b883a 	mov	r5,r2
100142b8:	1809883a 	mov	r4,r3
100142bc:	00146940 	call	10014694 <altera_avalon_jtag_uart_close>
}
100142c0:	e037883a 	mov	sp,fp
100142c4:	dfc00117 	ldw	ra,4(sp)
100142c8:	df000017 	ldw	fp,0(sp)
100142cc:	dec00204 	addi	sp,sp,8
100142d0:	f800283a 	ret

100142d4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
100142d4:	defffa04 	addi	sp,sp,-24
100142d8:	dfc00515 	stw	ra,20(sp)
100142dc:	df000415 	stw	fp,16(sp)
100142e0:	df000404 	addi	fp,sp,16
100142e4:	e13ffd15 	stw	r4,-12(fp)
100142e8:	e17ffe15 	stw	r5,-8(fp)
100142ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
100142f0:	e0bffd17 	ldw	r2,-12(fp)
100142f4:	10800017 	ldw	r2,0(r2)
100142f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
100142fc:	e0bffc17 	ldw	r2,-16(fp)
10014300:	10800a04 	addi	r2,r2,40
10014304:	e1bfff17 	ldw	r6,-4(fp)
10014308:	e17ffe17 	ldw	r5,-8(fp)
1001430c:	1009883a 	mov	r4,r2
10014310:	00146fc0 	call	100146fc <altera_avalon_jtag_uart_ioctl>
}
10014314:	e037883a 	mov	sp,fp
10014318:	dfc00117 	ldw	ra,4(sp)
1001431c:	df000017 	ldw	fp,0(sp)
10014320:	dec00204 	addi	sp,sp,8
10014324:	f800283a 	ret

10014328 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10014328:	defffa04 	addi	sp,sp,-24
1001432c:	dfc00515 	stw	ra,20(sp)
10014330:	df000415 	stw	fp,16(sp)
10014334:	df000404 	addi	fp,sp,16
10014338:	e13ffd15 	stw	r4,-12(fp)
1001433c:	e17ffe15 	stw	r5,-8(fp)
10014340:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10014344:	e0bffd17 	ldw	r2,-12(fp)
10014348:	00c00044 	movi	r3,1
1001434c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10014350:	e0bffd17 	ldw	r2,-12(fp)
10014354:	10800017 	ldw	r2,0(r2)
10014358:	10800104 	addi	r2,r2,4
1001435c:	1007883a 	mov	r3,r2
10014360:	e0bffd17 	ldw	r2,-12(fp)
10014364:	10800817 	ldw	r2,32(r2)
10014368:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1001436c:	e0bffe17 	ldw	r2,-8(fp)
10014370:	e0ffff17 	ldw	r3,-4(fp)
10014374:	d8000015 	stw	zero,0(sp)
10014378:	e1fffd17 	ldw	r7,-12(fp)
1001437c:	01840074 	movhi	r6,4097
10014380:	3190fa04 	addi	r6,r6,17384
10014384:	180b883a 	mov	r5,r3
10014388:	1009883a 	mov	r4,r2
1001438c:	00150900 	call	10015090 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10014390:	e0bffd17 	ldw	r2,-12(fp)
10014394:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10014398:	e0bffd17 	ldw	r2,-12(fp)
1001439c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
100143a0:	d0db3617 	ldw	r3,27864(gp)
100143a4:	e1fffd17 	ldw	r7,-12(fp)
100143a8:	01840074 	movhi	r6,4097
100143ac:	31917d04 	addi	r6,r6,17908
100143b0:	180b883a 	mov	r5,r3
100143b4:	1009883a 	mov	r4,r2
100143b8:	0014c2c0 	call	10014c2c <alt_alarm_start>
100143bc:	1000040e 	bge	r2,zero,100143d0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
100143c0:	e0fffd17 	ldw	r3,-12(fp)
100143c4:	00a00034 	movhi	r2,32768
100143c8:	10bfffc4 	addi	r2,r2,-1
100143cc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
100143d0:	0001883a 	nop
100143d4:	e037883a 	mov	sp,fp
100143d8:	dfc00117 	ldw	ra,4(sp)
100143dc:	df000017 	ldw	fp,0(sp)
100143e0:	dec00204 	addi	sp,sp,8
100143e4:	f800283a 	ret

100143e8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
100143e8:	defff804 	addi	sp,sp,-32
100143ec:	df000715 	stw	fp,28(sp)
100143f0:	df000704 	addi	fp,sp,28
100143f4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
100143f8:	e0bfff17 	ldw	r2,-4(fp)
100143fc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10014400:	e0bffb17 	ldw	r2,-20(fp)
10014404:	10800017 	ldw	r2,0(r2)
10014408:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1001440c:	e0bffc17 	ldw	r2,-16(fp)
10014410:	10800104 	addi	r2,r2,4
10014414:	10800037 	ldwio	r2,0(r2)
10014418:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1001441c:	e0bffd17 	ldw	r2,-12(fp)
10014420:	1080c00c 	andi	r2,r2,768
10014424:	10006d26 	beq	r2,zero,100145dc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10014428:	e0bffd17 	ldw	r2,-12(fp)
1001442c:	1080400c 	andi	r2,r2,256
10014430:	10003526 	beq	r2,zero,10014508 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10014434:	00800074 	movhi	r2,1
10014438:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001443c:	e0bffb17 	ldw	r2,-20(fp)
10014440:	10800a17 	ldw	r2,40(r2)
10014444:	10800044 	addi	r2,r2,1
10014448:	1081ffcc 	andi	r2,r2,2047
1001444c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10014450:	e0bffb17 	ldw	r2,-20(fp)
10014454:	10c00b17 	ldw	r3,44(r2)
10014458:	e0bffe17 	ldw	r2,-8(fp)
1001445c:	18801526 	beq	r3,r2,100144b4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10014460:	e0bffc17 	ldw	r2,-16(fp)
10014464:	10800037 	ldwio	r2,0(r2)
10014468:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1001446c:	e0bff917 	ldw	r2,-28(fp)
10014470:	10a0000c 	andi	r2,r2,32768
10014474:	10001126 	beq	r2,zero,100144bc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10014478:	e0bffb17 	ldw	r2,-20(fp)
1001447c:	10800a17 	ldw	r2,40(r2)
10014480:	e0fff917 	ldw	r3,-28(fp)
10014484:	1809883a 	mov	r4,r3
10014488:	e0fffb17 	ldw	r3,-20(fp)
1001448c:	1885883a 	add	r2,r3,r2
10014490:	10800e04 	addi	r2,r2,56
10014494:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10014498:	e0bffb17 	ldw	r2,-20(fp)
1001449c:	10800a17 	ldw	r2,40(r2)
100144a0:	10800044 	addi	r2,r2,1
100144a4:	10c1ffcc 	andi	r3,r2,2047
100144a8:	e0bffb17 	ldw	r2,-20(fp)
100144ac:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
100144b0:	003fe206 	br	1001443c <__alt_data_end+0xf801443c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
100144b4:	0001883a 	nop
100144b8:	00000106 	br	100144c0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
100144bc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
100144c0:	e0bff917 	ldw	r2,-28(fp)
100144c4:	10bfffec 	andhi	r2,r2,65535
100144c8:	10000f26 	beq	r2,zero,10014508 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100144cc:	e0bffb17 	ldw	r2,-20(fp)
100144d0:	10c00817 	ldw	r3,32(r2)
100144d4:	00bfff84 	movi	r2,-2
100144d8:	1886703a 	and	r3,r3,r2
100144dc:	e0bffb17 	ldw	r2,-20(fp)
100144e0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
100144e4:	e0bffc17 	ldw	r2,-16(fp)
100144e8:	10800104 	addi	r2,r2,4
100144ec:	1007883a 	mov	r3,r2
100144f0:	e0bffb17 	ldw	r2,-20(fp)
100144f4:	10800817 	ldw	r2,32(r2)
100144f8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100144fc:	e0bffc17 	ldw	r2,-16(fp)
10014500:	10800104 	addi	r2,r2,4
10014504:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10014508:	e0bffd17 	ldw	r2,-12(fp)
1001450c:	1080800c 	andi	r2,r2,512
10014510:	103fbe26 	beq	r2,zero,1001440c <__alt_data_end+0xf801440c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10014514:	e0bffd17 	ldw	r2,-12(fp)
10014518:	1004d43a 	srli	r2,r2,16
1001451c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10014520:	00001406 	br	10014574 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10014524:	e0bffc17 	ldw	r2,-16(fp)
10014528:	e0fffb17 	ldw	r3,-20(fp)
1001452c:	18c00d17 	ldw	r3,52(r3)
10014530:	e13ffb17 	ldw	r4,-20(fp)
10014534:	20c7883a 	add	r3,r4,r3
10014538:	18c20e04 	addi	r3,r3,2104
1001453c:	18c00003 	ldbu	r3,0(r3)
10014540:	18c03fcc 	andi	r3,r3,255
10014544:	18c0201c 	xori	r3,r3,128
10014548:	18ffe004 	addi	r3,r3,-128
1001454c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10014550:	e0bffb17 	ldw	r2,-20(fp)
10014554:	10800d17 	ldw	r2,52(r2)
10014558:	10800044 	addi	r2,r2,1
1001455c:	10c1ffcc 	andi	r3,r2,2047
10014560:	e0bffb17 	ldw	r2,-20(fp)
10014564:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10014568:	e0bffa17 	ldw	r2,-24(fp)
1001456c:	10bfffc4 	addi	r2,r2,-1
10014570:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10014574:	e0bffa17 	ldw	r2,-24(fp)
10014578:	10000526 	beq	r2,zero,10014590 <altera_avalon_jtag_uart_irq+0x1a8>
1001457c:	e0bffb17 	ldw	r2,-20(fp)
10014580:	10c00d17 	ldw	r3,52(r2)
10014584:	e0bffb17 	ldw	r2,-20(fp)
10014588:	10800c17 	ldw	r2,48(r2)
1001458c:	18bfe51e 	bne	r3,r2,10014524 <__alt_data_end+0xf8014524>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10014590:	e0bffa17 	ldw	r2,-24(fp)
10014594:	103f9d26 	beq	r2,zero,1001440c <__alt_data_end+0xf801440c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10014598:	e0bffb17 	ldw	r2,-20(fp)
1001459c:	10c00817 	ldw	r3,32(r2)
100145a0:	00bfff44 	movi	r2,-3
100145a4:	1886703a 	and	r3,r3,r2
100145a8:	e0bffb17 	ldw	r2,-20(fp)
100145ac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100145b0:	e0bffb17 	ldw	r2,-20(fp)
100145b4:	10800017 	ldw	r2,0(r2)
100145b8:	10800104 	addi	r2,r2,4
100145bc:	1007883a 	mov	r3,r2
100145c0:	e0bffb17 	ldw	r2,-20(fp)
100145c4:	10800817 	ldw	r2,32(r2)
100145c8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100145cc:	e0bffc17 	ldw	r2,-16(fp)
100145d0:	10800104 	addi	r2,r2,4
100145d4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
100145d8:	003f8c06 	br	1001440c <__alt_data_end+0xf801440c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
100145dc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
100145e0:	0001883a 	nop
100145e4:	e037883a 	mov	sp,fp
100145e8:	df000017 	ldw	fp,0(sp)
100145ec:	dec00104 	addi	sp,sp,4
100145f0:	f800283a 	ret

100145f4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
100145f4:	defff804 	addi	sp,sp,-32
100145f8:	df000715 	stw	fp,28(sp)
100145fc:	df000704 	addi	fp,sp,28
10014600:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10014604:	e0bffb17 	ldw	r2,-20(fp)
10014608:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1001460c:	e0bff917 	ldw	r2,-28(fp)
10014610:	10800017 	ldw	r2,0(r2)
10014614:	10800104 	addi	r2,r2,4
10014618:	10800037 	ldwio	r2,0(r2)
1001461c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10014620:	e0bffa17 	ldw	r2,-24(fp)
10014624:	1081000c 	andi	r2,r2,1024
10014628:	10000b26 	beq	r2,zero,10014658 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1001462c:	e0bff917 	ldw	r2,-28(fp)
10014630:	10800017 	ldw	r2,0(r2)
10014634:	10800104 	addi	r2,r2,4
10014638:	1007883a 	mov	r3,r2
1001463c:	e0bff917 	ldw	r2,-28(fp)
10014640:	10800817 	ldw	r2,32(r2)
10014644:	10810014 	ori	r2,r2,1024
10014648:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1001464c:	e0bff917 	ldw	r2,-28(fp)
10014650:	10000915 	stw	zero,36(r2)
10014654:	00000a06 	br	10014680 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10014658:	e0bff917 	ldw	r2,-28(fp)
1001465c:	10c00917 	ldw	r3,36(r2)
10014660:	00a00034 	movhi	r2,32768
10014664:	10bfff04 	addi	r2,r2,-4
10014668:	10c00536 	bltu	r2,r3,10014680 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1001466c:	e0bff917 	ldw	r2,-28(fp)
10014670:	10800917 	ldw	r2,36(r2)
10014674:	10c00044 	addi	r3,r2,1
10014678:	e0bff917 	ldw	r2,-28(fp)
1001467c:	10c00915 	stw	r3,36(r2)
10014680:	d09b3617 	ldw	r2,27864(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10014684:	e037883a 	mov	sp,fp
10014688:	df000017 	ldw	fp,0(sp)
1001468c:	dec00104 	addi	sp,sp,4
10014690:	f800283a 	ret

10014694 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10014694:	defffd04 	addi	sp,sp,-12
10014698:	df000215 	stw	fp,8(sp)
1001469c:	df000204 	addi	fp,sp,8
100146a0:	e13ffe15 	stw	r4,-8(fp)
100146a4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100146a8:	00000506 	br	100146c0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
100146ac:	e0bfff17 	ldw	r2,-4(fp)
100146b0:	1090000c 	andi	r2,r2,16384
100146b4:	10000226 	beq	r2,zero,100146c0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
100146b8:	00bffd44 	movi	r2,-11
100146bc:	00000b06 	br	100146ec <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100146c0:	e0bffe17 	ldw	r2,-8(fp)
100146c4:	10c00d17 	ldw	r3,52(r2)
100146c8:	e0bffe17 	ldw	r2,-8(fp)
100146cc:	10800c17 	ldw	r2,48(r2)
100146d0:	18800526 	beq	r3,r2,100146e8 <altera_avalon_jtag_uart_close+0x54>
100146d4:	e0bffe17 	ldw	r2,-8(fp)
100146d8:	10c00917 	ldw	r3,36(r2)
100146dc:	e0bffe17 	ldw	r2,-8(fp)
100146e0:	10800117 	ldw	r2,4(r2)
100146e4:	18bff136 	bltu	r3,r2,100146ac <__alt_data_end+0xf80146ac>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
100146e8:	0005883a 	mov	r2,zero
}
100146ec:	e037883a 	mov	sp,fp
100146f0:	df000017 	ldw	fp,0(sp)
100146f4:	dec00104 	addi	sp,sp,4
100146f8:	f800283a 	ret

100146fc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
100146fc:	defffa04 	addi	sp,sp,-24
10014700:	df000515 	stw	fp,20(sp)
10014704:	df000504 	addi	fp,sp,20
10014708:	e13ffd15 	stw	r4,-12(fp)
1001470c:	e17ffe15 	stw	r5,-8(fp)
10014710:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10014714:	00bff9c4 	movi	r2,-25
10014718:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1001471c:	e0bffe17 	ldw	r2,-8(fp)
10014720:	10da8060 	cmpeqi	r3,r2,27137
10014724:	1800031e 	bne	r3,zero,10014734 <altera_avalon_jtag_uart_ioctl+0x38>
10014728:	109a80a0 	cmpeqi	r2,r2,27138
1001472c:	1000181e 	bne	r2,zero,10014790 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10014730:	00002906 	br	100147d8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10014734:	e0bffd17 	ldw	r2,-12(fp)
10014738:	10c00117 	ldw	r3,4(r2)
1001473c:	00a00034 	movhi	r2,32768
10014740:	10bfffc4 	addi	r2,r2,-1
10014744:	18802126 	beq	r3,r2,100147cc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10014748:	e0bfff17 	ldw	r2,-4(fp)
1001474c:	10800017 	ldw	r2,0(r2)
10014750:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10014754:	e0bffc17 	ldw	r2,-16(fp)
10014758:	10800090 	cmplti	r2,r2,2
1001475c:	1000061e 	bne	r2,zero,10014778 <altera_avalon_jtag_uart_ioctl+0x7c>
10014760:	e0fffc17 	ldw	r3,-16(fp)
10014764:	00a00034 	movhi	r2,32768
10014768:	10bfffc4 	addi	r2,r2,-1
1001476c:	18800226 	beq	r3,r2,10014778 <altera_avalon_jtag_uart_ioctl+0x7c>
10014770:	e0bffc17 	ldw	r2,-16(fp)
10014774:	00000206 	br	10014780 <altera_avalon_jtag_uart_ioctl+0x84>
10014778:	00a00034 	movhi	r2,32768
1001477c:	10bfff84 	addi	r2,r2,-2
10014780:	e0fffd17 	ldw	r3,-12(fp)
10014784:	18800115 	stw	r2,4(r3)
      rc = 0;
10014788:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1001478c:	00000f06 	br	100147cc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10014790:	e0bffd17 	ldw	r2,-12(fp)
10014794:	10c00117 	ldw	r3,4(r2)
10014798:	00a00034 	movhi	r2,32768
1001479c:	10bfffc4 	addi	r2,r2,-1
100147a0:	18800c26 	beq	r3,r2,100147d4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
100147a4:	e0bffd17 	ldw	r2,-12(fp)
100147a8:	10c00917 	ldw	r3,36(r2)
100147ac:	e0bffd17 	ldw	r2,-12(fp)
100147b0:	10800117 	ldw	r2,4(r2)
100147b4:	1885803a 	cmpltu	r2,r3,r2
100147b8:	10c03fcc 	andi	r3,r2,255
100147bc:	e0bfff17 	ldw	r2,-4(fp)
100147c0:	10c00015 	stw	r3,0(r2)
      rc = 0;
100147c4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100147c8:	00000206 	br	100147d4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
100147cc:	0001883a 	nop
100147d0:	00000106 	br	100147d8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
100147d4:	0001883a 	nop

  default:
    break;
  }

  return rc;
100147d8:	e0bffb17 	ldw	r2,-20(fp)
}
100147dc:	e037883a 	mov	sp,fp
100147e0:	df000017 	ldw	fp,0(sp)
100147e4:	dec00104 	addi	sp,sp,4
100147e8:	f800283a 	ret

100147ec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
100147ec:	defff304 	addi	sp,sp,-52
100147f0:	dfc00c15 	stw	ra,48(sp)
100147f4:	df000b15 	stw	fp,44(sp)
100147f8:	df000b04 	addi	fp,sp,44
100147fc:	e13ffc15 	stw	r4,-16(fp)
10014800:	e17ffd15 	stw	r5,-12(fp)
10014804:	e1bffe15 	stw	r6,-8(fp)
10014808:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1001480c:	e0bffd17 	ldw	r2,-12(fp)
10014810:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10014814:	00004706 	br	10014934 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10014818:	e0bffc17 	ldw	r2,-16(fp)
1001481c:	10800a17 	ldw	r2,40(r2)
10014820:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10014824:	e0bffc17 	ldw	r2,-16(fp)
10014828:	10800b17 	ldw	r2,44(r2)
1001482c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10014830:	e0fff717 	ldw	r3,-36(fp)
10014834:	e0bff817 	ldw	r2,-32(fp)
10014838:	18800536 	bltu	r3,r2,10014850 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1001483c:	e0fff717 	ldw	r3,-36(fp)
10014840:	e0bff817 	ldw	r2,-32(fp)
10014844:	1885c83a 	sub	r2,r3,r2
10014848:	e0bff615 	stw	r2,-40(fp)
1001484c:	00000406 	br	10014860 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10014850:	00c20004 	movi	r3,2048
10014854:	e0bff817 	ldw	r2,-32(fp)
10014858:	1885c83a 	sub	r2,r3,r2
1001485c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10014860:	e0bff617 	ldw	r2,-40(fp)
10014864:	10001e26 	beq	r2,zero,100148e0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10014868:	e0fffe17 	ldw	r3,-8(fp)
1001486c:	e0bff617 	ldw	r2,-40(fp)
10014870:	1880022e 	bgeu	r3,r2,1001487c <altera_avalon_jtag_uart_read+0x90>
        n = space;
10014874:	e0bffe17 	ldw	r2,-8(fp)
10014878:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1001487c:	e0bffc17 	ldw	r2,-16(fp)
10014880:	10c00e04 	addi	r3,r2,56
10014884:	e0bff817 	ldw	r2,-32(fp)
10014888:	1885883a 	add	r2,r3,r2
1001488c:	e1bff617 	ldw	r6,-40(fp)
10014890:	100b883a 	mov	r5,r2
10014894:	e13ff517 	ldw	r4,-44(fp)
10014898:	000c5d80 	call	1000c5d8 <memcpy>
      ptr   += n;
1001489c:	e0fff517 	ldw	r3,-44(fp)
100148a0:	e0bff617 	ldw	r2,-40(fp)
100148a4:	1885883a 	add	r2,r3,r2
100148a8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
100148ac:	e0fffe17 	ldw	r3,-8(fp)
100148b0:	e0bff617 	ldw	r2,-40(fp)
100148b4:	1885c83a 	sub	r2,r3,r2
100148b8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100148bc:	e0fff817 	ldw	r3,-32(fp)
100148c0:	e0bff617 	ldw	r2,-40(fp)
100148c4:	1885883a 	add	r2,r3,r2
100148c8:	10c1ffcc 	andi	r3,r2,2047
100148cc:	e0bffc17 	ldw	r2,-16(fp)
100148d0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
100148d4:	e0bffe17 	ldw	r2,-8(fp)
100148d8:	00bfcf16 	blt	zero,r2,10014818 <__alt_data_end+0xf8014818>
100148dc:	00000106 	br	100148e4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
100148e0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
100148e4:	e0fff517 	ldw	r3,-44(fp)
100148e8:	e0bffd17 	ldw	r2,-12(fp)
100148ec:	1880141e 	bne	r3,r2,10014940 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
100148f0:	e0bfff17 	ldw	r2,-4(fp)
100148f4:	1090000c 	andi	r2,r2,16384
100148f8:	1000131e 	bne	r2,zero,10014948 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
100148fc:	0001883a 	nop
10014900:	e0bffc17 	ldw	r2,-16(fp)
10014904:	10c00a17 	ldw	r3,40(r2)
10014908:	e0bff717 	ldw	r2,-36(fp)
1001490c:	1880051e 	bne	r3,r2,10014924 <altera_avalon_jtag_uart_read+0x138>
10014910:	e0bffc17 	ldw	r2,-16(fp)
10014914:	10c00917 	ldw	r3,36(r2)
10014918:	e0bffc17 	ldw	r2,-16(fp)
1001491c:	10800117 	ldw	r2,4(r2)
10014920:	18bff736 	bltu	r3,r2,10014900 <__alt_data_end+0xf8014900>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10014924:	e0bffc17 	ldw	r2,-16(fp)
10014928:	10c00a17 	ldw	r3,40(r2)
1001492c:	e0bff717 	ldw	r2,-36(fp)
10014930:	18800726 	beq	r3,r2,10014950 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10014934:	e0bffe17 	ldw	r2,-8(fp)
10014938:	00bfb716 	blt	zero,r2,10014818 <__alt_data_end+0xf8014818>
1001493c:	00000506 	br	10014954 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10014940:	0001883a 	nop
10014944:	00000306 	br	10014954 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10014948:	0001883a 	nop
1001494c:	00000106 	br	10014954 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10014950:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10014954:	e0fff517 	ldw	r3,-44(fp)
10014958:	e0bffd17 	ldw	r2,-12(fp)
1001495c:	18801826 	beq	r3,r2,100149c0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10014960:	0005303a 	rdctl	r2,status
10014964:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10014968:	e0fffb17 	ldw	r3,-20(fp)
1001496c:	00bfff84 	movi	r2,-2
10014970:	1884703a 	and	r2,r3,r2
10014974:	1001703a 	wrctl	status,r2
  
  return context;
10014978:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1001497c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10014980:	e0bffc17 	ldw	r2,-16(fp)
10014984:	10800817 	ldw	r2,32(r2)
10014988:	10c00054 	ori	r3,r2,1
1001498c:	e0bffc17 	ldw	r2,-16(fp)
10014990:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10014994:	e0bffc17 	ldw	r2,-16(fp)
10014998:	10800017 	ldw	r2,0(r2)
1001499c:	10800104 	addi	r2,r2,4
100149a0:	1007883a 	mov	r3,r2
100149a4:	e0bffc17 	ldw	r2,-16(fp)
100149a8:	10800817 	ldw	r2,32(r2)
100149ac:	18800035 	stwio	r2,0(r3)
100149b0:	e0bffa17 	ldw	r2,-24(fp)
100149b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100149b8:	e0bff917 	ldw	r2,-28(fp)
100149bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
100149c0:	e0fff517 	ldw	r3,-44(fp)
100149c4:	e0bffd17 	ldw	r2,-12(fp)
100149c8:	18800426 	beq	r3,r2,100149dc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
100149cc:	e0fff517 	ldw	r3,-44(fp)
100149d0:	e0bffd17 	ldw	r2,-12(fp)
100149d4:	1885c83a 	sub	r2,r3,r2
100149d8:	00000606 	br	100149f4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
100149dc:	e0bfff17 	ldw	r2,-4(fp)
100149e0:	1090000c 	andi	r2,r2,16384
100149e4:	10000226 	beq	r2,zero,100149f0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
100149e8:	00bffd44 	movi	r2,-11
100149ec:	00000106 	br	100149f4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
100149f0:	00bffec4 	movi	r2,-5
}
100149f4:	e037883a 	mov	sp,fp
100149f8:	dfc00117 	ldw	ra,4(sp)
100149fc:	df000017 	ldw	fp,0(sp)
10014a00:	dec00204 	addi	sp,sp,8
10014a04:	f800283a 	ret

10014a08 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10014a08:	defff304 	addi	sp,sp,-52
10014a0c:	dfc00c15 	stw	ra,48(sp)
10014a10:	df000b15 	stw	fp,44(sp)
10014a14:	df000b04 	addi	fp,sp,44
10014a18:	e13ffc15 	stw	r4,-16(fp)
10014a1c:	e17ffd15 	stw	r5,-12(fp)
10014a20:	e1bffe15 	stw	r6,-8(fp)
10014a24:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10014a28:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10014a2c:	e0bffd17 	ldw	r2,-12(fp)
10014a30:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10014a34:	00003706 	br	10014b14 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10014a38:	e0bffc17 	ldw	r2,-16(fp)
10014a3c:	10800c17 	ldw	r2,48(r2)
10014a40:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10014a44:	e0bffc17 	ldw	r2,-16(fp)
10014a48:	10800d17 	ldw	r2,52(r2)
10014a4c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10014a50:	e0fff917 	ldw	r3,-28(fp)
10014a54:	e0bff517 	ldw	r2,-44(fp)
10014a58:	1880062e 	bgeu	r3,r2,10014a74 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10014a5c:	e0fff517 	ldw	r3,-44(fp)
10014a60:	e0bff917 	ldw	r2,-28(fp)
10014a64:	1885c83a 	sub	r2,r3,r2
10014a68:	10bfffc4 	addi	r2,r2,-1
10014a6c:	e0bff615 	stw	r2,-40(fp)
10014a70:	00000b06 	br	10014aa0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10014a74:	e0bff517 	ldw	r2,-44(fp)
10014a78:	10000526 	beq	r2,zero,10014a90 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10014a7c:	00c20004 	movi	r3,2048
10014a80:	e0bff917 	ldw	r2,-28(fp)
10014a84:	1885c83a 	sub	r2,r3,r2
10014a88:	e0bff615 	stw	r2,-40(fp)
10014a8c:	00000406 	br	10014aa0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10014a90:	00c1ffc4 	movi	r3,2047
10014a94:	e0bff917 	ldw	r2,-28(fp)
10014a98:	1885c83a 	sub	r2,r3,r2
10014a9c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10014aa0:	e0bff617 	ldw	r2,-40(fp)
10014aa4:	10001e26 	beq	r2,zero,10014b20 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10014aa8:	e0fffe17 	ldw	r3,-8(fp)
10014aac:	e0bff617 	ldw	r2,-40(fp)
10014ab0:	1880022e 	bgeu	r3,r2,10014abc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10014ab4:	e0bffe17 	ldw	r2,-8(fp)
10014ab8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10014abc:	e0bffc17 	ldw	r2,-16(fp)
10014ac0:	10c20e04 	addi	r3,r2,2104
10014ac4:	e0bff917 	ldw	r2,-28(fp)
10014ac8:	1885883a 	add	r2,r3,r2
10014acc:	e1bff617 	ldw	r6,-40(fp)
10014ad0:	e17ffd17 	ldw	r5,-12(fp)
10014ad4:	1009883a 	mov	r4,r2
10014ad8:	000c5d80 	call	1000c5d8 <memcpy>
      ptr   += n;
10014adc:	e0fffd17 	ldw	r3,-12(fp)
10014ae0:	e0bff617 	ldw	r2,-40(fp)
10014ae4:	1885883a 	add	r2,r3,r2
10014ae8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10014aec:	e0fffe17 	ldw	r3,-8(fp)
10014af0:	e0bff617 	ldw	r2,-40(fp)
10014af4:	1885c83a 	sub	r2,r3,r2
10014af8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10014afc:	e0fff917 	ldw	r3,-28(fp)
10014b00:	e0bff617 	ldw	r2,-40(fp)
10014b04:	1885883a 	add	r2,r3,r2
10014b08:	10c1ffcc 	andi	r3,r2,2047
10014b0c:	e0bffc17 	ldw	r2,-16(fp)
10014b10:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10014b14:	e0bffe17 	ldw	r2,-8(fp)
10014b18:	00bfc716 	blt	zero,r2,10014a38 <__alt_data_end+0xf8014a38>
10014b1c:	00000106 	br	10014b24 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10014b20:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10014b24:	0005303a 	rdctl	r2,status
10014b28:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10014b2c:	e0fffb17 	ldw	r3,-20(fp)
10014b30:	00bfff84 	movi	r2,-2
10014b34:	1884703a 	and	r2,r3,r2
10014b38:	1001703a 	wrctl	status,r2
  
  return context;
10014b3c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10014b40:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10014b44:	e0bffc17 	ldw	r2,-16(fp)
10014b48:	10800817 	ldw	r2,32(r2)
10014b4c:	10c00094 	ori	r3,r2,2
10014b50:	e0bffc17 	ldw	r2,-16(fp)
10014b54:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10014b58:	e0bffc17 	ldw	r2,-16(fp)
10014b5c:	10800017 	ldw	r2,0(r2)
10014b60:	10800104 	addi	r2,r2,4
10014b64:	1007883a 	mov	r3,r2
10014b68:	e0bffc17 	ldw	r2,-16(fp)
10014b6c:	10800817 	ldw	r2,32(r2)
10014b70:	18800035 	stwio	r2,0(r3)
10014b74:	e0bffa17 	ldw	r2,-24(fp)
10014b78:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10014b7c:	e0bff817 	ldw	r2,-32(fp)
10014b80:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10014b84:	e0bffe17 	ldw	r2,-8(fp)
10014b88:	0080100e 	bge	zero,r2,10014bcc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10014b8c:	e0bfff17 	ldw	r2,-4(fp)
10014b90:	1090000c 	andi	r2,r2,16384
10014b94:	1000101e 	bne	r2,zero,10014bd8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10014b98:	0001883a 	nop
10014b9c:	e0bffc17 	ldw	r2,-16(fp)
10014ba0:	10c00d17 	ldw	r3,52(r2)
10014ba4:	e0bff517 	ldw	r2,-44(fp)
10014ba8:	1880051e 	bne	r3,r2,10014bc0 <altera_avalon_jtag_uart_write+0x1b8>
10014bac:	e0bffc17 	ldw	r2,-16(fp)
10014bb0:	10c00917 	ldw	r3,36(r2)
10014bb4:	e0bffc17 	ldw	r2,-16(fp)
10014bb8:	10800117 	ldw	r2,4(r2)
10014bbc:	18bff736 	bltu	r3,r2,10014b9c <__alt_data_end+0xf8014b9c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10014bc0:	e0bffc17 	ldw	r2,-16(fp)
10014bc4:	10800917 	ldw	r2,36(r2)
10014bc8:	1000051e 	bne	r2,zero,10014be0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10014bcc:	e0bffe17 	ldw	r2,-8(fp)
10014bd0:	00bfd016 	blt	zero,r2,10014b14 <__alt_data_end+0xf8014b14>
10014bd4:	00000306 	br	10014be4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10014bd8:	0001883a 	nop
10014bdc:	00000106 	br	10014be4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10014be0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10014be4:	e0fffd17 	ldw	r3,-12(fp)
10014be8:	e0bff717 	ldw	r2,-36(fp)
10014bec:	18800426 	beq	r3,r2,10014c00 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10014bf0:	e0fffd17 	ldw	r3,-12(fp)
10014bf4:	e0bff717 	ldw	r2,-36(fp)
10014bf8:	1885c83a 	sub	r2,r3,r2
10014bfc:	00000606 	br	10014c18 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10014c00:	e0bfff17 	ldw	r2,-4(fp)
10014c04:	1090000c 	andi	r2,r2,16384
10014c08:	10000226 	beq	r2,zero,10014c14 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10014c0c:	00bffd44 	movi	r2,-11
10014c10:	00000106 	br	10014c18 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10014c14:	00bffec4 	movi	r2,-5
}
10014c18:	e037883a 	mov	sp,fp
10014c1c:	dfc00117 	ldw	ra,4(sp)
10014c20:	df000017 	ldw	fp,0(sp)
10014c24:	dec00204 	addi	sp,sp,8
10014c28:	f800283a 	ret

10014c2c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10014c2c:	defff504 	addi	sp,sp,-44
10014c30:	df000a15 	stw	fp,40(sp)
10014c34:	df000a04 	addi	fp,sp,40
10014c38:	e13ffc15 	stw	r4,-16(fp)
10014c3c:	e17ffd15 	stw	r5,-12(fp)
10014c40:	e1bffe15 	stw	r6,-8(fp)
10014c44:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10014c48:	e03ff615 	stw	zero,-40(fp)
10014c4c:	d09b3617 	ldw	r2,27864(gp)
  
  if (alt_ticks_per_second ())
10014c50:	10003c26 	beq	r2,zero,10014d44 <alt_alarm_start+0x118>
  {
    if (alarm)
10014c54:	e0bffc17 	ldw	r2,-16(fp)
10014c58:	10003826 	beq	r2,zero,10014d3c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10014c5c:	e0bffc17 	ldw	r2,-16(fp)
10014c60:	e0fffe17 	ldw	r3,-8(fp)
10014c64:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10014c68:	e0bffc17 	ldw	r2,-16(fp)
10014c6c:	e0ffff17 	ldw	r3,-4(fp)
10014c70:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10014c74:	0005303a 	rdctl	r2,status
10014c78:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10014c7c:	e0fff917 	ldw	r3,-28(fp)
10014c80:	00bfff84 	movi	r2,-2
10014c84:	1884703a 	and	r2,r3,r2
10014c88:	1001703a 	wrctl	status,r2
  
  return context;
10014c8c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10014c90:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10014c94:	d09b3717 	ldw	r2,27868(gp)
      
      current_nticks = alt_nticks();
10014c98:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10014c9c:	e0fffd17 	ldw	r3,-12(fp)
10014ca0:	e0bff617 	ldw	r2,-40(fp)
10014ca4:	1885883a 	add	r2,r3,r2
10014ca8:	10c00044 	addi	r3,r2,1
10014cac:	e0bffc17 	ldw	r2,-16(fp)
10014cb0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10014cb4:	e0bffc17 	ldw	r2,-16(fp)
10014cb8:	10c00217 	ldw	r3,8(r2)
10014cbc:	e0bff617 	ldw	r2,-40(fp)
10014cc0:	1880042e 	bgeu	r3,r2,10014cd4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10014cc4:	e0bffc17 	ldw	r2,-16(fp)
10014cc8:	00c00044 	movi	r3,1
10014ccc:	10c00405 	stb	r3,16(r2)
10014cd0:	00000206 	br	10014cdc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10014cd4:	e0bffc17 	ldw	r2,-16(fp)
10014cd8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10014cdc:	e0bffc17 	ldw	r2,-16(fp)
10014ce0:	d0e00e04 	addi	r3,gp,-32712
10014ce4:	e0fffa15 	stw	r3,-24(fp)
10014ce8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10014cec:	e0bffb17 	ldw	r2,-20(fp)
10014cf0:	e0fffa17 	ldw	r3,-24(fp)
10014cf4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10014cf8:	e0bffa17 	ldw	r2,-24(fp)
10014cfc:	10c00017 	ldw	r3,0(r2)
10014d00:	e0bffb17 	ldw	r2,-20(fp)
10014d04:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10014d08:	e0bffa17 	ldw	r2,-24(fp)
10014d0c:	10800017 	ldw	r2,0(r2)
10014d10:	e0fffb17 	ldw	r3,-20(fp)
10014d14:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10014d18:	e0bffa17 	ldw	r2,-24(fp)
10014d1c:	e0fffb17 	ldw	r3,-20(fp)
10014d20:	10c00015 	stw	r3,0(r2)
10014d24:	e0bff817 	ldw	r2,-32(fp)
10014d28:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10014d2c:	e0bff717 	ldw	r2,-36(fp)
10014d30:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10014d34:	0005883a 	mov	r2,zero
10014d38:	00000306 	br	10014d48 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10014d3c:	00bffa84 	movi	r2,-22
10014d40:	00000106 	br	10014d48 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10014d44:	00bfde84 	movi	r2,-134
  }
}
10014d48:	e037883a 	mov	sp,fp
10014d4c:	df000017 	ldw	fp,0(sp)
10014d50:	dec00104 	addi	sp,sp,4
10014d54:	f800283a 	ret

10014d58 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10014d58:	defffa04 	addi	sp,sp,-24
10014d5c:	dfc00515 	stw	ra,20(sp)
10014d60:	df000415 	stw	fp,16(sp)
10014d64:	df000404 	addi	fp,sp,16
10014d68:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
10014d6c:	00800244 	movi	r2,9
10014d70:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10014d74:	014003f4 	movhi	r5,15
10014d78:	29509004 	addi	r5,r5,16960
10014d7c:	e13ffd17 	ldw	r4,-12(fp)
10014d80:	00069bc0 	call	100069bc <__mulsi3>
10014d84:	100b883a 	mov	r5,r2
10014d88:	0100bef4 	movhi	r4,763
10014d8c:	213c2004 	addi	r4,r4,-3968
10014d90:	00069000 	call	10006900 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10014d94:	100b883a 	mov	r5,r2
10014d98:	01200034 	movhi	r4,32768
10014d9c:	213fffc4 	addi	r4,r4,-1
10014da0:	00069000 	call	10006900 <__udivsi3>
10014da4:	100b883a 	mov	r5,r2
10014da8:	e13fff17 	ldw	r4,-4(fp)
10014dac:	00069000 	call	10006900 <__udivsi3>
10014db0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10014db4:	e0bffe17 	ldw	r2,-8(fp)
10014db8:	10002a26 	beq	r2,zero,10014e64 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10014dbc:	e03ffc15 	stw	zero,-16(fp)
10014dc0:	00001706 	br	10014e20 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10014dc4:	00a00034 	movhi	r2,32768
10014dc8:	10bfffc4 	addi	r2,r2,-1
10014dcc:	10bfffc4 	addi	r2,r2,-1
10014dd0:	103ffe1e 	bne	r2,zero,10014dcc <__alt_data_end+0xf8014dcc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10014dd4:	014003f4 	movhi	r5,15
10014dd8:	29509004 	addi	r5,r5,16960
10014ddc:	e13ffd17 	ldw	r4,-12(fp)
10014de0:	00069bc0 	call	100069bc <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10014de4:	100b883a 	mov	r5,r2
10014de8:	0100bef4 	movhi	r4,763
10014dec:	213c2004 	addi	r4,r4,-3968
10014df0:	00069000 	call	10006900 <__udivsi3>
10014df4:	100b883a 	mov	r5,r2
10014df8:	01200034 	movhi	r4,32768
10014dfc:	213fffc4 	addi	r4,r4,-1
10014e00:	00069000 	call	10006900 <__udivsi3>
10014e04:	1007883a 	mov	r3,r2
10014e08:	e0bfff17 	ldw	r2,-4(fp)
10014e0c:	10c5c83a 	sub	r2,r2,r3
10014e10:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10014e14:	e0bffc17 	ldw	r2,-16(fp)
10014e18:	10800044 	addi	r2,r2,1
10014e1c:	e0bffc15 	stw	r2,-16(fp)
10014e20:	e0fffc17 	ldw	r3,-16(fp)
10014e24:	e0bffe17 	ldw	r2,-8(fp)
10014e28:	18bfe616 	blt	r3,r2,10014dc4 <__alt_data_end+0xf8014dc4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10014e2c:	014003f4 	movhi	r5,15
10014e30:	29509004 	addi	r5,r5,16960
10014e34:	e13ffd17 	ldw	r4,-12(fp)
10014e38:	00069bc0 	call	100069bc <__mulsi3>
10014e3c:	100b883a 	mov	r5,r2
10014e40:	0100bef4 	movhi	r4,763
10014e44:	213c2004 	addi	r4,r4,-3968
10014e48:	00069000 	call	10006900 <__udivsi3>
10014e4c:	e17fff17 	ldw	r5,-4(fp)
10014e50:	1009883a 	mov	r4,r2
10014e54:	00069bc0 	call	100069bc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10014e58:	10bfffc4 	addi	r2,r2,-1
10014e5c:	103ffe1e 	bne	r2,zero,10014e58 <__alt_data_end+0xf8014e58>
10014e60:	00000d06 	br	10014e98 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10014e64:	014003f4 	movhi	r5,15
10014e68:	29509004 	addi	r5,r5,16960
10014e6c:	e13ffd17 	ldw	r4,-12(fp)
10014e70:	00069bc0 	call	100069bc <__mulsi3>
10014e74:	100b883a 	mov	r5,r2
10014e78:	0100bef4 	movhi	r4,763
10014e7c:	213c2004 	addi	r4,r4,-3968
10014e80:	00069000 	call	10006900 <__udivsi3>
10014e84:	e17fff17 	ldw	r5,-4(fp)
10014e88:	1009883a 	mov	r4,r2
10014e8c:	00069bc0 	call	100069bc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10014e90:	10bfffc4 	addi	r2,r2,-1
10014e94:	00bffe16 	blt	zero,r2,10014e90 <__alt_data_end+0xf8014e90>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10014e98:	0005883a 	mov	r2,zero
}
10014e9c:	e037883a 	mov	sp,fp
10014ea0:	dfc00117 	ldw	ra,4(sp)
10014ea4:	df000017 	ldw	fp,0(sp)
10014ea8:	dec00204 	addi	sp,sp,8
10014eac:	f800283a 	ret

10014eb0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10014eb0:	deffff04 	addi	sp,sp,-4
10014eb4:	df000015 	stw	fp,0(sp)
10014eb8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10014ebc:	0001883a 	nop
10014ec0:	e037883a 	mov	sp,fp
10014ec4:	df000017 	ldw	fp,0(sp)
10014ec8:	dec00104 	addi	sp,sp,4
10014ecc:	f800283a 	ret

10014ed0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10014ed0:	defffe04 	addi	sp,sp,-8
10014ed4:	dfc00115 	stw	ra,4(sp)
10014ed8:	df000015 	stw	fp,0(sp)
10014edc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10014ee0:	d0a00b17 	ldw	r2,-32724(gp)
10014ee4:	10000326 	beq	r2,zero,10014ef4 <alt_get_errno+0x24>
10014ee8:	d0a00b17 	ldw	r2,-32724(gp)
10014eec:	103ee83a 	callr	r2
10014ef0:	00000106 	br	10014ef8 <alt_get_errno+0x28>
10014ef4:	d09b3104 	addi	r2,gp,27844
}
10014ef8:	e037883a 	mov	sp,fp
10014efc:	dfc00117 	ldw	ra,4(sp)
10014f00:	df000017 	ldw	fp,0(sp)
10014f04:	dec00204 	addi	sp,sp,8
10014f08:	f800283a 	ret

10014f0c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10014f0c:	defffa04 	addi	sp,sp,-24
10014f10:	dfc00515 	stw	ra,20(sp)
10014f14:	df000415 	stw	fp,16(sp)
10014f18:	df000404 	addi	fp,sp,16
10014f1c:	e13ffe15 	stw	r4,-8(fp)
10014f20:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10014f24:	e0bffe17 	ldw	r2,-8(fp)
10014f28:	10000326 	beq	r2,zero,10014f38 <alt_dev_llist_insert+0x2c>
10014f2c:	e0bffe17 	ldw	r2,-8(fp)
10014f30:	10800217 	ldw	r2,8(r2)
10014f34:	1000061e 	bne	r2,zero,10014f50 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10014f38:	0014ed00 	call	10014ed0 <alt_get_errno>
10014f3c:	1007883a 	mov	r3,r2
10014f40:	00800584 	movi	r2,22
10014f44:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10014f48:	00bffa84 	movi	r2,-22
10014f4c:	00001306 	br	10014f9c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10014f50:	e0bffe17 	ldw	r2,-8(fp)
10014f54:	e0ffff17 	ldw	r3,-4(fp)
10014f58:	e0fffc15 	stw	r3,-16(fp)
10014f5c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10014f60:	e0bffd17 	ldw	r2,-12(fp)
10014f64:	e0fffc17 	ldw	r3,-16(fp)
10014f68:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10014f6c:	e0bffc17 	ldw	r2,-16(fp)
10014f70:	10c00017 	ldw	r3,0(r2)
10014f74:	e0bffd17 	ldw	r2,-12(fp)
10014f78:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10014f7c:	e0bffc17 	ldw	r2,-16(fp)
10014f80:	10800017 	ldw	r2,0(r2)
10014f84:	e0fffd17 	ldw	r3,-12(fp)
10014f88:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10014f8c:	e0bffc17 	ldw	r2,-16(fp)
10014f90:	e0fffd17 	ldw	r3,-12(fp)
10014f94:	10c00015 	stw	r3,0(r2)

  return 0;  
10014f98:	0005883a 	mov	r2,zero
}
10014f9c:	e037883a 	mov	sp,fp
10014fa0:	dfc00117 	ldw	ra,4(sp)
10014fa4:	df000017 	ldw	fp,0(sp)
10014fa8:	dec00204 	addi	sp,sp,8
10014fac:	f800283a 	ret

10014fb0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10014fb0:	defffd04 	addi	sp,sp,-12
10014fb4:	dfc00215 	stw	ra,8(sp)
10014fb8:	df000115 	stw	fp,4(sp)
10014fbc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10014fc0:	00840074 	movhi	r2,4097
10014fc4:	1097d904 	addi	r2,r2,24420
10014fc8:	e0bfff15 	stw	r2,-4(fp)
10014fcc:	00000606 	br	10014fe8 <_do_ctors+0x38>
        (*ctor) (); 
10014fd0:	e0bfff17 	ldw	r2,-4(fp)
10014fd4:	10800017 	ldw	r2,0(r2)
10014fd8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10014fdc:	e0bfff17 	ldw	r2,-4(fp)
10014fe0:	10bfff04 	addi	r2,r2,-4
10014fe4:	e0bfff15 	stw	r2,-4(fp)
10014fe8:	e0ffff17 	ldw	r3,-4(fp)
10014fec:	00840074 	movhi	r2,4097
10014ff0:	1097da04 	addi	r2,r2,24424
10014ff4:	18bff62e 	bgeu	r3,r2,10014fd0 <__alt_data_end+0xf8014fd0>
        (*ctor) (); 
}
10014ff8:	0001883a 	nop
10014ffc:	e037883a 	mov	sp,fp
10015000:	dfc00117 	ldw	ra,4(sp)
10015004:	df000017 	ldw	fp,0(sp)
10015008:	dec00204 	addi	sp,sp,8
1001500c:	f800283a 	ret

10015010 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10015010:	defffd04 	addi	sp,sp,-12
10015014:	dfc00215 	stw	ra,8(sp)
10015018:	df000115 	stw	fp,4(sp)
1001501c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10015020:	00840074 	movhi	r2,4097
10015024:	1097d904 	addi	r2,r2,24420
10015028:	e0bfff15 	stw	r2,-4(fp)
1001502c:	00000606 	br	10015048 <_do_dtors+0x38>
        (*dtor) (); 
10015030:	e0bfff17 	ldw	r2,-4(fp)
10015034:	10800017 	ldw	r2,0(r2)
10015038:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1001503c:	e0bfff17 	ldw	r2,-4(fp)
10015040:	10bfff04 	addi	r2,r2,-4
10015044:	e0bfff15 	stw	r2,-4(fp)
10015048:	e0ffff17 	ldw	r3,-4(fp)
1001504c:	00840074 	movhi	r2,4097
10015050:	1097da04 	addi	r2,r2,24424
10015054:	18bff62e 	bgeu	r3,r2,10015030 <__alt_data_end+0xf8015030>
        (*dtor) (); 
}
10015058:	0001883a 	nop
1001505c:	e037883a 	mov	sp,fp
10015060:	dfc00117 	ldw	ra,4(sp)
10015064:	df000017 	ldw	fp,0(sp)
10015068:	dec00204 	addi	sp,sp,8
1001506c:	f800283a 	ret

10015070 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10015070:	deffff04 	addi	sp,sp,-4
10015074:	df000015 	stw	fp,0(sp)
10015078:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1001507c:	0001883a 	nop
10015080:	e037883a 	mov	sp,fp
10015084:	df000017 	ldw	fp,0(sp)
10015088:	dec00104 	addi	sp,sp,4
1001508c:	f800283a 	ret

10015090 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10015090:	defff904 	addi	sp,sp,-28
10015094:	dfc00615 	stw	ra,24(sp)
10015098:	df000515 	stw	fp,20(sp)
1001509c:	df000504 	addi	fp,sp,20
100150a0:	e13ffc15 	stw	r4,-16(fp)
100150a4:	e17ffd15 	stw	r5,-12(fp)
100150a8:	e1bffe15 	stw	r6,-8(fp)
100150ac:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100150b0:	e0800217 	ldw	r2,8(fp)
100150b4:	d8800015 	stw	r2,0(sp)
100150b8:	e1ffff17 	ldw	r7,-4(fp)
100150bc:	e1bffe17 	ldw	r6,-8(fp)
100150c0:	e17ffd17 	ldw	r5,-12(fp)
100150c4:	e13ffc17 	ldw	r4,-16(fp)
100150c8:	00152400 	call	10015240 <alt_iic_isr_register>
}  
100150cc:	e037883a 	mov	sp,fp
100150d0:	dfc00117 	ldw	ra,4(sp)
100150d4:	df000017 	ldw	fp,0(sp)
100150d8:	dec00204 	addi	sp,sp,8
100150dc:	f800283a 	ret

100150e0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
100150e0:	defff904 	addi	sp,sp,-28
100150e4:	df000615 	stw	fp,24(sp)
100150e8:	df000604 	addi	fp,sp,24
100150ec:	e13ffe15 	stw	r4,-8(fp)
100150f0:	e17fff15 	stw	r5,-4(fp)
100150f4:	e0bfff17 	ldw	r2,-4(fp)
100150f8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100150fc:	0005303a 	rdctl	r2,status
10015100:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10015104:	e0fffb17 	ldw	r3,-20(fp)
10015108:	00bfff84 	movi	r2,-2
1001510c:	1884703a 	and	r2,r3,r2
10015110:	1001703a 	wrctl	status,r2
  
  return context;
10015114:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10015118:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1001511c:	00c00044 	movi	r3,1
10015120:	e0bffa17 	ldw	r2,-24(fp)
10015124:	1884983a 	sll	r2,r3,r2
10015128:	1007883a 	mov	r3,r2
1001512c:	d09b3517 	ldw	r2,27860(gp)
10015130:	1884b03a 	or	r2,r3,r2
10015134:	d09b3515 	stw	r2,27860(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10015138:	d09b3517 	ldw	r2,27860(gp)
1001513c:	100170fa 	wrctl	ienable,r2
10015140:	e0bffc17 	ldw	r2,-16(fp)
10015144:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10015148:	e0bffd17 	ldw	r2,-12(fp)
1001514c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10015150:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10015154:	0001883a 	nop
}
10015158:	e037883a 	mov	sp,fp
1001515c:	df000017 	ldw	fp,0(sp)
10015160:	dec00104 	addi	sp,sp,4
10015164:	f800283a 	ret

10015168 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10015168:	defff904 	addi	sp,sp,-28
1001516c:	df000615 	stw	fp,24(sp)
10015170:	df000604 	addi	fp,sp,24
10015174:	e13ffe15 	stw	r4,-8(fp)
10015178:	e17fff15 	stw	r5,-4(fp)
1001517c:	e0bfff17 	ldw	r2,-4(fp)
10015180:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10015184:	0005303a 	rdctl	r2,status
10015188:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001518c:	e0fffb17 	ldw	r3,-20(fp)
10015190:	00bfff84 	movi	r2,-2
10015194:	1884703a 	and	r2,r3,r2
10015198:	1001703a 	wrctl	status,r2
  
  return context;
1001519c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100151a0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
100151a4:	00c00044 	movi	r3,1
100151a8:	e0bffa17 	ldw	r2,-24(fp)
100151ac:	1884983a 	sll	r2,r3,r2
100151b0:	0084303a 	nor	r2,zero,r2
100151b4:	1007883a 	mov	r3,r2
100151b8:	d09b3517 	ldw	r2,27860(gp)
100151bc:	1884703a 	and	r2,r3,r2
100151c0:	d09b3515 	stw	r2,27860(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100151c4:	d09b3517 	ldw	r2,27860(gp)
100151c8:	100170fa 	wrctl	ienable,r2
100151cc:	e0bffc17 	ldw	r2,-16(fp)
100151d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100151d4:	e0bffd17 	ldw	r2,-12(fp)
100151d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100151dc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
100151e0:	0001883a 	nop
}
100151e4:	e037883a 	mov	sp,fp
100151e8:	df000017 	ldw	fp,0(sp)
100151ec:	dec00104 	addi	sp,sp,4
100151f0:	f800283a 	ret

100151f4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
100151f4:	defffc04 	addi	sp,sp,-16
100151f8:	df000315 	stw	fp,12(sp)
100151fc:	df000304 	addi	fp,sp,12
10015200:	e13ffe15 	stw	r4,-8(fp)
10015204:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10015208:	000530fa 	rdctl	r2,ienable
1001520c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10015210:	00c00044 	movi	r3,1
10015214:	e0bfff17 	ldw	r2,-4(fp)
10015218:	1884983a 	sll	r2,r3,r2
1001521c:	1007883a 	mov	r3,r2
10015220:	e0bffd17 	ldw	r2,-12(fp)
10015224:	1884703a 	and	r2,r3,r2
10015228:	1004c03a 	cmpne	r2,r2,zero
1001522c:	10803fcc 	andi	r2,r2,255
}
10015230:	e037883a 	mov	sp,fp
10015234:	df000017 	ldw	fp,0(sp)
10015238:	dec00104 	addi	sp,sp,4
1001523c:	f800283a 	ret

10015240 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10015240:	defff504 	addi	sp,sp,-44
10015244:	dfc00a15 	stw	ra,40(sp)
10015248:	df000915 	stw	fp,36(sp)
1001524c:	df000904 	addi	fp,sp,36
10015250:	e13ffc15 	stw	r4,-16(fp)
10015254:	e17ffd15 	stw	r5,-12(fp)
10015258:	e1bffe15 	stw	r6,-8(fp)
1001525c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10015260:	00bffa84 	movi	r2,-22
10015264:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10015268:	e0bffd17 	ldw	r2,-12(fp)
1001526c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10015270:	e0bff817 	ldw	r2,-32(fp)
10015274:	10800808 	cmpgei	r2,r2,32
10015278:	1000271e 	bne	r2,zero,10015318 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001527c:	0005303a 	rdctl	r2,status
10015280:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10015284:	e0fffb17 	ldw	r3,-20(fp)
10015288:	00bfff84 	movi	r2,-2
1001528c:	1884703a 	and	r2,r3,r2
10015290:	1001703a 	wrctl	status,r2
  
  return context;
10015294:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10015298:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
1001529c:	008400f4 	movhi	r2,4099
100152a0:	1090d304 	addi	r2,r2,17228
100152a4:	e0fff817 	ldw	r3,-32(fp)
100152a8:	180690fa 	slli	r3,r3,3
100152ac:	10c5883a 	add	r2,r2,r3
100152b0:	e0fffe17 	ldw	r3,-8(fp)
100152b4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
100152b8:	008400f4 	movhi	r2,4099
100152bc:	1090d304 	addi	r2,r2,17228
100152c0:	e0fff817 	ldw	r3,-32(fp)
100152c4:	180690fa 	slli	r3,r3,3
100152c8:	10c5883a 	add	r2,r2,r3
100152cc:	10800104 	addi	r2,r2,4
100152d0:	e0ffff17 	ldw	r3,-4(fp)
100152d4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
100152d8:	e0bffe17 	ldw	r2,-8(fp)
100152dc:	10000526 	beq	r2,zero,100152f4 <alt_iic_isr_register+0xb4>
100152e0:	e0bff817 	ldw	r2,-32(fp)
100152e4:	100b883a 	mov	r5,r2
100152e8:	e13ffc17 	ldw	r4,-16(fp)
100152ec:	00150e00 	call	100150e0 <alt_ic_irq_enable>
100152f0:	00000406 	br	10015304 <alt_iic_isr_register+0xc4>
100152f4:	e0bff817 	ldw	r2,-32(fp)
100152f8:	100b883a 	mov	r5,r2
100152fc:	e13ffc17 	ldw	r4,-16(fp)
10015300:	00151680 	call	10015168 <alt_ic_irq_disable>
10015304:	e0bff715 	stw	r2,-36(fp)
10015308:	e0bffa17 	ldw	r2,-24(fp)
1001530c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10015310:	e0bff917 	ldw	r2,-28(fp)
10015314:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10015318:	e0bff717 	ldw	r2,-36(fp)
}
1001531c:	e037883a 	mov	sp,fp
10015320:	dfc00117 	ldw	ra,4(sp)
10015324:	df000017 	ldw	fp,0(sp)
10015328:	dec00204 	addi	sp,sp,8
1001532c:	f800283a 	ret

10015330 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10015330:	defff804 	addi	sp,sp,-32
10015334:	dfc00715 	stw	ra,28(sp)
10015338:	df000615 	stw	fp,24(sp)
1001533c:	dc000515 	stw	r16,20(sp)
10015340:	df000604 	addi	fp,sp,24
10015344:	e13ffb15 	stw	r4,-20(fp)
10015348:	e17ffc15 	stw	r5,-16(fp)
1001534c:	e1bffd15 	stw	r6,-12(fp)
10015350:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10015354:	e1bffe17 	ldw	r6,-8(fp)
10015358:	e17ffd17 	ldw	r5,-12(fp)
1001535c:	e13ffc17 	ldw	r4,-16(fp)
10015360:	00155b80 	call	100155b8 <open>
10015364:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10015368:	e0bffa17 	ldw	r2,-24(fp)
1001536c:	10002216 	blt	r2,zero,100153f8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10015370:	040400b4 	movhi	r16,4098
10015374:	84111804 	addi	r16,r16,17504
10015378:	e0bffa17 	ldw	r2,-24(fp)
1001537c:	01400304 	movi	r5,12
10015380:	1009883a 	mov	r4,r2
10015384:	00069bc0 	call	100069bc <__mulsi3>
10015388:	8085883a 	add	r2,r16,r2
1001538c:	10c00017 	ldw	r3,0(r2)
10015390:	e0bffb17 	ldw	r2,-20(fp)
10015394:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10015398:	040400b4 	movhi	r16,4098
1001539c:	84111804 	addi	r16,r16,17504
100153a0:	e0bffa17 	ldw	r2,-24(fp)
100153a4:	01400304 	movi	r5,12
100153a8:	1009883a 	mov	r4,r2
100153ac:	00069bc0 	call	100069bc <__mulsi3>
100153b0:	8085883a 	add	r2,r16,r2
100153b4:	10800104 	addi	r2,r2,4
100153b8:	10c00017 	ldw	r3,0(r2)
100153bc:	e0bffb17 	ldw	r2,-20(fp)
100153c0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
100153c4:	040400b4 	movhi	r16,4098
100153c8:	84111804 	addi	r16,r16,17504
100153cc:	e0bffa17 	ldw	r2,-24(fp)
100153d0:	01400304 	movi	r5,12
100153d4:	1009883a 	mov	r4,r2
100153d8:	00069bc0 	call	100069bc <__mulsi3>
100153dc:	8085883a 	add	r2,r16,r2
100153e0:	10800204 	addi	r2,r2,8
100153e4:	10c00017 	ldw	r3,0(r2)
100153e8:	e0bffb17 	ldw	r2,-20(fp)
100153ec:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
100153f0:	e13ffa17 	ldw	r4,-24(fp)
100153f4:	0013e6c0 	call	10013e6c <alt_release_fd>
  }
} 
100153f8:	0001883a 	nop
100153fc:	e6ffff04 	addi	sp,fp,-4
10015400:	dfc00217 	ldw	ra,8(sp)
10015404:	df000117 	ldw	fp,4(sp)
10015408:	dc000017 	ldw	r16,0(sp)
1001540c:	dec00304 	addi	sp,sp,12
10015410:	f800283a 	ret

10015414 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10015414:	defffb04 	addi	sp,sp,-20
10015418:	dfc00415 	stw	ra,16(sp)
1001541c:	df000315 	stw	fp,12(sp)
10015420:	df000304 	addi	fp,sp,12
10015424:	e13ffd15 	stw	r4,-12(fp)
10015428:	e17ffe15 	stw	r5,-8(fp)
1001542c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10015430:	01c07fc4 	movi	r7,511
10015434:	01800044 	movi	r6,1
10015438:	e17ffd17 	ldw	r5,-12(fp)
1001543c:	010400b4 	movhi	r4,4098
10015440:	21111b04 	addi	r4,r4,17516
10015444:	00153300 	call	10015330 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10015448:	01c07fc4 	movi	r7,511
1001544c:	000d883a 	mov	r6,zero
10015450:	e17ffe17 	ldw	r5,-8(fp)
10015454:	010400b4 	movhi	r4,4098
10015458:	21111804 	addi	r4,r4,17504
1001545c:	00153300 	call	10015330 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10015460:	01c07fc4 	movi	r7,511
10015464:	01800044 	movi	r6,1
10015468:	e17fff17 	ldw	r5,-4(fp)
1001546c:	010400b4 	movhi	r4,4098
10015470:	21111e04 	addi	r4,r4,17528
10015474:	00153300 	call	10015330 <alt_open_fd>
}  
10015478:	0001883a 	nop
1001547c:	e037883a 	mov	sp,fp
10015480:	dfc00117 	ldw	ra,4(sp)
10015484:	df000017 	ldw	fp,0(sp)
10015488:	dec00204 	addi	sp,sp,8
1001548c:	f800283a 	ret

10015490 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10015490:	defffe04 	addi	sp,sp,-8
10015494:	dfc00115 	stw	ra,4(sp)
10015498:	df000015 	stw	fp,0(sp)
1001549c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100154a0:	d0a00b17 	ldw	r2,-32724(gp)
100154a4:	10000326 	beq	r2,zero,100154b4 <alt_get_errno+0x24>
100154a8:	d0a00b17 	ldw	r2,-32724(gp)
100154ac:	103ee83a 	callr	r2
100154b0:	00000106 	br	100154b8 <alt_get_errno+0x28>
100154b4:	d09b3104 	addi	r2,gp,27844
}
100154b8:	e037883a 	mov	sp,fp
100154bc:	dfc00117 	ldw	ra,4(sp)
100154c0:	df000017 	ldw	fp,0(sp)
100154c4:	dec00204 	addi	sp,sp,8
100154c8:	f800283a 	ret

100154cc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
100154cc:	defffb04 	addi	sp,sp,-20
100154d0:	dfc00415 	stw	ra,16(sp)
100154d4:	df000315 	stw	fp,12(sp)
100154d8:	dc000215 	stw	r16,8(sp)
100154dc:	df000304 	addi	fp,sp,12
100154e0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
100154e4:	e0bffe17 	ldw	r2,-8(fp)
100154e8:	10800217 	ldw	r2,8(r2)
100154ec:	10d00034 	orhi	r3,r2,16384
100154f0:	e0bffe17 	ldw	r2,-8(fp)
100154f4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100154f8:	e03ffd15 	stw	zero,-12(fp)
100154fc:	00002306 	br	1001558c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10015500:	040400b4 	movhi	r16,4098
10015504:	84111804 	addi	r16,r16,17504
10015508:	e0bffd17 	ldw	r2,-12(fp)
1001550c:	01400304 	movi	r5,12
10015510:	1009883a 	mov	r4,r2
10015514:	00069bc0 	call	100069bc <__mulsi3>
10015518:	8085883a 	add	r2,r16,r2
1001551c:	10c00017 	ldw	r3,0(r2)
10015520:	e0bffe17 	ldw	r2,-8(fp)
10015524:	10800017 	ldw	r2,0(r2)
10015528:	1880151e 	bne	r3,r2,10015580 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1001552c:	040400b4 	movhi	r16,4098
10015530:	84111804 	addi	r16,r16,17504
10015534:	e0bffd17 	ldw	r2,-12(fp)
10015538:	01400304 	movi	r5,12
1001553c:	1009883a 	mov	r4,r2
10015540:	00069bc0 	call	100069bc <__mulsi3>
10015544:	8085883a 	add	r2,r16,r2
10015548:	10800204 	addi	r2,r2,8
1001554c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10015550:	10000b0e 	bge	r2,zero,10015580 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10015554:	01400304 	movi	r5,12
10015558:	e13ffd17 	ldw	r4,-12(fp)
1001555c:	00069bc0 	call	100069bc <__mulsi3>
10015560:	1007883a 	mov	r3,r2
10015564:	008400b4 	movhi	r2,4098
10015568:	10911804 	addi	r2,r2,17504
1001556c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10015570:	e0bffe17 	ldw	r2,-8(fp)
10015574:	18800226 	beq	r3,r2,10015580 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10015578:	00bffcc4 	movi	r2,-13
1001557c:	00000806 	br	100155a0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10015580:	e0bffd17 	ldw	r2,-12(fp)
10015584:	10800044 	addi	r2,r2,1
10015588:	e0bffd15 	stw	r2,-12(fp)
1001558c:	d0a00a17 	ldw	r2,-32728(gp)
10015590:	1007883a 	mov	r3,r2
10015594:	e0bffd17 	ldw	r2,-12(fp)
10015598:	18bfd92e 	bgeu	r3,r2,10015500 <__alt_data_end+0xf8015500>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1001559c:	0005883a 	mov	r2,zero
}
100155a0:	e6ffff04 	addi	sp,fp,-4
100155a4:	dfc00217 	ldw	ra,8(sp)
100155a8:	df000117 	ldw	fp,4(sp)
100155ac:	dc000017 	ldw	r16,0(sp)
100155b0:	dec00304 	addi	sp,sp,12
100155b4:	f800283a 	ret

100155b8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
100155b8:	defff604 	addi	sp,sp,-40
100155bc:	dfc00915 	stw	ra,36(sp)
100155c0:	df000815 	stw	fp,32(sp)
100155c4:	df000804 	addi	fp,sp,32
100155c8:	e13ffd15 	stw	r4,-12(fp)
100155cc:	e17ffe15 	stw	r5,-8(fp)
100155d0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
100155d4:	00bfffc4 	movi	r2,-1
100155d8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
100155dc:	00bffb44 	movi	r2,-19
100155e0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
100155e4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
100155e8:	d1600804 	addi	r5,gp,-32736
100155ec:	e13ffd17 	ldw	r4,-12(fp)
100155f0:	00158dc0 	call	100158dc <alt_find_dev>
100155f4:	e0bff815 	stw	r2,-32(fp)
100155f8:	e0bff817 	ldw	r2,-32(fp)
100155fc:	1000051e 	bne	r2,zero,10015614 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10015600:	e13ffd17 	ldw	r4,-12(fp)
10015604:	001596c0 	call	1001596c <alt_find_file>
10015608:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1001560c:	00800044 	movi	r2,1
10015610:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10015614:	e0bff817 	ldw	r2,-32(fp)
10015618:	10002b26 	beq	r2,zero,100156c8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
1001561c:	e13ff817 	ldw	r4,-32(fp)
10015620:	0015a740 	call	10015a74 <alt_get_fd>
10015624:	e0bff915 	stw	r2,-28(fp)
10015628:	e0bff917 	ldw	r2,-28(fp)
1001562c:	1000030e 	bge	r2,zero,1001563c <open+0x84>
    {
      status = index;
10015630:	e0bff917 	ldw	r2,-28(fp)
10015634:	e0bffa15 	stw	r2,-24(fp)
10015638:	00002506 	br	100156d0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
1001563c:	01400304 	movi	r5,12
10015640:	e13ff917 	ldw	r4,-28(fp)
10015644:	00069bc0 	call	100069bc <__mulsi3>
10015648:	1007883a 	mov	r3,r2
1001564c:	008400b4 	movhi	r2,4098
10015650:	10911804 	addi	r2,r2,17504
10015654:	1885883a 	add	r2,r3,r2
10015658:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1001565c:	e0fffe17 	ldw	r3,-8(fp)
10015660:	00900034 	movhi	r2,16384
10015664:	10bfffc4 	addi	r2,r2,-1
10015668:	1886703a 	and	r3,r3,r2
1001566c:	e0bffc17 	ldw	r2,-16(fp)
10015670:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10015674:	e0bffb17 	ldw	r2,-20(fp)
10015678:	1000051e 	bne	r2,zero,10015690 <open+0xd8>
1001567c:	e13ffc17 	ldw	r4,-16(fp)
10015680:	00154cc0 	call	100154cc <alt_file_locked>
10015684:	e0bffa15 	stw	r2,-24(fp)
10015688:	e0bffa17 	ldw	r2,-24(fp)
1001568c:	10001016 	blt	r2,zero,100156d0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10015690:	e0bff817 	ldw	r2,-32(fp)
10015694:	10800317 	ldw	r2,12(r2)
10015698:	10000826 	beq	r2,zero,100156bc <open+0x104>
1001569c:	e0bff817 	ldw	r2,-32(fp)
100156a0:	10800317 	ldw	r2,12(r2)
100156a4:	e1ffff17 	ldw	r7,-4(fp)
100156a8:	e1bffe17 	ldw	r6,-8(fp)
100156ac:	e17ffd17 	ldw	r5,-12(fp)
100156b0:	e13ffc17 	ldw	r4,-16(fp)
100156b4:	103ee83a 	callr	r2
100156b8:	00000106 	br	100156c0 <open+0x108>
100156bc:	0005883a 	mov	r2,zero
100156c0:	e0bffa15 	stw	r2,-24(fp)
100156c4:	00000206 	br	100156d0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
100156c8:	00bffb44 	movi	r2,-19
100156cc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
100156d0:	e0bffa17 	ldw	r2,-24(fp)
100156d4:	1000090e 	bge	r2,zero,100156fc <open+0x144>
  {
    alt_release_fd (index);  
100156d8:	e13ff917 	ldw	r4,-28(fp)
100156dc:	0013e6c0 	call	10013e6c <alt_release_fd>
    ALT_ERRNO = -status;
100156e0:	00154900 	call	10015490 <alt_get_errno>
100156e4:	1007883a 	mov	r3,r2
100156e8:	e0bffa17 	ldw	r2,-24(fp)
100156ec:	0085c83a 	sub	r2,zero,r2
100156f0:	18800015 	stw	r2,0(r3)
    return -1;
100156f4:	00bfffc4 	movi	r2,-1
100156f8:	00000106 	br	10015700 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
100156fc:	e0bff917 	ldw	r2,-28(fp)
}
10015700:	e037883a 	mov	sp,fp
10015704:	dfc00117 	ldw	ra,4(sp)
10015708:	df000017 	ldw	fp,0(sp)
1001570c:	dec00204 	addi	sp,sp,8
10015710:	f800283a 	ret

10015714 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10015714:	defffa04 	addi	sp,sp,-24
10015718:	df000515 	stw	fp,20(sp)
1001571c:	df000504 	addi	fp,sp,20
10015720:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10015724:	0005303a 	rdctl	r2,status
10015728:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001572c:	e0fffc17 	ldw	r3,-16(fp)
10015730:	00bfff84 	movi	r2,-2
10015734:	1884703a 	and	r2,r3,r2
10015738:	1001703a 	wrctl	status,r2
  
  return context;
1001573c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10015740:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10015744:	e0bfff17 	ldw	r2,-4(fp)
10015748:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1001574c:	e0bffd17 	ldw	r2,-12(fp)
10015750:	10800017 	ldw	r2,0(r2)
10015754:	e0fffd17 	ldw	r3,-12(fp)
10015758:	18c00117 	ldw	r3,4(r3)
1001575c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10015760:	e0bffd17 	ldw	r2,-12(fp)
10015764:	10800117 	ldw	r2,4(r2)
10015768:	e0fffd17 	ldw	r3,-12(fp)
1001576c:	18c00017 	ldw	r3,0(r3)
10015770:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10015774:	e0bffd17 	ldw	r2,-12(fp)
10015778:	e0fffd17 	ldw	r3,-12(fp)
1001577c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10015780:	e0bffd17 	ldw	r2,-12(fp)
10015784:	e0fffd17 	ldw	r3,-12(fp)
10015788:	10c00015 	stw	r3,0(r2)
1001578c:	e0bffb17 	ldw	r2,-20(fp)
10015790:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10015794:	e0bffe17 	ldw	r2,-8(fp)
10015798:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1001579c:	0001883a 	nop
100157a0:	e037883a 	mov	sp,fp
100157a4:	df000017 	ldw	fp,0(sp)
100157a8:	dec00104 	addi	sp,sp,4
100157ac:	f800283a 	ret

100157b0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
100157b0:	defffb04 	addi	sp,sp,-20
100157b4:	dfc00415 	stw	ra,16(sp)
100157b8:	df000315 	stw	fp,12(sp)
100157bc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
100157c0:	d0a00e17 	ldw	r2,-32712(gp)
100157c4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
100157c8:	d09b3717 	ldw	r2,27868(gp)
100157cc:	10800044 	addi	r2,r2,1
100157d0:	d09b3715 	stw	r2,27868(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100157d4:	00002e06 	br	10015890 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
100157d8:	e0bffd17 	ldw	r2,-12(fp)
100157dc:	10800017 	ldw	r2,0(r2)
100157e0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
100157e4:	e0bffd17 	ldw	r2,-12(fp)
100157e8:	10800403 	ldbu	r2,16(r2)
100157ec:	10803fcc 	andi	r2,r2,255
100157f0:	10000426 	beq	r2,zero,10015804 <alt_tick+0x54>
100157f4:	d09b3717 	ldw	r2,27868(gp)
100157f8:	1000021e 	bne	r2,zero,10015804 <alt_tick+0x54>
    {
      alarm->rollover = 0;
100157fc:	e0bffd17 	ldw	r2,-12(fp)
10015800:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10015804:	e0bffd17 	ldw	r2,-12(fp)
10015808:	10800217 	ldw	r2,8(r2)
1001580c:	d0db3717 	ldw	r3,27868(gp)
10015810:	18801d36 	bltu	r3,r2,10015888 <alt_tick+0xd8>
10015814:	e0bffd17 	ldw	r2,-12(fp)
10015818:	10800403 	ldbu	r2,16(r2)
1001581c:	10803fcc 	andi	r2,r2,255
10015820:	1000191e 	bne	r2,zero,10015888 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10015824:	e0bffd17 	ldw	r2,-12(fp)
10015828:	10800317 	ldw	r2,12(r2)
1001582c:	e0fffd17 	ldw	r3,-12(fp)
10015830:	18c00517 	ldw	r3,20(r3)
10015834:	1809883a 	mov	r4,r3
10015838:	103ee83a 	callr	r2
1001583c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10015840:	e0bfff17 	ldw	r2,-4(fp)
10015844:	1000031e 	bne	r2,zero,10015854 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10015848:	e13ffd17 	ldw	r4,-12(fp)
1001584c:	00157140 	call	10015714 <alt_alarm_stop>
10015850:	00000d06 	br	10015888 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10015854:	e0bffd17 	ldw	r2,-12(fp)
10015858:	10c00217 	ldw	r3,8(r2)
1001585c:	e0bfff17 	ldw	r2,-4(fp)
10015860:	1887883a 	add	r3,r3,r2
10015864:	e0bffd17 	ldw	r2,-12(fp)
10015868:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1001586c:	e0bffd17 	ldw	r2,-12(fp)
10015870:	10c00217 	ldw	r3,8(r2)
10015874:	d09b3717 	ldw	r2,27868(gp)
10015878:	1880032e 	bgeu	r3,r2,10015888 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1001587c:	e0bffd17 	ldw	r2,-12(fp)
10015880:	00c00044 	movi	r3,1
10015884:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10015888:	e0bffe17 	ldw	r2,-8(fp)
1001588c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10015890:	e0fffd17 	ldw	r3,-12(fp)
10015894:	d0a00e04 	addi	r2,gp,-32712
10015898:	18bfcf1e 	bne	r3,r2,100157d8 <__alt_data_end+0xf80157d8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1001589c:	0001883a 	nop
}
100158a0:	0001883a 	nop
100158a4:	e037883a 	mov	sp,fp
100158a8:	dfc00117 	ldw	ra,4(sp)
100158ac:	df000017 	ldw	fp,0(sp)
100158b0:	dec00204 	addi	sp,sp,8
100158b4:	f800283a 	ret

100158b8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
100158b8:	deffff04 	addi	sp,sp,-4
100158bc:	df000015 	stw	fp,0(sp)
100158c0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
100158c4:	000170fa 	wrctl	ienable,zero
}
100158c8:	0001883a 	nop
100158cc:	e037883a 	mov	sp,fp
100158d0:	df000017 	ldw	fp,0(sp)
100158d4:	dec00104 	addi	sp,sp,4
100158d8:	f800283a 	ret

100158dc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
100158dc:	defffa04 	addi	sp,sp,-24
100158e0:	dfc00515 	stw	ra,20(sp)
100158e4:	df000415 	stw	fp,16(sp)
100158e8:	df000404 	addi	fp,sp,16
100158ec:	e13ffe15 	stw	r4,-8(fp)
100158f0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
100158f4:	e0bfff17 	ldw	r2,-4(fp)
100158f8:	10800017 	ldw	r2,0(r2)
100158fc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10015900:	e13ffe17 	ldw	r4,-8(fp)
10015904:	0006b240 	call	10006b24 <strlen>
10015908:	10800044 	addi	r2,r2,1
1001590c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10015910:	00000d06 	br	10015948 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10015914:	e0bffc17 	ldw	r2,-16(fp)
10015918:	10800217 	ldw	r2,8(r2)
1001591c:	e0fffd17 	ldw	r3,-12(fp)
10015920:	180d883a 	mov	r6,r3
10015924:	e17ffe17 	ldw	r5,-8(fp)
10015928:	1009883a 	mov	r4,r2
1001592c:	0015c200 	call	10015c20 <memcmp>
10015930:	1000021e 	bne	r2,zero,1001593c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10015934:	e0bffc17 	ldw	r2,-16(fp)
10015938:	00000706 	br	10015958 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1001593c:	e0bffc17 	ldw	r2,-16(fp)
10015940:	10800017 	ldw	r2,0(r2)
10015944:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10015948:	e0fffc17 	ldw	r3,-16(fp)
1001594c:	e0bfff17 	ldw	r2,-4(fp)
10015950:	18bff01e 	bne	r3,r2,10015914 <__alt_data_end+0xf8015914>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10015954:	0005883a 	mov	r2,zero
}
10015958:	e037883a 	mov	sp,fp
1001595c:	dfc00117 	ldw	ra,4(sp)
10015960:	df000017 	ldw	fp,0(sp)
10015964:	dec00204 	addi	sp,sp,8
10015968:	f800283a 	ret

1001596c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1001596c:	defffb04 	addi	sp,sp,-20
10015970:	dfc00415 	stw	ra,16(sp)
10015974:	df000315 	stw	fp,12(sp)
10015978:	df000304 	addi	fp,sp,12
1001597c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10015980:	d0a00617 	ldw	r2,-32744(gp)
10015984:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10015988:	00003106 	br	10015a50 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
1001598c:	e0bffd17 	ldw	r2,-12(fp)
10015990:	10800217 	ldw	r2,8(r2)
10015994:	1009883a 	mov	r4,r2
10015998:	0006b240 	call	10006b24 <strlen>
1001599c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
100159a0:	e0bffd17 	ldw	r2,-12(fp)
100159a4:	10c00217 	ldw	r3,8(r2)
100159a8:	e0bffe17 	ldw	r2,-8(fp)
100159ac:	10bfffc4 	addi	r2,r2,-1
100159b0:	1885883a 	add	r2,r3,r2
100159b4:	10800003 	ldbu	r2,0(r2)
100159b8:	10803fcc 	andi	r2,r2,255
100159bc:	1080201c 	xori	r2,r2,128
100159c0:	10bfe004 	addi	r2,r2,-128
100159c4:	10800bd8 	cmpnei	r2,r2,47
100159c8:	1000031e 	bne	r2,zero,100159d8 <alt_find_file+0x6c>
    {
      len -= 1;
100159cc:	e0bffe17 	ldw	r2,-8(fp)
100159d0:	10bfffc4 	addi	r2,r2,-1
100159d4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100159d8:	e0bffe17 	ldw	r2,-8(fp)
100159dc:	e0ffff17 	ldw	r3,-4(fp)
100159e0:	1885883a 	add	r2,r3,r2
100159e4:	10800003 	ldbu	r2,0(r2)
100159e8:	10803fcc 	andi	r2,r2,255
100159ec:	1080201c 	xori	r2,r2,128
100159f0:	10bfe004 	addi	r2,r2,-128
100159f4:	10800be0 	cmpeqi	r2,r2,47
100159f8:	1000081e 	bne	r2,zero,10015a1c <alt_find_file+0xb0>
100159fc:	e0bffe17 	ldw	r2,-8(fp)
10015a00:	e0ffff17 	ldw	r3,-4(fp)
10015a04:	1885883a 	add	r2,r3,r2
10015a08:	10800003 	ldbu	r2,0(r2)
10015a0c:	10803fcc 	andi	r2,r2,255
10015a10:	1080201c 	xori	r2,r2,128
10015a14:	10bfe004 	addi	r2,r2,-128
10015a18:	10000a1e 	bne	r2,zero,10015a44 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10015a1c:	e0bffd17 	ldw	r2,-12(fp)
10015a20:	10800217 	ldw	r2,8(r2)
10015a24:	e0fffe17 	ldw	r3,-8(fp)
10015a28:	180d883a 	mov	r6,r3
10015a2c:	e17fff17 	ldw	r5,-4(fp)
10015a30:	1009883a 	mov	r4,r2
10015a34:	0015c200 	call	10015c20 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10015a38:	1000021e 	bne	r2,zero,10015a44 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10015a3c:	e0bffd17 	ldw	r2,-12(fp)
10015a40:	00000706 	br	10015a60 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10015a44:	e0bffd17 	ldw	r2,-12(fp)
10015a48:	10800017 	ldw	r2,0(r2)
10015a4c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10015a50:	e0fffd17 	ldw	r3,-12(fp)
10015a54:	d0a00604 	addi	r2,gp,-32744
10015a58:	18bfcc1e 	bne	r3,r2,1001598c <__alt_data_end+0xf801598c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10015a5c:	0005883a 	mov	r2,zero
}
10015a60:	e037883a 	mov	sp,fp
10015a64:	dfc00117 	ldw	ra,4(sp)
10015a68:	df000017 	ldw	fp,0(sp)
10015a6c:	dec00204 	addi	sp,sp,8
10015a70:	f800283a 	ret

10015a74 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10015a74:	defffa04 	addi	sp,sp,-24
10015a78:	dfc00515 	stw	ra,20(sp)
10015a7c:	df000415 	stw	fp,16(sp)
10015a80:	dc000315 	stw	r16,12(sp)
10015a84:	df000404 	addi	fp,sp,16
10015a88:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10015a8c:	00bffa04 	movi	r2,-24
10015a90:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10015a94:	e03ffc15 	stw	zero,-16(fp)
10015a98:	00001d06 	br	10015b10 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
10015a9c:	040400b4 	movhi	r16,4098
10015aa0:	84111804 	addi	r16,r16,17504
10015aa4:	e0bffc17 	ldw	r2,-16(fp)
10015aa8:	01400304 	movi	r5,12
10015aac:	1009883a 	mov	r4,r2
10015ab0:	00069bc0 	call	100069bc <__mulsi3>
10015ab4:	8085883a 	add	r2,r16,r2
10015ab8:	10800017 	ldw	r2,0(r2)
10015abc:	1000111e 	bne	r2,zero,10015b04 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
10015ac0:	040400b4 	movhi	r16,4098
10015ac4:	84111804 	addi	r16,r16,17504
10015ac8:	e0bffc17 	ldw	r2,-16(fp)
10015acc:	01400304 	movi	r5,12
10015ad0:	1009883a 	mov	r4,r2
10015ad4:	00069bc0 	call	100069bc <__mulsi3>
10015ad8:	8085883a 	add	r2,r16,r2
10015adc:	e0fffe17 	ldw	r3,-8(fp)
10015ae0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10015ae4:	d0e00a17 	ldw	r3,-32728(gp)
10015ae8:	e0bffc17 	ldw	r2,-16(fp)
10015aec:	1880020e 	bge	r3,r2,10015af8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
10015af0:	e0bffc17 	ldw	r2,-16(fp)
10015af4:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
10015af8:	e0bffc17 	ldw	r2,-16(fp)
10015afc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10015b00:	00000606 	br	10015b1c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10015b04:	e0bffc17 	ldw	r2,-16(fp)
10015b08:	10800044 	addi	r2,r2,1
10015b0c:	e0bffc15 	stw	r2,-16(fp)
10015b10:	e0bffc17 	ldw	r2,-16(fp)
10015b14:	10800810 	cmplti	r2,r2,32
10015b18:	103fe01e 	bne	r2,zero,10015a9c <__alt_data_end+0xf8015a9c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10015b1c:	e0bffd17 	ldw	r2,-12(fp)
}
10015b20:	e6ffff04 	addi	sp,fp,-4
10015b24:	dfc00217 	ldw	ra,8(sp)
10015b28:	df000117 	ldw	fp,4(sp)
10015b2c:	dc000017 	ldw	r16,0(sp)
10015b30:	dec00304 	addi	sp,sp,12
10015b34:	f800283a 	ret

10015b38 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10015b38:	defffe04 	addi	sp,sp,-8
10015b3c:	df000115 	stw	fp,4(sp)
10015b40:	df000104 	addi	fp,sp,4
10015b44:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10015b48:	e0bfff17 	ldw	r2,-4(fp)
10015b4c:	10bffe84 	addi	r2,r2,-6
10015b50:	10c00428 	cmpgeui	r3,r2,16
10015b54:	18001a1e 	bne	r3,zero,10015bc0 <alt_exception_cause_generated_bad_addr+0x88>
10015b58:	100690ba 	slli	r3,r2,2
10015b5c:	00840074 	movhi	r2,4097
10015b60:	1096dc04 	addi	r2,r2,23408
10015b64:	1885883a 	add	r2,r3,r2
10015b68:	10800017 	ldw	r2,0(r2)
10015b6c:	1000683a 	jmp	r2
10015b70:	10015bb0 	cmpltui	zero,r2,1390
10015b74:	10015bb0 	cmpltui	zero,r2,1390
10015b78:	10015bc0 	call	110015bc <__alt_heap_start+0xfcd170>
10015b7c:	10015bc0 	call	110015bc <__alt_heap_start+0xfcd170>
10015b80:	10015bc0 	call	110015bc <__alt_heap_start+0xfcd170>
10015b84:	10015bb0 	cmpltui	zero,r2,1390
10015b88:	10015bb8 	rdprs	zero,r2,1390
10015b8c:	10015bc0 	call	110015bc <__alt_heap_start+0xfcd170>
10015b90:	10015bb0 	cmpltui	zero,r2,1390
10015b94:	10015bb0 	cmpltui	zero,r2,1390
10015b98:	10015bc0 	call	110015bc <__alt_heap_start+0xfcd170>
10015b9c:	10015bb0 	cmpltui	zero,r2,1390
10015ba0:	10015bb8 	rdprs	zero,r2,1390
10015ba4:	10015bc0 	call	110015bc <__alt_heap_start+0xfcd170>
10015ba8:	10015bc0 	call	110015bc <__alt_heap_start+0xfcd170>
10015bac:	10015bb0 	cmpltui	zero,r2,1390
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10015bb0:	00800044 	movi	r2,1
10015bb4:	00000306 	br	10015bc4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10015bb8:	0005883a 	mov	r2,zero
10015bbc:	00000106 	br	10015bc4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10015bc0:	0005883a 	mov	r2,zero
  }
}
10015bc4:	e037883a 	mov	sp,fp
10015bc8:	df000017 	ldw	fp,0(sp)
10015bcc:	dec00104 	addi	sp,sp,4
10015bd0:	f800283a 	ret

10015bd4 <atexit>:
10015bd4:	200b883a 	mov	r5,r4
10015bd8:	000f883a 	mov	r7,zero
10015bdc:	000d883a 	mov	r6,zero
10015be0:	0009883a 	mov	r4,zero
10015be4:	0015c9c1 	jmpi	10015c9c <__register_exitproc>

10015be8 <exit>:
10015be8:	defffe04 	addi	sp,sp,-8
10015bec:	000b883a 	mov	r5,zero
10015bf0:	dc000015 	stw	r16,0(sp)
10015bf4:	dfc00115 	stw	ra,4(sp)
10015bf8:	2021883a 	mov	r16,r4
10015bfc:	0015db40 	call	10015db4 <__call_exitprocs>
10015c00:	008400b4 	movhi	r2,4098
10015c04:	10959004 	addi	r2,r2,22080
10015c08:	11000017 	ldw	r4,0(r2)
10015c0c:	20800f17 	ldw	r2,60(r4)
10015c10:	10000126 	beq	r2,zero,10015c18 <exit+0x30>
10015c14:	103ee83a 	callr	r2
10015c18:	8009883a 	mov	r4,r16
10015c1c:	0015f340 	call	10015f34 <_exit>

10015c20 <memcmp>:
10015c20:	01c000c4 	movi	r7,3
10015c24:	3980192e 	bgeu	r7,r6,10015c8c <memcmp+0x6c>
10015c28:	2144b03a 	or	r2,r4,r5
10015c2c:	11c4703a 	and	r2,r2,r7
10015c30:	10000f26 	beq	r2,zero,10015c70 <memcmp+0x50>
10015c34:	20800003 	ldbu	r2,0(r4)
10015c38:	28c00003 	ldbu	r3,0(r5)
10015c3c:	10c0151e 	bne	r2,r3,10015c94 <memcmp+0x74>
10015c40:	31bfff84 	addi	r6,r6,-2
10015c44:	01ffffc4 	movi	r7,-1
10015c48:	00000406 	br	10015c5c <memcmp+0x3c>
10015c4c:	20800003 	ldbu	r2,0(r4)
10015c50:	28c00003 	ldbu	r3,0(r5)
10015c54:	31bfffc4 	addi	r6,r6,-1
10015c58:	10c00e1e 	bne	r2,r3,10015c94 <memcmp+0x74>
10015c5c:	21000044 	addi	r4,r4,1
10015c60:	29400044 	addi	r5,r5,1
10015c64:	31fff91e 	bne	r6,r7,10015c4c <__alt_data_end+0xf8015c4c>
10015c68:	0005883a 	mov	r2,zero
10015c6c:	f800283a 	ret
10015c70:	20c00017 	ldw	r3,0(r4)
10015c74:	28800017 	ldw	r2,0(r5)
10015c78:	18bfee1e 	bne	r3,r2,10015c34 <__alt_data_end+0xf8015c34>
10015c7c:	31bfff04 	addi	r6,r6,-4
10015c80:	21000104 	addi	r4,r4,4
10015c84:	29400104 	addi	r5,r5,4
10015c88:	39bff936 	bltu	r7,r6,10015c70 <__alt_data_end+0xf8015c70>
10015c8c:	303fe91e 	bne	r6,zero,10015c34 <__alt_data_end+0xf8015c34>
10015c90:	003ff506 	br	10015c68 <__alt_data_end+0xf8015c68>
10015c94:	10c5c83a 	sub	r2,r2,r3
10015c98:	f800283a 	ret

10015c9c <__register_exitproc>:
10015c9c:	defffa04 	addi	sp,sp,-24
10015ca0:	dc000315 	stw	r16,12(sp)
10015ca4:	040400b4 	movhi	r16,4098
10015ca8:	84159004 	addi	r16,r16,22080
10015cac:	80c00017 	ldw	r3,0(r16)
10015cb0:	dc400415 	stw	r17,16(sp)
10015cb4:	dfc00515 	stw	ra,20(sp)
10015cb8:	18805217 	ldw	r2,328(r3)
10015cbc:	2023883a 	mov	r17,r4
10015cc0:	10003726 	beq	r2,zero,10015da0 <__register_exitproc+0x104>
10015cc4:	10c00117 	ldw	r3,4(r2)
10015cc8:	010007c4 	movi	r4,31
10015ccc:	20c00e16 	blt	r4,r3,10015d08 <__register_exitproc+0x6c>
10015cd0:	1a000044 	addi	r8,r3,1
10015cd4:	8800221e 	bne	r17,zero,10015d60 <__register_exitproc+0xc4>
10015cd8:	18c00084 	addi	r3,r3,2
10015cdc:	18c7883a 	add	r3,r3,r3
10015ce0:	18c7883a 	add	r3,r3,r3
10015ce4:	12000115 	stw	r8,4(r2)
10015ce8:	10c7883a 	add	r3,r2,r3
10015cec:	19400015 	stw	r5,0(r3)
10015cf0:	0005883a 	mov	r2,zero
10015cf4:	dfc00517 	ldw	ra,20(sp)
10015cf8:	dc400417 	ldw	r17,16(sp)
10015cfc:	dc000317 	ldw	r16,12(sp)
10015d00:	dec00604 	addi	sp,sp,24
10015d04:	f800283a 	ret
10015d08:	00800034 	movhi	r2,0
10015d0c:	10800004 	addi	r2,r2,0
10015d10:	10002626 	beq	r2,zero,10015dac <__register_exitproc+0x110>
10015d14:	01006404 	movi	r4,400
10015d18:	d9400015 	stw	r5,0(sp)
10015d1c:	d9800115 	stw	r6,4(sp)
10015d20:	d9c00215 	stw	r7,8(sp)
10015d24:	00000000 	call	10000000 <__alt_mem_sdram>
10015d28:	d9400017 	ldw	r5,0(sp)
10015d2c:	d9800117 	ldw	r6,4(sp)
10015d30:	d9c00217 	ldw	r7,8(sp)
10015d34:	10001d26 	beq	r2,zero,10015dac <__register_exitproc+0x110>
10015d38:	81000017 	ldw	r4,0(r16)
10015d3c:	10000115 	stw	zero,4(r2)
10015d40:	02000044 	movi	r8,1
10015d44:	22405217 	ldw	r9,328(r4)
10015d48:	0007883a 	mov	r3,zero
10015d4c:	12400015 	stw	r9,0(r2)
10015d50:	20805215 	stw	r2,328(r4)
10015d54:	10006215 	stw	zero,392(r2)
10015d58:	10006315 	stw	zero,396(r2)
10015d5c:	883fde26 	beq	r17,zero,10015cd8 <__alt_data_end+0xf8015cd8>
10015d60:	18c9883a 	add	r4,r3,r3
10015d64:	2109883a 	add	r4,r4,r4
10015d68:	1109883a 	add	r4,r2,r4
10015d6c:	21802215 	stw	r6,136(r4)
10015d70:	01800044 	movi	r6,1
10015d74:	12406217 	ldw	r9,392(r2)
10015d78:	30cc983a 	sll	r6,r6,r3
10015d7c:	4992b03a 	or	r9,r9,r6
10015d80:	12406215 	stw	r9,392(r2)
10015d84:	21c04215 	stw	r7,264(r4)
10015d88:	01000084 	movi	r4,2
10015d8c:	893fd21e 	bne	r17,r4,10015cd8 <__alt_data_end+0xf8015cd8>
10015d90:	11006317 	ldw	r4,396(r2)
10015d94:	218cb03a 	or	r6,r4,r6
10015d98:	11806315 	stw	r6,396(r2)
10015d9c:	003fce06 	br	10015cd8 <__alt_data_end+0xf8015cd8>
10015da0:	18805304 	addi	r2,r3,332
10015da4:	18805215 	stw	r2,328(r3)
10015da8:	003fc606 	br	10015cc4 <__alt_data_end+0xf8015cc4>
10015dac:	00bfffc4 	movi	r2,-1
10015db0:	003fd006 	br	10015cf4 <__alt_data_end+0xf8015cf4>

10015db4 <__call_exitprocs>:
10015db4:	defff504 	addi	sp,sp,-44
10015db8:	df000915 	stw	fp,36(sp)
10015dbc:	dd400615 	stw	r21,24(sp)
10015dc0:	dc800315 	stw	r18,12(sp)
10015dc4:	dfc00a15 	stw	ra,40(sp)
10015dc8:	ddc00815 	stw	r23,32(sp)
10015dcc:	dd800715 	stw	r22,28(sp)
10015dd0:	dd000515 	stw	r20,20(sp)
10015dd4:	dcc00415 	stw	r19,16(sp)
10015dd8:	dc400215 	stw	r17,8(sp)
10015ddc:	dc000115 	stw	r16,4(sp)
10015de0:	d9000015 	stw	r4,0(sp)
10015de4:	2839883a 	mov	fp,r5
10015de8:	04800044 	movi	r18,1
10015dec:	057fffc4 	movi	r21,-1
10015df0:	008400b4 	movhi	r2,4098
10015df4:	10959004 	addi	r2,r2,22080
10015df8:	12000017 	ldw	r8,0(r2)
10015dfc:	45005217 	ldw	r20,328(r8)
10015e00:	44c05204 	addi	r19,r8,328
10015e04:	a0001c26 	beq	r20,zero,10015e78 <__call_exitprocs+0xc4>
10015e08:	a0800117 	ldw	r2,4(r20)
10015e0c:	15ffffc4 	addi	r23,r2,-1
10015e10:	b8000d16 	blt	r23,zero,10015e48 <__call_exitprocs+0x94>
10015e14:	14000044 	addi	r16,r2,1
10015e18:	8421883a 	add	r16,r16,r16
10015e1c:	8421883a 	add	r16,r16,r16
10015e20:	84402004 	addi	r17,r16,128
10015e24:	a463883a 	add	r17,r20,r17
10015e28:	a421883a 	add	r16,r20,r16
10015e2c:	e0001e26 	beq	fp,zero,10015ea8 <__call_exitprocs+0xf4>
10015e30:	80804017 	ldw	r2,256(r16)
10015e34:	e0801c26 	beq	fp,r2,10015ea8 <__call_exitprocs+0xf4>
10015e38:	bdffffc4 	addi	r23,r23,-1
10015e3c:	843fff04 	addi	r16,r16,-4
10015e40:	8c7fff04 	addi	r17,r17,-4
10015e44:	bd7ff91e 	bne	r23,r21,10015e2c <__alt_data_end+0xf8015e2c>
10015e48:	00800034 	movhi	r2,0
10015e4c:	10800004 	addi	r2,r2,0
10015e50:	10000926 	beq	r2,zero,10015e78 <__call_exitprocs+0xc4>
10015e54:	a0800117 	ldw	r2,4(r20)
10015e58:	1000301e 	bne	r2,zero,10015f1c <__call_exitprocs+0x168>
10015e5c:	a0800017 	ldw	r2,0(r20)
10015e60:	10003226 	beq	r2,zero,10015f2c <__call_exitprocs+0x178>
10015e64:	a009883a 	mov	r4,r20
10015e68:	98800015 	stw	r2,0(r19)
10015e6c:	00000000 	call	10000000 <__alt_mem_sdram>
10015e70:	9d000017 	ldw	r20,0(r19)
10015e74:	a03fe41e 	bne	r20,zero,10015e08 <__alt_data_end+0xf8015e08>
10015e78:	dfc00a17 	ldw	ra,40(sp)
10015e7c:	df000917 	ldw	fp,36(sp)
10015e80:	ddc00817 	ldw	r23,32(sp)
10015e84:	dd800717 	ldw	r22,28(sp)
10015e88:	dd400617 	ldw	r21,24(sp)
10015e8c:	dd000517 	ldw	r20,20(sp)
10015e90:	dcc00417 	ldw	r19,16(sp)
10015e94:	dc800317 	ldw	r18,12(sp)
10015e98:	dc400217 	ldw	r17,8(sp)
10015e9c:	dc000117 	ldw	r16,4(sp)
10015ea0:	dec00b04 	addi	sp,sp,44
10015ea4:	f800283a 	ret
10015ea8:	a0800117 	ldw	r2,4(r20)
10015eac:	80c00017 	ldw	r3,0(r16)
10015eb0:	10bfffc4 	addi	r2,r2,-1
10015eb4:	15c01426 	beq	r2,r23,10015f08 <__call_exitprocs+0x154>
10015eb8:	80000015 	stw	zero,0(r16)
10015ebc:	183fde26 	beq	r3,zero,10015e38 <__alt_data_end+0xf8015e38>
10015ec0:	95c8983a 	sll	r4,r18,r23
10015ec4:	a0806217 	ldw	r2,392(r20)
10015ec8:	a5800117 	ldw	r22,4(r20)
10015ecc:	2084703a 	and	r2,r4,r2
10015ed0:	10000b26 	beq	r2,zero,10015f00 <__call_exitprocs+0x14c>
10015ed4:	a0806317 	ldw	r2,396(r20)
10015ed8:	2088703a 	and	r4,r4,r2
10015edc:	20000c1e 	bne	r4,zero,10015f10 <__call_exitprocs+0x15c>
10015ee0:	89400017 	ldw	r5,0(r17)
10015ee4:	d9000017 	ldw	r4,0(sp)
10015ee8:	183ee83a 	callr	r3
10015eec:	a0800117 	ldw	r2,4(r20)
10015ef0:	15bfbf1e 	bne	r2,r22,10015df0 <__alt_data_end+0xf8015df0>
10015ef4:	98800017 	ldw	r2,0(r19)
10015ef8:	153fcf26 	beq	r2,r20,10015e38 <__alt_data_end+0xf8015e38>
10015efc:	003fbc06 	br	10015df0 <__alt_data_end+0xf8015df0>
10015f00:	183ee83a 	callr	r3
10015f04:	003ff906 	br	10015eec <__alt_data_end+0xf8015eec>
10015f08:	a5c00115 	stw	r23,4(r20)
10015f0c:	003feb06 	br	10015ebc <__alt_data_end+0xf8015ebc>
10015f10:	89000017 	ldw	r4,0(r17)
10015f14:	183ee83a 	callr	r3
10015f18:	003ff406 	br	10015eec <__alt_data_end+0xf8015eec>
10015f1c:	a0800017 	ldw	r2,0(r20)
10015f20:	a027883a 	mov	r19,r20
10015f24:	1029883a 	mov	r20,r2
10015f28:	003fb606 	br	10015e04 <__alt_data_end+0xf8015e04>
10015f2c:	0005883a 	mov	r2,zero
10015f30:	003ffb06 	br	10015f20 <__alt_data_end+0xf8015f20>

10015f34 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10015f34:	defffd04 	addi	sp,sp,-12
10015f38:	df000215 	stw	fp,8(sp)
10015f3c:	df000204 	addi	fp,sp,8
10015f40:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10015f44:	0001883a 	nop
10015f48:	e0bfff17 	ldw	r2,-4(fp)
10015f4c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10015f50:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10015f54:	10000226 	beq	r2,zero,10015f60 <_exit+0x2c>
    ALT_SIM_FAIL();
10015f58:	002af070 	cmpltui	zero,zero,43969
10015f5c:	00000106 	br	10015f64 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10015f60:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10015f64:	003fff06 	br	10015f64 <__alt_data_end+0xf8015f64>
