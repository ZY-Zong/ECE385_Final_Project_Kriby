
usb.elf:     file format elf32-littlenios2
usb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x000150ec memsz 0x000150ec flags r-x
    LOAD off    0x0001610c vaddr 0x1001510c paddr 0x10022884 align 2**12
         filesz 0x0000d778 memsz 0x0000d778 flags rw-
    LOAD off    0x00023ffc vaddr 0x1002fffc paddr 0x1002fffc align 2**12
         filesz 0x00000000 memsz 0x00000184 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000143d0  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000b0c  10014600  10014600  00015600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000d778  1001510c  10022884  0001610c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000184  1002fffc  1002fffc  00023ffc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000000e0  000000e0  00023884  2**0
                  CONTENTS
  7 .sdram        00000000  10030180  10030180  00023884  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00023884  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fb8  00000000  00000000  000238a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000244ff  00000000  00000000  00024860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000952b  00000000  00000000  00048d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000bfad  00000000  00000000  0005228a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000027dc  00000000  00000000  0005e238  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003e0c  00000000  00000000  00060a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001786c  00000000  00000000  00064820  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0007c08c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018d0  00000000  00000000  0007c0d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00081286  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00081289  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00081295  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00081296  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00081297  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0008129b  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0008129f  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000812a3  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000812ae  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000812b9  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  000812c4  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000037  00000000  00000000  000812d5  2**0
                  CONTENTS, READONLY
 30 .jdi          00005b3a  00000000  00000000  0008130c  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0007dafc  00000000  00000000  00086e46  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10014600 l    d  .rodata	00000000 .rodata
1001510c l    d  .rwdata	00000000 .rwdata
1002fffc l    d  .bss	00000000 .bss
000000e0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10030180 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 enemy.c
00000000 l    df *ABS*	00000000 game_logic.c
1002fffc l     O .bss	00000004 ADDRESS_PTR
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 kirby.c
10030000 l     O .bss	00000004 ADDRESS_PTR
1001510c l     O .rwdata	00000040 image_indicator
1001514c l     O .rwdata	0000686c Wall1
1001b9b8 l     O .rwdata	000053e0 Wall2
00000000 l    df *ABS*	00000000 main.c
10030004 l     O .bss	00000004 ADDRESS_PTR
00000000 l    df *ABS*	00000000 star.c
10030008 l     O .bss	00000004 ADDRESS_PTR
00000000 l    df *ABS*	00000000 test.c
1003000c l     O .bss	00000004 ADDRESS_PTR
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 usb_main.c
10030010 l     O .bss	00000002 intStat
10030012 l     O .bss	00000002 usb_ctl_val
10030014 l     O .bss	00000002 ctl_reg
10030016 l     O .bss	00000002 no_device
10030018 l     O .bss	00000002 fs_device
1003001a l     O .bss	00000001 toggle
1003001b l     O .bss	00000001 data_size
1003001c l     O .bss	00000001 hot_plug_count
1003001e l     O .bss	00000002 code
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10014e52 l     O .rodata	00000010 zeroes.4404
1000754c l     F .text	000000bc __sbprintf
10014e62 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1000775c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
100092b4 l     F .text	00000008 __fp_unlock
100092c8 l     F .text	0000019c __sinit.part.1
10009464 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10020d98 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
100211dc l     O .rwdata	00000020 lc_ctype_charset
100211bc l     O .rwdata	00000020 lc_message_charset
100211fc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10014e94 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000c938 l     F .text	000000fc __sprint_r.part.0
10014fb8 l     O .rodata	00000010 zeroes.4349
1000df74 l     F .text	000000bc __sbprintf
10014fc8 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
10011de0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10011ef4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10011f20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10012014 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
100120fc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
100121e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
100123c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10022874 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
10012668 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
100127a4 l     F .text	00000034 alt_dev_reg
100217e4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10012a80 l     F .text	0000020c altera_avalon_jtag_uart_irq
10012c8c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10013568 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
100139c8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10013b28 l     F .text	0000003c alt_get_errno
10013b64 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10030054 g     O .bss	00000004 alt_instruction_exception_handler
1000bf7c g     F .text	00000074 _mprec_log10
1000c068 g     F .text	0000008c __any_on
1000e528 g     F .text	00000054 _isatty_r
10014ea0 g     O .rodata	00000028 __mprec_tinytens
10012300 g     F .text	0000007c alt_main
100050e8 g     F .text	000000c0 _puts_r
10030080 g     O .bss	00000100 alt_irq
1000e57c g     F .text	00000060 _lseek_r
10004bb8 g     F .text	000002e8 get_keycode_value
10022884 g       *ABS*	00000000 __flash_rwdata_start
100107b8 g     F .text	00000088 .hidden __eqdf2
10030180 g       *ABS*	00000000 __alt_heap_start
10001c38 g     F .text	000000a8 force_It_On_Ground
100050ac g     F .text	0000003c printf
1000e794 g     F .text	0000009c _wcrtomb_r
1000c7f8 g     F .text	0000005c __sseek
10009614 g     F .text	00000010 __sinit
1000e63c g     F .text	00000140 __swbuf_r
1000a0e8 g     F .text	0000007c _setlocale_r
1000246c g     F .text	00000104 get_Kirby_Right_Pos
1000946c g     F .text	00000078 __sfmoreglue
100123a0 g     F .text	00000024 __malloc_unlock
10003fc0 g     F .text	00000080 UsbGetRetryCnt
1000adb8 g     F .text	0000015c memmove
10000418 g     F .text	00000088 IO_init
1000026c g     F .text	0000009c GameStart
100095fc g     F .text	00000018 _cleanup
1000b03c g     F .text	000000a8 _Balloc
10010840 g     F .text	000000dc .hidden __gtdf2
10013f50 g     F .text	00000024 altera_nios2_gen2_irq_init
10002264 g     F .text	00000104 get_Kirby_Ceil_Pos
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000e4cc g     F .text	0000005c _fstat_r
10030038 g     O .bss	00000004 errno
1000c774 g     F .text	00000008 __seofread
10030040 g     O .bss	00000004 alt_argv
1002a844 g       *ABS*	00000000 _gp
10012638 g     F .text	00000030 usleep
100020e8 g     F .text	00000078 will_Touch_Ground
10021664 g     O .rwdata	00000180 alt_fd_list
10013f74 g     F .text	00000090 alt_find_dev
1000ac70 g     F .text	00000148 memcpy
100092bc g     F .text	0000000c _cleanup_r
10011bf8 g     F .text	000000dc .hidden __floatsidf
10013aac g     F .text	0000007c alt_io_redirect
1001091c g     F .text	000000f4 .hidden __ltdf2
10002050 g     F .text	00000044 frame_Time
10014600 g       *ABS*	00000000 __DTOR_END__
100051a8 g     F .text	00000014 puts
100141d0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
1000c658 g     F .text	00000074 __fpclassifyd
1000bed8 g     F .text	000000a4 __ratio
1000df58 g     F .text	0000001c __vfiprintf_internal
10012e84 g     F .text	0000021c altera_avalon_jtag_uart_read
1000507c g     F .text	00000030 _printf_r
000000e0 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10004f98 g     F .text	00000064 .hidden __udivsi3
10012050 g     F .text	000000ac isatty
10014ef0 g     O .rodata	000000c8 __mprec_tens
10002c40 g     F .text	0000024c update_Star
1000a164 g     F .text	0000000c __locale_charset
10030034 g     O .bss	00000004 __malloc_top_pad
1000364c g     F .text	00000268 UsbGetConfigDesc2
1002284c g     O .rwdata	00000004 __mb_cur_max
1000a194 g     F .text	0000000c _localeconv_r
1000b470 g     F .text	0000003c __i2b
10009a98 g     F .text	000004c8 __sfvwrite_r
1000c6cc g     F .text	00000054 _sbrk_r
1000e5dc g     F .text	00000060 _read_r
1002286c g     O .rwdata	00000004 alt_max_fd
1000e1c0 g     F .text	000000f0 _fclose_r
10009284 g     F .text	00000030 fflush
10030030 g     O .bss	00000004 __malloc_max_sbrked_mem
1000f53c g     F .text	000008ac .hidden __adddf3
1000bc80 g     F .text	0000010c __b2d
1000ef78 g     F .text	000005c4 .hidden __umoddi3
10012224 g     F .text	000000dc lseek
10022844 g     O .rwdata	00000004 _global_impure_ptr
1000c0f4 g     F .text	00000564 _realloc_r
10030180 g       *ABS*	00000000 __bss_end
100138d8 g     F .text	000000f0 alt_iic_isr_register
10013e48 g     F .text	00000108 alt_tick
1000e97c g     F .text	000005fc .hidden __udivdi3
1000e428 g     F .text	00000024 _fputwc_r
10014ec8 g     O .rodata	00000028 __mprec_bigtens
1000b254 g     F .text	00000104 __s2b
10011cd4 g     F .text	000000a8 .hidden __floatunsidf
100007e4 g     F .text	00001454 updateKirby
1000b9c0 g     F .text	00000060 __mcmp
1000309c g     F .text	00000100 UsbSetAddress
10009634 g     F .text	00000018 __fp_lock_all
1001388c g     F .text	0000004c alt_ic_irq_enabled
10013dac g     F .text	0000009c alt_alarm_stop
10030048 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
1002163c g     O .rwdata	00000028 alt_dev_null
10013548 g     F .text	00000020 alt_dcache_flush_all
1000b358 g     F .text	00000068 __hi0bits
1000051c g     F .text	00000074 IO_read
10011b78 g     F .text	00000080 .hidden __fixdfsi
10022884 g       *ABS*	00000000 __ram_rwdata_end
10022864 g     O .rwdata	00000008 alt_dev_list
100126a4 g     F .text	00000100 write
1001510c g       *ABS*	00000000 __ram_rodata_end
10011f5c g     F .text	000000b8 fstat
1001091c g     F .text	000000f4 .hidden __ledf2
10004040 g     F .text	00000080 UsbPrintMem
10002160 g     F .text	00000104 get_Kirby_Botton_Pos
1000b738 g     F .text	00000140 __pow5mult
1000ca4c g     F .text	0000150c ___vfiprintf_internal_r
10030028 g     O .bss	00000004 __nlocale_changed
10004ffc g     F .text	00000058 .hidden __umodsi3
10030180 g       *ABS*	00000000 end
100129c0 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10014600 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10011d7c g     F .text	00000064 .hidden __clzsi2
100130a0 g     F .text	00000224 altera_avalon_jtag_uart_write
10009624 g     F .text	00000004 __sfp_lock_acquire
1000ab8c g     F .text	000000e4 memchr
10005254 g     F .text	000022dc ___vfprintf_internal_r
100039b4 g     F .text	00000100 UsbClassRequest
10009788 g     F .text	00000310 _free_r
1000a170 g     F .text	00000010 __locale_mb_cur_max
1001444c g     F .text	00000180 __call_exitprocs
10030024 g     O .bss	00000004 __mlocale_changed
10022850 g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
1003004c g     O .bss	00000004 _alt_tick_rate
1000b878 g     F .text	00000148 __lshift
10030050 g     O .bss	00000004 _alt_nticks
10012400 g     F .text	00000104 read
10012810 g     F .text	0000004c alt_sys_init
10000630 g     F .text	000001b4 upload_Kirby_Info
10014334 g     F .text	00000118 __register_exitproc
1000b4ac g     F .text	0000028c __multiply
10012d2c g     F .text	00000068 altera_avalon_jtag_uart_close
10005054 g     F .text	00000028 .hidden __mulsi3
1001510c g       *ABS*	00000000 __ram_rwdata_start
10014600 g       *ABS*	00000000 __ram_rodata_start
10030058 g     O .bss	00000028 __malloc_current_mallinfo
1000bd8c g     F .text	0000014c __d2b
10002570 g     F .text	00000134 get_Wall_Info
1000319c g     F .text	00000148 UsbGetDeviceDesc1
1001285c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1001410c g     F .text	000000c4 alt_get_fd
100133f0 g     F .text	00000158 alt_busy_sleep
1000e090 g     F .text	00000054 _close_r
1000033c g     F .text	000000dc initial_Registers
100142b8 g     F .text	0000007c memcmp
1001291c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10030180 g       *ABS*	00000000 __alt_stack_base
1001296c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10007608 g     F .text	00000154 __swsetup_r
1000fde8 g     F .text	000009d0 .hidden __divdf3
100094e4 g     F .text	00000118 __sfp
1000bff0 g     F .text	00000078 __copybits
10021234 g     O .rwdata	00000408 __malloc_av_
10009630 g     F .text	00000004 __sinit_lock_release
10010a10 g     F .text	0000086c .hidden __muldf3
1000c720 g     F .text	00000054 __sread
10003f3c g     F .text	00000084 UsbWaitTDListDone
10014004 g     F .text	00000108 alt_find_file
100135a4 g     F .text	000000a4 alt_dev_llist_insert
1001237c g     F .text	00000024 __malloc_lock
10012588 g     F .text	000000b0 sbrk
10009228 g     F .text	0000005c _fflush_r
1000e0e4 g     F .text	000000dc _calloc_r
1002fffc g       *ABS*	00000000 __bss_start
1000af14 g     F .text	00000128 memset
10002aec g     F .text	00000038 main
10030044 g     O .bss	00000004 alt_envp
1003002c g     O .bss	00000004 __malloc_max_total_mem
100128bc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
100038b4 g     F .text	00000100 UsbSetConfig
1000e77c g     F .text	00000018 __swbuf
100026a4 g     F .text	000000e8 kirby_Inhaling
1000c854 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000e2b0 g     F .text	00000014 fclose
10002e8c g     F .text	000000c0 test_keyboard
10007984 g     F .text	00001688 _dtoa_r
1000a380 g     F .text	0000080c _malloc_r
1000e8f0 g     F .text	00000030 __ascii_wctomb
10022870 g     O .rwdata	00000004 alt_errno
10000308 g     F .text	00000034 initial_Game_State
10009f60 g     F .text	000000c4 _fwalk
10004ea0 g     F .text	00000084 .hidden __divsi3
10009664 g     F .text	00000124 _malloc_trim_r
10003ab4 g     F .text	00000148 UsbGetHidDesc
10014600 g       *ABS*	00000000 __CTOR_END__
1000c85c g     F .text	000000dc strcmp
10014600 g       *ABS*	00000000 __flash_rodata_start
10014600 g       *ABS*	00000000 __DTOR_LIST__
10002b24 g     F .text	00000054 initial_Star
100107b8 g     F .text	00000088 .hidden __nedf2
10002fa4 g     F .text	00000044 UsbRead
100127d8 g     F .text	00000038 alt_irq_init
10012504 g     F .text	00000084 alt_release_fd
10014fd8 g     O .rodata	00000100 .hidden __clz_tab
10030020 g     O .bss	00000004 _PathLocale
10002094 g     F .text	00000054 map_Width
1001426c g     F .text	00000014 atexit
1000e030 g     F .text	00000060 _write_r
1000a1a0 g     F .text	00000018 setlocale
10022848 g     O .rwdata	00000004 _impure_ptr
1003003c g     O .bss	00000004 alt_argc
1000900c g     F .text	0000021c __sflush_r
10001ce0 g     F .text	00000370 force_It_Inside_Map
100136a8 g     F .text	00000060 _do_dtors
1000a18c g     F .text	00000008 __locale_cjk_lang
10002368 g     F .text	00000104 get_Kirby_Left_Pos
10002a90 g     F .text	0000005c kirby_Screen_Center_X
10000020 g       .exceptions	00000000 alt_irq_entry
1000bc1c g     F .text	00000064 __ulp
1000964c g     F .text	00000018 __fp_unlock_all
1002285c g     O .rwdata	00000008 alt_fs_list
100027e8 g     F .text	000002a8 kirby_Kick_Ass
10003bfc g     F .text	00000340 UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000a1b8 g     F .text	0000000c localeconv
10013728 g     F .text	00000050 alt_ic_isr_register
10000590 g     F .text	000000a0 initial_Kirby
10022884 g       *ABS*	00000000 _edata
10030180 g       *ABS*	00000000 _end
10002f4c g     F .text	00000058 UsbWrite
1000e2c4 g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
10012d94 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10013800 g     F .text	0000008c alt_ic_irq_disable
1000c77c g     F .text	0000007c __swrite
10022854 g     O .rwdata	00000004 __malloc_trim_threshold
1000a180 g     F .text	0000000c __locale_msgcharset
10014280 g     F .text	00000038 exit
100040c0 g     F .text	00000af8 usb_initialize
1000a024 g     F .text	000000c4 _fwalk_reent
1000ba20 g     F .text	000001fc __mdiff
10004f24 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10009628 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100004a0 g     F .text	0000007c IO_write
100145cc g     F .text	00000034 _exit
100132c4 g     F .text	0000012c alt_alarm_start
1000a1c4 g     F .text	000001bc __smakebuf_r
100051bc g     F .text	00000098 strlen
10013c50 g     F .text	0000015c open
10010840 g     F .text	000000dc .hidden __gedf2
1000278c g     F .text	0000005c kirby_Return_Normal
10022858 g     O .rwdata	00000004 __wctomb
10002b78 g     F .text	0000004c spit_Star
1000ca34 g     F .text	00000018 __sprint_r
10013708 g     F .text	00000020 alt_icache_flush_all
10022878 g     O .rwdata	00000004 alt_priority_mask
10002bc4 g     F .text	0000007c upload_Star_Info
10013778 g     F .text	00000088 alt_ic_irq_enable
10007530 g     F .text	0000001c __vfprintf_internal
1000e920 g     F .text	0000005c _wctomb_r
1001127c g     F .text	000008fc .hidden __subdf3
1000b3c0 g     F .text	000000b0 __lo0bits
100034bc g     F .text	00000190 UsbGetConfigDesc1
1002287c g     O .rwdata	00000008 alt_alarm_list
10013648 g     F .text	00000060 _do_ctors
10002fe8 g     F .text	000000b4 UsbSoftReset
1000e830 g     F .text	000000c0 wcrtomb
10011e1c g     F .text	000000d8 close
100032e4 g     F .text	000001d8 UsbGetDeviceDesc2
10012164 g     F .text	00000084 alt_load
1000e44c g     F .text	00000080 fputwc
1000962c g     F .text	00000004 __sinit_lock_acquire
1000b10c g     F .text	00000148 __multadd
1000b0e4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	008400f4 	movhi	r2,4099
10000140:	10802004 	addi	r2,r2,128
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	008400f4 	movhi	r2,4099
10000158:	10802004 	addi	r2,r2,128
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0960417 	ldw	r2,22544(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0960417 	ldw	r2,22544(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	068400b4 	movhi	gp,4098
    ori gp, gp, %lo(_gp)
1000023c:	d6aa1114 	ori	gp,gp,43076
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	008400b4 	movhi	r2,4098
    ori r2, r2, %lo(__bss_start)
10000244:	10bfff14 	ori	r2,r2,65532

    movhi r3, %hi(__bss_end)
10000248:	00c400f4 	movhi	r3,4099
    ori r3, r3, %lo(__bss_end)
1000024c:	18c06014 	ori	r3,r3,384

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	00121640 	call	10012164 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	00123000 	call	10012300 <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <GameStart>:
#include "star.h"
#include "usb_main.h"

#include <stdio.h>

void GameStart() {
1000026c:	defff804 	addi	sp,sp,-32
10000270:	dfc00715 	stw	ra,28(sp)
10000274:	df000615 	stw	fp,24(sp)
10000278:	df000604 	addi	fp,sp,24
    Kirby * kirby;
    Star * star;

    int keycode = 0;
1000027c:	e03ffa15 	stw	zero,-24(fp)
    int pre_keycode = 0;
10000280:	e03ffb15 	stw	zero,-20(fp)
    int spitting_flag = 0;
10000284:	e03ffc15 	stw	zero,-16(fp)
    int kicking_flag = 0;
10000288:	e03ffd15 	stw	zero,-12(fp)

    initial_Registers();
1000028c:	000033c0 	call	1000033c <initial_Registers>
    initial_Star(star);
10000290:	e13ffe17 	ldw	r4,-8(fp)
10000294:	0002b240 	call	10002b24 <initial_Star>
    initial_Kirby(kirby);
10000298:	e13fff17 	ldw	r4,-4(fp)
1000029c:	00005900 	call	10000590 <initial_Kirby>
    kirby->is_inhaled = 1;
100002a0:	e0bfff17 	ldw	r2,-4(fp)
100002a4:	00c00044 	movi	r3,1
100002a8:	10c00a15 	stw	r3,40(r2)

//    printf("** USB initial begin?? **\n");

    usb_initialize();
100002ac:	00040c00 	call	100040c0 <usb_initialize>
    printf("What's wrong with USB?");
100002b0:	01040074 	movhi	r4,4097
100002b4:	21118004 	addi	r4,r4,17920
100002b8:	00050ac0 	call	100050ac <printf>

    while (1)
    {
        pre_keycode = keycode;
100002bc:	e0bffa17 	ldw	r2,-24(fp)
100002c0:	e0bffb15 	stw	r2,-20(fp)
        keycode = get_keycode_value();
100002c4:	0004bb80 	call	10004bb8 <get_keycode_value>
100002c8:	e0bffa15 	stw	r2,-24(fp)

        // test_keyboard(keycode);
        updateKirby(kirby, star, keycode, pre_keycode);
100002cc:	e1fffb17 	ldw	r7,-20(fp)
100002d0:	e1bffa17 	ldw	r6,-24(fp)
100002d4:	e17ffe17 	ldw	r5,-8(fp)
100002d8:	e13fff17 	ldw	r4,-4(fp)
100002dc:	00007e40 	call	100007e4 <updateKirby>
        upload_Kirby_Info(kirby);
100002e0:	e13fff17 	ldw	r4,-4(fp)
100002e4:	00006300 	call	10000630 <upload_Kirby_Info>

        if (star->appear == 1)
100002e8:	e0bffe17 	ldw	r2,-8(fp)
100002ec:	10800417 	ldw	r2,16(r2)
100002f0:	10800058 	cmpnei	r2,r2,1
100002f4:	103ff11e 	bne	r2,zero,100002bc <__alt_data_end+0xf80002bc>
        	spit_Star(kirby, star);
100002f8:	e17ffe17 	ldw	r5,-8(fp)
100002fc:	e13fff17 	ldw	r4,-4(fp)
10000300:	0002b780 	call	10002b78 <spit_Star>

        // TO DO: Check game_state.interrupt why changed
        // if (game_state->interrupt != 0) {
        //     break;
        // }
    }
10000304:	003fed06 	br	100002bc <__alt_data_end+0xf80002bc>

10000308 <initial_Game_State>:
    
}

void initial_Game_State (Game * game_state) {
10000308:	defffe04 	addi	sp,sp,-8
1000030c:	df000115 	stw	fp,4(sp)
10000310:	df000104 	addi	fp,sp,4
10000314:	e13fff15 	stw	r4,-4(fp)
    game_state->interrupt = 0;
10000318:	e0bfff17 	ldw	r2,-4(fp)
1000031c:	10000115 	stw	zero,4(r2)
    game_state->map = 0;
10000320:	e0bfff17 	ldw	r2,-4(fp)
10000324:	10000015 	stw	zero,0(r2)
}
10000328:	0001883a 	nop
1000032c:	e037883a 	mov	sp,fp
10000330:	df000017 	ldw	fp,0(sp)
10000334:	dec00104 	addi	sp,sp,4
10000338:	f800283a 	ret

1000033c <initial_Registers>:


void initial_Registers() {
1000033c:	deffff04 	addi	sp,sp,-4
10000340:	df000015 	stw	fp,0(sp)
10000344:	d839883a 	mov	fp,sp
    REG_0_MAP_INFO      = 0;
10000348:	d095ee17 	ldw	r2,22456(gp)
1000034c:	10000015 	stw	zero,0(r2)
    REG_1_KIRBY_IMAGE   = 0;
10000350:	d095ee17 	ldw	r2,22456(gp)
10000354:	10800104 	addi	r2,r2,4
10000358:	10000015 	stw	zero,0(r2)
    REG_2_KIRBY_MAP_POS = 0;
1000035c:	d095ee17 	ldw	r2,22456(gp)
10000360:	10800204 	addi	r2,r2,8
10000364:	10000015 	stw	zero,0(r2)
    REG_3_STAR          = 0;
10000368:	d095ee17 	ldw	r2,22456(gp)
1000036c:	10800304 	addi	r2,r2,12
10000370:	10000015 	stw	zero,0(r2)
    REG_4_              = 0;
10000374:	d095ee17 	ldw	r2,22456(gp)
10000378:	10800404 	addi	r2,r2,16
1000037c:	10000015 	stw	zero,0(r2)
    REG_5_              = 0;
10000380:	d095ee17 	ldw	r2,22456(gp)
10000384:	10800504 	addi	r2,r2,20
10000388:	10000015 	stw	zero,0(r2)
    REG_6_              = 0;
1000038c:	d095ee17 	ldw	r2,22456(gp)
10000390:	10800604 	addi	r2,r2,24
10000394:	10000015 	stw	zero,0(r2)
    REG_7_              = 0;
10000398:	d095ee17 	ldw	r2,22456(gp)
1000039c:	10800704 	addi	r2,r2,28
100003a0:	10000015 	stw	zero,0(r2)
    REG_8_              = 0;
100003a4:	d095ee17 	ldw	r2,22456(gp)
100003a8:	10800804 	addi	r2,r2,32
100003ac:	10000015 	stw	zero,0(r2)
    REG_9_              = 0;
100003b0:	d095ee17 	ldw	r2,22456(gp)
100003b4:	10800904 	addi	r2,r2,36
100003b8:	10000015 	stw	zero,0(r2)
    REG_10_             = 0;
100003bc:	d095ee17 	ldw	r2,22456(gp)
100003c0:	10800a04 	addi	r2,r2,40
100003c4:	10000015 	stw	zero,0(r2)
    REG_11_             = 0;
100003c8:	d095ee17 	ldw	r2,22456(gp)
100003cc:	10800b04 	addi	r2,r2,44
100003d0:	10000015 	stw	zero,0(r2)
    REG_12_             = 0;
100003d4:	d095ee17 	ldw	r2,22456(gp)
100003d8:	10800c04 	addi	r2,r2,48
100003dc:	10000015 	stw	zero,0(r2)
    REG_13_             = 0;
100003e0:	d095ee17 	ldw	r2,22456(gp)
100003e4:	10800d04 	addi	r2,r2,52
100003e8:	10000015 	stw	zero,0(r2)
    REG_14_             = 0;
100003ec:	d095ee17 	ldw	r2,22456(gp)
100003f0:	10800e04 	addi	r2,r2,56
100003f4:	10000015 	stw	zero,0(r2)
    REG_15_             = 0;
100003f8:	d095ee17 	ldw	r2,22456(gp)
100003fc:	10800f04 	addi	r2,r2,60
10000400:	10000015 	stw	zero,0(r2)
}
10000404:	0001883a 	nop
10000408:	e037883a 	mov	sp,fp
1000040c:	df000017 	ldw	fp,0(sp)
10000410:	dec00104 	addi	sp,sp,4
10000414:	f800283a 	ret

10000418 <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
10000418:	deffff04 	addi	sp,sp,-4
1000041c:	df000015 	stw	fp,0(sp)
10000420:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
10000424:	00801c04 	movi	r2,112
10000428:	00c00044 	movi	r3,1
1000042c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000430:	00802004 	movi	r2,128
10000434:	00c00044 	movi	r3,1
10000438:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
1000043c:	00802804 	movi	r2,160
10000440:	00c00044 	movi	r3,1
10000444:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
10000448:	00802404 	movi	r2,144
1000044c:	00c00044 	movi	r3,1
10000450:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
10000454:	00803004 	movi	r2,192
10000458:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
1000045c:	00802c04 	movi	r2,176
10000460:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
10000464:	00802004 	movi	r2,128
10000468:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
1000046c:	00801c04 	movi	r2,112
10000470:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
10000474:	00801c04 	movi	r2,112
10000478:	00c00044 	movi	r3,1
1000047c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000480:	00802004 	movi	r2,128
10000484:	00c00044 	movi	r3,1
10000488:	10c00005 	stb	r3,0(r2)
}
1000048c:	0001883a 	nop
10000490:	e037883a 	mov	sp,fp
10000494:	df000017 	ldw	fp,0(sp)
10000498:	dec00104 	addi	sp,sp,4
1000049c:	f800283a 	ret

100004a0 <IO_write>:


void IO_write(alt_u8 Address, alt_u16 Data)
{
100004a0:	defffd04 	addi	sp,sp,-12
100004a4:	df000215 	stw	fp,8(sp)
100004a8:	df000204 	addi	fp,sp,8
100004ac:	2007883a 	mov	r3,r4
100004b0:	2805883a 	mov	r2,r5
100004b4:	e0fffe05 	stb	r3,-8(fp)
100004b8:	e0bfff0d 	sth	r2,-4(fp)
	//*otg_hpi_data = Data;


	//*otg_hpi_w = 1;
	// Disable read, enable CS and write, prepare address and data to be written
	*otg_hpi_r = 1;
100004bc:	00802804 	movi	r2,160
100004c0:	00c00044 	movi	r3,1
100004c4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = Address;
100004c8:	00803004 	movi	r2,192
100004cc:	e0fffe03 	ldbu	r3,-8(fp)
100004d0:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
100004d4:	00802c04 	movi	r2,176
100004d8:	e0ffff0b 	ldhu	r3,-4(fp)
100004dc:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
100004e0:	00802004 	movi	r2,128
100004e4:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
100004e8:	00802404 	movi	r2,144
100004ec:	10000005 	stb	zero,0(r2)

	// Disable write and CS
	*otg_hpi_w = 1;
100004f0:	00802404 	movi	r2,144
100004f4:	00c00044 	movi	r3,1
100004f8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100004fc:	00802004 	movi	r2,128
10000500:	00c00044 	movi	r3,1
10000504:	10c00005 	stb	r3,0(r2)
}
10000508:	0001883a 	nop
1000050c:	e037883a 	mov	sp,fp
10000510:	df000017 	ldw	fp,0(sp)
10000514:	dec00104 	addi	sp,sp,4
10000518:	f800283a 	ret

1000051c <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
1000051c:	defffd04 	addi	sp,sp,-12
10000520:	df000215 	stw	fp,8(sp)
10000524:	df000204 	addi	fp,sp,8
10000528:	2005883a 	mov	r2,r4
1000052c:	e0bfff05 	stb	r2,-4(fp)
	//*otg_hpi_address = Address;
	//*otg_hpi_r = 0;
	//*otg_hpi_data = Data;
	//*otg_hpi_r = 1;
	// Enable select chip and read, disable write, prepare address
	*otg_hpi_w = 1;
10000530:	00802404 	movi	r2,144
10000534:	00c00044 	movi	r3,1
10000538:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = Address;
1000053c:	00803004 	movi	r2,192
10000540:	e0ffff03 	ldbu	r3,-4(fp)
10000544:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10000548:	00802004 	movi	r2,128
1000054c:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
10000550:	00802804 	movi	r2,160
10000554:	10000005 	stb	zero,0(r2)

	// Read data to temporary variable
	temp = *otg_hpi_data;
10000558:	00802c04 	movi	r2,176
1000055c:	10800017 	ldw	r2,0(r2)
10000560:	e0bffe0d 	sth	r2,-8(fp)

	// Disable CS and read
	*otg_hpi_cs = 1;
10000564:	00802004 	movi	r2,128
10000568:	00c00044 	movi	r3,1
1000056c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10000570:	00802804 	movi	r2,160
10000574:	00c00044 	movi	r3,1
10000578:	10c00005 	stb	r3,0(r2)

	//printf("%x\n",temp);
	return temp;
1000057c:	e0bffe0b 	ldhu	r2,-8(fp)
}
10000580:	e037883a 	mov	sp,fp
10000584:	df000017 	ldw	fp,0(sp)
10000588:	dec00104 	addi	sp,sp,4
1000058c:	f800283a 	ret

10000590 <initial_Kirby>:
#include "usb_main.h"
#include "star.h"

#define TEST_EDGE

void initial_Kirby(Kirby * kirby){
10000590:	defffe04 	addi	sp,sp,-8
10000594:	df000115 	stw	fp,4(sp)
10000598:	df000104 	addi	fp,sp,4
1000059c:	e13fff15 	stw	r4,-4(fp)
    kirby->x = KIRBY_START_X;
100005a0:	e0bfff17 	ldw	r2,-4(fp)
100005a4:	00c00144 	movi	r3,5
100005a8:	10c00015 	stw	r3,0(r2)
    kirby->y = KIRBY_START_Y;
100005ac:	e0bfff17 	ldw	r2,-4(fp)
100005b0:	00c018c4 	movi	r3,99
100005b4:	10c00115 	stw	r3,4(r2)
    kirby->map = 0;
100005b8:	e0bfff17 	ldw	r2,-4(fp)
100005bc:	10000215 	stw	zero,8(r2)
    kirby->image = 0;
100005c0:	e0bfff17 	ldw	r2,-4(fp)
100005c4:	10000315 	stw	zero,12(r2)
    kirby->is_left = 0;
100005c8:	e0bfff17 	ldw	r2,-4(fp)
100005cc:	10000415 	stw	zero,16(r2)
    kirby->health = 8;
100005d0:	e0bfff17 	ldw	r2,-4(fp)
100005d4:	00c00204 	movi	r3,8
100005d8:	10c00515 	stw	r3,20(r2)
    kirby->action = 0;
100005dc:	e0bfff17 	ldw	r2,-4(fp)
100005e0:	10000615 	stw	zero,24(r2)
    kirby->frame = 0;
100005e4:	e0bfff17 	ldw	r2,-4(fp)
100005e8:	10000715 	stw	zero,28(r2)
    kirby->in_slope = 0;
100005ec:	e0bfff17 	ldw	r2,-4(fp)
100005f0:	10000815 	stw	zero,32(r2)
    kirby->in_air = 0;
100005f4:	e0bfff17 	ldw	r2,-4(fp)
100005f8:	10000915 	stw	zero,36(r2)
    kirby->is_inhaled = 0;
100005fc:	e0bfff17 	ldw	r2,-4(fp)
10000600:	10000a15 	stw	zero,40(r2)
    kirby->damaging = 0;
10000604:	e0bfff17 	ldw	r2,-4(fp)
10000608:	10000b15 	stw	zero,44(r2)
    kirby->inhaling = 0;
1000060c:	e0bfff17 	ldw	r2,-4(fp)
10000610:	10000c15 	stw	zero,48(r2)
    kirby->spitting = 0;
10000614:	e0bfff17 	ldw	r2,-4(fp)
10000618:	10000d15 	stw	zero,52(r2)
}
1000061c:	0001883a 	nop
10000620:	e037883a 	mov	sp,fp
10000624:	df000017 	ldw	fp,0(sp)
10000628:	dec00104 	addi	sp,sp,4
1000062c:	f800283a 	ret

10000630 <upload_Kirby_Info>:

void upload_Kirby_Info(Kirby * kirby) {
10000630:	defff504 	addi	sp,sp,-44
10000634:	dfc00a15 	stw	ra,40(sp)
10000638:	df000915 	stw	fp,36(sp)
1000063c:	df000904 	addi	fp,sp,36
10000640:	e13fff15 	stw	r4,-4(fp)
//    int Kirby_Pos_X = kirby->x;
//    int Kirby_Pos_Y = kirby->y;
    int Kirby_Image_X = kirby->frame;
10000644:	e0bfff17 	ldw	r2,-4(fp)
10000648:	10800717 	ldw	r2,28(r2)
1000064c:	e0bff915 	stw	r2,-28(fp)
    int Kirby_Image_Y = kirby->action;
10000650:	e0bfff17 	ldw	r2,-4(fp)
10000654:	10800617 	ldw	r2,24(r2)
10000658:	e0bffa15 	stw	r2,-24(fp)
    int Kirby_Image_Width = 0;
1000065c:	e03ff715 	stw	zero,-36(fp)
    int Kirby_Image_Height = 0;
10000660:	e03ff815 	stw	zero,-32(fp)
    int Kirby_Screen_X = 0;
10000664:	e03ffb15 	stw	zero,-20(fp)
    int Kirby_Screen_Y = kirby->y;
10000668:	e0bfff17 	ldw	r2,-4(fp)
1000066c:	10800117 	ldw	r2,4(r2)
10000670:	e0bffc15 	stw	r2,-16(fp)
//    int Map_Width = map_Width(kirby->map);
    int kirby_Botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff; // Center botton
10000674:	e13fff17 	ldw	r4,-4(fp)
10000678:	00021600 	call	10002160 <get_Kirby_Botton_Pos>
1000067c:	1004d43a 	srli	r2,r2,16
10000680:	e0bffd15 	stw	r2,-12(fp)
    int kirby_Botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff; // Center botton
10000684:	e13fff17 	ldw	r4,-4(fp)
10000688:	00021600 	call	10002160 <get_Kirby_Botton_Pos>
1000068c:	10bfffcc 	andi	r2,r2,65535
10000690:	e0bffe15 	stw	r2,-8(fp)

    // Decide kirby's image width and height
    if (kirby->is_inhaled == 1) {
10000694:	e0bfff17 	ldw	r2,-4(fp)
10000698:	10800a17 	ldw	r2,40(r2)
1000069c:	10800058 	cmpnei	r2,r2,1
100006a0:	1000051e 	bne	r2,zero,100006b8 <upload_Kirby_Info+0x88>
        Kirby_Image_Width = 30;
100006a4:	00800784 	movi	r2,30
100006a8:	e0bff715 	stw	r2,-36(fp)
        Kirby_Image_Height = 30;
100006ac:	00800784 	movi	r2,30
100006b0:	e0bff815 	stw	r2,-32(fp)
100006b4:	00000406 	br	100006c8 <upload_Kirby_Info+0x98>
    } else {
        Kirby_Image_Width = 28;
100006b8:	00800704 	movi	r2,28
100006bc:	e0bff715 	stw	r2,-36(fp)
        Kirby_Image_Height = 28;
100006c0:	00800704 	movi	r2,28
100006c4:	e0bff815 	stw	r2,-32(fp)
    }
    if ((kirby->is_inhaled == 1) && (kirby->spitting != 0)) {
100006c8:	e0bfff17 	ldw	r2,-4(fp)
100006cc:	10800a17 	ldw	r2,40(r2)
100006d0:	10800058 	cmpnei	r2,r2,1
100006d4:	1000071e 	bne	r2,zero,100006f4 <upload_Kirby_Info+0xc4>
100006d8:	e0bfff17 	ldw	r2,-4(fp)
100006dc:	10800d17 	ldw	r2,52(r2)
100006e0:	10000426 	beq	r2,zero,100006f4 <upload_Kirby_Info+0xc4>
        Kirby_Image_Width = 60;
100006e4:	00800f04 	movi	r2,60
100006e8:	e0bff715 	stw	r2,-36(fp)
        Kirby_Image_Height = 30;
100006ec:	00800784 	movi	r2,30
100006f0:	e0bff815 	stw	r2,-32(fp)
    }
    if (kirby->inhaling != 0) {
100006f4:	e0bfff17 	ldw	r2,-4(fp)
100006f8:	10800c17 	ldw	r2,48(r2)
100006fc:	10000426 	beq	r2,zero,10000710 <upload_Kirby_Info+0xe0>
        Kirby_Image_Width = 60;
10000700:	00800f04 	movi	r2,60
10000704:	e0bff715 	stw	r2,-36(fp)
        Kirby_Image_Height = 30;
10000708:	00800784 	movi	r2,30
1000070c:	e0bff815 	stw	r2,-32(fp)
    }

    // Decide the position X of kirby in screen
    Kirby_Screen_X = kirby_Screen_Center_X(kirby_Botton_X);
10000710:	e13ffd17 	ldw	r4,-12(fp)
10000714:	0002a900 	call	10002a90 <kirby_Screen_Center_X>
10000718:	e0bffb15 	stw	r2,-20(fp)


    // Upload to kirby's registers
    REG_0_MAP_INFO = (REG_0_MAP_INFO & 0x0000fff0) | (Kirby_Screen_X << 24) | (Kirby_Screen_Y << 16) | (kirby->image << 2) | kirby->map;
1000071c:	d0d5ef17 	ldw	r3,22460(gp)
10000720:	d095ef17 	ldw	r2,22460(gp)
10000724:	10800017 	ldw	r2,0(r2)
10000728:	10bffc0c 	andi	r2,r2,65520
1000072c:	e13ffb17 	ldw	r4,-20(fp)
10000730:	2008963a 	slli	r4,r4,24
10000734:	1104b03a 	or	r2,r2,r4
10000738:	e13ffc17 	ldw	r4,-16(fp)
1000073c:	2008943a 	slli	r4,r4,16
10000740:	1108b03a 	or	r4,r2,r4
10000744:	e0bfff17 	ldw	r2,-4(fp)
10000748:	10800317 	ldw	r2,12(r2)
1000074c:	1085883a 	add	r2,r2,r2
10000750:	1085883a 	add	r2,r2,r2
10000754:	2084b03a 	or	r2,r4,r2
10000758:	e13fff17 	ldw	r4,-4(fp)
1000075c:	21000217 	ldw	r4,8(r4)
10000760:	1104b03a 	or	r2,r2,r4
10000764:	18800015 	stw	r2,0(r3)
    REG_1_KIRBY_IMAGE = (Kirby_Image_X << 24) | (Kirby_Image_Y << 16) | (Kirby_Image_Width << 8) | (Kirby_Image_Height << 1) | (kirby->is_left & 0x00000001);
10000768:	d095ef17 	ldw	r2,22460(gp)
1000076c:	10c00104 	addi	r3,r2,4
10000770:	e0bff917 	ldw	r2,-28(fp)
10000774:	1008963a 	slli	r4,r2,24
10000778:	e0bffa17 	ldw	r2,-24(fp)
1000077c:	1004943a 	slli	r2,r2,16
10000780:	2088b03a 	or	r4,r4,r2
10000784:	e0bff717 	ldw	r2,-36(fp)
10000788:	1004923a 	slli	r2,r2,8
1000078c:	2088b03a 	or	r4,r4,r2
10000790:	e0bff817 	ldw	r2,-32(fp)
10000794:	1085883a 	add	r2,r2,r2
10000798:	2088b03a 	or	r4,r4,r2
1000079c:	e0bfff17 	ldw	r2,-4(fp)
100007a0:	10800417 	ldw	r2,16(r2)
100007a4:	1080004c 	andi	r2,r2,1
100007a8:	2084b03a 	or	r2,r4,r2
100007ac:	18800015 	stw	r2,0(r3)
    REG_2_KIRBY_MAP_POS = (kirby_Botton_X << 16) | (kirby_Botton_Y);
100007b0:	d095ef17 	ldw	r2,22460(gp)
100007b4:	10800204 	addi	r2,r2,8
100007b8:	e0fffd17 	ldw	r3,-12(fp)
100007bc:	1808943a 	slli	r4,r3,16
100007c0:	e0fffe17 	ldw	r3,-8(fp)
100007c4:	20c6b03a 	or	r3,r4,r3
100007c8:	10c00015 	stw	r3,0(r2)
    printf("REG_0_MAP_INFO: %08x\n", REG_0_MAP_INFO);
    printf("REG_1_KIRBY_IMAGE: %08x\n", REG_1_KIRBY_IMAGE);
    printf("REG_2_KIRBY_MAP_POS: %08x\n", REG_2_KIRBY_MAP_POS);
    printf("\n/******************* end ****************/\n");
    #endif
}
100007cc:	0001883a 	nop
100007d0:	e037883a 	mov	sp,fp
100007d4:	dfc00117 	ldw	ra,4(sp)
100007d8:	df000017 	ldw	fp,0(sp)
100007dc:	dec00204 	addi	sp,sp,8
100007e0:	f800283a 	ret

100007e4 <updateKirby>:

void updateKirby(Kirby * kirby, Star * star, int keycode, int pre_keycode){
100007e4:	defff804 	addi	sp,sp,-32
100007e8:	dfc00715 	stw	ra,28(sp)
100007ec:	df000615 	stw	fp,24(sp)
100007f0:	df000604 	addi	fp,sp,24
100007f4:	e13ffc15 	stw	r4,-16(fp)
100007f8:	e17ffd15 	stw	r5,-12(fp)
100007fc:	e1bffe15 	stw	r6,-8(fp)
10000800:	e1ffff15 	stw	r7,-4(fp)
    int map_width = map_Width(kirby->map);
10000804:	e0bffc17 	ldw	r2,-16(fp)
10000808:	10800217 	ldw	r2,8(r2)
1000080c:	1009883a 	mov	r4,r2
10000810:	00020940 	call	10002094 <map_Width>
10000814:	e0bffb15 	stw	r2,-20(fp)
    int i = 0;
10000818:	e03ffa15 	stw	zero,-24(fp)

    // Enforce spitting
    if (kirby->spitting > 0) {
1000081c:	e0bffc17 	ldw	r2,-16(fp)
10000820:	10800d17 	ldw	r2,52(r2)
10000824:	00802c0e 	bge	zero,r2,100008d8 <updateKirby+0xf4>
        kirby->spitting += 1;
10000828:	e0bffc17 	ldw	r2,-16(fp)
1000082c:	10800d17 	ldw	r2,52(r2)
10000830:	10c00044 	addi	r3,r2,1
10000834:	e0bffc17 	ldw	r2,-16(fp)
10000838:	10c00d15 	stw	r3,52(r2)
        kirby->image = 1;
1000083c:	e0bffc17 	ldw	r2,-16(fp)
10000840:	00c00044 	movi	r3,1
10000844:	10c00315 	stw	r3,12(r2)
        kirby->action = 4;
10000848:	e0bffc17 	ldw	r2,-16(fp)
1000084c:	00c00104 	movi	r3,4
10000850:	10c00615 	stw	r3,24(r2)
        kirby->frame += 1;
10000854:	e0bffc17 	ldw	r2,-16(fp)
10000858:	10800717 	ldw	r2,28(r2)
1000085c:	10c00044 	addi	r3,r2,1
10000860:	e0bffc17 	ldw	r2,-16(fp)
10000864:	10c00715 	stw	r3,28(r2)
        // printf("\n Spitting, ignore keyboard control \n");
        spit_Star(kirby, star); // spit star in specific frame
10000868:	e17ffd17 	ldw	r5,-12(fp)
1000086c:	e13ffc17 	ldw	r4,-16(fp)
10000870:	0002b780 	call	10002b78 <spit_Star>
        if (kirby->spitting == 8) {
10000874:	e0bffc17 	ldw	r2,-16(fp)
10000878:	10800d17 	ldw	r2,52(r2)
1000087c:	10800218 	cmpnei	r2,r2,8
10000880:	1000121e 	bne	r2,zero,100008cc <updateKirby+0xe8>
            kirby->spitting = 0;
10000884:	e0bffc17 	ldw	r2,-16(fp)
10000888:	10000d15 	stw	zero,52(r2)
            kirby->is_inhaled = 0;
1000088c:	e0bffc17 	ldw	r2,-16(fp)
10000890:	10000a15 	stw	zero,40(r2)
            kirby->image = 0;
10000894:	e0bffc17 	ldw	r2,-16(fp)
10000898:	10000315 	stw	zero,12(r2)
            kirby->action = 0;
1000089c:	e0bffc17 	ldw	r2,-16(fp)
100008a0:	10000615 	stw	zero,24(r2)
            if (kirby->in_air == 1)
100008a4:	e0bffc17 	ldw	r2,-16(fp)
100008a8:	10800917 	ldw	r2,36(r2)
100008ac:	10800058 	cmpnei	r2,r2,1
100008b0:	1000041e 	bne	r2,zero,100008c4 <updateKirby+0xe0>
                kirby->frame = 10;
100008b4:	e0bffc17 	ldw	r2,-16(fp)
100008b8:	00c00284 	movi	r3,10
100008bc:	10c00715 	stw	r3,28(r2)
100008c0:	00000206 	br	100008cc <updateKirby+0xe8>
            else
                kirby->frame = 0;
100008c4:	e0bffc17 	ldw	r2,-16(fp)
100008c8:	10000715 	stw	zero,28(r2)
        }
        frame_Time(KIRBY_FRAME_TIME_INHALE);
100008cc:	0107d004 	movi	r4,8000
100008d0:	00020500 	call	10002050 <frame_Time>
100008d4:	0004ab06 	br	10001b84 <updateKirby+0x13a0>
    }
    
    // Enforce inhaling
    else if (kirby->inhaling >= 2) {
100008d8:	e0bffc17 	ldw	r2,-16(fp)
100008dc:	10800c17 	ldw	r2,48(r2)
100008e0:	10800090 	cmplti	r2,r2,2
100008e4:	1000281e 	bne	r2,zero,10000988 <updateKirby+0x1a4>
        kirby->inhaling += 1;
100008e8:	e0bffc17 	ldw	r2,-16(fp)
100008ec:	10800c17 	ldw	r2,48(r2)
100008f0:	10c00044 	addi	r3,r2,1
100008f4:	e0bffc17 	ldw	r2,-16(fp)
100008f8:	10c00c15 	stw	r3,48(r2)
        kirby->image = 1;
100008fc:	e0bffc17 	ldw	r2,-16(fp)
10000900:	00c00044 	movi	r3,1
10000904:	10c00315 	stw	r3,12(r2)
        kirby->action = 3;
10000908:	e0bffc17 	ldw	r2,-16(fp)
1000090c:	00c000c4 	movi	r3,3
10000910:	10c00615 	stw	r3,24(r2)
        kirby->frame += 1;
10000914:	e0bffc17 	ldw	r2,-16(fp)
10000918:	10800717 	ldw	r2,28(r2)
1000091c:	10c00044 	addi	r3,r2,1
10000920:	e0bffc17 	ldw	r2,-16(fp)
10000924:	10c00715 	stw	r3,28(r2)
        if (kirby->inhaling == 7) {
10000928:	e0bffc17 	ldw	r2,-16(fp)
1000092c:	10800c17 	ldw	r2,48(r2)
10000930:	108001d8 	cmpnei	r2,r2,7
10000934:	1004931e 	bne	r2,zero,10001b84 <updateKirby+0x13a0>
            kirby->inhaling = 0;
10000938:	e0bffc17 	ldw	r2,-16(fp)
1000093c:	10000c15 	stw	zero,48(r2)
            kirby->is_inhaled = 0;
10000940:	e0bffc17 	ldw	r2,-16(fp)
10000944:	10000a15 	stw	zero,40(r2)
            if (kirby->in_air == 1) {
10000948:	e0bffc17 	ldw	r2,-16(fp)
1000094c:	10800917 	ldw	r2,36(r2)
10000950:	10800058 	cmpnei	r2,r2,1
10000954:	1000071e 	bne	r2,zero,10000974 <updateKirby+0x190>
                kirby->action = 2;
10000958:	e0bffc17 	ldw	r2,-16(fp)
1000095c:	00c00084 	movi	r3,2
10000960:	10c00615 	stw	r3,24(r2)
                kirby->frame = 13;
10000964:	e0bffc17 	ldw	r2,-16(fp)
10000968:	00c00344 	movi	r3,13
1000096c:	10c00715 	stw	r3,28(r2)
10000970:	00048406 	br	10001b84 <updateKirby+0x13a0>
            } else {
                kirby->action = 0;
10000974:	e0bffc17 	ldw	r2,-16(fp)
10000978:	10000615 	stw	zero,24(r2)
                kirby->frame = 0;
1000097c:	e0bffc17 	ldw	r2,-16(fp)
10000980:	10000715 	stw	zero,28(r2)
10000984:	00047f06 	br	10001b84 <updateKirby+0x13a0>
        }
    }
    
    // Key detection
    else {
        kirby->inhaling = 0;
10000988:	e0bffc17 	ldw	r2,-16(fp)
1000098c:	10000c15 	stw	zero,48(r2)
        switch ((keycode & 0x0000ffff)) {
10000990:	e0bffe17 	ldw	r2,-8(fp)
10000994:	10bfffcc 	andi	r2,r2,65535
10000998:	10c105a0 	cmpeqi	r3,r2,1046
1000099c:	1800dc1e 	bne	r3,zero,10000d10 <updateKirby+0x52c>
100009a0:	10c105c8 	cmpgei	r3,r2,1047
100009a4:	18001b1e 	bne	r3,zero,10000a14 <updateKirby+0x230>
100009a8:	10c003e0 	cmpeqi	r3,r2,15
100009ac:	18046e1e 	bne	r3,zero,10001b68 <updateKirby+0x1384>
100009b0:	10c00408 	cmpgei	r3,r2,16
100009b4:	18000b1e 	bne	r3,zero,100009e4 <updateKirby+0x200>
100009b8:	10c00120 	cmpeqi	r3,r2,4
100009bc:	1800d41e 	bne	r3,zero,10000d10 <updateKirby+0x52c>
100009c0:	10c00148 	cmpgei	r3,r2,5
100009c4:	1800021e 	bne	r3,zero,100009d0 <updateKirby+0x1ec>
100009c8:	10003026 	beq	r2,zero,10000a8c <updateKirby+0x2a8>
100009cc:	0003c506 	br	100018e4 <updateKirby+0x1100>
100009d0:	10c001e0 	cmpeqi	r3,r2,7
100009d4:	1801821e 	bne	r3,zero,10000fe0 <updateKirby+0x7fc>
100009d8:	108003a0 	cmpeqi	r2,r2,14
100009dc:	10035c1e 	bne	r2,zero,10001750 <updateKirby+0xf6c>
100009e0:	0003c006 	br	100018e4 <updateKirby+0x1100>
100009e4:	10c005e0 	cmpeqi	r3,r2,23
100009e8:	1803b51e 	bne	r3,zero,100018c0 <updateKirby+0x10dc>
100009ec:	10c00608 	cmpgei	r3,r2,24
100009f0:	1800031e 	bne	r3,zero,10000a00 <updateKirby+0x21c>
100009f4:	108005a0 	cmpeqi	r2,r2,22
100009f8:	1002831e 	bne	r2,zero,10001408 <updateKirby+0xc24>
100009fc:	0003b906 	br	100018e4 <updateKirby+0x1100>
10000a00:	10c006a0 	cmpeqi	r3,r2,26
10000a04:	18032e1e 	bne	r3,zero,100016c0 <updateKirby+0xedc>
10000a08:	10810020 	cmpeqi	r2,r2,1024
10000a0c:	1000c01e 	bne	r2,zero,10000d10 <updateKirby+0x52c>
10000a10:	0003b406 	br	100018e4 <updateKirby+0x1100>
10000a14:	10c3c5a0 	cmpeqi	r3,r2,3862
10000a18:	18037e1e 	bne	r3,zero,10001814 <updateKirby+0x1030>
10000a1c:	10c3c5c8 	cmpgei	r3,r2,3863
10000a20:	18000c1e 	bne	r3,zero,10000a54 <updateKirby+0x270>
10000a24:	10c1c020 	cmpeqi	r3,r2,1792
10000a28:	18016d1e 	bne	r3,zero,10000fe0 <updateKirby+0x7fc>
10000a2c:	10c1c048 	cmpgei	r3,r2,1793
10000a30:	1800031e 	bne	r3,zero,10000a40 <updateKirby+0x25c>
10000a34:	108106a0 	cmpeqi	r2,r2,1050
10000a38:	10021c1e 	bne	r2,zero,100012ac <updateKirby+0xac8>
10000a3c:	0003a906 	br	100018e4 <updateKirby+0x1100>
10000a40:	10c1c5a0 	cmpeqi	r3,r2,1814
10000a44:	1801661e 	bne	r3,zero,10000fe0 <updateKirby+0x7fc>
10000a48:	1081c6a0 	cmpeqi	r2,r2,1818
10000a4c:	1002431e 	bne	r2,zero,1000135c <updateKirby+0xb78>
10000a50:	0003a406 	br	100018e4 <updateKirby+0x1100>
10000a54:	10c583e0 	cmpeqi	r3,r2,5647
10000a58:	18036e1e 	bne	r3,zero,10001814 <updateKirby+0x1030>
10000a5c:	10c58408 	cmpgei	r3,r2,5648
10000a60:	1800051e 	bne	r3,zero,10000a78 <updateKirby+0x294>
10000a64:	10c58120 	cmpeqi	r3,r2,5636
10000a68:	1800a91e 	bne	r3,zero,10000d10 <updateKirby+0x52c>
10000a6c:	108581e0 	cmpeqi	r2,r2,5639
10000a70:	10015b1e 	bne	r2,zero,10000fe0 <updateKirby+0x7fc>
10000a74:	00039b06 	br	100018e4 <updateKirby+0x1100>
10000a78:	10c68120 	cmpeqi	r3,r2,6660
10000a7c:	18020b1e 	bne	r3,zero,100012ac <updateKirby+0xac8>
10000a80:	108681e0 	cmpeqi	r2,r2,6663
10000a84:	1002351e 	bne	r2,zero,1000135c <updateKirby+0xb78>
10000a88:	00039606 	br	100018e4 <updateKirby+0x1100>
        case 0x0000: { // "" Stand
            if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
10000a8c:	e0bffc17 	ldw	r2,-16(fp)
10000a90:	10800917 	ldw	r2,36(r2)
10000a94:	1000261e 	bne	r2,zero,10000b30 <updateKirby+0x34c>
10000a98:	e0bffc17 	ldw	r2,-16(fp)
10000a9c:	10800a17 	ldw	r2,40(r2)
10000aa0:	1000231e 	bne	r2,zero,10000b30 <updateKirby+0x34c>
                kirby->image = 0;
10000aa4:	e0bffc17 	ldw	r2,-16(fp)
10000aa8:	10000315 	stw	zero,12(r2)
                kirby->action = 0;
10000aac:	e0bffc17 	ldw	r2,-16(fp)
10000ab0:	10000615 	stw	zero,24(r2)
                if (pre_keycode == keycode) {
10000ab4:	e0ffff17 	ldw	r3,-4(fp)
10000ab8:	e0bffe17 	ldw	r2,-8(fp)
10000abc:	1880131e 	bne	r3,r2,10000b0c <updateKirby+0x328>
                    kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
10000ac0:	e0bffc17 	ldw	r2,-16(fp)
10000ac4:	10800717 	ldw	r2,28(r2)
10000ac8:	10c00044 	addi	r3,r2,1
10000acc:	00a00034 	movhi	r2,32768
10000ad0:	10800044 	addi	r2,r2,1
10000ad4:	1884703a 	and	r2,r3,r2
10000ad8:	1000040e 	bge	r2,zero,10000aec <updateKirby+0x308>
10000adc:	10bfffc4 	addi	r2,r2,-1
10000ae0:	00ffff84 	movi	r3,-2
10000ae4:	10c4b03a 	or	r2,r2,r3
10000ae8:	10800044 	addi	r2,r2,1
10000aec:	1007883a 	mov	r3,r2
10000af0:	e0bffc17 	ldw	r2,-16(fp)
10000af4:	10800817 	ldw	r2,32(r2)
10000af8:	1085883a 	add	r2,r2,r2
10000afc:	1887883a 	add	r3,r3,r2
10000b00:	e0bffc17 	ldw	r2,-16(fp)
10000b04:	10c00715 	stw	r3,28(r2)
10000b08:	00000606 	br	10000b24 <updateKirby+0x340>
                } else {
                    kirby->frame = 0 + 2 * kirby->in_slope;
10000b0c:	e0bffc17 	ldw	r2,-16(fp)
10000b10:	10800817 	ldw	r2,32(r2)
10000b14:	1085883a 	add	r2,r2,r2
10000b18:	1007883a 	mov	r3,r2
10000b1c:	e0bffc17 	ldw	r2,-16(fp)
10000b20:	10c00715 	stw	r3,28(r2)
                }
                frame_Time(KIRBY_FRAME_TIME_BLINK);
10000b24:	010ea604 	movi	r4,15000
10000b28:	00020500 	call	10002050 <frame_Time>
10000b2c:	00007706 	br	10000d0c <updateKirby+0x528>
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
10000b30:	e0bffc17 	ldw	r2,-16(fp)
10000b34:	10800917 	ldw	r2,36(r2)
10000b38:	1000281e 	bne	r2,zero,10000bdc <updateKirby+0x3f8>
10000b3c:	e0bffc17 	ldw	r2,-16(fp)
10000b40:	10800a17 	ldw	r2,40(r2)
10000b44:	10800058 	cmpnei	r2,r2,1
10000b48:	1000241e 	bne	r2,zero,10000bdc <updateKirby+0x3f8>
                kirby->image = 1;
10000b4c:	e0bffc17 	ldw	r2,-16(fp)
10000b50:	00c00044 	movi	r3,1
10000b54:	10c00315 	stw	r3,12(r2)
                kirby->action = 0;
10000b58:	e0bffc17 	ldw	r2,-16(fp)
10000b5c:	10000615 	stw	zero,24(r2)
                if (pre_keycode == keycode) {
10000b60:	e0ffff17 	ldw	r3,-4(fp)
10000b64:	e0bffe17 	ldw	r2,-8(fp)
10000b68:	1880131e 	bne	r3,r2,10000bb8 <updateKirby+0x3d4>
                    kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
10000b6c:	e0bffc17 	ldw	r2,-16(fp)
10000b70:	10800717 	ldw	r2,28(r2)
10000b74:	10c00044 	addi	r3,r2,1
10000b78:	00a00034 	movhi	r2,32768
10000b7c:	10800044 	addi	r2,r2,1
10000b80:	1884703a 	and	r2,r3,r2
10000b84:	1000040e 	bge	r2,zero,10000b98 <updateKirby+0x3b4>
10000b88:	10bfffc4 	addi	r2,r2,-1
10000b8c:	00ffff84 	movi	r3,-2
10000b90:	10c4b03a 	or	r2,r2,r3
10000b94:	10800044 	addi	r2,r2,1
10000b98:	1007883a 	mov	r3,r2
10000b9c:	e0bffc17 	ldw	r2,-16(fp)
10000ba0:	10800817 	ldw	r2,32(r2)
10000ba4:	1085883a 	add	r2,r2,r2
10000ba8:	1887883a 	add	r3,r3,r2
10000bac:	e0bffc17 	ldw	r2,-16(fp)
10000bb0:	10c00715 	stw	r3,28(r2)
10000bb4:	00000606 	br	10000bd0 <updateKirby+0x3ec>
                } else {
                    kirby->frame = 0 + 2 * kirby->in_slope;
10000bb8:	e0bffc17 	ldw	r2,-16(fp)
10000bbc:	10800817 	ldw	r2,32(r2)
10000bc0:	1085883a 	add	r2,r2,r2
10000bc4:	1007883a 	mov	r3,r2
10000bc8:	e0bffc17 	ldw	r2,-16(fp)
10000bcc:	10c00715 	stw	r3,28(r2)
                }
                frame_Time(KIRBY_FRAME_TIME_BLINK);
10000bd0:	010ea604 	movi	r4,15000
10000bd4:	00020500 	call	10002050 <frame_Time>
10000bd8:	00004c06 	br	10000d0c <updateKirby+0x528>
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
10000bdc:	e0bffc17 	ldw	r2,-16(fp)
10000be0:	10800917 	ldw	r2,36(r2)
10000be4:	10800058 	cmpnei	r2,r2,1
10000be8:	10001f1e 	bne	r2,zero,10000c68 <updateKirby+0x484>
10000bec:	e0bffc17 	ldw	r2,-16(fp)
10000bf0:	10800a17 	ldw	r2,40(r2)
10000bf4:	10001c1e 	bne	r2,zero,10000c68 <updateKirby+0x484>
                if (will_Touch_Ground(kirby, kirby->map)) {
10000bf8:	e0bffc17 	ldw	r2,-16(fp)
10000bfc:	10800217 	ldw	r2,8(r2)
10000c00:	100b883a 	mov	r5,r2
10000c04:	e13ffc17 	ldw	r4,-16(fp)
10000c08:	00020e80 	call	100020e8 <will_Touch_Ground>
10000c0c:	10000726 	beq	r2,zero,10000c2c <updateKirby+0x448>
                    kirby->image = 0;
10000c10:	e0bffc17 	ldw	r2,-16(fp)
10000c14:	10000315 	stw	zero,12(r2)
                    kirby->action = 0;
10000c18:	e0bffc17 	ldw	r2,-16(fp)
10000c1c:	10000615 	stw	zero,24(r2)
                    kirby->in_air = 0;
10000c20:	e0bffc17 	ldw	r2,-16(fp)
10000c24:	10000915 	stw	zero,36(r2)
                } else {
                    kirby->frame = 0 + 2 * kirby->in_slope;
                }
                frame_Time(KIRBY_FRAME_TIME_BLINK);
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
10000c28:	00003806 	br	10000d0c <updateKirby+0x528>
                    kirby->image = 0;
                    kirby->action = 0;
                    kirby->in_air = 0;
                } else {
                    kirby->image = 0;
10000c2c:	e0bffc17 	ldw	r2,-16(fp)
10000c30:	10000315 	stw	zero,12(r2)
                    kirby->action = 0;
10000c34:	e0bffc17 	ldw	r2,-16(fp)
10000c38:	10000615 	stw	zero,24(r2)
                    kirby->frame = 10;
10000c3c:	e0bffc17 	ldw	r2,-16(fp)
10000c40:	00c00284 	movi	r3,10
10000c44:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
10000c48:	e0bffc17 	ldw	r2,-16(fp)
10000c4c:	10800117 	ldw	r2,4(r2)
10000c50:	10c000c4 	addi	r3,r2,3
10000c54:	e0bffc17 	ldw	r2,-16(fp)
10000c58:	10c00115 	stw	r3,4(r2)
                    frame_Time(KIRBY_FRAME_TIME_WALK);
10000c5c:	01019004 	movi	r4,1600
10000c60:	00020500 	call	10002050 <frame_Time>
                } else {
                    kirby->frame = 0 + 2 * kirby->in_slope;
                }
                frame_Time(KIRBY_FRAME_TIME_BLINK);
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
10000c64:	00002906 	br	10000d0c <updateKirby+0x528>
                    kirby->action = 0;
                    kirby->frame = 10;
                    kirby->y += KIRBY_STEP_Y;
                    frame_Time(KIRBY_FRAME_TIME_WALK);
                }
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 1)) {
10000c68:	e0bffc17 	ldw	r2,-16(fp)
10000c6c:	10800917 	ldw	r2,36(r2)
10000c70:	10800058 	cmpnei	r2,r2,1
10000c74:	1003be1e 	bne	r2,zero,10001b70 <updateKirby+0x138c>
10000c78:	e0bffc17 	ldw	r2,-16(fp)
10000c7c:	10800a17 	ldw	r2,40(r2)
10000c80:	10800058 	cmpnei	r2,r2,1
10000c84:	1003ba1e 	bne	r2,zero,10001b70 <updateKirby+0x138c>
                if (will_Touch_Ground(kirby, kirby->map)) {
10000c88:	e0bffc17 	ldw	r2,-16(fp)
10000c8c:	10800217 	ldw	r2,8(r2)
10000c90:	100b883a 	mov	r5,r2
10000c94:	e13ffc17 	ldw	r4,-16(fp)
10000c98:	00020e80 	call	100020e8 <will_Touch_Ground>
10000c9c:	10000a26 	beq	r2,zero,10000cc8 <updateKirby+0x4e4>
                    kirby->image = 1;
10000ca0:	e0bffc17 	ldw	r2,-16(fp)
10000ca4:	00c00044 	movi	r3,1
10000ca8:	10c00315 	stw	r3,12(r2)
                    kirby->action = 0;
10000cac:	e0bffc17 	ldw	r2,-16(fp)
10000cb0:	10000615 	stw	zero,24(r2)
                    kirby->in_air = 0;
10000cb4:	e0bffc17 	ldw	r2,-16(fp)
10000cb8:	10000915 	stw	zero,36(r2)
                    kirby->frame = 0;
10000cbc:	e0bffc17 	ldw	r2,-16(fp)
10000cc0:	10000715 	stw	zero,28(r2)
                    kirby->frame = 13;
                    kirby->y += KIRBY_STEP_Y;
                    frame_Time(KIRBY_FRAME_TIME_WALK);
                }
            }
            break;
10000cc4:	0003aa06 	br	10001b70 <updateKirby+0x138c>
                    kirby->image = 1;
                    kirby->action = 0;
                    kirby->in_air = 0;
                    kirby->frame = 0;
                } else {
                    kirby->image = 1;
10000cc8:	e0bffc17 	ldw	r2,-16(fp)
10000ccc:	00c00044 	movi	r3,1
10000cd0:	10c00315 	stw	r3,12(r2)
                    kirby->action = 2;
10000cd4:	e0bffc17 	ldw	r2,-16(fp)
10000cd8:	00c00084 	movi	r3,2
10000cdc:	10c00615 	stw	r3,24(r2)
                    kirby->frame = 13;
10000ce0:	e0bffc17 	ldw	r2,-16(fp)
10000ce4:	00c00344 	movi	r3,13
10000ce8:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
10000cec:	e0bffc17 	ldw	r2,-16(fp)
10000cf0:	10800117 	ldw	r2,4(r2)
10000cf4:	10c000c4 	addi	r3,r2,3
10000cf8:	e0bffc17 	ldw	r2,-16(fp)
10000cfc:	10c00115 	stw	r3,4(r2)
                    frame_Time(KIRBY_FRAME_TIME_WALK);
10000d00:	01019004 	movi	r4,1600
10000d04:	00020500 	call	10002050 <frame_Time>
                }
            }
            break;
10000d08:	00039906 	br	10001b70 <updateKirby+0x138c>
10000d0c:	00039806 	br	10001b70 <updateKirby+0x138c>

        case 0x0416:   //"a" & "s"
        case 0x1604:
        case 0x0400:
        case 0x0004: { //"a" left move
            kirby->x -= KIRBY_STEP_X;
10000d10:	e0bffc17 	ldw	r2,-16(fp)
10000d14:	10800017 	ldw	r2,0(r2)
10000d18:	10ffff44 	addi	r3,r2,-3
10000d1c:	e0bffc17 	ldw	r2,-16(fp)
10000d20:	10c00015 	stw	r3,0(r2)
            kirby->is_left = 1;
10000d24:	e0bffc17 	ldw	r2,-16(fp)
10000d28:	00c00044 	movi	r3,1
10000d2c:	10c00415 	stw	r3,16(r2)

            // Kirby may walk to air
            if (will_Touch_Ground(kirby, kirby->map) == 0)
10000d30:	e0bffc17 	ldw	r2,-16(fp)
10000d34:	10800217 	ldw	r2,8(r2)
10000d38:	100b883a 	mov	r5,r2
10000d3c:	e13ffc17 	ldw	r4,-16(fp)
10000d40:	00020e80 	call	100020e8 <will_Touch_Ground>
10000d44:	1000031e 	bne	r2,zero,10000d54 <updateKirby+0x570>
                kirby->in_air = 1;
10000d48:	e0bffc17 	ldw	r2,-16(fp)
10000d4c:	00c00044 	movi	r3,1
10000d50:	10c00915 	stw	r3,36(r2)

            // state update
            if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
10000d54:	e0bffc17 	ldw	r2,-16(fp)
10000d58:	10800917 	ldw	r2,36(r2)
10000d5c:	1000181e 	bne	r2,zero,10000dc0 <updateKirby+0x5dc>
10000d60:	e0bffc17 	ldw	r2,-16(fp)
10000d64:	10800a17 	ldw	r2,40(r2)
10000d68:	1000151e 	bne	r2,zero,10000dc0 <updateKirby+0x5dc>
                kirby->image = 0;
10000d6c:	e0bffc17 	ldw	r2,-16(fp)
10000d70:	10000315 	stw	zero,12(r2)
                kirby->action = 1;
10000d74:	e0bffc17 	ldw	r2,-16(fp)
10000d78:	00c00044 	movi	r3,1
10000d7c:	10c00615 	stw	r3,24(r2)
                if (pre_keycode == keycode)
10000d80:	e0ffff17 	ldw	r3,-4(fp)
10000d84:	e0bffe17 	ldw	r2,-8(fp)
10000d88:	18800a1e 	bne	r3,r2,10000db4 <updateKirby+0x5d0>
                    kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
10000d8c:	e0bffc17 	ldw	r2,-16(fp)
10000d90:	10800717 	ldw	r2,28(r2)
10000d94:	10800044 	addi	r2,r2,1
10000d98:	01400284 	movi	r5,10
10000d9c:	1009883a 	mov	r4,r2
10000da0:	0004f240 	call	10004f24 <__modsi3>
10000da4:	1007883a 	mov	r3,r2
10000da8:	e0bffc17 	ldw	r2,-16(fp)
10000dac:	10c00715 	stw	r3,28(r2)

            // state update
            if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
                kirby->image = 0;
                kirby->action = 1;
                if (pre_keycode == keycode)
10000db0:	00008806 	br	10000fd4 <updateKirby+0x7f0>
                    kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
                else
                    kirby->frame = 0;
10000db4:	e0bffc17 	ldw	r2,-16(fp)
10000db8:	10000715 	stw	zero,28(r2)

            // state update
            if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
                kirby->image = 0;
                kirby->action = 1;
                if (pre_keycode == keycode)
10000dbc:	00008506 	br	10000fd4 <updateKirby+0x7f0>
                    kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
                else
                    kirby->frame = 0;
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
10000dc0:	e0bffc17 	ldw	r2,-16(fp)
10000dc4:	10800917 	ldw	r2,36(r2)
10000dc8:	10001e1e 	bne	r2,zero,10000e44 <updateKirby+0x660>
10000dcc:	e0bffc17 	ldw	r2,-16(fp)
10000dd0:	10800a17 	ldw	r2,40(r2)
10000dd4:	10800058 	cmpnei	r2,r2,1
10000dd8:	10001a1e 	bne	r2,zero,10000e44 <updateKirby+0x660>
                kirby->image = 1;
10000ddc:	e0bffc17 	ldw	r2,-16(fp)
10000de0:	00c00044 	movi	r3,1
10000de4:	10c00315 	stw	r3,12(r2)
                kirby->action = 1;
10000de8:	e0bffc17 	ldw	r2,-16(fp)
10000dec:	00c00044 	movi	r3,1
10000df0:	10c00615 	stw	r3,24(r2)
                if (pre_keycode == keycode)
10000df4:	e0ffff17 	ldw	r3,-4(fp)
10000df8:	e0bffe17 	ldw	r2,-8(fp)
10000dfc:	18800a1e 	bne	r3,r2,10000e28 <updateKirby+0x644>
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
10000e00:	e0bffc17 	ldw	r2,-16(fp)
10000e04:	10800717 	ldw	r2,28(r2)
10000e08:	10800044 	addi	r2,r2,1
10000e0c:	01400344 	movi	r5,13
10000e10:	1009883a 	mov	r4,r2
10000e14:	0004f240 	call	10004f24 <__modsi3>
10000e18:	1007883a 	mov	r3,r2
10000e1c:	e0bffc17 	ldw	r2,-16(fp)
10000e20:	10c00715 	stw	r3,28(r2)
                else
                    kirby->frame = 0;
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
                kirby->image = 1;
                kirby->action = 1;
                if (pre_keycode == keycode)
10000e24:	00006b06 	br	10000fd4 <updateKirby+0x7f0>
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope; 
10000e28:	e0bffc17 	ldw	r2,-16(fp)
10000e2c:	10800817 	ldw	r2,32(r2)
10000e30:	1085883a 	add	r2,r2,r2
10000e34:	1007883a 	mov	r3,r2
10000e38:	e0bffc17 	ldw	r2,-16(fp)
10000e3c:	10c00715 	stw	r3,28(r2)
                else
                    kirby->frame = 0;
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
                kirby->image = 1;
                kirby->action = 1;
                if (pre_keycode == keycode)
10000e40:	00006406 	br	10000fd4 <updateKirby+0x7f0>
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope; 
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
10000e44:	e0bffc17 	ldw	r2,-16(fp)
10000e48:	10800917 	ldw	r2,36(r2)
10000e4c:	10800058 	cmpnei	r2,r2,1
10000e50:	10002c1e 	bne	r2,zero,10000f04 <updateKirby+0x720>
10000e54:	e0bffc17 	ldw	r2,-16(fp)
10000e58:	10800a17 	ldw	r2,40(r2)
10000e5c:	1000291e 	bne	r2,zero,10000f04 <updateKirby+0x720>
                if (will_Touch_Ground(kirby, kirby->map)) {
10000e60:	e0bffc17 	ldw	r2,-16(fp)
10000e64:	10800217 	ldw	r2,8(r2)
10000e68:	100b883a 	mov	r5,r2
10000e6c:	e13ffc17 	ldw	r4,-16(fp)
10000e70:	00020e80 	call	100020e8 <will_Touch_Ground>
10000e74:	10001626 	beq	r2,zero,10000ed0 <updateKirby+0x6ec>
                    kirby->image = 0;
10000e78:	e0bffc17 	ldw	r2,-16(fp)
10000e7c:	10000315 	stw	zero,12(r2)
                    kirby->action = 1;
10000e80:	e0bffc17 	ldw	r2,-16(fp)
10000e84:	00c00044 	movi	r3,1
10000e88:	10c00615 	stw	r3,24(r2)
                    kirby->in_air = 0;
10000e8c:	e0bffc17 	ldw	r2,-16(fp)
10000e90:	10000915 	stw	zero,36(r2)
                    kirby->frame = 0;
10000e94:	e0bffc17 	ldw	r2,-16(fp)
10000e98:	10000715 	stw	zero,28(r2)
                    if (pre_keycode == keycode)
10000e9c:	e0ffff17 	ldw	r3,-4(fp)
10000ea0:	e0bffe17 	ldw	r2,-8(fp)
10000ea4:	18804a1e 	bne	r3,r2,10000fd0 <updateKirby+0x7ec>
                        kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
10000ea8:	e0bffc17 	ldw	r2,-16(fp)
10000eac:	10800717 	ldw	r2,28(r2)
10000eb0:	10800044 	addi	r2,r2,1
10000eb4:	01400284 	movi	r5,10
10000eb8:	1009883a 	mov	r4,r2
10000ebc:	0004f240 	call	10004f24 <__modsi3>
10000ec0:	1007883a 	mov	r3,r2
10000ec4:	e0bffc17 	ldw	r2,-16(fp)
10000ec8:	10c00715 	stw	r3,28(r2)
                if (pre_keycode == keycode)
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope; 
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
10000ecc:	00004006 	br	10000fd0 <updateKirby+0x7ec>
                    kirby->in_air = 0;
                    kirby->frame = 0;
                    if (pre_keycode == keycode)
                        kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
                } else {
                    kirby->image = 0;
10000ed0:	e0bffc17 	ldw	r2,-16(fp)
10000ed4:	10000315 	stw	zero,12(r2)
                    kirby->action = 0;
10000ed8:	e0bffc17 	ldw	r2,-16(fp)
10000edc:	10000615 	stw	zero,24(r2)
                    kirby->frame = 10;
10000ee0:	e0bffc17 	ldw	r2,-16(fp)
10000ee4:	00c00284 	movi	r3,10
10000ee8:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
10000eec:	e0bffc17 	ldw	r2,-16(fp)
10000ef0:	10800117 	ldw	r2,4(r2)
10000ef4:	10c000c4 	addi	r3,r2,3
10000ef8:	e0bffc17 	ldw	r2,-16(fp)
10000efc:	10c00115 	stw	r3,4(r2)
                if (pre_keycode == keycode)
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope; 
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
10000f00:	00003306 	br	10000fd0 <updateKirby+0x7ec>
                    kirby->image = 0;
                    kirby->action = 0;
                    kirby->frame = 10;
                    kirby->y += KIRBY_STEP_Y;
                }
            } else if  ((kirby->in_air == 1) && (kirby->is_inhaled == 1)) {
10000f04:	e0bffc17 	ldw	r2,-16(fp)
10000f08:	10800917 	ldw	r2,36(r2)
10000f0c:	10800058 	cmpnei	r2,r2,1
10000f10:	1000301e 	bne	r2,zero,10000fd4 <updateKirby+0x7f0>
10000f14:	e0bffc17 	ldw	r2,-16(fp)
10000f18:	10800a17 	ldw	r2,40(r2)
10000f1c:	10800058 	cmpnei	r2,r2,1
10000f20:	10002c1e 	bne	r2,zero,10000fd4 <updateKirby+0x7f0>
                if (will_Touch_Ground(kirby, kirby->map)) {
10000f24:	e0bffc17 	ldw	r2,-16(fp)
10000f28:	10800217 	ldw	r2,8(r2)
10000f2c:	100b883a 	mov	r5,r2
10000f30:	e13ffc17 	ldw	r4,-16(fp)
10000f34:	00020e80 	call	100020e8 <will_Touch_Ground>
10000f38:	10001626 	beq	r2,zero,10000f94 <updateKirby+0x7b0>
                    kirby->image = 1;
10000f3c:	e0bffc17 	ldw	r2,-16(fp)
10000f40:	00c00044 	movi	r3,1
10000f44:	10c00315 	stw	r3,12(r2)
                    kirby->action = 0;
10000f48:	e0bffc17 	ldw	r2,-16(fp)
10000f4c:	10000615 	stw	zero,24(r2)
                    kirby->in_air = 0;
10000f50:	e0bffc17 	ldw	r2,-16(fp)
10000f54:	10000915 	stw	zero,36(r2)
                    kirby->frame = 0;
10000f58:	e0bffc17 	ldw	r2,-16(fp)
10000f5c:	10000715 	stw	zero,28(r2)
                    if (pre_keycode == keycode)
10000f60:	e0ffff17 	ldw	r3,-4(fp)
10000f64:	e0bffe17 	ldw	r2,-8(fp)
10000f68:	18801a1e 	bne	r3,r2,10000fd4 <updateKirby+0x7f0>
                        kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
10000f6c:	e0bffc17 	ldw	r2,-16(fp)
10000f70:	10800717 	ldw	r2,28(r2)
10000f74:	10800044 	addi	r2,r2,1
10000f78:	01400344 	movi	r5,13
10000f7c:	1009883a 	mov	r4,r2
10000f80:	0004f240 	call	10004f24 <__modsi3>
10000f84:	1007883a 	mov	r3,r2
10000f88:	e0bffc17 	ldw	r2,-16(fp)
10000f8c:	10c00715 	stw	r3,28(r2)
10000f90:	00001006 	br	10000fd4 <updateKirby+0x7f0>
                } else {
                    kirby->image = 1;
10000f94:	e0bffc17 	ldw	r2,-16(fp)
10000f98:	00c00044 	movi	r3,1
10000f9c:	10c00315 	stw	r3,12(r2)
                    kirby->action = 2;
10000fa0:	e0bffc17 	ldw	r2,-16(fp)
10000fa4:	00c00084 	movi	r3,2
10000fa8:	10c00615 	stw	r3,24(r2)
                    kirby->frame = 13;
10000fac:	e0bffc17 	ldw	r2,-16(fp)
10000fb0:	00c00344 	movi	r3,13
10000fb4:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
10000fb8:	e0bffc17 	ldw	r2,-16(fp)
10000fbc:	10800117 	ldw	r2,4(r2)
10000fc0:	10c000c4 	addi	r3,r2,3
10000fc4:	e0bffc17 	ldw	r2,-16(fp)
10000fc8:	10c00115 	stw	r3,4(r2)
10000fcc:	00000106 	br	10000fd4 <updateKirby+0x7f0>
                if (pre_keycode == keycode)
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope; 
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
10000fd0:	0001883a 	nop
                    kirby->action = 2;
                    kirby->frame = 13;
                    kirby->y += KIRBY_STEP_Y;
                }
            }
            frame_Time(KIRBY_FRAME_TIME_WALK);
10000fd4:	01019004 	movi	r4,1600
10000fd8:	00020500 	call	10002050 <frame_Time>
            break;
10000fdc:	0002e906 	br	10001b84 <updateKirby+0x13a0>

        case 0x0716:   //"d" & "s"
        case 0x1607:
        case 0x0700:
        case 0x0007: { //"d" right move
            kirby->x += KIRBY_STEP_X;
10000fe0:	e0bffc17 	ldw	r2,-16(fp)
10000fe4:	10800017 	ldw	r2,0(r2)
10000fe8:	10c000c4 	addi	r3,r2,3
10000fec:	e0bffc17 	ldw	r2,-16(fp)
10000ff0:	10c00015 	stw	r3,0(r2)
            kirby->is_left = 0;
10000ff4:	e0bffc17 	ldw	r2,-16(fp)
10000ff8:	10000415 	stw	zero,16(r2)

            // Kirby may walk to air
            if (will_Touch_Ground(kirby, kirby->map) == 0)
10000ffc:	e0bffc17 	ldw	r2,-16(fp)
10001000:	10800217 	ldw	r2,8(r2)
10001004:	100b883a 	mov	r5,r2
10001008:	e13ffc17 	ldw	r4,-16(fp)
1000100c:	00020e80 	call	100020e8 <will_Touch_Ground>
10001010:	1000031e 	bne	r2,zero,10001020 <updateKirby+0x83c>
                kirby->in_air = 1;
10001014:	e0bffc17 	ldw	r2,-16(fp)
10001018:	00c00044 	movi	r3,1
1000101c:	10c00915 	stw	r3,36(r2)

            // state update
            if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
10001020:	e0bffc17 	ldw	r2,-16(fp)
10001024:	10800917 	ldw	r2,36(r2)
10001028:	1000181e 	bne	r2,zero,1000108c <updateKirby+0x8a8>
1000102c:	e0bffc17 	ldw	r2,-16(fp)
10001030:	10800a17 	ldw	r2,40(r2)
10001034:	1000151e 	bne	r2,zero,1000108c <updateKirby+0x8a8>
                kirby->image = 0;
10001038:	e0bffc17 	ldw	r2,-16(fp)
1000103c:	10000315 	stw	zero,12(r2)
                kirby->action = 1;
10001040:	e0bffc17 	ldw	r2,-16(fp)
10001044:	00c00044 	movi	r3,1
10001048:	10c00615 	stw	r3,24(r2)
                if (pre_keycode == keycode)
1000104c:	e0ffff17 	ldw	r3,-4(fp)
10001050:	e0bffe17 	ldw	r2,-8(fp)
10001054:	18800a1e 	bne	r3,r2,10001080 <updateKirby+0x89c>
                    kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
10001058:	e0bffc17 	ldw	r2,-16(fp)
1000105c:	10800717 	ldw	r2,28(r2)
10001060:	10800044 	addi	r2,r2,1
10001064:	01400284 	movi	r5,10
10001068:	1009883a 	mov	r4,r2
1000106c:	0004f240 	call	10004f24 <__modsi3>
10001070:	1007883a 	mov	r3,r2
10001074:	e0bffc17 	ldw	r2,-16(fp)
10001078:	10c00715 	stw	r3,28(r2)

            // state update
            if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
                kirby->image = 0;
                kirby->action = 1;
                if (pre_keycode == keycode)
1000107c:	00008806 	br	100012a0 <updateKirby+0xabc>
                    kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
                else
                    kirby->frame = 0;
10001080:	e0bffc17 	ldw	r2,-16(fp)
10001084:	10000715 	stw	zero,28(r2)

            // state update
            if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
                kirby->image = 0;
                kirby->action = 1;
                if (pre_keycode == keycode)
10001088:	00008506 	br	100012a0 <updateKirby+0xabc>
                    kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
                else
                    kirby->frame = 0;
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
1000108c:	e0bffc17 	ldw	r2,-16(fp)
10001090:	10800917 	ldw	r2,36(r2)
10001094:	10001e1e 	bne	r2,zero,10001110 <updateKirby+0x92c>
10001098:	e0bffc17 	ldw	r2,-16(fp)
1000109c:	10800a17 	ldw	r2,40(r2)
100010a0:	10800058 	cmpnei	r2,r2,1
100010a4:	10001a1e 	bne	r2,zero,10001110 <updateKirby+0x92c>
                kirby->image = 1;
100010a8:	e0bffc17 	ldw	r2,-16(fp)
100010ac:	00c00044 	movi	r3,1
100010b0:	10c00315 	stw	r3,12(r2)
                kirby->action = 1;
100010b4:	e0bffc17 	ldw	r2,-16(fp)
100010b8:	00c00044 	movi	r3,1
100010bc:	10c00615 	stw	r3,24(r2)
                if (pre_keycode == keycode)
100010c0:	e0ffff17 	ldw	r3,-4(fp)
100010c4:	e0bffe17 	ldw	r2,-8(fp)
100010c8:	18800a1e 	bne	r3,r2,100010f4 <updateKirby+0x910>
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
100010cc:	e0bffc17 	ldw	r2,-16(fp)
100010d0:	10800717 	ldw	r2,28(r2)
100010d4:	10800044 	addi	r2,r2,1
100010d8:	01400344 	movi	r5,13
100010dc:	1009883a 	mov	r4,r2
100010e0:	0004f240 	call	10004f24 <__modsi3>
100010e4:	1007883a 	mov	r3,r2
100010e8:	e0bffc17 	ldw	r2,-16(fp)
100010ec:	10c00715 	stw	r3,28(r2)
                else
                    kirby->frame = 0;
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
                kirby->image = 1;
                kirby->action = 1;
                if (pre_keycode == keycode)
100010f0:	00006b06 	br	100012a0 <updateKirby+0xabc>
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope;
100010f4:	e0bffc17 	ldw	r2,-16(fp)
100010f8:	10800817 	ldw	r2,32(r2)
100010fc:	1085883a 	add	r2,r2,r2
10001100:	1007883a 	mov	r3,r2
10001104:	e0bffc17 	ldw	r2,-16(fp)
10001108:	10c00715 	stw	r3,28(r2)
                else
                    kirby->frame = 0;
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
                kirby->image = 1;
                kirby->action = 1;
                if (pre_keycode == keycode)
1000110c:	00006406 	br	100012a0 <updateKirby+0xabc>
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope;
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
10001110:	e0bffc17 	ldw	r2,-16(fp)
10001114:	10800917 	ldw	r2,36(r2)
10001118:	10800058 	cmpnei	r2,r2,1
1000111c:	10002c1e 	bne	r2,zero,100011d0 <updateKirby+0x9ec>
10001120:	e0bffc17 	ldw	r2,-16(fp)
10001124:	10800a17 	ldw	r2,40(r2)
10001128:	1000291e 	bne	r2,zero,100011d0 <updateKirby+0x9ec>
                if (will_Touch_Ground(kirby, kirby->map)) {
1000112c:	e0bffc17 	ldw	r2,-16(fp)
10001130:	10800217 	ldw	r2,8(r2)
10001134:	100b883a 	mov	r5,r2
10001138:	e13ffc17 	ldw	r4,-16(fp)
1000113c:	00020e80 	call	100020e8 <will_Touch_Ground>
10001140:	10001626 	beq	r2,zero,1000119c <updateKirby+0x9b8>
                    kirby->image = 0;
10001144:	e0bffc17 	ldw	r2,-16(fp)
10001148:	10000315 	stw	zero,12(r2)
                    kirby->action = 1;
1000114c:	e0bffc17 	ldw	r2,-16(fp)
10001150:	00c00044 	movi	r3,1
10001154:	10c00615 	stw	r3,24(r2)
                    kirby->in_air = 0;
10001158:	e0bffc17 	ldw	r2,-16(fp)
1000115c:	10000915 	stw	zero,36(r2)
                    kirby->frame = 0;
10001160:	e0bffc17 	ldw	r2,-16(fp)
10001164:	10000715 	stw	zero,28(r2)
                    if (pre_keycode == keycode)
10001168:	e0ffff17 	ldw	r3,-4(fp)
1000116c:	e0bffe17 	ldw	r2,-8(fp)
10001170:	18804a1e 	bne	r3,r2,1000129c <updateKirby+0xab8>
                        kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
10001174:	e0bffc17 	ldw	r2,-16(fp)
10001178:	10800717 	ldw	r2,28(r2)
1000117c:	10800044 	addi	r2,r2,1
10001180:	01400284 	movi	r5,10
10001184:	1009883a 	mov	r4,r2
10001188:	0004f240 	call	10004f24 <__modsi3>
1000118c:	1007883a 	mov	r3,r2
10001190:	e0bffc17 	ldw	r2,-16(fp)
10001194:	10c00715 	stw	r3,28(r2)
                if (pre_keycode == keycode)
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope;
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
10001198:	00004006 	br	1000129c <updateKirby+0xab8>
                    kirby->in_air = 0;
                    kirby->frame = 0;
                    if (pre_keycode == keycode)
                        kirby->frame = (kirby->frame + 1) % KIRBY_NORMAL_WALK_FN;
                } else {
                    kirby->image = 0;
1000119c:	e0bffc17 	ldw	r2,-16(fp)
100011a0:	10000315 	stw	zero,12(r2)
                    kirby->action = 0;
100011a4:	e0bffc17 	ldw	r2,-16(fp)
100011a8:	10000615 	stw	zero,24(r2)
                    kirby->frame = 10;
100011ac:	e0bffc17 	ldw	r2,-16(fp)
100011b0:	00c00284 	movi	r3,10
100011b4:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
100011b8:	e0bffc17 	ldw	r2,-16(fp)
100011bc:	10800117 	ldw	r2,4(r2)
100011c0:	10c000c4 	addi	r3,r2,3
100011c4:	e0bffc17 	ldw	r2,-16(fp)
100011c8:	10c00115 	stw	r3,4(r2)
                if (pre_keycode == keycode)
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope;
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
100011cc:	00003306 	br	1000129c <updateKirby+0xab8>
                    kirby->image = 0;
                    kirby->action = 0;
                    kirby->frame = 10;
                    kirby->y += KIRBY_STEP_Y;
                }
            } else if  ((kirby->in_air == 1) && (kirby->is_inhaled == 1)) {
100011d0:	e0bffc17 	ldw	r2,-16(fp)
100011d4:	10800917 	ldw	r2,36(r2)
100011d8:	10800058 	cmpnei	r2,r2,1
100011dc:	1000301e 	bne	r2,zero,100012a0 <updateKirby+0xabc>
100011e0:	e0bffc17 	ldw	r2,-16(fp)
100011e4:	10800a17 	ldw	r2,40(r2)
100011e8:	10800058 	cmpnei	r2,r2,1
100011ec:	10002c1e 	bne	r2,zero,100012a0 <updateKirby+0xabc>
                if (will_Touch_Ground(kirby, kirby->map)) {
100011f0:	e0bffc17 	ldw	r2,-16(fp)
100011f4:	10800217 	ldw	r2,8(r2)
100011f8:	100b883a 	mov	r5,r2
100011fc:	e13ffc17 	ldw	r4,-16(fp)
10001200:	00020e80 	call	100020e8 <will_Touch_Ground>
10001204:	10001626 	beq	r2,zero,10001260 <updateKirby+0xa7c>
                    kirby->image = 1;
10001208:	e0bffc17 	ldw	r2,-16(fp)
1000120c:	00c00044 	movi	r3,1
10001210:	10c00315 	stw	r3,12(r2)
                    kirby->action = 0;
10001214:	e0bffc17 	ldw	r2,-16(fp)
10001218:	10000615 	stw	zero,24(r2)
                    kirby->in_air = 0;
1000121c:	e0bffc17 	ldw	r2,-16(fp)
10001220:	10000915 	stw	zero,36(r2)
                    kirby->frame = 0;
10001224:	e0bffc17 	ldw	r2,-16(fp)
10001228:	10000715 	stw	zero,28(r2)
                    if (pre_keycode == keycode)
1000122c:	e0ffff17 	ldw	r3,-4(fp)
10001230:	e0bffe17 	ldw	r2,-8(fp)
10001234:	18801a1e 	bne	r3,r2,100012a0 <updateKirby+0xabc>
                        kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
10001238:	e0bffc17 	ldw	r2,-16(fp)
1000123c:	10800717 	ldw	r2,28(r2)
10001240:	10800044 	addi	r2,r2,1
10001244:	01400344 	movi	r5,13
10001248:	1009883a 	mov	r4,r2
1000124c:	0004f240 	call	10004f24 <__modsi3>
10001250:	1007883a 	mov	r3,r2
10001254:	e0bffc17 	ldw	r2,-16(fp)
10001258:	10c00715 	stw	r3,28(r2)
1000125c:	00001006 	br	100012a0 <updateKirby+0xabc>
                } else {
                    kirby->image = 1;
10001260:	e0bffc17 	ldw	r2,-16(fp)
10001264:	00c00044 	movi	r3,1
10001268:	10c00315 	stw	r3,12(r2)
                    kirby->action = 2;
1000126c:	e0bffc17 	ldw	r2,-16(fp)
10001270:	00c00084 	movi	r3,2
10001274:	10c00615 	stw	r3,24(r2)
                    kirby->frame = 13;
10001278:	e0bffc17 	ldw	r2,-16(fp)
1000127c:	00c00344 	movi	r3,13
10001280:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
10001284:	e0bffc17 	ldw	r2,-16(fp)
10001288:	10800117 	ldw	r2,4(r2)
1000128c:	10c000c4 	addi	r3,r2,3
10001290:	e0bffc17 	ldw	r2,-16(fp)
10001294:	10c00115 	stw	r3,4(r2)
10001298:	00000106 	br	100012a0 <updateKirby+0xabc>
                if (pre_keycode == keycode)
                    kirby->frame = (kirby->frame + 1) % KIRBY_INHALED_WALK_FN;
                else
                    kirby->frame = 0 + 2 * kirby->in_slope;
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
1000129c:	0001883a 	nop
                    kirby->action = 2;
                    kirby->frame = 13;
                    kirby->y += KIRBY_STEP_Y;
                }
            }
            frame_Time(KIRBY_FRAME_TIME_WALK);
100012a0:	01019004 	movi	r4,1600
100012a4:	00020500 	call	10002050 <frame_Time>
            break;
100012a8:	00023606 	br	10001b84 <updateKirby+0x13a0>
        }

        case 0x041a:   // "a" & "w"
        case 0x1a04: { // "w" & "a"
            kirby->is_left = 1;
100012ac:	e0bffc17 	ldw	r2,-16(fp)
100012b0:	00c00044 	movi	r3,1
100012b4:	10c00415 	stw	r3,16(r2)
            kirby->in_air = 1;
100012b8:	e0bffc17 	ldw	r2,-16(fp)
100012bc:	00c00044 	movi	r3,1
100012c0:	10c00915 	stw	r3,36(r2)
            kirby->is_inhaled = 1;
100012c4:	e0bffc17 	ldw	r2,-16(fp)
100012c8:	00c00044 	movi	r3,1
100012cc:	10c00a15 	stw	r3,40(r2)
            kirby->image = 1;
100012d0:	e0bffc17 	ldw	r2,-16(fp)
100012d4:	00c00044 	movi	r3,1
100012d8:	10c00315 	stw	r3,12(r2)
            kirby->action = 2;
100012dc:	e0bffc17 	ldw	r2,-16(fp)
100012e0:	00c00084 	movi	r3,2
100012e4:	10c00615 	stw	r3,24(r2)
            if (pre_keycode == keycode)
100012e8:	e0ffff17 	ldw	r3,-4(fp)
100012ec:	e0bffe17 	ldw	r2,-8(fp)
100012f0:	18800a1e 	bne	r3,r2,1000131c <updateKirby+0xb38>
                kirby->frame = 7 + ((kirby->frame - 7) + 1) % KIRBY_INHALED_FLY_FN;
100012f4:	e0bffc17 	ldw	r2,-16(fp)
100012f8:	10800717 	ldw	r2,28(r2)
100012fc:	10bffe84 	addi	r2,r2,-6
10001300:	01400184 	movi	r5,6
10001304:	1009883a 	mov	r4,r2
10001308:	0004f240 	call	10004f24 <__modsi3>
1000130c:	10c001c4 	addi	r3,r2,7
10001310:	e0bffc17 	ldw	r2,-16(fp)
10001314:	10c00715 	stw	r3,28(r2)
10001318:	00000306 	br	10001328 <updateKirby+0xb44>
            else
                kirby->frame = 7;
1000131c:	e0bffc17 	ldw	r2,-16(fp)
10001320:	00c001c4 	movi	r3,7
10001324:	10c00715 	stw	r3,28(r2)
            // TO DO: Maybe need to check whether tough the up walls
            kirby->y -= KIRBY_STEP_Y;
10001328:	e0bffc17 	ldw	r2,-16(fp)
1000132c:	10800117 	ldw	r2,4(r2)
10001330:	10ffff44 	addi	r3,r2,-3
10001334:	e0bffc17 	ldw	r2,-16(fp)
10001338:	10c00115 	stw	r3,4(r2)
            kirby->x -= KIRBY_STEP_X;
1000133c:	e0bffc17 	ldw	r2,-16(fp)
10001340:	10800017 	ldw	r2,0(r2)
10001344:	10ffff44 	addi	r3,r2,-3
10001348:	e0bffc17 	ldw	r2,-16(fp)
1000134c:	10c00015 	stw	r3,0(r2)
            frame_Time(KIRBY_FRAME_TIME_WALK);
10001350:	01019004 	movi	r4,1600
10001354:	00020500 	call	10002050 <frame_Time>
            break;
10001358:	00020a06 	br	10001b84 <updateKirby+0x13a0>
        }

        case 0x071a:   // "d" & "w"
        case 0x1a07:{  // "w" & "d"
            kirby->is_left = 0;
1000135c:	e0bffc17 	ldw	r2,-16(fp)
10001360:	10000415 	stw	zero,16(r2)
            kirby->in_air = 1;
10001364:	e0bffc17 	ldw	r2,-16(fp)
10001368:	00c00044 	movi	r3,1
1000136c:	10c00915 	stw	r3,36(r2)
            kirby->is_inhaled = 1;
10001370:	e0bffc17 	ldw	r2,-16(fp)
10001374:	00c00044 	movi	r3,1
10001378:	10c00a15 	stw	r3,40(r2)
            kirby->image = 1;
1000137c:	e0bffc17 	ldw	r2,-16(fp)
10001380:	00c00044 	movi	r3,1
10001384:	10c00315 	stw	r3,12(r2)
            kirby->action = 2;
10001388:	e0bffc17 	ldw	r2,-16(fp)
1000138c:	00c00084 	movi	r3,2
10001390:	10c00615 	stw	r3,24(r2)
            if (pre_keycode == keycode)
10001394:	e0ffff17 	ldw	r3,-4(fp)
10001398:	e0bffe17 	ldw	r2,-8(fp)
1000139c:	18800a1e 	bne	r3,r2,100013c8 <updateKirby+0xbe4>
                kirby->frame = 7 + ((kirby->frame - 7) + 1) % KIRBY_INHALED_FLY_FN;
100013a0:	e0bffc17 	ldw	r2,-16(fp)
100013a4:	10800717 	ldw	r2,28(r2)
100013a8:	10bffe84 	addi	r2,r2,-6
100013ac:	01400184 	movi	r5,6
100013b0:	1009883a 	mov	r4,r2
100013b4:	0004f240 	call	10004f24 <__modsi3>
100013b8:	10c001c4 	addi	r3,r2,7
100013bc:	e0bffc17 	ldw	r2,-16(fp)
100013c0:	10c00715 	stw	r3,28(r2)
100013c4:	00000306 	br	100013d4 <updateKirby+0xbf0>
            else
                kirby->frame = 7;
100013c8:	e0bffc17 	ldw	r2,-16(fp)
100013cc:	00c001c4 	movi	r3,7
100013d0:	10c00715 	stw	r3,28(r2)
            // TO DO: Maybe need to check whether tough the up walls
            kirby->y -= KIRBY_STEP_Y;
100013d4:	e0bffc17 	ldw	r2,-16(fp)
100013d8:	10800117 	ldw	r2,4(r2)
100013dc:	10ffff44 	addi	r3,r2,-3
100013e0:	e0bffc17 	ldw	r2,-16(fp)
100013e4:	10c00115 	stw	r3,4(r2)
            kirby->x += KIRBY_STEP_X;
100013e8:	e0bffc17 	ldw	r2,-16(fp)
100013ec:	10800017 	ldw	r2,0(r2)
100013f0:	10c000c4 	addi	r3,r2,3
100013f4:	e0bffc17 	ldw	r2,-16(fp)
100013f8:	10c00015 	stw	r3,0(r2)
            frame_Time(KIRBY_FRAME_TIME_WALK);
100013fc:	01019004 	movi	r4,1600
10001400:	00020500 	call	10002050 <frame_Time>
            break;
10001404:	0001df06 	br	10001b84 <updateKirby+0x13a0>
        }
        
        case 0x0016: { //"s" squat
            if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
10001408:	e0bffc17 	ldw	r2,-16(fp)
1000140c:	10800917 	ldw	r2,36(r2)
10001410:	1000231e 	bne	r2,zero,100014a0 <updateKirby+0xcbc>
10001414:	e0bffc17 	ldw	r2,-16(fp)
10001418:	10800a17 	ldw	r2,40(r2)
1000141c:	1000201e 	bne	r2,zero,100014a0 <updateKirby+0xcbc>
                kirby->image = 0;
10001420:	e0bffc17 	ldw	r2,-16(fp)
10001424:	10000315 	stw	zero,12(r2)
                kirby->action = 2;
10001428:	e0bffc17 	ldw	r2,-16(fp)
1000142c:	00c00084 	movi	r3,2
10001430:	10c00615 	stw	r3,24(r2)
                if (pre_keycode == keycode)
10001434:	e0ffff17 	ldw	r3,-4(fp)
10001438:	e0bffe17 	ldw	r2,-8(fp)
1000143c:	1880131e 	bne	r3,r2,1000148c <updateKirby+0xca8>
                    kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
10001440:	e0bffc17 	ldw	r2,-16(fp)
10001444:	10800717 	ldw	r2,28(r2)
10001448:	10c00044 	addi	r3,r2,1
1000144c:	00a00034 	movhi	r2,32768
10001450:	10800044 	addi	r2,r2,1
10001454:	1884703a 	and	r2,r3,r2
10001458:	1000040e 	bge	r2,zero,1000146c <updateKirby+0xc88>
1000145c:	10bfffc4 	addi	r2,r2,-1
10001460:	00ffff84 	movi	r3,-2
10001464:	10c4b03a 	or	r2,r2,r3
10001468:	10800044 	addi	r2,r2,1
1000146c:	1007883a 	mov	r3,r2
10001470:	e0bffc17 	ldw	r2,-16(fp)
10001474:	10800817 	ldw	r2,32(r2)
10001478:	1085883a 	add	r2,r2,r2
1000147c:	1887883a 	add	r3,r3,r2
10001480:	e0bffc17 	ldw	r2,-16(fp)
10001484:	10c00715 	stw	r3,28(r2)
10001488:	00000206 	br	10001494 <updateKirby+0xcb0>
                else
                    kirby->frame = 0;
1000148c:	e0bffc17 	ldw	r2,-16(fp)
10001490:	10000715 	stw	zero,28(r2)
                frame_Time(KIRBY_FRAME_TIME_BLINK);
10001494:	010ea604 	movi	r4,15000
10001498:	00020500 	call	10002050 <frame_Time>
1000149c:	00008706 	br	100016bc <updateKirby+0xed8>
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) { // Gulp
100014a0:	e0bffc17 	ldw	r2,-16(fp)
100014a4:	10800917 	ldw	r2,36(r2)
100014a8:	1000221e 	bne	r2,zero,10001534 <updateKirby+0xd50>
100014ac:	e0bffc17 	ldw	r2,-16(fp)
100014b0:	10800a17 	ldw	r2,40(r2)
100014b4:	10800058 	cmpnei	r2,r2,1
100014b8:	10001e1e 	bne	r2,zero,10001534 <updateKirby+0xd50>
                kirby->image = 1;
100014bc:	e0bffc17 	ldw	r2,-16(fp)
100014c0:	00c00044 	movi	r3,1
100014c4:	10c00315 	stw	r3,12(r2)
                kirby->action = 2;
100014c8:	e0bffc17 	ldw	r2,-16(fp)
100014cc:	00c00084 	movi	r3,2
100014d0:	10c00615 	stw	r3,24(r2)
                kirby->frame = 0;
100014d4:	e0bffc17 	ldw	r2,-16(fp)
100014d8:	10000715 	stw	zero,28(r2)
                for (i = 0; i < KIRBY_GULP_FN; i++) {
100014dc:	e03ffa15 	stw	zero,-24(fp)
100014e0:	00000c06 	br	10001514 <updateKirby+0xd30>
                    upload_Kirby_Info(kirby);
100014e4:	e13ffc17 	ldw	r4,-16(fp)
100014e8:	00006300 	call	10000630 <upload_Kirby_Info>
                    kirby->frame += 1;
100014ec:	e0bffc17 	ldw	r2,-16(fp)
100014f0:	10800717 	ldw	r2,28(r2)
100014f4:	10c00044 	addi	r3,r2,1
100014f8:	e0bffc17 	ldw	r2,-16(fp)
100014fc:	10c00715 	stw	r3,28(r2)
                    frame_Time(KIRBY_FRAME_TIME_GULP);
10001500:	01138804 	movi	r4,20000
10001504:	00020500 	call	10002050 <frame_Time>
                frame_Time(KIRBY_FRAME_TIME_BLINK);
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) { // Gulp
                kirby->image = 1;
                kirby->action = 2;
                kirby->frame = 0;
                for (i = 0; i < KIRBY_GULP_FN; i++) {
10001508:	e0bffa17 	ldw	r2,-24(fp)
1000150c:	10800044 	addi	r2,r2,1
10001510:	e0bffa15 	stw	r2,-24(fp)
10001514:	e0bffa17 	ldw	r2,-24(fp)
10001518:	10800190 	cmplti	r2,r2,6
1000151c:	103ff11e 	bne	r2,zero,100014e4 <__alt_data_end+0xf80014e4>
                    upload_Kirby_Info(kirby);
                    kirby->frame += 1;
                    frame_Time(KIRBY_FRAME_TIME_GULP);
                }
                kirby->is_inhaled = 0;
10001520:	e0bffc17 	ldw	r2,-16(fp)
10001524:	10000a15 	stw	zero,40(r2)
                kirby_Return_Normal(kirby);
10001528:	e13ffc17 	ldw	r4,-16(fp)
1000152c:	000278c0 	call	1000278c <kirby_Return_Normal>
10001530:	00006206 	br	100016bc <updateKirby+0xed8>
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
10001534:	e0bffc17 	ldw	r2,-16(fp)
10001538:	10800917 	ldw	r2,36(r2)
1000153c:	10800058 	cmpnei	r2,r2,1
10001540:	10002d1e 	bne	r2,zero,100015f8 <updateKirby+0xe14>
10001544:	e0bffc17 	ldw	r2,-16(fp)
10001548:	10800a17 	ldw	r2,40(r2)
1000154c:	10002a1e 	bne	r2,zero,100015f8 <updateKirby+0xe14>
                if (will_Touch_Ground(kirby, kirby->map) == 1) {
10001550:	e0bffc17 	ldw	r2,-16(fp)
10001554:	10800217 	ldw	r2,8(r2)
10001558:	100b883a 	mov	r5,r2
1000155c:	e13ffc17 	ldw	r4,-16(fp)
10001560:	00020e80 	call	100020e8 <will_Touch_Ground>
10001564:	10800058 	cmpnei	r2,r2,1
10001568:	1000141e 	bne	r2,zero,100015bc <updateKirby+0xdd8>
                    kirby->in_air = 0;
1000156c:	e0bffc17 	ldw	r2,-16(fp)
10001570:	10000915 	stw	zero,36(r2)
                    force_It_On_Ground(kirby, kirby->map); // It will go to the ground
10001574:	e0bffc17 	ldw	r2,-16(fp)
10001578:	10800217 	ldw	r2,8(r2)
1000157c:	100b883a 	mov	r5,r2
10001580:	e13ffc17 	ldw	r4,-16(fp)
10001584:	0001c380 	call	10001c38 <force_It_On_Ground>
                    kirby->image = 0;
10001588:	e0bffc17 	ldw	r2,-16(fp)
1000158c:	10000315 	stw	zero,12(r2)
                    kirby->action = 0;
10001590:	e0bffc17 	ldw	r2,-16(fp)
10001594:	10000615 	stw	zero,24(r2)
                    kirby->frame = 0 + 2 * kirby->in_slope;
10001598:	e0bffc17 	ldw	r2,-16(fp)
1000159c:	10800817 	ldw	r2,32(r2)
100015a0:	1085883a 	add	r2,r2,r2
100015a4:	1007883a 	mov	r3,r2
100015a8:	e0bffc17 	ldw	r2,-16(fp)
100015ac:	10c00715 	stw	r3,28(r2)
                    frame_Time(KIRBY_FRAME_TIME_BLINK);
100015b0:	010ea604 	movi	r4,15000
100015b4:	00020500 	call	10002050 <frame_Time>
                    frame_Time(KIRBY_FRAME_TIME_GULP);
                }
                kirby->is_inhaled = 0;
                kirby_Return_Normal(kirby);
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map) == 1) {
100015b8:	00004006 	br	100016bc <updateKirby+0xed8>
                    kirby->image = 0;
                    kirby->action = 0;
                    kirby->frame = 0 + 2 * kirby->in_slope;
                    frame_Time(KIRBY_FRAME_TIME_BLINK);
                } else {  // Slowly Drop downwards
                    kirby->image = 0;
100015bc:	e0bffc17 	ldw	r2,-16(fp)
100015c0:	10000315 	stw	zero,12(r2)
                    kirby->action = 0;
100015c4:	e0bffc17 	ldw	r2,-16(fp)
100015c8:	10000615 	stw	zero,24(r2)
                    kirby->frame = 10;
100015cc:	e0bffc17 	ldw	r2,-16(fp)
100015d0:	00c00284 	movi	r3,10
100015d4:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
100015d8:	e0bffc17 	ldw	r2,-16(fp)
100015dc:	10800117 	ldw	r2,4(r2)
100015e0:	10c000c4 	addi	r3,r2,3
100015e4:	e0bffc17 	ldw	r2,-16(fp)
100015e8:	10c00115 	stw	r3,4(r2)
                    frame_Time(KIRBY_FRAME_TIME_WALK);
100015ec:	01019004 	movi	r4,1600
100015f0:	00020500 	call	10002050 <frame_Time>
                    frame_Time(KIRBY_FRAME_TIME_GULP);
                }
                kirby->is_inhaled = 0;
                kirby_Return_Normal(kirby);
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map) == 1) {
100015f4:	00003106 	br	100016bc <updateKirby+0xed8>
                    kirby->action = 0;
                    kirby->frame = 10;
                    kirby->y += KIRBY_STEP_Y;
                    frame_Time(KIRBY_FRAME_TIME_WALK);
                }
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 1)) {
100015f8:	e0bffc17 	ldw	r2,-16(fp)
100015fc:	10800917 	ldw	r2,36(r2)
10001600:	10800058 	cmpnei	r2,r2,1
10001604:	10015c1e 	bne	r2,zero,10001b78 <updateKirby+0x1394>
10001608:	e0bffc17 	ldw	r2,-16(fp)
1000160c:	10800a17 	ldw	r2,40(r2)
10001610:	10800058 	cmpnei	r2,r2,1
10001614:	1001581e 	bne	r2,zero,10001b78 <updateKirby+0x1394>
                if (will_Touch_Ground(kirby, kirby->map) == 1) {
10001618:	e0bffc17 	ldw	r2,-16(fp)
1000161c:	10800217 	ldw	r2,8(r2)
10001620:	100b883a 	mov	r5,r2
10001624:	e13ffc17 	ldw	r4,-16(fp)
10001628:	00020e80 	call	100020e8 <will_Touch_Ground>
1000162c:	10800058 	cmpnei	r2,r2,1
10001630:	1000111e 	bne	r2,zero,10001678 <updateKirby+0xe94>
                    kirby->in_air = 0;
10001634:	e0bffc17 	ldw	r2,-16(fp)
10001638:	10000915 	stw	zero,36(r2)
                    force_It_On_Ground(kirby, kirby->map); // It will go to the ground
1000163c:	e0bffc17 	ldw	r2,-16(fp)
10001640:	10800217 	ldw	r2,8(r2)
10001644:	100b883a 	mov	r5,r2
10001648:	e13ffc17 	ldw	r4,-16(fp)
1000164c:	0001c380 	call	10001c38 <force_It_On_Ground>
                    kirby->image = 1;
10001650:	e0bffc17 	ldw	r2,-16(fp)
10001654:	00c00044 	movi	r3,1
10001658:	10c00315 	stw	r3,12(r2)
                    kirby->action = 0;
1000165c:	e0bffc17 	ldw	r2,-16(fp)
10001660:	10000615 	stw	zero,24(r2)
                    kirby->frame = 0;
10001664:	e0bffc17 	ldw	r2,-16(fp)
10001668:	10000715 	stw	zero,28(r2)
                    frame_Time(KIRBY_FRAME_TIME_BLINK);
1000166c:	010ea604 	movi	r4,15000
10001670:	00020500 	call	10002050 <frame_Time>
                    kirby->frame = 13;
                    kirby->y += KIRBY_STEP_Y;
                    frame_Time(KIRBY_FRAME_TIME_WALK);
                }
            }
            break;
10001674:	00014006 	br	10001b78 <updateKirby+0x1394>
                    kirby->image = 1;
                    kirby->action = 0;
                    kirby->frame = 0;
                    frame_Time(KIRBY_FRAME_TIME_BLINK);
                } else {  // Slowly Drop downwards
                    kirby->image = 1;
10001678:	e0bffc17 	ldw	r2,-16(fp)
1000167c:	00c00044 	movi	r3,1
10001680:	10c00315 	stw	r3,12(r2)
                    kirby->action = 2;
10001684:	e0bffc17 	ldw	r2,-16(fp)
10001688:	00c00084 	movi	r3,2
1000168c:	10c00615 	stw	r3,24(r2)
                    kirby->frame = 13;
10001690:	e0bffc17 	ldw	r2,-16(fp)
10001694:	00c00344 	movi	r3,13
10001698:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
1000169c:	e0bffc17 	ldw	r2,-16(fp)
100016a0:	10800117 	ldw	r2,4(r2)
100016a4:	10c000c4 	addi	r3,r2,3
100016a8:	e0bffc17 	ldw	r2,-16(fp)
100016ac:	10c00115 	stw	r3,4(r2)
                    frame_Time(KIRBY_FRAME_TIME_WALK);
100016b0:	01019004 	movi	r4,1600
100016b4:	00020500 	call	10002050 <frame_Time>
                }
            }
            break;
100016b8:	00012f06 	br	10001b78 <updateKirby+0x1394>
100016bc:	00012e06 	br	10001b78 <updateKirby+0x1394>
        }

        case 0x001a: { //"w" jump
            kirby->in_air = 1;
100016c0:	e0bffc17 	ldw	r2,-16(fp)
100016c4:	00c00044 	movi	r3,1
100016c8:	10c00915 	stw	r3,36(r2)
            kirby->is_inhaled = 1;
100016cc:	e0bffc17 	ldw	r2,-16(fp)
100016d0:	00c00044 	movi	r3,1
100016d4:	10c00a15 	stw	r3,40(r2)
            kirby->image = 1;
100016d8:	e0bffc17 	ldw	r2,-16(fp)
100016dc:	00c00044 	movi	r3,1
100016e0:	10c00315 	stw	r3,12(r2)
            kirby->action = 2;
100016e4:	e0bffc17 	ldw	r2,-16(fp)
100016e8:	00c00084 	movi	r3,2
100016ec:	10c00615 	stw	r3,24(r2)
            if (pre_keycode == keycode) {
100016f0:	e0ffff17 	ldw	r3,-4(fp)
100016f4:	e0bffe17 	ldw	r2,-8(fp)
100016f8:	18800a1e 	bne	r3,r2,10001724 <updateKirby+0xf40>
                kirby->frame = 7 + ((kirby->frame - 7) + 1) % KIRBY_INHALED_FLY_FN;
100016fc:	e0bffc17 	ldw	r2,-16(fp)
10001700:	10800717 	ldw	r2,28(r2)
10001704:	10bffe84 	addi	r2,r2,-6
10001708:	01400184 	movi	r5,6
1000170c:	1009883a 	mov	r4,r2
10001710:	0004f240 	call	10004f24 <__modsi3>
10001714:	10c001c4 	addi	r3,r2,7
10001718:	e0bffc17 	ldw	r2,-16(fp)
1000171c:	10c00715 	stw	r3,28(r2)
10001720:	00000306 	br	10001730 <updateKirby+0xf4c>
            } else {
                kirby->frame = 7;
10001724:	e0bffc17 	ldw	r2,-16(fp)
10001728:	00c001c4 	movi	r3,7
1000172c:	10c00715 	stw	r3,28(r2)
            }
            // TO DO: Maybe need to check whether tough the up walls
            kirby->y -= KIRBY_STEP_Y; // fly upwards
10001730:	e0bffc17 	ldw	r2,-16(fp)
10001734:	10800117 	ldw	r2,4(r2)
10001738:	10ffff44 	addi	r3,r2,-3
1000173c:	e0bffc17 	ldw	r2,-16(fp)
10001740:	10c00115 	stw	r3,4(r2)
            frame_Time(KIRBY_FRAME_TIME_WALK);
10001744:	01019004 	movi	r4,1600
10001748:	00020500 	call	10002050 <frame_Time>
            break;
1000174c:	00010d06 	br	10001b84 <updateKirby+0x13a0>
        }

        case 0x000e: { //"k" Fake B button
            if (kirby->is_inhaled == 0) { // Inhale
10001750:	e0bffc17 	ldw	r2,-16(fp)
10001754:	10800a17 	ldw	r2,40(r2)
10001758:	1000201e 	bne	r2,zero,100017dc <updateKirby+0xff8>
                kirby->inhaling = 1;
1000175c:	e0bffc17 	ldw	r2,-16(fp)
10001760:	00c00044 	movi	r3,1
10001764:	10c00c15 	stw	r3,48(r2)
                kirby->image = 1;
10001768:	e0bffc17 	ldw	r2,-16(fp)
1000176c:	00c00044 	movi	r3,1
10001770:	10c00315 	stw	r3,12(r2)
                kirby->action = 3;
10001774:	e0bffc17 	ldw	r2,-16(fp)
10001778:	00c000c4 	movi	r3,3
1000177c:	10c00615 	stw	r3,24(r2)
                if (1) {// Not get enemy signal
                    if (keycode == pre_keycode)
10001780:	e0fffe17 	ldw	r3,-8(fp)
10001784:	e0bfff17 	ldw	r2,-4(fp)
10001788:	18800f1e 	bne	r3,r2,100017c8 <updateKirby+0xfe4>
                        kirby->frame = (kirby->frame + 1) % 2;
1000178c:	e0bffc17 	ldw	r2,-16(fp)
10001790:	10800717 	ldw	r2,28(r2)
10001794:	10c00044 	addi	r3,r2,1
10001798:	00a00034 	movhi	r2,32768
1000179c:	10800044 	addi	r2,r2,1
100017a0:	1884703a 	and	r2,r3,r2
100017a4:	1000040e 	bge	r2,zero,100017b8 <updateKirby+0xfd4>
100017a8:	10bfffc4 	addi	r2,r2,-1
100017ac:	00ffff84 	movi	r3,-2
100017b0:	10c4b03a 	or	r2,r2,r3
100017b4:	10800044 	addi	r2,r2,1
100017b8:	1007883a 	mov	r3,r2
100017bc:	e0bffc17 	ldw	r2,-16(fp)
100017c0:	10c00715 	stw	r3,28(r2)
100017c4:	00000206 	br	100017d0 <updateKirby+0xfec>
                    else
                        kirby->frame = 0;
100017c8:	e0bffc17 	ldw	r2,-16(fp)
100017cc:	10000715 	stw	zero,28(r2)
                    frame_Time(KIRBY_FRAME_TIME_INHALE * 3);
100017d0:	01177004 	movi	r4,24000
100017d4:	00020500 	call	10002050 <frame_Time>
100017d8:	00000b06 	br	10001808 <updateKirby+0x1024>
                    kirby->image = 1;
                    kirby->action = 3;
                    kirby->frame = 2;
                }
            } else { // Spitting
                kirby->spitting = 1;
100017dc:	e0bffc17 	ldw	r2,-16(fp)
100017e0:	00c00044 	movi	r3,1
100017e4:	10c00d15 	stw	r3,52(r2)
                kirby->image = 1;
100017e8:	e0bffc17 	ldw	r2,-16(fp)
100017ec:	00c00044 	movi	r3,1
100017f0:	10c00315 	stw	r3,12(r2)
                kirby->action = 4;
100017f4:	e0bffc17 	ldw	r2,-16(fp)
100017f8:	00c00104 	movi	r3,4
100017fc:	10c00615 	stw	r3,24(r2)
                kirby->frame = 0;
10001800:	e0bffc17 	ldw	r2,-16(fp)
10001804:	10000715 	stw	zero,28(r2)
            }
            frame_Time(KIRBY_FRAME_TIME_GULP);
10001808:	01138804 	movi	r4,20000
1000180c:	00020500 	call	10002050 <frame_Time>
            break;
10001810:	0000dc06 	br	10001b84 <updateKirby+0x13a0>
            break;
        }

        case 0x160f:
        case 0x0f16: { //"l" & "s"
            if (kirby->is_inhaled == 0) {
10001814:	e0bffc17 	ldw	r2,-16(fp)
10001818:	10800a17 	ldw	r2,40(r2)
1000181c:	1000211e 	bne	r2,zero,100018a4 <updateKirby+0x10c0>
                kirby_Kick_Ass(kirby);
10001820:	e13ffc17 	ldw	r4,-16(fp)
10001824:	00027e80 	call	100027e8 <kirby_Kick_Ass>
            }
            while ((get_keycode_value() == 0x160f) || (get_keycode_value() == 0x0f16)) {
10001828:	00001e06 	br	100018a4 <updateKirby+0x10c0>
                kirby->image = 0;
1000182c:	e0bffc17 	ldw	r2,-16(fp)
10001830:	10000315 	stw	zero,12(r2)
                kirby->action = 2;
10001834:	e0bffc17 	ldw	r2,-16(fp)
10001838:	00c00084 	movi	r3,2
1000183c:	10c00615 	stw	r3,24(r2)
                kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
10001840:	e0bffc17 	ldw	r2,-16(fp)
10001844:	10800717 	ldw	r2,28(r2)
10001848:	10c00044 	addi	r3,r2,1
1000184c:	00a00034 	movhi	r2,32768
10001850:	10800044 	addi	r2,r2,1
10001854:	1884703a 	and	r2,r3,r2
10001858:	1000040e 	bge	r2,zero,1000186c <updateKirby+0x1088>
1000185c:	10bfffc4 	addi	r2,r2,-1
10001860:	00ffff84 	movi	r3,-2
10001864:	10c4b03a 	or	r2,r2,r3
10001868:	10800044 	addi	r2,r2,1
1000186c:	1007883a 	mov	r3,r2
10001870:	e0bffc17 	ldw	r2,-16(fp)
10001874:	10800817 	ldw	r2,32(r2)
10001878:	1085883a 	add	r2,r2,r2
1000187c:	1887883a 	add	r3,r3,r2
10001880:	e0bffc17 	ldw	r2,-16(fp)
10001884:	10c00715 	stw	r3,28(r2)
                upload_Kirby_Info(kirby);
10001888:	e13ffc17 	ldw	r4,-16(fp)
1000188c:	00006300 	call	10000630 <upload_Kirby_Info>
                force_It_On_Ground(kirby, kirby->map);
10001890:	e0bffc17 	ldw	r2,-16(fp)
10001894:	10800217 	ldw	r2,8(r2)
10001898:	100b883a 	mov	r5,r2
1000189c:	e13ffc17 	ldw	r4,-16(fp)
100018a0:	0001c380 	call	10001c38 <force_It_On_Ground>
        case 0x160f:
        case 0x0f16: { //"l" & "s"
            if (kirby->is_inhaled == 0) {
                kirby_Kick_Ass(kirby);
            }
            while ((get_keycode_value() == 0x160f) || (get_keycode_value() == 0x0f16)) {
100018a4:	0004bb80 	call	10004bb8 <get_keycode_value>
100018a8:	108583e0 	cmpeqi	r2,r2,5647
100018ac:	103fdf1e 	bne	r2,zero,1000182c <__alt_data_end+0xf800182c>
100018b0:	0004bb80 	call	10004bb8 <get_keycode_value>
100018b4:	1083c5a0 	cmpeqi	r2,r2,3862
100018b8:	103fdc1e 	bne	r2,zero,1000182c <__alt_data_end+0xf800182c>
                kirby->action = 2;
                kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
                upload_Kirby_Info(kirby);
                force_It_On_Ground(kirby, kirby->map);
            }
            break;
100018bc:	0000b106 	br	10001b84 <updateKirby+0x13a0>
        }

        #ifdef TEST_EDGE
        case 0x0017: // "t" test
            kirby->frame += 1;
100018c0:	e0bffc17 	ldw	r2,-16(fp)
100018c4:	10800717 	ldw	r2,28(r2)
100018c8:	10c00044 	addi	r3,r2,1
100018cc:	e0bffc17 	ldw	r2,-16(fp)
100018d0:	10c00715 	stw	r3,28(r2)
            frame_Time(KIRBY_FRAME_STOP);
100018d4:	010000f4 	movhi	r4,3
100018d8:	21035004 	addi	r4,r4,3392
100018dc:	00020500 	call	10002050 <frame_Time>
            break;
100018e0:	0000a806 	br	10001b84 <updateKirby+0x13a0>
        #endif

        default: { // "" Stand
            if ((kirby->in_air == 0) && (kirby->is_inhaled == 0)) {
100018e4:	e0bffc17 	ldw	r2,-16(fp)
100018e8:	10800917 	ldw	r2,36(r2)
100018ec:	1000261e 	bne	r2,zero,10001988 <updateKirby+0x11a4>
100018f0:	e0bffc17 	ldw	r2,-16(fp)
100018f4:	10800a17 	ldw	r2,40(r2)
100018f8:	1000231e 	bne	r2,zero,10001988 <updateKirby+0x11a4>
                kirby->image = 0;
100018fc:	e0bffc17 	ldw	r2,-16(fp)
10001900:	10000315 	stw	zero,12(r2)
                kirby->action = 0;
10001904:	e0bffc17 	ldw	r2,-16(fp)
10001908:	10000615 	stw	zero,24(r2)
                if (pre_keycode == keycode) {
1000190c:	e0ffff17 	ldw	r3,-4(fp)
10001910:	e0bffe17 	ldw	r2,-8(fp)
10001914:	1880131e 	bne	r3,r2,10001964 <updateKirby+0x1180>
                    kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
10001918:	e0bffc17 	ldw	r2,-16(fp)
1000191c:	10800717 	ldw	r2,28(r2)
10001920:	10c00044 	addi	r3,r2,1
10001924:	00a00034 	movhi	r2,32768
10001928:	10800044 	addi	r2,r2,1
1000192c:	1884703a 	and	r2,r3,r2
10001930:	1000040e 	bge	r2,zero,10001944 <updateKirby+0x1160>
10001934:	10bfffc4 	addi	r2,r2,-1
10001938:	00ffff84 	movi	r3,-2
1000193c:	10c4b03a 	or	r2,r2,r3
10001940:	10800044 	addi	r2,r2,1
10001944:	1007883a 	mov	r3,r2
10001948:	e0bffc17 	ldw	r2,-16(fp)
1000194c:	10800817 	ldw	r2,32(r2)
10001950:	1085883a 	add	r2,r2,r2
10001954:	1887883a 	add	r3,r3,r2
10001958:	e0bffc17 	ldw	r2,-16(fp)
1000195c:	10c00715 	stw	r3,28(r2)
10001960:	00000606 	br	1000197c <updateKirby+0x1198>
                } else {
                    kirby->frame = 0 + 2 * kirby->in_slope;
10001964:	e0bffc17 	ldw	r2,-16(fp)
10001968:	10800817 	ldw	r2,32(r2)
1000196c:	1085883a 	add	r2,r2,r2
10001970:	1007883a 	mov	r3,r2
10001974:	e0bffc17 	ldw	r2,-16(fp)
10001978:	10c00715 	stw	r3,28(r2)
                }
                frame_Time(KIRBY_FRAME_TIME_BLINK);
1000197c:	010ea604 	movi	r4,15000
10001980:	00020500 	call	10002050 <frame_Time>
10001984:	00007706 	br	10001b64 <updateKirby+0x1380>
            } else if ((kirby->in_air == 0) && (kirby->is_inhaled == 1)) {
10001988:	e0bffc17 	ldw	r2,-16(fp)
1000198c:	10800917 	ldw	r2,36(r2)
10001990:	1000281e 	bne	r2,zero,10001a34 <updateKirby+0x1250>
10001994:	e0bffc17 	ldw	r2,-16(fp)
10001998:	10800a17 	ldw	r2,40(r2)
1000199c:	10800058 	cmpnei	r2,r2,1
100019a0:	1000241e 	bne	r2,zero,10001a34 <updateKirby+0x1250>
                kirby->image = 1;
100019a4:	e0bffc17 	ldw	r2,-16(fp)
100019a8:	00c00044 	movi	r3,1
100019ac:	10c00315 	stw	r3,12(r2)
                kirby->action = 0;
100019b0:	e0bffc17 	ldw	r2,-16(fp)
100019b4:	10000615 	stw	zero,24(r2)
                if (pre_keycode == keycode) {
100019b8:	e0ffff17 	ldw	r3,-4(fp)
100019bc:	e0bffe17 	ldw	r2,-8(fp)
100019c0:	1880131e 	bne	r3,r2,10001a10 <updateKirby+0x122c>
                    kirby->frame = (kirby->frame + 1) % KIRBY_STAND_FN + 2 * kirby->in_slope;
100019c4:	e0bffc17 	ldw	r2,-16(fp)
100019c8:	10800717 	ldw	r2,28(r2)
100019cc:	10c00044 	addi	r3,r2,1
100019d0:	00a00034 	movhi	r2,32768
100019d4:	10800044 	addi	r2,r2,1
100019d8:	1884703a 	and	r2,r3,r2
100019dc:	1000040e 	bge	r2,zero,100019f0 <updateKirby+0x120c>
100019e0:	10bfffc4 	addi	r2,r2,-1
100019e4:	00ffff84 	movi	r3,-2
100019e8:	10c4b03a 	or	r2,r2,r3
100019ec:	10800044 	addi	r2,r2,1
100019f0:	1007883a 	mov	r3,r2
100019f4:	e0bffc17 	ldw	r2,-16(fp)
100019f8:	10800817 	ldw	r2,32(r2)
100019fc:	1085883a 	add	r2,r2,r2
10001a00:	1887883a 	add	r3,r3,r2
10001a04:	e0bffc17 	ldw	r2,-16(fp)
10001a08:	10c00715 	stw	r3,28(r2)
10001a0c:	00000606 	br	10001a28 <updateKirby+0x1244>
                } else {
                    kirby->frame = 0 + 2 * kirby->in_slope;
10001a10:	e0bffc17 	ldw	r2,-16(fp)
10001a14:	10800817 	ldw	r2,32(r2)
10001a18:	1085883a 	add	r2,r2,r2
10001a1c:	1007883a 	mov	r3,r2
10001a20:	e0bffc17 	ldw	r2,-16(fp)
10001a24:	10c00715 	stw	r3,28(r2)
                }
                frame_Time(KIRBY_FRAME_TIME_BLINK);
10001a28:	010ea604 	movi	r4,15000
10001a2c:	00020500 	call	10002050 <frame_Time>
10001a30:	00004c06 	br	10001b64 <updateKirby+0x1380>
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
10001a34:	e0bffc17 	ldw	r2,-16(fp)
10001a38:	10800917 	ldw	r2,36(r2)
10001a3c:	10800058 	cmpnei	r2,r2,1
10001a40:	10001f1e 	bne	r2,zero,10001ac0 <updateKirby+0x12dc>
10001a44:	e0bffc17 	ldw	r2,-16(fp)
10001a48:	10800a17 	ldw	r2,40(r2)
10001a4c:	10001c1e 	bne	r2,zero,10001ac0 <updateKirby+0x12dc>
                if (will_Touch_Ground(kirby, kirby->map)) {
10001a50:	e0bffc17 	ldw	r2,-16(fp)
10001a54:	10800217 	ldw	r2,8(r2)
10001a58:	100b883a 	mov	r5,r2
10001a5c:	e13ffc17 	ldw	r4,-16(fp)
10001a60:	00020e80 	call	100020e8 <will_Touch_Ground>
10001a64:	10000726 	beq	r2,zero,10001a84 <updateKirby+0x12a0>
                    kirby->image = 0;
10001a68:	e0bffc17 	ldw	r2,-16(fp)
10001a6c:	10000315 	stw	zero,12(r2)
                    kirby->action = 0;
10001a70:	e0bffc17 	ldw	r2,-16(fp)
10001a74:	10000615 	stw	zero,24(r2)
                    kirby->in_air = 0;
10001a78:	e0bffc17 	ldw	r2,-16(fp)
10001a7c:	10000915 	stw	zero,36(r2)
                } else {
                    kirby->frame = 0 + 2 * kirby->in_slope;
                }
                frame_Time(KIRBY_FRAME_TIME_BLINK);
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
10001a80:	00003806 	br	10001b64 <updateKirby+0x1380>
                    kirby->image = 0;
                    kirby->action = 0;
                    kirby->in_air = 0;
                } else {
                    kirby->image = 0;
10001a84:	e0bffc17 	ldw	r2,-16(fp)
10001a88:	10000315 	stw	zero,12(r2)
                    kirby->action = 0;
10001a8c:	e0bffc17 	ldw	r2,-16(fp)
10001a90:	10000615 	stw	zero,24(r2)
                    kirby->frame = 10;
10001a94:	e0bffc17 	ldw	r2,-16(fp)
10001a98:	00c00284 	movi	r3,10
10001a9c:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
10001aa0:	e0bffc17 	ldw	r2,-16(fp)
10001aa4:	10800117 	ldw	r2,4(r2)
10001aa8:	10c000c4 	addi	r3,r2,3
10001aac:	e0bffc17 	ldw	r2,-16(fp)
10001ab0:	10c00115 	stw	r3,4(r2)
                    frame_Time(KIRBY_FRAME_TIME_WALK);
10001ab4:	01019004 	movi	r4,1600
10001ab8:	00020500 	call	10002050 <frame_Time>
                } else {
                    kirby->frame = 0 + 2 * kirby->in_slope;
                }
                frame_Time(KIRBY_FRAME_TIME_BLINK);
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 0)) {
                if (will_Touch_Ground(kirby, kirby->map)) {
10001abc:	00002906 	br	10001b64 <updateKirby+0x1380>
                    kirby->action = 0;
                    kirby->frame = 10;
                    kirby->y += KIRBY_STEP_Y;
                    frame_Time(KIRBY_FRAME_TIME_WALK);
                }
            } else if ((kirby->in_air == 1) && (kirby->is_inhaled == 1)) {
10001ac0:	e0bffc17 	ldw	r2,-16(fp)
10001ac4:	10800917 	ldw	r2,36(r2)
10001ac8:	10800058 	cmpnei	r2,r2,1
10001acc:	10002c1e 	bne	r2,zero,10001b80 <updateKirby+0x139c>
10001ad0:	e0bffc17 	ldw	r2,-16(fp)
10001ad4:	10800a17 	ldw	r2,40(r2)
10001ad8:	10800058 	cmpnei	r2,r2,1
10001adc:	1000281e 	bne	r2,zero,10001b80 <updateKirby+0x139c>
                if (will_Touch_Ground(kirby, kirby->map)) {
10001ae0:	e0bffc17 	ldw	r2,-16(fp)
10001ae4:	10800217 	ldw	r2,8(r2)
10001ae8:	100b883a 	mov	r5,r2
10001aec:	e13ffc17 	ldw	r4,-16(fp)
10001af0:	00020e80 	call	100020e8 <will_Touch_Ground>
10001af4:	10000a26 	beq	r2,zero,10001b20 <updateKirby+0x133c>
                    kirby->image = 1;
10001af8:	e0bffc17 	ldw	r2,-16(fp)
10001afc:	00c00044 	movi	r3,1
10001b00:	10c00315 	stw	r3,12(r2)
                    kirby->action = 0;
10001b04:	e0bffc17 	ldw	r2,-16(fp)
10001b08:	10000615 	stw	zero,24(r2)
                    kirby->in_air = 0;
10001b0c:	e0bffc17 	ldw	r2,-16(fp)
10001b10:	10000915 	stw	zero,36(r2)
                    kirby->frame = 0;
10001b14:	e0bffc17 	ldw	r2,-16(fp)
10001b18:	10000715 	stw	zero,28(r2)
                    kirby->frame = 13;
                    kirby->y += KIRBY_STEP_Y;
                    frame_Time(KIRBY_FRAME_TIME_WALK);
                }
            }
            break;
10001b1c:	00001806 	br	10001b80 <updateKirby+0x139c>
                    kirby->image = 1;
                    kirby->action = 0;
                    kirby->in_air = 0;
                    kirby->frame = 0;
                } else {
                    kirby->image = 1;
10001b20:	e0bffc17 	ldw	r2,-16(fp)
10001b24:	00c00044 	movi	r3,1
10001b28:	10c00315 	stw	r3,12(r2)
                    kirby->action = 2;
10001b2c:	e0bffc17 	ldw	r2,-16(fp)
10001b30:	00c00084 	movi	r3,2
10001b34:	10c00615 	stw	r3,24(r2)
                    kirby->frame = 13;
10001b38:	e0bffc17 	ldw	r2,-16(fp)
10001b3c:	00c00344 	movi	r3,13
10001b40:	10c00715 	stw	r3,28(r2)
                    kirby->y += KIRBY_STEP_Y;
10001b44:	e0bffc17 	ldw	r2,-16(fp)
10001b48:	10800117 	ldw	r2,4(r2)
10001b4c:	10c000c4 	addi	r3,r2,3
10001b50:	e0bffc17 	ldw	r2,-16(fp)
10001b54:	10c00115 	stw	r3,4(r2)
                    frame_Time(KIRBY_FRAME_TIME_WALK);
10001b58:	01019004 	movi	r4,1600
10001b5c:	00020500 	call	10002050 <frame_Time>
                }
            }
            break;
10001b60:	00000706 	br	10001b80 <updateKirby+0x139c>
10001b64:	00000606 	br	10001b80 <updateKirby+0x139c>
            break;
        }

        case 0x000f: { //"l" Fake A button
                // Jump
            break;
10001b68:	0001883a 	nop
10001b6c:	00000506 	br	10001b84 <updateKirby+0x13a0>
                    kirby->frame = 13;
                    kirby->y += KIRBY_STEP_Y;
                    frame_Time(KIRBY_FRAME_TIME_WALK);
                }
            }
            break;
10001b70:	0001883a 	nop
10001b74:	00000306 	br	10001b84 <updateKirby+0x13a0>
                    kirby->frame = 13;
                    kirby->y += KIRBY_STEP_Y;
                    frame_Time(KIRBY_FRAME_TIME_WALK);
                }
            }
            break;
10001b78:	0001883a 	nop
10001b7c:	00000106 	br	10001b84 <updateKirby+0x13a0>
                    kirby->frame = 13;
                    kirby->y += KIRBY_STEP_Y;
                    frame_Time(KIRBY_FRAME_TIME_WALK);
                }
            }
            break;
10001b80:	0001883a 	nop
        }
    }
    
    /* Position adjustment */
    // 1-Make sure Kirby not extending the map edges
    if (kirby->x <= 0) {
10001b84:	e0bffc17 	ldw	r2,-16(fp)
10001b88:	10800017 	ldw	r2,0(r2)
10001b8c:	00800316 	blt	zero,r2,10001b9c <updateKirby+0x13b8>
        kirby->x = 0;
10001b90:	e0bffc17 	ldw	r2,-16(fp)
10001b94:	10000015 	stw	zero,0(r2)
10001b98:	00000706 	br	10001bb8 <updateKirby+0x13d4>
    } else if (kirby->x >= map_width) {
10001b9c:	e0bffc17 	ldw	r2,-16(fp)
10001ba0:	10c00017 	ldw	r3,0(r2)
10001ba4:	e0bffb17 	ldw	r2,-20(fp)
10001ba8:	18800316 	blt	r3,r2,10001bb8 <updateKirby+0x13d4>
        kirby->x = map_width;
10001bac:	e0bffc17 	ldw	r2,-16(fp)
10001bb0:	e0fffb17 	ldw	r3,-20(fp)
10001bb4:	10c00015 	stw	r3,0(r2)
    }
    if (kirby->y <= 0) {
10001bb8:	e0bffc17 	ldw	r2,-16(fp)
10001bbc:	10800117 	ldw	r2,4(r2)
10001bc0:	00800316 	blt	zero,r2,10001bd0 <updateKirby+0x13ec>
        kirby->y = 0;
10001bc4:	e0bffc17 	ldw	r2,-16(fp)
10001bc8:	10000115 	stw	zero,4(r2)
10001bcc:	00000706 	br	10001bec <updateKirby+0x1408>
    } else if (kirby->y >= MAP_HEIGHT) {
10001bd0:	e0bffc17 	ldw	r2,-16(fp)
10001bd4:	10800117 	ldw	r2,4(r2)
10001bd8:	10802c10 	cmplti	r2,r2,176
10001bdc:	1000031e 	bne	r2,zero,10001bec <updateKirby+0x1408>
        kirby->y = MAP_HEIGHT;
10001be0:	e0bffc17 	ldw	r2,-16(fp)
10001be4:	00c02c04 	movi	r3,176
10001be8:	10c00115 	stw	r3,4(r2)
    }
    
    // 2-Floor detection for kirby on the ground
    if (kirby->in_air == 0) {
10001bec:	e0bffc17 	ldw	r2,-16(fp)
10001bf0:	10800917 	ldw	r2,36(r2)
10001bf4:	1000051e 	bne	r2,zero,10001c0c <updateKirby+0x1428>
        force_It_On_Ground(kirby, kirby->map);
10001bf8:	e0bffc17 	ldw	r2,-16(fp)
10001bfc:	10800217 	ldw	r2,8(r2)
10001c00:	100b883a 	mov	r5,r2
10001c04:	e13ffc17 	ldw	r4,-16(fp)
10001c08:	0001c380 	call	10001c38 <force_It_On_Ground>
    }
    // 3-Make sure Kirby do not go inside white area
    force_It_Inside_Map(kirby, kirby->map);
10001c0c:	e0bffc17 	ldw	r2,-16(fp)
10001c10:	10800217 	ldw	r2,8(r2)
10001c14:	100b883a 	mov	r5,r2
10001c18:	e13ffc17 	ldw	r4,-16(fp)
10001c1c:	0001ce00 	call	10001ce0 <force_It_Inside_Map>
}
10001c20:	0001883a 	nop
10001c24:	e037883a 	mov	sp,fp
10001c28:	dfc00117 	ldw	ra,4(sp)
10001c2c:	df000017 	ldw	fp,0(sp)
10001c30:	dec00204 	addi	sp,sp,8
10001c34:	f800283a 	ret

10001c38 <force_It_On_Ground>:


void force_It_On_Ground(Kirby * kirby, int map_idx) {
10001c38:	defff904 	addi	sp,sp,-28
10001c3c:	dfc00615 	stw	ra,24(sp)
10001c40:	df000515 	stw	fp,20(sp)
10001c44:	df000504 	addi	fp,sp,20
10001c48:	e13ffe15 	stw	r4,-8(fp)
10001c4c:	e17fff15 	stw	r5,-4(fp)
    int kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
10001c50:	e13ffe17 	ldw	r4,-8(fp)
10001c54:	00021600 	call	10002160 <get_Kirby_Botton_Pos>
10001c58:	1004d43a 	srli	r2,r2,16
10001c5c:	e0bffb15 	stw	r2,-20(fp)
    int kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
10001c60:	e13ffe17 	ldw	r4,-8(fp)
10001c64:	00021600 	call	10002160 <get_Kirby_Botton_Pos>
10001c68:	10bfffcc 	andi	r2,r2,65535
10001c6c:	e0bffc15 	stw	r2,-16(fp)
    // int kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
    // int kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;

    // Cling to the ground
    while (get_Wall_Info(kirby_botton_X, kirby_botton_Y + 1, map_idx) == AREA_CAN_GO) {
10001c70:	00000e06 	br	10001cac <force_It_On_Ground+0x74>
        int dropping_keycode = 0;
10001c74:	e03ffd15 	stw	zero,-12(fp)
        kirby->y += 1;
10001c78:	e0bffe17 	ldw	r2,-8(fp)
10001c7c:	10800117 	ldw	r2,4(r2)
10001c80:	10c00044 	addi	r3,r2,1
10001c84:	e0bffe17 	ldw	r2,-8(fp)
10001c88:	10c00115 	stw	r3,4(r2)
        // }
        // upload_Kirby_Info(kirby);
        // frame_Time(KIRBY_FRAME_TIME_DROP);

        // Update values
        kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
10001c8c:	e13ffe17 	ldw	r4,-8(fp)
10001c90:	00021600 	call	10002160 <get_Kirby_Botton_Pos>
10001c94:	1004d43a 	srli	r2,r2,16
10001c98:	e0bffb15 	stw	r2,-20(fp)
        kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
10001c9c:	e13ffe17 	ldw	r4,-8(fp)
10001ca0:	00021600 	call	10002160 <get_Kirby_Botton_Pos>
10001ca4:	10bfffcc 	andi	r2,r2,65535
10001ca8:	e0bffc15 	stw	r2,-16(fp)
    int kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
    // int kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
    // int kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;

    // Cling to the ground
    while (get_Wall_Info(kirby_botton_X, kirby_botton_Y + 1, map_idx) == AREA_CAN_GO) {
10001cac:	e0bffc17 	ldw	r2,-16(fp)
10001cb0:	10800044 	addi	r2,r2,1
10001cb4:	e1bfff17 	ldw	r6,-4(fp)
10001cb8:	100b883a 	mov	r5,r2
10001cbc:	e13ffb17 	ldw	r4,-20(fp)
10001cc0:	00025700 	call	10002570 <get_Wall_Info>
10001cc4:	103feb26 	beq	r2,zero,10001c74 <__alt_data_end+0xf8001c74>

        // Update values
        kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
    }
}
10001cc8:	0001883a 	nop
10001ccc:	e037883a 	mov	sp,fp
10001cd0:	dfc00117 	ldw	ra,4(sp)
10001cd4:	df000017 	ldw	fp,0(sp)
10001cd8:	dec00204 	addi	sp,sp,8
10001cdc:	f800283a 	ret

10001ce0 <force_It_Inside_Map>:

void force_It_Inside_Map(Kirby * kirby, int map_idx) {
10001ce0:	defff404 	addi	sp,sp,-48
10001ce4:	dfc00b15 	stw	ra,44(sp)
10001ce8:	df000a15 	stw	fp,40(sp)
10001cec:	df000a04 	addi	fp,sp,40
10001cf0:	e13ffe15 	stw	r4,-8(fp)
10001cf4:	e17fff15 	stw	r5,-4(fp)
    int kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
10001cf8:	e13ffe17 	ldw	r4,-8(fp)
10001cfc:	00021600 	call	10002160 <get_Kirby_Botton_Pos>
10001d00:	1004d43a 	srli	r2,r2,16
10001d04:	e0bff615 	stw	r2,-40(fp)
    int kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
10001d08:	e13ffe17 	ldw	r4,-8(fp)
10001d0c:	00021600 	call	10002160 <get_Kirby_Botton_Pos>
10001d10:	10bfffcc 	andi	r2,r2,65535
10001d14:	e0bff715 	stw	r2,-36(fp)
    int kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
10001d18:	e13ffe17 	ldw	r4,-8(fp)
10001d1c:	00022640 	call	10002264 <get_Kirby_Ceil_Pos>
10001d20:	1004d43a 	srli	r2,r2,16
10001d24:	e0bff815 	stw	r2,-32(fp)
    int kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;
10001d28:	e13ffe17 	ldw	r4,-8(fp)
10001d2c:	00022640 	call	10002264 <get_Kirby_Ceil_Pos>
10001d30:	10bfffcc 	andi	r2,r2,65535
10001d34:	e0bff915 	stw	r2,-28(fp)
    int kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
10001d38:	e13ffe17 	ldw	r4,-8(fp)
10001d3c:	00023680 	call	10002368 <get_Kirby_Left_Pos>
10001d40:	1004d43a 	srli	r2,r2,16
10001d44:	e0bffa15 	stw	r2,-24(fp)
    int kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
10001d48:	e13ffe17 	ldw	r4,-8(fp)
10001d4c:	00023680 	call	10002368 <get_Kirby_Left_Pos>
10001d50:	10bfffcc 	andi	r2,r2,65535
10001d54:	e0bffb15 	stw	r2,-20(fp)
    int kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
10001d58:	e13ffe17 	ldw	r4,-8(fp)
10001d5c:	000246c0 	call	1000246c <get_Kirby_Right_Pos>
10001d60:	1004d43a 	srli	r2,r2,16
10001d64:	e0bffc15 	stw	r2,-16(fp)
    int kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
10001d68:	e13ffe17 	ldw	r4,-8(fp)
10001d6c:	000246c0 	call	1000246c <get_Kirby_Right_Pos>
10001d70:	10bfffcc 	andi	r2,r2,65535
10001d74:	e0bffd15 	stw	r2,-12(fp)

    while (get_Wall_Info(kirby_botton_X, kirby_botton_Y, map_idx) == AREA_CANNOT_GO)
10001d78:	00002506 	br	10001e10 <force_It_Inside_Map+0x130>
    {
        kirby->y -= 1;
10001d7c:	e0bffe17 	ldw	r2,-8(fp)
10001d80:	10800117 	ldw	r2,4(r2)
10001d84:	10ffffc4 	addi	r3,r2,-1
10001d88:	e0bffe17 	ldw	r2,-8(fp)
10001d8c:	10c00115 	stw	r3,4(r2)
        kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
10001d90:	e13ffe17 	ldw	r4,-8(fp)
10001d94:	00021600 	call	10002160 <get_Kirby_Botton_Pos>
10001d98:	1004d43a 	srli	r2,r2,16
10001d9c:	e0bff615 	stw	r2,-40(fp)
        kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
10001da0:	e13ffe17 	ldw	r4,-8(fp)
10001da4:	00021600 	call	10002160 <get_Kirby_Botton_Pos>
10001da8:	10bfffcc 	andi	r2,r2,65535
10001dac:	e0bff715 	stw	r2,-36(fp)
        kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
10001db0:	e13ffe17 	ldw	r4,-8(fp)
10001db4:	00022640 	call	10002264 <get_Kirby_Ceil_Pos>
10001db8:	1004d43a 	srli	r2,r2,16
10001dbc:	e0bff815 	stw	r2,-32(fp)
        kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;
10001dc0:	e13ffe17 	ldw	r4,-8(fp)
10001dc4:	00022640 	call	10002264 <get_Kirby_Ceil_Pos>
10001dc8:	10bfffcc 	andi	r2,r2,65535
10001dcc:	e0bff915 	stw	r2,-28(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
10001dd0:	e13ffe17 	ldw	r4,-8(fp)
10001dd4:	00023680 	call	10002368 <get_Kirby_Left_Pos>
10001dd8:	1004d43a 	srli	r2,r2,16
10001ddc:	e0bffa15 	stw	r2,-24(fp)
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
10001de0:	e13ffe17 	ldw	r4,-8(fp)
10001de4:	00023680 	call	10002368 <get_Kirby_Left_Pos>
10001de8:	10bfffcc 	andi	r2,r2,65535
10001dec:	e0bffb15 	stw	r2,-20(fp)
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
10001df0:	e13ffe17 	ldw	r4,-8(fp)
10001df4:	000246c0 	call	1000246c <get_Kirby_Right_Pos>
10001df8:	1004d43a 	srli	r2,r2,16
10001dfc:	e0bffc15 	stw	r2,-16(fp)
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
10001e00:	e13ffe17 	ldw	r4,-8(fp)
10001e04:	000246c0 	call	1000246c <get_Kirby_Right_Pos>
10001e08:	10bfffcc 	andi	r2,r2,65535
10001e0c:	e0bffd15 	stw	r2,-12(fp)
    int kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
    int kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
    int kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
    int kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;

    while (get_Wall_Info(kirby_botton_X, kirby_botton_Y, map_idx) == AREA_CANNOT_GO)
10001e10:	e1bfff17 	ldw	r6,-4(fp)
10001e14:	e17ff717 	ldw	r5,-36(fp)
10001e18:	e13ff617 	ldw	r4,-40(fp)
10001e1c:	00025700 	call	10002570 <get_Wall_Info>
10001e20:	10800060 	cmpeqi	r2,r2,1
10001e24:	103fd51e 	bne	r2,zero,10001d7c <__alt_data_end+0xf8001d7c>
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
    while (get_Wall_Info(kirby_left_X, kirby_left_Y, map_idx) == AREA_CANNOT_GO)
10001e28:	00002506 	br	10001ec0 <force_It_Inside_Map+0x1e0>
    {
        kirby->x += 1;
10001e2c:	e0bffe17 	ldw	r2,-8(fp)
10001e30:	10800017 	ldw	r2,0(r2)
10001e34:	10c00044 	addi	r3,r2,1
10001e38:	e0bffe17 	ldw	r2,-8(fp)
10001e3c:	10c00015 	stw	r3,0(r2)
        kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
10001e40:	e13ffe17 	ldw	r4,-8(fp)
10001e44:	00021600 	call	10002160 <get_Kirby_Botton_Pos>
10001e48:	1004d43a 	srli	r2,r2,16
10001e4c:	e0bff615 	stw	r2,-40(fp)
        kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
10001e50:	e13ffe17 	ldw	r4,-8(fp)
10001e54:	00021600 	call	10002160 <get_Kirby_Botton_Pos>
10001e58:	10bfffcc 	andi	r2,r2,65535
10001e5c:	e0bff715 	stw	r2,-36(fp)
        kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
10001e60:	e13ffe17 	ldw	r4,-8(fp)
10001e64:	00022640 	call	10002264 <get_Kirby_Ceil_Pos>
10001e68:	1004d43a 	srli	r2,r2,16
10001e6c:	e0bff815 	stw	r2,-32(fp)
        kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;
10001e70:	e13ffe17 	ldw	r4,-8(fp)
10001e74:	00022640 	call	10002264 <get_Kirby_Ceil_Pos>
10001e78:	10bfffcc 	andi	r2,r2,65535
10001e7c:	e0bff915 	stw	r2,-28(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
10001e80:	e13ffe17 	ldw	r4,-8(fp)
10001e84:	00023680 	call	10002368 <get_Kirby_Left_Pos>
10001e88:	1004d43a 	srli	r2,r2,16
10001e8c:	e0bffa15 	stw	r2,-24(fp)
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
10001e90:	e13ffe17 	ldw	r4,-8(fp)
10001e94:	00023680 	call	10002368 <get_Kirby_Left_Pos>
10001e98:	10bfffcc 	andi	r2,r2,65535
10001e9c:	e0bffb15 	stw	r2,-20(fp)
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
10001ea0:	e13ffe17 	ldw	r4,-8(fp)
10001ea4:	000246c0 	call	1000246c <get_Kirby_Right_Pos>
10001ea8:	1004d43a 	srli	r2,r2,16
10001eac:	e0bffc15 	stw	r2,-16(fp)
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
10001eb0:	e13ffe17 	ldw	r4,-8(fp)
10001eb4:	000246c0 	call	1000246c <get_Kirby_Right_Pos>
10001eb8:	10bfffcc 	andi	r2,r2,65535
10001ebc:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
    while (get_Wall_Info(kirby_left_X, kirby_left_Y, map_idx) == AREA_CANNOT_GO)
10001ec0:	e1bfff17 	ldw	r6,-4(fp)
10001ec4:	e17ffb17 	ldw	r5,-20(fp)
10001ec8:	e13ffa17 	ldw	r4,-24(fp)
10001ecc:	00025700 	call	10002570 <get_Wall_Info>
10001ed0:	10800060 	cmpeqi	r2,r2,1
10001ed4:	103fd51e 	bne	r2,zero,10001e2c <__alt_data_end+0xf8001e2c>
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
    while (get_Wall_Info(kirby_ceil_X, kirby_ceil_Y, map_idx) == AREA_CANNOT_GO)
10001ed8:	00002506 	br	10001f70 <force_It_Inside_Map+0x290>
    {
        kirby->y += 1;
10001edc:	e0bffe17 	ldw	r2,-8(fp)
10001ee0:	10800117 	ldw	r2,4(r2)
10001ee4:	10c00044 	addi	r3,r2,1
10001ee8:	e0bffe17 	ldw	r2,-8(fp)
10001eec:	10c00115 	stw	r3,4(r2)
        kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
10001ef0:	e13ffe17 	ldw	r4,-8(fp)
10001ef4:	00021600 	call	10002160 <get_Kirby_Botton_Pos>
10001ef8:	1004d43a 	srli	r2,r2,16
10001efc:	e0bff615 	stw	r2,-40(fp)
        kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
10001f00:	e13ffe17 	ldw	r4,-8(fp)
10001f04:	00021600 	call	10002160 <get_Kirby_Botton_Pos>
10001f08:	10bfffcc 	andi	r2,r2,65535
10001f0c:	e0bff715 	stw	r2,-36(fp)
        kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
10001f10:	e13ffe17 	ldw	r4,-8(fp)
10001f14:	00022640 	call	10002264 <get_Kirby_Ceil_Pos>
10001f18:	1004d43a 	srli	r2,r2,16
10001f1c:	e0bff815 	stw	r2,-32(fp)
        kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;
10001f20:	e13ffe17 	ldw	r4,-8(fp)
10001f24:	00022640 	call	10002264 <get_Kirby_Ceil_Pos>
10001f28:	10bfffcc 	andi	r2,r2,65535
10001f2c:	e0bff915 	stw	r2,-28(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
10001f30:	e13ffe17 	ldw	r4,-8(fp)
10001f34:	00023680 	call	10002368 <get_Kirby_Left_Pos>
10001f38:	1004d43a 	srli	r2,r2,16
10001f3c:	e0bffa15 	stw	r2,-24(fp)
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
10001f40:	e13ffe17 	ldw	r4,-8(fp)
10001f44:	00023680 	call	10002368 <get_Kirby_Left_Pos>
10001f48:	10bfffcc 	andi	r2,r2,65535
10001f4c:	e0bffb15 	stw	r2,-20(fp)
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
10001f50:	e13ffe17 	ldw	r4,-8(fp)
10001f54:	000246c0 	call	1000246c <get_Kirby_Right_Pos>
10001f58:	1004d43a 	srli	r2,r2,16
10001f5c:	e0bffc15 	stw	r2,-16(fp)
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
10001f60:	e13ffe17 	ldw	r4,-8(fp)
10001f64:	000246c0 	call	1000246c <get_Kirby_Right_Pos>
10001f68:	10bfffcc 	andi	r2,r2,65535
10001f6c:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
    while (get_Wall_Info(kirby_ceil_X, kirby_ceil_Y, map_idx) == AREA_CANNOT_GO)
10001f70:	e1bfff17 	ldw	r6,-4(fp)
10001f74:	e17ff917 	ldw	r5,-28(fp)
10001f78:	e13ff817 	ldw	r4,-32(fp)
10001f7c:	00025700 	call	10002570 <get_Wall_Info>
10001f80:	10800060 	cmpeqi	r2,r2,1
10001f84:	103fd51e 	bne	r2,zero,10001edc <__alt_data_end+0xf8001edc>
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
    while (get_Wall_Info(kirby_right_X, kirby_right_Y, map_idx) == AREA_CANNOT_GO)
10001f88:	00002506 	br	10002020 <force_It_Inside_Map+0x340>
    {
        kirby->x -= 1;
10001f8c:	e0bffe17 	ldw	r2,-8(fp)
10001f90:	10800017 	ldw	r2,0(r2)
10001f94:	10ffffc4 	addi	r3,r2,-1
10001f98:	e0bffe17 	ldw	r2,-8(fp)
10001f9c:	10c00015 	stw	r3,0(r2)
        kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
10001fa0:	e13ffe17 	ldw	r4,-8(fp)
10001fa4:	00021600 	call	10002160 <get_Kirby_Botton_Pos>
10001fa8:	1004d43a 	srli	r2,r2,16
10001fac:	e0bff615 	stw	r2,-40(fp)
        kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
10001fb0:	e13ffe17 	ldw	r4,-8(fp)
10001fb4:	00021600 	call	10002160 <get_Kirby_Botton_Pos>
10001fb8:	10bfffcc 	andi	r2,r2,65535
10001fbc:	e0bff715 	stw	r2,-36(fp)
        kirby_ceil_X = (get_Kirby_Ceil_Pos(kirby) >> 16) & 0x0000ffff;
10001fc0:	e13ffe17 	ldw	r4,-8(fp)
10001fc4:	00022640 	call	10002264 <get_Kirby_Ceil_Pos>
10001fc8:	1004d43a 	srli	r2,r2,16
10001fcc:	e0bff815 	stw	r2,-32(fp)
        kirby_ceil_Y = get_Kirby_Ceil_Pos(kirby) & 0x0000ffff;
10001fd0:	e13ffe17 	ldw	r4,-8(fp)
10001fd4:	00022640 	call	10002264 <get_Kirby_Ceil_Pos>
10001fd8:	10bfffcc 	andi	r2,r2,65535
10001fdc:	e0bff915 	stw	r2,-28(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
10001fe0:	e13ffe17 	ldw	r4,-8(fp)
10001fe4:	00023680 	call	10002368 <get_Kirby_Left_Pos>
10001fe8:	1004d43a 	srli	r2,r2,16
10001fec:	e0bffa15 	stw	r2,-24(fp)
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
10001ff0:	e13ffe17 	ldw	r4,-8(fp)
10001ff4:	00023680 	call	10002368 <get_Kirby_Left_Pos>
10001ff8:	10bfffcc 	andi	r2,r2,65535
10001ffc:	e0bffb15 	stw	r2,-20(fp)
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
10002000:	e13ffe17 	ldw	r4,-8(fp)
10002004:	000246c0 	call	1000246c <get_Kirby_Right_Pos>
10002008:	1004d43a 	srli	r2,r2,16
1000200c:	e0bffc15 	stw	r2,-16(fp)
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
10002010:	e13ffe17 	ldw	r4,-8(fp)
10002014:	000246c0 	call	1000246c <get_Kirby_Right_Pos>
10002018:	10bfffcc 	andi	r2,r2,65535
1000201c:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
    while (get_Wall_Info(kirby_right_X, kirby_right_Y, map_idx) == AREA_CANNOT_GO)
10002020:	e1bfff17 	ldw	r6,-4(fp)
10002024:	e17ffd17 	ldw	r5,-12(fp)
10002028:	e13ffc17 	ldw	r4,-16(fp)
1000202c:	00025700 	call	10002570 <get_Wall_Info>
10002030:	10800060 	cmpeqi	r2,r2,1
10002034:	103fd51e 	bne	r2,zero,10001f8c <__alt_data_end+0xf8001f8c>
        kirby_left_X = (get_Kirby_Left_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_left_Y = get_Kirby_Left_Pos(kirby) & 0x0000ffff;
        kirby_right_X = (get_Kirby_Right_Pos(kirby) >> 16) & 0x0000ffff;
        kirby_right_Y = get_Kirby_Right_Pos(kirby) & 0x0000ffff;
    }
}
10002038:	0001883a 	nop
1000203c:	e037883a 	mov	sp,fp
10002040:	dfc00117 	ldw	ra,4(sp)
10002044:	df000017 	ldw	fp,0(sp)
10002048:	dec00204 	addi	sp,sp,8
1000204c:	f800283a 	ret

10002050 <frame_Time>:

void frame_Time(int t) {
10002050:	defffd04 	addi	sp,sp,-12
10002054:	df000215 	stw	fp,8(sp)
10002058:	df000204 	addi	fp,sp,8
1000205c:	e13fff15 	stw	r4,-4(fp)
    int i;
    for (i = 0; i < t; i++) {
10002060:	e03ffe15 	stw	zero,-8(fp)
10002064:	00000306 	br	10002074 <frame_Time+0x24>
10002068:	e0bffe17 	ldw	r2,-8(fp)
1000206c:	10800044 	addi	r2,r2,1
10002070:	e0bffe15 	stw	r2,-8(fp)
10002074:	e0fffe17 	ldw	r3,-8(fp)
10002078:	e0bfff17 	ldw	r2,-4(fp)
1000207c:	18bffa16 	blt	r3,r2,10002068 <__alt_data_end+0xf8002068>
        /* wait unitl the frame is over */
    }
}
10002080:	0001883a 	nop
10002084:	e037883a 	mov	sp,fp
10002088:	df000017 	ldw	fp,0(sp)
1000208c:	dec00104 	addi	sp,sp,4
10002090:	f800283a 	ret

10002094 <map_Width>:

int map_Width(int i) {
10002094:	defffe04 	addi	sp,sp,-8
10002098:	df000115 	stw	fp,4(sp)
1000209c:	df000104 	addi	fp,sp,4
100020a0:	e13fff15 	stw	r4,-4(fp)
    switch (i) {
100020a4:	e0bfff17 	ldw	r2,-4(fp)
100020a8:	10c00060 	cmpeqi	r3,r2,1
100020ac:	1800051e 	bne	r3,zero,100020c4 <map_Width+0x30>
100020b0:	10c000a0 	cmpeqi	r3,r2,2
100020b4:	1800051e 	bne	r3,zero,100020cc <map_Width+0x38>
100020b8:	1000061e 	bne	r2,zero,100020d4 <map_Width+0x40>
    case 0:
        return MAP_0_WIDTH;
100020bc:	00812fc4 	movi	r2,1215
100020c0:	00000506 	br	100020d8 <map_Width+0x44>
        break;
    case 1:
        return MAP_1_WIDTH;
100020c4:	0080f404 	movi	r2,976
100020c8:	00000306 	br	100020d8 <map_Width+0x44>
        break;
     case 2:
         return MAP_2_WIDTH;
100020cc:	00813044 	movi	r2,1217
100020d0:	00000106 	br	100020d8 <map_Width+0x44>
         break;
    default:
        return MAP_0_WIDTH;
100020d4:	00812fc4 	movi	r2,1215
        break;
    }
}
100020d8:	e037883a 	mov	sp,fp
100020dc:	df000017 	ldw	fp,0(sp)
100020e0:	dec00104 	addi	sp,sp,4
100020e4:	f800283a 	ret

100020e8 <will_Touch_Ground>:

int will_Touch_Ground(Kirby * kirby, int map_idx) {
100020e8:	defffa04 	addi	sp,sp,-24
100020ec:	dfc00515 	stw	ra,20(sp)
100020f0:	df000415 	stw	fp,16(sp)
100020f4:	df000404 	addi	fp,sp,16
100020f8:	e13ffe15 	stw	r4,-8(fp)
100020fc:	e17fff15 	stw	r5,-4(fp)
    int kirby_botton_X = (get_Kirby_Botton_Pos(kirby) >> 16) & 0x0000ffff;
10002100:	e13ffe17 	ldw	r4,-8(fp)
10002104:	00021600 	call	10002160 <get_Kirby_Botton_Pos>
10002108:	1004d43a 	srli	r2,r2,16
1000210c:	e0bffc15 	stw	r2,-16(fp)
    int kirby_botton_Y = get_Kirby_Botton_Pos(kirby) & 0x0000ffff;
10002110:	e13ffe17 	ldw	r4,-8(fp)
10002114:	00021600 	call	10002160 <get_Kirby_Botton_Pos>
10002118:	10bfffcc 	andi	r2,r2,65535
1000211c:	e0bffd15 	stw	r2,-12(fp)

    if (get_Wall_Info(kirby_botton_X, kirby_botton_Y + 1, map_idx) == AREA_CANNOT_GO) {
10002120:	e0bffd17 	ldw	r2,-12(fp)
10002124:	10800044 	addi	r2,r2,1
10002128:	e1bfff17 	ldw	r6,-4(fp)
1000212c:	100b883a 	mov	r5,r2
10002130:	e13ffc17 	ldw	r4,-16(fp)
10002134:	00025700 	call	10002570 <get_Wall_Info>
10002138:	10800058 	cmpnei	r2,r2,1
1000213c:	1000021e 	bne	r2,zero,10002148 <will_Touch_Ground+0x60>
        return 1;
10002140:	00800044 	movi	r2,1
10002144:	00000106 	br	1000214c <will_Touch_Ground+0x64>
    } else {
        return 0;
10002148:	0005883a 	mov	r2,zero
    }
}
1000214c:	e037883a 	mov	sp,fp
10002150:	dfc00117 	ldw	ra,4(sp)
10002154:	df000017 	ldw	fp,0(sp)
10002158:	dec00204 	addi	sp,sp,8
1000215c:	f800283a 	ret

10002160 <get_Kirby_Botton_Pos>:

int get_Kirby_Botton_Pos(Kirby * kirby) {
10002160:	defffc04 	addi	sp,sp,-16
10002164:	df000315 	stw	fp,12(sp)
10002168:	df000304 	addi	fp,sp,12
1000216c:	e13fff15 	stw	r4,-4(fp)
    int kirby_botton_X = 0;
10002170:	e03ffd15 	stw	zero,-12(fp)
    int kirby_botton_Y = 0;
10002174:	e03ffe15 	stw	zero,-8(fp)

    if (kirby->is_inhaled == 1) {
10002178:	e0bfff17 	ldw	r2,-4(fp)
1000217c:	10800a17 	ldw	r2,40(r2)
10002180:	10800058 	cmpnei	r2,r2,1
10002184:	1000091e 	bne	r2,zero,100021ac <get_Kirby_Botton_Pos+0x4c>
        kirby_botton_X = kirby->x + 16;
10002188:	e0bfff17 	ldw	r2,-4(fp)
1000218c:	10800017 	ldw	r2,0(r2)
10002190:	10800404 	addi	r2,r2,16
10002194:	e0bffd15 	stw	r2,-12(fp)
        kirby_botton_Y = kirby->y + 25;
10002198:	e0bfff17 	ldw	r2,-4(fp)
1000219c:	10800117 	ldw	r2,4(r2)
100021a0:	10800644 	addi	r2,r2,25
100021a4:	e0bffe15 	stw	r2,-8(fp)
100021a8:	00002606 	br	10002244 <get_Kirby_Botton_Pos+0xe4>
    } else if ((kirby->inhaling == 1) || (kirby->spitting == 1)) {
100021ac:	e0bfff17 	ldw	r2,-4(fp)
100021b0:	10800c17 	ldw	r2,48(r2)
100021b4:	10800060 	cmpeqi	r2,r2,1
100021b8:	1000041e 	bne	r2,zero,100021cc <get_Kirby_Botton_Pos+0x6c>
100021bc:	e0bfff17 	ldw	r2,-4(fp)
100021c0:	10800d17 	ldw	r2,52(r2)
100021c4:	10800058 	cmpnei	r2,r2,1
100021c8:	1000091e 	bne	r2,zero,100021f0 <get_Kirby_Botton_Pos+0x90>
        kirby_botton_X = kirby->x + 30;
100021cc:	e0bfff17 	ldw	r2,-4(fp)
100021d0:	10800017 	ldw	r2,0(r2)
100021d4:	10800784 	addi	r2,r2,30
100021d8:	e0bffd15 	stw	r2,-12(fp)
        kirby_botton_Y = kirby->y + 25;
100021dc:	e0bfff17 	ldw	r2,-4(fp)
100021e0:	10800117 	ldw	r2,4(r2)
100021e4:	10800644 	addi	r2,r2,25
100021e8:	e0bffe15 	stw	r2,-8(fp)
100021ec:	00001506 	br	10002244 <get_Kirby_Botton_Pos+0xe4>
    } else if (kirby->damaging == 1) {
100021f0:	e0bfff17 	ldw	r2,-4(fp)
100021f4:	10800b17 	ldw	r2,44(r2)
100021f8:	10800058 	cmpnei	r2,r2,1
100021fc:	1000091e 	bne	r2,zero,10002224 <get_Kirby_Botton_Pos+0xc4>
        kirby_botton_X = kirby->x + 17;
10002200:	e0bfff17 	ldw	r2,-4(fp)
10002204:	10800017 	ldw	r2,0(r2)
10002208:	10800444 	addi	r2,r2,17
1000220c:	e0bffd15 	stw	r2,-12(fp)
        kirby_botton_Y = kirby->y + 33;
10002210:	e0bfff17 	ldw	r2,-4(fp)
10002214:	10800117 	ldw	r2,4(r2)
10002218:	10800844 	addi	r2,r2,33
1000221c:	e0bffe15 	stw	r2,-8(fp)
10002220:	00000806 	br	10002244 <get_Kirby_Botton_Pos+0xe4>
    } else {
        kirby_botton_X = kirby->x + 14;
10002224:	e0bfff17 	ldw	r2,-4(fp)
10002228:	10800017 	ldw	r2,0(r2)
1000222c:	10800384 	addi	r2,r2,14
10002230:	e0bffd15 	stw	r2,-12(fp)
        kirby_botton_Y = kirby->y + 20;
10002234:	e0bfff17 	ldw	r2,-4(fp)
10002238:	10800117 	ldw	r2,4(r2)
1000223c:	10800504 	addi	r2,r2,20
10002240:	e0bffe15 	stw	r2,-8(fp)
    }
    return ((kirby_botton_X << 16) | kirby_botton_Y);
10002244:	e0bffd17 	ldw	r2,-12(fp)
10002248:	1006943a 	slli	r3,r2,16
1000224c:	e0bffe17 	ldw	r2,-8(fp)
10002250:	1884b03a 	or	r2,r3,r2
}
10002254:	e037883a 	mov	sp,fp
10002258:	df000017 	ldw	fp,0(sp)
1000225c:	dec00104 	addi	sp,sp,4
10002260:	f800283a 	ret

10002264 <get_Kirby_Ceil_Pos>:

int get_Kirby_Ceil_Pos(Kirby * kirby) {
10002264:	defffc04 	addi	sp,sp,-16
10002268:	df000315 	stw	fp,12(sp)
1000226c:	df000304 	addi	fp,sp,12
10002270:	e13fff15 	stw	r4,-4(fp)
    int kirby_ceil_X = 0;
10002274:	e03ffd15 	stw	zero,-12(fp)
    int kirby_ceil_Y = 0;
10002278:	e03ffe15 	stw	zero,-8(fp)

    if (kirby->is_inhaled == 1) {
1000227c:	e0bfff17 	ldw	r2,-4(fp)
10002280:	10800a17 	ldw	r2,40(r2)
10002284:	10800058 	cmpnei	r2,r2,1
10002288:	1000091e 	bne	r2,zero,100022b0 <get_Kirby_Ceil_Pos+0x4c>
        kirby_ceil_X = kirby->x + 16;
1000228c:	e0bfff17 	ldw	r2,-4(fp)
10002290:	10800017 	ldw	r2,0(r2)
10002294:	10800404 	addi	r2,r2,16
10002298:	e0bffd15 	stw	r2,-12(fp)
        kirby_ceil_Y = kirby->y + 5;
1000229c:	e0bfff17 	ldw	r2,-4(fp)
100022a0:	10800117 	ldw	r2,4(r2)
100022a4:	10800144 	addi	r2,r2,5
100022a8:	e0bffe15 	stw	r2,-8(fp)
100022ac:	00002606 	br	10002348 <get_Kirby_Ceil_Pos+0xe4>
    } else if ((kirby->inhaling == 1) || (kirby->spitting == 1)) {
100022b0:	e0bfff17 	ldw	r2,-4(fp)
100022b4:	10800c17 	ldw	r2,48(r2)
100022b8:	10800060 	cmpeqi	r2,r2,1
100022bc:	1000041e 	bne	r2,zero,100022d0 <get_Kirby_Ceil_Pos+0x6c>
100022c0:	e0bfff17 	ldw	r2,-4(fp)
100022c4:	10800d17 	ldw	r2,52(r2)
100022c8:	10800058 	cmpnei	r2,r2,1
100022cc:	1000091e 	bne	r2,zero,100022f4 <get_Kirby_Ceil_Pos+0x90>
        kirby_ceil_X = kirby->x + 30;
100022d0:	e0bfff17 	ldw	r2,-4(fp)
100022d4:	10800017 	ldw	r2,0(r2)
100022d8:	10800784 	addi	r2,r2,30
100022dc:	e0bffd15 	stw	r2,-12(fp)
        kirby_ceil_Y = kirby->y + 5;
100022e0:	e0bfff17 	ldw	r2,-4(fp)
100022e4:	10800117 	ldw	r2,4(r2)
100022e8:	10800144 	addi	r2,r2,5
100022ec:	e0bffe15 	stw	r2,-8(fp)
100022f0:	00001506 	br	10002348 <get_Kirby_Ceil_Pos+0xe4>
    } else if (kirby->damaging == 1) {
100022f4:	e0bfff17 	ldw	r2,-4(fp)
100022f8:	10800b17 	ldw	r2,44(r2)
100022fc:	10800058 	cmpnei	r2,r2,1
10002300:	1000091e 	bne	r2,zero,10002328 <get_Kirby_Ceil_Pos+0xc4>
        kirby_ceil_X = kirby->x + 17;
10002304:	e0bfff17 	ldw	r2,-4(fp)
10002308:	10800017 	ldw	r2,0(r2)
1000230c:	10800444 	addi	r2,r2,17
10002310:	e0bffd15 	stw	r2,-12(fp)
        kirby_ceil_Y = kirby->y + 7;   //// Not an accurate value!!! ////
10002314:	e0bfff17 	ldw	r2,-4(fp)
10002318:	10800117 	ldw	r2,4(r2)
1000231c:	108001c4 	addi	r2,r2,7
10002320:	e0bffe15 	stw	r2,-8(fp)
10002324:	00000806 	br	10002348 <get_Kirby_Ceil_Pos+0xe4>
    } else {
        kirby_ceil_X = kirby->x + 14;
10002328:	e0bfff17 	ldw	r2,-4(fp)
1000232c:	10800017 	ldw	r2,0(r2)
10002330:	10800384 	addi	r2,r2,14
10002334:	e0bffd15 	stw	r2,-12(fp)
        kirby_ceil_Y = kirby->y + 4;
10002338:	e0bfff17 	ldw	r2,-4(fp)
1000233c:	10800117 	ldw	r2,4(r2)
10002340:	10800104 	addi	r2,r2,4
10002344:	e0bffe15 	stw	r2,-8(fp)
    }
    return ((kirby_ceil_X << 16) | kirby_ceil_Y);
10002348:	e0bffd17 	ldw	r2,-12(fp)
1000234c:	1006943a 	slli	r3,r2,16
10002350:	e0bffe17 	ldw	r2,-8(fp)
10002354:	1884b03a 	or	r2,r3,r2
}
10002358:	e037883a 	mov	sp,fp
1000235c:	df000017 	ldw	fp,0(sp)
10002360:	dec00104 	addi	sp,sp,4
10002364:	f800283a 	ret

10002368 <get_Kirby_Left_Pos>:

int get_Kirby_Left_Pos(Kirby * kirby) {
10002368:	defffc04 	addi	sp,sp,-16
1000236c:	df000315 	stw	fp,12(sp)
10002370:	df000304 	addi	fp,sp,12
10002374:	e13fff15 	stw	r4,-4(fp)
    int kirby_left_X = 0;
10002378:	e03ffd15 	stw	zero,-12(fp)
    int kirby_left_Y = 0;
1000237c:	e03ffe15 	stw	zero,-8(fp)

    if (kirby->is_inhaled == 1) {
10002380:	e0bfff17 	ldw	r2,-4(fp)
10002384:	10800a17 	ldw	r2,40(r2)
10002388:	10800058 	cmpnei	r2,r2,1
1000238c:	1000091e 	bne	r2,zero,100023b4 <get_Kirby_Left_Pos+0x4c>
        kirby_left_X = kirby->x + 5;
10002390:	e0bfff17 	ldw	r2,-4(fp)
10002394:	10800017 	ldw	r2,0(r2)
10002398:	10800144 	addi	r2,r2,5
1000239c:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_Y = kirby->y + 15;
100023a0:	e0bfff17 	ldw	r2,-4(fp)
100023a4:	10800117 	ldw	r2,4(r2)
100023a8:	108003c4 	addi	r2,r2,15
100023ac:	e0bffe15 	stw	r2,-8(fp)
100023b0:	00002606 	br	1000244c <get_Kirby_Left_Pos+0xe4>
    } else if ((kirby->inhaling == 1) || (kirby->spitting == 1)) {
100023b4:	e0bfff17 	ldw	r2,-4(fp)
100023b8:	10800c17 	ldw	r2,48(r2)
100023bc:	10800060 	cmpeqi	r2,r2,1
100023c0:	1000041e 	bne	r2,zero,100023d4 <get_Kirby_Left_Pos+0x6c>
100023c4:	e0bfff17 	ldw	r2,-4(fp)
100023c8:	10800d17 	ldw	r2,52(r2)
100023cc:	10800058 	cmpnei	r2,r2,1
100023d0:	1000091e 	bne	r2,zero,100023f8 <get_Kirby_Left_Pos+0x90>
        kirby_left_X = kirby->x + 21;
100023d4:	e0bfff17 	ldw	r2,-4(fp)
100023d8:	10800017 	ldw	r2,0(r2)
100023dc:	10800544 	addi	r2,r2,21
100023e0:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_Y = kirby->y + 15;
100023e4:	e0bfff17 	ldw	r2,-4(fp)
100023e8:	10800117 	ldw	r2,4(r2)
100023ec:	108003c4 	addi	r2,r2,15
100023f0:	e0bffe15 	stw	r2,-8(fp)
100023f4:	00001506 	br	1000244c <get_Kirby_Left_Pos+0xe4>
    } else if (kirby->damaging == 1) {
100023f8:	e0bfff17 	ldw	r2,-4(fp)
100023fc:	10800b17 	ldw	r2,44(r2)
10002400:	10800058 	cmpnei	r2,r2,1
10002404:	1000091e 	bne	r2,zero,1000242c <get_Kirby_Left_Pos+0xc4>
        kirby_left_X = kirby->x + 6;
10002408:	e0bfff17 	ldw	r2,-4(fp)
1000240c:	10800017 	ldw	r2,0(r2)
10002410:	10800184 	addi	r2,r2,6
10002414:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_Y = kirby->y + 18;   //// Not an accurate value!!! ////
10002418:	e0bfff17 	ldw	r2,-4(fp)
1000241c:	10800117 	ldw	r2,4(r2)
10002420:	10800484 	addi	r2,r2,18
10002424:	e0bffe15 	stw	r2,-8(fp)
10002428:	00000806 	br	1000244c <get_Kirby_Left_Pos+0xe4>
    } else {
        kirby_left_X = kirby->x + 8;    //// Not an accurate value!!! //// 8
1000242c:	e0bfff17 	ldw	r2,-4(fp)
10002430:	10800017 	ldw	r2,0(r2)
10002434:	10800204 	addi	r2,r2,8
10002438:	e0bffd15 	stw	r2,-12(fp)
        kirby_left_Y = kirby->y + 14;   //// Not an accurate value!!! ////
1000243c:	e0bfff17 	ldw	r2,-4(fp)
10002440:	10800117 	ldw	r2,4(r2)
10002444:	10800384 	addi	r2,r2,14
10002448:	e0bffe15 	stw	r2,-8(fp)
    }
    return ((kirby_left_X << 16) | kirby_left_Y);
1000244c:	e0bffd17 	ldw	r2,-12(fp)
10002450:	1006943a 	slli	r3,r2,16
10002454:	e0bffe17 	ldw	r2,-8(fp)
10002458:	1884b03a 	or	r2,r3,r2
}
1000245c:	e037883a 	mov	sp,fp
10002460:	df000017 	ldw	fp,0(sp)
10002464:	dec00104 	addi	sp,sp,4
10002468:	f800283a 	ret

1000246c <get_Kirby_Right_Pos>:

int get_Kirby_Right_Pos(Kirby * kirby) {
1000246c:	defffc04 	addi	sp,sp,-16
10002470:	df000315 	stw	fp,12(sp)
10002474:	df000304 	addi	fp,sp,12
10002478:	e13fff15 	stw	r4,-4(fp)
    int kirby_right_X = 0;
1000247c:	e03ffd15 	stw	zero,-12(fp)
    int kirby_right_Y = 0;
10002480:	e03ffe15 	stw	zero,-8(fp)

    if (kirby->is_inhaled == 1) {
10002484:	e0bfff17 	ldw	r2,-4(fp)
10002488:	10800a17 	ldw	r2,40(r2)
1000248c:	10800058 	cmpnei	r2,r2,1
10002490:	1000091e 	bne	r2,zero,100024b8 <get_Kirby_Right_Pos+0x4c>
        kirby_right_X = kirby->x + 26;
10002494:	e0bfff17 	ldw	r2,-4(fp)
10002498:	10800017 	ldw	r2,0(r2)
1000249c:	10800684 	addi	r2,r2,26
100024a0:	e0bffd15 	stw	r2,-12(fp)
        kirby_right_Y = kirby->y + 15;
100024a4:	e0bfff17 	ldw	r2,-4(fp)
100024a8:	10800117 	ldw	r2,4(r2)
100024ac:	108003c4 	addi	r2,r2,15
100024b0:	e0bffe15 	stw	r2,-8(fp)
100024b4:	00002606 	br	10002550 <get_Kirby_Right_Pos+0xe4>
    } else if ((kirby->inhaling == 1) || (kirby->spitting == 1)) {
100024b8:	e0bfff17 	ldw	r2,-4(fp)
100024bc:	10800c17 	ldw	r2,48(r2)
100024c0:	10800060 	cmpeqi	r2,r2,1
100024c4:	1000041e 	bne	r2,zero,100024d8 <get_Kirby_Right_Pos+0x6c>
100024c8:	e0bfff17 	ldw	r2,-4(fp)
100024cc:	10800d17 	ldw	r2,52(r2)
100024d0:	10800058 	cmpnei	r2,r2,1
100024d4:	1000091e 	bne	r2,zero,100024fc <get_Kirby_Right_Pos+0x90>
        kirby_right_X = kirby->x + 41;
100024d8:	e0bfff17 	ldw	r2,-4(fp)
100024dc:	10800017 	ldw	r2,0(r2)
100024e0:	10800a44 	addi	r2,r2,41
100024e4:	e0bffd15 	stw	r2,-12(fp)
        kirby_right_Y = kirby->y + 15;
100024e8:	e0bfff17 	ldw	r2,-4(fp)
100024ec:	10800117 	ldw	r2,4(r2)
100024f0:	108003c4 	addi	r2,r2,15
100024f4:	e0bffe15 	stw	r2,-8(fp)
100024f8:	00001506 	br	10002550 <get_Kirby_Right_Pos+0xe4>
    } else if (kirby->damaging == 1) {
100024fc:	e0bfff17 	ldw	r2,-4(fp)
10002500:	10800b17 	ldw	r2,44(r2)
10002504:	10800058 	cmpnei	r2,r2,1
10002508:	1000091e 	bne	r2,zero,10002530 <get_Kirby_Right_Pos+0xc4>
        kirby_right_X = kirby->x + 29;   //// Not an accurate value!!! ////
1000250c:	e0bfff17 	ldw	r2,-4(fp)
10002510:	10800017 	ldw	r2,0(r2)
10002514:	10800744 	addi	r2,r2,29
10002518:	e0bffd15 	stw	r2,-12(fp)
        kirby_right_Y = kirby->y + 18;   //// Not an accurate value!!! ////
1000251c:	e0bfff17 	ldw	r2,-4(fp)
10002520:	10800117 	ldw	r2,4(r2)
10002524:	10800484 	addi	r2,r2,18
10002528:	e0bffe15 	stw	r2,-8(fp)
1000252c:	00000806 	br	10002550 <get_Kirby_Right_Pos+0xe4>
    } else {
        kirby_right_X = kirby->x + 24;    //// Not an accurate value!!! ////
10002530:	e0bfff17 	ldw	r2,-4(fp)
10002534:	10800017 	ldw	r2,0(r2)
10002538:	10800604 	addi	r2,r2,24
1000253c:	e0bffd15 	stw	r2,-12(fp)
        kirby_right_Y = kirby->y + 14;   //// Not an accurate value!!! ////
10002540:	e0bfff17 	ldw	r2,-4(fp)
10002544:	10800117 	ldw	r2,4(r2)
10002548:	10800384 	addi	r2,r2,14
1000254c:	e0bffe15 	stw	r2,-8(fp)
    }
    return ((kirby_right_X << 16) | kirby_right_Y);
10002550:	e0bffd17 	ldw	r2,-12(fp)
10002554:	1006943a 	slli	r3,r2,16
10002558:	e0bffe17 	ldw	r2,-8(fp)
1000255c:	1884b03a 	or	r2,r3,r2
}
10002560:	e037883a 	mov	sp,fp
10002564:	df000017 	ldw	fp,0(sp)
10002568:	dec00104 	addi	sp,sp,4
1000256c:	f800283a 	ret

10002570 <get_Wall_Info>:

int get_Wall_Info(int x, int y, int map_idx) {
10002570:	defff904 	addi	sp,sp,-28
10002574:	dfc00615 	stw	ra,24(sp)
10002578:	df000515 	stw	fp,20(sp)
1000257c:	df000504 	addi	fp,sp,20
10002580:	e13ffd15 	stw	r4,-12(fp)
10002584:	e17ffe15 	stw	r5,-8(fp)
10002588:	e1bfff15 	stw	r6,-4(fp)
    int idx, res = 0;
1000258c:	e03ffb15 	stw	zero,-20(fp)
    idx = (map_Width(map_idx) * y + x) / 32;
10002590:	e13fff17 	ldw	r4,-4(fp)
10002594:	00020940 	call	10002094 <map_Width>
10002598:	e17ffe17 	ldw	r5,-8(fp)
1000259c:	1009883a 	mov	r4,r2
100025a0:	00050540 	call	10005054 <__mulsi3>
100025a4:	1007883a 	mov	r3,r2
100025a8:	e0bffd17 	ldw	r2,-12(fp)
100025ac:	1885883a 	add	r2,r3,r2
100025b0:	1000010e 	bge	r2,zero,100025b8 <get_Wall_Info+0x48>
100025b4:	108007c4 	addi	r2,r2,31
100025b8:	1005d17a 	srai	r2,r2,5
100025bc:	e0bffc15 	stw	r2,-16(fp)
    res = (map_Width(map_idx) * y + x) % 32;
100025c0:	e13fff17 	ldw	r4,-4(fp)
100025c4:	00020940 	call	10002094 <map_Width>
100025c8:	e17ffe17 	ldw	r5,-8(fp)
100025cc:	1009883a 	mov	r4,r2
100025d0:	00050540 	call	10005054 <__mulsi3>
100025d4:	1007883a 	mov	r3,r2
100025d8:	e0bffd17 	ldw	r2,-12(fp)
100025dc:	1887883a 	add	r3,r3,r2
100025e0:	00a00034 	movhi	r2,32768
100025e4:	108007c4 	addi	r2,r2,31
100025e8:	1884703a 	and	r2,r3,r2
100025ec:	1000040e 	bge	r2,zero,10002600 <get_Wall_Info+0x90>
100025f0:	10bfffc4 	addi	r2,r2,-1
100025f4:	00fff804 	movi	r3,-32
100025f8:	10c4b03a 	or	r2,r2,r3
100025fc:	10800044 	addi	r2,r2,1
10002600:	e0bffb15 	stw	r2,-20(fp)
    if (map_idx == 0) {
10002604:	e0bfff17 	ldw	r2,-4(fp)
10002608:	10000d1e 	bne	r2,zero,10002640 <get_Wall_Info+0xd0>
        return ((Wall1[idx] >> (31 - res)) & 0x00000001);
1000260c:	00840074 	movhi	r2,4097
10002610:	10945304 	addi	r2,r2,20812
10002614:	e0fffc17 	ldw	r3,-16(fp)
10002618:	18c7883a 	add	r3,r3,r3
1000261c:	18c7883a 	add	r3,r3,r3
10002620:	10c5883a 	add	r2,r2,r3
10002624:	10c00017 	ldw	r3,0(r2)
10002628:	010007c4 	movi	r4,31
1000262c:	e0bffb17 	ldw	r2,-20(fp)
10002630:	2085c83a 	sub	r2,r4,r2
10002634:	1885d83a 	sra	r2,r3,r2
10002638:	1080004c 	andi	r2,r2,1
1000263c:	00001406 	br	10002690 <get_Wall_Info+0x120>
    } else if (map_idx == 1) {
10002640:	e0bfff17 	ldw	r2,-4(fp)
10002644:	10800058 	cmpnei	r2,r2,1
10002648:	10000d1e 	bne	r2,zero,10002680 <get_Wall_Info+0x110>
        return ((Wall2[idx] >> (31 - res)) & 0x00000001);
1000264c:	008400b4 	movhi	r2,4098
10002650:	10ae6e04 	addi	r2,r2,-17992
10002654:	e0fffc17 	ldw	r3,-16(fp)
10002658:	18c7883a 	add	r3,r3,r3
1000265c:	18c7883a 	add	r3,r3,r3
10002660:	10c5883a 	add	r2,r2,r3
10002664:	10c00017 	ldw	r3,0(r2)
10002668:	010007c4 	movi	r4,31
1000266c:	e0bffb17 	ldw	r2,-20(fp)
10002670:	2085c83a 	sub	r2,r4,r2
10002674:	1885d83a 	sra	r2,r3,r2
10002678:	1080004c 	andi	r2,r2,1
1000267c:	00000406 	br	10002690 <get_Wall_Info+0x120>
    } else {
        printf("Error: Map index out of tolerrance!");
10002680:	01040074 	movhi	r4,4097
10002684:	21118604 	addi	r4,r4,17944
10002688:	00050ac0 	call	100050ac <printf>
    }
    return 1;
1000268c:	00800044 	movi	r2,1
}
10002690:	e037883a 	mov	sp,fp
10002694:	dfc00117 	ldw	ra,4(sp)
10002698:	df000017 	ldw	fp,0(sp)
1000269c:	dec00204 	addi	sp,sp,8
100026a0:	f800283a 	ret

100026a4 <kirby_Inhaling>:

void kirby_Inhaling(Kirby * kirby) {
100026a4:	defffd04 	addi	sp,sp,-12
100026a8:	dfc00215 	stw	ra,8(sp)
100026ac:	df000115 	stw	fp,4(sp)
100026b0:	df000104 	addi	fp,sp,4
100026b4:	e13fff15 	stw	r4,-4(fp)
    kirby->frame = 0;
100026b8:	e0bfff17 	ldw	r2,-4(fp)
100026bc:	10000715 	stw	zero,28(r2)
    upload_Kirby_Info(kirby);
100026c0:	e13fff17 	ldw	r4,-4(fp)
100026c4:	00006300 	call	10000630 <upload_Kirby_Info>
    frame_Time(KIRBY_FRAME_TIME_INHALE);
100026c8:	0107d004 	movi	r4,8000
100026cc:	00020500 	call	10002050 <frame_Time>
    while (get_keycode_value() == 0x000e) {
100026d0:	00001206 	br	1000271c <kirby_Inhaling+0x78>
        kirby->frame = (kirby->frame + 1) % 2;
100026d4:	e0bfff17 	ldw	r2,-4(fp)
100026d8:	10800717 	ldw	r2,28(r2)
100026dc:	10c00044 	addi	r3,r2,1
100026e0:	00a00034 	movhi	r2,32768
100026e4:	10800044 	addi	r2,r2,1
100026e8:	1884703a 	and	r2,r3,r2
100026ec:	1000040e 	bge	r2,zero,10002700 <kirby_Inhaling+0x5c>
100026f0:	10bfffc4 	addi	r2,r2,-1
100026f4:	00ffff84 	movi	r3,-2
100026f8:	10c4b03a 	or	r2,r2,r3
100026fc:	10800044 	addi	r2,r2,1
10002700:	1007883a 	mov	r3,r2
10002704:	e0bfff17 	ldw	r2,-4(fp)
10002708:	10c00715 	stw	r3,28(r2)
        upload_Kirby_Info(kirby);
1000270c:	e13fff17 	ldw	r4,-4(fp)
10002710:	00006300 	call	10000630 <upload_Kirby_Info>
        frame_Time(KIRBY_FRAME_TIME_INHALE);
10002714:	0107d004 	movi	r4,8000
10002718:	00020500 	call	10002050 <frame_Time>

void kirby_Inhaling(Kirby * kirby) {
    kirby->frame = 0;
    upload_Kirby_Info(kirby);
    frame_Time(KIRBY_FRAME_TIME_INHALE);
    while (get_keycode_value() == 0x000e) {
1000271c:	0004bb80 	call	10004bb8 <get_keycode_value>
10002720:	108003a0 	cmpeqi	r2,r2,14
10002724:	103feb1e 	bne	r2,zero,100026d4 <__alt_data_end+0xf80026d4>
        kirby->frame = (kirby->frame + 1) % 2;
        upload_Kirby_Info(kirby);
        frame_Time(KIRBY_FRAME_TIME_INHALE);
    }
    kirby->inhaling = 0;
10002728:	e0bfff17 	ldw	r2,-4(fp)
1000272c:	10000c15 	stw	zero,48(r2)
    kirby->is_inhaled = 1;
10002730:	e0bfff17 	ldw	r2,-4(fp)
10002734:	00c00044 	movi	r3,1
10002738:	10c00a15 	stw	r3,40(r2)
    kirby->action = 0;
1000273c:	e0bfff17 	ldw	r2,-4(fp)
10002740:	10000615 	stw	zero,24(r2)
    // kirby->frame = 11;
    // upload_Kirby_Info(kirby);
    kirby->frame = 12;
10002744:	e0bfff17 	ldw	r2,-4(fp)
10002748:	00c00304 	movi	r3,12
1000274c:	10c00715 	stw	r3,28(r2)
    upload_Kirby_Info(kirby);
10002750:	e13fff17 	ldw	r4,-4(fp)
10002754:	00006300 	call	10000630 <upload_Kirby_Info>
    kirby->frame = 13;
10002758:	e0bfff17 	ldw	r2,-4(fp)
1000275c:	00c00344 	movi	r3,13
10002760:	10c00715 	stw	r3,28(r2)
    upload_Kirby_Info(kirby);
10002764:	e13fff17 	ldw	r4,-4(fp)
10002768:	00006300 	call	10000630 <upload_Kirby_Info>
    kirby->is_inhaled = 0;
1000276c:	e0bfff17 	ldw	r2,-4(fp)
10002770:	10000a15 	stw	zero,40(r2)
}
10002774:	0001883a 	nop
10002778:	e037883a 	mov	sp,fp
1000277c:	dfc00117 	ldw	ra,4(sp)
10002780:	df000017 	ldw	fp,0(sp)
10002784:	dec00204 	addi	sp,sp,8
10002788:	f800283a 	ret

1000278c <kirby_Return_Normal>:

void kirby_Return_Normal(Kirby * kirby) {
1000278c:	defffd04 	addi	sp,sp,-12
10002790:	dfc00215 	stw	ra,8(sp)
10002794:	df000115 	stw	fp,4(sp)
10002798:	df000104 	addi	fp,sp,4
1000279c:	e13fff15 	stw	r4,-4(fp)
    kirby->is_inhaled = 0;
100027a0:	e0bfff17 	ldw	r2,-4(fp)
100027a4:	10000a15 	stw	zero,40(r2)
    kirby->in_air = 0;
100027a8:	e0bfff17 	ldw	r2,-4(fp)
100027ac:	10000915 	stw	zero,36(r2)
    kirby->image = 0;
100027b0:	e0bfff17 	ldw	r2,-4(fp)
100027b4:	10000315 	stw	zero,12(r2)
    kirby->action = 0;
100027b8:	e0bfff17 	ldw	r2,-4(fp)
100027bc:	10000615 	stw	zero,24(r2)
    kirby->frame = 0;
100027c0:	e0bfff17 	ldw	r2,-4(fp)
100027c4:	10000715 	stw	zero,28(r2)
    upload_Kirby_Info(kirby);
100027c8:	e13fff17 	ldw	r4,-4(fp)
100027cc:	00006300 	call	10000630 <upload_Kirby_Info>
}
100027d0:	0001883a 	nop
100027d4:	e037883a 	mov	sp,fp
100027d8:	dfc00117 	ldw	ra,4(sp)
100027dc:	df000017 	ldw	fp,0(sp)
100027e0:	dec00204 	addi	sp,sp,8
100027e4:	f800283a 	ret

100027e8 <kirby_Kick_Ass>:

void kirby_Kick_Ass(Kirby * kirby) {
100027e8:	defffc04 	addi	sp,sp,-16
100027ec:	dfc00315 	stw	ra,12(sp)
100027f0:	df000215 	stw	fp,8(sp)
100027f4:	df000204 	addi	fp,sp,8
100027f8:	e13fff15 	stw	r4,-4(fp)
    int i = 0;
100027fc:	e03ffe15 	stw	zero,-8(fp)
    kirby->image = 0;
10002800:	e0bfff17 	ldw	r2,-4(fp)
10002804:	10000315 	stw	zero,12(r2)
    kirby->action = 2;
10002808:	e0bfff17 	ldw	r2,-4(fp)
1000280c:	00c00084 	movi	r3,2
10002810:	10c00615 	stw	r3,24(r2)
    kirby->frame = 6;
10002814:	e0bfff17 	ldw	r2,-4(fp)
10002818:	00c00184 	movi	r3,6
1000281c:	10c00715 	stw	r3,28(r2)
    if (kirby->is_left == 0) {
10002820:	e0bfff17 	ldw	r2,-4(fp)
10002824:	10800417 	ldw	r2,16(r2)
10002828:	10004a1e 	bne	r2,zero,10002954 <kirby_Kick_Ass+0x16c>
        for (i = 0; i < 8; i++){
1000282c:	e03ffe15 	stw	zero,-8(fp)
10002830:	00001606 	br	1000288c <kirby_Kick_Ass+0xa4>
            kirby->x += KIRBY_KICK_X;
10002834:	e0bfff17 	ldw	r2,-4(fp)
10002838:	10800017 	ldw	r2,0(r2)
1000283c:	10c000c4 	addi	r3,r2,3
10002840:	e0bfff17 	ldw	r2,-4(fp)
10002844:	10c00015 	stw	r3,0(r2)
            force_It_Inside_Map(kirby, kirby->map);
10002848:	e0bfff17 	ldw	r2,-4(fp)
1000284c:	10800217 	ldw	r2,8(r2)
10002850:	100b883a 	mov	r5,r2
10002854:	e13fff17 	ldw	r4,-4(fp)
10002858:	0001ce00 	call	10001ce0 <force_It_Inside_Map>
            force_It_On_Ground(kirby, kirby->map);
1000285c:	e0bfff17 	ldw	r2,-4(fp)
10002860:	10800217 	ldw	r2,8(r2)
10002864:	100b883a 	mov	r5,r2
10002868:	e13fff17 	ldw	r4,-4(fp)
1000286c:	0001c380 	call	10001c38 <force_It_On_Ground>
            upload_Kirby_Info(kirby);
10002870:	e13fff17 	ldw	r4,-4(fp)
10002874:	00006300 	call	10000630 <upload_Kirby_Info>
            frame_Time(KIRBY_FRAME_TIME_KICK);
10002878:	0103e804 	movi	r4,4000
1000287c:	00020500 	call	10002050 <frame_Time>
    int i = 0;
    kirby->image = 0;
    kirby->action = 2;
    kirby->frame = 6;
    if (kirby->is_left == 0) {
        for (i = 0; i < 8; i++){
10002880:	e0bffe17 	ldw	r2,-8(fp)
10002884:	10800044 	addi	r2,r2,1
10002888:	e0bffe15 	stw	r2,-8(fp)
1000288c:	e0bffe17 	ldw	r2,-8(fp)
10002890:	10800210 	cmplti	r2,r2,8
10002894:	103fe71e 	bne	r2,zero,10002834 <__alt_data_end+0xf8002834>
            force_It_Inside_Map(kirby, kirby->map);
            force_It_On_Ground(kirby, kirby->map);
            upload_Kirby_Info(kirby);
            frame_Time(KIRBY_FRAME_TIME_KICK);
        }
        for (i = 0; i < 6; i++)
10002898:	e03ffe15 	stw	zero,-8(fp)
1000289c:	00001606 	br	100028f8 <kirby_Kick_Ass+0x110>
        {
            kirby->x += (KIRBY_KICK_X - 1);
100028a0:	e0bfff17 	ldw	r2,-4(fp)
100028a4:	10800017 	ldw	r2,0(r2)
100028a8:	10c00084 	addi	r3,r2,2
100028ac:	e0bfff17 	ldw	r2,-4(fp)
100028b0:	10c00015 	stw	r3,0(r2)
            force_It_Inside_Map(kirby, kirby->map);
100028b4:	e0bfff17 	ldw	r2,-4(fp)
100028b8:	10800217 	ldw	r2,8(r2)
100028bc:	100b883a 	mov	r5,r2
100028c0:	e13fff17 	ldw	r4,-4(fp)
100028c4:	0001ce00 	call	10001ce0 <force_It_Inside_Map>
            force_It_On_Ground(kirby, kirby->map);
100028c8:	e0bfff17 	ldw	r2,-4(fp)
100028cc:	10800217 	ldw	r2,8(r2)
100028d0:	100b883a 	mov	r5,r2
100028d4:	e13fff17 	ldw	r4,-4(fp)
100028d8:	0001c380 	call	10001c38 <force_It_On_Ground>
            upload_Kirby_Info(kirby);
100028dc:	e13fff17 	ldw	r4,-4(fp)
100028e0:	00006300 	call	10000630 <upload_Kirby_Info>
            frame_Time(KIRBY_FRAME_TIME_KICK);
100028e4:	0103e804 	movi	r4,4000
100028e8:	00020500 	call	10002050 <frame_Time>
            force_It_Inside_Map(kirby, kirby->map);
            force_It_On_Ground(kirby, kirby->map);
            upload_Kirby_Info(kirby);
            frame_Time(KIRBY_FRAME_TIME_KICK);
        }
        for (i = 0; i < 6; i++)
100028ec:	e0bffe17 	ldw	r2,-8(fp)
100028f0:	10800044 	addi	r2,r2,1
100028f4:	e0bffe15 	stw	r2,-8(fp)
100028f8:	e0bffe17 	ldw	r2,-8(fp)
100028fc:	10800190 	cmplti	r2,r2,6
10002900:	103fe71e 	bne	r2,zero,100028a0 <__alt_data_end+0xf80028a0>
            force_It_Inside_Map(kirby, kirby->map);
            force_It_On_Ground(kirby, kirby->map);
            upload_Kirby_Info(kirby);
            frame_Time(KIRBY_FRAME_TIME_KICK);
        }
        kirby->x += (KIRBY_KICK_X - 2);
10002904:	e0bfff17 	ldw	r2,-4(fp)
10002908:	10800017 	ldw	r2,0(r2)
1000290c:	10c00044 	addi	r3,r2,1
10002910:	e0bfff17 	ldw	r2,-4(fp)
10002914:	10c00015 	stw	r3,0(r2)
        force_It_Inside_Map(kirby, kirby->map);
10002918:	e0bfff17 	ldw	r2,-4(fp)
1000291c:	10800217 	ldw	r2,8(r2)
10002920:	100b883a 	mov	r5,r2
10002924:	e13fff17 	ldw	r4,-4(fp)
10002928:	0001ce00 	call	10001ce0 <force_It_Inside_Map>
        force_It_On_Ground(kirby, kirby->map);
1000292c:	e0bfff17 	ldw	r2,-4(fp)
10002930:	10800217 	ldw	r2,8(r2)
10002934:	100b883a 	mov	r5,r2
10002938:	e13fff17 	ldw	r4,-4(fp)
1000293c:	0001c380 	call	10001c38 <force_It_On_Ground>
        upload_Kirby_Info(kirby);
10002940:	e13fff17 	ldw	r4,-4(fp)
10002944:	00006300 	call	10000630 <upload_Kirby_Info>
        frame_Time(KIRBY_FRAME_TIME_KICK);
10002948:	0103e804 	movi	r4,4000
1000294c:	00020500 	call	10002050 <frame_Time>
        upload_Kirby_Info(kirby);
        frame_Time(KIRBY_FRAME_TIME_KICK);
    }
    

}
10002950:	00004906 	br	10002a78 <kirby_Kick_Ass+0x290>
        force_It_Inside_Map(kirby, kirby->map);
        force_It_On_Ground(kirby, kirby->map);
        upload_Kirby_Info(kirby);
        frame_Time(KIRBY_FRAME_TIME_KICK);
    } else {
        for (i = 0; i < 8; i++){
10002954:	e03ffe15 	stw	zero,-8(fp)
10002958:	00001606 	br	100029b4 <kirby_Kick_Ass+0x1cc>
            kirby->x -= KIRBY_KICK_X;
1000295c:	e0bfff17 	ldw	r2,-4(fp)
10002960:	10800017 	ldw	r2,0(r2)
10002964:	10ffff44 	addi	r3,r2,-3
10002968:	e0bfff17 	ldw	r2,-4(fp)
1000296c:	10c00015 	stw	r3,0(r2)
            force_It_Inside_Map(kirby, kirby->map);
10002970:	e0bfff17 	ldw	r2,-4(fp)
10002974:	10800217 	ldw	r2,8(r2)
10002978:	100b883a 	mov	r5,r2
1000297c:	e13fff17 	ldw	r4,-4(fp)
10002980:	0001ce00 	call	10001ce0 <force_It_Inside_Map>
            force_It_On_Ground(kirby, kirby->map);
10002984:	e0bfff17 	ldw	r2,-4(fp)
10002988:	10800217 	ldw	r2,8(r2)
1000298c:	100b883a 	mov	r5,r2
10002990:	e13fff17 	ldw	r4,-4(fp)
10002994:	0001c380 	call	10001c38 <force_It_On_Ground>
            upload_Kirby_Info(kirby);
10002998:	e13fff17 	ldw	r4,-4(fp)
1000299c:	00006300 	call	10000630 <upload_Kirby_Info>
            frame_Time(KIRBY_FRAME_TIME_KICK);
100029a0:	0103e804 	movi	r4,4000
100029a4:	00020500 	call	10002050 <frame_Time>
        force_It_Inside_Map(kirby, kirby->map);
        force_It_On_Ground(kirby, kirby->map);
        upload_Kirby_Info(kirby);
        frame_Time(KIRBY_FRAME_TIME_KICK);
    } else {
        for (i = 0; i < 8; i++){
100029a8:	e0bffe17 	ldw	r2,-8(fp)
100029ac:	10800044 	addi	r2,r2,1
100029b0:	e0bffe15 	stw	r2,-8(fp)
100029b4:	e0bffe17 	ldw	r2,-8(fp)
100029b8:	10800210 	cmplti	r2,r2,8
100029bc:	103fe71e 	bne	r2,zero,1000295c <__alt_data_end+0xf800295c>
            force_It_Inside_Map(kirby, kirby->map);
            force_It_On_Ground(kirby, kirby->map);
            upload_Kirby_Info(kirby);
            frame_Time(KIRBY_FRAME_TIME_KICK);
        }
        for (i = 0; i < 6; i++)
100029c0:	e03ffe15 	stw	zero,-8(fp)
100029c4:	00001606 	br	10002a20 <kirby_Kick_Ass+0x238>
        {
            kirby->x -= (KIRBY_KICK_X - 1);
100029c8:	e0bfff17 	ldw	r2,-4(fp)
100029cc:	10800017 	ldw	r2,0(r2)
100029d0:	10ffff84 	addi	r3,r2,-2
100029d4:	e0bfff17 	ldw	r2,-4(fp)
100029d8:	10c00015 	stw	r3,0(r2)
            force_It_Inside_Map(kirby, kirby->map);
100029dc:	e0bfff17 	ldw	r2,-4(fp)
100029e0:	10800217 	ldw	r2,8(r2)
100029e4:	100b883a 	mov	r5,r2
100029e8:	e13fff17 	ldw	r4,-4(fp)
100029ec:	0001ce00 	call	10001ce0 <force_It_Inside_Map>
            force_It_On_Ground(kirby, kirby->map);
100029f0:	e0bfff17 	ldw	r2,-4(fp)
100029f4:	10800217 	ldw	r2,8(r2)
100029f8:	100b883a 	mov	r5,r2
100029fc:	e13fff17 	ldw	r4,-4(fp)
10002a00:	0001c380 	call	10001c38 <force_It_On_Ground>
            upload_Kirby_Info(kirby);
10002a04:	e13fff17 	ldw	r4,-4(fp)
10002a08:	00006300 	call	10000630 <upload_Kirby_Info>
            frame_Time(KIRBY_FRAME_TIME_KICK);
10002a0c:	0103e804 	movi	r4,4000
10002a10:	00020500 	call	10002050 <frame_Time>
            force_It_Inside_Map(kirby, kirby->map);
            force_It_On_Ground(kirby, kirby->map);
            upload_Kirby_Info(kirby);
            frame_Time(KIRBY_FRAME_TIME_KICK);
        }
        for (i = 0; i < 6; i++)
10002a14:	e0bffe17 	ldw	r2,-8(fp)
10002a18:	10800044 	addi	r2,r2,1
10002a1c:	e0bffe15 	stw	r2,-8(fp)
10002a20:	e0bffe17 	ldw	r2,-8(fp)
10002a24:	10800190 	cmplti	r2,r2,6
10002a28:	103fe71e 	bne	r2,zero,100029c8 <__alt_data_end+0xf80029c8>
            force_It_Inside_Map(kirby, kirby->map);
            force_It_On_Ground(kirby, kirby->map);
            upload_Kirby_Info(kirby);
            frame_Time(KIRBY_FRAME_TIME_KICK);
        }
        kirby->x -= (KIRBY_KICK_X - 2);
10002a2c:	e0bfff17 	ldw	r2,-4(fp)
10002a30:	10800017 	ldw	r2,0(r2)
10002a34:	10ffffc4 	addi	r3,r2,-1
10002a38:	e0bfff17 	ldw	r2,-4(fp)
10002a3c:	10c00015 	stw	r3,0(r2)
        force_It_Inside_Map(kirby, kirby->map);
10002a40:	e0bfff17 	ldw	r2,-4(fp)
10002a44:	10800217 	ldw	r2,8(r2)
10002a48:	100b883a 	mov	r5,r2
10002a4c:	e13fff17 	ldw	r4,-4(fp)
10002a50:	0001ce00 	call	10001ce0 <force_It_Inside_Map>
        force_It_On_Ground(kirby, kirby->map);
10002a54:	e0bfff17 	ldw	r2,-4(fp)
10002a58:	10800217 	ldw	r2,8(r2)
10002a5c:	100b883a 	mov	r5,r2
10002a60:	e13fff17 	ldw	r4,-4(fp)
10002a64:	0001c380 	call	10001c38 <force_It_On_Ground>
        upload_Kirby_Info(kirby);
10002a68:	e13fff17 	ldw	r4,-4(fp)
10002a6c:	00006300 	call	10000630 <upload_Kirby_Info>
        frame_Time(KIRBY_FRAME_TIME_KICK);
10002a70:	0103e804 	movi	r4,4000
10002a74:	00020500 	call	10002050 <frame_Time>
    }
    

}
10002a78:	0001883a 	nop
10002a7c:	e037883a 	mov	sp,fp
10002a80:	dfc00117 	ldw	ra,4(sp)
10002a84:	df000017 	ldw	fp,0(sp)
10002a88:	dec00204 	addi	sp,sp,8
10002a8c:	f800283a 	ret

10002a90 <kirby_Screen_Center_X>:

int kirby_Screen_Center_X(int x) {
10002a90:	defffe04 	addi	sp,sp,-8
10002a94:	df000115 	stw	fp,4(sp)
10002a98:	df000104 	addi	fp,sp,4
10002a9c:	e13fff15 	stw	r4,-4(fp)
    if (x <= (SCREEN_WIDTH/2)) {
10002aa0:	e0bfff17 	ldw	r2,-4(fp)
10002aa4:	10801d88 	cmpgei	r2,r2,118
10002aa8:	1000021e 	bne	r2,zero,10002ab4 <kirby_Screen_Center_X+0x24>
        return x;
10002aac:	e0bfff17 	ldw	r2,-4(fp)
10002ab0:	00000a06 	br	10002adc <kirby_Screen_Center_X+0x4c>
    } else if ((x > (SCREEN_WIDTH/2)) && (x < (MAP_0_WIDTH - SCREEN_WIDTH/2))) {
10002ab4:	e0bfff17 	ldw	r2,-4(fp)
10002ab8:	10801d90 	cmplti	r2,r2,118
10002abc:	1000051e 	bne	r2,zero,10002ad4 <kirby_Screen_Center_X+0x44>
10002ac0:	e0bfff17 	ldw	r2,-4(fp)
10002ac4:	10811288 	cmpgei	r2,r2,1098
10002ac8:	1000021e 	bne	r2,zero,10002ad4 <kirby_Screen_Center_X+0x44>
        return (SCREEN_WIDTH/2);
10002acc:	00801d44 	movi	r2,117
10002ad0:	00000206 	br	10002adc <kirby_Screen_Center_X+0x4c>
    } else {
        return (x - MAP_0_WIDTH + SCREEN_WIDTH);
10002ad4:	e0bfff17 	ldw	r2,-4(fp)
10002ad8:	10bf0ac4 	addi	r2,r2,-981
    }
}
10002adc:	e037883a 	mov	sp,fp
10002ae0:	df000017 	ldw	fp,0(sp)
10002ae4:	dec00104 	addi	sp,sp,4
10002ae8:	f800283a 	ret

10002aec <main>:
#include "test.h"
#include "usb_main.h"
#include "parameter.h"
#include "game_logic.h"

int main(void) {
10002aec:	defffe04 	addi	sp,sp,-8
10002af0:	dfc00115 	stw	ra,4(sp)
10002af4:	df000015 	stw	fp,0(sp)
10002af8:	d839883a 	mov	fp,sp
    GameStart();
10002afc:	000026c0 	call	1000026c <GameStart>

    printf("Interrupt takes place!");
10002b00:	01040074 	movhi	r4,4097
10002b04:	21118f04 	addi	r4,r4,17980
10002b08:	00050ac0 	call	100050ac <printf>
    return 0;
10002b0c:	0005883a 	mov	r2,zero
}
10002b10:	e037883a 	mov	sp,fp
10002b14:	dfc00117 	ldw	ra,4(sp)
10002b18:	df000017 	ldw	fp,0(sp)
10002b1c:	dec00204 	addi	sp,sp,8
10002b20:	f800283a 	ret

10002b24 <initial_Star>:

#include "star.h"
#include "parameter.h"


void initial_Star(Star * star) {
10002b24:	defffe04 	addi	sp,sp,-8
10002b28:	df000115 	stw	fp,4(sp)
10002b2c:	df000104 	addi	fp,sp,4
10002b30:	e13fff15 	stw	r4,-4(fp)
    star->x = 0;
10002b34:	e0bfff17 	ldw	r2,-4(fp)
10002b38:	10000015 	stw	zero,0(r2)
    star->y = 0;
10002b3c:	e0bfff17 	ldw	r2,-4(fp)
10002b40:	10000115 	stw	zero,4(r2)
    star->map_x = 0;
10002b44:	e0bfff17 	ldw	r2,-4(fp)
10002b48:	10000215 	stw	zero,8(r2)
    star->idx = 0;
10002b4c:	e0bfff17 	ldw	r2,-4(fp)
10002b50:	10000315 	stw	zero,12(r2)
    star->appear = 0;
10002b54:	e0bfff17 	ldw	r2,-4(fp)
10002b58:	10000415 	stw	zero,16(r2)
    star->is_left = 0;
10002b5c:	e0bfff17 	ldw	r2,-4(fp)
10002b60:	10000515 	stw	zero,20(r2)
}
10002b64:	0001883a 	nop
10002b68:	e037883a 	mov	sp,fp
10002b6c:	df000017 	ldw	fp,0(sp)
10002b70:	dec00104 	addi	sp,sp,4
10002b74:	f800283a 	ret

10002b78 <spit_Star>:

void spit_Star(Kirby * kirby, Star * star) {
10002b78:	defffc04 	addi	sp,sp,-16
10002b7c:	dfc00315 	stw	ra,12(sp)
10002b80:	df000215 	stw	fp,8(sp)
10002b84:	df000204 	addi	fp,sp,8
10002b88:	e13ffe15 	stw	r4,-8(fp)
10002b8c:	e17fff15 	stw	r5,-4(fp)
    update_Star(kirby, star);
10002b90:	e17fff17 	ldw	r5,-4(fp)
10002b94:	e13ffe17 	ldw	r4,-8(fp)
10002b98:	0002c400 	call	10002c40 <update_Star>
    upload_Star_Info(star);
10002b9c:	e13fff17 	ldw	r4,-4(fp)
10002ba0:	0002bc40 	call	10002bc4 <upload_Star_Info>
    frame_Time(STAR_FRAME_TIME);
10002ba4:	0103e804 	movi	r4,4000
10002ba8:	00020500 	call	10002050 <frame_Time>
}
10002bac:	0001883a 	nop
10002bb0:	e037883a 	mov	sp,fp
10002bb4:	dfc00117 	ldw	ra,4(sp)
10002bb8:	df000017 	ldw	fp,0(sp)
10002bbc:	dec00204 	addi	sp,sp,8
10002bc0:	f800283a 	ret

10002bc4 <upload_Star_Info>:

void upload_Star_Info(Star * star) {
10002bc4:	defffe04 	addi	sp,sp,-8
10002bc8:	df000115 	stw	fp,4(sp)
10002bcc:	df000104 	addi	fp,sp,4
10002bd0:	e13fff15 	stw	r4,-4(fp)
//    printf("\n**************** Spit Star - Load Registers ****************\n");
    REG_3_STAR = (star->x << 24) | (star->y << 16) | (star->idx << 14) | (star->is_left << 13) | (star->appear << 12);
10002bd4:	d095f117 	ldw	r2,22468(gp)
10002bd8:	10800304 	addi	r2,r2,12
10002bdc:	e0ffff17 	ldw	r3,-4(fp)
10002be0:	18c00017 	ldw	r3,0(r3)
10002be4:	1808963a 	slli	r4,r3,24
10002be8:	e0ffff17 	ldw	r3,-4(fp)
10002bec:	18c00117 	ldw	r3,4(r3)
10002bf0:	1806943a 	slli	r3,r3,16
10002bf4:	20c8b03a 	or	r4,r4,r3
10002bf8:	e0ffff17 	ldw	r3,-4(fp)
10002bfc:	18c00317 	ldw	r3,12(r3)
10002c00:	180693ba 	slli	r3,r3,14
10002c04:	20c8b03a 	or	r4,r4,r3
10002c08:	e0ffff17 	ldw	r3,-4(fp)
10002c0c:	18c00517 	ldw	r3,20(r3)
10002c10:	1806937a 	slli	r3,r3,13
10002c14:	20c8b03a 	or	r4,r4,r3
10002c18:	e0ffff17 	ldw	r3,-4(fp)
10002c1c:	18c00417 	ldw	r3,16(r3)
10002c20:	1806933a 	slli	r3,r3,12
10002c24:	20c6b03a 	or	r3,r4,r3
10002c28:	10c00015 	stw	r3,0(r2)
}
10002c2c:	0001883a 	nop
10002c30:	e037883a 	mov	sp,fp
10002c34:	df000017 	ldw	fp,0(sp)
10002c38:	dec00104 	addi	sp,sp,4
10002c3c:	f800283a 	ret

10002c40 <update_Star>:

void update_Star(Kirby * kirby, Star * star) {
10002c40:	defffc04 	addi	sp,sp,-16
10002c44:	dfc00315 	stw	ra,12(sp)
10002c48:	df000215 	stw	fp,8(sp)
10002c4c:	df000204 	addi	fp,sp,8
10002c50:	e13ffe15 	stw	r4,-8(fp)
10002c54:	e17fff15 	stw	r5,-4(fp)
    if ((kirby->image == 1) && (kirby->action == 4) && (kirby->frame == 2)) {
10002c58:	e0bffe17 	ldw	r2,-8(fp)
10002c5c:	10800317 	ldw	r2,12(r2)
10002c60:	10800058 	cmpnei	r2,r2,1
10002c64:	1000331e 	bne	r2,zero,10002d34 <update_Star+0xf4>
10002c68:	e0bffe17 	ldw	r2,-8(fp)
10002c6c:	10800617 	ldw	r2,24(r2)
10002c70:	10800118 	cmpnei	r2,r2,4
10002c74:	10002f1e 	bne	r2,zero,10002d34 <update_Star+0xf4>
10002c78:	e0bffe17 	ldw	r2,-8(fp)
10002c7c:	10800717 	ldw	r2,28(r2)
10002c80:	10800098 	cmpnei	r2,r2,2
10002c84:	10002b1e 	bne	r2,zero,10002d34 <update_Star+0xf4>
        // spit star
        star->appear = 1;
10002c88:	e0bfff17 	ldw	r2,-4(fp)
10002c8c:	00c00044 	movi	r3,1
10002c90:	10c00415 	stw	r3,16(r2)
        star->idx = 0;
10002c94:	e0bfff17 	ldw	r2,-4(fp)
10002c98:	10000315 	stw	zero,12(r2)
        star->is_left = kirby->is_left;
10002c9c:	e0bffe17 	ldw	r2,-8(fp)
10002ca0:	10c00417 	ldw	r3,16(r2)
10002ca4:	e0bfff17 	ldw	r2,-4(fp)
10002ca8:	10c00515 	stw	r3,20(r2)
        if (star->is_left == 0) { // Right
10002cac:	e0bfff17 	ldw	r2,-4(fp)
10002cb0:	10800517 	ldw	r2,20(r2)
10002cb4:	10000d1e 	bne	r2,zero,10002cec <update_Star+0xac>
            star->x = kirby_Screen_Center_X(kirby->x) + 31;
10002cb8:	e0bffe17 	ldw	r2,-8(fp)
10002cbc:	10800017 	ldw	r2,0(r2)
10002cc0:	1009883a 	mov	r4,r2
10002cc4:	0002a900 	call	10002a90 <kirby_Screen_Center_X>
10002cc8:	10c007c4 	addi	r3,r2,31
10002ccc:	e0bfff17 	ldw	r2,-4(fp)
10002cd0:	10c00015 	stw	r3,0(r2)
            star->map_x = kirby->x + 31;
10002cd4:	e0bffe17 	ldw	r2,-8(fp)
10002cd8:	10800017 	ldw	r2,0(r2)
10002cdc:	10c007c4 	addi	r3,r2,31
10002ce0:	e0bfff17 	ldw	r2,-4(fp)
10002ce4:	10c00215 	stw	r3,8(r2)
10002ce8:	00000c06 	br	10002d1c <update_Star+0xdc>
        } else { // Left
            star->x = kirby_Screen_Center_X(kirby->x) - 31;
10002cec:	e0bffe17 	ldw	r2,-8(fp)
10002cf0:	10800017 	ldw	r2,0(r2)
10002cf4:	1009883a 	mov	r4,r2
10002cf8:	0002a900 	call	10002a90 <kirby_Screen_Center_X>
10002cfc:	10fff844 	addi	r3,r2,-31
10002d00:	e0bfff17 	ldw	r2,-4(fp)
10002d04:	10c00015 	stw	r3,0(r2)
            star->map_x = kirby->x - 31;
10002d08:	e0bffe17 	ldw	r2,-8(fp)
10002d0c:	10800017 	ldw	r2,0(r2)
10002d10:	10fff844 	addi	r3,r2,-31
10002d14:	e0bfff17 	ldw	r2,-4(fp)
10002d18:	10c00215 	stw	r3,8(r2)
        }
        star->y = kirby->y + 3;
10002d1c:	e0bffe17 	ldw	r2,-8(fp)
10002d20:	10800117 	ldw	r2,4(r2)
10002d24:	10c000c4 	addi	r3,r2,3
10002d28:	e0bfff17 	ldw	r2,-4(fp)
10002d2c:	10c00115 	stw	r3,4(r2)
        return;
10002d30:	00005106 	br	10002e78 <update_Star+0x238>
    }

    if (star->appear == 1) {
10002d34:	e0bfff17 	ldw	r2,-4(fp)
10002d38:	10800417 	ldw	r2,16(r2)
10002d3c:	10800058 	cmpnei	r2,r2,1
10002d40:	10004d1e 	bne	r2,zero,10002e78 <update_Star+0x238>
        star->idx = (star->idx + 1) % 4; // 4 frames for 1 star-cycle
10002d44:	e0bfff17 	ldw	r2,-4(fp)
10002d48:	10800317 	ldw	r2,12(r2)
10002d4c:	10c00044 	addi	r3,r2,1
10002d50:	00a00034 	movhi	r2,32768
10002d54:	108000c4 	addi	r2,r2,3
10002d58:	1884703a 	and	r2,r3,r2
10002d5c:	1000040e 	bge	r2,zero,10002d70 <update_Star+0x130>
10002d60:	10bfffc4 	addi	r2,r2,-1
10002d64:	00ffff04 	movi	r3,-4
10002d68:	10c4b03a 	or	r2,r2,r3
10002d6c:	10800044 	addi	r2,r2,1
10002d70:	1007883a 	mov	r3,r2
10002d74:	e0bfff17 	ldw	r2,-4(fp)
10002d78:	10c00315 	stw	r3,12(r2)

        // 1 - Edge detection: L/R
        if (star->is_left == 0) {
10002d7c:	e0bfff17 	ldw	r2,-4(fp)
10002d80:	10800517 	ldw	r2,20(r2)
10002d84:	10001e1e 	bne	r2,zero,10002e00 <update_Star+0x1c0>
            star->x += STAR_STEP_X;
10002d88:	e0bfff17 	ldw	r2,-4(fp)
10002d8c:	10800017 	ldw	r2,0(r2)
10002d90:	10c00104 	addi	r3,r2,4
10002d94:	e0bfff17 	ldw	r2,-4(fp)
10002d98:	10c00015 	stw	r3,0(r2)
            star->map_x += STAR_STEP_X;
10002d9c:	e0bfff17 	ldw	r2,-4(fp)
10002da0:	10800217 	ldw	r2,8(r2)
10002da4:	10c00104 	addi	r3,r2,4
10002da8:	e0bfff17 	ldw	r2,-4(fp)
10002dac:	10c00215 	stw	r3,8(r2)

            // If meet edges of map or screen
            if ((get_Wall_Info(star->map_x + 22, star->y + 7, 0) == 1) || ((star->x + 22) > 233)) {
10002db0:	e0bfff17 	ldw	r2,-4(fp)
10002db4:	10800217 	ldw	r2,8(r2)
10002db8:	10c00584 	addi	r3,r2,22
10002dbc:	e0bfff17 	ldw	r2,-4(fp)
10002dc0:	10800117 	ldw	r2,4(r2)
10002dc4:	108001c4 	addi	r2,r2,7
10002dc8:	000d883a 	mov	r6,zero
10002dcc:	100b883a 	mov	r5,r2
10002dd0:	1809883a 	mov	r4,r3
10002dd4:	00025700 	call	10002570 <get_Wall_Info>
10002dd8:	10800060 	cmpeqi	r2,r2,1
10002ddc:	1000051e 	bne	r2,zero,10002df4 <update_Star+0x1b4>
10002de0:	e0bfff17 	ldw	r2,-4(fp)
10002de4:	10800017 	ldw	r2,0(r2)
10002de8:	10800584 	addi	r2,r2,22
10002dec:	10803a90 	cmplti	r2,r2,234
10002df0:	1000201e 	bne	r2,zero,10002e74 <update_Star+0x234>
                star->appear = 0;
10002df4:	e0bfff17 	ldw	r2,-4(fp)
10002df8:	10000415 	stw	zero,16(r2)
                return;
10002dfc:	00001e06 	br	10002e78 <update_Star+0x238>
            }
        }
        else {
            star->x -= STAR_STEP_X;
10002e00:	e0bfff17 	ldw	r2,-4(fp)
10002e04:	10800017 	ldw	r2,0(r2)
10002e08:	10ffff04 	addi	r3,r2,-4
10002e0c:	e0bfff17 	ldw	r2,-4(fp)
10002e10:	10c00015 	stw	r3,0(r2)
            star->map_x -= STAR_STEP_X;
10002e14:	e0bfff17 	ldw	r2,-4(fp)
10002e18:	10800217 	ldw	r2,8(r2)
10002e1c:	10ffff04 	addi	r3,r2,-4
10002e20:	e0bfff17 	ldw	r2,-4(fp)
10002e24:	10c00215 	stw	r3,8(r2)

            // If meet edges of map or screen
            if ((get_Wall_Info(star->map_x + 1, star->y + 7, 0) == 1) || ((star->x + 1) <= 0)) {
10002e28:	e0bfff17 	ldw	r2,-4(fp)
10002e2c:	10800217 	ldw	r2,8(r2)
10002e30:	10c00044 	addi	r3,r2,1
10002e34:	e0bfff17 	ldw	r2,-4(fp)
10002e38:	10800117 	ldw	r2,4(r2)
10002e3c:	108001c4 	addi	r2,r2,7
10002e40:	000d883a 	mov	r6,zero
10002e44:	100b883a 	mov	r5,r2
10002e48:	1809883a 	mov	r4,r3
10002e4c:	00025700 	call	10002570 <get_Wall_Info>
10002e50:	10800060 	cmpeqi	r2,r2,1
10002e54:	1000041e 	bne	r2,zero,10002e68 <update_Star+0x228>
10002e58:	e0bfff17 	ldw	r2,-4(fp)
10002e5c:	10800017 	ldw	r2,0(r2)
10002e60:	10800044 	addi	r2,r2,1
10002e64:	00800316 	blt	zero,r2,10002e74 <update_Star+0x234>
                star->appear = 0;
10002e68:	e0bfff17 	ldw	r2,-4(fp)
10002e6c:	10000415 	stw	zero,16(r2)
                return;
10002e70:	00000106 	br	10002e78 <update_Star+0x238>
            //
            star->appear = 0;
            return;
        }

        return;
10002e74:	0001883a 	nop
    }
}
10002e78:	e037883a 	mov	sp,fp
10002e7c:	dfc00117 	ldw	ra,4(sp)
10002e80:	df000017 	ldw	fp,0(sp)
10002e84:	dec00204 	addi	sp,sp,8
10002e88:	f800283a 	ret

10002e8c <test_keyboard>:
#include "parameter.h"




void test_keyboard(int keycode) {
10002e8c:	defffd04 	addi	sp,sp,-12
10002e90:	dfc00215 	stw	ra,8(sp)
10002e94:	df000115 	stw	fp,4(sp)
10002e98:	df000104 	addi	fp,sp,4
10002e9c:	e13fff15 	stw	r4,-4(fp)

    printf("########Test KeyBoard########");
10002ea0:	01040074 	movhi	r4,4097
10002ea4:	21119504 	addi	r4,r4,18004
10002ea8:	00050ac0 	call	100050ac <printf>
    switch (keycode){
10002eac:	e0bfff17 	ldw	r2,-4(fp)
10002eb0:	10c001e0 	cmpeqi	r3,r2,7
10002eb4:	1800151e 	bne	r3,zero,10002f0c <test_keyboard+0x80>
10002eb8:	10c00208 	cmpgei	r3,r2,8
10002ebc:	1800031e 	bne	r3,zero,10002ecc <test_keyboard+0x40>
10002ec0:	10800120 	cmpeqi	r2,r2,4
10002ec4:	10000d1e 	bne	r2,zero,10002efc <test_keyboard+0x70>
10002ec8:	00001406 	br	10002f1c <test_keyboard+0x90>
10002ecc:	10c005a0 	cmpeqi	r3,r2,22
10002ed0:	1800061e 	bne	r3,zero,10002eec <test_keyboard+0x60>
10002ed4:	108006a0 	cmpeqi	r2,r2,26
10002ed8:	10001026 	beq	r2,zero,10002f1c <test_keyboard+0x90>
        case 0x001a:  // h1A, "w"
            REG_0_MAP_INFO = 1 << 16;
10002edc:	d095f217 	ldw	r2,22472(gp)
10002ee0:	00c00074 	movhi	r3,1
10002ee4:	10c00015 	stw	r3,0(r2)
            break;
10002ee8:	00000f06 	br	10002f28 <test_keyboard+0x9c>
        case 0x0016:  // h16, "s"
            REG_0_MAP_INFO = 2 << 16;
10002eec:	d095f217 	ldw	r2,22472(gp)
10002ef0:	00c000b4 	movhi	r3,2
10002ef4:	10c00015 	stw	r3,0(r2)
            break;
10002ef8:	00000b06 	br	10002f28 <test_keyboard+0x9c>
        case 0x0004:   // h04, "a"
            REG_0_MAP_INFO = 1 << 16;
10002efc:	d095f217 	ldw	r2,22472(gp)
10002f00:	00c00074 	movhi	r3,1
10002f04:	10c00015 	stw	r3,0(r2)
            break;
10002f08:	00000706 	br	10002f28 <test_keyboard+0x9c>
        case 0x0007:   // h07, "d"
            REG_0_MAP_INFO = 2 << 16;
10002f0c:	d095f217 	ldw	r2,22472(gp)
10002f10:	00c000b4 	movhi	r3,2
10002f14:	10c00015 	stw	r3,0(r2)
            break;
10002f18:	00000306 	br	10002f28 <test_keyboard+0x9c>
        default:
            REG_0_MAP_INFO = 0 << 16;
10002f1c:	d095f217 	ldw	r2,22472(gp)
10002f20:	10000015 	stw	zero,0(r2)
            break;
10002f24:	0001883a 	nop
    }
    printf("######### End Test ##########");
10002f28:	01040074 	movhi	r4,4097
10002f2c:	21119d04 	addi	r4,r4,18036
10002f30:	00050ac0 	call	100050ac <printf>
}
10002f34:	0001883a 	nop
10002f38:	e037883a 	mov	sp,fp
10002f3c:	dfc00117 	ldw	ra,4(sp)
10002f40:	df000017 	ldw	fp,0(sp)
10002f44:	dec00204 	addi	sp,sp,8
10002f48:	f800283a 	ret

10002f4c <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
10002f4c:	defffc04 	addi	sp,sp,-16
10002f50:	dfc00315 	stw	ra,12(sp)
10002f54:	df000215 	stw	fp,8(sp)
10002f58:	df000204 	addi	fp,sp,8
10002f5c:	2007883a 	mov	r3,r4
10002f60:	2805883a 	mov	r2,r5
10002f64:	e0fffe0d 	sth	r3,-8(fp)
10002f68:	e0bfff0d 	sth	r2,-4(fp)
	//write address of registers to HDI
	IO_write(HPI_ADDR, Address);
10002f6c:	e0bffe0b 	ldhu	r2,-8(fp)
10002f70:	100b883a 	mov	r5,r2
10002f74:	01000084 	movi	r4,2
10002f78:	00004a00 	call	100004a0 <IO_write>

	//write data to address in HDI
	IO_write(HPI_DATA, Data);
10002f7c:	e0bfff0b 	ldhu	r2,-4(fp)
10002f80:	100b883a 	mov	r5,r2
10002f84:	0009883a 	mov	r4,zero
10002f88:	00004a00 	call	100004a0 <IO_write>
}
10002f8c:	0001883a 	nop
10002f90:	e037883a 	mov	sp,fp
10002f94:	dfc00117 	ldw	ra,4(sp)
10002f98:	df000017 	ldw	fp,0(sp)
10002f9c:	dec00204 	addi	sp,sp,8
10002fa0:	f800283a 	ret

10002fa4 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10002fa4:	defffd04 	addi	sp,sp,-12
10002fa8:	dfc00215 	stw	ra,8(sp)
10002fac:	df000115 	stw	fp,4(sp)
10002fb0:	df000104 	addi	fp,sp,4
10002fb4:	2005883a 	mov	r2,r4
10002fb8:	e0bfff0d 	sth	r2,-4(fp)
	//write address of registers to HDI
	IO_write(HPI_ADDR, Address);
10002fbc:	e0bfff0b 	ldhu	r2,-4(fp)
10002fc0:	100b883a 	mov	r5,r2
10002fc4:	01000084 	movi	r4,2
10002fc8:	00004a00 	call	100004a0 <IO_write>

	//read the data stored in HPI address and return the value
	return IO_read(HPI_DATA);
10002fcc:	0009883a 	mov	r4,zero
10002fd0:	000051c0 	call	1000051c <IO_read>
}
10002fd4:	e037883a 	mov	sp,fp
10002fd8:	dfc00117 	ldw	ra,4(sp)
10002fdc:	df000017 	ldw	fp,0(sp)
10002fe0:	dec00204 	addi	sp,sp,8
10002fe4:	f800283a 	ret

10002fe8 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10002fe8:	defffe04 	addi	sp,sp,-8
10002fec:	dfc00115 	stw	ra,4(sp)
10002ff0:	df000015 	stw	fp,0(sp)
10002ff4:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
10002ff8:	017e9414 	movui	r5,64080
10002ffc:	01000044 	movi	r4,1
10003000:	00004a00 	call	100004a0 <IO_write>
	usleep(100000);
10003004:	010000b4 	movhi	r4,2
10003008:	2121a804 	addi	r4,r4,-31072
1000300c:	00126380 	call	10012638 <usleep>
	printf("[USB INIT]:reset finished!\n");
10003010:	01040074 	movhi	r4,4097
10003014:	2111a504 	addi	r4,r4,18068
10003018:	00051a80 	call	100051a8 <puts>

	usleep(500000);
1000301c:	01000234 	movhi	r4,8
10003020:	21284804 	addi	r4,r4,-24288
10003024:	00126380 	call	10012638 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
10003028:	01040074 	movhi	r4,4097
1000302c:	2111ac04 	addi	r4,r4,18096
10003030:	00051a80 	call	100051a8 <puts>
	IO_read(HPI_MAILBOX);
10003034:	01000044 	movi	r4,1
10003038:	000051c0 	call	1000051c <IO_read>
	IO_read(HPI_STATUS);
1000303c:	010000c4 	movi	r4,3
10003040:	000051c0 	call	1000051c <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10003044:	01005104 	movi	r4,324
10003048:	0002fa40 	call	10002fa4 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
1000304c:	000b883a 	mov	r5,zero
10003050:	01005104 	movi	r4,324
10003054:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
10003058:	01005204 	movi	r4,328
1000305c:	0002fa40 	call	10002fa4 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10003060:	000b883a 	mov	r5,zero
10003064:	01005204 	movi	r4,328
10003068:	0002f4c0 	call	10002f4c <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
1000306c:	017fffd4 	movui	r5,65535
10003070:	01302414 	movui	r4,49296
10003074:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
10003078:	017fffd4 	movui	r5,65535
1000307c:	01302c14 	movui	r4,49328
10003080:	0002f4c0 	call	10002f4c <UsbWrite>
}
10003084:	0001883a 	nop
10003088:	e037883a 	mov	sp,fp
1000308c:	dfc00117 	ldw	ra,4(sp)
10003090:	df000017 	ldw	fp,0(sp)
10003094:	dec00204 	addi	sp,sp,8
10003098:	f800283a 	ret

1000309c <UsbSetAddress>:


void UsbSetAddress()
{
1000309c:	defffe04 	addi	sp,sp,-8
100030a0:	dfc00115 	stw	ra,4(sp)
100030a4:	df000015 	stw	fp,0(sp)
100030a8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100030ac:	01414004 	movi	r5,1280
100030b0:	01000084 	movi	r4,2
100030b4:	00004a00 	call	100004a0 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
100030b8:	01414304 	movi	r5,1292
100030bc:	0009883a 	mov	r4,zero
100030c0:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100030c4:	01400204 	movi	r5,8
100030c8:	0009883a 	mov	r4,zero
100030cc:	00004a00 	call	100004a0 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
100030d0:	01403404 	movi	r5,208
100030d4:	0009883a 	mov	r4,zero
100030d8:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0001);
100030dc:	01400044 	movi	r5,1
100030e0:	0009883a 	mov	r4,zero
100030e4:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);
100030e8:	014004c4 	movi	r5,19
100030ec:	0009883a 	mov	r4,zero
100030f0:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0514);
100030f4:	01414504 	movi	r5,1300
100030f8:	0009883a 	mov	r4,zero
100030fc:	00004a00 	call	100004a0 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
10003100:	01414004 	movi	r5,1280
10003104:	0009883a 	mov	r4,zero
10003108:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0002);
1000310c:	01400084 	movi	r5,2
10003110:	0009883a 	mov	r4,zero
10003114:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003118:	000b883a 	mov	r5,zero
1000311c:	0009883a 	mov	r4,zero
10003120:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003124:	000b883a 	mov	r5,zero
10003128:	0009883a 	mov	r4,zero
1000312c:	00004a00 	call	100004a0 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10003130:	000b883a 	mov	r5,zero
10003134:	0009883a 	mov	r4,zero
10003138:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);//
1000313c:	000b883a 	mov	r5,zero
10003140:	0009883a 	mov	r4,zero
10003144:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0090);//
10003148:	01402404 	movi	r5,144
1000314c:	0009883a 	mov	r4,zero
10003150:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0041);
10003154:	01401044 	movi	r5,65
10003158:	0009883a 	mov	r4,zero
1000315c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003160:	014004c4 	movi	r5,19
10003164:	0009883a 	mov	r4,zero
10003168:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000316c:	000b883a 	mov	r5,zero
10003170:	0009883a 	mov	r4,zero
10003174:	00004a00 	call	100004a0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003178:	01414004 	movi	r5,1280
1000317c:	01006c04 	movi	r4,432
10003180:	0002f4c0 	call	10002f4c <UsbWrite>
}
10003184:	0001883a 	nop
10003188:	e037883a 	mov	sp,fp
1000318c:	dfc00117 	ldw	ra,4(sp)
10003190:	df000017 	ldw	fp,0(sp)
10003194:	dec00204 	addi	sp,sp,8
10003198:	f800283a 	ret

1000319c <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
1000319c:	defffe04 	addi	sp,sp,-8
100031a0:	dfc00115 	stw	ra,4(sp)
100031a4:	df000015 	stw	fp,0(sp)
100031a8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100031ac:	01414004 	movi	r5,1280
100031b0:	01000084 	movi	r4,2
100031b4:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x050C);
100031b8:	01414304 	movi	r5,1292
100031bc:	0009883a 	mov	r4,zero
100031c0:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100031c4:	01400204 	movi	r5,8
100031c8:	0009883a 	mov	r4,zero
100031cc:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100031d0:	0140b404 	movi	r5,720
100031d4:	0009883a 	mov	r4,zero
100031d8:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0001);
100031dc:	01400044 	movi	r5,1
100031e0:	0009883a 	mov	r4,zero
100031e4:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);
100031e8:	014004c4 	movi	r5,19
100031ec:	0009883a 	mov	r4,zero
100031f0:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0514);
100031f4:	01414504 	movi	r5,1300
100031f8:	0009883a 	mov	r4,zero
100031fc:	00004a00 	call	100004a0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10003200:	0141a004 	movi	r5,1664
10003204:	0009883a 	mov	r4,zero
10003208:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
1000320c:	01404004 	movi	r5,256
10003210:	0009883a 	mov	r4,zero
10003214:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003218:	000b883a 	mov	r5,zero
1000321c:	0009883a 	mov	r4,zero
10003220:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0008);
10003224:	01400204 	movi	r5,8
10003228:	0009883a 	mov	r4,zero
1000322c:	00004a00 	call	100004a0 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
10003230:	01414b04 	movi	r5,1324
10003234:	0009883a 	mov	r4,zero
10003238:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0008);//
1000323c:	01400204 	movi	r5,8
10003240:	0009883a 	mov	r4,zero
10003244:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0290);//
10003248:	0140a404 	movi	r5,656
1000324c:	0009883a 	mov	r4,zero
10003250:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0041);
10003254:	01401044 	movi	r5,65
10003258:	0009883a 	mov	r4,zero
1000325c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003260:	014004c4 	movi	r5,19
10003264:	0009883a 	mov	r4,zero
10003268:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0520);
1000326c:	01414804 	movi	r5,1312
10003270:	0009883a 	mov	r4,zero
10003274:	00004a00 	call	100004a0 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
10003278:	000b883a 	mov	r5,zero
1000327c:	0009883a 	mov	r4,zero
10003280:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10003284:	000b883a 	mov	r5,zero
10003288:	0009883a 	mov	r4,zero
1000328c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
10003290:	01408404 	movi	r5,528
10003294:	0009883a 	mov	r4,zero
10003298:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0041);
1000329c:	01401044 	movi	r5,65
100032a0:	0009883a 	mov	r4,zero
100032a4:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);
100032a8:	014004c4 	movi	r5,19
100032ac:	0009883a 	mov	r4,zero
100032b0:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);
100032b4:	000b883a 	mov	r5,zero
100032b8:	0009883a 	mov	r4,zero
100032bc:	00004a00 	call	100004a0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100032c0:	01414004 	movi	r5,1280
100032c4:	01006c04 	movi	r4,432
100032c8:	0002f4c0 	call	10002f4c <UsbWrite>
}
100032cc:	0001883a 	nop
100032d0:	e037883a 	mov	sp,fp
100032d4:	dfc00117 	ldw	ra,4(sp)
100032d8:	df000017 	ldw	fp,0(sp)
100032dc:	dec00204 	addi	sp,sp,8
100032e0:	f800283a 	ret

100032e4 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
100032e4:	defffe04 	addi	sp,sp,-8
100032e8:	dfc00115 	stw	ra,4(sp)
100032ec:	df000015 	stw	fp,0(sp)
100032f0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100032f4:	01414004 	movi	r5,1280
100032f8:	01000084 	movi	r4,2
100032fc:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10003300:	01414304 	movi	r5,1292
10003304:	0009883a 	mov	r4,zero
10003308:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000330c:	01400204 	movi	r5,8
10003310:	0009883a 	mov	r4,zero
10003314:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10003318:	0140b404 	movi	r5,720
1000331c:	0009883a 	mov	r4,zero
10003320:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10003324:	01400044 	movi	r5,1
10003328:	0009883a 	mov	r4,zero
1000332c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003330:	014004c4 	movi	r5,19
10003334:	0009883a 	mov	r4,zero
10003338:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000333c:	01414504 	movi	r5,1300
10003340:	0009883a 	mov	r4,zero
10003344:	00004a00 	call	100004a0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10003348:	0141a004 	movi	r5,1664
1000334c:	0009883a 	mov	r4,zero
10003350:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
10003354:	01404004 	movi	r5,256
10003358:	0009883a 	mov	r4,zero
1000335c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10003360:	000b883a 	mov	r5,zero
10003364:	0009883a 	mov	r4,zero
10003368:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
1000336c:	01400484 	movi	r5,18
10003370:	0009883a 	mov	r4,zero
10003374:	00004a00 	call	100004a0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10003378:	01415104 	movi	r5,1348
1000337c:	0009883a 	mov	r4,zero
10003380:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10003384:	01400204 	movi	r5,8
10003388:	0009883a 	mov	r4,zero
1000338c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10003390:	0140a404 	movi	r5,656
10003394:	0009883a 	mov	r4,zero
10003398:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000339c:	01401044 	movi	r5,65
100033a0:	0009883a 	mov	r4,zero
100033a4:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100033a8:	014004c4 	movi	r5,19
100033ac:	0009883a 	mov	r4,zero
100033b0:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100033b4:	01414804 	movi	r5,1312
100033b8:	0009883a 	mov	r4,zero
100033bc:	00004a00 	call	100004a0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
100033c0:	01415304 	movi	r5,1356
100033c4:	0009883a 	mov	r4,zero
100033c8:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100033cc:	01400204 	movi	r5,8
100033d0:	0009883a 	mov	r4,zero
100033d4:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100033d8:	0140a404 	movi	r5,656
100033dc:	0009883a 	mov	r4,zero
100033e0:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
100033e4:	01400044 	movi	r5,1
100033e8:	0009883a 	mov	r4,zero
100033ec:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100033f0:	014004c4 	movi	r5,19
100033f4:	0009883a 	mov	r4,zero
100033f8:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100033fc:	01414b04 	movi	r5,1324
10003400:	0009883a 	mov	r4,zero
10003404:	00004a00 	call	100004a0 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
10003408:	01415504 	movi	r5,1364
1000340c:	0009883a 	mov	r4,zero
10003410:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
10003414:	01400084 	movi	r5,2
10003418:	0009883a 	mov	r4,zero
1000341c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10003420:	0140a404 	movi	r5,656
10003424:	0009883a 	mov	r4,zero
10003428:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
1000342c:	01401044 	movi	r5,65
10003430:	0009883a 	mov	r4,zero
10003434:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10003438:	014004c4 	movi	r5,19
1000343c:	0009883a 	mov	r4,zero
10003440:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10003444:	01414e04 	movi	r5,1336
10003448:	0009883a 	mov	r4,zero
1000344c:	00004a00 	call	100004a0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10003450:	000b883a 	mov	r5,zero
10003454:	0009883a 	mov	r4,zero
10003458:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
1000345c:	000b883a 	mov	r5,zero
10003460:	0009883a 	mov	r4,zero
10003464:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10003468:	01408404 	movi	r5,528
1000346c:	0009883a 	mov	r4,zero
10003470:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
10003474:	01401044 	movi	r5,65
10003478:	0009883a 	mov	r4,zero
1000347c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10003480:	014004c4 	movi	r5,19
10003484:	0009883a 	mov	r4,zero
10003488:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
1000348c:	000b883a 	mov	r5,zero
10003490:	0009883a 	mov	r4,zero
10003494:	00004a00 	call	100004a0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003498:	01414004 	movi	r5,1280
1000349c:	01006c04 	movi	r4,432
100034a0:	0002f4c0 	call	10002f4c <UsbWrite>
}
100034a4:	0001883a 	nop
100034a8:	e037883a 	mov	sp,fp
100034ac:	dfc00117 	ldw	ra,4(sp)
100034b0:	df000017 	ldw	fp,0(sp)
100034b4:	dec00204 	addi	sp,sp,8
100034b8:	f800283a 	ret

100034bc <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
100034bc:	defffe04 	addi	sp,sp,-8
100034c0:	dfc00115 	stw	ra,4(sp)
100034c4:	df000015 	stw	fp,0(sp)
100034c8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100034cc:	01414004 	movi	r5,1280
100034d0:	01000084 	movi	r4,2
100034d4:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x050C);
100034d8:	01414304 	movi	r5,1292
100034dc:	0009883a 	mov	r4,zero
100034e0:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100034e4:	01400204 	movi	r5,8
100034e8:	0009883a 	mov	r4,zero
100034ec:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100034f0:	0140b404 	movi	r5,720
100034f4:	0009883a 	mov	r4,zero
100034f8:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0001);
100034fc:	01400044 	movi	r5,1
10003500:	0009883a 	mov	r4,zero
10003504:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003508:	014004c4 	movi	r5,19
1000350c:	0009883a 	mov	r4,zero
10003510:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10003514:	01414504 	movi	r5,1300
10003518:	0009883a 	mov	r4,zero
1000351c:	00004a00 	call	100004a0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10003520:	0141a004 	movi	r5,1664
10003524:	0009883a 	mov	r4,zero
10003528:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
1000352c:	01408004 	movi	r5,512
10003530:	0009883a 	mov	r4,zero
10003534:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10003538:	000b883a 	mov	r5,zero
1000353c:	0009883a 	mov	r4,zero
10003540:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10003544:	01400244 	movi	r5,9
10003548:	0009883a 	mov	r4,zero
1000354c:	00004a00 	call	100004a0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10003550:	01415104 	movi	r5,1348
10003554:	0009883a 	mov	r4,zero
10003558:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
1000355c:	01400204 	movi	r5,8
10003560:	0009883a 	mov	r4,zero
10003564:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10003568:	0140a404 	movi	r5,656
1000356c:	0009883a 	mov	r4,zero
10003570:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10003574:	01401044 	movi	r5,65
10003578:	0009883a 	mov	r4,zero
1000357c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003580:	014004c4 	movi	r5,19
10003584:	0009883a 	mov	r4,zero
10003588:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
1000358c:	01414804 	movi	r5,1312
10003590:	0009883a 	mov	r4,zero
10003594:	00004a00 	call	100004a0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10003598:	01415304 	movi	r5,1356
1000359c:	0009883a 	mov	r4,zero
100035a0:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
100035a4:	01400044 	movi	r5,1
100035a8:	0009883a 	mov	r4,zero
100035ac:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100035b0:	0140a404 	movi	r5,656
100035b4:	0009883a 	mov	r4,zero
100035b8:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100035bc:	01400044 	movi	r5,1
100035c0:	0009883a 	mov	r4,zero
100035c4:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100035c8:	014004c4 	movi	r5,19
100035cc:	0009883a 	mov	r4,zero
100035d0:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100035d4:	01414b04 	movi	r5,1324
100035d8:	0009883a 	mov	r4,zero
100035dc:	00004a00 	call	100004a0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
100035e0:	000b883a 	mov	r5,zero
100035e4:	0009883a 	mov	r4,zero
100035e8:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
100035ec:	000b883a 	mov	r5,zero
100035f0:	0009883a 	mov	r4,zero
100035f4:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
100035f8:	01408404 	movi	r5,528
100035fc:	0009883a 	mov	r4,zero
10003600:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10003604:	01401044 	movi	r5,65
10003608:	0009883a 	mov	r4,zero
1000360c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10003610:	014004c4 	movi	r5,19
10003614:	0009883a 	mov	r4,zero
10003618:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
1000361c:	000b883a 	mov	r5,zero
10003620:	0009883a 	mov	r4,zero
10003624:	00004a00 	call	100004a0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003628:	01414004 	movi	r5,1280
1000362c:	01006c04 	movi	r4,432
10003630:	0002f4c0 	call	10002f4c <UsbWrite>
}
10003634:	0001883a 	nop
10003638:	e037883a 	mov	sp,fp
1000363c:	dfc00117 	ldw	ra,4(sp)
10003640:	df000017 	ldw	fp,0(sp)
10003644:	dec00204 	addi	sp,sp,8
10003648:	f800283a 	ret

1000364c <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
1000364c:	defffe04 	addi	sp,sp,-8
10003650:	dfc00115 	stw	ra,4(sp)
10003654:	df000015 	stw	fp,0(sp)
10003658:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000365c:	01414004 	movi	r5,1280
10003660:	01000084 	movi	r4,2
10003664:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10003668:	01414304 	movi	r5,1292
1000366c:	0009883a 	mov	r4,zero
10003670:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10003674:	01400204 	movi	r5,8
10003678:	0009883a 	mov	r4,zero
1000367c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10003680:	0140b404 	movi	r5,720
10003684:	0009883a 	mov	r4,zero
10003688:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000368c:	01400044 	movi	r5,1
10003690:	0009883a 	mov	r4,zero
10003694:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003698:	014004c4 	movi	r5,19
1000369c:	0009883a 	mov	r4,zero
100036a0:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0514);
100036a4:	01414504 	movi	r5,1300
100036a8:	0009883a 	mov	r4,zero
100036ac:	00004a00 	call	100004a0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100036b0:	0141a004 	movi	r5,1664
100036b4:	0009883a 	mov	r4,zero
100036b8:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
100036bc:	01408004 	movi	r5,512
100036c0:	0009883a 	mov	r4,zero
100036c4:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100036c8:	000b883a 	mov	r5,zero
100036cc:	0009883a 	mov	r4,zero
100036d0:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
100036d4:	01403fc4 	movi	r5,255
100036d8:	0009883a 	mov	r4,zero
100036dc:	00004a00 	call	100004a0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
100036e0:	01415704 	movi	r5,1372
100036e4:	0009883a 	mov	r4,zero
100036e8:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100036ec:	01400204 	movi	r5,8
100036f0:	0009883a 	mov	r4,zero
100036f4:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100036f8:	0140a404 	movi	r5,656
100036fc:	0009883a 	mov	r4,zero
10003700:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10003704:	01401044 	movi	r5,65
10003708:	0009883a 	mov	r4,zero
1000370c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003710:	014004c4 	movi	r5,19
10003714:	0009883a 	mov	r4,zero
10003718:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
1000371c:	01414804 	movi	r5,1312
10003720:	0009883a 	mov	r4,zero
10003724:	00004a00 	call	100004a0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
10003728:	01415904 	movi	r5,1380
1000372c:	0009883a 	mov	r4,zero
10003730:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10003734:	01400204 	movi	r5,8
10003738:	0009883a 	mov	r4,zero
1000373c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10003740:	0140a404 	movi	r5,656
10003744:	0009883a 	mov	r4,zero
10003748:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
1000374c:	01400044 	movi	r5,1
10003750:	0009883a 	mov	r4,zero
10003754:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10003758:	014004c4 	movi	r5,19
1000375c:	0009883a 	mov	r4,zero
10003760:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10003764:	01414b04 	movi	r5,1324
10003768:	0009883a 	mov	r4,zero
1000376c:	00004a00 	call	100004a0 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
10003770:	01415b04 	movi	r5,1388
10003774:	0009883a 	mov	r4,zero
10003778:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
1000377c:	01400204 	movi	r5,8
10003780:	0009883a 	mov	r4,zero
10003784:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10003788:	0140a404 	movi	r5,656
1000378c:	0009883a 	mov	r4,zero
10003790:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10003794:	01401044 	movi	r5,65
10003798:	0009883a 	mov	r4,zero
1000379c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100037a0:	014004c4 	movi	r5,19
100037a4:	0009883a 	mov	r4,zero
100037a8:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
100037ac:	01414e04 	movi	r5,1336
100037b0:	0009883a 	mov	r4,zero
100037b4:	00004a00 	call	100004a0 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
100037b8:	01415d04 	movi	r5,1396
100037bc:	0009883a 	mov	r4,zero
100037c0:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
100037c4:	01400204 	movi	r5,8
100037c8:	0009883a 	mov	r4,zero
100037cc:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
100037d0:	0140a404 	movi	r5,656
100037d4:	0009883a 	mov	r4,zero
100037d8:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
100037dc:	01400044 	movi	r5,1
100037e0:	0009883a 	mov	r4,zero
100037e4:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
100037e8:	014004c4 	movi	r5,19
100037ec:	0009883a 	mov	r4,zero
100037f0:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
100037f4:	01415104 	movi	r5,1348
100037f8:	0009883a 	mov	r4,zero
100037fc:	00004a00 	call	100004a0 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10003800:	01415f04 	movi	r5,1404
10003804:	0009883a 	mov	r4,zero
10003808:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
1000380c:	01400084 	movi	r5,2
10003810:	0009883a 	mov	r4,zero
10003814:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10003818:	0140a404 	movi	r5,656
1000381c:	0009883a 	mov	r4,zero
10003820:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10003824:	01401044 	movi	r5,65
10003828:	0009883a 	mov	r4,zero
1000382c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003830:	014004c4 	movi	r5,19
10003834:	0009883a 	mov	r4,zero
10003838:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
1000383c:	01415404 	movi	r5,1360
10003840:	0009883a 	mov	r4,zero
10003844:	00004a00 	call	100004a0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10003848:	000b883a 	mov	r5,zero
1000384c:	0009883a 	mov	r4,zero
10003850:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10003854:	000b883a 	mov	r5,zero
10003858:	0009883a 	mov	r4,zero
1000385c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10003860:	01408404 	movi	r5,528
10003864:	0009883a 	mov	r4,zero
10003868:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
1000386c:	01401044 	movi	r5,65
10003870:	0009883a 	mov	r4,zero
10003874:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10003878:	014004c4 	movi	r5,19
1000387c:	0009883a 	mov	r4,zero
10003880:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10003884:	000b883a 	mov	r5,zero
10003888:	0009883a 	mov	r4,zero
1000388c:	00004a00 	call	100004a0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003890:	01414004 	movi	r5,1280
10003894:	01006c04 	movi	r4,432
10003898:	0002f4c0 	call	10002f4c <UsbWrite>
}
1000389c:	0001883a 	nop
100038a0:	e037883a 	mov	sp,fp
100038a4:	dfc00117 	ldw	ra,4(sp)
100038a8:	df000017 	ldw	fp,0(sp)
100038ac:	dec00204 	addi	sp,sp,8
100038b0:	f800283a 	ret

100038b4 <UsbSetConfig>:

void UsbSetConfig()
{
100038b4:	defffe04 	addi	sp,sp,-8
100038b8:	dfc00115 	stw	ra,4(sp)
100038bc:	df000015 	stw	fp,0(sp)
100038c0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100038c4:	01414004 	movi	r5,1280
100038c8:	01000084 	movi	r4,2
100038cc:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x050C);
100038d0:	01414304 	movi	r5,1292
100038d4:	0009883a 	mov	r4,zero
100038d8:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100038dc:	01400204 	movi	r5,8
100038e0:	0009883a 	mov	r4,zero
100038e4:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100038e8:	0140b404 	movi	r5,720
100038ec:	0009883a 	mov	r4,zero
100038f0:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0001);
100038f4:	01400044 	movi	r5,1
100038f8:	0009883a 	mov	r4,zero
100038fc:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003900:	014004c4 	movi	r5,19
10003904:	0009883a 	mov	r4,zero
10003908:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000390c:	01414504 	movi	r5,1300
10003910:	0009883a 	mov	r4,zero
10003914:	00004a00 	call	100004a0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10003918:	01424004 	movi	r5,2304
1000391c:	0009883a 	mov	r4,zero
10003920:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10003924:	01400044 	movi	r5,1
10003928:	0009883a 	mov	r4,zero
1000392c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003930:	000b883a 	mov	r5,zero
10003934:	0009883a 	mov	r4,zero
10003938:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000393c:	000b883a 	mov	r5,zero
10003940:	0009883a 	mov	r4,zero
10003944:	00004a00 	call	100004a0 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10003948:	000b883a 	mov	r5,zero
1000394c:	0009883a 	mov	r4,zero
10003950:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10003954:	000b883a 	mov	r5,zero
10003958:	0009883a 	mov	r4,zero
1000395c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10003960:	0140a404 	movi	r5,656
10003964:	0009883a 	mov	r4,zero
10003968:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
1000396c:	01401044 	movi	r5,65
10003970:	0009883a 	mov	r4,zero
10003974:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003978:	014004c4 	movi	r5,19
1000397c:	0009883a 	mov	r4,zero
10003980:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003984:	000b883a 	mov	r5,zero
10003988:	0009883a 	mov	r4,zero
1000398c:	00004a00 	call	100004a0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003990:	01414004 	movi	r5,1280
10003994:	01006c04 	movi	r4,432
10003998:	0002f4c0 	call	10002f4c <UsbWrite>

}
1000399c:	0001883a 	nop
100039a0:	e037883a 	mov	sp,fp
100039a4:	dfc00117 	ldw	ra,4(sp)
100039a8:	df000017 	ldw	fp,0(sp)
100039ac:	dec00204 	addi	sp,sp,8
100039b0:	f800283a 	ret

100039b4 <UsbClassRequest>:

void UsbClassRequest()
{
100039b4:	defffe04 	addi	sp,sp,-8
100039b8:	dfc00115 	stw	ra,4(sp)
100039bc:	df000015 	stw	fp,0(sp)
100039c0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100039c4:	01414004 	movi	r5,1280
100039c8:	01000084 	movi	r4,2
100039cc:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x050C);
100039d0:	01414304 	movi	r5,1292
100039d4:	0009883a 	mov	r4,zero
100039d8:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100039dc:	01400204 	movi	r5,8
100039e0:	0009883a 	mov	r4,zero
100039e4:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100039e8:	0140b404 	movi	r5,720
100039ec:	0009883a 	mov	r4,zero
100039f0:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0001);
100039f4:	01400044 	movi	r5,1
100039f8:	0009883a 	mov	r4,zero
100039fc:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003a00:	014004c4 	movi	r5,19
10003a04:	0009883a 	mov	r4,zero
10003a08:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10003a0c:	01414504 	movi	r5,1300
10003a10:	0009883a 	mov	r4,zero
10003a14:	00004a00 	call	100004a0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10003a18:	01428844 	movi	r5,2593
10003a1c:	0009883a 	mov	r4,zero
10003a20:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10003a24:	000b883a 	mov	r5,zero
10003a28:	0009883a 	mov	r4,zero
10003a2c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003a30:	000b883a 	mov	r5,zero
10003a34:	0009883a 	mov	r4,zero
10003a38:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003a3c:	000b883a 	mov	r5,zero
10003a40:	0009883a 	mov	r4,zero
10003a44:	00004a00 	call	100004a0 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10003a48:	000b883a 	mov	r5,zero
10003a4c:	0009883a 	mov	r4,zero
10003a50:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10003a54:	000b883a 	mov	r5,zero
10003a58:	0009883a 	mov	r4,zero
10003a5c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10003a60:	0140a404 	movi	r5,656
10003a64:	0009883a 	mov	r4,zero
10003a68:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10003a6c:	01401044 	movi	r5,65
10003a70:	0009883a 	mov	r4,zero
10003a74:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003a78:	014004c4 	movi	r5,19
10003a7c:	0009883a 	mov	r4,zero
10003a80:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003a84:	000b883a 	mov	r5,zero
10003a88:	0009883a 	mov	r4,zero
10003a8c:	00004a00 	call	100004a0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003a90:	01414004 	movi	r5,1280
10003a94:	01006c04 	movi	r4,432
10003a98:	0002f4c0 	call	10002f4c <UsbWrite>
}
10003a9c:	0001883a 	nop
10003aa0:	e037883a 	mov	sp,fp
10003aa4:	dfc00117 	ldw	ra,4(sp)
10003aa8:	df000017 	ldw	fp,0(sp)
10003aac:	dec00204 	addi	sp,sp,8
10003ab0:	f800283a 	ret

10003ab4 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10003ab4:	defffe04 	addi	sp,sp,-8
10003ab8:	dfc00115 	stw	ra,4(sp)
10003abc:	df000015 	stw	fp,0(sp)
10003ac0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10003ac4:	01414004 	movi	r5,1280
10003ac8:	01000084 	movi	r4,2
10003acc:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10003ad0:	01414304 	movi	r5,1292
10003ad4:	0009883a 	mov	r4,zero
10003ad8:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10003adc:	01400204 	movi	r5,8
10003ae0:	0009883a 	mov	r4,zero
10003ae4:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10003ae8:	0140b404 	movi	r5,720
10003aec:	0009883a 	mov	r4,zero
10003af0:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10003af4:	01400044 	movi	r5,1
10003af8:	0009883a 	mov	r4,zero
10003afc:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003b00:	014004c4 	movi	r5,19
10003b04:	0009883a 	mov	r4,zero
10003b08:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10003b0c:	01414504 	movi	r5,1300
10003b10:	0009883a 	mov	r4,zero
10003b14:	00004a00 	call	100004a0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10003b18:	0141a044 	movi	r5,1665
10003b1c:	0009883a 	mov	r4,zero
10003b20:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10003b24:	01484004 	movi	r5,8448
10003b28:	0009883a 	mov	r4,zero
10003b2c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10003b30:	000b883a 	mov	r5,zero
10003b34:	0009883a 	mov	r4,zero
10003b38:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10003b3c:	01401ec4 	movi	r5,123
10003b40:	0009883a 	mov	r4,zero
10003b44:	00004a00 	call	100004a0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10003b48:	01415104 	movi	r5,1348
10003b4c:	0009883a 	mov	r4,zero
10003b50:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10003b54:	01400204 	movi	r5,8
10003b58:	0009883a 	mov	r4,zero
10003b5c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10003b60:	0140a404 	movi	r5,656
10003b64:	0009883a 	mov	r4,zero
10003b68:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10003b6c:	01401044 	movi	r5,65
10003b70:	0009883a 	mov	r4,zero
10003b74:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003b78:	014004c4 	movi	r5,19
10003b7c:	0009883a 	mov	r4,zero
10003b80:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10003b84:	01414804 	movi	r5,1312
10003b88:	0009883a 	mov	r4,zero
10003b8c:	00004a00 	call	100004a0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10003b90:	000b883a 	mov	r5,zero
10003b94:	0009883a 	mov	r4,zero
10003b98:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10003b9c:	000b883a 	mov	r5,zero
10003ba0:	0009883a 	mov	r4,zero
10003ba4:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10003ba8:	01408404 	movi	r5,528
10003bac:	0009883a 	mov	r4,zero
10003bb0:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10003bb4:	01401044 	movi	r5,65
10003bb8:	0009883a 	mov	r4,zero
10003bbc:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10003bc0:	014004c4 	movi	r5,19
10003bc4:	0009883a 	mov	r4,zero
10003bc8:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10003bcc:	000b883a 	mov	r5,zero
10003bd0:	0009883a 	mov	r4,zero
10003bd4:	00004a00 	call	100004a0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003bd8:	01414004 	movi	r5,1280
10003bdc:	01006c04 	movi	r4,432
10003be0:	0002f4c0 	call	10002f4c <UsbWrite>

}
10003be4:	0001883a 	nop
10003be8:	e037883a 	mov	sp,fp
10003bec:	dfc00117 	ldw	ra,4(sp)
10003bf0:	df000017 	ldw	fp,0(sp)
10003bf4:	dec00204 	addi	sp,sp,8
10003bf8:	f800283a 	ret

10003bfc <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10003bfc:	defffe04 	addi	sp,sp,-8
10003c00:	dfc00115 	stw	ra,4(sp)
10003c04:	df000015 	stw	fp,0(sp)
10003c08:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10003c0c:	01414004 	movi	r5,1280
10003c10:	01000084 	movi	r4,2
10003c14:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10003c18:	01414304 	movi	r5,1292
10003c1c:	0009883a 	mov	r4,zero
10003c20:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10003c24:	01400204 	movi	r5,8
10003c28:	0009883a 	mov	r4,zero
10003c2c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10003c30:	0140b404 	movi	r5,720
10003c34:	0009883a 	mov	r4,zero
10003c38:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10003c3c:	01400044 	movi	r5,1
10003c40:	0009883a 	mov	r4,zero
10003c44:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003c48:	014004c4 	movi	r5,19
10003c4c:	0009883a 	mov	r4,zero
10003c50:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10003c54:	01414504 	movi	r5,1300
10003c58:	0009883a 	mov	r4,zero
10003c5c:	00004a00 	call	100004a0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10003c60:	0141a044 	movi	r5,1665
10003c64:	0009883a 	mov	r4,zero
10003c68:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10003c6c:	01488004 	movi	r5,8704
10003c70:	0009883a 	mov	r4,zero
10003c74:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10003c78:	000b883a 	mov	r5,zero
10003c7c:	0009883a 	mov	r4,zero
10003c80:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10003c84:	01401ec4 	movi	r5,123
10003c88:	0009883a 	mov	r4,zero
10003c8c:	00004a00 	call	100004a0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10003c90:	01416004 	movi	r5,1408
10003c94:	0009883a 	mov	r4,zero
10003c98:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10003c9c:	01400204 	movi	r5,8
10003ca0:	0009883a 	mov	r4,zero
10003ca4:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10003ca8:	0140a404 	movi	r5,656
10003cac:	0009883a 	mov	r4,zero
10003cb0:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10003cb4:	01401044 	movi	r5,65
10003cb8:	0009883a 	mov	r4,zero
10003cbc:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003cc0:	014004c4 	movi	r5,19
10003cc4:	0009883a 	mov	r4,zero
10003cc8:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10003ccc:	01414804 	movi	r5,1312
10003cd0:	0009883a 	mov	r4,zero
10003cd4:	00004a00 	call	100004a0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10003cd8:	01416204 	movi	r5,1416
10003cdc:	0009883a 	mov	r4,zero
10003ce0:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10003ce4:	01400204 	movi	r5,8
10003ce8:	0009883a 	mov	r4,zero
10003cec:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10003cf0:	0140a404 	movi	r5,656
10003cf4:	0009883a 	mov	r4,zero
10003cf8:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10003cfc:	01400044 	movi	r5,1
10003d00:	0009883a 	mov	r4,zero
10003d04:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10003d08:	014004c4 	movi	r5,19
10003d0c:	0009883a 	mov	r4,zero
10003d10:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10003d14:	01414b04 	movi	r5,1324
10003d18:	0009883a 	mov	r4,zero
10003d1c:	00004a00 	call	100004a0 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10003d20:	01416404 	movi	r5,1424
10003d24:	0009883a 	mov	r4,zero
10003d28:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10003d2c:	01400204 	movi	r5,8
10003d30:	0009883a 	mov	r4,zero
10003d34:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10003d38:	0140a404 	movi	r5,656
10003d3c:	0009883a 	mov	r4,zero
10003d40:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10003d44:	01401044 	movi	r5,65
10003d48:	0009883a 	mov	r4,zero
10003d4c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10003d50:	014004c4 	movi	r5,19
10003d54:	0009883a 	mov	r4,zero
10003d58:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10003d5c:	01414e04 	movi	r5,1336
10003d60:	0009883a 	mov	r4,zero
10003d64:	00004a00 	call	100004a0 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10003d68:	01416604 	movi	r5,1432
10003d6c:	0009883a 	mov	r4,zero
10003d70:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10003d74:	01400204 	movi	r5,8
10003d78:	0009883a 	mov	r4,zero
10003d7c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10003d80:	0140a404 	movi	r5,656
10003d84:	0009883a 	mov	r4,zero
10003d88:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10003d8c:	01400044 	movi	r5,1
10003d90:	0009883a 	mov	r4,zero
10003d94:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10003d98:	014004c4 	movi	r5,19
10003d9c:	0009883a 	mov	r4,zero
10003da0:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10003da4:	01415104 	movi	r5,1348
10003da8:	0009883a 	mov	r4,zero
10003dac:	00004a00 	call	100004a0 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10003db0:	01416804 	movi	r5,1440
10003db4:	0009883a 	mov	r4,zero
10003db8:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10003dbc:	01400204 	movi	r5,8
10003dc0:	0009883a 	mov	r4,zero
10003dc4:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10003dc8:	0140a404 	movi	r5,656
10003dcc:	0009883a 	mov	r4,zero
10003dd0:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10003dd4:	01401044 	movi	r5,65
10003dd8:	0009883a 	mov	r4,zero
10003ddc:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003de0:	014004c4 	movi	r5,19
10003de4:	0009883a 	mov	r4,zero
10003de8:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10003dec:	01415404 	movi	r5,1360
10003df0:	0009883a 	mov	r4,zero
10003df4:	00004a00 	call	100004a0 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10003df8:	01416a04 	movi	r5,1448
10003dfc:	0009883a 	mov	r4,zero
10003e00:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10003e04:	01400204 	movi	r5,8
10003e08:	0009883a 	mov	r4,zero
10003e0c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10003e10:	0140a404 	movi	r5,656
10003e14:	0009883a 	mov	r4,zero
10003e18:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10003e1c:	01400044 	movi	r5,1
10003e20:	0009883a 	mov	r4,zero
10003e24:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10003e28:	014004c4 	movi	r5,19
10003e2c:	0009883a 	mov	r4,zero
10003e30:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
10003e34:	01415704 	movi	r5,1372
10003e38:	0009883a 	mov	r4,zero
10003e3c:	00004a00 	call	100004a0 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10003e40:	01416c04 	movi	r5,1456
10003e44:	0009883a 	mov	r4,zero
10003e48:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10003e4c:	01400204 	movi	r5,8
10003e50:	0009883a 	mov	r4,zero
10003e54:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
10003e58:	0140a404 	movi	r5,656
10003e5c:	0009883a 	mov	r4,zero
10003e60:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
10003e64:	01401044 	movi	r5,65
10003e68:	0009883a 	mov	r4,zero
10003e6c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10003e70:	014004c4 	movi	r5,19
10003e74:	0009883a 	mov	r4,zero
10003e78:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10003e7c:	01415a04 	movi	r5,1384
10003e80:	0009883a 	mov	r4,zero
10003e84:	00004a00 	call	100004a0 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10003e88:	01416e04 	movi	r5,1464
10003e8c:	0009883a 	mov	r4,zero
10003e90:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10003e94:	014000c4 	movi	r5,3
10003e98:	0009883a 	mov	r4,zero
10003e9c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10003ea0:	0140a404 	movi	r5,656
10003ea4:	0009883a 	mov	r4,zero
10003ea8:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10003eac:	01400044 	movi	r5,1
10003eb0:	0009883a 	mov	r4,zero
10003eb4:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10003eb8:	014004c4 	movi	r5,19
10003ebc:	0009883a 	mov	r4,zero
10003ec0:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10003ec4:	01415d04 	movi	r5,1396
10003ec8:	0009883a 	mov	r4,zero
10003ecc:	00004a00 	call	100004a0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10003ed0:	000b883a 	mov	r5,zero
10003ed4:	0009883a 	mov	r4,zero
10003ed8:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10003edc:	000b883a 	mov	r5,zero
10003ee0:	0009883a 	mov	r4,zero
10003ee4:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
10003ee8:	01408404 	movi	r5,528
10003eec:	0009883a 	mov	r4,zero
10003ef0:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10003ef4:	01401044 	movi	r5,65
10003ef8:	0009883a 	mov	r4,zero
10003efc:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003f00:	014004c4 	movi	r5,19
10003f04:	0009883a 	mov	r4,zero
10003f08:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10003f0c:	000b883a 	mov	r5,zero
10003f10:	0009883a 	mov	r4,zero
10003f14:	00004a00 	call	100004a0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003f18:	01414004 	movi	r5,1280
10003f1c:	01006c04 	movi	r4,432
10003f20:	0002f4c0 	call	10002f4c <UsbWrite>

}
10003f24:	0001883a 	nop
10003f28:	e037883a 	mov	sp,fp
10003f2c:	dfc00117 	ldw	ra,4(sp)
10003f30:	df000017 	ldw	fp,0(sp)
10003f34:	dec00204 	addi	sp,sp,8
10003f38:	f800283a 	ret

10003f3c <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
10003f3c:	defffd04 	addi	sp,sp,-12
10003f40:	dfc00215 	stw	ra,8(sp)
10003f44:	df000115 	stw	fp,4(sp)
10003f48:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
10003f4c:	01005104 	movi	r4,324
10003f50:	0002fa40 	call	10002fa4 <UsbRead>
10003f54:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
10003f58:	000b883a 	mov	r5,zero
10003f5c:	01005104 	movi	r4,324
10003f60:	0002f4c0 	call	10002f4c <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10003f64:	00000d06 	br	10003f9c <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
10003f68:	e0bfff0b 	ldhu	r2,-4(fp)
10003f6c:	10000526 	beq	r2,zero,10003f84 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
10003f70:	e0bfff0b 	ldhu	r2,-4(fp)
10003f74:	100b883a 	mov	r5,r2
10003f78:	01040074 	movhi	r4,4097
10003f7c:	2111b504 	addi	r4,r4,18132
10003f80:	00050ac0 	call	100050ac <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10003f84:	01005104 	movi	r4,324
10003f88:	0002fa40 	call	10002fa4 <UsbRead>
10003f8c:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10003f90:	000b883a 	mov	r5,zero
10003f94:	01005104 	movi	r4,324
10003f98:	0002f4c0 	call	10002f4c <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10003f9c:	e0bfff0b 	ldhu	r2,-4(fp)
10003fa0:	10840018 	cmpnei	r2,r2,4096
10003fa4:	103ff01e 	bne	r2,zero,10003f68 <__alt_data_end+0xf8003f68>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
10003fa8:	e0bfff0b 	ldhu	r2,-4(fp)
}
10003fac:	e037883a 	mov	sp,fp
10003fb0:	dfc00117 	ldw	ra,4(sp)
10003fb4:	df000017 	ldw	fp,0(sp)
10003fb8:	dec00204 	addi	sp,sp,8
10003fbc:	f800283a 	ret

10003fc0 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10003fc0:	defffd04 	addi	sp,sp,-12
10003fc4:	dfc00215 	stw	ra,8(sp)
10003fc8:	df000115 	stw	fp,4(sp)
10003fcc:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10003fd0:	010000c4 	movi	r4,3
10003fd4:	000051c0 	call	1000051c <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
10003fd8:	01005104 	movi	r4,324
10003fdc:	0002fa40 	call	10002fa4 <UsbRead>
10003fe0:	10bfffcc 	andi	r2,r2,65535
10003fe4:	10840018 	cmpnei	r2,r2,4096
10003fe8:	1000091e 	bne	r2,zero,10004010 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10003fec:	000b883a 	mov	r5,zero
10003ff0:	01005104 	movi	r4,324
10003ff4:	0002f4c0 	call	10002f4c <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003ff8:	0001883a 	nop
10003ffc:	010000c4 	movi	r4,3
10004000:	000051c0 	call	1000051c <IO_read>
10004004:	10bfffcc 	andi	r2,r2,65535
10004008:	1080040c 	andi	r2,r2,16
1000400c:	103ffb26 	beq	r2,zero,10003ffc <__alt_data_end+0xf8003ffc>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10004010:	01414204 	movi	r5,1288
10004014:	01000084 	movi	r4,2
10004018:	00004a00 	call	100004a0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
1000401c:	0009883a 	mov	r4,zero
10004020:	000051c0 	call	1000051c <IO_read>
10004024:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
10004028:	e0bfff0b 	ldhu	r2,-4(fp)
}
1000402c:	e037883a 	mov	sp,fp
10004030:	dfc00117 	ldw	ra,4(sp)
10004034:	df000017 	ldw	fp,0(sp)
10004038:	dec00204 	addi	sp,sp,8
1000403c:	f800283a 	ret

10004040 <UsbPrintMem>:


void UsbPrintMem()
{
10004040:	defffc04 	addi	sp,sp,-16
10004044:	dfc00315 	stw	ra,12(sp)
10004048:	df000215 	stw	fp,8(sp)
1000404c:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10004050:	01414004 	movi	r5,1280
10004054:	01000084 	movi	r4,2
10004058:	00004a00 	call	100004a0 <IO_write>
	for (i = 0; i <= 200; i += 2)
1000405c:	e03ffe15 	stw	zero,-8(fp)
10004060:	00000e06 	br	1000409c <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
10004064:	0009883a 	mov	r4,zero
10004068:	000051c0 	call	1000051c <IO_read>
1000406c:	10bfffcc 	andi	r2,r2,65535
10004070:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
10004074:	e0bffe17 	ldw	r2,-8(fp)
10004078:	10814004 	addi	r2,r2,1280
1000407c:	e1bfff17 	ldw	r6,-4(fp)
10004080:	100b883a 	mov	r5,r2
10004084:	01040074 	movhi	r4,4097
10004088:	2111bd04 	addi	r4,r4,18164
1000408c:	00050ac0 	call	100050ac <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
10004090:	e0bffe17 	ldw	r2,-8(fp)
10004094:	10800084 	addi	r2,r2,2
10004098:	e0bffe15 	stw	r2,-8(fp)
1000409c:	e0bffe17 	ldw	r2,-8(fp)
100040a0:	10803250 	cmplti	r2,r2,201
100040a4:	103fef1e 	bne	r2,zero,10004064 <__alt_data_end+0xf8004064>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
100040a8:	0001883a 	nop
100040ac:	e037883a 	mov	sp,fp
100040b0:	dfc00117 	ldw	ra,4(sp)
100040b4:	df000017 	ldw	fp,0(sp)
100040b8:	dec00204 	addi	sp,sp,8
100040bc:	f800283a 	ret

100040c0 <usb_initialize>:
static alt_u8  hot_plug_count;
static alt_u16 code;


void usb_initialize()
{
100040c0:	defffe04 	addi	sp,sp,-8
100040c4:	dfc00115 	stw	ra,4(sp)
100040c8:	df000015 	stw	fp,0(sp)
100040cc:	d839883a 	mov	fp,sp
	IO_init();
100040d0:	00004180 	call	10000418 <IO_init>
	// alt_u8 toggle = 0;
	// alt_u8 data_size;
	// alt_u8 hot_plug_count;
	// alt_u16 code;

	printf("USB keyboard setup...\n\n");
100040d4:	01040074 	movhi	r4,4097
100040d8:	2111c204 	addi	r4,r4,18184
100040dc:	00051a80 	call	100051a8 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
100040e0:	0002fe80 	call	10002fe8 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
100040e4:	000b883a 	mov	r5,zero
100040e8:	01005104 	movi	r4,324
100040ec:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
100040f0:	017fffd4 	movui	r5,65535
100040f4:	01302414 	movui	r4,49296
100040f8:	0002f4c0 	call	10002f4c <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
100040fc:	01409604 	movi	r5,600
10004100:	01006d04 	movi	r4,436
10004104:	0002f4c0 	call	10002f4c <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10004108:	00811004 	movi	r2,1088
1000410c:	d095f38d 	sth	r2,22478(gp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10004110:	d095f38b 	ldhu	r2,22478(gp)
10004114:	10bfffcc 	andi	r2,r2,65535
10004118:	100b883a 	mov	r5,r2
1000411c:	01005084 	movi	r4,322
10004120:	0002f4c0 	call	10002f4c <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
10004124:	00808404 	movi	r2,528
10004128:	d095f30d 	sth	r2,22476(gp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
1000412c:	d095f30b 	ldhu	r2,22476(gp)
10004130:	10bfffcc 	andi	r2,r2,65535
10004134:	100b883a 	mov	r5,r2
10004138:	01302314 	movui	r4,49292
1000413c:	0002f4c0 	call	10002f4c <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
10004140:	000b883a 	mov	r5,zero
10004144:	01007104 	movi	r4,452
10004148:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
1000414c:	000b883a 	mov	r5,zero
10004150:	01007184 	movi	r4,454
10004154:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10004158:	000b883a 	mov	r5,zero
1000415c:	01007204 	movi	r4,456
10004160:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10004164:	000b883a 	mov	r5,zero
10004168:	01007284 	movi	r4,458
1000416c:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10004170:	000b883a 	mov	r5,zero
10004174:	01007304 	movi	r4,460
10004178:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
1000417c:	000b883a 	mov	r5,zero
10004180:	01007384 	movi	r4,462
10004184:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10004188:	000b883a 	mov	r5,zero
1000418c:	01007404 	movi	r4,464
10004190:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10004194:	000b883a 	mov	r5,zero
10004198:	01007484 	movi	r4,466
1000419c:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100041a0:	000b883a 	mov	r5,zero
100041a4:	01007504 	movi	r4,468
100041a8:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100041ac:	000b883a 	mov	r5,zero
100041b0:	01007584 	movi	r4,470
100041b4:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100041b8:	000b883a 	mov	r5,zero
100041bc:	01007604 	movi	r4,472
100041c0:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100041c4:	000b883a 	mov	r5,zero
100041c8:	01007684 	movi	r4,474
100041cc:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100041d0:	000b883a 	mov	r5,zero
100041d4:	01007704 	movi	r4,476
100041d8:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
100041dc:	000b883a 	mov	r5,zero
100041e0:	01007784 	movi	r4,478
100041e4:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
100041e8:	01401c84 	movi	r5,114
100041ec:	01007084 	movi	r4,450
100041f0:	0002f4c0 	call	10002f4c <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
100041f4:	01738054 	movui	r5,52737
100041f8:	01000044 	movi	r4,1
100041fc:	00004a00 	call	100004a0 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10004200:	0001883a 	nop
10004204:	010000c4 	movi	r4,3
10004208:	000051c0 	call	1000051c <IO_read>
1000420c:	10bfffcc 	andi	r2,r2,65535
10004210:	103ffc26 	beq	r2,zero,10004204 <__alt_data_end+0xf8004204>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10004214:	00000806 	br	10004238 <usb_initialize+0x178>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10004218:	01000044 	movi	r4,1
1000421c:	000051c0 	call	1000051c <IO_read>
10004220:	10bfffcc 	andi	r2,r2,65535
10004224:	100b883a 	mov	r5,r2
10004228:	01040074 	movhi	r4,4097
1000422c:	2111c804 	addi	r4,r4,18208
10004230:	00050ac0 	call	100050ac <printf>
		goto USB_HOT_PLUG;
10004234:	003faa06 	br	100040e0 <__alt_data_end+0xf80040e0>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10004238:	01000044 	movi	r4,1
1000423c:	000051c0 	call	1000051c <IO_read>
10004240:	10bfffcc 	andi	r2,r2,65535
10004244:	1083fb58 	cmpnei	r2,r2,4077
10004248:	103ff31e 	bne	r2,zero,10004218 <__alt_data_end+0xf8004218>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
1000424c:	01040074 	movhi	r4,4097
10004250:	2111d104 	addi	r4,r4,18244
10004254:	00050ac0 	call	100050ac <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
10004258:	01401d04 	movi	r5,116
1000425c:	01007084 	movi	r4,450
10004260:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
10004264:	01400f04 	movi	r5,60
10004268:	01007104 	movi	r4,452
1000426c:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10004270:	000b883a 	mov	r5,zero
10004274:	01007184 	movi	r4,454
10004278:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
1000427c:	000b883a 	mov	r5,zero
10004280:	01007204 	movi	r4,456
10004284:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10004288:	000b883a 	mov	r5,zero
1000428c:	01007284 	movi	r4,458
10004290:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10004294:	000b883a 	mov	r5,zero
10004298:	01007304 	movi	r4,460
1000429c:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
100042a0:	000b883a 	mov	r5,zero
100042a4:	01007384 	movi	r4,462
100042a8:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
100042ac:	000b883a 	mov	r5,zero
100042b0:	01007404 	movi	r4,464
100042b4:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
100042b8:	000b883a 	mov	r5,zero
100042bc:	01007484 	movi	r4,466
100042c0:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100042c4:	000b883a 	mov	r5,zero
100042c8:	01007504 	movi	r4,468
100042cc:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100042d0:	000b883a 	mov	r5,zero
100042d4:	01007584 	movi	r4,470
100042d8:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100042dc:	000b883a 	mov	r5,zero
100042e0:	01007604 	movi	r4,472
100042e4:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100042e8:	000b883a 	mov	r5,zero
100042ec:	01007684 	movi	r4,474
100042f0:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100042f4:	000b883a 	mov	r5,zero
100042f8:	01007704 	movi	r4,476
100042fc:	0002f4c0 	call	10002f4c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10004300:	000b883a 	mov	r5,zero
10004304:	01007784 	movi	r4,478
10004308:	0002f4c0 	call	10002f4c <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
1000430c:	01738054 	movui	r5,52737
10004310:	01000044 	movi	r4,1
10004314:	00004a00 	call	100004a0 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10004318:	0001883a 	nop
1000431c:	01000044 	movi	r4,1
10004320:	000051c0 	call	1000051c <IO_read>
10004324:	10bfffcc 	andi	r2,r2,65535
10004328:	1083fb58 	cmpnei	r2,r2,4077
1000432c:	10000826 	beq	r2,zero,10004350 <usb_initialize+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10004330:	01000044 	movi	r4,1
10004334:	000051c0 	call	1000051c <IO_read>
10004338:	10bfffcc 	andi	r2,r2,65535
1000433c:	100b883a 	mov	r5,r2
10004340:	01040074 	movhi	r4,4097
10004344:	2111c804 	addi	r4,r4,18208
10004348:	00050ac0 	call	100050ac <printf>
		goto USB_HOT_PLUG;
1000434c:	003f6406 	br	100040e0 <__alt_data_end+0xf80040e0>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
10004350:	00b02284 	movi	r2,-16246
10004354:	d095f40d 	sth	r2,22480(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
10004358:	008c0004 	movi	r2,12288
1000435c:	d095f48d 	sth	r2,22482(gp)
	fs_device = A_DP_STAT;
10004360:	00880004 	movi	r2,8192
10004364:	d095f50d 	sth	r2,22484(gp)
	usb_ctl_val = UsbRead(ctl_reg);
10004368:	d095f40b 	ldhu	r2,22480(gp)
1000436c:	10bfffcc 	andi	r2,r2,65535
10004370:	1009883a 	mov	r4,r2
10004374:	0002fa40 	call	10002fa4 <UsbRead>
10004378:	d095f38d 	sth	r2,22478(gp)

	if (!(usb_ctl_val & no_device))
1000437c:	d0d5f38b 	ldhu	r3,22478(gp)
10004380:	d095f48b 	ldhu	r2,22482(gp)
10004384:	1884703a 	and	r2,r3,r2
10004388:	10bfffcc 	andi	r2,r2,65535
1000438c:	1000361e 	bne	r2,zero,10004468 <usb_initialize+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10004390:	d015f605 	stb	zero,22488(gp)
10004394:	00000f06 	br	100043d4 <usb_initialize+0x314>
		{
			usleep(5*1000);
10004398:	0104e204 	movi	r4,5000
1000439c:	00126380 	call	10012638 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100043a0:	d095f40b 	ldhu	r2,22480(gp)
100043a4:	10bfffcc 	andi	r2,r2,65535
100043a8:	1009883a 	mov	r4,r2
100043ac:	0002fa40 	call	10002fa4 <UsbRead>
100043b0:	d095f38d 	sth	r2,22478(gp)
			if(usb_ctl_val & no_device) break;
100043b4:	d0d5f38b 	ldhu	r3,22478(gp)
100043b8:	d095f48b 	ldhu	r2,22482(gp)
100043bc:	1884703a 	and	r2,r3,r2
100043c0:	10bfffcc 	andi	r2,r2,65535
100043c4:	1000081e 	bne	r2,zero,100043e8 <usb_initialize+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
100043c8:	d095f603 	ldbu	r2,22488(gp)
100043cc:	10800044 	addi	r2,r2,1
100043d0:	d095f605 	stb	r2,22488(gp)
100043d4:	d095f603 	ldbu	r2,22488(gp)
100043d8:	10803fcc 	andi	r2,r2,255
100043dc:	10800170 	cmpltui	r2,r2,5
100043e0:	103fed1e 	bne	r2,zero,10004398 <__alt_data_end+0xf8004398>
100043e4:	00000106 	br	100043ec <usb_initialize+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
100043e8:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
100043ec:	d0d5f38b 	ldhu	r3,22478(gp)
100043f0:	d095f48b 	ldhu	r2,22482(gp)
100043f4:	1884703a 	and	r2,r3,r2
100043f8:	10bfffcc 	andi	r2,r2,65535
100043fc:	1000261e 	bne	r2,zero,10004498 <usb_initialize+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
10004400:	01040074 	movhi	r4,4097
10004404:	2111d504 	addi	r4,r4,18260
10004408:	00051a80 	call	100051a8 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
1000440c:	01040074 	movhi	r4,4097
10004410:	2111df04 	addi	r4,r4,18300
10004414:	00051a80 	call	100051a8 <puts>
			while (!(usb_ctl_val & no_device))
10004418:	00000d06 	br	10004450 <usb_initialize+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
1000441c:	d095f40b 	ldhu	r2,22480(gp)
10004420:	10bfffcc 	andi	r2,r2,65535
10004424:	1009883a 	mov	r4,r2
10004428:	0002fa40 	call	10002fa4 <UsbRead>
1000442c:	d095f38d 	sth	r2,22478(gp)
				if(usb_ctl_val & no_device)
10004430:	d0d5f38b 	ldhu	r3,22478(gp)
10004434:	d095f48b 	ldhu	r2,22482(gp)
10004438:	1884703a 	and	r2,r3,r2
1000443c:	10bfffcc 	andi	r2,r2,65535
10004440:	10000126 	beq	r2,zero,10004448 <usb_initialize+0x388>
					goto USB_HOT_PLUG;
10004444:	003f2606 	br	100040e0 <__alt_data_end+0xf80040e0>

				usleep(2000);
10004448:	0101f404 	movi	r4,2000
1000444c:	00126380 	call	10012638 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
10004450:	d0d5f38b 	ldhu	r3,22478(gp)
10004454:	d095f48b 	ldhu	r2,22482(gp)
10004458:	1884703a 	and	r2,r3,r2
1000445c:	10bfffcc 	andi	r2,r2,65535
10004460:	103fee26 	beq	r2,zero,1000441c <__alt_data_end+0xf800441c>
10004464:	00000c06 	br	10004498 <usb_initialize+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
10004468:	d0d5f38b 	ldhu	r3,22478(gp)
1000446c:	d095f50b 	ldhu	r2,22484(gp)
10004470:	1884703a 	and	r2,r3,r2
10004474:	10bfffcc 	andi	r2,r2,65535
10004478:	10000426 	beq	r2,zero,1000448c <usb_initialize+0x3cc>
		{
			printf("[INFO]: full speed device\n");
1000447c:	01040074 	movhi	r4,4097
10004480:	2111eb04 	addi	r4,r4,18348
10004484:	00051a80 	call	100051a8 <puts>
10004488:	00000306 	br	10004498 <usb_initialize+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
1000448c:	01040074 	movhi	r4,4097
10004490:	2111f204 	addi	r4,r4,18376
10004494:	00051a80 	call	100051a8 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
10004498:	000309c0 	call	1000309c <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000449c:	00000306 	br	100044ac <usb_initialize+0x3ec>
	{
		UsbSetAddress();
100044a0:	000309c0 	call	1000309c <UsbSetAddress>
		usleep(10*1000);
100044a4:	0109c404 	movi	r4,10000
100044a8:	00126380 	call	10012638 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100044ac:	010000c4 	movi	r4,3
100044b0:	000051c0 	call	1000051c <IO_read>
100044b4:	10bfffcc 	andi	r2,r2,65535
100044b8:	1080040c 	andi	r2,r2,16
100044bc:	103ff826 	beq	r2,zero,100044a0 <__alt_data_end+0xf80044a0>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100044c0:	0003f3c0 	call	10003f3c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
100044c4:	01414184 	movi	r5,1286
100044c8:	01000084 	movi	r4,2
100044cc:	00004a00 	call	100004a0 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
100044d0:	0009883a 	mov	r4,zero
100044d4:	000051c0 	call	1000051c <IO_read>
100044d8:	10bfffcc 	andi	r2,r2,65535
100044dc:	100b883a 	mov	r5,r2
100044e0:	01040074 	movhi	r4,4097
100044e4:	2111f904 	addi	r4,r4,18404
100044e8:	00050ac0 	call	100050ac <printf>

	IO_write(HPI_ADDR,0x0508); // n
100044ec:	01414204 	movi	r5,1288
100044f0:	01000084 	movi	r4,2
100044f4:	00004a00 	call	100004a0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100044f8:	0009883a 	mov	r4,zero
100044fc:	000051c0 	call	1000051c <IO_read>
10004500:	d095f38d 	sth	r2,22478(gp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
10004504:	d095f38b 	ldhu	r2,22478(gp)
10004508:	10bfffcc 	andi	r2,r2,65535
1000450c:	100b883a 	mov	r5,r2
10004510:	01040074 	movhi	r4,4097
10004514:	21120404 	addi	r4,r4,18448
10004518:	00050ac0 	call	100050ac <printf>
	while (usb_ctl_val != 0x03) // retries occurred
1000451c:	0001883a 	nop
10004520:	d095f38b 	ldhu	r2,22478(gp)
10004524:	10bfffcc 	andi	r2,r2,65535
10004528:	108000d8 	cmpnei	r2,r2,3
1000452c:	10000326 	beq	r2,zero,1000453c <usb_initialize+0x47c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10004530:	0003fc00 	call	10003fc0 <UsbGetRetryCnt>
10004534:	d095f38d 	sth	r2,22478(gp)

		goto USB_HOT_PLUG;
10004538:	003ee906 	br	100040e0 <__alt_data_end+0xf80040e0>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
1000453c:	01040074 	movhi	r4,4097
10004540:	21121004 	addi	r4,r4,18496
10004544:	00051a80 	call	100051a8 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
10004548:	000319c0 	call	1000319c <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000454c:	00000306 	br	1000455c <usb_initialize+0x49c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
10004550:	000319c0 	call	1000319c <UsbGetDeviceDesc1>
		usleep(10*1000);
10004554:	0109c404 	movi	r4,10000
10004558:	00126380 	call	10012638 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000455c:	010000c4 	movi	r4,3
10004560:	000051c0 	call	1000051c <IO_read>
10004564:	10bfffcc 	andi	r2,r2,65535
10004568:	1080040c 	andi	r2,r2,16
1000456c:	103ff826 	beq	r2,zero,10004550 <__alt_data_end+0xf8004550>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10004570:	0003f3c0 	call	10003f3c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10004574:	01414184 	movi	r5,1286
10004578:	01000084 	movi	r4,2
1000457c:	00004a00 	call	100004a0 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10004580:	0009883a 	mov	r4,zero
10004584:	000051c0 	call	1000051c <IO_read>
10004588:	10bfffcc 	andi	r2,r2,65535
1000458c:	100b883a 	mov	r5,r2
10004590:	01040074 	movhi	r4,4097
10004594:	21121f04 	addi	r4,r4,18556
10004598:	00050ac0 	call	100050ac <printf>

	IO_write(HPI_ADDR,0x0508);
1000459c:	01414204 	movi	r5,1288
100045a0:	01000084 	movi	r4,2
100045a4:	00004a00 	call	100004a0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100045a8:	0009883a 	mov	r4,zero
100045ac:	000051c0 	call	1000051c <IO_read>
100045b0:	d095f38d 	sth	r2,22478(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100045b4:	d095f38b 	ldhu	r2,22478(gp)
100045b8:	10bfffcc 	andi	r2,r2,65535
100045bc:	100b883a 	mov	r5,r2
100045c0:	01040074 	movhi	r4,4097
100045c4:	21122a04 	addi	r4,r4,18600
100045c8:	00050ac0 	call	100050ac <printf>
	while (usb_ctl_val != 0x03)
100045cc:	00000206 	br	100045d8 <usb_initialize+0x518>
	{
		usb_ctl_val = UsbGetRetryCnt();
100045d0:	0003fc00 	call	10003fc0 <UsbGetRetryCnt>
100045d4:	d095f38d 	sth	r2,22478(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100045d8:	d095f38b 	ldhu	r2,22478(gp)
100045dc:	10bfffcc 	andi	r2,r2,65535
100045e0:	108000d8 	cmpnei	r2,r2,3
100045e4:	103ffa1e 	bne	r2,zero,100045d0 <__alt_data_end+0xf80045d0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
100045e8:	01040074 	movhi	r4,4097
100045ec:	21123604 	addi	r4,r4,18648
100045f0:	00051a80 	call	100051a8 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
100045f4:	00032e40 	call	100032e4 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100045f8:	00000306 	br	10004608 <usb_initialize+0x548>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
100045fc:	00032e40 	call	100032e4 <UsbGetDeviceDesc2>
		usleep(10*1000);
10004600:	0109c404 	movi	r4,10000
10004604:	00126380 	call	10012638 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004608:	010000c4 	movi	r4,3
1000460c:	000051c0 	call	1000051c <IO_read>
10004610:	10bfffcc 	andi	r2,r2,65535
10004614:	1080040c 	andi	r2,r2,16
10004618:	103ff826 	beq	r2,zero,100045fc <__alt_data_end+0xf80045fc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000461c:	0003f3c0 	call	10003f3c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10004620:	01414184 	movi	r5,1286
10004624:	01000084 	movi	r4,2
10004628:	00004a00 	call	100004a0 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000462c:	0009883a 	mov	r4,zero
10004630:	000051c0 	call	1000051c <IO_read>
10004634:	10bfffcc 	andi	r2,r2,65535
10004638:	100b883a 	mov	r5,r2
1000463c:	01040074 	movhi	r4,4097
10004640:	21121f04 	addi	r4,r4,18556
10004644:	00050ac0 	call	100050ac <printf>

	IO_write(HPI_ADDR,0x0508);
10004648:	01414204 	movi	r5,1288
1000464c:	01000084 	movi	r4,2
10004650:	00004a00 	call	100004a0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10004654:	0009883a 	mov	r4,zero
10004658:	000051c0 	call	1000051c <IO_read>
1000465c:	d095f38d 	sth	r2,22478(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10004660:	d095f38b 	ldhu	r2,22478(gp)
10004664:	10bfffcc 	andi	r2,r2,65535
10004668:	100b883a 	mov	r5,r2
1000466c:	01040074 	movhi	r4,4097
10004670:	21122a04 	addi	r4,r4,18600
10004674:	00050ac0 	call	100050ac <printf>
	while (usb_ctl_val != 0x03)
10004678:	00000206 	br	10004684 <usb_initialize+0x5c4>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000467c:	0003fc00 	call	10003fc0 <UsbGetRetryCnt>
10004680:	d095f38d 	sth	r2,22478(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10004684:	d095f38b 	ldhu	r2,22478(gp)
10004688:	10bfffcc 	andi	r2,r2,65535
1000468c:	108000d8 	cmpnei	r2,r2,3
10004690:	103ffa1e 	bne	r2,zero,1000467c <__alt_data_end+0xf800467c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
10004694:	01040074 	movhi	r4,4097
10004698:	21124a04 	addi	r4,r4,18728
1000469c:	00051a80 	call	100051a8 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
100046a0:	00034bc0 	call	100034bc <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100046a4:	00000306 	br	100046b4 <usb_initialize+0x5f4>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
100046a8:	00034bc0 	call	100034bc <UsbGetConfigDesc1>
		usleep(10*1000);
100046ac:	0109c404 	movi	r4,10000
100046b0:	00126380 	call	10012638 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100046b4:	010000c4 	movi	r4,3
100046b8:	000051c0 	call	1000051c <IO_read>
100046bc:	10bfffcc 	andi	r2,r2,65535
100046c0:	1080040c 	andi	r2,r2,16
100046c4:	103ff826 	beq	r2,zero,100046a8 <__alt_data_end+0xf80046a8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100046c8:	0003f3c0 	call	10003f3c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100046cc:	01414184 	movi	r5,1286
100046d0:	01000084 	movi	r4,2
100046d4:	00004a00 	call	100004a0 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
100046d8:	0009883a 	mov	r4,zero
100046dc:	000051c0 	call	1000051c <IO_read>
100046e0:	10bfffcc 	andi	r2,r2,65535
100046e4:	100b883a 	mov	r5,r2
100046e8:	01040074 	movhi	r4,4097
100046ec:	21125c04 	addi	r4,r4,18800
100046f0:	00050ac0 	call	100050ac <printf>

	IO_write(HPI_ADDR,0x0508);
100046f4:	01414204 	movi	r5,1288
100046f8:	01000084 	movi	r4,2
100046fc:	00004a00 	call	100004a0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10004700:	0009883a 	mov	r4,zero
10004704:	000051c0 	call	1000051c <IO_read>
10004708:	d095f38d 	sth	r2,22478(gp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
1000470c:	d095f38b 	ldhu	r2,22478(gp)
10004710:	10bfffcc 	andi	r2,r2,65535
10004714:	100b883a 	mov	r5,r2
10004718:	01040074 	movhi	r4,4097
1000471c:	21126704 	addi	r4,r4,18844
10004720:	00050ac0 	call	100050ac <printf>
	while (usb_ctl_val != 0x03)
10004724:	00000206 	br	10004730 <usb_initialize+0x670>
	{
		usb_ctl_val = UsbGetRetryCnt();
10004728:	0003fc00 	call	10003fc0 <UsbGetRetryCnt>
1000472c:	d095f38d 	sth	r2,22478(gp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10004730:	d095f38b 	ldhu	r2,22478(gp)
10004734:	10bfffcc 	andi	r2,r2,65535
10004738:	108000d8 	cmpnei	r2,r2,3
1000473c:	103ffa1e 	bne	r2,zero,10004728 <__alt_data_end+0xf8004728>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10004740:	01040074 	movhi	r4,4097
10004744:	21127304 	addi	r4,r4,18892
10004748:	00051a80 	call	100051a8 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
1000474c:	000364c0 	call	1000364c <UsbGetConfigDesc2>

	usleep(100*1000);
10004750:	010000b4 	movhi	r4,2
10004754:	2121a804 	addi	r4,r4,-31072
10004758:	00126380 	call	10012638 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000475c:	00000306 	br	1000476c <usb_initialize+0x6ac>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
10004760:	000364c0 	call	1000364c <UsbGetConfigDesc2>
		usleep(10*1000);
10004764:	0109c404 	movi	r4,10000
10004768:	00126380 	call	10012638 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000476c:	010000c4 	movi	r4,3
10004770:	000051c0 	call	1000051c <IO_read>
10004774:	10bfffcc 	andi	r2,r2,65535
10004778:	1080040c 	andi	r2,r2,16
1000477c:	103ff826 	beq	r2,zero,10004760 <__alt_data_end+0xf8004760>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10004780:	0003f3c0 	call	10003f3c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10004784:	01414184 	movi	r5,1286
10004788:	01000084 	movi	r4,2
1000478c:	00004a00 	call	100004a0 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
10004790:	0009883a 	mov	r4,zero
10004794:	000051c0 	call	1000051c <IO_read>
10004798:	10bfffcc 	andi	r2,r2,65535
1000479c:	100b883a 	mov	r5,r2
100047a0:	01040074 	movhi	r4,4097
100047a4:	21128604 	addi	r4,r4,18968
100047a8:	00050ac0 	call	100050ac <printf>

	IO_write(HPI_ADDR,0x0508);
100047ac:	01414204 	movi	r5,1288
100047b0:	01000084 	movi	r4,2
100047b4:	00004a00 	call	100004a0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100047b8:	0009883a 	mov	r4,zero
100047bc:	000051c0 	call	1000051c <IO_read>
100047c0:	d095f38d 	sth	r2,22478(gp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
100047c4:	d095f38b 	ldhu	r2,22478(gp)
100047c8:	10bfffcc 	andi	r2,r2,65535
100047cc:	100b883a 	mov	r5,r2
100047d0:	01040074 	movhi	r4,4097
100047d4:	21129104 	addi	r4,r4,19012
100047d8:	00050ac0 	call	100050ac <printf>
	while (usb_ctl_val != 0x03)
100047dc:	00000206 	br	100047e8 <usb_initialize+0x728>
	{
		usb_ctl_val = UsbGetRetryCnt();
100047e0:	0003fc00 	call	10003fc0 <UsbGetRetryCnt>
100047e4:	d095f38d 	sth	r2,22478(gp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100047e8:	d095f38b 	ldhu	r2,22478(gp)
100047ec:	10bfffcc 	andi	r2,r2,65535
100047f0:	108000d8 	cmpnei	r2,r2,3
100047f4:	103ffa1e 	bne	r2,zero,100047e0 <__alt_data_end+0xf80047e0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
100047f8:	01040074 	movhi	r4,4097
100047fc:	21129d04 	addi	r4,r4,19060
10004800:	00051a80 	call	100051a8 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10004804:	01415b04 	movi	r5,1388
10004808:	01000084 	movi	r4,2
1000480c:	00004a00 	call	100004a0 <IO_write>
	code = IO_read(HPI_DATA);
10004810:	0009883a 	mov	r4,zero
10004814:	000051c0 	call	1000051c <IO_read>
10004818:	d095f68d 	sth	r2,22490(gp)
	code = code & 0x003;
1000481c:	d095f68b 	ldhu	r2,22490(gp)
10004820:	108000cc 	andi	r2,r2,3
10004824:	d095f68d 	sth	r2,22490(gp)
	printf("\ncode = %x\n", code);
10004828:	d095f68b 	ldhu	r2,22490(gp)
1000482c:	10bfffcc 	andi	r2,r2,65535
10004830:	100b883a 	mov	r5,r2
10004834:	01040074 	movhi	r4,4097
10004838:	2112b004 	addi	r4,r4,19136
1000483c:	00050ac0 	call	100050ac <printf>

	if (code == 0x01)
10004840:	d095f68b 	ldhu	r2,22490(gp)
10004844:	10bfffcc 	andi	r2,r2,65535
10004848:	10800058 	cmpnei	r2,r2,1
1000484c:	1000041e 	bne	r2,zero,10004860 <usb_initialize+0x7a0>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10004850:	01040074 	movhi	r4,4097
10004854:	2112b304 	addi	r4,r4,19148
10004858:	00051a80 	call	100051a8 <puts>
1000485c:	00000306 	br	1000486c <usb_initialize+0x7ac>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10004860:	01040074 	movhi	r4,4097
10004864:	2112c204 	addi	r4,r4,19208
10004868:	00051a80 	call	100051a8 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
1000486c:	01415d84 	movi	r5,1398
10004870:	01000084 	movi	r4,2
10004874:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x073F);
10004878:	0141cfc4 	movi	r5,1855
1000487c:	0009883a 	mov	r4,zero
10004880:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x8105);
10004884:	01604154 	movui	r5,33029
10004888:	0009883a 	mov	r4,zero
1000488c:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0003);
10004890:	014000c4 	movi	r5,3
10004894:	0009883a 	mov	r4,zero
10004898:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0008);
1000489c:	01400204 	movi	r5,8
100048a0:	0009883a 	mov	r4,zero
100048a4:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
100048a8:	016b0294 	movui	r5,44042
100048ac:	0009883a 	mov	r4,zero
100048b0:	00004a00 	call	100004a0 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
100048b4:	01415d84 	movi	r5,1398
100048b8:	01006c04 	movi	r4,432
100048bc:	0002f4c0 	call	10002f4c <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
100048c0:	01415f04 	movi	r5,1404
100048c4:	01000084 	movi	r4,2
100048c8:	00004a00 	call	100004a0 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
100048cc:	0009883a 	mov	r4,zero
100048d0:	000051c0 	call	1000051c <IO_read>
100048d4:	d095f5c5 	stb	r2,22487(gp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
100048d8:	d095f5c3 	ldbu	r2,22487(gp)
100048dc:	10803fcc 	andi	r2,r2,255
100048e0:	100b883a 	mov	r5,r2
100048e4:	01040074 	movhi	r4,4097
100048e8:	2112cb04 	addi	r4,r4,19244
100048ec:	00050ac0 	call	100050ac <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
100048f0:	00038b40 	call	100038b4 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100048f4:	00000306 	br	10004904 <usb_initialize+0x844>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
100048f8:	00038b40 	call	100038b4 <UsbSetConfig>
		usleep(10*1000);
100048fc:	0109c404 	movi	r4,10000
10004900:	00126380 	call	10012638 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004904:	010000c4 	movi	r4,3
10004908:	000051c0 	call	1000051c <IO_read>
1000490c:	10bfffcc 	andi	r2,r2,65535
10004910:	1080040c 	andi	r2,r2,16
10004914:	103ff826 	beq	r2,zero,100048f8 <__alt_data_end+0xf80048f8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10004918:	0003f3c0 	call	10003f3c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
1000491c:	01414184 	movi	r5,1286
10004920:	01000084 	movi	r4,2
10004924:	00004a00 	call	100004a0 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10004928:	0009883a 	mov	r4,zero
1000492c:	000051c0 	call	1000051c <IO_read>
10004930:	10bfffcc 	andi	r2,r2,65535
10004934:	100b883a 	mov	r5,r2
10004938:	01040074 	movhi	r4,4097
1000493c:	2112d504 	addi	r4,r4,19284
10004940:	00050ac0 	call	100050ac <printf>

	IO_write(HPI_ADDR,0x0508);
10004944:	01414204 	movi	r5,1288
10004948:	01000084 	movi	r4,2
1000494c:	00004a00 	call	100004a0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10004950:	0009883a 	mov	r4,zero
10004954:	000051c0 	call	1000051c <IO_read>
10004958:	d095f38d 	sth	r2,22478(gp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
1000495c:	d095f38b 	ldhu	r2,22478(gp)
10004960:	10bfffcc 	andi	r2,r2,65535
10004964:	100b883a 	mov	r5,r2
10004968:	01040074 	movhi	r4,4097
1000496c:	2112e004 	addi	r4,r4,19328
10004970:	00050ac0 	call	100050ac <printf>
	while (usb_ctl_val != 0x03)
10004974:	00000206 	br	10004980 <usb_initialize+0x8c0>
	{
		usb_ctl_val = UsbGetRetryCnt();
10004978:	0003fc00 	call	10003fc0 <UsbGetRetryCnt>
1000497c:	d095f38d 	sth	r2,22478(gp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10004980:	d095f38b 	ldhu	r2,22478(gp)
10004984:	10bfffcc 	andi	r2,r2,65535
10004988:	108000d8 	cmpnei	r2,r2,3
1000498c:	103ffa1e 	bne	r2,zero,10004978 <__alt_data_end+0xf8004978>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10004990:	01040074 	movhi	r4,4097
10004994:	2112ec04 	addi	r4,r4,19376
10004998:	00051a80 	call	100051a8 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
1000499c:	00039b40 	call	100039b4 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100049a0:	00000306 	br	100049b0 <usb_initialize+0x8f0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
100049a4:	00039b40 	call	100039b4 <UsbClassRequest>
		usleep(10*1000);
100049a8:	0109c404 	movi	r4,10000
100049ac:	00126380 	call	10012638 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100049b0:	010000c4 	movi	r4,3
100049b4:	000051c0 	call	1000051c <IO_read>
100049b8:	10bfffcc 	andi	r2,r2,65535
100049bc:	1080040c 	andi	r2,r2,16
100049c0:	103ff826 	beq	r2,zero,100049a4 <__alt_data_end+0xf80049a4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100049c4:	0003f3c0 	call	10003f3c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100049c8:	01414184 	movi	r5,1286
100049cc:	01000084 	movi	r4,2
100049d0:	00004a00 	call	100004a0 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
100049d4:	0009883a 	mov	r4,zero
100049d8:	000051c0 	call	1000051c <IO_read>
100049dc:	10bfffcc 	andi	r2,r2,65535
100049e0:	100b883a 	mov	r5,r2
100049e4:	01040074 	movhi	r4,4097
100049e8:	2112fe04 	addi	r4,r4,19448
100049ec:	00050ac0 	call	100050ac <printf>

	IO_write(HPI_ADDR,0x0508);
100049f0:	01414204 	movi	r5,1288
100049f4:	01000084 	movi	r4,2
100049f8:	00004a00 	call	100004a0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100049fc:	0009883a 	mov	r4,zero
10004a00:	000051c0 	call	1000051c <IO_read>
10004a04:	d095f38d 	sth	r2,22478(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10004a08:	d095f38b 	ldhu	r2,22478(gp)
10004a0c:	10bfffcc 	andi	r2,r2,65535
10004a10:	100b883a 	mov	r5,r2
10004a14:	01040074 	movhi	r4,4097
10004a18:	21130904 	addi	r4,r4,19492
10004a1c:	00050ac0 	call	100050ac <printf>
	while (usb_ctl_val != 0x03)
10004a20:	00000206 	br	10004a2c <usb_initialize+0x96c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10004a24:	0003fc00 	call	10003fc0 <UsbGetRetryCnt>
10004a28:	d095f38d 	sth	r2,22478(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10004a2c:	d095f38b 	ldhu	r2,22478(gp)
10004a30:	10bfffcc 	andi	r2,r2,65535
10004a34:	108000d8 	cmpnei	r2,r2,3
10004a38:	103ffa1e 	bne	r2,zero,10004a24 <__alt_data_end+0xf8004a24>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10004a3c:	01040074 	movhi	r4,4097
10004a40:	21131504 	addi	r4,r4,19540
10004a44:	00051a80 	call	100051a8 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10004a48:	0003ab40 	call	10003ab4 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004a4c:	00000306 	br	10004a5c <usb_initialize+0x99c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10004a50:	0003ab40 	call	10003ab4 <UsbGetHidDesc>
		usleep(10*1000);
10004a54:	0109c404 	movi	r4,10000
10004a58:	00126380 	call	10012638 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004a5c:	010000c4 	movi	r4,3
10004a60:	000051c0 	call	1000051c <IO_read>
10004a64:	10bfffcc 	andi	r2,r2,65535
10004a68:	1080040c 	andi	r2,r2,16
10004a6c:	103ff826 	beq	r2,zero,10004a50 <__alt_data_end+0xf8004a50>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10004a70:	0003f3c0 	call	10003f3c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10004a74:	01414184 	movi	r5,1286
10004a78:	01000084 	movi	r4,2
10004a7c:	00004a00 	call	100004a0 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10004a80:	0009883a 	mov	r4,zero
10004a84:	000051c0 	call	1000051c <IO_read>
10004a88:	10bfffcc 	andi	r2,r2,65535
10004a8c:	100b883a 	mov	r5,r2
10004a90:	01040074 	movhi	r4,4097
10004a94:	2112fe04 	addi	r4,r4,19448
10004a98:	00050ac0 	call	100050ac <printf>

	IO_write(HPI_ADDR,0x0508);
10004a9c:	01414204 	movi	r5,1288
10004aa0:	01000084 	movi	r4,2
10004aa4:	00004a00 	call	100004a0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10004aa8:	0009883a 	mov	r4,zero
10004aac:	000051c0 	call	1000051c <IO_read>
10004ab0:	d095f38d 	sth	r2,22478(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10004ab4:	d095f38b 	ldhu	r2,22478(gp)
10004ab8:	10bfffcc 	andi	r2,r2,65535
10004abc:	100b883a 	mov	r5,r2
10004ac0:	01040074 	movhi	r4,4097
10004ac4:	21130904 	addi	r4,r4,19492
10004ac8:	00050ac0 	call	100050ac <printf>
	while (usb_ctl_val != 0x03)
10004acc:	00000206 	br	10004ad8 <usb_initialize+0xa18>
	{
		usb_ctl_val = UsbGetRetryCnt();
10004ad0:	0003fc00 	call	10003fc0 <UsbGetRetryCnt>
10004ad4:	d095f38d 	sth	r2,22478(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10004ad8:	d095f38b 	ldhu	r2,22478(gp)
10004adc:	10bfffcc 	andi	r2,r2,65535
10004ae0:	108000d8 	cmpnei	r2,r2,3
10004ae4:	103ffa1e 	bne	r2,zero,10004ad0 <__alt_data_end+0xf8004ad0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10004ae8:	01040074 	movhi	r4,4097
10004aec:	21132704 	addi	r4,r4,19612
10004af0:	00051a80 	call	100051a8 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10004af4:	0003bfc0 	call	10003bfc <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004af8:	00000306 	br	10004b08 <usb_initialize+0xa48>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10004afc:	0003bfc0 	call	10003bfc <UsbGetReportDesc>
		usleep(10*1000);
10004b00:	0109c404 	movi	r4,10000
10004b04:	00126380 	call	10012638 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004b08:	010000c4 	movi	r4,3
10004b0c:	000051c0 	call	1000051c <IO_read>
10004b10:	10bfffcc 	andi	r2,r2,65535
10004b14:	1080040c 	andi	r2,r2,16
10004b18:	103ff826 	beq	r2,zero,10004afc <__alt_data_end+0xf8004afc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10004b1c:	0003f3c0 	call	10003f3c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10004b20:	01414184 	movi	r5,1286
10004b24:	01000084 	movi	r4,2
10004b28:	00004a00 	call	100004a0 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10004b2c:	0009883a 	mov	r4,zero
10004b30:	000051c0 	call	1000051c <IO_read>
10004b34:	10bfffcc 	andi	r2,r2,65535
10004b38:	100b883a 	mov	r5,r2
10004b3c:	01040074 	movhi	r4,4097
10004b40:	21133b04 	addi	r4,r4,19692
10004b44:	00050ac0 	call	100050ac <printf>

	IO_write(HPI_ADDR,0x0508);
10004b48:	01414204 	movi	r5,1288
10004b4c:	01000084 	movi	r4,2
10004b50:	00004a00 	call	100004a0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10004b54:	0009883a 	mov	r4,zero
10004b58:	000051c0 	call	1000051c <IO_read>
10004b5c:	d095f38d 	sth	r2,22478(gp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10004b60:	d095f38b 	ldhu	r2,22478(gp)
10004b64:	10bfffcc 	andi	r2,r2,65535
10004b68:	100b883a 	mov	r5,r2
10004b6c:	01040074 	movhi	r4,4097
10004b70:	21134704 	addi	r4,r4,19740
10004b74:	00050ac0 	call	100050ac <printf>
	while (usb_ctl_val != 0x03)
10004b78:	00000206 	br	10004b84 <usb_initialize+0xac4>
	{
		usb_ctl_val = UsbGetRetryCnt();
10004b7c:	0003fc00 	call	10003fc0 <UsbGetRetryCnt>
10004b80:	d095f38d 	sth	r2,22478(gp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10004b84:	d095f38b 	ldhu	r2,22478(gp)
10004b88:	10bfffcc 	andi	r2,r2,65535
10004b8c:	108000d8 	cmpnei	r2,r2,3
10004b90:	103ffa1e 	bne	r2,zero,10004b7c <__alt_data_end+0xf8004b7c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10004b94:	01040074 	movhi	r4,4097
10004b98:	21135304 	addi	r4,r4,19788
10004b9c:	00051a80 	call	100051a8 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	// usleep(10000);
}
10004ba0:	0001883a 	nop
10004ba4:	e037883a 	mov	sp,fp
10004ba8:	dfc00117 	ldw	ra,4(sp)
10004bac:	df000017 	ldw	fp,0(sp)
10004bb0:	dec00204 	addi	sp,sp,8
10004bb4:	f800283a 	ret

10004bb8 <get_keycode_value>:


// Should be place in a while loop to keep fetching keycodes
int get_keycode_value() 
{
10004bb8:	defffd04 	addi	sp,sp,-12
10004bbc:	dfc00215 	stw	ra,8(sp)
10004bc0:	df000115 	stw	fp,4(sp)
10004bc4:	df000104 	addi	fp,sp,4
	// int keycode0 = 0;
	// int keycode1 = 0;
	int keycode = 0;
10004bc8:	e03fff15 	stw	zero,-4(fp)

	toggle++;
10004bcc:	d095f583 	ldbu	r2,22486(gp)
10004bd0:	10800044 	addi	r2,r2,1
10004bd4:	d095f585 	stb	r2,22486(gp)
	IO_write(HPI_ADDR,0x0500); //the start address
10004bd8:	01414004 	movi	r5,1280
10004bdc:	01000084 	movi	r4,2
10004be0:	00004a00 	call	100004a0 <IO_write>
	//data phase IN-1
	IO_write(HPI_DATA,0x051c); //500
10004be4:	01414704 	movi	r5,1308
10004be8:	0009883a 	mov	r4,zero
10004bec:	00004a00 	call	100004a0 <IO_write>

	IO_write(HPI_DATA,0x000f & data_size);//2 data length
10004bf0:	d095f5c3 	ldbu	r2,22487(gp)
10004bf4:	10803fcc 	andi	r2,r2,255
10004bf8:	108003cc 	andi	r2,r2,15
10004bfc:	100b883a 	mov	r5,r2
10004c00:	0009883a 	mov	r4,zero
10004c04:	00004a00 	call	100004a0 <IO_write>

	IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10004c08:	0140a444 	movi	r5,657
10004c0c:	0009883a 	mov	r4,zero
10004c10:	00004a00 	call	100004a0 <IO_write>
	if(toggle%2)
10004c14:	d095f583 	ldbu	r2,22486(gp)
10004c18:	1080004c 	andi	r2,r2,1
10004c1c:	10803fcc 	andi	r2,r2,255
10004c20:	10000426 	beq	r2,zero,10004c34 <get_keycode_value+0x7c>
	{
		IO_write(HPI_DATA,0x0001);//6 //data 1
10004c24:	01400044 	movi	r5,1
10004c28:	0009883a 	mov	r4,zero
10004c2c:	00004a00 	call	100004a0 <IO_write>
10004c30:	00000306 	br	10004c40 <get_keycode_value+0x88>
	}
	else
	{
		IO_write(HPI_DATA,0x0041);//6 //data 1
10004c34:	01401044 	movi	r5,65
10004c38:	0009883a 	mov	r4,zero
10004c3c:	00004a00 	call	100004a0 <IO_write>
	}
	IO_write(HPI_DATA,0x0013);//8
10004c40:	014004c4 	movi	r5,19
10004c44:	0009883a 	mov	r4,zero
10004c48:	00004a00 	call	100004a0 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10004c4c:	000b883a 	mov	r5,zero
10004c50:	0009883a 	mov	r4,zero
10004c54:	00004a00 	call	100004a0 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10004c58:	01414004 	movi	r5,1280
10004c5c:	01006c04 	movi	r4,432
10004c60:	0002f4c0 	call	10002f4c <UsbWrite>
	
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004c64:	00002506 	br	10004cfc <get_keycode_value+0x144>
	{
		IO_write(HPI_ADDR,0x0500); //the start address
10004c68:	01414004 	movi	r5,1280
10004c6c:	01000084 	movi	r4,2
10004c70:	00004a00 	call	100004a0 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10004c74:	01414704 	movi	r5,1308
10004c78:	0009883a 	mov	r4,zero
10004c7c:	00004a00 	call	100004a0 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10004c80:	d095f5c3 	ldbu	r2,22487(gp)
10004c84:	10803fcc 	andi	r2,r2,255
10004c88:	108003cc 	andi	r2,r2,15
10004c8c:	100b883a 	mov	r5,r2
10004c90:	0009883a 	mov	r4,zero
10004c94:	00004a00 	call	100004a0 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10004c98:	0140a444 	movi	r5,657
10004c9c:	0009883a 	mov	r4,zero
10004ca0:	00004a00 	call	100004a0 <IO_write>
		if(toggle%2)
10004ca4:	d095f583 	ldbu	r2,22486(gp)
10004ca8:	1080004c 	andi	r2,r2,1
10004cac:	10803fcc 	andi	r2,r2,255
10004cb0:	10000426 	beq	r2,zero,10004cc4 <get_keycode_value+0x10c>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10004cb4:	01400044 	movi	r5,1
10004cb8:	0009883a 	mov	r4,zero
10004cbc:	00004a00 	call	100004a0 <IO_write>
10004cc0:	00000306 	br	10004cd0 <get_keycode_value+0x118>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10004cc4:	01401044 	movi	r5,65
10004cc8:	0009883a 	mov	r4,zero
10004ccc:	00004a00 	call	100004a0 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10004cd0:	014004c4 	movi	r5,19
10004cd4:	0009883a 	mov	r4,zero
10004cd8:	00004a00 	call	100004a0 <IO_write>
		IO_write(HPI_DATA,0x0000);//
10004cdc:	000b883a 	mov	r5,zero
10004ce0:	0009883a 	mov	r4,zero
10004ce4:	00004a00 	call	100004a0 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10004ce8:	01414004 	movi	r5,1280
10004cec:	01006c04 	movi	r4,432
10004cf0:	0002f4c0 	call	10002f4c <UsbWrite>
		usleep(10*1000);
10004cf4:	0109c404 	movi	r4,10000
10004cf8:	00126380 	call	10012638 <usleep>
	}
	IO_write(HPI_DATA,0x0013);//8
	IO_write(HPI_DATA,0x0000);//a
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
	
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004cfc:	010000c4 	movi	r4,3
10004d00:	000051c0 	call	1000051c <IO_read>
10004d04:	10bfffcc 	andi	r2,r2,65535
10004d08:	1080040c 	andi	r2,r2,16
10004d0c:	103fd626 	beq	r2,zero,10004c68 <__alt_data_end+0xf8004c68>
		IO_write(HPI_DATA,0x0000);//
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		usleep(10*1000);
	}//end while

	usb_ctl_val = UsbWaitTDListDone();
10004d10:	0003f3c0 	call	10003f3c <UsbWaitTDListDone>
10004d14:	d095f38d 	sth	r2,22478(gp)
	/* Four key support */
	// keycode0 = UsbRead(0x051e);
	// keycode1 = UsbRead(0x0520);
	// keycode = keycode0 + (keycode1 << 8);
	/********************/
	keycode = UsbRead(0x051e);
10004d18:	01014784 	movi	r4,1310
10004d1c:	0002fa40 	call	10002fa4 <UsbRead>
10004d20:	10bfffcc 	andi	r2,r2,65535
10004d24:	e0bfff15 	stw	r2,-4(fp)
	printf("\nfirst two keycode values are %04x\n",keycode);
10004d28:	e17fff17 	ldw	r5,-4(fp)
10004d2c:	01040074 	movhi	r4,4097
10004d30:	21136704 	addi	r4,r4,19868
10004d34:	00050ac0 	call	100050ac <printf>
	// We only need the first keycode, which is at the lower byte of keycode.
	// Send the keycode to hardware via PIO.
	*keycode_base = keycode & 0xff;
10004d38:	00803404 	movi	r2,208
10004d3c:	e0ffff17 	ldw	r3,-4(fp)
10004d40:	10c00005 	stb	r3,0(r2)

	usleep(200);//usleep(5000);
10004d44:	01003204 	movi	r4,200
10004d48:	00126380 	call	10012638 <usleep>
	usb_ctl_val = UsbRead(ctl_reg);
10004d4c:	d095f40b 	ldhu	r2,22480(gp)
10004d50:	10bfffcc 	andi	r2,r2,65535
10004d54:	1009883a 	mov	r4,r2
10004d58:	0002fa40 	call	10002fa4 <UsbRead>
10004d5c:	d095f38d 	sth	r2,22478(gp)

	if(!(usb_ctl_val & no_device))
10004d60:	d0d5f38b 	ldhu	r3,22478(gp)
10004d64:	d095f48b 	ldhu	r2,22482(gp)
10004d68:	1884703a 	and	r2,r3,r2
10004d6c:	10bfffcc 	andi	r2,r2,65535
10004d70:	1000401e 	bne	r2,zero,10004e74 <get_keycode_value+0x2bc>
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10004d74:	d015f605 	stb	zero,22488(gp)
10004d78:	00000f06 	br	10004db8 <get_keycode_value+0x200>
		{
			usleep(5*1000);
10004d7c:	0104e204 	movi	r4,5000
10004d80:	00126380 	call	10012638 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10004d84:	d095f40b 	ldhu	r2,22480(gp)
10004d88:	10bfffcc 	andi	r2,r2,65535
10004d8c:	1009883a 	mov	r4,r2
10004d90:	0002fa40 	call	10002fa4 <UsbRead>
10004d94:	d095f38d 	sth	r2,22478(gp)
			if(usb_ctl_val & no_device) break;
10004d98:	d0d5f38b 	ldhu	r3,22478(gp)
10004d9c:	d095f48b 	ldhu	r2,22482(gp)
10004da0:	1884703a 	and	r2,r3,r2
10004da4:	10bfffcc 	andi	r2,r2,65535
10004da8:	1000081e 	bne	r2,zero,10004dcc <get_keycode_value+0x214>
	usb_ctl_val = UsbRead(ctl_reg);

	if(!(usb_ctl_val & no_device))
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10004dac:	d095f603 	ldbu	r2,22488(gp)
10004db0:	10800044 	addi	r2,r2,1
10004db4:	d095f605 	stb	r2,22488(gp)
10004db8:	d095f603 	ldbu	r2,22488(gp)
10004dbc:	10803fcc 	andi	r2,r2,255
10004dc0:	108001f0 	cmpltui	r2,r2,7
10004dc4:	103fed1e 	bne	r2,zero,10004d7c <__alt_data_end+0xf8004d7c>
10004dc8:	00000106 	br	10004dd0 <get_keycode_value+0x218>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
10004dcc:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
10004dd0:	d0d5f38b 	ldhu	r3,22478(gp)
10004dd4:	d095f48b 	ldhu	r2,22482(gp)
10004dd8:	1884703a 	and	r2,r3,r2
10004ddc:	10bfffcc 	andi	r2,r2,65535
10004de0:	1000241e 	bne	r2,zero,10004e74 <get_keycode_value+0x2bc>
		{
			printf("\n[INFO]: the keyboard has been removed!!! \n");
10004de4:	01040074 	movhi	r4,4097
10004de8:	21137004 	addi	r4,r4,19904
10004dec:	00051a80 	call	100051a8 <puts>
			printf("[INFO]: please insert again!!! \n");
10004df0:	01040074 	movhi	r4,4097
10004df4:	21137b04 	addi	r4,r4,19948
10004df8:	00051a80 	call	100051a8 <puts>
		}
	}

	while (!(usb_ctl_val & no_device))
10004dfc:	00001d06 	br	10004e74 <get_keycode_value+0x2bc>
	{

		usb_ctl_val = UsbRead(ctl_reg);
10004e00:	d095f40b 	ldhu	r2,22480(gp)
10004e04:	10bfffcc 	andi	r2,r2,65535
10004e08:	1009883a 	mov	r4,r2
10004e0c:	0002fa40 	call	10002fa4 <UsbRead>
10004e10:	d095f38d 	sth	r2,22478(gp)
		usleep(5*1000);
10004e14:	0104e204 	movi	r4,5000
10004e18:	00126380 	call	10012638 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10004e1c:	d095f40b 	ldhu	r2,22480(gp)
10004e20:	10bfffcc 	andi	r2,r2,65535
10004e24:	1009883a 	mov	r4,r2
10004e28:	0002fa40 	call	10002fa4 <UsbRead>
10004e2c:	d095f38d 	sth	r2,22478(gp)
		usleep(5*1000);
10004e30:	0104e204 	movi	r4,5000
10004e34:	00126380 	call	10012638 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10004e38:	d095f40b 	ldhu	r2,22480(gp)
10004e3c:	10bfffcc 	andi	r2,r2,65535
10004e40:	1009883a 	mov	r4,r2
10004e44:	0002fa40 	call	10002fa4 <UsbRead>
10004e48:	d095f38d 	sth	r2,22478(gp)
		usleep(5*1000);
10004e4c:	0104e204 	movi	r4,5000
10004e50:	00126380 	call	10012638 <usleep>

		if(usb_ctl_val & no_device)
10004e54:	d0d5f38b 	ldhu	r3,22478(gp)
10004e58:	d095f48b 	ldhu	r2,22482(gp)
10004e5c:	1884703a 	and	r2,r3,r2
10004e60:	10bfffcc 	andi	r2,r2,65535
10004e64:	10000126 	beq	r2,zero,10004e6c <get_keycode_value+0x2b4>
			usb_initialize();
10004e68:	00040c00 	call	100040c0 <usb_initialize>

		usleep(200);
10004e6c:	01003204 	movi	r4,200
10004e70:	00126380 	call	10012638 <usleep>
			printf("\n[INFO]: the keyboard has been removed!!! \n");
			printf("[INFO]: please insert again!!! \n");
		}
	}

	while (!(usb_ctl_val & no_device))
10004e74:	d0d5f38b 	ldhu	r3,22478(gp)
10004e78:	d095f48b 	ldhu	r2,22482(gp)
10004e7c:	1884703a 	and	r2,r3,r2
10004e80:	10bfffcc 	andi	r2,r2,65535
10004e84:	103fde26 	beq	r2,zero,10004e00 <__alt_data_end+0xf8004e00>
		if(usb_ctl_val & no_device)
			usb_initialize();

		usleep(200);
	}
	return keycode;
10004e88:	e0bfff17 	ldw	r2,-4(fp)
}
10004e8c:	e037883a 	mov	sp,fp
10004e90:	dfc00117 	ldw	ra,4(sp)
10004e94:	df000017 	ldw	fp,0(sp)
10004e98:	dec00204 	addi	sp,sp,8
10004e9c:	f800283a 	ret

10004ea0 <__divsi3>:
10004ea0:	20001b16 	blt	r4,zero,10004f10 <__divsi3+0x70>
10004ea4:	000f883a 	mov	r7,zero
10004ea8:	28001616 	blt	r5,zero,10004f04 <__divsi3+0x64>
10004eac:	200d883a 	mov	r6,r4
10004eb0:	29001a2e 	bgeu	r5,r4,10004f1c <__divsi3+0x7c>
10004eb4:	00800804 	movi	r2,32
10004eb8:	00c00044 	movi	r3,1
10004ebc:	00000106 	br	10004ec4 <__divsi3+0x24>
10004ec0:	10000d26 	beq	r2,zero,10004ef8 <__divsi3+0x58>
10004ec4:	294b883a 	add	r5,r5,r5
10004ec8:	10bfffc4 	addi	r2,r2,-1
10004ecc:	18c7883a 	add	r3,r3,r3
10004ed0:	293ffb36 	bltu	r5,r4,10004ec0 <__alt_data_end+0xf8004ec0>
10004ed4:	0005883a 	mov	r2,zero
10004ed8:	18000726 	beq	r3,zero,10004ef8 <__divsi3+0x58>
10004edc:	0005883a 	mov	r2,zero
10004ee0:	31400236 	bltu	r6,r5,10004eec <__divsi3+0x4c>
10004ee4:	314dc83a 	sub	r6,r6,r5
10004ee8:	10c4b03a 	or	r2,r2,r3
10004eec:	1806d07a 	srli	r3,r3,1
10004ef0:	280ad07a 	srli	r5,r5,1
10004ef4:	183ffa1e 	bne	r3,zero,10004ee0 <__alt_data_end+0xf8004ee0>
10004ef8:	38000126 	beq	r7,zero,10004f00 <__divsi3+0x60>
10004efc:	0085c83a 	sub	r2,zero,r2
10004f00:	f800283a 	ret
10004f04:	014bc83a 	sub	r5,zero,r5
10004f08:	39c0005c 	xori	r7,r7,1
10004f0c:	003fe706 	br	10004eac <__alt_data_end+0xf8004eac>
10004f10:	0109c83a 	sub	r4,zero,r4
10004f14:	01c00044 	movi	r7,1
10004f18:	003fe306 	br	10004ea8 <__alt_data_end+0xf8004ea8>
10004f1c:	00c00044 	movi	r3,1
10004f20:	003fee06 	br	10004edc <__alt_data_end+0xf8004edc>

10004f24 <__modsi3>:
10004f24:	20001716 	blt	r4,zero,10004f84 <__modsi3+0x60>
10004f28:	000f883a 	mov	r7,zero
10004f2c:	2005883a 	mov	r2,r4
10004f30:	28001216 	blt	r5,zero,10004f7c <__modsi3+0x58>
10004f34:	2900162e 	bgeu	r5,r4,10004f90 <__modsi3+0x6c>
10004f38:	01800804 	movi	r6,32
10004f3c:	00c00044 	movi	r3,1
10004f40:	00000106 	br	10004f48 <__modsi3+0x24>
10004f44:	30000a26 	beq	r6,zero,10004f70 <__modsi3+0x4c>
10004f48:	294b883a 	add	r5,r5,r5
10004f4c:	31bfffc4 	addi	r6,r6,-1
10004f50:	18c7883a 	add	r3,r3,r3
10004f54:	293ffb36 	bltu	r5,r4,10004f44 <__alt_data_end+0xf8004f44>
10004f58:	18000526 	beq	r3,zero,10004f70 <__modsi3+0x4c>
10004f5c:	1806d07a 	srli	r3,r3,1
10004f60:	11400136 	bltu	r2,r5,10004f68 <__modsi3+0x44>
10004f64:	1145c83a 	sub	r2,r2,r5
10004f68:	280ad07a 	srli	r5,r5,1
10004f6c:	183ffb1e 	bne	r3,zero,10004f5c <__alt_data_end+0xf8004f5c>
10004f70:	38000126 	beq	r7,zero,10004f78 <__modsi3+0x54>
10004f74:	0085c83a 	sub	r2,zero,r2
10004f78:	f800283a 	ret
10004f7c:	014bc83a 	sub	r5,zero,r5
10004f80:	003fec06 	br	10004f34 <__alt_data_end+0xf8004f34>
10004f84:	0109c83a 	sub	r4,zero,r4
10004f88:	01c00044 	movi	r7,1
10004f8c:	003fe706 	br	10004f2c <__alt_data_end+0xf8004f2c>
10004f90:	00c00044 	movi	r3,1
10004f94:	003ff106 	br	10004f5c <__alt_data_end+0xf8004f5c>

10004f98 <__udivsi3>:
10004f98:	200d883a 	mov	r6,r4
10004f9c:	2900152e 	bgeu	r5,r4,10004ff4 <__udivsi3+0x5c>
10004fa0:	28001416 	blt	r5,zero,10004ff4 <__udivsi3+0x5c>
10004fa4:	00800804 	movi	r2,32
10004fa8:	00c00044 	movi	r3,1
10004fac:	00000206 	br	10004fb8 <__udivsi3+0x20>
10004fb0:	10000e26 	beq	r2,zero,10004fec <__udivsi3+0x54>
10004fb4:	28000516 	blt	r5,zero,10004fcc <__udivsi3+0x34>
10004fb8:	294b883a 	add	r5,r5,r5
10004fbc:	10bfffc4 	addi	r2,r2,-1
10004fc0:	18c7883a 	add	r3,r3,r3
10004fc4:	293ffa36 	bltu	r5,r4,10004fb0 <__alt_data_end+0xf8004fb0>
10004fc8:	18000826 	beq	r3,zero,10004fec <__udivsi3+0x54>
10004fcc:	0005883a 	mov	r2,zero
10004fd0:	31400236 	bltu	r6,r5,10004fdc <__udivsi3+0x44>
10004fd4:	314dc83a 	sub	r6,r6,r5
10004fd8:	10c4b03a 	or	r2,r2,r3
10004fdc:	1806d07a 	srli	r3,r3,1
10004fe0:	280ad07a 	srli	r5,r5,1
10004fe4:	183ffa1e 	bne	r3,zero,10004fd0 <__alt_data_end+0xf8004fd0>
10004fe8:	f800283a 	ret
10004fec:	0005883a 	mov	r2,zero
10004ff0:	f800283a 	ret
10004ff4:	00c00044 	movi	r3,1
10004ff8:	003ff406 	br	10004fcc <__alt_data_end+0xf8004fcc>

10004ffc <__umodsi3>:
10004ffc:	2005883a 	mov	r2,r4
10005000:	2900122e 	bgeu	r5,r4,1000504c <__umodsi3+0x50>
10005004:	28001116 	blt	r5,zero,1000504c <__umodsi3+0x50>
10005008:	01800804 	movi	r6,32
1000500c:	00c00044 	movi	r3,1
10005010:	00000206 	br	1000501c <__umodsi3+0x20>
10005014:	30000c26 	beq	r6,zero,10005048 <__umodsi3+0x4c>
10005018:	28000516 	blt	r5,zero,10005030 <__umodsi3+0x34>
1000501c:	294b883a 	add	r5,r5,r5
10005020:	31bfffc4 	addi	r6,r6,-1
10005024:	18c7883a 	add	r3,r3,r3
10005028:	293ffa36 	bltu	r5,r4,10005014 <__alt_data_end+0xf8005014>
1000502c:	18000626 	beq	r3,zero,10005048 <__umodsi3+0x4c>
10005030:	1806d07a 	srli	r3,r3,1
10005034:	11400136 	bltu	r2,r5,1000503c <__umodsi3+0x40>
10005038:	1145c83a 	sub	r2,r2,r5
1000503c:	280ad07a 	srli	r5,r5,1
10005040:	183ffb1e 	bne	r3,zero,10005030 <__alt_data_end+0xf8005030>
10005044:	f800283a 	ret
10005048:	f800283a 	ret
1000504c:	00c00044 	movi	r3,1
10005050:	003ff706 	br	10005030 <__alt_data_end+0xf8005030>

10005054 <__mulsi3>:
10005054:	0005883a 	mov	r2,zero
10005058:	20000726 	beq	r4,zero,10005078 <__mulsi3+0x24>
1000505c:	20c0004c 	andi	r3,r4,1
10005060:	2008d07a 	srli	r4,r4,1
10005064:	18000126 	beq	r3,zero,1000506c <__mulsi3+0x18>
10005068:	1145883a 	add	r2,r2,r5
1000506c:	294b883a 	add	r5,r5,r5
10005070:	203ffa1e 	bne	r4,zero,1000505c <__alt_data_end+0xf800505c>
10005074:	f800283a 	ret
10005078:	f800283a 	ret

1000507c <_printf_r>:
1000507c:	defffd04 	addi	sp,sp,-12
10005080:	2805883a 	mov	r2,r5
10005084:	dfc00015 	stw	ra,0(sp)
10005088:	d9800115 	stw	r6,4(sp)
1000508c:	d9c00215 	stw	r7,8(sp)
10005090:	21400217 	ldw	r5,8(r4)
10005094:	d9c00104 	addi	r7,sp,4
10005098:	100d883a 	mov	r6,r2
1000509c:	00052540 	call	10005254 <___vfprintf_internal_r>
100050a0:	dfc00017 	ldw	ra,0(sp)
100050a4:	dec00304 	addi	sp,sp,12
100050a8:	f800283a 	ret

100050ac <printf>:
100050ac:	defffc04 	addi	sp,sp,-16
100050b0:	dfc00015 	stw	ra,0(sp)
100050b4:	d9400115 	stw	r5,4(sp)
100050b8:	d9800215 	stw	r6,8(sp)
100050bc:	d9c00315 	stw	r7,12(sp)
100050c0:	008400b4 	movhi	r2,4098
100050c4:	108a1204 	addi	r2,r2,10312
100050c8:	10800017 	ldw	r2,0(r2)
100050cc:	200b883a 	mov	r5,r4
100050d0:	d9800104 	addi	r6,sp,4
100050d4:	11000217 	ldw	r4,8(r2)
100050d8:	00075300 	call	10007530 <__vfprintf_internal>
100050dc:	dfc00017 	ldw	ra,0(sp)
100050e0:	dec00404 	addi	sp,sp,16
100050e4:	f800283a 	ret

100050e8 <_puts_r>:
100050e8:	defff604 	addi	sp,sp,-40
100050ec:	dc000715 	stw	r16,28(sp)
100050f0:	2021883a 	mov	r16,r4
100050f4:	2809883a 	mov	r4,r5
100050f8:	dc400815 	stw	r17,32(sp)
100050fc:	dfc00915 	stw	ra,36(sp)
10005100:	2823883a 	mov	r17,r5
10005104:	00051bc0 	call	100051bc <strlen>
10005108:	10c00044 	addi	r3,r2,1
1000510c:	d8800115 	stw	r2,4(sp)
10005110:	00840074 	movhi	r2,4097
10005114:	10938304 	addi	r2,r2,19980
10005118:	d8800215 	stw	r2,8(sp)
1000511c:	00800044 	movi	r2,1
10005120:	d8800315 	stw	r2,12(sp)
10005124:	00800084 	movi	r2,2
10005128:	dc400015 	stw	r17,0(sp)
1000512c:	d8c00615 	stw	r3,24(sp)
10005130:	dec00415 	stw	sp,16(sp)
10005134:	d8800515 	stw	r2,20(sp)
10005138:	80000226 	beq	r16,zero,10005144 <_puts_r+0x5c>
1000513c:	80800e17 	ldw	r2,56(r16)
10005140:	10001426 	beq	r2,zero,10005194 <_puts_r+0xac>
10005144:	81400217 	ldw	r5,8(r16)
10005148:	2880030b 	ldhu	r2,12(r5)
1000514c:	10c8000c 	andi	r3,r2,8192
10005150:	1800061e 	bne	r3,zero,1000516c <_puts_r+0x84>
10005154:	29001917 	ldw	r4,100(r5)
10005158:	00f7ffc4 	movi	r3,-8193
1000515c:	10880014 	ori	r2,r2,8192
10005160:	20c6703a 	and	r3,r4,r3
10005164:	2880030d 	sth	r2,12(r5)
10005168:	28c01915 	stw	r3,100(r5)
1000516c:	d9800404 	addi	r6,sp,16
10005170:	8009883a 	mov	r4,r16
10005174:	0009a980 	call	10009a98 <__sfvwrite_r>
10005178:	1000091e 	bne	r2,zero,100051a0 <_puts_r+0xb8>
1000517c:	00800284 	movi	r2,10
10005180:	dfc00917 	ldw	ra,36(sp)
10005184:	dc400817 	ldw	r17,32(sp)
10005188:	dc000717 	ldw	r16,28(sp)
1000518c:	dec00a04 	addi	sp,sp,40
10005190:	f800283a 	ret
10005194:	8009883a 	mov	r4,r16
10005198:	00096140 	call	10009614 <__sinit>
1000519c:	003fe906 	br	10005144 <__alt_data_end+0xf8005144>
100051a0:	00bfffc4 	movi	r2,-1
100051a4:	003ff606 	br	10005180 <__alt_data_end+0xf8005180>

100051a8 <puts>:
100051a8:	008400b4 	movhi	r2,4098
100051ac:	108a1204 	addi	r2,r2,10312
100051b0:	200b883a 	mov	r5,r4
100051b4:	11000017 	ldw	r4,0(r2)
100051b8:	00050e81 	jmpi	100050e8 <_puts_r>

100051bc <strlen>:
100051bc:	208000cc 	andi	r2,r4,3
100051c0:	10002026 	beq	r2,zero,10005244 <strlen+0x88>
100051c4:	20800007 	ldb	r2,0(r4)
100051c8:	10002026 	beq	r2,zero,1000524c <strlen+0x90>
100051cc:	2005883a 	mov	r2,r4
100051d0:	00000206 	br	100051dc <strlen+0x20>
100051d4:	10c00007 	ldb	r3,0(r2)
100051d8:	18001826 	beq	r3,zero,1000523c <strlen+0x80>
100051dc:	10800044 	addi	r2,r2,1
100051e0:	10c000cc 	andi	r3,r2,3
100051e4:	183ffb1e 	bne	r3,zero,100051d4 <__alt_data_end+0xf80051d4>
100051e8:	10c00017 	ldw	r3,0(r2)
100051ec:	01ffbff4 	movhi	r7,65279
100051f0:	39ffbfc4 	addi	r7,r7,-257
100051f4:	00ca303a 	nor	r5,zero,r3
100051f8:	01a02074 	movhi	r6,32897
100051fc:	19c7883a 	add	r3,r3,r7
10005200:	31a02004 	addi	r6,r6,-32640
10005204:	1946703a 	and	r3,r3,r5
10005208:	1986703a 	and	r3,r3,r6
1000520c:	1800091e 	bne	r3,zero,10005234 <strlen+0x78>
10005210:	10800104 	addi	r2,r2,4
10005214:	10c00017 	ldw	r3,0(r2)
10005218:	19cb883a 	add	r5,r3,r7
1000521c:	00c6303a 	nor	r3,zero,r3
10005220:	28c6703a 	and	r3,r5,r3
10005224:	1986703a 	and	r3,r3,r6
10005228:	183ff926 	beq	r3,zero,10005210 <__alt_data_end+0xf8005210>
1000522c:	00000106 	br	10005234 <strlen+0x78>
10005230:	10800044 	addi	r2,r2,1
10005234:	10c00007 	ldb	r3,0(r2)
10005238:	183ffd1e 	bne	r3,zero,10005230 <__alt_data_end+0xf8005230>
1000523c:	1105c83a 	sub	r2,r2,r4
10005240:	f800283a 	ret
10005244:	2005883a 	mov	r2,r4
10005248:	003fe706 	br	100051e8 <__alt_data_end+0xf80051e8>
1000524c:	0005883a 	mov	r2,zero
10005250:	f800283a 	ret

10005254 <___vfprintf_internal_r>:
10005254:	deffb804 	addi	sp,sp,-288
10005258:	dfc04715 	stw	ra,284(sp)
1000525c:	ddc04515 	stw	r23,276(sp)
10005260:	dd404315 	stw	r21,268(sp)
10005264:	d9002d15 	stw	r4,180(sp)
10005268:	282f883a 	mov	r23,r5
1000526c:	302b883a 	mov	r21,r6
10005270:	d9c02e15 	stw	r7,184(sp)
10005274:	df004615 	stw	fp,280(sp)
10005278:	dd804415 	stw	r22,272(sp)
1000527c:	dd004215 	stw	r20,264(sp)
10005280:	dcc04115 	stw	r19,260(sp)
10005284:	dc804015 	stw	r18,256(sp)
10005288:	dc403f15 	stw	r17,252(sp)
1000528c:	dc003e15 	stw	r16,248(sp)
10005290:	000a1940 	call	1000a194 <_localeconv_r>
10005294:	10800017 	ldw	r2,0(r2)
10005298:	1009883a 	mov	r4,r2
1000529c:	d8803415 	stw	r2,208(sp)
100052a0:	00051bc0 	call	100051bc <strlen>
100052a4:	d8803715 	stw	r2,220(sp)
100052a8:	d8802d17 	ldw	r2,180(sp)
100052ac:	10000226 	beq	r2,zero,100052b8 <___vfprintf_internal_r+0x64>
100052b0:	10800e17 	ldw	r2,56(r2)
100052b4:	1000fb26 	beq	r2,zero,100056a4 <___vfprintf_internal_r+0x450>
100052b8:	b880030b 	ldhu	r2,12(r23)
100052bc:	10c8000c 	andi	r3,r2,8192
100052c0:	1800061e 	bne	r3,zero,100052dc <___vfprintf_internal_r+0x88>
100052c4:	b9001917 	ldw	r4,100(r23)
100052c8:	00f7ffc4 	movi	r3,-8193
100052cc:	10880014 	ori	r2,r2,8192
100052d0:	20c6703a 	and	r3,r4,r3
100052d4:	b880030d 	sth	r2,12(r23)
100052d8:	b8c01915 	stw	r3,100(r23)
100052dc:	10c0020c 	andi	r3,r2,8
100052e0:	1800c326 	beq	r3,zero,100055f0 <___vfprintf_internal_r+0x39c>
100052e4:	b8c00417 	ldw	r3,16(r23)
100052e8:	1800c126 	beq	r3,zero,100055f0 <___vfprintf_internal_r+0x39c>
100052ec:	1080068c 	andi	r2,r2,26
100052f0:	00c00284 	movi	r3,10
100052f4:	10c0c626 	beq	r2,r3,10005610 <___vfprintf_internal_r+0x3bc>
100052f8:	d8c00404 	addi	r3,sp,16
100052fc:	05040074 	movhi	r20,4097
10005300:	d9001e04 	addi	r4,sp,120
10005304:	a5139484 	addi	r20,r20,20050
10005308:	d8c01e15 	stw	r3,120(sp)
1000530c:	d8002015 	stw	zero,128(sp)
10005310:	d8001f15 	stw	zero,124(sp)
10005314:	d8003315 	stw	zero,204(sp)
10005318:	d8003615 	stw	zero,216(sp)
1000531c:	d8003815 	stw	zero,224(sp)
10005320:	1811883a 	mov	r8,r3
10005324:	d8003915 	stw	zero,228(sp)
10005328:	d8003a15 	stw	zero,232(sp)
1000532c:	d8002f15 	stw	zero,188(sp)
10005330:	d9002815 	stw	r4,160(sp)
10005334:	a8800007 	ldb	r2,0(r21)
10005338:	10028b26 	beq	r2,zero,10005d68 <___vfprintf_internal_r+0xb14>
1000533c:	00c00944 	movi	r3,37
10005340:	a823883a 	mov	r17,r21
10005344:	10c0021e 	bne	r2,r3,10005350 <___vfprintf_internal_r+0xfc>
10005348:	00001406 	br	1000539c <___vfprintf_internal_r+0x148>
1000534c:	10c00326 	beq	r2,r3,1000535c <___vfprintf_internal_r+0x108>
10005350:	8c400044 	addi	r17,r17,1
10005354:	88800007 	ldb	r2,0(r17)
10005358:	103ffc1e 	bne	r2,zero,1000534c <__alt_data_end+0xf800534c>
1000535c:	8d61c83a 	sub	r16,r17,r21
10005360:	80000e26 	beq	r16,zero,1000539c <___vfprintf_internal_r+0x148>
10005364:	d8c02017 	ldw	r3,128(sp)
10005368:	d8801f17 	ldw	r2,124(sp)
1000536c:	45400015 	stw	r21,0(r8)
10005370:	1c07883a 	add	r3,r3,r16
10005374:	10800044 	addi	r2,r2,1
10005378:	d8c02015 	stw	r3,128(sp)
1000537c:	44000115 	stw	r16,4(r8)
10005380:	d8801f15 	stw	r2,124(sp)
10005384:	00c001c4 	movi	r3,7
10005388:	1880a916 	blt	r3,r2,10005630 <___vfprintf_internal_r+0x3dc>
1000538c:	42000204 	addi	r8,r8,8
10005390:	d9402f17 	ldw	r5,188(sp)
10005394:	2c0b883a 	add	r5,r5,r16
10005398:	d9402f15 	stw	r5,188(sp)
1000539c:	88800007 	ldb	r2,0(r17)
100053a0:	1000aa26 	beq	r2,zero,1000564c <___vfprintf_internal_r+0x3f8>
100053a4:	8d400044 	addi	r21,r17,1
100053a8:	8c400047 	ldb	r17,1(r17)
100053ac:	0021883a 	mov	r16,zero
100053b0:	00bfffc4 	movi	r2,-1
100053b4:	0025883a 	mov	r18,zero
100053b8:	dc002905 	stb	r16,164(sp)
100053bc:	d8002785 	stb	zero,158(sp)
100053c0:	d8002b05 	stb	zero,172(sp)
100053c4:	d8802a15 	stw	r2,168(sp)
100053c8:	d8003115 	stw	zero,196(sp)
100053cc:	04c01604 	movi	r19,88
100053d0:	05800244 	movi	r22,9
100053d4:	9021883a 	mov	r16,r18
100053d8:	4039883a 	mov	fp,r8
100053dc:	ad400044 	addi	r21,r21,1
100053e0:	88bff804 	addi	r2,r17,-32
100053e4:	98833236 	bltu	r19,r2,100060b0 <___vfprintf_internal_r+0xe5c>
100053e8:	100490ba 	slli	r2,r2,2
100053ec:	00c40034 	movhi	r3,4096
100053f0:	18d50004 	addi	r3,r3,21504
100053f4:	10c5883a 	add	r2,r2,r3
100053f8:	10800017 	ldw	r2,0(r2)
100053fc:	1000683a 	jmp	r2
10005400:	10005fa8 	cmpgeui	zero,r2,382
10005404:	100060b0 	cmpltui	zero,r2,386
10005408:	100060b0 	cmpltui	zero,r2,386
1000540c:	10005fc8 	cmpgei	zero,r2,383
10005410:	100060b0 	cmpltui	zero,r2,386
10005414:	100060b0 	cmpltui	zero,r2,386
10005418:	100060b0 	cmpltui	zero,r2,386
1000541c:	100060b0 	cmpltui	zero,r2,386
10005420:	100060b0 	cmpltui	zero,r2,386
10005424:	100060b0 	cmpltui	zero,r2,386
10005428:	100056b0 	cmpltui	zero,r2,346
1000542c:	10005eb8 	rdprs	zero,r2,378
10005430:	100060b0 	cmpltui	zero,r2,386
10005434:	10005574 	orhi	zero,r2,341
10005438:	100056d4 	ori	zero,r2,347
1000543c:	100060b0 	cmpltui	zero,r2,386
10005440:	10005724 	muli	zero,r2,348
10005444:	10005730 	cmpltui	zero,r2,348
10005448:	10005730 	cmpltui	zero,r2,348
1000544c:	10005730 	cmpltui	zero,r2,348
10005450:	10005730 	cmpltui	zero,r2,348
10005454:	10005730 	cmpltui	zero,r2,348
10005458:	10005730 	cmpltui	zero,r2,348
1000545c:	10005730 	cmpltui	zero,r2,348
10005460:	10005730 	cmpltui	zero,r2,348
10005464:	10005730 	cmpltui	zero,r2,348
10005468:	100060b0 	cmpltui	zero,r2,386
1000546c:	100060b0 	cmpltui	zero,r2,386
10005470:	100060b0 	cmpltui	zero,r2,386
10005474:	100060b0 	cmpltui	zero,r2,386
10005478:	100060b0 	cmpltui	zero,r2,386
1000547c:	100060b0 	cmpltui	zero,r2,386
10005480:	100060b0 	cmpltui	zero,r2,386
10005484:	100060b0 	cmpltui	zero,r2,386
10005488:	100060b0 	cmpltui	zero,r2,386
1000548c:	100060b0 	cmpltui	zero,r2,386
10005490:	1000576c 	andhi	zero,r2,349
10005494:	10005834 	orhi	zero,r2,352
10005498:	100060b0 	cmpltui	zero,r2,386
1000549c:	10005834 	orhi	zero,r2,352
100054a0:	100060b0 	cmpltui	zero,r2,386
100054a4:	100060b0 	cmpltui	zero,r2,386
100054a8:	100060b0 	cmpltui	zero,r2,386
100054ac:	100060b0 	cmpltui	zero,r2,386
100054b0:	100058e0 	cmpeqi	zero,r2,355
100054b4:	100060b0 	cmpltui	zero,r2,386
100054b8:	100060b0 	cmpltui	zero,r2,386
100054bc:	100058ec 	andhi	zero,r2,355
100054c0:	100060b0 	cmpltui	zero,r2,386
100054c4:	100060b0 	cmpltui	zero,r2,386
100054c8:	100060b0 	cmpltui	zero,r2,386
100054cc:	100060b0 	cmpltui	zero,r2,386
100054d0:	100060b0 	cmpltui	zero,r2,386
100054d4:	10005d70 	cmpltui	zero,r2,373
100054d8:	100060b0 	cmpltui	zero,r2,386
100054dc:	100060b0 	cmpltui	zero,r2,386
100054e0:	10005ddc 	xori	zero,r2,375
100054e4:	100060b0 	cmpltui	zero,r2,386
100054e8:	100060b0 	cmpltui	zero,r2,386
100054ec:	100060b0 	cmpltui	zero,r2,386
100054f0:	100060b0 	cmpltui	zero,r2,386
100054f4:	100060b0 	cmpltui	zero,r2,386
100054f8:	100060b0 	cmpltui	zero,r2,386
100054fc:	100060b0 	cmpltui	zero,r2,386
10005500:	100060b0 	cmpltui	zero,r2,386
10005504:	100060b0 	cmpltui	zero,r2,386
10005508:	100060b0 	cmpltui	zero,r2,386
1000550c:	10006054 	ori	zero,r2,385
10005510:	10005fd4 	ori	zero,r2,383
10005514:	10005834 	orhi	zero,r2,352
10005518:	10005834 	orhi	zero,r2,352
1000551c:	10005834 	orhi	zero,r2,352
10005520:	10005ff4 	orhi	zero,r2,383
10005524:	10005fd4 	ori	zero,r2,383
10005528:	100060b0 	cmpltui	zero,r2,386
1000552c:	100060b0 	cmpltui	zero,r2,386
10005530:	10006000 	call	11000600 <__alt_heap_start+0xfd0480>
10005534:	100060b0 	cmpltui	zero,r2,386
10005538:	10006014 	ori	zero,r2,384
1000553c:	10005e98 	cmpnei	zero,r2,378
10005540:	10005580 	call	11000558 <__alt_heap_start+0xfd03d8>
10005544:	10005ed0 	cmplti	zero,r2,379
10005548:	100060b0 	cmpltui	zero,r2,386
1000554c:	10005edc 	xori	zero,r2,379
10005550:	100060b0 	cmpltui	zero,r2,386
10005554:	10005f40 	call	110005f4 <__alt_heap_start+0xfd0474>
10005558:	100060b0 	cmpltui	zero,r2,386
1000555c:	100060b0 	cmpltui	zero,r2,386
10005560:	10005f60 	cmpeqi	zero,r2,381
10005564:	d8c03117 	ldw	r3,196(sp)
10005568:	d8802e15 	stw	r2,184(sp)
1000556c:	00c7c83a 	sub	r3,zero,r3
10005570:	d8c03115 	stw	r3,196(sp)
10005574:	84000114 	ori	r16,r16,4
10005578:	ac400007 	ldb	r17,0(r21)
1000557c:	003f9706 	br	100053dc <__alt_data_end+0xf80053dc>
10005580:	00800c04 	movi	r2,48
10005584:	d8802705 	stb	r2,156(sp)
10005588:	00801e04 	movi	r2,120
1000558c:	d8802745 	stb	r2,157(sp)
10005590:	d9002a17 	ldw	r4,168(sp)
10005594:	d8802e17 	ldw	r2,184(sp)
10005598:	d8002785 	stb	zero,158(sp)
1000559c:	e011883a 	mov	r8,fp
100055a0:	10c00104 	addi	r3,r2,4
100055a4:	14c00017 	ldw	r19,0(r2)
100055a8:	002d883a 	mov	r22,zero
100055ac:	80800094 	ori	r2,r16,2
100055b0:	2002ca16 	blt	r4,zero,100060dc <___vfprintf_internal_r+0xe88>
100055b4:	00bfdfc4 	movi	r2,-129
100055b8:	80a4703a 	and	r18,r16,r2
100055bc:	d8c02e15 	stw	r3,184(sp)
100055c0:	94800094 	ori	r18,r18,2
100055c4:	9802b41e 	bne	r19,zero,10006098 <___vfprintf_internal_r+0xe44>
100055c8:	01440074 	movhi	r5,4097
100055cc:	29538d04 	addi	r5,r5,20020
100055d0:	d9403915 	stw	r5,228(sp)
100055d4:	04401e04 	movi	r17,120
100055d8:	d8802a17 	ldw	r2,168(sp)
100055dc:	0039883a 	mov	fp,zero
100055e0:	1001fa26 	beq	r2,zero,10005dcc <___vfprintf_internal_r+0xb78>
100055e4:	0027883a 	mov	r19,zero
100055e8:	002d883a 	mov	r22,zero
100055ec:	00021906 	br	10005e54 <___vfprintf_internal_r+0xc00>
100055f0:	d9002d17 	ldw	r4,180(sp)
100055f4:	b80b883a 	mov	r5,r23
100055f8:	00076080 	call	10007608 <__swsetup_r>
100055fc:	1005dc1e 	bne	r2,zero,10006d70 <___vfprintf_internal_r+0x1b1c>
10005600:	b880030b 	ldhu	r2,12(r23)
10005604:	00c00284 	movi	r3,10
10005608:	1080068c 	andi	r2,r2,26
1000560c:	10ff3a1e 	bne	r2,r3,100052f8 <__alt_data_end+0xf80052f8>
10005610:	b880038f 	ldh	r2,14(r23)
10005614:	103f3816 	blt	r2,zero,100052f8 <__alt_data_end+0xf80052f8>
10005618:	d9c02e17 	ldw	r7,184(sp)
1000561c:	d9002d17 	ldw	r4,180(sp)
10005620:	a80d883a 	mov	r6,r21
10005624:	b80b883a 	mov	r5,r23
10005628:	000754c0 	call	1000754c <__sbprintf>
1000562c:	00001106 	br	10005674 <___vfprintf_internal_r+0x420>
10005630:	d9002d17 	ldw	r4,180(sp)
10005634:	d9801e04 	addi	r6,sp,120
10005638:	b80b883a 	mov	r5,r23
1000563c:	000ca340 	call	1000ca34 <__sprint_r>
10005640:	1000081e 	bne	r2,zero,10005664 <___vfprintf_internal_r+0x410>
10005644:	da000404 	addi	r8,sp,16
10005648:	003f5106 	br	10005390 <__alt_data_end+0xf8005390>
1000564c:	d8802017 	ldw	r2,128(sp)
10005650:	10000426 	beq	r2,zero,10005664 <___vfprintf_internal_r+0x410>
10005654:	d9002d17 	ldw	r4,180(sp)
10005658:	d9801e04 	addi	r6,sp,120
1000565c:	b80b883a 	mov	r5,r23
10005660:	000ca340 	call	1000ca34 <__sprint_r>
10005664:	b880030b 	ldhu	r2,12(r23)
10005668:	1080100c 	andi	r2,r2,64
1000566c:	1005c01e 	bne	r2,zero,10006d70 <___vfprintf_internal_r+0x1b1c>
10005670:	d8802f17 	ldw	r2,188(sp)
10005674:	dfc04717 	ldw	ra,284(sp)
10005678:	df004617 	ldw	fp,280(sp)
1000567c:	ddc04517 	ldw	r23,276(sp)
10005680:	dd804417 	ldw	r22,272(sp)
10005684:	dd404317 	ldw	r21,268(sp)
10005688:	dd004217 	ldw	r20,264(sp)
1000568c:	dcc04117 	ldw	r19,260(sp)
10005690:	dc804017 	ldw	r18,256(sp)
10005694:	dc403f17 	ldw	r17,252(sp)
10005698:	dc003e17 	ldw	r16,248(sp)
1000569c:	dec04804 	addi	sp,sp,288
100056a0:	f800283a 	ret
100056a4:	d9002d17 	ldw	r4,180(sp)
100056a8:	00096140 	call	10009614 <__sinit>
100056ac:	003f0206 	br	100052b8 <__alt_data_end+0xf80052b8>
100056b0:	d9002e17 	ldw	r4,184(sp)
100056b4:	d9402e17 	ldw	r5,184(sp)
100056b8:	21000017 	ldw	r4,0(r4)
100056bc:	28800104 	addi	r2,r5,4
100056c0:	d9003115 	stw	r4,196(sp)
100056c4:	203fa716 	blt	r4,zero,10005564 <__alt_data_end+0xf8005564>
100056c8:	d8802e15 	stw	r2,184(sp)
100056cc:	ac400007 	ldb	r17,0(r21)
100056d0:	003f4206 	br	100053dc <__alt_data_end+0xf80053dc>
100056d4:	ac400007 	ldb	r17,0(r21)
100056d8:	01000a84 	movi	r4,42
100056dc:	a8c00044 	addi	r3,r21,1
100056e0:	89075826 	beq	r17,r4,10007444 <___vfprintf_internal_r+0x21f0>
100056e4:	8cbff404 	addi	r18,r17,-48
100056e8:	b486ae36 	bltu	r22,r18,100071a4 <___vfprintf_internal_r+0x1f50>
100056ec:	0009883a 	mov	r4,zero
100056f0:	1823883a 	mov	r17,r3
100056f4:	01400284 	movi	r5,10
100056f8:	00050540 	call	10005054 <__mulsi3>
100056fc:	88c00007 	ldb	r3,0(r17)
10005700:	1489883a 	add	r4,r2,r18
10005704:	8d400044 	addi	r21,r17,1
10005708:	1cbff404 	addi	r18,r3,-48
1000570c:	a823883a 	mov	r17,r21
10005710:	b4bff82e 	bgeu	r22,r18,100056f4 <__alt_data_end+0xf80056f4>
10005714:	1823883a 	mov	r17,r3
10005718:	2005f616 	blt	r4,zero,10006ef4 <___vfprintf_internal_r+0x1ca0>
1000571c:	d9002a15 	stw	r4,168(sp)
10005720:	003f2f06 	br	100053e0 <__alt_data_end+0xf80053e0>
10005724:	84002014 	ori	r16,r16,128
10005728:	ac400007 	ldb	r17,0(r21)
1000572c:	003f2b06 	br	100053dc <__alt_data_end+0xf80053dc>
10005730:	8cbff404 	addi	r18,r17,-48
10005734:	d8003115 	stw	zero,196(sp)
10005738:	0009883a 	mov	r4,zero
1000573c:	a823883a 	mov	r17,r21
10005740:	01400284 	movi	r5,10
10005744:	00050540 	call	10005054 <__mulsi3>
10005748:	88c00007 	ldb	r3,0(r17)
1000574c:	9089883a 	add	r4,r18,r2
10005750:	ad400044 	addi	r21,r21,1
10005754:	1cbff404 	addi	r18,r3,-48
10005758:	a823883a 	mov	r17,r21
1000575c:	b4bff82e 	bgeu	r22,r18,10005740 <__alt_data_end+0xf8005740>
10005760:	1823883a 	mov	r17,r3
10005764:	d9003115 	stw	r4,196(sp)
10005768:	003f1d06 	br	100053e0 <__alt_data_end+0xf80053e0>
1000576c:	8025883a 	mov	r18,r16
10005770:	dc002903 	ldbu	r16,164(sp)
10005774:	e011883a 	mov	r8,fp
10005778:	84003fcc 	andi	r16,r16,255
1000577c:	8007531e 	bne	r16,zero,100074cc <___vfprintf_internal_r+0x2278>
10005780:	94800414 	ori	r18,r18,16
10005784:	9080080c 	andi	r2,r18,32
10005788:	1003a326 	beq	r2,zero,10006618 <___vfprintf_internal_r+0x13c4>
1000578c:	d9002e17 	ldw	r4,184(sp)
10005790:	20800117 	ldw	r2,4(r4)
10005794:	24c00017 	ldw	r19,0(r4)
10005798:	21000204 	addi	r4,r4,8
1000579c:	d9002e15 	stw	r4,184(sp)
100057a0:	102d883a 	mov	r22,r2
100057a4:	10047316 	blt	r2,zero,10006974 <___vfprintf_internal_r+0x1720>
100057a8:	d9002a17 	ldw	r4,168(sp)
100057ac:	df002783 	ldbu	fp,158(sp)
100057b0:	2003e416 	blt	r4,zero,10006744 <___vfprintf_internal_r+0x14f0>
100057b4:	00ffdfc4 	movi	r3,-129
100057b8:	9d84b03a 	or	r2,r19,r22
100057bc:	90e4703a 	and	r18,r18,r3
100057c0:	10018026 	beq	r2,zero,10005dc4 <___vfprintf_internal_r+0xb70>
100057c4:	b003ab26 	beq	r22,zero,10006674 <___vfprintf_internal_r+0x1420>
100057c8:	dc402915 	stw	r17,164(sp)
100057cc:	dc001e04 	addi	r16,sp,120
100057d0:	b023883a 	mov	r17,r22
100057d4:	402d883a 	mov	r22,r8
100057d8:	9809883a 	mov	r4,r19
100057dc:	880b883a 	mov	r5,r17
100057e0:	01800284 	movi	r6,10
100057e4:	000f883a 	mov	r7,zero
100057e8:	000ef780 	call	1000ef78 <__umoddi3>
100057ec:	10800c04 	addi	r2,r2,48
100057f0:	843fffc4 	addi	r16,r16,-1
100057f4:	9809883a 	mov	r4,r19
100057f8:	880b883a 	mov	r5,r17
100057fc:	80800005 	stb	r2,0(r16)
10005800:	01800284 	movi	r6,10
10005804:	000f883a 	mov	r7,zero
10005808:	000e97c0 	call	1000e97c <__udivdi3>
1000580c:	1027883a 	mov	r19,r2
10005810:	10c4b03a 	or	r2,r2,r3
10005814:	1823883a 	mov	r17,r3
10005818:	103fef1e 	bne	r2,zero,100057d8 <__alt_data_end+0xf80057d8>
1000581c:	d8c02817 	ldw	r3,160(sp)
10005820:	dc402917 	ldw	r17,164(sp)
10005824:	b011883a 	mov	r8,r22
10005828:	1c07c83a 	sub	r3,r3,r16
1000582c:	d8c02b15 	stw	r3,172(sp)
10005830:	00005f06 	br	100059b0 <___vfprintf_internal_r+0x75c>
10005834:	8025883a 	mov	r18,r16
10005838:	dc002903 	ldbu	r16,164(sp)
1000583c:	e011883a 	mov	r8,fp
10005840:	84003fcc 	andi	r16,r16,255
10005844:	80071e1e 	bne	r16,zero,100074c0 <___vfprintf_internal_r+0x226c>
10005848:	9080020c 	andi	r2,r18,8
1000584c:	1004af26 	beq	r2,zero,10006b0c <___vfprintf_internal_r+0x18b8>
10005850:	d9002e17 	ldw	r4,184(sp)
10005854:	d9402e17 	ldw	r5,184(sp)
10005858:	d8802e17 	ldw	r2,184(sp)
1000585c:	21000017 	ldw	r4,0(r4)
10005860:	29400117 	ldw	r5,4(r5)
10005864:	10800204 	addi	r2,r2,8
10005868:	d9003615 	stw	r4,216(sp)
1000586c:	d9403815 	stw	r5,224(sp)
10005870:	d8802e15 	stw	r2,184(sp)
10005874:	d9003617 	ldw	r4,216(sp)
10005878:	d9403817 	ldw	r5,224(sp)
1000587c:	da003d15 	stw	r8,244(sp)
10005880:	04000044 	movi	r16,1
10005884:	000c6580 	call	1000c658 <__fpclassifyd>
10005888:	da003d17 	ldw	r8,244(sp)
1000588c:	1404441e 	bne	r2,r16,100069a0 <___vfprintf_internal_r+0x174c>
10005890:	d9003617 	ldw	r4,216(sp)
10005894:	d9403817 	ldw	r5,224(sp)
10005898:	000d883a 	mov	r6,zero
1000589c:	000f883a 	mov	r7,zero
100058a0:	001091c0 	call	1001091c <__ledf2>
100058a4:	da003d17 	ldw	r8,244(sp)
100058a8:	1005e316 	blt	r2,zero,10007038 <___vfprintf_internal_r+0x1de4>
100058ac:	df002783 	ldbu	fp,158(sp)
100058b0:	008011c4 	movi	r2,71
100058b4:	1445580e 	bge	r2,r17,10006e18 <___vfprintf_internal_r+0x1bc4>
100058b8:	04040074 	movhi	r16,4097
100058bc:	84138504 	addi	r16,r16,19988
100058c0:	00c000c4 	movi	r3,3
100058c4:	00bfdfc4 	movi	r2,-129
100058c8:	d8c02915 	stw	r3,164(sp)
100058cc:	90a4703a 	and	r18,r18,r2
100058d0:	d8c02b15 	stw	r3,172(sp)
100058d4:	d8002a15 	stw	zero,168(sp)
100058d8:	d8003215 	stw	zero,200(sp)
100058dc:	00003a06 	br	100059c8 <___vfprintf_internal_r+0x774>
100058e0:	84000214 	ori	r16,r16,8
100058e4:	ac400007 	ldb	r17,0(r21)
100058e8:	003ebc06 	br	100053dc <__alt_data_end+0xf80053dc>
100058ec:	8025883a 	mov	r18,r16
100058f0:	dc002903 	ldbu	r16,164(sp)
100058f4:	e011883a 	mov	r8,fp
100058f8:	84003fcc 	andi	r16,r16,255
100058fc:	8007001e 	bne	r16,zero,10007500 <___vfprintf_internal_r+0x22ac>
10005900:	94800414 	ori	r18,r18,16
10005904:	9080080c 	andi	r2,r18,32
10005908:	1002fa26 	beq	r2,zero,100064f4 <___vfprintf_internal_r+0x12a0>
1000590c:	d9002e17 	ldw	r4,184(sp)
10005910:	d9402a17 	ldw	r5,168(sp)
10005914:	d8002785 	stb	zero,158(sp)
10005918:	20800204 	addi	r2,r4,8
1000591c:	24c00017 	ldw	r19,0(r4)
10005920:	25800117 	ldw	r22,4(r4)
10005924:	2804b116 	blt	r5,zero,10006bec <___vfprintf_internal_r+0x1998>
10005928:	013fdfc4 	movi	r4,-129
1000592c:	9d86b03a 	or	r3,r19,r22
10005930:	d8802e15 	stw	r2,184(sp)
10005934:	9124703a 	and	r18,r18,r4
10005938:	1802fb1e 	bne	r3,zero,10006528 <___vfprintf_internal_r+0x12d4>
1000593c:	d8c02a17 	ldw	r3,168(sp)
10005940:	0039883a 	mov	fp,zero
10005944:	1805e526 	beq	r3,zero,100070dc <___vfprintf_internal_r+0x1e88>
10005948:	0027883a 	mov	r19,zero
1000594c:	002d883a 	mov	r22,zero
10005950:	dc001e04 	addi	r16,sp,120
10005954:	9806d0fa 	srli	r3,r19,3
10005958:	b008977a 	slli	r4,r22,29
1000595c:	b02cd0fa 	srli	r22,r22,3
10005960:	9cc001cc 	andi	r19,r19,7
10005964:	98800c04 	addi	r2,r19,48
10005968:	843fffc4 	addi	r16,r16,-1
1000596c:	20e6b03a 	or	r19,r4,r3
10005970:	80800005 	stb	r2,0(r16)
10005974:	9d86b03a 	or	r3,r19,r22
10005978:	183ff61e 	bne	r3,zero,10005954 <__alt_data_end+0xf8005954>
1000597c:	90c0004c 	andi	r3,r18,1
10005980:	18014126 	beq	r3,zero,10005e88 <___vfprintf_internal_r+0xc34>
10005984:	10803fcc 	andi	r2,r2,255
10005988:	1080201c 	xori	r2,r2,128
1000598c:	10bfe004 	addi	r2,r2,-128
10005990:	00c00c04 	movi	r3,48
10005994:	10c13c26 	beq	r2,r3,10005e88 <___vfprintf_internal_r+0xc34>
10005998:	80ffffc5 	stb	r3,-1(r16)
1000599c:	d8c02817 	ldw	r3,160(sp)
100059a0:	80bfffc4 	addi	r2,r16,-1
100059a4:	1021883a 	mov	r16,r2
100059a8:	1887c83a 	sub	r3,r3,r2
100059ac:	d8c02b15 	stw	r3,172(sp)
100059b0:	d8802b17 	ldw	r2,172(sp)
100059b4:	d9002a17 	ldw	r4,168(sp)
100059b8:	1100010e 	bge	r2,r4,100059c0 <___vfprintf_internal_r+0x76c>
100059bc:	2005883a 	mov	r2,r4
100059c0:	d8802915 	stw	r2,164(sp)
100059c4:	d8003215 	stw	zero,200(sp)
100059c8:	e7003fcc 	andi	fp,fp,255
100059cc:	e700201c 	xori	fp,fp,128
100059d0:	e73fe004 	addi	fp,fp,-128
100059d4:	e0000326 	beq	fp,zero,100059e4 <___vfprintf_internal_r+0x790>
100059d8:	d8c02917 	ldw	r3,164(sp)
100059dc:	18c00044 	addi	r3,r3,1
100059e0:	d8c02915 	stw	r3,164(sp)
100059e4:	90c0008c 	andi	r3,r18,2
100059e8:	d8c02c15 	stw	r3,176(sp)
100059ec:	18000326 	beq	r3,zero,100059fc <___vfprintf_internal_r+0x7a8>
100059f0:	d8c02917 	ldw	r3,164(sp)
100059f4:	18c00084 	addi	r3,r3,2
100059f8:	d8c02915 	stw	r3,164(sp)
100059fc:	90c0210c 	andi	r3,r18,132
10005a00:	d8c03015 	stw	r3,192(sp)
10005a04:	1801c51e 	bne	r3,zero,1000611c <___vfprintf_internal_r+0xec8>
10005a08:	d9003117 	ldw	r4,196(sp)
10005a0c:	d8c02917 	ldw	r3,164(sp)
10005a10:	20e7c83a 	sub	r19,r4,r3
10005a14:	04c1c10e 	bge	zero,r19,1000611c <___vfprintf_internal_r+0xec8>
10005a18:	02400404 	movi	r9,16
10005a1c:	d8c02017 	ldw	r3,128(sp)
10005a20:	d8801f17 	ldw	r2,124(sp)
10005a24:	4cc52f0e 	bge	r9,r19,10006ee4 <___vfprintf_internal_r+0x1c90>
10005a28:	01440074 	movhi	r5,4097
10005a2c:	29539884 	addi	r5,r5,20066
10005a30:	dc403b15 	stw	r17,236(sp)
10005a34:	d9403515 	stw	r5,212(sp)
10005a38:	9823883a 	mov	r17,r19
10005a3c:	482d883a 	mov	r22,r9
10005a40:	9027883a 	mov	r19,r18
10005a44:	070001c4 	movi	fp,7
10005a48:	8025883a 	mov	r18,r16
10005a4c:	dc002d17 	ldw	r16,180(sp)
10005a50:	00000306 	br	10005a60 <___vfprintf_internal_r+0x80c>
10005a54:	8c7ffc04 	addi	r17,r17,-16
10005a58:	42000204 	addi	r8,r8,8
10005a5c:	b440130e 	bge	r22,r17,10005aac <___vfprintf_internal_r+0x858>
10005a60:	01040074 	movhi	r4,4097
10005a64:	18c00404 	addi	r3,r3,16
10005a68:	10800044 	addi	r2,r2,1
10005a6c:	21139884 	addi	r4,r4,20066
10005a70:	41000015 	stw	r4,0(r8)
10005a74:	45800115 	stw	r22,4(r8)
10005a78:	d8c02015 	stw	r3,128(sp)
10005a7c:	d8801f15 	stw	r2,124(sp)
10005a80:	e0bff40e 	bge	fp,r2,10005a54 <__alt_data_end+0xf8005a54>
10005a84:	d9801e04 	addi	r6,sp,120
10005a88:	b80b883a 	mov	r5,r23
10005a8c:	8009883a 	mov	r4,r16
10005a90:	000ca340 	call	1000ca34 <__sprint_r>
10005a94:	103ef31e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
10005a98:	8c7ffc04 	addi	r17,r17,-16
10005a9c:	d8c02017 	ldw	r3,128(sp)
10005aa0:	d8801f17 	ldw	r2,124(sp)
10005aa4:	da000404 	addi	r8,sp,16
10005aa8:	b47fed16 	blt	r22,r17,10005a60 <__alt_data_end+0xf8005a60>
10005aac:	9021883a 	mov	r16,r18
10005ab0:	9825883a 	mov	r18,r19
10005ab4:	8827883a 	mov	r19,r17
10005ab8:	dc403b17 	ldw	r17,236(sp)
10005abc:	d9403517 	ldw	r5,212(sp)
10005ac0:	98c7883a 	add	r3,r19,r3
10005ac4:	10800044 	addi	r2,r2,1
10005ac8:	41400015 	stw	r5,0(r8)
10005acc:	44c00115 	stw	r19,4(r8)
10005ad0:	d8c02015 	stw	r3,128(sp)
10005ad4:	d8801f15 	stw	r2,124(sp)
10005ad8:	010001c4 	movi	r4,7
10005adc:	2082c516 	blt	r4,r2,100065f4 <___vfprintf_internal_r+0x13a0>
10005ae0:	df002787 	ldb	fp,158(sp)
10005ae4:	42000204 	addi	r8,r8,8
10005ae8:	e0000c26 	beq	fp,zero,10005b1c <___vfprintf_internal_r+0x8c8>
10005aec:	d8801f17 	ldw	r2,124(sp)
10005af0:	d9002784 	addi	r4,sp,158
10005af4:	18c00044 	addi	r3,r3,1
10005af8:	10800044 	addi	r2,r2,1
10005afc:	41000015 	stw	r4,0(r8)
10005b00:	01000044 	movi	r4,1
10005b04:	41000115 	stw	r4,4(r8)
10005b08:	d8c02015 	stw	r3,128(sp)
10005b0c:	d8801f15 	stw	r2,124(sp)
10005b10:	010001c4 	movi	r4,7
10005b14:	20825e16 	blt	r4,r2,10006490 <___vfprintf_internal_r+0x123c>
10005b18:	42000204 	addi	r8,r8,8
10005b1c:	d8802c17 	ldw	r2,176(sp)
10005b20:	10000c26 	beq	r2,zero,10005b54 <___vfprintf_internal_r+0x900>
10005b24:	d8801f17 	ldw	r2,124(sp)
10005b28:	d9002704 	addi	r4,sp,156
10005b2c:	18c00084 	addi	r3,r3,2
10005b30:	10800044 	addi	r2,r2,1
10005b34:	41000015 	stw	r4,0(r8)
10005b38:	01000084 	movi	r4,2
10005b3c:	41000115 	stw	r4,4(r8)
10005b40:	d8c02015 	stw	r3,128(sp)
10005b44:	d8801f15 	stw	r2,124(sp)
10005b48:	010001c4 	movi	r4,7
10005b4c:	20825816 	blt	r4,r2,100064b0 <___vfprintf_internal_r+0x125c>
10005b50:	42000204 	addi	r8,r8,8
10005b54:	d9003017 	ldw	r4,192(sp)
10005b58:	00802004 	movi	r2,128
10005b5c:	2081bb26 	beq	r4,r2,1000624c <___vfprintf_internal_r+0xff8>
10005b60:	d9402a17 	ldw	r5,168(sp)
10005b64:	d8802b17 	ldw	r2,172(sp)
10005b68:	28adc83a 	sub	r22,r5,r2
10005b6c:	0580310e 	bge	zero,r22,10005c34 <___vfprintf_internal_r+0x9e0>
10005b70:	07000404 	movi	fp,16
10005b74:	d8801f17 	ldw	r2,124(sp)
10005b78:	e584360e 	bge	fp,r22,10006c54 <___vfprintf_internal_r+0x1a00>
10005b7c:	01440074 	movhi	r5,4097
10005b80:	29539484 	addi	r5,r5,20050
10005b84:	dc402a15 	stw	r17,168(sp)
10005b88:	d9402c15 	stw	r5,176(sp)
10005b8c:	b023883a 	mov	r17,r22
10005b90:	04c001c4 	movi	r19,7
10005b94:	a82d883a 	mov	r22,r21
10005b98:	902b883a 	mov	r21,r18
10005b9c:	8025883a 	mov	r18,r16
10005ba0:	dc002d17 	ldw	r16,180(sp)
10005ba4:	00000306 	br	10005bb4 <___vfprintf_internal_r+0x960>
10005ba8:	8c7ffc04 	addi	r17,r17,-16
10005bac:	42000204 	addi	r8,r8,8
10005bb0:	e440110e 	bge	fp,r17,10005bf8 <___vfprintf_internal_r+0x9a4>
10005bb4:	18c00404 	addi	r3,r3,16
10005bb8:	10800044 	addi	r2,r2,1
10005bbc:	45000015 	stw	r20,0(r8)
10005bc0:	47000115 	stw	fp,4(r8)
10005bc4:	d8c02015 	stw	r3,128(sp)
10005bc8:	d8801f15 	stw	r2,124(sp)
10005bcc:	98bff60e 	bge	r19,r2,10005ba8 <__alt_data_end+0xf8005ba8>
10005bd0:	d9801e04 	addi	r6,sp,120
10005bd4:	b80b883a 	mov	r5,r23
10005bd8:	8009883a 	mov	r4,r16
10005bdc:	000ca340 	call	1000ca34 <__sprint_r>
10005be0:	103ea01e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
10005be4:	8c7ffc04 	addi	r17,r17,-16
10005be8:	d8c02017 	ldw	r3,128(sp)
10005bec:	d8801f17 	ldw	r2,124(sp)
10005bf0:	da000404 	addi	r8,sp,16
10005bf4:	e47fef16 	blt	fp,r17,10005bb4 <__alt_data_end+0xf8005bb4>
10005bf8:	9021883a 	mov	r16,r18
10005bfc:	a825883a 	mov	r18,r21
10005c00:	b02b883a 	mov	r21,r22
10005c04:	882d883a 	mov	r22,r17
10005c08:	dc402a17 	ldw	r17,168(sp)
10005c0c:	d9002c17 	ldw	r4,176(sp)
10005c10:	1d87883a 	add	r3,r3,r22
10005c14:	10800044 	addi	r2,r2,1
10005c18:	41000015 	stw	r4,0(r8)
10005c1c:	45800115 	stw	r22,4(r8)
10005c20:	d8c02015 	stw	r3,128(sp)
10005c24:	d8801f15 	stw	r2,124(sp)
10005c28:	010001c4 	movi	r4,7
10005c2c:	20821016 	blt	r4,r2,10006470 <___vfprintf_internal_r+0x121c>
10005c30:	42000204 	addi	r8,r8,8
10005c34:	9080400c 	andi	r2,r18,256
10005c38:	10013a1e 	bne	r2,zero,10006124 <___vfprintf_internal_r+0xed0>
10005c3c:	d9402b17 	ldw	r5,172(sp)
10005c40:	d8801f17 	ldw	r2,124(sp)
10005c44:	44000015 	stw	r16,0(r8)
10005c48:	1947883a 	add	r3,r3,r5
10005c4c:	10800044 	addi	r2,r2,1
10005c50:	41400115 	stw	r5,4(r8)
10005c54:	d8c02015 	stw	r3,128(sp)
10005c58:	d8801f15 	stw	r2,124(sp)
10005c5c:	010001c4 	movi	r4,7
10005c60:	2081f516 	blt	r4,r2,10006438 <___vfprintf_internal_r+0x11e4>
10005c64:	42000204 	addi	r8,r8,8
10005c68:	9480010c 	andi	r18,r18,4
10005c6c:	90003226 	beq	r18,zero,10005d38 <___vfprintf_internal_r+0xae4>
10005c70:	d9403117 	ldw	r5,196(sp)
10005c74:	d8802917 	ldw	r2,164(sp)
10005c78:	28a1c83a 	sub	r16,r5,r2
10005c7c:	04002e0e 	bge	zero,r16,10005d38 <___vfprintf_internal_r+0xae4>
10005c80:	04400404 	movi	r17,16
10005c84:	d8801f17 	ldw	r2,124(sp)
10005c88:	8c04c40e 	bge	r17,r16,10006f9c <___vfprintf_internal_r+0x1d48>
10005c8c:	01440074 	movhi	r5,4097
10005c90:	29539884 	addi	r5,r5,20066
10005c94:	d9403515 	stw	r5,212(sp)
10005c98:	048001c4 	movi	r18,7
10005c9c:	dcc02d17 	ldw	r19,180(sp)
10005ca0:	00000306 	br	10005cb0 <___vfprintf_internal_r+0xa5c>
10005ca4:	843ffc04 	addi	r16,r16,-16
10005ca8:	42000204 	addi	r8,r8,8
10005cac:	8c00130e 	bge	r17,r16,10005cfc <___vfprintf_internal_r+0xaa8>
10005cb0:	01040074 	movhi	r4,4097
10005cb4:	18c00404 	addi	r3,r3,16
10005cb8:	10800044 	addi	r2,r2,1
10005cbc:	21139884 	addi	r4,r4,20066
10005cc0:	41000015 	stw	r4,0(r8)
10005cc4:	44400115 	stw	r17,4(r8)
10005cc8:	d8c02015 	stw	r3,128(sp)
10005ccc:	d8801f15 	stw	r2,124(sp)
10005cd0:	90bff40e 	bge	r18,r2,10005ca4 <__alt_data_end+0xf8005ca4>
10005cd4:	d9801e04 	addi	r6,sp,120
10005cd8:	b80b883a 	mov	r5,r23
10005cdc:	9809883a 	mov	r4,r19
10005ce0:	000ca340 	call	1000ca34 <__sprint_r>
10005ce4:	103e5f1e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
10005ce8:	843ffc04 	addi	r16,r16,-16
10005cec:	d8c02017 	ldw	r3,128(sp)
10005cf0:	d8801f17 	ldw	r2,124(sp)
10005cf4:	da000404 	addi	r8,sp,16
10005cf8:	8c3fed16 	blt	r17,r16,10005cb0 <__alt_data_end+0xf8005cb0>
10005cfc:	d9403517 	ldw	r5,212(sp)
10005d00:	1c07883a 	add	r3,r3,r16
10005d04:	10800044 	addi	r2,r2,1
10005d08:	41400015 	stw	r5,0(r8)
10005d0c:	44000115 	stw	r16,4(r8)
10005d10:	d8c02015 	stw	r3,128(sp)
10005d14:	d8801f15 	stw	r2,124(sp)
10005d18:	010001c4 	movi	r4,7
10005d1c:	2080060e 	bge	r4,r2,10005d38 <___vfprintf_internal_r+0xae4>
10005d20:	d9002d17 	ldw	r4,180(sp)
10005d24:	d9801e04 	addi	r6,sp,120
10005d28:	b80b883a 	mov	r5,r23
10005d2c:	000ca340 	call	1000ca34 <__sprint_r>
10005d30:	103e4c1e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
10005d34:	d8c02017 	ldw	r3,128(sp)
10005d38:	d8803117 	ldw	r2,196(sp)
10005d3c:	d9002917 	ldw	r4,164(sp)
10005d40:	1100010e 	bge	r2,r4,10005d48 <___vfprintf_internal_r+0xaf4>
10005d44:	2005883a 	mov	r2,r4
10005d48:	d9402f17 	ldw	r5,188(sp)
10005d4c:	288b883a 	add	r5,r5,r2
10005d50:	d9402f15 	stw	r5,188(sp)
10005d54:	1801c01e 	bne	r3,zero,10006458 <___vfprintf_internal_r+0x1204>
10005d58:	a8800007 	ldb	r2,0(r21)
10005d5c:	d8001f15 	stw	zero,124(sp)
10005d60:	da000404 	addi	r8,sp,16
10005d64:	103d751e 	bne	r2,zero,1000533c <__alt_data_end+0xf800533c>
10005d68:	a823883a 	mov	r17,r21
10005d6c:	003d8b06 	br	1000539c <__alt_data_end+0xf800539c>
10005d70:	8025883a 	mov	r18,r16
10005d74:	dc002903 	ldbu	r16,164(sp)
10005d78:	e011883a 	mov	r8,fp
10005d7c:	84003fcc 	andi	r16,r16,255
10005d80:	8005e51e 	bne	r16,zero,10007518 <___vfprintf_internal_r+0x22c4>
10005d84:	94800414 	ori	r18,r18,16
10005d88:	9080080c 	andi	r2,r18,32
10005d8c:	10022b26 	beq	r2,zero,1000663c <___vfprintf_internal_r+0x13e8>
10005d90:	d9002e17 	ldw	r4,184(sp)
10005d94:	d9402a17 	ldw	r5,168(sp)
10005d98:	d8002785 	stb	zero,158(sp)
10005d9c:	20c00204 	addi	r3,r4,8
10005da0:	24c00017 	ldw	r19,0(r4)
10005da4:	25800117 	ldw	r22,4(r4)
10005da8:	28042e16 	blt	r5,zero,10006e64 <___vfprintf_internal_r+0x1c10>
10005dac:	013fdfc4 	movi	r4,-129
10005db0:	9d84b03a 	or	r2,r19,r22
10005db4:	d8c02e15 	stw	r3,184(sp)
10005db8:	9124703a 	and	r18,r18,r4
10005dbc:	0039883a 	mov	fp,zero
10005dc0:	103e801e 	bne	r2,zero,100057c4 <__alt_data_end+0xf80057c4>
10005dc4:	d9002a17 	ldw	r4,168(sp)
10005dc8:	2002e01e 	bne	r4,zero,1000694c <___vfprintf_internal_r+0x16f8>
10005dcc:	d8002a15 	stw	zero,168(sp)
10005dd0:	d8002b15 	stw	zero,172(sp)
10005dd4:	dc001e04 	addi	r16,sp,120
10005dd8:	003ef506 	br	100059b0 <__alt_data_end+0xf80059b0>
10005ddc:	8025883a 	mov	r18,r16
10005de0:	dc002903 	ldbu	r16,164(sp)
10005de4:	e011883a 	mov	r8,fp
10005de8:	84003fcc 	andi	r16,r16,255
10005dec:	8005ba1e 	bne	r16,zero,100074d8 <___vfprintf_internal_r+0x2284>
10005df0:	01040074 	movhi	r4,4097
10005df4:	21138804 	addi	r4,r4,20000
10005df8:	d9003915 	stw	r4,228(sp)
10005dfc:	9080080c 	andi	r2,r18,32
10005e00:	10006126 	beq	r2,zero,10005f88 <___vfprintf_internal_r+0xd34>
10005e04:	d9402e17 	ldw	r5,184(sp)
10005e08:	2cc00017 	ldw	r19,0(r5)
10005e0c:	2d800117 	ldw	r22,4(r5)
10005e10:	29400204 	addi	r5,r5,8
10005e14:	d9402e15 	stw	r5,184(sp)
10005e18:	9080004c 	andi	r2,r18,1
10005e1c:	1001ac26 	beq	r2,zero,100064d0 <___vfprintf_internal_r+0x127c>
10005e20:	9d84b03a 	or	r2,r19,r22
10005e24:	10038526 	beq	r2,zero,10006c3c <___vfprintf_internal_r+0x19e8>
10005e28:	d8c02a17 	ldw	r3,168(sp)
10005e2c:	00800c04 	movi	r2,48
10005e30:	d8802705 	stb	r2,156(sp)
10005e34:	dc402745 	stb	r17,157(sp)
10005e38:	d8002785 	stb	zero,158(sp)
10005e3c:	90800094 	ori	r2,r18,2
10005e40:	18047916 	blt	r3,zero,10007028 <___vfprintf_internal_r+0x1dd4>
10005e44:	00bfdfc4 	movi	r2,-129
10005e48:	90a4703a 	and	r18,r18,r2
10005e4c:	94800094 	ori	r18,r18,2
10005e50:	0039883a 	mov	fp,zero
10005e54:	d9003917 	ldw	r4,228(sp)
10005e58:	dc001e04 	addi	r16,sp,120
10005e5c:	988003cc 	andi	r2,r19,15
10005e60:	b006973a 	slli	r3,r22,28
10005e64:	2085883a 	add	r2,r4,r2
10005e68:	9826d13a 	srli	r19,r19,4
10005e6c:	10800003 	ldbu	r2,0(r2)
10005e70:	b02cd13a 	srli	r22,r22,4
10005e74:	843fffc4 	addi	r16,r16,-1
10005e78:	1ce6b03a 	or	r19,r3,r19
10005e7c:	80800005 	stb	r2,0(r16)
10005e80:	9d84b03a 	or	r2,r19,r22
10005e84:	103ff51e 	bne	r2,zero,10005e5c <__alt_data_end+0xf8005e5c>
10005e88:	d8c02817 	ldw	r3,160(sp)
10005e8c:	1c07c83a 	sub	r3,r3,r16
10005e90:	d8c02b15 	stw	r3,172(sp)
10005e94:	003ec606 	br	100059b0 <__alt_data_end+0xf80059b0>
10005e98:	8025883a 	mov	r18,r16
10005e9c:	dc002903 	ldbu	r16,164(sp)
10005ea0:	e011883a 	mov	r8,fp
10005ea4:	84003fcc 	andi	r16,r16,255
10005ea8:	803e9626 	beq	r16,zero,10005904 <__alt_data_end+0xf8005904>
10005eac:	d8c02b03 	ldbu	r3,172(sp)
10005eb0:	d8c02785 	stb	r3,158(sp)
10005eb4:	003e9306 	br	10005904 <__alt_data_end+0xf8005904>
10005eb8:	00c00044 	movi	r3,1
10005ebc:	d8c02905 	stb	r3,164(sp)
10005ec0:	00c00ac4 	movi	r3,43
10005ec4:	d8c02b05 	stb	r3,172(sp)
10005ec8:	ac400007 	ldb	r17,0(r21)
10005ecc:	003d4306 	br	100053dc <__alt_data_end+0xf80053dc>
10005ed0:	84000814 	ori	r16,r16,32
10005ed4:	ac400007 	ldb	r17,0(r21)
10005ed8:	003d4006 	br	100053dc <__alt_data_end+0xf80053dc>
10005edc:	d8802e17 	ldw	r2,184(sp)
10005ee0:	8025883a 	mov	r18,r16
10005ee4:	d8002785 	stb	zero,158(sp)
10005ee8:	14000017 	ldw	r16,0(r2)
10005eec:	e011883a 	mov	r8,fp
10005ef0:	14c00104 	addi	r19,r2,4
10005ef4:	80042d26 	beq	r16,zero,10006fac <___vfprintf_internal_r+0x1d58>
10005ef8:	d8c02a17 	ldw	r3,168(sp)
10005efc:	1803e416 	blt	r3,zero,10006e90 <___vfprintf_internal_r+0x1c3c>
10005f00:	180d883a 	mov	r6,r3
10005f04:	000b883a 	mov	r5,zero
10005f08:	8009883a 	mov	r4,r16
10005f0c:	df003d15 	stw	fp,244(sp)
10005f10:	000ab8c0 	call	1000ab8c <memchr>
10005f14:	da003d17 	ldw	r8,244(sp)
10005f18:	10046826 	beq	r2,zero,100070bc <___vfprintf_internal_r+0x1e68>
10005f1c:	1405c83a 	sub	r2,r2,r16
10005f20:	d8802b15 	stw	r2,172(sp)
10005f24:	1003e016 	blt	r2,zero,10006ea8 <___vfprintf_internal_r+0x1c54>
10005f28:	df002783 	ldbu	fp,158(sp)
10005f2c:	d8802915 	stw	r2,164(sp)
10005f30:	dcc02e15 	stw	r19,184(sp)
10005f34:	d8002a15 	stw	zero,168(sp)
10005f38:	d8003215 	stw	zero,200(sp)
10005f3c:	003ea206 	br	100059c8 <__alt_data_end+0xf80059c8>
10005f40:	8025883a 	mov	r18,r16
10005f44:	dc002903 	ldbu	r16,164(sp)
10005f48:	e011883a 	mov	r8,fp
10005f4c:	84003fcc 	andi	r16,r16,255
10005f50:	803f8d26 	beq	r16,zero,10005d88 <__alt_data_end+0xf8005d88>
10005f54:	d8c02b03 	ldbu	r3,172(sp)
10005f58:	d8c02785 	stb	r3,158(sp)
10005f5c:	003f8a06 	br	10005d88 <__alt_data_end+0xf8005d88>
10005f60:	8025883a 	mov	r18,r16
10005f64:	dc002903 	ldbu	r16,164(sp)
10005f68:	e011883a 	mov	r8,fp
10005f6c:	84003fcc 	andi	r16,r16,255
10005f70:	8005661e 	bne	r16,zero,1000750c <___vfprintf_internal_r+0x22b8>
10005f74:	01040074 	movhi	r4,4097
10005f78:	21138d04 	addi	r4,r4,20020
10005f7c:	d9003915 	stw	r4,228(sp)
10005f80:	9080080c 	andi	r2,r18,32
10005f84:	103f9f1e 	bne	r2,zero,10005e04 <__alt_data_end+0xf8005e04>
10005f88:	9080040c 	andi	r2,r18,16
10005f8c:	1002eb26 	beq	r2,zero,10006b3c <___vfprintf_internal_r+0x18e8>
10005f90:	d8802e17 	ldw	r2,184(sp)
10005f94:	002d883a 	mov	r22,zero
10005f98:	14c00017 	ldw	r19,0(r2)
10005f9c:	10800104 	addi	r2,r2,4
10005fa0:	d8802e15 	stw	r2,184(sp)
10005fa4:	003f9c06 	br	10005e18 <__alt_data_end+0xf8005e18>
10005fa8:	d8802b07 	ldb	r2,172(sp)
10005fac:	1002e11e 	bne	r2,zero,10006b34 <___vfprintf_internal_r+0x18e0>
10005fb0:	00c00044 	movi	r3,1
10005fb4:	d8c02905 	stb	r3,164(sp)
10005fb8:	00c00804 	movi	r3,32
10005fbc:	d8c02b05 	stb	r3,172(sp)
10005fc0:	ac400007 	ldb	r17,0(r21)
10005fc4:	003d0506 	br	100053dc <__alt_data_end+0xf80053dc>
10005fc8:	84000054 	ori	r16,r16,1
10005fcc:	ac400007 	ldb	r17,0(r21)
10005fd0:	003d0206 	br	100053dc <__alt_data_end+0xf80053dc>
10005fd4:	8025883a 	mov	r18,r16
10005fd8:	dc002903 	ldbu	r16,164(sp)
10005fdc:	e011883a 	mov	r8,fp
10005fe0:	84003fcc 	andi	r16,r16,255
10005fe4:	803de726 	beq	r16,zero,10005784 <__alt_data_end+0xf8005784>
10005fe8:	d8c02b03 	ldbu	r3,172(sp)
10005fec:	d8c02785 	stb	r3,158(sp)
10005ff0:	003de406 	br	10005784 <__alt_data_end+0xf8005784>
10005ff4:	84001014 	ori	r16,r16,64
10005ff8:	ac400007 	ldb	r17,0(r21)
10005ffc:	003cf706 	br	100053dc <__alt_data_end+0xf80053dc>
10006000:	ac400007 	ldb	r17,0(r21)
10006004:	00801b04 	movi	r2,108
10006008:	88838f26 	beq	r17,r2,10006e48 <___vfprintf_internal_r+0x1bf4>
1000600c:	84000414 	ori	r16,r16,16
10006010:	003cf206 	br	100053dc <__alt_data_end+0xf80053dc>
10006014:	8025883a 	mov	r18,r16
10006018:	dc002903 	ldbu	r16,164(sp)
1000601c:	e011883a 	mov	r8,fp
10006020:	84003fcc 	andi	r16,r16,255
10006024:	80053f1e 	bne	r16,zero,10007524 <___vfprintf_internal_r+0x22d0>
10006028:	9080080c 	andi	r2,r18,32
1000602c:	1002d226 	beq	r2,zero,10006b78 <___vfprintf_internal_r+0x1924>
10006030:	d9002e17 	ldw	r4,184(sp)
10006034:	d9402f17 	ldw	r5,188(sp)
10006038:	20800017 	ldw	r2,0(r4)
1000603c:	2807d7fa 	srai	r3,r5,31
10006040:	21000104 	addi	r4,r4,4
10006044:	d9002e15 	stw	r4,184(sp)
10006048:	11400015 	stw	r5,0(r2)
1000604c:	10c00115 	stw	r3,4(r2)
10006050:	003cb806 	br	10005334 <__alt_data_end+0xf8005334>
10006054:	d8c02e17 	ldw	r3,184(sp)
10006058:	d9002e17 	ldw	r4,184(sp)
1000605c:	8025883a 	mov	r18,r16
10006060:	18800017 	ldw	r2,0(r3)
10006064:	21000104 	addi	r4,r4,4
10006068:	00c00044 	movi	r3,1
1000606c:	e011883a 	mov	r8,fp
10006070:	d8c02915 	stw	r3,164(sp)
10006074:	d8002785 	stb	zero,158(sp)
10006078:	d8801405 	stb	r2,80(sp)
1000607c:	d9002e15 	stw	r4,184(sp)
10006080:	d8c02b15 	stw	r3,172(sp)
10006084:	d8002a15 	stw	zero,168(sp)
10006088:	d8003215 	stw	zero,200(sp)
1000608c:	dc001404 	addi	r16,sp,80
10006090:	0039883a 	mov	fp,zero
10006094:	003e5306 	br	100059e4 <__alt_data_end+0xf80059e4>
10006098:	01040074 	movhi	r4,4097
1000609c:	21138d04 	addi	r4,r4,20020
100060a0:	0039883a 	mov	fp,zero
100060a4:	d9003915 	stw	r4,228(sp)
100060a8:	04401e04 	movi	r17,120
100060ac:	003f6906 	br	10005e54 <__alt_data_end+0xf8005e54>
100060b0:	8025883a 	mov	r18,r16
100060b4:	dc002903 	ldbu	r16,164(sp)
100060b8:	e011883a 	mov	r8,fp
100060bc:	84003fcc 	andi	r16,r16,255
100060c0:	8005081e 	bne	r16,zero,100074e4 <___vfprintf_internal_r+0x2290>
100060c4:	883d6126 	beq	r17,zero,1000564c <__alt_data_end+0xf800564c>
100060c8:	00c00044 	movi	r3,1
100060cc:	d8c02915 	stw	r3,164(sp)
100060d0:	dc401405 	stb	r17,80(sp)
100060d4:	d8002785 	stb	zero,158(sp)
100060d8:	003fe906 	br	10006080 <__alt_data_end+0xf8006080>
100060dc:	01440074 	movhi	r5,4097
100060e0:	29538d04 	addi	r5,r5,20020
100060e4:	d9403915 	stw	r5,228(sp)
100060e8:	d8c02e15 	stw	r3,184(sp)
100060ec:	1025883a 	mov	r18,r2
100060f0:	04401e04 	movi	r17,120
100060f4:	9d84b03a 	or	r2,r19,r22
100060f8:	1000fc1e 	bne	r2,zero,100064ec <___vfprintf_internal_r+0x1298>
100060fc:	0039883a 	mov	fp,zero
10006100:	00800084 	movi	r2,2
10006104:	10803fcc 	andi	r2,r2,255
10006108:	00c00044 	movi	r3,1
1000610c:	10c20f26 	beq	r2,r3,1000694c <___vfprintf_internal_r+0x16f8>
10006110:	00c00084 	movi	r3,2
10006114:	10fd3326 	beq	r2,r3,100055e4 <__alt_data_end+0xf80055e4>
10006118:	003e0b06 	br	10005948 <__alt_data_end+0xf8005948>
1000611c:	d8c02017 	ldw	r3,128(sp)
10006120:	003e7106 	br	10005ae8 <__alt_data_end+0xf8005ae8>
10006124:	00801944 	movi	r2,101
10006128:	14407e0e 	bge	r2,r17,10006324 <___vfprintf_internal_r+0x10d0>
1000612c:	d9003617 	ldw	r4,216(sp)
10006130:	d9403817 	ldw	r5,224(sp)
10006134:	000d883a 	mov	r6,zero
10006138:	000f883a 	mov	r7,zero
1000613c:	d8c03c15 	stw	r3,240(sp)
10006140:	da003d15 	stw	r8,244(sp)
10006144:	00107b80 	call	100107b8 <__eqdf2>
10006148:	d8c03c17 	ldw	r3,240(sp)
1000614c:	da003d17 	ldw	r8,244(sp)
10006150:	1000f71e 	bne	r2,zero,10006530 <___vfprintf_internal_r+0x12dc>
10006154:	d8801f17 	ldw	r2,124(sp)
10006158:	01040074 	movhi	r4,4097
1000615c:	21139404 	addi	r4,r4,20048
10006160:	18c00044 	addi	r3,r3,1
10006164:	10800044 	addi	r2,r2,1
10006168:	41000015 	stw	r4,0(r8)
1000616c:	01000044 	movi	r4,1
10006170:	41000115 	stw	r4,4(r8)
10006174:	d8c02015 	stw	r3,128(sp)
10006178:	d8801f15 	stw	r2,124(sp)
1000617c:	010001c4 	movi	r4,7
10006180:	2082b816 	blt	r4,r2,10006c64 <___vfprintf_internal_r+0x1a10>
10006184:	42000204 	addi	r8,r8,8
10006188:	d8802617 	ldw	r2,152(sp)
1000618c:	d9403317 	ldw	r5,204(sp)
10006190:	11400216 	blt	r2,r5,1000619c <___vfprintf_internal_r+0xf48>
10006194:	9080004c 	andi	r2,r18,1
10006198:	103eb326 	beq	r2,zero,10005c68 <__alt_data_end+0xf8005c68>
1000619c:	d8803717 	ldw	r2,220(sp)
100061a0:	d9003417 	ldw	r4,208(sp)
100061a4:	d9403717 	ldw	r5,220(sp)
100061a8:	1887883a 	add	r3,r3,r2
100061ac:	d8801f17 	ldw	r2,124(sp)
100061b0:	41000015 	stw	r4,0(r8)
100061b4:	41400115 	stw	r5,4(r8)
100061b8:	10800044 	addi	r2,r2,1
100061bc:	d8c02015 	stw	r3,128(sp)
100061c0:	d8801f15 	stw	r2,124(sp)
100061c4:	010001c4 	movi	r4,7
100061c8:	20832916 	blt	r4,r2,10006e70 <___vfprintf_internal_r+0x1c1c>
100061cc:	42000204 	addi	r8,r8,8
100061d0:	d8803317 	ldw	r2,204(sp)
100061d4:	143fffc4 	addi	r16,r2,-1
100061d8:	043ea30e 	bge	zero,r16,10005c68 <__alt_data_end+0xf8005c68>
100061dc:	04400404 	movi	r17,16
100061e0:	d8801f17 	ldw	r2,124(sp)
100061e4:	8c00880e 	bge	r17,r16,10006408 <___vfprintf_internal_r+0x11b4>
100061e8:	01440074 	movhi	r5,4097
100061ec:	29539484 	addi	r5,r5,20050
100061f0:	d9402c15 	stw	r5,176(sp)
100061f4:	058001c4 	movi	r22,7
100061f8:	dcc02d17 	ldw	r19,180(sp)
100061fc:	00000306 	br	1000620c <___vfprintf_internal_r+0xfb8>
10006200:	42000204 	addi	r8,r8,8
10006204:	843ffc04 	addi	r16,r16,-16
10006208:	8c00820e 	bge	r17,r16,10006414 <___vfprintf_internal_r+0x11c0>
1000620c:	18c00404 	addi	r3,r3,16
10006210:	10800044 	addi	r2,r2,1
10006214:	45000015 	stw	r20,0(r8)
10006218:	44400115 	stw	r17,4(r8)
1000621c:	d8c02015 	stw	r3,128(sp)
10006220:	d8801f15 	stw	r2,124(sp)
10006224:	b0bff60e 	bge	r22,r2,10006200 <__alt_data_end+0xf8006200>
10006228:	d9801e04 	addi	r6,sp,120
1000622c:	b80b883a 	mov	r5,r23
10006230:	9809883a 	mov	r4,r19
10006234:	000ca340 	call	1000ca34 <__sprint_r>
10006238:	103d0a1e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
1000623c:	d8c02017 	ldw	r3,128(sp)
10006240:	d8801f17 	ldw	r2,124(sp)
10006244:	da000404 	addi	r8,sp,16
10006248:	003fee06 	br	10006204 <__alt_data_end+0xf8006204>
1000624c:	d9403117 	ldw	r5,196(sp)
10006250:	d8802917 	ldw	r2,164(sp)
10006254:	28adc83a 	sub	r22,r5,r2
10006258:	05be410e 	bge	zero,r22,10005b60 <__alt_data_end+0xf8005b60>
1000625c:	07000404 	movi	fp,16
10006260:	d8801f17 	ldw	r2,124(sp)
10006264:	e5838f0e 	bge	fp,r22,100070a4 <___vfprintf_internal_r+0x1e50>
10006268:	01440074 	movhi	r5,4097
1000626c:	29539484 	addi	r5,r5,20050
10006270:	dc403015 	stw	r17,192(sp)
10006274:	d9402c15 	stw	r5,176(sp)
10006278:	b023883a 	mov	r17,r22
1000627c:	04c001c4 	movi	r19,7
10006280:	a82d883a 	mov	r22,r21
10006284:	902b883a 	mov	r21,r18
10006288:	8025883a 	mov	r18,r16
1000628c:	dc002d17 	ldw	r16,180(sp)
10006290:	00000306 	br	100062a0 <___vfprintf_internal_r+0x104c>
10006294:	8c7ffc04 	addi	r17,r17,-16
10006298:	42000204 	addi	r8,r8,8
1000629c:	e440110e 	bge	fp,r17,100062e4 <___vfprintf_internal_r+0x1090>
100062a0:	18c00404 	addi	r3,r3,16
100062a4:	10800044 	addi	r2,r2,1
100062a8:	45000015 	stw	r20,0(r8)
100062ac:	47000115 	stw	fp,4(r8)
100062b0:	d8c02015 	stw	r3,128(sp)
100062b4:	d8801f15 	stw	r2,124(sp)
100062b8:	98bff60e 	bge	r19,r2,10006294 <__alt_data_end+0xf8006294>
100062bc:	d9801e04 	addi	r6,sp,120
100062c0:	b80b883a 	mov	r5,r23
100062c4:	8009883a 	mov	r4,r16
100062c8:	000ca340 	call	1000ca34 <__sprint_r>
100062cc:	103ce51e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
100062d0:	8c7ffc04 	addi	r17,r17,-16
100062d4:	d8c02017 	ldw	r3,128(sp)
100062d8:	d8801f17 	ldw	r2,124(sp)
100062dc:	da000404 	addi	r8,sp,16
100062e0:	e47fef16 	blt	fp,r17,100062a0 <__alt_data_end+0xf80062a0>
100062e4:	9021883a 	mov	r16,r18
100062e8:	a825883a 	mov	r18,r21
100062ec:	b02b883a 	mov	r21,r22
100062f0:	882d883a 	mov	r22,r17
100062f4:	dc403017 	ldw	r17,192(sp)
100062f8:	d9002c17 	ldw	r4,176(sp)
100062fc:	1d87883a 	add	r3,r3,r22
10006300:	10800044 	addi	r2,r2,1
10006304:	41000015 	stw	r4,0(r8)
10006308:	45800115 	stw	r22,4(r8)
1000630c:	d8c02015 	stw	r3,128(sp)
10006310:	d8801f15 	stw	r2,124(sp)
10006314:	010001c4 	movi	r4,7
10006318:	20818e16 	blt	r4,r2,10006954 <___vfprintf_internal_r+0x1700>
1000631c:	42000204 	addi	r8,r8,8
10006320:	003e0f06 	br	10005b60 <__alt_data_end+0xf8005b60>
10006324:	d9403317 	ldw	r5,204(sp)
10006328:	00800044 	movi	r2,1
1000632c:	18c00044 	addi	r3,r3,1
10006330:	1141530e 	bge	r2,r5,10006880 <___vfprintf_internal_r+0x162c>
10006334:	dc401f17 	ldw	r17,124(sp)
10006338:	00800044 	movi	r2,1
1000633c:	40800115 	stw	r2,4(r8)
10006340:	8c400044 	addi	r17,r17,1
10006344:	44000015 	stw	r16,0(r8)
10006348:	d8c02015 	stw	r3,128(sp)
1000634c:	dc401f15 	stw	r17,124(sp)
10006350:	008001c4 	movi	r2,7
10006354:	14416b16 	blt	r2,r17,10006904 <___vfprintf_internal_r+0x16b0>
10006358:	42000204 	addi	r8,r8,8
1000635c:	d8803717 	ldw	r2,220(sp)
10006360:	d9003417 	ldw	r4,208(sp)
10006364:	8c400044 	addi	r17,r17,1
10006368:	10c7883a 	add	r3,r2,r3
1000636c:	40800115 	stw	r2,4(r8)
10006370:	41000015 	stw	r4,0(r8)
10006374:	d8c02015 	stw	r3,128(sp)
10006378:	dc401f15 	stw	r17,124(sp)
1000637c:	008001c4 	movi	r2,7
10006380:	14416916 	blt	r2,r17,10006928 <___vfprintf_internal_r+0x16d4>
10006384:	45800204 	addi	r22,r8,8
10006388:	d9003617 	ldw	r4,216(sp)
1000638c:	d9403817 	ldw	r5,224(sp)
10006390:	000d883a 	mov	r6,zero
10006394:	000f883a 	mov	r7,zero
10006398:	d8c03c15 	stw	r3,240(sp)
1000639c:	00107b80 	call	100107b8 <__eqdf2>
100063a0:	d8c03c17 	ldw	r3,240(sp)
100063a4:	1000bc26 	beq	r2,zero,10006698 <___vfprintf_internal_r+0x1444>
100063a8:	d9403317 	ldw	r5,204(sp)
100063ac:	84000044 	addi	r16,r16,1
100063b0:	8c400044 	addi	r17,r17,1
100063b4:	28bfffc4 	addi	r2,r5,-1
100063b8:	1887883a 	add	r3,r3,r2
100063bc:	b0800115 	stw	r2,4(r22)
100063c0:	b4000015 	stw	r16,0(r22)
100063c4:	d8c02015 	stw	r3,128(sp)
100063c8:	dc401f15 	stw	r17,124(sp)
100063cc:	008001c4 	movi	r2,7
100063d0:	14414316 	blt	r2,r17,100068e0 <___vfprintf_internal_r+0x168c>
100063d4:	b5800204 	addi	r22,r22,8
100063d8:	d9003a17 	ldw	r4,232(sp)
100063dc:	df0022c4 	addi	fp,sp,139
100063e0:	8c400044 	addi	r17,r17,1
100063e4:	20c7883a 	add	r3,r4,r3
100063e8:	b7000015 	stw	fp,0(r22)
100063ec:	b1000115 	stw	r4,4(r22)
100063f0:	d8c02015 	stw	r3,128(sp)
100063f4:	dc401f15 	stw	r17,124(sp)
100063f8:	008001c4 	movi	r2,7
100063fc:	14400e16 	blt	r2,r17,10006438 <___vfprintf_internal_r+0x11e4>
10006400:	b2000204 	addi	r8,r22,8
10006404:	003e1806 	br	10005c68 <__alt_data_end+0xf8005c68>
10006408:	01040074 	movhi	r4,4097
1000640c:	21139484 	addi	r4,r4,20050
10006410:	d9002c15 	stw	r4,176(sp)
10006414:	d9002c17 	ldw	r4,176(sp)
10006418:	1c07883a 	add	r3,r3,r16
1000641c:	44000115 	stw	r16,4(r8)
10006420:	41000015 	stw	r4,0(r8)
10006424:	10800044 	addi	r2,r2,1
10006428:	d8c02015 	stw	r3,128(sp)
1000642c:	d8801f15 	stw	r2,124(sp)
10006430:	010001c4 	movi	r4,7
10006434:	20be0b0e 	bge	r4,r2,10005c64 <__alt_data_end+0xf8005c64>
10006438:	d9002d17 	ldw	r4,180(sp)
1000643c:	d9801e04 	addi	r6,sp,120
10006440:	b80b883a 	mov	r5,r23
10006444:	000ca340 	call	1000ca34 <__sprint_r>
10006448:	103c861e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
1000644c:	d8c02017 	ldw	r3,128(sp)
10006450:	da000404 	addi	r8,sp,16
10006454:	003e0406 	br	10005c68 <__alt_data_end+0xf8005c68>
10006458:	d9002d17 	ldw	r4,180(sp)
1000645c:	d9801e04 	addi	r6,sp,120
10006460:	b80b883a 	mov	r5,r23
10006464:	000ca340 	call	1000ca34 <__sprint_r>
10006468:	103e3b26 	beq	r2,zero,10005d58 <__alt_data_end+0xf8005d58>
1000646c:	003c7d06 	br	10005664 <__alt_data_end+0xf8005664>
10006470:	d9002d17 	ldw	r4,180(sp)
10006474:	d9801e04 	addi	r6,sp,120
10006478:	b80b883a 	mov	r5,r23
1000647c:	000ca340 	call	1000ca34 <__sprint_r>
10006480:	103c781e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
10006484:	d8c02017 	ldw	r3,128(sp)
10006488:	da000404 	addi	r8,sp,16
1000648c:	003de906 	br	10005c34 <__alt_data_end+0xf8005c34>
10006490:	d9002d17 	ldw	r4,180(sp)
10006494:	d9801e04 	addi	r6,sp,120
10006498:	b80b883a 	mov	r5,r23
1000649c:	000ca340 	call	1000ca34 <__sprint_r>
100064a0:	103c701e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
100064a4:	d8c02017 	ldw	r3,128(sp)
100064a8:	da000404 	addi	r8,sp,16
100064ac:	003d9b06 	br	10005b1c <__alt_data_end+0xf8005b1c>
100064b0:	d9002d17 	ldw	r4,180(sp)
100064b4:	d9801e04 	addi	r6,sp,120
100064b8:	b80b883a 	mov	r5,r23
100064bc:	000ca340 	call	1000ca34 <__sprint_r>
100064c0:	103c681e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
100064c4:	d8c02017 	ldw	r3,128(sp)
100064c8:	da000404 	addi	r8,sp,16
100064cc:	003da106 	br	10005b54 <__alt_data_end+0xf8005b54>
100064d0:	d9402a17 	ldw	r5,168(sp)
100064d4:	d8002785 	stb	zero,158(sp)
100064d8:	283f0616 	blt	r5,zero,100060f4 <__alt_data_end+0xf80060f4>
100064dc:	00ffdfc4 	movi	r3,-129
100064e0:	9d84b03a 	or	r2,r19,r22
100064e4:	90e4703a 	and	r18,r18,r3
100064e8:	103c3b26 	beq	r2,zero,100055d8 <__alt_data_end+0xf80055d8>
100064ec:	0039883a 	mov	fp,zero
100064f0:	003e5806 	br	10005e54 <__alt_data_end+0xf8005e54>
100064f4:	9080040c 	andi	r2,r18,16
100064f8:	1001b326 	beq	r2,zero,10006bc8 <___vfprintf_internal_r+0x1974>
100064fc:	d8c02e17 	ldw	r3,184(sp)
10006500:	d9002a17 	ldw	r4,168(sp)
10006504:	d8002785 	stb	zero,158(sp)
10006508:	18800104 	addi	r2,r3,4
1000650c:	1cc00017 	ldw	r19,0(r3)
10006510:	002d883a 	mov	r22,zero
10006514:	2001b516 	blt	r4,zero,10006bec <___vfprintf_internal_r+0x1998>
10006518:	00ffdfc4 	movi	r3,-129
1000651c:	d8802e15 	stw	r2,184(sp)
10006520:	90e4703a 	and	r18,r18,r3
10006524:	983d0526 	beq	r19,zero,1000593c <__alt_data_end+0xf800593c>
10006528:	0039883a 	mov	fp,zero
1000652c:	003d0806 	br	10005950 <__alt_data_end+0xf8005950>
10006530:	dc402617 	ldw	r17,152(sp)
10006534:	0441d30e 	bge	zero,r17,10006c84 <___vfprintf_internal_r+0x1a30>
10006538:	dc403217 	ldw	r17,200(sp)
1000653c:	d8803317 	ldw	r2,204(sp)
10006540:	1440010e 	bge	r2,r17,10006548 <___vfprintf_internal_r+0x12f4>
10006544:	1023883a 	mov	r17,r2
10006548:	04400a0e 	bge	zero,r17,10006574 <___vfprintf_internal_r+0x1320>
1000654c:	d8801f17 	ldw	r2,124(sp)
10006550:	1c47883a 	add	r3,r3,r17
10006554:	44000015 	stw	r16,0(r8)
10006558:	10800044 	addi	r2,r2,1
1000655c:	44400115 	stw	r17,4(r8)
10006560:	d8c02015 	stw	r3,128(sp)
10006564:	d8801f15 	stw	r2,124(sp)
10006568:	010001c4 	movi	r4,7
1000656c:	20826516 	blt	r4,r2,10006f04 <___vfprintf_internal_r+0x1cb0>
10006570:	42000204 	addi	r8,r8,8
10006574:	88026116 	blt	r17,zero,10006efc <___vfprintf_internal_r+0x1ca8>
10006578:	d9003217 	ldw	r4,200(sp)
1000657c:	2463c83a 	sub	r17,r4,r17
10006580:	04407b0e 	bge	zero,r17,10006770 <___vfprintf_internal_r+0x151c>
10006584:	05800404 	movi	r22,16
10006588:	d8801f17 	ldw	r2,124(sp)
1000658c:	b4419d0e 	bge	r22,r17,10006c04 <___vfprintf_internal_r+0x19b0>
10006590:	01040074 	movhi	r4,4097
10006594:	21139484 	addi	r4,r4,20050
10006598:	d9002c15 	stw	r4,176(sp)
1000659c:	070001c4 	movi	fp,7
100065a0:	dcc02d17 	ldw	r19,180(sp)
100065a4:	00000306 	br	100065b4 <___vfprintf_internal_r+0x1360>
100065a8:	42000204 	addi	r8,r8,8
100065ac:	8c7ffc04 	addi	r17,r17,-16
100065b0:	b441970e 	bge	r22,r17,10006c10 <___vfprintf_internal_r+0x19bc>
100065b4:	18c00404 	addi	r3,r3,16
100065b8:	10800044 	addi	r2,r2,1
100065bc:	45000015 	stw	r20,0(r8)
100065c0:	45800115 	stw	r22,4(r8)
100065c4:	d8c02015 	stw	r3,128(sp)
100065c8:	d8801f15 	stw	r2,124(sp)
100065cc:	e0bff60e 	bge	fp,r2,100065a8 <__alt_data_end+0xf80065a8>
100065d0:	d9801e04 	addi	r6,sp,120
100065d4:	b80b883a 	mov	r5,r23
100065d8:	9809883a 	mov	r4,r19
100065dc:	000ca340 	call	1000ca34 <__sprint_r>
100065e0:	103c201e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
100065e4:	d8c02017 	ldw	r3,128(sp)
100065e8:	d8801f17 	ldw	r2,124(sp)
100065ec:	da000404 	addi	r8,sp,16
100065f0:	003fee06 	br	100065ac <__alt_data_end+0xf80065ac>
100065f4:	d9002d17 	ldw	r4,180(sp)
100065f8:	d9801e04 	addi	r6,sp,120
100065fc:	b80b883a 	mov	r5,r23
10006600:	000ca340 	call	1000ca34 <__sprint_r>
10006604:	103c171e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
10006608:	d8c02017 	ldw	r3,128(sp)
1000660c:	df002787 	ldb	fp,158(sp)
10006610:	da000404 	addi	r8,sp,16
10006614:	003d3406 	br	10005ae8 <__alt_data_end+0xf8005ae8>
10006618:	9080040c 	andi	r2,r18,16
1000661c:	10016126 	beq	r2,zero,10006ba4 <___vfprintf_internal_r+0x1950>
10006620:	d9402e17 	ldw	r5,184(sp)
10006624:	2cc00017 	ldw	r19,0(r5)
10006628:	29400104 	addi	r5,r5,4
1000662c:	d9402e15 	stw	r5,184(sp)
10006630:	982dd7fa 	srai	r22,r19,31
10006634:	b005883a 	mov	r2,r22
10006638:	003c5a06 	br	100057a4 <__alt_data_end+0xf80057a4>
1000663c:	9080040c 	andi	r2,r18,16
10006640:	10003526 	beq	r2,zero,10006718 <___vfprintf_internal_r+0x14c4>
10006644:	d8c02e17 	ldw	r3,184(sp)
10006648:	d9002a17 	ldw	r4,168(sp)
1000664c:	d8002785 	stb	zero,158(sp)
10006650:	18800104 	addi	r2,r3,4
10006654:	1cc00017 	ldw	r19,0(r3)
10006658:	002d883a 	mov	r22,zero
1000665c:	20003716 	blt	r4,zero,1000673c <___vfprintf_internal_r+0x14e8>
10006660:	00ffdfc4 	movi	r3,-129
10006664:	d8802e15 	stw	r2,184(sp)
10006668:	90e4703a 	and	r18,r18,r3
1000666c:	0039883a 	mov	fp,zero
10006670:	983dd426 	beq	r19,zero,10005dc4 <__alt_data_end+0xf8005dc4>
10006674:	00800244 	movi	r2,9
10006678:	14fc5336 	bltu	r2,r19,100057c8 <__alt_data_end+0xf80057c8>
1000667c:	d8c02817 	ldw	r3,160(sp)
10006680:	dc001dc4 	addi	r16,sp,119
10006684:	9cc00c04 	addi	r19,r19,48
10006688:	1c07c83a 	sub	r3,r3,r16
1000668c:	dcc01dc5 	stb	r19,119(sp)
10006690:	d8c02b15 	stw	r3,172(sp)
10006694:	003cc606 	br	100059b0 <__alt_data_end+0xf80059b0>
10006698:	d8803317 	ldw	r2,204(sp)
1000669c:	143fffc4 	addi	r16,r2,-1
100066a0:	043f4d0e 	bge	zero,r16,100063d8 <__alt_data_end+0xf80063d8>
100066a4:	07000404 	movi	fp,16
100066a8:	e400810e 	bge	fp,r16,100068b0 <___vfprintf_internal_r+0x165c>
100066ac:	01440074 	movhi	r5,4097
100066b0:	29539484 	addi	r5,r5,20050
100066b4:	d9402c15 	stw	r5,176(sp)
100066b8:	01c001c4 	movi	r7,7
100066bc:	dcc02d17 	ldw	r19,180(sp)
100066c0:	00000306 	br	100066d0 <___vfprintf_internal_r+0x147c>
100066c4:	b5800204 	addi	r22,r22,8
100066c8:	843ffc04 	addi	r16,r16,-16
100066cc:	e4007b0e 	bge	fp,r16,100068bc <___vfprintf_internal_r+0x1668>
100066d0:	18c00404 	addi	r3,r3,16
100066d4:	8c400044 	addi	r17,r17,1
100066d8:	b5000015 	stw	r20,0(r22)
100066dc:	b7000115 	stw	fp,4(r22)
100066e0:	d8c02015 	stw	r3,128(sp)
100066e4:	dc401f15 	stw	r17,124(sp)
100066e8:	3c7ff60e 	bge	r7,r17,100066c4 <__alt_data_end+0xf80066c4>
100066ec:	d9801e04 	addi	r6,sp,120
100066f0:	b80b883a 	mov	r5,r23
100066f4:	9809883a 	mov	r4,r19
100066f8:	d9c03c15 	stw	r7,240(sp)
100066fc:	000ca340 	call	1000ca34 <__sprint_r>
10006700:	d9c03c17 	ldw	r7,240(sp)
10006704:	103bd71e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
10006708:	d8c02017 	ldw	r3,128(sp)
1000670c:	dc401f17 	ldw	r17,124(sp)
10006710:	dd800404 	addi	r22,sp,16
10006714:	003fec06 	br	100066c8 <__alt_data_end+0xf80066c8>
10006718:	9080100c 	andi	r2,r18,64
1000671c:	d8002785 	stb	zero,158(sp)
10006720:	10010e26 	beq	r2,zero,10006b5c <___vfprintf_internal_r+0x1908>
10006724:	d9402e17 	ldw	r5,184(sp)
10006728:	d8c02a17 	ldw	r3,168(sp)
1000672c:	002d883a 	mov	r22,zero
10006730:	28800104 	addi	r2,r5,4
10006734:	2cc0000b 	ldhu	r19,0(r5)
10006738:	183fc90e 	bge	r3,zero,10006660 <__alt_data_end+0xf8006660>
1000673c:	d8802e15 	stw	r2,184(sp)
10006740:	0039883a 	mov	fp,zero
10006744:	9d84b03a 	or	r2,r19,r22
10006748:	103c1e1e 	bne	r2,zero,100057c4 <__alt_data_end+0xf80057c4>
1000674c:	00800044 	movi	r2,1
10006750:	003e6c06 	br	10006104 <__alt_data_end+0xf8006104>
10006754:	d9002d17 	ldw	r4,180(sp)
10006758:	d9801e04 	addi	r6,sp,120
1000675c:	b80b883a 	mov	r5,r23
10006760:	000ca340 	call	1000ca34 <__sprint_r>
10006764:	103bbf1e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
10006768:	d8c02017 	ldw	r3,128(sp)
1000676c:	da000404 	addi	r8,sp,16
10006770:	d9003217 	ldw	r4,200(sp)
10006774:	d8802617 	ldw	r2,152(sp)
10006778:	d9403317 	ldw	r5,204(sp)
1000677c:	8123883a 	add	r17,r16,r4
10006780:	11400216 	blt	r2,r5,1000678c <___vfprintf_internal_r+0x1538>
10006784:	9100004c 	andi	r4,r18,1
10006788:	20000d26 	beq	r4,zero,100067c0 <___vfprintf_internal_r+0x156c>
1000678c:	d9003717 	ldw	r4,220(sp)
10006790:	d9403417 	ldw	r5,208(sp)
10006794:	1907883a 	add	r3,r3,r4
10006798:	d9001f17 	ldw	r4,124(sp)
1000679c:	41400015 	stw	r5,0(r8)
100067a0:	d9403717 	ldw	r5,220(sp)
100067a4:	21000044 	addi	r4,r4,1
100067a8:	d8c02015 	stw	r3,128(sp)
100067ac:	41400115 	stw	r5,4(r8)
100067b0:	d9001f15 	stw	r4,124(sp)
100067b4:	014001c4 	movi	r5,7
100067b8:	2901e816 	blt	r5,r4,10006f5c <___vfprintf_internal_r+0x1d08>
100067bc:	42000204 	addi	r8,r8,8
100067c0:	d9003317 	ldw	r4,204(sp)
100067c4:	8121883a 	add	r16,r16,r4
100067c8:	2085c83a 	sub	r2,r4,r2
100067cc:	8461c83a 	sub	r16,r16,r17
100067d0:	1400010e 	bge	r2,r16,100067d8 <___vfprintf_internal_r+0x1584>
100067d4:	1021883a 	mov	r16,r2
100067d8:	04000a0e 	bge	zero,r16,10006804 <___vfprintf_internal_r+0x15b0>
100067dc:	d9001f17 	ldw	r4,124(sp)
100067e0:	1c07883a 	add	r3,r3,r16
100067e4:	44400015 	stw	r17,0(r8)
100067e8:	21000044 	addi	r4,r4,1
100067ec:	44000115 	stw	r16,4(r8)
100067f0:	d8c02015 	stw	r3,128(sp)
100067f4:	d9001f15 	stw	r4,124(sp)
100067f8:	014001c4 	movi	r5,7
100067fc:	2901fb16 	blt	r5,r4,10006fec <___vfprintf_internal_r+0x1d98>
10006800:	42000204 	addi	r8,r8,8
10006804:	8001f716 	blt	r16,zero,10006fe4 <___vfprintf_internal_r+0x1d90>
10006808:	1421c83a 	sub	r16,r2,r16
1000680c:	043d160e 	bge	zero,r16,10005c68 <__alt_data_end+0xf8005c68>
10006810:	04400404 	movi	r17,16
10006814:	d8801f17 	ldw	r2,124(sp)
10006818:	8c3efb0e 	bge	r17,r16,10006408 <__alt_data_end+0xf8006408>
1000681c:	01440074 	movhi	r5,4097
10006820:	29539484 	addi	r5,r5,20050
10006824:	d9402c15 	stw	r5,176(sp)
10006828:	058001c4 	movi	r22,7
1000682c:	dcc02d17 	ldw	r19,180(sp)
10006830:	00000306 	br	10006840 <___vfprintf_internal_r+0x15ec>
10006834:	42000204 	addi	r8,r8,8
10006838:	843ffc04 	addi	r16,r16,-16
1000683c:	8c3ef50e 	bge	r17,r16,10006414 <__alt_data_end+0xf8006414>
10006840:	18c00404 	addi	r3,r3,16
10006844:	10800044 	addi	r2,r2,1
10006848:	45000015 	stw	r20,0(r8)
1000684c:	44400115 	stw	r17,4(r8)
10006850:	d8c02015 	stw	r3,128(sp)
10006854:	d8801f15 	stw	r2,124(sp)
10006858:	b0bff60e 	bge	r22,r2,10006834 <__alt_data_end+0xf8006834>
1000685c:	d9801e04 	addi	r6,sp,120
10006860:	b80b883a 	mov	r5,r23
10006864:	9809883a 	mov	r4,r19
10006868:	000ca340 	call	1000ca34 <__sprint_r>
1000686c:	103b7d1e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
10006870:	d8c02017 	ldw	r3,128(sp)
10006874:	d8801f17 	ldw	r2,124(sp)
10006878:	da000404 	addi	r8,sp,16
1000687c:	003fee06 	br	10006838 <__alt_data_end+0xf8006838>
10006880:	9088703a 	and	r4,r18,r2
10006884:	203eab1e 	bne	r4,zero,10006334 <__alt_data_end+0xf8006334>
10006888:	dc401f17 	ldw	r17,124(sp)
1000688c:	40800115 	stw	r2,4(r8)
10006890:	44000015 	stw	r16,0(r8)
10006894:	8c400044 	addi	r17,r17,1
10006898:	d8c02015 	stw	r3,128(sp)
1000689c:	dc401f15 	stw	r17,124(sp)
100068a0:	008001c4 	movi	r2,7
100068a4:	14400e16 	blt	r2,r17,100068e0 <___vfprintf_internal_r+0x168c>
100068a8:	45800204 	addi	r22,r8,8
100068ac:	003eca06 	br	100063d8 <__alt_data_end+0xf80063d8>
100068b0:	01040074 	movhi	r4,4097
100068b4:	21139484 	addi	r4,r4,20050
100068b8:	d9002c15 	stw	r4,176(sp)
100068bc:	d8802c17 	ldw	r2,176(sp)
100068c0:	1c07883a 	add	r3,r3,r16
100068c4:	8c400044 	addi	r17,r17,1
100068c8:	b0800015 	stw	r2,0(r22)
100068cc:	b4000115 	stw	r16,4(r22)
100068d0:	d8c02015 	stw	r3,128(sp)
100068d4:	dc401f15 	stw	r17,124(sp)
100068d8:	008001c4 	movi	r2,7
100068dc:	147ebd0e 	bge	r2,r17,100063d4 <__alt_data_end+0xf80063d4>
100068e0:	d9002d17 	ldw	r4,180(sp)
100068e4:	d9801e04 	addi	r6,sp,120
100068e8:	b80b883a 	mov	r5,r23
100068ec:	000ca340 	call	1000ca34 <__sprint_r>
100068f0:	103b5c1e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
100068f4:	d8c02017 	ldw	r3,128(sp)
100068f8:	dc401f17 	ldw	r17,124(sp)
100068fc:	dd800404 	addi	r22,sp,16
10006900:	003eb506 	br	100063d8 <__alt_data_end+0xf80063d8>
10006904:	d9002d17 	ldw	r4,180(sp)
10006908:	d9801e04 	addi	r6,sp,120
1000690c:	b80b883a 	mov	r5,r23
10006910:	000ca340 	call	1000ca34 <__sprint_r>
10006914:	103b531e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
10006918:	d8c02017 	ldw	r3,128(sp)
1000691c:	dc401f17 	ldw	r17,124(sp)
10006920:	da000404 	addi	r8,sp,16
10006924:	003e8d06 	br	1000635c <__alt_data_end+0xf800635c>
10006928:	d9002d17 	ldw	r4,180(sp)
1000692c:	d9801e04 	addi	r6,sp,120
10006930:	b80b883a 	mov	r5,r23
10006934:	000ca340 	call	1000ca34 <__sprint_r>
10006938:	103b4a1e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
1000693c:	d8c02017 	ldw	r3,128(sp)
10006940:	dc401f17 	ldw	r17,124(sp)
10006944:	dd800404 	addi	r22,sp,16
10006948:	003e8f06 	br	10006388 <__alt_data_end+0xf8006388>
1000694c:	0027883a 	mov	r19,zero
10006950:	003f4a06 	br	1000667c <__alt_data_end+0xf800667c>
10006954:	d9002d17 	ldw	r4,180(sp)
10006958:	d9801e04 	addi	r6,sp,120
1000695c:	b80b883a 	mov	r5,r23
10006960:	000ca340 	call	1000ca34 <__sprint_r>
10006964:	103b3f1e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
10006968:	d8c02017 	ldw	r3,128(sp)
1000696c:	da000404 	addi	r8,sp,16
10006970:	003c7b06 	br	10005b60 <__alt_data_end+0xf8005b60>
10006974:	d9402a17 	ldw	r5,168(sp)
10006978:	04e7c83a 	sub	r19,zero,r19
1000697c:	07000b44 	movi	fp,45
10006980:	9804c03a 	cmpne	r2,r19,zero
10006984:	05adc83a 	sub	r22,zero,r22
10006988:	df002785 	stb	fp,158(sp)
1000698c:	b0adc83a 	sub	r22,r22,r2
10006990:	28017b16 	blt	r5,zero,10006f80 <___vfprintf_internal_r+0x1d2c>
10006994:	00bfdfc4 	movi	r2,-129
10006998:	90a4703a 	and	r18,r18,r2
1000699c:	003b8906 	br	100057c4 <__alt_data_end+0xf80057c4>
100069a0:	d9003617 	ldw	r4,216(sp)
100069a4:	d9403817 	ldw	r5,224(sp)
100069a8:	da003d15 	stw	r8,244(sp)
100069ac:	000c6580 	call	1000c658 <__fpclassifyd>
100069b0:	da003d17 	ldw	r8,244(sp)
100069b4:	1000f026 	beq	r2,zero,10006d78 <___vfprintf_internal_r+0x1b24>
100069b8:	d9002a17 	ldw	r4,168(sp)
100069bc:	05bff7c4 	movi	r22,-33
100069c0:	00bfffc4 	movi	r2,-1
100069c4:	8dac703a 	and	r22,r17,r22
100069c8:	20820026 	beq	r4,r2,100071cc <___vfprintf_internal_r+0x1f78>
100069cc:	008011c4 	movi	r2,71
100069d0:	b081f726 	beq	r22,r2,100071b0 <___vfprintf_internal_r+0x1f5c>
100069d4:	d9003817 	ldw	r4,224(sp)
100069d8:	90c04014 	ori	r3,r18,256
100069dc:	d8c02c15 	stw	r3,176(sp)
100069e0:	20021516 	blt	r4,zero,10007238 <___vfprintf_internal_r+0x1fe4>
100069e4:	dcc03817 	ldw	r19,224(sp)
100069e8:	d8002905 	stb	zero,164(sp)
100069ec:	00801984 	movi	r2,102
100069f0:	8881f926 	beq	r17,r2,100071d8 <___vfprintf_internal_r+0x1f84>
100069f4:	00801184 	movi	r2,70
100069f8:	88821c26 	beq	r17,r2,1000726c <___vfprintf_internal_r+0x2018>
100069fc:	00801144 	movi	r2,69
10006a00:	b081ef26 	beq	r22,r2,100071c0 <___vfprintf_internal_r+0x1f6c>
10006a04:	d8c02a17 	ldw	r3,168(sp)
10006a08:	d8802104 	addi	r2,sp,132
10006a0c:	d8800315 	stw	r2,12(sp)
10006a10:	d9403617 	ldw	r5,216(sp)
10006a14:	d8802504 	addi	r2,sp,148
10006a18:	d9002d17 	ldw	r4,180(sp)
10006a1c:	d8800215 	stw	r2,8(sp)
10006a20:	d8802604 	addi	r2,sp,152
10006a24:	d8c00015 	stw	r3,0(sp)
10006a28:	d8800115 	stw	r2,4(sp)
10006a2c:	01c00084 	movi	r7,2
10006a30:	980d883a 	mov	r6,r19
10006a34:	d8c03c15 	stw	r3,240(sp)
10006a38:	da003d15 	stw	r8,244(sp)
10006a3c:	00079840 	call	10007984 <_dtoa_r>
10006a40:	1021883a 	mov	r16,r2
10006a44:	008019c4 	movi	r2,103
10006a48:	d8c03c17 	ldw	r3,240(sp)
10006a4c:	da003d17 	ldw	r8,244(sp)
10006a50:	88817126 	beq	r17,r2,10007018 <___vfprintf_internal_r+0x1dc4>
10006a54:	008011c4 	movi	r2,71
10006a58:	88829126 	beq	r17,r2,100074a0 <___vfprintf_internal_r+0x224c>
10006a5c:	80f9883a 	add	fp,r16,r3
10006a60:	d9003617 	ldw	r4,216(sp)
10006a64:	000d883a 	mov	r6,zero
10006a68:	000f883a 	mov	r7,zero
10006a6c:	980b883a 	mov	r5,r19
10006a70:	da003d15 	stw	r8,244(sp)
10006a74:	00107b80 	call	100107b8 <__eqdf2>
10006a78:	da003d17 	ldw	r8,244(sp)
10006a7c:	10018d26 	beq	r2,zero,100070b4 <___vfprintf_internal_r+0x1e60>
10006a80:	d8802117 	ldw	r2,132(sp)
10006a84:	1700062e 	bgeu	r2,fp,10006aa0 <___vfprintf_internal_r+0x184c>
10006a88:	01000c04 	movi	r4,48
10006a8c:	10c00044 	addi	r3,r2,1
10006a90:	d8c02115 	stw	r3,132(sp)
10006a94:	11000005 	stb	r4,0(r2)
10006a98:	d8802117 	ldw	r2,132(sp)
10006a9c:	173ffb36 	bltu	r2,fp,10006a8c <__alt_data_end+0xf8006a8c>
10006aa0:	1405c83a 	sub	r2,r2,r16
10006aa4:	d8803315 	stw	r2,204(sp)
10006aa8:	008011c4 	movi	r2,71
10006aac:	b0817626 	beq	r22,r2,10007088 <___vfprintf_internal_r+0x1e34>
10006ab0:	00801944 	movi	r2,101
10006ab4:	1442800e 	bge	r2,r17,100074b8 <___vfprintf_internal_r+0x2264>
10006ab8:	d8c02617 	ldw	r3,152(sp)
10006abc:	00801984 	movi	r2,102
10006ac0:	d8c03215 	stw	r3,200(sp)
10006ac4:	8881fe26 	beq	r17,r2,100072c0 <___vfprintf_internal_r+0x206c>
10006ac8:	d8c03217 	ldw	r3,200(sp)
10006acc:	d9003317 	ldw	r4,204(sp)
10006ad0:	1901dd16 	blt	r3,r4,10007248 <___vfprintf_internal_r+0x1ff4>
10006ad4:	9480004c 	andi	r18,r18,1
10006ad8:	90022b1e 	bne	r18,zero,10007388 <___vfprintf_internal_r+0x2134>
10006adc:	1805883a 	mov	r2,r3
10006ae0:	18028316 	blt	r3,zero,100074f0 <___vfprintf_internal_r+0x229c>
10006ae4:	d8c03217 	ldw	r3,200(sp)
10006ae8:	044019c4 	movi	r17,103
10006aec:	d8c02b15 	stw	r3,172(sp)
10006af0:	df002907 	ldb	fp,164(sp)
10006af4:	e001531e 	bne	fp,zero,10007044 <___vfprintf_internal_r+0x1df0>
10006af8:	df002783 	ldbu	fp,158(sp)
10006afc:	d8802915 	stw	r2,164(sp)
10006b00:	dc802c17 	ldw	r18,176(sp)
10006b04:	d8002a15 	stw	zero,168(sp)
10006b08:	003baf06 	br	100059c8 <__alt_data_end+0xf80059c8>
10006b0c:	d8c02e17 	ldw	r3,184(sp)
10006b10:	d9002e17 	ldw	r4,184(sp)
10006b14:	d9402e17 	ldw	r5,184(sp)
10006b18:	18c00017 	ldw	r3,0(r3)
10006b1c:	21000117 	ldw	r4,4(r4)
10006b20:	29400204 	addi	r5,r5,8
10006b24:	d8c03615 	stw	r3,216(sp)
10006b28:	d9003815 	stw	r4,224(sp)
10006b2c:	d9402e15 	stw	r5,184(sp)
10006b30:	003b5006 	br	10005874 <__alt_data_end+0xf8005874>
10006b34:	ac400007 	ldb	r17,0(r21)
10006b38:	003a2806 	br	100053dc <__alt_data_end+0xf80053dc>
10006b3c:	9080100c 	andi	r2,r18,64
10006b40:	1000a826 	beq	r2,zero,10006de4 <___vfprintf_internal_r+0x1b90>
10006b44:	d8c02e17 	ldw	r3,184(sp)
10006b48:	002d883a 	mov	r22,zero
10006b4c:	1cc0000b 	ldhu	r19,0(r3)
10006b50:	18c00104 	addi	r3,r3,4
10006b54:	d8c02e15 	stw	r3,184(sp)
10006b58:	003caf06 	br	10005e18 <__alt_data_end+0xf8005e18>
10006b5c:	d9002e17 	ldw	r4,184(sp)
10006b60:	d9402a17 	ldw	r5,168(sp)
10006b64:	002d883a 	mov	r22,zero
10006b68:	20800104 	addi	r2,r4,4
10006b6c:	24c00017 	ldw	r19,0(r4)
10006b70:	283ebb0e 	bge	r5,zero,10006660 <__alt_data_end+0xf8006660>
10006b74:	003ef106 	br	1000673c <__alt_data_end+0xf800673c>
10006b78:	9080040c 	andi	r2,r18,16
10006b7c:	1000921e 	bne	r2,zero,10006dc8 <___vfprintf_internal_r+0x1b74>
10006b80:	9480100c 	andi	r18,r18,64
10006b84:	90013926 	beq	r18,zero,1000706c <___vfprintf_internal_r+0x1e18>
10006b88:	d9402e17 	ldw	r5,184(sp)
10006b8c:	d8c02f17 	ldw	r3,188(sp)
10006b90:	28800017 	ldw	r2,0(r5)
10006b94:	29400104 	addi	r5,r5,4
10006b98:	d9402e15 	stw	r5,184(sp)
10006b9c:	10c0000d 	sth	r3,0(r2)
10006ba0:	0039e406 	br	10005334 <__alt_data_end+0xf8005334>
10006ba4:	9080100c 	andi	r2,r18,64
10006ba8:	10008026 	beq	r2,zero,10006dac <___vfprintf_internal_r+0x1b58>
10006bac:	d8802e17 	ldw	r2,184(sp)
10006bb0:	14c0000f 	ldh	r19,0(r2)
10006bb4:	10800104 	addi	r2,r2,4
10006bb8:	d8802e15 	stw	r2,184(sp)
10006bbc:	982dd7fa 	srai	r22,r19,31
10006bc0:	b005883a 	mov	r2,r22
10006bc4:	003af706 	br	100057a4 <__alt_data_end+0xf80057a4>
10006bc8:	9080100c 	andi	r2,r18,64
10006bcc:	d8002785 	stb	zero,158(sp)
10006bd0:	10008a1e 	bne	r2,zero,10006dfc <___vfprintf_internal_r+0x1ba8>
10006bd4:	d9002e17 	ldw	r4,184(sp)
10006bd8:	d9402a17 	ldw	r5,168(sp)
10006bdc:	002d883a 	mov	r22,zero
10006be0:	20800104 	addi	r2,r4,4
10006be4:	24c00017 	ldw	r19,0(r4)
10006be8:	283e4b0e 	bge	r5,zero,10006518 <__alt_data_end+0xf8006518>
10006bec:	9d86b03a 	or	r3,r19,r22
10006bf0:	d8802e15 	stw	r2,184(sp)
10006bf4:	183e4c1e 	bne	r3,zero,10006528 <__alt_data_end+0xf8006528>
10006bf8:	0039883a 	mov	fp,zero
10006bfc:	0005883a 	mov	r2,zero
10006c00:	003d4006 	br	10006104 <__alt_data_end+0xf8006104>
10006c04:	01440074 	movhi	r5,4097
10006c08:	29539484 	addi	r5,r5,20050
10006c0c:	d9402c15 	stw	r5,176(sp)
10006c10:	d9402c17 	ldw	r5,176(sp)
10006c14:	1c47883a 	add	r3,r3,r17
10006c18:	10800044 	addi	r2,r2,1
10006c1c:	41400015 	stw	r5,0(r8)
10006c20:	44400115 	stw	r17,4(r8)
10006c24:	d8c02015 	stw	r3,128(sp)
10006c28:	d8801f15 	stw	r2,124(sp)
10006c2c:	010001c4 	movi	r4,7
10006c30:	20bec816 	blt	r4,r2,10006754 <__alt_data_end+0xf8006754>
10006c34:	42000204 	addi	r8,r8,8
10006c38:	003ecd06 	br	10006770 <__alt_data_end+0xf8006770>
10006c3c:	d9002a17 	ldw	r4,168(sp)
10006c40:	d8002785 	stb	zero,158(sp)
10006c44:	203d2d16 	blt	r4,zero,100060fc <__alt_data_end+0xf80060fc>
10006c48:	00bfdfc4 	movi	r2,-129
10006c4c:	90a4703a 	and	r18,r18,r2
10006c50:	003a6106 	br	100055d8 <__alt_data_end+0xf80055d8>
10006c54:	01040074 	movhi	r4,4097
10006c58:	21139484 	addi	r4,r4,20050
10006c5c:	d9002c15 	stw	r4,176(sp)
10006c60:	003bea06 	br	10005c0c <__alt_data_end+0xf8005c0c>
10006c64:	d9002d17 	ldw	r4,180(sp)
10006c68:	d9801e04 	addi	r6,sp,120
10006c6c:	b80b883a 	mov	r5,r23
10006c70:	000ca340 	call	1000ca34 <__sprint_r>
10006c74:	103a7b1e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
10006c78:	d8c02017 	ldw	r3,128(sp)
10006c7c:	da000404 	addi	r8,sp,16
10006c80:	003d4106 	br	10006188 <__alt_data_end+0xf8006188>
10006c84:	d8801f17 	ldw	r2,124(sp)
10006c88:	01440074 	movhi	r5,4097
10006c8c:	01000044 	movi	r4,1
10006c90:	18c00044 	addi	r3,r3,1
10006c94:	10800044 	addi	r2,r2,1
10006c98:	29539404 	addi	r5,r5,20048
10006c9c:	41000115 	stw	r4,4(r8)
10006ca0:	41400015 	stw	r5,0(r8)
10006ca4:	d8c02015 	stw	r3,128(sp)
10006ca8:	d8801f15 	stw	r2,124(sp)
10006cac:	010001c4 	movi	r4,7
10006cb0:	20805c16 	blt	r4,r2,10006e24 <___vfprintf_internal_r+0x1bd0>
10006cb4:	42000204 	addi	r8,r8,8
10006cb8:	8800041e 	bne	r17,zero,10006ccc <___vfprintf_internal_r+0x1a78>
10006cbc:	d8803317 	ldw	r2,204(sp)
10006cc0:	1000021e 	bne	r2,zero,10006ccc <___vfprintf_internal_r+0x1a78>
10006cc4:	9080004c 	andi	r2,r18,1
10006cc8:	103be726 	beq	r2,zero,10005c68 <__alt_data_end+0xf8005c68>
10006ccc:	d9003717 	ldw	r4,220(sp)
10006cd0:	d8801f17 	ldw	r2,124(sp)
10006cd4:	d9403417 	ldw	r5,208(sp)
10006cd8:	20c7883a 	add	r3,r4,r3
10006cdc:	10800044 	addi	r2,r2,1
10006ce0:	41000115 	stw	r4,4(r8)
10006ce4:	41400015 	stw	r5,0(r8)
10006ce8:	d8c02015 	stw	r3,128(sp)
10006cec:	d8801f15 	stw	r2,124(sp)
10006cf0:	010001c4 	movi	r4,7
10006cf4:	20812116 	blt	r4,r2,1000717c <___vfprintf_internal_r+0x1f28>
10006cf8:	42000204 	addi	r8,r8,8
10006cfc:	0463c83a 	sub	r17,zero,r17
10006d00:	0440730e 	bge	zero,r17,10006ed0 <___vfprintf_internal_r+0x1c7c>
10006d04:	05800404 	movi	r22,16
10006d08:	b440860e 	bge	r22,r17,10006f24 <___vfprintf_internal_r+0x1cd0>
10006d0c:	01440074 	movhi	r5,4097
10006d10:	29539484 	addi	r5,r5,20050
10006d14:	d9402c15 	stw	r5,176(sp)
10006d18:	070001c4 	movi	fp,7
10006d1c:	dcc02d17 	ldw	r19,180(sp)
10006d20:	00000306 	br	10006d30 <___vfprintf_internal_r+0x1adc>
10006d24:	42000204 	addi	r8,r8,8
10006d28:	8c7ffc04 	addi	r17,r17,-16
10006d2c:	b440800e 	bge	r22,r17,10006f30 <___vfprintf_internal_r+0x1cdc>
10006d30:	18c00404 	addi	r3,r3,16
10006d34:	10800044 	addi	r2,r2,1
10006d38:	45000015 	stw	r20,0(r8)
10006d3c:	45800115 	stw	r22,4(r8)
10006d40:	d8c02015 	stw	r3,128(sp)
10006d44:	d8801f15 	stw	r2,124(sp)
10006d48:	e0bff60e 	bge	fp,r2,10006d24 <__alt_data_end+0xf8006d24>
10006d4c:	d9801e04 	addi	r6,sp,120
10006d50:	b80b883a 	mov	r5,r23
10006d54:	9809883a 	mov	r4,r19
10006d58:	000ca340 	call	1000ca34 <__sprint_r>
10006d5c:	103a411e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
10006d60:	d8c02017 	ldw	r3,128(sp)
10006d64:	d8801f17 	ldw	r2,124(sp)
10006d68:	da000404 	addi	r8,sp,16
10006d6c:	003fee06 	br	10006d28 <__alt_data_end+0xf8006d28>
10006d70:	00bfffc4 	movi	r2,-1
10006d74:	003a3f06 	br	10005674 <__alt_data_end+0xf8005674>
10006d78:	008011c4 	movi	r2,71
10006d7c:	1440b816 	blt	r2,r17,10007060 <___vfprintf_internal_r+0x1e0c>
10006d80:	04040074 	movhi	r16,4097
10006d84:	84138604 	addi	r16,r16,19992
10006d88:	00c000c4 	movi	r3,3
10006d8c:	00bfdfc4 	movi	r2,-129
10006d90:	d8c02915 	stw	r3,164(sp)
10006d94:	90a4703a 	and	r18,r18,r2
10006d98:	df002783 	ldbu	fp,158(sp)
10006d9c:	d8c02b15 	stw	r3,172(sp)
10006da0:	d8002a15 	stw	zero,168(sp)
10006da4:	d8003215 	stw	zero,200(sp)
10006da8:	003b0706 	br	100059c8 <__alt_data_end+0xf80059c8>
10006dac:	d8c02e17 	ldw	r3,184(sp)
10006db0:	1cc00017 	ldw	r19,0(r3)
10006db4:	18c00104 	addi	r3,r3,4
10006db8:	d8c02e15 	stw	r3,184(sp)
10006dbc:	982dd7fa 	srai	r22,r19,31
10006dc0:	b005883a 	mov	r2,r22
10006dc4:	003a7706 	br	100057a4 <__alt_data_end+0xf80057a4>
10006dc8:	d8c02e17 	ldw	r3,184(sp)
10006dcc:	d9002f17 	ldw	r4,188(sp)
10006dd0:	18800017 	ldw	r2,0(r3)
10006dd4:	18c00104 	addi	r3,r3,4
10006dd8:	d8c02e15 	stw	r3,184(sp)
10006ddc:	11000015 	stw	r4,0(r2)
10006de0:	00395406 	br	10005334 <__alt_data_end+0xf8005334>
10006de4:	d9002e17 	ldw	r4,184(sp)
10006de8:	002d883a 	mov	r22,zero
10006dec:	24c00017 	ldw	r19,0(r4)
10006df0:	21000104 	addi	r4,r4,4
10006df4:	d9002e15 	stw	r4,184(sp)
10006df8:	003c0706 	br	10005e18 <__alt_data_end+0xf8005e18>
10006dfc:	d9402e17 	ldw	r5,184(sp)
10006e00:	d8c02a17 	ldw	r3,168(sp)
10006e04:	002d883a 	mov	r22,zero
10006e08:	28800104 	addi	r2,r5,4
10006e0c:	2cc0000b 	ldhu	r19,0(r5)
10006e10:	183dc10e 	bge	r3,zero,10006518 <__alt_data_end+0xf8006518>
10006e14:	003f7506 	br	10006bec <__alt_data_end+0xf8006bec>
10006e18:	04040074 	movhi	r16,4097
10006e1c:	84138404 	addi	r16,r16,19984
10006e20:	003aa706 	br	100058c0 <__alt_data_end+0xf80058c0>
10006e24:	d9002d17 	ldw	r4,180(sp)
10006e28:	d9801e04 	addi	r6,sp,120
10006e2c:	b80b883a 	mov	r5,r23
10006e30:	000ca340 	call	1000ca34 <__sprint_r>
10006e34:	103a0b1e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
10006e38:	dc402617 	ldw	r17,152(sp)
10006e3c:	d8c02017 	ldw	r3,128(sp)
10006e40:	da000404 	addi	r8,sp,16
10006e44:	003f9c06 	br	10006cb8 <__alt_data_end+0xf8006cb8>
10006e48:	ac400043 	ldbu	r17,1(r21)
10006e4c:	84000814 	ori	r16,r16,32
10006e50:	ad400044 	addi	r21,r21,1
10006e54:	8c403fcc 	andi	r17,r17,255
10006e58:	8c40201c 	xori	r17,r17,128
10006e5c:	8c7fe004 	addi	r17,r17,-128
10006e60:	00395e06 	br	100053dc <__alt_data_end+0xf80053dc>
10006e64:	d8c02e15 	stw	r3,184(sp)
10006e68:	0039883a 	mov	fp,zero
10006e6c:	003e3506 	br	10006744 <__alt_data_end+0xf8006744>
10006e70:	d9002d17 	ldw	r4,180(sp)
10006e74:	d9801e04 	addi	r6,sp,120
10006e78:	b80b883a 	mov	r5,r23
10006e7c:	000ca340 	call	1000ca34 <__sprint_r>
10006e80:	1039f81e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
10006e84:	d8c02017 	ldw	r3,128(sp)
10006e88:	da000404 	addi	r8,sp,16
10006e8c:	003cd006 	br	100061d0 <__alt_data_end+0xf80061d0>
10006e90:	8009883a 	mov	r4,r16
10006e94:	df003d15 	stw	fp,244(sp)
10006e98:	00051bc0 	call	100051bc <strlen>
10006e9c:	d8802b15 	stw	r2,172(sp)
10006ea0:	da003d17 	ldw	r8,244(sp)
10006ea4:	103c200e 	bge	r2,zero,10005f28 <__alt_data_end+0xf8005f28>
10006ea8:	0005883a 	mov	r2,zero
10006eac:	003c1e06 	br	10005f28 <__alt_data_end+0xf8005f28>
10006eb0:	d9002d17 	ldw	r4,180(sp)
10006eb4:	d9801e04 	addi	r6,sp,120
10006eb8:	b80b883a 	mov	r5,r23
10006ebc:	000ca340 	call	1000ca34 <__sprint_r>
10006ec0:	1039e81e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
10006ec4:	d8c02017 	ldw	r3,128(sp)
10006ec8:	d8801f17 	ldw	r2,124(sp)
10006ecc:	da000404 	addi	r8,sp,16
10006ed0:	d9403317 	ldw	r5,204(sp)
10006ed4:	10800044 	addi	r2,r2,1
10006ed8:	44000015 	stw	r16,0(r8)
10006edc:	28c7883a 	add	r3,r5,r3
10006ee0:	003b5b06 	br	10005c50 <__alt_data_end+0xf8005c50>
10006ee4:	01040074 	movhi	r4,4097
10006ee8:	21139884 	addi	r4,r4,20066
10006eec:	d9003515 	stw	r4,212(sp)
10006ef0:	003af206 	br	10005abc <__alt_data_end+0xf8005abc>
10006ef4:	013fffc4 	movi	r4,-1
10006ef8:	003a0806 	br	1000571c <__alt_data_end+0xf800571c>
10006efc:	0023883a 	mov	r17,zero
10006f00:	003d9d06 	br	10006578 <__alt_data_end+0xf8006578>
10006f04:	d9002d17 	ldw	r4,180(sp)
10006f08:	d9801e04 	addi	r6,sp,120
10006f0c:	b80b883a 	mov	r5,r23
10006f10:	000ca340 	call	1000ca34 <__sprint_r>
10006f14:	1039d31e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
10006f18:	d8c02017 	ldw	r3,128(sp)
10006f1c:	da000404 	addi	r8,sp,16
10006f20:	003d9406 	br	10006574 <__alt_data_end+0xf8006574>
10006f24:	01040074 	movhi	r4,4097
10006f28:	21139484 	addi	r4,r4,20050
10006f2c:	d9002c15 	stw	r4,176(sp)
10006f30:	d9002c17 	ldw	r4,176(sp)
10006f34:	1c47883a 	add	r3,r3,r17
10006f38:	10800044 	addi	r2,r2,1
10006f3c:	41000015 	stw	r4,0(r8)
10006f40:	44400115 	stw	r17,4(r8)
10006f44:	d8c02015 	stw	r3,128(sp)
10006f48:	d8801f15 	stw	r2,124(sp)
10006f4c:	010001c4 	movi	r4,7
10006f50:	20bfd716 	blt	r4,r2,10006eb0 <__alt_data_end+0xf8006eb0>
10006f54:	42000204 	addi	r8,r8,8
10006f58:	003fdd06 	br	10006ed0 <__alt_data_end+0xf8006ed0>
10006f5c:	d9002d17 	ldw	r4,180(sp)
10006f60:	d9801e04 	addi	r6,sp,120
10006f64:	b80b883a 	mov	r5,r23
10006f68:	000ca340 	call	1000ca34 <__sprint_r>
10006f6c:	1039bd1e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
10006f70:	d8802617 	ldw	r2,152(sp)
10006f74:	d8c02017 	ldw	r3,128(sp)
10006f78:	da000404 	addi	r8,sp,16
10006f7c:	003e1006 	br	100067c0 <__alt_data_end+0xf80067c0>
10006f80:	00800044 	movi	r2,1
10006f84:	10803fcc 	andi	r2,r2,255
10006f88:	00c00044 	movi	r3,1
10006f8c:	10fa0d26 	beq	r2,r3,100057c4 <__alt_data_end+0xf80057c4>
10006f90:	00c00084 	movi	r3,2
10006f94:	10fbaf26 	beq	r2,r3,10005e54 <__alt_data_end+0xf8005e54>
10006f98:	003a6d06 	br	10005950 <__alt_data_end+0xf8005950>
10006f9c:	01040074 	movhi	r4,4097
10006fa0:	21139884 	addi	r4,r4,20066
10006fa4:	d9003515 	stw	r4,212(sp)
10006fa8:	003b5406 	br	10005cfc <__alt_data_end+0xf8005cfc>
10006fac:	d8802a17 	ldw	r2,168(sp)
10006fb0:	00c00184 	movi	r3,6
10006fb4:	1880012e 	bgeu	r3,r2,10006fbc <___vfprintf_internal_r+0x1d68>
10006fb8:	1805883a 	mov	r2,r3
10006fbc:	d8802b15 	stw	r2,172(sp)
10006fc0:	1000ef16 	blt	r2,zero,10007380 <___vfprintf_internal_r+0x212c>
10006fc4:	04040074 	movhi	r16,4097
10006fc8:	d8802915 	stw	r2,164(sp)
10006fcc:	dcc02e15 	stw	r19,184(sp)
10006fd0:	d8002a15 	stw	zero,168(sp)
10006fd4:	d8003215 	stw	zero,200(sp)
10006fd8:	84139204 	addi	r16,r16,20040
10006fdc:	0039883a 	mov	fp,zero
10006fe0:	003a8006 	br	100059e4 <__alt_data_end+0xf80059e4>
10006fe4:	0021883a 	mov	r16,zero
10006fe8:	003e0706 	br	10006808 <__alt_data_end+0xf8006808>
10006fec:	d9002d17 	ldw	r4,180(sp)
10006ff0:	d9801e04 	addi	r6,sp,120
10006ff4:	b80b883a 	mov	r5,r23
10006ff8:	000ca340 	call	1000ca34 <__sprint_r>
10006ffc:	1039991e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
10007000:	d8802617 	ldw	r2,152(sp)
10007004:	d9403317 	ldw	r5,204(sp)
10007008:	d8c02017 	ldw	r3,128(sp)
1000700c:	da000404 	addi	r8,sp,16
10007010:	2885c83a 	sub	r2,r5,r2
10007014:	003dfb06 	br	10006804 <__alt_data_end+0xf8006804>
10007018:	9080004c 	andi	r2,r18,1
1000701c:	103e8f1e 	bne	r2,zero,10006a5c <__alt_data_end+0xf8006a5c>
10007020:	d8802117 	ldw	r2,132(sp)
10007024:	003e9e06 	br	10006aa0 <__alt_data_end+0xf8006aa0>
10007028:	1025883a 	mov	r18,r2
1000702c:	0039883a 	mov	fp,zero
10007030:	00800084 	movi	r2,2
10007034:	003fd306 	br	10006f84 <__alt_data_end+0xf8006f84>
10007038:	07000b44 	movi	fp,45
1000703c:	df002785 	stb	fp,158(sp)
10007040:	003a1b06 	br	100058b0 <__alt_data_end+0xf80058b0>
10007044:	00c00b44 	movi	r3,45
10007048:	d8c02785 	stb	r3,158(sp)
1000704c:	d8802915 	stw	r2,164(sp)
10007050:	dc802c17 	ldw	r18,176(sp)
10007054:	d8002a15 	stw	zero,168(sp)
10007058:	07000b44 	movi	fp,45
1000705c:	003a5e06 	br	100059d8 <__alt_data_end+0xf80059d8>
10007060:	04040074 	movhi	r16,4097
10007064:	84138704 	addi	r16,r16,19996
10007068:	003f4706 	br	10006d88 <__alt_data_end+0xf8006d88>
1000706c:	d9002e17 	ldw	r4,184(sp)
10007070:	d9402f17 	ldw	r5,188(sp)
10007074:	20800017 	ldw	r2,0(r4)
10007078:	21000104 	addi	r4,r4,4
1000707c:	d9002e15 	stw	r4,184(sp)
10007080:	11400015 	stw	r5,0(r2)
10007084:	0038ab06 	br	10005334 <__alt_data_end+0xf8005334>
10007088:	dd802617 	ldw	r22,152(sp)
1000708c:	00bfff44 	movi	r2,-3
10007090:	b0801c16 	blt	r22,r2,10007104 <___vfprintf_internal_r+0x1eb0>
10007094:	d9402a17 	ldw	r5,168(sp)
10007098:	2d801a16 	blt	r5,r22,10007104 <___vfprintf_internal_r+0x1eb0>
1000709c:	dd803215 	stw	r22,200(sp)
100070a0:	003e8906 	br	10006ac8 <__alt_data_end+0xf8006ac8>
100070a4:	01040074 	movhi	r4,4097
100070a8:	21139484 	addi	r4,r4,20050
100070ac:	d9002c15 	stw	r4,176(sp)
100070b0:	003c9106 	br	100062f8 <__alt_data_end+0xf80062f8>
100070b4:	e005883a 	mov	r2,fp
100070b8:	003e7906 	br	10006aa0 <__alt_data_end+0xf8006aa0>
100070bc:	d9002a17 	ldw	r4,168(sp)
100070c0:	df002783 	ldbu	fp,158(sp)
100070c4:	dcc02e15 	stw	r19,184(sp)
100070c8:	d9002915 	stw	r4,164(sp)
100070cc:	d9002b15 	stw	r4,172(sp)
100070d0:	d8002a15 	stw	zero,168(sp)
100070d4:	d8003215 	stw	zero,200(sp)
100070d8:	003a3b06 	br	100059c8 <__alt_data_end+0xf80059c8>
100070dc:	9080004c 	andi	r2,r18,1
100070e0:	0039883a 	mov	fp,zero
100070e4:	10000426 	beq	r2,zero,100070f8 <___vfprintf_internal_r+0x1ea4>
100070e8:	00800c04 	movi	r2,48
100070ec:	dc001dc4 	addi	r16,sp,119
100070f0:	d8801dc5 	stb	r2,119(sp)
100070f4:	003b6406 	br	10005e88 <__alt_data_end+0xf8005e88>
100070f8:	d8002b15 	stw	zero,172(sp)
100070fc:	dc001e04 	addi	r16,sp,120
10007100:	003a2b06 	br	100059b0 <__alt_data_end+0xf80059b0>
10007104:	8c7fff84 	addi	r17,r17,-2
10007108:	b5bfffc4 	addi	r22,r22,-1
1000710c:	dd802615 	stw	r22,152(sp)
10007110:	dc4022c5 	stb	r17,139(sp)
10007114:	b000bf16 	blt	r22,zero,10007414 <___vfprintf_internal_r+0x21c0>
10007118:	00800ac4 	movi	r2,43
1000711c:	d8802305 	stb	r2,140(sp)
10007120:	00800244 	movi	r2,9
10007124:	15807016 	blt	r2,r22,100072e8 <___vfprintf_internal_r+0x2094>
10007128:	00800c04 	movi	r2,48
1000712c:	b5800c04 	addi	r22,r22,48
10007130:	d8802345 	stb	r2,141(sp)
10007134:	dd802385 	stb	r22,142(sp)
10007138:	d88023c4 	addi	r2,sp,143
1000713c:	df0022c4 	addi	fp,sp,139
10007140:	d8c03317 	ldw	r3,204(sp)
10007144:	1739c83a 	sub	fp,r2,fp
10007148:	d9003317 	ldw	r4,204(sp)
1000714c:	e0c7883a 	add	r3,fp,r3
10007150:	df003a15 	stw	fp,232(sp)
10007154:	d8c02b15 	stw	r3,172(sp)
10007158:	00800044 	movi	r2,1
1000715c:	1100b30e 	bge	r2,r4,1000742c <___vfprintf_internal_r+0x21d8>
10007160:	d8c02b17 	ldw	r3,172(sp)
10007164:	18c00044 	addi	r3,r3,1
10007168:	d8c02b15 	stw	r3,172(sp)
1000716c:	1805883a 	mov	r2,r3
10007170:	1800ac16 	blt	r3,zero,10007424 <___vfprintf_internal_r+0x21d0>
10007174:	d8003215 	stw	zero,200(sp)
10007178:	003e5d06 	br	10006af0 <__alt_data_end+0xf8006af0>
1000717c:	d9002d17 	ldw	r4,180(sp)
10007180:	d9801e04 	addi	r6,sp,120
10007184:	b80b883a 	mov	r5,r23
10007188:	000ca340 	call	1000ca34 <__sprint_r>
1000718c:	1039351e 	bne	r2,zero,10005664 <__alt_data_end+0xf8005664>
10007190:	dc402617 	ldw	r17,152(sp)
10007194:	d8c02017 	ldw	r3,128(sp)
10007198:	d8801f17 	ldw	r2,124(sp)
1000719c:	da000404 	addi	r8,sp,16
100071a0:	003ed606 	br	10006cfc <__alt_data_end+0xf8006cfc>
100071a4:	182b883a 	mov	r21,r3
100071a8:	d8002a15 	stw	zero,168(sp)
100071ac:	00388c06 	br	100053e0 <__alt_data_end+0xf80053e0>
100071b0:	d8802a17 	ldw	r2,168(sp)
100071b4:	103e071e 	bne	r2,zero,100069d4 <__alt_data_end+0xf80069d4>
100071b8:	dc002a15 	stw	r16,168(sp)
100071bc:	003e0506 	br	100069d4 <__alt_data_end+0xf80069d4>
100071c0:	d9002a17 	ldw	r4,168(sp)
100071c4:	20c00044 	addi	r3,r4,1
100071c8:	003e0f06 	br	10006a08 <__alt_data_end+0xf8006a08>
100071cc:	01400184 	movi	r5,6
100071d0:	d9402a15 	stw	r5,168(sp)
100071d4:	003dff06 	br	100069d4 <__alt_data_end+0xf80069d4>
100071d8:	d8802104 	addi	r2,sp,132
100071dc:	d8800315 	stw	r2,12(sp)
100071e0:	d8802504 	addi	r2,sp,148
100071e4:	d8800215 	stw	r2,8(sp)
100071e8:	d8802604 	addi	r2,sp,152
100071ec:	d8800115 	stw	r2,4(sp)
100071f0:	d8802a17 	ldw	r2,168(sp)
100071f4:	d9403617 	ldw	r5,216(sp)
100071f8:	d9002d17 	ldw	r4,180(sp)
100071fc:	d8800015 	stw	r2,0(sp)
10007200:	01c000c4 	movi	r7,3
10007204:	980d883a 	mov	r6,r19
10007208:	da003d15 	stw	r8,244(sp)
1000720c:	00079840 	call	10007984 <_dtoa_r>
10007210:	d8c02a17 	ldw	r3,168(sp)
10007214:	da003d17 	ldw	r8,244(sp)
10007218:	1021883a 	mov	r16,r2
1000721c:	10f9883a 	add	fp,r2,r3
10007220:	81000007 	ldb	r4,0(r16)
10007224:	00800c04 	movi	r2,48
10007228:	20805e26 	beq	r4,r2,100073a4 <___vfprintf_internal_r+0x2150>
1000722c:	d8c02617 	ldw	r3,152(sp)
10007230:	e0f9883a 	add	fp,fp,r3
10007234:	003e0a06 	br	10006a60 <__alt_data_end+0xf8006a60>
10007238:	00c00b44 	movi	r3,45
1000723c:	24e0003c 	xorhi	r19,r4,32768
10007240:	d8c02905 	stb	r3,164(sp)
10007244:	003de906 	br	100069ec <__alt_data_end+0xf80069ec>
10007248:	d8c03217 	ldw	r3,200(sp)
1000724c:	00c07a0e 	bge	zero,r3,10007438 <___vfprintf_internal_r+0x21e4>
10007250:	00800044 	movi	r2,1
10007254:	d9003317 	ldw	r4,204(sp)
10007258:	1105883a 	add	r2,r2,r4
1000725c:	d8802b15 	stw	r2,172(sp)
10007260:	10004e16 	blt	r2,zero,1000739c <___vfprintf_internal_r+0x2148>
10007264:	044019c4 	movi	r17,103
10007268:	003e2106 	br	10006af0 <__alt_data_end+0xf8006af0>
1000726c:	d9002a17 	ldw	r4,168(sp)
10007270:	d8802104 	addi	r2,sp,132
10007274:	d8800315 	stw	r2,12(sp)
10007278:	d9000015 	stw	r4,0(sp)
1000727c:	d8802504 	addi	r2,sp,148
10007280:	d9403617 	ldw	r5,216(sp)
10007284:	d9002d17 	ldw	r4,180(sp)
10007288:	d8800215 	stw	r2,8(sp)
1000728c:	d8802604 	addi	r2,sp,152
10007290:	d8800115 	stw	r2,4(sp)
10007294:	01c000c4 	movi	r7,3
10007298:	980d883a 	mov	r6,r19
1000729c:	da003d15 	stw	r8,244(sp)
100072a0:	00079840 	call	10007984 <_dtoa_r>
100072a4:	d8c02a17 	ldw	r3,168(sp)
100072a8:	da003d17 	ldw	r8,244(sp)
100072ac:	1021883a 	mov	r16,r2
100072b0:	00801184 	movi	r2,70
100072b4:	80f9883a 	add	fp,r16,r3
100072b8:	88bfd926 	beq	r17,r2,10007220 <__alt_data_end+0xf8007220>
100072bc:	003de806 	br	10006a60 <__alt_data_end+0xf8006a60>
100072c0:	d9002a17 	ldw	r4,168(sp)
100072c4:	00c04d0e 	bge	zero,r3,100073fc <___vfprintf_internal_r+0x21a8>
100072c8:	2000441e 	bne	r4,zero,100073dc <___vfprintf_internal_r+0x2188>
100072cc:	9480004c 	andi	r18,r18,1
100072d0:	9000421e 	bne	r18,zero,100073dc <___vfprintf_internal_r+0x2188>
100072d4:	1805883a 	mov	r2,r3
100072d8:	18006f16 	blt	r3,zero,10007498 <___vfprintf_internal_r+0x2244>
100072dc:	d8c03217 	ldw	r3,200(sp)
100072e0:	d8c02b15 	stw	r3,172(sp)
100072e4:	003e0206 	br	10006af0 <__alt_data_end+0xf8006af0>
100072e8:	df0022c4 	addi	fp,sp,139
100072ec:	dc002a15 	stw	r16,168(sp)
100072f0:	4027883a 	mov	r19,r8
100072f4:	e021883a 	mov	r16,fp
100072f8:	b009883a 	mov	r4,r22
100072fc:	01400284 	movi	r5,10
10007300:	0004f240 	call	10004f24 <__modsi3>
10007304:	10800c04 	addi	r2,r2,48
10007308:	843fffc4 	addi	r16,r16,-1
1000730c:	b009883a 	mov	r4,r22
10007310:	01400284 	movi	r5,10
10007314:	80800005 	stb	r2,0(r16)
10007318:	0004ea00 	call	10004ea0 <__divsi3>
1000731c:	102d883a 	mov	r22,r2
10007320:	00800244 	movi	r2,9
10007324:	15bff416 	blt	r2,r22,100072f8 <__alt_data_end+0xf80072f8>
10007328:	9811883a 	mov	r8,r19
1000732c:	b0800c04 	addi	r2,r22,48
10007330:	8027883a 	mov	r19,r16
10007334:	997fffc4 	addi	r5,r19,-1
10007338:	98bfffc5 	stb	r2,-1(r19)
1000733c:	dc002a17 	ldw	r16,168(sp)
10007340:	2f006d2e 	bgeu	r5,fp,100074f8 <___vfprintf_internal_r+0x22a4>
10007344:	d9c02384 	addi	r7,sp,142
10007348:	3ccfc83a 	sub	r7,r7,r19
1000734c:	d9002344 	addi	r4,sp,141
10007350:	e1cf883a 	add	r7,fp,r7
10007354:	00000106 	br	1000735c <___vfprintf_internal_r+0x2108>
10007358:	28800003 	ldbu	r2,0(r5)
1000735c:	20800005 	stb	r2,0(r4)
10007360:	21000044 	addi	r4,r4,1
10007364:	29400044 	addi	r5,r5,1
10007368:	393ffb1e 	bne	r7,r4,10007358 <__alt_data_end+0xf8007358>
1000736c:	d8802304 	addi	r2,sp,140
10007370:	14c5c83a 	sub	r2,r2,r19
10007374:	d8c02344 	addi	r3,sp,141
10007378:	1885883a 	add	r2,r3,r2
1000737c:	003f7006 	br	10007140 <__alt_data_end+0xf8007140>
10007380:	0005883a 	mov	r2,zero
10007384:	003f0f06 	br	10006fc4 <__alt_data_end+0xf8006fc4>
10007388:	d8c03217 	ldw	r3,200(sp)
1000738c:	18c00044 	addi	r3,r3,1
10007390:	d8c02b15 	stw	r3,172(sp)
10007394:	1805883a 	mov	r2,r3
10007398:	183fb20e 	bge	r3,zero,10007264 <__alt_data_end+0xf8007264>
1000739c:	0005883a 	mov	r2,zero
100073a0:	003fb006 	br	10007264 <__alt_data_end+0xf8007264>
100073a4:	d9003617 	ldw	r4,216(sp)
100073a8:	000d883a 	mov	r6,zero
100073ac:	000f883a 	mov	r7,zero
100073b0:	980b883a 	mov	r5,r19
100073b4:	d8c03c15 	stw	r3,240(sp)
100073b8:	da003d15 	stw	r8,244(sp)
100073bc:	00107b80 	call	100107b8 <__eqdf2>
100073c0:	d8c03c17 	ldw	r3,240(sp)
100073c4:	da003d17 	ldw	r8,244(sp)
100073c8:	103f9826 	beq	r2,zero,1000722c <__alt_data_end+0xf800722c>
100073cc:	00800044 	movi	r2,1
100073d0:	10c7c83a 	sub	r3,r2,r3
100073d4:	d8c02615 	stw	r3,152(sp)
100073d8:	003f9506 	br	10007230 <__alt_data_end+0xf8007230>
100073dc:	d9002a17 	ldw	r4,168(sp)
100073e0:	d8c03217 	ldw	r3,200(sp)
100073e4:	20800044 	addi	r2,r4,1
100073e8:	1885883a 	add	r2,r3,r2
100073ec:	d8802b15 	stw	r2,172(sp)
100073f0:	103dbf0e 	bge	r2,zero,10006af0 <__alt_data_end+0xf8006af0>
100073f4:	0005883a 	mov	r2,zero
100073f8:	003dbd06 	br	10006af0 <__alt_data_end+0xf8006af0>
100073fc:	2000201e 	bne	r4,zero,10007480 <___vfprintf_internal_r+0x222c>
10007400:	9480004c 	andi	r18,r18,1
10007404:	90001e1e 	bne	r18,zero,10007480 <___vfprintf_internal_r+0x222c>
10007408:	00800044 	movi	r2,1
1000740c:	d8802b15 	stw	r2,172(sp)
10007410:	003db706 	br	10006af0 <__alt_data_end+0xf8006af0>
10007414:	00800b44 	movi	r2,45
10007418:	05adc83a 	sub	r22,zero,r22
1000741c:	d8802305 	stb	r2,140(sp)
10007420:	003f3f06 	br	10007120 <__alt_data_end+0xf8007120>
10007424:	0005883a 	mov	r2,zero
10007428:	003f5206 	br	10007174 <__alt_data_end+0xf8007174>
1000742c:	90a4703a 	and	r18,r18,r2
10007430:	903f4e26 	beq	r18,zero,1000716c <__alt_data_end+0xf800716c>
10007434:	003f4a06 	br	10007160 <__alt_data_end+0xf8007160>
10007438:	00800084 	movi	r2,2
1000743c:	10c5c83a 	sub	r2,r2,r3
10007440:	003f8406 	br	10007254 <__alt_data_end+0xf8007254>
10007444:	d9402e17 	ldw	r5,184(sp)
10007448:	d9002e17 	ldw	r4,184(sp)
1000744c:	ac400043 	ldbu	r17,1(r21)
10007450:	29400017 	ldw	r5,0(r5)
10007454:	20800104 	addi	r2,r4,4
10007458:	d8802e15 	stw	r2,184(sp)
1000745c:	d9402a15 	stw	r5,168(sp)
10007460:	182b883a 	mov	r21,r3
10007464:	283e7b0e 	bge	r5,zero,10006e54 <__alt_data_end+0xf8006e54>
10007468:	8c403fcc 	andi	r17,r17,255
1000746c:	017fffc4 	movi	r5,-1
10007470:	8c40201c 	xori	r17,r17,128
10007474:	d9402a15 	stw	r5,168(sp)
10007478:	8c7fe004 	addi	r17,r17,-128
1000747c:	0037d706 	br	100053dc <__alt_data_end+0xf80053dc>
10007480:	d8c02a17 	ldw	r3,168(sp)
10007484:	18c00084 	addi	r3,r3,2
10007488:	d8c02b15 	stw	r3,172(sp)
1000748c:	1805883a 	mov	r2,r3
10007490:	183d970e 	bge	r3,zero,10006af0 <__alt_data_end+0xf8006af0>
10007494:	003fd706 	br	100073f4 <__alt_data_end+0xf80073f4>
10007498:	0005883a 	mov	r2,zero
1000749c:	003f8f06 	br	100072dc <__alt_data_end+0xf80072dc>
100074a0:	9080004c 	andi	r2,r18,1
100074a4:	103f821e 	bne	r2,zero,100072b0 <__alt_data_end+0xf80072b0>
100074a8:	d8802117 	ldw	r2,132(sp)
100074ac:	1405c83a 	sub	r2,r2,r16
100074b0:	d8803315 	stw	r2,204(sp)
100074b4:	b47ef426 	beq	r22,r17,10007088 <__alt_data_end+0xf8007088>
100074b8:	dd802617 	ldw	r22,152(sp)
100074bc:	003f1206 	br	10007108 <__alt_data_end+0xf8007108>
100074c0:	d8c02b03 	ldbu	r3,172(sp)
100074c4:	d8c02785 	stb	r3,158(sp)
100074c8:	0038df06 	br	10005848 <__alt_data_end+0xf8005848>
100074cc:	d8c02b03 	ldbu	r3,172(sp)
100074d0:	d8c02785 	stb	r3,158(sp)
100074d4:	0038aa06 	br	10005780 <__alt_data_end+0xf8005780>
100074d8:	d8c02b03 	ldbu	r3,172(sp)
100074dc:	d8c02785 	stb	r3,158(sp)
100074e0:	003a4306 	br	10005df0 <__alt_data_end+0xf8005df0>
100074e4:	d8c02b03 	ldbu	r3,172(sp)
100074e8:	d8c02785 	stb	r3,158(sp)
100074ec:	003af506 	br	100060c4 <__alt_data_end+0xf80060c4>
100074f0:	0005883a 	mov	r2,zero
100074f4:	003d7b06 	br	10006ae4 <__alt_data_end+0xf8006ae4>
100074f8:	d8802344 	addi	r2,sp,141
100074fc:	003f1006 	br	10007140 <__alt_data_end+0xf8007140>
10007500:	d8c02b03 	ldbu	r3,172(sp)
10007504:	d8c02785 	stb	r3,158(sp)
10007508:	0038fd06 	br	10005900 <__alt_data_end+0xf8005900>
1000750c:	d8c02b03 	ldbu	r3,172(sp)
10007510:	d8c02785 	stb	r3,158(sp)
10007514:	003a9706 	br	10005f74 <__alt_data_end+0xf8005f74>
10007518:	d8c02b03 	ldbu	r3,172(sp)
1000751c:	d8c02785 	stb	r3,158(sp)
10007520:	003a1806 	br	10005d84 <__alt_data_end+0xf8005d84>
10007524:	d8c02b03 	ldbu	r3,172(sp)
10007528:	d8c02785 	stb	r3,158(sp)
1000752c:	003abe06 	br	10006028 <__alt_data_end+0xf8006028>

10007530 <__vfprintf_internal>:
10007530:	008400b4 	movhi	r2,4098
10007534:	108a1204 	addi	r2,r2,10312
10007538:	300f883a 	mov	r7,r6
1000753c:	280d883a 	mov	r6,r5
10007540:	200b883a 	mov	r5,r4
10007544:	11000017 	ldw	r4,0(r2)
10007548:	00052541 	jmpi	10005254 <___vfprintf_internal_r>

1000754c <__sbprintf>:
1000754c:	2880030b 	ldhu	r2,12(r5)
10007550:	2ac01917 	ldw	r11,100(r5)
10007554:	2a80038b 	ldhu	r10,14(r5)
10007558:	2a400717 	ldw	r9,28(r5)
1000755c:	2a000917 	ldw	r8,36(r5)
10007560:	defee204 	addi	sp,sp,-1144
10007564:	00c10004 	movi	r3,1024
10007568:	dc011a15 	stw	r16,1128(sp)
1000756c:	10bfff4c 	andi	r2,r2,65533
10007570:	2821883a 	mov	r16,r5
10007574:	d8cb883a 	add	r5,sp,r3
10007578:	dc811c15 	stw	r18,1136(sp)
1000757c:	dc411b15 	stw	r17,1132(sp)
10007580:	dfc11d15 	stw	ra,1140(sp)
10007584:	2025883a 	mov	r18,r4
10007588:	d881030d 	sth	r2,1036(sp)
1000758c:	dac11915 	stw	r11,1124(sp)
10007590:	da81038d 	sth	r10,1038(sp)
10007594:	da410715 	stw	r9,1052(sp)
10007598:	da010915 	stw	r8,1060(sp)
1000759c:	dec10015 	stw	sp,1024(sp)
100075a0:	dec10415 	stw	sp,1040(sp)
100075a4:	d8c10215 	stw	r3,1032(sp)
100075a8:	d8c10515 	stw	r3,1044(sp)
100075ac:	d8010615 	stw	zero,1048(sp)
100075b0:	00052540 	call	10005254 <___vfprintf_internal_r>
100075b4:	1023883a 	mov	r17,r2
100075b8:	10000416 	blt	r2,zero,100075cc <__sbprintf+0x80>
100075bc:	d9410004 	addi	r5,sp,1024
100075c0:	9009883a 	mov	r4,r18
100075c4:	00092280 	call	10009228 <_fflush_r>
100075c8:	10000d1e 	bne	r2,zero,10007600 <__sbprintf+0xb4>
100075cc:	d881030b 	ldhu	r2,1036(sp)
100075d0:	1080100c 	andi	r2,r2,64
100075d4:	10000326 	beq	r2,zero,100075e4 <__sbprintf+0x98>
100075d8:	8080030b 	ldhu	r2,12(r16)
100075dc:	10801014 	ori	r2,r2,64
100075e0:	8080030d 	sth	r2,12(r16)
100075e4:	8805883a 	mov	r2,r17
100075e8:	dfc11d17 	ldw	ra,1140(sp)
100075ec:	dc811c17 	ldw	r18,1136(sp)
100075f0:	dc411b17 	ldw	r17,1132(sp)
100075f4:	dc011a17 	ldw	r16,1128(sp)
100075f8:	dec11e04 	addi	sp,sp,1144
100075fc:	f800283a 	ret
10007600:	047fffc4 	movi	r17,-1
10007604:	003ff106 	br	100075cc <__alt_data_end+0xf80075cc>

10007608 <__swsetup_r>:
10007608:	008400b4 	movhi	r2,4098
1000760c:	defffd04 	addi	sp,sp,-12
10007610:	108a1204 	addi	r2,r2,10312
10007614:	dc400115 	stw	r17,4(sp)
10007618:	2023883a 	mov	r17,r4
1000761c:	11000017 	ldw	r4,0(r2)
10007620:	dc000015 	stw	r16,0(sp)
10007624:	dfc00215 	stw	ra,8(sp)
10007628:	2821883a 	mov	r16,r5
1000762c:	20000226 	beq	r4,zero,10007638 <__swsetup_r+0x30>
10007630:	20800e17 	ldw	r2,56(r4)
10007634:	10003126 	beq	r2,zero,100076fc <__swsetup_r+0xf4>
10007638:	8080030b 	ldhu	r2,12(r16)
1000763c:	10c0020c 	andi	r3,r2,8
10007640:	1009883a 	mov	r4,r2
10007644:	18000f26 	beq	r3,zero,10007684 <__swsetup_r+0x7c>
10007648:	80c00417 	ldw	r3,16(r16)
1000764c:	18001526 	beq	r3,zero,100076a4 <__swsetup_r+0x9c>
10007650:	1100004c 	andi	r4,r2,1
10007654:	20001c1e 	bne	r4,zero,100076c8 <__swsetup_r+0xc0>
10007658:	1080008c 	andi	r2,r2,2
1000765c:	1000291e 	bne	r2,zero,10007704 <__swsetup_r+0xfc>
10007660:	80800517 	ldw	r2,20(r16)
10007664:	80800215 	stw	r2,8(r16)
10007668:	18001c26 	beq	r3,zero,100076dc <__swsetup_r+0xd4>
1000766c:	0005883a 	mov	r2,zero
10007670:	dfc00217 	ldw	ra,8(sp)
10007674:	dc400117 	ldw	r17,4(sp)
10007678:	dc000017 	ldw	r16,0(sp)
1000767c:	dec00304 	addi	sp,sp,12
10007680:	f800283a 	ret
10007684:	2080040c 	andi	r2,r4,16
10007688:	10002e26 	beq	r2,zero,10007744 <__swsetup_r+0x13c>
1000768c:	2080010c 	andi	r2,r4,4
10007690:	10001e1e 	bne	r2,zero,1000770c <__swsetup_r+0x104>
10007694:	80c00417 	ldw	r3,16(r16)
10007698:	20800214 	ori	r2,r4,8
1000769c:	8080030d 	sth	r2,12(r16)
100076a0:	183feb1e 	bne	r3,zero,10007650 <__alt_data_end+0xf8007650>
100076a4:	1100a00c 	andi	r4,r2,640
100076a8:	01408004 	movi	r5,512
100076ac:	217fe826 	beq	r4,r5,10007650 <__alt_data_end+0xf8007650>
100076b0:	800b883a 	mov	r5,r16
100076b4:	8809883a 	mov	r4,r17
100076b8:	000a1c40 	call	1000a1c4 <__smakebuf_r>
100076bc:	8080030b 	ldhu	r2,12(r16)
100076c0:	80c00417 	ldw	r3,16(r16)
100076c4:	003fe206 	br	10007650 <__alt_data_end+0xf8007650>
100076c8:	80800517 	ldw	r2,20(r16)
100076cc:	80000215 	stw	zero,8(r16)
100076d0:	0085c83a 	sub	r2,zero,r2
100076d4:	80800615 	stw	r2,24(r16)
100076d8:	183fe41e 	bne	r3,zero,1000766c <__alt_data_end+0xf800766c>
100076dc:	80c0030b 	ldhu	r3,12(r16)
100076e0:	0005883a 	mov	r2,zero
100076e4:	1900200c 	andi	r4,r3,128
100076e8:	203fe126 	beq	r4,zero,10007670 <__alt_data_end+0xf8007670>
100076ec:	18c01014 	ori	r3,r3,64
100076f0:	80c0030d 	sth	r3,12(r16)
100076f4:	00bfffc4 	movi	r2,-1
100076f8:	003fdd06 	br	10007670 <__alt_data_end+0xf8007670>
100076fc:	00096140 	call	10009614 <__sinit>
10007700:	003fcd06 	br	10007638 <__alt_data_end+0xf8007638>
10007704:	0005883a 	mov	r2,zero
10007708:	003fd606 	br	10007664 <__alt_data_end+0xf8007664>
1000770c:	81400c17 	ldw	r5,48(r16)
10007710:	28000626 	beq	r5,zero,1000772c <__swsetup_r+0x124>
10007714:	80801004 	addi	r2,r16,64
10007718:	28800326 	beq	r5,r2,10007728 <__swsetup_r+0x120>
1000771c:	8809883a 	mov	r4,r17
10007720:	00097880 	call	10009788 <_free_r>
10007724:	8100030b 	ldhu	r4,12(r16)
10007728:	80000c15 	stw	zero,48(r16)
1000772c:	80c00417 	ldw	r3,16(r16)
10007730:	00bff6c4 	movi	r2,-37
10007734:	1108703a 	and	r4,r2,r4
10007738:	80000115 	stw	zero,4(r16)
1000773c:	80c00015 	stw	r3,0(r16)
10007740:	003fd506 	br	10007698 <__alt_data_end+0xf8007698>
10007744:	00800244 	movi	r2,9
10007748:	88800015 	stw	r2,0(r17)
1000774c:	20801014 	ori	r2,r4,64
10007750:	8080030d 	sth	r2,12(r16)
10007754:	00bfffc4 	movi	r2,-1
10007758:	003fc506 	br	10007670 <__alt_data_end+0xf8007670>

1000775c <quorem>:
1000775c:	defff204 	addi	sp,sp,-56
10007760:	ddc00b15 	stw	r23,44(sp)
10007764:	20800417 	ldw	r2,16(r4)
10007768:	2dc00417 	ldw	r23,16(r5)
1000776c:	dfc00d15 	stw	ra,52(sp)
10007770:	df000c15 	stw	fp,48(sp)
10007774:	dd800a15 	stw	r22,40(sp)
10007778:	dd400915 	stw	r21,36(sp)
1000777c:	dd000815 	stw	r20,32(sp)
10007780:	dcc00715 	stw	r19,28(sp)
10007784:	dc800615 	stw	r18,24(sp)
10007788:	dc400515 	stw	r17,20(sp)
1000778c:	dc000415 	stw	r16,16(sp)
10007790:	15c07a16 	blt	r2,r23,1000797c <quorem+0x220>
10007794:	bdffffc4 	addi	r23,r23,-1
10007798:	bde9883a 	add	r20,r23,r23
1000779c:	28c00504 	addi	r3,r5,20
100077a0:	a529883a 	add	r20,r20,r20
100077a4:	1d39883a 	add	fp,r3,r20
100077a8:	24c00504 	addi	r19,r4,20
100077ac:	d9400215 	stw	r5,8(sp)
100077b0:	9d29883a 	add	r20,r19,r20
100077b4:	e1400017 	ldw	r5,0(fp)
100077b8:	d9000015 	stw	r4,0(sp)
100077bc:	a1000017 	ldw	r4,0(r20)
100077c0:	29400044 	addi	r5,r5,1
100077c4:	d8c00115 	stw	r3,4(sp)
100077c8:	dd000315 	stw	r20,12(sp)
100077cc:	0004f980 	call	10004f98 <__udivsi3>
100077d0:	1025883a 	mov	r18,r2
100077d4:	10003026 	beq	r2,zero,10007898 <quorem+0x13c>
100077d8:	dc400117 	ldw	r17,4(sp)
100077dc:	9829883a 	mov	r20,r19
100077e0:	002d883a 	mov	r22,zero
100077e4:	0021883a 	mov	r16,zero
100077e8:	8d400017 	ldw	r21,0(r17)
100077ec:	900b883a 	mov	r5,r18
100077f0:	8c400104 	addi	r17,r17,4
100077f4:	a93fffcc 	andi	r4,r21,65535
100077f8:	00050540 	call	10005054 <__mulsi3>
100077fc:	a808d43a 	srli	r4,r21,16
10007800:	900b883a 	mov	r5,r18
10007804:	15ad883a 	add	r22,r2,r22
10007808:	00050540 	call	10005054 <__mulsi3>
1000780c:	a1000017 	ldw	r4,0(r20)
10007810:	b00cd43a 	srli	r6,r22,16
10007814:	b0ffffcc 	andi	r3,r22,65535
10007818:	217fffcc 	andi	r5,r4,65535
1000781c:	2c21883a 	add	r16,r5,r16
10007820:	80c7c83a 	sub	r3,r16,r3
10007824:	2008d43a 	srli	r4,r4,16
10007828:	1185883a 	add	r2,r2,r6
1000782c:	1821d43a 	srai	r16,r3,16
10007830:	117fffcc 	andi	r5,r2,65535
10007834:	2149c83a 	sub	r4,r4,r5
10007838:	2421883a 	add	r16,r4,r16
1000783c:	8008943a 	slli	r4,r16,16
10007840:	18ffffcc 	andi	r3,r3,65535
10007844:	102cd43a 	srli	r22,r2,16
10007848:	20c8b03a 	or	r4,r4,r3
1000784c:	a1000015 	stw	r4,0(r20)
10007850:	8021d43a 	srai	r16,r16,16
10007854:	a5000104 	addi	r20,r20,4
10007858:	e47fe32e 	bgeu	fp,r17,100077e8 <__alt_data_end+0xf80077e8>
1000785c:	d8c00317 	ldw	r3,12(sp)
10007860:	18800017 	ldw	r2,0(r3)
10007864:	10000c1e 	bne	r2,zero,10007898 <quorem+0x13c>
10007868:	18bfff04 	addi	r2,r3,-4
1000786c:	9880082e 	bgeu	r19,r2,10007890 <quorem+0x134>
10007870:	18ffff17 	ldw	r3,-4(r3)
10007874:	18000326 	beq	r3,zero,10007884 <quorem+0x128>
10007878:	00000506 	br	10007890 <quorem+0x134>
1000787c:	10c00017 	ldw	r3,0(r2)
10007880:	1800031e 	bne	r3,zero,10007890 <quorem+0x134>
10007884:	10bfff04 	addi	r2,r2,-4
10007888:	bdffffc4 	addi	r23,r23,-1
1000788c:	98bffb36 	bltu	r19,r2,1000787c <__alt_data_end+0xf800787c>
10007890:	d8c00017 	ldw	r3,0(sp)
10007894:	1dc00415 	stw	r23,16(r3)
10007898:	d9400217 	ldw	r5,8(sp)
1000789c:	d9000017 	ldw	r4,0(sp)
100078a0:	000b9c00 	call	1000b9c0 <__mcmp>
100078a4:	10002816 	blt	r2,zero,10007948 <quorem+0x1ec>
100078a8:	dc400117 	ldw	r17,4(sp)
100078ac:	94800044 	addi	r18,r18,1
100078b0:	980d883a 	mov	r6,r19
100078b4:	0007883a 	mov	r3,zero
100078b8:	31000017 	ldw	r4,0(r6)
100078bc:	89400017 	ldw	r5,0(r17)
100078c0:	31800104 	addi	r6,r6,4
100078c4:	20bfffcc 	andi	r2,r4,65535
100078c8:	10c7883a 	add	r3,r2,r3
100078cc:	28bfffcc 	andi	r2,r5,65535
100078d0:	1885c83a 	sub	r2,r3,r2
100078d4:	280ad43a 	srli	r5,r5,16
100078d8:	2008d43a 	srli	r4,r4,16
100078dc:	1007d43a 	srai	r3,r2,16
100078e0:	10bfffcc 	andi	r2,r2,65535
100078e4:	2149c83a 	sub	r4,r4,r5
100078e8:	20c9883a 	add	r4,r4,r3
100078ec:	200a943a 	slli	r5,r4,16
100078f0:	8c400104 	addi	r17,r17,4
100078f4:	2007d43a 	srai	r3,r4,16
100078f8:	2884b03a 	or	r2,r5,r2
100078fc:	30bfff15 	stw	r2,-4(r6)
10007900:	e47fed2e 	bgeu	fp,r17,100078b8 <__alt_data_end+0xf80078b8>
10007904:	bdc5883a 	add	r2,r23,r23
10007908:	1085883a 	add	r2,r2,r2
1000790c:	9887883a 	add	r3,r19,r2
10007910:	18800017 	ldw	r2,0(r3)
10007914:	10000c1e 	bne	r2,zero,10007948 <quorem+0x1ec>
10007918:	18bfff04 	addi	r2,r3,-4
1000791c:	9880082e 	bgeu	r19,r2,10007940 <quorem+0x1e4>
10007920:	18ffff17 	ldw	r3,-4(r3)
10007924:	18000326 	beq	r3,zero,10007934 <quorem+0x1d8>
10007928:	00000506 	br	10007940 <quorem+0x1e4>
1000792c:	10c00017 	ldw	r3,0(r2)
10007930:	1800031e 	bne	r3,zero,10007940 <quorem+0x1e4>
10007934:	10bfff04 	addi	r2,r2,-4
10007938:	bdffffc4 	addi	r23,r23,-1
1000793c:	98bffb36 	bltu	r19,r2,1000792c <__alt_data_end+0xf800792c>
10007940:	d8c00017 	ldw	r3,0(sp)
10007944:	1dc00415 	stw	r23,16(r3)
10007948:	9005883a 	mov	r2,r18
1000794c:	dfc00d17 	ldw	ra,52(sp)
10007950:	df000c17 	ldw	fp,48(sp)
10007954:	ddc00b17 	ldw	r23,44(sp)
10007958:	dd800a17 	ldw	r22,40(sp)
1000795c:	dd400917 	ldw	r21,36(sp)
10007960:	dd000817 	ldw	r20,32(sp)
10007964:	dcc00717 	ldw	r19,28(sp)
10007968:	dc800617 	ldw	r18,24(sp)
1000796c:	dc400517 	ldw	r17,20(sp)
10007970:	dc000417 	ldw	r16,16(sp)
10007974:	dec00e04 	addi	sp,sp,56
10007978:	f800283a 	ret
1000797c:	0005883a 	mov	r2,zero
10007980:	003ff206 	br	1000794c <__alt_data_end+0xf800794c>

10007984 <_dtoa_r>:
10007984:	20801017 	ldw	r2,64(r4)
10007988:	deffde04 	addi	sp,sp,-136
1000798c:	df002015 	stw	fp,128(sp)
10007990:	dcc01b15 	stw	r19,108(sp)
10007994:	dc801a15 	stw	r18,104(sp)
10007998:	dc401915 	stw	r17,100(sp)
1000799c:	dc001815 	stw	r16,96(sp)
100079a0:	dfc02115 	stw	ra,132(sp)
100079a4:	ddc01f15 	stw	r23,124(sp)
100079a8:	dd801e15 	stw	r22,120(sp)
100079ac:	dd401d15 	stw	r21,116(sp)
100079b0:	dd001c15 	stw	r20,112(sp)
100079b4:	d9c00315 	stw	r7,12(sp)
100079b8:	2039883a 	mov	fp,r4
100079bc:	3023883a 	mov	r17,r6
100079c0:	2825883a 	mov	r18,r5
100079c4:	dc002417 	ldw	r16,144(sp)
100079c8:	3027883a 	mov	r19,r6
100079cc:	10000826 	beq	r2,zero,100079f0 <_dtoa_r+0x6c>
100079d0:	21801117 	ldw	r6,68(r4)
100079d4:	00c00044 	movi	r3,1
100079d8:	100b883a 	mov	r5,r2
100079dc:	1986983a 	sll	r3,r3,r6
100079e0:	11800115 	stw	r6,4(r2)
100079e4:	10c00215 	stw	r3,8(r2)
100079e8:	000b0e40 	call	1000b0e4 <_Bfree>
100079ec:	e0001015 	stw	zero,64(fp)
100079f0:	88002e16 	blt	r17,zero,10007aac <_dtoa_r+0x128>
100079f4:	80000015 	stw	zero,0(r16)
100079f8:	889ffc2c 	andhi	r2,r17,32752
100079fc:	00dffc34 	movhi	r3,32752
10007a00:	10c01c26 	beq	r2,r3,10007a74 <_dtoa_r+0xf0>
10007a04:	000d883a 	mov	r6,zero
10007a08:	000f883a 	mov	r7,zero
10007a0c:	9009883a 	mov	r4,r18
10007a10:	980b883a 	mov	r5,r19
10007a14:	00107b80 	call	100107b8 <__eqdf2>
10007a18:	10002b1e 	bne	r2,zero,10007ac8 <_dtoa_r+0x144>
10007a1c:	d9c02317 	ldw	r7,140(sp)
10007a20:	00800044 	movi	r2,1
10007a24:	38800015 	stw	r2,0(r7)
10007a28:	d8802517 	ldw	r2,148(sp)
10007a2c:	10019e26 	beq	r2,zero,100080a8 <_dtoa_r+0x724>
10007a30:	d8c02517 	ldw	r3,148(sp)
10007a34:	00840074 	movhi	r2,4097
10007a38:	10939444 	addi	r2,r2,20049
10007a3c:	18800015 	stw	r2,0(r3)
10007a40:	10bfffc4 	addi	r2,r2,-1
10007a44:	dfc02117 	ldw	ra,132(sp)
10007a48:	df002017 	ldw	fp,128(sp)
10007a4c:	ddc01f17 	ldw	r23,124(sp)
10007a50:	dd801e17 	ldw	r22,120(sp)
10007a54:	dd401d17 	ldw	r21,116(sp)
10007a58:	dd001c17 	ldw	r20,112(sp)
10007a5c:	dcc01b17 	ldw	r19,108(sp)
10007a60:	dc801a17 	ldw	r18,104(sp)
10007a64:	dc401917 	ldw	r17,100(sp)
10007a68:	dc001817 	ldw	r16,96(sp)
10007a6c:	dec02204 	addi	sp,sp,136
10007a70:	f800283a 	ret
10007a74:	d8c02317 	ldw	r3,140(sp)
10007a78:	0089c3c4 	movi	r2,9999
10007a7c:	18800015 	stw	r2,0(r3)
10007a80:	90017726 	beq	r18,zero,10008060 <_dtoa_r+0x6dc>
10007a84:	00840074 	movhi	r2,4097
10007a88:	1093a004 	addi	r2,r2,20096
10007a8c:	d9002517 	ldw	r4,148(sp)
10007a90:	203fec26 	beq	r4,zero,10007a44 <__alt_data_end+0xf8007a44>
10007a94:	10c000c7 	ldb	r3,3(r2)
10007a98:	1801781e 	bne	r3,zero,1000807c <_dtoa_r+0x6f8>
10007a9c:	10c000c4 	addi	r3,r2,3
10007aa0:	d9802517 	ldw	r6,148(sp)
10007aa4:	30c00015 	stw	r3,0(r6)
10007aa8:	003fe606 	br	10007a44 <__alt_data_end+0xf8007a44>
10007aac:	04e00034 	movhi	r19,32768
10007ab0:	9cffffc4 	addi	r19,r19,-1
10007ab4:	00800044 	movi	r2,1
10007ab8:	8ce6703a 	and	r19,r17,r19
10007abc:	80800015 	stw	r2,0(r16)
10007ac0:	9823883a 	mov	r17,r19
10007ac4:	003fcc06 	br	100079f8 <__alt_data_end+0xf80079f8>
10007ac8:	d8800204 	addi	r2,sp,8
10007acc:	d8800015 	stw	r2,0(sp)
10007ad0:	d9c00104 	addi	r7,sp,4
10007ad4:	900b883a 	mov	r5,r18
10007ad8:	980d883a 	mov	r6,r19
10007adc:	e009883a 	mov	r4,fp
10007ae0:	8820d53a 	srli	r16,r17,20
10007ae4:	000bd8c0 	call	1000bd8c <__d2b>
10007ae8:	d8800915 	stw	r2,36(sp)
10007aec:	8001651e 	bne	r16,zero,10008084 <_dtoa_r+0x700>
10007af0:	dd800217 	ldw	r22,8(sp)
10007af4:	dc000117 	ldw	r16,4(sp)
10007af8:	00800804 	movi	r2,32
10007afc:	b421883a 	add	r16,r22,r16
10007b00:	80c10c84 	addi	r3,r16,1074
10007b04:	10c2d10e 	bge	r2,r3,1000864c <_dtoa_r+0xcc8>
10007b08:	00801004 	movi	r2,64
10007b0c:	81010484 	addi	r4,r16,1042
10007b10:	10c7c83a 	sub	r3,r2,r3
10007b14:	9108d83a 	srl	r4,r18,r4
10007b18:	88e2983a 	sll	r17,r17,r3
10007b1c:	2448b03a 	or	r4,r4,r17
10007b20:	0011cd40 	call	10011cd4 <__floatunsidf>
10007b24:	017f8434 	movhi	r5,65040
10007b28:	01800044 	movi	r6,1
10007b2c:	1009883a 	mov	r4,r2
10007b30:	194b883a 	add	r5,r3,r5
10007b34:	843fffc4 	addi	r16,r16,-1
10007b38:	d9801115 	stw	r6,68(sp)
10007b3c:	000d883a 	mov	r6,zero
10007b40:	01cffe34 	movhi	r7,16376
10007b44:	001127c0 	call	1001127c <__subdf3>
10007b48:	0198dbf4 	movhi	r6,25455
10007b4c:	01cff4f4 	movhi	r7,16339
10007b50:	3190d844 	addi	r6,r6,17249
10007b54:	39e1e9c4 	addi	r7,r7,-30809
10007b58:	1009883a 	mov	r4,r2
10007b5c:	180b883a 	mov	r5,r3
10007b60:	0010a100 	call	10010a10 <__muldf3>
10007b64:	01a2d874 	movhi	r6,35681
10007b68:	01cff1f4 	movhi	r7,16327
10007b6c:	31b22cc4 	addi	r6,r6,-14157
10007b70:	39e28a04 	addi	r7,r7,-30168
10007b74:	180b883a 	mov	r5,r3
10007b78:	1009883a 	mov	r4,r2
10007b7c:	000f53c0 	call	1000f53c <__adddf3>
10007b80:	8009883a 	mov	r4,r16
10007b84:	1029883a 	mov	r20,r2
10007b88:	1823883a 	mov	r17,r3
10007b8c:	0011bf80 	call	10011bf8 <__floatsidf>
10007b90:	019427f4 	movhi	r6,20639
10007b94:	01cff4f4 	movhi	r7,16339
10007b98:	319e7ec4 	addi	r6,r6,31227
10007b9c:	39d104c4 	addi	r7,r7,17427
10007ba0:	1009883a 	mov	r4,r2
10007ba4:	180b883a 	mov	r5,r3
10007ba8:	0010a100 	call	10010a10 <__muldf3>
10007bac:	100d883a 	mov	r6,r2
10007bb0:	180f883a 	mov	r7,r3
10007bb4:	a009883a 	mov	r4,r20
10007bb8:	880b883a 	mov	r5,r17
10007bbc:	000f53c0 	call	1000f53c <__adddf3>
10007bc0:	1009883a 	mov	r4,r2
10007bc4:	180b883a 	mov	r5,r3
10007bc8:	1029883a 	mov	r20,r2
10007bcc:	1823883a 	mov	r17,r3
10007bd0:	0011b780 	call	10011b78 <__fixdfsi>
10007bd4:	000d883a 	mov	r6,zero
10007bd8:	000f883a 	mov	r7,zero
10007bdc:	a009883a 	mov	r4,r20
10007be0:	880b883a 	mov	r5,r17
10007be4:	d8800515 	stw	r2,20(sp)
10007be8:	001091c0 	call	1001091c <__ledf2>
10007bec:	10028716 	blt	r2,zero,1000860c <_dtoa_r+0xc88>
10007bf0:	d8c00517 	ldw	r3,20(sp)
10007bf4:	00800584 	movi	r2,22
10007bf8:	10c27536 	bltu	r2,r3,100085d0 <_dtoa_r+0xc4c>
10007bfc:	180490fa 	slli	r2,r3,3
10007c00:	00c40074 	movhi	r3,4097
10007c04:	18d3bc04 	addi	r3,r3,20208
10007c08:	1885883a 	add	r2,r3,r2
10007c0c:	11000017 	ldw	r4,0(r2)
10007c10:	11400117 	ldw	r5,4(r2)
10007c14:	900d883a 	mov	r6,r18
10007c18:	980f883a 	mov	r7,r19
10007c1c:	00108400 	call	10010840 <__gedf2>
10007c20:	00828d0e 	bge	zero,r2,10008658 <_dtoa_r+0xcd4>
10007c24:	d9000517 	ldw	r4,20(sp)
10007c28:	d8000e15 	stw	zero,56(sp)
10007c2c:	213fffc4 	addi	r4,r4,-1
10007c30:	d9000515 	stw	r4,20(sp)
10007c34:	b42dc83a 	sub	r22,r22,r16
10007c38:	b5bfffc4 	addi	r22,r22,-1
10007c3c:	b0026f16 	blt	r22,zero,100085fc <_dtoa_r+0xc78>
10007c40:	d8000815 	stw	zero,32(sp)
10007c44:	d9c00517 	ldw	r7,20(sp)
10007c48:	38026416 	blt	r7,zero,100085dc <_dtoa_r+0xc58>
10007c4c:	b1ed883a 	add	r22,r22,r7
10007c50:	d9c00d15 	stw	r7,52(sp)
10007c54:	d8000a15 	stw	zero,40(sp)
10007c58:	d9800317 	ldw	r6,12(sp)
10007c5c:	00800244 	movi	r2,9
10007c60:	11811436 	bltu	r2,r6,100080b4 <_dtoa_r+0x730>
10007c64:	00800144 	movi	r2,5
10007c68:	1184e10e 	bge	r2,r6,10008ff0 <_dtoa_r+0x166c>
10007c6c:	31bfff04 	addi	r6,r6,-4
10007c70:	d9800315 	stw	r6,12(sp)
10007c74:	0023883a 	mov	r17,zero
10007c78:	d9800317 	ldw	r6,12(sp)
10007c7c:	008000c4 	movi	r2,3
10007c80:	30836726 	beq	r6,r2,10008a20 <_dtoa_r+0x109c>
10007c84:	1183410e 	bge	r2,r6,1000898c <_dtoa_r+0x1008>
10007c88:	d9c00317 	ldw	r7,12(sp)
10007c8c:	00800104 	movi	r2,4
10007c90:	38827c26 	beq	r7,r2,10008684 <_dtoa_r+0xd00>
10007c94:	00800144 	movi	r2,5
10007c98:	3884c41e 	bne	r7,r2,10008fac <_dtoa_r+0x1628>
10007c9c:	00800044 	movi	r2,1
10007ca0:	d8800b15 	stw	r2,44(sp)
10007ca4:	d8c00517 	ldw	r3,20(sp)
10007ca8:	d9002217 	ldw	r4,136(sp)
10007cac:	1907883a 	add	r3,r3,r4
10007cb0:	19800044 	addi	r6,r3,1
10007cb4:	d8c00c15 	stw	r3,48(sp)
10007cb8:	d9800615 	stw	r6,24(sp)
10007cbc:	0183a40e 	bge	zero,r6,10008b50 <_dtoa_r+0x11cc>
10007cc0:	d9800617 	ldw	r6,24(sp)
10007cc4:	3021883a 	mov	r16,r6
10007cc8:	e0001115 	stw	zero,68(fp)
10007ccc:	008005c4 	movi	r2,23
10007cd0:	1184c92e 	bgeu	r2,r6,10008ff8 <_dtoa_r+0x1674>
10007cd4:	00c00044 	movi	r3,1
10007cd8:	00800104 	movi	r2,4
10007cdc:	1085883a 	add	r2,r2,r2
10007ce0:	11000504 	addi	r4,r2,20
10007ce4:	180b883a 	mov	r5,r3
10007ce8:	18c00044 	addi	r3,r3,1
10007cec:	313ffb2e 	bgeu	r6,r4,10007cdc <__alt_data_end+0xf8007cdc>
10007cf0:	e1401115 	stw	r5,68(fp)
10007cf4:	e009883a 	mov	r4,fp
10007cf8:	000b03c0 	call	1000b03c <_Balloc>
10007cfc:	d8800715 	stw	r2,28(sp)
10007d00:	e0801015 	stw	r2,64(fp)
10007d04:	00800384 	movi	r2,14
10007d08:	1400f736 	bltu	r2,r16,100080e8 <_dtoa_r+0x764>
10007d0c:	8800f626 	beq	r17,zero,100080e8 <_dtoa_r+0x764>
10007d10:	d9c00517 	ldw	r7,20(sp)
10007d14:	01c39a0e 	bge	zero,r7,10008b80 <_dtoa_r+0x11fc>
10007d18:	388003cc 	andi	r2,r7,15
10007d1c:	100490fa 	slli	r2,r2,3
10007d20:	382bd13a 	srai	r21,r7,4
10007d24:	00c40074 	movhi	r3,4097
10007d28:	18d3bc04 	addi	r3,r3,20208
10007d2c:	1885883a 	add	r2,r3,r2
10007d30:	a8c0040c 	andi	r3,r21,16
10007d34:	12400017 	ldw	r9,0(r2)
10007d38:	12000117 	ldw	r8,4(r2)
10007d3c:	18037926 	beq	r3,zero,10008b24 <_dtoa_r+0x11a0>
10007d40:	00840074 	movhi	r2,4097
10007d44:	1093b204 	addi	r2,r2,20168
10007d48:	11800817 	ldw	r6,32(r2)
10007d4c:	11c00917 	ldw	r7,36(r2)
10007d50:	9009883a 	mov	r4,r18
10007d54:	980b883a 	mov	r5,r19
10007d58:	da001715 	stw	r8,92(sp)
10007d5c:	da401615 	stw	r9,88(sp)
10007d60:	000fde80 	call	1000fde8 <__divdf3>
10007d64:	da001717 	ldw	r8,92(sp)
10007d68:	da401617 	ldw	r9,88(sp)
10007d6c:	ad4003cc 	andi	r21,r21,15
10007d70:	040000c4 	movi	r16,3
10007d74:	1023883a 	mov	r17,r2
10007d78:	1829883a 	mov	r20,r3
10007d7c:	a8001126 	beq	r21,zero,10007dc4 <_dtoa_r+0x440>
10007d80:	05c40074 	movhi	r23,4097
10007d84:	bdd3b204 	addi	r23,r23,20168
10007d88:	4805883a 	mov	r2,r9
10007d8c:	4007883a 	mov	r3,r8
10007d90:	a980004c 	andi	r6,r21,1
10007d94:	1009883a 	mov	r4,r2
10007d98:	a82bd07a 	srai	r21,r21,1
10007d9c:	180b883a 	mov	r5,r3
10007da0:	30000426 	beq	r6,zero,10007db4 <_dtoa_r+0x430>
10007da4:	b9800017 	ldw	r6,0(r23)
10007da8:	b9c00117 	ldw	r7,4(r23)
10007dac:	84000044 	addi	r16,r16,1
10007db0:	0010a100 	call	10010a10 <__muldf3>
10007db4:	bdc00204 	addi	r23,r23,8
10007db8:	a83ff51e 	bne	r21,zero,10007d90 <__alt_data_end+0xf8007d90>
10007dbc:	1013883a 	mov	r9,r2
10007dc0:	1811883a 	mov	r8,r3
10007dc4:	480d883a 	mov	r6,r9
10007dc8:	400f883a 	mov	r7,r8
10007dcc:	8809883a 	mov	r4,r17
10007dd0:	a00b883a 	mov	r5,r20
10007dd4:	000fde80 	call	1000fde8 <__divdf3>
10007dd8:	d8800f15 	stw	r2,60(sp)
10007ddc:	d8c01015 	stw	r3,64(sp)
10007de0:	d8c00e17 	ldw	r3,56(sp)
10007de4:	18000626 	beq	r3,zero,10007e00 <_dtoa_r+0x47c>
10007de8:	d9000f17 	ldw	r4,60(sp)
10007dec:	d9401017 	ldw	r5,64(sp)
10007df0:	000d883a 	mov	r6,zero
10007df4:	01cffc34 	movhi	r7,16368
10007df8:	001091c0 	call	1001091c <__ledf2>
10007dfc:	10040b16 	blt	r2,zero,10008e2c <_dtoa_r+0x14a8>
10007e00:	8009883a 	mov	r4,r16
10007e04:	0011bf80 	call	10011bf8 <__floatsidf>
10007e08:	d9800f17 	ldw	r6,60(sp)
10007e0c:	d9c01017 	ldw	r7,64(sp)
10007e10:	1009883a 	mov	r4,r2
10007e14:	180b883a 	mov	r5,r3
10007e18:	0010a100 	call	10010a10 <__muldf3>
10007e1c:	000d883a 	mov	r6,zero
10007e20:	01d00734 	movhi	r7,16412
10007e24:	1009883a 	mov	r4,r2
10007e28:	180b883a 	mov	r5,r3
10007e2c:	000f53c0 	call	1000f53c <__adddf3>
10007e30:	1021883a 	mov	r16,r2
10007e34:	d8800617 	ldw	r2,24(sp)
10007e38:	047f3034 	movhi	r17,64704
10007e3c:	1c63883a 	add	r17,r3,r17
10007e40:	10031826 	beq	r2,zero,10008aa4 <_dtoa_r+0x1120>
10007e44:	d8c00517 	ldw	r3,20(sp)
10007e48:	db000617 	ldw	r12,24(sp)
10007e4c:	d8c01315 	stw	r3,76(sp)
10007e50:	d9000b17 	ldw	r4,44(sp)
10007e54:	20038f26 	beq	r4,zero,10008c94 <_dtoa_r+0x1310>
10007e58:	60bfffc4 	addi	r2,r12,-1
10007e5c:	100490fa 	slli	r2,r2,3
10007e60:	00c40074 	movhi	r3,4097
10007e64:	18d3bc04 	addi	r3,r3,20208
10007e68:	1885883a 	add	r2,r3,r2
10007e6c:	11800017 	ldw	r6,0(r2)
10007e70:	11c00117 	ldw	r7,4(r2)
10007e74:	d8800717 	ldw	r2,28(sp)
10007e78:	0009883a 	mov	r4,zero
10007e7c:	014ff834 	movhi	r5,16352
10007e80:	db001615 	stw	r12,88(sp)
10007e84:	15c00044 	addi	r23,r2,1
10007e88:	000fde80 	call	1000fde8 <__divdf3>
10007e8c:	800d883a 	mov	r6,r16
10007e90:	880f883a 	mov	r7,r17
10007e94:	1009883a 	mov	r4,r2
10007e98:	180b883a 	mov	r5,r3
10007e9c:	001127c0 	call	1001127c <__subdf3>
10007ea0:	d9401017 	ldw	r5,64(sp)
10007ea4:	d9000f17 	ldw	r4,60(sp)
10007ea8:	102b883a 	mov	r21,r2
10007eac:	d8c01215 	stw	r3,72(sp)
10007eb0:	0011b780 	call	10011b78 <__fixdfsi>
10007eb4:	1009883a 	mov	r4,r2
10007eb8:	1029883a 	mov	r20,r2
10007ebc:	0011bf80 	call	10011bf8 <__floatsidf>
10007ec0:	d9000f17 	ldw	r4,60(sp)
10007ec4:	d9401017 	ldw	r5,64(sp)
10007ec8:	100d883a 	mov	r6,r2
10007ecc:	180f883a 	mov	r7,r3
10007ed0:	001127c0 	call	1001127c <__subdf3>
10007ed4:	1823883a 	mov	r17,r3
10007ed8:	d8c00717 	ldw	r3,28(sp)
10007edc:	d9401217 	ldw	r5,72(sp)
10007ee0:	a2000c04 	addi	r8,r20,48
10007ee4:	1021883a 	mov	r16,r2
10007ee8:	1a000005 	stb	r8,0(r3)
10007eec:	800d883a 	mov	r6,r16
10007ef0:	880f883a 	mov	r7,r17
10007ef4:	a809883a 	mov	r4,r21
10007ef8:	4029883a 	mov	r20,r8
10007efc:	00108400 	call	10010840 <__gedf2>
10007f00:	00841d16 	blt	zero,r2,10008f78 <_dtoa_r+0x15f4>
10007f04:	800d883a 	mov	r6,r16
10007f08:	880f883a 	mov	r7,r17
10007f0c:	0009883a 	mov	r4,zero
10007f10:	014ffc34 	movhi	r5,16368
10007f14:	001127c0 	call	1001127c <__subdf3>
10007f18:	d9401217 	ldw	r5,72(sp)
10007f1c:	100d883a 	mov	r6,r2
10007f20:	180f883a 	mov	r7,r3
10007f24:	a809883a 	mov	r4,r21
10007f28:	00108400 	call	10010840 <__gedf2>
10007f2c:	db001617 	ldw	r12,88(sp)
10007f30:	00840e16 	blt	zero,r2,10008f6c <_dtoa_r+0x15e8>
10007f34:	00800044 	movi	r2,1
10007f38:	13006b0e 	bge	r2,r12,100080e8 <_dtoa_r+0x764>
10007f3c:	d9000717 	ldw	r4,28(sp)
10007f40:	dd800f15 	stw	r22,60(sp)
10007f44:	dcc01015 	stw	r19,64(sp)
10007f48:	2319883a 	add	r12,r4,r12
10007f4c:	dcc01217 	ldw	r19,72(sp)
10007f50:	602d883a 	mov	r22,r12
10007f54:	dc801215 	stw	r18,72(sp)
10007f58:	b825883a 	mov	r18,r23
10007f5c:	00000906 	br	10007f84 <_dtoa_r+0x600>
10007f60:	001127c0 	call	1001127c <__subdf3>
10007f64:	a80d883a 	mov	r6,r21
10007f68:	980f883a 	mov	r7,r19
10007f6c:	1009883a 	mov	r4,r2
10007f70:	180b883a 	mov	r5,r3
10007f74:	001091c0 	call	1001091c <__ledf2>
10007f78:	1003e816 	blt	r2,zero,10008f1c <_dtoa_r+0x1598>
10007f7c:	b825883a 	mov	r18,r23
10007f80:	bd83e926 	beq	r23,r22,10008f28 <_dtoa_r+0x15a4>
10007f84:	a809883a 	mov	r4,r21
10007f88:	980b883a 	mov	r5,r19
10007f8c:	000d883a 	mov	r6,zero
10007f90:	01d00934 	movhi	r7,16420
10007f94:	0010a100 	call	10010a10 <__muldf3>
10007f98:	000d883a 	mov	r6,zero
10007f9c:	01d00934 	movhi	r7,16420
10007fa0:	8009883a 	mov	r4,r16
10007fa4:	880b883a 	mov	r5,r17
10007fa8:	102b883a 	mov	r21,r2
10007fac:	1827883a 	mov	r19,r3
10007fb0:	0010a100 	call	10010a10 <__muldf3>
10007fb4:	180b883a 	mov	r5,r3
10007fb8:	1009883a 	mov	r4,r2
10007fbc:	1821883a 	mov	r16,r3
10007fc0:	1023883a 	mov	r17,r2
10007fc4:	0011b780 	call	10011b78 <__fixdfsi>
10007fc8:	1009883a 	mov	r4,r2
10007fcc:	1029883a 	mov	r20,r2
10007fd0:	0011bf80 	call	10011bf8 <__floatsidf>
10007fd4:	8809883a 	mov	r4,r17
10007fd8:	800b883a 	mov	r5,r16
10007fdc:	100d883a 	mov	r6,r2
10007fe0:	180f883a 	mov	r7,r3
10007fe4:	001127c0 	call	1001127c <__subdf3>
10007fe8:	a5000c04 	addi	r20,r20,48
10007fec:	a80d883a 	mov	r6,r21
10007ff0:	980f883a 	mov	r7,r19
10007ff4:	1009883a 	mov	r4,r2
10007ff8:	180b883a 	mov	r5,r3
10007ffc:	95000005 	stb	r20,0(r18)
10008000:	1021883a 	mov	r16,r2
10008004:	1823883a 	mov	r17,r3
10008008:	001091c0 	call	1001091c <__ledf2>
1000800c:	bdc00044 	addi	r23,r23,1
10008010:	800d883a 	mov	r6,r16
10008014:	880f883a 	mov	r7,r17
10008018:	0009883a 	mov	r4,zero
1000801c:	014ffc34 	movhi	r5,16368
10008020:	103fcf0e 	bge	r2,zero,10007f60 <__alt_data_end+0xf8007f60>
10008024:	d8c01317 	ldw	r3,76(sp)
10008028:	d8c00515 	stw	r3,20(sp)
1000802c:	d9400917 	ldw	r5,36(sp)
10008030:	e009883a 	mov	r4,fp
10008034:	000b0e40 	call	1000b0e4 <_Bfree>
10008038:	d9000517 	ldw	r4,20(sp)
1000803c:	d9802317 	ldw	r6,140(sp)
10008040:	d9c02517 	ldw	r7,148(sp)
10008044:	b8000005 	stb	zero,0(r23)
10008048:	20800044 	addi	r2,r4,1
1000804c:	30800015 	stw	r2,0(r6)
10008050:	3802aa26 	beq	r7,zero,10008afc <_dtoa_r+0x1178>
10008054:	3dc00015 	stw	r23,0(r7)
10008058:	d8800717 	ldw	r2,28(sp)
1000805c:	003e7906 	br	10007a44 <__alt_data_end+0xf8007a44>
10008060:	00800434 	movhi	r2,16
10008064:	10bfffc4 	addi	r2,r2,-1
10008068:	88a2703a 	and	r17,r17,r2
1000806c:	883e851e 	bne	r17,zero,10007a84 <__alt_data_end+0xf8007a84>
10008070:	00840074 	movhi	r2,4097
10008074:	10939d04 	addi	r2,r2,20084
10008078:	003e8406 	br	10007a8c <__alt_data_end+0xf8007a8c>
1000807c:	10c00204 	addi	r3,r2,8
10008080:	003e8706 	br	10007aa0 <__alt_data_end+0xf8007aa0>
10008084:	01400434 	movhi	r5,16
10008088:	297fffc4 	addi	r5,r5,-1
1000808c:	994a703a 	and	r5,r19,r5
10008090:	9009883a 	mov	r4,r18
10008094:	843f0044 	addi	r16,r16,-1023
10008098:	294ffc34 	orhi	r5,r5,16368
1000809c:	dd800217 	ldw	r22,8(sp)
100080a0:	d8001115 	stw	zero,68(sp)
100080a4:	003ea506 	br	10007b3c <__alt_data_end+0xf8007b3c>
100080a8:	00840074 	movhi	r2,4097
100080ac:	10939404 	addi	r2,r2,20048
100080b0:	003e6406 	br	10007a44 <__alt_data_end+0xf8007a44>
100080b4:	e0001115 	stw	zero,68(fp)
100080b8:	000b883a 	mov	r5,zero
100080bc:	e009883a 	mov	r4,fp
100080c0:	000b03c0 	call	1000b03c <_Balloc>
100080c4:	01bfffc4 	movi	r6,-1
100080c8:	01c00044 	movi	r7,1
100080cc:	d8800715 	stw	r2,28(sp)
100080d0:	d9800c15 	stw	r6,48(sp)
100080d4:	e0801015 	stw	r2,64(fp)
100080d8:	d8000315 	stw	zero,12(sp)
100080dc:	d9c00b15 	stw	r7,44(sp)
100080e0:	d9800615 	stw	r6,24(sp)
100080e4:	d8002215 	stw	zero,136(sp)
100080e8:	d8800117 	ldw	r2,4(sp)
100080ec:	10008916 	blt	r2,zero,10008314 <_dtoa_r+0x990>
100080f0:	d9000517 	ldw	r4,20(sp)
100080f4:	00c00384 	movi	r3,14
100080f8:	19008616 	blt	r3,r4,10008314 <_dtoa_r+0x990>
100080fc:	200490fa 	slli	r2,r4,3
10008100:	00c40074 	movhi	r3,4097
10008104:	d9802217 	ldw	r6,136(sp)
10008108:	18d3bc04 	addi	r3,r3,20208
1000810c:	1885883a 	add	r2,r3,r2
10008110:	14000017 	ldw	r16,0(r2)
10008114:	14400117 	ldw	r17,4(r2)
10008118:	30016316 	blt	r6,zero,100086a8 <_dtoa_r+0xd24>
1000811c:	800d883a 	mov	r6,r16
10008120:	880f883a 	mov	r7,r17
10008124:	9009883a 	mov	r4,r18
10008128:	980b883a 	mov	r5,r19
1000812c:	000fde80 	call	1000fde8 <__divdf3>
10008130:	180b883a 	mov	r5,r3
10008134:	1009883a 	mov	r4,r2
10008138:	0011b780 	call	10011b78 <__fixdfsi>
1000813c:	1009883a 	mov	r4,r2
10008140:	102b883a 	mov	r21,r2
10008144:	0011bf80 	call	10011bf8 <__floatsidf>
10008148:	800d883a 	mov	r6,r16
1000814c:	880f883a 	mov	r7,r17
10008150:	1009883a 	mov	r4,r2
10008154:	180b883a 	mov	r5,r3
10008158:	0010a100 	call	10010a10 <__muldf3>
1000815c:	100d883a 	mov	r6,r2
10008160:	180f883a 	mov	r7,r3
10008164:	9009883a 	mov	r4,r18
10008168:	980b883a 	mov	r5,r19
1000816c:	001127c0 	call	1001127c <__subdf3>
10008170:	d9c00717 	ldw	r7,28(sp)
10008174:	1009883a 	mov	r4,r2
10008178:	a8800c04 	addi	r2,r21,48
1000817c:	38800005 	stb	r2,0(r7)
10008180:	3dc00044 	addi	r23,r7,1
10008184:	d9c00617 	ldw	r7,24(sp)
10008188:	01800044 	movi	r6,1
1000818c:	180b883a 	mov	r5,r3
10008190:	2005883a 	mov	r2,r4
10008194:	39803826 	beq	r7,r6,10008278 <_dtoa_r+0x8f4>
10008198:	000d883a 	mov	r6,zero
1000819c:	01d00934 	movhi	r7,16420
100081a0:	0010a100 	call	10010a10 <__muldf3>
100081a4:	000d883a 	mov	r6,zero
100081a8:	000f883a 	mov	r7,zero
100081ac:	1009883a 	mov	r4,r2
100081b0:	180b883a 	mov	r5,r3
100081b4:	1025883a 	mov	r18,r2
100081b8:	1827883a 	mov	r19,r3
100081bc:	00107b80 	call	100107b8 <__eqdf2>
100081c0:	103f9a26 	beq	r2,zero,1000802c <__alt_data_end+0xf800802c>
100081c4:	d9c00617 	ldw	r7,24(sp)
100081c8:	d8c00717 	ldw	r3,28(sp)
100081cc:	b829883a 	mov	r20,r23
100081d0:	38bfffc4 	addi	r2,r7,-1
100081d4:	18ad883a 	add	r22,r3,r2
100081d8:	00000a06 	br	10008204 <_dtoa_r+0x880>
100081dc:	0010a100 	call	10010a10 <__muldf3>
100081e0:	000d883a 	mov	r6,zero
100081e4:	000f883a 	mov	r7,zero
100081e8:	1009883a 	mov	r4,r2
100081ec:	180b883a 	mov	r5,r3
100081f0:	1025883a 	mov	r18,r2
100081f4:	1827883a 	mov	r19,r3
100081f8:	b829883a 	mov	r20,r23
100081fc:	00107b80 	call	100107b8 <__eqdf2>
10008200:	103f8a26 	beq	r2,zero,1000802c <__alt_data_end+0xf800802c>
10008204:	800d883a 	mov	r6,r16
10008208:	880f883a 	mov	r7,r17
1000820c:	9009883a 	mov	r4,r18
10008210:	980b883a 	mov	r5,r19
10008214:	000fde80 	call	1000fde8 <__divdf3>
10008218:	180b883a 	mov	r5,r3
1000821c:	1009883a 	mov	r4,r2
10008220:	0011b780 	call	10011b78 <__fixdfsi>
10008224:	1009883a 	mov	r4,r2
10008228:	102b883a 	mov	r21,r2
1000822c:	0011bf80 	call	10011bf8 <__floatsidf>
10008230:	800d883a 	mov	r6,r16
10008234:	880f883a 	mov	r7,r17
10008238:	1009883a 	mov	r4,r2
1000823c:	180b883a 	mov	r5,r3
10008240:	0010a100 	call	10010a10 <__muldf3>
10008244:	100d883a 	mov	r6,r2
10008248:	180f883a 	mov	r7,r3
1000824c:	9009883a 	mov	r4,r18
10008250:	980b883a 	mov	r5,r19
10008254:	001127c0 	call	1001127c <__subdf3>
10008258:	aa000c04 	addi	r8,r21,48
1000825c:	a2000005 	stb	r8,0(r20)
10008260:	000d883a 	mov	r6,zero
10008264:	01d00934 	movhi	r7,16420
10008268:	1009883a 	mov	r4,r2
1000826c:	180b883a 	mov	r5,r3
10008270:	a5c00044 	addi	r23,r20,1
10008274:	b53fd91e 	bne	r22,r20,100081dc <__alt_data_end+0xf80081dc>
10008278:	100d883a 	mov	r6,r2
1000827c:	180f883a 	mov	r7,r3
10008280:	1009883a 	mov	r4,r2
10008284:	180b883a 	mov	r5,r3
10008288:	000f53c0 	call	1000f53c <__adddf3>
1000828c:	100d883a 	mov	r6,r2
10008290:	180f883a 	mov	r7,r3
10008294:	8009883a 	mov	r4,r16
10008298:	880b883a 	mov	r5,r17
1000829c:	1027883a 	mov	r19,r2
100082a0:	1825883a 	mov	r18,r3
100082a4:	001091c0 	call	1001091c <__ledf2>
100082a8:	10000816 	blt	r2,zero,100082cc <_dtoa_r+0x948>
100082ac:	980d883a 	mov	r6,r19
100082b0:	900f883a 	mov	r7,r18
100082b4:	8009883a 	mov	r4,r16
100082b8:	880b883a 	mov	r5,r17
100082bc:	00107b80 	call	100107b8 <__eqdf2>
100082c0:	103f5a1e 	bne	r2,zero,1000802c <__alt_data_end+0xf800802c>
100082c4:	ad40004c 	andi	r21,r21,1
100082c8:	a83f5826 	beq	r21,zero,1000802c <__alt_data_end+0xf800802c>
100082cc:	bd3fffc3 	ldbu	r20,-1(r23)
100082d0:	b8bfffc4 	addi	r2,r23,-1
100082d4:	1007883a 	mov	r3,r2
100082d8:	01400e44 	movi	r5,57
100082dc:	d9800717 	ldw	r6,28(sp)
100082e0:	00000506 	br	100082f8 <_dtoa_r+0x974>
100082e4:	18ffffc4 	addi	r3,r3,-1
100082e8:	11824726 	beq	r2,r6,10008c08 <_dtoa_r+0x1284>
100082ec:	1d000003 	ldbu	r20,0(r3)
100082f0:	102f883a 	mov	r23,r2
100082f4:	10bfffc4 	addi	r2,r2,-1
100082f8:	a1003fcc 	andi	r4,r20,255
100082fc:	2100201c 	xori	r4,r4,128
10008300:	213fe004 	addi	r4,r4,-128
10008304:	217ff726 	beq	r4,r5,100082e4 <__alt_data_end+0xf80082e4>
10008308:	a2000044 	addi	r8,r20,1
1000830c:	12000005 	stb	r8,0(r2)
10008310:	003f4606 	br	1000802c <__alt_data_end+0xf800802c>
10008314:	d9000b17 	ldw	r4,44(sp)
10008318:	2000c826 	beq	r4,zero,1000863c <_dtoa_r+0xcb8>
1000831c:	d9800317 	ldw	r6,12(sp)
10008320:	00c00044 	movi	r3,1
10008324:	1980f90e 	bge	r3,r6,1000870c <_dtoa_r+0xd88>
10008328:	d8800617 	ldw	r2,24(sp)
1000832c:	d8c00a17 	ldw	r3,40(sp)
10008330:	157fffc4 	addi	r21,r2,-1
10008334:	1d41f316 	blt	r3,r21,10008b04 <_dtoa_r+0x1180>
10008338:	1d6bc83a 	sub	r21,r3,r21
1000833c:	d9c00617 	ldw	r7,24(sp)
10008340:	3802aa16 	blt	r7,zero,10008dec <_dtoa_r+0x1468>
10008344:	dd000817 	ldw	r20,32(sp)
10008348:	d8800617 	ldw	r2,24(sp)
1000834c:	d8c00817 	ldw	r3,32(sp)
10008350:	01400044 	movi	r5,1
10008354:	e009883a 	mov	r4,fp
10008358:	1887883a 	add	r3,r3,r2
1000835c:	d8c00815 	stw	r3,32(sp)
10008360:	b0ad883a 	add	r22,r22,r2
10008364:	000b4700 	call	1000b470 <__i2b>
10008368:	1023883a 	mov	r17,r2
1000836c:	a0000826 	beq	r20,zero,10008390 <_dtoa_r+0xa0c>
10008370:	0580070e 	bge	zero,r22,10008390 <_dtoa_r+0xa0c>
10008374:	a005883a 	mov	r2,r20
10008378:	b500b916 	blt	r22,r20,10008660 <_dtoa_r+0xcdc>
1000837c:	d9000817 	ldw	r4,32(sp)
10008380:	a0a9c83a 	sub	r20,r20,r2
10008384:	b0adc83a 	sub	r22,r22,r2
10008388:	2089c83a 	sub	r4,r4,r2
1000838c:	d9000815 	stw	r4,32(sp)
10008390:	d9800a17 	ldw	r6,40(sp)
10008394:	0181810e 	bge	zero,r6,1000899c <_dtoa_r+0x1018>
10008398:	d9c00b17 	ldw	r7,44(sp)
1000839c:	3800b326 	beq	r7,zero,1000866c <_dtoa_r+0xce8>
100083a0:	a800b226 	beq	r21,zero,1000866c <_dtoa_r+0xce8>
100083a4:	880b883a 	mov	r5,r17
100083a8:	a80d883a 	mov	r6,r21
100083ac:	e009883a 	mov	r4,fp
100083b0:	000b7380 	call	1000b738 <__pow5mult>
100083b4:	d9800917 	ldw	r6,36(sp)
100083b8:	100b883a 	mov	r5,r2
100083bc:	e009883a 	mov	r4,fp
100083c0:	1023883a 	mov	r17,r2
100083c4:	000b4ac0 	call	1000b4ac <__multiply>
100083c8:	1021883a 	mov	r16,r2
100083cc:	d8800a17 	ldw	r2,40(sp)
100083d0:	d9400917 	ldw	r5,36(sp)
100083d4:	e009883a 	mov	r4,fp
100083d8:	1545c83a 	sub	r2,r2,r21
100083dc:	d8800a15 	stw	r2,40(sp)
100083e0:	000b0e40 	call	1000b0e4 <_Bfree>
100083e4:	d8c00a17 	ldw	r3,40(sp)
100083e8:	18009f1e 	bne	r3,zero,10008668 <_dtoa_r+0xce4>
100083ec:	05c00044 	movi	r23,1
100083f0:	e009883a 	mov	r4,fp
100083f4:	b80b883a 	mov	r5,r23
100083f8:	000b4700 	call	1000b470 <__i2b>
100083fc:	d9000d17 	ldw	r4,52(sp)
10008400:	102b883a 	mov	r21,r2
10008404:	2000ce26 	beq	r4,zero,10008740 <_dtoa_r+0xdbc>
10008408:	200d883a 	mov	r6,r4
1000840c:	100b883a 	mov	r5,r2
10008410:	e009883a 	mov	r4,fp
10008414:	000b7380 	call	1000b738 <__pow5mult>
10008418:	d9800317 	ldw	r6,12(sp)
1000841c:	102b883a 	mov	r21,r2
10008420:	b981810e 	bge	r23,r6,10008a28 <_dtoa_r+0x10a4>
10008424:	0027883a 	mov	r19,zero
10008428:	a8800417 	ldw	r2,16(r21)
1000842c:	05c00804 	movi	r23,32
10008430:	10800104 	addi	r2,r2,4
10008434:	1085883a 	add	r2,r2,r2
10008438:	1085883a 	add	r2,r2,r2
1000843c:	a885883a 	add	r2,r21,r2
10008440:	11000017 	ldw	r4,0(r2)
10008444:	000b3580 	call	1000b358 <__hi0bits>
10008448:	b885c83a 	sub	r2,r23,r2
1000844c:	1585883a 	add	r2,r2,r22
10008450:	108007cc 	andi	r2,r2,31
10008454:	1000b326 	beq	r2,zero,10008724 <_dtoa_r+0xda0>
10008458:	00c00804 	movi	r3,32
1000845c:	1887c83a 	sub	r3,r3,r2
10008460:	01000104 	movi	r4,4
10008464:	20c2cd0e 	bge	r4,r3,10008f9c <_dtoa_r+0x1618>
10008468:	00c00704 	movi	r3,28
1000846c:	1885c83a 	sub	r2,r3,r2
10008470:	d8c00817 	ldw	r3,32(sp)
10008474:	a0a9883a 	add	r20,r20,r2
10008478:	b0ad883a 	add	r22,r22,r2
1000847c:	1887883a 	add	r3,r3,r2
10008480:	d8c00815 	stw	r3,32(sp)
10008484:	d9800817 	ldw	r6,32(sp)
10008488:	0180040e 	bge	zero,r6,1000849c <_dtoa_r+0xb18>
1000848c:	800b883a 	mov	r5,r16
10008490:	e009883a 	mov	r4,fp
10008494:	000b8780 	call	1000b878 <__lshift>
10008498:	1021883a 	mov	r16,r2
1000849c:	0580050e 	bge	zero,r22,100084b4 <_dtoa_r+0xb30>
100084a0:	a80b883a 	mov	r5,r21
100084a4:	b00d883a 	mov	r6,r22
100084a8:	e009883a 	mov	r4,fp
100084ac:	000b8780 	call	1000b878 <__lshift>
100084b0:	102b883a 	mov	r21,r2
100084b4:	d9c00e17 	ldw	r7,56(sp)
100084b8:	3801211e 	bne	r7,zero,10008940 <_dtoa_r+0xfbc>
100084bc:	d9800617 	ldw	r6,24(sp)
100084c0:	0181380e 	bge	zero,r6,100089a4 <_dtoa_r+0x1020>
100084c4:	d8c00b17 	ldw	r3,44(sp)
100084c8:	1800ab1e 	bne	r3,zero,10008778 <_dtoa_r+0xdf4>
100084cc:	dc800717 	ldw	r18,28(sp)
100084d0:	dcc00617 	ldw	r19,24(sp)
100084d4:	9029883a 	mov	r20,r18
100084d8:	00000206 	br	100084e4 <_dtoa_r+0xb60>
100084dc:	000b10c0 	call	1000b10c <__multadd>
100084e0:	1021883a 	mov	r16,r2
100084e4:	a80b883a 	mov	r5,r21
100084e8:	8009883a 	mov	r4,r16
100084ec:	000775c0 	call	1000775c <quorem>
100084f0:	10800c04 	addi	r2,r2,48
100084f4:	90800005 	stb	r2,0(r18)
100084f8:	94800044 	addi	r18,r18,1
100084fc:	9507c83a 	sub	r3,r18,r20
10008500:	000f883a 	mov	r7,zero
10008504:	01800284 	movi	r6,10
10008508:	800b883a 	mov	r5,r16
1000850c:	e009883a 	mov	r4,fp
10008510:	1cfff216 	blt	r3,r19,100084dc <__alt_data_end+0xf80084dc>
10008514:	1011883a 	mov	r8,r2
10008518:	d8800617 	ldw	r2,24(sp)
1000851c:	0082370e 	bge	zero,r2,10008dfc <_dtoa_r+0x1478>
10008520:	d9000717 	ldw	r4,28(sp)
10008524:	0025883a 	mov	r18,zero
10008528:	20af883a 	add	r23,r4,r2
1000852c:	01800044 	movi	r6,1
10008530:	800b883a 	mov	r5,r16
10008534:	e009883a 	mov	r4,fp
10008538:	da001715 	stw	r8,92(sp)
1000853c:	000b8780 	call	1000b878 <__lshift>
10008540:	a80b883a 	mov	r5,r21
10008544:	1009883a 	mov	r4,r2
10008548:	d8800915 	stw	r2,36(sp)
1000854c:	000b9c00 	call	1000b9c0 <__mcmp>
10008550:	da001717 	ldw	r8,92(sp)
10008554:	0081800e 	bge	zero,r2,10008b58 <_dtoa_r+0x11d4>
10008558:	b93fffc3 	ldbu	r4,-1(r23)
1000855c:	b8bfffc4 	addi	r2,r23,-1
10008560:	1007883a 	mov	r3,r2
10008564:	01800e44 	movi	r6,57
10008568:	d9c00717 	ldw	r7,28(sp)
1000856c:	00000506 	br	10008584 <_dtoa_r+0xc00>
10008570:	18ffffc4 	addi	r3,r3,-1
10008574:	11c12326 	beq	r2,r7,10008a04 <_dtoa_r+0x1080>
10008578:	19000003 	ldbu	r4,0(r3)
1000857c:	102f883a 	mov	r23,r2
10008580:	10bfffc4 	addi	r2,r2,-1
10008584:	21403fcc 	andi	r5,r4,255
10008588:	2940201c 	xori	r5,r5,128
1000858c:	297fe004 	addi	r5,r5,-128
10008590:	29bff726 	beq	r5,r6,10008570 <__alt_data_end+0xf8008570>
10008594:	21000044 	addi	r4,r4,1
10008598:	11000005 	stb	r4,0(r2)
1000859c:	a80b883a 	mov	r5,r21
100085a0:	e009883a 	mov	r4,fp
100085a4:	000b0e40 	call	1000b0e4 <_Bfree>
100085a8:	883ea026 	beq	r17,zero,1000802c <__alt_data_end+0xf800802c>
100085ac:	90000426 	beq	r18,zero,100085c0 <_dtoa_r+0xc3c>
100085b0:	94400326 	beq	r18,r17,100085c0 <_dtoa_r+0xc3c>
100085b4:	900b883a 	mov	r5,r18
100085b8:	e009883a 	mov	r4,fp
100085bc:	000b0e40 	call	1000b0e4 <_Bfree>
100085c0:	880b883a 	mov	r5,r17
100085c4:	e009883a 	mov	r4,fp
100085c8:	000b0e40 	call	1000b0e4 <_Bfree>
100085cc:	003e9706 	br	1000802c <__alt_data_end+0xf800802c>
100085d0:	01800044 	movi	r6,1
100085d4:	d9800e15 	stw	r6,56(sp)
100085d8:	003d9606 	br	10007c34 <__alt_data_end+0xf8007c34>
100085dc:	d8800817 	ldw	r2,32(sp)
100085e0:	d8c00517 	ldw	r3,20(sp)
100085e4:	d8000d15 	stw	zero,52(sp)
100085e8:	10c5c83a 	sub	r2,r2,r3
100085ec:	00c9c83a 	sub	r4,zero,r3
100085f0:	d8800815 	stw	r2,32(sp)
100085f4:	d9000a15 	stw	r4,40(sp)
100085f8:	003d9706 	br	10007c58 <__alt_data_end+0xf8007c58>
100085fc:	05adc83a 	sub	r22,zero,r22
10008600:	dd800815 	stw	r22,32(sp)
10008604:	002d883a 	mov	r22,zero
10008608:	003d8e06 	br	10007c44 <__alt_data_end+0xf8007c44>
1000860c:	d9000517 	ldw	r4,20(sp)
10008610:	0011bf80 	call	10011bf8 <__floatsidf>
10008614:	100d883a 	mov	r6,r2
10008618:	180f883a 	mov	r7,r3
1000861c:	a009883a 	mov	r4,r20
10008620:	880b883a 	mov	r5,r17
10008624:	00107b80 	call	100107b8 <__eqdf2>
10008628:	103d7126 	beq	r2,zero,10007bf0 <__alt_data_end+0xf8007bf0>
1000862c:	d9c00517 	ldw	r7,20(sp)
10008630:	39ffffc4 	addi	r7,r7,-1
10008634:	d9c00515 	stw	r7,20(sp)
10008638:	003d6d06 	br	10007bf0 <__alt_data_end+0xf8007bf0>
1000863c:	dd400a17 	ldw	r21,40(sp)
10008640:	dd000817 	ldw	r20,32(sp)
10008644:	0023883a 	mov	r17,zero
10008648:	003f4806 	br	1000836c <__alt_data_end+0xf800836c>
1000864c:	10e3c83a 	sub	r17,r2,r3
10008650:	9448983a 	sll	r4,r18,r17
10008654:	003d3206 	br	10007b20 <__alt_data_end+0xf8007b20>
10008658:	d8000e15 	stw	zero,56(sp)
1000865c:	003d7506 	br	10007c34 <__alt_data_end+0xf8007c34>
10008660:	b005883a 	mov	r2,r22
10008664:	003f4506 	br	1000837c <__alt_data_end+0xf800837c>
10008668:	dc000915 	stw	r16,36(sp)
1000866c:	d9800a17 	ldw	r6,40(sp)
10008670:	d9400917 	ldw	r5,36(sp)
10008674:	e009883a 	mov	r4,fp
10008678:	000b7380 	call	1000b738 <__pow5mult>
1000867c:	1021883a 	mov	r16,r2
10008680:	003f5a06 	br	100083ec <__alt_data_end+0xf80083ec>
10008684:	01c00044 	movi	r7,1
10008688:	d9c00b15 	stw	r7,44(sp)
1000868c:	d8802217 	ldw	r2,136(sp)
10008690:	0081280e 	bge	zero,r2,10008b34 <_dtoa_r+0x11b0>
10008694:	100d883a 	mov	r6,r2
10008698:	1021883a 	mov	r16,r2
1000869c:	d8800c15 	stw	r2,48(sp)
100086a0:	d8800615 	stw	r2,24(sp)
100086a4:	003d8806 	br	10007cc8 <__alt_data_end+0xf8007cc8>
100086a8:	d8800617 	ldw	r2,24(sp)
100086ac:	00be9b16 	blt	zero,r2,1000811c <__alt_data_end+0xf800811c>
100086b0:	10010f1e 	bne	r2,zero,10008af0 <_dtoa_r+0x116c>
100086b4:	880b883a 	mov	r5,r17
100086b8:	000d883a 	mov	r6,zero
100086bc:	01d00534 	movhi	r7,16404
100086c0:	8009883a 	mov	r4,r16
100086c4:	0010a100 	call	10010a10 <__muldf3>
100086c8:	900d883a 	mov	r6,r18
100086cc:	980f883a 	mov	r7,r19
100086d0:	1009883a 	mov	r4,r2
100086d4:	180b883a 	mov	r5,r3
100086d8:	00108400 	call	10010840 <__gedf2>
100086dc:	002b883a 	mov	r21,zero
100086e0:	0023883a 	mov	r17,zero
100086e4:	1000bf16 	blt	r2,zero,100089e4 <_dtoa_r+0x1060>
100086e8:	d9802217 	ldw	r6,136(sp)
100086ec:	ddc00717 	ldw	r23,28(sp)
100086f0:	018c303a 	nor	r6,zero,r6
100086f4:	d9800515 	stw	r6,20(sp)
100086f8:	a80b883a 	mov	r5,r21
100086fc:	e009883a 	mov	r4,fp
10008700:	000b0e40 	call	1000b0e4 <_Bfree>
10008704:	883e4926 	beq	r17,zero,1000802c <__alt_data_end+0xf800802c>
10008708:	003fad06 	br	100085c0 <__alt_data_end+0xf80085c0>
1000870c:	d9c01117 	ldw	r7,68(sp)
10008710:	3801bc26 	beq	r7,zero,10008e04 <_dtoa_r+0x1480>
10008714:	10810cc4 	addi	r2,r2,1075
10008718:	dd400a17 	ldw	r21,40(sp)
1000871c:	dd000817 	ldw	r20,32(sp)
10008720:	003f0a06 	br	1000834c <__alt_data_end+0xf800834c>
10008724:	00800704 	movi	r2,28
10008728:	d9000817 	ldw	r4,32(sp)
1000872c:	a0a9883a 	add	r20,r20,r2
10008730:	b0ad883a 	add	r22,r22,r2
10008734:	2089883a 	add	r4,r4,r2
10008738:	d9000815 	stw	r4,32(sp)
1000873c:	003f5106 	br	10008484 <__alt_data_end+0xf8008484>
10008740:	d8c00317 	ldw	r3,12(sp)
10008744:	b8c1fc0e 	bge	r23,r3,10008f38 <_dtoa_r+0x15b4>
10008748:	0027883a 	mov	r19,zero
1000874c:	b805883a 	mov	r2,r23
10008750:	003f3e06 	br	1000844c <__alt_data_end+0xf800844c>
10008754:	880b883a 	mov	r5,r17
10008758:	e009883a 	mov	r4,fp
1000875c:	000f883a 	mov	r7,zero
10008760:	01800284 	movi	r6,10
10008764:	000b10c0 	call	1000b10c <__multadd>
10008768:	d9000c17 	ldw	r4,48(sp)
1000876c:	1023883a 	mov	r17,r2
10008770:	0102040e 	bge	zero,r4,10008f84 <_dtoa_r+0x1600>
10008774:	d9000615 	stw	r4,24(sp)
10008778:	0500050e 	bge	zero,r20,10008790 <_dtoa_r+0xe0c>
1000877c:	880b883a 	mov	r5,r17
10008780:	a00d883a 	mov	r6,r20
10008784:	e009883a 	mov	r4,fp
10008788:	000b8780 	call	1000b878 <__lshift>
1000878c:	1023883a 	mov	r17,r2
10008790:	9801241e 	bne	r19,zero,10008c24 <_dtoa_r+0x12a0>
10008794:	8829883a 	mov	r20,r17
10008798:	d9000617 	ldw	r4,24(sp)
1000879c:	dcc00717 	ldw	r19,28(sp)
100087a0:	9480004c 	andi	r18,r18,1
100087a4:	20bfffc4 	addi	r2,r4,-1
100087a8:	9885883a 	add	r2,r19,r2
100087ac:	d8800415 	stw	r2,16(sp)
100087b0:	dc800615 	stw	r18,24(sp)
100087b4:	a80b883a 	mov	r5,r21
100087b8:	8009883a 	mov	r4,r16
100087bc:	000775c0 	call	1000775c <quorem>
100087c0:	880b883a 	mov	r5,r17
100087c4:	8009883a 	mov	r4,r16
100087c8:	102f883a 	mov	r23,r2
100087cc:	000b9c00 	call	1000b9c0 <__mcmp>
100087d0:	a80b883a 	mov	r5,r21
100087d4:	a00d883a 	mov	r6,r20
100087d8:	e009883a 	mov	r4,fp
100087dc:	102d883a 	mov	r22,r2
100087e0:	000ba200 	call	1000ba20 <__mdiff>
100087e4:	1007883a 	mov	r3,r2
100087e8:	10800317 	ldw	r2,12(r2)
100087ec:	bc800c04 	addi	r18,r23,48
100087f0:	180b883a 	mov	r5,r3
100087f4:	10004e1e 	bne	r2,zero,10008930 <_dtoa_r+0xfac>
100087f8:	8009883a 	mov	r4,r16
100087fc:	d8c01615 	stw	r3,88(sp)
10008800:	000b9c00 	call	1000b9c0 <__mcmp>
10008804:	d8c01617 	ldw	r3,88(sp)
10008808:	e009883a 	mov	r4,fp
1000880c:	d8801615 	stw	r2,88(sp)
10008810:	180b883a 	mov	r5,r3
10008814:	000b0e40 	call	1000b0e4 <_Bfree>
10008818:	d8801617 	ldw	r2,88(sp)
1000881c:	1000041e 	bne	r2,zero,10008830 <_dtoa_r+0xeac>
10008820:	d9800317 	ldw	r6,12(sp)
10008824:	3000021e 	bne	r6,zero,10008830 <_dtoa_r+0xeac>
10008828:	d8c00617 	ldw	r3,24(sp)
1000882c:	18003726 	beq	r3,zero,1000890c <_dtoa_r+0xf88>
10008830:	b0002016 	blt	r22,zero,100088b4 <_dtoa_r+0xf30>
10008834:	b000041e 	bne	r22,zero,10008848 <_dtoa_r+0xec4>
10008838:	d9000317 	ldw	r4,12(sp)
1000883c:	2000021e 	bne	r4,zero,10008848 <_dtoa_r+0xec4>
10008840:	d8c00617 	ldw	r3,24(sp)
10008844:	18001b26 	beq	r3,zero,100088b4 <_dtoa_r+0xf30>
10008848:	00810716 	blt	zero,r2,10008c68 <_dtoa_r+0x12e4>
1000884c:	d8c00417 	ldw	r3,16(sp)
10008850:	9d800044 	addi	r22,r19,1
10008854:	9c800005 	stb	r18,0(r19)
10008858:	b02f883a 	mov	r23,r22
1000885c:	98c10626 	beq	r19,r3,10008c78 <_dtoa_r+0x12f4>
10008860:	800b883a 	mov	r5,r16
10008864:	000f883a 	mov	r7,zero
10008868:	01800284 	movi	r6,10
1000886c:	e009883a 	mov	r4,fp
10008870:	000b10c0 	call	1000b10c <__multadd>
10008874:	1021883a 	mov	r16,r2
10008878:	000f883a 	mov	r7,zero
1000887c:	01800284 	movi	r6,10
10008880:	880b883a 	mov	r5,r17
10008884:	e009883a 	mov	r4,fp
10008888:	8d002526 	beq	r17,r20,10008920 <_dtoa_r+0xf9c>
1000888c:	000b10c0 	call	1000b10c <__multadd>
10008890:	a00b883a 	mov	r5,r20
10008894:	000f883a 	mov	r7,zero
10008898:	01800284 	movi	r6,10
1000889c:	e009883a 	mov	r4,fp
100088a0:	1023883a 	mov	r17,r2
100088a4:	000b10c0 	call	1000b10c <__multadd>
100088a8:	1029883a 	mov	r20,r2
100088ac:	b027883a 	mov	r19,r22
100088b0:	003fc006 	br	100087b4 <__alt_data_end+0xf80087b4>
100088b4:	9011883a 	mov	r8,r18
100088b8:	00800e0e 	bge	zero,r2,100088f4 <_dtoa_r+0xf70>
100088bc:	800b883a 	mov	r5,r16
100088c0:	01800044 	movi	r6,1
100088c4:	e009883a 	mov	r4,fp
100088c8:	da001715 	stw	r8,92(sp)
100088cc:	000b8780 	call	1000b878 <__lshift>
100088d0:	a80b883a 	mov	r5,r21
100088d4:	1009883a 	mov	r4,r2
100088d8:	1021883a 	mov	r16,r2
100088dc:	000b9c00 	call	1000b9c0 <__mcmp>
100088e0:	da001717 	ldw	r8,92(sp)
100088e4:	0081960e 	bge	zero,r2,10008f40 <_dtoa_r+0x15bc>
100088e8:	00800e44 	movi	r2,57
100088ec:	40817026 	beq	r8,r2,10008eb0 <_dtoa_r+0x152c>
100088f0:	ba000c44 	addi	r8,r23,49
100088f4:	8825883a 	mov	r18,r17
100088f8:	9dc00044 	addi	r23,r19,1
100088fc:	9a000005 	stb	r8,0(r19)
10008900:	a023883a 	mov	r17,r20
10008904:	dc000915 	stw	r16,36(sp)
10008908:	003f2406 	br	1000859c <__alt_data_end+0xf800859c>
1000890c:	00800e44 	movi	r2,57
10008910:	9011883a 	mov	r8,r18
10008914:	90816626 	beq	r18,r2,10008eb0 <_dtoa_r+0x152c>
10008918:	05bff516 	blt	zero,r22,100088f0 <__alt_data_end+0xf80088f0>
1000891c:	003ff506 	br	100088f4 <__alt_data_end+0xf80088f4>
10008920:	000b10c0 	call	1000b10c <__multadd>
10008924:	1023883a 	mov	r17,r2
10008928:	1029883a 	mov	r20,r2
1000892c:	003fdf06 	br	100088ac <__alt_data_end+0xf80088ac>
10008930:	e009883a 	mov	r4,fp
10008934:	000b0e40 	call	1000b0e4 <_Bfree>
10008938:	00800044 	movi	r2,1
1000893c:	003fbc06 	br	10008830 <__alt_data_end+0xf8008830>
10008940:	a80b883a 	mov	r5,r21
10008944:	8009883a 	mov	r4,r16
10008948:	000b9c00 	call	1000b9c0 <__mcmp>
1000894c:	103edb0e 	bge	r2,zero,100084bc <__alt_data_end+0xf80084bc>
10008950:	800b883a 	mov	r5,r16
10008954:	000f883a 	mov	r7,zero
10008958:	01800284 	movi	r6,10
1000895c:	e009883a 	mov	r4,fp
10008960:	000b10c0 	call	1000b10c <__multadd>
10008964:	1021883a 	mov	r16,r2
10008968:	d8800517 	ldw	r2,20(sp)
1000896c:	d8c00b17 	ldw	r3,44(sp)
10008970:	10bfffc4 	addi	r2,r2,-1
10008974:	d8800515 	stw	r2,20(sp)
10008978:	183f761e 	bne	r3,zero,10008754 <__alt_data_end+0xf8008754>
1000897c:	d9000c17 	ldw	r4,48(sp)
10008980:	0101730e 	bge	zero,r4,10008f50 <_dtoa_r+0x15cc>
10008984:	d9000615 	stw	r4,24(sp)
10008988:	003ed006 	br	100084cc <__alt_data_end+0xf80084cc>
1000898c:	00800084 	movi	r2,2
10008990:	3081861e 	bne	r6,r2,10008fac <_dtoa_r+0x1628>
10008994:	d8000b15 	stw	zero,44(sp)
10008998:	003f3c06 	br	1000868c <__alt_data_end+0xf800868c>
1000899c:	dc000917 	ldw	r16,36(sp)
100089a0:	003e9206 	br	100083ec <__alt_data_end+0xf80083ec>
100089a4:	d9c00317 	ldw	r7,12(sp)
100089a8:	00800084 	movi	r2,2
100089ac:	11fec50e 	bge	r2,r7,100084c4 <__alt_data_end+0xf80084c4>
100089b0:	d9000617 	ldw	r4,24(sp)
100089b4:	20013c1e 	bne	r4,zero,10008ea8 <_dtoa_r+0x1524>
100089b8:	a80b883a 	mov	r5,r21
100089bc:	000f883a 	mov	r7,zero
100089c0:	01800144 	movi	r6,5
100089c4:	e009883a 	mov	r4,fp
100089c8:	000b10c0 	call	1000b10c <__multadd>
100089cc:	100b883a 	mov	r5,r2
100089d0:	8009883a 	mov	r4,r16
100089d4:	102b883a 	mov	r21,r2
100089d8:	000b9c00 	call	1000b9c0 <__mcmp>
100089dc:	dc000915 	stw	r16,36(sp)
100089e0:	00bf410e 	bge	zero,r2,100086e8 <__alt_data_end+0xf80086e8>
100089e4:	d9c00717 	ldw	r7,28(sp)
100089e8:	00800c44 	movi	r2,49
100089ec:	38800005 	stb	r2,0(r7)
100089f0:	d8800517 	ldw	r2,20(sp)
100089f4:	3dc00044 	addi	r23,r7,1
100089f8:	10800044 	addi	r2,r2,1
100089fc:	d8800515 	stw	r2,20(sp)
10008a00:	003f3d06 	br	100086f8 <__alt_data_end+0xf80086f8>
10008a04:	d9800517 	ldw	r6,20(sp)
10008a08:	d9c00717 	ldw	r7,28(sp)
10008a0c:	00800c44 	movi	r2,49
10008a10:	31800044 	addi	r6,r6,1
10008a14:	d9800515 	stw	r6,20(sp)
10008a18:	38800005 	stb	r2,0(r7)
10008a1c:	003edf06 	br	1000859c <__alt_data_end+0xf800859c>
10008a20:	d8000b15 	stw	zero,44(sp)
10008a24:	003c9f06 	br	10007ca4 <__alt_data_end+0xf8007ca4>
10008a28:	903e7e1e 	bne	r18,zero,10008424 <__alt_data_end+0xf8008424>
10008a2c:	00800434 	movhi	r2,16
10008a30:	10bfffc4 	addi	r2,r2,-1
10008a34:	9884703a 	and	r2,r19,r2
10008a38:	1000ea1e 	bne	r2,zero,10008de4 <_dtoa_r+0x1460>
10008a3c:	9cdffc2c 	andhi	r19,r19,32752
10008a40:	9800e826 	beq	r19,zero,10008de4 <_dtoa_r+0x1460>
10008a44:	d9c00817 	ldw	r7,32(sp)
10008a48:	b5800044 	addi	r22,r22,1
10008a4c:	04c00044 	movi	r19,1
10008a50:	39c00044 	addi	r7,r7,1
10008a54:	d9c00815 	stw	r7,32(sp)
10008a58:	d8800d17 	ldw	r2,52(sp)
10008a5c:	103e721e 	bne	r2,zero,10008428 <__alt_data_end+0xf8008428>
10008a60:	00800044 	movi	r2,1
10008a64:	003e7906 	br	1000844c <__alt_data_end+0xf800844c>
10008a68:	8009883a 	mov	r4,r16
10008a6c:	0011bf80 	call	10011bf8 <__floatsidf>
10008a70:	d9800f17 	ldw	r6,60(sp)
10008a74:	d9c01017 	ldw	r7,64(sp)
10008a78:	1009883a 	mov	r4,r2
10008a7c:	180b883a 	mov	r5,r3
10008a80:	0010a100 	call	10010a10 <__muldf3>
10008a84:	000d883a 	mov	r6,zero
10008a88:	01d00734 	movhi	r7,16412
10008a8c:	1009883a 	mov	r4,r2
10008a90:	180b883a 	mov	r5,r3
10008a94:	000f53c0 	call	1000f53c <__adddf3>
10008a98:	047f3034 	movhi	r17,64704
10008a9c:	1021883a 	mov	r16,r2
10008aa0:	1c63883a 	add	r17,r3,r17
10008aa4:	d9000f17 	ldw	r4,60(sp)
10008aa8:	d9401017 	ldw	r5,64(sp)
10008aac:	000d883a 	mov	r6,zero
10008ab0:	01d00534 	movhi	r7,16404
10008ab4:	001127c0 	call	1001127c <__subdf3>
10008ab8:	800d883a 	mov	r6,r16
10008abc:	880f883a 	mov	r7,r17
10008ac0:	1009883a 	mov	r4,r2
10008ac4:	180b883a 	mov	r5,r3
10008ac8:	102b883a 	mov	r21,r2
10008acc:	1829883a 	mov	r20,r3
10008ad0:	00108400 	call	10010840 <__gedf2>
10008ad4:	00806c16 	blt	zero,r2,10008c88 <_dtoa_r+0x1304>
10008ad8:	89e0003c 	xorhi	r7,r17,32768
10008adc:	800d883a 	mov	r6,r16
10008ae0:	a809883a 	mov	r4,r21
10008ae4:	a00b883a 	mov	r5,r20
10008ae8:	001091c0 	call	1001091c <__ledf2>
10008aec:	103d7e0e 	bge	r2,zero,100080e8 <__alt_data_end+0xf80080e8>
10008af0:	002b883a 	mov	r21,zero
10008af4:	0023883a 	mov	r17,zero
10008af8:	003efb06 	br	100086e8 <__alt_data_end+0xf80086e8>
10008afc:	d8800717 	ldw	r2,28(sp)
10008b00:	003bd006 	br	10007a44 <__alt_data_end+0xf8007a44>
10008b04:	d9000a17 	ldw	r4,40(sp)
10008b08:	d9800d17 	ldw	r6,52(sp)
10008b0c:	dd400a15 	stw	r21,40(sp)
10008b10:	a905c83a 	sub	r2,r21,r4
10008b14:	308d883a 	add	r6,r6,r2
10008b18:	d9800d15 	stw	r6,52(sp)
10008b1c:	002b883a 	mov	r21,zero
10008b20:	003e0606 	br	1000833c <__alt_data_end+0xf800833c>
10008b24:	9023883a 	mov	r17,r18
10008b28:	9829883a 	mov	r20,r19
10008b2c:	04000084 	movi	r16,2
10008b30:	003c9206 	br	10007d7c <__alt_data_end+0xf8007d7c>
10008b34:	04000044 	movi	r16,1
10008b38:	dc000c15 	stw	r16,48(sp)
10008b3c:	dc000615 	stw	r16,24(sp)
10008b40:	dc002215 	stw	r16,136(sp)
10008b44:	e0001115 	stw	zero,68(fp)
10008b48:	000b883a 	mov	r5,zero
10008b4c:	003c6906 	br	10007cf4 <__alt_data_end+0xf8007cf4>
10008b50:	3021883a 	mov	r16,r6
10008b54:	003ffb06 	br	10008b44 <__alt_data_end+0xf8008b44>
10008b58:	1000021e 	bne	r2,zero,10008b64 <_dtoa_r+0x11e0>
10008b5c:	4200004c 	andi	r8,r8,1
10008b60:	403e7d1e 	bne	r8,zero,10008558 <__alt_data_end+0xf8008558>
10008b64:	01000c04 	movi	r4,48
10008b68:	00000106 	br	10008b70 <_dtoa_r+0x11ec>
10008b6c:	102f883a 	mov	r23,r2
10008b70:	b8bfffc4 	addi	r2,r23,-1
10008b74:	10c00007 	ldb	r3,0(r2)
10008b78:	193ffc26 	beq	r3,r4,10008b6c <__alt_data_end+0xf8008b6c>
10008b7c:	003e8706 	br	1000859c <__alt_data_end+0xf800859c>
10008b80:	d8800517 	ldw	r2,20(sp)
10008b84:	00a3c83a 	sub	r17,zero,r2
10008b88:	8800a426 	beq	r17,zero,10008e1c <_dtoa_r+0x1498>
10008b8c:	888003cc 	andi	r2,r17,15
10008b90:	100490fa 	slli	r2,r2,3
10008b94:	00c40074 	movhi	r3,4097
10008b98:	18d3bc04 	addi	r3,r3,20208
10008b9c:	1885883a 	add	r2,r3,r2
10008ba0:	11800017 	ldw	r6,0(r2)
10008ba4:	11c00117 	ldw	r7,4(r2)
10008ba8:	9009883a 	mov	r4,r18
10008bac:	980b883a 	mov	r5,r19
10008bb0:	8823d13a 	srai	r17,r17,4
10008bb4:	0010a100 	call	10010a10 <__muldf3>
10008bb8:	d8800f15 	stw	r2,60(sp)
10008bbc:	d8c01015 	stw	r3,64(sp)
10008bc0:	8800e826 	beq	r17,zero,10008f64 <_dtoa_r+0x15e0>
10008bc4:	05040074 	movhi	r20,4097
10008bc8:	a513b204 	addi	r20,r20,20168
10008bcc:	04000084 	movi	r16,2
10008bd0:	8980004c 	andi	r6,r17,1
10008bd4:	1009883a 	mov	r4,r2
10008bd8:	8823d07a 	srai	r17,r17,1
10008bdc:	180b883a 	mov	r5,r3
10008be0:	30000426 	beq	r6,zero,10008bf4 <_dtoa_r+0x1270>
10008be4:	a1800017 	ldw	r6,0(r20)
10008be8:	a1c00117 	ldw	r7,4(r20)
10008bec:	84000044 	addi	r16,r16,1
10008bf0:	0010a100 	call	10010a10 <__muldf3>
10008bf4:	a5000204 	addi	r20,r20,8
10008bf8:	883ff51e 	bne	r17,zero,10008bd0 <__alt_data_end+0xf8008bd0>
10008bfc:	d8800f15 	stw	r2,60(sp)
10008c00:	d8c01015 	stw	r3,64(sp)
10008c04:	003c7606 	br	10007de0 <__alt_data_end+0xf8007de0>
10008c08:	00c00c04 	movi	r3,48
10008c0c:	10c00005 	stb	r3,0(r2)
10008c10:	d8c00517 	ldw	r3,20(sp)
10008c14:	bd3fffc3 	ldbu	r20,-1(r23)
10008c18:	18c00044 	addi	r3,r3,1
10008c1c:	d8c00515 	stw	r3,20(sp)
10008c20:	003db906 	br	10008308 <__alt_data_end+0xf8008308>
10008c24:	89400117 	ldw	r5,4(r17)
10008c28:	e009883a 	mov	r4,fp
10008c2c:	000b03c0 	call	1000b03c <_Balloc>
10008c30:	89800417 	ldw	r6,16(r17)
10008c34:	89400304 	addi	r5,r17,12
10008c38:	11000304 	addi	r4,r2,12
10008c3c:	31800084 	addi	r6,r6,2
10008c40:	318d883a 	add	r6,r6,r6
10008c44:	318d883a 	add	r6,r6,r6
10008c48:	1027883a 	mov	r19,r2
10008c4c:	000ac700 	call	1000ac70 <memcpy>
10008c50:	01800044 	movi	r6,1
10008c54:	980b883a 	mov	r5,r19
10008c58:	e009883a 	mov	r4,fp
10008c5c:	000b8780 	call	1000b878 <__lshift>
10008c60:	1029883a 	mov	r20,r2
10008c64:	003ecc06 	br	10008798 <__alt_data_end+0xf8008798>
10008c68:	00800e44 	movi	r2,57
10008c6c:	90809026 	beq	r18,r2,10008eb0 <_dtoa_r+0x152c>
10008c70:	92000044 	addi	r8,r18,1
10008c74:	003f1f06 	br	100088f4 <__alt_data_end+0xf80088f4>
10008c78:	9011883a 	mov	r8,r18
10008c7c:	8825883a 	mov	r18,r17
10008c80:	a023883a 	mov	r17,r20
10008c84:	003e2906 	br	1000852c <__alt_data_end+0xf800852c>
10008c88:	002b883a 	mov	r21,zero
10008c8c:	0023883a 	mov	r17,zero
10008c90:	003f5406 	br	100089e4 <__alt_data_end+0xf80089e4>
10008c94:	61bfffc4 	addi	r6,r12,-1
10008c98:	300490fa 	slli	r2,r6,3
10008c9c:	00c40074 	movhi	r3,4097
10008ca0:	18d3bc04 	addi	r3,r3,20208
10008ca4:	1885883a 	add	r2,r3,r2
10008ca8:	11000017 	ldw	r4,0(r2)
10008cac:	11400117 	ldw	r5,4(r2)
10008cb0:	d8800717 	ldw	r2,28(sp)
10008cb4:	880f883a 	mov	r7,r17
10008cb8:	d9801215 	stw	r6,72(sp)
10008cbc:	800d883a 	mov	r6,r16
10008cc0:	db001615 	stw	r12,88(sp)
10008cc4:	15c00044 	addi	r23,r2,1
10008cc8:	0010a100 	call	10010a10 <__muldf3>
10008ccc:	d9401017 	ldw	r5,64(sp)
10008cd0:	d9000f17 	ldw	r4,60(sp)
10008cd4:	d8c01515 	stw	r3,84(sp)
10008cd8:	d8801415 	stw	r2,80(sp)
10008cdc:	0011b780 	call	10011b78 <__fixdfsi>
10008ce0:	1009883a 	mov	r4,r2
10008ce4:	1021883a 	mov	r16,r2
10008ce8:	0011bf80 	call	10011bf8 <__floatsidf>
10008cec:	d9000f17 	ldw	r4,60(sp)
10008cf0:	d9401017 	ldw	r5,64(sp)
10008cf4:	100d883a 	mov	r6,r2
10008cf8:	180f883a 	mov	r7,r3
10008cfc:	001127c0 	call	1001127c <__subdf3>
10008d00:	1829883a 	mov	r20,r3
10008d04:	d8c00717 	ldw	r3,28(sp)
10008d08:	84000c04 	addi	r16,r16,48
10008d0c:	1023883a 	mov	r17,r2
10008d10:	1c000005 	stb	r16,0(r3)
10008d14:	db001617 	ldw	r12,88(sp)
10008d18:	00800044 	movi	r2,1
10008d1c:	60802226 	beq	r12,r2,10008da8 <_dtoa_r+0x1424>
10008d20:	d9c00717 	ldw	r7,28(sp)
10008d24:	8805883a 	mov	r2,r17
10008d28:	b82b883a 	mov	r21,r23
10008d2c:	3b19883a 	add	r12,r7,r12
10008d30:	6023883a 	mov	r17,r12
10008d34:	a007883a 	mov	r3,r20
10008d38:	dc800f15 	stw	r18,60(sp)
10008d3c:	000d883a 	mov	r6,zero
10008d40:	01d00934 	movhi	r7,16420
10008d44:	1009883a 	mov	r4,r2
10008d48:	180b883a 	mov	r5,r3
10008d4c:	0010a100 	call	10010a10 <__muldf3>
10008d50:	180b883a 	mov	r5,r3
10008d54:	1009883a 	mov	r4,r2
10008d58:	1829883a 	mov	r20,r3
10008d5c:	1025883a 	mov	r18,r2
10008d60:	0011b780 	call	10011b78 <__fixdfsi>
10008d64:	1009883a 	mov	r4,r2
10008d68:	1021883a 	mov	r16,r2
10008d6c:	0011bf80 	call	10011bf8 <__floatsidf>
10008d70:	100d883a 	mov	r6,r2
10008d74:	180f883a 	mov	r7,r3
10008d78:	9009883a 	mov	r4,r18
10008d7c:	a00b883a 	mov	r5,r20
10008d80:	84000c04 	addi	r16,r16,48
10008d84:	001127c0 	call	1001127c <__subdf3>
10008d88:	ad400044 	addi	r21,r21,1
10008d8c:	ac3fffc5 	stb	r16,-1(r21)
10008d90:	ac7fea1e 	bne	r21,r17,10008d3c <__alt_data_end+0xf8008d3c>
10008d94:	1023883a 	mov	r17,r2
10008d98:	d8801217 	ldw	r2,72(sp)
10008d9c:	dc800f17 	ldw	r18,60(sp)
10008da0:	1829883a 	mov	r20,r3
10008da4:	b8af883a 	add	r23,r23,r2
10008da8:	d9001417 	ldw	r4,80(sp)
10008dac:	d9401517 	ldw	r5,84(sp)
10008db0:	000d883a 	mov	r6,zero
10008db4:	01cff834 	movhi	r7,16352
10008db8:	000f53c0 	call	1000f53c <__adddf3>
10008dbc:	880d883a 	mov	r6,r17
10008dc0:	a00f883a 	mov	r7,r20
10008dc4:	1009883a 	mov	r4,r2
10008dc8:	180b883a 	mov	r5,r3
10008dcc:	001091c0 	call	1001091c <__ledf2>
10008dd0:	10003e0e 	bge	r2,zero,10008ecc <_dtoa_r+0x1548>
10008dd4:	d9001317 	ldw	r4,76(sp)
10008dd8:	bd3fffc3 	ldbu	r20,-1(r23)
10008ddc:	d9000515 	stw	r4,20(sp)
10008de0:	003d3b06 	br	100082d0 <__alt_data_end+0xf80082d0>
10008de4:	0027883a 	mov	r19,zero
10008de8:	003f1b06 	br	10008a58 <__alt_data_end+0xf8008a58>
10008dec:	d8800817 	ldw	r2,32(sp)
10008df0:	11e9c83a 	sub	r20,r2,r7
10008df4:	0005883a 	mov	r2,zero
10008df8:	003d5406 	br	1000834c <__alt_data_end+0xf800834c>
10008dfc:	00800044 	movi	r2,1
10008e00:	003dc706 	br	10008520 <__alt_data_end+0xf8008520>
10008e04:	d8c00217 	ldw	r3,8(sp)
10008e08:	00800d84 	movi	r2,54
10008e0c:	dd400a17 	ldw	r21,40(sp)
10008e10:	10c5c83a 	sub	r2,r2,r3
10008e14:	dd000817 	ldw	r20,32(sp)
10008e18:	003d4c06 	br	1000834c <__alt_data_end+0xf800834c>
10008e1c:	dc800f15 	stw	r18,60(sp)
10008e20:	dcc01015 	stw	r19,64(sp)
10008e24:	04000084 	movi	r16,2
10008e28:	003bed06 	br	10007de0 <__alt_data_end+0xf8007de0>
10008e2c:	d9000617 	ldw	r4,24(sp)
10008e30:	203f0d26 	beq	r4,zero,10008a68 <__alt_data_end+0xf8008a68>
10008e34:	d9800c17 	ldw	r6,48(sp)
10008e38:	01bcab0e 	bge	zero,r6,100080e8 <__alt_data_end+0xf80080e8>
10008e3c:	d9401017 	ldw	r5,64(sp)
10008e40:	d9000f17 	ldw	r4,60(sp)
10008e44:	000d883a 	mov	r6,zero
10008e48:	01d00934 	movhi	r7,16420
10008e4c:	0010a100 	call	10010a10 <__muldf3>
10008e50:	81000044 	addi	r4,r16,1
10008e54:	d8800f15 	stw	r2,60(sp)
10008e58:	d8c01015 	stw	r3,64(sp)
10008e5c:	0011bf80 	call	10011bf8 <__floatsidf>
10008e60:	d9800f17 	ldw	r6,60(sp)
10008e64:	d9c01017 	ldw	r7,64(sp)
10008e68:	1009883a 	mov	r4,r2
10008e6c:	180b883a 	mov	r5,r3
10008e70:	0010a100 	call	10010a10 <__muldf3>
10008e74:	01d00734 	movhi	r7,16412
10008e78:	000d883a 	mov	r6,zero
10008e7c:	1009883a 	mov	r4,r2
10008e80:	180b883a 	mov	r5,r3
10008e84:	000f53c0 	call	1000f53c <__adddf3>
10008e88:	d9c00517 	ldw	r7,20(sp)
10008e8c:	047f3034 	movhi	r17,64704
10008e90:	1021883a 	mov	r16,r2
10008e94:	39ffffc4 	addi	r7,r7,-1
10008e98:	d9c01315 	stw	r7,76(sp)
10008e9c:	1c63883a 	add	r17,r3,r17
10008ea0:	db000c17 	ldw	r12,48(sp)
10008ea4:	003bea06 	br	10007e50 <__alt_data_end+0xf8007e50>
10008ea8:	dc000915 	stw	r16,36(sp)
10008eac:	003e0e06 	br	100086e8 <__alt_data_end+0xf80086e8>
10008eb0:	01000e44 	movi	r4,57
10008eb4:	8825883a 	mov	r18,r17
10008eb8:	9dc00044 	addi	r23,r19,1
10008ebc:	99000005 	stb	r4,0(r19)
10008ec0:	a023883a 	mov	r17,r20
10008ec4:	dc000915 	stw	r16,36(sp)
10008ec8:	003da406 	br	1000855c <__alt_data_end+0xf800855c>
10008ecc:	d9801417 	ldw	r6,80(sp)
10008ed0:	d9c01517 	ldw	r7,84(sp)
10008ed4:	0009883a 	mov	r4,zero
10008ed8:	014ff834 	movhi	r5,16352
10008edc:	001127c0 	call	1001127c <__subdf3>
10008ee0:	880d883a 	mov	r6,r17
10008ee4:	a00f883a 	mov	r7,r20
10008ee8:	1009883a 	mov	r4,r2
10008eec:	180b883a 	mov	r5,r3
10008ef0:	00108400 	call	10010840 <__gedf2>
10008ef4:	00bc7c0e 	bge	zero,r2,100080e8 <__alt_data_end+0xf80080e8>
10008ef8:	01000c04 	movi	r4,48
10008efc:	00000106 	br	10008f04 <_dtoa_r+0x1580>
10008f00:	102f883a 	mov	r23,r2
10008f04:	b8bfffc4 	addi	r2,r23,-1
10008f08:	10c00007 	ldb	r3,0(r2)
10008f0c:	193ffc26 	beq	r3,r4,10008f00 <__alt_data_end+0xf8008f00>
10008f10:	d9801317 	ldw	r6,76(sp)
10008f14:	d9800515 	stw	r6,20(sp)
10008f18:	003c4406 	br	1000802c <__alt_data_end+0xf800802c>
10008f1c:	d9801317 	ldw	r6,76(sp)
10008f20:	d9800515 	stw	r6,20(sp)
10008f24:	003cea06 	br	100082d0 <__alt_data_end+0xf80082d0>
10008f28:	dd800f17 	ldw	r22,60(sp)
10008f2c:	dcc01017 	ldw	r19,64(sp)
10008f30:	dc801217 	ldw	r18,72(sp)
10008f34:	003c6c06 	br	100080e8 <__alt_data_end+0xf80080e8>
10008f38:	903e031e 	bne	r18,zero,10008748 <__alt_data_end+0xf8008748>
10008f3c:	003ebb06 	br	10008a2c <__alt_data_end+0xf8008a2c>
10008f40:	103e6c1e 	bne	r2,zero,100088f4 <__alt_data_end+0xf80088f4>
10008f44:	4080004c 	andi	r2,r8,1
10008f48:	103e6a26 	beq	r2,zero,100088f4 <__alt_data_end+0xf80088f4>
10008f4c:	003e6606 	br	100088e8 <__alt_data_end+0xf80088e8>
10008f50:	d8c00317 	ldw	r3,12(sp)
10008f54:	00800084 	movi	r2,2
10008f58:	10c02916 	blt	r2,r3,10009000 <_dtoa_r+0x167c>
10008f5c:	d9000c17 	ldw	r4,48(sp)
10008f60:	003e8806 	br	10008984 <__alt_data_end+0xf8008984>
10008f64:	04000084 	movi	r16,2
10008f68:	003b9d06 	br	10007de0 <__alt_data_end+0xf8007de0>
10008f6c:	d9001317 	ldw	r4,76(sp)
10008f70:	d9000515 	stw	r4,20(sp)
10008f74:	003cd606 	br	100082d0 <__alt_data_end+0xf80082d0>
10008f78:	d8801317 	ldw	r2,76(sp)
10008f7c:	d8800515 	stw	r2,20(sp)
10008f80:	003c2a06 	br	1000802c <__alt_data_end+0xf800802c>
10008f84:	d9800317 	ldw	r6,12(sp)
10008f88:	00800084 	movi	r2,2
10008f8c:	11801516 	blt	r2,r6,10008fe4 <_dtoa_r+0x1660>
10008f90:	d9c00c17 	ldw	r7,48(sp)
10008f94:	d9c00615 	stw	r7,24(sp)
10008f98:	003df706 	br	10008778 <__alt_data_end+0xf8008778>
10008f9c:	193d3926 	beq	r3,r4,10008484 <__alt_data_end+0xf8008484>
10008fa0:	00c00f04 	movi	r3,60
10008fa4:	1885c83a 	sub	r2,r3,r2
10008fa8:	003ddf06 	br	10008728 <__alt_data_end+0xf8008728>
10008fac:	e009883a 	mov	r4,fp
10008fb0:	e0001115 	stw	zero,68(fp)
10008fb4:	000b883a 	mov	r5,zero
10008fb8:	000b03c0 	call	1000b03c <_Balloc>
10008fbc:	d8800715 	stw	r2,28(sp)
10008fc0:	d8c00717 	ldw	r3,28(sp)
10008fc4:	00bfffc4 	movi	r2,-1
10008fc8:	01000044 	movi	r4,1
10008fcc:	d8800c15 	stw	r2,48(sp)
10008fd0:	e0c01015 	stw	r3,64(fp)
10008fd4:	d9000b15 	stw	r4,44(sp)
10008fd8:	d8800615 	stw	r2,24(sp)
10008fdc:	d8002215 	stw	zero,136(sp)
10008fe0:	003c4106 	br	100080e8 <__alt_data_end+0xf80080e8>
10008fe4:	d8c00c17 	ldw	r3,48(sp)
10008fe8:	d8c00615 	stw	r3,24(sp)
10008fec:	003e7006 	br	100089b0 <__alt_data_end+0xf80089b0>
10008ff0:	04400044 	movi	r17,1
10008ff4:	003b2006 	br	10007c78 <__alt_data_end+0xf8007c78>
10008ff8:	000b883a 	mov	r5,zero
10008ffc:	003b3d06 	br	10007cf4 <__alt_data_end+0xf8007cf4>
10009000:	d8800c17 	ldw	r2,48(sp)
10009004:	d8800615 	stw	r2,24(sp)
10009008:	003e6906 	br	100089b0 <__alt_data_end+0xf80089b0>

1000900c <__sflush_r>:
1000900c:	2880030b 	ldhu	r2,12(r5)
10009010:	defffb04 	addi	sp,sp,-20
10009014:	dcc00315 	stw	r19,12(sp)
10009018:	dc400115 	stw	r17,4(sp)
1000901c:	dfc00415 	stw	ra,16(sp)
10009020:	dc800215 	stw	r18,8(sp)
10009024:	dc000015 	stw	r16,0(sp)
10009028:	10c0020c 	andi	r3,r2,8
1000902c:	2823883a 	mov	r17,r5
10009030:	2027883a 	mov	r19,r4
10009034:	1800311e 	bne	r3,zero,100090fc <__sflush_r+0xf0>
10009038:	28c00117 	ldw	r3,4(r5)
1000903c:	10820014 	ori	r2,r2,2048
10009040:	2880030d 	sth	r2,12(r5)
10009044:	00c04b0e 	bge	zero,r3,10009174 <__sflush_r+0x168>
10009048:	8a000a17 	ldw	r8,40(r17)
1000904c:	40002326 	beq	r8,zero,100090dc <__sflush_r+0xd0>
10009050:	9c000017 	ldw	r16,0(r19)
10009054:	10c4000c 	andi	r3,r2,4096
10009058:	98000015 	stw	zero,0(r19)
1000905c:	18004826 	beq	r3,zero,10009180 <__sflush_r+0x174>
10009060:	89801417 	ldw	r6,80(r17)
10009064:	10c0010c 	andi	r3,r2,4
10009068:	18000626 	beq	r3,zero,10009084 <__sflush_r+0x78>
1000906c:	88c00117 	ldw	r3,4(r17)
10009070:	88800c17 	ldw	r2,48(r17)
10009074:	30cdc83a 	sub	r6,r6,r3
10009078:	10000226 	beq	r2,zero,10009084 <__sflush_r+0x78>
1000907c:	88800f17 	ldw	r2,60(r17)
10009080:	308dc83a 	sub	r6,r6,r2
10009084:	89400717 	ldw	r5,28(r17)
10009088:	000f883a 	mov	r7,zero
1000908c:	9809883a 	mov	r4,r19
10009090:	403ee83a 	callr	r8
10009094:	00ffffc4 	movi	r3,-1
10009098:	10c04426 	beq	r2,r3,100091ac <__sflush_r+0x1a0>
1000909c:	88c0030b 	ldhu	r3,12(r17)
100090a0:	89000417 	ldw	r4,16(r17)
100090a4:	88000115 	stw	zero,4(r17)
100090a8:	197dffcc 	andi	r5,r3,63487
100090ac:	8940030d 	sth	r5,12(r17)
100090b0:	89000015 	stw	r4,0(r17)
100090b4:	18c4000c 	andi	r3,r3,4096
100090b8:	18002c1e 	bne	r3,zero,1000916c <__sflush_r+0x160>
100090bc:	89400c17 	ldw	r5,48(r17)
100090c0:	9c000015 	stw	r16,0(r19)
100090c4:	28000526 	beq	r5,zero,100090dc <__sflush_r+0xd0>
100090c8:	88801004 	addi	r2,r17,64
100090cc:	28800226 	beq	r5,r2,100090d8 <__sflush_r+0xcc>
100090d0:	9809883a 	mov	r4,r19
100090d4:	00097880 	call	10009788 <_free_r>
100090d8:	88000c15 	stw	zero,48(r17)
100090dc:	0005883a 	mov	r2,zero
100090e0:	dfc00417 	ldw	ra,16(sp)
100090e4:	dcc00317 	ldw	r19,12(sp)
100090e8:	dc800217 	ldw	r18,8(sp)
100090ec:	dc400117 	ldw	r17,4(sp)
100090f0:	dc000017 	ldw	r16,0(sp)
100090f4:	dec00504 	addi	sp,sp,20
100090f8:	f800283a 	ret
100090fc:	2c800417 	ldw	r18,16(r5)
10009100:	903ff626 	beq	r18,zero,100090dc <__alt_data_end+0xf80090dc>
10009104:	2c000017 	ldw	r16,0(r5)
10009108:	108000cc 	andi	r2,r2,3
1000910c:	2c800015 	stw	r18,0(r5)
10009110:	84a1c83a 	sub	r16,r16,r18
10009114:	1000131e 	bne	r2,zero,10009164 <__sflush_r+0x158>
10009118:	28800517 	ldw	r2,20(r5)
1000911c:	88800215 	stw	r2,8(r17)
10009120:	04000316 	blt	zero,r16,10009130 <__sflush_r+0x124>
10009124:	003fed06 	br	100090dc <__alt_data_end+0xf80090dc>
10009128:	90a5883a 	add	r18,r18,r2
1000912c:	043feb0e 	bge	zero,r16,100090dc <__alt_data_end+0xf80090dc>
10009130:	88800917 	ldw	r2,36(r17)
10009134:	89400717 	ldw	r5,28(r17)
10009138:	800f883a 	mov	r7,r16
1000913c:	900d883a 	mov	r6,r18
10009140:	9809883a 	mov	r4,r19
10009144:	103ee83a 	callr	r2
10009148:	80a1c83a 	sub	r16,r16,r2
1000914c:	00bff616 	blt	zero,r2,10009128 <__alt_data_end+0xf8009128>
10009150:	88c0030b 	ldhu	r3,12(r17)
10009154:	00bfffc4 	movi	r2,-1
10009158:	18c01014 	ori	r3,r3,64
1000915c:	88c0030d 	sth	r3,12(r17)
10009160:	003fdf06 	br	100090e0 <__alt_data_end+0xf80090e0>
10009164:	0005883a 	mov	r2,zero
10009168:	003fec06 	br	1000911c <__alt_data_end+0xf800911c>
1000916c:	88801415 	stw	r2,80(r17)
10009170:	003fd206 	br	100090bc <__alt_data_end+0xf80090bc>
10009174:	28c00f17 	ldw	r3,60(r5)
10009178:	00ffb316 	blt	zero,r3,10009048 <__alt_data_end+0xf8009048>
1000917c:	003fd706 	br	100090dc <__alt_data_end+0xf80090dc>
10009180:	89400717 	ldw	r5,28(r17)
10009184:	000d883a 	mov	r6,zero
10009188:	01c00044 	movi	r7,1
1000918c:	9809883a 	mov	r4,r19
10009190:	403ee83a 	callr	r8
10009194:	100d883a 	mov	r6,r2
10009198:	00bfffc4 	movi	r2,-1
1000919c:	30801426 	beq	r6,r2,100091f0 <__sflush_r+0x1e4>
100091a0:	8880030b 	ldhu	r2,12(r17)
100091a4:	8a000a17 	ldw	r8,40(r17)
100091a8:	003fae06 	br	10009064 <__alt_data_end+0xf8009064>
100091ac:	98c00017 	ldw	r3,0(r19)
100091b0:	183fba26 	beq	r3,zero,1000909c <__alt_data_end+0xf800909c>
100091b4:	01000744 	movi	r4,29
100091b8:	19000626 	beq	r3,r4,100091d4 <__sflush_r+0x1c8>
100091bc:	01000584 	movi	r4,22
100091c0:	19000426 	beq	r3,r4,100091d4 <__sflush_r+0x1c8>
100091c4:	88c0030b 	ldhu	r3,12(r17)
100091c8:	18c01014 	ori	r3,r3,64
100091cc:	88c0030d 	sth	r3,12(r17)
100091d0:	003fc306 	br	100090e0 <__alt_data_end+0xf80090e0>
100091d4:	8880030b 	ldhu	r2,12(r17)
100091d8:	88c00417 	ldw	r3,16(r17)
100091dc:	88000115 	stw	zero,4(r17)
100091e0:	10bdffcc 	andi	r2,r2,63487
100091e4:	8880030d 	sth	r2,12(r17)
100091e8:	88c00015 	stw	r3,0(r17)
100091ec:	003fb306 	br	100090bc <__alt_data_end+0xf80090bc>
100091f0:	98800017 	ldw	r2,0(r19)
100091f4:	103fea26 	beq	r2,zero,100091a0 <__alt_data_end+0xf80091a0>
100091f8:	00c00744 	movi	r3,29
100091fc:	10c00226 	beq	r2,r3,10009208 <__sflush_r+0x1fc>
10009200:	00c00584 	movi	r3,22
10009204:	10c0031e 	bne	r2,r3,10009214 <__sflush_r+0x208>
10009208:	9c000015 	stw	r16,0(r19)
1000920c:	0005883a 	mov	r2,zero
10009210:	003fb306 	br	100090e0 <__alt_data_end+0xf80090e0>
10009214:	88c0030b 	ldhu	r3,12(r17)
10009218:	3005883a 	mov	r2,r6
1000921c:	18c01014 	ori	r3,r3,64
10009220:	88c0030d 	sth	r3,12(r17)
10009224:	003fae06 	br	100090e0 <__alt_data_end+0xf80090e0>

10009228 <_fflush_r>:
10009228:	defffd04 	addi	sp,sp,-12
1000922c:	dc000115 	stw	r16,4(sp)
10009230:	dfc00215 	stw	ra,8(sp)
10009234:	2021883a 	mov	r16,r4
10009238:	20000226 	beq	r4,zero,10009244 <_fflush_r+0x1c>
1000923c:	20800e17 	ldw	r2,56(r4)
10009240:	10000c26 	beq	r2,zero,10009274 <_fflush_r+0x4c>
10009244:	2880030f 	ldh	r2,12(r5)
10009248:	1000051e 	bne	r2,zero,10009260 <_fflush_r+0x38>
1000924c:	0005883a 	mov	r2,zero
10009250:	dfc00217 	ldw	ra,8(sp)
10009254:	dc000117 	ldw	r16,4(sp)
10009258:	dec00304 	addi	sp,sp,12
1000925c:	f800283a 	ret
10009260:	8009883a 	mov	r4,r16
10009264:	dfc00217 	ldw	ra,8(sp)
10009268:	dc000117 	ldw	r16,4(sp)
1000926c:	dec00304 	addi	sp,sp,12
10009270:	000900c1 	jmpi	1000900c <__sflush_r>
10009274:	d9400015 	stw	r5,0(sp)
10009278:	00096140 	call	10009614 <__sinit>
1000927c:	d9400017 	ldw	r5,0(sp)
10009280:	003ff006 	br	10009244 <__alt_data_end+0xf8009244>

10009284 <fflush>:
10009284:	20000526 	beq	r4,zero,1000929c <fflush+0x18>
10009288:	008400b4 	movhi	r2,4098
1000928c:	108a1204 	addi	r2,r2,10312
10009290:	200b883a 	mov	r5,r4
10009294:	11000017 	ldw	r4,0(r2)
10009298:	00092281 	jmpi	10009228 <_fflush_r>
1000929c:	008400b4 	movhi	r2,4098
100092a0:	108a1104 	addi	r2,r2,10308
100092a4:	11000017 	ldw	r4,0(r2)
100092a8:	01440074 	movhi	r5,4097
100092ac:	29648a04 	addi	r5,r5,-28120
100092b0:	000a0241 	jmpi	1000a024 <_fwalk_reent>

100092b4 <__fp_unlock>:
100092b4:	0005883a 	mov	r2,zero
100092b8:	f800283a 	ret

100092bc <_cleanup_r>:
100092bc:	01440074 	movhi	r5,4097
100092c0:	29787004 	addi	r5,r5,-7744
100092c4:	000a0241 	jmpi	1000a024 <_fwalk_reent>

100092c8 <__sinit.part.1>:
100092c8:	defff704 	addi	sp,sp,-36
100092cc:	00c40074 	movhi	r3,4097
100092d0:	dfc00815 	stw	ra,32(sp)
100092d4:	ddc00715 	stw	r23,28(sp)
100092d8:	dd800615 	stw	r22,24(sp)
100092dc:	dd400515 	stw	r21,20(sp)
100092e0:	dd000415 	stw	r20,16(sp)
100092e4:	dcc00315 	stw	r19,12(sp)
100092e8:	dc800215 	stw	r18,8(sp)
100092ec:	dc400115 	stw	r17,4(sp)
100092f0:	dc000015 	stw	r16,0(sp)
100092f4:	18e4af04 	addi	r3,r3,-27972
100092f8:	24000117 	ldw	r16,4(r4)
100092fc:	20c00f15 	stw	r3,60(r4)
10009300:	2080bb04 	addi	r2,r4,748
10009304:	00c000c4 	movi	r3,3
10009308:	20c0b915 	stw	r3,740(r4)
1000930c:	2080ba15 	stw	r2,744(r4)
10009310:	2000b815 	stw	zero,736(r4)
10009314:	05c00204 	movi	r23,8
10009318:	00800104 	movi	r2,4
1000931c:	2025883a 	mov	r18,r4
10009320:	b80d883a 	mov	r6,r23
10009324:	81001704 	addi	r4,r16,92
10009328:	000b883a 	mov	r5,zero
1000932c:	80000015 	stw	zero,0(r16)
10009330:	80000115 	stw	zero,4(r16)
10009334:	80000215 	stw	zero,8(r16)
10009338:	8080030d 	sth	r2,12(r16)
1000933c:	80001915 	stw	zero,100(r16)
10009340:	8000038d 	sth	zero,14(r16)
10009344:	80000415 	stw	zero,16(r16)
10009348:	80000515 	stw	zero,20(r16)
1000934c:	80000615 	stw	zero,24(r16)
10009350:	000af140 	call	1000af14 <memset>
10009354:	05840074 	movhi	r22,4097
10009358:	94400217 	ldw	r17,8(r18)
1000935c:	05440074 	movhi	r21,4097
10009360:	05040074 	movhi	r20,4097
10009364:	04c40074 	movhi	r19,4097
10009368:	b5b1c804 	addi	r22,r22,-14560
1000936c:	ad71df04 	addi	r21,r21,-14468
10009370:	a531fe04 	addi	r20,r20,-14344
10009374:	9cf21504 	addi	r19,r19,-14252
10009378:	85800815 	stw	r22,32(r16)
1000937c:	85400915 	stw	r21,36(r16)
10009380:	85000a15 	stw	r20,40(r16)
10009384:	84c00b15 	stw	r19,44(r16)
10009388:	84000715 	stw	r16,28(r16)
1000938c:	00800284 	movi	r2,10
10009390:	8880030d 	sth	r2,12(r17)
10009394:	00800044 	movi	r2,1
10009398:	b80d883a 	mov	r6,r23
1000939c:	89001704 	addi	r4,r17,92
100093a0:	000b883a 	mov	r5,zero
100093a4:	88000015 	stw	zero,0(r17)
100093a8:	88000115 	stw	zero,4(r17)
100093ac:	88000215 	stw	zero,8(r17)
100093b0:	88001915 	stw	zero,100(r17)
100093b4:	8880038d 	sth	r2,14(r17)
100093b8:	88000415 	stw	zero,16(r17)
100093bc:	88000515 	stw	zero,20(r17)
100093c0:	88000615 	stw	zero,24(r17)
100093c4:	000af140 	call	1000af14 <memset>
100093c8:	94000317 	ldw	r16,12(r18)
100093cc:	00800484 	movi	r2,18
100093d0:	8c400715 	stw	r17,28(r17)
100093d4:	8d800815 	stw	r22,32(r17)
100093d8:	8d400915 	stw	r21,36(r17)
100093dc:	8d000a15 	stw	r20,40(r17)
100093e0:	8cc00b15 	stw	r19,44(r17)
100093e4:	8080030d 	sth	r2,12(r16)
100093e8:	00800084 	movi	r2,2
100093ec:	80000015 	stw	zero,0(r16)
100093f0:	80000115 	stw	zero,4(r16)
100093f4:	80000215 	stw	zero,8(r16)
100093f8:	80001915 	stw	zero,100(r16)
100093fc:	8080038d 	sth	r2,14(r16)
10009400:	80000415 	stw	zero,16(r16)
10009404:	80000515 	stw	zero,20(r16)
10009408:	80000615 	stw	zero,24(r16)
1000940c:	b80d883a 	mov	r6,r23
10009410:	000b883a 	mov	r5,zero
10009414:	81001704 	addi	r4,r16,92
10009418:	000af140 	call	1000af14 <memset>
1000941c:	00800044 	movi	r2,1
10009420:	84000715 	stw	r16,28(r16)
10009424:	85800815 	stw	r22,32(r16)
10009428:	85400915 	stw	r21,36(r16)
1000942c:	85000a15 	stw	r20,40(r16)
10009430:	84c00b15 	stw	r19,44(r16)
10009434:	90800e15 	stw	r2,56(r18)
10009438:	dfc00817 	ldw	ra,32(sp)
1000943c:	ddc00717 	ldw	r23,28(sp)
10009440:	dd800617 	ldw	r22,24(sp)
10009444:	dd400517 	ldw	r21,20(sp)
10009448:	dd000417 	ldw	r20,16(sp)
1000944c:	dcc00317 	ldw	r19,12(sp)
10009450:	dc800217 	ldw	r18,8(sp)
10009454:	dc400117 	ldw	r17,4(sp)
10009458:	dc000017 	ldw	r16,0(sp)
1000945c:	dec00904 	addi	sp,sp,36
10009460:	f800283a 	ret

10009464 <__fp_lock>:
10009464:	0005883a 	mov	r2,zero
10009468:	f800283a 	ret

1000946c <__sfmoreglue>:
1000946c:	defffc04 	addi	sp,sp,-16
10009470:	dc800215 	stw	r18,8(sp)
10009474:	2825883a 	mov	r18,r5
10009478:	dc000015 	stw	r16,0(sp)
1000947c:	01401a04 	movi	r5,104
10009480:	2021883a 	mov	r16,r4
10009484:	913fffc4 	addi	r4,r18,-1
10009488:	dfc00315 	stw	ra,12(sp)
1000948c:	dc400115 	stw	r17,4(sp)
10009490:	00050540 	call	10005054 <__mulsi3>
10009494:	8009883a 	mov	r4,r16
10009498:	11401d04 	addi	r5,r2,116
1000949c:	1023883a 	mov	r17,r2
100094a0:	000a3800 	call	1000a380 <_malloc_r>
100094a4:	1021883a 	mov	r16,r2
100094a8:	10000726 	beq	r2,zero,100094c8 <__sfmoreglue+0x5c>
100094ac:	11000304 	addi	r4,r2,12
100094b0:	10000015 	stw	zero,0(r2)
100094b4:	14800115 	stw	r18,4(r2)
100094b8:	11000215 	stw	r4,8(r2)
100094bc:	89801a04 	addi	r6,r17,104
100094c0:	000b883a 	mov	r5,zero
100094c4:	000af140 	call	1000af14 <memset>
100094c8:	8005883a 	mov	r2,r16
100094cc:	dfc00317 	ldw	ra,12(sp)
100094d0:	dc800217 	ldw	r18,8(sp)
100094d4:	dc400117 	ldw	r17,4(sp)
100094d8:	dc000017 	ldw	r16,0(sp)
100094dc:	dec00404 	addi	sp,sp,16
100094e0:	f800283a 	ret

100094e4 <__sfp>:
100094e4:	defffb04 	addi	sp,sp,-20
100094e8:	dc000015 	stw	r16,0(sp)
100094ec:	040400b4 	movhi	r16,4098
100094f0:	840a1104 	addi	r16,r16,10308
100094f4:	dcc00315 	stw	r19,12(sp)
100094f8:	2027883a 	mov	r19,r4
100094fc:	81000017 	ldw	r4,0(r16)
10009500:	dfc00415 	stw	ra,16(sp)
10009504:	dc800215 	stw	r18,8(sp)
10009508:	20800e17 	ldw	r2,56(r4)
1000950c:	dc400115 	stw	r17,4(sp)
10009510:	1000021e 	bne	r2,zero,1000951c <__sfp+0x38>
10009514:	00092c80 	call	100092c8 <__sinit.part.1>
10009518:	81000017 	ldw	r4,0(r16)
1000951c:	2480b804 	addi	r18,r4,736
10009520:	047fffc4 	movi	r17,-1
10009524:	91000117 	ldw	r4,4(r18)
10009528:	94000217 	ldw	r16,8(r18)
1000952c:	213fffc4 	addi	r4,r4,-1
10009530:	20000a16 	blt	r4,zero,1000955c <__sfp+0x78>
10009534:	8080030f 	ldh	r2,12(r16)
10009538:	10000c26 	beq	r2,zero,1000956c <__sfp+0x88>
1000953c:	80c01d04 	addi	r3,r16,116
10009540:	00000206 	br	1000954c <__sfp+0x68>
10009544:	18bfe60f 	ldh	r2,-104(r3)
10009548:	10000826 	beq	r2,zero,1000956c <__sfp+0x88>
1000954c:	213fffc4 	addi	r4,r4,-1
10009550:	1c3ffd04 	addi	r16,r3,-12
10009554:	18c01a04 	addi	r3,r3,104
10009558:	247ffa1e 	bne	r4,r17,10009544 <__alt_data_end+0xf8009544>
1000955c:	90800017 	ldw	r2,0(r18)
10009560:	10001d26 	beq	r2,zero,100095d8 <__sfp+0xf4>
10009564:	1025883a 	mov	r18,r2
10009568:	003fee06 	br	10009524 <__alt_data_end+0xf8009524>
1000956c:	00bfffc4 	movi	r2,-1
10009570:	8080038d 	sth	r2,14(r16)
10009574:	00800044 	movi	r2,1
10009578:	8080030d 	sth	r2,12(r16)
1000957c:	80001915 	stw	zero,100(r16)
10009580:	80000015 	stw	zero,0(r16)
10009584:	80000215 	stw	zero,8(r16)
10009588:	80000115 	stw	zero,4(r16)
1000958c:	80000415 	stw	zero,16(r16)
10009590:	80000515 	stw	zero,20(r16)
10009594:	80000615 	stw	zero,24(r16)
10009598:	01800204 	movi	r6,8
1000959c:	000b883a 	mov	r5,zero
100095a0:	81001704 	addi	r4,r16,92
100095a4:	000af140 	call	1000af14 <memset>
100095a8:	8005883a 	mov	r2,r16
100095ac:	80000c15 	stw	zero,48(r16)
100095b0:	80000d15 	stw	zero,52(r16)
100095b4:	80001115 	stw	zero,68(r16)
100095b8:	80001215 	stw	zero,72(r16)
100095bc:	dfc00417 	ldw	ra,16(sp)
100095c0:	dcc00317 	ldw	r19,12(sp)
100095c4:	dc800217 	ldw	r18,8(sp)
100095c8:	dc400117 	ldw	r17,4(sp)
100095cc:	dc000017 	ldw	r16,0(sp)
100095d0:	dec00504 	addi	sp,sp,20
100095d4:	f800283a 	ret
100095d8:	01400104 	movi	r5,4
100095dc:	9809883a 	mov	r4,r19
100095e0:	000946c0 	call	1000946c <__sfmoreglue>
100095e4:	90800015 	stw	r2,0(r18)
100095e8:	103fde1e 	bne	r2,zero,10009564 <__alt_data_end+0xf8009564>
100095ec:	00800304 	movi	r2,12
100095f0:	98800015 	stw	r2,0(r19)
100095f4:	0005883a 	mov	r2,zero
100095f8:	003ff006 	br	100095bc <__alt_data_end+0xf80095bc>

100095fc <_cleanup>:
100095fc:	008400b4 	movhi	r2,4098
10009600:	108a1104 	addi	r2,r2,10308
10009604:	11000017 	ldw	r4,0(r2)
10009608:	01440074 	movhi	r5,4097
1000960c:	29787004 	addi	r5,r5,-7744
10009610:	000a0241 	jmpi	1000a024 <_fwalk_reent>

10009614 <__sinit>:
10009614:	20800e17 	ldw	r2,56(r4)
10009618:	10000126 	beq	r2,zero,10009620 <__sinit+0xc>
1000961c:	f800283a 	ret
10009620:	00092c81 	jmpi	100092c8 <__sinit.part.1>

10009624 <__sfp_lock_acquire>:
10009624:	f800283a 	ret

10009628 <__sfp_lock_release>:
10009628:	f800283a 	ret

1000962c <__sinit_lock_acquire>:
1000962c:	f800283a 	ret

10009630 <__sinit_lock_release>:
10009630:	f800283a 	ret

10009634 <__fp_lock_all>:
10009634:	008400b4 	movhi	r2,4098
10009638:	108a1204 	addi	r2,r2,10312
1000963c:	11000017 	ldw	r4,0(r2)
10009640:	01440074 	movhi	r5,4097
10009644:	29651904 	addi	r5,r5,-27548
10009648:	0009f601 	jmpi	10009f60 <_fwalk>

1000964c <__fp_unlock_all>:
1000964c:	008400b4 	movhi	r2,4098
10009650:	108a1204 	addi	r2,r2,10312
10009654:	11000017 	ldw	r4,0(r2)
10009658:	01440074 	movhi	r5,4097
1000965c:	2964ad04 	addi	r5,r5,-27980
10009660:	0009f601 	jmpi	10009f60 <_fwalk>

10009664 <_malloc_trim_r>:
10009664:	defffb04 	addi	sp,sp,-20
10009668:	dcc00315 	stw	r19,12(sp)
1000966c:	04c400b4 	movhi	r19,4098
10009670:	dc800215 	stw	r18,8(sp)
10009674:	dc400115 	stw	r17,4(sp)
10009678:	dc000015 	stw	r16,0(sp)
1000967c:	dfc00415 	stw	ra,16(sp)
10009680:	2821883a 	mov	r16,r5
10009684:	9cc48d04 	addi	r19,r19,4660
10009688:	2025883a 	mov	r18,r4
1000968c:	001237c0 	call	1001237c <__malloc_lock>
10009690:	98800217 	ldw	r2,8(r19)
10009694:	14400117 	ldw	r17,4(r2)
10009698:	00bfff04 	movi	r2,-4
1000969c:	88a2703a 	and	r17,r17,r2
100096a0:	8c21c83a 	sub	r16,r17,r16
100096a4:	8403fbc4 	addi	r16,r16,4079
100096a8:	8020d33a 	srli	r16,r16,12
100096ac:	0083ffc4 	movi	r2,4095
100096b0:	843fffc4 	addi	r16,r16,-1
100096b4:	8020933a 	slli	r16,r16,12
100096b8:	1400060e 	bge	r2,r16,100096d4 <_malloc_trim_r+0x70>
100096bc:	000b883a 	mov	r5,zero
100096c0:	9009883a 	mov	r4,r18
100096c4:	000c6cc0 	call	1000c6cc <_sbrk_r>
100096c8:	98c00217 	ldw	r3,8(r19)
100096cc:	1c47883a 	add	r3,r3,r17
100096d0:	10c00a26 	beq	r2,r3,100096fc <_malloc_trim_r+0x98>
100096d4:	9009883a 	mov	r4,r18
100096d8:	00123a00 	call	100123a0 <__malloc_unlock>
100096dc:	0005883a 	mov	r2,zero
100096e0:	dfc00417 	ldw	ra,16(sp)
100096e4:	dcc00317 	ldw	r19,12(sp)
100096e8:	dc800217 	ldw	r18,8(sp)
100096ec:	dc400117 	ldw	r17,4(sp)
100096f0:	dc000017 	ldw	r16,0(sp)
100096f4:	dec00504 	addi	sp,sp,20
100096f8:	f800283a 	ret
100096fc:	040bc83a 	sub	r5,zero,r16
10009700:	9009883a 	mov	r4,r18
10009704:	000c6cc0 	call	1000c6cc <_sbrk_r>
10009708:	00ffffc4 	movi	r3,-1
1000970c:	10c00d26 	beq	r2,r3,10009744 <_malloc_trim_r+0xe0>
10009710:	00c400f4 	movhi	r3,4099
10009714:	18c01604 	addi	r3,r3,88
10009718:	18800017 	ldw	r2,0(r3)
1000971c:	99000217 	ldw	r4,8(r19)
10009720:	8c23c83a 	sub	r17,r17,r16
10009724:	8c400054 	ori	r17,r17,1
10009728:	1421c83a 	sub	r16,r2,r16
1000972c:	24400115 	stw	r17,4(r4)
10009730:	9009883a 	mov	r4,r18
10009734:	1c000015 	stw	r16,0(r3)
10009738:	00123a00 	call	100123a0 <__malloc_unlock>
1000973c:	00800044 	movi	r2,1
10009740:	003fe706 	br	100096e0 <__alt_data_end+0xf80096e0>
10009744:	000b883a 	mov	r5,zero
10009748:	9009883a 	mov	r4,r18
1000974c:	000c6cc0 	call	1000c6cc <_sbrk_r>
10009750:	99000217 	ldw	r4,8(r19)
10009754:	014003c4 	movi	r5,15
10009758:	1107c83a 	sub	r3,r2,r4
1000975c:	28ffdd0e 	bge	r5,r3,100096d4 <__alt_data_end+0xf80096d4>
10009760:	014400b4 	movhi	r5,4098
10009764:	294a1404 	addi	r5,r5,10320
10009768:	29400017 	ldw	r5,0(r5)
1000976c:	18c00054 	ori	r3,r3,1
10009770:	20c00115 	stw	r3,4(r4)
10009774:	00c400f4 	movhi	r3,4099
10009778:	1145c83a 	sub	r2,r2,r5
1000977c:	18c01604 	addi	r3,r3,88
10009780:	18800015 	stw	r2,0(r3)
10009784:	003fd306 	br	100096d4 <__alt_data_end+0xf80096d4>

10009788 <_free_r>:
10009788:	28004126 	beq	r5,zero,10009890 <_free_r+0x108>
1000978c:	defffd04 	addi	sp,sp,-12
10009790:	dc400115 	stw	r17,4(sp)
10009794:	dc000015 	stw	r16,0(sp)
10009798:	2023883a 	mov	r17,r4
1000979c:	2821883a 	mov	r16,r5
100097a0:	dfc00215 	stw	ra,8(sp)
100097a4:	001237c0 	call	1001237c <__malloc_lock>
100097a8:	81ffff17 	ldw	r7,-4(r16)
100097ac:	00bfff84 	movi	r2,-2
100097b0:	010400b4 	movhi	r4,4098
100097b4:	81bffe04 	addi	r6,r16,-8
100097b8:	3884703a 	and	r2,r7,r2
100097bc:	21048d04 	addi	r4,r4,4660
100097c0:	308b883a 	add	r5,r6,r2
100097c4:	2a400117 	ldw	r9,4(r5)
100097c8:	22000217 	ldw	r8,8(r4)
100097cc:	00ffff04 	movi	r3,-4
100097d0:	48c6703a 	and	r3,r9,r3
100097d4:	2a005726 	beq	r5,r8,10009934 <_free_r+0x1ac>
100097d8:	28c00115 	stw	r3,4(r5)
100097dc:	39c0004c 	andi	r7,r7,1
100097e0:	3800091e 	bne	r7,zero,10009808 <_free_r+0x80>
100097e4:	823ffe17 	ldw	r8,-8(r16)
100097e8:	22400204 	addi	r9,r4,8
100097ec:	320dc83a 	sub	r6,r6,r8
100097f0:	31c00217 	ldw	r7,8(r6)
100097f4:	1205883a 	add	r2,r2,r8
100097f8:	3a406526 	beq	r7,r9,10009990 <_free_r+0x208>
100097fc:	32000317 	ldw	r8,12(r6)
10009800:	3a000315 	stw	r8,12(r7)
10009804:	41c00215 	stw	r7,8(r8)
10009808:	28cf883a 	add	r7,r5,r3
1000980c:	39c00117 	ldw	r7,4(r7)
10009810:	39c0004c 	andi	r7,r7,1
10009814:	38003a26 	beq	r7,zero,10009900 <_free_r+0x178>
10009818:	10c00054 	ori	r3,r2,1
1000981c:	30c00115 	stw	r3,4(r6)
10009820:	3087883a 	add	r3,r6,r2
10009824:	18800015 	stw	r2,0(r3)
10009828:	00c07fc4 	movi	r3,511
1000982c:	18801936 	bltu	r3,r2,10009894 <_free_r+0x10c>
10009830:	1004d0fa 	srli	r2,r2,3
10009834:	01c00044 	movi	r7,1
10009838:	21400117 	ldw	r5,4(r4)
1000983c:	10c00044 	addi	r3,r2,1
10009840:	18c7883a 	add	r3,r3,r3
10009844:	1005d0ba 	srai	r2,r2,2
10009848:	18c7883a 	add	r3,r3,r3
1000984c:	18c7883a 	add	r3,r3,r3
10009850:	1907883a 	add	r3,r3,r4
10009854:	3884983a 	sll	r2,r7,r2
10009858:	19c00017 	ldw	r7,0(r3)
1000985c:	1a3ffe04 	addi	r8,r3,-8
10009860:	1144b03a 	or	r2,r2,r5
10009864:	32000315 	stw	r8,12(r6)
10009868:	31c00215 	stw	r7,8(r6)
1000986c:	20800115 	stw	r2,4(r4)
10009870:	19800015 	stw	r6,0(r3)
10009874:	39800315 	stw	r6,12(r7)
10009878:	8809883a 	mov	r4,r17
1000987c:	dfc00217 	ldw	ra,8(sp)
10009880:	dc400117 	ldw	r17,4(sp)
10009884:	dc000017 	ldw	r16,0(sp)
10009888:	dec00304 	addi	sp,sp,12
1000988c:	00123a01 	jmpi	100123a0 <__malloc_unlock>
10009890:	f800283a 	ret
10009894:	100ad27a 	srli	r5,r2,9
10009898:	00c00104 	movi	r3,4
1000989c:	19404a36 	bltu	r3,r5,100099c8 <_free_r+0x240>
100098a0:	100ad1ba 	srli	r5,r2,6
100098a4:	28c00e44 	addi	r3,r5,57
100098a8:	18c7883a 	add	r3,r3,r3
100098ac:	29400e04 	addi	r5,r5,56
100098b0:	18c7883a 	add	r3,r3,r3
100098b4:	18c7883a 	add	r3,r3,r3
100098b8:	1909883a 	add	r4,r3,r4
100098bc:	20c00017 	ldw	r3,0(r4)
100098c0:	01c400b4 	movhi	r7,4098
100098c4:	213ffe04 	addi	r4,r4,-8
100098c8:	39c48d04 	addi	r7,r7,4660
100098cc:	20c04426 	beq	r4,r3,100099e0 <_free_r+0x258>
100098d0:	01ffff04 	movi	r7,-4
100098d4:	19400117 	ldw	r5,4(r3)
100098d8:	29ca703a 	and	r5,r5,r7
100098dc:	1140022e 	bgeu	r2,r5,100098e8 <_free_r+0x160>
100098e0:	18c00217 	ldw	r3,8(r3)
100098e4:	20fffb1e 	bne	r4,r3,100098d4 <__alt_data_end+0xf80098d4>
100098e8:	19000317 	ldw	r4,12(r3)
100098ec:	31000315 	stw	r4,12(r6)
100098f0:	30c00215 	stw	r3,8(r6)
100098f4:	21800215 	stw	r6,8(r4)
100098f8:	19800315 	stw	r6,12(r3)
100098fc:	003fde06 	br	10009878 <__alt_data_end+0xf8009878>
10009900:	29c00217 	ldw	r7,8(r5)
10009904:	10c5883a 	add	r2,r2,r3
10009908:	00c400b4 	movhi	r3,4098
1000990c:	18c48f04 	addi	r3,r3,4668
10009910:	38c03b26 	beq	r7,r3,10009a00 <_free_r+0x278>
10009914:	2a000317 	ldw	r8,12(r5)
10009918:	11400054 	ori	r5,r2,1
1000991c:	3087883a 	add	r3,r6,r2
10009920:	3a000315 	stw	r8,12(r7)
10009924:	41c00215 	stw	r7,8(r8)
10009928:	31400115 	stw	r5,4(r6)
1000992c:	18800015 	stw	r2,0(r3)
10009930:	003fbd06 	br	10009828 <__alt_data_end+0xf8009828>
10009934:	39c0004c 	andi	r7,r7,1
10009938:	10c5883a 	add	r2,r2,r3
1000993c:	3800071e 	bne	r7,zero,1000995c <_free_r+0x1d4>
10009940:	81fffe17 	ldw	r7,-8(r16)
10009944:	31cdc83a 	sub	r6,r6,r7
10009948:	30c00317 	ldw	r3,12(r6)
1000994c:	31400217 	ldw	r5,8(r6)
10009950:	11c5883a 	add	r2,r2,r7
10009954:	28c00315 	stw	r3,12(r5)
10009958:	19400215 	stw	r5,8(r3)
1000995c:	10c00054 	ori	r3,r2,1
10009960:	30c00115 	stw	r3,4(r6)
10009964:	00c400b4 	movhi	r3,4098
10009968:	18ca1504 	addi	r3,r3,10324
1000996c:	18c00017 	ldw	r3,0(r3)
10009970:	21800215 	stw	r6,8(r4)
10009974:	10ffc036 	bltu	r2,r3,10009878 <__alt_data_end+0xf8009878>
10009978:	008400f4 	movhi	r2,4099
1000997c:	10800d04 	addi	r2,r2,52
10009980:	11400017 	ldw	r5,0(r2)
10009984:	8809883a 	mov	r4,r17
10009988:	00096640 	call	10009664 <_malloc_trim_r>
1000998c:	003fba06 	br	10009878 <__alt_data_end+0xf8009878>
10009990:	28c9883a 	add	r4,r5,r3
10009994:	21000117 	ldw	r4,4(r4)
10009998:	2100004c 	andi	r4,r4,1
1000999c:	2000391e 	bne	r4,zero,10009a84 <_free_r+0x2fc>
100099a0:	29c00217 	ldw	r7,8(r5)
100099a4:	29000317 	ldw	r4,12(r5)
100099a8:	1885883a 	add	r2,r3,r2
100099ac:	10c00054 	ori	r3,r2,1
100099b0:	39000315 	stw	r4,12(r7)
100099b4:	21c00215 	stw	r7,8(r4)
100099b8:	30c00115 	stw	r3,4(r6)
100099bc:	308d883a 	add	r6,r6,r2
100099c0:	30800015 	stw	r2,0(r6)
100099c4:	003fac06 	br	10009878 <__alt_data_end+0xf8009878>
100099c8:	00c00504 	movi	r3,20
100099cc:	19401536 	bltu	r3,r5,10009a24 <_free_r+0x29c>
100099d0:	28c01704 	addi	r3,r5,92
100099d4:	18c7883a 	add	r3,r3,r3
100099d8:	294016c4 	addi	r5,r5,91
100099dc:	003fb406 	br	100098b0 <__alt_data_end+0xf80098b0>
100099e0:	280bd0ba 	srai	r5,r5,2
100099e4:	00c00044 	movi	r3,1
100099e8:	38800117 	ldw	r2,4(r7)
100099ec:	194a983a 	sll	r5,r3,r5
100099f0:	2007883a 	mov	r3,r4
100099f4:	2884b03a 	or	r2,r5,r2
100099f8:	38800115 	stw	r2,4(r7)
100099fc:	003fbb06 	br	100098ec <__alt_data_end+0xf80098ec>
10009a00:	21800515 	stw	r6,20(r4)
10009a04:	21800415 	stw	r6,16(r4)
10009a08:	10c00054 	ori	r3,r2,1
10009a0c:	31c00315 	stw	r7,12(r6)
10009a10:	31c00215 	stw	r7,8(r6)
10009a14:	30c00115 	stw	r3,4(r6)
10009a18:	308d883a 	add	r6,r6,r2
10009a1c:	30800015 	stw	r2,0(r6)
10009a20:	003f9506 	br	10009878 <__alt_data_end+0xf8009878>
10009a24:	00c01504 	movi	r3,84
10009a28:	19400536 	bltu	r3,r5,10009a40 <_free_r+0x2b8>
10009a2c:	100ad33a 	srli	r5,r2,12
10009a30:	28c01bc4 	addi	r3,r5,111
10009a34:	18c7883a 	add	r3,r3,r3
10009a38:	29401b84 	addi	r5,r5,110
10009a3c:	003f9c06 	br	100098b0 <__alt_data_end+0xf80098b0>
10009a40:	00c05504 	movi	r3,340
10009a44:	19400536 	bltu	r3,r5,10009a5c <_free_r+0x2d4>
10009a48:	100ad3fa 	srli	r5,r2,15
10009a4c:	28c01e04 	addi	r3,r5,120
10009a50:	18c7883a 	add	r3,r3,r3
10009a54:	29401dc4 	addi	r5,r5,119
10009a58:	003f9506 	br	100098b0 <__alt_data_end+0xf80098b0>
10009a5c:	00c15504 	movi	r3,1364
10009a60:	19400536 	bltu	r3,r5,10009a78 <_free_r+0x2f0>
10009a64:	100ad4ba 	srli	r5,r2,18
10009a68:	28c01f44 	addi	r3,r5,125
10009a6c:	18c7883a 	add	r3,r3,r3
10009a70:	29401f04 	addi	r5,r5,124
10009a74:	003f8e06 	br	100098b0 <__alt_data_end+0xf80098b0>
10009a78:	00c03f84 	movi	r3,254
10009a7c:	01401f84 	movi	r5,126
10009a80:	003f8b06 	br	100098b0 <__alt_data_end+0xf80098b0>
10009a84:	10c00054 	ori	r3,r2,1
10009a88:	30c00115 	stw	r3,4(r6)
10009a8c:	308d883a 	add	r6,r6,r2
10009a90:	30800015 	stw	r2,0(r6)
10009a94:	003f7806 	br	10009878 <__alt_data_end+0xf8009878>

10009a98 <__sfvwrite_r>:
10009a98:	30800217 	ldw	r2,8(r6)
10009a9c:	10006726 	beq	r2,zero,10009c3c <__sfvwrite_r+0x1a4>
10009aa0:	28c0030b 	ldhu	r3,12(r5)
10009aa4:	defff404 	addi	sp,sp,-48
10009aa8:	dd400715 	stw	r21,28(sp)
10009aac:	dd000615 	stw	r20,24(sp)
10009ab0:	dc000215 	stw	r16,8(sp)
10009ab4:	dfc00b15 	stw	ra,44(sp)
10009ab8:	df000a15 	stw	fp,40(sp)
10009abc:	ddc00915 	stw	r23,36(sp)
10009ac0:	dd800815 	stw	r22,32(sp)
10009ac4:	dcc00515 	stw	r19,20(sp)
10009ac8:	dc800415 	stw	r18,16(sp)
10009acc:	dc400315 	stw	r17,12(sp)
10009ad0:	1880020c 	andi	r2,r3,8
10009ad4:	2821883a 	mov	r16,r5
10009ad8:	202b883a 	mov	r21,r4
10009adc:	3029883a 	mov	r20,r6
10009ae0:	10002726 	beq	r2,zero,10009b80 <__sfvwrite_r+0xe8>
10009ae4:	28800417 	ldw	r2,16(r5)
10009ae8:	10002526 	beq	r2,zero,10009b80 <__sfvwrite_r+0xe8>
10009aec:	1880008c 	andi	r2,r3,2
10009af0:	a4400017 	ldw	r17,0(r20)
10009af4:	10002a26 	beq	r2,zero,10009ba0 <__sfvwrite_r+0x108>
10009af8:	05a00034 	movhi	r22,32768
10009afc:	0027883a 	mov	r19,zero
10009b00:	0025883a 	mov	r18,zero
10009b04:	b5bf0004 	addi	r22,r22,-1024
10009b08:	980d883a 	mov	r6,r19
10009b0c:	a809883a 	mov	r4,r21
10009b10:	90004626 	beq	r18,zero,10009c2c <__sfvwrite_r+0x194>
10009b14:	900f883a 	mov	r7,r18
10009b18:	b480022e 	bgeu	r22,r18,10009b24 <__sfvwrite_r+0x8c>
10009b1c:	01e00034 	movhi	r7,32768
10009b20:	39ff0004 	addi	r7,r7,-1024
10009b24:	80800917 	ldw	r2,36(r16)
10009b28:	81400717 	ldw	r5,28(r16)
10009b2c:	103ee83a 	callr	r2
10009b30:	00805a0e 	bge	zero,r2,10009c9c <__sfvwrite_r+0x204>
10009b34:	a0c00217 	ldw	r3,8(r20)
10009b38:	98a7883a 	add	r19,r19,r2
10009b3c:	90a5c83a 	sub	r18,r18,r2
10009b40:	1885c83a 	sub	r2,r3,r2
10009b44:	a0800215 	stw	r2,8(r20)
10009b48:	103fef1e 	bne	r2,zero,10009b08 <__alt_data_end+0xf8009b08>
10009b4c:	0005883a 	mov	r2,zero
10009b50:	dfc00b17 	ldw	ra,44(sp)
10009b54:	df000a17 	ldw	fp,40(sp)
10009b58:	ddc00917 	ldw	r23,36(sp)
10009b5c:	dd800817 	ldw	r22,32(sp)
10009b60:	dd400717 	ldw	r21,28(sp)
10009b64:	dd000617 	ldw	r20,24(sp)
10009b68:	dcc00517 	ldw	r19,20(sp)
10009b6c:	dc800417 	ldw	r18,16(sp)
10009b70:	dc400317 	ldw	r17,12(sp)
10009b74:	dc000217 	ldw	r16,8(sp)
10009b78:	dec00c04 	addi	sp,sp,48
10009b7c:	f800283a 	ret
10009b80:	800b883a 	mov	r5,r16
10009b84:	a809883a 	mov	r4,r21
10009b88:	00076080 	call	10007608 <__swsetup_r>
10009b8c:	1000ee1e 	bne	r2,zero,10009f48 <__sfvwrite_r+0x4b0>
10009b90:	80c0030b 	ldhu	r3,12(r16)
10009b94:	a4400017 	ldw	r17,0(r20)
10009b98:	1880008c 	andi	r2,r3,2
10009b9c:	103fd61e 	bne	r2,zero,10009af8 <__alt_data_end+0xf8009af8>
10009ba0:	1880004c 	andi	r2,r3,1
10009ba4:	1000421e 	bne	r2,zero,10009cb0 <__sfvwrite_r+0x218>
10009ba8:	0039883a 	mov	fp,zero
10009bac:	0025883a 	mov	r18,zero
10009bb0:	90001a26 	beq	r18,zero,10009c1c <__sfvwrite_r+0x184>
10009bb4:	1880800c 	andi	r2,r3,512
10009bb8:	84c00217 	ldw	r19,8(r16)
10009bbc:	10002126 	beq	r2,zero,10009c44 <__sfvwrite_r+0x1ac>
10009bc0:	982f883a 	mov	r23,r19
10009bc4:	94c09636 	bltu	r18,r19,10009e20 <__sfvwrite_r+0x388>
10009bc8:	1881200c 	andi	r2,r3,1152
10009bcc:	1000a11e 	bne	r2,zero,10009e54 <__sfvwrite_r+0x3bc>
10009bd0:	81000017 	ldw	r4,0(r16)
10009bd4:	b80d883a 	mov	r6,r23
10009bd8:	e00b883a 	mov	r5,fp
10009bdc:	000adb80 	call	1000adb8 <memmove>
10009be0:	80c00217 	ldw	r3,8(r16)
10009be4:	81000017 	ldw	r4,0(r16)
10009be8:	9005883a 	mov	r2,r18
10009bec:	1ce7c83a 	sub	r19,r3,r19
10009bf0:	25cf883a 	add	r7,r4,r23
10009bf4:	84c00215 	stw	r19,8(r16)
10009bf8:	81c00015 	stw	r7,0(r16)
10009bfc:	a0c00217 	ldw	r3,8(r20)
10009c00:	e0b9883a 	add	fp,fp,r2
10009c04:	90a5c83a 	sub	r18,r18,r2
10009c08:	18a7c83a 	sub	r19,r3,r2
10009c0c:	a4c00215 	stw	r19,8(r20)
10009c10:	983fce26 	beq	r19,zero,10009b4c <__alt_data_end+0xf8009b4c>
10009c14:	80c0030b 	ldhu	r3,12(r16)
10009c18:	903fe61e 	bne	r18,zero,10009bb4 <__alt_data_end+0xf8009bb4>
10009c1c:	8f000017 	ldw	fp,0(r17)
10009c20:	8c800117 	ldw	r18,4(r17)
10009c24:	8c400204 	addi	r17,r17,8
10009c28:	003fe106 	br	10009bb0 <__alt_data_end+0xf8009bb0>
10009c2c:	8cc00017 	ldw	r19,0(r17)
10009c30:	8c800117 	ldw	r18,4(r17)
10009c34:	8c400204 	addi	r17,r17,8
10009c38:	003fb306 	br	10009b08 <__alt_data_end+0xf8009b08>
10009c3c:	0005883a 	mov	r2,zero
10009c40:	f800283a 	ret
10009c44:	81000017 	ldw	r4,0(r16)
10009c48:	80800417 	ldw	r2,16(r16)
10009c4c:	11005a36 	bltu	r2,r4,10009db8 <__sfvwrite_r+0x320>
10009c50:	85c00517 	ldw	r23,20(r16)
10009c54:	95c05836 	bltu	r18,r23,10009db8 <__sfvwrite_r+0x320>
10009c58:	00a00034 	movhi	r2,32768
10009c5c:	10bfffc4 	addi	r2,r2,-1
10009c60:	9009883a 	mov	r4,r18
10009c64:	1480012e 	bgeu	r2,r18,10009c6c <__sfvwrite_r+0x1d4>
10009c68:	1009883a 	mov	r4,r2
10009c6c:	b80b883a 	mov	r5,r23
10009c70:	0004ea00 	call	10004ea0 <__divsi3>
10009c74:	b80b883a 	mov	r5,r23
10009c78:	1009883a 	mov	r4,r2
10009c7c:	00050540 	call	10005054 <__mulsi3>
10009c80:	81400717 	ldw	r5,28(r16)
10009c84:	80c00917 	ldw	r3,36(r16)
10009c88:	100f883a 	mov	r7,r2
10009c8c:	e00d883a 	mov	r6,fp
10009c90:	a809883a 	mov	r4,r21
10009c94:	183ee83a 	callr	r3
10009c98:	00bfd816 	blt	zero,r2,10009bfc <__alt_data_end+0xf8009bfc>
10009c9c:	8080030b 	ldhu	r2,12(r16)
10009ca0:	10801014 	ori	r2,r2,64
10009ca4:	8080030d 	sth	r2,12(r16)
10009ca8:	00bfffc4 	movi	r2,-1
10009cac:	003fa806 	br	10009b50 <__alt_data_end+0xf8009b50>
10009cb0:	0027883a 	mov	r19,zero
10009cb4:	0011883a 	mov	r8,zero
10009cb8:	0039883a 	mov	fp,zero
10009cbc:	0025883a 	mov	r18,zero
10009cc0:	90001f26 	beq	r18,zero,10009d40 <__sfvwrite_r+0x2a8>
10009cc4:	40005a26 	beq	r8,zero,10009e30 <__sfvwrite_r+0x398>
10009cc8:	982d883a 	mov	r22,r19
10009ccc:	94c0012e 	bgeu	r18,r19,10009cd4 <__sfvwrite_r+0x23c>
10009cd0:	902d883a 	mov	r22,r18
10009cd4:	81000017 	ldw	r4,0(r16)
10009cd8:	80800417 	ldw	r2,16(r16)
10009cdc:	b02f883a 	mov	r23,r22
10009ce0:	81c00517 	ldw	r7,20(r16)
10009ce4:	1100032e 	bgeu	r2,r4,10009cf4 <__sfvwrite_r+0x25c>
10009ce8:	80c00217 	ldw	r3,8(r16)
10009cec:	38c7883a 	add	r3,r7,r3
10009cf0:	1d801816 	blt	r3,r22,10009d54 <__sfvwrite_r+0x2bc>
10009cf4:	b1c03e16 	blt	r22,r7,10009df0 <__sfvwrite_r+0x358>
10009cf8:	80800917 	ldw	r2,36(r16)
10009cfc:	81400717 	ldw	r5,28(r16)
10009d00:	e00d883a 	mov	r6,fp
10009d04:	da000115 	stw	r8,4(sp)
10009d08:	a809883a 	mov	r4,r21
10009d0c:	103ee83a 	callr	r2
10009d10:	102f883a 	mov	r23,r2
10009d14:	da000117 	ldw	r8,4(sp)
10009d18:	00bfe00e 	bge	zero,r2,10009c9c <__alt_data_end+0xf8009c9c>
10009d1c:	9de7c83a 	sub	r19,r19,r23
10009d20:	98001f26 	beq	r19,zero,10009da0 <__sfvwrite_r+0x308>
10009d24:	a0800217 	ldw	r2,8(r20)
10009d28:	e5f9883a 	add	fp,fp,r23
10009d2c:	95e5c83a 	sub	r18,r18,r23
10009d30:	15efc83a 	sub	r23,r2,r23
10009d34:	a5c00215 	stw	r23,8(r20)
10009d38:	b83f8426 	beq	r23,zero,10009b4c <__alt_data_end+0xf8009b4c>
10009d3c:	903fe11e 	bne	r18,zero,10009cc4 <__alt_data_end+0xf8009cc4>
10009d40:	8f000017 	ldw	fp,0(r17)
10009d44:	8c800117 	ldw	r18,4(r17)
10009d48:	0011883a 	mov	r8,zero
10009d4c:	8c400204 	addi	r17,r17,8
10009d50:	003fdb06 	br	10009cc0 <__alt_data_end+0xf8009cc0>
10009d54:	180d883a 	mov	r6,r3
10009d58:	e00b883a 	mov	r5,fp
10009d5c:	da000115 	stw	r8,4(sp)
10009d60:	d8c00015 	stw	r3,0(sp)
10009d64:	000adb80 	call	1000adb8 <memmove>
10009d68:	d8c00017 	ldw	r3,0(sp)
10009d6c:	80800017 	ldw	r2,0(r16)
10009d70:	800b883a 	mov	r5,r16
10009d74:	a809883a 	mov	r4,r21
10009d78:	10c5883a 	add	r2,r2,r3
10009d7c:	80800015 	stw	r2,0(r16)
10009d80:	d8c00015 	stw	r3,0(sp)
10009d84:	00092280 	call	10009228 <_fflush_r>
10009d88:	d8c00017 	ldw	r3,0(sp)
10009d8c:	da000117 	ldw	r8,4(sp)
10009d90:	103fc21e 	bne	r2,zero,10009c9c <__alt_data_end+0xf8009c9c>
10009d94:	182f883a 	mov	r23,r3
10009d98:	9de7c83a 	sub	r19,r19,r23
10009d9c:	983fe11e 	bne	r19,zero,10009d24 <__alt_data_end+0xf8009d24>
10009da0:	800b883a 	mov	r5,r16
10009da4:	a809883a 	mov	r4,r21
10009da8:	00092280 	call	10009228 <_fflush_r>
10009dac:	103fbb1e 	bne	r2,zero,10009c9c <__alt_data_end+0xf8009c9c>
10009db0:	0011883a 	mov	r8,zero
10009db4:	003fdb06 	br	10009d24 <__alt_data_end+0xf8009d24>
10009db8:	94c0012e 	bgeu	r18,r19,10009dc0 <__sfvwrite_r+0x328>
10009dbc:	9027883a 	mov	r19,r18
10009dc0:	980d883a 	mov	r6,r19
10009dc4:	e00b883a 	mov	r5,fp
10009dc8:	000adb80 	call	1000adb8 <memmove>
10009dcc:	80800217 	ldw	r2,8(r16)
10009dd0:	80c00017 	ldw	r3,0(r16)
10009dd4:	14c5c83a 	sub	r2,r2,r19
10009dd8:	1cc7883a 	add	r3,r3,r19
10009ddc:	80800215 	stw	r2,8(r16)
10009de0:	80c00015 	stw	r3,0(r16)
10009de4:	10004326 	beq	r2,zero,10009ef4 <__sfvwrite_r+0x45c>
10009de8:	9805883a 	mov	r2,r19
10009dec:	003f8306 	br	10009bfc <__alt_data_end+0xf8009bfc>
10009df0:	b00d883a 	mov	r6,r22
10009df4:	e00b883a 	mov	r5,fp
10009df8:	da000115 	stw	r8,4(sp)
10009dfc:	000adb80 	call	1000adb8 <memmove>
10009e00:	80800217 	ldw	r2,8(r16)
10009e04:	80c00017 	ldw	r3,0(r16)
10009e08:	da000117 	ldw	r8,4(sp)
10009e0c:	1585c83a 	sub	r2,r2,r22
10009e10:	1dad883a 	add	r22,r3,r22
10009e14:	80800215 	stw	r2,8(r16)
10009e18:	85800015 	stw	r22,0(r16)
10009e1c:	003fbf06 	br	10009d1c <__alt_data_end+0xf8009d1c>
10009e20:	81000017 	ldw	r4,0(r16)
10009e24:	9027883a 	mov	r19,r18
10009e28:	902f883a 	mov	r23,r18
10009e2c:	003f6906 	br	10009bd4 <__alt_data_end+0xf8009bd4>
10009e30:	900d883a 	mov	r6,r18
10009e34:	01400284 	movi	r5,10
10009e38:	e009883a 	mov	r4,fp
10009e3c:	000ab8c0 	call	1000ab8c <memchr>
10009e40:	10003e26 	beq	r2,zero,10009f3c <__sfvwrite_r+0x4a4>
10009e44:	10800044 	addi	r2,r2,1
10009e48:	1727c83a 	sub	r19,r2,fp
10009e4c:	02000044 	movi	r8,1
10009e50:	003f9d06 	br	10009cc8 <__alt_data_end+0xf8009cc8>
10009e54:	80800517 	ldw	r2,20(r16)
10009e58:	81400417 	ldw	r5,16(r16)
10009e5c:	81c00017 	ldw	r7,0(r16)
10009e60:	10a7883a 	add	r19,r2,r2
10009e64:	9885883a 	add	r2,r19,r2
10009e68:	1026d7fa 	srli	r19,r2,31
10009e6c:	396dc83a 	sub	r22,r7,r5
10009e70:	b1000044 	addi	r4,r22,1
10009e74:	9885883a 	add	r2,r19,r2
10009e78:	1027d07a 	srai	r19,r2,1
10009e7c:	2485883a 	add	r2,r4,r18
10009e80:	980d883a 	mov	r6,r19
10009e84:	9880022e 	bgeu	r19,r2,10009e90 <__sfvwrite_r+0x3f8>
10009e88:	1027883a 	mov	r19,r2
10009e8c:	100d883a 	mov	r6,r2
10009e90:	18c1000c 	andi	r3,r3,1024
10009e94:	18001c26 	beq	r3,zero,10009f08 <__sfvwrite_r+0x470>
10009e98:	300b883a 	mov	r5,r6
10009e9c:	a809883a 	mov	r4,r21
10009ea0:	000a3800 	call	1000a380 <_malloc_r>
10009ea4:	102f883a 	mov	r23,r2
10009ea8:	10002926 	beq	r2,zero,10009f50 <__sfvwrite_r+0x4b8>
10009eac:	81400417 	ldw	r5,16(r16)
10009eb0:	b00d883a 	mov	r6,r22
10009eb4:	1009883a 	mov	r4,r2
10009eb8:	000ac700 	call	1000ac70 <memcpy>
10009ebc:	8080030b 	ldhu	r2,12(r16)
10009ec0:	00fedfc4 	movi	r3,-1153
10009ec4:	10c4703a 	and	r2,r2,r3
10009ec8:	10802014 	ori	r2,r2,128
10009ecc:	8080030d 	sth	r2,12(r16)
10009ed0:	bd89883a 	add	r4,r23,r22
10009ed4:	9d8fc83a 	sub	r7,r19,r22
10009ed8:	85c00415 	stw	r23,16(r16)
10009edc:	84c00515 	stw	r19,20(r16)
10009ee0:	81000015 	stw	r4,0(r16)
10009ee4:	9027883a 	mov	r19,r18
10009ee8:	81c00215 	stw	r7,8(r16)
10009eec:	902f883a 	mov	r23,r18
10009ef0:	003f3806 	br	10009bd4 <__alt_data_end+0xf8009bd4>
10009ef4:	800b883a 	mov	r5,r16
10009ef8:	a809883a 	mov	r4,r21
10009efc:	00092280 	call	10009228 <_fflush_r>
10009f00:	103fb926 	beq	r2,zero,10009de8 <__alt_data_end+0xf8009de8>
10009f04:	003f6506 	br	10009c9c <__alt_data_end+0xf8009c9c>
10009f08:	a809883a 	mov	r4,r21
10009f0c:	000c0f40 	call	1000c0f4 <_realloc_r>
10009f10:	102f883a 	mov	r23,r2
10009f14:	103fee1e 	bne	r2,zero,10009ed0 <__alt_data_end+0xf8009ed0>
10009f18:	81400417 	ldw	r5,16(r16)
10009f1c:	a809883a 	mov	r4,r21
10009f20:	00097880 	call	10009788 <_free_r>
10009f24:	8080030b 	ldhu	r2,12(r16)
10009f28:	00ffdfc4 	movi	r3,-129
10009f2c:	1884703a 	and	r2,r3,r2
10009f30:	00c00304 	movi	r3,12
10009f34:	a8c00015 	stw	r3,0(r21)
10009f38:	003f5906 	br	10009ca0 <__alt_data_end+0xf8009ca0>
10009f3c:	94c00044 	addi	r19,r18,1
10009f40:	02000044 	movi	r8,1
10009f44:	003f6006 	br	10009cc8 <__alt_data_end+0xf8009cc8>
10009f48:	00bfffc4 	movi	r2,-1
10009f4c:	003f0006 	br	10009b50 <__alt_data_end+0xf8009b50>
10009f50:	00800304 	movi	r2,12
10009f54:	a8800015 	stw	r2,0(r21)
10009f58:	8080030b 	ldhu	r2,12(r16)
10009f5c:	003f5006 	br	10009ca0 <__alt_data_end+0xf8009ca0>

10009f60 <_fwalk>:
10009f60:	defff704 	addi	sp,sp,-36
10009f64:	dd000415 	stw	r20,16(sp)
10009f68:	dfc00815 	stw	ra,32(sp)
10009f6c:	ddc00715 	stw	r23,28(sp)
10009f70:	dd800615 	stw	r22,24(sp)
10009f74:	dd400515 	stw	r21,20(sp)
10009f78:	dcc00315 	stw	r19,12(sp)
10009f7c:	dc800215 	stw	r18,8(sp)
10009f80:	dc400115 	stw	r17,4(sp)
10009f84:	dc000015 	stw	r16,0(sp)
10009f88:	2500b804 	addi	r20,r4,736
10009f8c:	a0002326 	beq	r20,zero,1000a01c <_fwalk+0xbc>
10009f90:	282b883a 	mov	r21,r5
10009f94:	002f883a 	mov	r23,zero
10009f98:	05800044 	movi	r22,1
10009f9c:	04ffffc4 	movi	r19,-1
10009fa0:	a4400117 	ldw	r17,4(r20)
10009fa4:	a4800217 	ldw	r18,8(r20)
10009fa8:	8c7fffc4 	addi	r17,r17,-1
10009fac:	88000d16 	blt	r17,zero,10009fe4 <_fwalk+0x84>
10009fb0:	94000304 	addi	r16,r18,12
10009fb4:	94800384 	addi	r18,r18,14
10009fb8:	8080000b 	ldhu	r2,0(r16)
10009fbc:	8c7fffc4 	addi	r17,r17,-1
10009fc0:	813ffd04 	addi	r4,r16,-12
10009fc4:	b080042e 	bgeu	r22,r2,10009fd8 <_fwalk+0x78>
10009fc8:	9080000f 	ldh	r2,0(r18)
10009fcc:	14c00226 	beq	r2,r19,10009fd8 <_fwalk+0x78>
10009fd0:	a83ee83a 	callr	r21
10009fd4:	b8aeb03a 	or	r23,r23,r2
10009fd8:	84001a04 	addi	r16,r16,104
10009fdc:	94801a04 	addi	r18,r18,104
10009fe0:	8cfff51e 	bne	r17,r19,10009fb8 <__alt_data_end+0xf8009fb8>
10009fe4:	a5000017 	ldw	r20,0(r20)
10009fe8:	a03fed1e 	bne	r20,zero,10009fa0 <__alt_data_end+0xf8009fa0>
10009fec:	b805883a 	mov	r2,r23
10009ff0:	dfc00817 	ldw	ra,32(sp)
10009ff4:	ddc00717 	ldw	r23,28(sp)
10009ff8:	dd800617 	ldw	r22,24(sp)
10009ffc:	dd400517 	ldw	r21,20(sp)
1000a000:	dd000417 	ldw	r20,16(sp)
1000a004:	dcc00317 	ldw	r19,12(sp)
1000a008:	dc800217 	ldw	r18,8(sp)
1000a00c:	dc400117 	ldw	r17,4(sp)
1000a010:	dc000017 	ldw	r16,0(sp)
1000a014:	dec00904 	addi	sp,sp,36
1000a018:	f800283a 	ret
1000a01c:	002f883a 	mov	r23,zero
1000a020:	003ff206 	br	10009fec <__alt_data_end+0xf8009fec>

1000a024 <_fwalk_reent>:
1000a024:	defff704 	addi	sp,sp,-36
1000a028:	dd000415 	stw	r20,16(sp)
1000a02c:	dfc00815 	stw	ra,32(sp)
1000a030:	ddc00715 	stw	r23,28(sp)
1000a034:	dd800615 	stw	r22,24(sp)
1000a038:	dd400515 	stw	r21,20(sp)
1000a03c:	dcc00315 	stw	r19,12(sp)
1000a040:	dc800215 	stw	r18,8(sp)
1000a044:	dc400115 	stw	r17,4(sp)
1000a048:	dc000015 	stw	r16,0(sp)
1000a04c:	2500b804 	addi	r20,r4,736
1000a050:	a0002326 	beq	r20,zero,1000a0e0 <_fwalk_reent+0xbc>
1000a054:	282b883a 	mov	r21,r5
1000a058:	2027883a 	mov	r19,r4
1000a05c:	002f883a 	mov	r23,zero
1000a060:	05800044 	movi	r22,1
1000a064:	04bfffc4 	movi	r18,-1
1000a068:	a4400117 	ldw	r17,4(r20)
1000a06c:	a4000217 	ldw	r16,8(r20)
1000a070:	8c7fffc4 	addi	r17,r17,-1
1000a074:	88000c16 	blt	r17,zero,1000a0a8 <_fwalk_reent+0x84>
1000a078:	84000304 	addi	r16,r16,12
1000a07c:	8080000b 	ldhu	r2,0(r16)
1000a080:	8c7fffc4 	addi	r17,r17,-1
1000a084:	817ffd04 	addi	r5,r16,-12
1000a088:	b080052e 	bgeu	r22,r2,1000a0a0 <_fwalk_reent+0x7c>
1000a08c:	8080008f 	ldh	r2,2(r16)
1000a090:	9809883a 	mov	r4,r19
1000a094:	14800226 	beq	r2,r18,1000a0a0 <_fwalk_reent+0x7c>
1000a098:	a83ee83a 	callr	r21
1000a09c:	b8aeb03a 	or	r23,r23,r2
1000a0a0:	84001a04 	addi	r16,r16,104
1000a0a4:	8cbff51e 	bne	r17,r18,1000a07c <__alt_data_end+0xf800a07c>
1000a0a8:	a5000017 	ldw	r20,0(r20)
1000a0ac:	a03fee1e 	bne	r20,zero,1000a068 <__alt_data_end+0xf800a068>
1000a0b0:	b805883a 	mov	r2,r23
1000a0b4:	dfc00817 	ldw	ra,32(sp)
1000a0b8:	ddc00717 	ldw	r23,28(sp)
1000a0bc:	dd800617 	ldw	r22,24(sp)
1000a0c0:	dd400517 	ldw	r21,20(sp)
1000a0c4:	dd000417 	ldw	r20,16(sp)
1000a0c8:	dcc00317 	ldw	r19,12(sp)
1000a0cc:	dc800217 	ldw	r18,8(sp)
1000a0d0:	dc400117 	ldw	r17,4(sp)
1000a0d4:	dc000017 	ldw	r16,0(sp)
1000a0d8:	dec00904 	addi	sp,sp,36
1000a0dc:	f800283a 	ret
1000a0e0:	002f883a 	mov	r23,zero
1000a0e4:	003ff206 	br	1000a0b0 <__alt_data_end+0xf800a0b0>

1000a0e8 <_setlocale_r>:
1000a0e8:	30001b26 	beq	r6,zero,1000a158 <_setlocale_r+0x70>
1000a0ec:	01440074 	movhi	r5,4097
1000a0f0:	defffe04 	addi	sp,sp,-8
1000a0f4:	2953a204 	addi	r5,r5,20104
1000a0f8:	3009883a 	mov	r4,r6
1000a0fc:	dc000015 	stw	r16,0(sp)
1000a100:	dfc00115 	stw	ra,4(sp)
1000a104:	3021883a 	mov	r16,r6
1000a108:	000c85c0 	call	1000c85c <strcmp>
1000a10c:	1000061e 	bne	r2,zero,1000a128 <_setlocale_r+0x40>
1000a110:	00840074 	movhi	r2,4097
1000a114:	1093a104 	addi	r2,r2,20100
1000a118:	dfc00117 	ldw	ra,4(sp)
1000a11c:	dc000017 	ldw	r16,0(sp)
1000a120:	dec00204 	addi	sp,sp,8
1000a124:	f800283a 	ret
1000a128:	01440074 	movhi	r5,4097
1000a12c:	2953a104 	addi	r5,r5,20100
1000a130:	8009883a 	mov	r4,r16
1000a134:	000c85c0 	call	1000c85c <strcmp>
1000a138:	103ff526 	beq	r2,zero,1000a110 <__alt_data_end+0xf800a110>
1000a13c:	01440074 	movhi	r5,4097
1000a140:	29538c04 	addi	r5,r5,20016
1000a144:	8009883a 	mov	r4,r16
1000a148:	000c85c0 	call	1000c85c <strcmp>
1000a14c:	103ff026 	beq	r2,zero,1000a110 <__alt_data_end+0xf800a110>
1000a150:	0005883a 	mov	r2,zero
1000a154:	003ff006 	br	1000a118 <__alt_data_end+0xf800a118>
1000a158:	00840074 	movhi	r2,4097
1000a15c:	1093a104 	addi	r2,r2,20100
1000a160:	f800283a 	ret

1000a164 <__locale_charset>:
1000a164:	008400b4 	movhi	r2,4098
1000a168:	10847704 	addi	r2,r2,4572
1000a16c:	f800283a 	ret

1000a170 <__locale_mb_cur_max>:
1000a170:	008400b4 	movhi	r2,4098
1000a174:	108a1304 	addi	r2,r2,10316
1000a178:	10800017 	ldw	r2,0(r2)
1000a17c:	f800283a 	ret

1000a180 <__locale_msgcharset>:
1000a180:	008400b4 	movhi	r2,4098
1000a184:	10846f04 	addi	r2,r2,4540
1000a188:	f800283a 	ret

1000a18c <__locale_cjk_lang>:
1000a18c:	0005883a 	mov	r2,zero
1000a190:	f800283a 	ret

1000a194 <_localeconv_r>:
1000a194:	008400b4 	movhi	r2,4098
1000a198:	10847f04 	addi	r2,r2,4604
1000a19c:	f800283a 	ret

1000a1a0 <setlocale>:
1000a1a0:	008400b4 	movhi	r2,4098
1000a1a4:	108a1204 	addi	r2,r2,10312
1000a1a8:	280d883a 	mov	r6,r5
1000a1ac:	200b883a 	mov	r5,r4
1000a1b0:	11000017 	ldw	r4,0(r2)
1000a1b4:	000a0e81 	jmpi	1000a0e8 <_setlocale_r>

1000a1b8 <localeconv>:
1000a1b8:	008400b4 	movhi	r2,4098
1000a1bc:	10847f04 	addi	r2,r2,4604
1000a1c0:	f800283a 	ret

1000a1c4 <__smakebuf_r>:
1000a1c4:	2880030b 	ldhu	r2,12(r5)
1000a1c8:	10c0008c 	andi	r3,r2,2
1000a1cc:	1800411e 	bne	r3,zero,1000a2d4 <__smakebuf_r+0x110>
1000a1d0:	deffec04 	addi	sp,sp,-80
1000a1d4:	dc000f15 	stw	r16,60(sp)
1000a1d8:	2821883a 	mov	r16,r5
1000a1dc:	2940038f 	ldh	r5,14(r5)
1000a1e0:	dc401015 	stw	r17,64(sp)
1000a1e4:	dfc01315 	stw	ra,76(sp)
1000a1e8:	dcc01215 	stw	r19,72(sp)
1000a1ec:	dc801115 	stw	r18,68(sp)
1000a1f0:	2023883a 	mov	r17,r4
1000a1f4:	28001c16 	blt	r5,zero,1000a268 <__smakebuf_r+0xa4>
1000a1f8:	d80d883a 	mov	r6,sp
1000a1fc:	000e4cc0 	call	1000e4cc <_fstat_r>
1000a200:	10001816 	blt	r2,zero,1000a264 <__smakebuf_r+0xa0>
1000a204:	d8800117 	ldw	r2,4(sp)
1000a208:	00e00014 	movui	r3,32768
1000a20c:	10bc000c 	andi	r2,r2,61440
1000a210:	14c80020 	cmpeqi	r19,r2,8192
1000a214:	10c03726 	beq	r2,r3,1000a2f4 <__smakebuf_r+0x130>
1000a218:	80c0030b 	ldhu	r3,12(r16)
1000a21c:	18c20014 	ori	r3,r3,2048
1000a220:	80c0030d 	sth	r3,12(r16)
1000a224:	00c80004 	movi	r3,8192
1000a228:	10c0521e 	bne	r2,r3,1000a374 <__smakebuf_r+0x1b0>
1000a22c:	8140038f 	ldh	r5,14(r16)
1000a230:	8809883a 	mov	r4,r17
1000a234:	000e5280 	call	1000e528 <_isatty_r>
1000a238:	10004c26 	beq	r2,zero,1000a36c <__smakebuf_r+0x1a8>
1000a23c:	8080030b 	ldhu	r2,12(r16)
1000a240:	80c010c4 	addi	r3,r16,67
1000a244:	80c00015 	stw	r3,0(r16)
1000a248:	10800054 	ori	r2,r2,1
1000a24c:	8080030d 	sth	r2,12(r16)
1000a250:	00800044 	movi	r2,1
1000a254:	80c00415 	stw	r3,16(r16)
1000a258:	80800515 	stw	r2,20(r16)
1000a25c:	04810004 	movi	r18,1024
1000a260:	00000706 	br	1000a280 <__smakebuf_r+0xbc>
1000a264:	8080030b 	ldhu	r2,12(r16)
1000a268:	10c0200c 	andi	r3,r2,128
1000a26c:	18001f1e 	bne	r3,zero,1000a2ec <__smakebuf_r+0x128>
1000a270:	04810004 	movi	r18,1024
1000a274:	10820014 	ori	r2,r2,2048
1000a278:	8080030d 	sth	r2,12(r16)
1000a27c:	0027883a 	mov	r19,zero
1000a280:	900b883a 	mov	r5,r18
1000a284:	8809883a 	mov	r4,r17
1000a288:	000a3800 	call	1000a380 <_malloc_r>
1000a28c:	10002c26 	beq	r2,zero,1000a340 <__smakebuf_r+0x17c>
1000a290:	80c0030b 	ldhu	r3,12(r16)
1000a294:	01040074 	movhi	r4,4097
1000a298:	2124af04 	addi	r4,r4,-27972
1000a29c:	89000f15 	stw	r4,60(r17)
1000a2a0:	18c02014 	ori	r3,r3,128
1000a2a4:	80c0030d 	sth	r3,12(r16)
1000a2a8:	80800015 	stw	r2,0(r16)
1000a2ac:	80800415 	stw	r2,16(r16)
1000a2b0:	84800515 	stw	r18,20(r16)
1000a2b4:	98001a1e 	bne	r19,zero,1000a320 <__smakebuf_r+0x15c>
1000a2b8:	dfc01317 	ldw	ra,76(sp)
1000a2bc:	dcc01217 	ldw	r19,72(sp)
1000a2c0:	dc801117 	ldw	r18,68(sp)
1000a2c4:	dc401017 	ldw	r17,64(sp)
1000a2c8:	dc000f17 	ldw	r16,60(sp)
1000a2cc:	dec01404 	addi	sp,sp,80
1000a2d0:	f800283a 	ret
1000a2d4:	288010c4 	addi	r2,r5,67
1000a2d8:	28800015 	stw	r2,0(r5)
1000a2dc:	28800415 	stw	r2,16(r5)
1000a2e0:	00800044 	movi	r2,1
1000a2e4:	28800515 	stw	r2,20(r5)
1000a2e8:	f800283a 	ret
1000a2ec:	04801004 	movi	r18,64
1000a2f0:	003fe006 	br	1000a274 <__alt_data_end+0xf800a274>
1000a2f4:	81000a17 	ldw	r4,40(r16)
1000a2f8:	00c40074 	movhi	r3,4097
1000a2fc:	18f1fe04 	addi	r3,r3,-14344
1000a300:	20ffc51e 	bne	r4,r3,1000a218 <__alt_data_end+0xf800a218>
1000a304:	8080030b 	ldhu	r2,12(r16)
1000a308:	04810004 	movi	r18,1024
1000a30c:	84801315 	stw	r18,76(r16)
1000a310:	1484b03a 	or	r2,r2,r18
1000a314:	8080030d 	sth	r2,12(r16)
1000a318:	0027883a 	mov	r19,zero
1000a31c:	003fd806 	br	1000a280 <__alt_data_end+0xf800a280>
1000a320:	8140038f 	ldh	r5,14(r16)
1000a324:	8809883a 	mov	r4,r17
1000a328:	000e5280 	call	1000e528 <_isatty_r>
1000a32c:	103fe226 	beq	r2,zero,1000a2b8 <__alt_data_end+0xf800a2b8>
1000a330:	8080030b 	ldhu	r2,12(r16)
1000a334:	10800054 	ori	r2,r2,1
1000a338:	8080030d 	sth	r2,12(r16)
1000a33c:	003fde06 	br	1000a2b8 <__alt_data_end+0xf800a2b8>
1000a340:	8080030b 	ldhu	r2,12(r16)
1000a344:	10c0800c 	andi	r3,r2,512
1000a348:	183fdb1e 	bne	r3,zero,1000a2b8 <__alt_data_end+0xf800a2b8>
1000a34c:	10800094 	ori	r2,r2,2
1000a350:	80c010c4 	addi	r3,r16,67
1000a354:	8080030d 	sth	r2,12(r16)
1000a358:	00800044 	movi	r2,1
1000a35c:	80c00015 	stw	r3,0(r16)
1000a360:	80c00415 	stw	r3,16(r16)
1000a364:	80800515 	stw	r2,20(r16)
1000a368:	003fd306 	br	1000a2b8 <__alt_data_end+0xf800a2b8>
1000a36c:	04810004 	movi	r18,1024
1000a370:	003fc306 	br	1000a280 <__alt_data_end+0xf800a280>
1000a374:	0027883a 	mov	r19,zero
1000a378:	04810004 	movi	r18,1024
1000a37c:	003fc006 	br	1000a280 <__alt_data_end+0xf800a280>

1000a380 <_malloc_r>:
1000a380:	defff504 	addi	sp,sp,-44
1000a384:	dc800315 	stw	r18,12(sp)
1000a388:	dfc00a15 	stw	ra,40(sp)
1000a38c:	df000915 	stw	fp,36(sp)
1000a390:	ddc00815 	stw	r23,32(sp)
1000a394:	dd800715 	stw	r22,28(sp)
1000a398:	dd400615 	stw	r21,24(sp)
1000a39c:	dd000515 	stw	r20,20(sp)
1000a3a0:	dcc00415 	stw	r19,16(sp)
1000a3a4:	dc400215 	stw	r17,8(sp)
1000a3a8:	dc000115 	stw	r16,4(sp)
1000a3ac:	288002c4 	addi	r2,r5,11
1000a3b0:	00c00584 	movi	r3,22
1000a3b4:	2025883a 	mov	r18,r4
1000a3b8:	18807f2e 	bgeu	r3,r2,1000a5b8 <_malloc_r+0x238>
1000a3bc:	047ffe04 	movi	r17,-8
1000a3c0:	1462703a 	and	r17,r2,r17
1000a3c4:	8800a316 	blt	r17,zero,1000a654 <_malloc_r+0x2d4>
1000a3c8:	8940a236 	bltu	r17,r5,1000a654 <_malloc_r+0x2d4>
1000a3cc:	001237c0 	call	1001237c <__malloc_lock>
1000a3d0:	00807dc4 	movi	r2,503
1000a3d4:	1441e92e 	bgeu	r2,r17,1000ab7c <_malloc_r+0x7fc>
1000a3d8:	8804d27a 	srli	r2,r17,9
1000a3dc:	1000a126 	beq	r2,zero,1000a664 <_malloc_r+0x2e4>
1000a3e0:	00c00104 	movi	r3,4
1000a3e4:	18811e36 	bltu	r3,r2,1000a860 <_malloc_r+0x4e0>
1000a3e8:	8804d1ba 	srli	r2,r17,6
1000a3ec:	12000e44 	addi	r8,r2,57
1000a3f0:	11c00e04 	addi	r7,r2,56
1000a3f4:	4209883a 	add	r4,r8,r8
1000a3f8:	04c400b4 	movhi	r19,4098
1000a3fc:	2109883a 	add	r4,r4,r4
1000a400:	9cc48d04 	addi	r19,r19,4660
1000a404:	2109883a 	add	r4,r4,r4
1000a408:	9909883a 	add	r4,r19,r4
1000a40c:	24000117 	ldw	r16,4(r4)
1000a410:	213ffe04 	addi	r4,r4,-8
1000a414:	24009726 	beq	r4,r16,1000a674 <_malloc_r+0x2f4>
1000a418:	80800117 	ldw	r2,4(r16)
1000a41c:	01bfff04 	movi	r6,-4
1000a420:	014003c4 	movi	r5,15
1000a424:	1184703a 	and	r2,r2,r6
1000a428:	1447c83a 	sub	r3,r2,r17
1000a42c:	28c00716 	blt	r5,r3,1000a44c <_malloc_r+0xcc>
1000a430:	1800920e 	bge	r3,zero,1000a67c <_malloc_r+0x2fc>
1000a434:	84000317 	ldw	r16,12(r16)
1000a438:	24008e26 	beq	r4,r16,1000a674 <_malloc_r+0x2f4>
1000a43c:	80800117 	ldw	r2,4(r16)
1000a440:	1184703a 	and	r2,r2,r6
1000a444:	1447c83a 	sub	r3,r2,r17
1000a448:	28fff90e 	bge	r5,r3,1000a430 <__alt_data_end+0xf800a430>
1000a44c:	3809883a 	mov	r4,r7
1000a450:	018400b4 	movhi	r6,4098
1000a454:	9c000417 	ldw	r16,16(r19)
1000a458:	31848d04 	addi	r6,r6,4660
1000a45c:	32000204 	addi	r8,r6,8
1000a460:	82013426 	beq	r16,r8,1000a934 <_malloc_r+0x5b4>
1000a464:	80c00117 	ldw	r3,4(r16)
1000a468:	00bfff04 	movi	r2,-4
1000a46c:	188e703a 	and	r7,r3,r2
1000a470:	3c45c83a 	sub	r2,r7,r17
1000a474:	00c003c4 	movi	r3,15
1000a478:	18811f16 	blt	r3,r2,1000a8f8 <_malloc_r+0x578>
1000a47c:	32000515 	stw	r8,20(r6)
1000a480:	32000415 	stw	r8,16(r6)
1000a484:	10007f0e 	bge	r2,zero,1000a684 <_malloc_r+0x304>
1000a488:	00807fc4 	movi	r2,511
1000a48c:	11c0fd36 	bltu	r2,r7,1000a884 <_malloc_r+0x504>
1000a490:	3806d0fa 	srli	r3,r7,3
1000a494:	01c00044 	movi	r7,1
1000a498:	30800117 	ldw	r2,4(r6)
1000a49c:	19400044 	addi	r5,r3,1
1000a4a0:	294b883a 	add	r5,r5,r5
1000a4a4:	1807d0ba 	srai	r3,r3,2
1000a4a8:	294b883a 	add	r5,r5,r5
1000a4ac:	294b883a 	add	r5,r5,r5
1000a4b0:	298b883a 	add	r5,r5,r6
1000a4b4:	38c6983a 	sll	r3,r7,r3
1000a4b8:	29c00017 	ldw	r7,0(r5)
1000a4bc:	2a7ffe04 	addi	r9,r5,-8
1000a4c0:	1886b03a 	or	r3,r3,r2
1000a4c4:	82400315 	stw	r9,12(r16)
1000a4c8:	81c00215 	stw	r7,8(r16)
1000a4cc:	30c00115 	stw	r3,4(r6)
1000a4d0:	2c000015 	stw	r16,0(r5)
1000a4d4:	3c000315 	stw	r16,12(r7)
1000a4d8:	2005d0ba 	srai	r2,r4,2
1000a4dc:	01400044 	movi	r5,1
1000a4e0:	288a983a 	sll	r5,r5,r2
1000a4e4:	19406f36 	bltu	r3,r5,1000a6a4 <_malloc_r+0x324>
1000a4e8:	28c4703a 	and	r2,r5,r3
1000a4ec:	10000a1e 	bne	r2,zero,1000a518 <_malloc_r+0x198>
1000a4f0:	00bfff04 	movi	r2,-4
1000a4f4:	294b883a 	add	r5,r5,r5
1000a4f8:	2088703a 	and	r4,r4,r2
1000a4fc:	28c4703a 	and	r2,r5,r3
1000a500:	21000104 	addi	r4,r4,4
1000a504:	1000041e 	bne	r2,zero,1000a518 <_malloc_r+0x198>
1000a508:	294b883a 	add	r5,r5,r5
1000a50c:	28c4703a 	and	r2,r5,r3
1000a510:	21000104 	addi	r4,r4,4
1000a514:	103ffc26 	beq	r2,zero,1000a508 <__alt_data_end+0xf800a508>
1000a518:	02bfff04 	movi	r10,-4
1000a51c:	024003c4 	movi	r9,15
1000a520:	21800044 	addi	r6,r4,1
1000a524:	318d883a 	add	r6,r6,r6
1000a528:	318d883a 	add	r6,r6,r6
1000a52c:	318d883a 	add	r6,r6,r6
1000a530:	998d883a 	add	r6,r19,r6
1000a534:	333ffe04 	addi	r12,r6,-8
1000a538:	2017883a 	mov	r11,r4
1000a53c:	31800104 	addi	r6,r6,4
1000a540:	34000017 	ldw	r16,0(r6)
1000a544:	31fffd04 	addi	r7,r6,-12
1000a548:	81c0041e 	bne	r16,r7,1000a55c <_malloc_r+0x1dc>
1000a54c:	0000fb06 	br	1000a93c <_malloc_r+0x5bc>
1000a550:	1801030e 	bge	r3,zero,1000a960 <_malloc_r+0x5e0>
1000a554:	84000317 	ldw	r16,12(r16)
1000a558:	81c0f826 	beq	r16,r7,1000a93c <_malloc_r+0x5bc>
1000a55c:	80800117 	ldw	r2,4(r16)
1000a560:	1284703a 	and	r2,r2,r10
1000a564:	1447c83a 	sub	r3,r2,r17
1000a568:	48fff90e 	bge	r9,r3,1000a550 <__alt_data_end+0xf800a550>
1000a56c:	80800317 	ldw	r2,12(r16)
1000a570:	81000217 	ldw	r4,8(r16)
1000a574:	89400054 	ori	r5,r17,1
1000a578:	81400115 	stw	r5,4(r16)
1000a57c:	20800315 	stw	r2,12(r4)
1000a580:	11000215 	stw	r4,8(r2)
1000a584:	8463883a 	add	r17,r16,r17
1000a588:	9c400515 	stw	r17,20(r19)
1000a58c:	9c400415 	stw	r17,16(r19)
1000a590:	18800054 	ori	r2,r3,1
1000a594:	88800115 	stw	r2,4(r17)
1000a598:	8a000315 	stw	r8,12(r17)
1000a59c:	8a000215 	stw	r8,8(r17)
1000a5a0:	88e3883a 	add	r17,r17,r3
1000a5a4:	88c00015 	stw	r3,0(r17)
1000a5a8:	9009883a 	mov	r4,r18
1000a5ac:	00123a00 	call	100123a0 <__malloc_unlock>
1000a5b0:	80800204 	addi	r2,r16,8
1000a5b4:	00001b06 	br	1000a624 <_malloc_r+0x2a4>
1000a5b8:	04400404 	movi	r17,16
1000a5bc:	89402536 	bltu	r17,r5,1000a654 <_malloc_r+0x2d4>
1000a5c0:	001237c0 	call	1001237c <__malloc_lock>
1000a5c4:	00800184 	movi	r2,6
1000a5c8:	01000084 	movi	r4,2
1000a5cc:	04c400b4 	movhi	r19,4098
1000a5d0:	1085883a 	add	r2,r2,r2
1000a5d4:	9cc48d04 	addi	r19,r19,4660
1000a5d8:	1085883a 	add	r2,r2,r2
1000a5dc:	9885883a 	add	r2,r19,r2
1000a5e0:	14000117 	ldw	r16,4(r2)
1000a5e4:	10fffe04 	addi	r3,r2,-8
1000a5e8:	80c0d926 	beq	r16,r3,1000a950 <_malloc_r+0x5d0>
1000a5ec:	80c00117 	ldw	r3,4(r16)
1000a5f0:	81000317 	ldw	r4,12(r16)
1000a5f4:	00bfff04 	movi	r2,-4
1000a5f8:	1884703a 	and	r2,r3,r2
1000a5fc:	81400217 	ldw	r5,8(r16)
1000a600:	8085883a 	add	r2,r16,r2
1000a604:	10c00117 	ldw	r3,4(r2)
1000a608:	29000315 	stw	r4,12(r5)
1000a60c:	21400215 	stw	r5,8(r4)
1000a610:	18c00054 	ori	r3,r3,1
1000a614:	10c00115 	stw	r3,4(r2)
1000a618:	9009883a 	mov	r4,r18
1000a61c:	00123a00 	call	100123a0 <__malloc_unlock>
1000a620:	80800204 	addi	r2,r16,8
1000a624:	dfc00a17 	ldw	ra,40(sp)
1000a628:	df000917 	ldw	fp,36(sp)
1000a62c:	ddc00817 	ldw	r23,32(sp)
1000a630:	dd800717 	ldw	r22,28(sp)
1000a634:	dd400617 	ldw	r21,24(sp)
1000a638:	dd000517 	ldw	r20,20(sp)
1000a63c:	dcc00417 	ldw	r19,16(sp)
1000a640:	dc800317 	ldw	r18,12(sp)
1000a644:	dc400217 	ldw	r17,8(sp)
1000a648:	dc000117 	ldw	r16,4(sp)
1000a64c:	dec00b04 	addi	sp,sp,44
1000a650:	f800283a 	ret
1000a654:	00800304 	movi	r2,12
1000a658:	90800015 	stw	r2,0(r18)
1000a65c:	0005883a 	mov	r2,zero
1000a660:	003ff006 	br	1000a624 <__alt_data_end+0xf800a624>
1000a664:	01002004 	movi	r4,128
1000a668:	02001004 	movi	r8,64
1000a66c:	01c00fc4 	movi	r7,63
1000a670:	003f6106 	br	1000a3f8 <__alt_data_end+0xf800a3f8>
1000a674:	4009883a 	mov	r4,r8
1000a678:	003f7506 	br	1000a450 <__alt_data_end+0xf800a450>
1000a67c:	81000317 	ldw	r4,12(r16)
1000a680:	003fde06 	br	1000a5fc <__alt_data_end+0xf800a5fc>
1000a684:	81c5883a 	add	r2,r16,r7
1000a688:	11400117 	ldw	r5,4(r2)
1000a68c:	9009883a 	mov	r4,r18
1000a690:	29400054 	ori	r5,r5,1
1000a694:	11400115 	stw	r5,4(r2)
1000a698:	00123a00 	call	100123a0 <__malloc_unlock>
1000a69c:	80800204 	addi	r2,r16,8
1000a6a0:	003fe006 	br	1000a624 <__alt_data_end+0xf800a624>
1000a6a4:	9c000217 	ldw	r16,8(r19)
1000a6a8:	00bfff04 	movi	r2,-4
1000a6ac:	85800117 	ldw	r22,4(r16)
1000a6b0:	b0ac703a 	and	r22,r22,r2
1000a6b4:	b4400336 	bltu	r22,r17,1000a6c4 <_malloc_r+0x344>
1000a6b8:	b445c83a 	sub	r2,r22,r17
1000a6bc:	00c003c4 	movi	r3,15
1000a6c0:	18805d16 	blt	r3,r2,1000a838 <_malloc_r+0x4b8>
1000a6c4:	05c400b4 	movhi	r23,4098
1000a6c8:	008400f4 	movhi	r2,4099
1000a6cc:	10800d04 	addi	r2,r2,52
1000a6d0:	bdca1404 	addi	r23,r23,10320
1000a6d4:	15400017 	ldw	r21,0(r2)
1000a6d8:	b8c00017 	ldw	r3,0(r23)
1000a6dc:	00bfffc4 	movi	r2,-1
1000a6e0:	858d883a 	add	r6,r16,r22
1000a6e4:	8d6b883a 	add	r21,r17,r21
1000a6e8:	1880ea26 	beq	r3,r2,1000aa94 <_malloc_r+0x714>
1000a6ec:	ad4403c4 	addi	r21,r21,4111
1000a6f0:	00bc0004 	movi	r2,-4096
1000a6f4:	a8aa703a 	and	r21,r21,r2
1000a6f8:	a80b883a 	mov	r5,r21
1000a6fc:	9009883a 	mov	r4,r18
1000a700:	d9800015 	stw	r6,0(sp)
1000a704:	000c6cc0 	call	1000c6cc <_sbrk_r>
1000a708:	1029883a 	mov	r20,r2
1000a70c:	00bfffc4 	movi	r2,-1
1000a710:	d9800017 	ldw	r6,0(sp)
1000a714:	a080e826 	beq	r20,r2,1000aab8 <_malloc_r+0x738>
1000a718:	a180a636 	bltu	r20,r6,1000a9b4 <_malloc_r+0x634>
1000a71c:	070400f4 	movhi	fp,4099
1000a720:	e7001604 	addi	fp,fp,88
1000a724:	e0800017 	ldw	r2,0(fp)
1000a728:	a887883a 	add	r3,r21,r2
1000a72c:	e0c00015 	stw	r3,0(fp)
1000a730:	3500e626 	beq	r6,r20,1000aacc <_malloc_r+0x74c>
1000a734:	b9000017 	ldw	r4,0(r23)
1000a738:	00bfffc4 	movi	r2,-1
1000a73c:	2080ee26 	beq	r4,r2,1000aaf8 <_malloc_r+0x778>
1000a740:	a185c83a 	sub	r2,r20,r6
1000a744:	10c5883a 	add	r2,r2,r3
1000a748:	e0800015 	stw	r2,0(fp)
1000a74c:	a0c001cc 	andi	r3,r20,7
1000a750:	1800bc26 	beq	r3,zero,1000aa44 <_malloc_r+0x6c4>
1000a754:	a0e9c83a 	sub	r20,r20,r3
1000a758:	00840204 	movi	r2,4104
1000a75c:	a5000204 	addi	r20,r20,8
1000a760:	10c7c83a 	sub	r3,r2,r3
1000a764:	a545883a 	add	r2,r20,r21
1000a768:	1083ffcc 	andi	r2,r2,4095
1000a76c:	18abc83a 	sub	r21,r3,r2
1000a770:	a80b883a 	mov	r5,r21
1000a774:	9009883a 	mov	r4,r18
1000a778:	000c6cc0 	call	1000c6cc <_sbrk_r>
1000a77c:	00ffffc4 	movi	r3,-1
1000a780:	10c0e126 	beq	r2,r3,1000ab08 <_malloc_r+0x788>
1000a784:	1505c83a 	sub	r2,r2,r20
1000a788:	1545883a 	add	r2,r2,r21
1000a78c:	10800054 	ori	r2,r2,1
1000a790:	e0c00017 	ldw	r3,0(fp)
1000a794:	9d000215 	stw	r20,8(r19)
1000a798:	a0800115 	stw	r2,4(r20)
1000a79c:	a8c7883a 	add	r3,r21,r3
1000a7a0:	e0c00015 	stw	r3,0(fp)
1000a7a4:	84c00e26 	beq	r16,r19,1000a7e0 <_malloc_r+0x460>
1000a7a8:	018003c4 	movi	r6,15
1000a7ac:	3580a72e 	bgeu	r6,r22,1000aa4c <_malloc_r+0x6cc>
1000a7b0:	81400117 	ldw	r5,4(r16)
1000a7b4:	013ffe04 	movi	r4,-8
1000a7b8:	b0bffd04 	addi	r2,r22,-12
1000a7bc:	1104703a 	and	r2,r2,r4
1000a7c0:	2900004c 	andi	r4,r5,1
1000a7c4:	2088b03a 	or	r4,r4,r2
1000a7c8:	81000115 	stw	r4,4(r16)
1000a7cc:	01400144 	movi	r5,5
1000a7d0:	8089883a 	add	r4,r16,r2
1000a7d4:	21400115 	stw	r5,4(r4)
1000a7d8:	21400215 	stw	r5,8(r4)
1000a7dc:	3080cd36 	bltu	r6,r2,1000ab14 <_malloc_r+0x794>
1000a7e0:	008400f4 	movhi	r2,4099
1000a7e4:	10800c04 	addi	r2,r2,48
1000a7e8:	11000017 	ldw	r4,0(r2)
1000a7ec:	20c0012e 	bgeu	r4,r3,1000a7f4 <_malloc_r+0x474>
1000a7f0:	10c00015 	stw	r3,0(r2)
1000a7f4:	008400f4 	movhi	r2,4099
1000a7f8:	10800b04 	addi	r2,r2,44
1000a7fc:	11000017 	ldw	r4,0(r2)
1000a800:	9c000217 	ldw	r16,8(r19)
1000a804:	20c0012e 	bgeu	r4,r3,1000a80c <_malloc_r+0x48c>
1000a808:	10c00015 	stw	r3,0(r2)
1000a80c:	80c00117 	ldw	r3,4(r16)
1000a810:	00bfff04 	movi	r2,-4
1000a814:	1886703a 	and	r3,r3,r2
1000a818:	1c45c83a 	sub	r2,r3,r17
1000a81c:	1c400236 	bltu	r3,r17,1000a828 <_malloc_r+0x4a8>
1000a820:	00c003c4 	movi	r3,15
1000a824:	18800416 	blt	r3,r2,1000a838 <_malloc_r+0x4b8>
1000a828:	9009883a 	mov	r4,r18
1000a82c:	00123a00 	call	100123a0 <__malloc_unlock>
1000a830:	0005883a 	mov	r2,zero
1000a834:	003f7b06 	br	1000a624 <__alt_data_end+0xf800a624>
1000a838:	88c00054 	ori	r3,r17,1
1000a83c:	80c00115 	stw	r3,4(r16)
1000a840:	8463883a 	add	r17,r16,r17
1000a844:	10800054 	ori	r2,r2,1
1000a848:	9c400215 	stw	r17,8(r19)
1000a84c:	88800115 	stw	r2,4(r17)
1000a850:	9009883a 	mov	r4,r18
1000a854:	00123a00 	call	100123a0 <__malloc_unlock>
1000a858:	80800204 	addi	r2,r16,8
1000a85c:	003f7106 	br	1000a624 <__alt_data_end+0xf800a624>
1000a860:	00c00504 	movi	r3,20
1000a864:	18804a2e 	bgeu	r3,r2,1000a990 <_malloc_r+0x610>
1000a868:	00c01504 	movi	r3,84
1000a86c:	18806e36 	bltu	r3,r2,1000aa28 <_malloc_r+0x6a8>
1000a870:	8804d33a 	srli	r2,r17,12
1000a874:	12001bc4 	addi	r8,r2,111
1000a878:	11c01b84 	addi	r7,r2,110
1000a87c:	4209883a 	add	r4,r8,r8
1000a880:	003edd06 	br	1000a3f8 <__alt_data_end+0xf800a3f8>
1000a884:	3804d27a 	srli	r2,r7,9
1000a888:	00c00104 	movi	r3,4
1000a88c:	1880442e 	bgeu	r3,r2,1000a9a0 <_malloc_r+0x620>
1000a890:	00c00504 	movi	r3,20
1000a894:	18808136 	bltu	r3,r2,1000aa9c <_malloc_r+0x71c>
1000a898:	11401704 	addi	r5,r2,92
1000a89c:	10c016c4 	addi	r3,r2,91
1000a8a0:	294b883a 	add	r5,r5,r5
1000a8a4:	294b883a 	add	r5,r5,r5
1000a8a8:	294b883a 	add	r5,r5,r5
1000a8ac:	994b883a 	add	r5,r19,r5
1000a8b0:	28800017 	ldw	r2,0(r5)
1000a8b4:	018400b4 	movhi	r6,4098
1000a8b8:	297ffe04 	addi	r5,r5,-8
1000a8bc:	31848d04 	addi	r6,r6,4660
1000a8c0:	28806526 	beq	r5,r2,1000aa58 <_malloc_r+0x6d8>
1000a8c4:	01bfff04 	movi	r6,-4
1000a8c8:	10c00117 	ldw	r3,4(r2)
1000a8cc:	1986703a 	and	r3,r3,r6
1000a8d0:	38c0022e 	bgeu	r7,r3,1000a8dc <_malloc_r+0x55c>
1000a8d4:	10800217 	ldw	r2,8(r2)
1000a8d8:	28bffb1e 	bne	r5,r2,1000a8c8 <__alt_data_end+0xf800a8c8>
1000a8dc:	11400317 	ldw	r5,12(r2)
1000a8e0:	98c00117 	ldw	r3,4(r19)
1000a8e4:	81400315 	stw	r5,12(r16)
1000a8e8:	80800215 	stw	r2,8(r16)
1000a8ec:	2c000215 	stw	r16,8(r5)
1000a8f0:	14000315 	stw	r16,12(r2)
1000a8f4:	003ef806 	br	1000a4d8 <__alt_data_end+0xf800a4d8>
1000a8f8:	88c00054 	ori	r3,r17,1
1000a8fc:	80c00115 	stw	r3,4(r16)
1000a900:	8463883a 	add	r17,r16,r17
1000a904:	34400515 	stw	r17,20(r6)
1000a908:	34400415 	stw	r17,16(r6)
1000a90c:	10c00054 	ori	r3,r2,1
1000a910:	8a000315 	stw	r8,12(r17)
1000a914:	8a000215 	stw	r8,8(r17)
1000a918:	88c00115 	stw	r3,4(r17)
1000a91c:	88a3883a 	add	r17,r17,r2
1000a920:	88800015 	stw	r2,0(r17)
1000a924:	9009883a 	mov	r4,r18
1000a928:	00123a00 	call	100123a0 <__malloc_unlock>
1000a92c:	80800204 	addi	r2,r16,8
1000a930:	003f3c06 	br	1000a624 <__alt_data_end+0xf800a624>
1000a934:	30c00117 	ldw	r3,4(r6)
1000a938:	003ee706 	br	1000a4d8 <__alt_data_end+0xf800a4d8>
1000a93c:	5ac00044 	addi	r11,r11,1
1000a940:	588000cc 	andi	r2,r11,3
1000a944:	31800204 	addi	r6,r6,8
1000a948:	103efd1e 	bne	r2,zero,1000a540 <__alt_data_end+0xf800a540>
1000a94c:	00002406 	br	1000a9e0 <_malloc_r+0x660>
1000a950:	14000317 	ldw	r16,12(r2)
1000a954:	143f251e 	bne	r2,r16,1000a5ec <__alt_data_end+0xf800a5ec>
1000a958:	21000084 	addi	r4,r4,2
1000a95c:	003ebc06 	br	1000a450 <__alt_data_end+0xf800a450>
1000a960:	8085883a 	add	r2,r16,r2
1000a964:	10c00117 	ldw	r3,4(r2)
1000a968:	81000317 	ldw	r4,12(r16)
1000a96c:	81400217 	ldw	r5,8(r16)
1000a970:	18c00054 	ori	r3,r3,1
1000a974:	10c00115 	stw	r3,4(r2)
1000a978:	29000315 	stw	r4,12(r5)
1000a97c:	21400215 	stw	r5,8(r4)
1000a980:	9009883a 	mov	r4,r18
1000a984:	00123a00 	call	100123a0 <__malloc_unlock>
1000a988:	80800204 	addi	r2,r16,8
1000a98c:	003f2506 	br	1000a624 <__alt_data_end+0xf800a624>
1000a990:	12001704 	addi	r8,r2,92
1000a994:	11c016c4 	addi	r7,r2,91
1000a998:	4209883a 	add	r4,r8,r8
1000a99c:	003e9606 	br	1000a3f8 <__alt_data_end+0xf800a3f8>
1000a9a0:	3804d1ba 	srli	r2,r7,6
1000a9a4:	11400e44 	addi	r5,r2,57
1000a9a8:	10c00e04 	addi	r3,r2,56
1000a9ac:	294b883a 	add	r5,r5,r5
1000a9b0:	003fbc06 	br	1000a8a4 <__alt_data_end+0xf800a8a4>
1000a9b4:	84ff5926 	beq	r16,r19,1000a71c <__alt_data_end+0xf800a71c>
1000a9b8:	008400b4 	movhi	r2,4098
1000a9bc:	10848d04 	addi	r2,r2,4660
1000a9c0:	14000217 	ldw	r16,8(r2)
1000a9c4:	00bfff04 	movi	r2,-4
1000a9c8:	80c00117 	ldw	r3,4(r16)
1000a9cc:	1886703a 	and	r3,r3,r2
1000a9d0:	003f9106 	br	1000a818 <__alt_data_end+0xf800a818>
1000a9d4:	60800217 	ldw	r2,8(r12)
1000a9d8:	213fffc4 	addi	r4,r4,-1
1000a9dc:	1300651e 	bne	r2,r12,1000ab74 <_malloc_r+0x7f4>
1000a9e0:	208000cc 	andi	r2,r4,3
1000a9e4:	633ffe04 	addi	r12,r12,-8
1000a9e8:	103ffa1e 	bne	r2,zero,1000a9d4 <__alt_data_end+0xf800a9d4>
1000a9ec:	98800117 	ldw	r2,4(r19)
1000a9f0:	0146303a 	nor	r3,zero,r5
1000a9f4:	1884703a 	and	r2,r3,r2
1000a9f8:	98800115 	stw	r2,4(r19)
1000a9fc:	294b883a 	add	r5,r5,r5
1000aa00:	117f2836 	bltu	r2,r5,1000a6a4 <__alt_data_end+0xf800a6a4>
1000aa04:	283f2726 	beq	r5,zero,1000a6a4 <__alt_data_end+0xf800a6a4>
1000aa08:	2886703a 	and	r3,r5,r2
1000aa0c:	5809883a 	mov	r4,r11
1000aa10:	183ec31e 	bne	r3,zero,1000a520 <__alt_data_end+0xf800a520>
1000aa14:	294b883a 	add	r5,r5,r5
1000aa18:	2886703a 	and	r3,r5,r2
1000aa1c:	21000104 	addi	r4,r4,4
1000aa20:	183ffc26 	beq	r3,zero,1000aa14 <__alt_data_end+0xf800aa14>
1000aa24:	003ebe06 	br	1000a520 <__alt_data_end+0xf800a520>
1000aa28:	00c05504 	movi	r3,340
1000aa2c:	18801236 	bltu	r3,r2,1000aa78 <_malloc_r+0x6f8>
1000aa30:	8804d3fa 	srli	r2,r17,15
1000aa34:	12001e04 	addi	r8,r2,120
1000aa38:	11c01dc4 	addi	r7,r2,119
1000aa3c:	4209883a 	add	r4,r8,r8
1000aa40:	003e6d06 	br	1000a3f8 <__alt_data_end+0xf800a3f8>
1000aa44:	00c40004 	movi	r3,4096
1000aa48:	003f4606 	br	1000a764 <__alt_data_end+0xf800a764>
1000aa4c:	00800044 	movi	r2,1
1000aa50:	a0800115 	stw	r2,4(r20)
1000aa54:	003f7406 	br	1000a828 <__alt_data_end+0xf800a828>
1000aa58:	1805d0ba 	srai	r2,r3,2
1000aa5c:	01c00044 	movi	r7,1
1000aa60:	30c00117 	ldw	r3,4(r6)
1000aa64:	388e983a 	sll	r7,r7,r2
1000aa68:	2805883a 	mov	r2,r5
1000aa6c:	38c6b03a 	or	r3,r7,r3
1000aa70:	30c00115 	stw	r3,4(r6)
1000aa74:	003f9b06 	br	1000a8e4 <__alt_data_end+0xf800a8e4>
1000aa78:	00c15504 	movi	r3,1364
1000aa7c:	18801a36 	bltu	r3,r2,1000aae8 <_malloc_r+0x768>
1000aa80:	8804d4ba 	srli	r2,r17,18
1000aa84:	12001f44 	addi	r8,r2,125
1000aa88:	11c01f04 	addi	r7,r2,124
1000aa8c:	4209883a 	add	r4,r8,r8
1000aa90:	003e5906 	br	1000a3f8 <__alt_data_end+0xf800a3f8>
1000aa94:	ad400404 	addi	r21,r21,16
1000aa98:	003f1706 	br	1000a6f8 <__alt_data_end+0xf800a6f8>
1000aa9c:	00c01504 	movi	r3,84
1000aaa0:	18802336 	bltu	r3,r2,1000ab30 <_malloc_r+0x7b0>
1000aaa4:	3804d33a 	srli	r2,r7,12
1000aaa8:	11401bc4 	addi	r5,r2,111
1000aaac:	10c01b84 	addi	r3,r2,110
1000aab0:	294b883a 	add	r5,r5,r5
1000aab4:	003f7b06 	br	1000a8a4 <__alt_data_end+0xf800a8a4>
1000aab8:	9c000217 	ldw	r16,8(r19)
1000aabc:	00bfff04 	movi	r2,-4
1000aac0:	80c00117 	ldw	r3,4(r16)
1000aac4:	1886703a 	and	r3,r3,r2
1000aac8:	003f5306 	br	1000a818 <__alt_data_end+0xf800a818>
1000aacc:	3083ffcc 	andi	r2,r6,4095
1000aad0:	103f181e 	bne	r2,zero,1000a734 <__alt_data_end+0xf800a734>
1000aad4:	99000217 	ldw	r4,8(r19)
1000aad8:	b545883a 	add	r2,r22,r21
1000aadc:	10800054 	ori	r2,r2,1
1000aae0:	20800115 	stw	r2,4(r4)
1000aae4:	003f3e06 	br	1000a7e0 <__alt_data_end+0xf800a7e0>
1000aae8:	01003f84 	movi	r4,254
1000aaec:	02001fc4 	movi	r8,127
1000aaf0:	01c01f84 	movi	r7,126
1000aaf4:	003e4006 	br	1000a3f8 <__alt_data_end+0xf800a3f8>
1000aaf8:	008400b4 	movhi	r2,4098
1000aafc:	108a1404 	addi	r2,r2,10320
1000ab00:	15000015 	stw	r20,0(r2)
1000ab04:	003f1106 	br	1000a74c <__alt_data_end+0xf800a74c>
1000ab08:	00800044 	movi	r2,1
1000ab0c:	002b883a 	mov	r21,zero
1000ab10:	003f1f06 	br	1000a790 <__alt_data_end+0xf800a790>
1000ab14:	81400204 	addi	r5,r16,8
1000ab18:	9009883a 	mov	r4,r18
1000ab1c:	00097880 	call	10009788 <_free_r>
1000ab20:	008400f4 	movhi	r2,4099
1000ab24:	10801604 	addi	r2,r2,88
1000ab28:	10c00017 	ldw	r3,0(r2)
1000ab2c:	003f2c06 	br	1000a7e0 <__alt_data_end+0xf800a7e0>
1000ab30:	00c05504 	movi	r3,340
1000ab34:	18800536 	bltu	r3,r2,1000ab4c <_malloc_r+0x7cc>
1000ab38:	3804d3fa 	srli	r2,r7,15
1000ab3c:	11401e04 	addi	r5,r2,120
1000ab40:	10c01dc4 	addi	r3,r2,119
1000ab44:	294b883a 	add	r5,r5,r5
1000ab48:	003f5606 	br	1000a8a4 <__alt_data_end+0xf800a8a4>
1000ab4c:	00c15504 	movi	r3,1364
1000ab50:	18800536 	bltu	r3,r2,1000ab68 <_malloc_r+0x7e8>
1000ab54:	3804d4ba 	srli	r2,r7,18
1000ab58:	11401f44 	addi	r5,r2,125
1000ab5c:	10c01f04 	addi	r3,r2,124
1000ab60:	294b883a 	add	r5,r5,r5
1000ab64:	003f4f06 	br	1000a8a4 <__alt_data_end+0xf800a8a4>
1000ab68:	01403f84 	movi	r5,254
1000ab6c:	00c01f84 	movi	r3,126
1000ab70:	003f4c06 	br	1000a8a4 <__alt_data_end+0xf800a8a4>
1000ab74:	98800117 	ldw	r2,4(r19)
1000ab78:	003fa006 	br	1000a9fc <__alt_data_end+0xf800a9fc>
1000ab7c:	8808d0fa 	srli	r4,r17,3
1000ab80:	20800044 	addi	r2,r4,1
1000ab84:	1085883a 	add	r2,r2,r2
1000ab88:	003e9006 	br	1000a5cc <__alt_data_end+0xf800a5cc>

1000ab8c <memchr>:
1000ab8c:	208000cc 	andi	r2,r4,3
1000ab90:	280f883a 	mov	r7,r5
1000ab94:	10003426 	beq	r2,zero,1000ac68 <memchr+0xdc>
1000ab98:	30bfffc4 	addi	r2,r6,-1
1000ab9c:	30001a26 	beq	r6,zero,1000ac08 <memchr+0x7c>
1000aba0:	20c00003 	ldbu	r3,0(r4)
1000aba4:	29803fcc 	andi	r6,r5,255
1000aba8:	30c0051e 	bne	r6,r3,1000abc0 <memchr+0x34>
1000abac:	00001806 	br	1000ac10 <memchr+0x84>
1000abb0:	10001526 	beq	r2,zero,1000ac08 <memchr+0x7c>
1000abb4:	20c00003 	ldbu	r3,0(r4)
1000abb8:	10bfffc4 	addi	r2,r2,-1
1000abbc:	30c01426 	beq	r6,r3,1000ac10 <memchr+0x84>
1000abc0:	21000044 	addi	r4,r4,1
1000abc4:	20c000cc 	andi	r3,r4,3
1000abc8:	183ff91e 	bne	r3,zero,1000abb0 <__alt_data_end+0xf800abb0>
1000abcc:	020000c4 	movi	r8,3
1000abd0:	40801136 	bltu	r8,r2,1000ac18 <memchr+0x8c>
1000abd4:	10000c26 	beq	r2,zero,1000ac08 <memchr+0x7c>
1000abd8:	20c00003 	ldbu	r3,0(r4)
1000abdc:	29403fcc 	andi	r5,r5,255
1000abe0:	28c00b26 	beq	r5,r3,1000ac10 <memchr+0x84>
1000abe4:	20c00044 	addi	r3,r4,1
1000abe8:	39803fcc 	andi	r6,r7,255
1000abec:	2089883a 	add	r4,r4,r2
1000abf0:	00000306 	br	1000ac00 <memchr+0x74>
1000abf4:	18c00044 	addi	r3,r3,1
1000abf8:	197fffc3 	ldbu	r5,-1(r3)
1000abfc:	31400526 	beq	r6,r5,1000ac14 <memchr+0x88>
1000ac00:	1805883a 	mov	r2,r3
1000ac04:	20fffb1e 	bne	r4,r3,1000abf4 <__alt_data_end+0xf800abf4>
1000ac08:	0005883a 	mov	r2,zero
1000ac0c:	f800283a 	ret
1000ac10:	2005883a 	mov	r2,r4
1000ac14:	f800283a 	ret
1000ac18:	28c03fcc 	andi	r3,r5,255
1000ac1c:	1812923a 	slli	r9,r3,8
1000ac20:	02ffbff4 	movhi	r11,65279
1000ac24:	02a02074 	movhi	r10,32897
1000ac28:	48d2b03a 	or	r9,r9,r3
1000ac2c:	4806943a 	slli	r3,r9,16
1000ac30:	5affbfc4 	addi	r11,r11,-257
1000ac34:	52a02004 	addi	r10,r10,-32640
1000ac38:	48d2b03a 	or	r9,r9,r3
1000ac3c:	20c00017 	ldw	r3,0(r4)
1000ac40:	48c6f03a 	xor	r3,r9,r3
1000ac44:	1acd883a 	add	r6,r3,r11
1000ac48:	00c6303a 	nor	r3,zero,r3
1000ac4c:	30c6703a 	and	r3,r6,r3
1000ac50:	1a86703a 	and	r3,r3,r10
1000ac54:	183fe01e 	bne	r3,zero,1000abd8 <__alt_data_end+0xf800abd8>
1000ac58:	10bfff04 	addi	r2,r2,-4
1000ac5c:	21000104 	addi	r4,r4,4
1000ac60:	40bff636 	bltu	r8,r2,1000ac3c <__alt_data_end+0xf800ac3c>
1000ac64:	003fdb06 	br	1000abd4 <__alt_data_end+0xf800abd4>
1000ac68:	3005883a 	mov	r2,r6
1000ac6c:	003fd706 	br	1000abcc <__alt_data_end+0xf800abcc>

1000ac70 <memcpy>:
1000ac70:	defffd04 	addi	sp,sp,-12
1000ac74:	dfc00215 	stw	ra,8(sp)
1000ac78:	dc400115 	stw	r17,4(sp)
1000ac7c:	dc000015 	stw	r16,0(sp)
1000ac80:	00c003c4 	movi	r3,15
1000ac84:	2005883a 	mov	r2,r4
1000ac88:	1980452e 	bgeu	r3,r6,1000ada0 <memcpy+0x130>
1000ac8c:	2906b03a 	or	r3,r5,r4
1000ac90:	18c000cc 	andi	r3,r3,3
1000ac94:	1800441e 	bne	r3,zero,1000ada8 <memcpy+0x138>
1000ac98:	347ffc04 	addi	r17,r6,-16
1000ac9c:	8822d13a 	srli	r17,r17,4
1000aca0:	28c00104 	addi	r3,r5,4
1000aca4:	23400104 	addi	r13,r4,4
1000aca8:	8820913a 	slli	r16,r17,4
1000acac:	2b000204 	addi	r12,r5,8
1000acb0:	22c00204 	addi	r11,r4,8
1000acb4:	84000504 	addi	r16,r16,20
1000acb8:	2a800304 	addi	r10,r5,12
1000acbc:	22400304 	addi	r9,r4,12
1000acc0:	2c21883a 	add	r16,r5,r16
1000acc4:	2811883a 	mov	r8,r5
1000acc8:	200f883a 	mov	r7,r4
1000accc:	41000017 	ldw	r4,0(r8)
1000acd0:	1fc00017 	ldw	ra,0(r3)
1000acd4:	63c00017 	ldw	r15,0(r12)
1000acd8:	39000015 	stw	r4,0(r7)
1000acdc:	53800017 	ldw	r14,0(r10)
1000ace0:	6fc00015 	stw	ra,0(r13)
1000ace4:	5bc00015 	stw	r15,0(r11)
1000ace8:	4b800015 	stw	r14,0(r9)
1000acec:	18c00404 	addi	r3,r3,16
1000acf0:	39c00404 	addi	r7,r7,16
1000acf4:	42000404 	addi	r8,r8,16
1000acf8:	6b400404 	addi	r13,r13,16
1000acfc:	63000404 	addi	r12,r12,16
1000ad00:	5ac00404 	addi	r11,r11,16
1000ad04:	52800404 	addi	r10,r10,16
1000ad08:	4a400404 	addi	r9,r9,16
1000ad0c:	1c3fef1e 	bne	r3,r16,1000accc <__alt_data_end+0xf800accc>
1000ad10:	89c00044 	addi	r7,r17,1
1000ad14:	380e913a 	slli	r7,r7,4
1000ad18:	310003cc 	andi	r4,r6,15
1000ad1c:	02c000c4 	movi	r11,3
1000ad20:	11c7883a 	add	r3,r2,r7
1000ad24:	29cb883a 	add	r5,r5,r7
1000ad28:	5900212e 	bgeu	r11,r4,1000adb0 <memcpy+0x140>
1000ad2c:	1813883a 	mov	r9,r3
1000ad30:	2811883a 	mov	r8,r5
1000ad34:	200f883a 	mov	r7,r4
1000ad38:	42800017 	ldw	r10,0(r8)
1000ad3c:	4a400104 	addi	r9,r9,4
1000ad40:	39ffff04 	addi	r7,r7,-4
1000ad44:	4abfff15 	stw	r10,-4(r9)
1000ad48:	42000104 	addi	r8,r8,4
1000ad4c:	59fffa36 	bltu	r11,r7,1000ad38 <__alt_data_end+0xf800ad38>
1000ad50:	213fff04 	addi	r4,r4,-4
1000ad54:	2008d0ba 	srli	r4,r4,2
1000ad58:	318000cc 	andi	r6,r6,3
1000ad5c:	21000044 	addi	r4,r4,1
1000ad60:	2109883a 	add	r4,r4,r4
1000ad64:	2109883a 	add	r4,r4,r4
1000ad68:	1907883a 	add	r3,r3,r4
1000ad6c:	290b883a 	add	r5,r5,r4
1000ad70:	30000626 	beq	r6,zero,1000ad8c <memcpy+0x11c>
1000ad74:	198d883a 	add	r6,r3,r6
1000ad78:	29c00003 	ldbu	r7,0(r5)
1000ad7c:	18c00044 	addi	r3,r3,1
1000ad80:	29400044 	addi	r5,r5,1
1000ad84:	19ffffc5 	stb	r7,-1(r3)
1000ad88:	19bffb1e 	bne	r3,r6,1000ad78 <__alt_data_end+0xf800ad78>
1000ad8c:	dfc00217 	ldw	ra,8(sp)
1000ad90:	dc400117 	ldw	r17,4(sp)
1000ad94:	dc000017 	ldw	r16,0(sp)
1000ad98:	dec00304 	addi	sp,sp,12
1000ad9c:	f800283a 	ret
1000ada0:	2007883a 	mov	r3,r4
1000ada4:	003ff206 	br	1000ad70 <__alt_data_end+0xf800ad70>
1000ada8:	2007883a 	mov	r3,r4
1000adac:	003ff106 	br	1000ad74 <__alt_data_end+0xf800ad74>
1000adb0:	200d883a 	mov	r6,r4
1000adb4:	003fee06 	br	1000ad70 <__alt_data_end+0xf800ad70>

1000adb8 <memmove>:
1000adb8:	2005883a 	mov	r2,r4
1000adbc:	29000b2e 	bgeu	r5,r4,1000adec <memmove+0x34>
1000adc0:	298f883a 	add	r7,r5,r6
1000adc4:	21c0092e 	bgeu	r4,r7,1000adec <memmove+0x34>
1000adc8:	2187883a 	add	r3,r4,r6
1000adcc:	198bc83a 	sub	r5,r3,r6
1000add0:	30004826 	beq	r6,zero,1000aef4 <memmove+0x13c>
1000add4:	39ffffc4 	addi	r7,r7,-1
1000add8:	39000003 	ldbu	r4,0(r7)
1000addc:	18ffffc4 	addi	r3,r3,-1
1000ade0:	19000005 	stb	r4,0(r3)
1000ade4:	28fffb1e 	bne	r5,r3,1000add4 <__alt_data_end+0xf800add4>
1000ade8:	f800283a 	ret
1000adec:	00c003c4 	movi	r3,15
1000adf0:	1980412e 	bgeu	r3,r6,1000aef8 <memmove+0x140>
1000adf4:	2886b03a 	or	r3,r5,r2
1000adf8:	18c000cc 	andi	r3,r3,3
1000adfc:	1800401e 	bne	r3,zero,1000af00 <memmove+0x148>
1000ae00:	33fffc04 	addi	r15,r6,-16
1000ae04:	781ed13a 	srli	r15,r15,4
1000ae08:	28c00104 	addi	r3,r5,4
1000ae0c:	13400104 	addi	r13,r2,4
1000ae10:	781c913a 	slli	r14,r15,4
1000ae14:	2b000204 	addi	r12,r5,8
1000ae18:	12c00204 	addi	r11,r2,8
1000ae1c:	73800504 	addi	r14,r14,20
1000ae20:	2a800304 	addi	r10,r5,12
1000ae24:	12400304 	addi	r9,r2,12
1000ae28:	2b9d883a 	add	r14,r5,r14
1000ae2c:	2811883a 	mov	r8,r5
1000ae30:	100f883a 	mov	r7,r2
1000ae34:	41000017 	ldw	r4,0(r8)
1000ae38:	39c00404 	addi	r7,r7,16
1000ae3c:	18c00404 	addi	r3,r3,16
1000ae40:	393ffc15 	stw	r4,-16(r7)
1000ae44:	193ffc17 	ldw	r4,-16(r3)
1000ae48:	6b400404 	addi	r13,r13,16
1000ae4c:	5ac00404 	addi	r11,r11,16
1000ae50:	693ffc15 	stw	r4,-16(r13)
1000ae54:	61000017 	ldw	r4,0(r12)
1000ae58:	4a400404 	addi	r9,r9,16
1000ae5c:	42000404 	addi	r8,r8,16
1000ae60:	593ffc15 	stw	r4,-16(r11)
1000ae64:	51000017 	ldw	r4,0(r10)
1000ae68:	63000404 	addi	r12,r12,16
1000ae6c:	52800404 	addi	r10,r10,16
1000ae70:	493ffc15 	stw	r4,-16(r9)
1000ae74:	1bbfef1e 	bne	r3,r14,1000ae34 <__alt_data_end+0xf800ae34>
1000ae78:	79000044 	addi	r4,r15,1
1000ae7c:	2008913a 	slli	r4,r4,4
1000ae80:	328003cc 	andi	r10,r6,15
1000ae84:	02c000c4 	movi	r11,3
1000ae88:	1107883a 	add	r3,r2,r4
1000ae8c:	290b883a 	add	r5,r5,r4
1000ae90:	5a801e2e 	bgeu	r11,r10,1000af0c <memmove+0x154>
1000ae94:	1813883a 	mov	r9,r3
1000ae98:	2811883a 	mov	r8,r5
1000ae9c:	500f883a 	mov	r7,r10
1000aea0:	41000017 	ldw	r4,0(r8)
1000aea4:	4a400104 	addi	r9,r9,4
1000aea8:	39ffff04 	addi	r7,r7,-4
1000aeac:	493fff15 	stw	r4,-4(r9)
1000aeb0:	42000104 	addi	r8,r8,4
1000aeb4:	59fffa36 	bltu	r11,r7,1000aea0 <__alt_data_end+0xf800aea0>
1000aeb8:	513fff04 	addi	r4,r10,-4
1000aebc:	2008d0ba 	srli	r4,r4,2
1000aec0:	318000cc 	andi	r6,r6,3
1000aec4:	21000044 	addi	r4,r4,1
1000aec8:	2109883a 	add	r4,r4,r4
1000aecc:	2109883a 	add	r4,r4,r4
1000aed0:	1907883a 	add	r3,r3,r4
1000aed4:	290b883a 	add	r5,r5,r4
1000aed8:	30000b26 	beq	r6,zero,1000af08 <memmove+0x150>
1000aedc:	198d883a 	add	r6,r3,r6
1000aee0:	29c00003 	ldbu	r7,0(r5)
1000aee4:	18c00044 	addi	r3,r3,1
1000aee8:	29400044 	addi	r5,r5,1
1000aeec:	19ffffc5 	stb	r7,-1(r3)
1000aef0:	19bffb1e 	bne	r3,r6,1000aee0 <__alt_data_end+0xf800aee0>
1000aef4:	f800283a 	ret
1000aef8:	1007883a 	mov	r3,r2
1000aefc:	003ff606 	br	1000aed8 <__alt_data_end+0xf800aed8>
1000af00:	1007883a 	mov	r3,r2
1000af04:	003ff506 	br	1000aedc <__alt_data_end+0xf800aedc>
1000af08:	f800283a 	ret
1000af0c:	500d883a 	mov	r6,r10
1000af10:	003ff106 	br	1000aed8 <__alt_data_end+0xf800aed8>

1000af14 <memset>:
1000af14:	20c000cc 	andi	r3,r4,3
1000af18:	2005883a 	mov	r2,r4
1000af1c:	18004426 	beq	r3,zero,1000b030 <memset+0x11c>
1000af20:	31ffffc4 	addi	r7,r6,-1
1000af24:	30004026 	beq	r6,zero,1000b028 <memset+0x114>
1000af28:	2813883a 	mov	r9,r5
1000af2c:	200d883a 	mov	r6,r4
1000af30:	2007883a 	mov	r3,r4
1000af34:	00000406 	br	1000af48 <memset+0x34>
1000af38:	3a3fffc4 	addi	r8,r7,-1
1000af3c:	31800044 	addi	r6,r6,1
1000af40:	38003926 	beq	r7,zero,1000b028 <memset+0x114>
1000af44:	400f883a 	mov	r7,r8
1000af48:	18c00044 	addi	r3,r3,1
1000af4c:	32400005 	stb	r9,0(r6)
1000af50:	1a0000cc 	andi	r8,r3,3
1000af54:	403ff81e 	bne	r8,zero,1000af38 <__alt_data_end+0xf800af38>
1000af58:	010000c4 	movi	r4,3
1000af5c:	21c02d2e 	bgeu	r4,r7,1000b014 <memset+0x100>
1000af60:	29003fcc 	andi	r4,r5,255
1000af64:	200c923a 	slli	r6,r4,8
1000af68:	3108b03a 	or	r4,r6,r4
1000af6c:	200c943a 	slli	r6,r4,16
1000af70:	218cb03a 	or	r6,r4,r6
1000af74:	010003c4 	movi	r4,15
1000af78:	21c0182e 	bgeu	r4,r7,1000afdc <memset+0xc8>
1000af7c:	3b3ffc04 	addi	r12,r7,-16
1000af80:	6018d13a 	srli	r12,r12,4
1000af84:	1a000104 	addi	r8,r3,4
1000af88:	1ac00204 	addi	r11,r3,8
1000af8c:	6008913a 	slli	r4,r12,4
1000af90:	1a800304 	addi	r10,r3,12
1000af94:	1813883a 	mov	r9,r3
1000af98:	21000504 	addi	r4,r4,20
1000af9c:	1909883a 	add	r4,r3,r4
1000afa0:	49800015 	stw	r6,0(r9)
1000afa4:	41800015 	stw	r6,0(r8)
1000afa8:	59800015 	stw	r6,0(r11)
1000afac:	51800015 	stw	r6,0(r10)
1000afb0:	42000404 	addi	r8,r8,16
1000afb4:	4a400404 	addi	r9,r9,16
1000afb8:	5ac00404 	addi	r11,r11,16
1000afbc:	52800404 	addi	r10,r10,16
1000afc0:	413ff71e 	bne	r8,r4,1000afa0 <__alt_data_end+0xf800afa0>
1000afc4:	63000044 	addi	r12,r12,1
1000afc8:	6018913a 	slli	r12,r12,4
1000afcc:	39c003cc 	andi	r7,r7,15
1000afd0:	010000c4 	movi	r4,3
1000afd4:	1b07883a 	add	r3,r3,r12
1000afd8:	21c00e2e 	bgeu	r4,r7,1000b014 <memset+0x100>
1000afdc:	1813883a 	mov	r9,r3
1000afe0:	3811883a 	mov	r8,r7
1000afe4:	010000c4 	movi	r4,3
1000afe8:	49800015 	stw	r6,0(r9)
1000afec:	423fff04 	addi	r8,r8,-4
1000aff0:	4a400104 	addi	r9,r9,4
1000aff4:	223ffc36 	bltu	r4,r8,1000afe8 <__alt_data_end+0xf800afe8>
1000aff8:	393fff04 	addi	r4,r7,-4
1000affc:	2008d0ba 	srli	r4,r4,2
1000b000:	39c000cc 	andi	r7,r7,3
1000b004:	21000044 	addi	r4,r4,1
1000b008:	2109883a 	add	r4,r4,r4
1000b00c:	2109883a 	add	r4,r4,r4
1000b010:	1907883a 	add	r3,r3,r4
1000b014:	38000526 	beq	r7,zero,1000b02c <memset+0x118>
1000b018:	19cf883a 	add	r7,r3,r7
1000b01c:	19400005 	stb	r5,0(r3)
1000b020:	18c00044 	addi	r3,r3,1
1000b024:	38fffd1e 	bne	r7,r3,1000b01c <__alt_data_end+0xf800b01c>
1000b028:	f800283a 	ret
1000b02c:	f800283a 	ret
1000b030:	2007883a 	mov	r3,r4
1000b034:	300f883a 	mov	r7,r6
1000b038:	003fc706 	br	1000af58 <__alt_data_end+0xf800af58>

1000b03c <_Balloc>:
1000b03c:	20801317 	ldw	r2,76(r4)
1000b040:	defffc04 	addi	sp,sp,-16
1000b044:	dc400115 	stw	r17,4(sp)
1000b048:	dc000015 	stw	r16,0(sp)
1000b04c:	dfc00315 	stw	ra,12(sp)
1000b050:	dc800215 	stw	r18,8(sp)
1000b054:	2023883a 	mov	r17,r4
1000b058:	2821883a 	mov	r16,r5
1000b05c:	10000f26 	beq	r2,zero,1000b09c <_Balloc+0x60>
1000b060:	8407883a 	add	r3,r16,r16
1000b064:	18c7883a 	add	r3,r3,r3
1000b068:	10c7883a 	add	r3,r2,r3
1000b06c:	18800017 	ldw	r2,0(r3)
1000b070:	10001126 	beq	r2,zero,1000b0b8 <_Balloc+0x7c>
1000b074:	11000017 	ldw	r4,0(r2)
1000b078:	19000015 	stw	r4,0(r3)
1000b07c:	10000415 	stw	zero,16(r2)
1000b080:	10000315 	stw	zero,12(r2)
1000b084:	dfc00317 	ldw	ra,12(sp)
1000b088:	dc800217 	ldw	r18,8(sp)
1000b08c:	dc400117 	ldw	r17,4(sp)
1000b090:	dc000017 	ldw	r16,0(sp)
1000b094:	dec00404 	addi	sp,sp,16
1000b098:	f800283a 	ret
1000b09c:	01800844 	movi	r6,33
1000b0a0:	01400104 	movi	r5,4
1000b0a4:	000e0e40 	call	1000e0e4 <_calloc_r>
1000b0a8:	88801315 	stw	r2,76(r17)
1000b0ac:	103fec1e 	bne	r2,zero,1000b060 <__alt_data_end+0xf800b060>
1000b0b0:	0005883a 	mov	r2,zero
1000b0b4:	003ff306 	br	1000b084 <__alt_data_end+0xf800b084>
1000b0b8:	01400044 	movi	r5,1
1000b0bc:	2c24983a 	sll	r18,r5,r16
1000b0c0:	8809883a 	mov	r4,r17
1000b0c4:	91800144 	addi	r6,r18,5
1000b0c8:	318d883a 	add	r6,r6,r6
1000b0cc:	318d883a 	add	r6,r6,r6
1000b0d0:	000e0e40 	call	1000e0e4 <_calloc_r>
1000b0d4:	103ff626 	beq	r2,zero,1000b0b0 <__alt_data_end+0xf800b0b0>
1000b0d8:	14000115 	stw	r16,4(r2)
1000b0dc:	14800215 	stw	r18,8(r2)
1000b0e0:	003fe606 	br	1000b07c <__alt_data_end+0xf800b07c>

1000b0e4 <_Bfree>:
1000b0e4:	28000826 	beq	r5,zero,1000b108 <_Bfree+0x24>
1000b0e8:	28c00117 	ldw	r3,4(r5)
1000b0ec:	20801317 	ldw	r2,76(r4)
1000b0f0:	18c7883a 	add	r3,r3,r3
1000b0f4:	18c7883a 	add	r3,r3,r3
1000b0f8:	10c5883a 	add	r2,r2,r3
1000b0fc:	10c00017 	ldw	r3,0(r2)
1000b100:	28c00015 	stw	r3,0(r5)
1000b104:	11400015 	stw	r5,0(r2)
1000b108:	f800283a 	ret

1000b10c <__multadd>:
1000b10c:	defff704 	addi	sp,sp,-36
1000b110:	dc800215 	stw	r18,8(sp)
1000b114:	2c800417 	ldw	r18,16(r5)
1000b118:	dd800615 	stw	r22,24(sp)
1000b11c:	dd400515 	stw	r21,20(sp)
1000b120:	dd000415 	stw	r20,16(sp)
1000b124:	dcc00315 	stw	r19,12(sp)
1000b128:	dc400115 	stw	r17,4(sp)
1000b12c:	dc000015 	stw	r16,0(sp)
1000b130:	dfc00815 	stw	ra,32(sp)
1000b134:	ddc00715 	stw	r23,28(sp)
1000b138:	2827883a 	mov	r19,r5
1000b13c:	2029883a 	mov	r20,r4
1000b140:	3023883a 	mov	r17,r6
1000b144:	3821883a 	mov	r16,r7
1000b148:	2d400504 	addi	r21,r5,20
1000b14c:	002d883a 	mov	r22,zero
1000b150:	adc00017 	ldw	r23,0(r21)
1000b154:	880b883a 	mov	r5,r17
1000b158:	ad400104 	addi	r21,r21,4
1000b15c:	b93fffcc 	andi	r4,r23,65535
1000b160:	00050540 	call	10005054 <__mulsi3>
1000b164:	b808d43a 	srli	r4,r23,16
1000b168:	880b883a 	mov	r5,r17
1000b16c:	1421883a 	add	r16,r2,r16
1000b170:	00050540 	call	10005054 <__mulsi3>
1000b174:	800ed43a 	srli	r7,r16,16
1000b178:	80ffffcc 	andi	r3,r16,65535
1000b17c:	b5800044 	addi	r22,r22,1
1000b180:	11c5883a 	add	r2,r2,r7
1000b184:	100e943a 	slli	r7,r2,16
1000b188:	1020d43a 	srli	r16,r2,16
1000b18c:	38c7883a 	add	r3,r7,r3
1000b190:	a8ffff15 	stw	r3,-4(r21)
1000b194:	b4bfee16 	blt	r22,r18,1000b150 <__alt_data_end+0xf800b150>
1000b198:	80000926 	beq	r16,zero,1000b1c0 <__multadd+0xb4>
1000b19c:	98800217 	ldw	r2,8(r19)
1000b1a0:	9080130e 	bge	r18,r2,1000b1f0 <__multadd+0xe4>
1000b1a4:	90800144 	addi	r2,r18,5
1000b1a8:	1085883a 	add	r2,r2,r2
1000b1ac:	1085883a 	add	r2,r2,r2
1000b1b0:	9885883a 	add	r2,r19,r2
1000b1b4:	14000015 	stw	r16,0(r2)
1000b1b8:	94800044 	addi	r18,r18,1
1000b1bc:	9c800415 	stw	r18,16(r19)
1000b1c0:	9805883a 	mov	r2,r19
1000b1c4:	dfc00817 	ldw	ra,32(sp)
1000b1c8:	ddc00717 	ldw	r23,28(sp)
1000b1cc:	dd800617 	ldw	r22,24(sp)
1000b1d0:	dd400517 	ldw	r21,20(sp)
1000b1d4:	dd000417 	ldw	r20,16(sp)
1000b1d8:	dcc00317 	ldw	r19,12(sp)
1000b1dc:	dc800217 	ldw	r18,8(sp)
1000b1e0:	dc400117 	ldw	r17,4(sp)
1000b1e4:	dc000017 	ldw	r16,0(sp)
1000b1e8:	dec00904 	addi	sp,sp,36
1000b1ec:	f800283a 	ret
1000b1f0:	99400117 	ldw	r5,4(r19)
1000b1f4:	a009883a 	mov	r4,r20
1000b1f8:	29400044 	addi	r5,r5,1
1000b1fc:	000b03c0 	call	1000b03c <_Balloc>
1000b200:	99800417 	ldw	r6,16(r19)
1000b204:	99400304 	addi	r5,r19,12
1000b208:	11000304 	addi	r4,r2,12
1000b20c:	31800084 	addi	r6,r6,2
1000b210:	318d883a 	add	r6,r6,r6
1000b214:	318d883a 	add	r6,r6,r6
1000b218:	1023883a 	mov	r17,r2
1000b21c:	000ac700 	call	1000ac70 <memcpy>
1000b220:	98000a26 	beq	r19,zero,1000b24c <__multadd+0x140>
1000b224:	98c00117 	ldw	r3,4(r19)
1000b228:	a0801317 	ldw	r2,76(r20)
1000b22c:	18c7883a 	add	r3,r3,r3
1000b230:	18c7883a 	add	r3,r3,r3
1000b234:	10c5883a 	add	r2,r2,r3
1000b238:	10c00017 	ldw	r3,0(r2)
1000b23c:	98c00015 	stw	r3,0(r19)
1000b240:	14c00015 	stw	r19,0(r2)
1000b244:	8827883a 	mov	r19,r17
1000b248:	003fd606 	br	1000b1a4 <__alt_data_end+0xf800b1a4>
1000b24c:	8827883a 	mov	r19,r17
1000b250:	003fd406 	br	1000b1a4 <__alt_data_end+0xf800b1a4>

1000b254 <__s2b>:
1000b254:	defff904 	addi	sp,sp,-28
1000b258:	dc400115 	stw	r17,4(sp)
1000b25c:	dc000015 	stw	r16,0(sp)
1000b260:	2023883a 	mov	r17,r4
1000b264:	2821883a 	mov	r16,r5
1000b268:	39000204 	addi	r4,r7,8
1000b26c:	01400244 	movi	r5,9
1000b270:	dcc00315 	stw	r19,12(sp)
1000b274:	dc800215 	stw	r18,8(sp)
1000b278:	dfc00615 	stw	ra,24(sp)
1000b27c:	dd400515 	stw	r21,20(sp)
1000b280:	dd000415 	stw	r20,16(sp)
1000b284:	3825883a 	mov	r18,r7
1000b288:	3027883a 	mov	r19,r6
1000b28c:	0004ea00 	call	10004ea0 <__divsi3>
1000b290:	00c00044 	movi	r3,1
1000b294:	000b883a 	mov	r5,zero
1000b298:	1880030e 	bge	r3,r2,1000b2a8 <__s2b+0x54>
1000b29c:	18c7883a 	add	r3,r3,r3
1000b2a0:	29400044 	addi	r5,r5,1
1000b2a4:	18bffd16 	blt	r3,r2,1000b29c <__alt_data_end+0xf800b29c>
1000b2a8:	8809883a 	mov	r4,r17
1000b2ac:	000b03c0 	call	1000b03c <_Balloc>
1000b2b0:	d8c00717 	ldw	r3,28(sp)
1000b2b4:	10c00515 	stw	r3,20(r2)
1000b2b8:	00c00044 	movi	r3,1
1000b2bc:	10c00415 	stw	r3,16(r2)
1000b2c0:	00c00244 	movi	r3,9
1000b2c4:	1cc0210e 	bge	r3,r19,1000b34c <__s2b+0xf8>
1000b2c8:	80eb883a 	add	r21,r16,r3
1000b2cc:	a829883a 	mov	r20,r21
1000b2d0:	84e1883a 	add	r16,r16,r19
1000b2d4:	a1c00007 	ldb	r7,0(r20)
1000b2d8:	01800284 	movi	r6,10
1000b2dc:	a5000044 	addi	r20,r20,1
1000b2e0:	100b883a 	mov	r5,r2
1000b2e4:	39fff404 	addi	r7,r7,-48
1000b2e8:	8809883a 	mov	r4,r17
1000b2ec:	000b10c0 	call	1000b10c <__multadd>
1000b2f0:	a43ff81e 	bne	r20,r16,1000b2d4 <__alt_data_end+0xf800b2d4>
1000b2f4:	ace1883a 	add	r16,r21,r19
1000b2f8:	843ffe04 	addi	r16,r16,-8
1000b2fc:	9c800a0e 	bge	r19,r18,1000b328 <__s2b+0xd4>
1000b300:	94e5c83a 	sub	r18,r18,r19
1000b304:	84a5883a 	add	r18,r16,r18
1000b308:	81c00007 	ldb	r7,0(r16)
1000b30c:	01800284 	movi	r6,10
1000b310:	84000044 	addi	r16,r16,1
1000b314:	100b883a 	mov	r5,r2
1000b318:	39fff404 	addi	r7,r7,-48
1000b31c:	8809883a 	mov	r4,r17
1000b320:	000b10c0 	call	1000b10c <__multadd>
1000b324:	84bff81e 	bne	r16,r18,1000b308 <__alt_data_end+0xf800b308>
1000b328:	dfc00617 	ldw	ra,24(sp)
1000b32c:	dd400517 	ldw	r21,20(sp)
1000b330:	dd000417 	ldw	r20,16(sp)
1000b334:	dcc00317 	ldw	r19,12(sp)
1000b338:	dc800217 	ldw	r18,8(sp)
1000b33c:	dc400117 	ldw	r17,4(sp)
1000b340:	dc000017 	ldw	r16,0(sp)
1000b344:	dec00704 	addi	sp,sp,28
1000b348:	f800283a 	ret
1000b34c:	84000284 	addi	r16,r16,10
1000b350:	1827883a 	mov	r19,r3
1000b354:	003fe906 	br	1000b2fc <__alt_data_end+0xf800b2fc>

1000b358 <__hi0bits>:
1000b358:	20bfffec 	andhi	r2,r4,65535
1000b35c:	1000141e 	bne	r2,zero,1000b3b0 <__hi0bits+0x58>
1000b360:	2008943a 	slli	r4,r4,16
1000b364:	00800404 	movi	r2,16
1000b368:	20ffc02c 	andhi	r3,r4,65280
1000b36c:	1800021e 	bne	r3,zero,1000b378 <__hi0bits+0x20>
1000b370:	2008923a 	slli	r4,r4,8
1000b374:	10800204 	addi	r2,r2,8
1000b378:	20fc002c 	andhi	r3,r4,61440
1000b37c:	1800021e 	bne	r3,zero,1000b388 <__hi0bits+0x30>
1000b380:	2008913a 	slli	r4,r4,4
1000b384:	10800104 	addi	r2,r2,4
1000b388:	20f0002c 	andhi	r3,r4,49152
1000b38c:	1800031e 	bne	r3,zero,1000b39c <__hi0bits+0x44>
1000b390:	2109883a 	add	r4,r4,r4
1000b394:	10800084 	addi	r2,r2,2
1000b398:	2109883a 	add	r4,r4,r4
1000b39c:	20000316 	blt	r4,zero,1000b3ac <__hi0bits+0x54>
1000b3a0:	2110002c 	andhi	r4,r4,16384
1000b3a4:	2000041e 	bne	r4,zero,1000b3b8 <__hi0bits+0x60>
1000b3a8:	00800804 	movi	r2,32
1000b3ac:	f800283a 	ret
1000b3b0:	0005883a 	mov	r2,zero
1000b3b4:	003fec06 	br	1000b368 <__alt_data_end+0xf800b368>
1000b3b8:	10800044 	addi	r2,r2,1
1000b3bc:	f800283a 	ret

1000b3c0 <__lo0bits>:
1000b3c0:	20c00017 	ldw	r3,0(r4)
1000b3c4:	188001cc 	andi	r2,r3,7
1000b3c8:	10000826 	beq	r2,zero,1000b3ec <__lo0bits+0x2c>
1000b3cc:	1880004c 	andi	r2,r3,1
1000b3d0:	1000211e 	bne	r2,zero,1000b458 <__lo0bits+0x98>
1000b3d4:	1880008c 	andi	r2,r3,2
1000b3d8:	1000211e 	bne	r2,zero,1000b460 <__lo0bits+0xa0>
1000b3dc:	1806d0ba 	srli	r3,r3,2
1000b3e0:	00800084 	movi	r2,2
1000b3e4:	20c00015 	stw	r3,0(r4)
1000b3e8:	f800283a 	ret
1000b3ec:	18bfffcc 	andi	r2,r3,65535
1000b3f0:	10001326 	beq	r2,zero,1000b440 <__lo0bits+0x80>
1000b3f4:	0005883a 	mov	r2,zero
1000b3f8:	19403fcc 	andi	r5,r3,255
1000b3fc:	2800021e 	bne	r5,zero,1000b408 <__lo0bits+0x48>
1000b400:	1806d23a 	srli	r3,r3,8
1000b404:	10800204 	addi	r2,r2,8
1000b408:	194003cc 	andi	r5,r3,15
1000b40c:	2800021e 	bne	r5,zero,1000b418 <__lo0bits+0x58>
1000b410:	1806d13a 	srli	r3,r3,4
1000b414:	10800104 	addi	r2,r2,4
1000b418:	194000cc 	andi	r5,r3,3
1000b41c:	2800021e 	bne	r5,zero,1000b428 <__lo0bits+0x68>
1000b420:	1806d0ba 	srli	r3,r3,2
1000b424:	10800084 	addi	r2,r2,2
1000b428:	1940004c 	andi	r5,r3,1
1000b42c:	2800081e 	bne	r5,zero,1000b450 <__lo0bits+0x90>
1000b430:	1806d07a 	srli	r3,r3,1
1000b434:	1800051e 	bne	r3,zero,1000b44c <__lo0bits+0x8c>
1000b438:	00800804 	movi	r2,32
1000b43c:	f800283a 	ret
1000b440:	1806d43a 	srli	r3,r3,16
1000b444:	00800404 	movi	r2,16
1000b448:	003feb06 	br	1000b3f8 <__alt_data_end+0xf800b3f8>
1000b44c:	10800044 	addi	r2,r2,1
1000b450:	20c00015 	stw	r3,0(r4)
1000b454:	f800283a 	ret
1000b458:	0005883a 	mov	r2,zero
1000b45c:	f800283a 	ret
1000b460:	1806d07a 	srli	r3,r3,1
1000b464:	00800044 	movi	r2,1
1000b468:	20c00015 	stw	r3,0(r4)
1000b46c:	f800283a 	ret

1000b470 <__i2b>:
1000b470:	defffd04 	addi	sp,sp,-12
1000b474:	dc000015 	stw	r16,0(sp)
1000b478:	04000044 	movi	r16,1
1000b47c:	dc400115 	stw	r17,4(sp)
1000b480:	2823883a 	mov	r17,r5
1000b484:	800b883a 	mov	r5,r16
1000b488:	dfc00215 	stw	ra,8(sp)
1000b48c:	000b03c0 	call	1000b03c <_Balloc>
1000b490:	14400515 	stw	r17,20(r2)
1000b494:	14000415 	stw	r16,16(r2)
1000b498:	dfc00217 	ldw	ra,8(sp)
1000b49c:	dc400117 	ldw	r17,4(sp)
1000b4a0:	dc000017 	ldw	r16,0(sp)
1000b4a4:	dec00304 	addi	sp,sp,12
1000b4a8:	f800283a 	ret

1000b4ac <__multiply>:
1000b4ac:	deffef04 	addi	sp,sp,-68
1000b4b0:	dc400815 	stw	r17,32(sp)
1000b4b4:	dc000715 	stw	r16,28(sp)
1000b4b8:	34400417 	ldw	r17,16(r6)
1000b4bc:	2c000417 	ldw	r16,16(r5)
1000b4c0:	dd800d15 	stw	r22,52(sp)
1000b4c4:	dc800915 	stw	r18,36(sp)
1000b4c8:	dfc01015 	stw	ra,64(sp)
1000b4cc:	df000f15 	stw	fp,60(sp)
1000b4d0:	ddc00e15 	stw	r23,56(sp)
1000b4d4:	dd400c15 	stw	r21,48(sp)
1000b4d8:	dd000b15 	stw	r20,44(sp)
1000b4dc:	dcc00a15 	stw	r19,40(sp)
1000b4e0:	2825883a 	mov	r18,r5
1000b4e4:	302d883a 	mov	r22,r6
1000b4e8:	8440050e 	bge	r16,r17,1000b500 <__multiply+0x54>
1000b4ec:	8007883a 	mov	r3,r16
1000b4f0:	3025883a 	mov	r18,r6
1000b4f4:	8821883a 	mov	r16,r17
1000b4f8:	282d883a 	mov	r22,r5
1000b4fc:	1823883a 	mov	r17,r3
1000b500:	90800217 	ldw	r2,8(r18)
1000b504:	8447883a 	add	r3,r16,r17
1000b508:	d8c00215 	stw	r3,8(sp)
1000b50c:	91400117 	ldw	r5,4(r18)
1000b510:	10c0010e 	bge	r2,r3,1000b518 <__multiply+0x6c>
1000b514:	29400044 	addi	r5,r5,1
1000b518:	000b03c0 	call	1000b03c <_Balloc>
1000b51c:	d8c00217 	ldw	r3,8(sp)
1000b520:	d8800615 	stw	r2,24(sp)
1000b524:	18eb883a 	add	r21,r3,r3
1000b528:	ad6b883a 	add	r21,r21,r21
1000b52c:	10c00504 	addi	r3,r2,20
1000b530:	1d6b883a 	add	r21,r3,r21
1000b534:	d8c00115 	stw	r3,4(sp)
1000b538:	dd400315 	stw	r21,12(sp)
1000b53c:	1805883a 	mov	r2,r3
1000b540:	1d40042e 	bgeu	r3,r21,1000b554 <__multiply+0xa8>
1000b544:	d8c00317 	ldw	r3,12(sp)
1000b548:	10000015 	stw	zero,0(r2)
1000b54c:	10800104 	addi	r2,r2,4
1000b550:	10fffc36 	bltu	r2,r3,1000b544 <__alt_data_end+0xf800b544>
1000b554:	8c63883a 	add	r17,r17,r17
1000b558:	b5800504 	addi	r22,r22,20
1000b55c:	8c63883a 	add	r17,r17,r17
1000b560:	94800504 	addi	r18,r18,20
1000b564:	8421883a 	add	r16,r16,r16
1000b568:	b463883a 	add	r17,r22,r17
1000b56c:	8421883a 	add	r16,r16,r16
1000b570:	dd800015 	stw	r22,0(sp)
1000b574:	dc800415 	stw	r18,16(sp)
1000b578:	dc400515 	stw	r17,20(sp)
1000b57c:	9429883a 	add	r20,r18,r16
1000b580:	b4404f2e 	bgeu	r22,r17,1000b6c0 <__multiply+0x214>
1000b584:	d8c00017 	ldw	r3,0(sp)
1000b588:	1c800017 	ldw	r18,0(r3)
1000b58c:	947fffcc 	andi	r17,r18,65535
1000b590:	88001e26 	beq	r17,zero,1000b60c <__multiply+0x160>
1000b594:	dd800117 	ldw	r22,4(sp)
1000b598:	dd400417 	ldw	r21,16(sp)
1000b59c:	0027883a 	mov	r19,zero
1000b5a0:	ac800017 	ldw	r18,0(r21)
1000b5a4:	b4000017 	ldw	r16,0(r22)
1000b5a8:	880b883a 	mov	r5,r17
1000b5ac:	913fffcc 	andi	r4,r18,65535
1000b5b0:	00050540 	call	10005054 <__mulsi3>
1000b5b4:	9008d43a 	srli	r4,r18,16
1000b5b8:	84bfffcc 	andi	r18,r16,65535
1000b5bc:	1485883a 	add	r2,r2,r18
1000b5c0:	14e5883a 	add	r18,r2,r19
1000b5c4:	8020d43a 	srli	r16,r16,16
1000b5c8:	9026d43a 	srli	r19,r18,16
1000b5cc:	880b883a 	mov	r5,r17
1000b5d0:	00050540 	call	10005054 <__mulsi3>
1000b5d4:	1405883a 	add	r2,r2,r16
1000b5d8:	14e1883a 	add	r16,r2,r19
1000b5dc:	90ffffcc 	andi	r3,r18,65535
1000b5e0:	8024943a 	slli	r18,r16,16
1000b5e4:	ad400104 	addi	r21,r21,4
1000b5e8:	b005883a 	mov	r2,r22
1000b5ec:	90c6b03a 	or	r3,r18,r3
1000b5f0:	b0c00015 	stw	r3,0(r22)
1000b5f4:	8026d43a 	srli	r19,r16,16
1000b5f8:	b5800104 	addi	r22,r22,4
1000b5fc:	ad3fe836 	bltu	r21,r20,1000b5a0 <__alt_data_end+0xf800b5a0>
1000b600:	d8c00017 	ldw	r3,0(sp)
1000b604:	14c00115 	stw	r19,4(r2)
1000b608:	1c800017 	ldw	r18,0(r3)
1000b60c:	9024d43a 	srli	r18,r18,16
1000b610:	90002226 	beq	r18,zero,1000b69c <__multiply+0x1f0>
1000b614:	d8c00117 	ldw	r3,4(sp)
1000b618:	dd800417 	ldw	r22,16(sp)
1000b61c:	002f883a 	mov	r23,zero
1000b620:	1f000017 	ldw	fp,0(r3)
1000b624:	1823883a 	mov	r17,r3
1000b628:	182b883a 	mov	r21,r3
1000b62c:	e021883a 	mov	r16,fp
1000b630:	00000106 	br	1000b638 <__multiply+0x18c>
1000b634:	982b883a 	mov	r21,r19
1000b638:	b100000b 	ldhu	r4,0(r22)
1000b63c:	8020d43a 	srli	r16,r16,16
1000b640:	900b883a 	mov	r5,r18
1000b644:	00050540 	call	10005054 <__mulsi3>
1000b648:	1405883a 	add	r2,r2,r16
1000b64c:	15ef883a 	add	r23,r2,r23
1000b650:	b804943a 	slli	r2,r23,16
1000b654:	e0ffffcc 	andi	r3,fp,65535
1000b658:	8c400104 	addi	r17,r17,4
1000b65c:	10c6b03a 	or	r3,r2,r3
1000b660:	88ffff15 	stw	r3,-4(r17)
1000b664:	b5800104 	addi	r22,r22,4
1000b668:	b13fff17 	ldw	r4,-4(r22)
1000b66c:	acc00104 	addi	r19,r21,4
1000b670:	900b883a 	mov	r5,r18
1000b674:	2008d43a 	srli	r4,r4,16
1000b678:	9c000017 	ldw	r16,0(r19)
1000b67c:	00050540 	call	10005054 <__mulsi3>
1000b680:	b806d43a 	srli	r3,r23,16
1000b684:	813fffcc 	andi	r4,r16,65535
1000b688:	1105883a 	add	r2,r2,r4
1000b68c:	10f9883a 	add	fp,r2,r3
1000b690:	e02ed43a 	srli	r23,fp,16
1000b694:	b53fe736 	bltu	r22,r20,1000b634 <__alt_data_end+0xf800b634>
1000b698:	af000115 	stw	fp,4(r21)
1000b69c:	d8c00017 	ldw	r3,0(sp)
1000b6a0:	d9000517 	ldw	r4,20(sp)
1000b6a4:	18c00104 	addi	r3,r3,4
1000b6a8:	d8c00015 	stw	r3,0(sp)
1000b6ac:	d8c00117 	ldw	r3,4(sp)
1000b6b0:	18c00104 	addi	r3,r3,4
1000b6b4:	d8c00115 	stw	r3,4(sp)
1000b6b8:	d8c00017 	ldw	r3,0(sp)
1000b6bc:	193fb136 	bltu	r3,r4,1000b584 <__alt_data_end+0xf800b584>
1000b6c0:	d8c00217 	ldw	r3,8(sp)
1000b6c4:	00c00c0e 	bge	zero,r3,1000b6f8 <__multiply+0x24c>
1000b6c8:	d8c00317 	ldw	r3,12(sp)
1000b6cc:	18bfff17 	ldw	r2,-4(r3)
1000b6d0:	1d7fff04 	addi	r21,r3,-4
1000b6d4:	10000326 	beq	r2,zero,1000b6e4 <__multiply+0x238>
1000b6d8:	00000706 	br	1000b6f8 <__multiply+0x24c>
1000b6dc:	a8800017 	ldw	r2,0(r21)
1000b6e0:	1000051e 	bne	r2,zero,1000b6f8 <__multiply+0x24c>
1000b6e4:	d8c00217 	ldw	r3,8(sp)
1000b6e8:	ad7fff04 	addi	r21,r21,-4
1000b6ec:	18ffffc4 	addi	r3,r3,-1
1000b6f0:	d8c00215 	stw	r3,8(sp)
1000b6f4:	183ff91e 	bne	r3,zero,1000b6dc <__alt_data_end+0xf800b6dc>
1000b6f8:	d8c00617 	ldw	r3,24(sp)
1000b6fc:	d9000217 	ldw	r4,8(sp)
1000b700:	1805883a 	mov	r2,r3
1000b704:	19000415 	stw	r4,16(r3)
1000b708:	dfc01017 	ldw	ra,64(sp)
1000b70c:	df000f17 	ldw	fp,60(sp)
1000b710:	ddc00e17 	ldw	r23,56(sp)
1000b714:	dd800d17 	ldw	r22,52(sp)
1000b718:	dd400c17 	ldw	r21,48(sp)
1000b71c:	dd000b17 	ldw	r20,44(sp)
1000b720:	dcc00a17 	ldw	r19,40(sp)
1000b724:	dc800917 	ldw	r18,36(sp)
1000b728:	dc400817 	ldw	r17,32(sp)
1000b72c:	dc000717 	ldw	r16,28(sp)
1000b730:	dec01104 	addi	sp,sp,68
1000b734:	f800283a 	ret

1000b738 <__pow5mult>:
1000b738:	defffa04 	addi	sp,sp,-24
1000b73c:	dcc00315 	stw	r19,12(sp)
1000b740:	dc000015 	stw	r16,0(sp)
1000b744:	dfc00515 	stw	ra,20(sp)
1000b748:	dd000415 	stw	r20,16(sp)
1000b74c:	dc800215 	stw	r18,8(sp)
1000b750:	dc400115 	stw	r17,4(sp)
1000b754:	308000cc 	andi	r2,r6,3
1000b758:	3021883a 	mov	r16,r6
1000b75c:	2027883a 	mov	r19,r4
1000b760:	10002f1e 	bne	r2,zero,1000b820 <__pow5mult+0xe8>
1000b764:	2825883a 	mov	r18,r5
1000b768:	8021d0ba 	srai	r16,r16,2
1000b76c:	80001a26 	beq	r16,zero,1000b7d8 <__pow5mult+0xa0>
1000b770:	9c401217 	ldw	r17,72(r19)
1000b774:	8800061e 	bne	r17,zero,1000b790 <__pow5mult+0x58>
1000b778:	00003406 	br	1000b84c <__pow5mult+0x114>
1000b77c:	8021d07a 	srai	r16,r16,1
1000b780:	80001526 	beq	r16,zero,1000b7d8 <__pow5mult+0xa0>
1000b784:	88800017 	ldw	r2,0(r17)
1000b788:	10001c26 	beq	r2,zero,1000b7fc <__pow5mult+0xc4>
1000b78c:	1023883a 	mov	r17,r2
1000b790:	8080004c 	andi	r2,r16,1
1000b794:	103ff926 	beq	r2,zero,1000b77c <__alt_data_end+0xf800b77c>
1000b798:	880d883a 	mov	r6,r17
1000b79c:	900b883a 	mov	r5,r18
1000b7a0:	9809883a 	mov	r4,r19
1000b7a4:	000b4ac0 	call	1000b4ac <__multiply>
1000b7a8:	90001b26 	beq	r18,zero,1000b818 <__pow5mult+0xe0>
1000b7ac:	91000117 	ldw	r4,4(r18)
1000b7b0:	98c01317 	ldw	r3,76(r19)
1000b7b4:	8021d07a 	srai	r16,r16,1
1000b7b8:	2109883a 	add	r4,r4,r4
1000b7bc:	2109883a 	add	r4,r4,r4
1000b7c0:	1907883a 	add	r3,r3,r4
1000b7c4:	19000017 	ldw	r4,0(r3)
1000b7c8:	91000015 	stw	r4,0(r18)
1000b7cc:	1c800015 	stw	r18,0(r3)
1000b7d0:	1025883a 	mov	r18,r2
1000b7d4:	803feb1e 	bne	r16,zero,1000b784 <__alt_data_end+0xf800b784>
1000b7d8:	9005883a 	mov	r2,r18
1000b7dc:	dfc00517 	ldw	ra,20(sp)
1000b7e0:	dd000417 	ldw	r20,16(sp)
1000b7e4:	dcc00317 	ldw	r19,12(sp)
1000b7e8:	dc800217 	ldw	r18,8(sp)
1000b7ec:	dc400117 	ldw	r17,4(sp)
1000b7f0:	dc000017 	ldw	r16,0(sp)
1000b7f4:	dec00604 	addi	sp,sp,24
1000b7f8:	f800283a 	ret
1000b7fc:	880d883a 	mov	r6,r17
1000b800:	880b883a 	mov	r5,r17
1000b804:	9809883a 	mov	r4,r19
1000b808:	000b4ac0 	call	1000b4ac <__multiply>
1000b80c:	88800015 	stw	r2,0(r17)
1000b810:	10000015 	stw	zero,0(r2)
1000b814:	003fdd06 	br	1000b78c <__alt_data_end+0xf800b78c>
1000b818:	1025883a 	mov	r18,r2
1000b81c:	003fd706 	br	1000b77c <__alt_data_end+0xf800b77c>
1000b820:	10bfffc4 	addi	r2,r2,-1
1000b824:	1085883a 	add	r2,r2,r2
1000b828:	00c40074 	movhi	r3,4097
1000b82c:	18d3a504 	addi	r3,r3,20116
1000b830:	1085883a 	add	r2,r2,r2
1000b834:	1885883a 	add	r2,r3,r2
1000b838:	11800017 	ldw	r6,0(r2)
1000b83c:	000f883a 	mov	r7,zero
1000b840:	000b10c0 	call	1000b10c <__multadd>
1000b844:	1025883a 	mov	r18,r2
1000b848:	003fc706 	br	1000b768 <__alt_data_end+0xf800b768>
1000b84c:	05000044 	movi	r20,1
1000b850:	a00b883a 	mov	r5,r20
1000b854:	9809883a 	mov	r4,r19
1000b858:	000b03c0 	call	1000b03c <_Balloc>
1000b85c:	1023883a 	mov	r17,r2
1000b860:	00809c44 	movi	r2,625
1000b864:	88800515 	stw	r2,20(r17)
1000b868:	8d000415 	stw	r20,16(r17)
1000b86c:	9c401215 	stw	r17,72(r19)
1000b870:	88000015 	stw	zero,0(r17)
1000b874:	003fc606 	br	1000b790 <__alt_data_end+0xf800b790>

1000b878 <__lshift>:
1000b878:	defff904 	addi	sp,sp,-28
1000b87c:	dd400515 	stw	r21,20(sp)
1000b880:	dcc00315 	stw	r19,12(sp)
1000b884:	302bd17a 	srai	r21,r6,5
1000b888:	2cc00417 	ldw	r19,16(r5)
1000b88c:	28800217 	ldw	r2,8(r5)
1000b890:	dd000415 	stw	r20,16(sp)
1000b894:	ace7883a 	add	r19,r21,r19
1000b898:	dc800215 	stw	r18,8(sp)
1000b89c:	dc400115 	stw	r17,4(sp)
1000b8a0:	dc000015 	stw	r16,0(sp)
1000b8a4:	dfc00615 	stw	ra,24(sp)
1000b8a8:	9c000044 	addi	r16,r19,1
1000b8ac:	2823883a 	mov	r17,r5
1000b8b0:	3029883a 	mov	r20,r6
1000b8b4:	2025883a 	mov	r18,r4
1000b8b8:	29400117 	ldw	r5,4(r5)
1000b8bc:	1400030e 	bge	r2,r16,1000b8cc <__lshift+0x54>
1000b8c0:	1085883a 	add	r2,r2,r2
1000b8c4:	29400044 	addi	r5,r5,1
1000b8c8:	143ffd16 	blt	r2,r16,1000b8c0 <__alt_data_end+0xf800b8c0>
1000b8cc:	9009883a 	mov	r4,r18
1000b8d0:	000b03c0 	call	1000b03c <_Balloc>
1000b8d4:	10c00504 	addi	r3,r2,20
1000b8d8:	0540070e 	bge	zero,r21,1000b8f8 <__lshift+0x80>
1000b8dc:	ad6b883a 	add	r21,r21,r21
1000b8e0:	ad6b883a 	add	r21,r21,r21
1000b8e4:	1809883a 	mov	r4,r3
1000b8e8:	1d47883a 	add	r3,r3,r21
1000b8ec:	20000015 	stw	zero,0(r4)
1000b8f0:	21000104 	addi	r4,r4,4
1000b8f4:	193ffd1e 	bne	r3,r4,1000b8ec <__alt_data_end+0xf800b8ec>
1000b8f8:	8a000417 	ldw	r8,16(r17)
1000b8fc:	89000504 	addi	r4,r17,20
1000b900:	a18007cc 	andi	r6,r20,31
1000b904:	4211883a 	add	r8,r8,r8
1000b908:	4211883a 	add	r8,r8,r8
1000b90c:	2211883a 	add	r8,r4,r8
1000b910:	30002326 	beq	r6,zero,1000b9a0 <__lshift+0x128>
1000b914:	02400804 	movi	r9,32
1000b918:	4993c83a 	sub	r9,r9,r6
1000b91c:	000b883a 	mov	r5,zero
1000b920:	21c00017 	ldw	r7,0(r4)
1000b924:	1815883a 	mov	r10,r3
1000b928:	18c00104 	addi	r3,r3,4
1000b92c:	398e983a 	sll	r7,r7,r6
1000b930:	21000104 	addi	r4,r4,4
1000b934:	394ab03a 	or	r5,r7,r5
1000b938:	197fff15 	stw	r5,-4(r3)
1000b93c:	217fff17 	ldw	r5,-4(r4)
1000b940:	2a4ad83a 	srl	r5,r5,r9
1000b944:	223ff636 	bltu	r4,r8,1000b920 <__alt_data_end+0xf800b920>
1000b948:	51400115 	stw	r5,4(r10)
1000b94c:	28001a1e 	bne	r5,zero,1000b9b8 <__lshift+0x140>
1000b950:	843fffc4 	addi	r16,r16,-1
1000b954:	14000415 	stw	r16,16(r2)
1000b958:	88000826 	beq	r17,zero,1000b97c <__lshift+0x104>
1000b95c:	89000117 	ldw	r4,4(r17)
1000b960:	90c01317 	ldw	r3,76(r18)
1000b964:	2109883a 	add	r4,r4,r4
1000b968:	2109883a 	add	r4,r4,r4
1000b96c:	1907883a 	add	r3,r3,r4
1000b970:	19000017 	ldw	r4,0(r3)
1000b974:	89000015 	stw	r4,0(r17)
1000b978:	1c400015 	stw	r17,0(r3)
1000b97c:	dfc00617 	ldw	ra,24(sp)
1000b980:	dd400517 	ldw	r21,20(sp)
1000b984:	dd000417 	ldw	r20,16(sp)
1000b988:	dcc00317 	ldw	r19,12(sp)
1000b98c:	dc800217 	ldw	r18,8(sp)
1000b990:	dc400117 	ldw	r17,4(sp)
1000b994:	dc000017 	ldw	r16,0(sp)
1000b998:	dec00704 	addi	sp,sp,28
1000b99c:	f800283a 	ret
1000b9a0:	21400017 	ldw	r5,0(r4)
1000b9a4:	18c00104 	addi	r3,r3,4
1000b9a8:	21000104 	addi	r4,r4,4
1000b9ac:	197fff15 	stw	r5,-4(r3)
1000b9b0:	223ffb36 	bltu	r4,r8,1000b9a0 <__alt_data_end+0xf800b9a0>
1000b9b4:	003fe606 	br	1000b950 <__alt_data_end+0xf800b950>
1000b9b8:	9c000084 	addi	r16,r19,2
1000b9bc:	003fe406 	br	1000b950 <__alt_data_end+0xf800b950>

1000b9c0 <__mcmp>:
1000b9c0:	20800417 	ldw	r2,16(r4)
1000b9c4:	28c00417 	ldw	r3,16(r5)
1000b9c8:	10c5c83a 	sub	r2,r2,r3
1000b9cc:	1000111e 	bne	r2,zero,1000ba14 <__mcmp+0x54>
1000b9d0:	18c7883a 	add	r3,r3,r3
1000b9d4:	18c7883a 	add	r3,r3,r3
1000b9d8:	21000504 	addi	r4,r4,20
1000b9dc:	29400504 	addi	r5,r5,20
1000b9e0:	20c5883a 	add	r2,r4,r3
1000b9e4:	28cb883a 	add	r5,r5,r3
1000b9e8:	00000106 	br	1000b9f0 <__mcmp+0x30>
1000b9ec:	20800a2e 	bgeu	r4,r2,1000ba18 <__mcmp+0x58>
1000b9f0:	10bfff04 	addi	r2,r2,-4
1000b9f4:	297fff04 	addi	r5,r5,-4
1000b9f8:	11800017 	ldw	r6,0(r2)
1000b9fc:	28c00017 	ldw	r3,0(r5)
1000ba00:	30fffa26 	beq	r6,r3,1000b9ec <__alt_data_end+0xf800b9ec>
1000ba04:	30c00236 	bltu	r6,r3,1000ba10 <__mcmp+0x50>
1000ba08:	00800044 	movi	r2,1
1000ba0c:	f800283a 	ret
1000ba10:	00bfffc4 	movi	r2,-1
1000ba14:	f800283a 	ret
1000ba18:	0005883a 	mov	r2,zero
1000ba1c:	f800283a 	ret

1000ba20 <__mdiff>:
1000ba20:	28c00417 	ldw	r3,16(r5)
1000ba24:	30800417 	ldw	r2,16(r6)
1000ba28:	defffa04 	addi	sp,sp,-24
1000ba2c:	dcc00315 	stw	r19,12(sp)
1000ba30:	dc800215 	stw	r18,8(sp)
1000ba34:	dfc00515 	stw	ra,20(sp)
1000ba38:	dd000415 	stw	r20,16(sp)
1000ba3c:	dc400115 	stw	r17,4(sp)
1000ba40:	dc000015 	stw	r16,0(sp)
1000ba44:	1887c83a 	sub	r3,r3,r2
1000ba48:	2825883a 	mov	r18,r5
1000ba4c:	3027883a 	mov	r19,r6
1000ba50:	1800141e 	bne	r3,zero,1000baa4 <__mdiff+0x84>
1000ba54:	1085883a 	add	r2,r2,r2
1000ba58:	1085883a 	add	r2,r2,r2
1000ba5c:	2a000504 	addi	r8,r5,20
1000ba60:	34000504 	addi	r16,r6,20
1000ba64:	4087883a 	add	r3,r8,r2
1000ba68:	8085883a 	add	r2,r16,r2
1000ba6c:	00000106 	br	1000ba74 <__mdiff+0x54>
1000ba70:	40c0592e 	bgeu	r8,r3,1000bbd8 <__mdiff+0x1b8>
1000ba74:	18ffff04 	addi	r3,r3,-4
1000ba78:	10bfff04 	addi	r2,r2,-4
1000ba7c:	19c00017 	ldw	r7,0(r3)
1000ba80:	11400017 	ldw	r5,0(r2)
1000ba84:	397ffa26 	beq	r7,r5,1000ba70 <__alt_data_end+0xf800ba70>
1000ba88:	3940592e 	bgeu	r7,r5,1000bbf0 <__mdiff+0x1d0>
1000ba8c:	9005883a 	mov	r2,r18
1000ba90:	4023883a 	mov	r17,r8
1000ba94:	9825883a 	mov	r18,r19
1000ba98:	05000044 	movi	r20,1
1000ba9c:	1027883a 	mov	r19,r2
1000baa0:	00000406 	br	1000bab4 <__mdiff+0x94>
1000baa4:	18005616 	blt	r3,zero,1000bc00 <__mdiff+0x1e0>
1000baa8:	34400504 	addi	r17,r6,20
1000baac:	2c000504 	addi	r16,r5,20
1000bab0:	0029883a 	mov	r20,zero
1000bab4:	91400117 	ldw	r5,4(r18)
1000bab8:	000b03c0 	call	1000b03c <_Balloc>
1000babc:	92400417 	ldw	r9,16(r18)
1000bac0:	9b000417 	ldw	r12,16(r19)
1000bac4:	12c00504 	addi	r11,r2,20
1000bac8:	4a51883a 	add	r8,r9,r9
1000bacc:	6319883a 	add	r12,r12,r12
1000bad0:	4211883a 	add	r8,r8,r8
1000bad4:	6319883a 	add	r12,r12,r12
1000bad8:	15000315 	stw	r20,12(r2)
1000badc:	8211883a 	add	r8,r16,r8
1000bae0:	8b19883a 	add	r12,r17,r12
1000bae4:	0007883a 	mov	r3,zero
1000bae8:	81400017 	ldw	r5,0(r16)
1000baec:	89c00017 	ldw	r7,0(r17)
1000baf0:	59800104 	addi	r6,r11,4
1000baf4:	293fffcc 	andi	r4,r5,65535
1000baf8:	20c7883a 	add	r3,r4,r3
1000bafc:	393fffcc 	andi	r4,r7,65535
1000bb00:	1909c83a 	sub	r4,r3,r4
1000bb04:	280ad43a 	srli	r5,r5,16
1000bb08:	380ed43a 	srli	r7,r7,16
1000bb0c:	2007d43a 	srai	r3,r4,16
1000bb10:	213fffcc 	andi	r4,r4,65535
1000bb14:	29cbc83a 	sub	r5,r5,r7
1000bb18:	28c7883a 	add	r3,r5,r3
1000bb1c:	180a943a 	slli	r5,r3,16
1000bb20:	8c400104 	addi	r17,r17,4
1000bb24:	84000104 	addi	r16,r16,4
1000bb28:	2908b03a 	or	r4,r5,r4
1000bb2c:	59000015 	stw	r4,0(r11)
1000bb30:	1807d43a 	srai	r3,r3,16
1000bb34:	3015883a 	mov	r10,r6
1000bb38:	3017883a 	mov	r11,r6
1000bb3c:	8b3fea36 	bltu	r17,r12,1000bae8 <__alt_data_end+0xf800bae8>
1000bb40:	8200162e 	bgeu	r16,r8,1000bb9c <__mdiff+0x17c>
1000bb44:	8017883a 	mov	r11,r16
1000bb48:	59400017 	ldw	r5,0(r11)
1000bb4c:	31800104 	addi	r6,r6,4
1000bb50:	5ac00104 	addi	r11,r11,4
1000bb54:	293fffcc 	andi	r4,r5,65535
1000bb58:	20c7883a 	add	r3,r4,r3
1000bb5c:	280ed43a 	srli	r7,r5,16
1000bb60:	180bd43a 	srai	r5,r3,16
1000bb64:	193fffcc 	andi	r4,r3,65535
1000bb68:	3947883a 	add	r3,r7,r5
1000bb6c:	180a943a 	slli	r5,r3,16
1000bb70:	1807d43a 	srai	r3,r3,16
1000bb74:	2908b03a 	or	r4,r5,r4
1000bb78:	313fff15 	stw	r4,-4(r6)
1000bb7c:	5a3ff236 	bltu	r11,r8,1000bb48 <__alt_data_end+0xf800bb48>
1000bb80:	0406303a 	nor	r3,zero,r16
1000bb84:	1a07883a 	add	r3,r3,r8
1000bb88:	1806d0ba 	srli	r3,r3,2
1000bb8c:	18c00044 	addi	r3,r3,1
1000bb90:	18c7883a 	add	r3,r3,r3
1000bb94:	18c7883a 	add	r3,r3,r3
1000bb98:	50d5883a 	add	r10,r10,r3
1000bb9c:	50ffff04 	addi	r3,r10,-4
1000bba0:	2000041e 	bne	r4,zero,1000bbb4 <__mdiff+0x194>
1000bba4:	18ffff04 	addi	r3,r3,-4
1000bba8:	19000017 	ldw	r4,0(r3)
1000bbac:	4a7fffc4 	addi	r9,r9,-1
1000bbb0:	203ffc26 	beq	r4,zero,1000bba4 <__alt_data_end+0xf800bba4>
1000bbb4:	12400415 	stw	r9,16(r2)
1000bbb8:	dfc00517 	ldw	ra,20(sp)
1000bbbc:	dd000417 	ldw	r20,16(sp)
1000bbc0:	dcc00317 	ldw	r19,12(sp)
1000bbc4:	dc800217 	ldw	r18,8(sp)
1000bbc8:	dc400117 	ldw	r17,4(sp)
1000bbcc:	dc000017 	ldw	r16,0(sp)
1000bbd0:	dec00604 	addi	sp,sp,24
1000bbd4:	f800283a 	ret
1000bbd8:	000b883a 	mov	r5,zero
1000bbdc:	000b03c0 	call	1000b03c <_Balloc>
1000bbe0:	00c00044 	movi	r3,1
1000bbe4:	10c00415 	stw	r3,16(r2)
1000bbe8:	10000515 	stw	zero,20(r2)
1000bbec:	003ff206 	br	1000bbb8 <__alt_data_end+0xf800bbb8>
1000bbf0:	8023883a 	mov	r17,r16
1000bbf4:	0029883a 	mov	r20,zero
1000bbf8:	4021883a 	mov	r16,r8
1000bbfc:	003fad06 	br	1000bab4 <__alt_data_end+0xf800bab4>
1000bc00:	9005883a 	mov	r2,r18
1000bc04:	94400504 	addi	r17,r18,20
1000bc08:	9c000504 	addi	r16,r19,20
1000bc0c:	9825883a 	mov	r18,r19
1000bc10:	05000044 	movi	r20,1
1000bc14:	1027883a 	mov	r19,r2
1000bc18:	003fa606 	br	1000bab4 <__alt_data_end+0xf800bab4>

1000bc1c <__ulp>:
1000bc1c:	295ffc2c 	andhi	r5,r5,32752
1000bc20:	00bf3034 	movhi	r2,64704
1000bc24:	2887883a 	add	r3,r5,r2
1000bc28:	00c0020e 	bge	zero,r3,1000bc34 <__ulp+0x18>
1000bc2c:	0005883a 	mov	r2,zero
1000bc30:	f800283a 	ret
1000bc34:	00c7c83a 	sub	r3,zero,r3
1000bc38:	1807d53a 	srai	r3,r3,20
1000bc3c:	008004c4 	movi	r2,19
1000bc40:	10c00b0e 	bge	r2,r3,1000bc70 <__ulp+0x54>
1000bc44:	18bffb04 	addi	r2,r3,-20
1000bc48:	01000784 	movi	r4,30
1000bc4c:	0007883a 	mov	r3,zero
1000bc50:	20800516 	blt	r4,r2,1000bc68 <__ulp+0x4c>
1000bc54:	010007c4 	movi	r4,31
1000bc58:	2089c83a 	sub	r4,r4,r2
1000bc5c:	00800044 	movi	r2,1
1000bc60:	1104983a 	sll	r2,r2,r4
1000bc64:	f800283a 	ret
1000bc68:	00800044 	movi	r2,1
1000bc6c:	f800283a 	ret
1000bc70:	01400234 	movhi	r5,8
1000bc74:	28c7d83a 	sra	r3,r5,r3
1000bc78:	0005883a 	mov	r2,zero
1000bc7c:	f800283a 	ret

1000bc80 <__b2d>:
1000bc80:	defffa04 	addi	sp,sp,-24
1000bc84:	dc000015 	stw	r16,0(sp)
1000bc88:	24000417 	ldw	r16,16(r4)
1000bc8c:	dc400115 	stw	r17,4(sp)
1000bc90:	24400504 	addi	r17,r4,20
1000bc94:	8421883a 	add	r16,r16,r16
1000bc98:	8421883a 	add	r16,r16,r16
1000bc9c:	8c21883a 	add	r16,r17,r16
1000bca0:	dc800215 	stw	r18,8(sp)
1000bca4:	84bfff17 	ldw	r18,-4(r16)
1000bca8:	dd000415 	stw	r20,16(sp)
1000bcac:	dcc00315 	stw	r19,12(sp)
1000bcb0:	9009883a 	mov	r4,r18
1000bcb4:	2829883a 	mov	r20,r5
1000bcb8:	dfc00515 	stw	ra,20(sp)
1000bcbc:	000b3580 	call	1000b358 <__hi0bits>
1000bcc0:	00c00804 	movi	r3,32
1000bcc4:	1889c83a 	sub	r4,r3,r2
1000bcc8:	a1000015 	stw	r4,0(r20)
1000bccc:	01000284 	movi	r4,10
1000bcd0:	84ffff04 	addi	r19,r16,-4
1000bcd4:	20801216 	blt	r4,r2,1000bd20 <__b2d+0xa0>
1000bcd8:	018002c4 	movi	r6,11
1000bcdc:	308dc83a 	sub	r6,r6,r2
1000bce0:	9186d83a 	srl	r3,r18,r6
1000bce4:	18cffc34 	orhi	r3,r3,16368
1000bce8:	8cc0212e 	bgeu	r17,r19,1000bd70 <__b2d+0xf0>
1000bcec:	813ffe17 	ldw	r4,-8(r16)
1000bcf0:	218cd83a 	srl	r6,r4,r6
1000bcf4:	10800544 	addi	r2,r2,21
1000bcf8:	9084983a 	sll	r2,r18,r2
1000bcfc:	1184b03a 	or	r2,r2,r6
1000bd00:	dfc00517 	ldw	ra,20(sp)
1000bd04:	dd000417 	ldw	r20,16(sp)
1000bd08:	dcc00317 	ldw	r19,12(sp)
1000bd0c:	dc800217 	ldw	r18,8(sp)
1000bd10:	dc400117 	ldw	r17,4(sp)
1000bd14:	dc000017 	ldw	r16,0(sp)
1000bd18:	dec00604 	addi	sp,sp,24
1000bd1c:	f800283a 	ret
1000bd20:	8cc00f2e 	bgeu	r17,r19,1000bd60 <__b2d+0xe0>
1000bd24:	117ffd44 	addi	r5,r2,-11
1000bd28:	80bffe17 	ldw	r2,-8(r16)
1000bd2c:	28000e26 	beq	r5,zero,1000bd68 <__b2d+0xe8>
1000bd30:	1949c83a 	sub	r4,r3,r5
1000bd34:	9164983a 	sll	r18,r18,r5
1000bd38:	1106d83a 	srl	r3,r2,r4
1000bd3c:	81bffe04 	addi	r6,r16,-8
1000bd40:	948ffc34 	orhi	r18,r18,16368
1000bd44:	90c6b03a 	or	r3,r18,r3
1000bd48:	89800e2e 	bgeu	r17,r6,1000bd84 <__b2d+0x104>
1000bd4c:	81bffd17 	ldw	r6,-12(r16)
1000bd50:	1144983a 	sll	r2,r2,r5
1000bd54:	310ad83a 	srl	r5,r6,r4
1000bd58:	2884b03a 	or	r2,r5,r2
1000bd5c:	003fe806 	br	1000bd00 <__alt_data_end+0xf800bd00>
1000bd60:	10bffd44 	addi	r2,r2,-11
1000bd64:	1000041e 	bne	r2,zero,1000bd78 <__b2d+0xf8>
1000bd68:	90cffc34 	orhi	r3,r18,16368
1000bd6c:	003fe406 	br	1000bd00 <__alt_data_end+0xf800bd00>
1000bd70:	000d883a 	mov	r6,zero
1000bd74:	003fdf06 	br	1000bcf4 <__alt_data_end+0xf800bcf4>
1000bd78:	90a4983a 	sll	r18,r18,r2
1000bd7c:	0005883a 	mov	r2,zero
1000bd80:	003ff906 	br	1000bd68 <__alt_data_end+0xf800bd68>
1000bd84:	1144983a 	sll	r2,r2,r5
1000bd88:	003fdd06 	br	1000bd00 <__alt_data_end+0xf800bd00>

1000bd8c <__d2b>:
1000bd8c:	defff804 	addi	sp,sp,-32
1000bd90:	dc000215 	stw	r16,8(sp)
1000bd94:	3021883a 	mov	r16,r6
1000bd98:	dc400315 	stw	r17,12(sp)
1000bd9c:	8022907a 	slli	r17,r16,1
1000bda0:	dd000615 	stw	r20,24(sp)
1000bda4:	2829883a 	mov	r20,r5
1000bda8:	01400044 	movi	r5,1
1000bdac:	dcc00515 	stw	r19,20(sp)
1000bdb0:	dc800415 	stw	r18,16(sp)
1000bdb4:	dfc00715 	stw	ra,28(sp)
1000bdb8:	3825883a 	mov	r18,r7
1000bdbc:	8822d57a 	srli	r17,r17,21
1000bdc0:	000b03c0 	call	1000b03c <_Balloc>
1000bdc4:	1027883a 	mov	r19,r2
1000bdc8:	00800434 	movhi	r2,16
1000bdcc:	10bfffc4 	addi	r2,r2,-1
1000bdd0:	808c703a 	and	r6,r16,r2
1000bdd4:	88000126 	beq	r17,zero,1000bddc <__d2b+0x50>
1000bdd8:	31800434 	orhi	r6,r6,16
1000bddc:	d9800015 	stw	r6,0(sp)
1000bde0:	a0002426 	beq	r20,zero,1000be74 <__d2b+0xe8>
1000bde4:	d9000104 	addi	r4,sp,4
1000bde8:	dd000115 	stw	r20,4(sp)
1000bdec:	000b3c00 	call	1000b3c0 <__lo0bits>
1000bdf0:	d8c00017 	ldw	r3,0(sp)
1000bdf4:	10002f1e 	bne	r2,zero,1000beb4 <__d2b+0x128>
1000bdf8:	d9000117 	ldw	r4,4(sp)
1000bdfc:	99000515 	stw	r4,20(r19)
1000be00:	1821003a 	cmpeq	r16,r3,zero
1000be04:	01000084 	movi	r4,2
1000be08:	2421c83a 	sub	r16,r4,r16
1000be0c:	98c00615 	stw	r3,24(r19)
1000be10:	9c000415 	stw	r16,16(r19)
1000be14:	88001f1e 	bne	r17,zero,1000be94 <__d2b+0x108>
1000be18:	10bef384 	addi	r2,r2,-1074
1000be1c:	90800015 	stw	r2,0(r18)
1000be20:	00900034 	movhi	r2,16384
1000be24:	10bfffc4 	addi	r2,r2,-1
1000be28:	8085883a 	add	r2,r16,r2
1000be2c:	1085883a 	add	r2,r2,r2
1000be30:	1085883a 	add	r2,r2,r2
1000be34:	9885883a 	add	r2,r19,r2
1000be38:	11000517 	ldw	r4,20(r2)
1000be3c:	8020917a 	slli	r16,r16,5
1000be40:	000b3580 	call	1000b358 <__hi0bits>
1000be44:	d8c00817 	ldw	r3,32(sp)
1000be48:	8085c83a 	sub	r2,r16,r2
1000be4c:	18800015 	stw	r2,0(r3)
1000be50:	9805883a 	mov	r2,r19
1000be54:	dfc00717 	ldw	ra,28(sp)
1000be58:	dd000617 	ldw	r20,24(sp)
1000be5c:	dcc00517 	ldw	r19,20(sp)
1000be60:	dc800417 	ldw	r18,16(sp)
1000be64:	dc400317 	ldw	r17,12(sp)
1000be68:	dc000217 	ldw	r16,8(sp)
1000be6c:	dec00804 	addi	sp,sp,32
1000be70:	f800283a 	ret
1000be74:	d809883a 	mov	r4,sp
1000be78:	000b3c00 	call	1000b3c0 <__lo0bits>
1000be7c:	d8c00017 	ldw	r3,0(sp)
1000be80:	04000044 	movi	r16,1
1000be84:	9c000415 	stw	r16,16(r19)
1000be88:	98c00515 	stw	r3,20(r19)
1000be8c:	10800804 	addi	r2,r2,32
1000be90:	883fe126 	beq	r17,zero,1000be18 <__alt_data_end+0xf800be18>
1000be94:	00c00d44 	movi	r3,53
1000be98:	8c7ef344 	addi	r17,r17,-1075
1000be9c:	88a3883a 	add	r17,r17,r2
1000bea0:	1885c83a 	sub	r2,r3,r2
1000bea4:	d8c00817 	ldw	r3,32(sp)
1000bea8:	94400015 	stw	r17,0(r18)
1000beac:	18800015 	stw	r2,0(r3)
1000beb0:	003fe706 	br	1000be50 <__alt_data_end+0xf800be50>
1000beb4:	01000804 	movi	r4,32
1000beb8:	2089c83a 	sub	r4,r4,r2
1000bebc:	1908983a 	sll	r4,r3,r4
1000bec0:	d9400117 	ldw	r5,4(sp)
1000bec4:	1886d83a 	srl	r3,r3,r2
1000bec8:	2148b03a 	or	r4,r4,r5
1000becc:	99000515 	stw	r4,20(r19)
1000bed0:	d8c00015 	stw	r3,0(sp)
1000bed4:	003fca06 	br	1000be00 <__alt_data_end+0xf800be00>

1000bed8 <__ratio>:
1000bed8:	defff904 	addi	sp,sp,-28
1000bedc:	dc400315 	stw	r17,12(sp)
1000bee0:	2823883a 	mov	r17,r5
1000bee4:	d9400104 	addi	r5,sp,4
1000bee8:	dfc00615 	stw	ra,24(sp)
1000beec:	dcc00515 	stw	r19,20(sp)
1000bef0:	dc800415 	stw	r18,16(sp)
1000bef4:	2027883a 	mov	r19,r4
1000bef8:	dc000215 	stw	r16,8(sp)
1000befc:	000bc800 	call	1000bc80 <__b2d>
1000bf00:	d80b883a 	mov	r5,sp
1000bf04:	8809883a 	mov	r4,r17
1000bf08:	1025883a 	mov	r18,r2
1000bf0c:	1821883a 	mov	r16,r3
1000bf10:	000bc800 	call	1000bc80 <__b2d>
1000bf14:	8a000417 	ldw	r8,16(r17)
1000bf18:	99000417 	ldw	r4,16(r19)
1000bf1c:	d9400117 	ldw	r5,4(sp)
1000bf20:	2209c83a 	sub	r4,r4,r8
1000bf24:	2010917a 	slli	r8,r4,5
1000bf28:	d9000017 	ldw	r4,0(sp)
1000bf2c:	2909c83a 	sub	r4,r5,r4
1000bf30:	4109883a 	add	r4,r8,r4
1000bf34:	01000e0e 	bge	zero,r4,1000bf70 <__ratio+0x98>
1000bf38:	2008953a 	slli	r4,r4,20
1000bf3c:	2421883a 	add	r16,r4,r16
1000bf40:	100d883a 	mov	r6,r2
1000bf44:	180f883a 	mov	r7,r3
1000bf48:	9009883a 	mov	r4,r18
1000bf4c:	800b883a 	mov	r5,r16
1000bf50:	000fde80 	call	1000fde8 <__divdf3>
1000bf54:	dfc00617 	ldw	ra,24(sp)
1000bf58:	dcc00517 	ldw	r19,20(sp)
1000bf5c:	dc800417 	ldw	r18,16(sp)
1000bf60:	dc400317 	ldw	r17,12(sp)
1000bf64:	dc000217 	ldw	r16,8(sp)
1000bf68:	dec00704 	addi	sp,sp,28
1000bf6c:	f800283a 	ret
1000bf70:	2008953a 	slli	r4,r4,20
1000bf74:	1907c83a 	sub	r3,r3,r4
1000bf78:	003ff106 	br	1000bf40 <__alt_data_end+0xf800bf40>

1000bf7c <_mprec_log10>:
1000bf7c:	defffe04 	addi	sp,sp,-8
1000bf80:	dc000015 	stw	r16,0(sp)
1000bf84:	dfc00115 	stw	ra,4(sp)
1000bf88:	008005c4 	movi	r2,23
1000bf8c:	2021883a 	mov	r16,r4
1000bf90:	11000d0e 	bge	r2,r4,1000bfc8 <_mprec_log10+0x4c>
1000bf94:	0005883a 	mov	r2,zero
1000bf98:	00cffc34 	movhi	r3,16368
1000bf9c:	843fffc4 	addi	r16,r16,-1
1000bfa0:	000d883a 	mov	r6,zero
1000bfa4:	01d00934 	movhi	r7,16420
1000bfa8:	1009883a 	mov	r4,r2
1000bfac:	180b883a 	mov	r5,r3
1000bfb0:	0010a100 	call	10010a10 <__muldf3>
1000bfb4:	803ff91e 	bne	r16,zero,1000bf9c <__alt_data_end+0xf800bf9c>
1000bfb8:	dfc00117 	ldw	ra,4(sp)
1000bfbc:	dc000017 	ldw	r16,0(sp)
1000bfc0:	dec00204 	addi	sp,sp,8
1000bfc4:	f800283a 	ret
1000bfc8:	202090fa 	slli	r16,r4,3
1000bfcc:	00840074 	movhi	r2,4097
1000bfd0:	1093bc04 	addi	r2,r2,20208
1000bfd4:	1421883a 	add	r16,r2,r16
1000bfd8:	80800017 	ldw	r2,0(r16)
1000bfdc:	80c00117 	ldw	r3,4(r16)
1000bfe0:	dfc00117 	ldw	ra,4(sp)
1000bfe4:	dc000017 	ldw	r16,0(sp)
1000bfe8:	dec00204 	addi	sp,sp,8
1000bfec:	f800283a 	ret

1000bff0 <__copybits>:
1000bff0:	297fffc4 	addi	r5,r5,-1
1000bff4:	280fd17a 	srai	r7,r5,5
1000bff8:	30c00417 	ldw	r3,16(r6)
1000bffc:	30800504 	addi	r2,r6,20
1000c000:	39c00044 	addi	r7,r7,1
1000c004:	18c7883a 	add	r3,r3,r3
1000c008:	39cf883a 	add	r7,r7,r7
1000c00c:	18c7883a 	add	r3,r3,r3
1000c010:	39cf883a 	add	r7,r7,r7
1000c014:	10c7883a 	add	r3,r2,r3
1000c018:	21cf883a 	add	r7,r4,r7
1000c01c:	10c00d2e 	bgeu	r2,r3,1000c054 <__copybits+0x64>
1000c020:	200b883a 	mov	r5,r4
1000c024:	12000017 	ldw	r8,0(r2)
1000c028:	29400104 	addi	r5,r5,4
1000c02c:	10800104 	addi	r2,r2,4
1000c030:	2a3fff15 	stw	r8,-4(r5)
1000c034:	10fffb36 	bltu	r2,r3,1000c024 <__alt_data_end+0xf800c024>
1000c038:	1985c83a 	sub	r2,r3,r6
1000c03c:	10bffac4 	addi	r2,r2,-21
1000c040:	1004d0ba 	srli	r2,r2,2
1000c044:	10800044 	addi	r2,r2,1
1000c048:	1085883a 	add	r2,r2,r2
1000c04c:	1085883a 	add	r2,r2,r2
1000c050:	2089883a 	add	r4,r4,r2
1000c054:	21c0032e 	bgeu	r4,r7,1000c064 <__copybits+0x74>
1000c058:	20000015 	stw	zero,0(r4)
1000c05c:	21000104 	addi	r4,r4,4
1000c060:	21fffd36 	bltu	r4,r7,1000c058 <__alt_data_end+0xf800c058>
1000c064:	f800283a 	ret

1000c068 <__any_on>:
1000c068:	20c00417 	ldw	r3,16(r4)
1000c06c:	2805d17a 	srai	r2,r5,5
1000c070:	21000504 	addi	r4,r4,20
1000c074:	18800d0e 	bge	r3,r2,1000c0ac <__any_on+0x44>
1000c078:	18c7883a 	add	r3,r3,r3
1000c07c:	18c7883a 	add	r3,r3,r3
1000c080:	20c7883a 	add	r3,r4,r3
1000c084:	20c0192e 	bgeu	r4,r3,1000c0ec <__any_on+0x84>
1000c088:	18bfff17 	ldw	r2,-4(r3)
1000c08c:	18ffff04 	addi	r3,r3,-4
1000c090:	1000041e 	bne	r2,zero,1000c0a4 <__any_on+0x3c>
1000c094:	20c0142e 	bgeu	r4,r3,1000c0e8 <__any_on+0x80>
1000c098:	18ffff04 	addi	r3,r3,-4
1000c09c:	19400017 	ldw	r5,0(r3)
1000c0a0:	283ffc26 	beq	r5,zero,1000c094 <__alt_data_end+0xf800c094>
1000c0a4:	00800044 	movi	r2,1
1000c0a8:	f800283a 	ret
1000c0ac:	10c00a0e 	bge	r2,r3,1000c0d8 <__any_on+0x70>
1000c0b0:	1085883a 	add	r2,r2,r2
1000c0b4:	1085883a 	add	r2,r2,r2
1000c0b8:	294007cc 	andi	r5,r5,31
1000c0bc:	2087883a 	add	r3,r4,r2
1000c0c0:	283ff026 	beq	r5,zero,1000c084 <__alt_data_end+0xf800c084>
1000c0c4:	19800017 	ldw	r6,0(r3)
1000c0c8:	3144d83a 	srl	r2,r6,r5
1000c0cc:	114a983a 	sll	r5,r2,r5
1000c0d0:	317ff41e 	bne	r6,r5,1000c0a4 <__alt_data_end+0xf800c0a4>
1000c0d4:	003feb06 	br	1000c084 <__alt_data_end+0xf800c084>
1000c0d8:	1085883a 	add	r2,r2,r2
1000c0dc:	1085883a 	add	r2,r2,r2
1000c0e0:	2087883a 	add	r3,r4,r2
1000c0e4:	003fe706 	br	1000c084 <__alt_data_end+0xf800c084>
1000c0e8:	f800283a 	ret
1000c0ec:	0005883a 	mov	r2,zero
1000c0f0:	f800283a 	ret

1000c0f4 <_realloc_r>:
1000c0f4:	defff604 	addi	sp,sp,-40
1000c0f8:	dc800215 	stw	r18,8(sp)
1000c0fc:	dfc00915 	stw	ra,36(sp)
1000c100:	df000815 	stw	fp,32(sp)
1000c104:	ddc00715 	stw	r23,28(sp)
1000c108:	dd800615 	stw	r22,24(sp)
1000c10c:	dd400515 	stw	r21,20(sp)
1000c110:	dd000415 	stw	r20,16(sp)
1000c114:	dcc00315 	stw	r19,12(sp)
1000c118:	dc400115 	stw	r17,4(sp)
1000c11c:	dc000015 	stw	r16,0(sp)
1000c120:	3025883a 	mov	r18,r6
1000c124:	2800b726 	beq	r5,zero,1000c404 <_realloc_r+0x310>
1000c128:	282b883a 	mov	r21,r5
1000c12c:	2029883a 	mov	r20,r4
1000c130:	001237c0 	call	1001237c <__malloc_lock>
1000c134:	a8bfff17 	ldw	r2,-4(r21)
1000c138:	043fff04 	movi	r16,-4
1000c13c:	90c002c4 	addi	r3,r18,11
1000c140:	01000584 	movi	r4,22
1000c144:	acfffe04 	addi	r19,r21,-8
1000c148:	1420703a 	and	r16,r2,r16
1000c14c:	20c0332e 	bgeu	r4,r3,1000c21c <_realloc_r+0x128>
1000c150:	047ffe04 	movi	r17,-8
1000c154:	1c62703a 	and	r17,r3,r17
1000c158:	8807883a 	mov	r3,r17
1000c15c:	88005816 	blt	r17,zero,1000c2c0 <_realloc_r+0x1cc>
1000c160:	8c805736 	bltu	r17,r18,1000c2c0 <_realloc_r+0x1cc>
1000c164:	80c0300e 	bge	r16,r3,1000c228 <_realloc_r+0x134>
1000c168:	070400b4 	movhi	fp,4098
1000c16c:	e7048d04 	addi	fp,fp,4660
1000c170:	e1c00217 	ldw	r7,8(fp)
1000c174:	9c09883a 	add	r4,r19,r16
1000c178:	22000117 	ldw	r8,4(r4)
1000c17c:	21c06326 	beq	r4,r7,1000c30c <_realloc_r+0x218>
1000c180:	017fff84 	movi	r5,-2
1000c184:	414a703a 	and	r5,r8,r5
1000c188:	214b883a 	add	r5,r4,r5
1000c18c:	29800117 	ldw	r6,4(r5)
1000c190:	3180004c 	andi	r6,r6,1
1000c194:	30003f26 	beq	r6,zero,1000c294 <_realloc_r+0x1a0>
1000c198:	1080004c 	andi	r2,r2,1
1000c19c:	10008326 	beq	r2,zero,1000c3ac <_realloc_r+0x2b8>
1000c1a0:	900b883a 	mov	r5,r18
1000c1a4:	a009883a 	mov	r4,r20
1000c1a8:	000a3800 	call	1000a380 <_malloc_r>
1000c1ac:	1025883a 	mov	r18,r2
1000c1b0:	10011e26 	beq	r2,zero,1000c62c <_realloc_r+0x538>
1000c1b4:	a93fff17 	ldw	r4,-4(r21)
1000c1b8:	10fffe04 	addi	r3,r2,-8
1000c1bc:	00bfff84 	movi	r2,-2
1000c1c0:	2084703a 	and	r2,r4,r2
1000c1c4:	9885883a 	add	r2,r19,r2
1000c1c8:	1880ee26 	beq	r3,r2,1000c584 <_realloc_r+0x490>
1000c1cc:	81bfff04 	addi	r6,r16,-4
1000c1d0:	00800904 	movi	r2,36
1000c1d4:	1180b836 	bltu	r2,r6,1000c4b8 <_realloc_r+0x3c4>
1000c1d8:	00c004c4 	movi	r3,19
1000c1dc:	19809636 	bltu	r3,r6,1000c438 <_realloc_r+0x344>
1000c1e0:	9005883a 	mov	r2,r18
1000c1e4:	a807883a 	mov	r3,r21
1000c1e8:	19000017 	ldw	r4,0(r3)
1000c1ec:	11000015 	stw	r4,0(r2)
1000c1f0:	19000117 	ldw	r4,4(r3)
1000c1f4:	11000115 	stw	r4,4(r2)
1000c1f8:	18c00217 	ldw	r3,8(r3)
1000c1fc:	10c00215 	stw	r3,8(r2)
1000c200:	a80b883a 	mov	r5,r21
1000c204:	a009883a 	mov	r4,r20
1000c208:	00097880 	call	10009788 <_free_r>
1000c20c:	a009883a 	mov	r4,r20
1000c210:	00123a00 	call	100123a0 <__malloc_unlock>
1000c214:	9005883a 	mov	r2,r18
1000c218:	00001206 	br	1000c264 <_realloc_r+0x170>
1000c21c:	00c00404 	movi	r3,16
1000c220:	1823883a 	mov	r17,r3
1000c224:	003fce06 	br	1000c160 <__alt_data_end+0xf800c160>
1000c228:	a825883a 	mov	r18,r21
1000c22c:	8445c83a 	sub	r2,r16,r17
1000c230:	00c003c4 	movi	r3,15
1000c234:	18802636 	bltu	r3,r2,1000c2d0 <_realloc_r+0x1dc>
1000c238:	99800117 	ldw	r6,4(r19)
1000c23c:	9c07883a 	add	r3,r19,r16
1000c240:	3180004c 	andi	r6,r6,1
1000c244:	3420b03a 	or	r16,r6,r16
1000c248:	9c000115 	stw	r16,4(r19)
1000c24c:	18800117 	ldw	r2,4(r3)
1000c250:	10800054 	ori	r2,r2,1
1000c254:	18800115 	stw	r2,4(r3)
1000c258:	a009883a 	mov	r4,r20
1000c25c:	00123a00 	call	100123a0 <__malloc_unlock>
1000c260:	9005883a 	mov	r2,r18
1000c264:	dfc00917 	ldw	ra,36(sp)
1000c268:	df000817 	ldw	fp,32(sp)
1000c26c:	ddc00717 	ldw	r23,28(sp)
1000c270:	dd800617 	ldw	r22,24(sp)
1000c274:	dd400517 	ldw	r21,20(sp)
1000c278:	dd000417 	ldw	r20,16(sp)
1000c27c:	dcc00317 	ldw	r19,12(sp)
1000c280:	dc800217 	ldw	r18,8(sp)
1000c284:	dc400117 	ldw	r17,4(sp)
1000c288:	dc000017 	ldw	r16,0(sp)
1000c28c:	dec00a04 	addi	sp,sp,40
1000c290:	f800283a 	ret
1000c294:	017fff04 	movi	r5,-4
1000c298:	414a703a 	and	r5,r8,r5
1000c29c:	814d883a 	add	r6,r16,r5
1000c2a0:	30c01f16 	blt	r6,r3,1000c320 <_realloc_r+0x22c>
1000c2a4:	20800317 	ldw	r2,12(r4)
1000c2a8:	20c00217 	ldw	r3,8(r4)
1000c2ac:	a825883a 	mov	r18,r21
1000c2b0:	3021883a 	mov	r16,r6
1000c2b4:	18800315 	stw	r2,12(r3)
1000c2b8:	10c00215 	stw	r3,8(r2)
1000c2bc:	003fdb06 	br	1000c22c <__alt_data_end+0xf800c22c>
1000c2c0:	00800304 	movi	r2,12
1000c2c4:	a0800015 	stw	r2,0(r20)
1000c2c8:	0005883a 	mov	r2,zero
1000c2cc:	003fe506 	br	1000c264 <__alt_data_end+0xf800c264>
1000c2d0:	98c00117 	ldw	r3,4(r19)
1000c2d4:	9c4b883a 	add	r5,r19,r17
1000c2d8:	11000054 	ori	r4,r2,1
1000c2dc:	18c0004c 	andi	r3,r3,1
1000c2e0:	1c62b03a 	or	r17,r3,r17
1000c2e4:	9c400115 	stw	r17,4(r19)
1000c2e8:	29000115 	stw	r4,4(r5)
1000c2ec:	2885883a 	add	r2,r5,r2
1000c2f0:	10c00117 	ldw	r3,4(r2)
1000c2f4:	29400204 	addi	r5,r5,8
1000c2f8:	a009883a 	mov	r4,r20
1000c2fc:	18c00054 	ori	r3,r3,1
1000c300:	10c00115 	stw	r3,4(r2)
1000c304:	00097880 	call	10009788 <_free_r>
1000c308:	003fd306 	br	1000c258 <__alt_data_end+0xf800c258>
1000c30c:	017fff04 	movi	r5,-4
1000c310:	414a703a 	and	r5,r8,r5
1000c314:	89800404 	addi	r6,r17,16
1000c318:	8151883a 	add	r8,r16,r5
1000c31c:	4180590e 	bge	r8,r6,1000c484 <_realloc_r+0x390>
1000c320:	1080004c 	andi	r2,r2,1
1000c324:	103f9e1e 	bne	r2,zero,1000c1a0 <__alt_data_end+0xf800c1a0>
1000c328:	adbffe17 	ldw	r22,-8(r21)
1000c32c:	00bfff04 	movi	r2,-4
1000c330:	9dadc83a 	sub	r22,r19,r22
1000c334:	b1800117 	ldw	r6,4(r22)
1000c338:	3084703a 	and	r2,r6,r2
1000c33c:	20002026 	beq	r4,zero,1000c3c0 <_realloc_r+0x2cc>
1000c340:	80af883a 	add	r23,r16,r2
1000c344:	b96f883a 	add	r23,r23,r5
1000c348:	21c05f26 	beq	r4,r7,1000c4c8 <_realloc_r+0x3d4>
1000c34c:	b8c01c16 	blt	r23,r3,1000c3c0 <_realloc_r+0x2cc>
1000c350:	20800317 	ldw	r2,12(r4)
1000c354:	20c00217 	ldw	r3,8(r4)
1000c358:	81bfff04 	addi	r6,r16,-4
1000c35c:	01000904 	movi	r4,36
1000c360:	18800315 	stw	r2,12(r3)
1000c364:	10c00215 	stw	r3,8(r2)
1000c368:	b0c00217 	ldw	r3,8(r22)
1000c36c:	b0800317 	ldw	r2,12(r22)
1000c370:	b4800204 	addi	r18,r22,8
1000c374:	18800315 	stw	r2,12(r3)
1000c378:	10c00215 	stw	r3,8(r2)
1000c37c:	21801b36 	bltu	r4,r6,1000c3ec <_realloc_r+0x2f8>
1000c380:	008004c4 	movi	r2,19
1000c384:	1180352e 	bgeu	r2,r6,1000c45c <_realloc_r+0x368>
1000c388:	a8800017 	ldw	r2,0(r21)
1000c38c:	b0800215 	stw	r2,8(r22)
1000c390:	a8800117 	ldw	r2,4(r21)
1000c394:	b0800315 	stw	r2,12(r22)
1000c398:	008006c4 	movi	r2,27
1000c39c:	11807f36 	bltu	r2,r6,1000c59c <_realloc_r+0x4a8>
1000c3a0:	b0800404 	addi	r2,r22,16
1000c3a4:	ad400204 	addi	r21,r21,8
1000c3a8:	00002d06 	br	1000c460 <_realloc_r+0x36c>
1000c3ac:	adbffe17 	ldw	r22,-8(r21)
1000c3b0:	00bfff04 	movi	r2,-4
1000c3b4:	9dadc83a 	sub	r22,r19,r22
1000c3b8:	b1000117 	ldw	r4,4(r22)
1000c3bc:	2084703a 	and	r2,r4,r2
1000c3c0:	b03f7726 	beq	r22,zero,1000c1a0 <__alt_data_end+0xf800c1a0>
1000c3c4:	80af883a 	add	r23,r16,r2
1000c3c8:	b8ff7516 	blt	r23,r3,1000c1a0 <__alt_data_end+0xf800c1a0>
1000c3cc:	b0800317 	ldw	r2,12(r22)
1000c3d0:	b0c00217 	ldw	r3,8(r22)
1000c3d4:	81bfff04 	addi	r6,r16,-4
1000c3d8:	01000904 	movi	r4,36
1000c3dc:	18800315 	stw	r2,12(r3)
1000c3e0:	10c00215 	stw	r3,8(r2)
1000c3e4:	b4800204 	addi	r18,r22,8
1000c3e8:	21bfe52e 	bgeu	r4,r6,1000c380 <__alt_data_end+0xf800c380>
1000c3ec:	a80b883a 	mov	r5,r21
1000c3f0:	9009883a 	mov	r4,r18
1000c3f4:	000adb80 	call	1000adb8 <memmove>
1000c3f8:	b821883a 	mov	r16,r23
1000c3fc:	b027883a 	mov	r19,r22
1000c400:	003f8a06 	br	1000c22c <__alt_data_end+0xf800c22c>
1000c404:	300b883a 	mov	r5,r6
1000c408:	dfc00917 	ldw	ra,36(sp)
1000c40c:	df000817 	ldw	fp,32(sp)
1000c410:	ddc00717 	ldw	r23,28(sp)
1000c414:	dd800617 	ldw	r22,24(sp)
1000c418:	dd400517 	ldw	r21,20(sp)
1000c41c:	dd000417 	ldw	r20,16(sp)
1000c420:	dcc00317 	ldw	r19,12(sp)
1000c424:	dc800217 	ldw	r18,8(sp)
1000c428:	dc400117 	ldw	r17,4(sp)
1000c42c:	dc000017 	ldw	r16,0(sp)
1000c430:	dec00a04 	addi	sp,sp,40
1000c434:	000a3801 	jmpi	1000a380 <_malloc_r>
1000c438:	a8c00017 	ldw	r3,0(r21)
1000c43c:	90c00015 	stw	r3,0(r18)
1000c440:	a8c00117 	ldw	r3,4(r21)
1000c444:	90c00115 	stw	r3,4(r18)
1000c448:	00c006c4 	movi	r3,27
1000c44c:	19804536 	bltu	r3,r6,1000c564 <_realloc_r+0x470>
1000c450:	90800204 	addi	r2,r18,8
1000c454:	a8c00204 	addi	r3,r21,8
1000c458:	003f6306 	br	1000c1e8 <__alt_data_end+0xf800c1e8>
1000c45c:	9005883a 	mov	r2,r18
1000c460:	a8c00017 	ldw	r3,0(r21)
1000c464:	b821883a 	mov	r16,r23
1000c468:	b027883a 	mov	r19,r22
1000c46c:	10c00015 	stw	r3,0(r2)
1000c470:	a8c00117 	ldw	r3,4(r21)
1000c474:	10c00115 	stw	r3,4(r2)
1000c478:	a8c00217 	ldw	r3,8(r21)
1000c47c:	10c00215 	stw	r3,8(r2)
1000c480:	003f6a06 	br	1000c22c <__alt_data_end+0xf800c22c>
1000c484:	9c67883a 	add	r19,r19,r17
1000c488:	4445c83a 	sub	r2,r8,r17
1000c48c:	e4c00215 	stw	r19,8(fp)
1000c490:	10800054 	ori	r2,r2,1
1000c494:	98800115 	stw	r2,4(r19)
1000c498:	a8bfff17 	ldw	r2,-4(r21)
1000c49c:	a009883a 	mov	r4,r20
1000c4a0:	1080004c 	andi	r2,r2,1
1000c4a4:	1462b03a 	or	r17,r2,r17
1000c4a8:	ac7fff15 	stw	r17,-4(r21)
1000c4ac:	00123a00 	call	100123a0 <__malloc_unlock>
1000c4b0:	a805883a 	mov	r2,r21
1000c4b4:	003f6b06 	br	1000c264 <__alt_data_end+0xf800c264>
1000c4b8:	a80b883a 	mov	r5,r21
1000c4bc:	9009883a 	mov	r4,r18
1000c4c0:	000adb80 	call	1000adb8 <memmove>
1000c4c4:	003f4e06 	br	1000c200 <__alt_data_end+0xf800c200>
1000c4c8:	89000404 	addi	r4,r17,16
1000c4cc:	b93fbc16 	blt	r23,r4,1000c3c0 <__alt_data_end+0xf800c3c0>
1000c4d0:	b0800317 	ldw	r2,12(r22)
1000c4d4:	b0c00217 	ldw	r3,8(r22)
1000c4d8:	81bfff04 	addi	r6,r16,-4
1000c4dc:	01000904 	movi	r4,36
1000c4e0:	18800315 	stw	r2,12(r3)
1000c4e4:	10c00215 	stw	r3,8(r2)
1000c4e8:	b4800204 	addi	r18,r22,8
1000c4ec:	21804336 	bltu	r4,r6,1000c5fc <_realloc_r+0x508>
1000c4f0:	008004c4 	movi	r2,19
1000c4f4:	11803f2e 	bgeu	r2,r6,1000c5f4 <_realloc_r+0x500>
1000c4f8:	a8800017 	ldw	r2,0(r21)
1000c4fc:	b0800215 	stw	r2,8(r22)
1000c500:	a8800117 	ldw	r2,4(r21)
1000c504:	b0800315 	stw	r2,12(r22)
1000c508:	008006c4 	movi	r2,27
1000c50c:	11803f36 	bltu	r2,r6,1000c60c <_realloc_r+0x518>
1000c510:	b0800404 	addi	r2,r22,16
1000c514:	ad400204 	addi	r21,r21,8
1000c518:	a8c00017 	ldw	r3,0(r21)
1000c51c:	10c00015 	stw	r3,0(r2)
1000c520:	a8c00117 	ldw	r3,4(r21)
1000c524:	10c00115 	stw	r3,4(r2)
1000c528:	a8c00217 	ldw	r3,8(r21)
1000c52c:	10c00215 	stw	r3,8(r2)
1000c530:	b447883a 	add	r3,r22,r17
1000c534:	bc45c83a 	sub	r2,r23,r17
1000c538:	e0c00215 	stw	r3,8(fp)
1000c53c:	10800054 	ori	r2,r2,1
1000c540:	18800115 	stw	r2,4(r3)
1000c544:	b0800117 	ldw	r2,4(r22)
1000c548:	a009883a 	mov	r4,r20
1000c54c:	1080004c 	andi	r2,r2,1
1000c550:	1462b03a 	or	r17,r2,r17
1000c554:	b4400115 	stw	r17,4(r22)
1000c558:	00123a00 	call	100123a0 <__malloc_unlock>
1000c55c:	9005883a 	mov	r2,r18
1000c560:	003f4006 	br	1000c264 <__alt_data_end+0xf800c264>
1000c564:	a8c00217 	ldw	r3,8(r21)
1000c568:	90c00215 	stw	r3,8(r18)
1000c56c:	a8c00317 	ldw	r3,12(r21)
1000c570:	90c00315 	stw	r3,12(r18)
1000c574:	30801126 	beq	r6,r2,1000c5bc <_realloc_r+0x4c8>
1000c578:	90800404 	addi	r2,r18,16
1000c57c:	a8c00404 	addi	r3,r21,16
1000c580:	003f1906 	br	1000c1e8 <__alt_data_end+0xf800c1e8>
1000c584:	90ffff17 	ldw	r3,-4(r18)
1000c588:	00bfff04 	movi	r2,-4
1000c58c:	a825883a 	mov	r18,r21
1000c590:	1884703a 	and	r2,r3,r2
1000c594:	80a1883a 	add	r16,r16,r2
1000c598:	003f2406 	br	1000c22c <__alt_data_end+0xf800c22c>
1000c59c:	a8800217 	ldw	r2,8(r21)
1000c5a0:	b0800415 	stw	r2,16(r22)
1000c5a4:	a8800317 	ldw	r2,12(r21)
1000c5a8:	b0800515 	stw	r2,20(r22)
1000c5ac:	31000a26 	beq	r6,r4,1000c5d8 <_realloc_r+0x4e4>
1000c5b0:	b0800604 	addi	r2,r22,24
1000c5b4:	ad400404 	addi	r21,r21,16
1000c5b8:	003fa906 	br	1000c460 <__alt_data_end+0xf800c460>
1000c5bc:	a9000417 	ldw	r4,16(r21)
1000c5c0:	90800604 	addi	r2,r18,24
1000c5c4:	a8c00604 	addi	r3,r21,24
1000c5c8:	91000415 	stw	r4,16(r18)
1000c5cc:	a9000517 	ldw	r4,20(r21)
1000c5d0:	91000515 	stw	r4,20(r18)
1000c5d4:	003f0406 	br	1000c1e8 <__alt_data_end+0xf800c1e8>
1000c5d8:	a8c00417 	ldw	r3,16(r21)
1000c5dc:	ad400604 	addi	r21,r21,24
1000c5e0:	b0800804 	addi	r2,r22,32
1000c5e4:	b0c00615 	stw	r3,24(r22)
1000c5e8:	a8ffff17 	ldw	r3,-4(r21)
1000c5ec:	b0c00715 	stw	r3,28(r22)
1000c5f0:	003f9b06 	br	1000c460 <__alt_data_end+0xf800c460>
1000c5f4:	9005883a 	mov	r2,r18
1000c5f8:	003fc706 	br	1000c518 <__alt_data_end+0xf800c518>
1000c5fc:	a80b883a 	mov	r5,r21
1000c600:	9009883a 	mov	r4,r18
1000c604:	000adb80 	call	1000adb8 <memmove>
1000c608:	003fc906 	br	1000c530 <__alt_data_end+0xf800c530>
1000c60c:	a8800217 	ldw	r2,8(r21)
1000c610:	b0800415 	stw	r2,16(r22)
1000c614:	a8800317 	ldw	r2,12(r21)
1000c618:	b0800515 	stw	r2,20(r22)
1000c61c:	31000726 	beq	r6,r4,1000c63c <_realloc_r+0x548>
1000c620:	b0800604 	addi	r2,r22,24
1000c624:	ad400404 	addi	r21,r21,16
1000c628:	003fbb06 	br	1000c518 <__alt_data_end+0xf800c518>
1000c62c:	a009883a 	mov	r4,r20
1000c630:	00123a00 	call	100123a0 <__malloc_unlock>
1000c634:	0005883a 	mov	r2,zero
1000c638:	003f0a06 	br	1000c264 <__alt_data_end+0xf800c264>
1000c63c:	a8c00417 	ldw	r3,16(r21)
1000c640:	ad400604 	addi	r21,r21,24
1000c644:	b0800804 	addi	r2,r22,32
1000c648:	b0c00615 	stw	r3,24(r22)
1000c64c:	a8ffff17 	ldw	r3,-4(r21)
1000c650:	b0c00715 	stw	r3,28(r22)
1000c654:	003fb006 	br	1000c518 <__alt_data_end+0xf800c518>

1000c658 <__fpclassifyd>:
1000c658:	00a00034 	movhi	r2,32768
1000c65c:	10bfffc4 	addi	r2,r2,-1
1000c660:	2884703a 	and	r2,r5,r2
1000c664:	10000726 	beq	r2,zero,1000c684 <__fpclassifyd+0x2c>
1000c668:	00fffc34 	movhi	r3,65520
1000c66c:	019ff834 	movhi	r6,32736
1000c670:	28c7883a 	add	r3,r5,r3
1000c674:	31bfffc4 	addi	r6,r6,-1
1000c678:	30c00536 	bltu	r6,r3,1000c690 <__fpclassifyd+0x38>
1000c67c:	00800104 	movi	r2,4
1000c680:	f800283a 	ret
1000c684:	2000021e 	bne	r4,zero,1000c690 <__fpclassifyd+0x38>
1000c688:	00800084 	movi	r2,2
1000c68c:	f800283a 	ret
1000c690:	00dffc34 	movhi	r3,32752
1000c694:	019ff834 	movhi	r6,32736
1000c698:	28cb883a 	add	r5,r5,r3
1000c69c:	31bfffc4 	addi	r6,r6,-1
1000c6a0:	317ff62e 	bgeu	r6,r5,1000c67c <__alt_data_end+0xf800c67c>
1000c6a4:	01400434 	movhi	r5,16
1000c6a8:	297fffc4 	addi	r5,r5,-1
1000c6ac:	28800236 	bltu	r5,r2,1000c6b8 <__fpclassifyd+0x60>
1000c6b0:	008000c4 	movi	r2,3
1000c6b4:	f800283a 	ret
1000c6b8:	10c00226 	beq	r2,r3,1000c6c4 <__fpclassifyd+0x6c>
1000c6bc:	0005883a 	mov	r2,zero
1000c6c0:	f800283a 	ret
1000c6c4:	2005003a 	cmpeq	r2,r4,zero
1000c6c8:	f800283a 	ret

1000c6cc <_sbrk_r>:
1000c6cc:	defffd04 	addi	sp,sp,-12
1000c6d0:	dc000015 	stw	r16,0(sp)
1000c6d4:	040400f4 	movhi	r16,4099
1000c6d8:	dc400115 	stw	r17,4(sp)
1000c6dc:	84000e04 	addi	r16,r16,56
1000c6e0:	2023883a 	mov	r17,r4
1000c6e4:	2809883a 	mov	r4,r5
1000c6e8:	dfc00215 	stw	ra,8(sp)
1000c6ec:	80000015 	stw	zero,0(r16)
1000c6f0:	00125880 	call	10012588 <sbrk>
1000c6f4:	00ffffc4 	movi	r3,-1
1000c6f8:	10c00526 	beq	r2,r3,1000c710 <_sbrk_r+0x44>
1000c6fc:	dfc00217 	ldw	ra,8(sp)
1000c700:	dc400117 	ldw	r17,4(sp)
1000c704:	dc000017 	ldw	r16,0(sp)
1000c708:	dec00304 	addi	sp,sp,12
1000c70c:	f800283a 	ret
1000c710:	80c00017 	ldw	r3,0(r16)
1000c714:	183ff926 	beq	r3,zero,1000c6fc <__alt_data_end+0xf800c6fc>
1000c718:	88c00015 	stw	r3,0(r17)
1000c71c:	003ff706 	br	1000c6fc <__alt_data_end+0xf800c6fc>

1000c720 <__sread>:
1000c720:	defffe04 	addi	sp,sp,-8
1000c724:	dc000015 	stw	r16,0(sp)
1000c728:	2821883a 	mov	r16,r5
1000c72c:	2940038f 	ldh	r5,14(r5)
1000c730:	dfc00115 	stw	ra,4(sp)
1000c734:	000e5dc0 	call	1000e5dc <_read_r>
1000c738:	10000716 	blt	r2,zero,1000c758 <__sread+0x38>
1000c73c:	80c01417 	ldw	r3,80(r16)
1000c740:	1887883a 	add	r3,r3,r2
1000c744:	80c01415 	stw	r3,80(r16)
1000c748:	dfc00117 	ldw	ra,4(sp)
1000c74c:	dc000017 	ldw	r16,0(sp)
1000c750:	dec00204 	addi	sp,sp,8
1000c754:	f800283a 	ret
1000c758:	80c0030b 	ldhu	r3,12(r16)
1000c75c:	18fbffcc 	andi	r3,r3,61439
1000c760:	80c0030d 	sth	r3,12(r16)
1000c764:	dfc00117 	ldw	ra,4(sp)
1000c768:	dc000017 	ldw	r16,0(sp)
1000c76c:	dec00204 	addi	sp,sp,8
1000c770:	f800283a 	ret

1000c774 <__seofread>:
1000c774:	0005883a 	mov	r2,zero
1000c778:	f800283a 	ret

1000c77c <__swrite>:
1000c77c:	2880030b 	ldhu	r2,12(r5)
1000c780:	defffb04 	addi	sp,sp,-20
1000c784:	dcc00315 	stw	r19,12(sp)
1000c788:	dc800215 	stw	r18,8(sp)
1000c78c:	dc400115 	stw	r17,4(sp)
1000c790:	dc000015 	stw	r16,0(sp)
1000c794:	dfc00415 	stw	ra,16(sp)
1000c798:	10c0400c 	andi	r3,r2,256
1000c79c:	2821883a 	mov	r16,r5
1000c7a0:	2023883a 	mov	r17,r4
1000c7a4:	3025883a 	mov	r18,r6
1000c7a8:	3827883a 	mov	r19,r7
1000c7ac:	18000526 	beq	r3,zero,1000c7c4 <__swrite+0x48>
1000c7b0:	2940038f 	ldh	r5,14(r5)
1000c7b4:	01c00084 	movi	r7,2
1000c7b8:	000d883a 	mov	r6,zero
1000c7bc:	000e57c0 	call	1000e57c <_lseek_r>
1000c7c0:	8080030b 	ldhu	r2,12(r16)
1000c7c4:	8140038f 	ldh	r5,14(r16)
1000c7c8:	10bbffcc 	andi	r2,r2,61439
1000c7cc:	980f883a 	mov	r7,r19
1000c7d0:	900d883a 	mov	r6,r18
1000c7d4:	8809883a 	mov	r4,r17
1000c7d8:	8080030d 	sth	r2,12(r16)
1000c7dc:	dfc00417 	ldw	ra,16(sp)
1000c7e0:	dcc00317 	ldw	r19,12(sp)
1000c7e4:	dc800217 	ldw	r18,8(sp)
1000c7e8:	dc400117 	ldw	r17,4(sp)
1000c7ec:	dc000017 	ldw	r16,0(sp)
1000c7f0:	dec00504 	addi	sp,sp,20
1000c7f4:	000e0301 	jmpi	1000e030 <_write_r>

1000c7f8 <__sseek>:
1000c7f8:	defffe04 	addi	sp,sp,-8
1000c7fc:	dc000015 	stw	r16,0(sp)
1000c800:	2821883a 	mov	r16,r5
1000c804:	2940038f 	ldh	r5,14(r5)
1000c808:	dfc00115 	stw	ra,4(sp)
1000c80c:	000e57c0 	call	1000e57c <_lseek_r>
1000c810:	00ffffc4 	movi	r3,-1
1000c814:	10c00826 	beq	r2,r3,1000c838 <__sseek+0x40>
1000c818:	80c0030b 	ldhu	r3,12(r16)
1000c81c:	80801415 	stw	r2,80(r16)
1000c820:	18c40014 	ori	r3,r3,4096
1000c824:	80c0030d 	sth	r3,12(r16)
1000c828:	dfc00117 	ldw	ra,4(sp)
1000c82c:	dc000017 	ldw	r16,0(sp)
1000c830:	dec00204 	addi	sp,sp,8
1000c834:	f800283a 	ret
1000c838:	80c0030b 	ldhu	r3,12(r16)
1000c83c:	18fbffcc 	andi	r3,r3,61439
1000c840:	80c0030d 	sth	r3,12(r16)
1000c844:	dfc00117 	ldw	ra,4(sp)
1000c848:	dc000017 	ldw	r16,0(sp)
1000c84c:	dec00204 	addi	sp,sp,8
1000c850:	f800283a 	ret

1000c854 <__sclose>:
1000c854:	2940038f 	ldh	r5,14(r5)
1000c858:	000e0901 	jmpi	1000e090 <_close_r>

1000c85c <strcmp>:
1000c85c:	2144b03a 	or	r2,r4,r5
1000c860:	108000cc 	andi	r2,r2,3
1000c864:	1000171e 	bne	r2,zero,1000c8c4 <strcmp+0x68>
1000c868:	20800017 	ldw	r2,0(r4)
1000c86c:	28c00017 	ldw	r3,0(r5)
1000c870:	10c0141e 	bne	r2,r3,1000c8c4 <strcmp+0x68>
1000c874:	027fbff4 	movhi	r9,65279
1000c878:	4a7fbfc4 	addi	r9,r9,-257
1000c87c:	0086303a 	nor	r3,zero,r2
1000c880:	02202074 	movhi	r8,32897
1000c884:	1245883a 	add	r2,r2,r9
1000c888:	42202004 	addi	r8,r8,-32640
1000c88c:	10c4703a 	and	r2,r2,r3
1000c890:	1204703a 	and	r2,r2,r8
1000c894:	10000226 	beq	r2,zero,1000c8a0 <strcmp+0x44>
1000c898:	00002306 	br	1000c928 <strcmp+0xcc>
1000c89c:	1000221e 	bne	r2,zero,1000c928 <strcmp+0xcc>
1000c8a0:	21000104 	addi	r4,r4,4
1000c8a4:	20c00017 	ldw	r3,0(r4)
1000c8a8:	29400104 	addi	r5,r5,4
1000c8ac:	29800017 	ldw	r6,0(r5)
1000c8b0:	1a4f883a 	add	r7,r3,r9
1000c8b4:	00c4303a 	nor	r2,zero,r3
1000c8b8:	3884703a 	and	r2,r7,r2
1000c8bc:	1204703a 	and	r2,r2,r8
1000c8c0:	19bff626 	beq	r3,r6,1000c89c <__alt_data_end+0xf800c89c>
1000c8c4:	20800003 	ldbu	r2,0(r4)
1000c8c8:	10c03fcc 	andi	r3,r2,255
1000c8cc:	18c0201c 	xori	r3,r3,128
1000c8d0:	18ffe004 	addi	r3,r3,-128
1000c8d4:	18000c26 	beq	r3,zero,1000c908 <strcmp+0xac>
1000c8d8:	29800007 	ldb	r6,0(r5)
1000c8dc:	19800326 	beq	r3,r6,1000c8ec <strcmp+0x90>
1000c8e0:	00001306 	br	1000c930 <strcmp+0xd4>
1000c8e4:	29800007 	ldb	r6,0(r5)
1000c8e8:	11800b1e 	bne	r2,r6,1000c918 <strcmp+0xbc>
1000c8ec:	21000044 	addi	r4,r4,1
1000c8f0:	20c00003 	ldbu	r3,0(r4)
1000c8f4:	29400044 	addi	r5,r5,1
1000c8f8:	18803fcc 	andi	r2,r3,255
1000c8fc:	1080201c 	xori	r2,r2,128
1000c900:	10bfe004 	addi	r2,r2,-128
1000c904:	103ff71e 	bne	r2,zero,1000c8e4 <__alt_data_end+0xf800c8e4>
1000c908:	0007883a 	mov	r3,zero
1000c90c:	28800003 	ldbu	r2,0(r5)
1000c910:	1885c83a 	sub	r2,r3,r2
1000c914:	f800283a 	ret
1000c918:	28800003 	ldbu	r2,0(r5)
1000c91c:	18c03fcc 	andi	r3,r3,255
1000c920:	1885c83a 	sub	r2,r3,r2
1000c924:	f800283a 	ret
1000c928:	0005883a 	mov	r2,zero
1000c92c:	f800283a 	ret
1000c930:	10c03fcc 	andi	r3,r2,255
1000c934:	003ff506 	br	1000c90c <__alt_data_end+0xf800c90c>

1000c938 <__sprint_r.part.0>:
1000c938:	28801917 	ldw	r2,100(r5)
1000c93c:	defff604 	addi	sp,sp,-40
1000c940:	dd400515 	stw	r21,20(sp)
1000c944:	dfc00915 	stw	ra,36(sp)
1000c948:	df000815 	stw	fp,32(sp)
1000c94c:	ddc00715 	stw	r23,28(sp)
1000c950:	dd800615 	stw	r22,24(sp)
1000c954:	dd000415 	stw	r20,16(sp)
1000c958:	dcc00315 	stw	r19,12(sp)
1000c95c:	dc800215 	stw	r18,8(sp)
1000c960:	dc400115 	stw	r17,4(sp)
1000c964:	dc000015 	stw	r16,0(sp)
1000c968:	1088000c 	andi	r2,r2,8192
1000c96c:	302b883a 	mov	r21,r6
1000c970:	10002e26 	beq	r2,zero,1000ca2c <__sprint_r.part.0+0xf4>
1000c974:	30800217 	ldw	r2,8(r6)
1000c978:	35800017 	ldw	r22,0(r6)
1000c97c:	10002926 	beq	r2,zero,1000ca24 <__sprint_r.part.0+0xec>
1000c980:	2827883a 	mov	r19,r5
1000c984:	2029883a 	mov	r20,r4
1000c988:	b5c00104 	addi	r23,r22,4
1000c98c:	04bfffc4 	movi	r18,-1
1000c990:	bc400017 	ldw	r17,0(r23)
1000c994:	b4000017 	ldw	r16,0(r22)
1000c998:	0039883a 	mov	fp,zero
1000c99c:	8822d0ba 	srli	r17,r17,2
1000c9a0:	8800031e 	bne	r17,zero,1000c9b0 <__sprint_r.part.0+0x78>
1000c9a4:	00001806 	br	1000ca08 <__sprint_r.part.0+0xd0>
1000c9a8:	84000104 	addi	r16,r16,4
1000c9ac:	8f001526 	beq	r17,fp,1000ca04 <__sprint_r.part.0+0xcc>
1000c9b0:	81400017 	ldw	r5,0(r16)
1000c9b4:	980d883a 	mov	r6,r19
1000c9b8:	a009883a 	mov	r4,r20
1000c9bc:	000e4280 	call	1000e428 <_fputwc_r>
1000c9c0:	e7000044 	addi	fp,fp,1
1000c9c4:	14bff81e 	bne	r2,r18,1000c9a8 <__alt_data_end+0xf800c9a8>
1000c9c8:	9005883a 	mov	r2,r18
1000c9cc:	a8000215 	stw	zero,8(r21)
1000c9d0:	a8000115 	stw	zero,4(r21)
1000c9d4:	dfc00917 	ldw	ra,36(sp)
1000c9d8:	df000817 	ldw	fp,32(sp)
1000c9dc:	ddc00717 	ldw	r23,28(sp)
1000c9e0:	dd800617 	ldw	r22,24(sp)
1000c9e4:	dd400517 	ldw	r21,20(sp)
1000c9e8:	dd000417 	ldw	r20,16(sp)
1000c9ec:	dcc00317 	ldw	r19,12(sp)
1000c9f0:	dc800217 	ldw	r18,8(sp)
1000c9f4:	dc400117 	ldw	r17,4(sp)
1000c9f8:	dc000017 	ldw	r16,0(sp)
1000c9fc:	dec00a04 	addi	sp,sp,40
1000ca00:	f800283a 	ret
1000ca04:	a8800217 	ldw	r2,8(r21)
1000ca08:	8c63883a 	add	r17,r17,r17
1000ca0c:	8c63883a 	add	r17,r17,r17
1000ca10:	1445c83a 	sub	r2,r2,r17
1000ca14:	a8800215 	stw	r2,8(r21)
1000ca18:	b5800204 	addi	r22,r22,8
1000ca1c:	bdc00204 	addi	r23,r23,8
1000ca20:	103fdb1e 	bne	r2,zero,1000c990 <__alt_data_end+0xf800c990>
1000ca24:	0005883a 	mov	r2,zero
1000ca28:	003fe806 	br	1000c9cc <__alt_data_end+0xf800c9cc>
1000ca2c:	0009a980 	call	10009a98 <__sfvwrite_r>
1000ca30:	003fe606 	br	1000c9cc <__alt_data_end+0xf800c9cc>

1000ca34 <__sprint_r>:
1000ca34:	30c00217 	ldw	r3,8(r6)
1000ca38:	18000126 	beq	r3,zero,1000ca40 <__sprint_r+0xc>
1000ca3c:	000c9381 	jmpi	1000c938 <__sprint_r.part.0>
1000ca40:	30000115 	stw	zero,4(r6)
1000ca44:	0005883a 	mov	r2,zero
1000ca48:	f800283a 	ret

1000ca4c <___vfiprintf_internal_r>:
1000ca4c:	deffca04 	addi	sp,sp,-216
1000ca50:	dd403115 	stw	r21,196(sp)
1000ca54:	dfc03515 	stw	ra,212(sp)
1000ca58:	df003415 	stw	fp,208(sp)
1000ca5c:	ddc03315 	stw	r23,204(sp)
1000ca60:	dd803215 	stw	r22,200(sp)
1000ca64:	dd003015 	stw	r20,192(sp)
1000ca68:	dcc02f15 	stw	r19,188(sp)
1000ca6c:	dc802e15 	stw	r18,184(sp)
1000ca70:	dc402d15 	stw	r17,180(sp)
1000ca74:	dc002c15 	stw	r16,176(sp)
1000ca78:	d9002115 	stw	r4,132(sp)
1000ca7c:	d9402015 	stw	r5,128(sp)
1000ca80:	d9c02215 	stw	r7,136(sp)
1000ca84:	302b883a 	mov	r21,r6
1000ca88:	20000226 	beq	r4,zero,1000ca94 <___vfiprintf_internal_r+0x48>
1000ca8c:	20800e17 	ldw	r2,56(r4)
1000ca90:	1000cf26 	beq	r2,zero,1000cdd0 <___vfiprintf_internal_r+0x384>
1000ca94:	d8c02017 	ldw	r3,128(sp)
1000ca98:	1880030b 	ldhu	r2,12(r3)
1000ca9c:	10c8000c 	andi	r3,r2,8192
1000caa0:	1800071e 	bne	r3,zero,1000cac0 <___vfiprintf_internal_r+0x74>
1000caa4:	d9402017 	ldw	r5,128(sp)
1000caa8:	00f7ffc4 	movi	r3,-8193
1000caac:	10880014 	ori	r2,r2,8192
1000cab0:	29001917 	ldw	r4,100(r5)
1000cab4:	2880030d 	sth	r2,12(r5)
1000cab8:	20c6703a 	and	r3,r4,r3
1000cabc:	28c01915 	stw	r3,100(r5)
1000cac0:	10c0020c 	andi	r3,r2,8
1000cac4:	1800a526 	beq	r3,zero,1000cd5c <___vfiprintf_internal_r+0x310>
1000cac8:	d9002017 	ldw	r4,128(sp)
1000cacc:	20c00417 	ldw	r3,16(r4)
1000cad0:	1800a226 	beq	r3,zero,1000cd5c <___vfiprintf_internal_r+0x310>
1000cad4:	1080068c 	andi	r2,r2,26
1000cad8:	00c00284 	movi	r3,10
1000cadc:	10c0a826 	beq	r2,r3,1000cd80 <___vfiprintf_internal_r+0x334>
1000cae0:	d9001a04 	addi	r4,sp,104
1000cae4:	d94019c4 	addi	r5,sp,103
1000cae8:	04840074 	movhi	r18,4097
1000caec:	2145c83a 	sub	r2,r4,r5
1000caf0:	9493ee04 	addi	r18,r18,20408
1000caf4:	d9001e15 	stw	r4,120(sp)
1000caf8:	d9401f15 	stw	r5,124(sp)
1000cafc:	dec01a15 	stw	sp,104(sp)
1000cb00:	d8001c15 	stw	zero,112(sp)
1000cb04:	d8001b15 	stw	zero,108(sp)
1000cb08:	d811883a 	mov	r8,sp
1000cb0c:	d8002615 	stw	zero,152(sp)
1000cb10:	d8002415 	stw	zero,144(sp)
1000cb14:	d8802815 	stw	r2,160(sp)
1000cb18:	a82d883a 	mov	r22,r21
1000cb1c:	b0800007 	ldb	r2,0(r22)
1000cb20:	10040d26 	beq	r2,zero,1000db58 <___vfiprintf_internal_r+0x110c>
1000cb24:	00c00944 	movi	r3,37
1000cb28:	b029883a 	mov	r20,r22
1000cb2c:	10c0021e 	bne	r2,r3,1000cb38 <___vfiprintf_internal_r+0xec>
1000cb30:	00001606 	br	1000cb8c <___vfiprintf_internal_r+0x140>
1000cb34:	10c00326 	beq	r2,r3,1000cb44 <___vfiprintf_internal_r+0xf8>
1000cb38:	a5000044 	addi	r20,r20,1
1000cb3c:	a0800007 	ldb	r2,0(r20)
1000cb40:	103ffc1e 	bne	r2,zero,1000cb34 <__alt_data_end+0xf800cb34>
1000cb44:	a5a1c83a 	sub	r16,r20,r22
1000cb48:	80001026 	beq	r16,zero,1000cb8c <___vfiprintf_internal_r+0x140>
1000cb4c:	d8c01c17 	ldw	r3,112(sp)
1000cb50:	d8801b17 	ldw	r2,108(sp)
1000cb54:	45800015 	stw	r22,0(r8)
1000cb58:	80c7883a 	add	r3,r16,r3
1000cb5c:	10800044 	addi	r2,r2,1
1000cb60:	44000115 	stw	r16,4(r8)
1000cb64:	d8c01c15 	stw	r3,112(sp)
1000cb68:	d8801b15 	stw	r2,108(sp)
1000cb6c:	010001c4 	movi	r4,7
1000cb70:	2080750e 	bge	r4,r2,1000cd48 <___vfiprintf_internal_r+0x2fc>
1000cb74:	1803951e 	bne	r3,zero,1000d9cc <___vfiprintf_internal_r+0xf80>
1000cb78:	d8c02417 	ldw	r3,144(sp)
1000cb7c:	d8001b15 	stw	zero,108(sp)
1000cb80:	d811883a 	mov	r8,sp
1000cb84:	1c07883a 	add	r3,r3,r16
1000cb88:	d8c02415 	stw	r3,144(sp)
1000cb8c:	a0800007 	ldb	r2,0(r20)
1000cb90:	1002e026 	beq	r2,zero,1000d714 <___vfiprintf_internal_r+0xcc8>
1000cb94:	a5800044 	addi	r22,r20,1
1000cb98:	a0c00047 	ldb	r3,1(r20)
1000cb9c:	d8001d85 	stb	zero,118(sp)
1000cba0:	0027883a 	mov	r19,zero
1000cba4:	d8002305 	stb	zero,140(sp)
1000cba8:	043fffc4 	movi	r16,-1
1000cbac:	d8002515 	stw	zero,148(sp)
1000cbb0:	0023883a 	mov	r17,zero
1000cbb4:	05001604 	movi	r20,88
1000cbb8:	05400244 	movi	r21,9
1000cbbc:	402f883a 	mov	r23,r8
1000cbc0:	b5800044 	addi	r22,r22,1
1000cbc4:	18bff804 	addi	r2,r3,-32
1000cbc8:	a0827736 	bltu	r20,r2,1000d5a8 <___vfiprintf_internal_r+0xb5c>
1000cbcc:	100490ba 	slli	r2,r2,2
1000cbd0:	01040074 	movhi	r4,4097
1000cbd4:	2132f904 	addi	r4,r4,-13340
1000cbd8:	1105883a 	add	r2,r2,r4
1000cbdc:	10800017 	ldw	r2,0(r2)
1000cbe0:	1000683a 	jmp	r2
1000cbe4:	1000d2a8 	cmpgeui	zero,r2,842
1000cbe8:	1000d5a8 	cmpgeui	zero,r2,854
1000cbec:	1000d5a8 	cmpgeui	zero,r2,854
1000cbf0:	1000d2c4 	addi	zero,r2,843
1000cbf4:	1000d5a8 	cmpgeui	zero,r2,854
1000cbf8:	1000d5a8 	cmpgeui	zero,r2,854
1000cbfc:	1000d5a8 	cmpgeui	zero,r2,854
1000cc00:	1000d5a8 	cmpgeui	zero,r2,854
1000cc04:	1000d5a8 	cmpgeui	zero,r2,854
1000cc08:	1000d5a8 	cmpgeui	zero,r2,854
1000cc0c:	1000d4cc 	andi	zero,r2,851
1000cc10:	1000d4f0 	cmpltui	zero,r2,851
1000cc14:	1000d5a8 	cmpgeui	zero,r2,854
1000cc18:	1000cde8 	cmpgeui	zero,r2,823
1000cc1c:	1000d504 	addi	zero,r2,852
1000cc20:	1000d5a8 	cmpgeui	zero,r2,854
1000cc24:	1000d2d0 	cmplti	zero,r2,843
1000cc28:	1000d2dc 	xori	zero,r2,843
1000cc2c:	1000d2dc 	xori	zero,r2,843
1000cc30:	1000d2dc 	xori	zero,r2,843
1000cc34:	1000d2dc 	xori	zero,r2,843
1000cc38:	1000d2dc 	xori	zero,r2,843
1000cc3c:	1000d2dc 	xori	zero,r2,843
1000cc40:	1000d2dc 	xori	zero,r2,843
1000cc44:	1000d2dc 	xori	zero,r2,843
1000cc48:	1000d2dc 	xori	zero,r2,843
1000cc4c:	1000d5a8 	cmpgeui	zero,r2,854
1000cc50:	1000d5a8 	cmpgeui	zero,r2,854
1000cc54:	1000d5a8 	cmpgeui	zero,r2,854
1000cc58:	1000d5a8 	cmpgeui	zero,r2,854
1000cc5c:	1000d5a8 	cmpgeui	zero,r2,854
1000cc60:	1000d5a8 	cmpgeui	zero,r2,854
1000cc64:	1000d5a8 	cmpgeui	zero,r2,854
1000cc68:	1000d5a8 	cmpgeui	zero,r2,854
1000cc6c:	1000d5a8 	cmpgeui	zero,r2,854
1000cc70:	1000d5a8 	cmpgeui	zero,r2,854
1000cc74:	1000d31c 	xori	zero,r2,844
1000cc78:	1000d5a8 	cmpgeui	zero,r2,854
1000cc7c:	1000d5a8 	cmpgeui	zero,r2,854
1000cc80:	1000d5a8 	cmpgeui	zero,r2,854
1000cc84:	1000d5a8 	cmpgeui	zero,r2,854
1000cc88:	1000d5a8 	cmpgeui	zero,r2,854
1000cc8c:	1000d5a8 	cmpgeui	zero,r2,854
1000cc90:	1000d5a8 	cmpgeui	zero,r2,854
1000cc94:	1000d5a8 	cmpgeui	zero,r2,854
1000cc98:	1000d5a8 	cmpgeui	zero,r2,854
1000cc9c:	1000d5a8 	cmpgeui	zero,r2,854
1000cca0:	1000d358 	cmpnei	zero,r2,845
1000cca4:	1000d5a8 	cmpgeui	zero,r2,854
1000cca8:	1000d5a8 	cmpgeui	zero,r2,854
1000ccac:	1000d5a8 	cmpgeui	zero,r2,854
1000ccb0:	1000d5a8 	cmpgeui	zero,r2,854
1000ccb4:	1000d5a8 	cmpgeui	zero,r2,854
1000ccb8:	1000d3b4 	orhi	zero,r2,846
1000ccbc:	1000d5a8 	cmpgeui	zero,r2,854
1000ccc0:	1000d5a8 	cmpgeui	zero,r2,854
1000ccc4:	1000d428 	cmpgeui	zero,r2,848
1000ccc8:	1000d5a8 	cmpgeui	zero,r2,854
1000cccc:	1000d5a8 	cmpgeui	zero,r2,854
1000ccd0:	1000d5a8 	cmpgeui	zero,r2,854
1000ccd4:	1000d5a8 	cmpgeui	zero,r2,854
1000ccd8:	1000d5a8 	cmpgeui	zero,r2,854
1000ccdc:	1000d5a8 	cmpgeui	zero,r2,854
1000cce0:	1000d5a8 	cmpgeui	zero,r2,854
1000cce4:	1000d5a8 	cmpgeui	zero,r2,854
1000cce8:	1000d5a8 	cmpgeui	zero,r2,854
1000ccec:	1000d5a8 	cmpgeui	zero,r2,854
1000ccf0:	1000d1d0 	cmplti	zero,r2,839
1000ccf4:	1000d200 	call	11000d20 <__alt_heap_start+0xfd0ba0>
1000ccf8:	1000d5a8 	cmpgeui	zero,r2,854
1000ccfc:	1000d5a8 	cmpgeui	zero,r2,854
1000cd00:	1000d5a8 	cmpgeui	zero,r2,854
1000cd04:	1000d550 	cmplti	zero,r2,853
1000cd08:	1000d200 	call	11000d20 <__alt_heap_start+0xfd0ba0>
1000cd0c:	1000d5a8 	cmpgeui	zero,r2,854
1000cd10:	1000d5a8 	cmpgeui	zero,r2,854
1000cd14:	1000d0a8 	cmpgeui	zero,r2,834
1000cd18:	1000d5a8 	cmpgeui	zero,r2,854
1000cd1c:	1000d0bc 	xorhi	zero,r2,834
1000cd20:	1000d0f4 	orhi	zero,r2,835
1000cd24:	1000cdf4 	orhi	zero,r2,823
1000cd28:	1000d09c 	xori	zero,r2,834
1000cd2c:	1000d5a8 	cmpgeui	zero,r2,854
1000cd30:	1000d468 	cmpgeui	zero,r2,849
1000cd34:	1000d5a8 	cmpgeui	zero,r2,854
1000cd38:	1000d4b4 	orhi	zero,r2,850
1000cd3c:	1000d5a8 	cmpgeui	zero,r2,854
1000cd40:	1000d5a8 	cmpgeui	zero,r2,854
1000cd44:	1000d178 	rdprs	zero,r2,837
1000cd48:	42000204 	addi	r8,r8,8
1000cd4c:	d8c02417 	ldw	r3,144(sp)
1000cd50:	1c07883a 	add	r3,r3,r16
1000cd54:	d8c02415 	stw	r3,144(sp)
1000cd58:	003f8c06 	br	1000cb8c <__alt_data_end+0xf800cb8c>
1000cd5c:	d9402017 	ldw	r5,128(sp)
1000cd60:	d9002117 	ldw	r4,132(sp)
1000cd64:	00076080 	call	10007608 <__swsetup_r>
1000cd68:	1003c11e 	bne	r2,zero,1000dc70 <___vfiprintf_internal_r+0x1224>
1000cd6c:	d9402017 	ldw	r5,128(sp)
1000cd70:	00c00284 	movi	r3,10
1000cd74:	2880030b 	ldhu	r2,12(r5)
1000cd78:	1080068c 	andi	r2,r2,26
1000cd7c:	10ff581e 	bne	r2,r3,1000cae0 <__alt_data_end+0xf800cae0>
1000cd80:	d8c02017 	ldw	r3,128(sp)
1000cd84:	1880038f 	ldh	r2,14(r3)
1000cd88:	103f5516 	blt	r2,zero,1000cae0 <__alt_data_end+0xf800cae0>
1000cd8c:	d9c02217 	ldw	r7,136(sp)
1000cd90:	d9002117 	ldw	r4,132(sp)
1000cd94:	a80d883a 	mov	r6,r21
1000cd98:	180b883a 	mov	r5,r3
1000cd9c:	000df740 	call	1000df74 <__sbprintf>
1000cda0:	dfc03517 	ldw	ra,212(sp)
1000cda4:	df003417 	ldw	fp,208(sp)
1000cda8:	ddc03317 	ldw	r23,204(sp)
1000cdac:	dd803217 	ldw	r22,200(sp)
1000cdb0:	dd403117 	ldw	r21,196(sp)
1000cdb4:	dd003017 	ldw	r20,192(sp)
1000cdb8:	dcc02f17 	ldw	r19,188(sp)
1000cdbc:	dc802e17 	ldw	r18,184(sp)
1000cdc0:	dc402d17 	ldw	r17,180(sp)
1000cdc4:	dc002c17 	ldw	r16,176(sp)
1000cdc8:	dec03604 	addi	sp,sp,216
1000cdcc:	f800283a 	ret
1000cdd0:	00096140 	call	10009614 <__sinit>
1000cdd4:	003f2f06 	br	1000ca94 <__alt_data_end+0xf800ca94>
1000cdd8:	d8c02517 	ldw	r3,148(sp)
1000cddc:	d8802215 	stw	r2,136(sp)
1000cde0:	00c7c83a 	sub	r3,zero,r3
1000cde4:	d8c02515 	stw	r3,148(sp)
1000cde8:	8c400114 	ori	r17,r17,4
1000cdec:	b0c00007 	ldb	r3,0(r22)
1000cdf0:	003f7306 	br	1000cbc0 <__alt_data_end+0xf800cbc0>
1000cdf4:	00800c04 	movi	r2,48
1000cdf8:	d9402217 	ldw	r5,136(sp)
1000cdfc:	d8801d05 	stb	r2,116(sp)
1000ce00:	00801e04 	movi	r2,120
1000ce04:	d8801d45 	stb	r2,117(sp)
1000ce08:	d8001d85 	stb	zero,118(sp)
1000ce0c:	b811883a 	mov	r8,r23
1000ce10:	28c00104 	addi	r3,r5,4
1000ce14:	2cc00017 	ldw	r19,0(r5)
1000ce18:	0029883a 	mov	r20,zero
1000ce1c:	88800094 	ori	r2,r17,2
1000ce20:	80032516 	blt	r16,zero,1000dab8 <___vfiprintf_internal_r+0x106c>
1000ce24:	00bfdfc4 	movi	r2,-129
1000ce28:	88a2703a 	and	r17,r17,r2
1000ce2c:	d8c02215 	stw	r3,136(sp)
1000ce30:	8c400094 	ori	r17,r17,2
1000ce34:	98032a1e 	bne	r19,zero,1000dae0 <___vfiprintf_internal_r+0x1094>
1000ce38:	00840074 	movhi	r2,4097
1000ce3c:	10938d04 	addi	r2,r2,20020
1000ce40:	d8802615 	stw	r2,152(sp)
1000ce44:	002b883a 	mov	r21,zero
1000ce48:	8001741e 	bne	r16,zero,1000d41c <___vfiprintf_internal_r+0x9d0>
1000ce4c:	0021883a 	mov	r16,zero
1000ce50:	0029883a 	mov	r20,zero
1000ce54:	ddc01a04 	addi	r23,sp,104
1000ce58:	8027883a 	mov	r19,r16
1000ce5c:	8500010e 	bge	r16,r20,1000ce64 <___vfiprintf_internal_r+0x418>
1000ce60:	a027883a 	mov	r19,r20
1000ce64:	ad403fcc 	andi	r21,r21,255
1000ce68:	ad40201c 	xori	r21,r21,128
1000ce6c:	ad7fe004 	addi	r21,r21,-128
1000ce70:	a8000126 	beq	r21,zero,1000ce78 <___vfiprintf_internal_r+0x42c>
1000ce74:	9cc00044 	addi	r19,r19,1
1000ce78:	89c0008c 	andi	r7,r17,2
1000ce7c:	38000126 	beq	r7,zero,1000ce84 <___vfiprintf_internal_r+0x438>
1000ce80:	9cc00084 	addi	r19,r19,2
1000ce84:	88c0210c 	andi	r3,r17,132
1000ce88:	1801dd1e 	bne	r3,zero,1000d600 <___vfiprintf_internal_r+0xbb4>
1000ce8c:	d9402517 	ldw	r5,148(sp)
1000ce90:	2cebc83a 	sub	r21,r5,r19
1000ce94:	0541da0e 	bge	zero,r21,1000d600 <___vfiprintf_internal_r+0xbb4>
1000ce98:	07000404 	movi	fp,16
1000ce9c:	d8801c17 	ldw	r2,112(sp)
1000cea0:	e543be0e 	bge	fp,r21,1000dd9c <___vfiprintf_internal_r+0x1350>
1000cea4:	01440074 	movhi	r5,4097
1000cea8:	2953f204 	addi	r5,r5,20424
1000ceac:	dc002715 	stw	r16,156(sp)
1000ceb0:	d9801b17 	ldw	r6,108(sp)
1000ceb4:	a821883a 	mov	r16,r21
1000ceb8:	d9402315 	stw	r5,140(sp)
1000cebc:	028001c4 	movi	r10,7
1000cec0:	d9c02915 	stw	r7,164(sp)
1000cec4:	182b883a 	mov	r21,r3
1000cec8:	00000506 	br	1000cee0 <___vfiprintf_internal_r+0x494>
1000cecc:	31000084 	addi	r4,r6,2
1000ced0:	42000204 	addi	r8,r8,8
1000ced4:	180d883a 	mov	r6,r3
1000ced8:	843ffc04 	addi	r16,r16,-16
1000cedc:	e4000f0e 	bge	fp,r16,1000cf1c <___vfiprintf_internal_r+0x4d0>
1000cee0:	01040074 	movhi	r4,4097
1000cee4:	10800404 	addi	r2,r2,16
1000cee8:	30c00044 	addi	r3,r6,1
1000ceec:	2113f204 	addi	r4,r4,20424
1000cef0:	41000015 	stw	r4,0(r8)
1000cef4:	47000115 	stw	fp,4(r8)
1000cef8:	d8801c15 	stw	r2,112(sp)
1000cefc:	d8c01b15 	stw	r3,108(sp)
1000cf00:	50fff20e 	bge	r10,r3,1000cecc <__alt_data_end+0xf800cecc>
1000cf04:	1001b21e 	bne	r2,zero,1000d5d0 <___vfiprintf_internal_r+0xb84>
1000cf08:	843ffc04 	addi	r16,r16,-16
1000cf0c:	000d883a 	mov	r6,zero
1000cf10:	01000044 	movi	r4,1
1000cf14:	d811883a 	mov	r8,sp
1000cf18:	e43ff116 	blt	fp,r16,1000cee0 <__alt_data_end+0xf800cee0>
1000cf1c:	a807883a 	mov	r3,r21
1000cf20:	d9c02917 	ldw	r7,164(sp)
1000cf24:	802b883a 	mov	r21,r16
1000cf28:	dc002717 	ldw	r16,156(sp)
1000cf2c:	d9402317 	ldw	r5,140(sp)
1000cf30:	a885883a 	add	r2,r21,r2
1000cf34:	45400115 	stw	r21,4(r8)
1000cf38:	41400015 	stw	r5,0(r8)
1000cf3c:	d8801c15 	stw	r2,112(sp)
1000cf40:	d9001b15 	stw	r4,108(sp)
1000cf44:	014001c4 	movi	r5,7
1000cf48:	29026216 	blt	r5,r4,1000d8d4 <___vfiprintf_internal_r+0xe88>
1000cf4c:	d9801d87 	ldb	r6,118(sp)
1000cf50:	42000204 	addi	r8,r8,8
1000cf54:	21400044 	addi	r5,r4,1
1000cf58:	3001ae1e 	bne	r6,zero,1000d614 <___vfiprintf_internal_r+0xbc8>
1000cf5c:	3801bb26 	beq	r7,zero,1000d64c <___vfiprintf_internal_r+0xc00>
1000cf60:	d9001d04 	addi	r4,sp,116
1000cf64:	10800084 	addi	r2,r2,2
1000cf68:	41000015 	stw	r4,0(r8)
1000cf6c:	01000084 	movi	r4,2
1000cf70:	41000115 	stw	r4,4(r8)
1000cf74:	d8801c15 	stw	r2,112(sp)
1000cf78:	d9401b15 	stw	r5,108(sp)
1000cf7c:	010001c4 	movi	r4,7
1000cf80:	2142680e 	bge	r4,r5,1000d924 <___vfiprintf_internal_r+0xed8>
1000cf84:	1002b11e 	bne	r2,zero,1000da4c <___vfiprintf_internal_r+0x1000>
1000cf88:	01802004 	movi	r6,128
1000cf8c:	01400044 	movi	r5,1
1000cf90:	0009883a 	mov	r4,zero
1000cf94:	d811883a 	mov	r8,sp
1000cf98:	1981ae1e 	bne	r3,r6,1000d654 <___vfiprintf_internal_r+0xc08>
1000cf9c:	d8c02517 	ldw	r3,148(sp)
1000cfa0:	1cf9c83a 	sub	fp,r3,r19
1000cfa4:	0701ab0e 	bge	zero,fp,1000d654 <___vfiprintf_internal_r+0xc08>
1000cfa8:	05400404 	movi	r21,16
1000cfac:	af03a90e 	bge	r21,fp,1000de54 <___vfiprintf_internal_r+0x1408>
1000cfb0:	01440074 	movhi	r5,4097
1000cfb4:	2953ee04 	addi	r5,r5,20408
1000cfb8:	d9402315 	stw	r5,140(sp)
1000cfbc:	01c001c4 	movi	r7,7
1000cfc0:	00000506 	br	1000cfd8 <___vfiprintf_internal_r+0x58c>
1000cfc4:	21800084 	addi	r6,r4,2
1000cfc8:	42000204 	addi	r8,r8,8
1000cfcc:	1809883a 	mov	r4,r3
1000cfd0:	e73ffc04 	addi	fp,fp,-16
1000cfd4:	af000d0e 	bge	r21,fp,1000d00c <___vfiprintf_internal_r+0x5c0>
1000cfd8:	10800404 	addi	r2,r2,16
1000cfdc:	20c00044 	addi	r3,r4,1
1000cfe0:	44800015 	stw	r18,0(r8)
1000cfe4:	45400115 	stw	r21,4(r8)
1000cfe8:	d8801c15 	stw	r2,112(sp)
1000cfec:	d8c01b15 	stw	r3,108(sp)
1000cff0:	38fff40e 	bge	r7,r3,1000cfc4 <__alt_data_end+0xf800cfc4>
1000cff4:	10022b1e 	bne	r2,zero,1000d8a4 <___vfiprintf_internal_r+0xe58>
1000cff8:	e73ffc04 	addi	fp,fp,-16
1000cffc:	01800044 	movi	r6,1
1000d000:	0009883a 	mov	r4,zero
1000d004:	d811883a 	mov	r8,sp
1000d008:	af3ff316 	blt	r21,fp,1000cfd8 <__alt_data_end+0xf800cfd8>
1000d00c:	d8c02317 	ldw	r3,140(sp)
1000d010:	1705883a 	add	r2,r2,fp
1000d014:	47000115 	stw	fp,4(r8)
1000d018:	40c00015 	stw	r3,0(r8)
1000d01c:	d8801c15 	stw	r2,112(sp)
1000d020:	d9801b15 	stw	r6,108(sp)
1000d024:	00c001c4 	movi	r3,7
1000d028:	19829416 	blt	r3,r6,1000da7c <___vfiprintf_internal_r+0x1030>
1000d02c:	8521c83a 	sub	r16,r16,r20
1000d030:	42000204 	addi	r8,r8,8
1000d034:	31400044 	addi	r5,r6,1
1000d038:	3009883a 	mov	r4,r6
1000d03c:	04018716 	blt	zero,r16,1000d65c <___vfiprintf_internal_r+0xc10>
1000d040:	a085883a 	add	r2,r20,r2
1000d044:	45c00015 	stw	r23,0(r8)
1000d048:	45000115 	stw	r20,4(r8)
1000d04c:	d8801c15 	stw	r2,112(sp)
1000d050:	d9401b15 	stw	r5,108(sp)
1000d054:	00c001c4 	movi	r3,7
1000d058:	1941c20e 	bge	r3,r5,1000d764 <___vfiprintf_internal_r+0xd18>
1000d05c:	1002531e 	bne	r2,zero,1000d9ac <___vfiprintf_internal_r+0xf60>
1000d060:	d8001b15 	stw	zero,108(sp)
1000d064:	8c40010c 	andi	r17,r17,4
1000d068:	88023226 	beq	r17,zero,1000d934 <___vfiprintf_internal_r+0xee8>
1000d06c:	d9002517 	ldw	r4,148(sp)
1000d070:	24e3c83a 	sub	r17,r4,r19
1000d074:	04432916 	blt	zero,r17,1000dd1c <___vfiprintf_internal_r+0x12d0>
1000d078:	d8802517 	ldw	r2,148(sp)
1000d07c:	14c0010e 	bge	r2,r19,1000d084 <___vfiprintf_internal_r+0x638>
1000d080:	9805883a 	mov	r2,r19
1000d084:	d8c02417 	ldw	r3,144(sp)
1000d088:	1887883a 	add	r3,r3,r2
1000d08c:	d8c02415 	stw	r3,144(sp)
1000d090:	d8001b15 	stw	zero,108(sp)
1000d094:	d811883a 	mov	r8,sp
1000d098:	003ea006 	br	1000cb1c <__alt_data_end+0xf800cb1c>
1000d09c:	8c400814 	ori	r17,r17,32
1000d0a0:	b0c00007 	ldb	r3,0(r22)
1000d0a4:	003ec606 	br	1000cbc0 <__alt_data_end+0xf800cbc0>
1000d0a8:	b0c00007 	ldb	r3,0(r22)
1000d0ac:	00801b04 	movi	r2,108
1000d0b0:	18832026 	beq	r3,r2,1000dd34 <___vfiprintf_internal_r+0x12e8>
1000d0b4:	8c400414 	ori	r17,r17,16
1000d0b8:	003ec106 	br	1000cbc0 <__alt_data_end+0xf800cbc0>
1000d0bc:	9cc03fcc 	andi	r19,r19,255
1000d0c0:	b811883a 	mov	r8,r23
1000d0c4:	9803981e 	bne	r19,zero,1000df28 <___vfiprintf_internal_r+0x14dc>
1000d0c8:	8880080c 	andi	r2,r17,32
1000d0cc:	1002be26 	beq	r2,zero,1000dbc8 <___vfiprintf_internal_r+0x117c>
1000d0d0:	d9002217 	ldw	r4,136(sp)
1000d0d4:	d9402417 	ldw	r5,144(sp)
1000d0d8:	20800017 	ldw	r2,0(r4)
1000d0dc:	2807d7fa 	srai	r3,r5,31
1000d0e0:	21000104 	addi	r4,r4,4
1000d0e4:	d9002215 	stw	r4,136(sp)
1000d0e8:	11400015 	stw	r5,0(r2)
1000d0ec:	10c00115 	stw	r3,4(r2)
1000d0f0:	003e8a06 	br	1000cb1c <__alt_data_end+0xf800cb1c>
1000d0f4:	9cc03fcc 	andi	r19,r19,255
1000d0f8:	b811883a 	mov	r8,r23
1000d0fc:	9803871e 	bne	r19,zero,1000df1c <___vfiprintf_internal_r+0x14d0>
1000d100:	8880080c 	andi	r2,r17,32
1000d104:	10009a26 	beq	r2,zero,1000d370 <___vfiprintf_internal_r+0x924>
1000d108:	d9002217 	ldw	r4,136(sp)
1000d10c:	d8001d85 	stb	zero,118(sp)
1000d110:	20800204 	addi	r2,r4,8
1000d114:	24c00017 	ldw	r19,0(r4)
1000d118:	25000117 	ldw	r20,4(r4)
1000d11c:	8002a416 	blt	r16,zero,1000dbb0 <___vfiprintf_internal_r+0x1164>
1000d120:	013fdfc4 	movi	r4,-129
1000d124:	9d06b03a 	or	r3,r19,r20
1000d128:	d8802215 	stw	r2,136(sp)
1000d12c:	8922703a 	and	r17,r17,r4
1000d130:	18009b26 	beq	r3,zero,1000d3a0 <___vfiprintf_internal_r+0x954>
1000d134:	002b883a 	mov	r21,zero
1000d138:	ddc01a04 	addi	r23,sp,104
1000d13c:	9806d0fa 	srli	r3,r19,3
1000d140:	a008977a 	slli	r4,r20,29
1000d144:	a028d0fa 	srli	r20,r20,3
1000d148:	9cc001cc 	andi	r19,r19,7
1000d14c:	98800c04 	addi	r2,r19,48
1000d150:	bdffffc4 	addi	r23,r23,-1
1000d154:	20e6b03a 	or	r19,r4,r3
1000d158:	b8800005 	stb	r2,0(r23)
1000d15c:	9d06b03a 	or	r3,r19,r20
1000d160:	183ff61e 	bne	r3,zero,1000d13c <__alt_data_end+0xf800d13c>
1000d164:	88c0004c 	andi	r3,r17,1
1000d168:	18021f1e 	bne	r3,zero,1000d9e8 <___vfiprintf_internal_r+0xf9c>
1000d16c:	d9401e17 	ldw	r5,120(sp)
1000d170:	2de9c83a 	sub	r20,r5,r23
1000d174:	003f3806 	br	1000ce58 <__alt_data_end+0xf800ce58>
1000d178:	9cc03fcc 	andi	r19,r19,255
1000d17c:	b811883a 	mov	r8,r23
1000d180:	98034f1e 	bne	r19,zero,1000dec0 <___vfiprintf_internal_r+0x1474>
1000d184:	00840074 	movhi	r2,4097
1000d188:	10938d04 	addi	r2,r2,20020
1000d18c:	d8802615 	stw	r2,152(sp)
1000d190:	8880080c 	andi	r2,r17,32
1000d194:	1000ac26 	beq	r2,zero,1000d448 <___vfiprintf_internal_r+0x9fc>
1000d198:	d9002217 	ldw	r4,136(sp)
1000d19c:	24c00017 	ldw	r19,0(r4)
1000d1a0:	25000117 	ldw	r20,4(r4)
1000d1a4:	21000204 	addi	r4,r4,8
1000d1a8:	d9002215 	stw	r4,136(sp)
1000d1ac:	8880004c 	andi	r2,r17,1
1000d1b0:	1001e726 	beq	r2,zero,1000d950 <___vfiprintf_internal_r+0xf04>
1000d1b4:	9d04b03a 	or	r2,r19,r20
1000d1b8:	10025c1e 	bne	r2,zero,1000db2c <___vfiprintf_internal_r+0x10e0>
1000d1bc:	d8001d85 	stb	zero,118(sp)
1000d1c0:	80024416 	blt	r16,zero,1000dad4 <___vfiprintf_internal_r+0x1088>
1000d1c4:	00bfdfc4 	movi	r2,-129
1000d1c8:	88a2703a 	and	r17,r17,r2
1000d1cc:	003f1d06 	br	1000ce44 <__alt_data_end+0xf800ce44>
1000d1d0:	d8c02217 	ldw	r3,136(sp)
1000d1d4:	04c00044 	movi	r19,1
1000d1d8:	b811883a 	mov	r8,r23
1000d1dc:	18800017 	ldw	r2,0(r3)
1000d1e0:	18c00104 	addi	r3,r3,4
1000d1e4:	d8001d85 	stb	zero,118(sp)
1000d1e8:	d8801005 	stb	r2,64(sp)
1000d1ec:	d8c02215 	stw	r3,136(sp)
1000d1f0:	9829883a 	mov	r20,r19
1000d1f4:	ddc01004 	addi	r23,sp,64
1000d1f8:	0021883a 	mov	r16,zero
1000d1fc:	003f1e06 	br	1000ce78 <__alt_data_end+0xf800ce78>
1000d200:	9cc03fcc 	andi	r19,r19,255
1000d204:	b811883a 	mov	r8,r23
1000d208:	9803331e 	bne	r19,zero,1000ded8 <___vfiprintf_internal_r+0x148c>
1000d20c:	8880080c 	andi	r2,r17,32
1000d210:	10004826 	beq	r2,zero,1000d334 <___vfiprintf_internal_r+0x8e8>
1000d214:	d9002217 	ldw	r4,136(sp)
1000d218:	20800117 	ldw	r2,4(r4)
1000d21c:	24c00017 	ldw	r19,0(r4)
1000d220:	21000204 	addi	r4,r4,8
1000d224:	d9002215 	stw	r4,136(sp)
1000d228:	1029883a 	mov	r20,r2
1000d22c:	10024c16 	blt	r2,zero,1000db60 <___vfiprintf_internal_r+0x1114>
1000d230:	dd401d83 	ldbu	r21,118(sp)
1000d234:	80007116 	blt	r16,zero,1000d3fc <___vfiprintf_internal_r+0x9b0>
1000d238:	00ffdfc4 	movi	r3,-129
1000d23c:	9d04b03a 	or	r2,r19,r20
1000d240:	88e2703a 	and	r17,r17,r3
1000d244:	1000d126 	beq	r2,zero,1000d58c <___vfiprintf_internal_r+0xb40>
1000d248:	a0023526 	beq	r20,zero,1000db20 <___vfiprintf_internal_r+0x10d4>
1000d24c:	ddc01a04 	addi	r23,sp,104
1000d250:	4039883a 	mov	fp,r8
1000d254:	9809883a 	mov	r4,r19
1000d258:	a00b883a 	mov	r5,r20
1000d25c:	01800284 	movi	r6,10
1000d260:	000f883a 	mov	r7,zero
1000d264:	000ef780 	call	1000ef78 <__umoddi3>
1000d268:	10800c04 	addi	r2,r2,48
1000d26c:	bdffffc4 	addi	r23,r23,-1
1000d270:	9809883a 	mov	r4,r19
1000d274:	a00b883a 	mov	r5,r20
1000d278:	b8800005 	stb	r2,0(r23)
1000d27c:	01800284 	movi	r6,10
1000d280:	000f883a 	mov	r7,zero
1000d284:	000e97c0 	call	1000e97c <__udivdi3>
1000d288:	1027883a 	mov	r19,r2
1000d28c:	10c4b03a 	or	r2,r2,r3
1000d290:	1829883a 	mov	r20,r3
1000d294:	103fef1e 	bne	r2,zero,1000d254 <__alt_data_end+0xf800d254>
1000d298:	d9001e17 	ldw	r4,120(sp)
1000d29c:	e011883a 	mov	r8,fp
1000d2a0:	25e9c83a 	sub	r20,r4,r23
1000d2a4:	003eec06 	br	1000ce58 <__alt_data_end+0xf800ce58>
1000d2a8:	d8802307 	ldb	r2,140(sp)
1000d2ac:	1002361e 	bne	r2,zero,1000db88 <___vfiprintf_internal_r+0x113c>
1000d2b0:	00c00804 	movi	r3,32
1000d2b4:	d8c02305 	stb	r3,140(sp)
1000d2b8:	04c00044 	movi	r19,1
1000d2bc:	b0c00007 	ldb	r3,0(r22)
1000d2c0:	003e3f06 	br	1000cbc0 <__alt_data_end+0xf800cbc0>
1000d2c4:	8c400054 	ori	r17,r17,1
1000d2c8:	b0c00007 	ldb	r3,0(r22)
1000d2cc:	003e3c06 	br	1000cbc0 <__alt_data_end+0xf800cbc0>
1000d2d0:	8c402014 	ori	r17,r17,128
1000d2d4:	b0c00007 	ldb	r3,0(r22)
1000d2d8:	003e3906 	br	1000cbc0 <__alt_data_end+0xf800cbc0>
1000d2dc:	dc002715 	stw	r16,156(sp)
1000d2e0:	d8002515 	stw	zero,148(sp)
1000d2e4:	1f3ff404 	addi	fp,r3,-48
1000d2e8:	0009883a 	mov	r4,zero
1000d2ec:	b021883a 	mov	r16,r22
1000d2f0:	01400284 	movi	r5,10
1000d2f4:	00050540 	call	10005054 <__mulsi3>
1000d2f8:	80c00007 	ldb	r3,0(r16)
1000d2fc:	e089883a 	add	r4,fp,r2
1000d300:	b5800044 	addi	r22,r22,1
1000d304:	1f3ff404 	addi	fp,r3,-48
1000d308:	b021883a 	mov	r16,r22
1000d30c:	af3ff82e 	bgeu	r21,fp,1000d2f0 <__alt_data_end+0xf800d2f0>
1000d310:	d9002515 	stw	r4,148(sp)
1000d314:	dc002717 	ldw	r16,156(sp)
1000d318:	003e2a06 	br	1000cbc4 <__alt_data_end+0xf800cbc4>
1000d31c:	9cc03fcc 	andi	r19,r19,255
1000d320:	b811883a 	mov	r8,r23
1000d324:	9802e91e 	bne	r19,zero,1000decc <___vfiprintf_internal_r+0x1480>
1000d328:	8c400414 	ori	r17,r17,16
1000d32c:	8880080c 	andi	r2,r17,32
1000d330:	103fb81e 	bne	r2,zero,1000d214 <__alt_data_end+0xf800d214>
1000d334:	8880040c 	andi	r2,r17,16
1000d338:	10022e26 	beq	r2,zero,1000dbf4 <___vfiprintf_internal_r+0x11a8>
1000d33c:	d9402217 	ldw	r5,136(sp)
1000d340:	2cc00017 	ldw	r19,0(r5)
1000d344:	29400104 	addi	r5,r5,4
1000d348:	d9402215 	stw	r5,136(sp)
1000d34c:	9829d7fa 	srai	r20,r19,31
1000d350:	a005883a 	mov	r2,r20
1000d354:	003fb506 	br	1000d22c <__alt_data_end+0xf800d22c>
1000d358:	9cc03fcc 	andi	r19,r19,255
1000d35c:	b811883a 	mov	r8,r23
1000d360:	9802fa1e 	bne	r19,zero,1000df4c <___vfiprintf_internal_r+0x1500>
1000d364:	8c400414 	ori	r17,r17,16
1000d368:	8880080c 	andi	r2,r17,32
1000d36c:	103f661e 	bne	r2,zero,1000d108 <__alt_data_end+0xf800d108>
1000d370:	8880040c 	andi	r2,r17,16
1000d374:	10020626 	beq	r2,zero,1000db90 <___vfiprintf_internal_r+0x1144>
1000d378:	d9402217 	ldw	r5,136(sp)
1000d37c:	d8001d85 	stb	zero,118(sp)
1000d380:	0029883a 	mov	r20,zero
1000d384:	28800104 	addi	r2,r5,4
1000d388:	2cc00017 	ldw	r19,0(r5)
1000d38c:	80020816 	blt	r16,zero,1000dbb0 <___vfiprintf_internal_r+0x1164>
1000d390:	00ffdfc4 	movi	r3,-129
1000d394:	d8802215 	stw	r2,136(sp)
1000d398:	88e2703a 	and	r17,r17,r3
1000d39c:	983f651e 	bne	r19,zero,1000d134 <__alt_data_end+0xf800d134>
1000d3a0:	002b883a 	mov	r21,zero
1000d3a4:	8002cf26 	beq	r16,zero,1000dee4 <___vfiprintf_internal_r+0x1498>
1000d3a8:	0027883a 	mov	r19,zero
1000d3ac:	0029883a 	mov	r20,zero
1000d3b0:	003f6106 	br	1000d138 <__alt_data_end+0xf800d138>
1000d3b4:	9cc03fcc 	andi	r19,r19,255
1000d3b8:	b811883a 	mov	r8,r23
1000d3bc:	9802e01e 	bne	r19,zero,1000df40 <___vfiprintf_internal_r+0x14f4>
1000d3c0:	8c400414 	ori	r17,r17,16
1000d3c4:	8880080c 	andi	r2,r17,32
1000d3c8:	1000641e 	bne	r2,zero,1000d55c <___vfiprintf_internal_r+0xb10>
1000d3cc:	8880040c 	andi	r2,r17,16
1000d3d0:	1001c81e 	bne	r2,zero,1000daf4 <___vfiprintf_internal_r+0x10a8>
1000d3d4:	8880100c 	andi	r2,r17,64
1000d3d8:	d8001d85 	stb	zero,118(sp)
1000d3dc:	1002281e 	bne	r2,zero,1000dc80 <___vfiprintf_internal_r+0x1234>
1000d3e0:	d9002217 	ldw	r4,136(sp)
1000d3e4:	0029883a 	mov	r20,zero
1000d3e8:	20800104 	addi	r2,r4,4
1000d3ec:	24c00017 	ldw	r19,0(r4)
1000d3f0:	8001c60e 	bge	r16,zero,1000db0c <___vfiprintf_internal_r+0x10c0>
1000d3f4:	d8802215 	stw	r2,136(sp)
1000d3f8:	002b883a 	mov	r21,zero
1000d3fc:	9d04b03a 	or	r2,r19,r20
1000d400:	103f911e 	bne	r2,zero,1000d248 <__alt_data_end+0xf800d248>
1000d404:	00800044 	movi	r2,1
1000d408:	10803fcc 	andi	r2,r2,255
1000d40c:	00c00044 	movi	r3,1
1000d410:	10c05f26 	beq	r2,r3,1000d590 <___vfiprintf_internal_r+0xb44>
1000d414:	00c00084 	movi	r3,2
1000d418:	10ffe31e 	bne	r2,r3,1000d3a8 <__alt_data_end+0xf800d3a8>
1000d41c:	0027883a 	mov	r19,zero
1000d420:	0029883a 	mov	r20,zero
1000d424:	00015106 	br	1000d96c <___vfiprintf_internal_r+0xf20>
1000d428:	9cc03fcc 	andi	r19,r19,255
1000d42c:	b811883a 	mov	r8,r23
1000d430:	9802c01e 	bne	r19,zero,1000df34 <___vfiprintf_internal_r+0x14e8>
1000d434:	01440074 	movhi	r5,4097
1000d438:	29538804 	addi	r5,r5,20000
1000d43c:	d9402615 	stw	r5,152(sp)
1000d440:	8880080c 	andi	r2,r17,32
1000d444:	103f541e 	bne	r2,zero,1000d198 <__alt_data_end+0xf800d198>
1000d448:	8880040c 	andi	r2,r17,16
1000d44c:	1001f226 	beq	r2,zero,1000dc18 <___vfiprintf_internal_r+0x11cc>
1000d450:	d9402217 	ldw	r5,136(sp)
1000d454:	0029883a 	mov	r20,zero
1000d458:	2cc00017 	ldw	r19,0(r5)
1000d45c:	29400104 	addi	r5,r5,4
1000d460:	d9402215 	stw	r5,136(sp)
1000d464:	003f5106 	br	1000d1ac <__alt_data_end+0xf800d1ac>
1000d468:	d8c02217 	ldw	r3,136(sp)
1000d46c:	b811883a 	mov	r8,r23
1000d470:	d8001d85 	stb	zero,118(sp)
1000d474:	1dc00017 	ldw	r23,0(r3)
1000d478:	1f000104 	addi	fp,r3,4
1000d47c:	b8025926 	beq	r23,zero,1000dde4 <___vfiprintf_internal_r+0x1398>
1000d480:	80023316 	blt	r16,zero,1000dd50 <___vfiprintf_internal_r+0x1304>
1000d484:	800d883a 	mov	r6,r16
1000d488:	000b883a 	mov	r5,zero
1000d48c:	b809883a 	mov	r4,r23
1000d490:	da002a15 	stw	r8,168(sp)
1000d494:	000ab8c0 	call	1000ab8c <memchr>
1000d498:	da002a17 	ldw	r8,168(sp)
1000d49c:	10026826 	beq	r2,zero,1000de40 <___vfiprintf_internal_r+0x13f4>
1000d4a0:	15e9c83a 	sub	r20,r2,r23
1000d4a4:	dd401d83 	ldbu	r21,118(sp)
1000d4a8:	df002215 	stw	fp,136(sp)
1000d4ac:	0021883a 	mov	r16,zero
1000d4b0:	003e6906 	br	1000ce58 <__alt_data_end+0xf800ce58>
1000d4b4:	9cc03fcc 	andi	r19,r19,255
1000d4b8:	b811883a 	mov	r8,r23
1000d4bc:	983fc126 	beq	r19,zero,1000d3c4 <__alt_data_end+0xf800d3c4>
1000d4c0:	d8c02303 	ldbu	r3,140(sp)
1000d4c4:	d8c01d85 	stb	r3,118(sp)
1000d4c8:	003fbe06 	br	1000d3c4 <__alt_data_end+0xf800d3c4>
1000d4cc:	d9002217 	ldw	r4,136(sp)
1000d4d0:	d9402217 	ldw	r5,136(sp)
1000d4d4:	21000017 	ldw	r4,0(r4)
1000d4d8:	28800104 	addi	r2,r5,4
1000d4dc:	d9002515 	stw	r4,148(sp)
1000d4e0:	203e3d16 	blt	r4,zero,1000cdd8 <__alt_data_end+0xf800cdd8>
1000d4e4:	d8802215 	stw	r2,136(sp)
1000d4e8:	b0c00007 	ldb	r3,0(r22)
1000d4ec:	003db406 	br	1000cbc0 <__alt_data_end+0xf800cbc0>
1000d4f0:	00c00ac4 	movi	r3,43
1000d4f4:	d8c02305 	stb	r3,140(sp)
1000d4f8:	04c00044 	movi	r19,1
1000d4fc:	b0c00007 	ldb	r3,0(r22)
1000d500:	003daf06 	br	1000cbc0 <__alt_data_end+0xf800cbc0>
1000d504:	b0c00007 	ldb	r3,0(r22)
1000d508:	01000a84 	movi	r4,42
1000d50c:	b4000044 	addi	r16,r22,1
1000d510:	19025e26 	beq	r3,r4,1000de8c <___vfiprintf_internal_r+0x1440>
1000d514:	1f3ff404 	addi	fp,r3,-48
1000d518:	0009883a 	mov	r4,zero
1000d51c:	af025236 	bltu	r21,fp,1000de68 <___vfiprintf_internal_r+0x141c>
1000d520:	01400284 	movi	r5,10
1000d524:	00050540 	call	10005054 <__mulsi3>
1000d528:	80c00007 	ldb	r3,0(r16)
1000d52c:	1709883a 	add	r4,r2,fp
1000d530:	85800044 	addi	r22,r16,1
1000d534:	1f3ff404 	addi	fp,r3,-48
1000d538:	b021883a 	mov	r16,r22
1000d53c:	af3ff82e 	bgeu	r21,fp,1000d520 <__alt_data_end+0xf800d520>
1000d540:	2021883a 	mov	r16,r4
1000d544:	203d9f0e 	bge	r4,zero,1000cbc4 <__alt_data_end+0xf800cbc4>
1000d548:	043fffc4 	movi	r16,-1
1000d54c:	003d9d06 	br	1000cbc4 <__alt_data_end+0xf800cbc4>
1000d550:	8c401014 	ori	r17,r17,64
1000d554:	b0c00007 	ldb	r3,0(r22)
1000d558:	003d9906 	br	1000cbc0 <__alt_data_end+0xf800cbc0>
1000d55c:	d9002217 	ldw	r4,136(sp)
1000d560:	d8001d85 	stb	zero,118(sp)
1000d564:	20c00204 	addi	r3,r4,8
1000d568:	24c00017 	ldw	r19,0(r4)
1000d56c:	25000117 	ldw	r20,4(r4)
1000d570:	8001e716 	blt	r16,zero,1000dd10 <___vfiprintf_internal_r+0x12c4>
1000d574:	013fdfc4 	movi	r4,-129
1000d578:	9d04b03a 	or	r2,r19,r20
1000d57c:	d8c02215 	stw	r3,136(sp)
1000d580:	8922703a 	and	r17,r17,r4
1000d584:	002b883a 	mov	r21,zero
1000d588:	103f2f1e 	bne	r2,zero,1000d248 <__alt_data_end+0xf800d248>
1000d58c:	803e2f26 	beq	r16,zero,1000ce4c <__alt_data_end+0xf800ce4c>
1000d590:	0027883a 	mov	r19,zero
1000d594:	9cc00c04 	addi	r19,r19,48
1000d598:	dcc019c5 	stb	r19,103(sp)
1000d59c:	dd002817 	ldw	r20,160(sp)
1000d5a0:	ddc019c4 	addi	r23,sp,103
1000d5a4:	003e2c06 	br	1000ce58 <__alt_data_end+0xf800ce58>
1000d5a8:	9cc03fcc 	andi	r19,r19,255
1000d5ac:	b811883a 	mov	r8,r23
1000d5b0:	9802571e 	bne	r19,zero,1000df10 <___vfiprintf_internal_r+0x14c4>
1000d5b4:	18005726 	beq	r3,zero,1000d714 <___vfiprintf_internal_r+0xcc8>
1000d5b8:	04c00044 	movi	r19,1
1000d5bc:	d8c01005 	stb	r3,64(sp)
1000d5c0:	d8001d85 	stb	zero,118(sp)
1000d5c4:	9829883a 	mov	r20,r19
1000d5c8:	ddc01004 	addi	r23,sp,64
1000d5cc:	003f0a06 	br	1000d1f8 <__alt_data_end+0xf800d1f8>
1000d5d0:	d9402017 	ldw	r5,128(sp)
1000d5d4:	d9002117 	ldw	r4,132(sp)
1000d5d8:	d9801a04 	addi	r6,sp,104
1000d5dc:	da802a15 	stw	r10,168(sp)
1000d5e0:	000c9380 	call	1000c938 <__sprint_r.part.0>
1000d5e4:	da802a17 	ldw	r10,168(sp)
1000d5e8:	1000501e 	bne	r2,zero,1000d72c <___vfiprintf_internal_r+0xce0>
1000d5ec:	d9801b17 	ldw	r6,108(sp)
1000d5f0:	d8801c17 	ldw	r2,112(sp)
1000d5f4:	d811883a 	mov	r8,sp
1000d5f8:	31000044 	addi	r4,r6,1
1000d5fc:	003e3606 	br	1000ced8 <__alt_data_end+0xf800ced8>
1000d600:	d9001b17 	ldw	r4,108(sp)
1000d604:	d8801c17 	ldw	r2,112(sp)
1000d608:	21400044 	addi	r5,r4,1
1000d60c:	d9801d87 	ldb	r6,118(sp)
1000d610:	303e5226 	beq	r6,zero,1000cf5c <__alt_data_end+0xf800cf5c>
1000d614:	01800044 	movi	r6,1
1000d618:	d9001d84 	addi	r4,sp,118
1000d61c:	1185883a 	add	r2,r2,r6
1000d620:	41000015 	stw	r4,0(r8)
1000d624:	41800115 	stw	r6,4(r8)
1000d628:	d8801c15 	stw	r2,112(sp)
1000d62c:	d9401b15 	stw	r5,108(sp)
1000d630:	010001c4 	movi	r4,7
1000d634:	2140b00e 	bge	r4,r5,1000d8f8 <___vfiprintf_internal_r+0xeac>
1000d638:	1000f61e 	bne	r2,zero,1000da14 <___vfiprintf_internal_r+0xfc8>
1000d63c:	3800b31e 	bne	r7,zero,1000d90c <___vfiprintf_internal_r+0xec0>
1000d640:	0009883a 	mov	r4,zero
1000d644:	300b883a 	mov	r5,r6
1000d648:	d811883a 	mov	r8,sp
1000d64c:	01802004 	movi	r6,128
1000d650:	19be5226 	beq	r3,r6,1000cf9c <__alt_data_end+0xf800cf9c>
1000d654:	8521c83a 	sub	r16,r16,r20
1000d658:	043e790e 	bge	zero,r16,1000d040 <__alt_data_end+0xf800d040>
1000d65c:	05400404 	movi	r21,16
1000d660:	ac01b00e 	bge	r21,r16,1000dd24 <___vfiprintf_internal_r+0x12d8>
1000d664:	01440074 	movhi	r5,4097
1000d668:	2953ee04 	addi	r5,r5,20408
1000d66c:	d9402315 	stw	r5,140(sp)
1000d670:	070001c4 	movi	fp,7
1000d674:	00000506 	br	1000d68c <___vfiprintf_internal_r+0xc40>
1000d678:	21400084 	addi	r5,r4,2
1000d67c:	42000204 	addi	r8,r8,8
1000d680:	1809883a 	mov	r4,r3
1000d684:	843ffc04 	addi	r16,r16,-16
1000d688:	ac000d0e 	bge	r21,r16,1000d6c0 <___vfiprintf_internal_r+0xc74>
1000d68c:	10800404 	addi	r2,r2,16
1000d690:	20c00044 	addi	r3,r4,1
1000d694:	44800015 	stw	r18,0(r8)
1000d698:	45400115 	stw	r21,4(r8)
1000d69c:	d8801c15 	stw	r2,112(sp)
1000d6a0:	d8c01b15 	stw	r3,108(sp)
1000d6a4:	e0fff40e 	bge	fp,r3,1000d678 <__alt_data_end+0xf800d678>
1000d6a8:	1000101e 	bne	r2,zero,1000d6ec <___vfiprintf_internal_r+0xca0>
1000d6ac:	843ffc04 	addi	r16,r16,-16
1000d6b0:	01400044 	movi	r5,1
1000d6b4:	0009883a 	mov	r4,zero
1000d6b8:	d811883a 	mov	r8,sp
1000d6bc:	ac3ff316 	blt	r21,r16,1000d68c <__alt_data_end+0xf800d68c>
1000d6c0:	d8c02317 	ldw	r3,140(sp)
1000d6c4:	1405883a 	add	r2,r2,r16
1000d6c8:	44000115 	stw	r16,4(r8)
1000d6cc:	40c00015 	stw	r3,0(r8)
1000d6d0:	d8801c15 	stw	r2,112(sp)
1000d6d4:	d9401b15 	stw	r5,108(sp)
1000d6d8:	00c001c4 	movi	r3,7
1000d6dc:	19401916 	blt	r3,r5,1000d744 <___vfiprintf_internal_r+0xcf8>
1000d6e0:	42000204 	addi	r8,r8,8
1000d6e4:	29400044 	addi	r5,r5,1
1000d6e8:	003e5506 	br	1000d040 <__alt_data_end+0xf800d040>
1000d6ec:	d9402017 	ldw	r5,128(sp)
1000d6f0:	d9002117 	ldw	r4,132(sp)
1000d6f4:	d9801a04 	addi	r6,sp,104
1000d6f8:	000c9380 	call	1000c938 <__sprint_r.part.0>
1000d6fc:	10000b1e 	bne	r2,zero,1000d72c <___vfiprintf_internal_r+0xce0>
1000d700:	d9001b17 	ldw	r4,108(sp)
1000d704:	d8801c17 	ldw	r2,112(sp)
1000d708:	d811883a 	mov	r8,sp
1000d70c:	21400044 	addi	r5,r4,1
1000d710:	003fdc06 	br	1000d684 <__alt_data_end+0xf800d684>
1000d714:	d8801c17 	ldw	r2,112(sp)
1000d718:	10000426 	beq	r2,zero,1000d72c <___vfiprintf_internal_r+0xce0>
1000d71c:	d9402017 	ldw	r5,128(sp)
1000d720:	d9002117 	ldw	r4,132(sp)
1000d724:	d9801a04 	addi	r6,sp,104
1000d728:	000c9380 	call	1000c938 <__sprint_r.part.0>
1000d72c:	d9402017 	ldw	r5,128(sp)
1000d730:	2880030b 	ldhu	r2,12(r5)
1000d734:	1080100c 	andi	r2,r2,64
1000d738:	10014d1e 	bne	r2,zero,1000dc70 <___vfiprintf_internal_r+0x1224>
1000d73c:	d8802417 	ldw	r2,144(sp)
1000d740:	003d9706 	br	1000cda0 <__alt_data_end+0xf800cda0>
1000d744:	1000d21e 	bne	r2,zero,1000da90 <___vfiprintf_internal_r+0x1044>
1000d748:	00c00044 	movi	r3,1
1000d74c:	a005883a 	mov	r2,r20
1000d750:	ddc00015 	stw	r23,0(sp)
1000d754:	dd000115 	stw	r20,4(sp)
1000d758:	dd001c15 	stw	r20,112(sp)
1000d75c:	d8c01b15 	stw	r3,108(sp)
1000d760:	d811883a 	mov	r8,sp
1000d764:	42000204 	addi	r8,r8,8
1000d768:	8c40010c 	andi	r17,r17,4
1000d76c:	88004026 	beq	r17,zero,1000d870 <___vfiprintf_internal_r+0xe24>
1000d770:	d9002517 	ldw	r4,148(sp)
1000d774:	24e3c83a 	sub	r17,r4,r19
1000d778:	04403d0e 	bge	zero,r17,1000d870 <___vfiprintf_internal_r+0xe24>
1000d77c:	04000404 	movi	r16,16
1000d780:	8441a90e 	bge	r16,r17,1000de28 <___vfiprintf_internal_r+0x13dc>
1000d784:	00c40074 	movhi	r3,4097
1000d788:	18d3f204 	addi	r3,r3,20424
1000d78c:	d9001b17 	ldw	r4,108(sp)
1000d790:	d8c02315 	stw	r3,140(sp)
1000d794:	050001c4 	movi	r20,7
1000d798:	dd402117 	ldw	r21,132(sp)
1000d79c:	ddc02017 	ldw	r23,128(sp)
1000d7a0:	00000506 	br	1000d7b8 <___vfiprintf_internal_r+0xd6c>
1000d7a4:	21400084 	addi	r5,r4,2
1000d7a8:	42000204 	addi	r8,r8,8
1000d7ac:	1809883a 	mov	r4,r3
1000d7b0:	8c7ffc04 	addi	r17,r17,-16
1000d7b4:	84400f0e 	bge	r16,r17,1000d7f4 <___vfiprintf_internal_r+0xda8>
1000d7b8:	01440074 	movhi	r5,4097
1000d7bc:	10800404 	addi	r2,r2,16
1000d7c0:	20c00044 	addi	r3,r4,1
1000d7c4:	2953f204 	addi	r5,r5,20424
1000d7c8:	41400015 	stw	r5,0(r8)
1000d7cc:	44000115 	stw	r16,4(r8)
1000d7d0:	d8801c15 	stw	r2,112(sp)
1000d7d4:	d8c01b15 	stw	r3,108(sp)
1000d7d8:	a0fff20e 	bge	r20,r3,1000d7a4 <__alt_data_end+0xf800d7a4>
1000d7dc:	1000141e 	bne	r2,zero,1000d830 <___vfiprintf_internal_r+0xde4>
1000d7e0:	8c7ffc04 	addi	r17,r17,-16
1000d7e4:	01400044 	movi	r5,1
1000d7e8:	0009883a 	mov	r4,zero
1000d7ec:	d811883a 	mov	r8,sp
1000d7f0:	847ff116 	blt	r16,r17,1000d7b8 <__alt_data_end+0xf800d7b8>
1000d7f4:	d8c02317 	ldw	r3,140(sp)
1000d7f8:	1445883a 	add	r2,r2,r17
1000d7fc:	44400115 	stw	r17,4(r8)
1000d800:	40c00015 	stw	r3,0(r8)
1000d804:	d8801c15 	stw	r2,112(sp)
1000d808:	d9401b15 	stw	r5,108(sp)
1000d80c:	00c001c4 	movi	r3,7
1000d810:	1940170e 	bge	r3,r5,1000d870 <___vfiprintf_internal_r+0xe24>
1000d814:	1000101e 	bne	r2,zero,1000d858 <___vfiprintf_internal_r+0xe0c>
1000d818:	d8802517 	ldw	r2,148(sp)
1000d81c:	14c11616 	blt	r2,r19,1000dc78 <___vfiprintf_internal_r+0x122c>
1000d820:	d9002417 	ldw	r4,144(sp)
1000d824:	2089883a 	add	r4,r4,r2
1000d828:	d9002415 	stw	r4,144(sp)
1000d82c:	003e1806 	br	1000d090 <__alt_data_end+0xf800d090>
1000d830:	d9801a04 	addi	r6,sp,104
1000d834:	b80b883a 	mov	r5,r23
1000d838:	a809883a 	mov	r4,r21
1000d83c:	000c9380 	call	1000c938 <__sprint_r.part.0>
1000d840:	103fba1e 	bne	r2,zero,1000d72c <__alt_data_end+0xf800d72c>
1000d844:	d9001b17 	ldw	r4,108(sp)
1000d848:	d8801c17 	ldw	r2,112(sp)
1000d84c:	d811883a 	mov	r8,sp
1000d850:	21400044 	addi	r5,r4,1
1000d854:	003fd606 	br	1000d7b0 <__alt_data_end+0xf800d7b0>
1000d858:	d9402017 	ldw	r5,128(sp)
1000d85c:	d9002117 	ldw	r4,132(sp)
1000d860:	d9801a04 	addi	r6,sp,104
1000d864:	000c9380 	call	1000c938 <__sprint_r.part.0>
1000d868:	103fb01e 	bne	r2,zero,1000d72c <__alt_data_end+0xf800d72c>
1000d86c:	d8801c17 	ldw	r2,112(sp)
1000d870:	d8c02517 	ldw	r3,148(sp)
1000d874:	1cc0010e 	bge	r3,r19,1000d87c <___vfiprintf_internal_r+0xe30>
1000d878:	9807883a 	mov	r3,r19
1000d87c:	d9002417 	ldw	r4,144(sp)
1000d880:	20c9883a 	add	r4,r4,r3
1000d884:	d9002415 	stw	r4,144(sp)
1000d888:	103e0126 	beq	r2,zero,1000d090 <__alt_data_end+0xf800d090>
1000d88c:	d9402017 	ldw	r5,128(sp)
1000d890:	d9002117 	ldw	r4,132(sp)
1000d894:	d9801a04 	addi	r6,sp,104
1000d898:	000c9380 	call	1000c938 <__sprint_r.part.0>
1000d89c:	103dfc26 	beq	r2,zero,1000d090 <__alt_data_end+0xf800d090>
1000d8a0:	003fa206 	br	1000d72c <__alt_data_end+0xf800d72c>
1000d8a4:	d9402017 	ldw	r5,128(sp)
1000d8a8:	d9002117 	ldw	r4,132(sp)
1000d8ac:	d9801a04 	addi	r6,sp,104
1000d8b0:	d9c02b15 	stw	r7,172(sp)
1000d8b4:	000c9380 	call	1000c938 <__sprint_r.part.0>
1000d8b8:	d9c02b17 	ldw	r7,172(sp)
1000d8bc:	103f9b1e 	bne	r2,zero,1000d72c <__alt_data_end+0xf800d72c>
1000d8c0:	d9001b17 	ldw	r4,108(sp)
1000d8c4:	d8801c17 	ldw	r2,112(sp)
1000d8c8:	d811883a 	mov	r8,sp
1000d8cc:	21800044 	addi	r6,r4,1
1000d8d0:	003dbf06 	br	1000cfd0 <__alt_data_end+0xf800cfd0>
1000d8d4:	1000d81e 	bne	r2,zero,1000dc38 <___vfiprintf_internal_r+0x11ec>
1000d8d8:	d9001d87 	ldb	r4,118(sp)
1000d8dc:	20000a26 	beq	r4,zero,1000d908 <___vfiprintf_internal_r+0xebc>
1000d8e0:	00800044 	movi	r2,1
1000d8e4:	d9001d84 	addi	r4,sp,118
1000d8e8:	100b883a 	mov	r5,r2
1000d8ec:	d9000015 	stw	r4,0(sp)
1000d8f0:	d8800115 	stw	r2,4(sp)
1000d8f4:	d811883a 	mov	r8,sp
1000d8f8:	2809883a 	mov	r4,r5
1000d8fc:	42000204 	addi	r8,r8,8
1000d900:	29400044 	addi	r5,r5,1
1000d904:	003d9506 	br	1000cf5c <__alt_data_end+0xf800cf5c>
1000d908:	3800fd26 	beq	r7,zero,1000dd00 <___vfiprintf_internal_r+0x12b4>
1000d90c:	00800084 	movi	r2,2
1000d910:	d9001d04 	addi	r4,sp,116
1000d914:	d9000015 	stw	r4,0(sp)
1000d918:	d8800115 	stw	r2,4(sp)
1000d91c:	01400044 	movi	r5,1
1000d920:	d811883a 	mov	r8,sp
1000d924:	2809883a 	mov	r4,r5
1000d928:	42000204 	addi	r8,r8,8
1000d92c:	29400044 	addi	r5,r5,1
1000d930:	003f4606 	br	1000d64c <__alt_data_end+0xf800d64c>
1000d934:	d8802517 	ldw	r2,148(sp)
1000d938:	14c0010e 	bge	r2,r19,1000d940 <___vfiprintf_internal_r+0xef4>
1000d93c:	9805883a 	mov	r2,r19
1000d940:	d9402417 	ldw	r5,144(sp)
1000d944:	288b883a 	add	r5,r5,r2
1000d948:	d9402415 	stw	r5,144(sp)
1000d94c:	003dd006 	br	1000d090 <__alt_data_end+0xf800d090>
1000d950:	d8001d85 	stb	zero,118(sp)
1000d954:	80005d16 	blt	r16,zero,1000dacc <___vfiprintf_internal_r+0x1080>
1000d958:	00ffdfc4 	movi	r3,-129
1000d95c:	9d04b03a 	or	r2,r19,r20
1000d960:	88e2703a 	and	r17,r17,r3
1000d964:	103d3726 	beq	r2,zero,1000ce44 <__alt_data_end+0xf800ce44>
1000d968:	002b883a 	mov	r21,zero
1000d96c:	d9002617 	ldw	r4,152(sp)
1000d970:	ddc01a04 	addi	r23,sp,104
1000d974:	988003cc 	andi	r2,r19,15
1000d978:	a006973a 	slli	r3,r20,28
1000d97c:	2085883a 	add	r2,r4,r2
1000d980:	9826d13a 	srli	r19,r19,4
1000d984:	10800003 	ldbu	r2,0(r2)
1000d988:	a028d13a 	srli	r20,r20,4
1000d98c:	bdffffc4 	addi	r23,r23,-1
1000d990:	1ce6b03a 	or	r19,r3,r19
1000d994:	b8800005 	stb	r2,0(r23)
1000d998:	9d04b03a 	or	r2,r19,r20
1000d99c:	103ff51e 	bne	r2,zero,1000d974 <__alt_data_end+0xf800d974>
1000d9a0:	d8801e17 	ldw	r2,120(sp)
1000d9a4:	15e9c83a 	sub	r20,r2,r23
1000d9a8:	003d2b06 	br	1000ce58 <__alt_data_end+0xf800ce58>
1000d9ac:	d9402017 	ldw	r5,128(sp)
1000d9b0:	d9002117 	ldw	r4,132(sp)
1000d9b4:	d9801a04 	addi	r6,sp,104
1000d9b8:	000c9380 	call	1000c938 <__sprint_r.part.0>
1000d9bc:	103f5b1e 	bne	r2,zero,1000d72c <__alt_data_end+0xf800d72c>
1000d9c0:	d8801c17 	ldw	r2,112(sp)
1000d9c4:	d811883a 	mov	r8,sp
1000d9c8:	003f6706 	br	1000d768 <__alt_data_end+0xf800d768>
1000d9cc:	d9402017 	ldw	r5,128(sp)
1000d9d0:	d9002117 	ldw	r4,132(sp)
1000d9d4:	d9801a04 	addi	r6,sp,104
1000d9d8:	000c9380 	call	1000c938 <__sprint_r.part.0>
1000d9dc:	103f531e 	bne	r2,zero,1000d72c <__alt_data_end+0xf800d72c>
1000d9e0:	d811883a 	mov	r8,sp
1000d9e4:	003cd906 	br	1000cd4c <__alt_data_end+0xf800cd4c>
1000d9e8:	10803fcc 	andi	r2,r2,255
1000d9ec:	1080201c 	xori	r2,r2,128
1000d9f0:	10bfe004 	addi	r2,r2,-128
1000d9f4:	00c00c04 	movi	r3,48
1000d9f8:	10ffe926 	beq	r2,r3,1000d9a0 <__alt_data_end+0xf800d9a0>
1000d9fc:	b8ffffc5 	stb	r3,-1(r23)
1000da00:	d8c01e17 	ldw	r3,120(sp)
1000da04:	b8bfffc4 	addi	r2,r23,-1
1000da08:	102f883a 	mov	r23,r2
1000da0c:	18a9c83a 	sub	r20,r3,r2
1000da10:	003d1106 	br	1000ce58 <__alt_data_end+0xf800ce58>
1000da14:	d9402017 	ldw	r5,128(sp)
1000da18:	d9002117 	ldw	r4,132(sp)
1000da1c:	d9801a04 	addi	r6,sp,104
1000da20:	d8c02a15 	stw	r3,168(sp)
1000da24:	d9c02b15 	stw	r7,172(sp)
1000da28:	000c9380 	call	1000c938 <__sprint_r.part.0>
1000da2c:	d8c02a17 	ldw	r3,168(sp)
1000da30:	d9c02b17 	ldw	r7,172(sp)
1000da34:	103f3d1e 	bne	r2,zero,1000d72c <__alt_data_end+0xf800d72c>
1000da38:	d9001b17 	ldw	r4,108(sp)
1000da3c:	d8801c17 	ldw	r2,112(sp)
1000da40:	d811883a 	mov	r8,sp
1000da44:	21400044 	addi	r5,r4,1
1000da48:	003d4406 	br	1000cf5c <__alt_data_end+0xf800cf5c>
1000da4c:	d9402017 	ldw	r5,128(sp)
1000da50:	d9002117 	ldw	r4,132(sp)
1000da54:	d9801a04 	addi	r6,sp,104
1000da58:	d8c02a15 	stw	r3,168(sp)
1000da5c:	000c9380 	call	1000c938 <__sprint_r.part.0>
1000da60:	d8c02a17 	ldw	r3,168(sp)
1000da64:	103f311e 	bne	r2,zero,1000d72c <__alt_data_end+0xf800d72c>
1000da68:	d9001b17 	ldw	r4,108(sp)
1000da6c:	d8801c17 	ldw	r2,112(sp)
1000da70:	d811883a 	mov	r8,sp
1000da74:	21400044 	addi	r5,r4,1
1000da78:	003ef406 	br	1000d64c <__alt_data_end+0xf800d64c>
1000da7c:	1000bd1e 	bne	r2,zero,1000dd74 <___vfiprintf_internal_r+0x1328>
1000da80:	01400044 	movi	r5,1
1000da84:	0009883a 	mov	r4,zero
1000da88:	d811883a 	mov	r8,sp
1000da8c:	003ef106 	br	1000d654 <__alt_data_end+0xf800d654>
1000da90:	d9402017 	ldw	r5,128(sp)
1000da94:	d9002117 	ldw	r4,132(sp)
1000da98:	d9801a04 	addi	r6,sp,104
1000da9c:	000c9380 	call	1000c938 <__sprint_r.part.0>
1000daa0:	103f221e 	bne	r2,zero,1000d72c <__alt_data_end+0xf800d72c>
1000daa4:	d9401b17 	ldw	r5,108(sp)
1000daa8:	d8801c17 	ldw	r2,112(sp)
1000daac:	d811883a 	mov	r8,sp
1000dab0:	29400044 	addi	r5,r5,1
1000dab4:	003d6206 	br	1000d040 <__alt_data_end+0xf800d040>
1000dab8:	01440074 	movhi	r5,4097
1000dabc:	29538d04 	addi	r5,r5,20020
1000dac0:	d9402615 	stw	r5,152(sp)
1000dac4:	d8c02215 	stw	r3,136(sp)
1000dac8:	1023883a 	mov	r17,r2
1000dacc:	9d04b03a 	or	r2,r19,r20
1000dad0:	103fa51e 	bne	r2,zero,1000d968 <__alt_data_end+0xf800d968>
1000dad4:	002b883a 	mov	r21,zero
1000dad8:	00800084 	movi	r2,2
1000dadc:	003e4a06 	br	1000d408 <__alt_data_end+0xf800d408>
1000dae0:	01440074 	movhi	r5,4097
1000dae4:	29538d04 	addi	r5,r5,20020
1000dae8:	002b883a 	mov	r21,zero
1000daec:	d9402615 	stw	r5,152(sp)
1000daf0:	003f9e06 	br	1000d96c <__alt_data_end+0xf800d96c>
1000daf4:	d9402217 	ldw	r5,136(sp)
1000daf8:	d8001d85 	stb	zero,118(sp)
1000dafc:	0029883a 	mov	r20,zero
1000db00:	28800104 	addi	r2,r5,4
1000db04:	2cc00017 	ldw	r19,0(r5)
1000db08:	803e3a16 	blt	r16,zero,1000d3f4 <__alt_data_end+0xf800d3f4>
1000db0c:	00ffdfc4 	movi	r3,-129
1000db10:	d8802215 	stw	r2,136(sp)
1000db14:	88e2703a 	and	r17,r17,r3
1000db18:	002b883a 	mov	r21,zero
1000db1c:	983e9b26 	beq	r19,zero,1000d58c <__alt_data_end+0xf800d58c>
1000db20:	00800244 	movi	r2,9
1000db24:	14fdc936 	bltu	r2,r19,1000d24c <__alt_data_end+0xf800d24c>
1000db28:	003e9a06 	br	1000d594 <__alt_data_end+0xf800d594>
1000db2c:	00800c04 	movi	r2,48
1000db30:	d8c01d45 	stb	r3,117(sp)
1000db34:	d8801d05 	stb	r2,116(sp)
1000db38:	d8001d85 	stb	zero,118(sp)
1000db3c:	88c00094 	ori	r3,r17,2
1000db40:	80009c16 	blt	r16,zero,1000ddb4 <___vfiprintf_internal_r+0x1368>
1000db44:	00bfdfc4 	movi	r2,-129
1000db48:	88a2703a 	and	r17,r17,r2
1000db4c:	8c400094 	ori	r17,r17,2
1000db50:	002b883a 	mov	r21,zero
1000db54:	003f8506 	br	1000d96c <__alt_data_end+0xf800d96c>
1000db58:	b029883a 	mov	r20,r22
1000db5c:	003c0b06 	br	1000cb8c <__alt_data_end+0xf800cb8c>
1000db60:	04e7c83a 	sub	r19,zero,r19
1000db64:	05400b44 	movi	r21,45
1000db68:	9804c03a 	cmpne	r2,r19,zero
1000db6c:	0529c83a 	sub	r20,zero,r20
1000db70:	dd401d85 	stb	r21,118(sp)
1000db74:	a0a9c83a 	sub	r20,r20,r2
1000db78:	80009716 	blt	r16,zero,1000ddd8 <___vfiprintf_internal_r+0x138c>
1000db7c:	00bfdfc4 	movi	r2,-129
1000db80:	88a2703a 	and	r17,r17,r2
1000db84:	003db006 	br	1000d248 <__alt_data_end+0xf800d248>
1000db88:	b0c00007 	ldb	r3,0(r22)
1000db8c:	003c0c06 	br	1000cbc0 <__alt_data_end+0xf800cbc0>
1000db90:	8880100c 	andi	r2,r17,64
1000db94:	d8001d85 	stb	zero,118(sp)
1000db98:	1000461e 	bne	r2,zero,1000dcb4 <___vfiprintf_internal_r+0x1268>
1000db9c:	d9002217 	ldw	r4,136(sp)
1000dba0:	0029883a 	mov	r20,zero
1000dba4:	20800104 	addi	r2,r4,4
1000dba8:	24c00017 	ldw	r19,0(r4)
1000dbac:	803df80e 	bge	r16,zero,1000d390 <__alt_data_end+0xf800d390>
1000dbb0:	9d06b03a 	or	r3,r19,r20
1000dbb4:	d8802215 	stw	r2,136(sp)
1000dbb8:	183d5e1e 	bne	r3,zero,1000d134 <__alt_data_end+0xf800d134>
1000dbbc:	002b883a 	mov	r21,zero
1000dbc0:	0005883a 	mov	r2,zero
1000dbc4:	003e1006 	br	1000d408 <__alt_data_end+0xf800d408>
1000dbc8:	8880040c 	andi	r2,r17,16
1000dbcc:	1000321e 	bne	r2,zero,1000dc98 <___vfiprintf_internal_r+0x124c>
1000dbd0:	8c40100c 	andi	r17,r17,64
1000dbd4:	88008d26 	beq	r17,zero,1000de0c <___vfiprintf_internal_r+0x13c0>
1000dbd8:	d9402217 	ldw	r5,136(sp)
1000dbdc:	d8c02417 	ldw	r3,144(sp)
1000dbe0:	28800017 	ldw	r2,0(r5)
1000dbe4:	29400104 	addi	r5,r5,4
1000dbe8:	d9402215 	stw	r5,136(sp)
1000dbec:	10c0000d 	sth	r3,0(r2)
1000dbf0:	003bca06 	br	1000cb1c <__alt_data_end+0xf800cb1c>
1000dbf4:	8880100c 	andi	r2,r17,64
1000dbf8:	10003a26 	beq	r2,zero,1000dce4 <___vfiprintf_internal_r+0x1298>
1000dbfc:	d8802217 	ldw	r2,136(sp)
1000dc00:	14c0000f 	ldh	r19,0(r2)
1000dc04:	10800104 	addi	r2,r2,4
1000dc08:	d8802215 	stw	r2,136(sp)
1000dc0c:	9829d7fa 	srai	r20,r19,31
1000dc10:	a005883a 	mov	r2,r20
1000dc14:	003d8506 	br	1000d22c <__alt_data_end+0xf800d22c>
1000dc18:	8880100c 	andi	r2,r17,64
1000dc1c:	10002b26 	beq	r2,zero,1000dccc <___vfiprintf_internal_r+0x1280>
1000dc20:	d8802217 	ldw	r2,136(sp)
1000dc24:	0029883a 	mov	r20,zero
1000dc28:	14c0000b 	ldhu	r19,0(r2)
1000dc2c:	10800104 	addi	r2,r2,4
1000dc30:	d8802215 	stw	r2,136(sp)
1000dc34:	003d5d06 	br	1000d1ac <__alt_data_end+0xf800d1ac>
1000dc38:	d9402017 	ldw	r5,128(sp)
1000dc3c:	d9002117 	ldw	r4,132(sp)
1000dc40:	d9801a04 	addi	r6,sp,104
1000dc44:	d8c02a15 	stw	r3,168(sp)
1000dc48:	d9c02b15 	stw	r7,172(sp)
1000dc4c:	000c9380 	call	1000c938 <__sprint_r.part.0>
1000dc50:	d8c02a17 	ldw	r3,168(sp)
1000dc54:	d9c02b17 	ldw	r7,172(sp)
1000dc58:	103eb41e 	bne	r2,zero,1000d72c <__alt_data_end+0xf800d72c>
1000dc5c:	d9001b17 	ldw	r4,108(sp)
1000dc60:	d8801c17 	ldw	r2,112(sp)
1000dc64:	d811883a 	mov	r8,sp
1000dc68:	21400044 	addi	r5,r4,1
1000dc6c:	003e6706 	br	1000d60c <__alt_data_end+0xf800d60c>
1000dc70:	00bfffc4 	movi	r2,-1
1000dc74:	003c4a06 	br	1000cda0 <__alt_data_end+0xf800cda0>
1000dc78:	9805883a 	mov	r2,r19
1000dc7c:	003ee806 	br	1000d820 <__alt_data_end+0xf800d820>
1000dc80:	d8c02217 	ldw	r3,136(sp)
1000dc84:	0029883a 	mov	r20,zero
1000dc88:	18800104 	addi	r2,r3,4
1000dc8c:	1cc0000b 	ldhu	r19,0(r3)
1000dc90:	803f9e0e 	bge	r16,zero,1000db0c <__alt_data_end+0xf800db0c>
1000dc94:	003dd706 	br	1000d3f4 <__alt_data_end+0xf800d3f4>
1000dc98:	d8c02217 	ldw	r3,136(sp)
1000dc9c:	d9002417 	ldw	r4,144(sp)
1000dca0:	18800017 	ldw	r2,0(r3)
1000dca4:	18c00104 	addi	r3,r3,4
1000dca8:	d8c02215 	stw	r3,136(sp)
1000dcac:	11000015 	stw	r4,0(r2)
1000dcb0:	003b9a06 	br	1000cb1c <__alt_data_end+0xf800cb1c>
1000dcb4:	d8c02217 	ldw	r3,136(sp)
1000dcb8:	0029883a 	mov	r20,zero
1000dcbc:	18800104 	addi	r2,r3,4
1000dcc0:	1cc0000b 	ldhu	r19,0(r3)
1000dcc4:	803db20e 	bge	r16,zero,1000d390 <__alt_data_end+0xf800d390>
1000dcc8:	003fb906 	br	1000dbb0 <__alt_data_end+0xf800dbb0>
1000dccc:	d9002217 	ldw	r4,136(sp)
1000dcd0:	0029883a 	mov	r20,zero
1000dcd4:	24c00017 	ldw	r19,0(r4)
1000dcd8:	21000104 	addi	r4,r4,4
1000dcdc:	d9002215 	stw	r4,136(sp)
1000dce0:	003d3206 	br	1000d1ac <__alt_data_end+0xf800d1ac>
1000dce4:	d8c02217 	ldw	r3,136(sp)
1000dce8:	1cc00017 	ldw	r19,0(r3)
1000dcec:	18c00104 	addi	r3,r3,4
1000dcf0:	d8c02215 	stw	r3,136(sp)
1000dcf4:	9829d7fa 	srai	r20,r19,31
1000dcf8:	a005883a 	mov	r2,r20
1000dcfc:	003d4b06 	br	1000d22c <__alt_data_end+0xf800d22c>
1000dd00:	0009883a 	mov	r4,zero
1000dd04:	01400044 	movi	r5,1
1000dd08:	d811883a 	mov	r8,sp
1000dd0c:	003e4f06 	br	1000d64c <__alt_data_end+0xf800d64c>
1000dd10:	d8c02215 	stw	r3,136(sp)
1000dd14:	002b883a 	mov	r21,zero
1000dd18:	003db806 	br	1000d3fc <__alt_data_end+0xf800d3fc>
1000dd1c:	d811883a 	mov	r8,sp
1000dd20:	003e9606 	br	1000d77c <__alt_data_end+0xf800d77c>
1000dd24:	01040074 	movhi	r4,4097
1000dd28:	2113ee04 	addi	r4,r4,20408
1000dd2c:	d9002315 	stw	r4,140(sp)
1000dd30:	003e6306 	br	1000d6c0 <__alt_data_end+0xf800d6c0>
1000dd34:	b0c00043 	ldbu	r3,1(r22)
1000dd38:	8c400814 	ori	r17,r17,32
1000dd3c:	b5800044 	addi	r22,r22,1
1000dd40:	18c03fcc 	andi	r3,r3,255
1000dd44:	18c0201c 	xori	r3,r3,128
1000dd48:	18ffe004 	addi	r3,r3,-128
1000dd4c:	003b9c06 	br	1000cbc0 <__alt_data_end+0xf800cbc0>
1000dd50:	b809883a 	mov	r4,r23
1000dd54:	da002a15 	stw	r8,168(sp)
1000dd58:	00051bc0 	call	100051bc <strlen>
1000dd5c:	1029883a 	mov	r20,r2
1000dd60:	dd401d83 	ldbu	r21,118(sp)
1000dd64:	df002215 	stw	fp,136(sp)
1000dd68:	0021883a 	mov	r16,zero
1000dd6c:	da002a17 	ldw	r8,168(sp)
1000dd70:	003c3906 	br	1000ce58 <__alt_data_end+0xf800ce58>
1000dd74:	d9402017 	ldw	r5,128(sp)
1000dd78:	d9002117 	ldw	r4,132(sp)
1000dd7c:	d9801a04 	addi	r6,sp,104
1000dd80:	000c9380 	call	1000c938 <__sprint_r.part.0>
1000dd84:	103e691e 	bne	r2,zero,1000d72c <__alt_data_end+0xf800d72c>
1000dd88:	d9001b17 	ldw	r4,108(sp)
1000dd8c:	d8801c17 	ldw	r2,112(sp)
1000dd90:	d811883a 	mov	r8,sp
1000dd94:	21400044 	addi	r5,r4,1
1000dd98:	003e2e06 	br	1000d654 <__alt_data_end+0xf800d654>
1000dd9c:	01040074 	movhi	r4,4097
1000dda0:	2113f204 	addi	r4,r4,20424
1000dda4:	d9002315 	stw	r4,140(sp)
1000dda8:	d9001b17 	ldw	r4,108(sp)
1000ddac:	21000044 	addi	r4,r4,1
1000ddb0:	003c5e06 	br	1000cf2c <__alt_data_end+0xf800cf2c>
1000ddb4:	002b883a 	mov	r21,zero
1000ddb8:	00800084 	movi	r2,2
1000ddbc:	10803fcc 	andi	r2,r2,255
1000ddc0:	01000044 	movi	r4,1
1000ddc4:	11002b26 	beq	r2,r4,1000de74 <___vfiprintf_internal_r+0x1428>
1000ddc8:	01000084 	movi	r4,2
1000ddcc:	11002b1e 	bne	r2,r4,1000de7c <___vfiprintf_internal_r+0x1430>
1000ddd0:	1823883a 	mov	r17,r3
1000ddd4:	003ee506 	br	1000d96c <__alt_data_end+0xf800d96c>
1000ddd8:	8807883a 	mov	r3,r17
1000dddc:	00800044 	movi	r2,1
1000dde0:	003ff606 	br	1000ddbc <__alt_data_end+0xf800ddbc>
1000dde4:	00800184 	movi	r2,6
1000dde8:	1400012e 	bgeu	r2,r16,1000ddf0 <___vfiprintf_internal_r+0x13a4>
1000ddec:	1021883a 	mov	r16,r2
1000ddf0:	8029883a 	mov	r20,r16
1000ddf4:	8027883a 	mov	r19,r16
1000ddf8:	80002216 	blt	r16,zero,1000de84 <___vfiprintf_internal_r+0x1438>
1000ddfc:	05c40074 	movhi	r23,4097
1000de00:	df002215 	stw	fp,136(sp)
1000de04:	bdd39204 	addi	r23,r23,20040
1000de08:	003cfb06 	br	1000d1f8 <__alt_data_end+0xf800d1f8>
1000de0c:	d9002217 	ldw	r4,136(sp)
1000de10:	d9402417 	ldw	r5,144(sp)
1000de14:	20800017 	ldw	r2,0(r4)
1000de18:	21000104 	addi	r4,r4,4
1000de1c:	d9002215 	stw	r4,136(sp)
1000de20:	11400015 	stw	r5,0(r2)
1000de24:	003b3d06 	br	1000cb1c <__alt_data_end+0xf800cb1c>
1000de28:	01440074 	movhi	r5,4097
1000de2c:	2953f204 	addi	r5,r5,20424
1000de30:	d9402315 	stw	r5,140(sp)
1000de34:	d9401b17 	ldw	r5,108(sp)
1000de38:	29400044 	addi	r5,r5,1
1000de3c:	003e6d06 	br	1000d7f4 <__alt_data_end+0xf800d7f4>
1000de40:	8029883a 	mov	r20,r16
1000de44:	dd401d83 	ldbu	r21,118(sp)
1000de48:	df002215 	stw	fp,136(sp)
1000de4c:	0021883a 	mov	r16,zero
1000de50:	003c0106 	br	1000ce58 <__alt_data_end+0xf800ce58>
1000de54:	00c40074 	movhi	r3,4097
1000de58:	18d3ee04 	addi	r3,r3,20408
1000de5c:	d8c02315 	stw	r3,140(sp)
1000de60:	280d883a 	mov	r6,r5
1000de64:	003c6906 	br	1000d00c <__alt_data_end+0xf800d00c>
1000de68:	802d883a 	mov	r22,r16
1000de6c:	0021883a 	mov	r16,zero
1000de70:	003b5406 	br	1000cbc4 <__alt_data_end+0xf800cbc4>
1000de74:	1823883a 	mov	r17,r3
1000de78:	003cf306 	br	1000d248 <__alt_data_end+0xf800d248>
1000de7c:	1823883a 	mov	r17,r3
1000de80:	003cad06 	br	1000d138 <__alt_data_end+0xf800d138>
1000de84:	0027883a 	mov	r19,zero
1000de88:	003fdc06 	br	1000ddfc <__alt_data_end+0xf800ddfc>
1000de8c:	d9402217 	ldw	r5,136(sp)
1000de90:	8005883a 	mov	r2,r16
1000de94:	b0c00043 	ldbu	r3,1(r22)
1000de98:	2c000017 	ldw	r16,0(r5)
1000de9c:	29000104 	addi	r4,r5,4
1000dea0:	d9002215 	stw	r4,136(sp)
1000dea4:	102d883a 	mov	r22,r2
1000dea8:	803fa50e 	bge	r16,zero,1000dd40 <__alt_data_end+0xf800dd40>
1000deac:	18c03fcc 	andi	r3,r3,255
1000deb0:	18c0201c 	xori	r3,r3,128
1000deb4:	043fffc4 	movi	r16,-1
1000deb8:	18ffe004 	addi	r3,r3,-128
1000debc:	003b4006 	br	1000cbc0 <__alt_data_end+0xf800cbc0>
1000dec0:	d9402303 	ldbu	r5,140(sp)
1000dec4:	d9401d85 	stb	r5,118(sp)
1000dec8:	003cae06 	br	1000d184 <__alt_data_end+0xf800d184>
1000decc:	d8c02303 	ldbu	r3,140(sp)
1000ded0:	d8c01d85 	stb	r3,118(sp)
1000ded4:	003d1406 	br	1000d328 <__alt_data_end+0xf800d328>
1000ded8:	d8c02303 	ldbu	r3,140(sp)
1000dedc:	d8c01d85 	stb	r3,118(sp)
1000dee0:	003cca06 	br	1000d20c <__alt_data_end+0xf800d20c>
1000dee4:	8880004c 	andi	r2,r17,1
1000dee8:	002b883a 	mov	r21,zero
1000deec:	10000526 	beq	r2,zero,1000df04 <___vfiprintf_internal_r+0x14b8>
1000def0:	00800c04 	movi	r2,48
1000def4:	d88019c5 	stb	r2,103(sp)
1000def8:	dd002817 	ldw	r20,160(sp)
1000defc:	ddc019c4 	addi	r23,sp,103
1000df00:	003bd506 	br	1000ce58 <__alt_data_end+0xf800ce58>
1000df04:	0029883a 	mov	r20,zero
1000df08:	ddc01a04 	addi	r23,sp,104
1000df0c:	003bd206 	br	1000ce58 <__alt_data_end+0xf800ce58>
1000df10:	d9002303 	ldbu	r4,140(sp)
1000df14:	d9001d85 	stb	r4,118(sp)
1000df18:	003da606 	br	1000d5b4 <__alt_data_end+0xf800d5b4>
1000df1c:	d8c02303 	ldbu	r3,140(sp)
1000df20:	d8c01d85 	stb	r3,118(sp)
1000df24:	003c7606 	br	1000d100 <__alt_data_end+0xf800d100>
1000df28:	d8c02303 	ldbu	r3,140(sp)
1000df2c:	d8c01d85 	stb	r3,118(sp)
1000df30:	003c6506 	br	1000d0c8 <__alt_data_end+0xf800d0c8>
1000df34:	d9002303 	ldbu	r4,140(sp)
1000df38:	d9001d85 	stb	r4,118(sp)
1000df3c:	003d3d06 	br	1000d434 <__alt_data_end+0xf800d434>
1000df40:	d8c02303 	ldbu	r3,140(sp)
1000df44:	d8c01d85 	stb	r3,118(sp)
1000df48:	003d1d06 	br	1000d3c0 <__alt_data_end+0xf800d3c0>
1000df4c:	d8c02303 	ldbu	r3,140(sp)
1000df50:	d8c01d85 	stb	r3,118(sp)
1000df54:	003d0306 	br	1000d364 <__alt_data_end+0xf800d364>

1000df58 <__vfiprintf_internal>:
1000df58:	008400b4 	movhi	r2,4098
1000df5c:	108a1204 	addi	r2,r2,10312
1000df60:	300f883a 	mov	r7,r6
1000df64:	280d883a 	mov	r6,r5
1000df68:	200b883a 	mov	r5,r4
1000df6c:	11000017 	ldw	r4,0(r2)
1000df70:	000ca4c1 	jmpi	1000ca4c <___vfiprintf_internal_r>

1000df74 <__sbprintf>:
1000df74:	2880030b 	ldhu	r2,12(r5)
1000df78:	2ac01917 	ldw	r11,100(r5)
1000df7c:	2a80038b 	ldhu	r10,14(r5)
1000df80:	2a400717 	ldw	r9,28(r5)
1000df84:	2a000917 	ldw	r8,36(r5)
1000df88:	defee204 	addi	sp,sp,-1144
1000df8c:	00c10004 	movi	r3,1024
1000df90:	dc011a15 	stw	r16,1128(sp)
1000df94:	10bfff4c 	andi	r2,r2,65533
1000df98:	2821883a 	mov	r16,r5
1000df9c:	d8cb883a 	add	r5,sp,r3
1000dfa0:	dc811c15 	stw	r18,1136(sp)
1000dfa4:	dc411b15 	stw	r17,1132(sp)
1000dfa8:	dfc11d15 	stw	ra,1140(sp)
1000dfac:	2025883a 	mov	r18,r4
1000dfb0:	d881030d 	sth	r2,1036(sp)
1000dfb4:	dac11915 	stw	r11,1124(sp)
1000dfb8:	da81038d 	sth	r10,1038(sp)
1000dfbc:	da410715 	stw	r9,1052(sp)
1000dfc0:	da010915 	stw	r8,1060(sp)
1000dfc4:	dec10015 	stw	sp,1024(sp)
1000dfc8:	dec10415 	stw	sp,1040(sp)
1000dfcc:	d8c10215 	stw	r3,1032(sp)
1000dfd0:	d8c10515 	stw	r3,1044(sp)
1000dfd4:	d8010615 	stw	zero,1048(sp)
1000dfd8:	000ca4c0 	call	1000ca4c <___vfiprintf_internal_r>
1000dfdc:	1023883a 	mov	r17,r2
1000dfe0:	10000416 	blt	r2,zero,1000dff4 <__sbprintf+0x80>
1000dfe4:	d9410004 	addi	r5,sp,1024
1000dfe8:	9009883a 	mov	r4,r18
1000dfec:	00092280 	call	10009228 <_fflush_r>
1000dff0:	10000d1e 	bne	r2,zero,1000e028 <__sbprintf+0xb4>
1000dff4:	d881030b 	ldhu	r2,1036(sp)
1000dff8:	1080100c 	andi	r2,r2,64
1000dffc:	10000326 	beq	r2,zero,1000e00c <__sbprintf+0x98>
1000e000:	8080030b 	ldhu	r2,12(r16)
1000e004:	10801014 	ori	r2,r2,64
1000e008:	8080030d 	sth	r2,12(r16)
1000e00c:	8805883a 	mov	r2,r17
1000e010:	dfc11d17 	ldw	ra,1140(sp)
1000e014:	dc811c17 	ldw	r18,1136(sp)
1000e018:	dc411b17 	ldw	r17,1132(sp)
1000e01c:	dc011a17 	ldw	r16,1128(sp)
1000e020:	dec11e04 	addi	sp,sp,1144
1000e024:	f800283a 	ret
1000e028:	047fffc4 	movi	r17,-1
1000e02c:	003ff106 	br	1000dff4 <__alt_data_end+0xf800dff4>

1000e030 <_write_r>:
1000e030:	defffd04 	addi	sp,sp,-12
1000e034:	2805883a 	mov	r2,r5
1000e038:	dc000015 	stw	r16,0(sp)
1000e03c:	040400f4 	movhi	r16,4099
1000e040:	dc400115 	stw	r17,4(sp)
1000e044:	300b883a 	mov	r5,r6
1000e048:	84000e04 	addi	r16,r16,56
1000e04c:	2023883a 	mov	r17,r4
1000e050:	380d883a 	mov	r6,r7
1000e054:	1009883a 	mov	r4,r2
1000e058:	dfc00215 	stw	ra,8(sp)
1000e05c:	80000015 	stw	zero,0(r16)
1000e060:	00126a40 	call	100126a4 <write>
1000e064:	00ffffc4 	movi	r3,-1
1000e068:	10c00526 	beq	r2,r3,1000e080 <_write_r+0x50>
1000e06c:	dfc00217 	ldw	ra,8(sp)
1000e070:	dc400117 	ldw	r17,4(sp)
1000e074:	dc000017 	ldw	r16,0(sp)
1000e078:	dec00304 	addi	sp,sp,12
1000e07c:	f800283a 	ret
1000e080:	80c00017 	ldw	r3,0(r16)
1000e084:	183ff926 	beq	r3,zero,1000e06c <__alt_data_end+0xf800e06c>
1000e088:	88c00015 	stw	r3,0(r17)
1000e08c:	003ff706 	br	1000e06c <__alt_data_end+0xf800e06c>

1000e090 <_close_r>:
1000e090:	defffd04 	addi	sp,sp,-12
1000e094:	dc000015 	stw	r16,0(sp)
1000e098:	040400f4 	movhi	r16,4099
1000e09c:	dc400115 	stw	r17,4(sp)
1000e0a0:	84000e04 	addi	r16,r16,56
1000e0a4:	2023883a 	mov	r17,r4
1000e0a8:	2809883a 	mov	r4,r5
1000e0ac:	dfc00215 	stw	ra,8(sp)
1000e0b0:	80000015 	stw	zero,0(r16)
1000e0b4:	0011e1c0 	call	10011e1c <close>
1000e0b8:	00ffffc4 	movi	r3,-1
1000e0bc:	10c00526 	beq	r2,r3,1000e0d4 <_close_r+0x44>
1000e0c0:	dfc00217 	ldw	ra,8(sp)
1000e0c4:	dc400117 	ldw	r17,4(sp)
1000e0c8:	dc000017 	ldw	r16,0(sp)
1000e0cc:	dec00304 	addi	sp,sp,12
1000e0d0:	f800283a 	ret
1000e0d4:	80c00017 	ldw	r3,0(r16)
1000e0d8:	183ff926 	beq	r3,zero,1000e0c0 <__alt_data_end+0xf800e0c0>
1000e0dc:	88c00015 	stw	r3,0(r17)
1000e0e0:	003ff706 	br	1000e0c0 <__alt_data_end+0xf800e0c0>

1000e0e4 <_calloc_r>:
1000e0e4:	defffe04 	addi	sp,sp,-8
1000e0e8:	2805883a 	mov	r2,r5
1000e0ec:	dc000015 	stw	r16,0(sp)
1000e0f0:	300b883a 	mov	r5,r6
1000e0f4:	2021883a 	mov	r16,r4
1000e0f8:	1009883a 	mov	r4,r2
1000e0fc:	dfc00115 	stw	ra,4(sp)
1000e100:	00050540 	call	10005054 <__mulsi3>
1000e104:	100b883a 	mov	r5,r2
1000e108:	8009883a 	mov	r4,r16
1000e10c:	000a3800 	call	1000a380 <_malloc_r>
1000e110:	10002926 	beq	r2,zero,1000e1b8 <_calloc_r+0xd4>
1000e114:	11bfff17 	ldw	r6,-4(r2)
1000e118:	1021883a 	mov	r16,r2
1000e11c:	00bfff04 	movi	r2,-4
1000e120:	308c703a 	and	r6,r6,r2
1000e124:	00c00904 	movi	r3,36
1000e128:	308d883a 	add	r6,r6,r2
1000e12c:	19801636 	bltu	r3,r6,1000e188 <_calloc_r+0xa4>
1000e130:	008004c4 	movi	r2,19
1000e134:	11800b2e 	bgeu	r2,r6,1000e164 <_calloc_r+0x80>
1000e138:	80000015 	stw	zero,0(r16)
1000e13c:	80000115 	stw	zero,4(r16)
1000e140:	008006c4 	movi	r2,27
1000e144:	11801a2e 	bgeu	r2,r6,1000e1b0 <_calloc_r+0xcc>
1000e148:	80000215 	stw	zero,8(r16)
1000e14c:	80000315 	stw	zero,12(r16)
1000e150:	30c0151e 	bne	r6,r3,1000e1a8 <_calloc_r+0xc4>
1000e154:	80000415 	stw	zero,16(r16)
1000e158:	80800604 	addi	r2,r16,24
1000e15c:	80000515 	stw	zero,20(r16)
1000e160:	00000106 	br	1000e168 <_calloc_r+0x84>
1000e164:	8005883a 	mov	r2,r16
1000e168:	10000015 	stw	zero,0(r2)
1000e16c:	10000115 	stw	zero,4(r2)
1000e170:	10000215 	stw	zero,8(r2)
1000e174:	8005883a 	mov	r2,r16
1000e178:	dfc00117 	ldw	ra,4(sp)
1000e17c:	dc000017 	ldw	r16,0(sp)
1000e180:	dec00204 	addi	sp,sp,8
1000e184:	f800283a 	ret
1000e188:	000b883a 	mov	r5,zero
1000e18c:	8009883a 	mov	r4,r16
1000e190:	000af140 	call	1000af14 <memset>
1000e194:	8005883a 	mov	r2,r16
1000e198:	dfc00117 	ldw	ra,4(sp)
1000e19c:	dc000017 	ldw	r16,0(sp)
1000e1a0:	dec00204 	addi	sp,sp,8
1000e1a4:	f800283a 	ret
1000e1a8:	80800404 	addi	r2,r16,16
1000e1ac:	003fee06 	br	1000e168 <__alt_data_end+0xf800e168>
1000e1b0:	80800204 	addi	r2,r16,8
1000e1b4:	003fec06 	br	1000e168 <__alt_data_end+0xf800e168>
1000e1b8:	0005883a 	mov	r2,zero
1000e1bc:	003fee06 	br	1000e178 <__alt_data_end+0xf800e178>

1000e1c0 <_fclose_r>:
1000e1c0:	28003926 	beq	r5,zero,1000e2a8 <_fclose_r+0xe8>
1000e1c4:	defffc04 	addi	sp,sp,-16
1000e1c8:	dc400115 	stw	r17,4(sp)
1000e1cc:	dc000015 	stw	r16,0(sp)
1000e1d0:	dfc00315 	stw	ra,12(sp)
1000e1d4:	dc800215 	stw	r18,8(sp)
1000e1d8:	2023883a 	mov	r17,r4
1000e1dc:	2821883a 	mov	r16,r5
1000e1e0:	20000226 	beq	r4,zero,1000e1ec <_fclose_r+0x2c>
1000e1e4:	20800e17 	ldw	r2,56(r4)
1000e1e8:	10002726 	beq	r2,zero,1000e288 <_fclose_r+0xc8>
1000e1ec:	8080030f 	ldh	r2,12(r16)
1000e1f0:	1000071e 	bne	r2,zero,1000e210 <_fclose_r+0x50>
1000e1f4:	0005883a 	mov	r2,zero
1000e1f8:	dfc00317 	ldw	ra,12(sp)
1000e1fc:	dc800217 	ldw	r18,8(sp)
1000e200:	dc400117 	ldw	r17,4(sp)
1000e204:	dc000017 	ldw	r16,0(sp)
1000e208:	dec00404 	addi	sp,sp,16
1000e20c:	f800283a 	ret
1000e210:	800b883a 	mov	r5,r16
1000e214:	8809883a 	mov	r4,r17
1000e218:	000900c0 	call	1000900c <__sflush_r>
1000e21c:	1025883a 	mov	r18,r2
1000e220:	80800b17 	ldw	r2,44(r16)
1000e224:	10000426 	beq	r2,zero,1000e238 <_fclose_r+0x78>
1000e228:	81400717 	ldw	r5,28(r16)
1000e22c:	8809883a 	mov	r4,r17
1000e230:	103ee83a 	callr	r2
1000e234:	10001616 	blt	r2,zero,1000e290 <_fclose_r+0xd0>
1000e238:	8080030b 	ldhu	r2,12(r16)
1000e23c:	1080200c 	andi	r2,r2,128
1000e240:	1000151e 	bne	r2,zero,1000e298 <_fclose_r+0xd8>
1000e244:	81400c17 	ldw	r5,48(r16)
1000e248:	28000526 	beq	r5,zero,1000e260 <_fclose_r+0xa0>
1000e24c:	80801004 	addi	r2,r16,64
1000e250:	28800226 	beq	r5,r2,1000e25c <_fclose_r+0x9c>
1000e254:	8809883a 	mov	r4,r17
1000e258:	00097880 	call	10009788 <_free_r>
1000e25c:	80000c15 	stw	zero,48(r16)
1000e260:	81401117 	ldw	r5,68(r16)
1000e264:	28000326 	beq	r5,zero,1000e274 <_fclose_r+0xb4>
1000e268:	8809883a 	mov	r4,r17
1000e26c:	00097880 	call	10009788 <_free_r>
1000e270:	80001115 	stw	zero,68(r16)
1000e274:	00096240 	call	10009624 <__sfp_lock_acquire>
1000e278:	8000030d 	sth	zero,12(r16)
1000e27c:	00096280 	call	10009628 <__sfp_lock_release>
1000e280:	9005883a 	mov	r2,r18
1000e284:	003fdc06 	br	1000e1f8 <__alt_data_end+0xf800e1f8>
1000e288:	00096140 	call	10009614 <__sinit>
1000e28c:	003fd706 	br	1000e1ec <__alt_data_end+0xf800e1ec>
1000e290:	04bfffc4 	movi	r18,-1
1000e294:	003fe806 	br	1000e238 <__alt_data_end+0xf800e238>
1000e298:	81400417 	ldw	r5,16(r16)
1000e29c:	8809883a 	mov	r4,r17
1000e2a0:	00097880 	call	10009788 <_free_r>
1000e2a4:	003fe706 	br	1000e244 <__alt_data_end+0xf800e244>
1000e2a8:	0005883a 	mov	r2,zero
1000e2ac:	f800283a 	ret

1000e2b0 <fclose>:
1000e2b0:	008400b4 	movhi	r2,4098
1000e2b4:	108a1204 	addi	r2,r2,10312
1000e2b8:	200b883a 	mov	r5,r4
1000e2bc:	11000017 	ldw	r4,0(r2)
1000e2c0:	000e1c01 	jmpi	1000e1c0 <_fclose_r>

1000e2c4 <__fputwc>:
1000e2c4:	defff804 	addi	sp,sp,-32
1000e2c8:	dcc00415 	stw	r19,16(sp)
1000e2cc:	dc800315 	stw	r18,12(sp)
1000e2d0:	dc000115 	stw	r16,4(sp)
1000e2d4:	dfc00715 	stw	ra,28(sp)
1000e2d8:	dd400615 	stw	r21,24(sp)
1000e2dc:	dd000515 	stw	r20,20(sp)
1000e2e0:	dc400215 	stw	r17,8(sp)
1000e2e4:	2027883a 	mov	r19,r4
1000e2e8:	2825883a 	mov	r18,r5
1000e2ec:	3021883a 	mov	r16,r6
1000e2f0:	000a1700 	call	1000a170 <__locale_mb_cur_max>
1000e2f4:	00c00044 	movi	r3,1
1000e2f8:	10c03e26 	beq	r2,r3,1000e3f4 <__fputwc+0x130>
1000e2fc:	81c01704 	addi	r7,r16,92
1000e300:	900d883a 	mov	r6,r18
1000e304:	d80b883a 	mov	r5,sp
1000e308:	9809883a 	mov	r4,r19
1000e30c:	000e7940 	call	1000e794 <_wcrtomb_r>
1000e310:	1029883a 	mov	r20,r2
1000e314:	00bfffc4 	movi	r2,-1
1000e318:	a0802026 	beq	r20,r2,1000e39c <__fputwc+0xd8>
1000e31c:	d9400003 	ldbu	r5,0(sp)
1000e320:	a0001c26 	beq	r20,zero,1000e394 <__fputwc+0xd0>
1000e324:	0023883a 	mov	r17,zero
1000e328:	05400284 	movi	r21,10
1000e32c:	00000906 	br	1000e354 <__fputwc+0x90>
1000e330:	80800017 	ldw	r2,0(r16)
1000e334:	11400005 	stb	r5,0(r2)
1000e338:	80c00017 	ldw	r3,0(r16)
1000e33c:	18c00044 	addi	r3,r3,1
1000e340:	80c00015 	stw	r3,0(r16)
1000e344:	8c400044 	addi	r17,r17,1
1000e348:	dc45883a 	add	r2,sp,r17
1000e34c:	8d00112e 	bgeu	r17,r20,1000e394 <__fputwc+0xd0>
1000e350:	11400003 	ldbu	r5,0(r2)
1000e354:	80c00217 	ldw	r3,8(r16)
1000e358:	18ffffc4 	addi	r3,r3,-1
1000e35c:	80c00215 	stw	r3,8(r16)
1000e360:	183ff30e 	bge	r3,zero,1000e330 <__alt_data_end+0xf800e330>
1000e364:	80800617 	ldw	r2,24(r16)
1000e368:	18801916 	blt	r3,r2,1000e3d0 <__fputwc+0x10c>
1000e36c:	80800017 	ldw	r2,0(r16)
1000e370:	11400005 	stb	r5,0(r2)
1000e374:	80800017 	ldw	r2,0(r16)
1000e378:	10c00003 	ldbu	r3,0(r2)
1000e37c:	10800044 	addi	r2,r2,1
1000e380:	1d402326 	beq	r3,r21,1000e410 <__fputwc+0x14c>
1000e384:	80800015 	stw	r2,0(r16)
1000e388:	8c400044 	addi	r17,r17,1
1000e38c:	dc45883a 	add	r2,sp,r17
1000e390:	8d3fef36 	bltu	r17,r20,1000e350 <__alt_data_end+0xf800e350>
1000e394:	9005883a 	mov	r2,r18
1000e398:	00000406 	br	1000e3ac <__fputwc+0xe8>
1000e39c:	80c0030b 	ldhu	r3,12(r16)
1000e3a0:	a005883a 	mov	r2,r20
1000e3a4:	18c01014 	ori	r3,r3,64
1000e3a8:	80c0030d 	sth	r3,12(r16)
1000e3ac:	dfc00717 	ldw	ra,28(sp)
1000e3b0:	dd400617 	ldw	r21,24(sp)
1000e3b4:	dd000517 	ldw	r20,20(sp)
1000e3b8:	dcc00417 	ldw	r19,16(sp)
1000e3bc:	dc800317 	ldw	r18,12(sp)
1000e3c0:	dc400217 	ldw	r17,8(sp)
1000e3c4:	dc000117 	ldw	r16,4(sp)
1000e3c8:	dec00804 	addi	sp,sp,32
1000e3cc:	f800283a 	ret
1000e3d0:	800d883a 	mov	r6,r16
1000e3d4:	29403fcc 	andi	r5,r5,255
1000e3d8:	9809883a 	mov	r4,r19
1000e3dc:	000e63c0 	call	1000e63c <__swbuf_r>
1000e3e0:	10bfffe0 	cmpeqi	r2,r2,-1
1000e3e4:	10803fcc 	andi	r2,r2,255
1000e3e8:	103fd626 	beq	r2,zero,1000e344 <__alt_data_end+0xf800e344>
1000e3ec:	00bfffc4 	movi	r2,-1
1000e3f0:	003fee06 	br	1000e3ac <__alt_data_end+0xf800e3ac>
1000e3f4:	90ffffc4 	addi	r3,r18,-1
1000e3f8:	01003f84 	movi	r4,254
1000e3fc:	20ffbf36 	bltu	r4,r3,1000e2fc <__alt_data_end+0xf800e2fc>
1000e400:	900b883a 	mov	r5,r18
1000e404:	dc800005 	stb	r18,0(sp)
1000e408:	1029883a 	mov	r20,r2
1000e40c:	003fc506 	br	1000e324 <__alt_data_end+0xf800e324>
1000e410:	800d883a 	mov	r6,r16
1000e414:	a80b883a 	mov	r5,r21
1000e418:	9809883a 	mov	r4,r19
1000e41c:	000e63c0 	call	1000e63c <__swbuf_r>
1000e420:	10bfffe0 	cmpeqi	r2,r2,-1
1000e424:	003fef06 	br	1000e3e4 <__alt_data_end+0xf800e3e4>

1000e428 <_fputwc_r>:
1000e428:	3080030b 	ldhu	r2,12(r6)
1000e42c:	10c8000c 	andi	r3,r2,8192
1000e430:	1800051e 	bne	r3,zero,1000e448 <_fputwc_r+0x20>
1000e434:	30c01917 	ldw	r3,100(r6)
1000e438:	10880014 	ori	r2,r2,8192
1000e43c:	3080030d 	sth	r2,12(r6)
1000e440:	18880014 	ori	r2,r3,8192
1000e444:	30801915 	stw	r2,100(r6)
1000e448:	000e2c41 	jmpi	1000e2c4 <__fputwc>

1000e44c <fputwc>:
1000e44c:	008400b4 	movhi	r2,4098
1000e450:	defffc04 	addi	sp,sp,-16
1000e454:	108a1204 	addi	r2,r2,10312
1000e458:	dc000115 	stw	r16,4(sp)
1000e45c:	14000017 	ldw	r16,0(r2)
1000e460:	dc400215 	stw	r17,8(sp)
1000e464:	dfc00315 	stw	ra,12(sp)
1000e468:	2023883a 	mov	r17,r4
1000e46c:	80000226 	beq	r16,zero,1000e478 <fputwc+0x2c>
1000e470:	80800e17 	ldw	r2,56(r16)
1000e474:	10001026 	beq	r2,zero,1000e4b8 <fputwc+0x6c>
1000e478:	2880030b 	ldhu	r2,12(r5)
1000e47c:	10c8000c 	andi	r3,r2,8192
1000e480:	1800051e 	bne	r3,zero,1000e498 <fputwc+0x4c>
1000e484:	28c01917 	ldw	r3,100(r5)
1000e488:	10880014 	ori	r2,r2,8192
1000e48c:	2880030d 	sth	r2,12(r5)
1000e490:	18880014 	ori	r2,r3,8192
1000e494:	28801915 	stw	r2,100(r5)
1000e498:	280d883a 	mov	r6,r5
1000e49c:	8009883a 	mov	r4,r16
1000e4a0:	880b883a 	mov	r5,r17
1000e4a4:	dfc00317 	ldw	ra,12(sp)
1000e4a8:	dc400217 	ldw	r17,8(sp)
1000e4ac:	dc000117 	ldw	r16,4(sp)
1000e4b0:	dec00404 	addi	sp,sp,16
1000e4b4:	000e2c41 	jmpi	1000e2c4 <__fputwc>
1000e4b8:	8009883a 	mov	r4,r16
1000e4bc:	d9400015 	stw	r5,0(sp)
1000e4c0:	00096140 	call	10009614 <__sinit>
1000e4c4:	d9400017 	ldw	r5,0(sp)
1000e4c8:	003feb06 	br	1000e478 <__alt_data_end+0xf800e478>

1000e4cc <_fstat_r>:
1000e4cc:	defffd04 	addi	sp,sp,-12
1000e4d0:	2805883a 	mov	r2,r5
1000e4d4:	dc000015 	stw	r16,0(sp)
1000e4d8:	040400f4 	movhi	r16,4099
1000e4dc:	dc400115 	stw	r17,4(sp)
1000e4e0:	84000e04 	addi	r16,r16,56
1000e4e4:	2023883a 	mov	r17,r4
1000e4e8:	300b883a 	mov	r5,r6
1000e4ec:	1009883a 	mov	r4,r2
1000e4f0:	dfc00215 	stw	ra,8(sp)
1000e4f4:	80000015 	stw	zero,0(r16)
1000e4f8:	0011f5c0 	call	10011f5c <fstat>
1000e4fc:	00ffffc4 	movi	r3,-1
1000e500:	10c00526 	beq	r2,r3,1000e518 <_fstat_r+0x4c>
1000e504:	dfc00217 	ldw	ra,8(sp)
1000e508:	dc400117 	ldw	r17,4(sp)
1000e50c:	dc000017 	ldw	r16,0(sp)
1000e510:	dec00304 	addi	sp,sp,12
1000e514:	f800283a 	ret
1000e518:	80c00017 	ldw	r3,0(r16)
1000e51c:	183ff926 	beq	r3,zero,1000e504 <__alt_data_end+0xf800e504>
1000e520:	88c00015 	stw	r3,0(r17)
1000e524:	003ff706 	br	1000e504 <__alt_data_end+0xf800e504>

1000e528 <_isatty_r>:
1000e528:	defffd04 	addi	sp,sp,-12
1000e52c:	dc000015 	stw	r16,0(sp)
1000e530:	040400f4 	movhi	r16,4099
1000e534:	dc400115 	stw	r17,4(sp)
1000e538:	84000e04 	addi	r16,r16,56
1000e53c:	2023883a 	mov	r17,r4
1000e540:	2809883a 	mov	r4,r5
1000e544:	dfc00215 	stw	ra,8(sp)
1000e548:	80000015 	stw	zero,0(r16)
1000e54c:	00120500 	call	10012050 <isatty>
1000e550:	00ffffc4 	movi	r3,-1
1000e554:	10c00526 	beq	r2,r3,1000e56c <_isatty_r+0x44>
1000e558:	dfc00217 	ldw	ra,8(sp)
1000e55c:	dc400117 	ldw	r17,4(sp)
1000e560:	dc000017 	ldw	r16,0(sp)
1000e564:	dec00304 	addi	sp,sp,12
1000e568:	f800283a 	ret
1000e56c:	80c00017 	ldw	r3,0(r16)
1000e570:	183ff926 	beq	r3,zero,1000e558 <__alt_data_end+0xf800e558>
1000e574:	88c00015 	stw	r3,0(r17)
1000e578:	003ff706 	br	1000e558 <__alt_data_end+0xf800e558>

1000e57c <_lseek_r>:
1000e57c:	defffd04 	addi	sp,sp,-12
1000e580:	2805883a 	mov	r2,r5
1000e584:	dc000015 	stw	r16,0(sp)
1000e588:	040400f4 	movhi	r16,4099
1000e58c:	dc400115 	stw	r17,4(sp)
1000e590:	300b883a 	mov	r5,r6
1000e594:	84000e04 	addi	r16,r16,56
1000e598:	2023883a 	mov	r17,r4
1000e59c:	380d883a 	mov	r6,r7
1000e5a0:	1009883a 	mov	r4,r2
1000e5a4:	dfc00215 	stw	ra,8(sp)
1000e5a8:	80000015 	stw	zero,0(r16)
1000e5ac:	00122240 	call	10012224 <lseek>
1000e5b0:	00ffffc4 	movi	r3,-1
1000e5b4:	10c00526 	beq	r2,r3,1000e5cc <_lseek_r+0x50>
1000e5b8:	dfc00217 	ldw	ra,8(sp)
1000e5bc:	dc400117 	ldw	r17,4(sp)
1000e5c0:	dc000017 	ldw	r16,0(sp)
1000e5c4:	dec00304 	addi	sp,sp,12
1000e5c8:	f800283a 	ret
1000e5cc:	80c00017 	ldw	r3,0(r16)
1000e5d0:	183ff926 	beq	r3,zero,1000e5b8 <__alt_data_end+0xf800e5b8>
1000e5d4:	88c00015 	stw	r3,0(r17)
1000e5d8:	003ff706 	br	1000e5b8 <__alt_data_end+0xf800e5b8>

1000e5dc <_read_r>:
1000e5dc:	defffd04 	addi	sp,sp,-12
1000e5e0:	2805883a 	mov	r2,r5
1000e5e4:	dc000015 	stw	r16,0(sp)
1000e5e8:	040400f4 	movhi	r16,4099
1000e5ec:	dc400115 	stw	r17,4(sp)
1000e5f0:	300b883a 	mov	r5,r6
1000e5f4:	84000e04 	addi	r16,r16,56
1000e5f8:	2023883a 	mov	r17,r4
1000e5fc:	380d883a 	mov	r6,r7
1000e600:	1009883a 	mov	r4,r2
1000e604:	dfc00215 	stw	ra,8(sp)
1000e608:	80000015 	stw	zero,0(r16)
1000e60c:	00124000 	call	10012400 <read>
1000e610:	00ffffc4 	movi	r3,-1
1000e614:	10c00526 	beq	r2,r3,1000e62c <_read_r+0x50>
1000e618:	dfc00217 	ldw	ra,8(sp)
1000e61c:	dc400117 	ldw	r17,4(sp)
1000e620:	dc000017 	ldw	r16,0(sp)
1000e624:	dec00304 	addi	sp,sp,12
1000e628:	f800283a 	ret
1000e62c:	80c00017 	ldw	r3,0(r16)
1000e630:	183ff926 	beq	r3,zero,1000e618 <__alt_data_end+0xf800e618>
1000e634:	88c00015 	stw	r3,0(r17)
1000e638:	003ff706 	br	1000e618 <__alt_data_end+0xf800e618>

1000e63c <__swbuf_r>:
1000e63c:	defffb04 	addi	sp,sp,-20
1000e640:	dcc00315 	stw	r19,12(sp)
1000e644:	dc800215 	stw	r18,8(sp)
1000e648:	dc000015 	stw	r16,0(sp)
1000e64c:	dfc00415 	stw	ra,16(sp)
1000e650:	dc400115 	stw	r17,4(sp)
1000e654:	2025883a 	mov	r18,r4
1000e658:	2827883a 	mov	r19,r5
1000e65c:	3021883a 	mov	r16,r6
1000e660:	20000226 	beq	r4,zero,1000e66c <__swbuf_r+0x30>
1000e664:	20800e17 	ldw	r2,56(r4)
1000e668:	10004226 	beq	r2,zero,1000e774 <__swbuf_r+0x138>
1000e66c:	80800617 	ldw	r2,24(r16)
1000e670:	8100030b 	ldhu	r4,12(r16)
1000e674:	80800215 	stw	r2,8(r16)
1000e678:	2080020c 	andi	r2,r4,8
1000e67c:	10003626 	beq	r2,zero,1000e758 <__swbuf_r+0x11c>
1000e680:	80c00417 	ldw	r3,16(r16)
1000e684:	18003426 	beq	r3,zero,1000e758 <__swbuf_r+0x11c>
1000e688:	2088000c 	andi	r2,r4,8192
1000e68c:	9c403fcc 	andi	r17,r19,255
1000e690:	10001a26 	beq	r2,zero,1000e6fc <__swbuf_r+0xc0>
1000e694:	80800017 	ldw	r2,0(r16)
1000e698:	81000517 	ldw	r4,20(r16)
1000e69c:	10c7c83a 	sub	r3,r2,r3
1000e6a0:	1900200e 	bge	r3,r4,1000e724 <__swbuf_r+0xe8>
1000e6a4:	18c00044 	addi	r3,r3,1
1000e6a8:	81000217 	ldw	r4,8(r16)
1000e6ac:	11400044 	addi	r5,r2,1
1000e6b0:	81400015 	stw	r5,0(r16)
1000e6b4:	213fffc4 	addi	r4,r4,-1
1000e6b8:	81000215 	stw	r4,8(r16)
1000e6bc:	14c00005 	stb	r19,0(r2)
1000e6c0:	80800517 	ldw	r2,20(r16)
1000e6c4:	10c01e26 	beq	r2,r3,1000e740 <__swbuf_r+0x104>
1000e6c8:	8080030b 	ldhu	r2,12(r16)
1000e6cc:	1080004c 	andi	r2,r2,1
1000e6d0:	10000226 	beq	r2,zero,1000e6dc <__swbuf_r+0xa0>
1000e6d4:	00800284 	movi	r2,10
1000e6d8:	88801926 	beq	r17,r2,1000e740 <__swbuf_r+0x104>
1000e6dc:	8805883a 	mov	r2,r17
1000e6e0:	dfc00417 	ldw	ra,16(sp)
1000e6e4:	dcc00317 	ldw	r19,12(sp)
1000e6e8:	dc800217 	ldw	r18,8(sp)
1000e6ec:	dc400117 	ldw	r17,4(sp)
1000e6f0:	dc000017 	ldw	r16,0(sp)
1000e6f4:	dec00504 	addi	sp,sp,20
1000e6f8:	f800283a 	ret
1000e6fc:	81401917 	ldw	r5,100(r16)
1000e700:	00b7ffc4 	movi	r2,-8193
1000e704:	21080014 	ori	r4,r4,8192
1000e708:	2884703a 	and	r2,r5,r2
1000e70c:	80801915 	stw	r2,100(r16)
1000e710:	80800017 	ldw	r2,0(r16)
1000e714:	8100030d 	sth	r4,12(r16)
1000e718:	81000517 	ldw	r4,20(r16)
1000e71c:	10c7c83a 	sub	r3,r2,r3
1000e720:	193fe016 	blt	r3,r4,1000e6a4 <__alt_data_end+0xf800e6a4>
1000e724:	800b883a 	mov	r5,r16
1000e728:	9009883a 	mov	r4,r18
1000e72c:	00092280 	call	10009228 <_fflush_r>
1000e730:	1000071e 	bne	r2,zero,1000e750 <__swbuf_r+0x114>
1000e734:	80800017 	ldw	r2,0(r16)
1000e738:	00c00044 	movi	r3,1
1000e73c:	003fda06 	br	1000e6a8 <__alt_data_end+0xf800e6a8>
1000e740:	800b883a 	mov	r5,r16
1000e744:	9009883a 	mov	r4,r18
1000e748:	00092280 	call	10009228 <_fflush_r>
1000e74c:	103fe326 	beq	r2,zero,1000e6dc <__alt_data_end+0xf800e6dc>
1000e750:	00bfffc4 	movi	r2,-1
1000e754:	003fe206 	br	1000e6e0 <__alt_data_end+0xf800e6e0>
1000e758:	800b883a 	mov	r5,r16
1000e75c:	9009883a 	mov	r4,r18
1000e760:	00076080 	call	10007608 <__swsetup_r>
1000e764:	103ffa1e 	bne	r2,zero,1000e750 <__alt_data_end+0xf800e750>
1000e768:	8100030b 	ldhu	r4,12(r16)
1000e76c:	80c00417 	ldw	r3,16(r16)
1000e770:	003fc506 	br	1000e688 <__alt_data_end+0xf800e688>
1000e774:	00096140 	call	10009614 <__sinit>
1000e778:	003fbc06 	br	1000e66c <__alt_data_end+0xf800e66c>

1000e77c <__swbuf>:
1000e77c:	008400b4 	movhi	r2,4098
1000e780:	108a1204 	addi	r2,r2,10312
1000e784:	280d883a 	mov	r6,r5
1000e788:	200b883a 	mov	r5,r4
1000e78c:	11000017 	ldw	r4,0(r2)
1000e790:	000e63c1 	jmpi	1000e63c <__swbuf_r>

1000e794 <_wcrtomb_r>:
1000e794:	defff604 	addi	sp,sp,-40
1000e798:	008400b4 	movhi	r2,4098
1000e79c:	dc800815 	stw	r18,32(sp)
1000e7a0:	dc400715 	stw	r17,28(sp)
1000e7a4:	dc000615 	stw	r16,24(sp)
1000e7a8:	108a1604 	addi	r2,r2,10328
1000e7ac:	dfc00915 	stw	ra,36(sp)
1000e7b0:	2021883a 	mov	r16,r4
1000e7b4:	3823883a 	mov	r17,r7
1000e7b8:	14800017 	ldw	r18,0(r2)
1000e7bc:	28001426 	beq	r5,zero,1000e810 <_wcrtomb_r+0x7c>
1000e7c0:	d9400415 	stw	r5,16(sp)
1000e7c4:	d9800515 	stw	r6,20(sp)
1000e7c8:	000a1640 	call	1000a164 <__locale_charset>
1000e7cc:	d9800517 	ldw	r6,20(sp)
1000e7d0:	d9400417 	ldw	r5,16(sp)
1000e7d4:	100f883a 	mov	r7,r2
1000e7d8:	dc400015 	stw	r17,0(sp)
1000e7dc:	8009883a 	mov	r4,r16
1000e7e0:	903ee83a 	callr	r18
1000e7e4:	00ffffc4 	movi	r3,-1
1000e7e8:	10c0031e 	bne	r2,r3,1000e7f8 <_wcrtomb_r+0x64>
1000e7ec:	88000015 	stw	zero,0(r17)
1000e7f0:	00c02284 	movi	r3,138
1000e7f4:	80c00015 	stw	r3,0(r16)
1000e7f8:	dfc00917 	ldw	ra,36(sp)
1000e7fc:	dc800817 	ldw	r18,32(sp)
1000e800:	dc400717 	ldw	r17,28(sp)
1000e804:	dc000617 	ldw	r16,24(sp)
1000e808:	dec00a04 	addi	sp,sp,40
1000e80c:	f800283a 	ret
1000e810:	000a1640 	call	1000a164 <__locale_charset>
1000e814:	100f883a 	mov	r7,r2
1000e818:	dc400015 	stw	r17,0(sp)
1000e81c:	000d883a 	mov	r6,zero
1000e820:	d9400104 	addi	r5,sp,4
1000e824:	8009883a 	mov	r4,r16
1000e828:	903ee83a 	callr	r18
1000e82c:	003fed06 	br	1000e7e4 <__alt_data_end+0xf800e7e4>

1000e830 <wcrtomb>:
1000e830:	defff604 	addi	sp,sp,-40
1000e834:	008400b4 	movhi	r2,4098
1000e838:	dc800615 	stw	r18,24(sp)
1000e83c:	dc400515 	stw	r17,20(sp)
1000e840:	108a1204 	addi	r2,r2,10312
1000e844:	dfc00915 	stw	ra,36(sp)
1000e848:	dd000815 	stw	r20,32(sp)
1000e84c:	dcc00715 	stw	r19,28(sp)
1000e850:	dc000415 	stw	r16,16(sp)
1000e854:	3025883a 	mov	r18,r6
1000e858:	14400017 	ldw	r17,0(r2)
1000e85c:	20001926 	beq	r4,zero,1000e8c4 <wcrtomb+0x94>
1000e860:	008400b4 	movhi	r2,4098
1000e864:	108a1604 	addi	r2,r2,10328
1000e868:	15000017 	ldw	r20,0(r2)
1000e86c:	2021883a 	mov	r16,r4
1000e870:	2827883a 	mov	r19,r5
1000e874:	000a1640 	call	1000a164 <__locale_charset>
1000e878:	100f883a 	mov	r7,r2
1000e87c:	dc800015 	stw	r18,0(sp)
1000e880:	980d883a 	mov	r6,r19
1000e884:	800b883a 	mov	r5,r16
1000e888:	8809883a 	mov	r4,r17
1000e88c:	a03ee83a 	callr	r20
1000e890:	00ffffc4 	movi	r3,-1
1000e894:	10c0031e 	bne	r2,r3,1000e8a4 <wcrtomb+0x74>
1000e898:	90000015 	stw	zero,0(r18)
1000e89c:	00c02284 	movi	r3,138
1000e8a0:	88c00015 	stw	r3,0(r17)
1000e8a4:	dfc00917 	ldw	ra,36(sp)
1000e8a8:	dd000817 	ldw	r20,32(sp)
1000e8ac:	dcc00717 	ldw	r19,28(sp)
1000e8b0:	dc800617 	ldw	r18,24(sp)
1000e8b4:	dc400517 	ldw	r17,20(sp)
1000e8b8:	dc000417 	ldw	r16,16(sp)
1000e8bc:	dec00a04 	addi	sp,sp,40
1000e8c0:	f800283a 	ret
1000e8c4:	008400b4 	movhi	r2,4098
1000e8c8:	108a1604 	addi	r2,r2,10328
1000e8cc:	14000017 	ldw	r16,0(r2)
1000e8d0:	000a1640 	call	1000a164 <__locale_charset>
1000e8d4:	100f883a 	mov	r7,r2
1000e8d8:	dc800015 	stw	r18,0(sp)
1000e8dc:	000d883a 	mov	r6,zero
1000e8e0:	d9400104 	addi	r5,sp,4
1000e8e4:	8809883a 	mov	r4,r17
1000e8e8:	803ee83a 	callr	r16
1000e8ec:	003fe806 	br	1000e890 <__alt_data_end+0xf800e890>

1000e8f0 <__ascii_wctomb>:
1000e8f0:	28000526 	beq	r5,zero,1000e908 <__ascii_wctomb+0x18>
1000e8f4:	00803fc4 	movi	r2,255
1000e8f8:	11800536 	bltu	r2,r6,1000e910 <__ascii_wctomb+0x20>
1000e8fc:	29800005 	stb	r6,0(r5)
1000e900:	00800044 	movi	r2,1
1000e904:	f800283a 	ret
1000e908:	0005883a 	mov	r2,zero
1000e90c:	f800283a 	ret
1000e910:	00802284 	movi	r2,138
1000e914:	20800015 	stw	r2,0(r4)
1000e918:	00bfffc4 	movi	r2,-1
1000e91c:	f800283a 	ret

1000e920 <_wctomb_r>:
1000e920:	008400b4 	movhi	r2,4098
1000e924:	defff904 	addi	sp,sp,-28
1000e928:	108a1604 	addi	r2,r2,10328
1000e92c:	dfc00615 	stw	ra,24(sp)
1000e930:	dc400515 	stw	r17,20(sp)
1000e934:	dc000415 	stw	r16,16(sp)
1000e938:	3823883a 	mov	r17,r7
1000e93c:	14000017 	ldw	r16,0(r2)
1000e940:	d9000115 	stw	r4,4(sp)
1000e944:	d9400215 	stw	r5,8(sp)
1000e948:	d9800315 	stw	r6,12(sp)
1000e94c:	000a1640 	call	1000a164 <__locale_charset>
1000e950:	d9800317 	ldw	r6,12(sp)
1000e954:	d9400217 	ldw	r5,8(sp)
1000e958:	d9000117 	ldw	r4,4(sp)
1000e95c:	100f883a 	mov	r7,r2
1000e960:	dc400015 	stw	r17,0(sp)
1000e964:	803ee83a 	callr	r16
1000e968:	dfc00617 	ldw	ra,24(sp)
1000e96c:	dc400517 	ldw	r17,20(sp)
1000e970:	dc000417 	ldw	r16,16(sp)
1000e974:	dec00704 	addi	sp,sp,28
1000e978:	f800283a 	ret

1000e97c <__udivdi3>:
1000e97c:	defff404 	addi	sp,sp,-48
1000e980:	dcc00515 	stw	r19,20(sp)
1000e984:	dc000215 	stw	r16,8(sp)
1000e988:	dfc00b15 	stw	ra,44(sp)
1000e98c:	df000a15 	stw	fp,40(sp)
1000e990:	ddc00915 	stw	r23,36(sp)
1000e994:	dd800815 	stw	r22,32(sp)
1000e998:	dd400715 	stw	r21,28(sp)
1000e99c:	dd000615 	stw	r20,24(sp)
1000e9a0:	dc800415 	stw	r18,16(sp)
1000e9a4:	dc400315 	stw	r17,12(sp)
1000e9a8:	2027883a 	mov	r19,r4
1000e9ac:	2821883a 	mov	r16,r5
1000e9b0:	3800461e 	bne	r7,zero,1000eacc <__udivdi3+0x150>
1000e9b4:	3023883a 	mov	r17,r6
1000e9b8:	2025883a 	mov	r18,r4
1000e9bc:	2980572e 	bgeu	r5,r6,1000eb1c <__udivdi3+0x1a0>
1000e9c0:	00bfffd4 	movui	r2,65535
1000e9c4:	282d883a 	mov	r22,r5
1000e9c8:	1180b236 	bltu	r2,r6,1000ec94 <__udivdi3+0x318>
1000e9cc:	00803fc4 	movi	r2,255
1000e9d0:	1185803a 	cmpltu	r2,r2,r6
1000e9d4:	100490fa 	slli	r2,r2,3
1000e9d8:	3086d83a 	srl	r3,r6,r2
1000e9dc:	01040074 	movhi	r4,4097
1000e9e0:	2113f604 	addi	r4,r4,20440
1000e9e4:	20c7883a 	add	r3,r4,r3
1000e9e8:	18c00003 	ldbu	r3,0(r3)
1000e9ec:	1885883a 	add	r2,r3,r2
1000e9f0:	00c00804 	movi	r3,32
1000e9f4:	1887c83a 	sub	r3,r3,r2
1000e9f8:	18000526 	beq	r3,zero,1000ea10 <__udivdi3+0x94>
1000e9fc:	80e0983a 	sll	r16,r16,r3
1000ea00:	9884d83a 	srl	r2,r19,r2
1000ea04:	30e2983a 	sll	r17,r6,r3
1000ea08:	98e4983a 	sll	r18,r19,r3
1000ea0c:	142cb03a 	or	r22,r2,r16
1000ea10:	882ad43a 	srli	r21,r17,16
1000ea14:	b009883a 	mov	r4,r22
1000ea18:	8d3fffcc 	andi	r20,r17,65535
1000ea1c:	a80b883a 	mov	r5,r21
1000ea20:	0004ffc0 	call	10004ffc <__umodsi3>
1000ea24:	b009883a 	mov	r4,r22
1000ea28:	a80b883a 	mov	r5,r21
1000ea2c:	1027883a 	mov	r19,r2
1000ea30:	0004f980 	call	10004f98 <__udivsi3>
1000ea34:	100b883a 	mov	r5,r2
1000ea38:	a009883a 	mov	r4,r20
1000ea3c:	102d883a 	mov	r22,r2
1000ea40:	00050540 	call	10005054 <__mulsi3>
1000ea44:	9826943a 	slli	r19,r19,16
1000ea48:	9006d43a 	srli	r3,r18,16
1000ea4c:	1cc6b03a 	or	r3,r3,r19
1000ea50:	1880052e 	bgeu	r3,r2,1000ea68 <__udivdi3+0xec>
1000ea54:	1c47883a 	add	r3,r3,r17
1000ea58:	b13fffc4 	addi	r4,r22,-1
1000ea5c:	1c400136 	bltu	r3,r17,1000ea64 <__udivdi3+0xe8>
1000ea60:	18814236 	bltu	r3,r2,1000ef6c <__udivdi3+0x5f0>
1000ea64:	202d883a 	mov	r22,r4
1000ea68:	18a1c83a 	sub	r16,r3,r2
1000ea6c:	8009883a 	mov	r4,r16
1000ea70:	a80b883a 	mov	r5,r21
1000ea74:	0004ffc0 	call	10004ffc <__umodsi3>
1000ea78:	1027883a 	mov	r19,r2
1000ea7c:	8009883a 	mov	r4,r16
1000ea80:	a80b883a 	mov	r5,r21
1000ea84:	9826943a 	slli	r19,r19,16
1000ea88:	0004f980 	call	10004f98 <__udivsi3>
1000ea8c:	100b883a 	mov	r5,r2
1000ea90:	a009883a 	mov	r4,r20
1000ea94:	94bfffcc 	andi	r18,r18,65535
1000ea98:	1021883a 	mov	r16,r2
1000ea9c:	94e4b03a 	or	r18,r18,r19
1000eaa0:	00050540 	call	10005054 <__mulsi3>
1000eaa4:	9080052e 	bgeu	r18,r2,1000eabc <__udivdi3+0x140>
1000eaa8:	8ca5883a 	add	r18,r17,r18
1000eaac:	80ffffc4 	addi	r3,r16,-1
1000eab0:	94410c36 	bltu	r18,r17,1000eee4 <__udivdi3+0x568>
1000eab4:	90810b2e 	bgeu	r18,r2,1000eee4 <__udivdi3+0x568>
1000eab8:	843fff84 	addi	r16,r16,-2
1000eabc:	b004943a 	slli	r2,r22,16
1000eac0:	0007883a 	mov	r3,zero
1000eac4:	1404b03a 	or	r2,r2,r16
1000eac8:	00005e06 	br	1000ec44 <__udivdi3+0x2c8>
1000eacc:	29c05b36 	bltu	r5,r7,1000ec3c <__udivdi3+0x2c0>
1000ead0:	00bfffd4 	movui	r2,65535
1000ead4:	11c0672e 	bgeu	r2,r7,1000ec74 <__udivdi3+0x2f8>
1000ead8:	00804034 	movhi	r2,256
1000eadc:	10bfffc4 	addi	r2,r2,-1
1000eae0:	11c10a36 	bltu	r2,r7,1000ef0c <__udivdi3+0x590>
1000eae4:	00800404 	movi	r2,16
1000eae8:	3886d83a 	srl	r3,r7,r2
1000eaec:	01040074 	movhi	r4,4097
1000eaf0:	2113f604 	addi	r4,r4,20440
1000eaf4:	20c7883a 	add	r3,r4,r3
1000eaf8:	18c00003 	ldbu	r3,0(r3)
1000eafc:	05c00804 	movi	r23,32
1000eb00:	1885883a 	add	r2,r3,r2
1000eb04:	b8afc83a 	sub	r23,r23,r2
1000eb08:	b800671e 	bne	r23,zero,1000eca8 <__udivdi3+0x32c>
1000eb0c:	3c010536 	bltu	r7,r16,1000ef24 <__udivdi3+0x5a8>
1000eb10:	9985403a 	cmpgeu	r2,r19,r6
1000eb14:	0007883a 	mov	r3,zero
1000eb18:	00004a06 	br	1000ec44 <__udivdi3+0x2c8>
1000eb1c:	3000041e 	bne	r6,zero,1000eb30 <__udivdi3+0x1b4>
1000eb20:	000b883a 	mov	r5,zero
1000eb24:	01000044 	movi	r4,1
1000eb28:	0004f980 	call	10004f98 <__udivsi3>
1000eb2c:	1023883a 	mov	r17,r2
1000eb30:	00bfffd4 	movui	r2,65535
1000eb34:	1440532e 	bgeu	r2,r17,1000ec84 <__udivdi3+0x308>
1000eb38:	00804034 	movhi	r2,256
1000eb3c:	10bfffc4 	addi	r2,r2,-1
1000eb40:	1440f436 	bltu	r2,r17,1000ef14 <__udivdi3+0x598>
1000eb44:	00800404 	movi	r2,16
1000eb48:	8886d83a 	srl	r3,r17,r2
1000eb4c:	01040074 	movhi	r4,4097
1000eb50:	2113f604 	addi	r4,r4,20440
1000eb54:	20c7883a 	add	r3,r4,r3
1000eb58:	18c00003 	ldbu	r3,0(r3)
1000eb5c:	1885883a 	add	r2,r3,r2
1000eb60:	00c00804 	movi	r3,32
1000eb64:	1887c83a 	sub	r3,r3,r2
1000eb68:	1800a51e 	bne	r3,zero,1000ee00 <__udivdi3+0x484>
1000eb6c:	882ad43a 	srli	r21,r17,16
1000eb70:	8461c83a 	sub	r16,r16,r17
1000eb74:	8d3fffcc 	andi	r20,r17,65535
1000eb78:	00c00044 	movi	r3,1
1000eb7c:	a80b883a 	mov	r5,r21
1000eb80:	8009883a 	mov	r4,r16
1000eb84:	d8c00115 	stw	r3,4(sp)
1000eb88:	0004ffc0 	call	10004ffc <__umodsi3>
1000eb8c:	a80b883a 	mov	r5,r21
1000eb90:	8009883a 	mov	r4,r16
1000eb94:	1027883a 	mov	r19,r2
1000eb98:	0004f980 	call	10004f98 <__udivsi3>
1000eb9c:	a00b883a 	mov	r5,r20
1000eba0:	1009883a 	mov	r4,r2
1000eba4:	102d883a 	mov	r22,r2
1000eba8:	00050540 	call	10005054 <__mulsi3>
1000ebac:	9826943a 	slli	r19,r19,16
1000ebb0:	900ed43a 	srli	r7,r18,16
1000ebb4:	d8c00117 	ldw	r3,4(sp)
1000ebb8:	3cceb03a 	or	r7,r7,r19
1000ebbc:	3880052e 	bgeu	r7,r2,1000ebd4 <__udivdi3+0x258>
1000ebc0:	3c4f883a 	add	r7,r7,r17
1000ebc4:	b13fffc4 	addi	r4,r22,-1
1000ebc8:	3c400136 	bltu	r7,r17,1000ebd0 <__udivdi3+0x254>
1000ebcc:	3880e436 	bltu	r7,r2,1000ef60 <__udivdi3+0x5e4>
1000ebd0:	202d883a 	mov	r22,r4
1000ebd4:	38a1c83a 	sub	r16,r7,r2
1000ebd8:	8009883a 	mov	r4,r16
1000ebdc:	a80b883a 	mov	r5,r21
1000ebe0:	d8c00115 	stw	r3,4(sp)
1000ebe4:	0004ffc0 	call	10004ffc <__umodsi3>
1000ebe8:	1027883a 	mov	r19,r2
1000ebec:	8009883a 	mov	r4,r16
1000ebf0:	a80b883a 	mov	r5,r21
1000ebf4:	9826943a 	slli	r19,r19,16
1000ebf8:	0004f980 	call	10004f98 <__udivsi3>
1000ebfc:	a00b883a 	mov	r5,r20
1000ec00:	1009883a 	mov	r4,r2
1000ec04:	94bfffcc 	andi	r18,r18,65535
1000ec08:	1021883a 	mov	r16,r2
1000ec0c:	94e4b03a 	or	r18,r18,r19
1000ec10:	00050540 	call	10005054 <__mulsi3>
1000ec14:	d8c00117 	ldw	r3,4(sp)
1000ec18:	9080052e 	bgeu	r18,r2,1000ec30 <__udivdi3+0x2b4>
1000ec1c:	8ca5883a 	add	r18,r17,r18
1000ec20:	813fffc4 	addi	r4,r16,-1
1000ec24:	9440ad36 	bltu	r18,r17,1000eedc <__udivdi3+0x560>
1000ec28:	9080ac2e 	bgeu	r18,r2,1000eedc <__udivdi3+0x560>
1000ec2c:	843fff84 	addi	r16,r16,-2
1000ec30:	b004943a 	slli	r2,r22,16
1000ec34:	1404b03a 	or	r2,r2,r16
1000ec38:	00000206 	br	1000ec44 <__udivdi3+0x2c8>
1000ec3c:	0007883a 	mov	r3,zero
1000ec40:	0005883a 	mov	r2,zero
1000ec44:	dfc00b17 	ldw	ra,44(sp)
1000ec48:	df000a17 	ldw	fp,40(sp)
1000ec4c:	ddc00917 	ldw	r23,36(sp)
1000ec50:	dd800817 	ldw	r22,32(sp)
1000ec54:	dd400717 	ldw	r21,28(sp)
1000ec58:	dd000617 	ldw	r20,24(sp)
1000ec5c:	dcc00517 	ldw	r19,20(sp)
1000ec60:	dc800417 	ldw	r18,16(sp)
1000ec64:	dc400317 	ldw	r17,12(sp)
1000ec68:	dc000217 	ldw	r16,8(sp)
1000ec6c:	dec00c04 	addi	sp,sp,48
1000ec70:	f800283a 	ret
1000ec74:	00803fc4 	movi	r2,255
1000ec78:	11c5803a 	cmpltu	r2,r2,r7
1000ec7c:	100490fa 	slli	r2,r2,3
1000ec80:	003f9906 	br	1000eae8 <__alt_data_end+0xf800eae8>
1000ec84:	00803fc4 	movi	r2,255
1000ec88:	1445803a 	cmpltu	r2,r2,r17
1000ec8c:	100490fa 	slli	r2,r2,3
1000ec90:	003fad06 	br	1000eb48 <__alt_data_end+0xf800eb48>
1000ec94:	00804034 	movhi	r2,256
1000ec98:	10bfffc4 	addi	r2,r2,-1
1000ec9c:	11809f36 	bltu	r2,r6,1000ef1c <__udivdi3+0x5a0>
1000eca0:	00800404 	movi	r2,16
1000eca4:	003f4c06 	br	1000e9d8 <__alt_data_end+0xf800e9d8>
1000eca8:	3dce983a 	sll	r7,r7,r23
1000ecac:	30b8d83a 	srl	fp,r6,r2
1000ecb0:	80a2d83a 	srl	r17,r16,r2
1000ecb4:	35cc983a 	sll	r6,r6,r23
1000ecb8:	3f38b03a 	or	fp,r7,fp
1000ecbc:	e024d43a 	srli	r18,fp,16
1000ecc0:	9884d83a 	srl	r2,r19,r2
1000ecc4:	85e0983a 	sll	r16,r16,r23
1000ecc8:	8809883a 	mov	r4,r17
1000eccc:	900b883a 	mov	r5,r18
1000ecd0:	d9800015 	stw	r6,0(sp)
1000ecd4:	1420b03a 	or	r16,r2,r16
1000ecd8:	0004ffc0 	call	10004ffc <__umodsi3>
1000ecdc:	900b883a 	mov	r5,r18
1000ece0:	8809883a 	mov	r4,r17
1000ece4:	1029883a 	mov	r20,r2
1000ece8:	e5bfffcc 	andi	r22,fp,65535
1000ecec:	0004f980 	call	10004f98 <__udivsi3>
1000ecf0:	100b883a 	mov	r5,r2
1000ecf4:	b009883a 	mov	r4,r22
1000ecf8:	102b883a 	mov	r21,r2
1000ecfc:	00050540 	call	10005054 <__mulsi3>
1000ed00:	a028943a 	slli	r20,r20,16
1000ed04:	8006d43a 	srli	r3,r16,16
1000ed08:	1d06b03a 	or	r3,r3,r20
1000ed0c:	1880042e 	bgeu	r3,r2,1000ed20 <__udivdi3+0x3a4>
1000ed10:	1f07883a 	add	r3,r3,fp
1000ed14:	a93fffc4 	addi	r4,r21,-1
1000ed18:	1f00892e 	bgeu	r3,fp,1000ef40 <__udivdi3+0x5c4>
1000ed1c:	202b883a 	mov	r21,r4
1000ed20:	18a3c83a 	sub	r17,r3,r2
1000ed24:	8809883a 	mov	r4,r17
1000ed28:	900b883a 	mov	r5,r18
1000ed2c:	0004ffc0 	call	10004ffc <__umodsi3>
1000ed30:	1029883a 	mov	r20,r2
1000ed34:	8809883a 	mov	r4,r17
1000ed38:	900b883a 	mov	r5,r18
1000ed3c:	a028943a 	slli	r20,r20,16
1000ed40:	0004f980 	call	10004f98 <__udivsi3>
1000ed44:	100b883a 	mov	r5,r2
1000ed48:	b009883a 	mov	r4,r22
1000ed4c:	843fffcc 	andi	r16,r16,65535
1000ed50:	1023883a 	mov	r17,r2
1000ed54:	8520b03a 	or	r16,r16,r20
1000ed58:	00050540 	call	10005054 <__mulsi3>
1000ed5c:	8080042e 	bgeu	r16,r2,1000ed70 <__udivdi3+0x3f4>
1000ed60:	8721883a 	add	r16,r16,fp
1000ed64:	88ffffc4 	addi	r3,r17,-1
1000ed68:	8700712e 	bgeu	r16,fp,1000ef30 <__udivdi3+0x5b4>
1000ed6c:	1823883a 	mov	r17,r3
1000ed70:	a80e943a 	slli	r7,r21,16
1000ed74:	d8c00017 	ldw	r3,0(sp)
1000ed78:	80a1c83a 	sub	r16,r16,r2
1000ed7c:	3c64b03a 	or	r18,r7,r17
1000ed80:	1d3fffcc 	andi	r20,r3,65535
1000ed84:	9022d43a 	srli	r17,r18,16
1000ed88:	95bfffcc 	andi	r22,r18,65535
1000ed8c:	a00b883a 	mov	r5,r20
1000ed90:	b009883a 	mov	r4,r22
1000ed94:	182ad43a 	srli	r21,r3,16
1000ed98:	00050540 	call	10005054 <__mulsi3>
1000ed9c:	a00b883a 	mov	r5,r20
1000eda0:	8809883a 	mov	r4,r17
1000eda4:	1039883a 	mov	fp,r2
1000eda8:	00050540 	call	10005054 <__mulsi3>
1000edac:	8809883a 	mov	r4,r17
1000edb0:	a80b883a 	mov	r5,r21
1000edb4:	1029883a 	mov	r20,r2
1000edb8:	00050540 	call	10005054 <__mulsi3>
1000edbc:	a80b883a 	mov	r5,r21
1000edc0:	b009883a 	mov	r4,r22
1000edc4:	1023883a 	mov	r17,r2
1000edc8:	00050540 	call	10005054 <__mulsi3>
1000edcc:	e006d43a 	srli	r3,fp,16
1000edd0:	1505883a 	add	r2,r2,r20
1000edd4:	1887883a 	add	r3,r3,r2
1000edd8:	1d00022e 	bgeu	r3,r20,1000ede4 <__udivdi3+0x468>
1000eddc:	00800074 	movhi	r2,1
1000ede0:	88a3883a 	add	r17,r17,r2
1000ede4:	1804d43a 	srli	r2,r3,16
1000ede8:	1463883a 	add	r17,r2,r17
1000edec:	84404436 	bltu	r16,r17,1000ef00 <__udivdi3+0x584>
1000edf0:	84403e26 	beq	r16,r17,1000eeec <__udivdi3+0x570>
1000edf4:	9005883a 	mov	r2,r18
1000edf8:	0007883a 	mov	r3,zero
1000edfc:	003f9106 	br	1000ec44 <__alt_data_end+0xf800ec44>
1000ee00:	88e2983a 	sll	r17,r17,r3
1000ee04:	80aed83a 	srl	r23,r16,r2
1000ee08:	80e0983a 	sll	r16,r16,r3
1000ee0c:	882ad43a 	srli	r21,r17,16
1000ee10:	9884d83a 	srl	r2,r19,r2
1000ee14:	b809883a 	mov	r4,r23
1000ee18:	a80b883a 	mov	r5,r21
1000ee1c:	98e4983a 	sll	r18,r19,r3
1000ee20:	142cb03a 	or	r22,r2,r16
1000ee24:	0004ffc0 	call	10004ffc <__umodsi3>
1000ee28:	b809883a 	mov	r4,r23
1000ee2c:	a80b883a 	mov	r5,r21
1000ee30:	1027883a 	mov	r19,r2
1000ee34:	8d3fffcc 	andi	r20,r17,65535
1000ee38:	0004f980 	call	10004f98 <__udivsi3>
1000ee3c:	a009883a 	mov	r4,r20
1000ee40:	100b883a 	mov	r5,r2
1000ee44:	102f883a 	mov	r23,r2
1000ee48:	00050540 	call	10005054 <__mulsi3>
1000ee4c:	9826943a 	slli	r19,r19,16
1000ee50:	b008d43a 	srli	r4,r22,16
1000ee54:	24c8b03a 	or	r4,r4,r19
1000ee58:	2080062e 	bgeu	r4,r2,1000ee74 <__udivdi3+0x4f8>
1000ee5c:	2449883a 	add	r4,r4,r17
1000ee60:	b8ffffc4 	addi	r3,r23,-1
1000ee64:	24403c36 	bltu	r4,r17,1000ef58 <__udivdi3+0x5dc>
1000ee68:	20803b2e 	bgeu	r4,r2,1000ef58 <__udivdi3+0x5dc>
1000ee6c:	bdffff84 	addi	r23,r23,-2
1000ee70:	2449883a 	add	r4,r4,r17
1000ee74:	20a1c83a 	sub	r16,r4,r2
1000ee78:	a80b883a 	mov	r5,r21
1000ee7c:	8009883a 	mov	r4,r16
1000ee80:	0004ffc0 	call	10004ffc <__umodsi3>
1000ee84:	a80b883a 	mov	r5,r21
1000ee88:	8009883a 	mov	r4,r16
1000ee8c:	1027883a 	mov	r19,r2
1000ee90:	0004f980 	call	10004f98 <__udivsi3>
1000ee94:	a009883a 	mov	r4,r20
1000ee98:	100b883a 	mov	r5,r2
1000ee9c:	9826943a 	slli	r19,r19,16
1000eea0:	1039883a 	mov	fp,r2
1000eea4:	00050540 	call	10005054 <__mulsi3>
1000eea8:	b13fffcc 	andi	r4,r22,65535
1000eeac:	24c8b03a 	or	r4,r4,r19
1000eeb0:	2080062e 	bgeu	r4,r2,1000eecc <__udivdi3+0x550>
1000eeb4:	2449883a 	add	r4,r4,r17
1000eeb8:	e0ffffc4 	addi	r3,fp,-1
1000eebc:	24402436 	bltu	r4,r17,1000ef50 <__udivdi3+0x5d4>
1000eec0:	2080232e 	bgeu	r4,r2,1000ef50 <__udivdi3+0x5d4>
1000eec4:	e73fff84 	addi	fp,fp,-2
1000eec8:	2449883a 	add	r4,r4,r17
1000eecc:	b82e943a 	slli	r23,r23,16
1000eed0:	20a1c83a 	sub	r16,r4,r2
1000eed4:	bf06b03a 	or	r3,r23,fp
1000eed8:	003f2806 	br	1000eb7c <__alt_data_end+0xf800eb7c>
1000eedc:	2021883a 	mov	r16,r4
1000eee0:	003f5306 	br	1000ec30 <__alt_data_end+0xf800ec30>
1000eee4:	1821883a 	mov	r16,r3
1000eee8:	003ef406 	br	1000eabc <__alt_data_end+0xf800eabc>
1000eeec:	1806943a 	slli	r3,r3,16
1000eef0:	9de6983a 	sll	r19,r19,r23
1000eef4:	e73fffcc 	andi	fp,fp,65535
1000eef8:	1f07883a 	add	r3,r3,fp
1000eefc:	98ffbd2e 	bgeu	r19,r3,1000edf4 <__alt_data_end+0xf800edf4>
1000ef00:	90bfffc4 	addi	r2,r18,-1
1000ef04:	0007883a 	mov	r3,zero
1000ef08:	003f4e06 	br	1000ec44 <__alt_data_end+0xf800ec44>
1000ef0c:	00800604 	movi	r2,24
1000ef10:	003ef506 	br	1000eae8 <__alt_data_end+0xf800eae8>
1000ef14:	00800604 	movi	r2,24
1000ef18:	003f0b06 	br	1000eb48 <__alt_data_end+0xf800eb48>
1000ef1c:	00800604 	movi	r2,24
1000ef20:	003ead06 	br	1000e9d8 <__alt_data_end+0xf800e9d8>
1000ef24:	0007883a 	mov	r3,zero
1000ef28:	00800044 	movi	r2,1
1000ef2c:	003f4506 	br	1000ec44 <__alt_data_end+0xf800ec44>
1000ef30:	80bf8e2e 	bgeu	r16,r2,1000ed6c <__alt_data_end+0xf800ed6c>
1000ef34:	8c7fff84 	addi	r17,r17,-2
1000ef38:	8721883a 	add	r16,r16,fp
1000ef3c:	003f8c06 	br	1000ed70 <__alt_data_end+0xf800ed70>
1000ef40:	18bf762e 	bgeu	r3,r2,1000ed1c <__alt_data_end+0xf800ed1c>
1000ef44:	ad7fff84 	addi	r21,r21,-2
1000ef48:	1f07883a 	add	r3,r3,fp
1000ef4c:	003f7406 	br	1000ed20 <__alt_data_end+0xf800ed20>
1000ef50:	1839883a 	mov	fp,r3
1000ef54:	003fdd06 	br	1000eecc <__alt_data_end+0xf800eecc>
1000ef58:	182f883a 	mov	r23,r3
1000ef5c:	003fc506 	br	1000ee74 <__alt_data_end+0xf800ee74>
1000ef60:	b5bfff84 	addi	r22,r22,-2
1000ef64:	3c4f883a 	add	r7,r7,r17
1000ef68:	003f1a06 	br	1000ebd4 <__alt_data_end+0xf800ebd4>
1000ef6c:	b5bfff84 	addi	r22,r22,-2
1000ef70:	1c47883a 	add	r3,r3,r17
1000ef74:	003ebc06 	br	1000ea68 <__alt_data_end+0xf800ea68>

1000ef78 <__umoddi3>:
1000ef78:	defff304 	addi	sp,sp,-52
1000ef7c:	df000b15 	stw	fp,44(sp)
1000ef80:	dc400415 	stw	r17,16(sp)
1000ef84:	dc000315 	stw	r16,12(sp)
1000ef88:	dfc00c15 	stw	ra,48(sp)
1000ef8c:	ddc00a15 	stw	r23,40(sp)
1000ef90:	dd800915 	stw	r22,36(sp)
1000ef94:	dd400815 	stw	r21,32(sp)
1000ef98:	dd000715 	stw	r20,28(sp)
1000ef9c:	dcc00615 	stw	r19,24(sp)
1000efa0:	dc800515 	stw	r18,20(sp)
1000efa4:	2021883a 	mov	r16,r4
1000efa8:	2823883a 	mov	r17,r5
1000efac:	2839883a 	mov	fp,r5
1000efb0:	3800401e 	bne	r7,zero,1000f0b4 <__umoddi3+0x13c>
1000efb4:	3027883a 	mov	r19,r6
1000efb8:	2029883a 	mov	r20,r4
1000efbc:	2980552e 	bgeu	r5,r6,1000f114 <__umoddi3+0x19c>
1000efc0:	00bfffd4 	movui	r2,65535
1000efc4:	1180a236 	bltu	r2,r6,1000f250 <__umoddi3+0x2d8>
1000efc8:	01003fc4 	movi	r4,255
1000efcc:	2189803a 	cmpltu	r4,r4,r6
1000efd0:	200890fa 	slli	r4,r4,3
1000efd4:	3104d83a 	srl	r2,r6,r4
1000efd8:	00c40074 	movhi	r3,4097
1000efdc:	18d3f604 	addi	r3,r3,20440
1000efe0:	1885883a 	add	r2,r3,r2
1000efe4:	10c00003 	ldbu	r3,0(r2)
1000efe8:	00800804 	movi	r2,32
1000efec:	1909883a 	add	r4,r3,r4
1000eff0:	1125c83a 	sub	r18,r2,r4
1000eff4:	90000526 	beq	r18,zero,1000f00c <__umoddi3+0x94>
1000eff8:	8ca2983a 	sll	r17,r17,r18
1000effc:	8108d83a 	srl	r4,r16,r4
1000f000:	34a6983a 	sll	r19,r6,r18
1000f004:	84a8983a 	sll	r20,r16,r18
1000f008:	2478b03a 	or	fp,r4,r17
1000f00c:	982cd43a 	srli	r22,r19,16
1000f010:	e009883a 	mov	r4,fp
1000f014:	9dffffcc 	andi	r23,r19,65535
1000f018:	b00b883a 	mov	r5,r22
1000f01c:	0004ffc0 	call	10004ffc <__umodsi3>
1000f020:	b00b883a 	mov	r5,r22
1000f024:	e009883a 	mov	r4,fp
1000f028:	102b883a 	mov	r21,r2
1000f02c:	0004f980 	call	10004f98 <__udivsi3>
1000f030:	100b883a 	mov	r5,r2
1000f034:	b809883a 	mov	r4,r23
1000f038:	00050540 	call	10005054 <__mulsi3>
1000f03c:	a82a943a 	slli	r21,r21,16
1000f040:	a006d43a 	srli	r3,r20,16
1000f044:	1d46b03a 	or	r3,r3,r21
1000f048:	1880032e 	bgeu	r3,r2,1000f058 <__umoddi3+0xe0>
1000f04c:	1cc7883a 	add	r3,r3,r19
1000f050:	1cc00136 	bltu	r3,r19,1000f058 <__umoddi3+0xe0>
1000f054:	18813136 	bltu	r3,r2,1000f51c <__umoddi3+0x5a4>
1000f058:	18a1c83a 	sub	r16,r3,r2
1000f05c:	b00b883a 	mov	r5,r22
1000f060:	8009883a 	mov	r4,r16
1000f064:	0004ffc0 	call	10004ffc <__umodsi3>
1000f068:	b00b883a 	mov	r5,r22
1000f06c:	8009883a 	mov	r4,r16
1000f070:	1023883a 	mov	r17,r2
1000f074:	0004f980 	call	10004f98 <__udivsi3>
1000f078:	100b883a 	mov	r5,r2
1000f07c:	b809883a 	mov	r4,r23
1000f080:	8822943a 	slli	r17,r17,16
1000f084:	00050540 	call	10005054 <__mulsi3>
1000f088:	a0ffffcc 	andi	r3,r20,65535
1000f08c:	1c46b03a 	or	r3,r3,r17
1000f090:	1880042e 	bgeu	r3,r2,1000f0a4 <__umoddi3+0x12c>
1000f094:	1cc7883a 	add	r3,r3,r19
1000f098:	1cc00236 	bltu	r3,r19,1000f0a4 <__umoddi3+0x12c>
1000f09c:	1880012e 	bgeu	r3,r2,1000f0a4 <__umoddi3+0x12c>
1000f0a0:	1cc7883a 	add	r3,r3,r19
1000f0a4:	1885c83a 	sub	r2,r3,r2
1000f0a8:	1484d83a 	srl	r2,r2,r18
1000f0ac:	0007883a 	mov	r3,zero
1000f0b0:	00005306 	br	1000f200 <__umoddi3+0x288>
1000f0b4:	29c05036 	bltu	r5,r7,1000f1f8 <__umoddi3+0x280>
1000f0b8:	00bfffd4 	movui	r2,65535
1000f0bc:	11c05c2e 	bgeu	r2,r7,1000f230 <__umoddi3+0x2b8>
1000f0c0:	00804034 	movhi	r2,256
1000f0c4:	10bfffc4 	addi	r2,r2,-1
1000f0c8:	11c10636 	bltu	r2,r7,1000f4e4 <__umoddi3+0x56c>
1000f0cc:	01000404 	movi	r4,16
1000f0d0:	3904d83a 	srl	r2,r7,r4
1000f0d4:	00c40074 	movhi	r3,4097
1000f0d8:	18d3f604 	addi	r3,r3,20440
1000f0dc:	1885883a 	add	r2,r3,r2
1000f0e0:	14c00003 	ldbu	r19,0(r2)
1000f0e4:	00c00804 	movi	r3,32
1000f0e8:	9927883a 	add	r19,r19,r4
1000f0ec:	1ce9c83a 	sub	r20,r3,r19
1000f0f0:	a0005c1e 	bne	r20,zero,1000f264 <__umoddi3+0x2ec>
1000f0f4:	3c400136 	bltu	r7,r17,1000f0fc <__umoddi3+0x184>
1000f0f8:	81810a36 	bltu	r16,r6,1000f524 <__umoddi3+0x5ac>
1000f0fc:	8185c83a 	sub	r2,r16,r6
1000f100:	89e3c83a 	sub	r17,r17,r7
1000f104:	8089803a 	cmpltu	r4,r16,r2
1000f108:	8939c83a 	sub	fp,r17,r4
1000f10c:	e007883a 	mov	r3,fp
1000f110:	00003b06 	br	1000f200 <__umoddi3+0x288>
1000f114:	3000041e 	bne	r6,zero,1000f128 <__umoddi3+0x1b0>
1000f118:	000b883a 	mov	r5,zero
1000f11c:	01000044 	movi	r4,1
1000f120:	0004f980 	call	10004f98 <__udivsi3>
1000f124:	1027883a 	mov	r19,r2
1000f128:	00bfffd4 	movui	r2,65535
1000f12c:	14c0442e 	bgeu	r2,r19,1000f240 <__umoddi3+0x2c8>
1000f130:	00804034 	movhi	r2,256
1000f134:	10bfffc4 	addi	r2,r2,-1
1000f138:	14c0ec36 	bltu	r2,r19,1000f4ec <__umoddi3+0x574>
1000f13c:	00800404 	movi	r2,16
1000f140:	9886d83a 	srl	r3,r19,r2
1000f144:	01040074 	movhi	r4,4097
1000f148:	2113f604 	addi	r4,r4,20440
1000f14c:	20c7883a 	add	r3,r4,r3
1000f150:	18c00003 	ldbu	r3,0(r3)
1000f154:	1887883a 	add	r3,r3,r2
1000f158:	00800804 	movi	r2,32
1000f15c:	10e5c83a 	sub	r18,r2,r3
1000f160:	9000ab1e 	bne	r18,zero,1000f410 <__umoddi3+0x498>
1000f164:	982cd43a 	srli	r22,r19,16
1000f168:	8ce3c83a 	sub	r17,r17,r19
1000f16c:	9dffffcc 	andi	r23,r19,65535
1000f170:	b00b883a 	mov	r5,r22
1000f174:	8809883a 	mov	r4,r17
1000f178:	0004ffc0 	call	10004ffc <__umodsi3>
1000f17c:	b00b883a 	mov	r5,r22
1000f180:	8809883a 	mov	r4,r17
1000f184:	102b883a 	mov	r21,r2
1000f188:	0004f980 	call	10004f98 <__udivsi3>
1000f18c:	b80b883a 	mov	r5,r23
1000f190:	1009883a 	mov	r4,r2
1000f194:	00050540 	call	10005054 <__mulsi3>
1000f198:	a82a943a 	slli	r21,r21,16
1000f19c:	a006d43a 	srli	r3,r20,16
1000f1a0:	1d46b03a 	or	r3,r3,r21
1000f1a4:	1880042e 	bgeu	r3,r2,1000f1b8 <__umoddi3+0x240>
1000f1a8:	1cc7883a 	add	r3,r3,r19
1000f1ac:	1cc00236 	bltu	r3,r19,1000f1b8 <__umoddi3+0x240>
1000f1b0:	1880012e 	bgeu	r3,r2,1000f1b8 <__umoddi3+0x240>
1000f1b4:	1cc7883a 	add	r3,r3,r19
1000f1b8:	18a1c83a 	sub	r16,r3,r2
1000f1bc:	b00b883a 	mov	r5,r22
1000f1c0:	8009883a 	mov	r4,r16
1000f1c4:	0004ffc0 	call	10004ffc <__umodsi3>
1000f1c8:	1023883a 	mov	r17,r2
1000f1cc:	b00b883a 	mov	r5,r22
1000f1d0:	8009883a 	mov	r4,r16
1000f1d4:	0004f980 	call	10004f98 <__udivsi3>
1000f1d8:	8822943a 	slli	r17,r17,16
1000f1dc:	b80b883a 	mov	r5,r23
1000f1e0:	1009883a 	mov	r4,r2
1000f1e4:	00050540 	call	10005054 <__mulsi3>
1000f1e8:	a53fffcc 	andi	r20,r20,65535
1000f1ec:	a446b03a 	or	r3,r20,r17
1000f1f0:	18bfac2e 	bgeu	r3,r2,1000f0a4 <__alt_data_end+0xf800f0a4>
1000f1f4:	003fa706 	br	1000f094 <__alt_data_end+0xf800f094>
1000f1f8:	2005883a 	mov	r2,r4
1000f1fc:	2807883a 	mov	r3,r5
1000f200:	dfc00c17 	ldw	ra,48(sp)
1000f204:	df000b17 	ldw	fp,44(sp)
1000f208:	ddc00a17 	ldw	r23,40(sp)
1000f20c:	dd800917 	ldw	r22,36(sp)
1000f210:	dd400817 	ldw	r21,32(sp)
1000f214:	dd000717 	ldw	r20,28(sp)
1000f218:	dcc00617 	ldw	r19,24(sp)
1000f21c:	dc800517 	ldw	r18,20(sp)
1000f220:	dc400417 	ldw	r17,16(sp)
1000f224:	dc000317 	ldw	r16,12(sp)
1000f228:	dec00d04 	addi	sp,sp,52
1000f22c:	f800283a 	ret
1000f230:	04c03fc4 	movi	r19,255
1000f234:	99c9803a 	cmpltu	r4,r19,r7
1000f238:	200890fa 	slli	r4,r4,3
1000f23c:	003fa406 	br	1000f0d0 <__alt_data_end+0xf800f0d0>
1000f240:	00803fc4 	movi	r2,255
1000f244:	14c5803a 	cmpltu	r2,r2,r19
1000f248:	100490fa 	slli	r2,r2,3
1000f24c:	003fbc06 	br	1000f140 <__alt_data_end+0xf800f140>
1000f250:	00804034 	movhi	r2,256
1000f254:	10bfffc4 	addi	r2,r2,-1
1000f258:	1180a636 	bltu	r2,r6,1000f4f4 <__umoddi3+0x57c>
1000f25c:	01000404 	movi	r4,16
1000f260:	003f5c06 	br	1000efd4 <__alt_data_end+0xf800efd4>
1000f264:	3d0e983a 	sll	r7,r7,r20
1000f268:	34ead83a 	srl	r21,r6,r19
1000f26c:	8cc6d83a 	srl	r3,r17,r19
1000f270:	8d10983a 	sll	r8,r17,r20
1000f274:	3d6ab03a 	or	r21,r7,r21
1000f278:	a82cd43a 	srli	r22,r21,16
1000f27c:	84e2d83a 	srl	r17,r16,r19
1000f280:	1809883a 	mov	r4,r3
1000f284:	b00b883a 	mov	r5,r22
1000f288:	8a22b03a 	or	r17,r17,r8
1000f28c:	3524983a 	sll	r18,r6,r20
1000f290:	dc400015 	stw	r17,0(sp)
1000f294:	d8c00115 	stw	r3,4(sp)
1000f298:	0004ffc0 	call	10004ffc <__umodsi3>
1000f29c:	d8c00117 	ldw	r3,4(sp)
1000f2a0:	b00b883a 	mov	r5,r22
1000f2a4:	1039883a 	mov	fp,r2
1000f2a8:	1809883a 	mov	r4,r3
1000f2ac:	0004f980 	call	10004f98 <__udivsi3>
1000f2b0:	adffffcc 	andi	r23,r21,65535
1000f2b4:	100b883a 	mov	r5,r2
1000f2b8:	b809883a 	mov	r4,r23
1000f2bc:	1023883a 	mov	r17,r2
1000f2c0:	00050540 	call	10005054 <__mulsi3>
1000f2c4:	d9400017 	ldw	r5,0(sp)
1000f2c8:	e008943a 	slli	r4,fp,16
1000f2cc:	8520983a 	sll	r16,r16,r20
1000f2d0:	2806d43a 	srli	r3,r5,16
1000f2d4:	1906b03a 	or	r3,r3,r4
1000f2d8:	1880042e 	bgeu	r3,r2,1000f2ec <__umoddi3+0x374>
1000f2dc:	1d47883a 	add	r3,r3,r21
1000f2e0:	893fffc4 	addi	r4,r17,-1
1000f2e4:	1d40892e 	bgeu	r3,r21,1000f50c <__umoddi3+0x594>
1000f2e8:	2023883a 	mov	r17,r4
1000f2ec:	18b9c83a 	sub	fp,r3,r2
1000f2f0:	b00b883a 	mov	r5,r22
1000f2f4:	e009883a 	mov	r4,fp
1000f2f8:	0004ffc0 	call	10004ffc <__umodsi3>
1000f2fc:	b00b883a 	mov	r5,r22
1000f300:	e009883a 	mov	r4,fp
1000f304:	d8800215 	stw	r2,8(sp)
1000f308:	0004f980 	call	10004f98 <__udivsi3>
1000f30c:	100b883a 	mov	r5,r2
1000f310:	b809883a 	mov	r4,r23
1000f314:	102d883a 	mov	r22,r2
1000f318:	00050540 	call	10005054 <__mulsi3>
1000f31c:	d9800217 	ldw	r6,8(sp)
1000f320:	d8c00017 	ldw	r3,0(sp)
1000f324:	300c943a 	slli	r6,r6,16
1000f328:	1a3fffcc 	andi	r8,r3,65535
1000f32c:	4190b03a 	or	r8,r8,r6
1000f330:	4080042e 	bgeu	r8,r2,1000f344 <__umoddi3+0x3cc>
1000f334:	4551883a 	add	r8,r8,r21
1000f338:	b0ffffc4 	addi	r3,r22,-1
1000f33c:	45406f2e 	bgeu	r8,r21,1000f4fc <__umoddi3+0x584>
1000f340:	182d883a 	mov	r22,r3
1000f344:	880e943a 	slli	r7,r17,16
1000f348:	9006d43a 	srli	r3,r18,16
1000f34c:	91bfffcc 	andi	r6,r18,65535
1000f350:	3dacb03a 	or	r22,r7,r22
1000f354:	b02ed43a 	srli	r23,r22,16
1000f358:	b5bfffcc 	andi	r22,r22,65535
1000f35c:	300b883a 	mov	r5,r6
1000f360:	b009883a 	mov	r4,r22
1000f364:	40a3c83a 	sub	r17,r8,r2
1000f368:	d8c00115 	stw	r3,4(sp)
1000f36c:	d9800215 	stw	r6,8(sp)
1000f370:	00050540 	call	10005054 <__mulsi3>
1000f374:	d9800217 	ldw	r6,8(sp)
1000f378:	b809883a 	mov	r4,r23
1000f37c:	1039883a 	mov	fp,r2
1000f380:	300b883a 	mov	r5,r6
1000f384:	00050540 	call	10005054 <__mulsi3>
1000f388:	d8c00117 	ldw	r3,4(sp)
1000f38c:	b809883a 	mov	r4,r23
1000f390:	d8800215 	stw	r2,8(sp)
1000f394:	180b883a 	mov	r5,r3
1000f398:	00050540 	call	10005054 <__mulsi3>
1000f39c:	d8c00117 	ldw	r3,4(sp)
1000f3a0:	b009883a 	mov	r4,r22
1000f3a4:	102f883a 	mov	r23,r2
1000f3a8:	180b883a 	mov	r5,r3
1000f3ac:	00050540 	call	10005054 <__mulsi3>
1000f3b0:	d9800217 	ldw	r6,8(sp)
1000f3b4:	e006d43a 	srli	r3,fp,16
1000f3b8:	1185883a 	add	r2,r2,r6
1000f3bc:	1885883a 	add	r2,r3,r2
1000f3c0:	1180022e 	bgeu	r2,r6,1000f3cc <__umoddi3+0x454>
1000f3c4:	00c00074 	movhi	r3,1
1000f3c8:	b8ef883a 	add	r23,r23,r3
1000f3cc:	1006d43a 	srli	r3,r2,16
1000f3d0:	1004943a 	slli	r2,r2,16
1000f3d4:	e73fffcc 	andi	fp,fp,65535
1000f3d8:	1dc7883a 	add	r3,r3,r23
1000f3dc:	1739883a 	add	fp,r2,fp
1000f3e0:	88c03a36 	bltu	r17,r3,1000f4cc <__umoddi3+0x554>
1000f3e4:	88c05126 	beq	r17,r3,1000f52c <__umoddi3+0x5b4>
1000f3e8:	88c9c83a 	sub	r4,r17,r3
1000f3ec:	e00f883a 	mov	r7,fp
1000f3f0:	81cfc83a 	sub	r7,r16,r7
1000f3f4:	81c7803a 	cmpltu	r3,r16,r7
1000f3f8:	20c7c83a 	sub	r3,r4,r3
1000f3fc:	1cc4983a 	sll	r2,r3,r19
1000f400:	3d0ed83a 	srl	r7,r7,r20
1000f404:	1d06d83a 	srl	r3,r3,r20
1000f408:	11c4b03a 	or	r2,r2,r7
1000f40c:	003f7c06 	br	1000f200 <__alt_data_end+0xf800f200>
1000f410:	9ca6983a 	sll	r19,r19,r18
1000f414:	88f8d83a 	srl	fp,r17,r3
1000f418:	80c4d83a 	srl	r2,r16,r3
1000f41c:	982cd43a 	srli	r22,r19,16
1000f420:	8ca2983a 	sll	r17,r17,r18
1000f424:	e009883a 	mov	r4,fp
1000f428:	b00b883a 	mov	r5,r22
1000f42c:	146ab03a 	or	r21,r2,r17
1000f430:	0004ffc0 	call	10004ffc <__umodsi3>
1000f434:	b00b883a 	mov	r5,r22
1000f438:	e009883a 	mov	r4,fp
1000f43c:	1029883a 	mov	r20,r2
1000f440:	9dffffcc 	andi	r23,r19,65535
1000f444:	0004f980 	call	10004f98 <__udivsi3>
1000f448:	b809883a 	mov	r4,r23
1000f44c:	100b883a 	mov	r5,r2
1000f450:	00050540 	call	10005054 <__mulsi3>
1000f454:	a008943a 	slli	r4,r20,16
1000f458:	a806d43a 	srli	r3,r21,16
1000f45c:	84a8983a 	sll	r20,r16,r18
1000f460:	1906b03a 	or	r3,r3,r4
1000f464:	1880042e 	bgeu	r3,r2,1000f478 <__umoddi3+0x500>
1000f468:	1cc7883a 	add	r3,r3,r19
1000f46c:	1cc00236 	bltu	r3,r19,1000f478 <__umoddi3+0x500>
1000f470:	1880012e 	bgeu	r3,r2,1000f478 <__umoddi3+0x500>
1000f474:	1cc7883a 	add	r3,r3,r19
1000f478:	18a3c83a 	sub	r17,r3,r2
1000f47c:	b00b883a 	mov	r5,r22
1000f480:	8809883a 	mov	r4,r17
1000f484:	0004ffc0 	call	10004ffc <__umodsi3>
1000f488:	b00b883a 	mov	r5,r22
1000f48c:	8809883a 	mov	r4,r17
1000f490:	1021883a 	mov	r16,r2
1000f494:	0004f980 	call	10004f98 <__udivsi3>
1000f498:	100b883a 	mov	r5,r2
1000f49c:	b809883a 	mov	r4,r23
1000f4a0:	8020943a 	slli	r16,r16,16
1000f4a4:	00050540 	call	10005054 <__mulsi3>
1000f4a8:	a8ffffcc 	andi	r3,r21,65535
1000f4ac:	1c06b03a 	or	r3,r3,r16
1000f4b0:	1880042e 	bgeu	r3,r2,1000f4c4 <__umoddi3+0x54c>
1000f4b4:	1cc7883a 	add	r3,r3,r19
1000f4b8:	1cc00236 	bltu	r3,r19,1000f4c4 <__umoddi3+0x54c>
1000f4bc:	1880012e 	bgeu	r3,r2,1000f4c4 <__umoddi3+0x54c>
1000f4c0:	1cc7883a 	add	r3,r3,r19
1000f4c4:	18a3c83a 	sub	r17,r3,r2
1000f4c8:	003f2906 	br	1000f170 <__alt_data_end+0xf800f170>
1000f4cc:	e48fc83a 	sub	r7,fp,r18
1000f4d0:	1d49c83a 	sub	r4,r3,r21
1000f4d4:	e1f9803a 	cmpltu	fp,fp,r7
1000f4d8:	2739c83a 	sub	fp,r4,fp
1000f4dc:	8f09c83a 	sub	r4,r17,fp
1000f4e0:	003fc306 	br	1000f3f0 <__alt_data_end+0xf800f3f0>
1000f4e4:	01000604 	movi	r4,24
1000f4e8:	003ef906 	br	1000f0d0 <__alt_data_end+0xf800f0d0>
1000f4ec:	00800604 	movi	r2,24
1000f4f0:	003f1306 	br	1000f140 <__alt_data_end+0xf800f140>
1000f4f4:	01000604 	movi	r4,24
1000f4f8:	003eb606 	br	1000efd4 <__alt_data_end+0xf800efd4>
1000f4fc:	40bf902e 	bgeu	r8,r2,1000f340 <__alt_data_end+0xf800f340>
1000f500:	b5bfff84 	addi	r22,r22,-2
1000f504:	4551883a 	add	r8,r8,r21
1000f508:	003f8e06 	br	1000f344 <__alt_data_end+0xf800f344>
1000f50c:	18bf762e 	bgeu	r3,r2,1000f2e8 <__alt_data_end+0xf800f2e8>
1000f510:	8c7fff84 	addi	r17,r17,-2
1000f514:	1d47883a 	add	r3,r3,r21
1000f518:	003f7406 	br	1000f2ec <__alt_data_end+0xf800f2ec>
1000f51c:	1cc7883a 	add	r3,r3,r19
1000f520:	003ecd06 	br	1000f058 <__alt_data_end+0xf800f058>
1000f524:	8005883a 	mov	r2,r16
1000f528:	003ef806 	br	1000f10c <__alt_data_end+0xf800f10c>
1000f52c:	873fe736 	bltu	r16,fp,1000f4cc <__alt_data_end+0xf800f4cc>
1000f530:	e00f883a 	mov	r7,fp
1000f534:	0009883a 	mov	r4,zero
1000f538:	003fad06 	br	1000f3f0 <__alt_data_end+0xf800f3f0>

1000f53c <__adddf3>:
1000f53c:	02c00434 	movhi	r11,16
1000f540:	5affffc4 	addi	r11,r11,-1
1000f544:	2806d7fa 	srli	r3,r5,31
1000f548:	2ad4703a 	and	r10,r5,r11
1000f54c:	3ad2703a 	and	r9,r7,r11
1000f550:	3804d53a 	srli	r2,r7,20
1000f554:	3018d77a 	srli	r12,r6,29
1000f558:	280ad53a 	srli	r5,r5,20
1000f55c:	501490fa 	slli	r10,r10,3
1000f560:	2010d77a 	srli	r8,r4,29
1000f564:	481290fa 	slli	r9,r9,3
1000f568:	380ed7fa 	srli	r7,r7,31
1000f56c:	defffb04 	addi	sp,sp,-20
1000f570:	dc800215 	stw	r18,8(sp)
1000f574:	dc400115 	stw	r17,4(sp)
1000f578:	dc000015 	stw	r16,0(sp)
1000f57c:	dfc00415 	stw	ra,16(sp)
1000f580:	dcc00315 	stw	r19,12(sp)
1000f584:	1c803fcc 	andi	r18,r3,255
1000f588:	2c01ffcc 	andi	r16,r5,2047
1000f58c:	5210b03a 	or	r8,r10,r8
1000f590:	202290fa 	slli	r17,r4,3
1000f594:	1081ffcc 	andi	r2,r2,2047
1000f598:	4b12b03a 	or	r9,r9,r12
1000f59c:	300c90fa 	slli	r6,r6,3
1000f5a0:	91c07526 	beq	r18,r7,1000f778 <__adddf3+0x23c>
1000f5a4:	8087c83a 	sub	r3,r16,r2
1000f5a8:	00c0ab0e 	bge	zero,r3,1000f858 <__adddf3+0x31c>
1000f5ac:	10002a1e 	bne	r2,zero,1000f658 <__adddf3+0x11c>
1000f5b0:	4984b03a 	or	r2,r9,r6
1000f5b4:	1000961e 	bne	r2,zero,1000f810 <__adddf3+0x2d4>
1000f5b8:	888001cc 	andi	r2,r17,7
1000f5bc:	10000726 	beq	r2,zero,1000f5dc <__adddf3+0xa0>
1000f5c0:	888003cc 	andi	r2,r17,15
1000f5c4:	00c00104 	movi	r3,4
1000f5c8:	10c00426 	beq	r2,r3,1000f5dc <__adddf3+0xa0>
1000f5cc:	88c7883a 	add	r3,r17,r3
1000f5d0:	1c63803a 	cmpltu	r17,r3,r17
1000f5d4:	4451883a 	add	r8,r8,r17
1000f5d8:	1823883a 	mov	r17,r3
1000f5dc:	4080202c 	andhi	r2,r8,128
1000f5e0:	10005926 	beq	r2,zero,1000f748 <__adddf3+0x20c>
1000f5e4:	84000044 	addi	r16,r16,1
1000f5e8:	0081ffc4 	movi	r2,2047
1000f5ec:	8080ba26 	beq	r16,r2,1000f8d8 <__adddf3+0x39c>
1000f5f0:	00bfe034 	movhi	r2,65408
1000f5f4:	10bfffc4 	addi	r2,r2,-1
1000f5f8:	4090703a 	and	r8,r8,r2
1000f5fc:	4004977a 	slli	r2,r8,29
1000f600:	4010927a 	slli	r8,r8,9
1000f604:	8822d0fa 	srli	r17,r17,3
1000f608:	8401ffcc 	andi	r16,r16,2047
1000f60c:	4010d33a 	srli	r8,r8,12
1000f610:	9007883a 	mov	r3,r18
1000f614:	1444b03a 	or	r2,r2,r17
1000f618:	8401ffcc 	andi	r16,r16,2047
1000f61c:	8020953a 	slli	r16,r16,20
1000f620:	18c03fcc 	andi	r3,r3,255
1000f624:	01000434 	movhi	r4,16
1000f628:	213fffc4 	addi	r4,r4,-1
1000f62c:	180697fa 	slli	r3,r3,31
1000f630:	4110703a 	and	r8,r8,r4
1000f634:	4410b03a 	or	r8,r8,r16
1000f638:	40c6b03a 	or	r3,r8,r3
1000f63c:	dfc00417 	ldw	ra,16(sp)
1000f640:	dcc00317 	ldw	r19,12(sp)
1000f644:	dc800217 	ldw	r18,8(sp)
1000f648:	dc400117 	ldw	r17,4(sp)
1000f64c:	dc000017 	ldw	r16,0(sp)
1000f650:	dec00504 	addi	sp,sp,20
1000f654:	f800283a 	ret
1000f658:	0081ffc4 	movi	r2,2047
1000f65c:	80bfd626 	beq	r16,r2,1000f5b8 <__alt_data_end+0xf800f5b8>
1000f660:	4a402034 	orhi	r9,r9,128
1000f664:	00800e04 	movi	r2,56
1000f668:	10c09f16 	blt	r2,r3,1000f8e8 <__adddf3+0x3ac>
1000f66c:	008007c4 	movi	r2,31
1000f670:	10c0c216 	blt	r2,r3,1000f97c <__adddf3+0x440>
1000f674:	00800804 	movi	r2,32
1000f678:	10c5c83a 	sub	r2,r2,r3
1000f67c:	488a983a 	sll	r5,r9,r2
1000f680:	30c8d83a 	srl	r4,r6,r3
1000f684:	3084983a 	sll	r2,r6,r2
1000f688:	48c6d83a 	srl	r3,r9,r3
1000f68c:	290cb03a 	or	r6,r5,r4
1000f690:	1004c03a 	cmpne	r2,r2,zero
1000f694:	308cb03a 	or	r6,r6,r2
1000f698:	898dc83a 	sub	r6,r17,r6
1000f69c:	89a3803a 	cmpltu	r17,r17,r6
1000f6a0:	40d1c83a 	sub	r8,r8,r3
1000f6a4:	4451c83a 	sub	r8,r8,r17
1000f6a8:	3023883a 	mov	r17,r6
1000f6ac:	4080202c 	andhi	r2,r8,128
1000f6b0:	10002326 	beq	r2,zero,1000f740 <__adddf3+0x204>
1000f6b4:	04c02034 	movhi	r19,128
1000f6b8:	9cffffc4 	addi	r19,r19,-1
1000f6bc:	44e6703a 	and	r19,r8,r19
1000f6c0:	98007626 	beq	r19,zero,1000f89c <__adddf3+0x360>
1000f6c4:	9809883a 	mov	r4,r19
1000f6c8:	0011d7c0 	call	10011d7c <__clzsi2>
1000f6cc:	10fffe04 	addi	r3,r2,-8
1000f6d0:	010007c4 	movi	r4,31
1000f6d4:	20c07716 	blt	r4,r3,1000f8b4 <__adddf3+0x378>
1000f6d8:	00800804 	movi	r2,32
1000f6dc:	10c5c83a 	sub	r2,r2,r3
1000f6e0:	8884d83a 	srl	r2,r17,r2
1000f6e4:	98d0983a 	sll	r8,r19,r3
1000f6e8:	88e2983a 	sll	r17,r17,r3
1000f6ec:	1204b03a 	or	r2,r2,r8
1000f6f0:	1c007416 	blt	r3,r16,1000f8c4 <__adddf3+0x388>
1000f6f4:	1c21c83a 	sub	r16,r3,r16
1000f6f8:	82000044 	addi	r8,r16,1
1000f6fc:	00c007c4 	movi	r3,31
1000f700:	1a009116 	blt	r3,r8,1000f948 <__adddf3+0x40c>
1000f704:	00c00804 	movi	r3,32
1000f708:	1a07c83a 	sub	r3,r3,r8
1000f70c:	8a08d83a 	srl	r4,r17,r8
1000f710:	88e2983a 	sll	r17,r17,r3
1000f714:	10c6983a 	sll	r3,r2,r3
1000f718:	1210d83a 	srl	r8,r2,r8
1000f71c:	8804c03a 	cmpne	r2,r17,zero
1000f720:	1906b03a 	or	r3,r3,r4
1000f724:	18a2b03a 	or	r17,r3,r2
1000f728:	0021883a 	mov	r16,zero
1000f72c:	003fa206 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
1000f730:	1890b03a 	or	r8,r3,r2
1000f734:	40017d26 	beq	r8,zero,1000fd2c <__adddf3+0x7f0>
1000f738:	1011883a 	mov	r8,r2
1000f73c:	1823883a 	mov	r17,r3
1000f740:	888001cc 	andi	r2,r17,7
1000f744:	103f9e1e 	bne	r2,zero,1000f5c0 <__alt_data_end+0xf800f5c0>
1000f748:	4004977a 	slli	r2,r8,29
1000f74c:	8822d0fa 	srli	r17,r17,3
1000f750:	4010d0fa 	srli	r8,r8,3
1000f754:	9007883a 	mov	r3,r18
1000f758:	1444b03a 	or	r2,r2,r17
1000f75c:	0101ffc4 	movi	r4,2047
1000f760:	81002426 	beq	r16,r4,1000f7f4 <__adddf3+0x2b8>
1000f764:	8120703a 	and	r16,r16,r4
1000f768:	01000434 	movhi	r4,16
1000f76c:	213fffc4 	addi	r4,r4,-1
1000f770:	4110703a 	and	r8,r8,r4
1000f774:	003fa806 	br	1000f618 <__alt_data_end+0xf800f618>
1000f778:	8089c83a 	sub	r4,r16,r2
1000f77c:	01005e0e 	bge	zero,r4,1000f8f8 <__adddf3+0x3bc>
1000f780:	10002b26 	beq	r2,zero,1000f830 <__adddf3+0x2f4>
1000f784:	0081ffc4 	movi	r2,2047
1000f788:	80bf8b26 	beq	r16,r2,1000f5b8 <__alt_data_end+0xf800f5b8>
1000f78c:	4a402034 	orhi	r9,r9,128
1000f790:	00800e04 	movi	r2,56
1000f794:	1100a40e 	bge	r2,r4,1000fa28 <__adddf3+0x4ec>
1000f798:	498cb03a 	or	r6,r9,r6
1000f79c:	300ac03a 	cmpne	r5,r6,zero
1000f7a0:	0013883a 	mov	r9,zero
1000f7a4:	2c4b883a 	add	r5,r5,r17
1000f7a8:	2c63803a 	cmpltu	r17,r5,r17
1000f7ac:	4a11883a 	add	r8,r9,r8
1000f7b0:	8a11883a 	add	r8,r17,r8
1000f7b4:	2823883a 	mov	r17,r5
1000f7b8:	4080202c 	andhi	r2,r8,128
1000f7bc:	103fe026 	beq	r2,zero,1000f740 <__alt_data_end+0xf800f740>
1000f7c0:	84000044 	addi	r16,r16,1
1000f7c4:	0081ffc4 	movi	r2,2047
1000f7c8:	8080d226 	beq	r16,r2,1000fb14 <__adddf3+0x5d8>
1000f7cc:	00bfe034 	movhi	r2,65408
1000f7d0:	10bfffc4 	addi	r2,r2,-1
1000f7d4:	4090703a 	and	r8,r8,r2
1000f7d8:	880ad07a 	srli	r5,r17,1
1000f7dc:	400897fa 	slli	r4,r8,31
1000f7e0:	88c0004c 	andi	r3,r17,1
1000f7e4:	28e2b03a 	or	r17,r5,r3
1000f7e8:	4010d07a 	srli	r8,r8,1
1000f7ec:	2462b03a 	or	r17,r4,r17
1000f7f0:	003f7106 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
1000f7f4:	4088b03a 	or	r4,r8,r2
1000f7f8:	20014526 	beq	r4,zero,1000fd10 <__adddf3+0x7d4>
1000f7fc:	01000434 	movhi	r4,16
1000f800:	42000234 	orhi	r8,r8,8
1000f804:	213fffc4 	addi	r4,r4,-1
1000f808:	4110703a 	and	r8,r8,r4
1000f80c:	003f8206 	br	1000f618 <__alt_data_end+0xf800f618>
1000f810:	18ffffc4 	addi	r3,r3,-1
1000f814:	1800491e 	bne	r3,zero,1000f93c <__adddf3+0x400>
1000f818:	898bc83a 	sub	r5,r17,r6
1000f81c:	8963803a 	cmpltu	r17,r17,r5
1000f820:	4251c83a 	sub	r8,r8,r9
1000f824:	4451c83a 	sub	r8,r8,r17
1000f828:	2823883a 	mov	r17,r5
1000f82c:	003f9f06 	br	1000f6ac <__alt_data_end+0xf800f6ac>
1000f830:	4984b03a 	or	r2,r9,r6
1000f834:	103f6026 	beq	r2,zero,1000f5b8 <__alt_data_end+0xf800f5b8>
1000f838:	213fffc4 	addi	r4,r4,-1
1000f83c:	2000931e 	bne	r4,zero,1000fa8c <__adddf3+0x550>
1000f840:	898d883a 	add	r6,r17,r6
1000f844:	3463803a 	cmpltu	r17,r6,r17
1000f848:	4251883a 	add	r8,r8,r9
1000f84c:	8a11883a 	add	r8,r17,r8
1000f850:	3023883a 	mov	r17,r6
1000f854:	003fd806 	br	1000f7b8 <__alt_data_end+0xf800f7b8>
1000f858:	1800541e 	bne	r3,zero,1000f9ac <__adddf3+0x470>
1000f85c:	80800044 	addi	r2,r16,1
1000f860:	1081ffcc 	andi	r2,r2,2047
1000f864:	00c00044 	movi	r3,1
1000f868:	1880a00e 	bge	r3,r2,1000faec <__adddf3+0x5b0>
1000f86c:	8989c83a 	sub	r4,r17,r6
1000f870:	8905803a 	cmpltu	r2,r17,r4
1000f874:	4267c83a 	sub	r19,r8,r9
1000f878:	98a7c83a 	sub	r19,r19,r2
1000f87c:	9880202c 	andhi	r2,r19,128
1000f880:	10006326 	beq	r2,zero,1000fa10 <__adddf3+0x4d4>
1000f884:	3463c83a 	sub	r17,r6,r17
1000f888:	4a07c83a 	sub	r3,r9,r8
1000f88c:	344d803a 	cmpltu	r6,r6,r17
1000f890:	19a7c83a 	sub	r19,r3,r6
1000f894:	3825883a 	mov	r18,r7
1000f898:	983f8a1e 	bne	r19,zero,1000f6c4 <__alt_data_end+0xf800f6c4>
1000f89c:	8809883a 	mov	r4,r17
1000f8a0:	0011d7c0 	call	10011d7c <__clzsi2>
1000f8a4:	10800804 	addi	r2,r2,32
1000f8a8:	10fffe04 	addi	r3,r2,-8
1000f8ac:	010007c4 	movi	r4,31
1000f8b0:	20ff890e 	bge	r4,r3,1000f6d8 <__alt_data_end+0xf800f6d8>
1000f8b4:	10bff604 	addi	r2,r2,-40
1000f8b8:	8884983a 	sll	r2,r17,r2
1000f8bc:	0023883a 	mov	r17,zero
1000f8c0:	1c3f8c0e 	bge	r3,r16,1000f6f4 <__alt_data_end+0xf800f6f4>
1000f8c4:	023fe034 	movhi	r8,65408
1000f8c8:	423fffc4 	addi	r8,r8,-1
1000f8cc:	80e1c83a 	sub	r16,r16,r3
1000f8d0:	1210703a 	and	r8,r2,r8
1000f8d4:	003f3806 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
1000f8d8:	9007883a 	mov	r3,r18
1000f8dc:	0011883a 	mov	r8,zero
1000f8e0:	0005883a 	mov	r2,zero
1000f8e4:	003f4c06 	br	1000f618 <__alt_data_end+0xf800f618>
1000f8e8:	498cb03a 	or	r6,r9,r6
1000f8ec:	300cc03a 	cmpne	r6,r6,zero
1000f8f0:	0007883a 	mov	r3,zero
1000f8f4:	003f6806 	br	1000f698 <__alt_data_end+0xf800f698>
1000f8f8:	20009c1e 	bne	r4,zero,1000fb6c <__adddf3+0x630>
1000f8fc:	80800044 	addi	r2,r16,1
1000f900:	1141ffcc 	andi	r5,r2,2047
1000f904:	01000044 	movi	r4,1
1000f908:	2140670e 	bge	r4,r5,1000faa8 <__adddf3+0x56c>
1000f90c:	0101ffc4 	movi	r4,2047
1000f910:	11007f26 	beq	r2,r4,1000fb10 <__adddf3+0x5d4>
1000f914:	898d883a 	add	r6,r17,r6
1000f918:	4247883a 	add	r3,r8,r9
1000f91c:	3451803a 	cmpltu	r8,r6,r17
1000f920:	40d1883a 	add	r8,r8,r3
1000f924:	402297fa 	slli	r17,r8,31
1000f928:	300cd07a 	srli	r6,r6,1
1000f92c:	4010d07a 	srli	r8,r8,1
1000f930:	1021883a 	mov	r16,r2
1000f934:	89a2b03a 	or	r17,r17,r6
1000f938:	003f1f06 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
1000f93c:	0081ffc4 	movi	r2,2047
1000f940:	80bf481e 	bne	r16,r2,1000f664 <__alt_data_end+0xf800f664>
1000f944:	003f1c06 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
1000f948:	843ff844 	addi	r16,r16,-31
1000f94c:	01000804 	movi	r4,32
1000f950:	1406d83a 	srl	r3,r2,r16
1000f954:	41005026 	beq	r8,r4,1000fa98 <__adddf3+0x55c>
1000f958:	01001004 	movi	r4,64
1000f95c:	2211c83a 	sub	r8,r4,r8
1000f960:	1204983a 	sll	r2,r2,r8
1000f964:	88a2b03a 	or	r17,r17,r2
1000f968:	8822c03a 	cmpne	r17,r17,zero
1000f96c:	1c62b03a 	or	r17,r3,r17
1000f970:	0011883a 	mov	r8,zero
1000f974:	0021883a 	mov	r16,zero
1000f978:	003f7106 	br	1000f740 <__alt_data_end+0xf800f740>
1000f97c:	193ff804 	addi	r4,r3,-32
1000f980:	00800804 	movi	r2,32
1000f984:	4908d83a 	srl	r4,r9,r4
1000f988:	18804526 	beq	r3,r2,1000faa0 <__adddf3+0x564>
1000f98c:	00801004 	movi	r2,64
1000f990:	10c5c83a 	sub	r2,r2,r3
1000f994:	4886983a 	sll	r3,r9,r2
1000f998:	198cb03a 	or	r6,r3,r6
1000f99c:	300cc03a 	cmpne	r6,r6,zero
1000f9a0:	218cb03a 	or	r6,r4,r6
1000f9a4:	0007883a 	mov	r3,zero
1000f9a8:	003f3b06 	br	1000f698 <__alt_data_end+0xf800f698>
1000f9ac:	80002a26 	beq	r16,zero,1000fa58 <__adddf3+0x51c>
1000f9b0:	0101ffc4 	movi	r4,2047
1000f9b4:	11006826 	beq	r2,r4,1000fb58 <__adddf3+0x61c>
1000f9b8:	00c7c83a 	sub	r3,zero,r3
1000f9bc:	42002034 	orhi	r8,r8,128
1000f9c0:	01000e04 	movi	r4,56
1000f9c4:	20c07c16 	blt	r4,r3,1000fbb8 <__adddf3+0x67c>
1000f9c8:	010007c4 	movi	r4,31
1000f9cc:	20c0da16 	blt	r4,r3,1000fd38 <__adddf3+0x7fc>
1000f9d0:	01000804 	movi	r4,32
1000f9d4:	20c9c83a 	sub	r4,r4,r3
1000f9d8:	4114983a 	sll	r10,r8,r4
1000f9dc:	88cad83a 	srl	r5,r17,r3
1000f9e0:	8908983a 	sll	r4,r17,r4
1000f9e4:	40c6d83a 	srl	r3,r8,r3
1000f9e8:	5162b03a 	or	r17,r10,r5
1000f9ec:	2008c03a 	cmpne	r4,r4,zero
1000f9f0:	8922b03a 	or	r17,r17,r4
1000f9f4:	3463c83a 	sub	r17,r6,r17
1000f9f8:	48c7c83a 	sub	r3,r9,r3
1000f9fc:	344d803a 	cmpltu	r6,r6,r17
1000fa00:	1991c83a 	sub	r8,r3,r6
1000fa04:	1021883a 	mov	r16,r2
1000fa08:	3825883a 	mov	r18,r7
1000fa0c:	003f2706 	br	1000f6ac <__alt_data_end+0xf800f6ac>
1000fa10:	24d0b03a 	or	r8,r4,r19
1000fa14:	40001b1e 	bne	r8,zero,1000fa84 <__adddf3+0x548>
1000fa18:	0005883a 	mov	r2,zero
1000fa1c:	0007883a 	mov	r3,zero
1000fa20:	0021883a 	mov	r16,zero
1000fa24:	003f4d06 	br	1000f75c <__alt_data_end+0xf800f75c>
1000fa28:	008007c4 	movi	r2,31
1000fa2c:	11003c16 	blt	r2,r4,1000fb20 <__adddf3+0x5e4>
1000fa30:	00800804 	movi	r2,32
1000fa34:	1105c83a 	sub	r2,r2,r4
1000fa38:	488e983a 	sll	r7,r9,r2
1000fa3c:	310ad83a 	srl	r5,r6,r4
1000fa40:	3084983a 	sll	r2,r6,r2
1000fa44:	4912d83a 	srl	r9,r9,r4
1000fa48:	394ab03a 	or	r5,r7,r5
1000fa4c:	1004c03a 	cmpne	r2,r2,zero
1000fa50:	288ab03a 	or	r5,r5,r2
1000fa54:	003f5306 	br	1000f7a4 <__alt_data_end+0xf800f7a4>
1000fa58:	4448b03a 	or	r4,r8,r17
1000fa5c:	20003e26 	beq	r4,zero,1000fb58 <__adddf3+0x61c>
1000fa60:	00c6303a 	nor	r3,zero,r3
1000fa64:	18003a1e 	bne	r3,zero,1000fb50 <__adddf3+0x614>
1000fa68:	3463c83a 	sub	r17,r6,r17
1000fa6c:	4a07c83a 	sub	r3,r9,r8
1000fa70:	344d803a 	cmpltu	r6,r6,r17
1000fa74:	1991c83a 	sub	r8,r3,r6
1000fa78:	1021883a 	mov	r16,r2
1000fa7c:	3825883a 	mov	r18,r7
1000fa80:	003f0a06 	br	1000f6ac <__alt_data_end+0xf800f6ac>
1000fa84:	2023883a 	mov	r17,r4
1000fa88:	003f0d06 	br	1000f6c0 <__alt_data_end+0xf800f6c0>
1000fa8c:	0081ffc4 	movi	r2,2047
1000fa90:	80bf3f1e 	bne	r16,r2,1000f790 <__alt_data_end+0xf800f790>
1000fa94:	003ec806 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
1000fa98:	0005883a 	mov	r2,zero
1000fa9c:	003fb106 	br	1000f964 <__alt_data_end+0xf800f964>
1000faa0:	0007883a 	mov	r3,zero
1000faa4:	003fbc06 	br	1000f998 <__alt_data_end+0xf800f998>
1000faa8:	4444b03a 	or	r2,r8,r17
1000faac:	8000871e 	bne	r16,zero,1000fccc <__adddf3+0x790>
1000fab0:	1000ba26 	beq	r2,zero,1000fd9c <__adddf3+0x860>
1000fab4:	4984b03a 	or	r2,r9,r6
1000fab8:	103ebf26 	beq	r2,zero,1000f5b8 <__alt_data_end+0xf800f5b8>
1000fabc:	8985883a 	add	r2,r17,r6
1000fac0:	4247883a 	add	r3,r8,r9
1000fac4:	1451803a 	cmpltu	r8,r2,r17
1000fac8:	40d1883a 	add	r8,r8,r3
1000facc:	40c0202c 	andhi	r3,r8,128
1000fad0:	1023883a 	mov	r17,r2
1000fad4:	183f1a26 	beq	r3,zero,1000f740 <__alt_data_end+0xf800f740>
1000fad8:	00bfe034 	movhi	r2,65408
1000fadc:	10bfffc4 	addi	r2,r2,-1
1000fae0:	2021883a 	mov	r16,r4
1000fae4:	4090703a 	and	r8,r8,r2
1000fae8:	003eb306 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
1000faec:	4444b03a 	or	r2,r8,r17
1000faf0:	8000291e 	bne	r16,zero,1000fb98 <__adddf3+0x65c>
1000faf4:	10004b1e 	bne	r2,zero,1000fc24 <__adddf3+0x6e8>
1000faf8:	4990b03a 	or	r8,r9,r6
1000fafc:	40008b26 	beq	r8,zero,1000fd2c <__adddf3+0x7f0>
1000fb00:	4811883a 	mov	r8,r9
1000fb04:	3023883a 	mov	r17,r6
1000fb08:	3825883a 	mov	r18,r7
1000fb0c:	003eaa06 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
1000fb10:	1021883a 	mov	r16,r2
1000fb14:	0011883a 	mov	r8,zero
1000fb18:	0005883a 	mov	r2,zero
1000fb1c:	003f0f06 	br	1000f75c <__alt_data_end+0xf800f75c>
1000fb20:	217ff804 	addi	r5,r4,-32
1000fb24:	00800804 	movi	r2,32
1000fb28:	494ad83a 	srl	r5,r9,r5
1000fb2c:	20807d26 	beq	r4,r2,1000fd24 <__adddf3+0x7e8>
1000fb30:	00801004 	movi	r2,64
1000fb34:	1109c83a 	sub	r4,r2,r4
1000fb38:	4912983a 	sll	r9,r9,r4
1000fb3c:	498cb03a 	or	r6,r9,r6
1000fb40:	300cc03a 	cmpne	r6,r6,zero
1000fb44:	298ab03a 	or	r5,r5,r6
1000fb48:	0013883a 	mov	r9,zero
1000fb4c:	003f1506 	br	1000f7a4 <__alt_data_end+0xf800f7a4>
1000fb50:	0101ffc4 	movi	r4,2047
1000fb54:	113f9a1e 	bne	r2,r4,1000f9c0 <__alt_data_end+0xf800f9c0>
1000fb58:	4811883a 	mov	r8,r9
1000fb5c:	3023883a 	mov	r17,r6
1000fb60:	1021883a 	mov	r16,r2
1000fb64:	3825883a 	mov	r18,r7
1000fb68:	003e9306 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
1000fb6c:	8000161e 	bne	r16,zero,1000fbc8 <__adddf3+0x68c>
1000fb70:	444ab03a 	or	r5,r8,r17
1000fb74:	28005126 	beq	r5,zero,1000fcbc <__adddf3+0x780>
1000fb78:	0108303a 	nor	r4,zero,r4
1000fb7c:	20004d1e 	bne	r4,zero,1000fcb4 <__adddf3+0x778>
1000fb80:	89a3883a 	add	r17,r17,r6
1000fb84:	4253883a 	add	r9,r8,r9
1000fb88:	898d803a 	cmpltu	r6,r17,r6
1000fb8c:	3251883a 	add	r8,r6,r9
1000fb90:	1021883a 	mov	r16,r2
1000fb94:	003f0806 	br	1000f7b8 <__alt_data_end+0xf800f7b8>
1000fb98:	1000301e 	bne	r2,zero,1000fc5c <__adddf3+0x720>
1000fb9c:	4984b03a 	or	r2,r9,r6
1000fba0:	10007126 	beq	r2,zero,1000fd68 <__adddf3+0x82c>
1000fba4:	4811883a 	mov	r8,r9
1000fba8:	3023883a 	mov	r17,r6
1000fbac:	3825883a 	mov	r18,r7
1000fbb0:	0401ffc4 	movi	r16,2047
1000fbb4:	003e8006 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
1000fbb8:	4462b03a 	or	r17,r8,r17
1000fbbc:	8822c03a 	cmpne	r17,r17,zero
1000fbc0:	0007883a 	mov	r3,zero
1000fbc4:	003f8b06 	br	1000f9f4 <__alt_data_end+0xf800f9f4>
1000fbc8:	0141ffc4 	movi	r5,2047
1000fbcc:	11403b26 	beq	r2,r5,1000fcbc <__adddf3+0x780>
1000fbd0:	0109c83a 	sub	r4,zero,r4
1000fbd4:	42002034 	orhi	r8,r8,128
1000fbd8:	01400e04 	movi	r5,56
1000fbdc:	29006716 	blt	r5,r4,1000fd7c <__adddf3+0x840>
1000fbe0:	014007c4 	movi	r5,31
1000fbe4:	29007016 	blt	r5,r4,1000fda8 <__adddf3+0x86c>
1000fbe8:	01400804 	movi	r5,32
1000fbec:	290bc83a 	sub	r5,r5,r4
1000fbf0:	4154983a 	sll	r10,r8,r5
1000fbf4:	890ed83a 	srl	r7,r17,r4
1000fbf8:	894a983a 	sll	r5,r17,r5
1000fbfc:	4108d83a 	srl	r4,r8,r4
1000fc00:	51e2b03a 	or	r17,r10,r7
1000fc04:	280ac03a 	cmpne	r5,r5,zero
1000fc08:	8962b03a 	or	r17,r17,r5
1000fc0c:	89a3883a 	add	r17,r17,r6
1000fc10:	2253883a 	add	r9,r4,r9
1000fc14:	898d803a 	cmpltu	r6,r17,r6
1000fc18:	3251883a 	add	r8,r6,r9
1000fc1c:	1021883a 	mov	r16,r2
1000fc20:	003ee506 	br	1000f7b8 <__alt_data_end+0xf800f7b8>
1000fc24:	4984b03a 	or	r2,r9,r6
1000fc28:	103e6326 	beq	r2,zero,1000f5b8 <__alt_data_end+0xf800f5b8>
1000fc2c:	8987c83a 	sub	r3,r17,r6
1000fc30:	88c9803a 	cmpltu	r4,r17,r3
1000fc34:	4245c83a 	sub	r2,r8,r9
1000fc38:	1105c83a 	sub	r2,r2,r4
1000fc3c:	1100202c 	andhi	r4,r2,128
1000fc40:	203ebb26 	beq	r4,zero,1000f730 <__alt_data_end+0xf800f730>
1000fc44:	3463c83a 	sub	r17,r6,r17
1000fc48:	4a07c83a 	sub	r3,r9,r8
1000fc4c:	344d803a 	cmpltu	r6,r6,r17
1000fc50:	1991c83a 	sub	r8,r3,r6
1000fc54:	3825883a 	mov	r18,r7
1000fc58:	003e5706 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
1000fc5c:	4984b03a 	or	r2,r9,r6
1000fc60:	10002e26 	beq	r2,zero,1000fd1c <__adddf3+0x7e0>
1000fc64:	4004d0fa 	srli	r2,r8,3
1000fc68:	8822d0fa 	srli	r17,r17,3
1000fc6c:	4010977a 	slli	r8,r8,29
1000fc70:	10c0022c 	andhi	r3,r2,8
1000fc74:	4462b03a 	or	r17,r8,r17
1000fc78:	18000826 	beq	r3,zero,1000fc9c <__adddf3+0x760>
1000fc7c:	4808d0fa 	srli	r4,r9,3
1000fc80:	20c0022c 	andhi	r3,r4,8
1000fc84:	1800051e 	bne	r3,zero,1000fc9c <__adddf3+0x760>
1000fc88:	300cd0fa 	srli	r6,r6,3
1000fc8c:	4806977a 	slli	r3,r9,29
1000fc90:	2005883a 	mov	r2,r4
1000fc94:	3825883a 	mov	r18,r7
1000fc98:	19a2b03a 	or	r17,r3,r6
1000fc9c:	8810d77a 	srli	r8,r17,29
1000fca0:	100490fa 	slli	r2,r2,3
1000fca4:	882290fa 	slli	r17,r17,3
1000fca8:	0401ffc4 	movi	r16,2047
1000fcac:	4090b03a 	or	r8,r8,r2
1000fcb0:	003e4106 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
1000fcb4:	0141ffc4 	movi	r5,2047
1000fcb8:	117fc71e 	bne	r2,r5,1000fbd8 <__alt_data_end+0xf800fbd8>
1000fcbc:	4811883a 	mov	r8,r9
1000fcc0:	3023883a 	mov	r17,r6
1000fcc4:	1021883a 	mov	r16,r2
1000fcc8:	003e3b06 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
1000fccc:	10002f26 	beq	r2,zero,1000fd8c <__adddf3+0x850>
1000fcd0:	4984b03a 	or	r2,r9,r6
1000fcd4:	10001126 	beq	r2,zero,1000fd1c <__adddf3+0x7e0>
1000fcd8:	4004d0fa 	srli	r2,r8,3
1000fcdc:	8822d0fa 	srli	r17,r17,3
1000fce0:	4010977a 	slli	r8,r8,29
1000fce4:	10c0022c 	andhi	r3,r2,8
1000fce8:	4462b03a 	or	r17,r8,r17
1000fcec:	183feb26 	beq	r3,zero,1000fc9c <__alt_data_end+0xf800fc9c>
1000fcf0:	4808d0fa 	srli	r4,r9,3
1000fcf4:	20c0022c 	andhi	r3,r4,8
1000fcf8:	183fe81e 	bne	r3,zero,1000fc9c <__alt_data_end+0xf800fc9c>
1000fcfc:	300cd0fa 	srli	r6,r6,3
1000fd00:	4806977a 	slli	r3,r9,29
1000fd04:	2005883a 	mov	r2,r4
1000fd08:	19a2b03a 	or	r17,r3,r6
1000fd0c:	003fe306 	br	1000fc9c <__alt_data_end+0xf800fc9c>
1000fd10:	0011883a 	mov	r8,zero
1000fd14:	0005883a 	mov	r2,zero
1000fd18:	003e3f06 	br	1000f618 <__alt_data_end+0xf800f618>
1000fd1c:	0401ffc4 	movi	r16,2047
1000fd20:	003e2506 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
1000fd24:	0013883a 	mov	r9,zero
1000fd28:	003f8406 	br	1000fb3c <__alt_data_end+0xf800fb3c>
1000fd2c:	0005883a 	mov	r2,zero
1000fd30:	0007883a 	mov	r3,zero
1000fd34:	003e8906 	br	1000f75c <__alt_data_end+0xf800f75c>
1000fd38:	197ff804 	addi	r5,r3,-32
1000fd3c:	01000804 	movi	r4,32
1000fd40:	414ad83a 	srl	r5,r8,r5
1000fd44:	19002426 	beq	r3,r4,1000fdd8 <__adddf3+0x89c>
1000fd48:	01001004 	movi	r4,64
1000fd4c:	20c7c83a 	sub	r3,r4,r3
1000fd50:	40c6983a 	sll	r3,r8,r3
1000fd54:	1c46b03a 	or	r3,r3,r17
1000fd58:	1806c03a 	cmpne	r3,r3,zero
1000fd5c:	28e2b03a 	or	r17,r5,r3
1000fd60:	0007883a 	mov	r3,zero
1000fd64:	003f2306 	br	1000f9f4 <__alt_data_end+0xf800f9f4>
1000fd68:	0007883a 	mov	r3,zero
1000fd6c:	5811883a 	mov	r8,r11
1000fd70:	00bfffc4 	movi	r2,-1
1000fd74:	0401ffc4 	movi	r16,2047
1000fd78:	003e7806 	br	1000f75c <__alt_data_end+0xf800f75c>
1000fd7c:	4462b03a 	or	r17,r8,r17
1000fd80:	8822c03a 	cmpne	r17,r17,zero
1000fd84:	0009883a 	mov	r4,zero
1000fd88:	003fa006 	br	1000fc0c <__alt_data_end+0xf800fc0c>
1000fd8c:	4811883a 	mov	r8,r9
1000fd90:	3023883a 	mov	r17,r6
1000fd94:	0401ffc4 	movi	r16,2047
1000fd98:	003e0706 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
1000fd9c:	4811883a 	mov	r8,r9
1000fda0:	3023883a 	mov	r17,r6
1000fda4:	003e0406 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
1000fda8:	21fff804 	addi	r7,r4,-32
1000fdac:	01400804 	movi	r5,32
1000fdb0:	41ced83a 	srl	r7,r8,r7
1000fdb4:	21400a26 	beq	r4,r5,1000fde0 <__adddf3+0x8a4>
1000fdb8:	01401004 	movi	r5,64
1000fdbc:	2909c83a 	sub	r4,r5,r4
1000fdc0:	4108983a 	sll	r4,r8,r4
1000fdc4:	2448b03a 	or	r4,r4,r17
1000fdc8:	2008c03a 	cmpne	r4,r4,zero
1000fdcc:	3922b03a 	or	r17,r7,r4
1000fdd0:	0009883a 	mov	r4,zero
1000fdd4:	003f8d06 	br	1000fc0c <__alt_data_end+0xf800fc0c>
1000fdd8:	0007883a 	mov	r3,zero
1000fddc:	003fdd06 	br	1000fd54 <__alt_data_end+0xf800fd54>
1000fde0:	0009883a 	mov	r4,zero
1000fde4:	003ff706 	br	1000fdc4 <__alt_data_end+0xf800fdc4>

1000fde8 <__divdf3>:
1000fde8:	defff004 	addi	sp,sp,-64
1000fdec:	dc800815 	stw	r18,32(sp)
1000fdf0:	2824d53a 	srli	r18,r5,20
1000fdf4:	dd800c15 	stw	r22,48(sp)
1000fdf8:	282cd7fa 	srli	r22,r5,31
1000fdfc:	dc000615 	stw	r16,24(sp)
1000fe00:	04000434 	movhi	r16,16
1000fe04:	843fffc4 	addi	r16,r16,-1
1000fe08:	dfc00f15 	stw	ra,60(sp)
1000fe0c:	df000e15 	stw	fp,56(sp)
1000fe10:	ddc00d15 	stw	r23,52(sp)
1000fe14:	dd400b15 	stw	r21,44(sp)
1000fe18:	dd000a15 	stw	r20,40(sp)
1000fe1c:	dcc00915 	stw	r19,36(sp)
1000fe20:	dc400715 	stw	r17,28(sp)
1000fe24:	9481ffcc 	andi	r18,r18,2047
1000fe28:	2c20703a 	and	r16,r5,r16
1000fe2c:	b2003fcc 	andi	r8,r22,255
1000fe30:	90006126 	beq	r18,zero,1000ffb8 <__divdf3+0x1d0>
1000fe34:	0081ffc4 	movi	r2,2047
1000fe38:	202b883a 	mov	r21,r4
1000fe3c:	90803726 	beq	r18,r2,1000ff1c <__divdf3+0x134>
1000fe40:	80800434 	orhi	r2,r16,16
1000fe44:	100490fa 	slli	r2,r2,3
1000fe48:	2020d77a 	srli	r16,r4,29
1000fe4c:	202a90fa 	slli	r21,r4,3
1000fe50:	94bf0044 	addi	r18,r18,-1023
1000fe54:	80a0b03a 	or	r16,r16,r2
1000fe58:	0013883a 	mov	r9,zero
1000fe5c:	000b883a 	mov	r5,zero
1000fe60:	3806d53a 	srli	r3,r7,20
1000fe64:	382ed7fa 	srli	r23,r7,31
1000fe68:	04400434 	movhi	r17,16
1000fe6c:	8c7fffc4 	addi	r17,r17,-1
1000fe70:	18c1ffcc 	andi	r3,r3,2047
1000fe74:	3029883a 	mov	r20,r6
1000fe78:	3c62703a 	and	r17,r7,r17
1000fe7c:	bf003fcc 	andi	fp,r23,255
1000fe80:	18006e26 	beq	r3,zero,1001003c <__divdf3+0x254>
1000fe84:	0081ffc4 	movi	r2,2047
1000fe88:	18806626 	beq	r3,r2,10010024 <__divdf3+0x23c>
1000fe8c:	88800434 	orhi	r2,r17,16
1000fe90:	100490fa 	slli	r2,r2,3
1000fe94:	3022d77a 	srli	r17,r6,29
1000fe98:	302890fa 	slli	r20,r6,3
1000fe9c:	18ff0044 	addi	r3,r3,-1023
1000fea0:	88a2b03a 	or	r17,r17,r2
1000fea4:	000f883a 	mov	r7,zero
1000fea8:	b5e6f03a 	xor	r19,r22,r23
1000feac:	3a4cb03a 	or	r6,r7,r9
1000feb0:	008003c4 	movi	r2,15
1000feb4:	9809883a 	mov	r4,r19
1000feb8:	90c7c83a 	sub	r3,r18,r3
1000febc:	9cc03fcc 	andi	r19,r19,255
1000fec0:	11809636 	bltu	r2,r6,1001011c <__divdf3+0x334>
1000fec4:	300c90ba 	slli	r6,r6,2
1000fec8:	00840074 	movhi	r2,4097
1000fecc:	10bfb704 	addi	r2,r2,-292
1000fed0:	308d883a 	add	r6,r6,r2
1000fed4:	30800017 	ldw	r2,0(r6)
1000fed8:	1000683a 	jmp	r2
1000fedc:	1001011c 	xori	zero,r2,1028
1000fee0:	1000ff54 	ori	zero,r2,1021
1000fee4:	1001010c 	andi	zero,r2,1028
1000fee8:	1000ff48 	cmpgei	zero,r2,1021
1000feec:	1001010c 	andi	zero,r2,1028
1000fef0:	100100e0 	cmpeqi	zero,r2,1027
1000fef4:	1001010c 	andi	zero,r2,1028
1000fef8:	1000ff48 	cmpgei	zero,r2,1021
1000fefc:	1000ff54 	ori	zero,r2,1021
1000ff00:	1000ff54 	ori	zero,r2,1021
1000ff04:	100100e0 	cmpeqi	zero,r2,1027
1000ff08:	1000ff48 	cmpgei	zero,r2,1021
1000ff0c:	1000ff38 	rdprs	zero,r2,1020
1000ff10:	1000ff38 	rdprs	zero,r2,1020
1000ff14:	1000ff38 	rdprs	zero,r2,1020
1000ff18:	100104a4 	muli	zero,r2,1042
1000ff1c:	2404b03a 	or	r2,r4,r16
1000ff20:	10006c1e 	bne	r2,zero,100100d4 <__divdf3+0x2ec>
1000ff24:	02400204 	movi	r9,8
1000ff28:	0021883a 	mov	r16,zero
1000ff2c:	002b883a 	mov	r21,zero
1000ff30:	01400084 	movi	r5,2
1000ff34:	003fca06 	br	1000fe60 <__alt_data_end+0xf800fe60>
1000ff38:	8023883a 	mov	r17,r16
1000ff3c:	a829883a 	mov	r20,r21
1000ff40:	4039883a 	mov	fp,r8
1000ff44:	280f883a 	mov	r7,r5
1000ff48:	00800084 	movi	r2,2
1000ff4c:	3881601e 	bne	r7,r2,100104d0 <__divdf3+0x6e8>
1000ff50:	e027883a 	mov	r19,fp
1000ff54:	9900004c 	andi	r4,r19,1
1000ff58:	0081ffc4 	movi	r2,2047
1000ff5c:	0021883a 	mov	r16,zero
1000ff60:	002b883a 	mov	r21,zero
1000ff64:	1004953a 	slli	r2,r2,20
1000ff68:	20c03fcc 	andi	r3,r4,255
1000ff6c:	01400434 	movhi	r5,16
1000ff70:	297fffc4 	addi	r5,r5,-1
1000ff74:	180697fa 	slli	r3,r3,31
1000ff78:	8160703a 	and	r16,r16,r5
1000ff7c:	80a0b03a 	or	r16,r16,r2
1000ff80:	80c6b03a 	or	r3,r16,r3
1000ff84:	a805883a 	mov	r2,r21
1000ff88:	dfc00f17 	ldw	ra,60(sp)
1000ff8c:	df000e17 	ldw	fp,56(sp)
1000ff90:	ddc00d17 	ldw	r23,52(sp)
1000ff94:	dd800c17 	ldw	r22,48(sp)
1000ff98:	dd400b17 	ldw	r21,44(sp)
1000ff9c:	dd000a17 	ldw	r20,40(sp)
1000ffa0:	dcc00917 	ldw	r19,36(sp)
1000ffa4:	dc800817 	ldw	r18,32(sp)
1000ffa8:	dc400717 	ldw	r17,28(sp)
1000ffac:	dc000617 	ldw	r16,24(sp)
1000ffb0:	dec01004 	addi	sp,sp,64
1000ffb4:	f800283a 	ret
1000ffb8:	2404b03a 	or	r2,r4,r16
1000ffbc:	2023883a 	mov	r17,r4
1000ffc0:	10003f26 	beq	r2,zero,100100c0 <__divdf3+0x2d8>
1000ffc4:	80015e26 	beq	r16,zero,10010540 <__divdf3+0x758>
1000ffc8:	8009883a 	mov	r4,r16
1000ffcc:	d9800215 	stw	r6,8(sp)
1000ffd0:	d9c00515 	stw	r7,20(sp)
1000ffd4:	da000415 	stw	r8,16(sp)
1000ffd8:	0011d7c0 	call	10011d7c <__clzsi2>
1000ffdc:	d9800217 	ldw	r6,8(sp)
1000ffe0:	d9c00517 	ldw	r7,20(sp)
1000ffe4:	da000417 	ldw	r8,16(sp)
1000ffe8:	113ffd44 	addi	r4,r2,-11
1000ffec:	00c00704 	movi	r3,28
1000fff0:	19014f16 	blt	r3,r4,10010530 <__divdf3+0x748>
1000fff4:	00c00744 	movi	r3,29
1000fff8:	157ffe04 	addi	r21,r2,-8
1000fffc:	1907c83a 	sub	r3,r3,r4
10010000:	8560983a 	sll	r16,r16,r21
10010004:	88c6d83a 	srl	r3,r17,r3
10010008:	8d6a983a 	sll	r21,r17,r21
1001000c:	1c20b03a 	or	r16,r3,r16
10010010:	1080fcc4 	addi	r2,r2,1011
10010014:	00a5c83a 	sub	r18,zero,r2
10010018:	0013883a 	mov	r9,zero
1001001c:	000b883a 	mov	r5,zero
10010020:	003f8f06 	br	1000fe60 <__alt_data_end+0xf800fe60>
10010024:	3444b03a 	or	r2,r6,r17
10010028:	1000231e 	bne	r2,zero,100100b8 <__divdf3+0x2d0>
1001002c:	0023883a 	mov	r17,zero
10010030:	0029883a 	mov	r20,zero
10010034:	01c00084 	movi	r7,2
10010038:	003f9b06 	br	1000fea8 <__alt_data_end+0xf800fea8>
1001003c:	3444b03a 	or	r2,r6,r17
10010040:	10001926 	beq	r2,zero,100100a8 <__divdf3+0x2c0>
10010044:	88014b26 	beq	r17,zero,10010574 <__divdf3+0x78c>
10010048:	8809883a 	mov	r4,r17
1001004c:	d9400115 	stw	r5,4(sp)
10010050:	d9800215 	stw	r6,8(sp)
10010054:	da000415 	stw	r8,16(sp)
10010058:	da400315 	stw	r9,12(sp)
1001005c:	0011d7c0 	call	10011d7c <__clzsi2>
10010060:	d9400117 	ldw	r5,4(sp)
10010064:	d9800217 	ldw	r6,8(sp)
10010068:	da000417 	ldw	r8,16(sp)
1001006c:	da400317 	ldw	r9,12(sp)
10010070:	113ffd44 	addi	r4,r2,-11
10010074:	00c00704 	movi	r3,28
10010078:	19013a16 	blt	r3,r4,10010564 <__divdf3+0x77c>
1001007c:	00c00744 	movi	r3,29
10010080:	153ffe04 	addi	r20,r2,-8
10010084:	1907c83a 	sub	r3,r3,r4
10010088:	8d22983a 	sll	r17,r17,r20
1001008c:	30c6d83a 	srl	r3,r6,r3
10010090:	3528983a 	sll	r20,r6,r20
10010094:	1c62b03a 	or	r17,r3,r17
10010098:	1080fcc4 	addi	r2,r2,1011
1001009c:	0087c83a 	sub	r3,zero,r2
100100a0:	000f883a 	mov	r7,zero
100100a4:	003f8006 	br	1000fea8 <__alt_data_end+0xf800fea8>
100100a8:	0023883a 	mov	r17,zero
100100ac:	0029883a 	mov	r20,zero
100100b0:	01c00044 	movi	r7,1
100100b4:	003f7c06 	br	1000fea8 <__alt_data_end+0xf800fea8>
100100b8:	01c000c4 	movi	r7,3
100100bc:	003f7a06 	br	1000fea8 <__alt_data_end+0xf800fea8>
100100c0:	02400104 	movi	r9,4
100100c4:	0021883a 	mov	r16,zero
100100c8:	002b883a 	mov	r21,zero
100100cc:	01400044 	movi	r5,1
100100d0:	003f6306 	br	1000fe60 <__alt_data_end+0xf800fe60>
100100d4:	02400304 	movi	r9,12
100100d8:	014000c4 	movi	r5,3
100100dc:	003f6006 	br	1000fe60 <__alt_data_end+0xf800fe60>
100100e0:	04000434 	movhi	r16,16
100100e4:	0009883a 	mov	r4,zero
100100e8:	843fffc4 	addi	r16,r16,-1
100100ec:	057fffc4 	movi	r21,-1
100100f0:	0081ffc4 	movi	r2,2047
100100f4:	003f9b06 	br	1000ff64 <__alt_data_end+0xf800ff64>
100100f8:	00c00044 	movi	r3,1
100100fc:	1887c83a 	sub	r3,r3,r2
10010100:	01000e04 	movi	r4,56
10010104:	20c1530e 	bge	r4,r3,10010654 <__divdf3+0x86c>
10010108:	9900004c 	andi	r4,r19,1
1001010c:	0005883a 	mov	r2,zero
10010110:	0021883a 	mov	r16,zero
10010114:	002b883a 	mov	r21,zero
10010118:	003f9206 	br	1000ff64 <__alt_data_end+0xf800ff64>
1001011c:	8c012e36 	bltu	r17,r16,100105d8 <__divdf3+0x7f0>
10010120:	84412c26 	beq	r16,r17,100105d4 <__divdf3+0x7ec>
10010124:	a82f883a 	mov	r23,r21
10010128:	18ffffc4 	addi	r3,r3,-1
1001012c:	002b883a 	mov	r21,zero
10010130:	a004d63a 	srli	r2,r20,24
10010134:	8822923a 	slli	r17,r17,8
10010138:	a028923a 	slli	r20,r20,8
1001013c:	8009883a 	mov	r4,r16
10010140:	88acb03a 	or	r22,r17,r2
10010144:	dd000015 	stw	r20,0(sp)
10010148:	b028d43a 	srli	r20,r22,16
1001014c:	d8c00215 	stw	r3,8(sp)
10010150:	b4bfffcc 	andi	r18,r22,65535
10010154:	a00b883a 	mov	r5,r20
10010158:	0004f980 	call	10004f98 <__udivsi3>
1001015c:	100b883a 	mov	r5,r2
10010160:	9009883a 	mov	r4,r18
10010164:	1023883a 	mov	r17,r2
10010168:	00050540 	call	10005054 <__mulsi3>
1001016c:	8009883a 	mov	r4,r16
10010170:	a00b883a 	mov	r5,r20
10010174:	1039883a 	mov	fp,r2
10010178:	0004ffc0 	call	10004ffc <__umodsi3>
1001017c:	1004943a 	slli	r2,r2,16
10010180:	b808d43a 	srli	r4,r23,16
10010184:	d8c00217 	ldw	r3,8(sp)
10010188:	2084b03a 	or	r2,r4,r2
1001018c:	1700062e 	bgeu	r2,fp,100101a8 <__divdf3+0x3c0>
10010190:	1585883a 	add	r2,r2,r22
10010194:	893fffc4 	addi	r4,r17,-1
10010198:	15811d36 	bltu	r2,r22,10010610 <__divdf3+0x828>
1001019c:	17011c2e 	bgeu	r2,fp,10010610 <__divdf3+0x828>
100101a0:	8c7fff84 	addi	r17,r17,-2
100101a4:	1585883a 	add	r2,r2,r22
100101a8:	1739c83a 	sub	fp,r2,fp
100101ac:	a00b883a 	mov	r5,r20
100101b0:	e009883a 	mov	r4,fp
100101b4:	d8c00215 	stw	r3,8(sp)
100101b8:	0004f980 	call	10004f98 <__udivsi3>
100101bc:	100b883a 	mov	r5,r2
100101c0:	9009883a 	mov	r4,r18
100101c4:	1021883a 	mov	r16,r2
100101c8:	00050540 	call	10005054 <__mulsi3>
100101cc:	a00b883a 	mov	r5,r20
100101d0:	e009883a 	mov	r4,fp
100101d4:	d8800415 	stw	r2,16(sp)
100101d8:	0004ffc0 	call	10004ffc <__umodsi3>
100101dc:	1004943a 	slli	r2,r2,16
100101e0:	da000417 	ldw	r8,16(sp)
100101e4:	bdffffcc 	andi	r23,r23,65535
100101e8:	b884b03a 	or	r2,r23,r2
100101ec:	d8c00217 	ldw	r3,8(sp)
100101f0:	1200062e 	bgeu	r2,r8,1001020c <__divdf3+0x424>
100101f4:	1585883a 	add	r2,r2,r22
100101f8:	813fffc4 	addi	r4,r16,-1
100101fc:	15810236 	bltu	r2,r22,10010608 <__divdf3+0x820>
10010200:	1201012e 	bgeu	r2,r8,10010608 <__divdf3+0x820>
10010204:	843fff84 	addi	r16,r16,-2
10010208:	1585883a 	add	r2,r2,r22
1001020c:	8822943a 	slli	r17,r17,16
10010210:	d9800017 	ldw	r6,0(sp)
10010214:	1211c83a 	sub	r8,r2,r8
10010218:	8c22b03a 	or	r17,r17,r16
1001021c:	373fffcc 	andi	fp,r6,65535
10010220:	8abfffcc 	andi	r10,r17,65535
10010224:	8820d43a 	srli	r16,r17,16
10010228:	5009883a 	mov	r4,r10
1001022c:	e00b883a 	mov	r5,fp
10010230:	302ed43a 	srli	r23,r6,16
10010234:	d8c00215 	stw	r3,8(sp)
10010238:	da000415 	stw	r8,16(sp)
1001023c:	da800115 	stw	r10,4(sp)
10010240:	00050540 	call	10005054 <__mulsi3>
10010244:	800b883a 	mov	r5,r16
10010248:	e009883a 	mov	r4,fp
1001024c:	d8800515 	stw	r2,20(sp)
10010250:	00050540 	call	10005054 <__mulsi3>
10010254:	8009883a 	mov	r4,r16
10010258:	b80b883a 	mov	r5,r23
1001025c:	d8800315 	stw	r2,12(sp)
10010260:	00050540 	call	10005054 <__mulsi3>
10010264:	da800117 	ldw	r10,4(sp)
10010268:	b80b883a 	mov	r5,r23
1001026c:	1021883a 	mov	r16,r2
10010270:	5009883a 	mov	r4,r10
10010274:	00050540 	call	10005054 <__mulsi3>
10010278:	d9c00517 	ldw	r7,20(sp)
1001027c:	da400317 	ldw	r9,12(sp)
10010280:	d8c00217 	ldw	r3,8(sp)
10010284:	3808d43a 	srli	r4,r7,16
10010288:	1245883a 	add	r2,r2,r9
1001028c:	da000417 	ldw	r8,16(sp)
10010290:	2085883a 	add	r2,r4,r2
10010294:	1240022e 	bgeu	r2,r9,100102a0 <__divdf3+0x4b8>
10010298:	01000074 	movhi	r4,1
1001029c:	8121883a 	add	r16,r16,r4
100102a0:	1008d43a 	srli	r4,r2,16
100102a4:	1004943a 	slli	r2,r2,16
100102a8:	39ffffcc 	andi	r7,r7,65535
100102ac:	2409883a 	add	r4,r4,r16
100102b0:	11c5883a 	add	r2,r2,r7
100102b4:	4100bb36 	bltu	r8,r4,100105a4 <__divdf3+0x7bc>
100102b8:	4100d726 	beq	r8,r4,10010618 <__divdf3+0x830>
100102bc:	4109c83a 	sub	r4,r8,r4
100102c0:	a8a1c83a 	sub	r16,r21,r2
100102c4:	ac2b803a 	cmpltu	r21,r21,r16
100102c8:	256bc83a 	sub	r21,r4,r21
100102cc:	b540d926 	beq	r22,r21,10010634 <__divdf3+0x84c>
100102d0:	a00b883a 	mov	r5,r20
100102d4:	a809883a 	mov	r4,r21
100102d8:	d8c00215 	stw	r3,8(sp)
100102dc:	0004f980 	call	10004f98 <__udivsi3>
100102e0:	100b883a 	mov	r5,r2
100102e4:	9009883a 	mov	r4,r18
100102e8:	d8800515 	stw	r2,20(sp)
100102ec:	00050540 	call	10005054 <__mulsi3>
100102f0:	a809883a 	mov	r4,r21
100102f4:	a00b883a 	mov	r5,r20
100102f8:	d8800415 	stw	r2,16(sp)
100102fc:	0004ffc0 	call	10004ffc <__umodsi3>
10010300:	1004943a 	slli	r2,r2,16
10010304:	8008d43a 	srli	r4,r16,16
10010308:	da000417 	ldw	r8,16(sp)
1001030c:	d8c00217 	ldw	r3,8(sp)
10010310:	2084b03a 	or	r2,r4,r2
10010314:	d9c00517 	ldw	r7,20(sp)
10010318:	1200062e 	bgeu	r2,r8,10010334 <__divdf3+0x54c>
1001031c:	1585883a 	add	r2,r2,r22
10010320:	393fffc4 	addi	r4,r7,-1
10010324:	1580c536 	bltu	r2,r22,1001063c <__divdf3+0x854>
10010328:	1200c42e 	bgeu	r2,r8,1001063c <__divdf3+0x854>
1001032c:	39ffff84 	addi	r7,r7,-2
10010330:	1585883a 	add	r2,r2,r22
10010334:	122bc83a 	sub	r21,r2,r8
10010338:	a00b883a 	mov	r5,r20
1001033c:	a809883a 	mov	r4,r21
10010340:	d8c00215 	stw	r3,8(sp)
10010344:	d9c00515 	stw	r7,20(sp)
10010348:	0004f980 	call	10004f98 <__udivsi3>
1001034c:	9009883a 	mov	r4,r18
10010350:	100b883a 	mov	r5,r2
10010354:	d8800415 	stw	r2,16(sp)
10010358:	00050540 	call	10005054 <__mulsi3>
1001035c:	a809883a 	mov	r4,r21
10010360:	a00b883a 	mov	r5,r20
10010364:	1025883a 	mov	r18,r2
10010368:	0004ffc0 	call	10004ffc <__umodsi3>
1001036c:	1004943a 	slli	r2,r2,16
10010370:	813fffcc 	andi	r4,r16,65535
10010374:	d8c00217 	ldw	r3,8(sp)
10010378:	20a0b03a 	or	r16,r4,r2
1001037c:	d9c00517 	ldw	r7,20(sp)
10010380:	da000417 	ldw	r8,16(sp)
10010384:	8480062e 	bgeu	r16,r18,100103a0 <__divdf3+0x5b8>
10010388:	85a1883a 	add	r16,r16,r22
1001038c:	40bfffc4 	addi	r2,r8,-1
10010390:	8580ac36 	bltu	r16,r22,10010644 <__divdf3+0x85c>
10010394:	8480ab2e 	bgeu	r16,r18,10010644 <__divdf3+0x85c>
10010398:	423fff84 	addi	r8,r8,-2
1001039c:	85a1883a 	add	r16,r16,r22
100103a0:	3804943a 	slli	r2,r7,16
100103a4:	84a1c83a 	sub	r16,r16,r18
100103a8:	e009883a 	mov	r4,fp
100103ac:	1228b03a 	or	r20,r2,r8
100103b0:	a1ffffcc 	andi	r7,r20,65535
100103b4:	a024d43a 	srli	r18,r20,16
100103b8:	380b883a 	mov	r5,r7
100103bc:	d8c00215 	stw	r3,8(sp)
100103c0:	d9c00515 	stw	r7,20(sp)
100103c4:	00050540 	call	10005054 <__mulsi3>
100103c8:	900b883a 	mov	r5,r18
100103cc:	e009883a 	mov	r4,fp
100103d0:	102b883a 	mov	r21,r2
100103d4:	00050540 	call	10005054 <__mulsi3>
100103d8:	900b883a 	mov	r5,r18
100103dc:	b809883a 	mov	r4,r23
100103e0:	1039883a 	mov	fp,r2
100103e4:	00050540 	call	10005054 <__mulsi3>
100103e8:	d9c00517 	ldw	r7,20(sp)
100103ec:	b80b883a 	mov	r5,r23
100103f0:	1025883a 	mov	r18,r2
100103f4:	3809883a 	mov	r4,r7
100103f8:	00050540 	call	10005054 <__mulsi3>
100103fc:	a808d43a 	srli	r4,r21,16
10010400:	1705883a 	add	r2,r2,fp
10010404:	d8c00217 	ldw	r3,8(sp)
10010408:	2085883a 	add	r2,r4,r2
1001040c:	1700022e 	bgeu	r2,fp,10010418 <__divdf3+0x630>
10010410:	01000074 	movhi	r4,1
10010414:	9125883a 	add	r18,r18,r4
10010418:	1008d43a 	srli	r4,r2,16
1001041c:	1004943a 	slli	r2,r2,16
10010420:	ad7fffcc 	andi	r21,r21,65535
10010424:	2489883a 	add	r4,r4,r18
10010428:	1545883a 	add	r2,r2,r21
1001042c:	81003836 	bltu	r16,r4,10010510 <__divdf3+0x728>
10010430:	81003626 	beq	r16,r4,1001050c <__divdf3+0x724>
10010434:	a5000054 	ori	r20,r20,1
10010438:	1880ffc4 	addi	r2,r3,1023
1001043c:	00bf2e0e 	bge	zero,r2,100100f8 <__alt_data_end+0xf80100f8>
10010440:	a10001cc 	andi	r4,r20,7
10010444:	20000726 	beq	r4,zero,10010464 <__divdf3+0x67c>
10010448:	a10003cc 	andi	r4,r20,15
1001044c:	01400104 	movi	r5,4
10010450:	21400426 	beq	r4,r5,10010464 <__divdf3+0x67c>
10010454:	a149883a 	add	r4,r20,r5
10010458:	2529803a 	cmpltu	r20,r4,r20
1001045c:	8d23883a 	add	r17,r17,r20
10010460:	2029883a 	mov	r20,r4
10010464:	8900402c 	andhi	r4,r17,256
10010468:	20000426 	beq	r4,zero,1001047c <__divdf3+0x694>
1001046c:	18810004 	addi	r2,r3,1024
10010470:	00ffc034 	movhi	r3,65280
10010474:	18ffffc4 	addi	r3,r3,-1
10010478:	88e2703a 	and	r17,r17,r3
1001047c:	00c1ff84 	movi	r3,2046
10010480:	18beb416 	blt	r3,r2,1000ff54 <__alt_data_end+0xf800ff54>
10010484:	a028d0fa 	srli	r20,r20,3
10010488:	882a977a 	slli	r21,r17,29
1001048c:	8820927a 	slli	r16,r17,9
10010490:	1081ffcc 	andi	r2,r2,2047
10010494:	ad2ab03a 	or	r21,r21,r20
10010498:	8020d33a 	srli	r16,r16,12
1001049c:	9900004c 	andi	r4,r19,1
100104a0:	003eb006 	br	1000ff64 <__alt_data_end+0xf800ff64>
100104a4:	8080022c 	andhi	r2,r16,8
100104a8:	10001226 	beq	r2,zero,100104f4 <__divdf3+0x70c>
100104ac:	8880022c 	andhi	r2,r17,8
100104b0:	1000101e 	bne	r2,zero,100104f4 <__divdf3+0x70c>
100104b4:	00800434 	movhi	r2,16
100104b8:	8c000234 	orhi	r16,r17,8
100104bc:	10bfffc4 	addi	r2,r2,-1
100104c0:	b809883a 	mov	r4,r23
100104c4:	80a0703a 	and	r16,r16,r2
100104c8:	a02b883a 	mov	r21,r20
100104cc:	003f0806 	br	100100f0 <__alt_data_end+0xf80100f0>
100104d0:	008000c4 	movi	r2,3
100104d4:	3880b126 	beq	r7,r2,1001079c <__divdf3+0x9b4>
100104d8:	00800044 	movi	r2,1
100104dc:	38805b1e 	bne	r7,r2,1001064c <__divdf3+0x864>
100104e0:	e009883a 	mov	r4,fp
100104e4:	0005883a 	mov	r2,zero
100104e8:	0021883a 	mov	r16,zero
100104ec:	002b883a 	mov	r21,zero
100104f0:	003e9c06 	br	1000ff64 <__alt_data_end+0xf800ff64>
100104f4:	00800434 	movhi	r2,16
100104f8:	84000234 	orhi	r16,r16,8
100104fc:	10bfffc4 	addi	r2,r2,-1
10010500:	b009883a 	mov	r4,r22
10010504:	80a0703a 	and	r16,r16,r2
10010508:	003ef906 	br	100100f0 <__alt_data_end+0xf80100f0>
1001050c:	103fca26 	beq	r2,zero,10010438 <__alt_data_end+0xf8010438>
10010510:	b421883a 	add	r16,r22,r16
10010514:	a17fffc4 	addi	r5,r20,-1
10010518:	8580422e 	bgeu	r16,r22,10010624 <__divdf3+0x83c>
1001051c:	2829883a 	mov	r20,r5
10010520:	813fc41e 	bne	r16,r4,10010434 <__alt_data_end+0xf8010434>
10010524:	d9800017 	ldw	r6,0(sp)
10010528:	30bfc21e 	bne	r6,r2,10010434 <__alt_data_end+0xf8010434>
1001052c:	003fc206 	br	10010438 <__alt_data_end+0xf8010438>
10010530:	143ff604 	addi	r16,r2,-40
10010534:	8c20983a 	sll	r16,r17,r16
10010538:	002b883a 	mov	r21,zero
1001053c:	003eb406 	br	10010010 <__alt_data_end+0xf8010010>
10010540:	d9800215 	stw	r6,8(sp)
10010544:	d9c00515 	stw	r7,20(sp)
10010548:	da000415 	stw	r8,16(sp)
1001054c:	0011d7c0 	call	10011d7c <__clzsi2>
10010550:	10800804 	addi	r2,r2,32
10010554:	da000417 	ldw	r8,16(sp)
10010558:	d9c00517 	ldw	r7,20(sp)
1001055c:	d9800217 	ldw	r6,8(sp)
10010560:	003ea106 	br	1000ffe8 <__alt_data_end+0xf800ffe8>
10010564:	147ff604 	addi	r17,r2,-40
10010568:	3462983a 	sll	r17,r6,r17
1001056c:	0029883a 	mov	r20,zero
10010570:	003ec906 	br	10010098 <__alt_data_end+0xf8010098>
10010574:	3009883a 	mov	r4,r6
10010578:	d9400115 	stw	r5,4(sp)
1001057c:	d9800215 	stw	r6,8(sp)
10010580:	da000415 	stw	r8,16(sp)
10010584:	da400315 	stw	r9,12(sp)
10010588:	0011d7c0 	call	10011d7c <__clzsi2>
1001058c:	10800804 	addi	r2,r2,32
10010590:	da400317 	ldw	r9,12(sp)
10010594:	da000417 	ldw	r8,16(sp)
10010598:	d9800217 	ldw	r6,8(sp)
1001059c:	d9400117 	ldw	r5,4(sp)
100105a0:	003eb306 	br	10010070 <__alt_data_end+0xf8010070>
100105a4:	d9800017 	ldw	r6,0(sp)
100105a8:	a9ab883a 	add	r21,r21,r6
100105ac:	a98b803a 	cmpltu	r5,r21,r6
100105b0:	2d8b883a 	add	r5,r5,r22
100105b4:	2a11883a 	add	r8,r5,r8
100105b8:	897fffc4 	addi	r5,r17,-1
100105bc:	b2000c2e 	bgeu	r22,r8,100105f0 <__divdf3+0x808>
100105c0:	41003f36 	bltu	r8,r4,100106c0 <__divdf3+0x8d8>
100105c4:	22006c26 	beq	r4,r8,10010778 <__divdf3+0x990>
100105c8:	4109c83a 	sub	r4,r8,r4
100105cc:	2823883a 	mov	r17,r5
100105d0:	003f3b06 	br	100102c0 <__alt_data_end+0xf80102c0>
100105d4:	ad3ed336 	bltu	r21,r20,10010124 <__alt_data_end+0xf8010124>
100105d8:	a804d07a 	srli	r2,r21,1
100105dc:	802e97fa 	slli	r23,r16,31
100105e0:	a82a97fa 	slli	r21,r21,31
100105e4:	8020d07a 	srli	r16,r16,1
100105e8:	b8aeb03a 	or	r23,r23,r2
100105ec:	003ed006 	br	10010130 <__alt_data_end+0xf8010130>
100105f0:	b23ff51e 	bne	r22,r8,100105c8 <__alt_data_end+0xf80105c8>
100105f4:	d9800017 	ldw	r6,0(sp)
100105f8:	a9bff12e 	bgeu	r21,r6,100105c0 <__alt_data_end+0xf80105c0>
100105fc:	b109c83a 	sub	r4,r22,r4
10010600:	2823883a 	mov	r17,r5
10010604:	003f2e06 	br	100102c0 <__alt_data_end+0xf80102c0>
10010608:	2021883a 	mov	r16,r4
1001060c:	003eff06 	br	1001020c <__alt_data_end+0xf801020c>
10010610:	2023883a 	mov	r17,r4
10010614:	003ee406 	br	100101a8 <__alt_data_end+0xf80101a8>
10010618:	a8bfe236 	bltu	r21,r2,100105a4 <__alt_data_end+0xf80105a4>
1001061c:	0009883a 	mov	r4,zero
10010620:	003f2706 	br	100102c0 <__alt_data_end+0xf80102c0>
10010624:	81002d36 	bltu	r16,r4,100106dc <__divdf3+0x8f4>
10010628:	24005626 	beq	r4,r16,10010784 <__divdf3+0x99c>
1001062c:	2829883a 	mov	r20,r5
10010630:	003f8006 	br	10010434 <__alt_data_end+0xf8010434>
10010634:	053fffc4 	movi	r20,-1
10010638:	003f7f06 	br	10010438 <__alt_data_end+0xf8010438>
1001063c:	200f883a 	mov	r7,r4
10010640:	003f3c06 	br	10010334 <__alt_data_end+0xf8010334>
10010644:	1011883a 	mov	r8,r2
10010648:	003f5506 	br	100103a0 <__alt_data_end+0xf80103a0>
1001064c:	e027883a 	mov	r19,fp
10010650:	003f7906 	br	10010438 <__alt_data_end+0xf8010438>
10010654:	010007c4 	movi	r4,31
10010658:	20c02816 	blt	r4,r3,100106fc <__divdf3+0x914>
1001065c:	00800804 	movi	r2,32
10010660:	10c5c83a 	sub	r2,r2,r3
10010664:	888a983a 	sll	r5,r17,r2
10010668:	a0c8d83a 	srl	r4,r20,r3
1001066c:	a084983a 	sll	r2,r20,r2
10010670:	88e2d83a 	srl	r17,r17,r3
10010674:	2906b03a 	or	r3,r5,r4
10010678:	1004c03a 	cmpne	r2,r2,zero
1001067c:	1886b03a 	or	r3,r3,r2
10010680:	188001cc 	andi	r2,r3,7
10010684:	10000726 	beq	r2,zero,100106a4 <__divdf3+0x8bc>
10010688:	188003cc 	andi	r2,r3,15
1001068c:	01000104 	movi	r4,4
10010690:	11000426 	beq	r2,r4,100106a4 <__divdf3+0x8bc>
10010694:	1805883a 	mov	r2,r3
10010698:	10c00104 	addi	r3,r2,4
1001069c:	1885803a 	cmpltu	r2,r3,r2
100106a0:	88a3883a 	add	r17,r17,r2
100106a4:	8880202c 	andhi	r2,r17,128
100106a8:	10002926 	beq	r2,zero,10010750 <__divdf3+0x968>
100106ac:	9900004c 	andi	r4,r19,1
100106b0:	00800044 	movi	r2,1
100106b4:	0021883a 	mov	r16,zero
100106b8:	002b883a 	mov	r21,zero
100106bc:	003e2906 	br	1000ff64 <__alt_data_end+0xf800ff64>
100106c0:	d9800017 	ldw	r6,0(sp)
100106c4:	8c7fff84 	addi	r17,r17,-2
100106c8:	a9ab883a 	add	r21,r21,r6
100106cc:	a98b803a 	cmpltu	r5,r21,r6
100106d0:	2d8b883a 	add	r5,r5,r22
100106d4:	2a11883a 	add	r8,r5,r8
100106d8:	003ef806 	br	100102bc <__alt_data_end+0xf80102bc>
100106dc:	d9800017 	ldw	r6,0(sp)
100106e0:	318f883a 	add	r7,r6,r6
100106e4:	398b803a 	cmpltu	r5,r7,r6
100106e8:	2d8d883a 	add	r6,r5,r22
100106ec:	81a1883a 	add	r16,r16,r6
100106f0:	a17fff84 	addi	r5,r20,-2
100106f4:	d9c00015 	stw	r7,0(sp)
100106f8:	003f8806 	br	1001051c <__alt_data_end+0xf801051c>
100106fc:	013ff844 	movi	r4,-31
10010700:	2085c83a 	sub	r2,r4,r2
10010704:	8888d83a 	srl	r4,r17,r2
10010708:	00800804 	movi	r2,32
1001070c:	18802126 	beq	r3,r2,10010794 <__divdf3+0x9ac>
10010710:	04001004 	movi	r16,64
10010714:	80c7c83a 	sub	r3,r16,r3
10010718:	88e0983a 	sll	r16,r17,r3
1001071c:	8504b03a 	or	r2,r16,r20
10010720:	1004c03a 	cmpne	r2,r2,zero
10010724:	2084b03a 	or	r2,r4,r2
10010728:	144001cc 	andi	r17,r2,7
1001072c:	88000d1e 	bne	r17,zero,10010764 <__divdf3+0x97c>
10010730:	0021883a 	mov	r16,zero
10010734:	102ad0fa 	srli	r21,r2,3
10010738:	9900004c 	andi	r4,r19,1
1001073c:	0005883a 	mov	r2,zero
10010740:	ac6ab03a 	or	r21,r21,r17
10010744:	003e0706 	br	1000ff64 <__alt_data_end+0xf800ff64>
10010748:	1007883a 	mov	r3,r2
1001074c:	0023883a 	mov	r17,zero
10010750:	8820927a 	slli	r16,r17,9
10010754:	1805883a 	mov	r2,r3
10010758:	8822977a 	slli	r17,r17,29
1001075c:	8020d33a 	srli	r16,r16,12
10010760:	003ff406 	br	10010734 <__alt_data_end+0xf8010734>
10010764:	10c003cc 	andi	r3,r2,15
10010768:	01000104 	movi	r4,4
1001076c:	193ff626 	beq	r3,r4,10010748 <__alt_data_end+0xf8010748>
10010770:	0023883a 	mov	r17,zero
10010774:	003fc806 	br	10010698 <__alt_data_end+0xf8010698>
10010778:	a8bfd136 	bltu	r21,r2,100106c0 <__alt_data_end+0xf80106c0>
1001077c:	2823883a 	mov	r17,r5
10010780:	003fa606 	br	1001061c <__alt_data_end+0xf801061c>
10010784:	d9800017 	ldw	r6,0(sp)
10010788:	30bfd436 	bltu	r6,r2,100106dc <__alt_data_end+0xf80106dc>
1001078c:	2829883a 	mov	r20,r5
10010790:	003f6406 	br	10010524 <__alt_data_end+0xf8010524>
10010794:	0021883a 	mov	r16,zero
10010798:	003fe006 	br	1001071c <__alt_data_end+0xf801071c>
1001079c:	00800434 	movhi	r2,16
100107a0:	8c000234 	orhi	r16,r17,8
100107a4:	10bfffc4 	addi	r2,r2,-1
100107a8:	e009883a 	mov	r4,fp
100107ac:	80a0703a 	and	r16,r16,r2
100107b0:	a02b883a 	mov	r21,r20
100107b4:	003e4e06 	br	100100f0 <__alt_data_end+0xf80100f0>

100107b8 <__eqdf2>:
100107b8:	2804d53a 	srli	r2,r5,20
100107bc:	3806d53a 	srli	r3,r7,20
100107c0:	02000434 	movhi	r8,16
100107c4:	423fffc4 	addi	r8,r8,-1
100107c8:	1081ffcc 	andi	r2,r2,2047
100107cc:	0281ffc4 	movi	r10,2047
100107d0:	2a12703a 	and	r9,r5,r8
100107d4:	18c1ffcc 	andi	r3,r3,2047
100107d8:	3a10703a 	and	r8,r7,r8
100107dc:	280ad7fa 	srli	r5,r5,31
100107e0:	380ed7fa 	srli	r7,r7,31
100107e4:	12801026 	beq	r2,r10,10010828 <__eqdf2+0x70>
100107e8:	0281ffc4 	movi	r10,2047
100107ec:	1a800a26 	beq	r3,r10,10010818 <__eqdf2+0x60>
100107f0:	10c00226 	beq	r2,r3,100107fc <__eqdf2+0x44>
100107f4:	00800044 	movi	r2,1
100107f8:	f800283a 	ret
100107fc:	4a3ffd1e 	bne	r9,r8,100107f4 <__alt_data_end+0xf80107f4>
10010800:	21bffc1e 	bne	r4,r6,100107f4 <__alt_data_end+0xf80107f4>
10010804:	29c00c26 	beq	r5,r7,10010838 <__eqdf2+0x80>
10010808:	103ffa1e 	bne	r2,zero,100107f4 <__alt_data_end+0xf80107f4>
1001080c:	2244b03a 	or	r2,r4,r9
10010810:	1004c03a 	cmpne	r2,r2,zero
10010814:	f800283a 	ret
10010818:	3214b03a 	or	r10,r6,r8
1001081c:	503ff426 	beq	r10,zero,100107f0 <__alt_data_end+0xf80107f0>
10010820:	00800044 	movi	r2,1
10010824:	f800283a 	ret
10010828:	2254b03a 	or	r10,r4,r9
1001082c:	503fee26 	beq	r10,zero,100107e8 <__alt_data_end+0xf80107e8>
10010830:	00800044 	movi	r2,1
10010834:	f800283a 	ret
10010838:	0005883a 	mov	r2,zero
1001083c:	f800283a 	ret

10010840 <__gedf2>:
10010840:	2804d53a 	srli	r2,r5,20
10010844:	3806d53a 	srli	r3,r7,20
10010848:	02000434 	movhi	r8,16
1001084c:	423fffc4 	addi	r8,r8,-1
10010850:	1081ffcc 	andi	r2,r2,2047
10010854:	0241ffc4 	movi	r9,2047
10010858:	2a14703a 	and	r10,r5,r8
1001085c:	18c1ffcc 	andi	r3,r3,2047
10010860:	3a10703a 	and	r8,r7,r8
10010864:	280ad7fa 	srli	r5,r5,31
10010868:	380ed7fa 	srli	r7,r7,31
1001086c:	12401d26 	beq	r2,r9,100108e4 <__gedf2+0xa4>
10010870:	0241ffc4 	movi	r9,2047
10010874:	1a401226 	beq	r3,r9,100108c0 <__gedf2+0x80>
10010878:	1000081e 	bne	r2,zero,1001089c <__gedf2+0x5c>
1001087c:	2296b03a 	or	r11,r4,r10
10010880:	5813003a 	cmpeq	r9,r11,zero
10010884:	1800091e 	bne	r3,zero,100108ac <__gedf2+0x6c>
10010888:	3218b03a 	or	r12,r6,r8
1001088c:	6000071e 	bne	r12,zero,100108ac <__gedf2+0x6c>
10010890:	0005883a 	mov	r2,zero
10010894:	5800101e 	bne	r11,zero,100108d8 <__gedf2+0x98>
10010898:	f800283a 	ret
1001089c:	18000c1e 	bne	r3,zero,100108d0 <__gedf2+0x90>
100108a0:	3212b03a 	or	r9,r6,r8
100108a4:	48000c26 	beq	r9,zero,100108d8 <__gedf2+0x98>
100108a8:	0013883a 	mov	r9,zero
100108ac:	39c03fcc 	andi	r7,r7,255
100108b0:	48000826 	beq	r9,zero,100108d4 <__gedf2+0x94>
100108b4:	38000926 	beq	r7,zero,100108dc <__gedf2+0x9c>
100108b8:	00800044 	movi	r2,1
100108bc:	f800283a 	ret
100108c0:	3212b03a 	or	r9,r6,r8
100108c4:	483fec26 	beq	r9,zero,10010878 <__alt_data_end+0xf8010878>
100108c8:	00bfff84 	movi	r2,-2
100108cc:	f800283a 	ret
100108d0:	39c03fcc 	andi	r7,r7,255
100108d4:	29c00626 	beq	r5,r7,100108f0 <__gedf2+0xb0>
100108d8:	283ff726 	beq	r5,zero,100108b8 <__alt_data_end+0xf80108b8>
100108dc:	00bfffc4 	movi	r2,-1
100108e0:	f800283a 	ret
100108e4:	2292b03a 	or	r9,r4,r10
100108e8:	483fe126 	beq	r9,zero,10010870 <__alt_data_end+0xf8010870>
100108ec:	003ff606 	br	100108c8 <__alt_data_end+0xf80108c8>
100108f0:	18bff916 	blt	r3,r2,100108d8 <__alt_data_end+0xf80108d8>
100108f4:	10c00316 	blt	r2,r3,10010904 <__gedf2+0xc4>
100108f8:	42bff736 	bltu	r8,r10,100108d8 <__alt_data_end+0xf80108d8>
100108fc:	52000326 	beq	r10,r8,1001090c <__gedf2+0xcc>
10010900:	5200042e 	bgeu	r10,r8,10010914 <__gedf2+0xd4>
10010904:	283fec1e 	bne	r5,zero,100108b8 <__alt_data_end+0xf80108b8>
10010908:	003ff406 	br	100108dc <__alt_data_end+0xf80108dc>
1001090c:	313ff236 	bltu	r6,r4,100108d8 <__alt_data_end+0xf80108d8>
10010910:	21bffc36 	bltu	r4,r6,10010904 <__alt_data_end+0xf8010904>
10010914:	0005883a 	mov	r2,zero
10010918:	f800283a 	ret

1001091c <__ledf2>:
1001091c:	2804d53a 	srli	r2,r5,20
10010920:	3810d53a 	srli	r8,r7,20
10010924:	00c00434 	movhi	r3,16
10010928:	18ffffc4 	addi	r3,r3,-1
1001092c:	1081ffcc 	andi	r2,r2,2047
10010930:	0241ffc4 	movi	r9,2047
10010934:	28d4703a 	and	r10,r5,r3
10010938:	4201ffcc 	andi	r8,r8,2047
1001093c:	38c6703a 	and	r3,r7,r3
10010940:	280ad7fa 	srli	r5,r5,31
10010944:	380ed7fa 	srli	r7,r7,31
10010948:	12401f26 	beq	r2,r9,100109c8 <__ledf2+0xac>
1001094c:	0241ffc4 	movi	r9,2047
10010950:	42401426 	beq	r8,r9,100109a4 <__ledf2+0x88>
10010954:	1000091e 	bne	r2,zero,1001097c <__ledf2+0x60>
10010958:	2296b03a 	or	r11,r4,r10
1001095c:	5813003a 	cmpeq	r9,r11,zero
10010960:	29403fcc 	andi	r5,r5,255
10010964:	40000a1e 	bne	r8,zero,10010990 <__ledf2+0x74>
10010968:	30d8b03a 	or	r12,r6,r3
1001096c:	6000081e 	bne	r12,zero,10010990 <__ledf2+0x74>
10010970:	0005883a 	mov	r2,zero
10010974:	5800111e 	bne	r11,zero,100109bc <__ledf2+0xa0>
10010978:	f800283a 	ret
1001097c:	29403fcc 	andi	r5,r5,255
10010980:	40000c1e 	bne	r8,zero,100109b4 <__ledf2+0x98>
10010984:	30d2b03a 	or	r9,r6,r3
10010988:	48000c26 	beq	r9,zero,100109bc <__ledf2+0xa0>
1001098c:	0013883a 	mov	r9,zero
10010990:	39c03fcc 	andi	r7,r7,255
10010994:	48000826 	beq	r9,zero,100109b8 <__ledf2+0x9c>
10010998:	38001126 	beq	r7,zero,100109e0 <__ledf2+0xc4>
1001099c:	00800044 	movi	r2,1
100109a0:	f800283a 	ret
100109a4:	30d2b03a 	or	r9,r6,r3
100109a8:	483fea26 	beq	r9,zero,10010954 <__alt_data_end+0xf8010954>
100109ac:	00800084 	movi	r2,2
100109b0:	f800283a 	ret
100109b4:	39c03fcc 	andi	r7,r7,255
100109b8:	39400726 	beq	r7,r5,100109d8 <__ledf2+0xbc>
100109bc:	2800081e 	bne	r5,zero,100109e0 <__ledf2+0xc4>
100109c0:	00800044 	movi	r2,1
100109c4:	f800283a 	ret
100109c8:	2292b03a 	or	r9,r4,r10
100109cc:	483fdf26 	beq	r9,zero,1001094c <__alt_data_end+0xf801094c>
100109d0:	00800084 	movi	r2,2
100109d4:	f800283a 	ret
100109d8:	4080030e 	bge	r8,r2,100109e8 <__ledf2+0xcc>
100109dc:	383fef26 	beq	r7,zero,1001099c <__alt_data_end+0xf801099c>
100109e0:	00bfffc4 	movi	r2,-1
100109e4:	f800283a 	ret
100109e8:	123feb16 	blt	r2,r8,10010998 <__alt_data_end+0xf8010998>
100109ec:	1abff336 	bltu	r3,r10,100109bc <__alt_data_end+0xf80109bc>
100109f0:	50c00326 	beq	r10,r3,10010a00 <__ledf2+0xe4>
100109f4:	50c0042e 	bgeu	r10,r3,10010a08 <__ledf2+0xec>
100109f8:	283fe81e 	bne	r5,zero,1001099c <__alt_data_end+0xf801099c>
100109fc:	003ff806 	br	100109e0 <__alt_data_end+0xf80109e0>
10010a00:	313fee36 	bltu	r6,r4,100109bc <__alt_data_end+0xf80109bc>
10010a04:	21bffc36 	bltu	r4,r6,100109f8 <__alt_data_end+0xf80109f8>
10010a08:	0005883a 	mov	r2,zero
10010a0c:	f800283a 	ret

10010a10 <__muldf3>:
10010a10:	deffee04 	addi	sp,sp,-72
10010a14:	dd000c15 	stw	r20,48(sp)
10010a18:	2828d53a 	srli	r20,r5,20
10010a1c:	ddc00f15 	stw	r23,60(sp)
10010a20:	282ed7fa 	srli	r23,r5,31
10010a24:	dc000815 	stw	r16,32(sp)
10010a28:	04000434 	movhi	r16,16
10010a2c:	dcc00b15 	stw	r19,44(sp)
10010a30:	843fffc4 	addi	r16,r16,-1
10010a34:	dfc01115 	stw	ra,68(sp)
10010a38:	df001015 	stw	fp,64(sp)
10010a3c:	dd800e15 	stw	r22,56(sp)
10010a40:	dd400d15 	stw	r21,52(sp)
10010a44:	dc800a15 	stw	r18,40(sp)
10010a48:	dc400915 	stw	r17,36(sp)
10010a4c:	a501ffcc 	andi	r20,r20,2047
10010a50:	2c20703a 	and	r16,r5,r16
10010a54:	b827883a 	mov	r19,r23
10010a58:	ba403fcc 	andi	r9,r23,255
10010a5c:	a0006026 	beq	r20,zero,10010be0 <__muldf3+0x1d0>
10010a60:	0081ffc4 	movi	r2,2047
10010a64:	202d883a 	mov	r22,r4
10010a68:	a0803626 	beq	r20,r2,10010b44 <__muldf3+0x134>
10010a6c:	84000434 	orhi	r16,r16,16
10010a70:	200ad77a 	srli	r5,r4,29
10010a74:	800490fa 	slli	r2,r16,3
10010a78:	202c90fa 	slli	r22,r4,3
10010a7c:	a53f0044 	addi	r20,r20,-1023
10010a80:	28a0b03a 	or	r16,r5,r2
10010a84:	002b883a 	mov	r21,zero
10010a88:	000b883a 	mov	r5,zero
10010a8c:	3804d53a 	srli	r2,r7,20
10010a90:	3838d7fa 	srli	fp,r7,31
10010a94:	04400434 	movhi	r17,16
10010a98:	8c7fffc4 	addi	r17,r17,-1
10010a9c:	1081ffcc 	andi	r2,r2,2047
10010aa0:	3025883a 	mov	r18,r6
10010aa4:	3c62703a 	and	r17,r7,r17
10010aa8:	e2803fcc 	andi	r10,fp,255
10010aac:	10006d26 	beq	r2,zero,10010c64 <__muldf3+0x254>
10010ab0:	00c1ffc4 	movi	r3,2047
10010ab4:	10c06526 	beq	r2,r3,10010c4c <__muldf3+0x23c>
10010ab8:	8c400434 	orhi	r17,r17,16
10010abc:	300ed77a 	srli	r7,r6,29
10010ac0:	880690fa 	slli	r3,r17,3
10010ac4:	302490fa 	slli	r18,r6,3
10010ac8:	10bf0044 	addi	r2,r2,-1023
10010acc:	38e2b03a 	or	r17,r7,r3
10010ad0:	000f883a 	mov	r7,zero
10010ad4:	a087883a 	add	r3,r20,r2
10010ad8:	010003c4 	movi	r4,15
10010adc:	3d44b03a 	or	r2,r7,r21
10010ae0:	e5ccf03a 	xor	r6,fp,r23
10010ae4:	1a000044 	addi	r8,r3,1
10010ae8:	20809b36 	bltu	r4,r2,10010d58 <__muldf3+0x348>
10010aec:	100490ba 	slli	r2,r2,2
10010af0:	01040074 	movhi	r4,4097
10010af4:	2102c104 	addi	r4,r4,2820
10010af8:	1105883a 	add	r2,r2,r4
10010afc:	10800017 	ldw	r2,0(r2)
10010b00:	1000683a 	jmp	r2
10010b04:	10010d58 	cmpnei	zero,r2,1077
10010b08:	10010b64 	muli	zero,r2,1069
10010b0c:	10010b64 	muli	zero,r2,1069
10010b10:	10010b60 	cmpeqi	zero,r2,1069
10010b14:	10010d34 	orhi	zero,r2,1076
10010b18:	10010d34 	orhi	zero,r2,1076
10010b1c:	10010d1c 	xori	zero,r2,1076
10010b20:	10010b60 	cmpeqi	zero,r2,1069
10010b24:	10010d34 	orhi	zero,r2,1076
10010b28:	10010d1c 	xori	zero,r2,1076
10010b2c:	10010d34 	orhi	zero,r2,1076
10010b30:	10010b60 	cmpeqi	zero,r2,1069
10010b34:	10010d44 	addi	zero,r2,1077
10010b38:	10010d44 	addi	zero,r2,1077
10010b3c:	10010d44 	addi	zero,r2,1077
10010b40:	100110a4 	muli	zero,r2,1090
10010b44:	2404b03a 	or	r2,r4,r16
10010b48:	1000711e 	bne	r2,zero,10010d10 <__muldf3+0x300>
10010b4c:	05400204 	movi	r21,8
10010b50:	0021883a 	mov	r16,zero
10010b54:	002d883a 	mov	r22,zero
10010b58:	01400084 	movi	r5,2
10010b5c:	003fcb06 	br	10010a8c <__alt_data_end+0xf8010a8c>
10010b60:	500d883a 	mov	r6,r10
10010b64:	00800084 	movi	r2,2
10010b68:	38805926 	beq	r7,r2,10010cd0 <__muldf3+0x2c0>
10010b6c:	008000c4 	movi	r2,3
10010b70:	3881bb26 	beq	r7,r2,10011260 <__muldf3+0x850>
10010b74:	00800044 	movi	r2,1
10010b78:	3881961e 	bne	r7,r2,100111d4 <__muldf3+0x7c4>
10010b7c:	3027883a 	mov	r19,r6
10010b80:	0005883a 	mov	r2,zero
10010b84:	0021883a 	mov	r16,zero
10010b88:	002d883a 	mov	r22,zero
10010b8c:	1004953a 	slli	r2,r2,20
10010b90:	98c03fcc 	andi	r3,r19,255
10010b94:	04400434 	movhi	r17,16
10010b98:	8c7fffc4 	addi	r17,r17,-1
10010b9c:	180697fa 	slli	r3,r3,31
10010ba0:	8460703a 	and	r16,r16,r17
10010ba4:	80a0b03a 	or	r16,r16,r2
10010ba8:	80c6b03a 	or	r3,r16,r3
10010bac:	b005883a 	mov	r2,r22
10010bb0:	dfc01117 	ldw	ra,68(sp)
10010bb4:	df001017 	ldw	fp,64(sp)
10010bb8:	ddc00f17 	ldw	r23,60(sp)
10010bbc:	dd800e17 	ldw	r22,56(sp)
10010bc0:	dd400d17 	ldw	r21,52(sp)
10010bc4:	dd000c17 	ldw	r20,48(sp)
10010bc8:	dcc00b17 	ldw	r19,44(sp)
10010bcc:	dc800a17 	ldw	r18,40(sp)
10010bd0:	dc400917 	ldw	r17,36(sp)
10010bd4:	dc000817 	ldw	r16,32(sp)
10010bd8:	dec01204 	addi	sp,sp,72
10010bdc:	f800283a 	ret
10010be0:	2404b03a 	or	r2,r4,r16
10010be4:	202b883a 	mov	r21,r4
10010be8:	10004426 	beq	r2,zero,10010cfc <__muldf3+0x2ec>
10010bec:	80015126 	beq	r16,zero,10011134 <__muldf3+0x724>
10010bf0:	8009883a 	mov	r4,r16
10010bf4:	d9800715 	stw	r6,28(sp)
10010bf8:	d9c00215 	stw	r7,8(sp)
10010bfc:	da400415 	stw	r9,16(sp)
10010c00:	0011d7c0 	call	10011d7c <__clzsi2>
10010c04:	d9800717 	ldw	r6,28(sp)
10010c08:	d9c00217 	ldw	r7,8(sp)
10010c0c:	da400417 	ldw	r9,16(sp)
10010c10:	113ffd44 	addi	r4,r2,-11
10010c14:	00c00704 	movi	r3,28
10010c18:	19014216 	blt	r3,r4,10011124 <__muldf3+0x714>
10010c1c:	00c00744 	movi	r3,29
10010c20:	15bffe04 	addi	r22,r2,-8
10010c24:	1907c83a 	sub	r3,r3,r4
10010c28:	85a0983a 	sll	r16,r16,r22
10010c2c:	a8c6d83a 	srl	r3,r21,r3
10010c30:	adac983a 	sll	r22,r21,r22
10010c34:	1c20b03a 	or	r16,r3,r16
10010c38:	1080fcc4 	addi	r2,r2,1011
10010c3c:	00a9c83a 	sub	r20,zero,r2
10010c40:	002b883a 	mov	r21,zero
10010c44:	000b883a 	mov	r5,zero
10010c48:	003f9006 	br	10010a8c <__alt_data_end+0xf8010a8c>
10010c4c:	3446b03a 	or	r3,r6,r17
10010c50:	1800281e 	bne	r3,zero,10010cf4 <__muldf3+0x2e4>
10010c54:	0023883a 	mov	r17,zero
10010c58:	0025883a 	mov	r18,zero
10010c5c:	01c00084 	movi	r7,2
10010c60:	003f9c06 	br	10010ad4 <__alt_data_end+0xf8010ad4>
10010c64:	3446b03a 	or	r3,r6,r17
10010c68:	18001e26 	beq	r3,zero,10010ce4 <__muldf3+0x2d4>
10010c6c:	88012126 	beq	r17,zero,100110f4 <__muldf3+0x6e4>
10010c70:	8809883a 	mov	r4,r17
10010c74:	d9400215 	stw	r5,8(sp)
10010c78:	d9800715 	stw	r6,28(sp)
10010c7c:	da400415 	stw	r9,16(sp)
10010c80:	da800315 	stw	r10,12(sp)
10010c84:	0011d7c0 	call	10011d7c <__clzsi2>
10010c88:	d9400217 	ldw	r5,8(sp)
10010c8c:	d9800717 	ldw	r6,28(sp)
10010c90:	da400417 	ldw	r9,16(sp)
10010c94:	da800317 	ldw	r10,12(sp)
10010c98:	113ffd44 	addi	r4,r2,-11
10010c9c:	00c00704 	movi	r3,28
10010ca0:	19011016 	blt	r3,r4,100110e4 <__muldf3+0x6d4>
10010ca4:	00c00744 	movi	r3,29
10010ca8:	14bffe04 	addi	r18,r2,-8
10010cac:	1907c83a 	sub	r3,r3,r4
10010cb0:	8ca2983a 	sll	r17,r17,r18
10010cb4:	30c6d83a 	srl	r3,r6,r3
10010cb8:	34a4983a 	sll	r18,r6,r18
10010cbc:	1c62b03a 	or	r17,r3,r17
10010cc0:	1080fcc4 	addi	r2,r2,1011
10010cc4:	0085c83a 	sub	r2,zero,r2
10010cc8:	000f883a 	mov	r7,zero
10010ccc:	003f8106 	br	10010ad4 <__alt_data_end+0xf8010ad4>
10010cd0:	3027883a 	mov	r19,r6
10010cd4:	0081ffc4 	movi	r2,2047
10010cd8:	0021883a 	mov	r16,zero
10010cdc:	002d883a 	mov	r22,zero
10010ce0:	003faa06 	br	10010b8c <__alt_data_end+0xf8010b8c>
10010ce4:	0023883a 	mov	r17,zero
10010ce8:	0025883a 	mov	r18,zero
10010cec:	01c00044 	movi	r7,1
10010cf0:	003f7806 	br	10010ad4 <__alt_data_end+0xf8010ad4>
10010cf4:	01c000c4 	movi	r7,3
10010cf8:	003f7606 	br	10010ad4 <__alt_data_end+0xf8010ad4>
10010cfc:	05400104 	movi	r21,4
10010d00:	0021883a 	mov	r16,zero
10010d04:	002d883a 	mov	r22,zero
10010d08:	01400044 	movi	r5,1
10010d0c:	003f5f06 	br	10010a8c <__alt_data_end+0xf8010a8c>
10010d10:	05400304 	movi	r21,12
10010d14:	014000c4 	movi	r5,3
10010d18:	003f5c06 	br	10010a8c <__alt_data_end+0xf8010a8c>
10010d1c:	04000434 	movhi	r16,16
10010d20:	0027883a 	mov	r19,zero
10010d24:	843fffc4 	addi	r16,r16,-1
10010d28:	05bfffc4 	movi	r22,-1
10010d2c:	0081ffc4 	movi	r2,2047
10010d30:	003f9606 	br	10010b8c <__alt_data_end+0xf8010b8c>
10010d34:	8023883a 	mov	r17,r16
10010d38:	b025883a 	mov	r18,r22
10010d3c:	280f883a 	mov	r7,r5
10010d40:	003f8806 	br	10010b64 <__alt_data_end+0xf8010b64>
10010d44:	8023883a 	mov	r17,r16
10010d48:	b025883a 	mov	r18,r22
10010d4c:	480d883a 	mov	r6,r9
10010d50:	280f883a 	mov	r7,r5
10010d54:	003f8306 	br	10010b64 <__alt_data_end+0xf8010b64>
10010d58:	b026d43a 	srli	r19,r22,16
10010d5c:	902ed43a 	srli	r23,r18,16
10010d60:	b5bfffcc 	andi	r22,r22,65535
10010d64:	94bfffcc 	andi	r18,r18,65535
10010d68:	b00b883a 	mov	r5,r22
10010d6c:	9009883a 	mov	r4,r18
10010d70:	d8c00515 	stw	r3,20(sp)
10010d74:	d9800715 	stw	r6,28(sp)
10010d78:	da000615 	stw	r8,24(sp)
10010d7c:	00050540 	call	10005054 <__mulsi3>
10010d80:	980b883a 	mov	r5,r19
10010d84:	9009883a 	mov	r4,r18
10010d88:	1029883a 	mov	r20,r2
10010d8c:	00050540 	call	10005054 <__mulsi3>
10010d90:	b80b883a 	mov	r5,r23
10010d94:	9809883a 	mov	r4,r19
10010d98:	102b883a 	mov	r21,r2
10010d9c:	00050540 	call	10005054 <__mulsi3>
10010da0:	b809883a 	mov	r4,r23
10010da4:	b00b883a 	mov	r5,r22
10010da8:	1039883a 	mov	fp,r2
10010dac:	00050540 	call	10005054 <__mulsi3>
10010db0:	a008d43a 	srli	r4,r20,16
10010db4:	1545883a 	add	r2,r2,r21
10010db8:	d8c00517 	ldw	r3,20(sp)
10010dbc:	2085883a 	add	r2,r4,r2
10010dc0:	d9800717 	ldw	r6,28(sp)
10010dc4:	da000617 	ldw	r8,24(sp)
10010dc8:	1540022e 	bgeu	r2,r21,10010dd4 <__muldf3+0x3c4>
10010dcc:	01000074 	movhi	r4,1
10010dd0:	e139883a 	add	fp,fp,r4
10010dd4:	100e943a 	slli	r7,r2,16
10010dd8:	1004d43a 	srli	r2,r2,16
10010ddc:	882ad43a 	srli	r21,r17,16
10010de0:	a53fffcc 	andi	r20,r20,65535
10010de4:	8c7fffcc 	andi	r17,r17,65535
10010de8:	3d29883a 	add	r20,r7,r20
10010dec:	b00b883a 	mov	r5,r22
10010df0:	8809883a 	mov	r4,r17
10010df4:	d8c00515 	stw	r3,20(sp)
10010df8:	d9800715 	stw	r6,28(sp)
10010dfc:	da000615 	stw	r8,24(sp)
10010e00:	dd000115 	stw	r20,4(sp)
10010e04:	d8800015 	stw	r2,0(sp)
10010e08:	00050540 	call	10005054 <__mulsi3>
10010e0c:	980b883a 	mov	r5,r19
10010e10:	8809883a 	mov	r4,r17
10010e14:	d8800215 	stw	r2,8(sp)
10010e18:	00050540 	call	10005054 <__mulsi3>
10010e1c:	9809883a 	mov	r4,r19
10010e20:	a80b883a 	mov	r5,r21
10010e24:	1029883a 	mov	r20,r2
10010e28:	00050540 	call	10005054 <__mulsi3>
10010e2c:	b00b883a 	mov	r5,r22
10010e30:	a809883a 	mov	r4,r21
10010e34:	d8800415 	stw	r2,16(sp)
10010e38:	00050540 	call	10005054 <__mulsi3>
10010e3c:	d9c00217 	ldw	r7,8(sp)
10010e40:	1505883a 	add	r2,r2,r20
10010e44:	d8c00517 	ldw	r3,20(sp)
10010e48:	3826d43a 	srli	r19,r7,16
10010e4c:	d9800717 	ldw	r6,28(sp)
10010e50:	da000617 	ldw	r8,24(sp)
10010e54:	9885883a 	add	r2,r19,r2
10010e58:	da400417 	ldw	r9,16(sp)
10010e5c:	1500022e 	bgeu	r2,r20,10010e68 <__muldf3+0x458>
10010e60:	01000074 	movhi	r4,1
10010e64:	4913883a 	add	r9,r9,r4
10010e68:	1028d43a 	srli	r20,r2,16
10010e6c:	1004943a 	slli	r2,r2,16
10010e70:	802cd43a 	srli	r22,r16,16
10010e74:	843fffcc 	andi	r16,r16,65535
10010e78:	3cffffcc 	andi	r19,r7,65535
10010e7c:	9009883a 	mov	r4,r18
10010e80:	800b883a 	mov	r5,r16
10010e84:	a269883a 	add	r20,r20,r9
10010e88:	d8c00515 	stw	r3,20(sp)
10010e8c:	d9800715 	stw	r6,28(sp)
10010e90:	da000615 	stw	r8,24(sp)
10010e94:	14e7883a 	add	r19,r2,r19
10010e98:	00050540 	call	10005054 <__mulsi3>
10010e9c:	9009883a 	mov	r4,r18
10010ea0:	b00b883a 	mov	r5,r22
10010ea4:	d8800315 	stw	r2,12(sp)
10010ea8:	00050540 	call	10005054 <__mulsi3>
10010eac:	b809883a 	mov	r4,r23
10010eb0:	b00b883a 	mov	r5,r22
10010eb4:	d8800215 	stw	r2,8(sp)
10010eb8:	00050540 	call	10005054 <__mulsi3>
10010ebc:	b80b883a 	mov	r5,r23
10010ec0:	8009883a 	mov	r4,r16
10010ec4:	d8800415 	stw	r2,16(sp)
10010ec8:	00050540 	call	10005054 <__mulsi3>
10010ecc:	da800317 	ldw	r10,12(sp)
10010ed0:	d9c00217 	ldw	r7,8(sp)
10010ed4:	d9000017 	ldw	r4,0(sp)
10010ed8:	502ed43a 	srli	r23,r10,16
10010edc:	11c5883a 	add	r2,r2,r7
10010ee0:	24e5883a 	add	r18,r4,r19
10010ee4:	b885883a 	add	r2,r23,r2
10010ee8:	d8c00517 	ldw	r3,20(sp)
10010eec:	d9800717 	ldw	r6,28(sp)
10010ef0:	da000617 	ldw	r8,24(sp)
10010ef4:	da400417 	ldw	r9,16(sp)
10010ef8:	11c0022e 	bgeu	r2,r7,10010f04 <__muldf3+0x4f4>
10010efc:	01000074 	movhi	r4,1
10010f00:	4913883a 	add	r9,r9,r4
10010f04:	100ed43a 	srli	r7,r2,16
10010f08:	1004943a 	slli	r2,r2,16
10010f0c:	55ffffcc 	andi	r23,r10,65535
10010f10:	3a53883a 	add	r9,r7,r9
10010f14:	8809883a 	mov	r4,r17
10010f18:	800b883a 	mov	r5,r16
10010f1c:	d8c00515 	stw	r3,20(sp)
10010f20:	d9800715 	stw	r6,28(sp)
10010f24:	da000615 	stw	r8,24(sp)
10010f28:	da400415 	stw	r9,16(sp)
10010f2c:	15ef883a 	add	r23,r2,r23
10010f30:	00050540 	call	10005054 <__mulsi3>
10010f34:	8809883a 	mov	r4,r17
10010f38:	b00b883a 	mov	r5,r22
10010f3c:	d8800215 	stw	r2,8(sp)
10010f40:	00050540 	call	10005054 <__mulsi3>
10010f44:	b00b883a 	mov	r5,r22
10010f48:	a809883a 	mov	r4,r21
10010f4c:	d8800315 	stw	r2,12(sp)
10010f50:	00050540 	call	10005054 <__mulsi3>
10010f54:	8009883a 	mov	r4,r16
10010f58:	a80b883a 	mov	r5,r21
10010f5c:	1023883a 	mov	r17,r2
10010f60:	00050540 	call	10005054 <__mulsi3>
10010f64:	d9c00217 	ldw	r7,8(sp)
10010f68:	da800317 	ldw	r10,12(sp)
10010f6c:	d8c00517 	ldw	r3,20(sp)
10010f70:	3808d43a 	srli	r4,r7,16
10010f74:	1285883a 	add	r2,r2,r10
10010f78:	d9800717 	ldw	r6,28(sp)
10010f7c:	2085883a 	add	r2,r4,r2
10010f80:	da000617 	ldw	r8,24(sp)
10010f84:	da400417 	ldw	r9,16(sp)
10010f88:	1280022e 	bgeu	r2,r10,10010f94 <__muldf3+0x584>
10010f8c:	01000074 	movhi	r4,1
10010f90:	8923883a 	add	r17,r17,r4
10010f94:	1008943a 	slli	r4,r2,16
10010f98:	39ffffcc 	andi	r7,r7,65535
10010f9c:	e4b9883a 	add	fp,fp,r18
10010fa0:	21cf883a 	add	r7,r4,r7
10010fa4:	e4e7803a 	cmpltu	r19,fp,r19
10010fa8:	3d0f883a 	add	r7,r7,r20
10010fac:	bf39883a 	add	fp,r23,fp
10010fb0:	99c9883a 	add	r4,r19,r7
10010fb4:	e5ef803a 	cmpltu	r23,fp,r23
10010fb8:	490b883a 	add	r5,r9,r4
10010fbc:	1004d43a 	srli	r2,r2,16
10010fc0:	b965883a 	add	r18,r23,r5
10010fc4:	24c9803a 	cmpltu	r4,r4,r19
10010fc8:	3d29803a 	cmpltu	r20,r7,r20
10010fcc:	a128b03a 	or	r20,r20,r4
10010fd0:	95ef803a 	cmpltu	r23,r18,r23
10010fd4:	2a53803a 	cmpltu	r9,r5,r9
10010fd8:	a0a9883a 	add	r20,r20,r2
10010fdc:	4deeb03a 	or	r23,r9,r23
10010fe0:	a5ef883a 	add	r23,r20,r23
10010fe4:	bc63883a 	add	r17,r23,r17
10010fe8:	e004927a 	slli	r2,fp,9
10010fec:	d9000117 	ldw	r4,4(sp)
10010ff0:	882e927a 	slli	r23,r17,9
10010ff4:	9022d5fa 	srli	r17,r18,23
10010ff8:	e038d5fa 	srli	fp,fp,23
10010ffc:	1104b03a 	or	r2,r2,r4
10011000:	9024927a 	slli	r18,r18,9
10011004:	1004c03a 	cmpne	r2,r2,zero
10011008:	bc62b03a 	or	r17,r23,r17
1001100c:	1738b03a 	or	fp,r2,fp
10011010:	8880402c 	andhi	r2,r17,256
10011014:	e4a4b03a 	or	r18,fp,r18
10011018:	10000726 	beq	r2,zero,10011038 <__muldf3+0x628>
1001101c:	9006d07a 	srli	r3,r18,1
10011020:	880497fa 	slli	r2,r17,31
10011024:	9480004c 	andi	r18,r18,1
10011028:	8822d07a 	srli	r17,r17,1
1001102c:	1ca4b03a 	or	r18,r3,r18
10011030:	14a4b03a 	or	r18,r2,r18
10011034:	4007883a 	mov	r3,r8
10011038:	1880ffc4 	addi	r2,r3,1023
1001103c:	0080460e 	bge	zero,r2,10011158 <__muldf3+0x748>
10011040:	910001cc 	andi	r4,r18,7
10011044:	20000726 	beq	r4,zero,10011064 <__muldf3+0x654>
10011048:	910003cc 	andi	r4,r18,15
1001104c:	01400104 	movi	r5,4
10011050:	21400426 	beq	r4,r5,10011064 <__muldf3+0x654>
10011054:	9149883a 	add	r4,r18,r5
10011058:	24a5803a 	cmpltu	r18,r4,r18
1001105c:	8ca3883a 	add	r17,r17,r18
10011060:	2025883a 	mov	r18,r4
10011064:	8900402c 	andhi	r4,r17,256
10011068:	20000426 	beq	r4,zero,1001107c <__muldf3+0x66c>
1001106c:	18810004 	addi	r2,r3,1024
10011070:	00ffc034 	movhi	r3,65280
10011074:	18ffffc4 	addi	r3,r3,-1
10011078:	88e2703a 	and	r17,r17,r3
1001107c:	00c1ff84 	movi	r3,2046
10011080:	18bf1316 	blt	r3,r2,10010cd0 <__alt_data_end+0xf8010cd0>
10011084:	882c977a 	slli	r22,r17,29
10011088:	9024d0fa 	srli	r18,r18,3
1001108c:	8822927a 	slli	r17,r17,9
10011090:	1081ffcc 	andi	r2,r2,2047
10011094:	b4acb03a 	or	r22,r22,r18
10011098:	8820d33a 	srli	r16,r17,12
1001109c:	3027883a 	mov	r19,r6
100110a0:	003eba06 	br	10010b8c <__alt_data_end+0xf8010b8c>
100110a4:	8080022c 	andhi	r2,r16,8
100110a8:	10000926 	beq	r2,zero,100110d0 <__muldf3+0x6c0>
100110ac:	8880022c 	andhi	r2,r17,8
100110b0:	1000071e 	bne	r2,zero,100110d0 <__muldf3+0x6c0>
100110b4:	00800434 	movhi	r2,16
100110b8:	8c000234 	orhi	r16,r17,8
100110bc:	10bfffc4 	addi	r2,r2,-1
100110c0:	e027883a 	mov	r19,fp
100110c4:	80a0703a 	and	r16,r16,r2
100110c8:	902d883a 	mov	r22,r18
100110cc:	003f1706 	br	10010d2c <__alt_data_end+0xf8010d2c>
100110d0:	00800434 	movhi	r2,16
100110d4:	84000234 	orhi	r16,r16,8
100110d8:	10bfffc4 	addi	r2,r2,-1
100110dc:	80a0703a 	and	r16,r16,r2
100110e0:	003f1206 	br	10010d2c <__alt_data_end+0xf8010d2c>
100110e4:	147ff604 	addi	r17,r2,-40
100110e8:	3462983a 	sll	r17,r6,r17
100110ec:	0025883a 	mov	r18,zero
100110f0:	003ef306 	br	10010cc0 <__alt_data_end+0xf8010cc0>
100110f4:	3009883a 	mov	r4,r6
100110f8:	d9400215 	stw	r5,8(sp)
100110fc:	d9800715 	stw	r6,28(sp)
10011100:	da400415 	stw	r9,16(sp)
10011104:	da800315 	stw	r10,12(sp)
10011108:	0011d7c0 	call	10011d7c <__clzsi2>
1001110c:	10800804 	addi	r2,r2,32
10011110:	da800317 	ldw	r10,12(sp)
10011114:	da400417 	ldw	r9,16(sp)
10011118:	d9800717 	ldw	r6,28(sp)
1001111c:	d9400217 	ldw	r5,8(sp)
10011120:	003edd06 	br	10010c98 <__alt_data_end+0xf8010c98>
10011124:	143ff604 	addi	r16,r2,-40
10011128:	ac20983a 	sll	r16,r21,r16
1001112c:	002d883a 	mov	r22,zero
10011130:	003ec106 	br	10010c38 <__alt_data_end+0xf8010c38>
10011134:	d9800715 	stw	r6,28(sp)
10011138:	d9c00215 	stw	r7,8(sp)
1001113c:	da400415 	stw	r9,16(sp)
10011140:	0011d7c0 	call	10011d7c <__clzsi2>
10011144:	10800804 	addi	r2,r2,32
10011148:	da400417 	ldw	r9,16(sp)
1001114c:	d9c00217 	ldw	r7,8(sp)
10011150:	d9800717 	ldw	r6,28(sp)
10011154:	003eae06 	br	10010c10 <__alt_data_end+0xf8010c10>
10011158:	00c00044 	movi	r3,1
1001115c:	1887c83a 	sub	r3,r3,r2
10011160:	01000e04 	movi	r4,56
10011164:	20fe8516 	blt	r4,r3,10010b7c <__alt_data_end+0xf8010b7c>
10011168:	010007c4 	movi	r4,31
1001116c:	20c01b16 	blt	r4,r3,100111dc <__muldf3+0x7cc>
10011170:	00800804 	movi	r2,32
10011174:	10c5c83a 	sub	r2,r2,r3
10011178:	888a983a 	sll	r5,r17,r2
1001117c:	90c8d83a 	srl	r4,r18,r3
10011180:	9084983a 	sll	r2,r18,r2
10011184:	88e2d83a 	srl	r17,r17,r3
10011188:	2906b03a 	or	r3,r5,r4
1001118c:	1004c03a 	cmpne	r2,r2,zero
10011190:	1886b03a 	or	r3,r3,r2
10011194:	188001cc 	andi	r2,r3,7
10011198:	10000726 	beq	r2,zero,100111b8 <__muldf3+0x7a8>
1001119c:	188003cc 	andi	r2,r3,15
100111a0:	01000104 	movi	r4,4
100111a4:	11000426 	beq	r2,r4,100111b8 <__muldf3+0x7a8>
100111a8:	1805883a 	mov	r2,r3
100111ac:	10c00104 	addi	r3,r2,4
100111b0:	1885803a 	cmpltu	r2,r3,r2
100111b4:	88a3883a 	add	r17,r17,r2
100111b8:	8880202c 	andhi	r2,r17,128
100111bc:	10001c26 	beq	r2,zero,10011230 <__muldf3+0x820>
100111c0:	3027883a 	mov	r19,r6
100111c4:	00800044 	movi	r2,1
100111c8:	0021883a 	mov	r16,zero
100111cc:	002d883a 	mov	r22,zero
100111d0:	003e6e06 	br	10010b8c <__alt_data_end+0xf8010b8c>
100111d4:	4007883a 	mov	r3,r8
100111d8:	003f9706 	br	10011038 <__alt_data_end+0xf8011038>
100111dc:	017ff844 	movi	r5,-31
100111e0:	2885c83a 	sub	r2,r5,r2
100111e4:	888ad83a 	srl	r5,r17,r2
100111e8:	00800804 	movi	r2,32
100111ec:	18801a26 	beq	r3,r2,10011258 <__muldf3+0x848>
100111f0:	01001004 	movi	r4,64
100111f4:	20c7c83a 	sub	r3,r4,r3
100111f8:	88e2983a 	sll	r17,r17,r3
100111fc:	8ca4b03a 	or	r18,r17,r18
10011200:	9004c03a 	cmpne	r2,r18,zero
10011204:	2884b03a 	or	r2,r5,r2
10011208:	144001cc 	andi	r17,r2,7
1001120c:	88000d1e 	bne	r17,zero,10011244 <__muldf3+0x834>
10011210:	0021883a 	mov	r16,zero
10011214:	102cd0fa 	srli	r22,r2,3
10011218:	3027883a 	mov	r19,r6
1001121c:	0005883a 	mov	r2,zero
10011220:	b46cb03a 	or	r22,r22,r17
10011224:	003e5906 	br	10010b8c <__alt_data_end+0xf8010b8c>
10011228:	1007883a 	mov	r3,r2
1001122c:	0023883a 	mov	r17,zero
10011230:	8820927a 	slli	r16,r17,9
10011234:	1805883a 	mov	r2,r3
10011238:	8822977a 	slli	r17,r17,29
1001123c:	8020d33a 	srli	r16,r16,12
10011240:	003ff406 	br	10011214 <__alt_data_end+0xf8011214>
10011244:	10c003cc 	andi	r3,r2,15
10011248:	01000104 	movi	r4,4
1001124c:	193ff626 	beq	r3,r4,10011228 <__alt_data_end+0xf8011228>
10011250:	0023883a 	mov	r17,zero
10011254:	003fd506 	br	100111ac <__alt_data_end+0xf80111ac>
10011258:	0023883a 	mov	r17,zero
1001125c:	003fe706 	br	100111fc <__alt_data_end+0xf80111fc>
10011260:	00800434 	movhi	r2,16
10011264:	8c000234 	orhi	r16,r17,8
10011268:	10bfffc4 	addi	r2,r2,-1
1001126c:	3027883a 	mov	r19,r6
10011270:	80a0703a 	and	r16,r16,r2
10011274:	902d883a 	mov	r22,r18
10011278:	003eac06 	br	10010d2c <__alt_data_end+0xf8010d2c>

1001127c <__subdf3>:
1001127c:	02000434 	movhi	r8,16
10011280:	423fffc4 	addi	r8,r8,-1
10011284:	defffb04 	addi	sp,sp,-20
10011288:	2a14703a 	and	r10,r5,r8
1001128c:	3812d53a 	srli	r9,r7,20
10011290:	3a10703a 	and	r8,r7,r8
10011294:	2006d77a 	srli	r3,r4,29
10011298:	3004d77a 	srli	r2,r6,29
1001129c:	dc000015 	stw	r16,0(sp)
100112a0:	501490fa 	slli	r10,r10,3
100112a4:	2820d53a 	srli	r16,r5,20
100112a8:	401090fa 	slli	r8,r8,3
100112ac:	dc800215 	stw	r18,8(sp)
100112b0:	dc400115 	stw	r17,4(sp)
100112b4:	dfc00415 	stw	ra,16(sp)
100112b8:	202290fa 	slli	r17,r4,3
100112bc:	dcc00315 	stw	r19,12(sp)
100112c0:	4a41ffcc 	andi	r9,r9,2047
100112c4:	0101ffc4 	movi	r4,2047
100112c8:	2824d7fa 	srli	r18,r5,31
100112cc:	8401ffcc 	andi	r16,r16,2047
100112d0:	50c6b03a 	or	r3,r10,r3
100112d4:	380ed7fa 	srli	r7,r7,31
100112d8:	408ab03a 	or	r5,r8,r2
100112dc:	300c90fa 	slli	r6,r6,3
100112e0:	49009626 	beq	r9,r4,1001153c <__subdf3+0x2c0>
100112e4:	39c0005c 	xori	r7,r7,1
100112e8:	8245c83a 	sub	r2,r16,r9
100112ec:	3c807426 	beq	r7,r18,100114c0 <__subdf3+0x244>
100112f0:	0080af0e 	bge	zero,r2,100115b0 <__subdf3+0x334>
100112f4:	48002a1e 	bne	r9,zero,100113a0 <__subdf3+0x124>
100112f8:	2988b03a 	or	r4,r5,r6
100112fc:	20009a1e 	bne	r4,zero,10011568 <__subdf3+0x2ec>
10011300:	888001cc 	andi	r2,r17,7
10011304:	10000726 	beq	r2,zero,10011324 <__subdf3+0xa8>
10011308:	888003cc 	andi	r2,r17,15
1001130c:	01000104 	movi	r4,4
10011310:	11000426 	beq	r2,r4,10011324 <__subdf3+0xa8>
10011314:	890b883a 	add	r5,r17,r4
10011318:	2c63803a 	cmpltu	r17,r5,r17
1001131c:	1c47883a 	add	r3,r3,r17
10011320:	2823883a 	mov	r17,r5
10011324:	1880202c 	andhi	r2,r3,128
10011328:	10005926 	beq	r2,zero,10011490 <__subdf3+0x214>
1001132c:	84000044 	addi	r16,r16,1
10011330:	0081ffc4 	movi	r2,2047
10011334:	8080be26 	beq	r16,r2,10011630 <__subdf3+0x3b4>
10011338:	017fe034 	movhi	r5,65408
1001133c:	297fffc4 	addi	r5,r5,-1
10011340:	1946703a 	and	r3,r3,r5
10011344:	1804977a 	slli	r2,r3,29
10011348:	1806927a 	slli	r3,r3,9
1001134c:	8822d0fa 	srli	r17,r17,3
10011350:	8401ffcc 	andi	r16,r16,2047
10011354:	180ad33a 	srli	r5,r3,12
10011358:	9100004c 	andi	r4,r18,1
1001135c:	1444b03a 	or	r2,r2,r17
10011360:	80c1ffcc 	andi	r3,r16,2047
10011364:	1820953a 	slli	r16,r3,20
10011368:	20c03fcc 	andi	r3,r4,255
1001136c:	180897fa 	slli	r4,r3,31
10011370:	00c00434 	movhi	r3,16
10011374:	18ffffc4 	addi	r3,r3,-1
10011378:	28c6703a 	and	r3,r5,r3
1001137c:	1c06b03a 	or	r3,r3,r16
10011380:	1906b03a 	or	r3,r3,r4
10011384:	dfc00417 	ldw	ra,16(sp)
10011388:	dcc00317 	ldw	r19,12(sp)
1001138c:	dc800217 	ldw	r18,8(sp)
10011390:	dc400117 	ldw	r17,4(sp)
10011394:	dc000017 	ldw	r16,0(sp)
10011398:	dec00504 	addi	sp,sp,20
1001139c:	f800283a 	ret
100113a0:	0101ffc4 	movi	r4,2047
100113a4:	813fd626 	beq	r16,r4,10011300 <__alt_data_end+0xf8011300>
100113a8:	29402034 	orhi	r5,r5,128
100113ac:	01000e04 	movi	r4,56
100113b0:	2080a316 	blt	r4,r2,10011640 <__subdf3+0x3c4>
100113b4:	010007c4 	movi	r4,31
100113b8:	2080c616 	blt	r4,r2,100116d4 <__subdf3+0x458>
100113bc:	01000804 	movi	r4,32
100113c0:	2089c83a 	sub	r4,r4,r2
100113c4:	2910983a 	sll	r8,r5,r4
100113c8:	308ed83a 	srl	r7,r6,r2
100113cc:	3108983a 	sll	r4,r6,r4
100113d0:	2884d83a 	srl	r2,r5,r2
100113d4:	41ccb03a 	or	r6,r8,r7
100113d8:	2008c03a 	cmpne	r4,r4,zero
100113dc:	310cb03a 	or	r6,r6,r4
100113e0:	898dc83a 	sub	r6,r17,r6
100113e4:	89a3803a 	cmpltu	r17,r17,r6
100113e8:	1887c83a 	sub	r3,r3,r2
100113ec:	1c47c83a 	sub	r3,r3,r17
100113f0:	3023883a 	mov	r17,r6
100113f4:	1880202c 	andhi	r2,r3,128
100113f8:	10002326 	beq	r2,zero,10011488 <__subdf3+0x20c>
100113fc:	04c02034 	movhi	r19,128
10011400:	9cffffc4 	addi	r19,r19,-1
10011404:	1ce6703a 	and	r19,r3,r19
10011408:	98007a26 	beq	r19,zero,100115f4 <__subdf3+0x378>
1001140c:	9809883a 	mov	r4,r19
10011410:	0011d7c0 	call	10011d7c <__clzsi2>
10011414:	113ffe04 	addi	r4,r2,-8
10011418:	00c007c4 	movi	r3,31
1001141c:	19007b16 	blt	r3,r4,1001160c <__subdf3+0x390>
10011420:	00800804 	movi	r2,32
10011424:	1105c83a 	sub	r2,r2,r4
10011428:	8884d83a 	srl	r2,r17,r2
1001142c:	9906983a 	sll	r3,r19,r4
10011430:	8922983a 	sll	r17,r17,r4
10011434:	10c4b03a 	or	r2,r2,r3
10011438:	24007816 	blt	r4,r16,1001161c <__subdf3+0x3a0>
1001143c:	2421c83a 	sub	r16,r4,r16
10011440:	80c00044 	addi	r3,r16,1
10011444:	010007c4 	movi	r4,31
10011448:	20c09516 	blt	r4,r3,100116a0 <__subdf3+0x424>
1001144c:	01400804 	movi	r5,32
10011450:	28cbc83a 	sub	r5,r5,r3
10011454:	88c8d83a 	srl	r4,r17,r3
10011458:	8962983a 	sll	r17,r17,r5
1001145c:	114a983a 	sll	r5,r2,r5
10011460:	10c6d83a 	srl	r3,r2,r3
10011464:	8804c03a 	cmpne	r2,r17,zero
10011468:	290ab03a 	or	r5,r5,r4
1001146c:	28a2b03a 	or	r17,r5,r2
10011470:	0021883a 	mov	r16,zero
10011474:	003fa206 	br	10011300 <__alt_data_end+0xf8011300>
10011478:	2090b03a 	or	r8,r4,r2
1001147c:	40018e26 	beq	r8,zero,10011ab8 <__subdf3+0x83c>
10011480:	1007883a 	mov	r3,r2
10011484:	2023883a 	mov	r17,r4
10011488:	888001cc 	andi	r2,r17,7
1001148c:	103f9e1e 	bne	r2,zero,10011308 <__alt_data_end+0xf8011308>
10011490:	1804977a 	slli	r2,r3,29
10011494:	8822d0fa 	srli	r17,r17,3
10011498:	1810d0fa 	srli	r8,r3,3
1001149c:	9100004c 	andi	r4,r18,1
100114a0:	1444b03a 	or	r2,r2,r17
100114a4:	00c1ffc4 	movi	r3,2047
100114a8:	80c02826 	beq	r16,r3,1001154c <__subdf3+0x2d0>
100114ac:	01400434 	movhi	r5,16
100114b0:	297fffc4 	addi	r5,r5,-1
100114b4:	80e0703a 	and	r16,r16,r3
100114b8:	414a703a 	and	r5,r8,r5
100114bc:	003fa806 	br	10011360 <__alt_data_end+0xf8011360>
100114c0:	0080630e 	bge	zero,r2,10011650 <__subdf3+0x3d4>
100114c4:	48003026 	beq	r9,zero,10011588 <__subdf3+0x30c>
100114c8:	0101ffc4 	movi	r4,2047
100114cc:	813f8c26 	beq	r16,r4,10011300 <__alt_data_end+0xf8011300>
100114d0:	29402034 	orhi	r5,r5,128
100114d4:	01000e04 	movi	r4,56
100114d8:	2080a90e 	bge	r4,r2,10011780 <__subdf3+0x504>
100114dc:	298cb03a 	or	r6,r5,r6
100114e0:	3012c03a 	cmpne	r9,r6,zero
100114e4:	0005883a 	mov	r2,zero
100114e8:	4c53883a 	add	r9,r9,r17
100114ec:	4c63803a 	cmpltu	r17,r9,r17
100114f0:	10c7883a 	add	r3,r2,r3
100114f4:	88c7883a 	add	r3,r17,r3
100114f8:	4823883a 	mov	r17,r9
100114fc:	1880202c 	andhi	r2,r3,128
10011500:	1000d026 	beq	r2,zero,10011844 <__subdf3+0x5c8>
10011504:	84000044 	addi	r16,r16,1
10011508:	0081ffc4 	movi	r2,2047
1001150c:	8080fe26 	beq	r16,r2,10011908 <__subdf3+0x68c>
10011510:	00bfe034 	movhi	r2,65408
10011514:	10bfffc4 	addi	r2,r2,-1
10011518:	1886703a 	and	r3,r3,r2
1001151c:	880ad07a 	srli	r5,r17,1
10011520:	180497fa 	slli	r2,r3,31
10011524:	8900004c 	andi	r4,r17,1
10011528:	2922b03a 	or	r17,r5,r4
1001152c:	1806d07a 	srli	r3,r3,1
10011530:	1462b03a 	or	r17,r2,r17
10011534:	3825883a 	mov	r18,r7
10011538:	003f7106 	br	10011300 <__alt_data_end+0xf8011300>
1001153c:	2984b03a 	or	r2,r5,r6
10011540:	103f6826 	beq	r2,zero,100112e4 <__alt_data_end+0xf80112e4>
10011544:	39c03fcc 	andi	r7,r7,255
10011548:	003f6706 	br	100112e8 <__alt_data_end+0xf80112e8>
1001154c:	4086b03a 	or	r3,r8,r2
10011550:	18015226 	beq	r3,zero,10011a9c <__subdf3+0x820>
10011554:	00c00434 	movhi	r3,16
10011558:	41400234 	orhi	r5,r8,8
1001155c:	18ffffc4 	addi	r3,r3,-1
10011560:	28ca703a 	and	r5,r5,r3
10011564:	003f7e06 	br	10011360 <__alt_data_end+0xf8011360>
10011568:	10bfffc4 	addi	r2,r2,-1
1001156c:	1000491e 	bne	r2,zero,10011694 <__subdf3+0x418>
10011570:	898fc83a 	sub	r7,r17,r6
10011574:	89e3803a 	cmpltu	r17,r17,r7
10011578:	1947c83a 	sub	r3,r3,r5
1001157c:	1c47c83a 	sub	r3,r3,r17
10011580:	3823883a 	mov	r17,r7
10011584:	003f9b06 	br	100113f4 <__alt_data_end+0xf80113f4>
10011588:	2988b03a 	or	r4,r5,r6
1001158c:	203f5c26 	beq	r4,zero,10011300 <__alt_data_end+0xf8011300>
10011590:	10bfffc4 	addi	r2,r2,-1
10011594:	1000931e 	bne	r2,zero,100117e4 <__subdf3+0x568>
10011598:	898d883a 	add	r6,r17,r6
1001159c:	3463803a 	cmpltu	r17,r6,r17
100115a0:	1947883a 	add	r3,r3,r5
100115a4:	88c7883a 	add	r3,r17,r3
100115a8:	3023883a 	mov	r17,r6
100115ac:	003fd306 	br	100114fc <__alt_data_end+0xf80114fc>
100115b0:	1000541e 	bne	r2,zero,10011704 <__subdf3+0x488>
100115b4:	80800044 	addi	r2,r16,1
100115b8:	1081ffcc 	andi	r2,r2,2047
100115bc:	01000044 	movi	r4,1
100115c0:	2080a20e 	bge	r4,r2,1001184c <__subdf3+0x5d0>
100115c4:	8989c83a 	sub	r4,r17,r6
100115c8:	8905803a 	cmpltu	r2,r17,r4
100115cc:	1967c83a 	sub	r19,r3,r5
100115d0:	98a7c83a 	sub	r19,r19,r2
100115d4:	9880202c 	andhi	r2,r19,128
100115d8:	10006326 	beq	r2,zero,10011768 <__subdf3+0x4ec>
100115dc:	3463c83a 	sub	r17,r6,r17
100115e0:	28c7c83a 	sub	r3,r5,r3
100115e4:	344d803a 	cmpltu	r6,r6,r17
100115e8:	19a7c83a 	sub	r19,r3,r6
100115ec:	3825883a 	mov	r18,r7
100115f0:	983f861e 	bne	r19,zero,1001140c <__alt_data_end+0xf801140c>
100115f4:	8809883a 	mov	r4,r17
100115f8:	0011d7c0 	call	10011d7c <__clzsi2>
100115fc:	10800804 	addi	r2,r2,32
10011600:	113ffe04 	addi	r4,r2,-8
10011604:	00c007c4 	movi	r3,31
10011608:	193f850e 	bge	r3,r4,10011420 <__alt_data_end+0xf8011420>
1001160c:	10bff604 	addi	r2,r2,-40
10011610:	8884983a 	sll	r2,r17,r2
10011614:	0023883a 	mov	r17,zero
10011618:	243f880e 	bge	r4,r16,1001143c <__alt_data_end+0xf801143c>
1001161c:	00ffe034 	movhi	r3,65408
10011620:	18ffffc4 	addi	r3,r3,-1
10011624:	8121c83a 	sub	r16,r16,r4
10011628:	10c6703a 	and	r3,r2,r3
1001162c:	003f3406 	br	10011300 <__alt_data_end+0xf8011300>
10011630:	9100004c 	andi	r4,r18,1
10011634:	000b883a 	mov	r5,zero
10011638:	0005883a 	mov	r2,zero
1001163c:	003f4806 	br	10011360 <__alt_data_end+0xf8011360>
10011640:	298cb03a 	or	r6,r5,r6
10011644:	300cc03a 	cmpne	r6,r6,zero
10011648:	0005883a 	mov	r2,zero
1001164c:	003f6406 	br	100113e0 <__alt_data_end+0xf80113e0>
10011650:	10009a1e 	bne	r2,zero,100118bc <__subdf3+0x640>
10011654:	82400044 	addi	r9,r16,1
10011658:	4881ffcc 	andi	r2,r9,2047
1001165c:	02800044 	movi	r10,1
10011660:	5080670e 	bge	r10,r2,10011800 <__subdf3+0x584>
10011664:	0081ffc4 	movi	r2,2047
10011668:	4880af26 	beq	r9,r2,10011928 <__subdf3+0x6ac>
1001166c:	898d883a 	add	r6,r17,r6
10011670:	1945883a 	add	r2,r3,r5
10011674:	3447803a 	cmpltu	r3,r6,r17
10011678:	1887883a 	add	r3,r3,r2
1001167c:	182297fa 	slli	r17,r3,31
10011680:	300cd07a 	srli	r6,r6,1
10011684:	1806d07a 	srli	r3,r3,1
10011688:	4821883a 	mov	r16,r9
1001168c:	89a2b03a 	or	r17,r17,r6
10011690:	003f1b06 	br	10011300 <__alt_data_end+0xf8011300>
10011694:	0101ffc4 	movi	r4,2047
10011698:	813f441e 	bne	r16,r4,100113ac <__alt_data_end+0xf80113ac>
1001169c:	003f1806 	br	10011300 <__alt_data_end+0xf8011300>
100116a0:	843ff844 	addi	r16,r16,-31
100116a4:	01400804 	movi	r5,32
100116a8:	1408d83a 	srl	r4,r2,r16
100116ac:	19405026 	beq	r3,r5,100117f0 <__subdf3+0x574>
100116b0:	01401004 	movi	r5,64
100116b4:	28c7c83a 	sub	r3,r5,r3
100116b8:	10c4983a 	sll	r2,r2,r3
100116bc:	88a2b03a 	or	r17,r17,r2
100116c0:	8822c03a 	cmpne	r17,r17,zero
100116c4:	2462b03a 	or	r17,r4,r17
100116c8:	0007883a 	mov	r3,zero
100116cc:	0021883a 	mov	r16,zero
100116d0:	003f6d06 	br	10011488 <__alt_data_end+0xf8011488>
100116d4:	11fff804 	addi	r7,r2,-32
100116d8:	01000804 	movi	r4,32
100116dc:	29ced83a 	srl	r7,r5,r7
100116e0:	11004526 	beq	r2,r4,100117f8 <__subdf3+0x57c>
100116e4:	01001004 	movi	r4,64
100116e8:	2089c83a 	sub	r4,r4,r2
100116ec:	2904983a 	sll	r2,r5,r4
100116f0:	118cb03a 	or	r6,r2,r6
100116f4:	300cc03a 	cmpne	r6,r6,zero
100116f8:	398cb03a 	or	r6,r7,r6
100116fc:	0005883a 	mov	r2,zero
10011700:	003f3706 	br	100113e0 <__alt_data_end+0xf80113e0>
10011704:	80002a26 	beq	r16,zero,100117b0 <__subdf3+0x534>
10011708:	0101ffc4 	movi	r4,2047
1001170c:	49006626 	beq	r9,r4,100118a8 <__subdf3+0x62c>
10011710:	0085c83a 	sub	r2,zero,r2
10011714:	18c02034 	orhi	r3,r3,128
10011718:	01000e04 	movi	r4,56
1001171c:	20807e16 	blt	r4,r2,10011918 <__subdf3+0x69c>
10011720:	010007c4 	movi	r4,31
10011724:	2080e716 	blt	r4,r2,10011ac4 <__subdf3+0x848>
10011728:	01000804 	movi	r4,32
1001172c:	2089c83a 	sub	r4,r4,r2
10011730:	1914983a 	sll	r10,r3,r4
10011734:	8890d83a 	srl	r8,r17,r2
10011738:	8908983a 	sll	r4,r17,r4
1001173c:	1884d83a 	srl	r2,r3,r2
10011740:	5222b03a 	or	r17,r10,r8
10011744:	2006c03a 	cmpne	r3,r4,zero
10011748:	88e2b03a 	or	r17,r17,r3
1001174c:	3463c83a 	sub	r17,r6,r17
10011750:	2885c83a 	sub	r2,r5,r2
10011754:	344d803a 	cmpltu	r6,r6,r17
10011758:	1187c83a 	sub	r3,r2,r6
1001175c:	4821883a 	mov	r16,r9
10011760:	3825883a 	mov	r18,r7
10011764:	003f2306 	br	100113f4 <__alt_data_end+0xf80113f4>
10011768:	24d0b03a 	or	r8,r4,r19
1001176c:	40001b1e 	bne	r8,zero,100117dc <__subdf3+0x560>
10011770:	0005883a 	mov	r2,zero
10011774:	0009883a 	mov	r4,zero
10011778:	0021883a 	mov	r16,zero
1001177c:	003f4906 	br	100114a4 <__alt_data_end+0xf80114a4>
10011780:	010007c4 	movi	r4,31
10011784:	20803a16 	blt	r4,r2,10011870 <__subdf3+0x5f4>
10011788:	01000804 	movi	r4,32
1001178c:	2089c83a 	sub	r4,r4,r2
10011790:	2912983a 	sll	r9,r5,r4
10011794:	3090d83a 	srl	r8,r6,r2
10011798:	3108983a 	sll	r4,r6,r4
1001179c:	2884d83a 	srl	r2,r5,r2
100117a0:	4a12b03a 	or	r9,r9,r8
100117a4:	2008c03a 	cmpne	r4,r4,zero
100117a8:	4912b03a 	or	r9,r9,r4
100117ac:	003f4e06 	br	100114e8 <__alt_data_end+0xf80114e8>
100117b0:	1c48b03a 	or	r4,r3,r17
100117b4:	20003c26 	beq	r4,zero,100118a8 <__subdf3+0x62c>
100117b8:	0084303a 	nor	r2,zero,r2
100117bc:	1000381e 	bne	r2,zero,100118a0 <__subdf3+0x624>
100117c0:	3463c83a 	sub	r17,r6,r17
100117c4:	28c5c83a 	sub	r2,r5,r3
100117c8:	344d803a 	cmpltu	r6,r6,r17
100117cc:	1187c83a 	sub	r3,r2,r6
100117d0:	4821883a 	mov	r16,r9
100117d4:	3825883a 	mov	r18,r7
100117d8:	003f0606 	br	100113f4 <__alt_data_end+0xf80113f4>
100117dc:	2023883a 	mov	r17,r4
100117e0:	003f0906 	br	10011408 <__alt_data_end+0xf8011408>
100117e4:	0101ffc4 	movi	r4,2047
100117e8:	813f3a1e 	bne	r16,r4,100114d4 <__alt_data_end+0xf80114d4>
100117ec:	003ec406 	br	10011300 <__alt_data_end+0xf8011300>
100117f0:	0005883a 	mov	r2,zero
100117f4:	003fb106 	br	100116bc <__alt_data_end+0xf80116bc>
100117f8:	0005883a 	mov	r2,zero
100117fc:	003fbc06 	br	100116f0 <__alt_data_end+0xf80116f0>
10011800:	1c44b03a 	or	r2,r3,r17
10011804:	80008e1e 	bne	r16,zero,10011a40 <__subdf3+0x7c4>
10011808:	1000c826 	beq	r2,zero,10011b2c <__subdf3+0x8b0>
1001180c:	2984b03a 	or	r2,r5,r6
10011810:	103ebb26 	beq	r2,zero,10011300 <__alt_data_end+0xf8011300>
10011814:	8989883a 	add	r4,r17,r6
10011818:	1945883a 	add	r2,r3,r5
1001181c:	2447803a 	cmpltu	r3,r4,r17
10011820:	1887883a 	add	r3,r3,r2
10011824:	1880202c 	andhi	r2,r3,128
10011828:	2023883a 	mov	r17,r4
1001182c:	103f1626 	beq	r2,zero,10011488 <__alt_data_end+0xf8011488>
10011830:	00bfe034 	movhi	r2,65408
10011834:	10bfffc4 	addi	r2,r2,-1
10011838:	5021883a 	mov	r16,r10
1001183c:	1886703a 	and	r3,r3,r2
10011840:	003eaf06 	br	10011300 <__alt_data_end+0xf8011300>
10011844:	3825883a 	mov	r18,r7
10011848:	003f0f06 	br	10011488 <__alt_data_end+0xf8011488>
1001184c:	1c44b03a 	or	r2,r3,r17
10011850:	8000251e 	bne	r16,zero,100118e8 <__subdf3+0x66c>
10011854:	1000661e 	bne	r2,zero,100119f0 <__subdf3+0x774>
10011858:	2990b03a 	or	r8,r5,r6
1001185c:	40009626 	beq	r8,zero,10011ab8 <__subdf3+0x83c>
10011860:	2807883a 	mov	r3,r5
10011864:	3023883a 	mov	r17,r6
10011868:	3825883a 	mov	r18,r7
1001186c:	003ea406 	br	10011300 <__alt_data_end+0xf8011300>
10011870:	127ff804 	addi	r9,r2,-32
10011874:	01000804 	movi	r4,32
10011878:	2a52d83a 	srl	r9,r5,r9
1001187c:	11008c26 	beq	r2,r4,10011ab0 <__subdf3+0x834>
10011880:	01001004 	movi	r4,64
10011884:	2085c83a 	sub	r2,r4,r2
10011888:	2884983a 	sll	r2,r5,r2
1001188c:	118cb03a 	or	r6,r2,r6
10011890:	300cc03a 	cmpne	r6,r6,zero
10011894:	4992b03a 	or	r9,r9,r6
10011898:	0005883a 	mov	r2,zero
1001189c:	003f1206 	br	100114e8 <__alt_data_end+0xf80114e8>
100118a0:	0101ffc4 	movi	r4,2047
100118a4:	493f9c1e 	bne	r9,r4,10011718 <__alt_data_end+0xf8011718>
100118a8:	2807883a 	mov	r3,r5
100118ac:	3023883a 	mov	r17,r6
100118b0:	4821883a 	mov	r16,r9
100118b4:	3825883a 	mov	r18,r7
100118b8:	003e9106 	br	10011300 <__alt_data_end+0xf8011300>
100118bc:	80001f1e 	bne	r16,zero,1001193c <__subdf3+0x6c0>
100118c0:	1c48b03a 	or	r4,r3,r17
100118c4:	20005a26 	beq	r4,zero,10011a30 <__subdf3+0x7b4>
100118c8:	0084303a 	nor	r2,zero,r2
100118cc:	1000561e 	bne	r2,zero,10011a28 <__subdf3+0x7ac>
100118d0:	89a3883a 	add	r17,r17,r6
100118d4:	1945883a 	add	r2,r3,r5
100118d8:	898d803a 	cmpltu	r6,r17,r6
100118dc:	3087883a 	add	r3,r6,r2
100118e0:	4821883a 	mov	r16,r9
100118e4:	003f0506 	br	100114fc <__alt_data_end+0xf80114fc>
100118e8:	10002b1e 	bne	r2,zero,10011998 <__subdf3+0x71c>
100118ec:	2984b03a 	or	r2,r5,r6
100118f0:	10008026 	beq	r2,zero,10011af4 <__subdf3+0x878>
100118f4:	2807883a 	mov	r3,r5
100118f8:	3023883a 	mov	r17,r6
100118fc:	3825883a 	mov	r18,r7
10011900:	0401ffc4 	movi	r16,2047
10011904:	003e7e06 	br	10011300 <__alt_data_end+0xf8011300>
10011908:	3809883a 	mov	r4,r7
1001190c:	0011883a 	mov	r8,zero
10011910:	0005883a 	mov	r2,zero
10011914:	003ee306 	br	100114a4 <__alt_data_end+0xf80114a4>
10011918:	1c62b03a 	or	r17,r3,r17
1001191c:	8822c03a 	cmpne	r17,r17,zero
10011920:	0005883a 	mov	r2,zero
10011924:	003f8906 	br	1001174c <__alt_data_end+0xf801174c>
10011928:	3809883a 	mov	r4,r7
1001192c:	4821883a 	mov	r16,r9
10011930:	0011883a 	mov	r8,zero
10011934:	0005883a 	mov	r2,zero
10011938:	003eda06 	br	100114a4 <__alt_data_end+0xf80114a4>
1001193c:	0101ffc4 	movi	r4,2047
10011940:	49003b26 	beq	r9,r4,10011a30 <__subdf3+0x7b4>
10011944:	0085c83a 	sub	r2,zero,r2
10011948:	18c02034 	orhi	r3,r3,128
1001194c:	01000e04 	movi	r4,56
10011950:	20806e16 	blt	r4,r2,10011b0c <__subdf3+0x890>
10011954:	010007c4 	movi	r4,31
10011958:	20807716 	blt	r4,r2,10011b38 <__subdf3+0x8bc>
1001195c:	01000804 	movi	r4,32
10011960:	2089c83a 	sub	r4,r4,r2
10011964:	1914983a 	sll	r10,r3,r4
10011968:	8890d83a 	srl	r8,r17,r2
1001196c:	8908983a 	sll	r4,r17,r4
10011970:	1884d83a 	srl	r2,r3,r2
10011974:	5222b03a 	or	r17,r10,r8
10011978:	2006c03a 	cmpne	r3,r4,zero
1001197c:	88e2b03a 	or	r17,r17,r3
10011980:	89a3883a 	add	r17,r17,r6
10011984:	1145883a 	add	r2,r2,r5
10011988:	898d803a 	cmpltu	r6,r17,r6
1001198c:	3087883a 	add	r3,r6,r2
10011990:	4821883a 	mov	r16,r9
10011994:	003ed906 	br	100114fc <__alt_data_end+0xf80114fc>
10011998:	2984b03a 	or	r2,r5,r6
1001199c:	10004226 	beq	r2,zero,10011aa8 <__subdf3+0x82c>
100119a0:	1808d0fa 	srli	r4,r3,3
100119a4:	8822d0fa 	srli	r17,r17,3
100119a8:	1806977a 	slli	r3,r3,29
100119ac:	2080022c 	andhi	r2,r4,8
100119b0:	1c62b03a 	or	r17,r3,r17
100119b4:	10000826 	beq	r2,zero,100119d8 <__subdf3+0x75c>
100119b8:	2812d0fa 	srli	r9,r5,3
100119bc:	4880022c 	andhi	r2,r9,8
100119c0:	1000051e 	bne	r2,zero,100119d8 <__subdf3+0x75c>
100119c4:	300cd0fa 	srli	r6,r6,3
100119c8:	2804977a 	slli	r2,r5,29
100119cc:	4809883a 	mov	r4,r9
100119d0:	3825883a 	mov	r18,r7
100119d4:	11a2b03a 	or	r17,r2,r6
100119d8:	8806d77a 	srli	r3,r17,29
100119dc:	200890fa 	slli	r4,r4,3
100119e0:	882290fa 	slli	r17,r17,3
100119e4:	0401ffc4 	movi	r16,2047
100119e8:	1906b03a 	or	r3,r3,r4
100119ec:	003e4406 	br	10011300 <__alt_data_end+0xf8011300>
100119f0:	2984b03a 	or	r2,r5,r6
100119f4:	103e4226 	beq	r2,zero,10011300 <__alt_data_end+0xf8011300>
100119f8:	8989c83a 	sub	r4,r17,r6
100119fc:	8911803a 	cmpltu	r8,r17,r4
10011a00:	1945c83a 	sub	r2,r3,r5
10011a04:	1205c83a 	sub	r2,r2,r8
10011a08:	1200202c 	andhi	r8,r2,128
10011a0c:	403e9a26 	beq	r8,zero,10011478 <__alt_data_end+0xf8011478>
10011a10:	3463c83a 	sub	r17,r6,r17
10011a14:	28c5c83a 	sub	r2,r5,r3
10011a18:	344d803a 	cmpltu	r6,r6,r17
10011a1c:	1187c83a 	sub	r3,r2,r6
10011a20:	3825883a 	mov	r18,r7
10011a24:	003e3606 	br	10011300 <__alt_data_end+0xf8011300>
10011a28:	0101ffc4 	movi	r4,2047
10011a2c:	493fc71e 	bne	r9,r4,1001194c <__alt_data_end+0xf801194c>
10011a30:	2807883a 	mov	r3,r5
10011a34:	3023883a 	mov	r17,r6
10011a38:	4821883a 	mov	r16,r9
10011a3c:	003e3006 	br	10011300 <__alt_data_end+0xf8011300>
10011a40:	10003626 	beq	r2,zero,10011b1c <__subdf3+0x8a0>
10011a44:	2984b03a 	or	r2,r5,r6
10011a48:	10001726 	beq	r2,zero,10011aa8 <__subdf3+0x82c>
10011a4c:	1808d0fa 	srli	r4,r3,3
10011a50:	8822d0fa 	srli	r17,r17,3
10011a54:	1806977a 	slli	r3,r3,29
10011a58:	2080022c 	andhi	r2,r4,8
10011a5c:	1c62b03a 	or	r17,r3,r17
10011a60:	10000726 	beq	r2,zero,10011a80 <__subdf3+0x804>
10011a64:	2812d0fa 	srli	r9,r5,3
10011a68:	4880022c 	andhi	r2,r9,8
10011a6c:	1000041e 	bne	r2,zero,10011a80 <__subdf3+0x804>
10011a70:	300cd0fa 	srli	r6,r6,3
10011a74:	2804977a 	slli	r2,r5,29
10011a78:	4809883a 	mov	r4,r9
10011a7c:	11a2b03a 	or	r17,r2,r6
10011a80:	8806d77a 	srli	r3,r17,29
10011a84:	200890fa 	slli	r4,r4,3
10011a88:	882290fa 	slli	r17,r17,3
10011a8c:	3825883a 	mov	r18,r7
10011a90:	1906b03a 	or	r3,r3,r4
10011a94:	0401ffc4 	movi	r16,2047
10011a98:	003e1906 	br	10011300 <__alt_data_end+0xf8011300>
10011a9c:	000b883a 	mov	r5,zero
10011aa0:	0005883a 	mov	r2,zero
10011aa4:	003e2e06 	br	10011360 <__alt_data_end+0xf8011360>
10011aa8:	0401ffc4 	movi	r16,2047
10011aac:	003e1406 	br	10011300 <__alt_data_end+0xf8011300>
10011ab0:	0005883a 	mov	r2,zero
10011ab4:	003f7506 	br	1001188c <__alt_data_end+0xf801188c>
10011ab8:	0005883a 	mov	r2,zero
10011abc:	0009883a 	mov	r4,zero
10011ac0:	003e7806 	br	100114a4 <__alt_data_end+0xf80114a4>
10011ac4:	123ff804 	addi	r8,r2,-32
10011ac8:	01000804 	movi	r4,32
10011acc:	1a10d83a 	srl	r8,r3,r8
10011ad0:	11002526 	beq	r2,r4,10011b68 <__subdf3+0x8ec>
10011ad4:	01001004 	movi	r4,64
10011ad8:	2085c83a 	sub	r2,r4,r2
10011adc:	1884983a 	sll	r2,r3,r2
10011ae0:	1444b03a 	or	r2,r2,r17
10011ae4:	1004c03a 	cmpne	r2,r2,zero
10011ae8:	40a2b03a 	or	r17,r8,r2
10011aec:	0005883a 	mov	r2,zero
10011af0:	003f1606 	br	1001174c <__alt_data_end+0xf801174c>
10011af4:	02000434 	movhi	r8,16
10011af8:	0009883a 	mov	r4,zero
10011afc:	423fffc4 	addi	r8,r8,-1
10011b00:	00bfffc4 	movi	r2,-1
10011b04:	0401ffc4 	movi	r16,2047
10011b08:	003e6606 	br	100114a4 <__alt_data_end+0xf80114a4>
10011b0c:	1c62b03a 	or	r17,r3,r17
10011b10:	8822c03a 	cmpne	r17,r17,zero
10011b14:	0005883a 	mov	r2,zero
10011b18:	003f9906 	br	10011980 <__alt_data_end+0xf8011980>
10011b1c:	2807883a 	mov	r3,r5
10011b20:	3023883a 	mov	r17,r6
10011b24:	0401ffc4 	movi	r16,2047
10011b28:	003df506 	br	10011300 <__alt_data_end+0xf8011300>
10011b2c:	2807883a 	mov	r3,r5
10011b30:	3023883a 	mov	r17,r6
10011b34:	003df206 	br	10011300 <__alt_data_end+0xf8011300>
10011b38:	123ff804 	addi	r8,r2,-32
10011b3c:	01000804 	movi	r4,32
10011b40:	1a10d83a 	srl	r8,r3,r8
10011b44:	11000a26 	beq	r2,r4,10011b70 <__subdf3+0x8f4>
10011b48:	01001004 	movi	r4,64
10011b4c:	2085c83a 	sub	r2,r4,r2
10011b50:	1884983a 	sll	r2,r3,r2
10011b54:	1444b03a 	or	r2,r2,r17
10011b58:	1004c03a 	cmpne	r2,r2,zero
10011b5c:	40a2b03a 	or	r17,r8,r2
10011b60:	0005883a 	mov	r2,zero
10011b64:	003f8606 	br	10011980 <__alt_data_end+0xf8011980>
10011b68:	0005883a 	mov	r2,zero
10011b6c:	003fdc06 	br	10011ae0 <__alt_data_end+0xf8011ae0>
10011b70:	0005883a 	mov	r2,zero
10011b74:	003ff706 	br	10011b54 <__alt_data_end+0xf8011b54>

10011b78 <__fixdfsi>:
10011b78:	280cd53a 	srli	r6,r5,20
10011b7c:	00c00434 	movhi	r3,16
10011b80:	18ffffc4 	addi	r3,r3,-1
10011b84:	3181ffcc 	andi	r6,r6,2047
10011b88:	01c0ff84 	movi	r7,1022
10011b8c:	28c6703a 	and	r3,r5,r3
10011b90:	280ad7fa 	srli	r5,r5,31
10011b94:	3980120e 	bge	r7,r6,10011be0 <__fixdfsi+0x68>
10011b98:	00810744 	movi	r2,1053
10011b9c:	11800c16 	blt	r2,r6,10011bd0 <__fixdfsi+0x58>
10011ba0:	00810cc4 	movi	r2,1075
10011ba4:	1185c83a 	sub	r2,r2,r6
10011ba8:	01c007c4 	movi	r7,31
10011bac:	18c00434 	orhi	r3,r3,16
10011bb0:	38800d16 	blt	r7,r2,10011be8 <__fixdfsi+0x70>
10011bb4:	31befb44 	addi	r6,r6,-1043
10011bb8:	2084d83a 	srl	r2,r4,r2
10011bbc:	1986983a 	sll	r3,r3,r6
10011bc0:	1884b03a 	or	r2,r3,r2
10011bc4:	28000726 	beq	r5,zero,10011be4 <__fixdfsi+0x6c>
10011bc8:	0085c83a 	sub	r2,zero,r2
10011bcc:	f800283a 	ret
10011bd0:	00a00034 	movhi	r2,32768
10011bd4:	10bfffc4 	addi	r2,r2,-1
10011bd8:	2885883a 	add	r2,r5,r2
10011bdc:	f800283a 	ret
10011be0:	0005883a 	mov	r2,zero
10011be4:	f800283a 	ret
10011be8:	008104c4 	movi	r2,1043
10011bec:	1185c83a 	sub	r2,r2,r6
10011bf0:	1884d83a 	srl	r2,r3,r2
10011bf4:	003ff306 	br	10011bc4 <__alt_data_end+0xf8011bc4>

10011bf8 <__floatsidf>:
10011bf8:	defffd04 	addi	sp,sp,-12
10011bfc:	dfc00215 	stw	ra,8(sp)
10011c00:	dc400115 	stw	r17,4(sp)
10011c04:	dc000015 	stw	r16,0(sp)
10011c08:	20002b26 	beq	r4,zero,10011cb8 <__floatsidf+0xc0>
10011c0c:	2023883a 	mov	r17,r4
10011c10:	2020d7fa 	srli	r16,r4,31
10011c14:	20002d16 	blt	r4,zero,10011ccc <__floatsidf+0xd4>
10011c18:	8809883a 	mov	r4,r17
10011c1c:	0011d7c0 	call	10011d7c <__clzsi2>
10011c20:	01410784 	movi	r5,1054
10011c24:	288bc83a 	sub	r5,r5,r2
10011c28:	01010cc4 	movi	r4,1075
10011c2c:	2149c83a 	sub	r4,r4,r5
10011c30:	00c007c4 	movi	r3,31
10011c34:	1900160e 	bge	r3,r4,10011c90 <__floatsidf+0x98>
10011c38:	00c104c4 	movi	r3,1043
10011c3c:	1947c83a 	sub	r3,r3,r5
10011c40:	88c6983a 	sll	r3,r17,r3
10011c44:	00800434 	movhi	r2,16
10011c48:	10bfffc4 	addi	r2,r2,-1
10011c4c:	1886703a 	and	r3,r3,r2
10011c50:	2941ffcc 	andi	r5,r5,2047
10011c54:	800d883a 	mov	r6,r16
10011c58:	0005883a 	mov	r2,zero
10011c5c:	280a953a 	slli	r5,r5,20
10011c60:	31803fcc 	andi	r6,r6,255
10011c64:	01000434 	movhi	r4,16
10011c68:	300c97fa 	slli	r6,r6,31
10011c6c:	213fffc4 	addi	r4,r4,-1
10011c70:	1906703a 	and	r3,r3,r4
10011c74:	1946b03a 	or	r3,r3,r5
10011c78:	1986b03a 	or	r3,r3,r6
10011c7c:	dfc00217 	ldw	ra,8(sp)
10011c80:	dc400117 	ldw	r17,4(sp)
10011c84:	dc000017 	ldw	r16,0(sp)
10011c88:	dec00304 	addi	sp,sp,12
10011c8c:	f800283a 	ret
10011c90:	00c002c4 	movi	r3,11
10011c94:	1887c83a 	sub	r3,r3,r2
10011c98:	88c6d83a 	srl	r3,r17,r3
10011c9c:	8904983a 	sll	r2,r17,r4
10011ca0:	01000434 	movhi	r4,16
10011ca4:	213fffc4 	addi	r4,r4,-1
10011ca8:	2941ffcc 	andi	r5,r5,2047
10011cac:	1906703a 	and	r3,r3,r4
10011cb0:	800d883a 	mov	r6,r16
10011cb4:	003fe906 	br	10011c5c <__alt_data_end+0xf8011c5c>
10011cb8:	000d883a 	mov	r6,zero
10011cbc:	000b883a 	mov	r5,zero
10011cc0:	0007883a 	mov	r3,zero
10011cc4:	0005883a 	mov	r2,zero
10011cc8:	003fe406 	br	10011c5c <__alt_data_end+0xf8011c5c>
10011ccc:	0123c83a 	sub	r17,zero,r4
10011cd0:	003fd106 	br	10011c18 <__alt_data_end+0xf8011c18>

10011cd4 <__floatunsidf>:
10011cd4:	defffe04 	addi	sp,sp,-8
10011cd8:	dc000015 	stw	r16,0(sp)
10011cdc:	dfc00115 	stw	ra,4(sp)
10011ce0:	2021883a 	mov	r16,r4
10011ce4:	20002226 	beq	r4,zero,10011d70 <__floatunsidf+0x9c>
10011ce8:	0011d7c0 	call	10011d7c <__clzsi2>
10011cec:	01010784 	movi	r4,1054
10011cf0:	2089c83a 	sub	r4,r4,r2
10011cf4:	01810cc4 	movi	r6,1075
10011cf8:	310dc83a 	sub	r6,r6,r4
10011cfc:	00c007c4 	movi	r3,31
10011d00:	1980120e 	bge	r3,r6,10011d4c <__floatunsidf+0x78>
10011d04:	00c104c4 	movi	r3,1043
10011d08:	1907c83a 	sub	r3,r3,r4
10011d0c:	80ca983a 	sll	r5,r16,r3
10011d10:	00800434 	movhi	r2,16
10011d14:	10bfffc4 	addi	r2,r2,-1
10011d18:	2101ffcc 	andi	r4,r4,2047
10011d1c:	0021883a 	mov	r16,zero
10011d20:	288a703a 	and	r5,r5,r2
10011d24:	2008953a 	slli	r4,r4,20
10011d28:	00c00434 	movhi	r3,16
10011d2c:	18ffffc4 	addi	r3,r3,-1
10011d30:	28c6703a 	and	r3,r5,r3
10011d34:	8005883a 	mov	r2,r16
10011d38:	1906b03a 	or	r3,r3,r4
10011d3c:	dfc00117 	ldw	ra,4(sp)
10011d40:	dc000017 	ldw	r16,0(sp)
10011d44:	dec00204 	addi	sp,sp,8
10011d48:	f800283a 	ret
10011d4c:	00c002c4 	movi	r3,11
10011d50:	188bc83a 	sub	r5,r3,r2
10011d54:	814ad83a 	srl	r5,r16,r5
10011d58:	00c00434 	movhi	r3,16
10011d5c:	18ffffc4 	addi	r3,r3,-1
10011d60:	81a0983a 	sll	r16,r16,r6
10011d64:	2101ffcc 	andi	r4,r4,2047
10011d68:	28ca703a 	and	r5,r5,r3
10011d6c:	003fed06 	br	10011d24 <__alt_data_end+0xf8011d24>
10011d70:	0009883a 	mov	r4,zero
10011d74:	000b883a 	mov	r5,zero
10011d78:	003fea06 	br	10011d24 <__alt_data_end+0xf8011d24>

10011d7c <__clzsi2>:
10011d7c:	00bfffd4 	movui	r2,65535
10011d80:	11000536 	bltu	r2,r4,10011d98 <__clzsi2+0x1c>
10011d84:	00803fc4 	movi	r2,255
10011d88:	11000f36 	bltu	r2,r4,10011dc8 <__clzsi2+0x4c>
10011d8c:	00800804 	movi	r2,32
10011d90:	0007883a 	mov	r3,zero
10011d94:	00000506 	br	10011dac <__clzsi2+0x30>
10011d98:	00804034 	movhi	r2,256
10011d9c:	10bfffc4 	addi	r2,r2,-1
10011da0:	11000c2e 	bgeu	r2,r4,10011dd4 <__clzsi2+0x58>
10011da4:	00800204 	movi	r2,8
10011da8:	00c00604 	movi	r3,24
10011dac:	20c8d83a 	srl	r4,r4,r3
10011db0:	00c40074 	movhi	r3,4097
10011db4:	18d3f604 	addi	r3,r3,20440
10011db8:	1909883a 	add	r4,r3,r4
10011dbc:	20c00003 	ldbu	r3,0(r4)
10011dc0:	10c5c83a 	sub	r2,r2,r3
10011dc4:	f800283a 	ret
10011dc8:	00800604 	movi	r2,24
10011dcc:	00c00204 	movi	r3,8
10011dd0:	003ff606 	br	10011dac <__alt_data_end+0xf8011dac>
10011dd4:	00800404 	movi	r2,16
10011dd8:	1007883a 	mov	r3,r2
10011ddc:	003ff306 	br	10011dac <__alt_data_end+0xf8011dac>

10011de0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011de0:	defffe04 	addi	sp,sp,-8
10011de4:	dfc00115 	stw	ra,4(sp)
10011de8:	df000015 	stw	fp,0(sp)
10011dec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011df0:	d0a00b17 	ldw	r2,-32724(gp)
10011df4:	10000326 	beq	r2,zero,10011e04 <alt_get_errno+0x24>
10011df8:	d0a00b17 	ldw	r2,-32724(gp)
10011dfc:	103ee83a 	callr	r2
10011e00:	00000106 	br	10011e08 <alt_get_errno+0x28>
10011e04:	d095fd04 	addi	r2,gp,22516
}
10011e08:	e037883a 	mov	sp,fp
10011e0c:	dfc00117 	ldw	ra,4(sp)
10011e10:	df000017 	ldw	fp,0(sp)
10011e14:	dec00204 	addi	sp,sp,8
10011e18:	f800283a 	ret

10011e1c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10011e1c:	defffb04 	addi	sp,sp,-20
10011e20:	dfc00415 	stw	ra,16(sp)
10011e24:	df000315 	stw	fp,12(sp)
10011e28:	df000304 	addi	fp,sp,12
10011e2c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10011e30:	e0bfff17 	ldw	r2,-4(fp)
10011e34:	10000816 	blt	r2,zero,10011e58 <close+0x3c>
10011e38:	01400304 	movi	r5,12
10011e3c:	e13fff17 	ldw	r4,-4(fp)
10011e40:	00050540 	call	10005054 <__mulsi3>
10011e44:	1007883a 	mov	r3,r2
10011e48:	008400b4 	movhi	r2,4098
10011e4c:	10859904 	addi	r2,r2,5732
10011e50:	1885883a 	add	r2,r3,r2
10011e54:	00000106 	br	10011e5c <close+0x40>
10011e58:	0005883a 	mov	r2,zero
10011e5c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10011e60:	e0bffd17 	ldw	r2,-12(fp)
10011e64:	10001926 	beq	r2,zero,10011ecc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10011e68:	e0bffd17 	ldw	r2,-12(fp)
10011e6c:	10800017 	ldw	r2,0(r2)
10011e70:	10800417 	ldw	r2,16(r2)
10011e74:	10000626 	beq	r2,zero,10011e90 <close+0x74>
10011e78:	e0bffd17 	ldw	r2,-12(fp)
10011e7c:	10800017 	ldw	r2,0(r2)
10011e80:	10800417 	ldw	r2,16(r2)
10011e84:	e13ffd17 	ldw	r4,-12(fp)
10011e88:	103ee83a 	callr	r2
10011e8c:	00000106 	br	10011e94 <close+0x78>
10011e90:	0005883a 	mov	r2,zero
10011e94:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10011e98:	e13fff17 	ldw	r4,-4(fp)
10011e9c:	00125040 	call	10012504 <alt_release_fd>
    if (rval < 0)
10011ea0:	e0bffe17 	ldw	r2,-8(fp)
10011ea4:	1000070e 	bge	r2,zero,10011ec4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
10011ea8:	0011de00 	call	10011de0 <alt_get_errno>
10011eac:	1007883a 	mov	r3,r2
10011eb0:	e0bffe17 	ldw	r2,-8(fp)
10011eb4:	0085c83a 	sub	r2,zero,r2
10011eb8:	18800015 	stw	r2,0(r3)
      return -1;
10011ebc:	00bfffc4 	movi	r2,-1
10011ec0:	00000706 	br	10011ee0 <close+0xc4>
    }
    return 0;
10011ec4:	0005883a 	mov	r2,zero
10011ec8:	00000506 	br	10011ee0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10011ecc:	0011de00 	call	10011de0 <alt_get_errno>
10011ed0:	1007883a 	mov	r3,r2
10011ed4:	00801444 	movi	r2,81
10011ed8:	18800015 	stw	r2,0(r3)
    return -1;
10011edc:	00bfffc4 	movi	r2,-1
  }
}
10011ee0:	e037883a 	mov	sp,fp
10011ee4:	dfc00117 	ldw	ra,4(sp)
10011ee8:	df000017 	ldw	fp,0(sp)
10011eec:	dec00204 	addi	sp,sp,8
10011ef0:	f800283a 	ret

10011ef4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10011ef4:	defffc04 	addi	sp,sp,-16
10011ef8:	df000315 	stw	fp,12(sp)
10011efc:	df000304 	addi	fp,sp,12
10011f00:	e13ffd15 	stw	r4,-12(fp)
10011f04:	e17ffe15 	stw	r5,-8(fp)
10011f08:	e1bfff15 	stw	r6,-4(fp)
  return len;
10011f0c:	e0bfff17 	ldw	r2,-4(fp)
}
10011f10:	e037883a 	mov	sp,fp
10011f14:	df000017 	ldw	fp,0(sp)
10011f18:	dec00104 	addi	sp,sp,4
10011f1c:	f800283a 	ret

10011f20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011f20:	defffe04 	addi	sp,sp,-8
10011f24:	dfc00115 	stw	ra,4(sp)
10011f28:	df000015 	stw	fp,0(sp)
10011f2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011f30:	d0a00b17 	ldw	r2,-32724(gp)
10011f34:	10000326 	beq	r2,zero,10011f44 <alt_get_errno+0x24>
10011f38:	d0a00b17 	ldw	r2,-32724(gp)
10011f3c:	103ee83a 	callr	r2
10011f40:	00000106 	br	10011f48 <alt_get_errno+0x28>
10011f44:	d095fd04 	addi	r2,gp,22516
}
10011f48:	e037883a 	mov	sp,fp
10011f4c:	dfc00117 	ldw	ra,4(sp)
10011f50:	df000017 	ldw	fp,0(sp)
10011f54:	dec00204 	addi	sp,sp,8
10011f58:	f800283a 	ret

10011f5c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
10011f5c:	defffb04 	addi	sp,sp,-20
10011f60:	dfc00415 	stw	ra,16(sp)
10011f64:	df000315 	stw	fp,12(sp)
10011f68:	df000304 	addi	fp,sp,12
10011f6c:	e13ffe15 	stw	r4,-8(fp)
10011f70:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011f74:	e0bffe17 	ldw	r2,-8(fp)
10011f78:	10000816 	blt	r2,zero,10011f9c <fstat+0x40>
10011f7c:	01400304 	movi	r5,12
10011f80:	e13ffe17 	ldw	r4,-8(fp)
10011f84:	00050540 	call	10005054 <__mulsi3>
10011f88:	1007883a 	mov	r3,r2
10011f8c:	008400b4 	movhi	r2,4098
10011f90:	10859904 	addi	r2,r2,5732
10011f94:	1885883a 	add	r2,r3,r2
10011f98:	00000106 	br	10011fa0 <fstat+0x44>
10011f9c:	0005883a 	mov	r2,zero
10011fa0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10011fa4:	e0bffd17 	ldw	r2,-12(fp)
10011fa8:	10001026 	beq	r2,zero,10011fec <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10011fac:	e0bffd17 	ldw	r2,-12(fp)
10011fb0:	10800017 	ldw	r2,0(r2)
10011fb4:	10800817 	ldw	r2,32(r2)
10011fb8:	10000726 	beq	r2,zero,10011fd8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
10011fbc:	e0bffd17 	ldw	r2,-12(fp)
10011fc0:	10800017 	ldw	r2,0(r2)
10011fc4:	10800817 	ldw	r2,32(r2)
10011fc8:	e17fff17 	ldw	r5,-4(fp)
10011fcc:	e13ffd17 	ldw	r4,-12(fp)
10011fd0:	103ee83a 	callr	r2
10011fd4:	00000a06 	br	10012000 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10011fd8:	e0bfff17 	ldw	r2,-4(fp)
10011fdc:	00c80004 	movi	r3,8192
10011fe0:	10c00115 	stw	r3,4(r2)
      return 0;
10011fe4:	0005883a 	mov	r2,zero
10011fe8:	00000506 	br	10012000 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10011fec:	0011f200 	call	10011f20 <alt_get_errno>
10011ff0:	1007883a 	mov	r3,r2
10011ff4:	00801444 	movi	r2,81
10011ff8:	18800015 	stw	r2,0(r3)
    return -1;
10011ffc:	00bfffc4 	movi	r2,-1
  }
}
10012000:	e037883a 	mov	sp,fp
10012004:	dfc00117 	ldw	ra,4(sp)
10012008:	df000017 	ldw	fp,0(sp)
1001200c:	dec00204 	addi	sp,sp,8
10012010:	f800283a 	ret

10012014 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10012014:	defffe04 	addi	sp,sp,-8
10012018:	dfc00115 	stw	ra,4(sp)
1001201c:	df000015 	stw	fp,0(sp)
10012020:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10012024:	d0a00b17 	ldw	r2,-32724(gp)
10012028:	10000326 	beq	r2,zero,10012038 <alt_get_errno+0x24>
1001202c:	d0a00b17 	ldw	r2,-32724(gp)
10012030:	103ee83a 	callr	r2
10012034:	00000106 	br	1001203c <alt_get_errno+0x28>
10012038:	d095fd04 	addi	r2,gp,22516
}
1001203c:	e037883a 	mov	sp,fp
10012040:	dfc00117 	ldw	ra,4(sp)
10012044:	df000017 	ldw	fp,0(sp)
10012048:	dec00204 	addi	sp,sp,8
1001204c:	f800283a 	ret

10012050 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10012050:	deffed04 	addi	sp,sp,-76
10012054:	dfc01215 	stw	ra,72(sp)
10012058:	df001115 	stw	fp,68(sp)
1001205c:	df001104 	addi	fp,sp,68
10012060:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10012064:	e0bfff17 	ldw	r2,-4(fp)
10012068:	10000816 	blt	r2,zero,1001208c <isatty+0x3c>
1001206c:	01400304 	movi	r5,12
10012070:	e13fff17 	ldw	r4,-4(fp)
10012074:	00050540 	call	10005054 <__mulsi3>
10012078:	1007883a 	mov	r3,r2
1001207c:	008400b4 	movhi	r2,4098
10012080:	10859904 	addi	r2,r2,5732
10012084:	1885883a 	add	r2,r3,r2
10012088:	00000106 	br	10012090 <isatty+0x40>
1001208c:	0005883a 	mov	r2,zero
10012090:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10012094:	e0bfef17 	ldw	r2,-68(fp)
10012098:	10000e26 	beq	r2,zero,100120d4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1001209c:	e0bfef17 	ldw	r2,-68(fp)
100120a0:	10800017 	ldw	r2,0(r2)
100120a4:	10800817 	ldw	r2,32(r2)
100120a8:	1000021e 	bne	r2,zero,100120b4 <isatty+0x64>
    {
      return 1;
100120ac:	00800044 	movi	r2,1
100120b0:	00000d06 	br	100120e8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
100120b4:	e0bff004 	addi	r2,fp,-64
100120b8:	100b883a 	mov	r5,r2
100120bc:	e13fff17 	ldw	r4,-4(fp)
100120c0:	0011f5c0 	call	10011f5c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
100120c4:	e0bff117 	ldw	r2,-60(fp)
100120c8:	10880020 	cmpeqi	r2,r2,8192
100120cc:	10803fcc 	andi	r2,r2,255
100120d0:	00000506 	br	100120e8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100120d4:	00120140 	call	10012014 <alt_get_errno>
100120d8:	1007883a 	mov	r3,r2
100120dc:	00801444 	movi	r2,81
100120e0:	18800015 	stw	r2,0(r3)
    return 0;
100120e4:	0005883a 	mov	r2,zero
  }
}
100120e8:	e037883a 	mov	sp,fp
100120ec:	dfc00117 	ldw	ra,4(sp)
100120f0:	df000017 	ldw	fp,0(sp)
100120f4:	dec00204 	addi	sp,sp,8
100120f8:	f800283a 	ret

100120fc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
100120fc:	defffc04 	addi	sp,sp,-16
10012100:	df000315 	stw	fp,12(sp)
10012104:	df000304 	addi	fp,sp,12
10012108:	e13ffd15 	stw	r4,-12(fp)
1001210c:	e17ffe15 	stw	r5,-8(fp)
10012110:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10012114:	e0fffe17 	ldw	r3,-8(fp)
10012118:	e0bffd17 	ldw	r2,-12(fp)
1001211c:	18800c26 	beq	r3,r2,10012150 <alt_load_section+0x54>
  {
    while( to != end )
10012120:	00000806 	br	10012144 <alt_load_section+0x48>
    {
      *to++ = *from++;
10012124:	e0bffe17 	ldw	r2,-8(fp)
10012128:	10c00104 	addi	r3,r2,4
1001212c:	e0fffe15 	stw	r3,-8(fp)
10012130:	e0fffd17 	ldw	r3,-12(fp)
10012134:	19000104 	addi	r4,r3,4
10012138:	e13ffd15 	stw	r4,-12(fp)
1001213c:	18c00017 	ldw	r3,0(r3)
10012140:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10012144:	e0fffe17 	ldw	r3,-8(fp)
10012148:	e0bfff17 	ldw	r2,-4(fp)
1001214c:	18bff51e 	bne	r3,r2,10012124 <__alt_data_end+0xf8012124>
    {
      *to++ = *from++;
    }
  }
}
10012150:	0001883a 	nop
10012154:	e037883a 	mov	sp,fp
10012158:	df000017 	ldw	fp,0(sp)
1001215c:	dec00104 	addi	sp,sp,4
10012160:	f800283a 	ret

10012164 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10012164:	defffe04 	addi	sp,sp,-8
10012168:	dfc00115 	stw	ra,4(sp)
1001216c:	df000015 	stw	fp,0(sp)
10012170:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10012174:	018400b4 	movhi	r6,4098
10012178:	318a2104 	addi	r6,r6,10372
1001217c:	01440074 	movhi	r5,4097
10012180:	29544304 	addi	r5,r5,20748
10012184:	010400b4 	movhi	r4,4098
10012188:	210a2104 	addi	r4,r4,10372
1001218c:	00120fc0 	call	100120fc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10012190:	01840034 	movhi	r6,4096
10012194:	31808c04 	addi	r6,r6,560
10012198:	01440034 	movhi	r5,4096
1001219c:	29400804 	addi	r5,r5,32
100121a0:	01040034 	movhi	r4,4096
100121a4:	21000804 	addi	r4,r4,32
100121a8:	00120fc0 	call	100120fc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
100121ac:	01840074 	movhi	r6,4097
100121b0:	31944304 	addi	r6,r6,20748
100121b4:	01440074 	movhi	r5,4097
100121b8:	29518004 	addi	r5,r5,17920
100121bc:	01040074 	movhi	r4,4097
100121c0:	21118004 	addi	r4,r4,17920
100121c4:	00120fc0 	call	100120fc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
100121c8:	00135480 	call	10013548 <alt_dcache_flush_all>
  alt_icache_flush_all();
100121cc:	00137080 	call	10013708 <alt_icache_flush_all>
}
100121d0:	0001883a 	nop
100121d4:	e037883a 	mov	sp,fp
100121d8:	dfc00117 	ldw	ra,4(sp)
100121dc:	df000017 	ldw	fp,0(sp)
100121e0:	dec00204 	addi	sp,sp,8
100121e4:	f800283a 	ret

100121e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100121e8:	defffe04 	addi	sp,sp,-8
100121ec:	dfc00115 	stw	ra,4(sp)
100121f0:	df000015 	stw	fp,0(sp)
100121f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100121f8:	d0a00b17 	ldw	r2,-32724(gp)
100121fc:	10000326 	beq	r2,zero,1001220c <alt_get_errno+0x24>
10012200:	d0a00b17 	ldw	r2,-32724(gp)
10012204:	103ee83a 	callr	r2
10012208:	00000106 	br	10012210 <alt_get_errno+0x28>
1001220c:	d095fd04 	addi	r2,gp,22516
}
10012210:	e037883a 	mov	sp,fp
10012214:	dfc00117 	ldw	ra,4(sp)
10012218:	df000017 	ldw	fp,0(sp)
1001221c:	dec00204 	addi	sp,sp,8
10012220:	f800283a 	ret

10012224 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10012224:	defff904 	addi	sp,sp,-28
10012228:	dfc00615 	stw	ra,24(sp)
1001222c:	df000515 	stw	fp,20(sp)
10012230:	df000504 	addi	fp,sp,20
10012234:	e13ffd15 	stw	r4,-12(fp)
10012238:	e17ffe15 	stw	r5,-8(fp)
1001223c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10012240:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10012244:	e0bffd17 	ldw	r2,-12(fp)
10012248:	10000816 	blt	r2,zero,1001226c <lseek+0x48>
1001224c:	01400304 	movi	r5,12
10012250:	e13ffd17 	ldw	r4,-12(fp)
10012254:	00050540 	call	10005054 <__mulsi3>
10012258:	1007883a 	mov	r3,r2
1001225c:	008400b4 	movhi	r2,4098
10012260:	10859904 	addi	r2,r2,5732
10012264:	1885883a 	add	r2,r3,r2
10012268:	00000106 	br	10012270 <lseek+0x4c>
1001226c:	0005883a 	mov	r2,zero
10012270:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10012274:	e0bffc17 	ldw	r2,-16(fp)
10012278:	10001026 	beq	r2,zero,100122bc <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1001227c:	e0bffc17 	ldw	r2,-16(fp)
10012280:	10800017 	ldw	r2,0(r2)
10012284:	10800717 	ldw	r2,28(r2)
10012288:	10000926 	beq	r2,zero,100122b0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1001228c:	e0bffc17 	ldw	r2,-16(fp)
10012290:	10800017 	ldw	r2,0(r2)
10012294:	10800717 	ldw	r2,28(r2)
10012298:	e1bfff17 	ldw	r6,-4(fp)
1001229c:	e17ffe17 	ldw	r5,-8(fp)
100122a0:	e13ffc17 	ldw	r4,-16(fp)
100122a4:	103ee83a 	callr	r2
100122a8:	e0bffb15 	stw	r2,-20(fp)
100122ac:	00000506 	br	100122c4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
100122b0:	00bfde84 	movi	r2,-134
100122b4:	e0bffb15 	stw	r2,-20(fp)
100122b8:	00000206 	br	100122c4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
100122bc:	00bfebc4 	movi	r2,-81
100122c0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
100122c4:	e0bffb17 	ldw	r2,-20(fp)
100122c8:	1000070e 	bge	r2,zero,100122e8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
100122cc:	00121e80 	call	100121e8 <alt_get_errno>
100122d0:	1007883a 	mov	r3,r2
100122d4:	e0bffb17 	ldw	r2,-20(fp)
100122d8:	0085c83a 	sub	r2,zero,r2
100122dc:	18800015 	stw	r2,0(r3)
    rc = -1;
100122e0:	00bfffc4 	movi	r2,-1
100122e4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
100122e8:	e0bffb17 	ldw	r2,-20(fp)
}
100122ec:	e037883a 	mov	sp,fp
100122f0:	dfc00117 	ldw	ra,4(sp)
100122f4:	df000017 	ldw	fp,0(sp)
100122f8:	dec00204 	addi	sp,sp,8
100122fc:	f800283a 	ret

10012300 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10012300:	defffd04 	addi	sp,sp,-12
10012304:	dfc00215 	stw	ra,8(sp)
10012308:	df000115 	stw	fp,4(sp)
1001230c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10012310:	0009883a 	mov	r4,zero
10012314:	00127d80 	call	100127d8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10012318:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1001231c:	00128100 	call	10012810 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10012320:	01840074 	movhi	r6,4097
10012324:	31943904 	addi	r6,r6,20708
10012328:	01440074 	movhi	r5,4097
1001232c:	29543904 	addi	r5,r5,20708
10012330:	01040074 	movhi	r4,4097
10012334:	21143904 	addi	r4,r4,20708
10012338:	0013aac0 	call	10013aac <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1001233c:	00136480 	call	10013648 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10012340:	01040074 	movhi	r4,4097
10012344:	210daa04 	addi	r4,r4,13992
10012348:	001426c0 	call	1001426c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1001234c:	d095fe17 	ldw	r2,22520(gp)
10012350:	d0d5ff17 	ldw	r3,22524(gp)
10012354:	d1160017 	ldw	r4,22528(gp)
10012358:	200d883a 	mov	r6,r4
1001235c:	180b883a 	mov	r5,r3
10012360:	1009883a 	mov	r4,r2
10012364:	0002aec0 	call	10002aec <main>
10012368:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1001236c:	01000044 	movi	r4,1
10012370:	0011e1c0 	call	10011e1c <close>
  exit (result);
10012374:	e13fff17 	ldw	r4,-4(fp)
10012378:	00142800 	call	10014280 <exit>

1001237c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1001237c:	defffe04 	addi	sp,sp,-8
10012380:	df000115 	stw	fp,4(sp)
10012384:	df000104 	addi	fp,sp,4
10012388:	e13fff15 	stw	r4,-4(fp)
}
1001238c:	0001883a 	nop
10012390:	e037883a 	mov	sp,fp
10012394:	df000017 	ldw	fp,0(sp)
10012398:	dec00104 	addi	sp,sp,4
1001239c:	f800283a 	ret

100123a0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
100123a0:	defffe04 	addi	sp,sp,-8
100123a4:	df000115 	stw	fp,4(sp)
100123a8:	df000104 	addi	fp,sp,4
100123ac:	e13fff15 	stw	r4,-4(fp)
}
100123b0:	0001883a 	nop
100123b4:	e037883a 	mov	sp,fp
100123b8:	df000017 	ldw	fp,0(sp)
100123bc:	dec00104 	addi	sp,sp,4
100123c0:	f800283a 	ret

100123c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100123c4:	defffe04 	addi	sp,sp,-8
100123c8:	dfc00115 	stw	ra,4(sp)
100123cc:	df000015 	stw	fp,0(sp)
100123d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100123d4:	d0a00b17 	ldw	r2,-32724(gp)
100123d8:	10000326 	beq	r2,zero,100123e8 <alt_get_errno+0x24>
100123dc:	d0a00b17 	ldw	r2,-32724(gp)
100123e0:	103ee83a 	callr	r2
100123e4:	00000106 	br	100123ec <alt_get_errno+0x28>
100123e8:	d095fd04 	addi	r2,gp,22516
}
100123ec:	e037883a 	mov	sp,fp
100123f0:	dfc00117 	ldw	ra,4(sp)
100123f4:	df000017 	ldw	fp,0(sp)
100123f8:	dec00204 	addi	sp,sp,8
100123fc:	f800283a 	ret

10012400 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10012400:	defff904 	addi	sp,sp,-28
10012404:	dfc00615 	stw	ra,24(sp)
10012408:	df000515 	stw	fp,20(sp)
1001240c:	df000504 	addi	fp,sp,20
10012410:	e13ffd15 	stw	r4,-12(fp)
10012414:	e17ffe15 	stw	r5,-8(fp)
10012418:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001241c:	e0bffd17 	ldw	r2,-12(fp)
10012420:	10000816 	blt	r2,zero,10012444 <read+0x44>
10012424:	01400304 	movi	r5,12
10012428:	e13ffd17 	ldw	r4,-12(fp)
1001242c:	00050540 	call	10005054 <__mulsi3>
10012430:	1007883a 	mov	r3,r2
10012434:	008400b4 	movhi	r2,4098
10012438:	10859904 	addi	r2,r2,5732
1001243c:	1885883a 	add	r2,r3,r2
10012440:	00000106 	br	10012448 <read+0x48>
10012444:	0005883a 	mov	r2,zero
10012448:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1001244c:	e0bffb17 	ldw	r2,-20(fp)
10012450:	10002226 	beq	r2,zero,100124dc <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10012454:	e0bffb17 	ldw	r2,-20(fp)
10012458:	10800217 	ldw	r2,8(r2)
1001245c:	108000cc 	andi	r2,r2,3
10012460:	10800060 	cmpeqi	r2,r2,1
10012464:	1000181e 	bne	r2,zero,100124c8 <read+0xc8>
        (fd->dev->read))
10012468:	e0bffb17 	ldw	r2,-20(fp)
1001246c:	10800017 	ldw	r2,0(r2)
10012470:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10012474:	10001426 	beq	r2,zero,100124c8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10012478:	e0bffb17 	ldw	r2,-20(fp)
1001247c:	10800017 	ldw	r2,0(r2)
10012480:	10800517 	ldw	r2,20(r2)
10012484:	e0ffff17 	ldw	r3,-4(fp)
10012488:	180d883a 	mov	r6,r3
1001248c:	e17ffe17 	ldw	r5,-8(fp)
10012490:	e13ffb17 	ldw	r4,-20(fp)
10012494:	103ee83a 	callr	r2
10012498:	e0bffc15 	stw	r2,-16(fp)
1001249c:	e0bffc17 	ldw	r2,-16(fp)
100124a0:	1000070e 	bge	r2,zero,100124c0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
100124a4:	00123c40 	call	100123c4 <alt_get_errno>
100124a8:	1007883a 	mov	r3,r2
100124ac:	e0bffc17 	ldw	r2,-16(fp)
100124b0:	0085c83a 	sub	r2,zero,r2
100124b4:	18800015 	stw	r2,0(r3)
          return -1;
100124b8:	00bfffc4 	movi	r2,-1
100124bc:	00000c06 	br	100124f0 <read+0xf0>
        }
        return rval;
100124c0:	e0bffc17 	ldw	r2,-16(fp)
100124c4:	00000a06 	br	100124f0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
100124c8:	00123c40 	call	100123c4 <alt_get_errno>
100124cc:	1007883a 	mov	r3,r2
100124d0:	00800344 	movi	r2,13
100124d4:	18800015 	stw	r2,0(r3)
100124d8:	00000406 	br	100124ec <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
100124dc:	00123c40 	call	100123c4 <alt_get_errno>
100124e0:	1007883a 	mov	r3,r2
100124e4:	00801444 	movi	r2,81
100124e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
100124ec:	00bfffc4 	movi	r2,-1
}
100124f0:	e037883a 	mov	sp,fp
100124f4:	dfc00117 	ldw	ra,4(sp)
100124f8:	df000017 	ldw	fp,0(sp)
100124fc:	dec00204 	addi	sp,sp,8
10012500:	f800283a 	ret

10012504 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10012504:	defffc04 	addi	sp,sp,-16
10012508:	dfc00315 	stw	ra,12(sp)
1001250c:	df000215 	stw	fp,8(sp)
10012510:	dc000115 	stw	r16,4(sp)
10012514:	df000204 	addi	fp,sp,8
10012518:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1001251c:	e0bffe17 	ldw	r2,-8(fp)
10012520:	108000d0 	cmplti	r2,r2,3
10012524:	1000111e 	bne	r2,zero,1001256c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10012528:	040400b4 	movhi	r16,4098
1001252c:	84059904 	addi	r16,r16,5732
10012530:	e0bffe17 	ldw	r2,-8(fp)
10012534:	01400304 	movi	r5,12
10012538:	1009883a 	mov	r4,r2
1001253c:	00050540 	call	10005054 <__mulsi3>
10012540:	8085883a 	add	r2,r16,r2
10012544:	10800204 	addi	r2,r2,8
10012548:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1001254c:	040400b4 	movhi	r16,4098
10012550:	84059904 	addi	r16,r16,5732
10012554:	e0bffe17 	ldw	r2,-8(fp)
10012558:	01400304 	movi	r5,12
1001255c:	1009883a 	mov	r4,r2
10012560:	00050540 	call	10005054 <__mulsi3>
10012564:	8085883a 	add	r2,r16,r2
10012568:	10000015 	stw	zero,0(r2)
  }
}
1001256c:	0001883a 	nop
10012570:	e6ffff04 	addi	sp,fp,-4
10012574:	dfc00217 	ldw	ra,8(sp)
10012578:	df000117 	ldw	fp,4(sp)
1001257c:	dc000017 	ldw	r16,0(sp)
10012580:	dec00304 	addi	sp,sp,12
10012584:	f800283a 	ret

10012588 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10012588:	defff904 	addi	sp,sp,-28
1001258c:	df000615 	stw	fp,24(sp)
10012590:	df000604 	addi	fp,sp,24
10012594:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012598:	0005303a 	rdctl	r2,status
1001259c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100125a0:	e0fffe17 	ldw	r3,-8(fp)
100125a4:	00bfff84 	movi	r2,-2
100125a8:	1884703a 	and	r2,r3,r2
100125ac:	1001703a 	wrctl	status,r2
  
  return context;
100125b0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
100125b4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
100125b8:	d0a00c17 	ldw	r2,-32720(gp)
100125bc:	10c000c4 	addi	r3,r2,3
100125c0:	00bfff04 	movi	r2,-4
100125c4:	1884703a 	and	r2,r3,r2
100125c8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
100125cc:	d0e00c17 	ldw	r3,-32720(gp)
100125d0:	e0bfff17 	ldw	r2,-4(fp)
100125d4:	1887883a 	add	r3,r3,r2
100125d8:	00860034 	movhi	r2,6144
100125dc:	10800004 	addi	r2,r2,0
100125e0:	10c0062e 	bgeu	r2,r3,100125fc <sbrk+0x74>
100125e4:	e0bffb17 	ldw	r2,-20(fp)
100125e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100125ec:	e0bffa17 	ldw	r2,-24(fp)
100125f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
100125f4:	00bfffc4 	movi	r2,-1
100125f8:	00000b06 	br	10012628 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
100125fc:	d0a00c17 	ldw	r2,-32720(gp)
10012600:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
10012604:	d0e00c17 	ldw	r3,-32720(gp)
10012608:	e0bfff17 	ldw	r2,-4(fp)
1001260c:	1885883a 	add	r2,r3,r2
10012610:	d0a00c15 	stw	r2,-32720(gp)
10012614:	e0bffb17 	ldw	r2,-20(fp)
10012618:	e0bffc15 	stw	r2,-16(fp)
1001261c:	e0bffc17 	ldw	r2,-16(fp)
10012620:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10012624:	e0bffd17 	ldw	r2,-12(fp)
} 
10012628:	e037883a 	mov	sp,fp
1001262c:	df000017 	ldw	fp,0(sp)
10012630:	dec00104 	addi	sp,sp,4
10012634:	f800283a 	ret

10012638 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
10012638:	defffd04 	addi	sp,sp,-12
1001263c:	dfc00215 	stw	ra,8(sp)
10012640:	df000115 	stw	fp,4(sp)
10012644:	df000104 	addi	fp,sp,4
10012648:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1001264c:	e13fff17 	ldw	r4,-4(fp)
10012650:	00133f00 	call	100133f0 <alt_busy_sleep>
}
10012654:	e037883a 	mov	sp,fp
10012658:	dfc00117 	ldw	ra,4(sp)
1001265c:	df000017 	ldw	fp,0(sp)
10012660:	dec00204 	addi	sp,sp,8
10012664:	f800283a 	ret

10012668 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10012668:	defffe04 	addi	sp,sp,-8
1001266c:	dfc00115 	stw	ra,4(sp)
10012670:	df000015 	stw	fp,0(sp)
10012674:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10012678:	d0a00b17 	ldw	r2,-32724(gp)
1001267c:	10000326 	beq	r2,zero,1001268c <alt_get_errno+0x24>
10012680:	d0a00b17 	ldw	r2,-32724(gp)
10012684:	103ee83a 	callr	r2
10012688:	00000106 	br	10012690 <alt_get_errno+0x28>
1001268c:	d095fd04 	addi	r2,gp,22516
}
10012690:	e037883a 	mov	sp,fp
10012694:	dfc00117 	ldw	ra,4(sp)
10012698:	df000017 	ldw	fp,0(sp)
1001269c:	dec00204 	addi	sp,sp,8
100126a0:	f800283a 	ret

100126a4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
100126a4:	defff904 	addi	sp,sp,-28
100126a8:	dfc00615 	stw	ra,24(sp)
100126ac:	df000515 	stw	fp,20(sp)
100126b0:	df000504 	addi	fp,sp,20
100126b4:	e13ffd15 	stw	r4,-12(fp)
100126b8:	e17ffe15 	stw	r5,-8(fp)
100126bc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100126c0:	e0bffd17 	ldw	r2,-12(fp)
100126c4:	10000816 	blt	r2,zero,100126e8 <write+0x44>
100126c8:	01400304 	movi	r5,12
100126cc:	e13ffd17 	ldw	r4,-12(fp)
100126d0:	00050540 	call	10005054 <__mulsi3>
100126d4:	1007883a 	mov	r3,r2
100126d8:	008400b4 	movhi	r2,4098
100126dc:	10859904 	addi	r2,r2,5732
100126e0:	1885883a 	add	r2,r3,r2
100126e4:	00000106 	br	100126ec <write+0x48>
100126e8:	0005883a 	mov	r2,zero
100126ec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
100126f0:	e0bffb17 	ldw	r2,-20(fp)
100126f4:	10002126 	beq	r2,zero,1001277c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
100126f8:	e0bffb17 	ldw	r2,-20(fp)
100126fc:	10800217 	ldw	r2,8(r2)
10012700:	108000cc 	andi	r2,r2,3
10012704:	10001826 	beq	r2,zero,10012768 <write+0xc4>
10012708:	e0bffb17 	ldw	r2,-20(fp)
1001270c:	10800017 	ldw	r2,0(r2)
10012710:	10800617 	ldw	r2,24(r2)
10012714:	10001426 	beq	r2,zero,10012768 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10012718:	e0bffb17 	ldw	r2,-20(fp)
1001271c:	10800017 	ldw	r2,0(r2)
10012720:	10800617 	ldw	r2,24(r2)
10012724:	e0ffff17 	ldw	r3,-4(fp)
10012728:	180d883a 	mov	r6,r3
1001272c:	e17ffe17 	ldw	r5,-8(fp)
10012730:	e13ffb17 	ldw	r4,-20(fp)
10012734:	103ee83a 	callr	r2
10012738:	e0bffc15 	stw	r2,-16(fp)
1001273c:	e0bffc17 	ldw	r2,-16(fp)
10012740:	1000070e 	bge	r2,zero,10012760 <write+0xbc>
      {
        ALT_ERRNO = -rval;
10012744:	00126680 	call	10012668 <alt_get_errno>
10012748:	1007883a 	mov	r3,r2
1001274c:	e0bffc17 	ldw	r2,-16(fp)
10012750:	0085c83a 	sub	r2,zero,r2
10012754:	18800015 	stw	r2,0(r3)
        return -1;
10012758:	00bfffc4 	movi	r2,-1
1001275c:	00000c06 	br	10012790 <write+0xec>
      }
      return rval;
10012760:	e0bffc17 	ldw	r2,-16(fp)
10012764:	00000a06 	br	10012790 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10012768:	00126680 	call	10012668 <alt_get_errno>
1001276c:	1007883a 	mov	r3,r2
10012770:	00800344 	movi	r2,13
10012774:	18800015 	stw	r2,0(r3)
10012778:	00000406 	br	1001278c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1001277c:	00126680 	call	10012668 <alt_get_errno>
10012780:	1007883a 	mov	r3,r2
10012784:	00801444 	movi	r2,81
10012788:	18800015 	stw	r2,0(r3)
  }
  return -1;
1001278c:	00bfffc4 	movi	r2,-1
}
10012790:	e037883a 	mov	sp,fp
10012794:	dfc00117 	ldw	ra,4(sp)
10012798:	df000017 	ldw	fp,0(sp)
1001279c:	dec00204 	addi	sp,sp,8
100127a0:	f800283a 	ret

100127a4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
100127a4:	defffd04 	addi	sp,sp,-12
100127a8:	dfc00215 	stw	ra,8(sp)
100127ac:	df000115 	stw	fp,4(sp)
100127b0:	df000104 	addi	fp,sp,4
100127b4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
100127b8:	d1600804 	addi	r5,gp,-32736
100127bc:	e13fff17 	ldw	r4,-4(fp)
100127c0:	00135a40 	call	100135a4 <alt_dev_llist_insert>
}
100127c4:	e037883a 	mov	sp,fp
100127c8:	dfc00117 	ldw	ra,4(sp)
100127cc:	df000017 	ldw	fp,0(sp)
100127d0:	dec00204 	addi	sp,sp,8
100127d4:	f800283a 	ret

100127d8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
100127d8:	defffd04 	addi	sp,sp,-12
100127dc:	dfc00215 	stw	ra,8(sp)
100127e0:	df000115 	stw	fp,4(sp)
100127e4:	df000104 	addi	fp,sp,4
100127e8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
100127ec:	0013f500 	call	10013f50 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
100127f0:	00800044 	movi	r2,1
100127f4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
100127f8:	0001883a 	nop
100127fc:	e037883a 	mov	sp,fp
10012800:	dfc00117 	ldw	ra,4(sp)
10012804:	df000017 	ldw	fp,0(sp)
10012808:	dec00204 	addi	sp,sp,8
1001280c:	f800283a 	ret

10012810 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10012810:	defffe04 	addi	sp,sp,-8
10012814:	dfc00115 	stw	ra,4(sp)
10012818:	df000015 	stw	fp,0(sp)
1001281c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10012820:	000d883a 	mov	r6,zero
10012824:	000b883a 	mov	r5,zero
10012828:	010400b4 	movhi	r4,4098
1001282c:	21060304 	addi	r4,r4,6156
10012830:	00129c00 	call	100129c0 <altera_avalon_jtag_uart_init>
10012834:	010400b4 	movhi	r4,4098
10012838:	2105f904 	addi	r4,r4,6116
1001283c:	00127a40 	call	100127a4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10012840:	0001883a 	nop
}
10012844:	0001883a 	nop
10012848:	e037883a 	mov	sp,fp
1001284c:	dfc00117 	ldw	ra,4(sp)
10012850:	df000017 	ldw	fp,0(sp)
10012854:	dec00204 	addi	sp,sp,8
10012858:	f800283a 	ret

1001285c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1001285c:	defffa04 	addi	sp,sp,-24
10012860:	dfc00515 	stw	ra,20(sp)
10012864:	df000415 	stw	fp,16(sp)
10012868:	df000404 	addi	fp,sp,16
1001286c:	e13ffd15 	stw	r4,-12(fp)
10012870:	e17ffe15 	stw	r5,-8(fp)
10012874:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10012878:	e0bffd17 	ldw	r2,-12(fp)
1001287c:	10800017 	ldw	r2,0(r2)
10012880:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10012884:	e0bffc17 	ldw	r2,-16(fp)
10012888:	10c00a04 	addi	r3,r2,40
1001288c:	e0bffd17 	ldw	r2,-12(fp)
10012890:	10800217 	ldw	r2,8(r2)
10012894:	100f883a 	mov	r7,r2
10012898:	e1bfff17 	ldw	r6,-4(fp)
1001289c:	e17ffe17 	ldw	r5,-8(fp)
100128a0:	1809883a 	mov	r4,r3
100128a4:	0012e840 	call	10012e84 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
100128a8:	e037883a 	mov	sp,fp
100128ac:	dfc00117 	ldw	ra,4(sp)
100128b0:	df000017 	ldw	fp,0(sp)
100128b4:	dec00204 	addi	sp,sp,8
100128b8:	f800283a 	ret

100128bc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
100128bc:	defffa04 	addi	sp,sp,-24
100128c0:	dfc00515 	stw	ra,20(sp)
100128c4:	df000415 	stw	fp,16(sp)
100128c8:	df000404 	addi	fp,sp,16
100128cc:	e13ffd15 	stw	r4,-12(fp)
100128d0:	e17ffe15 	stw	r5,-8(fp)
100128d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100128d8:	e0bffd17 	ldw	r2,-12(fp)
100128dc:	10800017 	ldw	r2,0(r2)
100128e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
100128e4:	e0bffc17 	ldw	r2,-16(fp)
100128e8:	10c00a04 	addi	r3,r2,40
100128ec:	e0bffd17 	ldw	r2,-12(fp)
100128f0:	10800217 	ldw	r2,8(r2)
100128f4:	100f883a 	mov	r7,r2
100128f8:	e1bfff17 	ldw	r6,-4(fp)
100128fc:	e17ffe17 	ldw	r5,-8(fp)
10012900:	1809883a 	mov	r4,r3
10012904:	00130a00 	call	100130a0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10012908:	e037883a 	mov	sp,fp
1001290c:	dfc00117 	ldw	ra,4(sp)
10012910:	df000017 	ldw	fp,0(sp)
10012914:	dec00204 	addi	sp,sp,8
10012918:	f800283a 	ret

1001291c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1001291c:	defffc04 	addi	sp,sp,-16
10012920:	dfc00315 	stw	ra,12(sp)
10012924:	df000215 	stw	fp,8(sp)
10012928:	df000204 	addi	fp,sp,8
1001292c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10012930:	e0bfff17 	ldw	r2,-4(fp)
10012934:	10800017 	ldw	r2,0(r2)
10012938:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1001293c:	e0bffe17 	ldw	r2,-8(fp)
10012940:	10c00a04 	addi	r3,r2,40
10012944:	e0bfff17 	ldw	r2,-4(fp)
10012948:	10800217 	ldw	r2,8(r2)
1001294c:	100b883a 	mov	r5,r2
10012950:	1809883a 	mov	r4,r3
10012954:	0012d2c0 	call	10012d2c <altera_avalon_jtag_uart_close>
}
10012958:	e037883a 	mov	sp,fp
1001295c:	dfc00117 	ldw	ra,4(sp)
10012960:	df000017 	ldw	fp,0(sp)
10012964:	dec00204 	addi	sp,sp,8
10012968:	f800283a 	ret

1001296c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1001296c:	defffa04 	addi	sp,sp,-24
10012970:	dfc00515 	stw	ra,20(sp)
10012974:	df000415 	stw	fp,16(sp)
10012978:	df000404 	addi	fp,sp,16
1001297c:	e13ffd15 	stw	r4,-12(fp)
10012980:	e17ffe15 	stw	r5,-8(fp)
10012984:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10012988:	e0bffd17 	ldw	r2,-12(fp)
1001298c:	10800017 	ldw	r2,0(r2)
10012990:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10012994:	e0bffc17 	ldw	r2,-16(fp)
10012998:	10800a04 	addi	r2,r2,40
1001299c:	e1bfff17 	ldw	r6,-4(fp)
100129a0:	e17ffe17 	ldw	r5,-8(fp)
100129a4:	1009883a 	mov	r4,r2
100129a8:	0012d940 	call	10012d94 <altera_avalon_jtag_uart_ioctl>
}
100129ac:	e037883a 	mov	sp,fp
100129b0:	dfc00117 	ldw	ra,4(sp)
100129b4:	df000017 	ldw	fp,0(sp)
100129b8:	dec00204 	addi	sp,sp,8
100129bc:	f800283a 	ret

100129c0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
100129c0:	defffa04 	addi	sp,sp,-24
100129c4:	dfc00515 	stw	ra,20(sp)
100129c8:	df000415 	stw	fp,16(sp)
100129cc:	df000404 	addi	fp,sp,16
100129d0:	e13ffd15 	stw	r4,-12(fp)
100129d4:	e17ffe15 	stw	r5,-8(fp)
100129d8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100129dc:	e0bffd17 	ldw	r2,-12(fp)
100129e0:	00c00044 	movi	r3,1
100129e4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
100129e8:	e0bffd17 	ldw	r2,-12(fp)
100129ec:	10800017 	ldw	r2,0(r2)
100129f0:	10800104 	addi	r2,r2,4
100129f4:	1007883a 	mov	r3,r2
100129f8:	e0bffd17 	ldw	r2,-12(fp)
100129fc:	10800817 	ldw	r2,32(r2)
10012a00:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10012a04:	e0bffe17 	ldw	r2,-8(fp)
10012a08:	e0ffff17 	ldw	r3,-4(fp)
10012a0c:	d8000015 	stw	zero,0(sp)
10012a10:	e1fffd17 	ldw	r7,-12(fp)
10012a14:	01840074 	movhi	r6,4097
10012a18:	318aa004 	addi	r6,r6,10880
10012a1c:	180b883a 	mov	r5,r3
10012a20:	1009883a 	mov	r4,r2
10012a24:	00137280 	call	10013728 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10012a28:	e0bffd17 	ldw	r2,-12(fp)
10012a2c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10012a30:	e0bffd17 	ldw	r2,-12(fp)
10012a34:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10012a38:	d0d60217 	ldw	r3,22536(gp)
10012a3c:	e1fffd17 	ldw	r7,-12(fp)
10012a40:	01840074 	movhi	r6,4097
10012a44:	318b2304 	addi	r6,r6,11404
10012a48:	180b883a 	mov	r5,r3
10012a4c:	1009883a 	mov	r4,r2
10012a50:	00132c40 	call	100132c4 <alt_alarm_start>
10012a54:	1000040e 	bge	r2,zero,10012a68 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10012a58:	e0fffd17 	ldw	r3,-12(fp)
10012a5c:	00a00034 	movhi	r2,32768
10012a60:	10bfffc4 	addi	r2,r2,-1
10012a64:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10012a68:	0001883a 	nop
10012a6c:	e037883a 	mov	sp,fp
10012a70:	dfc00117 	ldw	ra,4(sp)
10012a74:	df000017 	ldw	fp,0(sp)
10012a78:	dec00204 	addi	sp,sp,8
10012a7c:	f800283a 	ret

10012a80 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10012a80:	defff804 	addi	sp,sp,-32
10012a84:	df000715 	stw	fp,28(sp)
10012a88:	df000704 	addi	fp,sp,28
10012a8c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10012a90:	e0bfff17 	ldw	r2,-4(fp)
10012a94:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10012a98:	e0bffb17 	ldw	r2,-20(fp)
10012a9c:	10800017 	ldw	r2,0(r2)
10012aa0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10012aa4:	e0bffc17 	ldw	r2,-16(fp)
10012aa8:	10800104 	addi	r2,r2,4
10012aac:	10800037 	ldwio	r2,0(r2)
10012ab0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10012ab4:	e0bffd17 	ldw	r2,-12(fp)
10012ab8:	1080c00c 	andi	r2,r2,768
10012abc:	10006d26 	beq	r2,zero,10012c74 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10012ac0:	e0bffd17 	ldw	r2,-12(fp)
10012ac4:	1080400c 	andi	r2,r2,256
10012ac8:	10003526 	beq	r2,zero,10012ba0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10012acc:	00800074 	movhi	r2,1
10012ad0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012ad4:	e0bffb17 	ldw	r2,-20(fp)
10012ad8:	10800a17 	ldw	r2,40(r2)
10012adc:	10800044 	addi	r2,r2,1
10012ae0:	1081ffcc 	andi	r2,r2,2047
10012ae4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10012ae8:	e0bffb17 	ldw	r2,-20(fp)
10012aec:	10c00b17 	ldw	r3,44(r2)
10012af0:	e0bffe17 	ldw	r2,-8(fp)
10012af4:	18801526 	beq	r3,r2,10012b4c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10012af8:	e0bffc17 	ldw	r2,-16(fp)
10012afc:	10800037 	ldwio	r2,0(r2)
10012b00:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10012b04:	e0bff917 	ldw	r2,-28(fp)
10012b08:	10a0000c 	andi	r2,r2,32768
10012b0c:	10001126 	beq	r2,zero,10012b54 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10012b10:	e0bffb17 	ldw	r2,-20(fp)
10012b14:	10800a17 	ldw	r2,40(r2)
10012b18:	e0fff917 	ldw	r3,-28(fp)
10012b1c:	1809883a 	mov	r4,r3
10012b20:	e0fffb17 	ldw	r3,-20(fp)
10012b24:	1885883a 	add	r2,r3,r2
10012b28:	10800e04 	addi	r2,r2,56
10012b2c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012b30:	e0bffb17 	ldw	r2,-20(fp)
10012b34:	10800a17 	ldw	r2,40(r2)
10012b38:	10800044 	addi	r2,r2,1
10012b3c:	10c1ffcc 	andi	r3,r2,2047
10012b40:	e0bffb17 	ldw	r2,-20(fp)
10012b44:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10012b48:	003fe206 	br	10012ad4 <__alt_data_end+0xf8012ad4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10012b4c:	0001883a 	nop
10012b50:	00000106 	br	10012b58 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10012b54:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10012b58:	e0bff917 	ldw	r2,-28(fp)
10012b5c:	10bfffec 	andhi	r2,r2,65535
10012b60:	10000f26 	beq	r2,zero,10012ba0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10012b64:	e0bffb17 	ldw	r2,-20(fp)
10012b68:	10c00817 	ldw	r3,32(r2)
10012b6c:	00bfff84 	movi	r2,-2
10012b70:	1886703a 	and	r3,r3,r2
10012b74:	e0bffb17 	ldw	r2,-20(fp)
10012b78:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10012b7c:	e0bffc17 	ldw	r2,-16(fp)
10012b80:	10800104 	addi	r2,r2,4
10012b84:	1007883a 	mov	r3,r2
10012b88:	e0bffb17 	ldw	r2,-20(fp)
10012b8c:	10800817 	ldw	r2,32(r2)
10012b90:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10012b94:	e0bffc17 	ldw	r2,-16(fp)
10012b98:	10800104 	addi	r2,r2,4
10012b9c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10012ba0:	e0bffd17 	ldw	r2,-12(fp)
10012ba4:	1080800c 	andi	r2,r2,512
10012ba8:	103fbe26 	beq	r2,zero,10012aa4 <__alt_data_end+0xf8012aa4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10012bac:	e0bffd17 	ldw	r2,-12(fp)
10012bb0:	1004d43a 	srli	r2,r2,16
10012bb4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10012bb8:	00001406 	br	10012c0c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10012bbc:	e0bffc17 	ldw	r2,-16(fp)
10012bc0:	e0fffb17 	ldw	r3,-20(fp)
10012bc4:	18c00d17 	ldw	r3,52(r3)
10012bc8:	e13ffb17 	ldw	r4,-20(fp)
10012bcc:	20c7883a 	add	r3,r4,r3
10012bd0:	18c20e04 	addi	r3,r3,2104
10012bd4:	18c00003 	ldbu	r3,0(r3)
10012bd8:	18c03fcc 	andi	r3,r3,255
10012bdc:	18c0201c 	xori	r3,r3,128
10012be0:	18ffe004 	addi	r3,r3,-128
10012be4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012be8:	e0bffb17 	ldw	r2,-20(fp)
10012bec:	10800d17 	ldw	r2,52(r2)
10012bf0:	10800044 	addi	r2,r2,1
10012bf4:	10c1ffcc 	andi	r3,r2,2047
10012bf8:	e0bffb17 	ldw	r2,-20(fp)
10012bfc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10012c00:	e0bffa17 	ldw	r2,-24(fp)
10012c04:	10bfffc4 	addi	r2,r2,-1
10012c08:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10012c0c:	e0bffa17 	ldw	r2,-24(fp)
10012c10:	10000526 	beq	r2,zero,10012c28 <altera_avalon_jtag_uart_irq+0x1a8>
10012c14:	e0bffb17 	ldw	r2,-20(fp)
10012c18:	10c00d17 	ldw	r3,52(r2)
10012c1c:	e0bffb17 	ldw	r2,-20(fp)
10012c20:	10800c17 	ldw	r2,48(r2)
10012c24:	18bfe51e 	bne	r3,r2,10012bbc <__alt_data_end+0xf8012bbc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10012c28:	e0bffa17 	ldw	r2,-24(fp)
10012c2c:	103f9d26 	beq	r2,zero,10012aa4 <__alt_data_end+0xf8012aa4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10012c30:	e0bffb17 	ldw	r2,-20(fp)
10012c34:	10c00817 	ldw	r3,32(r2)
10012c38:	00bfff44 	movi	r2,-3
10012c3c:	1886703a 	and	r3,r3,r2
10012c40:	e0bffb17 	ldw	r2,-20(fp)
10012c44:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10012c48:	e0bffb17 	ldw	r2,-20(fp)
10012c4c:	10800017 	ldw	r2,0(r2)
10012c50:	10800104 	addi	r2,r2,4
10012c54:	1007883a 	mov	r3,r2
10012c58:	e0bffb17 	ldw	r2,-20(fp)
10012c5c:	10800817 	ldw	r2,32(r2)
10012c60:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10012c64:	e0bffc17 	ldw	r2,-16(fp)
10012c68:	10800104 	addi	r2,r2,4
10012c6c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10012c70:	003f8c06 	br	10012aa4 <__alt_data_end+0xf8012aa4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10012c74:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10012c78:	0001883a 	nop
10012c7c:	e037883a 	mov	sp,fp
10012c80:	df000017 	ldw	fp,0(sp)
10012c84:	dec00104 	addi	sp,sp,4
10012c88:	f800283a 	ret

10012c8c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10012c8c:	defff804 	addi	sp,sp,-32
10012c90:	df000715 	stw	fp,28(sp)
10012c94:	df000704 	addi	fp,sp,28
10012c98:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10012c9c:	e0bffb17 	ldw	r2,-20(fp)
10012ca0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10012ca4:	e0bff917 	ldw	r2,-28(fp)
10012ca8:	10800017 	ldw	r2,0(r2)
10012cac:	10800104 	addi	r2,r2,4
10012cb0:	10800037 	ldwio	r2,0(r2)
10012cb4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10012cb8:	e0bffa17 	ldw	r2,-24(fp)
10012cbc:	1081000c 	andi	r2,r2,1024
10012cc0:	10000b26 	beq	r2,zero,10012cf0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10012cc4:	e0bff917 	ldw	r2,-28(fp)
10012cc8:	10800017 	ldw	r2,0(r2)
10012ccc:	10800104 	addi	r2,r2,4
10012cd0:	1007883a 	mov	r3,r2
10012cd4:	e0bff917 	ldw	r2,-28(fp)
10012cd8:	10800817 	ldw	r2,32(r2)
10012cdc:	10810014 	ori	r2,r2,1024
10012ce0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10012ce4:	e0bff917 	ldw	r2,-28(fp)
10012ce8:	10000915 	stw	zero,36(r2)
10012cec:	00000a06 	br	10012d18 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10012cf0:	e0bff917 	ldw	r2,-28(fp)
10012cf4:	10c00917 	ldw	r3,36(r2)
10012cf8:	00a00034 	movhi	r2,32768
10012cfc:	10bfff04 	addi	r2,r2,-4
10012d00:	10c00536 	bltu	r2,r3,10012d18 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10012d04:	e0bff917 	ldw	r2,-28(fp)
10012d08:	10800917 	ldw	r2,36(r2)
10012d0c:	10c00044 	addi	r3,r2,1
10012d10:	e0bff917 	ldw	r2,-28(fp)
10012d14:	10c00915 	stw	r3,36(r2)
10012d18:	d0960217 	ldw	r2,22536(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10012d1c:	e037883a 	mov	sp,fp
10012d20:	df000017 	ldw	fp,0(sp)
10012d24:	dec00104 	addi	sp,sp,4
10012d28:	f800283a 	ret

10012d2c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10012d2c:	defffd04 	addi	sp,sp,-12
10012d30:	df000215 	stw	fp,8(sp)
10012d34:	df000204 	addi	fp,sp,8
10012d38:	e13ffe15 	stw	r4,-8(fp)
10012d3c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10012d40:	00000506 	br	10012d58 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10012d44:	e0bfff17 	ldw	r2,-4(fp)
10012d48:	1090000c 	andi	r2,r2,16384
10012d4c:	10000226 	beq	r2,zero,10012d58 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10012d50:	00bffd44 	movi	r2,-11
10012d54:	00000b06 	br	10012d84 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10012d58:	e0bffe17 	ldw	r2,-8(fp)
10012d5c:	10c00d17 	ldw	r3,52(r2)
10012d60:	e0bffe17 	ldw	r2,-8(fp)
10012d64:	10800c17 	ldw	r2,48(r2)
10012d68:	18800526 	beq	r3,r2,10012d80 <altera_avalon_jtag_uart_close+0x54>
10012d6c:	e0bffe17 	ldw	r2,-8(fp)
10012d70:	10c00917 	ldw	r3,36(r2)
10012d74:	e0bffe17 	ldw	r2,-8(fp)
10012d78:	10800117 	ldw	r2,4(r2)
10012d7c:	18bff136 	bltu	r3,r2,10012d44 <__alt_data_end+0xf8012d44>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10012d80:	0005883a 	mov	r2,zero
}
10012d84:	e037883a 	mov	sp,fp
10012d88:	df000017 	ldw	fp,0(sp)
10012d8c:	dec00104 	addi	sp,sp,4
10012d90:	f800283a 	ret

10012d94 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10012d94:	defffa04 	addi	sp,sp,-24
10012d98:	df000515 	stw	fp,20(sp)
10012d9c:	df000504 	addi	fp,sp,20
10012da0:	e13ffd15 	stw	r4,-12(fp)
10012da4:	e17ffe15 	stw	r5,-8(fp)
10012da8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10012dac:	00bff9c4 	movi	r2,-25
10012db0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10012db4:	e0bffe17 	ldw	r2,-8(fp)
10012db8:	10da8060 	cmpeqi	r3,r2,27137
10012dbc:	1800031e 	bne	r3,zero,10012dcc <altera_avalon_jtag_uart_ioctl+0x38>
10012dc0:	109a80a0 	cmpeqi	r2,r2,27138
10012dc4:	1000181e 	bne	r2,zero,10012e28 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10012dc8:	00002906 	br	10012e70 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10012dcc:	e0bffd17 	ldw	r2,-12(fp)
10012dd0:	10c00117 	ldw	r3,4(r2)
10012dd4:	00a00034 	movhi	r2,32768
10012dd8:	10bfffc4 	addi	r2,r2,-1
10012ddc:	18802126 	beq	r3,r2,10012e64 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10012de0:	e0bfff17 	ldw	r2,-4(fp)
10012de4:	10800017 	ldw	r2,0(r2)
10012de8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10012dec:	e0bffc17 	ldw	r2,-16(fp)
10012df0:	10800090 	cmplti	r2,r2,2
10012df4:	1000061e 	bne	r2,zero,10012e10 <altera_avalon_jtag_uart_ioctl+0x7c>
10012df8:	e0fffc17 	ldw	r3,-16(fp)
10012dfc:	00a00034 	movhi	r2,32768
10012e00:	10bfffc4 	addi	r2,r2,-1
10012e04:	18800226 	beq	r3,r2,10012e10 <altera_avalon_jtag_uart_ioctl+0x7c>
10012e08:	e0bffc17 	ldw	r2,-16(fp)
10012e0c:	00000206 	br	10012e18 <altera_avalon_jtag_uart_ioctl+0x84>
10012e10:	00a00034 	movhi	r2,32768
10012e14:	10bfff84 	addi	r2,r2,-2
10012e18:	e0fffd17 	ldw	r3,-12(fp)
10012e1c:	18800115 	stw	r2,4(r3)
      rc = 0;
10012e20:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10012e24:	00000f06 	br	10012e64 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10012e28:	e0bffd17 	ldw	r2,-12(fp)
10012e2c:	10c00117 	ldw	r3,4(r2)
10012e30:	00a00034 	movhi	r2,32768
10012e34:	10bfffc4 	addi	r2,r2,-1
10012e38:	18800c26 	beq	r3,r2,10012e6c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10012e3c:	e0bffd17 	ldw	r2,-12(fp)
10012e40:	10c00917 	ldw	r3,36(r2)
10012e44:	e0bffd17 	ldw	r2,-12(fp)
10012e48:	10800117 	ldw	r2,4(r2)
10012e4c:	1885803a 	cmpltu	r2,r3,r2
10012e50:	10c03fcc 	andi	r3,r2,255
10012e54:	e0bfff17 	ldw	r2,-4(fp)
10012e58:	10c00015 	stw	r3,0(r2)
      rc = 0;
10012e5c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10012e60:	00000206 	br	10012e6c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10012e64:	0001883a 	nop
10012e68:	00000106 	br	10012e70 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10012e6c:	0001883a 	nop

  default:
    break;
  }

  return rc;
10012e70:	e0bffb17 	ldw	r2,-20(fp)
}
10012e74:	e037883a 	mov	sp,fp
10012e78:	df000017 	ldw	fp,0(sp)
10012e7c:	dec00104 	addi	sp,sp,4
10012e80:	f800283a 	ret

10012e84 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10012e84:	defff304 	addi	sp,sp,-52
10012e88:	dfc00c15 	stw	ra,48(sp)
10012e8c:	df000b15 	stw	fp,44(sp)
10012e90:	df000b04 	addi	fp,sp,44
10012e94:	e13ffc15 	stw	r4,-16(fp)
10012e98:	e17ffd15 	stw	r5,-12(fp)
10012e9c:	e1bffe15 	stw	r6,-8(fp)
10012ea0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10012ea4:	e0bffd17 	ldw	r2,-12(fp)
10012ea8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10012eac:	00004706 	br	10012fcc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10012eb0:	e0bffc17 	ldw	r2,-16(fp)
10012eb4:	10800a17 	ldw	r2,40(r2)
10012eb8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10012ebc:	e0bffc17 	ldw	r2,-16(fp)
10012ec0:	10800b17 	ldw	r2,44(r2)
10012ec4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10012ec8:	e0fff717 	ldw	r3,-36(fp)
10012ecc:	e0bff817 	ldw	r2,-32(fp)
10012ed0:	18800536 	bltu	r3,r2,10012ee8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10012ed4:	e0fff717 	ldw	r3,-36(fp)
10012ed8:	e0bff817 	ldw	r2,-32(fp)
10012edc:	1885c83a 	sub	r2,r3,r2
10012ee0:	e0bff615 	stw	r2,-40(fp)
10012ee4:	00000406 	br	10012ef8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10012ee8:	00c20004 	movi	r3,2048
10012eec:	e0bff817 	ldw	r2,-32(fp)
10012ef0:	1885c83a 	sub	r2,r3,r2
10012ef4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10012ef8:	e0bff617 	ldw	r2,-40(fp)
10012efc:	10001e26 	beq	r2,zero,10012f78 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10012f00:	e0fffe17 	ldw	r3,-8(fp)
10012f04:	e0bff617 	ldw	r2,-40(fp)
10012f08:	1880022e 	bgeu	r3,r2,10012f14 <altera_avalon_jtag_uart_read+0x90>
        n = space;
10012f0c:	e0bffe17 	ldw	r2,-8(fp)
10012f10:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10012f14:	e0bffc17 	ldw	r2,-16(fp)
10012f18:	10c00e04 	addi	r3,r2,56
10012f1c:	e0bff817 	ldw	r2,-32(fp)
10012f20:	1885883a 	add	r2,r3,r2
10012f24:	e1bff617 	ldw	r6,-40(fp)
10012f28:	100b883a 	mov	r5,r2
10012f2c:	e13ff517 	ldw	r4,-44(fp)
10012f30:	000ac700 	call	1000ac70 <memcpy>
      ptr   += n;
10012f34:	e0fff517 	ldw	r3,-44(fp)
10012f38:	e0bff617 	ldw	r2,-40(fp)
10012f3c:	1885883a 	add	r2,r3,r2
10012f40:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10012f44:	e0fffe17 	ldw	r3,-8(fp)
10012f48:	e0bff617 	ldw	r2,-40(fp)
10012f4c:	1885c83a 	sub	r2,r3,r2
10012f50:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012f54:	e0fff817 	ldw	r3,-32(fp)
10012f58:	e0bff617 	ldw	r2,-40(fp)
10012f5c:	1885883a 	add	r2,r3,r2
10012f60:	10c1ffcc 	andi	r3,r2,2047
10012f64:	e0bffc17 	ldw	r2,-16(fp)
10012f68:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10012f6c:	e0bffe17 	ldw	r2,-8(fp)
10012f70:	00bfcf16 	blt	zero,r2,10012eb0 <__alt_data_end+0xf8012eb0>
10012f74:	00000106 	br	10012f7c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10012f78:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10012f7c:	e0fff517 	ldw	r3,-44(fp)
10012f80:	e0bffd17 	ldw	r2,-12(fp)
10012f84:	1880141e 	bne	r3,r2,10012fd8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10012f88:	e0bfff17 	ldw	r2,-4(fp)
10012f8c:	1090000c 	andi	r2,r2,16384
10012f90:	1000131e 	bne	r2,zero,10012fe0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10012f94:	0001883a 	nop
10012f98:	e0bffc17 	ldw	r2,-16(fp)
10012f9c:	10c00a17 	ldw	r3,40(r2)
10012fa0:	e0bff717 	ldw	r2,-36(fp)
10012fa4:	1880051e 	bne	r3,r2,10012fbc <altera_avalon_jtag_uart_read+0x138>
10012fa8:	e0bffc17 	ldw	r2,-16(fp)
10012fac:	10c00917 	ldw	r3,36(r2)
10012fb0:	e0bffc17 	ldw	r2,-16(fp)
10012fb4:	10800117 	ldw	r2,4(r2)
10012fb8:	18bff736 	bltu	r3,r2,10012f98 <__alt_data_end+0xf8012f98>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10012fbc:	e0bffc17 	ldw	r2,-16(fp)
10012fc0:	10c00a17 	ldw	r3,40(r2)
10012fc4:	e0bff717 	ldw	r2,-36(fp)
10012fc8:	18800726 	beq	r3,r2,10012fe8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10012fcc:	e0bffe17 	ldw	r2,-8(fp)
10012fd0:	00bfb716 	blt	zero,r2,10012eb0 <__alt_data_end+0xf8012eb0>
10012fd4:	00000506 	br	10012fec <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10012fd8:	0001883a 	nop
10012fdc:	00000306 	br	10012fec <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10012fe0:	0001883a 	nop
10012fe4:	00000106 	br	10012fec <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10012fe8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10012fec:	e0fff517 	ldw	r3,-44(fp)
10012ff0:	e0bffd17 	ldw	r2,-12(fp)
10012ff4:	18801826 	beq	r3,r2,10013058 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012ff8:	0005303a 	rdctl	r2,status
10012ffc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013000:	e0fffb17 	ldw	r3,-20(fp)
10013004:	00bfff84 	movi	r2,-2
10013008:	1884703a 	and	r2,r3,r2
1001300c:	1001703a 	wrctl	status,r2
  
  return context;
10013010:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10013014:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10013018:	e0bffc17 	ldw	r2,-16(fp)
1001301c:	10800817 	ldw	r2,32(r2)
10013020:	10c00054 	ori	r3,r2,1
10013024:	e0bffc17 	ldw	r2,-16(fp)
10013028:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1001302c:	e0bffc17 	ldw	r2,-16(fp)
10013030:	10800017 	ldw	r2,0(r2)
10013034:	10800104 	addi	r2,r2,4
10013038:	1007883a 	mov	r3,r2
1001303c:	e0bffc17 	ldw	r2,-16(fp)
10013040:	10800817 	ldw	r2,32(r2)
10013044:	18800035 	stwio	r2,0(r3)
10013048:	e0bffa17 	ldw	r2,-24(fp)
1001304c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013050:	e0bff917 	ldw	r2,-28(fp)
10013054:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10013058:	e0fff517 	ldw	r3,-44(fp)
1001305c:	e0bffd17 	ldw	r2,-12(fp)
10013060:	18800426 	beq	r3,r2,10013074 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10013064:	e0fff517 	ldw	r3,-44(fp)
10013068:	e0bffd17 	ldw	r2,-12(fp)
1001306c:	1885c83a 	sub	r2,r3,r2
10013070:	00000606 	br	1001308c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10013074:	e0bfff17 	ldw	r2,-4(fp)
10013078:	1090000c 	andi	r2,r2,16384
1001307c:	10000226 	beq	r2,zero,10013088 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10013080:	00bffd44 	movi	r2,-11
10013084:	00000106 	br	1001308c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10013088:	00bffec4 	movi	r2,-5
}
1001308c:	e037883a 	mov	sp,fp
10013090:	dfc00117 	ldw	ra,4(sp)
10013094:	df000017 	ldw	fp,0(sp)
10013098:	dec00204 	addi	sp,sp,8
1001309c:	f800283a 	ret

100130a0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
100130a0:	defff304 	addi	sp,sp,-52
100130a4:	dfc00c15 	stw	ra,48(sp)
100130a8:	df000b15 	stw	fp,44(sp)
100130ac:	df000b04 	addi	fp,sp,44
100130b0:	e13ffc15 	stw	r4,-16(fp)
100130b4:	e17ffd15 	stw	r5,-12(fp)
100130b8:	e1bffe15 	stw	r6,-8(fp)
100130bc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
100130c0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
100130c4:	e0bffd17 	ldw	r2,-12(fp)
100130c8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100130cc:	00003706 	br	100131ac <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
100130d0:	e0bffc17 	ldw	r2,-16(fp)
100130d4:	10800c17 	ldw	r2,48(r2)
100130d8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
100130dc:	e0bffc17 	ldw	r2,-16(fp)
100130e0:	10800d17 	ldw	r2,52(r2)
100130e4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
100130e8:	e0fff917 	ldw	r3,-28(fp)
100130ec:	e0bff517 	ldw	r2,-44(fp)
100130f0:	1880062e 	bgeu	r3,r2,1001310c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
100130f4:	e0fff517 	ldw	r3,-44(fp)
100130f8:	e0bff917 	ldw	r2,-28(fp)
100130fc:	1885c83a 	sub	r2,r3,r2
10013100:	10bfffc4 	addi	r2,r2,-1
10013104:	e0bff615 	stw	r2,-40(fp)
10013108:	00000b06 	br	10013138 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1001310c:	e0bff517 	ldw	r2,-44(fp)
10013110:	10000526 	beq	r2,zero,10013128 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10013114:	00c20004 	movi	r3,2048
10013118:	e0bff917 	ldw	r2,-28(fp)
1001311c:	1885c83a 	sub	r2,r3,r2
10013120:	e0bff615 	stw	r2,-40(fp)
10013124:	00000406 	br	10013138 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10013128:	00c1ffc4 	movi	r3,2047
1001312c:	e0bff917 	ldw	r2,-28(fp)
10013130:	1885c83a 	sub	r2,r3,r2
10013134:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10013138:	e0bff617 	ldw	r2,-40(fp)
1001313c:	10001e26 	beq	r2,zero,100131b8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10013140:	e0fffe17 	ldw	r3,-8(fp)
10013144:	e0bff617 	ldw	r2,-40(fp)
10013148:	1880022e 	bgeu	r3,r2,10013154 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1001314c:	e0bffe17 	ldw	r2,-8(fp)
10013150:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10013154:	e0bffc17 	ldw	r2,-16(fp)
10013158:	10c20e04 	addi	r3,r2,2104
1001315c:	e0bff917 	ldw	r2,-28(fp)
10013160:	1885883a 	add	r2,r3,r2
10013164:	e1bff617 	ldw	r6,-40(fp)
10013168:	e17ffd17 	ldw	r5,-12(fp)
1001316c:	1009883a 	mov	r4,r2
10013170:	000ac700 	call	1000ac70 <memcpy>
      ptr   += n;
10013174:	e0fffd17 	ldw	r3,-12(fp)
10013178:	e0bff617 	ldw	r2,-40(fp)
1001317c:	1885883a 	add	r2,r3,r2
10013180:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10013184:	e0fffe17 	ldw	r3,-8(fp)
10013188:	e0bff617 	ldw	r2,-40(fp)
1001318c:	1885c83a 	sub	r2,r3,r2
10013190:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10013194:	e0fff917 	ldw	r3,-28(fp)
10013198:	e0bff617 	ldw	r2,-40(fp)
1001319c:	1885883a 	add	r2,r3,r2
100131a0:	10c1ffcc 	andi	r3,r2,2047
100131a4:	e0bffc17 	ldw	r2,-16(fp)
100131a8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100131ac:	e0bffe17 	ldw	r2,-8(fp)
100131b0:	00bfc716 	blt	zero,r2,100130d0 <__alt_data_end+0xf80130d0>
100131b4:	00000106 	br	100131bc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
100131b8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100131bc:	0005303a 	rdctl	r2,status
100131c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100131c4:	e0fffb17 	ldw	r3,-20(fp)
100131c8:	00bfff84 	movi	r2,-2
100131cc:	1884703a 	and	r2,r3,r2
100131d0:	1001703a 	wrctl	status,r2
  
  return context;
100131d4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
100131d8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100131dc:	e0bffc17 	ldw	r2,-16(fp)
100131e0:	10800817 	ldw	r2,32(r2)
100131e4:	10c00094 	ori	r3,r2,2
100131e8:	e0bffc17 	ldw	r2,-16(fp)
100131ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100131f0:	e0bffc17 	ldw	r2,-16(fp)
100131f4:	10800017 	ldw	r2,0(r2)
100131f8:	10800104 	addi	r2,r2,4
100131fc:	1007883a 	mov	r3,r2
10013200:	e0bffc17 	ldw	r2,-16(fp)
10013204:	10800817 	ldw	r2,32(r2)
10013208:	18800035 	stwio	r2,0(r3)
1001320c:	e0bffa17 	ldw	r2,-24(fp)
10013210:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013214:	e0bff817 	ldw	r2,-32(fp)
10013218:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1001321c:	e0bffe17 	ldw	r2,-8(fp)
10013220:	0080100e 	bge	zero,r2,10013264 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10013224:	e0bfff17 	ldw	r2,-4(fp)
10013228:	1090000c 	andi	r2,r2,16384
1001322c:	1000101e 	bne	r2,zero,10013270 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10013230:	0001883a 	nop
10013234:	e0bffc17 	ldw	r2,-16(fp)
10013238:	10c00d17 	ldw	r3,52(r2)
1001323c:	e0bff517 	ldw	r2,-44(fp)
10013240:	1880051e 	bne	r3,r2,10013258 <altera_avalon_jtag_uart_write+0x1b8>
10013244:	e0bffc17 	ldw	r2,-16(fp)
10013248:	10c00917 	ldw	r3,36(r2)
1001324c:	e0bffc17 	ldw	r2,-16(fp)
10013250:	10800117 	ldw	r2,4(r2)
10013254:	18bff736 	bltu	r3,r2,10013234 <__alt_data_end+0xf8013234>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10013258:	e0bffc17 	ldw	r2,-16(fp)
1001325c:	10800917 	ldw	r2,36(r2)
10013260:	1000051e 	bne	r2,zero,10013278 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10013264:	e0bffe17 	ldw	r2,-8(fp)
10013268:	00bfd016 	blt	zero,r2,100131ac <__alt_data_end+0xf80131ac>
1001326c:	00000306 	br	1001327c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10013270:	0001883a 	nop
10013274:	00000106 	br	1001327c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10013278:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1001327c:	e0fffd17 	ldw	r3,-12(fp)
10013280:	e0bff717 	ldw	r2,-36(fp)
10013284:	18800426 	beq	r3,r2,10013298 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10013288:	e0fffd17 	ldw	r3,-12(fp)
1001328c:	e0bff717 	ldw	r2,-36(fp)
10013290:	1885c83a 	sub	r2,r3,r2
10013294:	00000606 	br	100132b0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10013298:	e0bfff17 	ldw	r2,-4(fp)
1001329c:	1090000c 	andi	r2,r2,16384
100132a0:	10000226 	beq	r2,zero,100132ac <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
100132a4:	00bffd44 	movi	r2,-11
100132a8:	00000106 	br	100132b0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
100132ac:	00bffec4 	movi	r2,-5
}
100132b0:	e037883a 	mov	sp,fp
100132b4:	dfc00117 	ldw	ra,4(sp)
100132b8:	df000017 	ldw	fp,0(sp)
100132bc:	dec00204 	addi	sp,sp,8
100132c0:	f800283a 	ret

100132c4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
100132c4:	defff504 	addi	sp,sp,-44
100132c8:	df000a15 	stw	fp,40(sp)
100132cc:	df000a04 	addi	fp,sp,40
100132d0:	e13ffc15 	stw	r4,-16(fp)
100132d4:	e17ffd15 	stw	r5,-12(fp)
100132d8:	e1bffe15 	stw	r6,-8(fp)
100132dc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
100132e0:	e03ff615 	stw	zero,-40(fp)
100132e4:	d0960217 	ldw	r2,22536(gp)
  
  if (alt_ticks_per_second ())
100132e8:	10003c26 	beq	r2,zero,100133dc <alt_alarm_start+0x118>
  {
    if (alarm)
100132ec:	e0bffc17 	ldw	r2,-16(fp)
100132f0:	10003826 	beq	r2,zero,100133d4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
100132f4:	e0bffc17 	ldw	r2,-16(fp)
100132f8:	e0fffe17 	ldw	r3,-8(fp)
100132fc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10013300:	e0bffc17 	ldw	r2,-16(fp)
10013304:	e0ffff17 	ldw	r3,-4(fp)
10013308:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001330c:	0005303a 	rdctl	r2,status
10013310:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013314:	e0fff917 	ldw	r3,-28(fp)
10013318:	00bfff84 	movi	r2,-2
1001331c:	1884703a 	and	r2,r3,r2
10013320:	1001703a 	wrctl	status,r2
  
  return context;
10013324:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10013328:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1001332c:	d0960317 	ldw	r2,22540(gp)
      
      current_nticks = alt_nticks();
10013330:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10013334:	e0fffd17 	ldw	r3,-12(fp)
10013338:	e0bff617 	ldw	r2,-40(fp)
1001333c:	1885883a 	add	r2,r3,r2
10013340:	10c00044 	addi	r3,r2,1
10013344:	e0bffc17 	ldw	r2,-16(fp)
10013348:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1001334c:	e0bffc17 	ldw	r2,-16(fp)
10013350:	10c00217 	ldw	r3,8(r2)
10013354:	e0bff617 	ldw	r2,-40(fp)
10013358:	1880042e 	bgeu	r3,r2,1001336c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
1001335c:	e0bffc17 	ldw	r2,-16(fp)
10013360:	00c00044 	movi	r3,1
10013364:	10c00405 	stb	r3,16(r2)
10013368:	00000206 	br	10013374 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
1001336c:	e0bffc17 	ldw	r2,-16(fp)
10013370:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10013374:	e0bffc17 	ldw	r2,-16(fp)
10013378:	d0e00e04 	addi	r3,gp,-32712
1001337c:	e0fffa15 	stw	r3,-24(fp)
10013380:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10013384:	e0bffb17 	ldw	r2,-20(fp)
10013388:	e0fffa17 	ldw	r3,-24(fp)
1001338c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10013390:	e0bffa17 	ldw	r2,-24(fp)
10013394:	10c00017 	ldw	r3,0(r2)
10013398:	e0bffb17 	ldw	r2,-20(fp)
1001339c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100133a0:	e0bffa17 	ldw	r2,-24(fp)
100133a4:	10800017 	ldw	r2,0(r2)
100133a8:	e0fffb17 	ldw	r3,-20(fp)
100133ac:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100133b0:	e0bffa17 	ldw	r2,-24(fp)
100133b4:	e0fffb17 	ldw	r3,-20(fp)
100133b8:	10c00015 	stw	r3,0(r2)
100133bc:	e0bff817 	ldw	r2,-32(fp)
100133c0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100133c4:	e0bff717 	ldw	r2,-36(fp)
100133c8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
100133cc:	0005883a 	mov	r2,zero
100133d0:	00000306 	br	100133e0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
100133d4:	00bffa84 	movi	r2,-22
100133d8:	00000106 	br	100133e0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
100133dc:	00bfde84 	movi	r2,-134
  }
}
100133e0:	e037883a 	mov	sp,fp
100133e4:	df000017 	ldw	fp,0(sp)
100133e8:	dec00104 	addi	sp,sp,4
100133ec:	f800283a 	ret

100133f0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
100133f0:	defffa04 	addi	sp,sp,-24
100133f4:	dfc00515 	stw	ra,20(sp)
100133f8:	df000415 	stw	fp,16(sp)
100133fc:	df000404 	addi	fp,sp,16
10013400:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
10013404:	00800244 	movi	r2,9
10013408:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
1001340c:	014003f4 	movhi	r5,15
10013410:	29509004 	addi	r5,r5,16960
10013414:	e13ffd17 	ldw	r4,-12(fp)
10013418:	00050540 	call	10005054 <__mulsi3>
1001341c:	100b883a 	mov	r5,r2
10013420:	0100bef4 	movhi	r4,763
10013424:	213c2004 	addi	r4,r4,-3968
10013428:	0004f980 	call	10004f98 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
1001342c:	100b883a 	mov	r5,r2
10013430:	01200034 	movhi	r4,32768
10013434:	213fffc4 	addi	r4,r4,-1
10013438:	0004f980 	call	10004f98 <__udivsi3>
1001343c:	100b883a 	mov	r5,r2
10013440:	e13fff17 	ldw	r4,-4(fp)
10013444:	0004f980 	call	10004f98 <__udivsi3>
10013448:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
1001344c:	e0bffe17 	ldw	r2,-8(fp)
10013450:	10002a26 	beq	r2,zero,100134fc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10013454:	e03ffc15 	stw	zero,-16(fp)
10013458:	00001706 	br	100134b8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
1001345c:	00a00034 	movhi	r2,32768
10013460:	10bfffc4 	addi	r2,r2,-1
10013464:	10bfffc4 	addi	r2,r2,-1
10013468:	103ffe1e 	bne	r2,zero,10013464 <__alt_data_end+0xf8013464>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
1001346c:	014003f4 	movhi	r5,15
10013470:	29509004 	addi	r5,r5,16960
10013474:	e13ffd17 	ldw	r4,-12(fp)
10013478:	00050540 	call	10005054 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
1001347c:	100b883a 	mov	r5,r2
10013480:	0100bef4 	movhi	r4,763
10013484:	213c2004 	addi	r4,r4,-3968
10013488:	0004f980 	call	10004f98 <__udivsi3>
1001348c:	100b883a 	mov	r5,r2
10013490:	01200034 	movhi	r4,32768
10013494:	213fffc4 	addi	r4,r4,-1
10013498:	0004f980 	call	10004f98 <__udivsi3>
1001349c:	1007883a 	mov	r3,r2
100134a0:	e0bfff17 	ldw	r2,-4(fp)
100134a4:	10c5c83a 	sub	r2,r2,r3
100134a8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
100134ac:	e0bffc17 	ldw	r2,-16(fp)
100134b0:	10800044 	addi	r2,r2,1
100134b4:	e0bffc15 	stw	r2,-16(fp)
100134b8:	e0fffc17 	ldw	r3,-16(fp)
100134bc:	e0bffe17 	ldw	r2,-8(fp)
100134c0:	18bfe616 	blt	r3,r2,1001345c <__alt_data_end+0xf801345c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
100134c4:	014003f4 	movhi	r5,15
100134c8:	29509004 	addi	r5,r5,16960
100134cc:	e13ffd17 	ldw	r4,-12(fp)
100134d0:	00050540 	call	10005054 <__mulsi3>
100134d4:	100b883a 	mov	r5,r2
100134d8:	0100bef4 	movhi	r4,763
100134dc:	213c2004 	addi	r4,r4,-3968
100134e0:	0004f980 	call	10004f98 <__udivsi3>
100134e4:	e17fff17 	ldw	r5,-4(fp)
100134e8:	1009883a 	mov	r4,r2
100134ec:	00050540 	call	10005054 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
100134f0:	10bfffc4 	addi	r2,r2,-1
100134f4:	103ffe1e 	bne	r2,zero,100134f0 <__alt_data_end+0xf80134f0>
100134f8:	00000d06 	br	10013530 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
100134fc:	014003f4 	movhi	r5,15
10013500:	29509004 	addi	r5,r5,16960
10013504:	e13ffd17 	ldw	r4,-12(fp)
10013508:	00050540 	call	10005054 <__mulsi3>
1001350c:	100b883a 	mov	r5,r2
10013510:	0100bef4 	movhi	r4,763
10013514:	213c2004 	addi	r4,r4,-3968
10013518:	0004f980 	call	10004f98 <__udivsi3>
1001351c:	e17fff17 	ldw	r5,-4(fp)
10013520:	1009883a 	mov	r4,r2
10013524:	00050540 	call	10005054 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10013528:	10bfffc4 	addi	r2,r2,-1
1001352c:	00bffe16 	blt	zero,r2,10013528 <__alt_data_end+0xf8013528>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10013530:	0005883a 	mov	r2,zero
}
10013534:	e037883a 	mov	sp,fp
10013538:	dfc00117 	ldw	ra,4(sp)
1001353c:	df000017 	ldw	fp,0(sp)
10013540:	dec00204 	addi	sp,sp,8
10013544:	f800283a 	ret

10013548 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10013548:	deffff04 	addi	sp,sp,-4
1001354c:	df000015 	stw	fp,0(sp)
10013550:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10013554:	0001883a 	nop
10013558:	e037883a 	mov	sp,fp
1001355c:	df000017 	ldw	fp,0(sp)
10013560:	dec00104 	addi	sp,sp,4
10013564:	f800283a 	ret

10013568 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10013568:	defffe04 	addi	sp,sp,-8
1001356c:	dfc00115 	stw	ra,4(sp)
10013570:	df000015 	stw	fp,0(sp)
10013574:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10013578:	d0a00b17 	ldw	r2,-32724(gp)
1001357c:	10000326 	beq	r2,zero,1001358c <alt_get_errno+0x24>
10013580:	d0a00b17 	ldw	r2,-32724(gp)
10013584:	103ee83a 	callr	r2
10013588:	00000106 	br	10013590 <alt_get_errno+0x28>
1001358c:	d095fd04 	addi	r2,gp,22516
}
10013590:	e037883a 	mov	sp,fp
10013594:	dfc00117 	ldw	ra,4(sp)
10013598:	df000017 	ldw	fp,0(sp)
1001359c:	dec00204 	addi	sp,sp,8
100135a0:	f800283a 	ret

100135a4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
100135a4:	defffa04 	addi	sp,sp,-24
100135a8:	dfc00515 	stw	ra,20(sp)
100135ac:	df000415 	stw	fp,16(sp)
100135b0:	df000404 	addi	fp,sp,16
100135b4:	e13ffe15 	stw	r4,-8(fp)
100135b8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
100135bc:	e0bffe17 	ldw	r2,-8(fp)
100135c0:	10000326 	beq	r2,zero,100135d0 <alt_dev_llist_insert+0x2c>
100135c4:	e0bffe17 	ldw	r2,-8(fp)
100135c8:	10800217 	ldw	r2,8(r2)
100135cc:	1000061e 	bne	r2,zero,100135e8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
100135d0:	00135680 	call	10013568 <alt_get_errno>
100135d4:	1007883a 	mov	r3,r2
100135d8:	00800584 	movi	r2,22
100135dc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
100135e0:	00bffa84 	movi	r2,-22
100135e4:	00001306 	br	10013634 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
100135e8:	e0bffe17 	ldw	r2,-8(fp)
100135ec:	e0ffff17 	ldw	r3,-4(fp)
100135f0:	e0fffc15 	stw	r3,-16(fp)
100135f4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100135f8:	e0bffd17 	ldw	r2,-12(fp)
100135fc:	e0fffc17 	ldw	r3,-16(fp)
10013600:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10013604:	e0bffc17 	ldw	r2,-16(fp)
10013608:	10c00017 	ldw	r3,0(r2)
1001360c:	e0bffd17 	ldw	r2,-12(fp)
10013610:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10013614:	e0bffc17 	ldw	r2,-16(fp)
10013618:	10800017 	ldw	r2,0(r2)
1001361c:	e0fffd17 	ldw	r3,-12(fp)
10013620:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10013624:	e0bffc17 	ldw	r2,-16(fp)
10013628:	e0fffd17 	ldw	r3,-12(fp)
1001362c:	10c00015 	stw	r3,0(r2)

  return 0;  
10013630:	0005883a 	mov	r2,zero
}
10013634:	e037883a 	mov	sp,fp
10013638:	dfc00117 	ldw	ra,4(sp)
1001363c:	df000017 	ldw	fp,0(sp)
10013640:	dec00204 	addi	sp,sp,8
10013644:	f800283a 	ret

10013648 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10013648:	defffd04 	addi	sp,sp,-12
1001364c:	dfc00215 	stw	ra,8(sp)
10013650:	df000115 	stw	fp,4(sp)
10013654:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10013658:	00840074 	movhi	r2,4097
1001365c:	10917f04 	addi	r2,r2,17916
10013660:	e0bfff15 	stw	r2,-4(fp)
10013664:	00000606 	br	10013680 <_do_ctors+0x38>
        (*ctor) (); 
10013668:	e0bfff17 	ldw	r2,-4(fp)
1001366c:	10800017 	ldw	r2,0(r2)
10013670:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10013674:	e0bfff17 	ldw	r2,-4(fp)
10013678:	10bfff04 	addi	r2,r2,-4
1001367c:	e0bfff15 	stw	r2,-4(fp)
10013680:	e0ffff17 	ldw	r3,-4(fp)
10013684:	00840074 	movhi	r2,4097
10013688:	10918004 	addi	r2,r2,17920
1001368c:	18bff62e 	bgeu	r3,r2,10013668 <__alt_data_end+0xf8013668>
        (*ctor) (); 
}
10013690:	0001883a 	nop
10013694:	e037883a 	mov	sp,fp
10013698:	dfc00117 	ldw	ra,4(sp)
1001369c:	df000017 	ldw	fp,0(sp)
100136a0:	dec00204 	addi	sp,sp,8
100136a4:	f800283a 	ret

100136a8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
100136a8:	defffd04 	addi	sp,sp,-12
100136ac:	dfc00215 	stw	ra,8(sp)
100136b0:	df000115 	stw	fp,4(sp)
100136b4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100136b8:	00840074 	movhi	r2,4097
100136bc:	10917f04 	addi	r2,r2,17916
100136c0:	e0bfff15 	stw	r2,-4(fp)
100136c4:	00000606 	br	100136e0 <_do_dtors+0x38>
        (*dtor) (); 
100136c8:	e0bfff17 	ldw	r2,-4(fp)
100136cc:	10800017 	ldw	r2,0(r2)
100136d0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100136d4:	e0bfff17 	ldw	r2,-4(fp)
100136d8:	10bfff04 	addi	r2,r2,-4
100136dc:	e0bfff15 	stw	r2,-4(fp)
100136e0:	e0ffff17 	ldw	r3,-4(fp)
100136e4:	00840074 	movhi	r2,4097
100136e8:	10918004 	addi	r2,r2,17920
100136ec:	18bff62e 	bgeu	r3,r2,100136c8 <__alt_data_end+0xf80136c8>
        (*dtor) (); 
}
100136f0:	0001883a 	nop
100136f4:	e037883a 	mov	sp,fp
100136f8:	dfc00117 	ldw	ra,4(sp)
100136fc:	df000017 	ldw	fp,0(sp)
10013700:	dec00204 	addi	sp,sp,8
10013704:	f800283a 	ret

10013708 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10013708:	deffff04 	addi	sp,sp,-4
1001370c:	df000015 	stw	fp,0(sp)
10013710:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10013714:	0001883a 	nop
10013718:	e037883a 	mov	sp,fp
1001371c:	df000017 	ldw	fp,0(sp)
10013720:	dec00104 	addi	sp,sp,4
10013724:	f800283a 	ret

10013728 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10013728:	defff904 	addi	sp,sp,-28
1001372c:	dfc00615 	stw	ra,24(sp)
10013730:	df000515 	stw	fp,20(sp)
10013734:	df000504 	addi	fp,sp,20
10013738:	e13ffc15 	stw	r4,-16(fp)
1001373c:	e17ffd15 	stw	r5,-12(fp)
10013740:	e1bffe15 	stw	r6,-8(fp)
10013744:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10013748:	e0800217 	ldw	r2,8(fp)
1001374c:	d8800015 	stw	r2,0(sp)
10013750:	e1ffff17 	ldw	r7,-4(fp)
10013754:	e1bffe17 	ldw	r6,-8(fp)
10013758:	e17ffd17 	ldw	r5,-12(fp)
1001375c:	e13ffc17 	ldw	r4,-16(fp)
10013760:	00138d80 	call	100138d8 <alt_iic_isr_register>
}  
10013764:	e037883a 	mov	sp,fp
10013768:	dfc00117 	ldw	ra,4(sp)
1001376c:	df000017 	ldw	fp,0(sp)
10013770:	dec00204 	addi	sp,sp,8
10013774:	f800283a 	ret

10013778 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10013778:	defff904 	addi	sp,sp,-28
1001377c:	df000615 	stw	fp,24(sp)
10013780:	df000604 	addi	fp,sp,24
10013784:	e13ffe15 	stw	r4,-8(fp)
10013788:	e17fff15 	stw	r5,-4(fp)
1001378c:	e0bfff17 	ldw	r2,-4(fp)
10013790:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013794:	0005303a 	rdctl	r2,status
10013798:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001379c:	e0fffb17 	ldw	r3,-20(fp)
100137a0:	00bfff84 	movi	r2,-2
100137a4:	1884703a 	and	r2,r3,r2
100137a8:	1001703a 	wrctl	status,r2
  
  return context;
100137ac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100137b0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
100137b4:	00c00044 	movi	r3,1
100137b8:	e0bffa17 	ldw	r2,-24(fp)
100137bc:	1884983a 	sll	r2,r3,r2
100137c0:	1007883a 	mov	r3,r2
100137c4:	d0960117 	ldw	r2,22532(gp)
100137c8:	1884b03a 	or	r2,r3,r2
100137cc:	d0960115 	stw	r2,22532(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100137d0:	d0960117 	ldw	r2,22532(gp)
100137d4:	100170fa 	wrctl	ienable,r2
100137d8:	e0bffc17 	ldw	r2,-16(fp)
100137dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100137e0:	e0bffd17 	ldw	r2,-12(fp)
100137e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100137e8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
100137ec:	0001883a 	nop
}
100137f0:	e037883a 	mov	sp,fp
100137f4:	df000017 	ldw	fp,0(sp)
100137f8:	dec00104 	addi	sp,sp,4
100137fc:	f800283a 	ret

10013800 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10013800:	defff904 	addi	sp,sp,-28
10013804:	df000615 	stw	fp,24(sp)
10013808:	df000604 	addi	fp,sp,24
1001380c:	e13ffe15 	stw	r4,-8(fp)
10013810:	e17fff15 	stw	r5,-4(fp)
10013814:	e0bfff17 	ldw	r2,-4(fp)
10013818:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001381c:	0005303a 	rdctl	r2,status
10013820:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013824:	e0fffb17 	ldw	r3,-20(fp)
10013828:	00bfff84 	movi	r2,-2
1001382c:	1884703a 	and	r2,r3,r2
10013830:	1001703a 	wrctl	status,r2
  
  return context;
10013834:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10013838:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1001383c:	00c00044 	movi	r3,1
10013840:	e0bffa17 	ldw	r2,-24(fp)
10013844:	1884983a 	sll	r2,r3,r2
10013848:	0084303a 	nor	r2,zero,r2
1001384c:	1007883a 	mov	r3,r2
10013850:	d0960117 	ldw	r2,22532(gp)
10013854:	1884703a 	and	r2,r3,r2
10013858:	d0960115 	stw	r2,22532(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1001385c:	d0960117 	ldw	r2,22532(gp)
10013860:	100170fa 	wrctl	ienable,r2
10013864:	e0bffc17 	ldw	r2,-16(fp)
10013868:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001386c:	e0bffd17 	ldw	r2,-12(fp)
10013870:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10013874:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10013878:	0001883a 	nop
}
1001387c:	e037883a 	mov	sp,fp
10013880:	df000017 	ldw	fp,0(sp)
10013884:	dec00104 	addi	sp,sp,4
10013888:	f800283a 	ret

1001388c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1001388c:	defffc04 	addi	sp,sp,-16
10013890:	df000315 	stw	fp,12(sp)
10013894:	df000304 	addi	fp,sp,12
10013898:	e13ffe15 	stw	r4,-8(fp)
1001389c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
100138a0:	000530fa 	rdctl	r2,ienable
100138a4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
100138a8:	00c00044 	movi	r3,1
100138ac:	e0bfff17 	ldw	r2,-4(fp)
100138b0:	1884983a 	sll	r2,r3,r2
100138b4:	1007883a 	mov	r3,r2
100138b8:	e0bffd17 	ldw	r2,-12(fp)
100138bc:	1884703a 	and	r2,r3,r2
100138c0:	1004c03a 	cmpne	r2,r2,zero
100138c4:	10803fcc 	andi	r2,r2,255
}
100138c8:	e037883a 	mov	sp,fp
100138cc:	df000017 	ldw	fp,0(sp)
100138d0:	dec00104 	addi	sp,sp,4
100138d4:	f800283a 	ret

100138d8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100138d8:	defff504 	addi	sp,sp,-44
100138dc:	dfc00a15 	stw	ra,40(sp)
100138e0:	df000915 	stw	fp,36(sp)
100138e4:	df000904 	addi	fp,sp,36
100138e8:	e13ffc15 	stw	r4,-16(fp)
100138ec:	e17ffd15 	stw	r5,-12(fp)
100138f0:	e1bffe15 	stw	r6,-8(fp)
100138f4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
100138f8:	00bffa84 	movi	r2,-22
100138fc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10013900:	e0bffd17 	ldw	r2,-12(fp)
10013904:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10013908:	e0bff817 	ldw	r2,-32(fp)
1001390c:	10800808 	cmpgei	r2,r2,32
10013910:	1000271e 	bne	r2,zero,100139b0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013914:	0005303a 	rdctl	r2,status
10013918:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001391c:	e0fffb17 	ldw	r3,-20(fp)
10013920:	00bfff84 	movi	r2,-2
10013924:	1884703a 	and	r2,r3,r2
10013928:	1001703a 	wrctl	status,r2
  
  return context;
1001392c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10013930:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10013934:	008400f4 	movhi	r2,4099
10013938:	10802004 	addi	r2,r2,128
1001393c:	e0fff817 	ldw	r3,-32(fp)
10013940:	180690fa 	slli	r3,r3,3
10013944:	10c5883a 	add	r2,r2,r3
10013948:	e0fffe17 	ldw	r3,-8(fp)
1001394c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10013950:	008400f4 	movhi	r2,4099
10013954:	10802004 	addi	r2,r2,128
10013958:	e0fff817 	ldw	r3,-32(fp)
1001395c:	180690fa 	slli	r3,r3,3
10013960:	10c5883a 	add	r2,r2,r3
10013964:	10800104 	addi	r2,r2,4
10013968:	e0ffff17 	ldw	r3,-4(fp)
1001396c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10013970:	e0bffe17 	ldw	r2,-8(fp)
10013974:	10000526 	beq	r2,zero,1001398c <alt_iic_isr_register+0xb4>
10013978:	e0bff817 	ldw	r2,-32(fp)
1001397c:	100b883a 	mov	r5,r2
10013980:	e13ffc17 	ldw	r4,-16(fp)
10013984:	00137780 	call	10013778 <alt_ic_irq_enable>
10013988:	00000406 	br	1001399c <alt_iic_isr_register+0xc4>
1001398c:	e0bff817 	ldw	r2,-32(fp)
10013990:	100b883a 	mov	r5,r2
10013994:	e13ffc17 	ldw	r4,-16(fp)
10013998:	00138000 	call	10013800 <alt_ic_irq_disable>
1001399c:	e0bff715 	stw	r2,-36(fp)
100139a0:	e0bffa17 	ldw	r2,-24(fp)
100139a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100139a8:	e0bff917 	ldw	r2,-28(fp)
100139ac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
100139b0:	e0bff717 	ldw	r2,-36(fp)
}
100139b4:	e037883a 	mov	sp,fp
100139b8:	dfc00117 	ldw	ra,4(sp)
100139bc:	df000017 	ldw	fp,0(sp)
100139c0:	dec00204 	addi	sp,sp,8
100139c4:	f800283a 	ret

100139c8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
100139c8:	defff804 	addi	sp,sp,-32
100139cc:	dfc00715 	stw	ra,28(sp)
100139d0:	df000615 	stw	fp,24(sp)
100139d4:	dc000515 	stw	r16,20(sp)
100139d8:	df000604 	addi	fp,sp,24
100139dc:	e13ffb15 	stw	r4,-20(fp)
100139e0:	e17ffc15 	stw	r5,-16(fp)
100139e4:	e1bffd15 	stw	r6,-12(fp)
100139e8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
100139ec:	e1bffe17 	ldw	r6,-8(fp)
100139f0:	e17ffd17 	ldw	r5,-12(fp)
100139f4:	e13ffc17 	ldw	r4,-16(fp)
100139f8:	0013c500 	call	10013c50 <open>
100139fc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10013a00:	e0bffa17 	ldw	r2,-24(fp)
10013a04:	10002216 	blt	r2,zero,10013a90 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10013a08:	040400b4 	movhi	r16,4098
10013a0c:	84059904 	addi	r16,r16,5732
10013a10:	e0bffa17 	ldw	r2,-24(fp)
10013a14:	01400304 	movi	r5,12
10013a18:	1009883a 	mov	r4,r2
10013a1c:	00050540 	call	10005054 <__mulsi3>
10013a20:	8085883a 	add	r2,r16,r2
10013a24:	10c00017 	ldw	r3,0(r2)
10013a28:	e0bffb17 	ldw	r2,-20(fp)
10013a2c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10013a30:	040400b4 	movhi	r16,4098
10013a34:	84059904 	addi	r16,r16,5732
10013a38:	e0bffa17 	ldw	r2,-24(fp)
10013a3c:	01400304 	movi	r5,12
10013a40:	1009883a 	mov	r4,r2
10013a44:	00050540 	call	10005054 <__mulsi3>
10013a48:	8085883a 	add	r2,r16,r2
10013a4c:	10800104 	addi	r2,r2,4
10013a50:	10c00017 	ldw	r3,0(r2)
10013a54:	e0bffb17 	ldw	r2,-20(fp)
10013a58:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10013a5c:	040400b4 	movhi	r16,4098
10013a60:	84059904 	addi	r16,r16,5732
10013a64:	e0bffa17 	ldw	r2,-24(fp)
10013a68:	01400304 	movi	r5,12
10013a6c:	1009883a 	mov	r4,r2
10013a70:	00050540 	call	10005054 <__mulsi3>
10013a74:	8085883a 	add	r2,r16,r2
10013a78:	10800204 	addi	r2,r2,8
10013a7c:	10c00017 	ldw	r3,0(r2)
10013a80:	e0bffb17 	ldw	r2,-20(fp)
10013a84:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10013a88:	e13ffa17 	ldw	r4,-24(fp)
10013a8c:	00125040 	call	10012504 <alt_release_fd>
  }
} 
10013a90:	0001883a 	nop
10013a94:	e6ffff04 	addi	sp,fp,-4
10013a98:	dfc00217 	ldw	ra,8(sp)
10013a9c:	df000117 	ldw	fp,4(sp)
10013aa0:	dc000017 	ldw	r16,0(sp)
10013aa4:	dec00304 	addi	sp,sp,12
10013aa8:	f800283a 	ret

10013aac <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10013aac:	defffb04 	addi	sp,sp,-20
10013ab0:	dfc00415 	stw	ra,16(sp)
10013ab4:	df000315 	stw	fp,12(sp)
10013ab8:	df000304 	addi	fp,sp,12
10013abc:	e13ffd15 	stw	r4,-12(fp)
10013ac0:	e17ffe15 	stw	r5,-8(fp)
10013ac4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10013ac8:	01c07fc4 	movi	r7,511
10013acc:	01800044 	movi	r6,1
10013ad0:	e17ffd17 	ldw	r5,-12(fp)
10013ad4:	010400b4 	movhi	r4,4098
10013ad8:	21059c04 	addi	r4,r4,5744
10013adc:	00139c80 	call	100139c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10013ae0:	01c07fc4 	movi	r7,511
10013ae4:	000d883a 	mov	r6,zero
10013ae8:	e17ffe17 	ldw	r5,-8(fp)
10013aec:	010400b4 	movhi	r4,4098
10013af0:	21059904 	addi	r4,r4,5732
10013af4:	00139c80 	call	100139c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10013af8:	01c07fc4 	movi	r7,511
10013afc:	01800044 	movi	r6,1
10013b00:	e17fff17 	ldw	r5,-4(fp)
10013b04:	010400b4 	movhi	r4,4098
10013b08:	21059f04 	addi	r4,r4,5756
10013b0c:	00139c80 	call	100139c8 <alt_open_fd>
}  
10013b10:	0001883a 	nop
10013b14:	e037883a 	mov	sp,fp
10013b18:	dfc00117 	ldw	ra,4(sp)
10013b1c:	df000017 	ldw	fp,0(sp)
10013b20:	dec00204 	addi	sp,sp,8
10013b24:	f800283a 	ret

10013b28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10013b28:	defffe04 	addi	sp,sp,-8
10013b2c:	dfc00115 	stw	ra,4(sp)
10013b30:	df000015 	stw	fp,0(sp)
10013b34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10013b38:	d0a00b17 	ldw	r2,-32724(gp)
10013b3c:	10000326 	beq	r2,zero,10013b4c <alt_get_errno+0x24>
10013b40:	d0a00b17 	ldw	r2,-32724(gp)
10013b44:	103ee83a 	callr	r2
10013b48:	00000106 	br	10013b50 <alt_get_errno+0x28>
10013b4c:	d095fd04 	addi	r2,gp,22516
}
10013b50:	e037883a 	mov	sp,fp
10013b54:	dfc00117 	ldw	ra,4(sp)
10013b58:	df000017 	ldw	fp,0(sp)
10013b5c:	dec00204 	addi	sp,sp,8
10013b60:	f800283a 	ret

10013b64 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10013b64:	defffb04 	addi	sp,sp,-20
10013b68:	dfc00415 	stw	ra,16(sp)
10013b6c:	df000315 	stw	fp,12(sp)
10013b70:	dc000215 	stw	r16,8(sp)
10013b74:	df000304 	addi	fp,sp,12
10013b78:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10013b7c:	e0bffe17 	ldw	r2,-8(fp)
10013b80:	10800217 	ldw	r2,8(r2)
10013b84:	10d00034 	orhi	r3,r2,16384
10013b88:	e0bffe17 	ldw	r2,-8(fp)
10013b8c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10013b90:	e03ffd15 	stw	zero,-12(fp)
10013b94:	00002306 	br	10013c24 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10013b98:	040400b4 	movhi	r16,4098
10013b9c:	84059904 	addi	r16,r16,5732
10013ba0:	e0bffd17 	ldw	r2,-12(fp)
10013ba4:	01400304 	movi	r5,12
10013ba8:	1009883a 	mov	r4,r2
10013bac:	00050540 	call	10005054 <__mulsi3>
10013bb0:	8085883a 	add	r2,r16,r2
10013bb4:	10c00017 	ldw	r3,0(r2)
10013bb8:	e0bffe17 	ldw	r2,-8(fp)
10013bbc:	10800017 	ldw	r2,0(r2)
10013bc0:	1880151e 	bne	r3,r2,10013c18 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10013bc4:	040400b4 	movhi	r16,4098
10013bc8:	84059904 	addi	r16,r16,5732
10013bcc:	e0bffd17 	ldw	r2,-12(fp)
10013bd0:	01400304 	movi	r5,12
10013bd4:	1009883a 	mov	r4,r2
10013bd8:	00050540 	call	10005054 <__mulsi3>
10013bdc:	8085883a 	add	r2,r16,r2
10013be0:	10800204 	addi	r2,r2,8
10013be4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10013be8:	10000b0e 	bge	r2,zero,10013c18 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10013bec:	01400304 	movi	r5,12
10013bf0:	e13ffd17 	ldw	r4,-12(fp)
10013bf4:	00050540 	call	10005054 <__mulsi3>
10013bf8:	1007883a 	mov	r3,r2
10013bfc:	008400b4 	movhi	r2,4098
10013c00:	10859904 	addi	r2,r2,5732
10013c04:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10013c08:	e0bffe17 	ldw	r2,-8(fp)
10013c0c:	18800226 	beq	r3,r2,10013c18 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10013c10:	00bffcc4 	movi	r2,-13
10013c14:	00000806 	br	10013c38 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10013c18:	e0bffd17 	ldw	r2,-12(fp)
10013c1c:	10800044 	addi	r2,r2,1
10013c20:	e0bffd15 	stw	r2,-12(fp)
10013c24:	d0a00a17 	ldw	r2,-32728(gp)
10013c28:	1007883a 	mov	r3,r2
10013c2c:	e0bffd17 	ldw	r2,-12(fp)
10013c30:	18bfd92e 	bgeu	r3,r2,10013b98 <__alt_data_end+0xf8013b98>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10013c34:	0005883a 	mov	r2,zero
}
10013c38:	e6ffff04 	addi	sp,fp,-4
10013c3c:	dfc00217 	ldw	ra,8(sp)
10013c40:	df000117 	ldw	fp,4(sp)
10013c44:	dc000017 	ldw	r16,0(sp)
10013c48:	dec00304 	addi	sp,sp,12
10013c4c:	f800283a 	ret

10013c50 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10013c50:	defff604 	addi	sp,sp,-40
10013c54:	dfc00915 	stw	ra,36(sp)
10013c58:	df000815 	stw	fp,32(sp)
10013c5c:	df000804 	addi	fp,sp,32
10013c60:	e13ffd15 	stw	r4,-12(fp)
10013c64:	e17ffe15 	stw	r5,-8(fp)
10013c68:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10013c6c:	00bfffc4 	movi	r2,-1
10013c70:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10013c74:	00bffb44 	movi	r2,-19
10013c78:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10013c7c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10013c80:	d1600804 	addi	r5,gp,-32736
10013c84:	e13ffd17 	ldw	r4,-12(fp)
10013c88:	0013f740 	call	10013f74 <alt_find_dev>
10013c8c:	e0bff815 	stw	r2,-32(fp)
10013c90:	e0bff817 	ldw	r2,-32(fp)
10013c94:	1000051e 	bne	r2,zero,10013cac <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10013c98:	e13ffd17 	ldw	r4,-12(fp)
10013c9c:	00140040 	call	10014004 <alt_find_file>
10013ca0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10013ca4:	00800044 	movi	r2,1
10013ca8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10013cac:	e0bff817 	ldw	r2,-32(fp)
10013cb0:	10002b26 	beq	r2,zero,10013d60 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
10013cb4:	e13ff817 	ldw	r4,-32(fp)
10013cb8:	001410c0 	call	1001410c <alt_get_fd>
10013cbc:	e0bff915 	stw	r2,-28(fp)
10013cc0:	e0bff917 	ldw	r2,-28(fp)
10013cc4:	1000030e 	bge	r2,zero,10013cd4 <open+0x84>
    {
      status = index;
10013cc8:	e0bff917 	ldw	r2,-28(fp)
10013ccc:	e0bffa15 	stw	r2,-24(fp)
10013cd0:	00002506 	br	10013d68 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
10013cd4:	01400304 	movi	r5,12
10013cd8:	e13ff917 	ldw	r4,-28(fp)
10013cdc:	00050540 	call	10005054 <__mulsi3>
10013ce0:	1007883a 	mov	r3,r2
10013ce4:	008400b4 	movhi	r2,4098
10013ce8:	10859904 	addi	r2,r2,5732
10013cec:	1885883a 	add	r2,r3,r2
10013cf0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10013cf4:	e0fffe17 	ldw	r3,-8(fp)
10013cf8:	00900034 	movhi	r2,16384
10013cfc:	10bfffc4 	addi	r2,r2,-1
10013d00:	1886703a 	and	r3,r3,r2
10013d04:	e0bffc17 	ldw	r2,-16(fp)
10013d08:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10013d0c:	e0bffb17 	ldw	r2,-20(fp)
10013d10:	1000051e 	bne	r2,zero,10013d28 <open+0xd8>
10013d14:	e13ffc17 	ldw	r4,-16(fp)
10013d18:	0013b640 	call	10013b64 <alt_file_locked>
10013d1c:	e0bffa15 	stw	r2,-24(fp)
10013d20:	e0bffa17 	ldw	r2,-24(fp)
10013d24:	10001016 	blt	r2,zero,10013d68 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10013d28:	e0bff817 	ldw	r2,-32(fp)
10013d2c:	10800317 	ldw	r2,12(r2)
10013d30:	10000826 	beq	r2,zero,10013d54 <open+0x104>
10013d34:	e0bff817 	ldw	r2,-32(fp)
10013d38:	10800317 	ldw	r2,12(r2)
10013d3c:	e1ffff17 	ldw	r7,-4(fp)
10013d40:	e1bffe17 	ldw	r6,-8(fp)
10013d44:	e17ffd17 	ldw	r5,-12(fp)
10013d48:	e13ffc17 	ldw	r4,-16(fp)
10013d4c:	103ee83a 	callr	r2
10013d50:	00000106 	br	10013d58 <open+0x108>
10013d54:	0005883a 	mov	r2,zero
10013d58:	e0bffa15 	stw	r2,-24(fp)
10013d5c:	00000206 	br	10013d68 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
10013d60:	00bffb44 	movi	r2,-19
10013d64:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10013d68:	e0bffa17 	ldw	r2,-24(fp)
10013d6c:	1000090e 	bge	r2,zero,10013d94 <open+0x144>
  {
    alt_release_fd (index);  
10013d70:	e13ff917 	ldw	r4,-28(fp)
10013d74:	00125040 	call	10012504 <alt_release_fd>
    ALT_ERRNO = -status;
10013d78:	0013b280 	call	10013b28 <alt_get_errno>
10013d7c:	1007883a 	mov	r3,r2
10013d80:	e0bffa17 	ldw	r2,-24(fp)
10013d84:	0085c83a 	sub	r2,zero,r2
10013d88:	18800015 	stw	r2,0(r3)
    return -1;
10013d8c:	00bfffc4 	movi	r2,-1
10013d90:	00000106 	br	10013d98 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
10013d94:	e0bff917 	ldw	r2,-28(fp)
}
10013d98:	e037883a 	mov	sp,fp
10013d9c:	dfc00117 	ldw	ra,4(sp)
10013da0:	df000017 	ldw	fp,0(sp)
10013da4:	dec00204 	addi	sp,sp,8
10013da8:	f800283a 	ret

10013dac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10013dac:	defffa04 	addi	sp,sp,-24
10013db0:	df000515 	stw	fp,20(sp)
10013db4:	df000504 	addi	fp,sp,20
10013db8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013dbc:	0005303a 	rdctl	r2,status
10013dc0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013dc4:	e0fffc17 	ldw	r3,-16(fp)
10013dc8:	00bfff84 	movi	r2,-2
10013dcc:	1884703a 	and	r2,r3,r2
10013dd0:	1001703a 	wrctl	status,r2
  
  return context;
10013dd4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10013dd8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10013ddc:	e0bfff17 	ldw	r2,-4(fp)
10013de0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10013de4:	e0bffd17 	ldw	r2,-12(fp)
10013de8:	10800017 	ldw	r2,0(r2)
10013dec:	e0fffd17 	ldw	r3,-12(fp)
10013df0:	18c00117 	ldw	r3,4(r3)
10013df4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10013df8:	e0bffd17 	ldw	r2,-12(fp)
10013dfc:	10800117 	ldw	r2,4(r2)
10013e00:	e0fffd17 	ldw	r3,-12(fp)
10013e04:	18c00017 	ldw	r3,0(r3)
10013e08:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10013e0c:	e0bffd17 	ldw	r2,-12(fp)
10013e10:	e0fffd17 	ldw	r3,-12(fp)
10013e14:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10013e18:	e0bffd17 	ldw	r2,-12(fp)
10013e1c:	e0fffd17 	ldw	r3,-12(fp)
10013e20:	10c00015 	stw	r3,0(r2)
10013e24:	e0bffb17 	ldw	r2,-20(fp)
10013e28:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013e2c:	e0bffe17 	ldw	r2,-8(fp)
10013e30:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10013e34:	0001883a 	nop
10013e38:	e037883a 	mov	sp,fp
10013e3c:	df000017 	ldw	fp,0(sp)
10013e40:	dec00104 	addi	sp,sp,4
10013e44:	f800283a 	ret

10013e48 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10013e48:	defffb04 	addi	sp,sp,-20
10013e4c:	dfc00415 	stw	ra,16(sp)
10013e50:	df000315 	stw	fp,12(sp)
10013e54:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10013e58:	d0a00e17 	ldw	r2,-32712(gp)
10013e5c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10013e60:	d0960317 	ldw	r2,22540(gp)
10013e64:	10800044 	addi	r2,r2,1
10013e68:	d0960315 	stw	r2,22540(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10013e6c:	00002e06 	br	10013f28 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10013e70:	e0bffd17 	ldw	r2,-12(fp)
10013e74:	10800017 	ldw	r2,0(r2)
10013e78:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10013e7c:	e0bffd17 	ldw	r2,-12(fp)
10013e80:	10800403 	ldbu	r2,16(r2)
10013e84:	10803fcc 	andi	r2,r2,255
10013e88:	10000426 	beq	r2,zero,10013e9c <alt_tick+0x54>
10013e8c:	d0960317 	ldw	r2,22540(gp)
10013e90:	1000021e 	bne	r2,zero,10013e9c <alt_tick+0x54>
    {
      alarm->rollover = 0;
10013e94:	e0bffd17 	ldw	r2,-12(fp)
10013e98:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10013e9c:	e0bffd17 	ldw	r2,-12(fp)
10013ea0:	10800217 	ldw	r2,8(r2)
10013ea4:	d0d60317 	ldw	r3,22540(gp)
10013ea8:	18801d36 	bltu	r3,r2,10013f20 <alt_tick+0xd8>
10013eac:	e0bffd17 	ldw	r2,-12(fp)
10013eb0:	10800403 	ldbu	r2,16(r2)
10013eb4:	10803fcc 	andi	r2,r2,255
10013eb8:	1000191e 	bne	r2,zero,10013f20 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10013ebc:	e0bffd17 	ldw	r2,-12(fp)
10013ec0:	10800317 	ldw	r2,12(r2)
10013ec4:	e0fffd17 	ldw	r3,-12(fp)
10013ec8:	18c00517 	ldw	r3,20(r3)
10013ecc:	1809883a 	mov	r4,r3
10013ed0:	103ee83a 	callr	r2
10013ed4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10013ed8:	e0bfff17 	ldw	r2,-4(fp)
10013edc:	1000031e 	bne	r2,zero,10013eec <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10013ee0:	e13ffd17 	ldw	r4,-12(fp)
10013ee4:	0013dac0 	call	10013dac <alt_alarm_stop>
10013ee8:	00000d06 	br	10013f20 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10013eec:	e0bffd17 	ldw	r2,-12(fp)
10013ef0:	10c00217 	ldw	r3,8(r2)
10013ef4:	e0bfff17 	ldw	r2,-4(fp)
10013ef8:	1887883a 	add	r3,r3,r2
10013efc:	e0bffd17 	ldw	r2,-12(fp)
10013f00:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10013f04:	e0bffd17 	ldw	r2,-12(fp)
10013f08:	10c00217 	ldw	r3,8(r2)
10013f0c:	d0960317 	ldw	r2,22540(gp)
10013f10:	1880032e 	bgeu	r3,r2,10013f20 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10013f14:	e0bffd17 	ldw	r2,-12(fp)
10013f18:	00c00044 	movi	r3,1
10013f1c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10013f20:	e0bffe17 	ldw	r2,-8(fp)
10013f24:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10013f28:	e0fffd17 	ldw	r3,-12(fp)
10013f2c:	d0a00e04 	addi	r2,gp,-32712
10013f30:	18bfcf1e 	bne	r3,r2,10013e70 <__alt_data_end+0xf8013e70>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10013f34:	0001883a 	nop
}
10013f38:	0001883a 	nop
10013f3c:	e037883a 	mov	sp,fp
10013f40:	dfc00117 	ldw	ra,4(sp)
10013f44:	df000017 	ldw	fp,0(sp)
10013f48:	dec00204 	addi	sp,sp,8
10013f4c:	f800283a 	ret

10013f50 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10013f50:	deffff04 	addi	sp,sp,-4
10013f54:	df000015 	stw	fp,0(sp)
10013f58:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10013f5c:	000170fa 	wrctl	ienable,zero
}
10013f60:	0001883a 	nop
10013f64:	e037883a 	mov	sp,fp
10013f68:	df000017 	ldw	fp,0(sp)
10013f6c:	dec00104 	addi	sp,sp,4
10013f70:	f800283a 	ret

10013f74 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10013f74:	defffa04 	addi	sp,sp,-24
10013f78:	dfc00515 	stw	ra,20(sp)
10013f7c:	df000415 	stw	fp,16(sp)
10013f80:	df000404 	addi	fp,sp,16
10013f84:	e13ffe15 	stw	r4,-8(fp)
10013f88:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10013f8c:	e0bfff17 	ldw	r2,-4(fp)
10013f90:	10800017 	ldw	r2,0(r2)
10013f94:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10013f98:	e13ffe17 	ldw	r4,-8(fp)
10013f9c:	00051bc0 	call	100051bc <strlen>
10013fa0:	10800044 	addi	r2,r2,1
10013fa4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10013fa8:	00000d06 	br	10013fe0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10013fac:	e0bffc17 	ldw	r2,-16(fp)
10013fb0:	10800217 	ldw	r2,8(r2)
10013fb4:	e0fffd17 	ldw	r3,-12(fp)
10013fb8:	180d883a 	mov	r6,r3
10013fbc:	e17ffe17 	ldw	r5,-8(fp)
10013fc0:	1009883a 	mov	r4,r2
10013fc4:	00142b80 	call	100142b8 <memcmp>
10013fc8:	1000021e 	bne	r2,zero,10013fd4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10013fcc:	e0bffc17 	ldw	r2,-16(fp)
10013fd0:	00000706 	br	10013ff0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10013fd4:	e0bffc17 	ldw	r2,-16(fp)
10013fd8:	10800017 	ldw	r2,0(r2)
10013fdc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10013fe0:	e0fffc17 	ldw	r3,-16(fp)
10013fe4:	e0bfff17 	ldw	r2,-4(fp)
10013fe8:	18bff01e 	bne	r3,r2,10013fac <__alt_data_end+0xf8013fac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10013fec:	0005883a 	mov	r2,zero
}
10013ff0:	e037883a 	mov	sp,fp
10013ff4:	dfc00117 	ldw	ra,4(sp)
10013ff8:	df000017 	ldw	fp,0(sp)
10013ffc:	dec00204 	addi	sp,sp,8
10014000:	f800283a 	ret

10014004 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10014004:	defffb04 	addi	sp,sp,-20
10014008:	dfc00415 	stw	ra,16(sp)
1001400c:	df000315 	stw	fp,12(sp)
10014010:	df000304 	addi	fp,sp,12
10014014:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10014018:	d0a00617 	ldw	r2,-32744(gp)
1001401c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10014020:	00003106 	br	100140e8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10014024:	e0bffd17 	ldw	r2,-12(fp)
10014028:	10800217 	ldw	r2,8(r2)
1001402c:	1009883a 	mov	r4,r2
10014030:	00051bc0 	call	100051bc <strlen>
10014034:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10014038:	e0bffd17 	ldw	r2,-12(fp)
1001403c:	10c00217 	ldw	r3,8(r2)
10014040:	e0bffe17 	ldw	r2,-8(fp)
10014044:	10bfffc4 	addi	r2,r2,-1
10014048:	1885883a 	add	r2,r3,r2
1001404c:	10800003 	ldbu	r2,0(r2)
10014050:	10803fcc 	andi	r2,r2,255
10014054:	1080201c 	xori	r2,r2,128
10014058:	10bfe004 	addi	r2,r2,-128
1001405c:	10800bd8 	cmpnei	r2,r2,47
10014060:	1000031e 	bne	r2,zero,10014070 <alt_find_file+0x6c>
    {
      len -= 1;
10014064:	e0bffe17 	ldw	r2,-8(fp)
10014068:	10bfffc4 	addi	r2,r2,-1
1001406c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10014070:	e0bffe17 	ldw	r2,-8(fp)
10014074:	e0ffff17 	ldw	r3,-4(fp)
10014078:	1885883a 	add	r2,r3,r2
1001407c:	10800003 	ldbu	r2,0(r2)
10014080:	10803fcc 	andi	r2,r2,255
10014084:	1080201c 	xori	r2,r2,128
10014088:	10bfe004 	addi	r2,r2,-128
1001408c:	10800be0 	cmpeqi	r2,r2,47
10014090:	1000081e 	bne	r2,zero,100140b4 <alt_find_file+0xb0>
10014094:	e0bffe17 	ldw	r2,-8(fp)
10014098:	e0ffff17 	ldw	r3,-4(fp)
1001409c:	1885883a 	add	r2,r3,r2
100140a0:	10800003 	ldbu	r2,0(r2)
100140a4:	10803fcc 	andi	r2,r2,255
100140a8:	1080201c 	xori	r2,r2,128
100140ac:	10bfe004 	addi	r2,r2,-128
100140b0:	10000a1e 	bne	r2,zero,100140dc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
100140b4:	e0bffd17 	ldw	r2,-12(fp)
100140b8:	10800217 	ldw	r2,8(r2)
100140bc:	e0fffe17 	ldw	r3,-8(fp)
100140c0:	180d883a 	mov	r6,r3
100140c4:	e17fff17 	ldw	r5,-4(fp)
100140c8:	1009883a 	mov	r4,r2
100140cc:	00142b80 	call	100142b8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100140d0:	1000021e 	bne	r2,zero,100140dc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
100140d4:	e0bffd17 	ldw	r2,-12(fp)
100140d8:	00000706 	br	100140f8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
100140dc:	e0bffd17 	ldw	r2,-12(fp)
100140e0:	10800017 	ldw	r2,0(r2)
100140e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100140e8:	e0fffd17 	ldw	r3,-12(fp)
100140ec:	d0a00604 	addi	r2,gp,-32744
100140f0:	18bfcc1e 	bne	r3,r2,10014024 <__alt_data_end+0xf8014024>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
100140f4:	0005883a 	mov	r2,zero
}
100140f8:	e037883a 	mov	sp,fp
100140fc:	dfc00117 	ldw	ra,4(sp)
10014100:	df000017 	ldw	fp,0(sp)
10014104:	dec00204 	addi	sp,sp,8
10014108:	f800283a 	ret

1001410c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1001410c:	defffa04 	addi	sp,sp,-24
10014110:	dfc00515 	stw	ra,20(sp)
10014114:	df000415 	stw	fp,16(sp)
10014118:	dc000315 	stw	r16,12(sp)
1001411c:	df000404 	addi	fp,sp,16
10014120:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10014124:	00bffa04 	movi	r2,-24
10014128:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1001412c:	e03ffc15 	stw	zero,-16(fp)
10014130:	00001d06 	br	100141a8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
10014134:	040400b4 	movhi	r16,4098
10014138:	84059904 	addi	r16,r16,5732
1001413c:	e0bffc17 	ldw	r2,-16(fp)
10014140:	01400304 	movi	r5,12
10014144:	1009883a 	mov	r4,r2
10014148:	00050540 	call	10005054 <__mulsi3>
1001414c:	8085883a 	add	r2,r16,r2
10014150:	10800017 	ldw	r2,0(r2)
10014154:	1000111e 	bne	r2,zero,1001419c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
10014158:	040400b4 	movhi	r16,4098
1001415c:	84059904 	addi	r16,r16,5732
10014160:	e0bffc17 	ldw	r2,-16(fp)
10014164:	01400304 	movi	r5,12
10014168:	1009883a 	mov	r4,r2
1001416c:	00050540 	call	10005054 <__mulsi3>
10014170:	8085883a 	add	r2,r16,r2
10014174:	e0fffe17 	ldw	r3,-8(fp)
10014178:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1001417c:	d0e00a17 	ldw	r3,-32728(gp)
10014180:	e0bffc17 	ldw	r2,-16(fp)
10014184:	1880020e 	bge	r3,r2,10014190 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
10014188:	e0bffc17 	ldw	r2,-16(fp)
1001418c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
10014190:	e0bffc17 	ldw	r2,-16(fp)
10014194:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10014198:	00000606 	br	100141b4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1001419c:	e0bffc17 	ldw	r2,-16(fp)
100141a0:	10800044 	addi	r2,r2,1
100141a4:	e0bffc15 	stw	r2,-16(fp)
100141a8:	e0bffc17 	ldw	r2,-16(fp)
100141ac:	10800810 	cmplti	r2,r2,32
100141b0:	103fe01e 	bne	r2,zero,10014134 <__alt_data_end+0xf8014134>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
100141b4:	e0bffd17 	ldw	r2,-12(fp)
}
100141b8:	e6ffff04 	addi	sp,fp,-4
100141bc:	dfc00217 	ldw	ra,8(sp)
100141c0:	df000117 	ldw	fp,4(sp)
100141c4:	dc000017 	ldw	r16,0(sp)
100141c8:	dec00304 	addi	sp,sp,12
100141cc:	f800283a 	ret

100141d0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
100141d0:	defffe04 	addi	sp,sp,-8
100141d4:	df000115 	stw	fp,4(sp)
100141d8:	df000104 	addi	fp,sp,4
100141dc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
100141e0:	e0bfff17 	ldw	r2,-4(fp)
100141e4:	10bffe84 	addi	r2,r2,-6
100141e8:	10c00428 	cmpgeui	r3,r2,16
100141ec:	18001a1e 	bne	r3,zero,10014258 <alt_exception_cause_generated_bad_addr+0x88>
100141f0:	100690ba 	slli	r3,r2,2
100141f4:	00840074 	movhi	r2,4097
100141f8:	10908204 	addi	r2,r2,16904
100141fc:	1885883a 	add	r2,r3,r2
10014200:	10800017 	ldw	r2,0(r2)
10014204:	1000683a 	jmp	r2
10014208:	10014248 	cmpgei	zero,r2,1289
1001420c:	10014248 	cmpgei	zero,r2,1289
10014210:	10014258 	cmpnei	zero,r2,1289
10014214:	10014258 	cmpnei	zero,r2,1289
10014218:	10014258 	cmpnei	zero,r2,1289
1001421c:	10014248 	cmpgei	zero,r2,1289
10014220:	10014250 	cmplti	zero,r2,1289
10014224:	10014258 	cmpnei	zero,r2,1289
10014228:	10014248 	cmpgei	zero,r2,1289
1001422c:	10014248 	cmpgei	zero,r2,1289
10014230:	10014258 	cmpnei	zero,r2,1289
10014234:	10014248 	cmpgei	zero,r2,1289
10014238:	10014250 	cmplti	zero,r2,1289
1001423c:	10014258 	cmpnei	zero,r2,1289
10014240:	10014258 	cmpnei	zero,r2,1289
10014244:	10014248 	cmpgei	zero,r2,1289
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10014248:	00800044 	movi	r2,1
1001424c:	00000306 	br	1001425c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10014250:	0005883a 	mov	r2,zero
10014254:	00000106 	br	1001425c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10014258:	0005883a 	mov	r2,zero
  }
}
1001425c:	e037883a 	mov	sp,fp
10014260:	df000017 	ldw	fp,0(sp)
10014264:	dec00104 	addi	sp,sp,4
10014268:	f800283a 	ret

1001426c <atexit>:
1001426c:	200b883a 	mov	r5,r4
10014270:	000f883a 	mov	r7,zero
10014274:	000d883a 	mov	r6,zero
10014278:	0009883a 	mov	r4,zero
1001427c:	00143341 	jmpi	10014334 <__register_exitproc>

10014280 <exit>:
10014280:	defffe04 	addi	sp,sp,-8
10014284:	000b883a 	mov	r5,zero
10014288:	dc000015 	stw	r16,0(sp)
1001428c:	dfc00115 	stw	ra,4(sp)
10014290:	2021883a 	mov	r16,r4
10014294:	001444c0 	call	1001444c <__call_exitprocs>
10014298:	008400b4 	movhi	r2,4098
1001429c:	108a1104 	addi	r2,r2,10308
100142a0:	11000017 	ldw	r4,0(r2)
100142a4:	20800f17 	ldw	r2,60(r4)
100142a8:	10000126 	beq	r2,zero,100142b0 <exit+0x30>
100142ac:	103ee83a 	callr	r2
100142b0:	8009883a 	mov	r4,r16
100142b4:	00145cc0 	call	100145cc <_exit>

100142b8 <memcmp>:
100142b8:	01c000c4 	movi	r7,3
100142bc:	3980192e 	bgeu	r7,r6,10014324 <memcmp+0x6c>
100142c0:	2144b03a 	or	r2,r4,r5
100142c4:	11c4703a 	and	r2,r2,r7
100142c8:	10000f26 	beq	r2,zero,10014308 <memcmp+0x50>
100142cc:	20800003 	ldbu	r2,0(r4)
100142d0:	28c00003 	ldbu	r3,0(r5)
100142d4:	10c0151e 	bne	r2,r3,1001432c <memcmp+0x74>
100142d8:	31bfff84 	addi	r6,r6,-2
100142dc:	01ffffc4 	movi	r7,-1
100142e0:	00000406 	br	100142f4 <memcmp+0x3c>
100142e4:	20800003 	ldbu	r2,0(r4)
100142e8:	28c00003 	ldbu	r3,0(r5)
100142ec:	31bfffc4 	addi	r6,r6,-1
100142f0:	10c00e1e 	bne	r2,r3,1001432c <memcmp+0x74>
100142f4:	21000044 	addi	r4,r4,1
100142f8:	29400044 	addi	r5,r5,1
100142fc:	31fff91e 	bne	r6,r7,100142e4 <__alt_data_end+0xf80142e4>
10014300:	0005883a 	mov	r2,zero
10014304:	f800283a 	ret
10014308:	20c00017 	ldw	r3,0(r4)
1001430c:	28800017 	ldw	r2,0(r5)
10014310:	18bfee1e 	bne	r3,r2,100142cc <__alt_data_end+0xf80142cc>
10014314:	31bfff04 	addi	r6,r6,-4
10014318:	21000104 	addi	r4,r4,4
1001431c:	29400104 	addi	r5,r5,4
10014320:	39bff936 	bltu	r7,r6,10014308 <__alt_data_end+0xf8014308>
10014324:	303fe91e 	bne	r6,zero,100142cc <__alt_data_end+0xf80142cc>
10014328:	003ff506 	br	10014300 <__alt_data_end+0xf8014300>
1001432c:	10c5c83a 	sub	r2,r2,r3
10014330:	f800283a 	ret

10014334 <__register_exitproc>:
10014334:	defffa04 	addi	sp,sp,-24
10014338:	dc000315 	stw	r16,12(sp)
1001433c:	040400b4 	movhi	r16,4098
10014340:	840a1104 	addi	r16,r16,10308
10014344:	80c00017 	ldw	r3,0(r16)
10014348:	dc400415 	stw	r17,16(sp)
1001434c:	dfc00515 	stw	ra,20(sp)
10014350:	18805217 	ldw	r2,328(r3)
10014354:	2023883a 	mov	r17,r4
10014358:	10003726 	beq	r2,zero,10014438 <__register_exitproc+0x104>
1001435c:	10c00117 	ldw	r3,4(r2)
10014360:	010007c4 	movi	r4,31
10014364:	20c00e16 	blt	r4,r3,100143a0 <__register_exitproc+0x6c>
10014368:	1a000044 	addi	r8,r3,1
1001436c:	8800221e 	bne	r17,zero,100143f8 <__register_exitproc+0xc4>
10014370:	18c00084 	addi	r3,r3,2
10014374:	18c7883a 	add	r3,r3,r3
10014378:	18c7883a 	add	r3,r3,r3
1001437c:	12000115 	stw	r8,4(r2)
10014380:	10c7883a 	add	r3,r2,r3
10014384:	19400015 	stw	r5,0(r3)
10014388:	0005883a 	mov	r2,zero
1001438c:	dfc00517 	ldw	ra,20(sp)
10014390:	dc400417 	ldw	r17,16(sp)
10014394:	dc000317 	ldw	r16,12(sp)
10014398:	dec00604 	addi	sp,sp,24
1001439c:	f800283a 	ret
100143a0:	00800034 	movhi	r2,0
100143a4:	10800004 	addi	r2,r2,0
100143a8:	10002626 	beq	r2,zero,10014444 <__register_exitproc+0x110>
100143ac:	01006404 	movi	r4,400
100143b0:	d9400015 	stw	r5,0(sp)
100143b4:	d9800115 	stw	r6,4(sp)
100143b8:	d9c00215 	stw	r7,8(sp)
100143bc:	00000000 	call	10000000 <__alt_mem_sdram>
100143c0:	d9400017 	ldw	r5,0(sp)
100143c4:	d9800117 	ldw	r6,4(sp)
100143c8:	d9c00217 	ldw	r7,8(sp)
100143cc:	10001d26 	beq	r2,zero,10014444 <__register_exitproc+0x110>
100143d0:	81000017 	ldw	r4,0(r16)
100143d4:	10000115 	stw	zero,4(r2)
100143d8:	02000044 	movi	r8,1
100143dc:	22405217 	ldw	r9,328(r4)
100143e0:	0007883a 	mov	r3,zero
100143e4:	12400015 	stw	r9,0(r2)
100143e8:	20805215 	stw	r2,328(r4)
100143ec:	10006215 	stw	zero,392(r2)
100143f0:	10006315 	stw	zero,396(r2)
100143f4:	883fde26 	beq	r17,zero,10014370 <__alt_data_end+0xf8014370>
100143f8:	18c9883a 	add	r4,r3,r3
100143fc:	2109883a 	add	r4,r4,r4
10014400:	1109883a 	add	r4,r2,r4
10014404:	21802215 	stw	r6,136(r4)
10014408:	01800044 	movi	r6,1
1001440c:	12406217 	ldw	r9,392(r2)
10014410:	30cc983a 	sll	r6,r6,r3
10014414:	4992b03a 	or	r9,r9,r6
10014418:	12406215 	stw	r9,392(r2)
1001441c:	21c04215 	stw	r7,264(r4)
10014420:	01000084 	movi	r4,2
10014424:	893fd21e 	bne	r17,r4,10014370 <__alt_data_end+0xf8014370>
10014428:	11006317 	ldw	r4,396(r2)
1001442c:	218cb03a 	or	r6,r4,r6
10014430:	11806315 	stw	r6,396(r2)
10014434:	003fce06 	br	10014370 <__alt_data_end+0xf8014370>
10014438:	18805304 	addi	r2,r3,332
1001443c:	18805215 	stw	r2,328(r3)
10014440:	003fc606 	br	1001435c <__alt_data_end+0xf801435c>
10014444:	00bfffc4 	movi	r2,-1
10014448:	003fd006 	br	1001438c <__alt_data_end+0xf801438c>

1001444c <__call_exitprocs>:
1001444c:	defff504 	addi	sp,sp,-44
10014450:	df000915 	stw	fp,36(sp)
10014454:	dd400615 	stw	r21,24(sp)
10014458:	dc800315 	stw	r18,12(sp)
1001445c:	dfc00a15 	stw	ra,40(sp)
10014460:	ddc00815 	stw	r23,32(sp)
10014464:	dd800715 	stw	r22,28(sp)
10014468:	dd000515 	stw	r20,20(sp)
1001446c:	dcc00415 	stw	r19,16(sp)
10014470:	dc400215 	stw	r17,8(sp)
10014474:	dc000115 	stw	r16,4(sp)
10014478:	d9000015 	stw	r4,0(sp)
1001447c:	2839883a 	mov	fp,r5
10014480:	04800044 	movi	r18,1
10014484:	057fffc4 	movi	r21,-1
10014488:	008400b4 	movhi	r2,4098
1001448c:	108a1104 	addi	r2,r2,10308
10014490:	12000017 	ldw	r8,0(r2)
10014494:	45005217 	ldw	r20,328(r8)
10014498:	44c05204 	addi	r19,r8,328
1001449c:	a0001c26 	beq	r20,zero,10014510 <__call_exitprocs+0xc4>
100144a0:	a0800117 	ldw	r2,4(r20)
100144a4:	15ffffc4 	addi	r23,r2,-1
100144a8:	b8000d16 	blt	r23,zero,100144e0 <__call_exitprocs+0x94>
100144ac:	14000044 	addi	r16,r2,1
100144b0:	8421883a 	add	r16,r16,r16
100144b4:	8421883a 	add	r16,r16,r16
100144b8:	84402004 	addi	r17,r16,128
100144bc:	a463883a 	add	r17,r20,r17
100144c0:	a421883a 	add	r16,r20,r16
100144c4:	e0001e26 	beq	fp,zero,10014540 <__call_exitprocs+0xf4>
100144c8:	80804017 	ldw	r2,256(r16)
100144cc:	e0801c26 	beq	fp,r2,10014540 <__call_exitprocs+0xf4>
100144d0:	bdffffc4 	addi	r23,r23,-1
100144d4:	843fff04 	addi	r16,r16,-4
100144d8:	8c7fff04 	addi	r17,r17,-4
100144dc:	bd7ff91e 	bne	r23,r21,100144c4 <__alt_data_end+0xf80144c4>
100144e0:	00800034 	movhi	r2,0
100144e4:	10800004 	addi	r2,r2,0
100144e8:	10000926 	beq	r2,zero,10014510 <__call_exitprocs+0xc4>
100144ec:	a0800117 	ldw	r2,4(r20)
100144f0:	1000301e 	bne	r2,zero,100145b4 <__call_exitprocs+0x168>
100144f4:	a0800017 	ldw	r2,0(r20)
100144f8:	10003226 	beq	r2,zero,100145c4 <__call_exitprocs+0x178>
100144fc:	a009883a 	mov	r4,r20
10014500:	98800015 	stw	r2,0(r19)
10014504:	00000000 	call	10000000 <__alt_mem_sdram>
10014508:	9d000017 	ldw	r20,0(r19)
1001450c:	a03fe41e 	bne	r20,zero,100144a0 <__alt_data_end+0xf80144a0>
10014510:	dfc00a17 	ldw	ra,40(sp)
10014514:	df000917 	ldw	fp,36(sp)
10014518:	ddc00817 	ldw	r23,32(sp)
1001451c:	dd800717 	ldw	r22,28(sp)
10014520:	dd400617 	ldw	r21,24(sp)
10014524:	dd000517 	ldw	r20,20(sp)
10014528:	dcc00417 	ldw	r19,16(sp)
1001452c:	dc800317 	ldw	r18,12(sp)
10014530:	dc400217 	ldw	r17,8(sp)
10014534:	dc000117 	ldw	r16,4(sp)
10014538:	dec00b04 	addi	sp,sp,44
1001453c:	f800283a 	ret
10014540:	a0800117 	ldw	r2,4(r20)
10014544:	80c00017 	ldw	r3,0(r16)
10014548:	10bfffc4 	addi	r2,r2,-1
1001454c:	15c01426 	beq	r2,r23,100145a0 <__call_exitprocs+0x154>
10014550:	80000015 	stw	zero,0(r16)
10014554:	183fde26 	beq	r3,zero,100144d0 <__alt_data_end+0xf80144d0>
10014558:	95c8983a 	sll	r4,r18,r23
1001455c:	a0806217 	ldw	r2,392(r20)
10014560:	a5800117 	ldw	r22,4(r20)
10014564:	2084703a 	and	r2,r4,r2
10014568:	10000b26 	beq	r2,zero,10014598 <__call_exitprocs+0x14c>
1001456c:	a0806317 	ldw	r2,396(r20)
10014570:	2088703a 	and	r4,r4,r2
10014574:	20000c1e 	bne	r4,zero,100145a8 <__call_exitprocs+0x15c>
10014578:	89400017 	ldw	r5,0(r17)
1001457c:	d9000017 	ldw	r4,0(sp)
10014580:	183ee83a 	callr	r3
10014584:	a0800117 	ldw	r2,4(r20)
10014588:	15bfbf1e 	bne	r2,r22,10014488 <__alt_data_end+0xf8014488>
1001458c:	98800017 	ldw	r2,0(r19)
10014590:	153fcf26 	beq	r2,r20,100144d0 <__alt_data_end+0xf80144d0>
10014594:	003fbc06 	br	10014488 <__alt_data_end+0xf8014488>
10014598:	183ee83a 	callr	r3
1001459c:	003ff906 	br	10014584 <__alt_data_end+0xf8014584>
100145a0:	a5c00115 	stw	r23,4(r20)
100145a4:	003feb06 	br	10014554 <__alt_data_end+0xf8014554>
100145a8:	89000017 	ldw	r4,0(r17)
100145ac:	183ee83a 	callr	r3
100145b0:	003ff406 	br	10014584 <__alt_data_end+0xf8014584>
100145b4:	a0800017 	ldw	r2,0(r20)
100145b8:	a027883a 	mov	r19,r20
100145bc:	1029883a 	mov	r20,r2
100145c0:	003fb606 	br	1001449c <__alt_data_end+0xf801449c>
100145c4:	0005883a 	mov	r2,zero
100145c8:	003ffb06 	br	100145b8 <__alt_data_end+0xf80145b8>

100145cc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100145cc:	defffd04 	addi	sp,sp,-12
100145d0:	df000215 	stw	fp,8(sp)
100145d4:	df000204 	addi	fp,sp,8
100145d8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
100145dc:	0001883a 	nop
100145e0:	e0bfff17 	ldw	r2,-4(fp)
100145e4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
100145e8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
100145ec:	10000226 	beq	r2,zero,100145f8 <_exit+0x2c>
    ALT_SIM_FAIL();
100145f0:	002af070 	cmpltui	zero,zero,43969
100145f4:	00000106 	br	100145fc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
100145f8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
100145fc:	003fff06 	br	100145fc <__alt_data_end+0xf80145fc>
